
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	6410006f          	j	ebc <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	6410006f          	j	ec0 <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	6390006f          	j	ebc <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	6350006f          	j	ebc <default_exc_handler>

Disassembly of section .text:

0000008c <instr_add>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      8c:	06b5750b          	0x6b5750b

    );
    return;


}
      90:	8082                	ret

00000092 <array_add>:
void array_add(int *a1, int *a2, int length) {
int i =0;
    switch(length%3) {
      92:	470d                	li	a4,3
      94:	02e667b3          	rem	a5,a2,a4
      98:	4685                	li	a3,1
      9a:	02d78f63          	beq	a5,a3,d8 <array_add+0x46>
      9e:	4689                	li	a3,2
      a0:	00d78963          	beq	a5,a3,b2 <array_add+0x20>
      a4:	ebb1                	bnez	a5,f8 <array_add+0x66>

        case 0:
            for (i = 0; i < (length / 3); i++) {
      a6:	02e64633          	div	a2,a2,a4
      aa:	4831                	li	a6,12
      ac:	04c7c763          	blt	a5,a2,fa <array_add+0x68>
      b0:	8082                	ret
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
            }
            a1[length-1] = a1[length-1] + a2[length-1];
	    break;      
	case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	ffe60693          	addi	a3,a2,-2
      b6:	02e6c6b3          	div	a3,a3,a4
      ba:	4781                	li	a5,0
      bc:	48b1                	li	a7,12
      be:	06d7c063          	blt	a5,a3,11e <array_add+0x8c>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
            }
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	060a                	slli	a2,a2,0x2
      c4:	1671                	addi	a2,a2,-4
      c6:	00c50733          	add	a4,a0,a2
      ca:	00c586b3          	add	a3,a1,a2
      ce:	431c                	lw	a5,0(a4)
      d0:	4294                	lw	a3,0(a3)
      d2:	97b6                	add	a5,a5,a3
      d4:	c31c                	sw	a5,0(a4)
      d6:	a811                	j	ea <array_add+0x58>
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	fff60693          	addi	a3,a2,-1
      dc:	02e6c6b3          	div	a3,a3,a4
      e0:	4781                	li	a5,0
      e2:	48b1                	li	a7,12
      e4:	02d7c463          	blt	a5,a3,10c <array_add+0x7a>
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	060a                	slli	a2,a2,0x2
            a1[length-2] = a1[length-2] + a2[length-2];
      ea:	1671                	addi	a2,a2,-4
      ec:	9532                	add	a0,a0,a2
      ee:	962e                	add	a2,a2,a1
      f0:	411c                	lw	a5,0(a0)
      f2:	4218                	lw	a4,0(a2)
      f4:	97ba                	add	a5,a5,a4
      f6:	c11c                	sw	a5,0(a0)
	    break;
    } //end of switch case
} //end of function
      f8:	8082                	ret
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fa:	03078733          	mul	a4,a5,a6
    asm volatile(
      fe:	00e506b3          	add	a3,a0,a4
     102:	972e                	add	a4,a4,a1
     104:	06e6f70b          	0x6e6f70b
            for (i = 0; i < (length / 3); i++) {
     108:	0785                	addi	a5,a5,1
     10a:	b74d                	j	ac <array_add+0x1a>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     10c:	03178733          	mul	a4,a5,a7
    asm volatile(
     110:	00e50833          	add	a6,a0,a4
     114:	972e                	add	a4,a4,a1
     116:	06e8770b          	0x6e8770b
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	0785                	addi	a5,a5,1
     11c:	b7e1                	j	e4 <array_add+0x52>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	03178733          	mul	a4,a5,a7
    asm volatile(
     122:	00e50833          	add	a6,a0,a4
     126:	972e                	add	a4,a4,a1
     128:	06e8770b          	0x6e8770b
            for (i = 0; i < ((length-2) / 3); i++) {
     12c:	0785                	addi	a5,a5,1
     12e:	bf41                	j	be <array_add+0x2c>

00000130 <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
     130:	0ab5750b          	0xab5750b
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;

}
     134:	8082                	ret

00000136 <array_equ>:
void array_equ(int *a1,int *a2,int length) {
int i = 0;
    switch(length%3) {
     136:	470d                	li	a4,3
     138:	02e667b3          	rem	a5,a2,a4
     13c:	4685                	li	a3,1
     13e:	02d78d63          	beq	a5,a3,178 <array_equ+0x42>
     142:	4689                	li	a3,2
     144:	00d78963          	beq	a5,a3,156 <array_equ+0x20>
     148:	e7b1                	bnez	a5,194 <array_equ+0x5e>

        case 0:
            for (i = 0; i < (length / 3); i++) {
     14a:	02e64633          	div	a2,a2,a4
     14e:	4831                	li	a6,12
     150:	04c7c363          	blt	a5,a2,196 <array_equ+0x60>
     154:	8082                	ret
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
            }
            a1[length-1] = a2[length-1];
	    break;
        case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
     156:	ffe60693          	addi	a3,a2,-2
     15a:	02e6c6b3          	div	a3,a3,a4
     15e:	4781                	li	a5,0
     160:	48b1                	li	a7,12
     162:	04d7cc63          	blt	a5,a3,1ba <array_equ+0x84>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
            }
            a1[length-1] = a2[length-1];
     166:	060a                	slli	a2,a2,0x2
     168:	1671                	addi	a2,a2,-4
     16a:	00c587b3          	add	a5,a1,a2
     16e:	4398                	lw	a4,0(a5)
     170:	00c507b3          	add	a5,a0,a2
     174:	c398                	sw	a4,0(a5)
     176:	a811                	j	18a <array_equ+0x54>
            for (i = 0; i < ((length-1) / 3); i++) {
     178:	fff60693          	addi	a3,a2,-1
     17c:	02e6c6b3          	div	a3,a3,a4
     180:	4781                	li	a5,0
     182:	48b1                	li	a7,12
     184:	02d7c263          	blt	a5,a3,1a8 <array_equ+0x72>
            a1[length-1] = a2[length-1];
     188:	060a                	slli	a2,a2,0x2
            a1[length-2] = a2[length-2];
     18a:	1671                	addi	a2,a2,-4
     18c:	95b2                	add	a1,a1,a2
     18e:	419c                	lw	a5,0(a1)
     190:	962a                	add	a2,a2,a0
     192:	c21c                	sw	a5,0(a2)
	    break;
    } //end of switch case
} //end of function
     194:	8082                	ret
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     196:	03078733          	mul	a4,a5,a6
    asm volatile(
     19a:	00e506b3          	add	a3,a0,a4
     19e:	972e                	add	a4,a4,a1
     1a0:	0ae6f70b          	0xae6f70b
            for (i = 0; i < (length / 3); i++) {
     1a4:	0785                	addi	a5,a5,1
     1a6:	b76d                	j	150 <array_equ+0x1a>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1a8:	03178733          	mul	a4,a5,a7
    asm volatile(
     1ac:	00e50833          	add	a6,a0,a4
     1b0:	972e                	add	a4,a4,a1
     1b2:	0ae8770b          	0xae8770b
            for (i = 0; i < ((length-1) / 3); i++) {
     1b6:	0785                	addi	a5,a5,1
     1b8:	b7f1                	j	184 <array_equ+0x4e>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1ba:	03178733          	mul	a4,a5,a7
    asm volatile(
     1be:	00e50833          	add	a6,a0,a4
     1c2:	972e                	add	a4,a4,a1
     1c4:	0ae8770b          	0xae8770b
            for (i = 0; i < ((length-2) / 3); i++) {
     1c8:	0785                	addi	a5,a5,1
     1ca:	bf61                	j	162 <array_equ+0x2c>

000001cc <polymult>:

/////////////////////////////////////////////////



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1cc:	715d                	addi	sp,sp,-80
     1ce:	c0ca                	sw	s2,64(sp)
     1d0:	8936                	mv	s2,a3
     1d2:	de4e                	sw	s3,60(sp)


    int line[size_b][size_a + size_b];
     1d4:	96ae                	add	a3,a3,a1
     1d6:	00291993          	slli	s3,s2,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1da:	dc52                	sw	s4,56(sp)
     1dc:	d06a                	sw	s10,32(sp)
    int line[size_b][size_a + size_b];
     1de:	fff68a13          	addi	s4,a3,-1
     1e2:	00269d13          	slli	s10,a3,0x2
     1e6:	033686b3          	mul	a3,a3,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ea:	c4a2                	sw	s0,72(sp)
     1ec:	c2a6                	sw	s1,68(sp)
     1ee:	da56                	sw	s5,52(sp)
     1f0:	d85a                	sw	s6,48(sp)
     1f2:	d65e                	sw	s7,44(sp)
     1f4:	d462                	sw	s8,40(sp)
     1f6:	d266                	sw	s9,36(sp)
     1f8:	ce6e                	sw	s11,28(sp)
     1fa:	0880                	addi	s0,sp,80
     1fc:	c686                	sw	ra,76(sp)
     1fe:	faf42e23          	sw	a5,-68(s0)
    int line[size_b][size_a + size_b];
     202:	06bd                	addi	a3,a3,15
    int i,j,k;
    int *return_address1;
    int pola[size_a];
     204:	00259793          	slli	a5,a1,0x2
    int line[size_b][size_a + size_b];
     208:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
     20a:	07bd                	addi	a5,a5,15
    int line[size_b][size_a + size_b];
     20c:	40d10133          	sub	sp,sp,a3
    int pola[size_a];
     210:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     212:	8b8a                	mv	s7,sp
    int pola[size_a];
     214:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     218:	00f98793          	addi	a5,s3,15
     21c:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     21e:	8c0a                	mv	s8,sp
    int polb[size_b];
     220:	40f10133          	sub	sp,sp,a5
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     224:	88b2                	mv	a7,a2
     226:	882e                	mv	a6,a1
     228:	8cba                	mv	s9,a4
    int line[size_b][size_a + size_b];
     22a:	fff90d93          	addi	s11,s2,-1
    int pola[size_a];
     22e:	fff58b13          	addi	s6,a1,-1
    int polb[size_b];
     232:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     234:	8ade                	mv	s5,s7
     236:	865e                	mv	a2,s7
     238:	4681                	li	a3,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product[j] = 0;
     23a:	00001e17          	auipc	t3,0x1
     23e:	13ae0e13          	addi	t3,t3,314 # 1374 <_bss_start>
    for (i = 0; i < size_b; ++i){
     242:	0726c663          	blt	a3,s2,2ae <polymult+0xe2>
        }
    }

    array_equ(pola,a,size_a);
     246:	8642                	mv	a2,a6
     248:	85aa                	mv	a1,a0
     24a:	8562                	mv	a0,s8
     24c:	fb142a23          	sw	a7,-76(s0)
     250:	fb042c23          	sw	a6,-72(s0)
     254:	35cd                	jal	136 <array_equ>
    // make mod calculations
    for (i = 0; i < size_a; ++i){
     256:	fb842803          	lw	a6,-72(s0)
     25a:	fb442883          	lw	a7,-76(s0)
     25e:	86e2                	mv	a3,s8
     260:	4601                	li	a2,0
     262:	05064b63          	blt	a2,a6,2b8 <polymult+0xec>
            pola[i] = pola[i] + mod;
        }
        pola[i] = pola[i] % mod;
    }

    array_equ(polb,b,size_b);
     266:	864a                	mv	a2,s2
     268:	85c6                	mv	a1,a7
     26a:	8526                	mv	a0,s1
     26c:	35e9                	jal	136 <array_equ>

   for (i = 0; i < size_b; ++i){
     26e:	86a6                	mv	a3,s1
     270:	4601                	li	a2,0
     272:	05264f63          	blt	a2,s2,2d0 <polymult+0x104>
    }



    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     276:	fbc42703          	lw	a4,-68(s0)
     27a:	4785                	li	a5,1
     27c:	94ce                	add	s1,s1,s3
     27e:	06f70363          	beq	a4,a5,2e4 <polymult+0x118>
     282:	19f1                	addi	s3,s3,-4
     284:	ffcd0613          	addi	a2,s10,-4
     288:	99de                	add	s3,s3,s7
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     28a:	060dc063          	bltz	s11,2ea <polymult+0x11e>
            for (k = size_a-1; k >= 0; k = k-1 ){
     28e:	87da                	mv	a5,s6
     290:	a0dd                	j	376 <polymult+0x1aa>
            product[j] = 0;
     292:	00279313          	slli	t1,a5,0x2
     296:	9372                	add	t1,t1,t3
            line[i][j] = 0;
     298:	0005a023          	sw	zero,0(a1)
            product[j] = 0;
     29c:	00032023          	sw	zero,0(t1)
        for(j = 0; j < size_a + size_b -1; ++j){
     2a0:	0785                	addi	a5,a5,1
     2a2:	0591                	addi	a1,a1,4
     2a4:	ff47c7e3          	blt	a5,s4,292 <polymult+0xc6>
    for (i = 0; i < size_b; ++i){
     2a8:	0685                	addi	a3,a3,1
     2aa:	966a                	add	a2,a2,s10
     2ac:	bf59                	j	242 <polymult+0x76>
     2ae:	85b2                	mv	a1,a2
        for(j = 0; j < size_a + size_b -1; ++j){
     2b0:	4781                	li	a5,0
     2b2:	bfcd                	j	2a4 <polymult+0xd8>
            pola[i] = pola[i] + mod;
     2b4:	97e6                	add	a5,a5,s9
     2b6:	c29c                	sw	a5,0(a3)
        while (pola[i] < 0){
     2b8:	429c                	lw	a5,0(a3)
     2ba:	fe07cde3          	bltz	a5,2b4 <polymult+0xe8>
        pola[i] = pola[i] % mod;
     2be:	0397e7b3          	rem	a5,a5,s9
    for (i = 0; i < size_a; ++i){
     2c2:	0605                	addi	a2,a2,1
     2c4:	0691                	addi	a3,a3,4
        pola[i] = pola[i] % mod;
     2c6:	fef6ae23          	sw	a5,-4(a3)
    for (i = 0; i < size_a; ++i){
     2ca:	bf61                	j	262 <polymult+0x96>
            polb[i] = polb[i] + mod;
     2cc:	97e6                	add	a5,a5,s9
     2ce:	c29c                	sw	a5,0(a3)
        while (polb[i] < 0){
     2d0:	429c                	lw	a5,0(a3)
     2d2:	fe07cde3          	bltz	a5,2cc <polymult+0x100>
        polb[i] = polb[i] % mod;
     2d6:	0397e7b3          	rem	a5,a5,s9
   for (i = 0; i < size_b; ++i){
     2da:	0605                	addi	a2,a2,1
     2dc:	0691                	addi	a3,a3,4
        polb[i] = polb[i] % mod;
     2de:	fef6ae23          	sw	a5,-4(a3)
   for (i = 0; i < size_b; ++i){
     2e2:	bf41                	j	272 <polymult+0xa6>
    if(star_mult == 1){
     2e4:	865e                	mv	a2,s7
        for (j = size_b -1; j >= 0; j = j-1){
     2e6:	060dda63          	bgez	s11,35a <polymult+0x18e>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
     2ea:	4701                	li	a4,0
    for (i = 0; i < size_b; ++i){
     2ec:	0b274763          	blt	a4,s2,39a <polymult+0x1ce>
        }
    }

    // construct product
  //  for(j = 0; j < size_a + size_b -1; ++j){
        for(i = 0; i < size_b; ++i){
     2f0:	4481                	li	s1,0
             array_add(product,line[i],size_a+size_b-1);
     2f2:	00001997          	auipc	s3,0x1
     2f6:	08298993          	addi	s3,s3,130 # 1374 <_bss_start>
        for(i = 0; i < size_b; ++i){
     2fa:	0b24c363          	blt	s1,s2,3a0 <polymult+0x1d4>
     2fe:	00001797          	auipc	a5,0x1
     302:	07678793          	addi	a5,a5,118 # 1374 <_bss_start>
        }
   // }

    //mod calculations
    for(j = 0; j < size_a + size_b -1; ++j){
     306:	4701                	li	a4,0
     308:	0b474363          	blt	a4,s4,3ae <polymult+0x1e2>


    return_address1 = &product[0];

    return return_address1;
}
     30c:	fb040113          	addi	sp,s0,-80
     310:	40b6                	lw	ra,76(sp)
     312:	4426                	lw	s0,72(sp)
     314:	4496                	lw	s1,68(sp)
     316:	4906                	lw	s2,64(sp)
     318:	59f2                	lw	s3,60(sp)
     31a:	5a62                	lw	s4,56(sp)
     31c:	5ad2                	lw	s5,52(sp)
     31e:	5b42                	lw	s6,48(sp)
     320:	5bb2                	lw	s7,44(sp)
     322:	5c22                	lw	s8,40(sp)
     324:	5c92                	lw	s9,36(sp)
     326:	5d02                	lw	s10,32(sp)
     328:	4df2                	lw	s11,28(sp)
     32a:	00001517          	auipc	a0,0x1
     32e:	04a50513          	addi	a0,a0,74 # 1374 <_bss_start>
     332:	6161                	addi	sp,sp,80
     334:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     336:	00279693          	slli	a3,a5,0x2
     33a:	00d605b3          	add	a1,a2,a3
     33e:	96e2                	add	a3,a3,s8
     340:	4294                	lw	a3,0(a3)
     342:	ffc4a503          	lw	a0,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     346:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     348:	02a686b3          	mul	a3,a3,a0
     34c:	c194                	sw	a3,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     34e:	fe07d4e3          	bgez	a5,336 <polymult+0x16a>
        for (j = size_b -1; j >= 0; j = j-1){
     352:	1dfd                	addi	s11,s11,-1
     354:	14f1                	addi	s1,s1,-4
     356:	966a                	add	a2,a2,s10
     358:	b779                	j	2e6 <polymult+0x11a>
            for (k = size_a-1; k >= 0; k = k-1 ){
     35a:	87da                	mv	a5,s6
     35c:	bfcd                	j	34e <polymult+0x182>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     35e:	00279693          	slli	a3,a5,0x2
     362:	00d985b3          	add	a1,s3,a3
     366:	96e2                	add	a3,a3,s8
     368:	4294                	lw	a3,0(a3)
     36a:	ffc4a503          	lw	a0,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     36e:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     370:	02a686b3          	mul	a3,a3,a0
     374:	c194                	sw	a3,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     376:	fe07d4e3          	bgez	a5,35e <polymult+0x192>
        for (j = size_b -1; j >= 0; j = j-1){
     37a:	1dfd                	addi	s11,s11,-1
     37c:	14f1                	addi	s1,s1,-4
     37e:	99b2                	add	s3,s3,a2
     380:	b729                	j	28a <polymult+0xbe>
            line[i][j] = line[i][j] % mod;
     382:	4390                	lw	a2,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     384:	0685                	addi	a3,a3,1
     386:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
     388:	03966633          	rem	a2,a2,s9
     38c:	fec7ae23          	sw	a2,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     390:	ff46c9e3          	blt	a3,s4,382 <polymult+0x1b6>
    for (i = 0; i < size_b; ++i){
     394:	0705                	addi	a4,a4,1
     396:	9bea                	add	s7,s7,s10
     398:	bf91                	j	2ec <polymult+0x120>
     39a:	87de                	mv	a5,s7
        for(j = 0; j < size_a + size_b -1; ++j){
     39c:	4681                	li	a3,0
     39e:	bfcd                	j	390 <polymult+0x1c4>
             array_add(product,line[i],size_a+size_b-1);
     3a0:	85d6                	mv	a1,s5
     3a2:	8652                	mv	a2,s4
     3a4:	854e                	mv	a0,s3
     3a6:	31f5                	jal	92 <array_add>
        for(i = 0; i < size_b; ++i){
     3a8:	0485                	addi	s1,s1,1
     3aa:	9aea                	add	s5,s5,s10
     3ac:	b7b9                	j	2fa <polymult+0x12e>
        product[j] = product[j] % mod;
     3ae:	4394                	lw	a3,0(a5)
    for(j = 0; j < size_a + size_b -1; ++j){
     3b0:	0705                	addi	a4,a4,1
     3b2:	0791                	addi	a5,a5,4
        product[j] = product[j] % mod;
     3b4:	0396e6b3          	rem	a3,a3,s9
     3b8:	fed7ae23          	sw	a3,-4(a5)
    for(j = 0; j < size_a + size_b -1; ++j){
     3bc:	b7b1                	j	308 <polymult+0x13c>

000003be <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3be:	715d                	addi	sp,sp,-80

    int line[size_b][size_a + size_b];
     3c0:	00d587b3          	add	a5,a1,a3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3c4:	d85a                	sw	s6,48(sp)
     3c6:	00269b13          	slli	s6,a3,0x2
     3ca:	de4e                	sw	s3,60(sp)
     3cc:	d65e                	sw	s7,44(sp)
    int line[size_b][size_a + size_b];
     3ce:	fff78993          	addi	s3,a5,-1
     3d2:	00279b93          	slli	s7,a5,0x2
     3d6:	036787b3          	mul	a5,a5,s6
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3da:	c4a2                	sw	s0,72(sp)
     3dc:	c2a6                	sw	s1,68(sp)
     3de:	c0ca                	sw	s2,64(sp)
     3e0:	dc52                	sw	s4,56(sp)
     3e2:	da56                	sw	s5,52(sp)
     3e4:	d462                	sw	s8,40(sp)
     3e6:	d266                	sw	s9,36(sp)
     3e8:	d06a                	sw	s10,32(sp)
     3ea:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
     3ec:	07bd                	addi	a5,a5,15
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3ee:	c686                	sw	ra,76(sp)
     3f0:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
     3f2:	9bc1                	andi	a5,a5,-16
     3f4:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     3f8:	00259793          	slli	a5,a1,0x2
     3fc:	07bd                	addi	a5,a5,15
     3fe:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     400:	890a                	mv	s2,sp
    int pola[size_a];
     402:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     406:	00fb0793          	addi	a5,s6,15
     40a:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     40c:	8d0a                	mv	s10,sp
    int polb[size_b];
     40e:	40f10133          	sub	sp,sp,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     412:	8a36                	mv	s4,a3
     414:	8dba                	mv	s11,a4
    int line[size_b][size_a + size_b];
     416:	fff68a93          	addi	s5,a3,-1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     41a:	8832                	mv	a6,a2
    int pola[size_a];
     41c:	fff58c13          	addi	s8,a1,-1
    int polb[size_b];
     420:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     422:	8cca                	mv	s9,s2
     424:	86ca                	mv	a3,s2
     426:	4701                	li	a4,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
     428:	00001317          	auipc	t1,0x1
     42c:	1a430313          	addi	t1,t1,420 # 15cc <product2>
    for (i = 0; i < size_b; ++i){
     430:	05474963          	blt	a4,s4,482 <polymult2+0xc4>

//    for(i = 0; i < size_a; ++i){
//        pola[i] = a[i];
//    }

    array_equ(pola,a,size_a);
     434:	862e                	mv	a2,a1
     436:	85aa                	mv	a1,a0
     438:	856a                	mv	a0,s10
     43a:	fb042e23          	sw	a6,-68(s0)
     43e:	39e5                	jal	136 <array_equ>

//    for(i = 0; i < size_b; ++i){
//        polb[i] = b[i];
//    }

    array_equ(polb,b,size_b);
     440:	fbc42803          	lw	a6,-68(s0)
     444:	8526                	mv	a0,s1
     446:	8652                	mv	a2,s4
     448:	85c2                	mv	a1,a6
     44a:	31f5                	jal	136 <array_equ>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     44c:	4785                	li	a5,1
     44e:	01648533          	add	a0,s1,s6
     452:	04fd8c63          	beq	s11,a5,4aa <polymult2+0xec>
     456:	1b71                	addi	s6,s6,-4
     458:	ffcb8693          	addi	a3,s7,-4
     45c:	995a                	add	s2,s2,s6
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     45e:	040ac863          	bltz	s5,4ae <polymult2+0xf0>
            for (k = size_a-1; k >= 0; k = k-1 ){
     462:	87e2                	mv	a5,s8
     464:	a879                	j	502 <polymult2+0x144>
            product2[j] = 0;
     466:	00279893          	slli	a7,a5,0x2
     46a:	989a                	add	a7,a7,t1
            line[i][j] = 0;
     46c:	00062023          	sw	zero,0(a2)
            product2[j] = 0;
     470:	0008a023          	sw	zero,0(a7)
        for(j = 0; j < size_a + size_b -1; ++j){
     474:	0785                	addi	a5,a5,1
     476:	0611                	addi	a2,a2,4
     478:	ff37c7e3          	blt	a5,s3,466 <polymult2+0xa8>
    for (i = 0; i < size_b; ++i){
     47c:	0705                	addi	a4,a4,1
     47e:	96de                	add	a3,a3,s7
     480:	bf45                	j	430 <polymult2+0x72>
     482:	8636                	mv	a2,a3
        for(j = 0; j < size_a + size_b -1; ++j){
     484:	4781                	li	a5,0
     486:	bfcd                	j	478 <polymult2+0xba>
                line[size_b-1-j][k] = pola[k]*polb[j];
     488:	00279713          	slli	a4,a5,0x2
     48c:	00e906b3          	add	a3,s2,a4
     490:	976a                	add	a4,a4,s10
     492:	4318                	lw	a4,0(a4)
     494:	ffc52603          	lw	a2,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     498:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     49a:	02c70733          	mul	a4,a4,a2
     49e:	c298                	sw	a4,0(a3)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a0:	fe07d4e3          	bgez	a5,488 <polymult2+0xca>
        for (j = size_b -1; j >= 0; j = j-1){
     4a4:	1afd                	addi	s5,s5,-1
     4a6:	1571                	addi	a0,a0,-4
     4a8:	995e                	add	s2,s2,s7
     4aa:	020ade63          	bgez	s5,4e6 <polymult2+0x128>
            for (k = size_a-1; k >= 0; k = k-1 ){
     4ae:	4481                	li	s1,0

    // construct product
    for(i=0;i<size_b;++i){
        //for(j=0;j<size_a+size_b-1;++j){
         //   product2[j] += line[i][j];
        array_add(product2,line[i],size_a+size_b-1);
     4b0:	00001917          	auipc	s2,0x1
     4b4:	11c90913          	addi	s2,s2,284 # 15cc <product2>
    for(i=0;i<size_b;++i){
     4b8:	0544cb63          	blt	s1,s4,50e <polymult2+0x150>
    }

    return_address2 = &product2[0];

    return return_address2;
}
     4bc:	fb040113          	addi	sp,s0,-80
     4c0:	40b6                	lw	ra,76(sp)
     4c2:	4426                	lw	s0,72(sp)
     4c4:	4496                	lw	s1,68(sp)
     4c6:	4906                	lw	s2,64(sp)
     4c8:	59f2                	lw	s3,60(sp)
     4ca:	5a62                	lw	s4,56(sp)
     4cc:	5ad2                	lw	s5,52(sp)
     4ce:	5b42                	lw	s6,48(sp)
     4d0:	5bb2                	lw	s7,44(sp)
     4d2:	5c22                	lw	s8,40(sp)
     4d4:	5c92                	lw	s9,36(sp)
     4d6:	5d02                	lw	s10,32(sp)
     4d8:	4df2                	lw	s11,28(sp)
     4da:	00001517          	auipc	a0,0x1
     4de:	0f250513          	addi	a0,a0,242 # 15cc <product2>
     4e2:	6161                	addi	sp,sp,80
     4e4:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
     4e6:	87e2                	mv	a5,s8
     4e8:	bf65                	j	4a0 <polymult2+0xe2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4ea:	00279713          	slli	a4,a5,0x2
     4ee:	00e90633          	add	a2,s2,a4
     4f2:	976a                	add	a4,a4,s10
     4f4:	4318                	lw	a4,0(a4)
     4f6:	ffc52583          	lw	a1,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4fa:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4fc:	02b70733          	mul	a4,a4,a1
     500:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     502:	fe07d4e3          	bgez	a5,4ea <polymult2+0x12c>
        for (j = size_b -1; j >= 0; j = j-1){
     506:	1afd                	addi	s5,s5,-1
     508:	1571                	addi	a0,a0,-4
     50a:	9936                	add	s2,s2,a3
     50c:	bf89                	j	45e <polymult2+0xa0>
        array_add(product2,line[i],size_a+size_b-1);
     50e:	85e6                	mv	a1,s9
     510:	864e                	mv	a2,s3
     512:	854a                	mv	a0,s2
     514:	3ebd                	jal	92 <array_add>
    for(i=0;i<size_b;++i){
     516:	0485                	addi	s1,s1,1
     518:	9cde                	add	s9,s9,s7
     51a:	bf79                	j	4b8 <polymult2+0xfa>

0000051c <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     51c:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     520:	7139                	addi	sp,sp,-64
    int v[size_N];
     522:	07bd                	addi	a5,a5,15
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     524:	dc22                	sw	s0,56(sp)
     526:	da26                	sw	s1,52(sp)
     528:	d84a                	sw	s2,48(sp)
     52a:	d64e                	sw	s3,44(sp)
     52c:	d452                	sw	s4,40(sp)
     52e:	d256                	sw	s5,36(sp)
     530:	d05a                	sw	s6,32(sp)
     532:	ce5e                	sw	s7,28(sp)
     534:	cc62                	sw	s8,24(sp)
     536:	ca66                	sw	s9,20(sp)
     538:	c86a                	sw	s10,16(sp)
     53a:	c66e                	sw	s11,12(sp)
    int v[size_N];
     53c:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     53e:	de06                	sw	ra,60(sp)
     540:	0080                	addi	s0,sp,64
    int v[size_N];
     542:	40f10133          	sub	sp,sp,a5
     546:	898a                	mv	s3,sp
    int q[size_N];
     548:	40f10133          	sub	sp,sp,a5
     54c:	8a0a                	mv	s4,sp
    int *product;
    int num_temp[size_N];
     54e:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     552:	00269793          	slli	a5,a3,0x2
     556:	07bd                	addi	a5,a5,15
    int num_temp[size_N];
     558:	8d0a                	mv	s10,sp
    int denum_temp[size_D];
     55a:	9bc1                	andi	a5,a5,-16
     55c:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     560:	84ae                	mv	s1,a1
     562:	8db2                	mv	s11,a2
    int v[size_N];
     564:	fff58b93          	addi	s7,a1,-1

    array_equ(num_temp,num,size_N);
     568:	862e                	mv	a2,a1
     56a:	85aa                	mv	a1,a0
     56c:	856a                	mv	a0,s10
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     56e:	8c36                	mv	s8,a3
     570:	8cba                	mv	s9,a4
    int denum_temp[size_D];
     572:	fff68913          	addi	s2,a3,-1
    array_equ(num_temp,num,size_N);
     576:	36c1                	jal	136 <array_equ>
    int denum_temp[size_D];
     578:	8a8a                	mv	s5,sp


    // make mod calculation for coefficents
    for (i = 0; i < size_N; ++i){
     57a:	8b6a                	mv	s6,s10
     57c:	876a                	mv	a4,s10
     57e:	4681                	li	a3,0
     580:	0296cc63          	blt	a3,s1,5b8 <polydiv+0x9c>
            num_temp[i] = num_temp[i] + mod;
        }
        num_temp[i] = num_temp[i] % mod;
    }

    array_equ(denum_temp,denum,size_D);
     584:	8662                	mv	a2,s8
     586:	85ee                	mv	a1,s11
     588:	8556                	mv	a0,s5
     58a:	3675                	jal	136 <array_equ>
    // make mod calculation for coefficents
    for (i = 0; i < size_D; ++i) {
     58c:	8756                	mv	a4,s5
     58e:	4681                	li	a3,0
     590:	0586c063          	blt	a3,s8,5d0 <polydiv+0xb4>
    }




    for (i = 0; i < size_N; ++i){
     594:	4781                	li	a5,0
     596:	0497c763          	blt	a5,s1,5e4 <polydiv+0xc8>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     59a:	00291793          	slli	a5,s2,0x2
     59e:	97d6                	add	a5,a5,s5
     5a0:	4398                	lw	a4,0(a5)
     5a2:	04095c63          	bgez	s2,5fa <polydiv+0xde>
    for (i = 0; i < size_N; ++i){
     5a6:	4781                	li	a5,0
     5a8:	4d81                	li	s11,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     5aa:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     5ac:	059dca63          	blt	s11,s9,600 <polydiv+0xe4>
     5b0:	87de                	mv	a5,s7
     5b2:	a085                	j	612 <polydiv+0xf6>
            num_temp[i] = num_temp[i] + mod;
     5b4:	97e6                	add	a5,a5,s9
     5b6:	c31c                	sw	a5,0(a4)
        while (num_temp[i] < 0) {
     5b8:	431c                	lw	a5,0(a4)
     5ba:	fe07cde3          	bltz	a5,5b4 <polydiv+0x98>
        num_temp[i] = num_temp[i] % mod;
     5be:	0397e7b3          	rem	a5,a5,s9
    for (i = 0; i < size_N; ++i){
     5c2:	0685                	addi	a3,a3,1
     5c4:	0711                	addi	a4,a4,4
        num_temp[i] = num_temp[i] % mod;
     5c6:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_N; ++i){
     5ca:	bf5d                	j	580 <polydiv+0x64>
            denum_temp[i] = denum_temp[i] + mod;
     5cc:	97e6                	add	a5,a5,s9
     5ce:	c31c                	sw	a5,0(a4)
        while (denum_temp[i] < 0) {
     5d0:	431c                	lw	a5,0(a4)
     5d2:	fe07cde3          	bltz	a5,5cc <polydiv+0xb0>
        denum_temp[i] = denum_temp[i] % mod;
     5d6:	0397e7b3          	rem	a5,a5,s9
    for (i = 0; i < size_D; ++i) {
     5da:	0685                	addi	a3,a3,1
     5dc:	0711                	addi	a4,a4,4
        denum_temp[i] = denum_temp[i] % mod;
     5de:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_D; ++i) {
     5e2:	b77d                	j	590 <polydiv+0x74>
        q[i] = 0;
     5e4:	00279713          	slli	a4,a5,0x2
     5e8:	00ea06b3          	add	a3,s4,a4
        v[i] = 0;
     5ec:	974e                	add	a4,a4,s3
        q[i] = 0;
     5ee:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     5f2:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     5f6:	0785                	addi	a5,a5,1
     5f8:	bf79                	j	596 <polydiv+0x7a>
        if( denum_temp[i] != 0 )
     5fa:	f755                	bnez	a4,5a6 <polydiv+0x8a>
    for (i = size_D-1; i >= 0; i = i-1){
     5fc:	197d                	addi	s2,s2,-1
     5fe:	bf71                	j	59a <polydiv+0x7e>
        if ( (b_N*u)%mod == 1 )
     600:	0397e633          	rem	a2,a5,s9
     604:	97ba                	add	a5,a5,a4
     606:	fad605e3          	beq	a2,a3,5b0 <polydiv+0x94>
    for (u = 0; u < mod; ++u){
     60a:	0d85                	addi	s11,s11,1
     60c:	b745                	j	5ac <polydiv+0x90>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     60e:	eb01                	bnez	a4,61e <polydiv+0x102>
    for (i = size_N-1; i >= 0; i = i-1){
     610:	17fd                	addi	a5,a5,-1
     612:	00279713          	slli	a4,a5,0x2
     616:	976a                	add	a4,a4,s10
     618:	4318                	lw	a4,0(a4)
     61a:	fe07dae3          	bgez	a5,60e <polydiv+0xf2>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     61e:	0527d663          	bge	a5,s2,66a <polydiv+0x14e>

//    for(i = 0; i < size_N; ++i){
//        result[i] = q[i];
//    }

     array_equ(result,q,size_N);
     622:	8626                	mv	a2,s1
     624:	85d2                	mv	a1,s4
     626:	00001517          	auipc	a0,0x1
     62a:	1fe50513          	addi	a0,a0,510 # 1824 <result>
     62e:	3621                	jal	136 <array_equ>
    

    for(i = size_N; i < (2*size_N); ++i){
     630:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
     634:	00001697          	auipc	a3,0x1
     638:	1f068693          	addi	a3,a3,496 # 1824 <result>
    for(i = size_N; i < (2*size_N); ++i){
     63c:	10e4c563          	blt	s1,a4,746 <polydiv+0x22a>
    }

    return_address3 = &result[0];

    return return_address3;
}
     640:	fc040113          	addi	sp,s0,-64
     644:	50f2                	lw	ra,60(sp)
     646:	5462                	lw	s0,56(sp)
     648:	54d2                	lw	s1,52(sp)
     64a:	5942                	lw	s2,48(sp)
     64c:	59b2                	lw	s3,44(sp)
     64e:	5a22                	lw	s4,40(sp)
     650:	5a92                	lw	s5,36(sp)
     652:	5b02                	lw	s6,32(sp)
     654:	4bf2                	lw	s7,28(sp)
     656:	4c62                	lw	s8,24(sp)
     658:	4cd2                	lw	s9,20(sp)
     65a:	4d42                	lw	s10,16(sp)
     65c:	4db2                	lw	s11,12(sp)
     65e:	00001517          	auipc	a0,0x1
     662:	1c650513          	addi	a0,a0,454 # 1824 <result>
     666:	6121                	addi	sp,sp,64
     668:	8082                	ret
        v[(d-d2)] = u*r_d;
     66a:	03b70733          	mul	a4,a4,s11
     66e:	412787b3          	sub	a5,a5,s2
     672:	078a                	slli	a5,a5,0x2
     674:	97ce                	add	a5,a5,s3
     676:	c398                	sw	a4,0(a5)
        for (i = 0; i < size_N; ++i){
     678:	87ce                	mv	a5,s3
     67a:	4701                	li	a4,0
     67c:	04974663          	blt	a4,s1,6c8 <polydiv+0x1ac>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     680:	8766                	mv	a4,s9
     682:	86e2                	mv	a3,s8
     684:	4781                	li	a5,0
     686:	864e                	mv	a2,s3
     688:	85e2                	mv	a1,s8
     68a:	8556                	mv	a0,s5
     68c:	3681                	jal	1cc <polymult>
        for (i = 0; i < size_N; ++i){
     68e:	872a                	mv	a4,a0
     690:	4681                	li	a3,0
     692:	0496c563          	blt	a3,s1,6dc <polydiv+0x1c0>
     696:	876a                	mv	a4,s10
        for (i = 0; i < size_N; ++i){
     698:	4781                	li	a5,0
     69a:	0497cb63          	blt	a5,s1,6f0 <polydiv+0x1d4>
     69e:	876a                	mv	a4,s10
        for (i = 0; i < size_N; ++i){
     6a0:	4681                	li	a3,0
     6a2:	0696c463          	blt	a3,s1,70a <polydiv+0x1ee>
        array_add(q, v, size_N);
     6a6:	8626                	mv	a2,s1
     6a8:	85ce                	mv	a1,s3
     6aa:	8552                	mv	a0,s4
     6ac:	32dd                	jal	92 <array_add>
        for(i = 0; i < size_N; ++i){
     6ae:	87d2                	mv	a5,s4
     6b0:	4701                	li	a4,0
     6b2:	06974663          	blt	a4,s1,71e <polydiv+0x202>
        for (i = size_N-1; i >= 0; i = i-1){
     6b6:	87de                	mv	a5,s7
     6b8:	00279713          	slli	a4,a5,0x2
     6bc:	976a                	add	a4,a4,s10
     6be:	4318                	lw	a4,0(a4)
     6c0:	0607d763          	bgez	a5,72e <polydiv+0x212>
     6c4:	4681                	li	a3,0
     6c6:	a8ad                	j	740 <polydiv+0x224>
            v[i] = v[i] % mod;
     6c8:	4394                	lw	a3,0(a5)
        for (i = 0; i < size_N; ++i){
     6ca:	0705                	addi	a4,a4,1
     6cc:	0791                	addi	a5,a5,4
            v[i] = v[i] % mod;
     6ce:	0396e6b3          	rem	a3,a3,s9
     6d2:	fed7ae23          	sw	a3,-4(a5)
        for (i = 0; i < size_N; ++i){
     6d6:	b75d                	j	67c <polydiv+0x160>
                product[i] = product[i] + mod;
     6d8:	97e6                	add	a5,a5,s9
     6da:	c31c                	sw	a5,0(a4)
            while (product[i] < 0) {
     6dc:	431c                	lw	a5,0(a4)
     6de:	fe07cde3          	bltz	a5,6d8 <polydiv+0x1bc>
            product[i] = product[i] % mod;
     6e2:	0397e7b3          	rem	a5,a5,s9
        for (i = 0; i < size_N; ++i){
     6e6:	0685                	addi	a3,a3,1
     6e8:	0711                	addi	a4,a4,4
            product[i] = product[i] % mod;
     6ea:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     6ee:	b755                	j	692 <polydiv+0x176>
            num_temp[i] = num_temp[i] - product[i];
     6f0:	00279613          	slli	a2,a5,0x2
     6f4:	962a                	add	a2,a2,a0
     6f6:	4314                	lw	a3,0(a4)
     6f8:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
     6fa:	0785                	addi	a5,a5,1
     6fc:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
     6fe:	8e91                	sub	a3,a3,a2
     700:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
     704:	bf59                	j	69a <polydiv+0x17e>
                num_temp[i] = num_temp[i] + mod;
     706:	97e6                	add	a5,a5,s9
     708:	c31c                	sw	a5,0(a4)
            while (num_temp[i] < 0){
     70a:	431c                	lw	a5,0(a4)
     70c:	fe07cde3          	bltz	a5,706 <polydiv+0x1ea>
            num_temp[i] = num_temp[i] % mod;
     710:	0397e7b3          	rem	a5,a5,s9
        for (i = 0; i < size_N; ++i){
     714:	0685                	addi	a3,a3,1
     716:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] % mod;
     718:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     71c:	b759                	j	6a2 <polydiv+0x186>
            q[i] = q[i] % mod;
     71e:	4394                	lw	a3,0(a5)
        for(i = 0; i < size_N; ++i){
     720:	0705                	addi	a4,a4,1
     722:	0791                	addi	a5,a5,4
            q[i] = q[i] % mod;
     724:	0396e6b3          	rem	a3,a3,s9
     728:	fed7ae23          	sw	a3,-4(a5)
        for(i = 0; i < size_N; ++i){
     72c:	b759                	j	6b2 <polydiv+0x196>
            if( num_temp[i] != 0 )
     72e:	fb59                	bnez	a4,6c4 <polydiv+0x1a8>
        for (i = size_N-1; i >= 0; i = i-1){
     730:	17fd                	addi	a5,a5,-1
     732:	b759                	j	6b8 <polydiv+0x19c>
            v[i] = 0;
     734:	00269613          	slli	a2,a3,0x2
     738:	964e                	add	a2,a2,s3
     73a:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     73e:	0685                	addi	a3,a3,1
     740:	fe96cae3          	blt	a3,s1,734 <polydiv+0x218>
     744:	bde9                	j	61e <polydiv+0x102>
        result[i] = num_temp[i-size_N];
     746:	000b2603          	lw	a2,0(s6)
     74a:	00249793          	slli	a5,s1,0x2
     74e:	97b6                	add	a5,a5,a3
     750:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     752:	0485                	addi	s1,s1,1
     754:	0b11                	addi	s6,s6,4
     756:	b5dd                	j	63c <polydiv+0x120>

00000758 <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     758:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     75c:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     75e:	07bd                	addi	a5,a5,15
     760:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     762:	c4a2                	sw	s0,72(sp)
     764:	c2a6                	sw	s1,68(sp)
     766:	c0ca                	sw	s2,64(sp)
     768:	de4e                	sw	s3,60(sp)
     76a:	dc52                	sw	s4,56(sp)
     76c:	da56                	sw	s5,52(sp)
     76e:	d85a                	sw	s6,48(sp)
     770:	d65e                	sw	s7,44(sp)
     772:	d462                	sw	s8,40(sp)
     774:	d266                	sw	s9,36(sp)
     776:	d06a                	sw	s10,32(sp)
     778:	ce6e                	sw	s11,28(sp)
     77a:	c686                	sw	ra,76(sp)
     77c:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     77e:	40f10133          	sub	sp,sp,a5
     782:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     784:	40f10133          	sub	sp,sp,a5
     788:	8a0a                	mv	s4,sp
    int ri[size];
     78a:	40f10133          	sub	sp,sp,a5
     78e:	8b8a                	mv	s7,sp

    int ti_1[size]; // ti_1[0] = 1
     790:	40f10133          	sub	sp,sp,a5
     794:	8b0a                	mv	s6,sp
    int ti[size];
     796:	40f10133          	sub	sp,sp,a5
     79a:	8c8a                	mv	s9,sp
    int qi_1[size];
     79c:	40f10133          	sub	sp,sp,a5
     7a0:	8c0a                	mv	s8,sp
    int temp[size];
     7a2:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     7a6:	8936                	mv	s2,a3
     7a8:	8d2e                	mv	s10,a1
     7aa:	84b2                	mv	s1,a2
    int ri_2[size]; // MX-ring poly, a
     7ac:	fff60d93          	addi	s11,a2,-1
    int temp[size];
     7b0:	8a8a                	mv	s5,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     7b2:	4781                	li	a5,0
//        ri_2[i] = polyR[i];
//        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     7b4:	00001697          	auipc	a3,0x1
     7b8:	2c868693          	addi	a3,a3,712 # 1a7c <ti_2>
    for (i = 0; i < size; ++i) {
     7bc:	0297c363          	blt	a5,s1,7e2 <ext_euclid+0x8a>
        ti_1[i] = 0;
    }
    array_equ(ri_2,polyR,size);
     7c0:	85aa                	mv	a1,a0
     7c2:	8626                	mv	a2,s1
     7c4:	854e                	mv	a0,s3
     7c6:	3a85                	jal	136 <array_equ>
    array_equ(ri_1,polyf,size);
     7c8:	8626                	mv	a2,s1
     7ca:	85ea                	mv	a1,s10
     7cc:	8552                	mv	a0,s4
     7ce:	32a5                	jal	136 <array_equ>
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     7d0:	4785                	li	a5,1
     7d2:	00fb2023          	sw	a5,0(s6)
            ri_1[i] = ri_1[i] % mod;
        }


        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7d6:	00149793          	slli	a5,s1,0x1
     7da:	faf42e23          	sw	a5,-68(s0)
        for (i = 0; i < N + 1; ++i) {
     7de:	4681                	li	a3,0
     7e0:	a02d                	j	80a <ext_euclid+0xb2>
        ti_2[i] = 0;
     7e2:	00279713          	slli	a4,a5,0x2
     7e6:	00e68633          	add	a2,a3,a4
        ti_1[i] = 0;
     7ea:	975a                	add	a4,a4,s6
        ti_2[i] = 0;
     7ec:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     7f0:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size; ++i) {
     7f4:	0785                	addi	a5,a5,1
     7f6:	b7d9                	j	7bc <ext_euclid+0x64>
                ri_2[i] = ri_2[i] + mod;
     7f8:	97ca                	add	a5,a5,s2
     7fa:	c31c                	sw	a5,0(a4)
            while (ri_2[i] < 0) {
     7fc:	431c                	lw	a5,0(a4)
     7fe:	fe07cde3          	bltz	a5,7f8 <ext_euclid+0xa0>
            ri_2[i] = ri_2[i] % mod;
     802:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     806:	0685                	addi	a3,a3,1
            ri_2[i] = ri_2[i] % mod;
     808:	c31c                	sw	a5,0(a4)
        for (i = 0; i < N + 1; ++i) {
     80a:	00ddc663          	blt	s11,a3,816 <ext_euclid+0xbe>
     80e:	00269713          	slli	a4,a3,0x2
     812:	974e                	add	a4,a4,s3
     814:	b7e5                	j	7fc <ext_euclid+0xa4>
     816:	8752                	mv	a4,s4
        for (i = 0; i < N + 1; ++i) {
     818:	4681                	li	a3,0
     81a:	0eddd563          	bge	s11,a3,904 <ext_euclid+0x1ac>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     81e:	874a                	mv	a4,s2
     820:	86a6                	mv	a3,s1
     822:	8652                	mv	a2,s4
     824:	85a6                	mv	a1,s1
     826:	854e                	mv	a0,s3
     828:	39d5                	jal	51c <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     82a:	875e                	mv	a4,s7
     82c:	87a6                	mv	a5,s1
     82e:	fbc42683          	lw	a3,-68(s0)
     832:	0ed7c363          	blt	a5,a3,918 <ext_euclid+0x1c0>
     836:	4781                	li	a5,0
            ri[i - (N + 1)] = res[i];
        }

/// qi_1 = (ri_2 - ri)/ri_1; ///

        for (i = 0; i < N + 1; ++i) {
     838:	4701                	li	a4,0
     83a:	0eedd863          	bge	s11,a4,92a <ext_euclid+0x1d2>
     83e:	8d56                	mv	s10,s5
     840:	8756                	mv	a4,s5
            temp[i] = ri_2[i] - ri[i];
        }


        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     842:	4681                	li	a3,0
     844:	10ddd263          	bge	s11,a3,948 <ext_euclid+0x1f0>
                temp[i] = temp[i] + mod;
            }
            temp[i] = temp[i] % mod;
        }

        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     848:	874a                	mv	a4,s2
     84a:	86a6                	mv	a3,s1
     84c:	8652                	mv	a2,s4
     84e:	85a6                	mv	a1,s1
     850:	8556                	mv	a0,s5
     852:	31e9                	jal	51c <polydiv>
     854:	85aa                	mv	a1,a0
//        for (i = 0; i < N + 1; ++i) {
//            qi_1[i] = res1[i];
//        }
    array_equ(qi_1,res1,size);
     856:	8626                	mv	a2,s1
     858:	8562                	mv	a0,s8
     85a:	38f1                	jal	136 <array_equ>

        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     85c:	8762                	mv	a4,s8
     85e:	4681                	li	a3,0
     860:	10ddd063          	bge	s11,a3,960 <ext_euclid+0x208>
        }


/// ti = ti_2 - qi_1*ti_1; ///

        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     864:	874a                	mv	a4,s2
     866:	4781                	li	a5,0
     868:	86a6                	mv	a3,s1
     86a:	865a                	mv	a2,s6
     86c:	85a6                	mv	a1,s1
     86e:	8562                	mv	a0,s8
     870:	3ab1                	jal	1cc <polymult>
     872:	85aa                	mv	a1,a0
//        for (i = 0; i < N + 1; ++i) {
//            temp[i] = res2[i];
//        }
    array_equ(temp,res2,size);
     874:	8626                	mv	a2,s1
     876:	8556                	mv	a0,s5
     878:	387d                	jal	136 <array_equ>

        // make mod calculations
        for (i = 0; i < N + 1; ++i) {
     87a:	4701                	li	a4,0
     87c:	0eeddf63          	bge	s11,a4,97a <ext_euclid+0x222>
     880:	4781                	li	a5,0
            }
            temp[i] = temp[i] % mod;
        }


        for (i = 0; i < N + 1; ++i) {
     882:	4701                	li	a4,0
     884:	10edd663          	bge	s11,a4,990 <ext_euclid+0x238>
     888:	8766                	mv	a4,s9
            ti[i] = ti_2[i] - temp[i];
        }


        for (i = 0; i < N + 1; ++i) {
     88a:	4681                	li	a3,0
     88c:	12ddd463          	bge	s11,a3,9b4 <ext_euclid+0x25c>
        }


/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

array_equ(ri_2,ri_1,size);
     890:	8626                	mv	a2,s1
     892:	85d2                	mv	a1,s4
     894:	854e                	mv	a0,s3
     896:	3045                	jal	136 <array_equ>
array_equ(ri_1,ri,size);
     898:	8626                	mv	a2,s1
     89a:	85de                	mv	a1,s7
     89c:	8552                	mv	a0,s4
     89e:	3861                	jal	136 <array_equ>
array_equ(ti_2,ti_1,size);
     8a0:	8626                	mv	a2,s1
     8a2:	85da                	mv	a1,s6
     8a4:	00001517          	auipc	a0,0x1
     8a8:	1d850513          	addi	a0,a0,472 # 1a7c <ti_2>
     8ac:	3069                	jal	136 <array_equ>
array_equ(ti_1,ti,size);
     8ae:	8626                	mv	a2,s1
     8b0:	85e6                	mv	a1,s9
     8b2:	855a                	mv	a0,s6
     8b4:	3049                	jal	136 <array_equ>
        controlR = 0;
     8b6:	4781                	li	a5,0

        for (i = 0; i < N + 1; ++i) {
     8b8:	4701                	li	a4,0
     8ba:	10edd763          	bge	s11,a4,9c8 <ext_euclid+0x270>
    while (controlR != 0) {
     8be:	f20790e3          	bnez	a5,7de <ext_euclid+0x86>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     8c2:	4701                	li	a4,0
            if (((ri_2[0] * j) % mod) == 1)
     8c4:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     8c6:	11274c63          	blt	a4,s2,9de <ext_euclid+0x286>
     8ca:	00001617          	auipc	a2,0x1
     8ce:	1b260613          	addi	a2,a2,434 # 1a7c <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     8d2:	12fdd063          	bge	s11,a5,9f2 <ext_euclid+0x29a>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     8d6:	fb040113          	addi	sp,s0,-80
     8da:	40b6                	lw	ra,76(sp)
     8dc:	4426                	lw	s0,72(sp)
     8de:	4496                	lw	s1,68(sp)
     8e0:	4906                	lw	s2,64(sp)
     8e2:	59f2                	lw	s3,60(sp)
     8e4:	5a62                	lw	s4,56(sp)
     8e6:	5ad2                	lw	s5,52(sp)
     8e8:	5b42                	lw	s6,48(sp)
     8ea:	5bb2                	lw	s7,44(sp)
     8ec:	5c22                	lw	s8,40(sp)
     8ee:	5c92                	lw	s9,36(sp)
     8f0:	5d02                	lw	s10,32(sp)
     8f2:	4df2                	lw	s11,28(sp)
     8f4:	00001517          	auipc	a0,0x1
     8f8:	18850513          	addi	a0,a0,392 # 1a7c <ti_2>
     8fc:	6161                	addi	sp,sp,80
     8fe:	8082                	ret
                ri_1[i] = ri_1[i] + mod;
     900:	97ca                	add	a5,a5,s2
     902:	c31c                	sw	a5,0(a4)
            while (ri_1[i] < 0) {
     904:	431c                	lw	a5,0(a4)
     906:	fe07cde3          	bltz	a5,900 <ext_euclid+0x1a8>
            ri_1[i] = ri_1[i] % mod;
     90a:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     90e:	0685                	addi	a3,a3,1
     910:	0711                	addi	a4,a4,4
            ri_1[i] = ri_1[i] % mod;
     912:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     916:	b711                	j	81a <ext_euclid+0xc2>
            ri[i - (N + 1)] = res[i];
     918:	00279693          	slli	a3,a5,0x2
     91c:	96aa                	add	a3,a3,a0
     91e:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     920:	0785                	addi	a5,a5,1
     922:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     924:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     928:	b719                	j	82e <ext_euclid+0xd6>
            temp[i] = ri_2[i] - ri[i];
     92a:	00f986b3          	add	a3,s3,a5
     92e:	00fb85b3          	add	a1,s7,a5
     932:	4294                	lw	a3,0(a3)
     934:	418c                	lw	a1,0(a1)
     936:	00fa8633          	add	a2,s5,a5
        for (i = 0; i < N + 1; ++i) {
     93a:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     93c:	8e8d                	sub	a3,a3,a1
     93e:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     940:	0791                	addi	a5,a5,4
     942:	bde5                	j	83a <ext_euclid+0xe2>
                temp[i] = temp[i] + mod;
     944:	97ca                	add	a5,a5,s2
     946:	c31c                	sw	a5,0(a4)
            while (temp[i] < 0) {
     948:	431c                	lw	a5,0(a4)
     94a:	fe07cde3          	bltz	a5,944 <ext_euclid+0x1ec>
            temp[i] = temp[i] % mod;
     94e:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     952:	0685                	addi	a3,a3,1
     954:	0711                	addi	a4,a4,4
            temp[i] = temp[i] % mod;
     956:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     95a:	b5ed                	j	844 <ext_euclid+0xec>
                qi_1[i] = qi_1[i] + mod;
     95c:	97ca                	add	a5,a5,s2
     95e:	c31c                	sw	a5,0(a4)
            while (qi_1[i] < 0) {
     960:	431c                	lw	a5,0(a4)
     962:	fe07cde3          	bltz	a5,95c <ext_euclid+0x204>
            qi_1[i] = qi_1[i] % mod;
     966:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     96a:	0685                	addi	a3,a3,1
     96c:	0711                	addi	a4,a4,4
            qi_1[i] = qi_1[i] % mod;
     96e:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     972:	b5fd                	j	860 <ext_euclid+0x108>
                temp[i] = temp[i] + mod;
     974:	97ca                	add	a5,a5,s2
     976:	00fd2023          	sw	a5,0(s10)
            while (temp[i] < 0) {
     97a:	000d2783          	lw	a5,0(s10)
     97e:	fe07cbe3          	bltz	a5,974 <ext_euclid+0x21c>
            temp[i] = temp[i] % mod;
     982:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     986:	0705                	addi	a4,a4,1
     988:	0d11                	addi	s10,s10,4
            temp[i] = temp[i] % mod;
     98a:	fefd2e23          	sw	a5,-4(s10)
        for (i = 0; i < N + 1; ++i) {
     98e:	b5fd                	j	87c <ext_euclid+0x124>
            ti[i] = ti_2[i] - temp[i];
     990:	00001697          	auipc	a3,0x1
     994:	0ec68693          	addi	a3,a3,236 # 1a7c <ti_2>
     998:	96be                	add	a3,a3,a5
     99a:	00fa85b3          	add	a1,s5,a5
     99e:	4294                	lw	a3,0(a3)
     9a0:	418c                	lw	a1,0(a1)
     9a2:	00fc8633          	add	a2,s9,a5
        for (i = 0; i < N + 1; ++i) {
     9a6:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     9a8:	8e8d                	sub	a3,a3,a1
     9aa:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     9ac:	0791                	addi	a5,a5,4
     9ae:	bdd9                	j	884 <ext_euclid+0x12c>
                ti[i] = ti[i] + mod;
     9b0:	97ca                	add	a5,a5,s2
     9b2:	c31c                	sw	a5,0(a4)
            while (ti[i] < 0) {
     9b4:	431c                	lw	a5,0(a4)
     9b6:	fe07cde3          	bltz	a5,9b0 <ext_euclid+0x258>
            ti[i] = ti[i] % mod;
     9ba:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     9be:	0685                	addi	a3,a3,1
     9c0:	0711                	addi	a4,a4,4
            ti[i] = ti[i] % mod;
     9c2:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     9c6:	b5d9                	j	88c <ext_euclid+0x134>
              qi_1[i] = 0;
     9c8:	00271693          	slli	a3,a4,0x2
     9cc:	00dc0633          	add	a2,s8,a3
            controlR += ri[i];
     9d0:	96de                	add	a3,a3,s7
     9d2:	4294                	lw	a3,0(a3)
              qi_1[i] = 0;
     9d4:	00062023          	sw	zero,0(a2)
        for (i = 0; i < N + 1; ++i) {
     9d8:	0705                	addi	a4,a4,1
            controlR += ri[i];
     9da:	97b6                	add	a5,a5,a3
        for (i = 0; i < N + 1; ++i) {
     9dc:	bdf9                	j	8ba <ext_euclid+0x162>
            if (((ri_2[0] * j) % mod) == 1)
     9de:	0009a683          	lw	a3,0(s3)
     9e2:	02d706b3          	mul	a3,a4,a3
     9e6:	0326e6b3          	rem	a3,a3,s2
     9ea:	eec680e3          	beq	a3,a2,8ca <ext_euclid+0x172>
        for (j = 0; j < mod; ++j) {
     9ee:	0705                	addi	a4,a4,1
     9f0:	bdd9                	j	8c6 <ext_euclid+0x16e>
            ti_2[i] = (ti_2[i] * j) % mod;
     9f2:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     9f4:	0785                	addi	a5,a5,1
     9f6:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
     9f8:	02d706b3          	mul	a3,a4,a3
     9fc:	0326e6b3          	rem	a3,a3,s2
     a00:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     a04:	b5f9                	j	8d2 <ext_euclid+0x17a>

00000a06 <generate_keys>:




int* generate_keys(int N, int p, int q){
     a06:	7101                	addi	sp,sp,-512
     a08:	1e112e23          	sw	ra,508(sp)
     a0c:	1e812c23          	sw	s0,504(sp)
     a10:	1e912a23          	sw	s1,500(sp)
     a14:	0400                	addi	s0,sp,512
     a16:	1f212823          	sw	s2,496(sp)
     a1a:	1f312623          	sw	s3,492(sp)
     a1e:	1f412423          	sw	s4,488(sp)
     a22:	1f512223          	sw	s5,484(sp)
     a26:	1f612023          	sw	s6,480(sp)
     a2a:	1d712e23          	sw	s7,476(sp)
     a2e:	1d812c23          	sw	s8,472(sp)
     a32:	1db12623          	sw	s11,460(sp)
     a36:	1d912a23          	sw	s9,468(sp)
     a3a:	1da12823          	sw	s10,464(sp)
    resultkon[0] = 0xaaaaaaa0;	
     a3e:	aaaab7b7          	lui	a5,0xaaaab
     a42:	aa078793          	addi	a5,a5,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
int* generate_keys(int N, int p, int q){
     a46:	892a                	mv	s2,a0
     a48:	8c2e                	mv	s8,a1
     a4a:	8bb2                	mv	s7,a2
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a4c:	4581                	li	a1,0
     a4e:	0d000613          	li	a2,208
    resultkon[0] = 0xaaaaaaa0;	
     a52:	00001a97          	auipc	s5,0x1
     a56:	91ea8a93          	addi	s5,s5,-1762 # 1370 <_edata>
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a5a:	e1440513          	addi	a0,s0,-492
    resultkon[0] = 0xaaaaaaa0;	
     a5e:	00faa023          	sw	a5,0(s5)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a62:	237d                	jal	1010 <memset>
     a64:	4485                	li	s1,1
     a66:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a68:	0d800613          	li	a2,216
     a6c:	4581                	li	a1,0
     a6e:	ee840513          	addi	a0,s0,-280
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a72:	e1342423          	sw	s3,-504(s0)
     a76:	e0942623          	sw	s1,-500(s0)
     a7a:	e0942823          	sw	s1,-496(s0)
     a7e:	e1342c23          	sw	s3,-488(s0)
     a82:	e2942023          	sw	s1,-480(s0)
     a86:	e2942623          	sw	s1,-468(s0)
     a8a:	e3342823          	sw	s3,-464(s0)
     a8e:	e3342a23          	sw	s3,-460(s0)
     a92:	e2942e23          	sw	s1,-452(s0)
     a96:	e5342223          	sw	s3,-444(s0)
     a9a:	e4942623          	sw	s1,-436(s0)
     a9e:	e4942823          	sw	s1,-432(s0)
     aa2:	e5342e23          	sw	s3,-420(s0)
     aa6:	e6942223          	sw	s1,-412(s0)
     aaa:	e6942823          	sw	s1,-400(s0)
     aae:	e6942a23          	sw	s1,-396(s0)
     ab2:	e6942c23          	sw	s1,-392(s0)
     ab6:	e7342e23          	sw	s3,-388(s0)
     aba:	e8942223          	sw	s1,-380(s0)
     abe:	e8942823          	sw	s1,-368(s0)
     ac2:	e8942a23          	sw	s1,-364(s0)
     ac6:	e8942c23          	sw	s1,-360(s0)
     aca:	e9342e23          	sw	s3,-356(s0)
     ace:	ea942223          	sw	s1,-348(s0)
     ad2:	ea942823          	sw	s1,-336(s0)
     ad6:	ea942a23          	sw	s1,-332(s0)
     ada:	ea942c23          	sw	s1,-328(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     ade:	00190b13          	addi	s6,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     ae2:	233d                	jal	1010 <memset>
    int polyR[N+1];
     ae4:	002b1793          	slli	a5,s6,0x2
     ae8:	07bd                	addi	a5,a5,15
     aea:	9bc1                	andi	a5,a5,-16
     aec:	40f10133          	sub	sp,sp,a5
     af0:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     af2:	00291d93          	slli	s11,s2,0x2
     af6:	01ba07b3          	add	a5,s4,s11
     afa:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     afc:	ef342223          	sw	s3,-284(s0)
     b00:	ee942623          	sw	s1,-276(s0)
     b04:	ee942823          	sw	s1,-272(s0)
     b08:	ee942c23          	sw	s1,-264(s0)
     b0c:	f1342223          	sw	s3,-252(s0)
     b10:	f1342623          	sw	s3,-244(s0)
     b14:	f1342823          	sw	s3,-240(s0)
     b18:	f0942c23          	sw	s1,-232(s0)
     b1c:	f3342023          	sw	s3,-224(s0)
     b20:	f2942423          	sw	s1,-216(s0)
     b24:	f2942a23          	sw	s1,-204(s0)
     b28:	f3342c23          	sw	s3,-200(s0)
     b2c:	f4942023          	sw	s1,-192(s0)
     b30:	f4942623          	sw	s1,-180(s0)
     b34:	f5342823          	sw	s3,-176(s0)
     b38:	f4942c23          	sw	s1,-168(s0)
     b3c:	f6942223          	sw	s1,-156(s0)
     b40:	f7342423          	sw	s3,-152(s0)
     b44:	f6942823          	sw	s1,-144(s0)
     b48:	f6942c23          	sw	s1,-136(s0)
     b4c:	f6942e23          	sw	s1,-132(s0)
     b50:	f8942423          	sw	s1,-120(s0)
     b54:	f9342623          	sw	s3,-116(s0)
     b58:	f8942a23          	sw	s1,-108(s0)
     b5c:	f8942e23          	sw	s1,-100(s0)
    polyR[0] = -1;
     b60:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     b64:	4785                	li	a5,1
     b66:	1127cb63          	blt	a5,s2,c7c <generate_keys+0x276>
     b6a:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     b6c:	03600693          	li	a3,54
     b70:	10f6dd63          	bge	a3,a5,c8a <generate_keys+0x284>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     b74:	4781                	li	a5,0
        random_keys[i] = f[i];
     b76:	00001697          	auipc	a3,0x1
     b7a:	09668693          	addi	a3,a3,150 # 1c0c <random_keys>
    for(i = 0; i < N; ++i){
     b7e:	1327c463          	blt	a5,s2,ca6 <generate_keys+0x2a0>
     b82:	ee440713          	addi	a4,s0,-284
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     b86:	00191993          	slli	s3,s2,0x1
     b8a:	87ca                	mv	a5,s2
     b8c:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     b8e:	00001617          	auipc	a2,0x1
     b92:	07e60613          	addi	a2,a2,126 # 1c0c <random_keys>
    for(i = N; i < (2*N); ++i){
     b96:	1337c363          	blt	a5,s3,cbc <generate_keys+0x2b6>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     b9a:	448d                	li	s1,3
     b9c:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     ba0:	86e2                	mv	a3,s8
     ba2:	865a                	mv	a2,s6
     ba4:	e0840593          	addi	a1,s0,-504
     ba8:	8552                	mv	a0,s4
     baa:	367d                	jal	758 <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     bac:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     bae:	00001697          	auipc	a3,0x1
     bb2:	05e68693          	addi	a3,a3,94 # 1c0c <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     bb6:	1097cb63          	blt	a5,s1,ccc <generate_keys+0x2c6>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     bba:	865a                	mv	a2,s6
     bbc:	86de                	mv	a3,s7
     bbe:	e0840593          	addi	a1,s0,-504
     bc2:	8552                	mv	a0,s4
     bc4:	3e51                	jal	758 <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     bc6:	5751                	li	a4,-12
     bc8:	02e90733          	mul	a4,s2,a4
     bcc:	8d6e                	mv	s10,s11
        random_keys[i] = fq[i-(3*N)];
     bce:	00001617          	auipc	a2,0x1
     bd2:	03e60613          	addi	a2,a2,62 # 1c0c <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     bd6:	11b4c363          	blt	s1,s11,cdc <generate_keys+0x2d6>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     bda:	4701                	li	a4,0
     bdc:	85ca                	mv	a1,s2
     bde:	86ca                	mv	a3,s2
     be0:	8666                	mv	a2,s9
     be2:	fdcff0ef          	jal	ra,3be <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     be6:	87aa                	mv	a5,a0
     be8:	4701                	li	a4,0
     bea:	fff98593          	addi	a1,s3,-1
     bee:	10b74163          	blt	a4,a1,cf0 <generate_keys+0x2ea>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     bf2:	86da                	mv	a3,s6
     bf4:	875e                	mv	a4,s7
     bf6:	8652                	mv	a2,s4
     bf8:	3215                	jal	51c <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     bfa:	4795                	li	a5,5
     bfc:	02f907b3          	mul	a5,s2,a5
     c00:	098a                	slli	s3,s3,0x2
     c02:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c04:	00001697          	auipc	a3,0x1
     c08:	00868693          	addi	a3,a3,8 # 1c0c <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     c0c:	0991                	addi	s3,s3,4
     c0e:	0efd4963          	blt	s10,a5,d00 <generate_keys+0x2fa>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     c12:	4699                	li	a3,6
     c14:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     c16:	00001617          	auipc	a2,0x1
     c1a:	ff660613          	addi	a2,a2,-10 # 1c0c <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     c1e:	02d906b3          	mul	a3,s2,a3
     c22:	02a90933          	mul	s2,s2,a0
     c26:	0ef6d563          	bge	a3,a5,d10 <generate_keys+0x30a>
    }
    //////// RANDOM KEYS TAŞTI? ARRAY 300LÜK YERE SAHİP AMA 318'E KADAR DOLDURULUYOR? ///////


    return_address5 = &random_keys[0];
    resultkon[0] = 0xaaaaaaa1;	
     c2a:	aaaab7b7          	lui	a5,0xaaaab
     c2e:	aa178793          	addi	a5,a5,-1375 # aaaaaaa1 <_stack_start+0xaaa9aaa1>
     c32:	00faa023          	sw	a5,0(s5)
    return return_address5;
}
     c36:	e0040113          	addi	sp,s0,-512
     c3a:	1fc12083          	lw	ra,508(sp)
     c3e:	1f812403          	lw	s0,504(sp)
     c42:	1f412483          	lw	s1,500(sp)
     c46:	1f012903          	lw	s2,496(sp)
     c4a:	1ec12983          	lw	s3,492(sp)
     c4e:	1e812a03          	lw	s4,488(sp)
     c52:	1e412a83          	lw	s5,484(sp)
     c56:	1e012b03          	lw	s6,480(sp)
     c5a:	1dc12b83          	lw	s7,476(sp)
     c5e:	1d812c03          	lw	s8,472(sp)
     c62:	1d412c83          	lw	s9,468(sp)
     c66:	1d012d03          	lw	s10,464(sp)
     c6a:	1cc12d83          	lw	s11,460(sp)
     c6e:	00001517          	auipc	a0,0x1
     c72:	f9e50513          	addi	a0,a0,-98 # 1c0c <random_keys>
     c76:	20010113          	addi	sp,sp,512
     c7a:	8082                	ret
        polyR[i] = 0;
     c7c:	00279713          	slli	a4,a5,0x2
     c80:	9752                	add	a4,a4,s4
     c82:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     c86:	0785                	addi	a5,a5,1
     c88:	bdf9                	j	b66 <generate_keys+0x160>
        f[i] = 0;
     c8a:	00279713          	slli	a4,a5,0x2
     c8e:	e0840613          	addi	a2,s0,-504
     c92:	963a                	add	a2,a2,a4
     c94:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     c98:	ee440613          	addi	a2,s0,-284
     c9c:	9732                	add	a4,a4,a2
     c9e:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     ca2:	0785                	addi	a5,a5,1
     ca4:	b5f1                	j	b70 <generate_keys+0x16a>
        random_keys[i] = f[i];
     ca6:	00279713          	slli	a4,a5,0x2
     caa:	e0840593          	addi	a1,s0,-504
     cae:	00e68633          	add	a2,a3,a4
     cb2:	972e                	add	a4,a4,a1
     cb4:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     cb6:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     cb8:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     cba:	b5d1                	j	b7e <generate_keys+0x178>
        random_keys[i] = g[i-N];
     cbc:	430c                	lw	a1,0(a4)
     cbe:	00279693          	slli	a3,a5,0x2
     cc2:	96b2                	add	a3,a3,a2
     cc4:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     cc6:	0785                	addi	a5,a5,1
     cc8:	0711                	addi	a4,a4,4
     cca:	b5f1                	j	b96 <generate_keys+0x190>
        random_keys[i] = fp[i-(2*N)];
     ccc:	4110                	lw	a2,0(a0)
     cce:	00279713          	slli	a4,a5,0x2
     cd2:	9736                	add	a4,a4,a3
     cd4:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     cd6:	0785                	addi	a5,a5,1
     cd8:	0511                	addi	a0,a0,4
     cda:	bdf1                	j	bb6 <generate_keys+0x1b0>
        random_keys[i] = fq[i-(3*N)];
     cdc:	00249793          	slli	a5,s1,0x2
     ce0:	00f706b3          	add	a3,a4,a5
     ce4:	96aa                	add	a3,a3,a0
     ce6:	4294                	lw	a3,0(a3)
     ce8:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     cea:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     cec:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     cee:	b5e5                	j	bd6 <generate_keys+0x1d0>
        fg[i] = fg[i]*p;
     cf0:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     cf2:	0705                	addi	a4,a4,1
     cf4:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     cf6:	038686b3          	mul	a3,a3,s8
     cfa:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     cfe:	bdc5                	j	bee <generate_keys+0x1e8>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     d00:	ff89a603          	lw	a2,-8(s3)
     d04:	002d1713          	slli	a4,s10,0x2
     d08:	9736                	add	a4,a4,a3
     d0a:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     d0c:	0d05                	addi	s10,s10,1
     d0e:	bdfd                	j	c0c <generate_keys+0x206>
        random_keys[i] = polyR[i-(5*N)];
     d10:	00279713          	slli	a4,a5,0x2
     d14:	00e605b3          	add	a1,a2,a4
     d18:	974a                	add	a4,a4,s2
     d1a:	9752                	add	a4,a4,s4
     d1c:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     d1e:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     d20:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     d22:	b711                	j	c26 <generate_keys+0x220>

00000d24 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d24:	7115                	addi	sp,sp,-224
    resultkon[0] = 0xbbbbbbb0;	
     d26:	bbbbc7b7          	lui	a5,0xbbbbc
     d2a:	bb078793          	addi	a5,a5,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d2e:	cda2                	sw	s0,216(sp)
     d30:	cba6                	sw	s1,212(sp)
     d32:	842a                	mv	s0,a0
     d34:	84b2                	mv	s1,a2
     d36:	c9ca                	sw	s2,208(sp)
     d38:	c7ce                	sw	s3,204(sp)
    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d3a:	0c000613          	li	a2,192
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d3e:	89ae                	mv	s3,a1
    resultkon[0] = 0xbbbbbbb0;	
     d40:	00000917          	auipc	s2,0x0
     d44:	63090913          	addi	s2,s2,1584 # 1370 <_edata>
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d48:	00000597          	auipc	a1,0x0
     d4c:	4a858593          	addi	a1,a1,1192 # 11f0 <__DTOR_END__>
     d50:	850a                	mv	a0,sp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d52:	cf86                	sw	ra,220(sp)
     d54:	c5d2                	sw	s4,200(sp)
     d56:	c3d6                	sw	s5,196(sp)
     d58:	8a36                	mv	s4,a3
     d5a:	8aba                	mv	s5,a4
    resultkon[0] = 0xbbbbbbb0;	
     d5c:	00f92023          	sw	a5,0(s2)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d60:	2ac9                	jal	f32 <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     d62:	4781                	li	a5,0
     d64:	874e                	mv	a4,s3
     d66:	03000693          	li	a3,48
     d6a:	85a2                	mv	a1,s0
     d6c:	860a                	mv	a2,sp
     d6e:	8552                	mv	a0,s4
     d70:	c5cff0ef          	jal	ra,1cc <polymult>
    /////// PUBLIC_KEY*RANDOM_VALUE ///////
//
//    for(i = 0; i < 48; ++i){
//        temp[i] = temp[i] + message[i];
//    }
array_add(temp,message,48);
     d74:	85a6                	mv	a1,s1
     d76:	03000613          	li	a2,48
    temp = polymult(public_key,N,random_val,48,q,0);
     d7a:	8a2a                	mv	s4,a0
    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d7c:	00141493          	slli	s1,s0,0x1
array_add(temp,message,48);
     d80:	b12ff0ef          	jal	ra,92 <array_add>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d84:	00140693          	addi	a3,s0,1
     d88:	874e                	mv	a4,s3
     d8a:	8656                	mv	a2,s5
     d8c:	85a6                	mv	a1,s1
     d8e:	8552                	mv	a0,s4
     d90:	f8cff0ef          	jal	ra,51c <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     d94:	478d                	li	a5,3
     d96:	02f40433          	mul	s0,s0,a5
     d9a:	87aa                	mv	a5,a0
     d9c:	0284c163          	blt	s1,s0,dbe <ntru_encyrpt+0x9a>


    return_address6 = &CT[0];
    resultkon[0] = 0xbbbbbbb1;	
    return return_address6;
}
     da0:	40fe                	lw	ra,220(sp)
     da2:	446e                	lw	s0,216(sp)
    resultkon[0] = 0xbbbbbbb1;	
     da4:	bbbbc7b7          	lui	a5,0xbbbbc
     da8:	bb178793          	addi	a5,a5,-1103 # bbbbbbb1 <_stack_start+0xbbbabbb1>
     dac:	00f92023          	sw	a5,0(s2)
}
     db0:	44de                	lw	s1,212(sp)
     db2:	494e                	lw	s2,208(sp)
     db4:	49be                	lw	s3,204(sp)
     db6:	4a2e                	lw	s4,200(sp)
     db8:	4a9e                	lw	s5,196(sp)
     dba:	612d                	addi	sp,sp,224
     dbc:	8082                	ret
        CT[i-(2*N)] = CT[i];
     dbe:	00249713          	slli	a4,s1,0x2
     dc2:	972a                	add	a4,a4,a0
     dc4:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     dc6:	0485                	addi	s1,s1,1
     dc8:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     dca:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     dce:	b7f9                	j	d9c <ntru_encyrpt+0x78>

00000dd0 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     dd0:	7179                	addi	sp,sp,-48
     dd2:	d422                	sw	s0,40(sp)
     dd4:	cc52                	sw	s4,24(sp)
     dd6:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     dd8:	4a0d                	li	s4,3
     dda:	03440a33          	mul	s4,s0,s4
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     dde:	c462                	sw	s8,8(sp)
     de0:	8c3a                	mv	s8,a4
    resultkon[0] = 0xccccccc0;	
     de2:	ccccd737          	lui	a4,0xccccd
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     de6:	ce4e                	sw	s3,28(sp)
    resultkon[0] = 0xccccccc0;	
     de8:	cc070713          	addi	a4,a4,-832 # ccccccc0 <_stack_start+0xcccbccc0>
     dec:	00000997          	auipc	s3,0x0
     df0:	58498993          	addi	s3,s3,1412 # 1370 <_edata>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     df4:	d04a                	sw	s2,32(sp)
     df6:	c85a                	sw	s6,16(sp)
     df8:	8932                	mv	s2,a2
     dfa:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     dfc:	863e                	mv	a2,a5
    resultkon[0] = 0xccccccc0;	
     dfe:	00e9a023          	sw	a4,0(s3)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e02:	86a2                	mv	a3,s0
     e04:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e06:	8b2e                	mv	s6,a1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e08:	85a2                	mv	a1,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e0a:	d606                	sw	ra,44(sp)
     e0c:	d226                	sw	s1,36(sp)
     e0e:	ca56                	sw	s5,20(sp)
     e10:	c65e                	sw	s7,12(sp)
     e12:	8ac2                	mv	s5,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e14:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e18:	da6ff0ef          	jal	ra,3be <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e1c:	00140b93          	addi	s7,s0,1
     e20:	874a                	mv	a4,s2
     e22:	86de                	mv	a3,s7
     e24:	8656                	mv	a2,s5
     e26:	85a6                	mv	a1,s1
     e28:	ef4ff0ef          	jal	ra,51c <polydiv>
     e2c:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     e2e:	87aa                	mv	a5,a0
     e30:	872a                	mv	a4,a0
     e32:	86a6                	mv	a3,s1
     e34:	0546c963          	blt	a3,s4,e86 <ntru_deceypt+0xb6>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     e38:	4589                	li	a1,2
     e3a:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     e3e:	4701                	li	a4,0
     e40:	04874c63          	blt	a4,s0,e98 <ntru_deceypt+0xc8>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     e44:	4701                	li	a4,0
     e46:	86a2                	mv	a3,s0
     e48:	85a2                	mv	a1,s0
     e4a:	8562                	mv	a0,s8
     e4c:	d72ff0ef          	jal	ra,3be <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     e50:	875a                	mv	a4,s6
     e52:	86de                	mv	a3,s7
     e54:	8656                	mv	a2,s5
     e56:	85a6                	mv	a1,s1
     e58:	ec4ff0ef          	jal	ra,51c <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     e5c:	87aa                	mv	a5,a0
     e5e:	0544c663          	blt	s1,s4,eaa <ntru_deceypt+0xda>
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    resultkon[0] = 0xccccccc1;	
    return return_address7;
}
     e62:	50b2                	lw	ra,44(sp)
     e64:	5422                	lw	s0,40(sp)
    resultkon[0] = 0xccccccc1;	
     e66:	ccccd7b7          	lui	a5,0xccccd
     e6a:	cc178793          	addi	a5,a5,-831 # ccccccc1 <_stack_start+0xcccbccc1>
     e6e:	00f9a023          	sw	a5,0(s3)
}
     e72:	5492                	lw	s1,36(sp)
     e74:	5902                	lw	s2,32(sp)
     e76:	49f2                	lw	s3,28(sp)
     e78:	4a62                	lw	s4,24(sp)
     e7a:	4ad2                	lw	s5,20(sp)
     e7c:	4b42                	lw	s6,16(sp)
     e7e:	4bb2                	lw	s7,12(sp)
     e80:	4c22                	lw	s8,8(sp)
     e82:	6145                	addi	sp,sp,48
     e84:	8082                	ret
        a2[i-(2*N)] = a2[i];
     e86:	00269593          	slli	a1,a3,0x2
     e8a:	95b2                	add	a1,a1,a2
     e8c:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e8e:	0685                	addi	a3,a3,1
     e90:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     e92:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e96:	bf79                	j	e34 <ntru_deceypt+0x64>
        if(a2[i] <= q/2)
     e98:	4394                	lw	a3,0(a5)
     e9a:	00d5d563          	bge	a1,a3,ea4 <ntru_deceypt+0xd4>
            a2[i] = (-1)*(q-a2[i]);
     e9e:	412686b3          	sub	a3,a3,s2
     ea2:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     ea4:	0705                	addi	a4,a4,1
     ea6:	0791                	addi	a5,a5,4
     ea8:	bf61                	j	e40 <ntru_deceypt+0x70>
        c2[i-(2*N)] = c2[i];
     eaa:	00249713          	slli	a4,s1,0x2
     eae:	972a                	add	a4,a4,a0
     eb0:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     eb2:	0485                	addi	s1,s1,1
     eb4:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     eb6:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     eba:	b755                	j	e5e <ntru_deceypt+0x8e>

00000ebc <default_exc_handler>:
  jal x0, default_exc_handler
     ebc:	0000006f          	j	ebc <default_exc_handler>

00000ec0 <reset_handler>:
  mv  x1, x0
     ec0:	00000093          	li	ra,0
  mv  x2, x1
     ec4:	8106                	mv	sp,ra
  mv  x3, x1
     ec6:	8186                	mv	gp,ra
  mv  x4, x1
     ec8:	8206                	mv	tp,ra
  mv  x5, x1
     eca:	8286                	mv	t0,ra
  mv  x6, x1
     ecc:	8306                	mv	t1,ra
  mv  x7, x1
     ece:	8386                	mv	t2,ra
  mv  x8, x1
     ed0:	8406                	mv	s0,ra
  mv  x9, x1
     ed2:	8486                	mv	s1,ra
  mv x10, x1
     ed4:	8506                	mv	a0,ra
  mv x11, x1
     ed6:	8586                	mv	a1,ra
  mv x12, x1
     ed8:	8606                	mv	a2,ra
  mv x13, x1
     eda:	8686                	mv	a3,ra
  mv x14, x1
     edc:	8706                	mv	a4,ra
  mv x15, x1
     ede:	8786                	mv	a5,ra
  mv x16, x1
     ee0:	8806                	mv	a6,ra
  mv x17, x1
     ee2:	8886                	mv	a7,ra
  mv x18, x1
     ee4:	8906                	mv	s2,ra
  mv x19, x1
     ee6:	8986                	mv	s3,ra
  mv x20, x1
     ee8:	8a06                	mv	s4,ra
  mv x21, x1
     eea:	8a86                	mv	s5,ra
  mv x22, x1
     eec:	8b06                	mv	s6,ra
  mv x23, x1
     eee:	8b86                	mv	s7,ra
  mv x24, x1
     ef0:	8c06                	mv	s8,ra
  mv x25, x1
     ef2:	8c86                	mv	s9,ra
  mv x26, x1
     ef4:	8d06                	mv	s10,ra
  mv x27, x1
     ef6:	8d86                	mv	s11,ra
  mv x28, x1
     ef8:	8e06                	mv	t3,ra
  mv x29, x1
     efa:	8e86                	mv	t4,ra
  mv x30, x1
     efc:	8f06                	mv	t5,ra
  mv x31, x1
     efe:	8f86                	mv	t6,ra
  la   x2, _stack_start
     f00:	0000f117          	auipc	sp,0xf
     f04:	10010113          	addi	sp,sp,256 # 10000 <_stack_start>

00000f08 <_start>:
  la x26, _bss_start
     f08:	00000d17          	auipc	s10,0x0
     f0c:	46cd0d13          	addi	s10,s10,1132 # 1374 <_bss_start>
  la x27, _bss_end
     f10:	00001d97          	auipc	s11,0x1
     f14:	1f4d8d93          	addi	s11,s11,500 # 2104 <_bss_end>
  bge x26, x27, zero_loop_end
     f18:	01bd5763          	bge	s10,s11,f26 <main_entry>

00000f1c <zero_loop>:
  sw x0, 0(x26)
     f1c:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
     f20:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
     f22:	ffaddde3          	bge	s11,s10,f1c <zero_loop>

00000f26 <main_entry>:
  addi x10, x0, 0
     f26:	00000513          	li	a0,0
  addi x11, x0, 0
     f2a:	00000593          	li	a1,0
  jal x1, main
     f2e:	18a000ef          	jal	ra,10b8 <main>

00000f32 <memcpy>:
     f32:	00a5c7b3          	xor	a5,a1,a0
     f36:	8b8d                	andi	a5,a5,3
     f38:	00c508b3          	add	a7,a0,a2
     f3c:	e7a1                	bnez	a5,f84 <memcpy+0x52>
     f3e:	478d                	li	a5,3
     f40:	04c7f263          	bgeu	a5,a2,f84 <memcpy+0x52>
     f44:	00357793          	andi	a5,a0,3
     f48:	872a                	mv	a4,a0
     f4a:	eba9                	bnez	a5,f9c <memcpy+0x6a>
     f4c:	ffc8f613          	andi	a2,a7,-4
     f50:	fe060793          	addi	a5,a2,-32
     f54:	06f76763          	bltu	a4,a5,fc2 <memcpy+0x90>
     f58:	02c77363          	bgeu	a4,a2,f7e <memcpy+0x4c>
     f5c:	86ae                	mv	a3,a1
     f5e:	87ba                	mv	a5,a4
     f60:	0006a803          	lw	a6,0(a3)
     f64:	0791                	addi	a5,a5,4
     f66:	0691                	addi	a3,a3,4
     f68:	ff07ae23          	sw	a6,-4(a5)
     f6c:	fec7eae3          	bltu	a5,a2,f60 <memcpy+0x2e>
     f70:	fff60793          	addi	a5,a2,-1
     f74:	8f99                	sub	a5,a5,a4
     f76:	9bf1                	andi	a5,a5,-4
     f78:	0791                	addi	a5,a5,4
     f7a:	973e                	add	a4,a4,a5
     f7c:	95be                	add	a1,a1,a5
     f7e:	01176663          	bltu	a4,a7,f8a <memcpy+0x58>
     f82:	8082                	ret
     f84:	872a                	mv	a4,a0
     f86:	ff157ee3          	bgeu	a0,a7,f82 <memcpy+0x50>
     f8a:	0005c783          	lbu	a5,0(a1)
     f8e:	0705                	addi	a4,a4,1
     f90:	0585                	addi	a1,a1,1
     f92:	fef70fa3          	sb	a5,-1(a4)
     f96:	ff176ae3          	bltu	a4,a7,f8a <memcpy+0x58>
     f9a:	8082                	ret
     f9c:	0005c683          	lbu	a3,0(a1)
     fa0:	0705                	addi	a4,a4,1
     fa2:	00377793          	andi	a5,a4,3
     fa6:	fed70fa3          	sb	a3,-1(a4)
     faa:	0585                	addi	a1,a1,1
     fac:	d3c5                	beqz	a5,f4c <memcpy+0x1a>
     fae:	0005c683          	lbu	a3,0(a1)
     fb2:	0705                	addi	a4,a4,1
     fb4:	00377793          	andi	a5,a4,3
     fb8:	fed70fa3          	sb	a3,-1(a4)
     fbc:	0585                	addi	a1,a1,1
     fbe:	fff9                	bnez	a5,f9c <memcpy+0x6a>
     fc0:	b771                	j	f4c <memcpy+0x1a>
     fc2:	41d4                	lw	a3,4(a1)
     fc4:	0005a283          	lw	t0,0(a1)
     fc8:	0085af83          	lw	t6,8(a1)
     fcc:	00c5af03          	lw	t5,12(a1)
     fd0:	0105ae83          	lw	t4,16(a1)
     fd4:	0145ae03          	lw	t3,20(a1)
     fd8:	0185a303          	lw	t1,24(a1)
     fdc:	01c5a803          	lw	a6,28(a1)
     fe0:	c354                	sw	a3,4(a4)
     fe2:	5194                	lw	a3,32(a1)
     fe4:	00572023          	sw	t0,0(a4)
     fe8:	01f72423          	sw	t6,8(a4)
     fec:	01e72623          	sw	t5,12(a4)
     ff0:	01d72823          	sw	t4,16(a4)
     ff4:	01c72a23          	sw	t3,20(a4)
     ff8:	00672c23          	sw	t1,24(a4)
     ffc:	01072e23          	sw	a6,28(a4)
    1000:	d314                	sw	a3,32(a4)
    1002:	02470713          	addi	a4,a4,36
    1006:	02458593          	addi	a1,a1,36
    100a:	faf76ce3          	bltu	a4,a5,fc2 <memcpy+0x90>
    100e:	b7a9                	j	f58 <memcpy+0x26>

00001010 <memset>:
    1010:	433d                	li	t1,15
    1012:	872a                	mv	a4,a0
    1014:	02c37363          	bgeu	t1,a2,103a <memset+0x2a>
    1018:	00f77793          	andi	a5,a4,15
    101c:	efbd                	bnez	a5,109a <memset+0x8a>
    101e:	e5ad                	bnez	a1,1088 <memset+0x78>
    1020:	ff067693          	andi	a3,a2,-16
    1024:	8a3d                	andi	a2,a2,15
    1026:	96ba                	add	a3,a3,a4
    1028:	c30c                	sw	a1,0(a4)
    102a:	c34c                	sw	a1,4(a4)
    102c:	c70c                	sw	a1,8(a4)
    102e:	c74c                	sw	a1,12(a4)
    1030:	0741                	addi	a4,a4,16
    1032:	fed76be3          	bltu	a4,a3,1028 <memset+0x18>
    1036:	e211                	bnez	a2,103a <memset+0x2a>
    1038:	8082                	ret
    103a:	40c306b3          	sub	a3,t1,a2
    103e:	068a                	slli	a3,a3,0x2
    1040:	00000297          	auipc	t0,0x0
    1044:	9696                	add	a3,a3,t0
    1046:	00a68067          	jr	10(a3)
    104a:	00b70723          	sb	a1,14(a4)
    104e:	00b706a3          	sb	a1,13(a4)
    1052:	00b70623          	sb	a1,12(a4)
    1056:	00b705a3          	sb	a1,11(a4)
    105a:	00b70523          	sb	a1,10(a4)
    105e:	00b704a3          	sb	a1,9(a4)
    1062:	00b70423          	sb	a1,8(a4)
    1066:	00b703a3          	sb	a1,7(a4)
    106a:	00b70323          	sb	a1,6(a4)
    106e:	00b702a3          	sb	a1,5(a4)
    1072:	00b70223          	sb	a1,4(a4)
    1076:	00b701a3          	sb	a1,3(a4)
    107a:	00b70123          	sb	a1,2(a4)
    107e:	00b700a3          	sb	a1,1(a4)
    1082:	00b70023          	sb	a1,0(a4)
    1086:	8082                	ret
    1088:	0ff5f593          	andi	a1,a1,255
    108c:	00859693          	slli	a3,a1,0x8
    1090:	8dd5                	or	a1,a1,a3
    1092:	01059693          	slli	a3,a1,0x10
    1096:	8dd5                	or	a1,a1,a3
    1098:	b761                	j	1020 <memset+0x10>
    109a:	00279693          	slli	a3,a5,0x2
    109e:	00000297          	auipc	t0,0x0
    10a2:	9696                	add	a3,a3,t0
    10a4:	8286                	mv	t0,ra
    10a6:	fa8680e7          	jalr	-88(a3)
    10aa:	8096                	mv	ra,t0
    10ac:	17c1                	addi	a5,a5,-16
    10ae:	8f1d                	sub	a4,a4,a5
    10b0:	963e                	add	a2,a2,a5
    10b2:	f8c374e3          	bgeu	t1,a2,103a <memset+0x2a>
    10b6:	b7a5                	j	101e <memset+0xe>

000010b8 <main>:

int main(){
    10b8:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    10bc:	0c000613          	li	a2,192
    10c0:	00000597          	auipc	a1,0x0
    10c4:	1f058593          	addi	a1,a1,496 # 12b0 <__DTOR_END__+0xc0>
    10c8:	0068                	addi	a0,sp,12
int main(){
    10ca:	42112623          	sw	ra,1068(sp)
    10ce:	42812423          	sw	s0,1064(sp)
    10d2:	42912223          	sw	s1,1060(sp)
    10d6:	43212023          	sw	s2,1056(sp)

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    resultkon[0] = 0xaaaaaaa0;
    10da:	aaaab4b7          	lui	s1,0xaaaab
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    10de:	3d91                	jal	f32 <memcpy>
    resultkon[0] = 0xaaaaaaa0;
    10e0:	aa048793          	addi	a5,s1,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
    10e4:	00000417          	auipc	s0,0x0
    10e8:	28c40413          	addi	s0,s0,652 # 1370 <_edata>
    keys = generate_keys(N, p, q);
    10ec:	06500613          	li	a2,101
    10f0:	458d                	li	a1,3
    10f2:	03500513          	li	a0,53
    resultkon[0] = 0xaaaaaaa0;
    10f6:	c01c                	sw	a5,0(s0)
    resultkon[0] = 0xaaaaaaa1;
    10f8:	aa148493          	addi	s1,s1,-1375
    keys = generate_keys(N, p, q);
    10fc:	3229                	jal	a06 <generate_keys>
    resultkon[0] = 0xaaaaaaa1;
    10fe:	4781                	li	a5,0
    1100:	c004                	sw	s1,0(s0)
   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
    1102:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
    1106:	00f506b3          	add	a3,a0,a5
    110a:	4290                	lw	a2,0(a3)
    110c:	1314                	addi	a3,sp,416
    110e:	96be                	add	a3,a3,a5
    1110:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
    1112:	0791                	addi	a5,a5,4
    1114:	fee799e3          	bne	a5,a4,1106 <main+0x4e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
    1118:	1cd8                	addi	a4,sp,628
    111a:	1a850793          	addi	a5,a0,424
    111e:	27c50693          	addi	a3,a0,636
    1122:	893a                	mv	s2,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
    1124:	4390                	lw	a2,0(a5)
    1126:	0791                	addi	a5,a5,4
    1128:	0711                	addi	a4,a4,4
    112a:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
    112e:	fed79be3          	bne	a5,a3,1124 <main+0x6c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
    1132:	01f8                	addi	a4,sp,204
    1134:	35050793          	addi	a5,a0,848
    1138:	42450613          	addi	a2,a0,1060
    113c:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
    113e:	438c                	lw	a1,0(a5)
    1140:	0791                	addi	a5,a5,4
    1142:	0711                	addi	a4,a4,4
    1144:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
    1148:	fec79be3          	bne	a5,a2,113e <main+0x86>
    114c:	06b0                	addi	a2,sp,840
    114e:	4fc50513          	addi	a0,a0,1276
    1152:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
    1154:	4398                	lw	a4,0(a5)
    1156:	0791                	addi	a5,a5,4
    1158:	0611                	addi	a2,a2,4
    115a:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
    115e:	fea79be3          	bne	a5,a0,1154 <main+0x9c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    resultkon[0] = 0xbbbbbbb0;
    1162:	bbbbc4b7          	lui	s1,0xbbbbc
    1166:	bb048793          	addi	a5,s1,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    116a:	8742                	mv	a4,a6
    116c:	0070                	addi	a2,sp,12
    116e:	06500593          	li	a1,101
    1172:	03500513          	li	a0,53
    resultkon[0] = 0xbbbbbbb0;
    1176:	c01c                	sw	a5,0(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1178:	3675                	jal	d24 <ntru_encyrpt>
    117a:	87aa                	mv	a5,a0
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");

    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    117c:	874a                	mv	a4,s2
    117e:	458d                	li	a1,3
    resultkon[0] = 0xbbbbbbb1;
    1180:	bb148493          	addi	s1,s1,-1103
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1184:	34810813          	addi	a6,sp,840
    1188:	1314                	addi	a3,sp,416
    118a:	06500613          	li	a2,101
    118e:	03500513          	li	a0,53
    resultkon[0] = 0xbbbbbbb1;
    1192:	c004                	sw	s1,0(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1194:	3935                	jal	dd0 <ntru_deceypt>
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    1196:	dedee737          	lui	a4,0xdedee
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    119a:	4781                	li	a5,0
            resultkon[0] = 0xDEDEDEDE;
    119c:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
    11a0:	08000593          	li	a1,128
        if(!(message[i] == Dec_Message[i])){
    11a4:	0070                	addi	a2,sp,12
    11a6:	00f506b3          	add	a3,a0,a5
    11aa:	963e                	add	a2,a2,a5
    11ac:	4210                	lw	a2,0(a2)
    11ae:	4294                	lw	a3,0(a3)
    11b0:	02d60363          	beq	a2,a3,11d6 <main+0x11e>
            resultkon[0] = 0xBABABABA;
    11b4:	babac7b7          	lui	a5,0xbabac
    11b8:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    11bc:	c01c                	sw	a5,0(s0)
		}
    }
			

    return 0;
}
    11be:	42c12083          	lw	ra,1068(sp)
    11c2:	42812403          	lw	s0,1064(sp)
    11c6:	42412483          	lw	s1,1060(sp)
    11ca:	42012903          	lw	s2,1056(sp)
    11ce:	4501                	li	a0,0
    11d0:	43010113          	addi	sp,sp,1072
    11d4:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    11d6:	c018                	sw	a4,0(s0)
    for(i = 0; i < 32; ++i){
    11d8:	0791                	addi	a5,a5,4
    11da:	fcb795e3          	bne	a5,a1,11a4 <main+0xec>
    11de:	b7c5                	j	11be <main+0x106>

000011e0 <__CTOR_LIST__>:
	...

000011e8 <__CTOR_END__>:
	...

Disassembly of section .rodata:

000011f0 <.rodata>:
    11f0:	0001                	nop
    11f2:	0000                	unimp
    11f4:	ffff                	0xffff
    11f6:	ffff                	0xffff
    11f8:	0000                	unimp
    11fa:	0000                	unimp
    11fc:	0001                	nop
    11fe:	0000                	unimp
    1200:	ffff                	0xffff
    1202:	ffff                	0xffff
    1204:	0001                	nop
    1206:	0000                	unimp
    1208:	ffff                	0xffff
    120a:	ffff                	0xffff
    120c:	0000                	unimp
    120e:	0000                	unimp
    1210:	0001                	nop
    1212:	0000                	unimp
    1214:	0001                	nop
    1216:	0000                	unimp
    1218:	0000                	unimp
    121a:	0000                	unimp
    121c:	ffff                	0xffff
    121e:	ffff                	0xffff
    1220:	0001                	nop
    1222:	0000                	unimp
    1224:	ffff                	0xffff
    1226:	ffff                	0xffff
    1228:	0001                	nop
    122a:	0000                	unimp
    122c:	0000                	unimp
    122e:	0000                	unimp
    1230:	0001                	nop
    1232:	0000                	unimp
    1234:	0001                	nop
    1236:	0000                	unimp
    1238:	0000                	unimp
    123a:	0000                	unimp
    123c:	ffff                	0xffff
    123e:	ffff                	0xffff
    1240:	0001                	nop
    1242:	0000                	unimp
    1244:	ffff                	0xffff
    1246:	ffff                	0xffff
    1248:	0001                	nop
    124a:	0000                	unimp
    124c:	0000                	unimp
    124e:	0000                	unimp
    1250:	0001                	nop
    1252:	0000                	unimp
    1254:	0001                	nop
    1256:	0000                	unimp
    1258:	0000                	unimp
    125a:	0000                	unimp
    125c:	0001                	nop
    125e:	0000                	unimp
    1260:	ffff                	0xffff
    1262:	ffff                	0xffff
    1264:	0001                	nop
    1266:	0000                	unimp
    1268:	ffff                	0xffff
    126a:	ffff                	0xffff
    126c:	0000                	unimp
    126e:	0000                	unimp
    1270:	0001                	nop
    1272:	0000                	unimp
    1274:	ffff                	0xffff
    1276:	ffff                	0xffff
    1278:	0000                	unimp
    127a:	0000                	unimp
    127c:	0001                	nop
    127e:	0000                	unimp
    1280:	ffff                	0xffff
    1282:	ffff                	0xffff
    1284:	0001                	nop
    1286:	0000                	unimp
    1288:	ffff                	0xffff
    128a:	ffff                	0xffff
    128c:	0000                	unimp
    128e:	0000                	unimp
    1290:	0001                	nop
    1292:	0000                	unimp
    1294:	0001                	nop
    1296:	0000                	unimp
    1298:	0000                	unimp
    129a:	0000                	unimp
    129c:	ffff                	0xffff
    129e:	ffff                	0xffff
    12a0:	0001                	nop
    12a2:	0000                	unimp
    12a4:	ffff                	0xffff
    12a6:	ffff                	0xffff
    12a8:	0001                	nop
    12aa:	0000                	unimp
    12ac:	0000                	unimp
    12ae:	0000                	unimp
    12b0:	0001                	nop
    12b2:	0000                	unimp
    12b4:	0001                	nop
    12b6:	0000                	unimp
    12b8:	0002                	c.slli64	zero
    12ba:	0000                	unimp
    12bc:	0001                	nop
    12be:	0000                	unimp
    12c0:	0001                	nop
    12c2:	0000                	unimp
    12c4:	0001                	nop
    12c6:	0000                	unimp
    12c8:	0001                	nop
    12ca:	0000                	unimp
    12cc:	0002                	c.slli64	zero
    12ce:	0000                	unimp
    12d0:	0001                	nop
    12d2:	0000                	unimp
    12d4:	0001                	nop
    12d6:	0000                	unimp
    12d8:	0000                	unimp
    12da:	0000                	unimp
    12dc:	0001                	nop
    12de:	0000                	unimp
    12e0:	0001                	nop
    12e2:	0000                	unimp
    12e4:	0002                	c.slli64	zero
    12e6:	0000                	unimp
    12e8:	0001                	nop
    12ea:	0000                	unimp
    12ec:	0000                	unimp
    12ee:	0000                	unimp
    12f0:	0001                	nop
    12f2:	0000                	unimp
    12f4:	0002                	c.slli64	zero
    12f6:	0000                	unimp
    12f8:	0000                	unimp
    12fa:	0000                	unimp
    12fc:	0001                	nop
    12fe:	0000                	unimp
    1300:	0001                	nop
    1302:	0000                	unimp
    1304:	0001                	nop
    1306:	0000                	unimp
    1308:	0001                	nop
    130a:	0000                	unimp
    130c:	0000                	unimp
    130e:	0000                	unimp
    1310:	0001                	nop
    1312:	0000                	unimp
    1314:	0001                	nop
    1316:	0000                	unimp
    1318:	0000                	unimp
    131a:	0000                	unimp
    131c:	0002                	c.slli64	zero
    131e:	0000                	unimp
    1320:	0001                	nop
    1322:	0000                	unimp
    1324:	0002                	c.slli64	zero
    1326:	0000                	unimp
    1328:	0001                	nop
    132a:	0000                	unimp
    132c:	0000                	unimp
    132e:	0000                	unimp
    1330:	0001                	nop
    1332:	0000                	unimp
    1334:	0001                	nop
    1336:	0000                	unimp
    1338:	0002                	c.slli64	zero
    133a:	0000                	unimp
    133c:	0001                	nop
    133e:	0000                	unimp
    1340:	0001                	nop
    1342:	0000                	unimp
    1344:	0001                	nop
    1346:	0000                	unimp
    1348:	0001                	nop
    134a:	0000                	unimp
    134c:	0002                	c.slli64	zero
    134e:	0000                	unimp
    1350:	0001                	nop
    1352:	0000                	unimp
    1354:	0001                	nop
    1356:	0000                	unimp
    1358:	0002                	c.slli64	zero
    135a:	0000                	unimp
    135c:	0001                	nop
    135e:	0000                	unimp
    1360:	0001                	nop
    1362:	0000                	unimp
    1364:	0001                	nop
    1366:	0000                	unimp
    1368:	0001                	nop
    136a:	0000                	unimp
    136c:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

00001370 <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    1370:	bebe                	fsd	fa5,376(sp)
    1372:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

00001374 <_bss_start>:
	...

000015cc <product2>:
	...

00001824 <result>:
	...

00001a7c <ti_2>:
	...

00001c0c <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	00001bd3          	fadd.s	fs7,ft0,ft0,rtz
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	000005cf          	fnmadd.s	fa1,ft0,ft0,ft0,rne
      10:	300c                	fld	fa1,32(s0)
      12:	b3000003          	lb	zero,-1232(zero) # fffffb30 <_stack_start+0xfffefb30>
      16:	0004                	0x4
	...
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	0426                	slli	s0,s0,0x9
      2a:	0000                	unimp
      2c:	0102                	c.slli64	sp
      2e:	2408                	fld	fa0,8(s0)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	0445                	addi	s0,s0,17
      38:	0000                	unimp
      3a:	0202                	c.slli64	tp
      3c:	0002c107          	flq	ft2,0(t0) # 109e <memset+0x8e>
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	00fd                	addi	ra,ra,31
      46:	0000                	unimp
      48:	0402                	c.slli64	s0
      4a:	00007a07          	0x7a07
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00f8                	addi	a4,sp,76
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00007507          	0x7507
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	007f                	0x7f
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	7d04                	flw	fs1,56(a0)
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	0304                	addi	s1,sp,384
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
  jal x0, reset_handler
      80:	0069                	c.nop	26
      82:	0000                	unimp
  jal x0, default_exc_handler
      84:	d806                	sw	ra,48(sp)
      86:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
  jal x0, default_exc_handler
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	5106                	lw	sp,96(sp)
    switch(length%3) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	6f06                	flw	ft10,64(sp)
      9e:	0006                	c.slli	zero,0x1
      a0:	0300                	addi	s0,sp,384
      a2:	005d1793          	slli	a5,s10,0x5
            for (i = 0; i < (length / 3); i++) {
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
      b0:	0800                	addi	s0,sp,16
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	02fe                	slli	t0,t0,0x1f
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
      be:	0225                	addi	tp,tp,9
      c0:	0000                	unimp
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
      c8:	0000                	unimp
      ca:	2c09                	jal	2dc <polymult+0x110>
      cc:	0000                	unimp
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	080b0003          	lb	zero,128(s6)
      dc:	fe09a203          	lw	tp,-32(s3)
      e0:	0000                	unimp
      e2:	0c00                	addi	s0,sp,528
      e4:	0000053b          	0x53b
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	5d07a403          	lw	s0,1488(a5)
            a1[length-2] = a1[length-2] + a2[length-2];
      ec:	0000                	unimp
      ee:	0000                	unimp
      f0:	430c                	lw	a1,0(a4)
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
      f6:	05a9                	addi	a1,a1,10
} //end of function
      f8:	00a8                	addi	a0,sp,72
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fa:	0000                	unimp
      fc:	0004                	0x4
    asm volatile(
      fe:	7506                	flw	fa0,96(sp)
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
            for (i = 0; i < (length / 3); i++) {
     108:	0000                	unimp
     10a:	040d                	addi	s0,s0,3
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     10c:	a206                	fsd	ft1,256(sp)
     10e:	0005                	c.nop	1
    asm volatile(
     110:	0400                	addi	s0,sp,512
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
     116:	0000                	unimp
     118:	0806                	slli	a6,a6,0x1
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	0004                	0x4
     11c:	0500                	addi	s0,sp,640
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
    asm volatile(
     122:	0000                	unimp
     124:	dd06                	sw	ra,184(sp)
     126:	0001                	nop
     128:	0400                	addi	s0,sp,512
     12a:	01181b23          	sh	a7,22(a6)
            for (i = 0; i < ((length-2) / 3); i++) {
     12e:	0000                	unimp
    asm volatile(
     130:	ee0e                	fsw	ft3,28(sp)
     132:	0001                	nop
}
     134:	1800                	addi	s0,sp,48
    switch(length%3) {
     136:	3404                	fld	fs1,40(s0)
     138:	8a08                	0x8a08
     13a:	0001                	nop
     13c:	0c00                	addi	s0,sp,528
     13e:	0496                	slli	s1,s1,0x5
     140:	0000                	unimp
     142:	3604                	fld	fs1,40(a2)
     144:	00018a13          	mv	s4,gp
     148:	0000                	unimp
            for (i = 0; i < (length / 3); i++) {
     14a:	006b5f0f          	0x6b5f0f
     14e:	3704                	fld	fs1,40(a4)
     150:	00005d07          	0x5d07
     154:	0400                	addi	s0,sp,512
            for (i = 0; i < ((length-2) / 3); i++) {
     156:	170c                	addi	a1,sp,928
     158:	0005                	c.nop	1
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
     160:	0000                	unimp
     162:	0c08                	addi	a0,sp,528
     164:	000001d7          	0x1d7
            a1[length-1] = a2[length-1];
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
     16c:	0000                	unimp
     16e:	0c00                	addi	s0,sp,528
     170:	430c                	lw	a1,0(a4)
     172:	0006                	c.slli	zero,0x1
     174:	0400                	addi	s0,sp,512
     176:	005d1b37          	lui	s6,0x5d1
            for (i = 0; i < ((length-1) / 3); i++) {
     17a:	0000                	unimp
     17c:	0f10                	addi	a2,sp,912
     17e:	785f 0400 0b38      	0xb380400785f
     184:	0190                	addi	a2,sp,192
     186:	0000                	unimp
            a1[length-1] = a2[length-1];
     188:	0014                	0x14
            a1[length-2] = a2[length-2];
     18a:	0410                	addi	a2,sp,512
     18c:	0130                	addi	a2,sp,136
     18e:	0000                	unimp
     190:	0c09                	addi	s8,s8,2
     192:	0001                	nop
} //end of function
     194:	a000                	fsd	fs0,0(s0)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
    asm volatile(
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
     19e:	0000                	unimp
     1a0:	150e                	slli	a0,a0,0x23
     1a2:	0002                	c.slli64	zero
            for (i = 0; i < (length / 3); i++) {
     1a4:	2400                	fld	fs0,8(s0)
     1a6:	3c04                	fld	fs1,56(s0)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1a8:	2308                	fld	fa0,0(a4)
     1aa:	0002                	c.slli64	zero
    asm volatile(
     1ac:	0c00                	addi	s0,sp,528
     1ae:	000000ef          	jal	ra,1ae <array_equ+0x78>
     1b2:	3e04                	fld	fs1,56(a2)
     1b4:	5d09                	li	s10,-30
            for (i = 0; i < ((length-1) / 3); i++) {
     1b6:	0000                	unimp
     1b8:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1ba:	600c                	flw	fa1,0(s0)
     1bc:	0005                	c.nop	1
    asm volatile(
     1be:	0400                	addi	s0,sp,512
     1c0:	005d093f 0c040000 	0xc040000005d093f
            for (i = 0; i < ((length-2) / 3); i++) {
     1c8:	0122                	slli	sp,sp,0x8
     1ca:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1cc:	4004                	lw	s1,0(s0)
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
     1d2:	0800                	addi	s0,sp,16
    int line[size_b][size_a + size_b];
     1d4:	f30c                	fsw	fa1,32(a4)
     1d6:	0006                	c.slli	zero,0x1
     1d8:	0400                	addi	s0,sp,512
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1da:	0941                	addi	s2,s2,16
     1dc:	005d                	c.nop	23
    int line[size_b][size_a + size_b];
     1de:	0000                	unimp
     1e0:	0c0c                	addi	a1,sp,528
     1e2:	03a2                	slli	t2,t2,0x8
     1e4:	0000                	unimp
     1e6:	4204                	lw	s1,0(a2)
     1e8:	5d09                	li	s10,-30
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ea:	0000                	unimp
     1ec:	1000                	addi	s0,sp,32
     1ee:	5a0c                	lw	a1,48(a2)
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
     1f8:	0000                	unimp
     1fa:	0c14                	addi	a3,sp,528
     1fc:	0648                	addi	a0,sp,772
     1fe:	0000                	unimp
     200:	4404                	lw	s1,8(s0)
    int line[size_b][size_a + size_b];
     202:	5d09                	li	s10,-30
    int pola[size_a];
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
    int line[size_b][size_a + size_b];
     208:	4f0c                	lw	a1,24(a4)
    int pola[size_a];
     20a:	0004                	0x4
    int line[size_b][size_a + size_b];
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
    int pola[size_a];
     210:	005d                	c.nop	23
    int line[size_b][size_a + size_b];
     212:	0000                	unimp
    int pola[size_a];
     214:	0c1c                	addi	a5,sp,528
     216:	06ad                	addi	a3,a3,11
    int polb[size_b];
     218:	0000                	unimp
     21a:	4604                	lw	s1,8(a2)
     21c:	5d09                	li	s10,-30
    int pola[size_a];
     21e:	0000                	unimp
    int polb[size_b];
     220:	2000                	fld	fs0,0(s0)
     222:	1100                	addi	s0,sp,160
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     224:	0131                	addi	sp,sp,12
     226:	0000                	unimp
     228:	0108                	addi	a0,sp,128
    int line[size_b][size_a + size_b];
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
    int pola[size_a];
     22e:	0002                	c.slli64	zero
     230:	0c00                	addi	s0,sp,528
    int polb[size_b];
     232:	01bd                	addi	gp,gp,15
    for (i = 0; i < size_b; ++i){
     234:	0000                	unimp
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
            product[j] = 0;
     23a:	0002                	c.slli64	zero
     23c:	0000                	unimp
     23e:	000c                	0xc
     240:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
    array_equ(pola,a,size_a);
     246:	0268                	addi	a0,sp,268
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
     24c:	0000058b          	0x58b
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
     254:	0001                	nop
    for (i = 0; i < size_a; ++i){
     256:	0000                	unimp
     258:	1201                	addi	tp,tp,-32
     25a:	0160                	addi	s0,sp,140
     25c:	0000                	unimp
     25e:	5604                	lw	s1,40(a2)
     260:	0c0a                	slli	s8,s8,0x2
     262:	0001                	nop
     264:	0400                	addi	s0,sp,512
    array_equ(polb,b,size_b);
     266:	0001                	nop
     268:	0a09                	addi	s4,s4,2
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
   for (i = 0; i < size_b; ++i){
     26e:	0002                	c.slli64	zero
     270:	0a00                	addi	s0,sp,272
     272:	0069                	c.nop	26
     274:	0000                	unimp
    if(star_mult == 1){
     276:	001f bb11 0003      	0x3bb11001f
     27c:	9000                	0x9000
     27e:	0401                	addi	s0,s0,0
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
     286:	960c                	0x960c
     288:	0004                	0x4
        for (j = size_b -1; j >= 0; j = j-1){
     28a:	0400                	addi	s0,sp,512
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0xe4>
            for (k = size_a-1; k >= 0; k = k-1 ){
     290:	0000                	unimp
            product[j] = 0;
     292:	0c00                	addi	s0,sp,528
     294:	04ae                	slli	s1,s1,0xb
     296:	0000                	unimp
            line[i][j] = 0;
     298:	6404                	flw	fs1,8(s0)
     29a:	5d06                	lw	s10,96(sp)
            product[j] = 0;
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
        for(j = 0; j < size_a + size_b -1; ++j){
     2a0:	d20c                	sw	a1,32(a2)
     2a2:	0001                	nop
     2a4:	0400                	addi	s0,sp,512
     2a6:	0966                	slli	s2,s2,0x19
    for (i = 0; i < size_b; ++i){
     2a8:	02c1                	addi	t0,t0,16
     2aa:	0000                	unimp
     2ac:	0c08                	addi	a0,sp,528
     2ae:	0131                	addi	sp,sp,12
        for(j = 0; j < size_a + size_b -1; ++j){
     2b0:	0000                	unimp
     2b2:	6704                	flw	fs1,8(a4)
            pola[i] = pola[i] + mod;
     2b4:	231e                	fld	ft6,448(sp)
     2b6:	0002                	c.slli64	zero
        while (pola[i] < 0){
     2b8:	8800                	0x8800
     2ba:	1000                	addi	s0,sp,32
     2bc:	7804                	flw	fs1,48(s0)
        pola[i] = pola[i] % mod;
     2be:	0002                	c.slli64	zero
     2c0:	0900                	addi	s0,sp,144
    for (i = 0; i < size_a; ++i){
     2c2:	02d1                	addi	t0,t0,20
     2c4:	0000                	unimp
        pola[i] = pola[i] % mod;
     2c6:	02d1                	addi	t0,t0,20
     2c8:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     2ca:	690a                	flw	fs2,128(sp)
            polb[i] = polb[i] + mod;
     2cc:	0000                	unimp
     2ce:	1f00                	addi	s0,sp,944
        while (polb[i] < 0){
     2d0:	1000                	addi	s0,sp,32
     2d2:	d704                	sw	s1,40(a4)
     2d4:	0002                	c.slli64	zero
        polb[i] = polb[i] % mod;
     2d6:	1300                	addi	s0,sp,416
     2d8:	590e                	lw	s2,224(sp)
   for (i = 0; i < size_b; ++i){
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
        polb[i] = polb[i] % mod;
     2de:	7a04                	flw	fs1,48(a2)
     2e0:	0008                	0x8
   for (i = 0; i < size_b; ++i){
     2e2:	0c000003          	lb	zero,192(zero) # c0 <array_add+0x2e>
        for (j = size_b -1; j >= 0; j = j-1){
     2e6:	011c                	addi	a5,sp,128
     2e8:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     2ea:	7b04                	flw	fs1,48(a4)
    for (i = 0; i < size_b; ++i){
     2ec:	0011                	c.nop	4
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
             array_add(product,line[i],size_a+size_b-1);
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
     2f6:	0400                	addi	s0,sp,512
     2f8:	067c                	addi	a5,sp,780
        for(i = 0; i < size_b; ++i){
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
     2fe:	0004                	0x4
     300:	0410                	addi	a2,sp,512
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     306:	800e                	c.mv	zero,gp
     308:	0004                	0x4
     30a:	6800                	flw	fs0,16(s0)
}
     30c:	ba04                	fsd	fs1,48(a2)
     30e:	4908                	lw	a0,16(a0)
     310:	0004                	0x4
     312:	0f00                	addi	s0,sp,912
     314:	705f 0400 12bb      	0x12bb0400705f
     31a:	0300                	addi	s0,sp,384
     31c:	0000                	unimp
     31e:	0f00                	addi	s0,sp,912
     320:	725f 0400 07bc      	0x7bc0400725f
     326:	005d                	c.nop	23
     328:	0000                	unimp
     32a:	0f04                	addi	s1,sp,912
     32c:	775f 0400 07bd      	0x7bd0400775f
     332:	005d                	c.nop	23
     334:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     336:	0c08                	addi	a0,sp,528
     338:	0159                	addi	sp,sp,22
     33a:	0000                	unimp
     33c:	be04                	fsd	fs1,56(a2)
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
     340:	0000                	unimp
     342:	0c00                	addi	s0,sp,528
     344:	540c                	lw	a1,40(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     346:	0002                	c.slli64	zero
                line[size_b-1-j][k] = pola[k]*polb[j];
     348:	0400                	addi	s0,sp,512
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
        for (j = size_b -1; j >= 0; j = j-1){
     352:	625f 0066 c004      	0xc0040066625f
     358:	d811                	beqz	s0,26c <polymult+0xa0>
            for (k = size_a-1; k >= 0; k = k-1 ){
     35a:	0002                	c.slli64	zero
     35c:	1000                	addi	s0,sp,32
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     35e:	980c                	0x980c
     360:	0000                	unimp
     362:	0400                	addi	s0,sp,512
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
     36c:	0000013f 0a0ac804 	0xa0ac8040000013f
     374:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     376:	1c00                	addi	s0,sp,560
     378:	050c                	addi	a1,sp,640
        for (j = size_b -1; j >= 0; j = j-1){
     37a:	0002                	c.slli64	zero
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
     380:	05cd                	addi	a1,a1,19
            line[i][j] = line[i][j] % mod;
     382:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     384:	0c20                	addi	s0,sp,536
     386:	00000353          	fadd.s	ft6,ft0,ft0,rne
            line[i][j] = line[i][j] % mod;
     38a:	cc04                	sw	s1,24(s0)
     38c:	f71d                	bnez	a4,2ba <polymult+0xee>
     38e:	0005                	c.nop	1
        for(j = 0; j < size_a + size_b -1; ++j){
     390:	2400                	fld	fs0,8(s0)
     392:	4b0c                	lw	a1,16(a4)
    for (i = 0; i < size_b; ++i){
     394:	0005                	c.nop	1
     396:	0400                	addi	s0,sp,512
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
        for(j = 0; j < size_a + size_b -1; ++j){
     39c:	0000                	unimp
     39e:	0c28                	addi	a0,sp,536
             array_add(product,line[i],size_a+size_b-1);
     3a0:	000006c7          	fmsub.s	fa3,ft0,ft0,ft0,rne
     3a4:	d004                	sw	s1,32(s0)
     3a6:	3509                	jal	1a8 <array_equ+0x72>
        for(i = 0; i < size_b; ++i){
     3a8:	0006                	c.slli	zero,0x1
     3aa:	2c00                	fld	fs0,24(s0)
     3ac:	62755f0f          	0x62755f0f
    for(j = 0; j < size_a + size_b -1; ++j){
     3b0:	0400                	addi	s0,sp,512
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
        product[j] = product[j] % mod;
     3b6:	0000                	unimp
     3b8:	0f30                	addi	a2,sp,920
     3ba:	755f 0070 d404      	0xd4040070755f
    int line[size_b][size_a + size_b];
     3c0:	0012                	c.slli	zero,0x4
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult+0x1b4>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3c6:	72755f0f          	0x72755f0f
     3ca:	0400                	addi	s0,sp,512
     3cc:	07d5                	addi	a5,a5,21
    int line[size_b][size_a + size_b];
     3ce:	005d                	c.nop	23
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
     3d4:	0116                	slli	sp,sp,0x5
     3d6:	0000                	unimp
     3d8:	d804                	sw	s1,48(s0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3da:	3b11                	jal	ee <array_add+0x5c>
     3dc:	0006                	c.slli	zero,0x1
     3de:	4000                	lw	s0,0(s0)
     3e0:	920c                	0x920c
     3e2:	0006                	c.slli	zero,0x1
     3e4:	0400                	addi	s0,sp,512
     3e6:	11d9                	addi	gp,gp,-10
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
    int line[size_b][size_a + size_b];
     3ec:	6c5f0f43          	0x6c5f0f43
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3f0:	0062                	c.slli	zero,0x18
    int line[size_b][size_a + size_b];
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult+0x13c>
     3f6:	0002                	c.slli64	zero
    int pola[size_a];
     3f8:	4400                	lw	s0,8(s0)
     3fa:	6f0c                	flw	fa1,24(a4)
     3fc:	0001                	nop
     3fe:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     400:	07df 005d 0000      	0x5d07df
    int polb[size_b];
     406:	0c4c                	addi	a1,sp,532
     408:	0196                	slli	gp,gp,0x5
     40a:	0000                	unimp
    int pola[size_a];
     40c:	e004                	fsw	fs1,0(s0)
    int polb[size_b];
     40e:	840a                	mv	s0,sp
     410:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
    int line[size_b][size_a + size_b];
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     41a:	046712e3          	bne	a4,t1,c5e <generate_keys+0x258>
    int pola[size_a];
     41e:	0000                	unimp
    int polb[size_b];
     420:	0c54                	addi	a3,sp,532
    for (i = 0; i < size_b; ++i){
     422:	032a                	slli	t1,t1,0xa
     424:	0000                	unimp
     426:	e704                	fsw	fs1,8(a4)
            product2[j] = 0;
     428:	240c                	fld	fa1,8(s0)
     42a:	0001                	nop
     42c:	5800                	lw	s0,48(s0)
     42e:	880c                	0x880c
    for (i = 0; i < size_b; ++i){
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
    array_equ(pola,a,size_a);
     434:	0ee9                	addi	t4,t4,26
     436:	00fe                	slli	ra,ra,0x1f
     438:	0000                	unimp
     43a:	0c5c                	addi	a5,sp,532
     43c:	0460                	addi	s0,sp,524
     43e:	0000                	unimp
    array_equ(polb,b,size_b);
     440:	ea04                	fsw	fs1,16(a2)
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
     448:	1400                	addi	s0,sp,544
     44a:	009c                	addi	a5,sp,64
    if(star_mult == 1){
     44c:	0000                	unimp
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     452:	6715                	lui	a4,0x5
     454:	0004                	0x4
     456:	1500                	addi	s0,sp,672
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
     45c:	bb15                	j	190 <array_equ+0x5a>
        for (j = size_b -1; j >= 0; j = j-1){
     45e:	0005                	c.nop	1
     460:	1500                	addi	s0,sp,672
            for (k = size_a-1; k >= 0; k = k-1 ){
     462:	005d                	c.nop	23
     464:	0000                	unimp
            product2[j] = 0;
     466:	1000                	addi	s0,sp,32
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
            line[i][j] = 0;
     46c:	1600                	addi	s0,sp,800
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
            product2[j] = 0;
     472:	00051f17          	auipc	t5,0x51
        for(j = 0; j < size_a + size_b -1; ++j){
     476:	2800                	fld	fs0,16(s0)
     478:	0404                	addi	s1,sp,512
     47a:	0265                	addi	tp,tp,25
    for (i = 0; i < size_b; ++i){
     47c:	bb08                	fsd	fa0,48(a4)
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
     482:	043e                	slli	s0,s0,0xf
        for(j = 0; j < size_a + size_b -1; ++j){
     484:	0000                	unimp
     486:	6704                	flw	fs1,8(a4)
                line[size_b-1-j][k] = pola[k]*polb[j];
     488:	0702                	c.slli64	a4
     48a:	005d                	c.nop	23
     48c:	0000                	unimp
     48e:	1800                	addi	s0,sp,48
     490:	0168                	addi	a0,sp,140
     492:	0000                	unimp
     494:	6c04                	flw	fs1,24(s0)
     496:	0b02                	c.slli64	s6
            for (k = size_a-1; k >= 0; k = k-1 ){
     498:	000006a7          	0x6a7
                line[size_b-1-j][k] = pola[k]*polb[j];
     49c:	1804                	addi	s1,sp,48
     49e:	0236                	slli	tp,tp,0xd
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a0:	0000                	unimp
     4a2:	6c04                	flw	fs1,24(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     4a4:	1402                	slli	s0,s0,0x20
     4a6:	000006a7          	0x6a7
     4aa:	1808                	addi	a0,sp,48
     4ac:	01e6                	slli	gp,gp,0x19
            for (k = size_a-1; k >= 0; k = k-1 ){
     4ae:	0000                	unimp
        array_add(product2,line[i],size_a+size_b-1);
     4b0:	6c04                	flw	fs1,24(s0)
     4b2:	1e02                	slli	t3,t3,0x20
     4b4:	000006a7          	0x6a7
    for(i=0;i<size_b;++i){
     4b8:	180c                	addi	a1,sp,48
     4ba:	04a9                	addi	s1,s1,10
}
     4bc:	0000                	unimp
     4be:	6e04                	flw	fs1,24(a2)
     4c0:	0802                	c.slli64	a6
     4c2:	005d                	c.nop	23
     4c4:	0000                	unimp
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
     4ce:	0802                	c.slli64	a6
     4d0:	000008a7          	0x8a7
     4d4:	1814                	addi	a3,sp,48
     4d6:	04fe                	slli	s1,s1,0x1f
     4d8:	0000                	unimp
     4da:	7204                	flw	fs1,32(a2)
     4dc:	0702                	c.slli64	a4
     4de:	005d                	c.nop	23
     4e0:	0000                	unimp
     4e2:	1830                	addi	a2,sp,56
     4e4:	000006eb          	0x6eb
            for (k = size_a-1; k >= 0; k = k-1 ){
     4e8:	7304                	flw	fs1,32(a4)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4ea:	1602                	slli	a2,a2,0x20
     4ec:	08bc                	addi	a5,sp,88
     4ee:	0000                	unimp
     4f0:	1834                	addi	a3,sp,56
     4f2:	03cd                	addi	t2,t2,19
     4f4:	0000                	unimp
     4f6:	7504                	flw	fs1,40(a0)
     4f8:	0702                	c.slli64	a4
            for (k = size_a-1; k >= 0; k = k-1 ){
     4fa:	005d                	c.nop	23
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4fc:	0000                	unimp
     4fe:	1838                	addi	a4,sp,56
     500:	04f4                	addi	a3,sp,588
            for (k = size_a-1; k >= 0; k = k-1 ){
     502:	0000                	unimp
     504:	7704                	flw	fs1,40(a4)
        for (j = size_b -1; j >= 0; j = j-1){
     506:	0a02                	c.slli64	s4
     508:	08cd                	addi	a7,a7,19
     50a:	0000                	unimp
     50c:	183c                	addi	a5,sp,56
        array_add(product2,line[i],size_a+size_b-1);
     50e:	02f6                	slli	t0,t0,0x1d
     510:	0000                	unimp
     512:	7a04                	flw	fs1,48(a2)
     514:	1302                	slli	t1,t1,0x20
    for(i=0;i<size_b;++i){
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
     51a:	1840                	addi	s0,sp,52
    int v[size_N];
     51c:	0000020b          	0x20b
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     520:	7b04                	flw	fs1,48(a4)
    int v[size_N];
     522:	0702                	c.slli64	a4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     524:	005d                	c.nop	23
     526:	0000                	unimp
     528:	1844                	addi	s1,sp,52
     52a:	06e1                	addi	a3,a3,24
     52c:	0000                	unimp
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
     536:	1848                	addi	a0,sp,52
     538:	03f4                	addi	a3,sp,460
     53a:	0000                	unimp
    int v[size_N];
     53c:	7d04                	flw	fs1,56(a0)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
    int v[size_N];
     544:	184c                	addi	a1,sp,52
     546:	023e                	slli	tp,tp,0xf
    int q[size_N];
     548:	0000                	unimp
     54a:	8004                	0x8004
     54c:	0702                	c.slli64	a4
    int num_temp[size_N];
     54e:	005d                	c.nop	23
     550:	0000                	unimp
    int denum_temp[size_D];
     552:	1850                	addi	a2,sp,52
     554:	018e                	slli	gp,gp,0x3
     556:	0000                	unimp
    int num_temp[size_N];
     558:	8104                	0x8104
    int denum_temp[size_D];
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     560:	1854                	addi	a3,sp,52
     562:	00000437          	lui	s0,0x0
    int v[size_N];
     566:	a404                	fsd	fs1,8(s0)
    array_equ(num_temp,num,size_N);
     568:	0702                	c.slli64	a4
     56a:	0882                	c.slli64	a7
     56c:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     56e:	1958                	addi	a4,sp,180
     570:	000003bb          	0x3bb
    int denum_temp[size_D];
     574:	a804                	fsd	fs1,16(s0)
    array_equ(num_temp,num,size_N);
     576:	1302                	slli	t1,t1,0x20
    int denum_temp[size_D];
     578:	000002bb          	0x2bb
    for (i = 0; i < size_N; ++i){
     57c:	0148                	addi	a0,sp,132
     57e:	d419                	beqz	s0,48c <polymult2+0xce>
     580:	0002                	c.slli64	zero
     582:	0400                	addi	s0,sp,512
    array_equ(denum_temp,denum,size_D);
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
     588:	0002                	c.slli64	zero
     58a:	4c00                	lw	s0,24(s0)
    for (i = 0; i < size_D; ++i) {
     58c:	1901                	addi	s2,s2,-32
     58e:	0688                	addi	a0,sp,832
     590:	0000                	unimp
     592:	ad04                	fsd	fs1,24(a0)
    for (i = 0; i < size_N; ++i){
     594:	0c02                	c.slli64	s8
     596:	08e4                	addi	s1,sp,92
     598:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     59a:	02dc                	addi	a5,sp,324
     59c:	4719                	li	a4,6
     59e:	0001                	nop
     5a0:	0400                	addi	s0,sp,512
     5a2:	02b2                	slli	t0,t0,0xc
     5a4:	6810                	flw	fa2,16(s0)
    for (i = 0; i < size_N; ++i){
     5a6:	0006                	c.slli	zero,0x1
     5a8:	e000                	fsw	fs0,0(s0)
        if ( (b_N*u)%mod == 1 )
     5aa:	1902                	slli	s2,s2,0x20
    for (u = 0; u < mod; ++u){
     5ac:	012c                	addi	a1,sp,136
     5ae:	0000                	unimp
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
            num_temp[i] = num_temp[i] + mod;
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
        while (num_temp[i] < 0) {
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
     5bc:	c104                	sw	s1,0(a0)
        num_temp[i] = num_temp[i] % mod;
     5be:	0005                	c.nop	1
     5c0:	0200                	addi	s0,sp,256
    for (i = 0; i < size_N; ++i){
     5c2:	0801                	addi	a6,a6,0
     5c4:	042d                	addi	s0,s0,11
        num_temp[i] = num_temp[i] % mod;
     5c6:	0000                	unimp
     5c8:	c116                	sw	t0,128(sp)
    for (i = 0; i < size_N; ++i){
     5ca:	0005                	c.nop	1
            denum_temp[i] = denum_temp[i] + mod;
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
        while (denum_temp[i] < 0) {
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
     5d4:	009c                	addi	a5,sp,64
        denum_temp[i] = denum_temp[i] % mod;
     5d6:	0000                	unimp
     5d8:	05f1                	addi	a1,a1,28
    for (i = 0; i < size_D; ++i) {
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
        denum_temp[i] = denum_temp[i] % mod;
     5de:	0004                	0x4
     5e0:	1500                	addi	s0,sp,672
    for (i = 0; i < size_D; ++i) {
     5e2:	010a                	slli	sp,sp,0x2
        q[i] = 0;
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polymult2+0x14c>
     5e8:	0005                	c.nop	1
     5ea:	1500                	addi	s0,sp,672
        v[i] = 0;
     5ec:	005d                	c.nop	23
        q[i] = 0;
     5ee:	0000                	unimp
     5f0:	1000                	addi	s0,sp,32
        v[i] = 0;
     5f2:	c804                	sw	s1,16(s0)
     5f4:	0005                	c.nop	1
    for (i = 0; i < size_N; ++i){
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
        if( denum_temp[i] != 0 )
     5fa:	0005                	c.nop	1
    for (i = size_D-1; i >= 0; i = i-1){
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
        if ( (b_N*u)%mod == 1 )
     600:	0000                	unimp
     602:	0000061b          	0x61b
     606:	6715                	lui	a4,0x5
     608:	0004                	0x4
    for (u = 0; u < mod; ++u){
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
        if( num_temp[i] != 0 )
     60e:	0000                	unimp
    for (i = size_N-1; i >= 0; i = i-1){
     610:	9015                	srli	s0,s0,0x25
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
     616:	005d                	c.nop	23
     618:	0000                	unimp
     61a:	1000                	addi	s0,sp,32
     61c:	fd04                	fsw	fs1,56(a0)
    while (d >= d2){
     61e:	0005                	c.nop	1
     620:	1400                	addi	s0,sp,544
     array_equ(result,q,size_N);
     622:	005d                	c.nop	23
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
     628:	0000                	unimp
     62a:	6715                	lui	a4,0x5
     62c:	0004                	0x4
     62e:	1500                	addi	s0,sp,672
    for(i = size_N; i < (2*size_N); ++i){
     630:	010a                	slli	sp,sp,0x2
     632:	0000                	unimp
        result[i] = num_temp[i-size_N];
     634:	1000                	addi	s0,sp,32
     636:	2104                	fld	fs1,0(a0)
     638:	0006                	c.slli	zero,0x1
     63a:	0900                	addi	s0,sp,144
    for(i = size_N; i < (2*size_N); ++i){
     63c:	002c                	addi	a1,sp,8
     63e:	0000                	unimp
}
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     644:	690a                	flw	fs2,128(sp)
     646:	0000                	unimp
     648:	0200                	addi	s0,sp,256
     64a:	0900                	addi	s0,sp,144
     64c:	002c                	addi	a1,sp,8
     64e:	0000                	unimp
     650:	0000065b          	0x65b
     654:	690a                	flw	fs2,128(sp)
     656:	0000                	unimp
     658:	0000                	unimp
     65a:	0500                	addi	s0,sp,640
     65c:	046e                	slli	s0,s0,0x1b
     65e:	0000                	unimp
     660:	2404                	fld	fs1,8(s0)
     662:	1a01                	addi	s4,s4,-32
     664:	0306                	slli	t1,t1,0x1
     666:	0000                	unimp
     668:	521a                	lw	tp,164(sp)
        v[(d-d2)] = u*r_d;
     66a:	0006                	c.slli	zero,0x1
     66c:	0c00                	addi	s0,sp,528
     66e:	2804                	fld	fs1,16(s0)
     670:	0801                	addi	a6,a6,0
     672:	06a1                	addi	a3,a3,8
     674:	0000                	unimp
     676:	9618                	0x9618
        for (i = 0; i < size_N; ++i){
     678:	0004                	0x4
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <generate_keys+0x7c>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     680:	0006                	c.slli	zero,0x1
     682:	0000                	unimp
     684:	9a18                	0x9a18
     686:	0002                	c.slli64	zero
     688:	0400                	addi	s0,sp,512
     68a:	5d07012b          	0x5d07012b
        for (i = 0; i < size_N; ++i){
     68e:	0000                	unimp
     690:	0400                	addi	s0,sp,512
     692:	6818                	flw	fa4,16(s0)
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
        for (i = 0; i < size_N; ++i){
     698:	012c                	addi	a1,sp,136
     69a:	0006a70b          	0x6a70b
     69e:	0800                	addi	s0,sp,16
        for (i = 0; i < size_N; ++i){
     6a0:	1000                	addi	s0,sp,32
     6a2:	6804                	flw	fs1,16(s0)
     6a4:	0006                	c.slli	zero,0x1
        array_add(q, v, size_N);
     6a6:	1000                	addi	s0,sp,32
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
     6ac:	1a00                	addi	s0,sp,304
        for(i = 0; i < size_N; ++i){
     6ae:	00000017          	auipc	zero,0x0
     6b2:	040e                	slli	s0,s0,0x3
     6b4:	0144                	addi	s1,sp,132
        for (i = size_N-1; i >= 0; i = i-1){
     6b6:	e608                	fsw	fa0,8(a2)
     6b8:	0006                	c.slli	zero,0x1
     6ba:	1800                	addi	s0,sp,48
     6bc:	0530                	addi	a2,sp,648
     6be:	0000                	unimp
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
     6c4:	06e6                	slli	a3,a3,0x19
     6c6:	0000                	unimp
            v[i] = v[i] % mod;
     6c8:	1800                	addi	s0,sp,48
        for (i = 0; i < size_N; ++i){
     6ca:	052a                	slli	a0,a0,0xa
     6cc:	0000                	unimp
            v[i] = v[i] % mod;
     6ce:	4604                	lw	s1,8(a2)
     6d0:	1201                	addi	tp,tp,-32
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     6d6:	1806                	slli	a6,a6,0x21
                product[i] = product[i] + mod;
     6d8:	0000003f 12014704 	0x120147040000003f
            while (product[i] < 0) {
     6e0:	003a                	c.slli	zero,0xe
            product[i] = product[i] % mod;
     6e2:	0000                	unimp
     6e4:	000c                	0xc
        for (i = 0; i < size_N; ++i){
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
     6e8:	0000                	unimp
            product[i] = product[i] % mod;
     6ea:	f600                	fsw	fs0,40(a2)
     6ec:	0006                	c.slli	zero,0x1
        for (i = 0; i < size_N; ++i){
     6ee:	0a00                	addi	s0,sp,272
            num_temp[i] = num_temp[i] - product[i];
     6f0:	0069                	c.nop	26
     6f2:	0000                	unimp
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
        for (i = 0; i < size_N; ++i){
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
            num_temp[i] = num_temp[i] - product[i];
     700:	3118                	fld	fa4,32(a0)
     702:	0006                	c.slli	zero,0x1
        for (i = 0; i < size_N; ++i){
     704:	0400                	addi	s0,sp,512
                num_temp[i] = num_temp[i] + mod;
     706:	69180287          	0x69180287
            while (num_temp[i] < 0){
     70a:	0000                	unimp
     70c:	0000                	unimp
     70e:	7e18                	flw	fa4,56(a2)
            num_temp[i] = num_temp[i] % mod;
     710:	0005                	c.nop	1
     712:	0400                	addi	s0,sp,512
        for (i = 0; i < size_N; ++i){
     714:	0288                	addi	a0,sp,320
     716:	bb12                	fsd	ft4,432(sp)
            num_temp[i] = num_temp[i] % mod;
     718:	0005                	c.nop	1
     71a:	0400                	addi	s0,sp,512
        for (i = 0; i < size_N; ++i){
     71c:	e918                	fsw	fa4,16(a0)
            q[i] = q[i] % mod;
     71e:	0002                	c.slli64	zero
        for(i = 0; i < size_N; ++i){
     720:	0400                	addi	s0,sp,512
     722:	0289                	addi	t0,t0,2
            q[i] = q[i] % mod;
     724:	0b10                	addi	a2,sp,400
     726:	0008                	0x8
     728:	0800                	addi	s0,sp,16
     72a:	b818                	fsd	fa4,48(s0)
        for(i = 0; i < size_N; ++i){
     72c:	0006                	c.slli	zero,0x1
            if( num_temp[i] != 0 )
     72e:	0400                	addi	s0,sp,512
        for (i = size_N-1; i >= 0; i = i-1){
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
            v[i] = 0;
     736:	2400                	fld	fs0,8(s0)
     738:	f618                	fsw	fa4,40(a2)
     73a:	0001                	nop
     73c:	0400                	addi	s0,sp,512
        for (i = 0; i < size_N; ++i){
     73e:	5d0f028b          	0x5d0f028b
     742:	0000                	unimp
     744:	4800                	lw	s0,16(s0)
        result[i] = num_temp[i-size_N];
     746:	9118                	0x9118
     748:	0004                	0x4
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
     750:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     752:	5000                	lw	s0,32(s0)
     754:	ce18                	sw	a4,24(a2)
     756:	0006                	c.slli	zero,0x1
    int ri_2[size]; // MX-ring poly, a
     758:	0400                	addi	s0,sp,512
     75a:	028d                	addi	t0,t0,3
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     75c:	ad1a                	fsd	ft6,152(sp)
    int ri_2[size]; // MX-ring poly, a
     75e:	0006                	c.slli	zero,0x1
     760:	5800                	lw	s0,48(s0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     762:	9c18                	0x9c18
     764:	0004                	0x4
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
     76a:	fe16                	fsw	ft5,60(sp)
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
     770:	d318                	sw	a4,32(a4)
     772:	0006                	c.slli	zero,0x1
     774:	0400                	addi	s0,sp,512
     776:	fe16028f          	0xfe16028f
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
    int ri_2[size]; // MX-ring poly, a
     77e:	e118                	fsw	fa4,0(a0)
     780:	0000                	unimp
     782:	0400                	addi	s0,sp,512
    int ri_1[size]; // f-random poly, f[N] = 0, b
     784:	0290                	addi	a2,sp,320
     786:	fe16                	fsw	ft5,60(sp)
     788:	0000                	unimp
    int ri[size];
     78a:	7800                	flw	fs0,48(s0)
     78c:	7818                	flw	fa4,48(s0)
     78e:	0006                	c.slli	zero,0x1
    int ti_1[size]; // ti_1[0] = 1
     790:	0400                	addi	s0,sp,512
     792:	0291                	addi	t0,t0,4
     794:	1b10                	addi	a2,sp,432
    int ti[size];
     796:	0008                	0x8
     798:	8000                	0x8000
     79a:	dd18                	sw	a4,56(a0)
    int qi_1[size];
     79c:	0002                	c.slli64	zero
     79e:	0400                	addi	s0,sp,512
     7a0:	0292                	slli	t0,t0,0x4
    int temp[size];
     7a2:	2b10                	fld	fa2,16(a4)
     7a4:	0008                	0x8
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     7a6:	8800                	0x8800
     7a8:	af18                	fsd	fa4,24(a4)
     7aa:	0005                	c.nop	1
    int ri_2[size]; // MX-ring poly, a
     7ac:	0400                	addi	s0,sp,512
     7ae:	5d0f0293          	addi	t0,t5,1488 # 51a42 <_stack_start+0x41a42>
    for (i = 0; i < size; ++i) {
     7b2:	0000                	unimp
        ti_2[i] = 0;
     7b4:	a000                	fsd	fs0,0(s0)
     7b6:	af18                	fsd	fa4,24(a4)
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
    for (i = 0; i < size; ++i) {
     7bc:	0294                	addi	a3,sp,320
     7be:	fe16                	fsw	ft5,60(sp)
    array_equ(ri_2,polyR,size);
     7c0:	0000                	unimp
     7c2:	a400                	fsd	fs0,8(s0)
     7c4:	d218                	sw	a4,32(a2)
     7c6:	0000                	unimp
    array_equ(ri_1,polyf,size);
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
    ti_1[0] = 1;
     7d0:	ac00                	fsd	fs0,24(s0)
     7d2:	9e18                	0x9e18
     7d4:	0001                	nop
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7d6:	0400                	addi	s0,sp,512
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
     7dc:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7de:	b400                	fsd	fs0,40(s0)
     7e0:	4418                	lw	a4,8(s0)
        ti_2[i] = 0;
     7e2:	0000                	unimp
     7e4:	0400                	addi	s0,sp,512
     7e6:	fe160297          	auipc	t0,0xfe160
        ti_1[i] = 0;
     7ea:	0000                	unimp
        ti_2[i] = 0;
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	5318                	lw	a4,32(a4)
        ti_1[i] = 0;
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
    for (i = 0; i < size; ++i) {
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
                ri_2[i] = ri_2[i] + mod;
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
            while (ri_2[i] < 0) {
     7fc:	3c18                	fld	fa4,56(s0)
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
            ri_2[i] = ri_2[i] % mod;
     802:	0299                	addi	t0,t0,6
     804:	5d08                	lw	a0,56(a0)
        for (i = 0; i < N + 1; ++i) {
     806:	0000                	unimp
            ri_2[i] = ri_2[i] % mod;
     808:	cc00                	sw	s0,24(s0)
        for (i = 0; i < N + 1; ++i) {
     80a:	0900                	addi	s0,sp,144
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
     810:	0000081b          	0x81b
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     818:	1900                	addi	s0,sp,176
     81a:	0900                	addi	s0,sp,144
     81c:	05c1                	addi	a1,a1,16
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     81e:	0000                	unimp
     820:	0000082b          	0x82b
     824:	690a                	flw	fs2,128(sp)
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
        for (i = N + 1; i < (2 * N + 2); ++i) {
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
     830:	0000083b          	0x83b
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     838:	1700                	addi	s0,sp,928
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
     840:	00086207          	0x86207
        for (i = 0; i < N + 1; ++i) {
     844:	1800                	addi	s0,sp,48
     846:	0389                	addi	t2,t2,2
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     848:	0000                	unimp
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
     84e:	0862                	slli	a6,a6,0x18
     850:	0000                	unimp
     852:	1800                	addi	s0,sp,48
     854:	0374                	addi	a3,sp,396
    array_equ(qi_1,res1,size);
     856:	0000                	unimp
     858:	a204                	fsd	fs1,0(a2)
     85a:	1802                	slli	a6,a6,0x20
        for (i = 0; i < N + 1; ++i) {
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     864:	72000003          	lb	zero,1824(zero) # 720 <polydiv+0x204>
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
     86c:	0069                	c.nop	26
     86e:	0000                	unimp
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
    array_equ(temp,res2,size);
     874:	0000                	unimp
     876:	8200                	0x8200
     878:	0008                	0x8
        for (i = 0; i < N + 1; ++i) {
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
     880:	001d                	c.nop	7
        for (i = 0; i < N + 1; ++i) {
     882:	f01c                	fsw	fa5,32(s0)
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
     888:	000008a7          	0x8a7
        for (i = 0; i < N + 1; ++i) {
     88c:	1f1d                	addi	t5,t5,-25
     88e:	0005                	c.nop	1
array_equ(ri_2,ri_1,size);
     890:	0400                	addi	s0,sp,512
     892:	029a                	slli	t0,t0,0x6
     894:	0006f60b          	0x6f60b
array_equ(ri_1,ri,size);
     898:	1d00                	addi	s0,sp,688
     89a:	0698                	addi	a4,sp,832
     89c:	0000                	unimp
     89e:	a304                	fsd	fs1,0(a4)
array_equ(ti_2,ti_1,size);
     8a0:	0b02                	c.slli64	s6
     8a2:	0000083b          	0x83b
     8a6:	0900                	addi	s0,sp,144
     8a8:	05c1                	addi	a1,a1,16
     8aa:	0000                	unimp
     8ac:	000008b7          	lui	a7,0x0
array_equ(ti_1,ti,size);
     8b0:	690a                	flw	fs2,128(sp)
     8b2:	0000                	unimp
     8b4:	1800                	addi	s0,sp,48
        controlR = 0;
     8b6:	1e00                	addi	s0,sp,816
        for (i = 0; i < N + 1; ++i) {
     8b8:	00ad                	addi	ra,ra,11
     8ba:	0000                	unimp
     8bc:	0410                	addi	a2,sp,512
    while (controlR != 0) {
     8be:	000008b7          	lui	a7,0x0
        for (j = 0; j < mod; ++j) {
     8c2:	cd1f 0008 1500      	0x15000008cd1f
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     8cc:	1000                	addi	s0,sp,32
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
        for (i = 0; i < N + 1; ++i) {
     8d2:	1000                	addi	s0,sp,32
     8d4:	8a04                	0x8a04
    }
     8d6:	0001                	nop
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
     8dc:	0000                	unimp
     8de:	5d15                	li	s10,-27
     8e0:	0000                	unimp
     8e2:	0000                	unimp
     8e4:	0410                	addi	a2,sp,512
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
     8ee:	0000                	unimp
     8f0:	5b09                	li	s6,-30
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
     8fe:	0002                	c.slli64	zero
                ri_1[i] = ri_1[i] + mod;
     900:	c320                	sw	s0,64(a4)
     902:	0005                	c.nop	1
            while (ri_1[i] < 0) {
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
            ri_1[i] = ri_1[i] % mod;
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
        for (i = 0; i < N + 1; ++i) {
     90e:	05bc                	addi	a5,sp,712
     910:	0000                	unimp
            ri_1[i] = ri_1[i] % mod;
     912:	3404                	fld	fs1,40(s0)
     914:	046d1d03          	lh	s10,70(s10)
            ri[i - (N + 1)] = res[i];
     918:	0000                	unimp
     91a:	c321                	beqz	a4,95a <ext_euclid+0x202>
     91c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
            ri[i - (N + 1)] = res[i];
     924:	0000                	unimp
     926:	5d09                	li	s10,-30
        for (i = N + 1; i < (2 * N + 2); ++i) {
     928:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
     930:	0069                	c.nop	26
     932:	0000                	unimp
     934:	0095                	addi	ra,ra,5
     936:	7822                	flw	fa6,40(sp)
     938:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     93a:	0100                	addi	s0,sp,128
            temp[i] = ri_2[i] - ri[i];
     93c:	0c06                	slli	s8,s8,0x1
     93e:	0926                	slli	s2,s2,0x9
        for (i = 0; i < N + 1; ++i) {
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
                temp[i] = temp[i] + mod;
     944:	1374                	addi	a3,sp,428
     946:	0000                	unimp
            while (temp[i] < 0) {
     948:	3f22                	fld	ft10,40(sp)
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
            temp[i] = temp[i] % mod;
     94e:	09260c07          	0x9260c07
        for (i = 0; i < N + 1; ++i) {
     952:	0000                	unimp
     954:	0305                	addi	t1,t1,1
            temp[i] = temp[i] % mod;
     956:	15cc                	addi	a1,sp,740
     958:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     95a:	f722                	fsw	fs0,172(sp)
                qi_1[i] = qi_1[i] + mod;
     95c:	0002                	c.slli64	zero
     95e:	0100                	addi	s0,sp,128
            while (qi_1[i] < 0) {
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
     964:	0000                	unimp
            qi_1[i] = qi_1[i] % mod;
     966:	0305                	addi	t1,t1,1
     968:	1824                	addi	s1,sp,56
        for (i = 0; i < N + 1; ++i) {
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
            qi_1[i] = qi_1[i] % mod;
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
        for (i = 0; i < N + 1; ++i) {
     972:	0009                	c.nop	2
                temp[i] = temp[i] + mod;
     974:	0a00                	addi	s0,sp,272
     976:	0069                	c.nop	26
     978:	0000                	unimp
            while (temp[i] < 0) {
     97a:	1f220063          	beq	tp,s2,b5a <generate_keys+0x154>
     97e:	0004                	0x4
     980:	0100                	addi	s0,sp,128
            temp[i] = temp[i] % mod;
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
        for (i = 0; i < N + 1; ++i) {
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
            temp[i] = temp[i] % mod;
     98a:	1a7c                	addi	a5,sp,316
     98c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     98e:	5d09                	li	s10,-30
            ti[i] = ti_2[i] - temp[i];
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00a1                	addi	ra,ra,8
     9a2:	0000                	unimp
     9a4:	0a01                	addi	s4,s4,0
        for (i = 0; i < N + 1; ++i) {
     9a6:	8e0c                	0x8e0c
            ti[i] = ti_2[i] - temp[i];
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
        for (i = 0; i < N + 1; ++i) {
     9ac:	001c0c03          	lb	s8,1(s8)
                ti[i] = ti[i] + mod;
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
            while (ti[i] < 0) {
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
            ti[i] = ti[i] % mod;
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
            ti[i] = ti[i] % mod;
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     9c6:	2c24                	fld	fs1,88(s0)
              qi_1[i] = 0;
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
            controlR += ri[i];
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
              qi_1[i] = 0;
     9d4:	1370                	addi	a2,sp,428
     9d6:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     9d8:	e625                	bnez	a2,a40 <generate_keys+0x3a>
            controlR += ri[i];
     9da:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     9dc:	0100                	addi	s0,sp,128
            if (((ri_2[0] * j) % mod) == 1)
     9de:	02d1                	addi	t0,t0,20
     9e0:	5d05                	li	s10,-31
     9e2:	0000                	unimp
     9e4:	b800                	fsd	fs0,48(s0)
     9e6:	0010                	0x10
     9e8:	2800                	fld	fs0,16(s0)
     9ea:	0001                	nop
     9ec:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     9ee:	639c                	flw	fa5,0(a5)
     9f0:	2600000b          	0x2600000b
        for (i = 0; i < N + 1; ++i) {
     9f4:	03df 0000 d201      	0xd201000003df
            ti_2[i] = (ti_2[i] * j) % mod;
     9fa:	0a02                	c.slli64	s4
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0xc>
     a00:	0000                	unimp
     a02:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     a04:	8c26                	mv	s8,s1
int* generate_keys(int N, int p, int q){
     a06:	0000                	unimp
     a08:	0100                	addi	s0,sp,128
     a0a:	630a02d3          	0x630a02d3
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	0314                	addi	a3,sp,384
     a18:	0000                	unimp
     a1a:	d401                	beqz	s0,922 <ext_euclid+0x1ca>
     a1c:	0a02                	c.slli64	s4
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0x2e>
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	02d5                	addi	t0,t0,21
     a2c:	5d09                	li	s10,-30
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
     a36:	02d6                	slli	t0,t0,0x15
     a38:	5d09                	li	s10,-30
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
    resultkon[0] = 0xaaaaaaa0;	
     a3e:	01007127          	0x1007127
     a42:	5d0902d7          	0x5d0902d7
int* generate_keys(int N, int p, int q){
     a46:	0000                	unimp
     a48:	6500                	flw	fs0,8(a0)
     a4a:	9a28                	0x9a28
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     a50:	02d9                	addi	t0,t0,22
    resultkon[0] = 0xaaaaaaa0;	
     a52:	6909                	lui	s2,0x2
     a54:	0300000b          	0x300000b
     a58:	dc91                	beqz	s1,974 <ext_euclid+0x21c>
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a5a:	05692677          	0x5692677
    resultkon[0] = 0xaaaaaaa0;	
     a5e:	0000                	unimp
     a60:	da01                	beqz	a2,970 <ext_euclid+0x218>
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a62:	0902                	c.slli64	s2
     a64:	0b79                	addi	s6,s6,30
     a66:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
     a6c:	b826                	fsd	fs1,48(sp)
     a6e:	0000                	unimp
     a70:	0100                	addi	s0,sp,128
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a72:	8b0902db          	0x8b0902db
     a76:	b100000b          	0xb100000b
     a7a:	0000                	unimp
     a7c:	2900                	fld	fs0,16(a0)
     a7e:	00c5                	addi	ra,ra,17
     a80:	0000                	unimp
     a82:	dc01                	beqz	s0,99a <ext_euclid+0x242>
     a84:	0902                	c.slli64	s2
     a86:	0b9d                	addi	s7,s7,7
     a88:	0000                	unimp
     a8a:	9426                	add	s0,s0,s1
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
     a90:	02dd                	addi	t0,t0,23
     a92:	af09                	j	11a4 <main+0xec>
     a94:	1200000b          	0x1200000b
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
     a9c:	0246                	slli	tp,tp,0x11
     a9e:	0000                	unimp
     aa0:	de01                	beqz	a2,9b8 <ext_euclid+0x260>
     aa2:	0902                	c.slli64	s2
     aa4:	0bc1                	addi	s7,s7,16
     aa6:	0000                	unimp
     aa8:	fe26                	fsw	fs1,60(sp)
     aaa:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     aae:	02df d309 000b      	0xbd30902df
     ab4:	6500                	flw	fs0,8(a0)
     ab6:	0001                	nop
     ab8:	2a00                	fld	fs0,16(a2)
     aba:	0069                	c.nop	26
     abc:	e001                	bnez	s0,abc <generate_keys+0xb6>
     abe:	0902                	c.slli64	s2
     ac0:	005d                	c.nop	23
     ac2:	0000                	unimp
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
     ac8:	0010e02b          	0x10e02b
     acc:	c000                	sw	s0,0(s0)
     ace:	ec00001b          	0xec00001b
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
     ad6:	5a01                	li	s4,-32
     ad8:	77dc9103          	lh	sp,1917(s9)
     adc:	012c                	addi	a1,sp,136
    int polyR[N+1];
     ade:	b003055b          	0xb003055b
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     ae2:	0012                	c.slli	zero,0x4
    int polyR[N+1];
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
     ae8:	0802                	c.slli64	a6
     aea:	00c0                	addi	s0,sp,68
     aec:	0010fe2b          	0x10fe2b
     af0:	c400                	sw	s0,8(s0)
    polyR[N] = 1;
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
     afa:	5a01                	li	s4,-32
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     afc:	0802                	c.slli64	a6
     afe:	2c35                	jal	d3a <ntru_encyrpt+0x16>
     b00:	5b01                	li	s6,-32
     b02:	3301                	jal	802 <ext_euclid+0xaa>
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
     b08:	6508                	flw	fa0,8(a0)
     b0a:	2b00                	fld	fs0,16(a4)
     b0c:	117a                	slli	sp,sp,0x3e
     b0e:	0000                	unimp
     b10:	0d6a                	slli	s10,s10,0x1a
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
     b1e:	012c                	addi	a1,sp,136
     b20:	6508025b          	0x6508025b
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
     b28:	dc91                	beqz	s1,a44 <generate_keys+0x3e>
     b2a:	5e012c77          	0x5e012c77
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x91>
     b32:	2d00                	fld	fs0,24(a0)
     b34:	1196                	slli	gp,gp,0x25
     b36:	0000                	unimp
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
     b40:	3508                	fld	fa0,40(a0)
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <ntru_deceypt+0x34>
     b4e:	5d01                	li	s10,-32
     b50:	7af09103          	lh	sp,1967(ra)
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
     b58:	0082                	c.slli64	ra
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
    polyR[0] = -1;
     b60:	007e                	c.slli	zero,0x1f
     b62:	1000                	addi	s0,sp,32
    for(i = 1; i < N; ++i){
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
     b68:	0900                	addi	s0,sp,144
     b6a:	005d                	c.nop	23
    for (i = N; i < 55; ++i ){
     b6c:	0000                	unimp
     b6e:	0b79                	addi	s6,s6,30
     b70:	0000                	unimp
     b72:	690a                	flw	fs2,128(sp)
    for(i = 0; i < N; ++i){
     b74:	0000                	unimp
        random_keys[i] = f[i];
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
     b7a:	005d                	c.nop	23
     b7c:	0000                	unimp
    for(i = 0; i < N; ++i){
     b7e:	00000b8b          	0xb8b
     b82:	692e                	flw	fs2,200(sp)
     b84:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
        random_keys[i] = g[i-N];
     b8e:	0000                	unimp
     b90:	0b9d                	addi	s7,s7,7
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
    for(i = N; i < (2*N); ++i){
     b96:	0000                	unimp
     b98:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     b9a:	3408                	fld	fa0,40(s0)
     b9c:	0900                	addi	s0,sp,144
     b9e:	005d                	c.nop	23
    fp = ext_euclid(polyR, f, (N+1), p);
     ba0:	0000                	unimp
     ba2:	00000baf          	0xbaf
     ba6:	692e                	flw	fs2,200(sp)
     ba8:	0000                	unimp
     baa:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     bac:	3408                	fld	fa0,40(s0)
        random_keys[i] = fp[i-(2*N)];
     bae:	0900                	addi	s0,sp,144
     bb0:	005d                	c.nop	23
     bb2:	0000                	unimp
     bb4:	0bc1                	addi	s7,s7,16
    for(i = (2*N); i < (3*N); ++i){
     bb6:	0000                	unimp
     bb8:	692e                	flw	fs2,200(sp)
    fq = ext_euclid(polyR, f, (N+1), q);
     bba:	0000                	unimp
     bbc:	0200                	addi	s0,sp,256
     bbe:	3408                	fld	fa0,40(s0)
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
     bca:	692e                	flw	fs2,200(sp)
     bcc:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     bce:	0200                	addi	s0,sp,256
     bd0:	3408                	fld	fa0,40(s0)
     bd2:	0900                	addi	s0,sp,144
     bd4:	005d                	c.nop	23
    for(i = (3*N); i < (4*N); ++i){
     bd6:	0000                	unimp
     bd8:	0be5                	addi	s7,s7,25
    fg = polymult2(fq, N, g, N, 0);
     bda:	0000                	unimp
     bdc:	692e                	flw	fs2,200(sp)
     bde:	0000                	unimp
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
     be4:	2f00                	fld	fs0,24(a4)
    for(i = 0; i < (2*N-1); ++i){
     be6:	01c5                	addi	gp,gp,17
     be8:	0000                	unimp
     bea:	a401                	j	dea <ntru_deceypt+0x1a>
     bec:	0602                	c.slli64	a2
     bee:	00000b63          	beqz	zero,c04 <generate_keys+0x1fe>
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     bf2:	0dd0                	addi	a2,sp,724
     bf4:	0000                	unimp
     bf6:	00ec                	addi	a1,sp,76
     bf8:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     bfa:	9c01                	0x9c01
     bfc:	0d6a                	slli	s10,s10,0x1a
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
     c02:	0100                	addi	s0,sp,128
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c04:	02a4                	addi	s1,sp,328
     c06:	00005d17          	auipc	s10,0x5
     c0a:	d900                	sw	s0,48(a0)
    for(i = (4*N); i < (5*N); ++i){
     c0c:	0001                	nop
     c0e:	3000                	fld	fs0,32(s0)
     c10:	0070                	addi	a2,sp,12
    for(i = (5*N); i < (6*N+1); ++i){
     c12:	a401                	j	e12 <ntru_deceypt+0x42>
     c14:	1e02                	slli	t3,t3,0x20
        random_keys[i] = polyR[i-(5*N)];
     c16:	005d                	c.nop	23
     c18:	0000                	unimp
     c1a:	021d                	addi	tp,tp,7
     c1c:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
     c22:	02a4                	addi	s1,sp,328
     c24:	5d25                	li	s10,-23
     c26:	0000                	unimp
     c28:	5400                	lw	s0,40(s0)
    resultkon[0] = 0xaaaaaaa1;	
     c2a:	0002                	c.slli64	zero
     c2c:	3100                	fld	fs0,32(a0)
     c2e:	00b8                	addi	a4,sp,72
     c30:	0000                	unimp
     c32:	a401                	j	e32 <ntru_deceypt+0x62>
     c34:	2d02                	fld	fs10,0(sp)
}
     c36:	00000b63          	beqz	zero,c4c <generate_keys+0x246>
     c3a:	0000028b          	0x28b
     c3e:	9431                	srai	s0,s0,0x2c
     c40:	0005                	c.nop	1
     c42:	0100                	addi	s0,sp,128
     c44:	02a4                	addi	s1,sp,328
     c46:	6340                	flw	fs0,4(a4)
     c48:	b700000b          	0xb700000b
     c4c:	0002                	c.slli64	zero
     c4e:	3100                	fld	fs0,32(a0)
     c50:	03df 0000 a401      	0xa401000003df
     c56:	5402                	lw	s0,32(sp)
     c58:	00000b63          	beqz	zero,c6e <generate_keys+0x268>
     c5c:	02ee                	slli	t0,t0,0x1b
     c5e:	0000                	unimp
     c60:	a031                	j	c6c <generate_keys+0x266>
     c62:	0006                	c.slli	zero,0x1
     c64:	0100                	addi	s0,sp,128
     c66:	02a4                	addi	s1,sp,328
     c68:	6366                	flw	ft6,88(sp)
     c6a:	0f00000b          	0xf00000b
     c6e:	26000003          	lb	zero,608(zero) # 260 <polymult+0x94>
     c72:	02b1                	addi	t0,t0,12
     c74:	0000                	unimp
     c76:	a601                	j	f76 <memcpy+0x44>
     c78:	0a02                	c.slli64	s4
     c7a:	00000b63          	beqz	zero,c90 <generate_keys+0x28a>
        polyR[i] = 0;
     c7e:	0346                	slli	t1,t1,0x11
     c80:	0000                	unimp
     c82:	612a                	flw	ft2,136(sp)
     c84:	0100                	addi	s0,sp,128
    for(i = 1; i < N; ++i){
     c86:	630a02a7          	0x630a02a7
        f[i] = 0;
     c8a:	5900000b          	0x5900000b
     c8e:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0xd4>
     c92:	3261                	jal	61a <polydiv+0xfe>
     c94:	0100                	addi	s0,sp,128
     c96:	02a8                	addi	a0,sp,328
        g[i] = 0;
     c98:	630a                	flw	ft6,128(sp)
     c9a:	6c00000b          	0x6c00000b
     c9e:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0xd4>
    for (i = N; i < 55; ++i ){
     ca2:	a9010063          	beq	sp,a6,ffffff22 <_stack_start+0xfffeff22>
        random_keys[i] = f[i];
     ca6:	0a02                	c.slli64	s4
     ca8:	00000b63          	beqz	zero,cbe <generate_keys+0x2b8>
     cac:	0395                	addi	t2,t2,5
     cae:	0000                	unimp
     cb0:	632a                	flw	ft6,136(sp)
     cb2:	0032                	c.slli	zero,0xc
     cb4:	aa01                	j	dc4 <ntru_encyrpt+0xa0>
    for(i = 0; i < N; ++i){
     cb6:	0a02                	c.slli64	s4
        random_keys[i] = f[i];
     cb8:	00000b63          	beqz	zero,cce <generate_keys+0x2c8>
        random_keys[i] = g[i-N];
     cbc:	03a8                	addi	a0,sp,456
     cbe:	0000                	unimp
     cc0:	692a                	flw	fs2,136(sp)
     cc2:	0100                	addi	s0,sp,128
     cc4:	5d0902ab          	0x5d0902ab
    for(i = N; i < (2*N); ++i){
     cc8:	0000                	unimp
     cca:	c600                	sw	s0,8(a2)
        random_keys[i] = fp[i-(2*N)];
     ccc:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0xe4>
     cd0:	0e1c                	addi	a5,sp,784
     cd2:	0000                	unimp
     cd4:	1668                	addi	a0,sp,812
    for(i = (2*N); i < (3*N); ++i){
     cd6:	0000                	unimp
     cd8:	0cfc                	addi	a5,sp,604
     cda:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     cdc:	012c                	addi	a1,sp,136
     cde:	035a                	slli	t1,t1,0x16
     ce0:	2c5d01f3          	0x2c5d01f3
     ce4:	5b01                	li	s6,-32
     ce6:	7802                	flw	fa6,32(sp)
     ce8:	2c00                	fld	fs0,24(s0)
    for(i = (3*N); i < (4*N); ++i){
     cea:	5c01                	li	s8,-32
        random_keys[i] = fq[i-(3*N)];
     cec:	5f01f303          	0x5f01f303
        fg[i] = fg[i]*p;
     cf0:	012c                	addi	a1,sp,136
    for(i = 0; i < (2*N-1); ++i){
     cf2:	025d                	addi	tp,tp,23
     cf4:	0078                	addi	a4,sp,12
        fg[i] = fg[i]*p;
     cf6:	012c                	addi	a1,sp,136
     cf8:	015e                	slli	sp,sp,0x17
     cfa:	0030                	addi	a2,sp,8
     cfc:	000e2c2b          	0xe2c2b
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     d00:	2f00                	fld	fs0,24(a4)
     d02:	0014                	0x14
     d04:	2200                	fld	fs0,0(a2)
     d06:	000d                	c.nop	3
     d08:	2c00                	fld	fs0,24(s0)
     d0a:	5b01                	li	s6,-32
    for(i = (4*N); i < (5*N); ++i){
     d0c:	7902                	flw	fs2,32(sp)
     d0e:	2c00                	fld	fs0,24(s0)
        random_keys[i] = polyR[i-(5*N)];
     d10:	5c01                	li	s8,-32
     d12:	8502                	jr	a0
     d14:	2c00                	fld	fs0,24(s0)
     d16:	5d01                	li	s10,-32
     d18:	8702                	jr	a4
     d1a:	2c00                	fld	fs0,24(s0)
     d1c:	5e01                	li	t3,-32
    for(i = (5*N); i < (6*N+1); ++i){
     d1e:	8202                	jr	tp
        random_keys[i] = polyR[i-(5*N)];
     d20:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     d22:	000e502b          	0xe502b
    resultkon[0] = 0xbbbbbbb0;	
     d26:	6800                	flw	fs0,16(s0)
     d28:	0016                	c.slli	zero,0x5
     d2a:	4700                	lw	s0,8(a4)
     d2c:	000d                	c.nop	3
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d2e:	2c00                	fld	fs0,24(s0)
     d30:	5a01                	li	s4,-32
     d32:	8802                	jr	a6
     d34:	2c00                	fld	fs0,24(s0)
     d36:	5b01                	li	s6,-32
     d38:	7802                	flw	fa6,32(sp)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d3a:	2c00                	fld	fs0,24(s0)
     d3c:	5d01                	li	s10,-32
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d3e:	7802                	flw	fa6,32(sp)
    resultkon[0] = 0xbbbbbbb0;	
     d40:	2c00                	fld	fs0,24(s0)
     d42:	5e01                	li	t3,-32
     d44:	3001                	jal	544 <polydiv+0x28>
     d46:	2d00                	fld	fs0,24(a0)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d48:	0e5c                	addi	a5,sp,788
     d4a:	0000                	unimp
     d4c:	0000142f          	0x142f
     d50:	012c                	addi	a1,sp,136
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d52:	0079025b          	0x79025b
     d56:	012c                	addi	a1,sp,136
     d58:	025c                	addi	a5,sp,260
     d5a:	0085                	addi	ra,ra,1
    resultkon[0] = 0xbbbbbbb0;	
     d5c:	012c                	addi	a1,sp,136
     d5e:	025d                	addi	tp,tp,23
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d60:	012c0087          	0x12c0087
    temp = polymult(public_key,N,random_val,48,q,0);
     d64:	025e                	slli	tp,tp,0x17
     d66:	0086                	slli	ra,ra,0x1
     d68:	0000                	unimp
     d6a:	0006622f          	0x6622f
     d6e:	0100                	addi	s0,sp,128
     d70:	0281                	addi	t0,t0,0
     d72:	6306                	flw	ft6,64(sp)
array_add(temp,message,48);
     d74:	2400000b          	0x2400000b
     d78:	000d                	c.nop	3
    temp = polymult(public_key,N,random_val,48,q,0);
     d7a:	ac00                	fsd	fs0,24(s0)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d7c:	0000                	unimp
     d7e:	0100                	addi	s0,sp,128
array_add(temp,message,48);
     d80:	c49c                	sw	a5,8(s1)
     d82:	000e                	c.slli	zero,0x3
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d84:	3000                	fld	fs0,32(s0)
     d86:	004e                	c.slli	zero,0x13
     d88:	8101                	c.srli64	a0
     d8a:	1702                	slli	a4,a4,0x20
     d8c:	005d                	c.nop	23
     d8e:	0000                	unimp
     d90:	0000044b          	fnmsub.s	fs0,ft0,ft0,ft0,rne
    for(i = (2*N); i < (3*N); ++i){
     d94:	7130                	flw	fa2,96(a0)
     d96:	0100                	addi	s0,sp,128
     d98:	0281                	addi	t0,t0,0
     d9a:	5d1e                	lw	s10,228(sp)
     d9c:	0000                	unimp
     d9e:	7700                	flw	fs0,40(a4)
}
     da0:	0004                	0x4
     da2:	3100                	fld	fs0,32(a0)
    resultkon[0] = 0xbbbbbbb1;	
     da4:	039a                	slli	t2,t2,0x6
     da6:	0000                	unimp
     da8:	8101                	c.srli64	a0
     daa:	2602                	fld	fa2,0(sp)
     dac:	00000b63          	beqz	zero,dc2 <ntru_encyrpt+0x9e>
}
     db0:	04ae                	slli	s1,s1,0xb
     db2:	0000                	unimp
     db4:	6931                	lui	s2,0xc
     db6:	0005                	c.nop	1
     db8:	0100                	addi	s0,sp,128
     dba:	0281                	addi	t0,t0,0
     dbc:	6334                	flw	fa3,64(a4)
        CT[i-(2*N)] = CT[i];
     dbe:	e500000b          	0xe500000b
     dc2:	0004                	0x4
     dc4:	3100                	fld	fs0,32(a0)
    for(i = (2*N); i < (3*N); ++i){
     dc6:	06a0                	addi	s0,sp,840
     dc8:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     dca:	8101                	c.srli64	a0
     dcc:	4502                	lw	a0,0(sp)
    for(i = (2*N); i < (3*N); ++i){
     dce:	00000b63          	beqz	zero,de4 <ntru_deceypt+0x14>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     dd2:	0511                	addi	a0,a0,4
     dd4:	0000                	unimp
     dd6:	a126                	fsd	fs1,128(sp)
    for(i = (2*N); i < ((2*N)+N); ++i){
     dd8:	0002                	c.slli64	zero
     dda:	0100                	addi	s0,sp,128
     ddc:	630a0283          	lb	t0,1584(s4)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     de0:	4800000b          	0x4800000b
    resultkon[0] = 0xccccccc0;	
     de4:	0005                	c.nop	1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     de6:	3200                	fld	fs0,32(a2)
    resultkon[0] = 0xccccccc0;	
     de8:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     dec:	0284                	addi	s1,sp,320
     dee:	630a                	flw	ft6,128(sp)
     df0:	0100000b          	0x100000b
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     df4:	285a                	fld	fa6,400(sp)
     df6:	0369                	addi	t1,t1,26
     df8:	0000                	unimp
     dfa:	8601                	c.srai64	a2
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     dfc:	0902                	c.slli64	s2
    resultkon[0] = 0xccccccc0;	
     dfe:	0b69                	addi	s6,s6,26
     e00:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e02:	7ea09103          	lh	sp,2026(ra)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e06:	2026                	fld	ft0,72(sp)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e08:	0002                	c.slli64	zero
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e0a:	0100                	addi	s0,sp,128
     e0c:	630a0287          	0x630a0287
     e10:	5b00000b          	0x5b00000b
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e14:	0005                	c.nop	1
     e16:	2a00                	fld	fs0,16(a2)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e18:	0069                	c.nop	26
     e1a:	8801                	andi	s0,s0,0
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e1c:	0902                	c.slli64	s2
     e1e:	005d                	c.nop	23
     e20:	0000                	unimp
     e22:	0584                	addi	s1,sp,704
     e24:	0000                	unimp
     e26:	000d622b          	0xd622b
     e2a:	c000                	sw	s0,0(s0)
     e2c:	4900001b          	0x4900001b
    for(i = (2*N); i < ((2*N)+N); ++i){
     e30:	000e                	c.slli	zero,0x3
     e32:	2c00                	fld	fs0,24(s0)
     e34:	5a01                	li	s4,-32
     e36:	7202                	flw	ft4,32(sp)
        if(a2[i] <= q/2)
     e38:	2c00                	fld	fs0,24(s0)
     e3a:	5b01                	li	s6,-32
     e3c:	0305                	addi	t1,t1,1
    for (i = 0; i < N; ++i){
     e3e:	11f0                	addi	a2,sp,236
     e40:	0000                	unimp
     e42:	012c                	addi	a1,sp,136
    c = polymult2(secret_key_fp,N,a2,N,0);
     e44:	025c                	addi	a5,sp,260
     e46:	c008                	sw	a0,0(s0)
     e48:	2b00                	fld	fs0,16(a4)
     e4a:	0d74                	addi	a3,sp,668
     e4c:	0000                	unimp
     e4e:	17fe                	slli	a5,a5,0x3f
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     e50:	0000                	unimp
     e52:	0e7a                	slli	t3,t3,0x1e
     e54:	0000                	unimp
     e56:	012c                	addi	a1,sp,136
     e58:	025a                	slli	tp,tp,0x16
     e5a:	0084                	addi	s1,sp,64
    for(i = (2*N); i < ((2*N)+N); ++i){
     e5c:	012c                	addi	a1,sp,136
     e5e:	0078025b          	0x78025b
}
     e62:	012c                	addi	a1,sp,136
     e64:	025c                	addi	a5,sp,260
    resultkon[0] = 0xccccccc1;	
     e66:	0072                	c.slli	zero,0x1c
     e68:	012c                	addi	a1,sp,136
     e6a:	025d                	addi	tp,tp,23
     e6c:	3008                	fld	fa0,32(s0)
     e6e:	012c                	addi	a1,sp,136
     e70:	025e                	slli	tp,tp,0x17
}
     e72:	012c0083          	lb	ra,18(s8)
     e76:	015f 0030 842b      	0x842b0030015f
     e7c:	000d                	c.nop	3
     e7e:	9200                	0x9200
     e80:	001a                	c.slli	zero,0x6
     e82:	9b00                	0x9b00
     e84:	000e                	c.slli	zero,0x3
        a2[i-(2*N)] = a2[i];
     e86:	2c00                	fld	fs0,24(s0)
     e88:	5a01                	li	s4,-32
     e8a:	8402                	jr	s0
     e8c:	2c00                	fld	fs0,24(s0)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e8e:	5b01                	li	s6,-32
     e90:	5c01f303          	0x5c01f303
        a2[i-(2*N)] = a2[i];
     e94:	012c                	addi	a1,sp,136
    for(i = (2*N); i < ((2*N)+N); ++i){
     e96:	025c                	addi	a5,sp,260
        if(a2[i] <= q/2)
     e98:	3008                	fld	fa0,32(s0)
     e9a:	2d00                	fld	fs0,24(a0)
     e9c:	0d94                	addi	a3,sp,720
            a2[i] = (-1)*(q-a2[i]);
     e9e:	0000                	unimp
     ea0:	0000142f          	0x142f
    for (i = 0; i < N; ++i){
     ea4:	012c                	addi	a1,sp,136
     ea6:	025a                	slli	tp,tp,0x16
     ea8:	0084                	addi	s1,sp,64
        c2[i-(2*N)] = c2[i];
     eaa:	012c                	addi	a1,sp,136
     eac:	0079025b          	0x79025b
     eb0:	012c                	addi	a1,sp,136
    for(i = (2*N); i < ((2*N)+N); ++i){
     eb2:	025c                	addi	a5,sp,260
     eb4:	0085                	addi	ra,ra,1
        c2[i-(2*N)] = c2[i];
     eb6:	012c                	addi	a1,sp,136
     eb8:	025d                	addi	tp,tp,23
    for(i = (2*N); i < ((2*N)+N); ++i){
     eba:	0178                	addi	a4,sp,140
  jal x0, default_exc_handler
     ebc:	012c                	addi	a1,sp,136
     ebe:	025e                	slli	tp,tp,0x17
  mv  x1, x0
     ec0:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
  mv  x2, x1
     ec4:	00030b2f          	0x30b2f
  mv  x4, x1
     ec8:	0100                	addi	s0,sp,128
  mv  x5, x1
     eca:	0229                	addi	tp,tp,10
  mv  x6, x1
     ecc:	6306                	flw	ft6,64(sp)
  mv  x7, x1
     ece:	0600000b          	0x600000b
  mv  x9, x1
     ed2:	000a                	c.slli	zero,0x2
  mv x10, x1
     ed4:	1e00                	addi	s0,sp,816
  mv x11, x1
     ed6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
  mv x13, x1
     eda:	749c                	flw	fa5,40(s1)
  mv x14, x1
     edc:	0010                	0x10
  mv x15, x1
     ede:	3000                	fld	fs0,32(s0)
  mv x16, x1
     ee0:	004e                	c.slli	zero,0x13
  mv x17, x1
     ee2:	2901                	jal	12f2 <__DTOR_END__+0x102>
  mv x18, x1
     ee4:	1802                	slli	a6,a6,0x20
  mv x19, x1
     ee6:	005d                	c.nop	23
  mv x20, x1
     ee8:	0000                	unimp
  mv x21, x1
     eea:	05ba                	slli	a1,a1,0xe
  mv x22, x1
     eec:	0000                	unimp
  mv x23, x1
     eee:	7030                	flw	fa2,96(s0)
  mv x24, x1
     ef0:	0100                	addi	s0,sp,128
  mv x25, x1
     ef2:	0229                	addi	tp,tp,10
  mv x26, x1
     ef4:	5d1f 0000 0b00      	0xb0000005d1f
  mv x29, x1
     efa:	0006                	c.slli	zero,0x1
  mv x30, x1
     efc:	3000                	fld	fs0,32(s0)
  mv x31, x1
     efe:	0071                	c.nop	28
  la   x2, _stack_start
     f00:	2901                	jal	1310 <__DTOR_END__+0x120>
     f02:	2602                	fld	fa2,0(sp)
     f04:	005d                	c.nop	23
     f06:	0000                	unimp
  la x26, _bss_start
     f08:	0642                	slli	a2,a2,0x10
     f0a:	0000                	unimp
     f0c:	6632                	flw	fa2,12(sp)
     f0e:	0100                	addi	s0,sp,128
  la x27, _bss_end
     f10:	7409022b          	0x7409022b
     f14:	0010                	0x10
     f16:	0300                	addi	s0,sp,384
  bge x26, x27, zero_loop_end
     f18:	8891                	andi	s1,s1,4
     f1a:	327c                	fld	fa5,224(a2)
  sw x0, 0(x26)
     f1c:	2c010067          	jr	704(sp)
  addi x26, x26, 4
     f20:	0902                	c.slli64	s2
  ble x26, x27, zero_loop
     f22:	1074                	addi	a3,sp,44
     f24:	0000                	unimp
  addi x10, x0, 0
     f26:	7de49103          	lh	sp,2014(s1)
  addi x11, x0, 0
     f2a:	662a                	flw	fa2,136(sp)
     f2c:	0070                	addi	a2,sp,12
  jal x1, main
     f2e:	2e01                	jal	123e <__DTOR_END__+0x4e>
     f30:	0a02                	c.slli64	s4
     f32:	00000b63          	beqz	zero,f48 <memcpy+0x16>
     f36:	0679                	addi	a2,a2,30
     f38:	0000                	unimp
     f3a:	662a                	flw	fa2,136(sp)
     f3c:	0071                	c.nop	28
     f3e:	2f01                	jal	164e <product2+0x82>
     f40:	0a02                	c.slli64	s4
     f42:	00000b63          	beqz	zero,f58 <memcpy+0x26>
     f46:	068c                	addi	a1,sp,832
     f48:	0000                	unimp
     f4a:	662a                	flw	fa2,136(sp)
     f4c:	30010067          	jr	768(sp)
     f50:	0a02                	c.slli64	s4
     f52:	00000b63          	beqz	zero,f68 <memcpy+0x36>
     f56:	06aa                	slli	a3,a3,0xa
     f58:	0000                	unimp
     f5a:	702a                	flw	ft0,168(sp)
     f5c:	3101006b          	0x3101006b
     f60:	0a02                	c.slli64	s4
     f62:	00000b63          	beqz	zero,f78 <memcpy+0x46>
     f66:	06c8                	addi	a0,sp,836
     f68:	0000                	unimp
     f6a:	a026                	fsd	fs1,0(sp)
     f6c:	0006                	c.slli	zero,0x1
     f6e:	0100                	addi	s0,sp,128
     f70:	0232                	slli	tp,tp,0xc
     f72:	8409                	srai	s0,s0,0x2
     f74:	0010                	0x10
     f76:	e600                	fsw	fs0,8(a2)
     f78:	0006                	c.slli	zero,0x1
     f7a:	2a00                	fld	fs0,16(a2)
     f7c:	0069                	c.nop	26
     f7e:	3301                	jal	c7e <generate_keys+0x278>
     f80:	0902                	c.slli64	s2
     f82:	005d                	c.nop	23
     f84:	0000                	unimp
     f86:	0749                	addi	a4,a4,18
     f88:	0000                	unimp
     f8a:	ab26                	fsd	fs1,400(sp)
     f8c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     f90:	0234                	addi	a3,sp,264
     f92:	630a                	flw	ft6,128(sp)
     f94:	9000000b          	0x9000000b
     f98:	0008                	0x8
     f9a:	3300                	fld	fs0,32(a4)
     f9c:	0069                	c.nop	26
     f9e:	0000                	unimp
     fa0:	08a8                	addi	a0,sp,88
     fa2:	0000                	unimp
     fa4:	000a642b          	0xa642b
     fa8:	cb00                	sw	s0,16(a4)
     faa:	c400001b          	0xc400001b
     fae:	2c00000f          	0x2c00000f
     fb2:	5a01                	li	s4,-32
     fb4:	7c947803          	0x7c947803
     fb8:	012c                	addi	a1,sp,136
     fba:	2c30015b          	0x2c30015b
     fbe:	5c01                	li	s8,-32
     fc0:	0802                	c.slli64	a6
     fc2:	00d0                	addi	a2,sp,68
     fc4:	000ae42b          	0xae42b
     fc8:	cb00                	sw	s0,16(a4)
     fca:	e400001b          	0xe400001b
     fce:	2c00000f          	0x2c00000f
     fd2:	5a01                	li	s4,-32
     fd4:	7de87803          	0x7de87803
     fd8:	012c                	addi	a1,sp,136
     fda:	2c30015b          	0x2c30015b
     fde:	5c01                	li	s8,-32
     fe0:	0802                	c.slli64	a6
     fe2:	00d8                	addi	a4,sp,68
     fe4:	000bac2b          	0xbac2b
     fe8:	9700                	0x9700
     fea:	0010                	0x10
     fec:	0b00                	addi	s0,sp,400
     fee:	0010                	0x10
     ff0:	2c00                	fld	fs0,24(s0)
     ff2:	5a01                	li	s4,-32
     ff4:	7202                	flw	ft4,32(sp)
     ff6:	2c00                	fld	fs0,24(s0)
     ff8:	5b01                	li	s6,-32
     ffa:	7c887803          	0x7c887803
     ffe:	012c                	addi	a1,sp,136
    1000:	025c                	addi	a5,sp,260
    1002:	0086                	slli	ra,ra,0x1
    1004:	012c                	addi	a1,sp,136
    1006:	025d                	addi	tp,tp,23
    1008:	0088                	addi	a0,sp,64
    100a:	2b00                	fld	fs0,16(a4)
    100c:	0bc6                	slli	s7,s7,0x11
    100e:	0000                	unimp
    1010:	00001097          	auipc	ra,0x1
    1014:	1032                	c.slli	zero,0x2c
    1016:	0000                	unimp
    1018:	012c                	addi	a1,sp,136
    101a:	025a                	slli	tp,tp,0x16
    101c:	0072                	c.slli	zero,0x1c
    101e:	012c                	addi	a1,sp,136
    1020:	8878035b          	0x8878035b
    1024:	2c7c                	fld	fa5,216(s0)
    1026:	5c01                	li	s8,-32
    1028:	8602                	jr	a2
    102a:	2c00                	fld	fs0,24(s0)
    102c:	5d01                	li	s10,-32
    102e:	8702                	jr	a4
    1030:	0000                	unimp
    1032:	000be62b          	0xbe62b
    1036:	6800                	flw	fs0,16(s0)
    1038:	0016                	c.slli	zero,0x5
    103a:	5700                	lw	s0,40(a4)
    103c:	0010                	0x10
    103e:	2c00                	fld	fs0,24(s0)
    1040:	5b01                	li	s6,-32
    1042:	8202                	jr	tp
    1044:	2c00                	fld	fs0,24(s0)
    1046:	5c01                	li	s8,-32
    1048:	8902                	jr	s2
    104a:	2c00                	fld	fs0,24(s0)
    104c:	5d01                	li	s10,-32
    104e:	8202                	jr	tp
    1050:	2c00                	fld	fs0,24(s0)
    1052:	5e01                	li	t3,-32
    1054:	3001                	jal	854 <ext_euclid+0xfc>
    1056:	2d00                	fld	fs0,24(a0)
    1058:	0bfa                	slli	s7,s7,0x1e
    105a:	0000                	unimp
    105c:	0000142f          	0x142f
    1060:	012c                	addi	a1,sp,136
    1062:	025c                	addi	a5,sp,260
    1064:	0072                	c.slli	zero,0x1c
    1066:	012c                	addi	a1,sp,136
    1068:	025d                	addi	tp,tp,23
    106a:	0086                	slli	ra,ra,0x1
    106c:	012c                	addi	a1,sp,136
    106e:	025e                	slli	tp,tp,0x17
    1070:	00000087          	0x87
    1074:	5d09                	li	s10,-30
    1076:	0000                	unimp
    1078:	8400                	0x8400
    107a:	0010                	0x10
    107c:	0a00                	addi	s0,sp,272
    107e:	0069                	c.nop	26
    1080:	0000                	unimp
    1082:	0036                	c.slli	zero,0xd
    1084:	5d09                	li	s10,-30
    1086:	0000                	unimp
    1088:	9700                	0x9700
    108a:	0010                	0x10
    108c:	3400                	fld	fs0,40(s0)
    108e:	0069                	c.nop	26
    1090:	0000                	unimp
    1092:	00000f9b          	0xf9b
    1096:	2f00                	fld	fs0,24(a4)
    1098:	0348                	addi	a0,sp,388
    109a:	0000                	unimp
    109c:	8801                	andi	s0,s0,0
    109e:	0601                	addi	a2,a2,0
    10a0:	00000b63          	beqz	zero,10b6 <memset+0xa6>
    10a4:	0758                	addi	a4,sp,900
    10a6:	0000                	unimp
    10a8:	02ae                	slli	t0,t0,0xb
    10aa:	0000                	unimp
    10ac:	9c01                	0x9c01
    10ae:	13aa                	slli	t2,t2,0x2a
    10b0:	0000                	unimp
    10b2:	a031                	j	10be <main+0x6>
    10b4:	0006                	c.slli	zero,0x1
    10b6:	0100                	addi	s0,sp,128
int main(){
    10b8:	0188                	addi	a0,sp,192
    10ba:	6316                	flw	ft6,68(sp)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    10bc:	ee00000b          	0xee00000b
    10c0:	0008                	0x8
    10c2:	3100                	fld	fs0,32(a0)
    10c4:	0188                	addi	a0,sp,192
    10c6:	0000                	unimp
    10c8:	8801                	andi	s0,s0,0
int main(){
    10ca:	2201                	jal	11ca <main+0x112>
    10cc:	00000b63          	beqz	zero,10e2 <main+0x2a>
    10d0:	00000933          	add	s2,zero,zero
    10d4:	1231                	addi	tp,tp,-20
    10d6:	0000                	unimp
    10d8:	0100                	addi	s0,sp,128
    resultkon[0] = 0xaaaaaaa0;
    10da:	0188                	addi	a0,sp,192
    10dc:	5d2d                	li	s10,-21
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    10de:	0000                	unimp
    resultkon[0] = 0xaaaaaaa0;
    10e0:	7800                	flw	fs0,48(s0)
    10e2:	0009                	c.nop	2
    10e4:	3000                	fld	fs0,32(s0)
    10e6:	6f6d                	lui	t5,0x1b
    10e8:	0064                	addi	s1,sp,12
    10ea:	8801                	andi	s0,s0,0
    keys = generate_keys(N, p, q);
    10ec:	3701                	jal	fec <memcpy+0xba>
    10ee:	005d                	c.nop	23
    10f0:	0000                	unimp
    10f2:	09bc                	addi	a5,sp,216
    10f4:	0000                	unimp
    resultkon[0] = 0xaaaaaaa0;
    10f6:	8a26                	mv	s4,s1
    resultkon[0] = 0xaaaaaaa1;
    10f8:	0002                	c.slli64	zero
    10fa:	0100                	addi	s0,sp,128
    keys = generate_keys(N, p, q);
    10fc:	018a                	slli	gp,gp,0x2
    resultkon[0] = 0xaaaaaaa1;
    10fe:	630a                	flw	ft6,128(sp)
    1100:	f300000b          	0xf300000b
    for(i = 0; i < N; ++i){
    1104:	0009                	c.nop	2
        secret_key_f[i] = keys[i];
    1106:	2a00                	fld	fs0,16(a2)
    1108:	004e                	c.slli	zero,0x13
    110a:	8b01                	andi	a4,a4,0
    110c:	0901                	addi	s2,s2,0
    110e:	005d                	c.nop	23
    1110:	0000                	unimp
    for(i = 0; i < N; ++i){
    1112:	00000a0b          	0xa0b
    1116:	692a                	flw	fs2,136(sp)
    for(i = N; i < (2*N); ++i){
    1118:	0100                	addi	s0,sp,128
    111a:	5d0c018b          	0x5d0c018b
    111e:	0000                	unimp
    1120:	3900                	fld	fs0,48(a0)
    1122:	000a                	c.slli	zero,0x2
        secret_key_fp[i-(2*N)] = keys[i];
    1124:	2a00                	fld	fs0,16(a2)
    1126:	006a                	c.slli	zero,0x1a
    1128:	8b01                	andi	a4,a4,0
    112a:	0f01                	addi	t5,t5,0
    112c:	005d                	c.nop	23
    for(i = (2*N); i < (3*N); ++i){
    112e:	0000                	unimp
    1130:	0c55                	addi	s8,s8,21
    for(i = (3*N); i < (4*N); ++i){
    1132:	0000                	unimp
    1134:	3626                	fld	fa2,104(sp)
    1136:	0005                	c.nop	1
    1138:	0100                	addi	s0,sp,128
    113a:	018c                	addi	a1,sp,192
    113c:	aa09                	j	124e <__DTOR_END__+0x5e>
        public_key[i-(4*N)] = keys[i];
    113e:	73000013          	li	zero,1840
    1142:	000c                	0xc
    1144:	2600                	fld	fs0,8(a2)
    1146:	05aa                	slli	a1,a1,0xa
    for(i = (4*N); i < (5*N); ++i){
    1148:	0000                	unimp
    114a:	8d01                	sub	a0,a0,s0
    114c:	0901                	addi	s2,s2,0
    114e:	13bd                	addi	t2,t2,-17
    1150:	0000                	unimp
    1152:	00000c93          	li	s9,0
        ring_poly[i-(5*N)] = keys[i];
    1156:	722a                	flw	ft4,168(sp)
    1158:	0069                	c.nop	26
    115a:	8e01                	sub	a2,a2,s0
    115c:	0901                	addi	s2,s2,0
    for(i = (5*N); i < (6*N+1); ++i){
    115e:	13d0                	addi	a2,sp,484
    1160:	0000                	unimp
    resultkon[0] = 0xbbbbbbb0;
    1162:	00000cb3          	add	s9,zero,zero
    1166:	1a26                	slli	s4,s4,0x29
    1168:	0004                	0x4
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    116a:	0100                	addi	s0,sp,128
    116c:	0190                	addi	a2,sp,192
    116e:	e309                	bnez	a4,1170 <main+0xb8>
    1170:	d3000013          	li	zero,-720
    1174:	000c                	0xc
    resultkon[0] = 0xbbbbbbb0;
    1176:	2a00                	fld	fs0,16(a2)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1178:	6974                	flw	fa3,84(a0)
    117a:	0100                	addi	s0,sp,128
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    117c:	0191                	addi	gp,gp,4
    117e:	f609                	bnez	a2,1088 <memset+0x78>
    resultkon[0] = 0xbbbbbbb1;
    1180:	09000013          	li	zero,144
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1184:	000d                	c.nop	3
    1186:	2600                	fld	fs0,8(a2)
    1188:	0432                	slli	s0,s0,0xc
    118a:	0000                	unimp
    118c:	9201                	srli	a2,a2,0x20
    118e:	0901                	addi	s2,s2,0
    1190:	1409                	addi	s0,s0,-30
    resultkon[0] = 0xbbbbbbb1;
    1192:	0000                	unimp
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1194:	0d29                	addi	s10,s10,10
            resultkon[0] = 0xDEDEDEDE;
    1196:	0000                	unimp
    1198:	2026                	fld	ft0,72(sp)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    119a:	0002                	c.slli64	zero
            resultkon[0] = 0xDEDEDEDE;
    119c:	0100                	addi	s0,sp,128
    119e:	1c090193          	addi	gp,s2,448 # c1c0 <_stack_len+0x81c0>
    for(i = 0; i < 32; ++i){
    11a2:	0014                	0x14
        if(!(message[i] == Dec_Message[i])){
    11a4:	5f00                	lw	s0,56(a4)
    11a6:	000d                	c.nop	3
    11a8:	2a00                	fld	fs0,16(a2)
    11aa:	6572                	flw	fa0,28(sp)
    11ac:	94010073          	0x94010073
    11b0:	0a01                	addi	s4,s4,0
    11b2:	00000b63          	beqz	zero,11c8 <main+0x110>
            resultkon[0] = 0xBABABABA;
    11b6:	0db9                	addi	s11,s11,14
    11b8:	0000                	unimp
    11ba:	4f26                	lw	t5,72(sp)
    11bc:	0001                	nop
}
    11be:	0100                	addi	s0,sp,128
    11c0:	0195                	addi	gp,gp,5
    11c2:	630a                	flw	ft6,128(sp)
    11c4:	d700000b          	0xd700000b
    11c8:	000d                	c.nop	3
    11ca:	2600                	fld	fs0,8(a2)
    11cc:	0154                	addi	a3,sp,132
    11ce:	0000                	unimp
    11d0:	9601                	srai	a2,a2,0x20
    11d2:	0a01                	addi	s4,s4,0
    11d4:	00000b63          	beqz	zero,11ea <__CTOR_END__+0x2>
    for(i = 0; i < 32; ++i){
    11d8:	0df5                	addi	s11,s11,29
    11da:	0000                	unimp
    11dc:	eb26                	fsw	fs1,148(sp)
    11de:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    11e2:	5d090197          	auipc	gp,0x5d090
    11e6:	0000                	unimp
    11e8:	1300                	addi	s0,sp,416
    11ea:	000e                	c.slli	zero,0x3
    11ec:	3300                	fld	fs0,32(a4)
    11ee:	0069                	c.nop	26
    11f0:	0000                	unimp
    11f2:	0e49                	addi	t3,t3,18
    11f4:	0000                	unimp
    11f6:	00006933          	or	s2,zero,zero
    11fa:	7700                	flw	fs0,40(a4)
    11fc:	000e                	c.slli	zero,0x3
    11fe:	3300                	fld	fs0,32(a4)
    1200:	0069                	c.nop	26
    1202:	0000                	unimp
    1204:	0ea5                	addi	t4,t4,9
    1206:	0000                	unimp
    1208:	00006933          	or	s2,zero,zero
    120c:	d300                	sw	s0,32(a4)
    120e:	000e                	c.slli	zero,0x3
    1210:	3300                	fld	fs0,32(a4)
    1212:	0069                	c.nop	26
    1214:	0000                	unimp
    1216:	0f01                	addi	t5,t5,0
    1218:	0000                	unimp
    121a:	00006933          	or	s2,zero,zero
    121e:	2f00                	fld	fs0,24(a4)
    1220:	3300000f          	0x3300000f
    1224:	0069                	c.nop	26
    1226:	0000                	unimp
    1228:	0f5d                	addi	t5,t5,23
    122a:	0000                	unimp
    122c:	0007c82b          	0x7c82b
    1230:	a600                	fsd	fs0,8(a2)
    1232:	0019                	c.nop	6
    1234:	4d00                	lw	s0,24(a0)
    1236:	0012                	c.slli	zero,0x4
    1238:	2c00                	fld	fs0,24(s0)
    123a:	5a01                	li	s4,-32
    123c:	8302                	jr	t1
    123e:	2c00                	fld	fs0,24(s0)
    1240:	5b01                	li	s6,-32
    1242:	5a01f303          	0x5a01f303
    1246:	012c                	addi	a1,sp,136
    1248:	025c                	addi	a5,sp,260
    124a:	0079                	c.nop	30
    124c:	2b00                	fld	fs0,16(a4)
    124e:	07d0                	addi	a2,sp,964
    1250:	0000                	unimp
    1252:	19a6                	slli	s3,s3,0x29
    1254:	0000                	unimp
    1256:	126d                	addi	tp,tp,-5
    1258:	0000                	unimp
    125a:	012c                	addi	a1,sp,136
    125c:	025a                	slli	tp,tp,0x16
    125e:	0084                	addi	s1,sp,64
    1260:	012c                	addi	a1,sp,136
    1262:	008a025b          	0x8a025b
    1266:	012c                	addi	a1,sp,136
    1268:	025c                	addi	a5,sp,260
    126a:	0079                	c.nop	30
    126c:	2b00                	fld	fs0,16(a4)
    126e:	082a                	slli	a6,a6,0xa
    1270:	0000                	unimp
    1272:	0000142f          	0x142f
    1276:	1299                	addi	t0,t0,-26
    1278:	0000                	unimp
    127a:	012c                	addi	a1,sp,136
    127c:	025a                	slli	tp,tp,0x16
    127e:	012c0083          	lb	ra,18(s8)
    1282:	0079025b          	0x79025b
    1286:	012c                	addi	a1,sp,136
    1288:	025c                	addi	a5,sp,260
    128a:	0084                	addi	s1,sp,64
    128c:	012c                	addi	a1,sp,136
    128e:	025d                	addi	tp,tp,23
    1290:	0079                	c.nop	30
    1292:	012c                	addi	a1,sp,136
    1294:	025e                	slli	tp,tp,0x17
    1296:	0082                	c.slli64	ra
    1298:	2b00                	fld	fs0,16(a4)
    129a:	0854                	addi	a3,sp,20
    129c:	0000                	unimp
    129e:	0000142f          	0x142f
    12a2:	12c5                	addi	t0,t0,-15
    12a4:	0000                	unimp
    12a6:	012c                	addi	a1,sp,136
    12a8:	025a                	slli	tp,tp,0x16
    12aa:	0072                	c.slli	zero,0x1c
    12ac:	012c                	addi	a1,sp,136
    12ae:	0079025b          	0x79025b
    12b2:	012c                	addi	a1,sp,136
    12b4:	025c                	addi	a5,sp,260
    12b6:	0084                	addi	s1,sp,64
    12b8:	012c                	addi	a1,sp,136
    12ba:	025d                	addi	tp,tp,23
    12bc:	0079                	c.nop	30
    12be:	012c                	addi	a1,sp,136
    12c0:	025e                	slli	tp,tp,0x17
    12c2:	0082                	c.slli64	ra
    12c4:	2b00                	fld	fs0,16(a4)
    12c6:	085c                	addi	a5,sp,20
    12c8:	0000                	unimp
    12ca:	19a6                	slli	s3,s3,0x29
    12cc:	0000                	unimp
    12ce:	12df 0000 012c      	0x12c000012df
    12d4:	025a                	slli	tp,tp,0x16
    12d6:	0088                	addi	a0,sp,64
    12d8:	012c                	addi	a1,sp,136
    12da:	025c                	addi	a5,sp,260
    12dc:	0079                	c.nop	30
    12de:	2b00                	fld	fs0,16(a4)
    12e0:	0872                	slli	a6,a6,0x1c
    12e2:	0000                	unimp
    12e4:	17fe                	slli	a5,a5,0x3f
    12e6:	0000                	unimp
    12e8:	1310                	addi	a2,sp,416
    12ea:	0000                	unimp
    12ec:	012c                	addi	a1,sp,136
    12ee:	025a                	slli	tp,tp,0x16
    12f0:	0088                	addi	a0,sp,64
    12f2:	012c                	addi	a1,sp,136
    12f4:	0079025b          	0x79025b
    12f8:	012c                	addi	a1,sp,136
    12fa:	025c                	addi	a5,sp,260
    12fc:	0086                	slli	ra,ra,0x1
    12fe:	012c                	addi	a1,sp,136
    1300:	025d                	addi	tp,tp,23
    1302:	0079                	c.nop	30
    1304:	012c                	addi	a1,sp,136
    1306:	025e                	slli	tp,tp,0x17
    1308:	0082                	c.slli64	ra
    130a:	012c                	addi	a1,sp,136
    130c:	015f 0030 7a2b      	0x7a2b0030015f
    1312:	0008                	0x8
    1314:	a600                	fsd	fs0,8(a2)
    1316:	0019                	c.nop	6
    1318:	2a00                	fld	fs0,16(a2)
    131a:	2c000013          	li	zero,704
    131e:	5a01                	li	s4,-32
    1320:	7202                	flw	ft4,32(sp)
    1322:	2c00                	fld	fs0,24(s0)
    1324:	5c01                	li	s8,-32
    1326:	7902                	flw	fs2,32(sp)
    1328:	0000                	unimp
    132a:	0008982b          	0x8982b
    132e:	a600                	fsd	fs0,8(a2)
    1330:	0019                	c.nop	6
    1332:	4a00                	lw	s0,16(a2)
    1334:	2c000013          	li	zero,704
    1338:	5a01                	li	s4,-32
    133a:	8302                	jr	t1
    133c:	2c00                	fld	fs0,24(s0)
    133e:	5b01                	li	s6,-32
    1340:	8402                	jr	s0
    1342:	2c00                	fld	fs0,24(s0)
    1344:	5c01                	li	s8,-32
    1346:	7902                	flw	fs2,32(sp)
    1348:	0000                	unimp
    134a:	0008a02b          	0x8a02b
    134e:	a600                	fsd	fs0,8(a2)
    1350:	0019                	c.nop	6
    1352:	6a00                	flw	fs0,16(a2)
    1354:	2c000013          	li	zero,704
    1358:	5a01                	li	s4,-32
    135a:	8402                	jr	s0
    135c:	2c00                	fld	fs0,24(s0)
    135e:	5b01                	li	s6,-32
    1360:	8702                	jr	a4
    1362:	2c00                	fld	fs0,24(s0)
    1364:	5c01                	li	s8,-32
    1366:	7902                	flw	fs2,32(sp)
    1368:	0000                	unimp
    136a:	0008ae2b          	0x8ae2b
    136e:	a600                	fsd	fs0,8(a2)
    1370:	0019                	c.nop	6
    1372:	8d00                	0x8d00
    1374:	2c000013          	li	zero,704
    1378:	5a01                	li	s4,-32
    137a:	0305                	addi	t1,t1,1
    137c:	1a7c                	addi	a5,sp,316
    137e:	0000                	unimp
    1380:	012c                	addi	a1,sp,136
    1382:	0086025b          	0x86025b
    1386:	012c                	addi	a1,sp,136
    1388:	025c                	addi	a5,sp,260
    138a:	0079                	c.nop	30
    138c:	2d00                	fld	fs0,24(a0)
    138e:	08b6                	slli	a7,a7,0xd
    1390:	0000                	unimp
    1392:	19a6                	slli	s3,s3,0x29
    1394:	0000                	unimp
    1396:	012c                	addi	a1,sp,136
    1398:	025a                	slli	tp,tp,0x16
    139a:	0086                	slli	ra,ra,0x1
    139c:	012c                	addi	a1,sp,136
    139e:	0089025b          	0x89025b
    13a2:	012c                	addi	a1,sp,136
    13a4:	025c                	addi	a5,sp,260
    13a6:	0079                	c.nop	30
    13a8:	0000                	unimp
    13aa:	5d09                	li	s10,-30
    13ac:	0000                	unimp
    13ae:	bd00                	fsd	fs0,56(a0)
    13b0:	34000013          	li	zero,832
    13b4:	0069                	c.nop	26
    13b6:	0000                	unimp
    13b8:	11ed                	addi	gp,gp,-5
    13ba:	0000                	unimp
    13bc:	0900                	addi	s0,sp,144
    13be:	005d                	c.nop	23
    13c0:	0000                	unimp
    13c2:	13d0                	addi	a2,sp,484
    13c4:	0000                	unimp
    13c6:	6934                	flw	fa3,80(a0)
    13c8:	0000                	unimp
    13ca:	f600                	fsw	fs0,40(a2)
    13cc:	0011                	c.nop	4
    13ce:	0000                	unimp
    13d0:	5d09                	li	s10,-30
    13d2:	0000                	unimp
    13d4:	e300                	fsw	fs0,0(a4)
    13d6:	34000013          	li	zero,832
    13da:	0069                	c.nop	26
    13dc:	0000                	unimp
    13de:	11ff                	0x11ff
    13e0:	0000                	unimp
    13e2:	0900                	addi	s0,sp,144
    13e4:	005d                	c.nop	23
    13e6:	0000                	unimp
    13e8:	13f6                	slli	t2,t2,0x3d
    13ea:	0000                	unimp
    13ec:	6934                	flw	fa3,80(a0)
    13ee:	0000                	unimp
    13f0:	0800                	addi	s0,sp,16
    13f2:	0012                	c.slli	zero,0x4
    13f4:	0000                	unimp
    13f6:	5d09                	li	s10,-30
    13f8:	0000                	unimp
    13fa:	0900                	addi	s0,sp,144
    13fc:	0014                	0x14
    13fe:	3400                	fld	fs0,40(s0)
    1400:	0069                	c.nop	26
    1402:	0000                	unimp
    1404:	1211                	addi	tp,tp,-28
    1406:	0000                	unimp
    1408:	0900                	addi	s0,sp,144
    140a:	005d                	c.nop	23
    140c:	0000                	unimp
    140e:	141c                	addi	a5,sp,544
    1410:	0000                	unimp
    1412:	6934                	flw	fa3,80(a0)
    1414:	0000                	unimp
    1416:	1a00                	addi	s0,sp,304
    1418:	0012                	c.slli	zero,0x4
    141a:	0000                	unimp
    141c:	5d09                	li	s10,-30
    141e:	0000                	unimp
    1420:	2f00                	fld	fs0,24(a4)
    1422:	0014                	0x14
    1424:	3400                	fld	fs0,40(s0)
    1426:	0069                	c.nop	26
    1428:	0000                	unimp
    142a:	00001223          	sh	zero,4(zero) # 4 <__DYNAMIC+0x4>
    142e:	3500                	fld	fs0,40(a0)
    1430:	0180                	addi	s0,sp,192
    1432:	0000                	unimp
    1434:	f601                	bnez	a2,133c <__DTOR_END__+0x14c>
    1436:	6306                	flw	ft6,64(sp)
    1438:	1c00000b          	0x1c00000b
    143c:	0005                	c.nop	1
    143e:	3c00                	fld	fs0,56(s0)
    1440:	0002                	c.slli64	zero
    1442:	0100                	addi	s0,sp,128
    1444:	1c9c                	addi	a5,sp,624
    1446:	0016                	c.slli	zero,0x5
    1448:	3600                	fld	fs0,40(a2)
    144a:	756e                	flw	fa0,248(sp)
    144c:	006d                	c.nop	27
    144e:	f601                	bnez	a2,1356 <__DTOR_END__+0x166>
    1450:	000b6313          	ori	t1,s6,0
    1454:	8b00                	0x8b00
    1456:	3700000f          	0x3700000f
    145a:	0106                	slli	sp,sp,0x1
    145c:	0000                	unimp
    145e:	f601                	bnez	a2,1366 <__DTOR_END__+0x176>
    1460:	5d1c                	lw	a5,56(a0)
    1462:	0000                	unimp
    1464:	b700                	fsd	fs0,40(a4)
    1466:	3700000f          	0x3700000f
    146a:	0682                	c.slli64	a3
    146c:	0000                	unimp
    146e:	f601                	bnez	a2,1376 <_bss_start+0x2>
    1470:	6328                	flw	fa0,64(a4)
    1472:	0800000b          	0x800000b
    1476:	0010                	0x10
    1478:	3700                	fld	fs0,40(a4)
    147a:	06a6                	slli	a3,a3,0x9
    147c:	0000                	unimp
    147e:	f601                	bnez	a2,1386 <_bss_start+0x12>
    1480:	00005d33          	srl	s10,zero,zero
    1484:	4d00                	lw	s0,24(a0)
    1486:	0010                	0x10
    1488:	3600                	fld	fs0,40(a2)
    148a:	6f6d                	lui	t5,0x1b
    148c:	0064                	addi	s1,sp,12
    148e:	f601                	bnez	a2,1396 <_bss_start+0x22>
    1490:	00005d3f 00108400 	0x10840000005d3f
    1498:	3800                	fld	fs0,48(s0)
    149a:	0075                	c.nop	29
    149c:	f801                	bnez	s0,13ac <_bss_start+0x38>
    149e:	5d09                	li	s10,-30
    14a0:	0000                	unimp
    14a2:	bb00                	fsd	fs0,48(a4)
    14a4:	0010                	0x10
    14a6:	3800                	fld	fs0,48(s0)
    14a8:	0064                	addi	s1,sp,12
    14aa:	f801                	bnez	s0,13ba <_bss_start+0x46>
    14ac:	00005d0b          	0x5d0b
    14b0:	e400                	fsw	fs0,8(s0)
    14b2:	0010                	0x10
    14b4:	3900                	fld	fs0,48(a0)
    14b6:	3264                	fld	fs1,224(a2)
    14b8:	0100                	addi	s0,sp,128
    14ba:	0df8                	addi	a4,sp,732
    14bc:	005d                	c.nop	23
    14be:	0000                	unimp
    14c0:	6938                	flw	fa4,80(a0)
    14c2:	0100                	addi	s0,sp,128
    14c4:	10f8                	addi	a4,sp,108
    14c6:	005d                	c.nop	23
    14c8:	0000                	unimp
    14ca:	1102                	slli	sp,sp,0x20
    14cc:	0000                	unimp
    14ce:	6239                	lui	tp,0xe
    14d0:	4e5f 0100 12f8      	0x12f801004e5f
    14d6:	005d                	c.nop	23
    14d8:	0000                	unimp
    14da:	7238                	flw	fa4,96(a2)
    14dc:	645f 0100 16f8      	0x16f80100645f
    14e2:	005d                	c.nop	23
    14e4:	0000                	unimp
    14e6:	000012eb          	0x12eb
    14ea:	7a3a                	flw	fs4,172(sp)
    14ec:	0002                	c.slli64	zero
    14ee:	0100                	addi	s0,sp,128
    14f0:	0af9                	addi	s5,s5,30
    14f2:	00000b63          	beqz	zero,1508 <_bss_start+0x194>
    14f6:	1309                	addi	t1,t1,-30
    14f8:	0000                	unimp
    14fa:	7638                	flw	fa4,104(a2)
    14fc:	0100                	addi	s0,sp,128
    14fe:	161c09fb          	0x161c09fb
    1502:	0000                	unimp
    1504:	1321                	addi	t1,t1,-24
    1506:	0000                	unimp
    1508:	7138                	flw	fa4,96(a0)
    150a:	0100                	addi	s0,sp,128
    150c:	09fc                	addi	a5,sp,220
    150e:	0000162f          	0x162f
    1512:	1341                	addi	t1,t1,-16
    1514:	0000                	unimp
    1516:	783a                	flw	fa6,172(sp)
    1518:	0001                	nop
    151a:	0100                	addi	s0,sp,128
    151c:	0afd                	addi	s5,s5,31
    151e:	00000b63          	beqz	zero,1534 <_bss_start+0x1c0>
    1522:	1361                	addi	t1,t1,-8
    1524:	0000                	unimp
    1526:	1c3a                	slli	s8,s8,0x2e
    1528:	0002                	c.slli64	zero
    152a:	0100                	addi	s0,sp,128
    152c:	09fe                	slli	s3,s3,0x1f
    152e:	1642                	slli	a2,a2,0x30
    1530:	0000                	unimp
    1532:	137f                	0x137f
    1534:	0000                	unimp
    1536:	1a3a                	slli	s4,s4,0x2e
    1538:	0002                	c.slli64	zero
    153a:	0100                	addi	s0,sp,128
    153c:	09ff                	0x9ff
    153e:	1655                	addi	a2,a2,-11
    1540:	0000                	unimp
    1542:	000013c3          	fmadd.s	ft7,ft0,ft0,ft0,rtz
    1546:	00006933          	or	s2,zero,zero
    154a:	2800                	fld	fs0,16(s0)
    154c:	0014                	0x14
    154e:	3300                	fld	fs0,32(a4)
    1550:	0069                	c.nop	26
    1552:	0000                	unimp
    1554:	1456                	slli	s0,s0,0x35
    1556:	0000                	unimp
    1558:	00006933          	or	s2,zero,zero
    155c:	8400                	0x8400
    155e:	0014                	0x14
    1560:	3300                	fld	fs0,32(a4)
    1562:	0069                	c.nop	26
    1564:	0000                	unimp
    1566:	14b2                	slli	s1,s1,0x2c
    1568:	0000                	unimp
    156a:	0005782b          	0x5782b
    156e:	a600                	fsd	fs0,8(a2)
    1570:	0019                	c.nop	6
    1572:	8b00                	0x8b00
    1574:	0015                	c.nop	5
    1576:	2c00                	fld	fs0,24(s0)
    1578:	5a01                	li	s4,-32
    157a:	8a02                	jr	s4
    157c:	2c00                	fld	fs0,24(s0)
    157e:	5b01                	li	s6,-32
    1580:	5a01f303          	0x5a01f303
    1584:	012c                	addi	a1,sp,136
    1586:	025c                	addi	a5,sp,260
    1588:	0079                	c.nop	30
    158a:	2b00                	fld	fs0,16(a4)
    158c:	058c                	addi	a1,sp,704
    158e:	0000                	unimp
    1590:	19a6                	slli	s3,s3,0x29
    1592:	0000                	unimp
    1594:	000015ab          	0x15ab
    1598:	012c                	addi	a1,sp,136
    159a:	025a                	slli	tp,tp,0x16
    159c:	0072                	c.slli	zero,0x1c
    159e:	012c                	addi	a1,sp,136
    15a0:	008b025b          	0x8b025b
    15a4:	012c                	addi	a1,sp,136
    15a6:	025c                	addi	a5,sp,260
    15a8:	0088                	addi	a0,sp,64
    15aa:	2b00                	fld	fs0,16(a4)
    15ac:	0630                	addi	a2,sp,776
    15ae:	0000                	unimp
    15b0:	19a6                	slli	s3,s3,0x29
    15b2:	0000                	unimp
    15b4:	15ce                	slli	a1,a1,0x33
    15b6:	0000                	unimp
    15b8:	012c                	addi	a1,sp,136
    15ba:	055a                	slli	a0,a0,0x16
    15bc:	00182403          	lw	s0,1(a6)
    15c0:	2c00                	fld	fs0,24(s0)
    15c2:	5b01                	li	s6,-32
    15c4:	8402                	jr	s0
    15c6:	2c00                	fld	fs0,24(s0)
    15c8:	5c01                	li	s8,-32
    15ca:	7902                	flw	fs2,32(sp)
    15cc:	0000                	unimp
    15ce:	00068e2b          	0x68e2b
    15d2:	fe00                	fsw	fs0,56(a2)
    15d4:	ff000017          	auipc	zero,0xff000
    15d8:	0015                	c.nop	5
    15da:	2c00                	fld	fs0,24(s0)
    15dc:	5a01                	li	s4,-32
    15de:	7202                	flw	ft4,32(sp)
    15e0:	2c00                	fld	fs0,24(s0)
    15e2:	5b01                	li	s6,-32
    15e4:	8802                	jr	a6
    15e6:	2c00                	fld	fs0,24(s0)
    15e8:	5c01                	li	s8,-32
    15ea:	8302                	jr	t1
    15ec:	2c00                	fld	fs0,24(s0)
    15ee:	5d01                	li	s10,-32
    15f0:	8802                	jr	a6
    15f2:	2c00                	fld	fs0,24(s0)
    15f4:	5e01                	li	t3,-32
    15f6:	8902                	jr	s2
    15f8:	2c00                	fld	fs0,24(s0)
    15fa:	5f01                	li	t5,-32
    15fc:	3001                	jal	dfc <ntru_deceypt+0x2c>
    15fe:	2d00                	fld	fs0,24(a0)
    1600:	06ae                	slli	a3,a3,0xb
    1602:	0000                	unimp
    1604:	1a92                	slli	s5,s5,0x24
    1606:	0000                	unimp
    1608:	012c                	addi	a1,sp,136
    160a:	025a                	slli	tp,tp,0x16
    160c:	0084                	addi	s1,sp,64
    160e:	012c                	addi	a1,sp,136
    1610:	0083025b          	0x83025b
    1614:	012c                	addi	a1,sp,136
    1616:	025c                	addi	a5,sp,260
    1618:	0079                	c.nop	30
    161a:	0000                	unimp
    161c:	5d09                	li	s10,-30
    161e:	0000                	unimp
    1620:	2f00                	fld	fs0,24(a4)
    1622:	0016                	c.slli	zero,0x5
    1624:	3400                	fld	fs0,40(s0)
    1626:	0069                	c.nop	26
    1628:	0000                	unimp
    162a:	1546                	slli	a0,a0,0x31
    162c:	0000                	unimp
    162e:	0900                	addi	s0,sp,144
    1630:	005d                	c.nop	23
    1632:	0000                	unimp
    1634:	1642                	slli	a2,a2,0x30
    1636:	0000                	unimp
    1638:	6934                	flw	fa3,80(a0)
    163a:	0000                	unimp
    163c:	4f00                	lw	s0,24(a4)
    163e:	0015                	c.nop	5
    1640:	0000                	unimp
    1642:	5d09                	li	s10,-30
    1644:	0000                	unimp
    1646:	5500                	lw	s0,40(a0)
    1648:	0016                	c.slli	zero,0x5
    164a:	3400                	fld	fs0,40(s0)
    164c:	0069                	c.nop	26
    164e:	0000                	unimp
    1650:	1558                	addi	a4,sp,676
    1652:	0000                	unimp
    1654:	0900                	addi	s0,sp,144
    1656:	005d                	c.nop	23
    1658:	0000                	unimp
    165a:	1668                	addi	a0,sp,812
    165c:	0000                	unimp
    165e:	6934                	flw	fa3,80(a0)
    1660:	0000                	unimp
    1662:	6100                	flw	fs0,0(a0)
    1664:	0015                	c.nop	5
    1666:	0000                	unimp
    1668:	2a35                	jal	17a4 <product2+0x1d8>
    166a:	0000                	unimp
    166c:	0100                	addi	s0,sp,128
    166e:	06bd                	addi	a3,a3,15
    1670:	00000b63          	beqz	zero,1686 <product2+0xba>
    1674:	03be                	slli	t2,t2,0xf
    1676:	0000                	unimp
    1678:	015e                	slli	sp,sp,0x17
    167a:	0000                	unimp
    167c:	9c01                	0x9c01
    167e:	17bc                	addi	a5,sp,1000
    1680:	0000                	unimp
    1682:	6136                	flw	ft2,76(sp)
    1684:	0100                	addi	s0,sp,128
    1686:	15bd                	addi	a1,a1,-17
    1688:	00000b63          	beqz	zero,169e <product2+0xd2>
    168c:	00001507          	0x1507
    1690:	0006fd37          	lui	s10,0x6f
    1694:	0100                	addi	s0,sp,128
    1696:	1cbd                	addi	s9,s9,-17
    1698:	005d                	c.nop	23
    169a:	0000                	unimp
    169c:	154c                	addi	a1,sp,676
    169e:	0000                	unimp
    16a0:	6236                	flw	ft4,76(sp)
    16a2:	0100                	addi	s0,sp,128
    16a4:	29bd                	jal	1b22 <ti_2+0xa6>
    16a6:	00000b63          	beqz	zero,16bc <product2+0xf0>
    16aa:	159d                	addi	a1,a1,-25
    16ac:	0000                	unimp
    16ae:	00070437          	lui	s0,0x70
    16b2:	0100                	addi	s0,sp,128
    16b4:	30bd                	jal	f22 <zero_loop+0x6>
    16b6:	005d                	c.nop	23
    16b8:	0000                	unimp
    16ba:	15ed                	addi	a1,a1,-5
    16bc:	0000                	unimp
    16be:	00052637          	lui	a2,0x52
    16c2:	0100                	addi	s0,sp,128
    16c4:	3cbd                	jal	1142 <main+0x8a>
    16c6:	005d                	c.nop	23
    16c8:	0000                	unimp
    16ca:	1624                	addi	s1,sp,808
    16cc:	0000                	unimp
    16ce:	3e3a                	fld	ft8,424(sp)
    16d0:	0006                	c.slli	zero,0x1
    16d2:	0100                	addi	s0,sp,128
    16d4:	17bc09bf 165b0000 	0x165b000017bc09bf
    16dc:	0000                	unimp
    16de:	6938                	flw	fa4,80(a0)
    16e0:	0100                	addi	s0,sp,128
    16e2:	09c0                	addi	s0,sp,212
    16e4:	005d                	c.nop	23
    16e6:	0000                	unimp
    16e8:	169f 0000 6a38      	0x6a380000169f
    16ee:	0100                	addi	s0,sp,128
    16f0:	0bc0                	addi	s0,sp,468
    16f2:	005d                	c.nop	23
    16f4:	0000                	unimp
    16f6:	16df 0000 6b38      	0x6b38000016df
    16fc:	0100                	addi	s0,sp,128
    16fe:	0dc0                	addi	s0,sp,724
    1700:	005d                	c.nop	23
    1702:	0000                	unimp
    1704:	00001713          	slli	a4,zero,0x0
    1708:	6a3a                	flw	fs4,140(sp)
    170a:	0002                	c.slli64	zero
    170c:	0100                	addi	s0,sp,128
    170e:	0ac1                	addi	s5,s5,16
    1710:	00000b63          	beqz	zero,1726 <product2+0x15a>
    1714:	1761                	addi	a4,a4,-8
    1716:	0000                	unimp
    1718:	0c3a                	slli	s8,s8,0xe
    171a:	0000                	unimp
    171c:	0100                	addi	s0,sp,128
    171e:	09c2                	slli	s3,s3,0x10
    1720:	17d8                	addi	a4,sp,996
    1722:	0000                	unimp
    1724:	1779                	addi	a4,a4,-2
    1726:	0000                	unimp
    1728:	643a                	flw	fs0,140(sp)
    172a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    172e:	17eb09c3          	fmadd.q	fs3,fs6,ft10,ft2,rne
    1732:	0000                	unimp
    1734:	1799                	addi	a5,a5,-26
    1736:	0000                	unimp
    1738:	00006933          	or	s2,zero,zero
    173c:	e600                	fsw	fs0,8(a2)
    173e:	33000017          	auipc	zero,0x33000
    1742:	0069                	c.nop	26
    1744:	0000                	unimp
    1746:	0000183b          	0x183b
    174a:	00006933          	or	s2,zero,zero
    174e:	8e00                	0x8e00
    1750:	0018                	0x18
    1752:	3300                	fld	fs0,32(a4)
    1754:	0069                	c.nop	26
    1756:	0000                	unimp
    1758:	18bc                	addi	a5,sp,120
    175a:	0000                	unimp
    175c:	0004402b          	0x4402b
    1760:	a600                	fsd	fs0,8(a2)
    1762:	0019                	c.nop	6
    1764:	7d00                	flw	fs0,56(a0)
    1766:	2c000017          	auipc	zero,0x2c000
    176a:	5a01                	li	s4,-32
    176c:	8a02                	jr	s4
    176e:	2c00                	fld	fs0,24(s0)
    1770:	5b01                	li	s6,-32
    1772:	5a01f303          	0x5a01f303
    1776:	012c                	addi	a1,sp,136
    1778:	025c                	addi	a5,sp,260
    177a:	0188                	addi	a0,sp,192
    177c:	2b00                	fld	fs0,16(a4)
    177e:	044c                	addi	a1,sp,516
    1780:	0000                	unimp
    1782:	19a6                	slli	s3,s3,0x29
    1784:	0000                	unimp
    1786:	179f 0000 012c      	0x12c0000179f
    178c:	025a                	slli	tp,tp,0x16
    178e:	0072                	c.slli	zero,0x1c
    1790:	012c                	addi	a1,sp,136
    1792:	bc78045b          	0xbc78045b
    1796:	067f                	0x67f
    1798:	012c                	addi	a1,sp,136
    179a:	025c                	addi	a5,sp,260
    179c:	0084                	addi	s1,sp,64
    179e:	2d00                	fld	fs0,24(a0)
    17a0:	0516                	slli	a0,a0,0x5
    17a2:	0000                	unimp
    17a4:	1a92                	slli	s5,s5,0x24
    17a6:	0000                	unimp
    17a8:	012c                	addi	a1,sp,136
    17aa:	025a                	slli	tp,tp,0x16
    17ac:	0082                	c.slli64	ra
    17ae:	012c                	addi	a1,sp,136
    17b0:	0089025b          	0x89025b
    17b4:	012c                	addi	a1,sp,136
    17b6:	025c                	addi	a5,sp,260
    17b8:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
    17bc:	5d09                	li	s10,-30
    17be:	0000                	unimp
    17c0:	d800                	sw	s0,48(s0)
    17c2:	34000017          	auipc	zero,0x34000
    17c6:	0069                	c.nop	26
    17c8:	0000                	unimp
    17ca:	1738                	addi	a4,sp,936
    17cc:	0000                	unimp
    17ce:	6934                	flw	fa3,80(a0)
    17d0:	0000                	unimp
    17d2:	4100                	lw	s0,0(a0)
    17d4:	00000017          	auipc	zero,0x0
    17d8:	5d09                	li	s10,-30
    17da:	0000                	unimp
    17dc:	eb00                	fsw	fs0,16(a4)
    17de:	34000017          	auipc	zero,0x34000
    17e2:	0069                	c.nop	26
    17e4:	0000                	unimp
    17e6:	174a                	slli	a4,a4,0x32
    17e8:	0000                	unimp
    17ea:	0900                	addi	s0,sp,144
    17ec:	005d                	c.nop	23
    17ee:	0000                	unimp
    17f0:	17fe                	slli	a5,a5,0x3f
    17f2:	0000                	unimp
    17f4:	6934                	flw	fa3,80(a0)
    17f6:	0000                	unimp
    17f8:	5300                	lw	s0,32(a4)
    17fa:	00000017          	auipc	zero,0x0
    17fe:	0d35                	addi	s10,s10,13
    1800:	0001                	nop
    1802:	0100                	addi	s0,sp,128
    1804:	0b63066f          	jal	a2,318ba <_stack_start+0x218ba>
    1808:	0000                	unimp
    180a:	01cc                	addi	a1,sp,196
    180c:	0000                	unimp
    180e:	01f2                	slli	gp,gp,0x1c
    1810:	0000                	unimp
    1812:	9c01                	0x9c01
    1814:	1964                	addi	s1,sp,188
    1816:	0000                	unimp
    1818:	6136                	flw	ft2,76(sp)
    181a:	0100                	addi	s0,sp,128
    181c:	0b63146f          	jal	s0,328d2 <_stack_start+0x228d2>
    1820:	0000                	unimp
    1822:	1911                	addi	s2,s2,-28
    1824:	0000                	unimp
    1826:	0006fd37          	lui	s10,0x6f
    182a:	0100                	addi	s0,sp,128
    182c:	005d1b6f          	jal	s6,d3030 <_stack_start+0xc3030>
    1830:	0000                	unimp
    1832:	1956                	slli	s2,s2,0x35
    1834:	0000                	unimp
    1836:	6236                	flw	ft4,76(sp)
    1838:	0100                	addi	s0,sp,128
    183a:	0b63286f          	jal	a6,338f0 <_stack_start+0x238f0>
    183e:	0000                	unimp
    1840:	19a6                	slli	s3,s3,0x29
    1842:	0000                	unimp
    1844:	00070437          	lui	s0,0x70
    1848:	0100                	addi	s0,sp,128
    184a:	005d2f6f          	jal	t5,d404e <_stack_start+0xc404e>
    184e:	0000                	unimp
    1850:	19f6                	slli	s3,s3,0x3d
    1852:	0000                	unimp
    1854:	6d36                	flw	fs10,76(sp)
    1856:	0100646f          	jal	s0,7866 <_stack_len+0x3866>
    185a:	005d3b6f          	jal	s6,d505e <_stack_start+0xc505e>
    185e:	0000                	unimp
    1860:	1a2d                	addi	s4,s4,-21
    1862:	0000                	unimp
    1864:	00052637          	lui	a2,0x52
    1868:	0100                	addi	s0,sp,128
    186a:	005d446f          	jal	s0,d606e <_stack_start+0xc606e>
    186e:	0000                	unimp
    1870:	1a7a                	slli	s4,s4,0x3e
    1872:	0000                	unimp
    1874:	3e3a                	fld	ft8,424(sp)
    1876:	0006                	c.slli	zero,0x1
    1878:	0100                	addi	s0,sp,128
    187a:	0972                	slli	s2,s2,0x1c
    187c:	1964                	addi	s1,sp,188
    187e:	0000                	unimp
    1880:	00001aa7          	0x1aa7
    1884:	6938                	flw	fa4,80(a0)
    1886:	0100                	addi	s0,sp,128
    1888:	005d0973          	0x5d0973
    188c:	0000                	unimp
    188e:	00001ad3          	fadd.s	fs5,ft0,ft0,rtz
    1892:	6a38                	flw	fa4,80(a2)
    1894:	0100                	addi	s0,sp,128
    1896:	005d0b73          	0x5d0b73
    189a:	0000                	unimp
    189c:	1b92                	slli	s7,s7,0x24
    189e:	0000                	unimp
    18a0:	6b38                	flw	fa4,80(a4)
    18a2:	0100                	addi	s0,sp,128
    18a4:	005d0d73          	0x5d0d73
    18a8:	0000                	unimp
    18aa:	00001c17          	auipc	s8,0x1
    18ae:	5a3a                	lw	s4,172(sp)
    18b0:	0002                	c.slli64	zero
    18b2:	0100                	addi	s0,sp,128
    18b4:	0a74                	addi	a3,sp,284
    18b6:	00000b63          	beqz	zero,18cc <result+0xa8>
    18ba:	1c65                	addi	s8,s8,-7
    18bc:	0000                	unimp
    18be:	0c3a                	slli	s8,s8,0xe
    18c0:	0000                	unimp
    18c2:	0100                	addi	s0,sp,128
    18c4:	0975                	addi	s2,s2,29
    18c6:	1980                	addi	s0,sp,240
    18c8:	0000                	unimp
    18ca:	1c7d                	addi	s8,s8,-1
    18cc:	0000                	unimp
    18ce:	643a                	flw	fs0,140(sp)
    18d0:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18d4:	0976                	slli	s2,s2,0x1d
    18d6:	00001993          	slli	s3,zero,0x0
    18da:	1c9d                	addi	s9,s9,-25
    18dc:	0000                	unimp
    18de:	00006933          	or	s2,zero,zero
    18e2:	ea00                	fsw	fs0,16(a2)
    18e4:	001c                	0x1c
    18e6:	3300                	fld	fs0,32(a4)
    18e8:	0069                	c.nop	26
    18ea:	0000                	unimp
    18ec:	00001d3f 00006933 	0x693300001d3f
    18f4:	7200                	flw	fs0,32(a2)
    18f6:	001d                	c.nop	7
    18f8:	3300                	fld	fs0,32(a4)
    18fa:	0069                	c.nop	26
    18fc:	0000                	unimp
    18fe:	1da1                	addi	s11,s11,-24
    1900:	0000                	unimp
    1902:	0002562b          	0x2562b
    1906:	a600                	fsd	fs0,8(a2)
    1908:	0019                	c.nop	6
    190a:	2500                	fld	fs0,8(a0)
    190c:	0019                	c.nop	6
    190e:	2c00                	fld	fs0,24(s0)
    1910:	5a01                	li	s4,-32
    1912:	8802                	jr	a6
    1914:	2c00                	fld	fs0,24(s0)
    1916:	5b01                	li	s6,-32
    1918:	5a01f303          	0x5a01f303
    191c:	012c                	addi	a1,sp,136
    191e:	045c                	addi	a5,sp,516
    1920:	b878                	fsd	fa4,240(s0)
    1922:	067f                	0x67f
    1924:	2b00                	fld	fs0,16(a4)
    1926:	026e                	slli	tp,tp,0x1b
    1928:	0000                	unimp
    192a:	19a6                	slli	s3,s3,0x29
    192c:	0000                	unimp
    192e:	00001947          	fmsub.s	fs2,ft0,ft0,ft0,rtz
    1932:	012c                	addi	a1,sp,136
    1934:	025a                	slli	tp,tp,0x16
    1936:	0072                	c.slli	zero,0x1c
    1938:	012c                	addi	a1,sp,136
    193a:	b478045b          	0xb478045b
    193e:	067f                	0x67f
    1940:	012c                	addi	a1,sp,136
    1942:	025c                	addi	a5,sp,260
    1944:	0082                	c.slli64	ra
    1946:	2d00                	fld	fs0,24(a0)
    1948:	03a8                	addi	a0,sp,456
    194a:	0000                	unimp
    194c:	1a92                	slli	s5,s5,0x24
    194e:	0000                	unimp
    1950:	012c                	addi	a1,sp,136
    1952:	025a                	slli	tp,tp,0x16
    1954:	012c0083          	lb	ra,18(s8) # 28bc <_bss_end+0x7b8>
    1958:	0085025b          	0x85025b
    195c:	012c                	addi	a1,sp,136
    195e:	025c                	addi	a5,sp,260
    1960:	0084                	addi	s1,sp,64
    1962:	0000                	unimp
    1964:	5d09                	li	s10,-30
    1966:	0000                	unimp
    1968:	8000                	0x8000
    196a:	0019                	c.nop	6
    196c:	3400                	fld	fs0,40(s0)
    196e:	0069                	c.nop	26
    1970:	0000                	unimp
    1972:	18de                	slli	a7,a7,0x37
    1974:	0000                	unimp
    1976:	6934                	flw	fa3,80(a0)
    1978:	0000                	unimp
    197a:	e700                	fsw	fs0,8(a4)
    197c:	0018                	0x18
    197e:	0000                	unimp
    1980:	5d09                	li	s10,-30
    1982:	0000                	unimp
    1984:	9300                	0x9300
    1986:	0019                	c.nop	6
    1988:	3400                	fld	fs0,40(s0)
    198a:	0069                	c.nop	26
    198c:	0000                	unimp
    198e:	18f0                	addi	a2,sp,124
    1990:	0000                	unimp
    1992:	0900                	addi	s0,sp,144
    1994:	005d                	c.nop	23
    1996:	0000                	unimp
    1998:	19a6                	slli	s3,s3,0x29
    199a:	0000                	unimp
    199c:	6934                	flw	fa3,80(a0)
    199e:	0000                	unimp
    19a0:	f900                	fsw	fs0,48(a0)
    19a2:	0018                	0x18
    19a4:	0000                	unimp
    19a6:	0003903b          	0x3903b
    19aa:	0100                	addi	s0,sp,128
    19ac:	0650                	addi	a2,sp,772
    19ae:	0136                	slli	sp,sp,0xd
    19b0:	0000                	unimp
    19b2:	0096                	slli	ra,ra,0x5
    19b4:	0000                	unimp
    19b6:	9c01                	0x9c01
    19b8:	1a68                	addi	a0,sp,316
    19ba:	0000                	unimp
    19bc:	613c                	flw	fa5,64(a0)
    19be:	0031                	c.nop	12
    19c0:	5001                	c.li	zero,-32
    19c2:	6315                	lui	t1,0x5
    19c4:	0100000b          	0x100000b
    19c8:	365a                	fld	fa2,432(sp)
    19ca:	3261                	jal	1352 <__DTOR_END__+0x162>
    19cc:	0100                	addi	s0,sp,128
    19ce:	1d50                	addi	a2,sp,692
    19d0:	00000b63          	beqz	zero,19e6 <result+0x1c2>
    19d4:	1df6                	slli	s11,s11,0x3d
    19d6:	0000                	unimp
    19d8:	00055937          	lui	s2,0x55
    19dc:	0100                	addi	s0,sp,128
    19de:	2450                	fld	fa2,136(s0)
    19e0:	005d                	c.nop	23
    19e2:	0000                	unimp
    19e4:	1e22                	slli	t3,t3,0x28
    19e6:	0000                	unimp
    19e8:	6938                	flw	fa4,80(a0)
    19ea:	0100                	addi	s0,sp,128
    19ec:	0551                	addi	a0,a0,20
    19ee:	005d                	c.nop	23
    19f0:	0000                	unimp
    19f2:	1e80                	addi	s0,sp,880
    19f4:	0000                	unimp
    19f6:	683d                	lui	a6,0xf
    19f8:	001a                	c.slli	zero,0x6
    19fa:	9a00                	0x9a00
    19fc:	0001                	nop
    19fe:	0a00                	addi	s0,sp,272
    1a00:	0000                	unimp
    1a02:	0100                	addi	s0,sp,128
    1a04:	1156                	slli	sp,sp,0x35
    1a06:	1a1d                	addi	s4,s4,-25
    1a08:	0000                	unimp
    1a0a:	803e                	c.mv	zero,a5
    1a0c:	001a                	c.slli	zero,0x6
    1a0e:	d800                	sw	s0,48(s0)
    1a10:	001e                	c.slli	zero,0x7
    1a12:	3e00                	fld	fs0,56(a2)
    1a14:	1a75                	addi	s4,s4,-3
    1a16:	0000                	unimp
    1a18:	00001efb          	0x1efb
    1a1c:	3d00                	fld	fs0,56(a0)
    1a1e:	1a68                	addi	a0,sp,316
    1a20:	0000                	unimp
    1a22:	01ac                	addi	a1,sp,200
    1a24:	0000                	unimp
    1a26:	000a                	c.slli	zero,0x2
    1a28:	0000                	unimp
    1a2a:	5b01                	li	s6,-32
    1a2c:	4411                	li	s0,4
    1a2e:	001a                	c.slli	zero,0x6
    1a30:	3e00                	fld	fs0,56(a2)
    1a32:	1a80                	addi	s0,sp,368
    1a34:	0000                	unimp
    1a36:	1f1e                	slli	t5,t5,0x27
    1a38:	0000                	unimp
    1a3a:	753e                	flw	fa0,236(sp)
    1a3c:	001a                	c.slli	zero,0x6
    1a3e:	4100                	lw	s0,0(a0)
    1a40:	001f 0000 683f      	0x683f0000001f
    1a46:	001a                	c.slli	zero,0x6
    1a48:	be00                	fsd	fs0,56(a2)
    1a4a:	0001                	nop
    1a4c:	0a00                	addi	s0,sp,272
    1a4e:	0000                	unimp
    1a50:	0100                	addi	s0,sp,128
    1a52:	1161                	addi	sp,sp,-8
    1a54:	803e                	c.mv	zero,a5
    1a56:	001a                	c.slli	zero,0x6
    1a58:	6400                	flw	fs0,8(s0)
    1a5a:	001f 3e00 1a75      	0x1a753e00001f
    1a60:	0000                	unimp
    1a62:	00001f87          	0x1f87
    1a66:	0000                	unimp
    1a68:	5840                	lw	s0,52(s0)
    1a6a:	0006                	c.slli	zero,0x1
    1a6c:	0100                	addi	s0,sp,128
    1a6e:	063e                	slli	a2,a2,0xf
    1a70:	8c01                	sub	s0,s0,s0
    1a72:	001a                	c.slli	zero,0x6
    1a74:	4100                	lw	s0,0(a0)
    1a76:	3161                	jal	16fe <product2+0x132>
    1a78:	0100                	addi	s0,sp,128
    1a7a:	1e3e                	slli	t3,t3,0x2f
    1a7c:	1a8c                	addi	a1,sp,368
    1a7e:	0000                	unimp
    1a80:	6141                	addi	sp,sp,16
    1a82:	0032                	c.slli	zero,0xc
    1a84:	3e01                	jal	1594 <_bss_start+0x220>
    1a86:	8c30                	0x8c30
    1a88:	001a                	c.slli	zero,0x6
    1a8a:	0000                	unimp
    1a8c:	0410                	addi	a2,sp,512
    1a8e:	0069                	c.nop	26
    1a90:	0000                	unimp
    1a92:	0005743b          	0x5743b
    1a96:	0100                	addi	s0,sp,128
    1a98:	0624                	addi	s1,sp,776
    1a9a:	0092                	slli	ra,ra,0x4
    1a9c:	0000                	unimp
    1a9e:	009e                	slli	ra,ra,0x7
    1aa0:	0000                	unimp
    1aa2:	9c01                	0x9c01
    1aa4:	1b54                	addi	a3,sp,436
    1aa6:	0000                	unimp
    1aa8:	6136                	flw	ft2,76(sp)
    1aaa:	0031                	c.nop	12
    1aac:	2401                	jal	1cac <random_keys+0xa0>
    1aae:	6315                	lui	t1,0x5
    1ab0:	aa00000b          	0xaa00000b
    1ab4:	001f 3c00 3261      	0x32613c00001f
    1aba:	0100                	addi	s0,sp,128
    1abc:	1e24                	addi	s1,sp,824
    1abe:	00000b63          	beqz	zero,1ad4 <ti_2+0x58>
    1ac2:	5b01                	li	s6,-32
    1ac4:	00055937          	lui	s2,0x55
    1ac8:	0100                	addi	s0,sp,128
    1aca:	2624                	fld	fs1,72(a2)
    1acc:	005d                	c.nop	23
    1ace:	0000                	unimp
    1ad0:	1fd6                	slli	t6,t6,0x35
    1ad2:	0000                	unimp
    1ad4:	6938                	flw	fa4,80(a0)
    1ad6:	0100                	addi	s0,sp,128
    1ad8:	0525                	addi	a0,a0,9
    1ada:	005d                	c.nop	23
    1adc:	0000                	unimp
    1ade:	2034                	fld	fa3,64(s0)
    1ae0:	0000                	unimp
    1ae2:	543d                	li	s0,-17
    1ae4:	fe00001b          	0xfe00001b
    1ae8:	0000                	unimp
    1aea:	0a00                	addi	s0,sp,272
    1aec:	0000                	unimp
    1aee:	0100                	addi	s0,sp,128
    1af0:	112a                	slli	sp,sp,0x2a
    1af2:	1b09                	addi	s6,s6,-30
    1af4:	0000                	unimp
    1af6:	6c3e                	flw	fs8,204(sp)
    1af8:	8c00001b          	0x8c00001b
    1afc:	0020                	addi	s0,sp,8
    1afe:	3e00                	fld	fs0,56(a2)
    1b00:	1b61                	addi	s6,s6,-8
    1b02:	0000                	unimp
    1b04:	000020af          	amoadd.w	ra,zero,(zero)
    1b08:	3d00                	fld	fs0,56(a0)
    1b0a:	1b54                	addi	a3,sp,436
    1b0c:	0000                	unimp
    1b0e:	0110                	addi	a2,sp,128
    1b10:	0000                	unimp
    1b12:	000a                	c.slli	zero,0x2
    1b14:	0000                	unimp
    1b16:	2f01                	jal	2226 <_bss_end+0x122>
    1b18:	3011                	jal	131c <__DTOR_END__+0x12c>
    1b1a:	3e00001b          	0x3e00001b
    1b1e:	1b6c                	addi	a1,sp,444
    1b20:	0000                	unimp
    1b22:	20d2                	fld	ft1,272(sp)
    1b24:	0000                	unimp
    1b26:	613e                	flw	ft2,204(sp)
    1b28:	f500001b          	0xf500001b
    1b2c:	0020                	addi	s0,sp,8
    1b2e:	0000                	unimp
    1b30:	001b543f 00012200 	0x12200001b543f
    1b38:	0a00                	addi	s0,sp,272
    1b3a:	0000                	unimp
    1b3c:	0100                	addi	s0,sp,128
    1b3e:	1135                	addi	sp,sp,-19
    1b40:	6c3e                	flw	fs8,204(sp)
    1b42:	1800001b          	0x1800001b
    1b46:	0021                	c.nop	8
    1b48:	3e00                	fld	fs0,56(a2)
    1b4a:	1b61                	addi	s6,s6,-8
    1b4c:	0000                	unimp
    1b4e:	0000213b          	0x213b
    1b52:	0000                	unimp
    1b54:	3a40                	fld	fs0,176(a2)
    1b56:	0000                	unimp
    1b58:	0100                	addi	s0,sp,128
    1b5a:	0610                	addi	a2,sp,768
    1b5c:	7801                	lui	a6,0xfffe0
    1b5e:	4100001b          	0x4100001b
    1b62:	3161                	jal	17ea <product2+0x21e>
    1b64:	0100                	addi	s0,sp,128
    1b66:	1e10                	addi	a2,sp,816
    1b68:	1a8c                	addi	a1,sp,368
    1b6a:	0000                	unimp
    1b6c:	6141                	addi	sp,sp,16
    1b6e:	0032                	c.slli	zero,0xc
    1b70:	1001                	c.nop	-32
    1b72:	8c30                	0x8c30
    1b74:	001a                	c.slli	zero,0x6
    1b76:	0000                	unimp
    1b78:	5442                	lw	s0,48(sp)
    1b7a:	8c00001b          	0x8c00001b
    1b7e:	0000                	unimp
    1b80:	0600                	addi	s0,sp,768
    1b82:	0000                	unimp
    1b84:	0100                	addi	s0,sp,128
    1b86:	9c9c                	0x9c9c
    1b88:	3e00001b          	0x3e00001b
    1b8c:	1b61                	addi	s6,s6,-8
    1b8e:	0000                	unimp
    1b90:	215e                	fld	ft2,464(sp)
    1b92:	0000                	unimp
    1b94:	001b6c43          	fmadd.s	fs8,fs6,ft1,ft0,unknown
    1b98:	0100                	addi	s0,sp,128
    1b9a:	6842005b          	0x6842005b
    1b9e:	001a                	c.slli	zero,0x6
    1ba0:	3000                	fld	fs0,32(s0)
    1ba2:	0001                	nop
    1ba4:	0600                	addi	s0,sp,768
    1ba6:	0000                	unimp
    1ba8:	0100                	addi	s0,sp,128
    1baa:	c09c                	sw	a5,0(s1)
    1bac:	3e00001b          	0x3e00001b
    1bb0:	1a75                	addi	s4,s4,-3
    1bb2:	0000                	unimp
    1bb4:	2171                	jal	2040 <_min_stack+0x40>
    1bb6:	0000                	unimp
    1bb8:	001a8043          	fmadd.s	ft0,fs5,ft1,ft0,rne
    1bbc:	0100                	addi	s0,sp,128
    1bbe:	2344005b          	0x2344005b
    1bc2:	19000003          	lb	zero,400(zero) # 190 <array_equ+0x5a>
    1bc6:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    1bca:	4400                	lw	s0,8(s0)
    1bcc:	006e                	c.slli	zero,0x1b
    1bce:	0000                	unimp
    1bd0:	0064                	addi	s1,sp,12
    1bd2:	0000                	unimp
    1bd4:	1e000007          	0x1e000007
    1bd8:	0000                	unimp
    1bda:	0200                	addi	s0,sp,256
    1bdc:	0500                	addi	s0,sp,640
    1bde:	0004                	0x4
    1be0:	0400                	addi	s0,sp,512
    1be2:	3101                	jal	17e2 <product2+0x216>
    1be4:	002a                	c.slli	zero,0xa
    1be6:	1800                	addi	s0,sp,48
    1be8:	0000                	unimp
    1bea:	0b00                	addi	s0,sp,400
    1bec:	12000007          	0x12000007
    1bf0:	40000007          	0x40000007
    1bf4:	01000007          	0x1000007
    1bf8:	80              	Address 0x0000000000001bf8 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0xe6>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_add+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4)
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1 # 5001 <_stack_len+0x1001>
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    switch(length%3) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
  a0:	0b00                	addi	s0,sp,400
  a2:	0e00000b          	0xe00000b
            for (i = 0; i < (length / 3); i++) {
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	1301                	addi	t1,t1,-32
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
            a1[length-1] = a1[length-1] + a2[length-1];
  c4:	1000000b          	0x1000000b
  c8:	0b0b000f          	0xb0b000f
  cc:	1349                	addi	t1,t1,-14
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
            for (i = 0; i < ((length-1) / 3); i++) {
  d8:	390b3b0b          	0x390b3b0b
  dc:	0013010b          	0x13010b
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
  e4:	0b3a0e03          	lb	t3,179(s4)
            a1[length-1] = a1[length-1] + a2[length-1];
  e8:	0b390b3b          	0xb390b3b
            a1[length-2] = a1[length-2] + a2[length-2];
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
  f0:	0000                	unimp
  f2:	27001513          	0x27001513
  f6:	0019                	c.nop	6
} //end of function
  f8:	1400                	addi	s0,sp,544
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
    asm volatile(
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
            for (i = 0; i < (length / 3); i++) {
 108:	16000013          	li	zero,352
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
    asm volatile(
 110:	0000                	unimp
 112:	03011317          	auipc	t1,0x3011
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
            for (i = 0; i < ((length-1) / 3); i++) {
 11a:	39053b0b          	0x39053b0b
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 11e:	0013010b          	0x13010b
    asm volatile(
 122:	1800                	addi	s0,sp,48
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
 12a:	0b39053b          	0xb39053b
            for (i = 0; i < ((length-2) / 3); i++) {
 12e:	1349                	addi	t1,t1,-14
    asm volatile(
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
}
 134:	0d19                	addi	s10,s10,6
    switch(length%3) {
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
 13a:	39053b0b          	0x39053b0b
 13e:	3813490b          	0x3813490b
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
            for (i = 0; i < (length / 3); i++) {
 14a:	0b3a0b0b          	0xb3a0b0b
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
 156:	0b01131b          	0xb01131b
 15a:	3b0b3a0b          	0x3b0b3a0b
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
 164:	1c00                	addi	s0,sp,560
            a1[length-1] = a2[length-1];
 166:	0b0b0117          	auipc	sp,0xb0b0
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
            for (i = 0; i < ((length-1) / 3); i++) {
 178:	3a0e                	fld	fs4,224(sp)
 17a:	39053b0b          	0x39053b0b
 17e:	0013490b          	0x13490b
 182:	1e00                	addi	s0,sp,816
 184:	0e030013          	addi	zero,t1,224
            a1[length-1] = a2[length-1];
 188:	193c                	addi	a5,sp,184
            a1[length-2] = a2[length-2];
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
 192:	20000013          	li	zero,512
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
    asm volatile(
 19c:	0b39053b          	0xb39053b
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 1aa:	0300                	addi	s0,sp,384
    asm volatile(
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
 1b2:	3f13490b          	0x3f13490b
            for (i = 0; i < ((length-1) / 3); i++) {
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
    asm volatile(
 1be:	0b3a0e03          	lb	t3,179(s4)
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
            for (i = 0; i < ((length-2) / 3); i++) {
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polymult2+0xc4>
 1d0:	00052f13          	slti	t5,a0,0
    int line[size_b][size_a + size_b];
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1dc:	0b390b3b          	0xb390b3b
    int line[size_b][size_a + size_b];
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 2e250000 	0x2e2500001802193f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1ea:	3f01                	jal	fa <array_add+0x68>
 1ec:	0319                	addi	t1,t1,6
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
 1f4:	1113490b          	0x1113490b
 1f8:	1201                	addi	tp,tp,-32
 1fa:	4006                	0x4006
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
 200:	1301                	addi	t1,t1,-32
    int line[size_b][size_a + size_b];
 202:	0000                	unimp
    int pola[size_a];
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
    int line[size_b][size_a + size_b];
 208:	3a0e                	fld	fs4,224(sp)
    int pola[size_a];
 20a:	39053b0b          	0x39053b0b
    int line[size_b][size_a + size_b];
 20e:	0213490b          	0x213490b
 212:	27000017          	auipc	zero,0x27000
    int pola[size_a];
 216:	0034                	addi	a3,sp,8
    int polb[size_b];
 218:	0b3a0803          	lb	a6,179(s4)
 21c:	0b39053b          	0xb39053b
 220:	1349                	addi	t1,t1,-14
 222:	0b1c                	addi	a5,sp,400
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 224:	0000                	unimp
 226:	3428                	fld	fa0,104(s0)
 228:	0300                	addi	s0,sp,384
    int line[size_b][size_a + size_b];
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
    int pola[size_a];
 230:	0213490b          	0x213490b
    for (i = 0; i < size_b; ++i){
 234:	0018                	0x18
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
            product[j] = 0;
 23a:	0b3a0e03          	lb	t3,179(s4)
 23e:	0b39053b          	0xb39053b
    for (i = 0; i < size_b; ++i){
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
    array_equ(pola,a,size_a);
 246:	342a                	fld	fs0,168(sp)
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
 250:	0213490b          	0x213490b
 254:	2b000017          	auipc	zero,0x2b000
    for (i = 0; i < size_a; ++i){
 258:	8289                	srli	a3,a3,0x2
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
 25e:	1331                	addi	t1,t1,-20
 260:	1301                	addi	t1,t1,-32
 262:	0000                	unimp
 264:	8a2c                	0x8a2c
    array_equ(polb,b,size_b);
 266:	0182                	c.slli64	gp
 268:	0200                	addi	s0,sp,256
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
   for (i = 0; i < size_b; ++i){
 26e:	0000                	unimp
 270:	892d                	andi	a0,a0,11
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
    if(star_mult == 1){
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
 27c:	0021                	c.nop	8
 27e:	1349                	addi	t1,t1,-14
 280:	0000182f          	0x182f
 284:	3f012e2f          	0x3f012e2f
 288:	0319                	addi	t1,t1,6
        for (j = size_b -1; j >= 0; j = j-1){
 28a:	3a0e                	fld	fs4,224(sp)
 28c:	39053b0b          	0x39053b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 290:	4919270b          	0x4919270b
            product[j] = 0;
 294:	12011113          	0x12011113
            line[i][j] = 0;
 298:	4006                	0x4006
 29a:	9718                	0x9718
            product[j] = 0;
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
        for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	0000                	unimp
 2a2:	0530                	addi	a2,sp,648
 2a4:	0300                	addi	s0,sp,384
 2a6:	3a08                	fld	fa0,48(a2)
    for (i = 0; i < size_b; ++i){
 2a8:	39053b0b          	0x39053b0b
 2ac:	0213490b          	0x213490b
        for(j = 0; j < size_a + size_b -1; ++j){
 2b0:	31000017          	auipc	zero,0x31000
            pola[i] = pola[i] + mod;
 2b4:	0005                	c.nop	1
 2b6:	0b3a0e03          	lb	t3,179(s4)
        while (pola[i] < 0){
 2ba:	0b39053b          	0xb39053b
        pola[i] = pola[i] % mod;
 2be:	1349                	addi	t1,t1,-14
 2c0:	1702                	slli	a4,a4,0x20
    for (i = 0; i < size_a; ++i){
 2c2:	0000                	unimp
 2c4:	3432                	fld	fs0,296(sp)
        pola[i] = pola[i] % mod;
 2c6:	0300                	addi	s0,sp,384
 2c8:	3a08                	fld	fa0,48(a2)
    for (i = 0; i < size_a; ++i){
 2ca:	39053b0b          	0x39053b0b
            polb[i] = polb[i] + mod;
 2ce:	0213490b          	0x213490b
        while (polb[i] < 0){
 2d2:	0018                	0x18
 2d4:	3300                	fld	fs0,32(a4)
        polb[i] = polb[i] % mod;
 2d6:	0034                	addi	a3,sp,8
 2d8:	1349                	addi	t1,t1,-14
   for (i = 0; i < size_b; ++i){
 2da:	1934                	addi	a3,sp,184
 2dc:	1702                	slli	a4,a4,0x20
        polb[i] = polb[i] % mod;
 2de:	0000                	unimp
 2e0:	2134                	fld	fa3,64(a0)
   for (i = 0; i < size_b; ++i){
 2e2:	4900                	lw	s0,16(a0)
    if(star_mult == 1){
 2e4:	00132f13          	slti	t5,t1,1
        for (j = size_b -1; j >= 0; j = j-1){
 2e8:	3500                	fld	fs0,40(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
 2ea:	012e                	slli	sp,sp,0xb
    for (i = 0; i < size_b; ++i){
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
             array_add(product,line[i],size_a+size_b-1);
 2f4:	0b39                	addi	s6,s6,14
 2f6:	13491927          	0x13491927
        for(i = 0; i < size_b; ++i){
 2fa:	0111                	addi	sp,sp,4
 2fc:	0612                	slli	a2,a2,0x4
 2fe:	1840                	addi	s0,sp,52
 300:	01194297          	auipc	t0,0x1194
 304:	36000013          	li	zero,864
    for(j = 0; j < size_a + size_b -1; ++j){
 308:	0005                	c.nop	1
 30a:	0b3a0803          	lb	a6,179(s4)
}
 30e:	0b390b3b          	0xb390b3b
 312:	1349                	addi	t1,t1,-14
 314:	1702                	slli	a4,a4,0x20
 316:	0000                	unimp
 318:	03000537          	lui	a0,0x3000
 31c:	3a0e                	fld	fs4,224(sp)
 31e:	390b3b0b          	0x390b3b0b
 322:	0213490b          	0x213490b
 326:	38000017          	auipc	zero,0x38000
 32a:	0034                	addi	a3,sp,8
 32c:	0b3a0803          	lb	a6,179(s4)
 330:	0b390b3b          	0xb390b3b
 334:	1349                	addi	t1,t1,-14
                line[size_b-1-j][k] = pola[k]*polb[j];
 336:	1702                	slli	a4,a4,0x20
 338:	0000                	unimp
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
 33c:	0300                	addi	s0,sp,384
 33e:	3a08                	fld	fa0,48(a2)
 340:	390b3b0b          	0x390b3b0b
 344:	0013490b          	0x13490b
 348:	3a00                	fld	fs0,48(a2)
 34a:	0034                	addi	a3,sp,8
 34c:	0b3a0e03          	lb	t3,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 350:	0b390b3b          	0xb390b3b
        for (j = size_b -1; j >= 0; j = j-1){
 354:	1349                	addi	t1,t1,-14
 356:	1702                	slli	a4,a4,0x20
 358:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 35a:	3f012e3b          	0x3f012e3b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 35e:	0319                	addi	t1,t1,6
 360:	3a0e                	fld	fs4,224(sp)
 362:	390b3b0b          	0x390b3b0b
 366:	1119270b          	0x1119270b
 36a:	1201                	addi	tp,tp,-32
 36c:	4006                	0x4006
            for (k = size_a-1; k >= 0; k = k-1 ){
 36e:	9718                	0x9718
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 370:	1942                	slli	s2,s2,0x30
 372:	1301                	addi	t1,t1,-32
 374:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 376:	053c                	addi	a5,sp,648
 378:	0300                	addi	s0,sp,384
        for (j = size_b -1; j >= 0; j = j-1){
 37a:	3a08                	fld	fa0,48(a2)
 37c:	390b3b0b          	0x390b3b0b
 380:	0213490b          	0x213490b
        for(j = 0; j < size_a + size_b -1; ++j){
 384:	0018                	0x18
 386:	3d00                	fld	fs0,56(a0)
            line[i][j] = line[i][j] % mod;
 388:	011d                	addi	sp,sp,7
 38a:	1331                	addi	t1,t1,-20
 38c:	0111                	addi	sp,sp,4
 38e:	0612                	slli	a2,a2,0x4
        for(j = 0; j < size_a + size_b -1; ++j){
 390:	0b58                	addi	a4,sp,404
 392:	0b59                	addi	s6,s6,22
    for (i = 0; i < size_b; ++i){
 394:	13010b57          	0x13010b57
 398:	0000                	unimp
 39a:	053e                	slli	a0,a0,0xf
        for(j = 0; j < size_a + size_b -1; ++j){
 39c:	3100                	fld	fs0,32(a0)
 39e:	00170213          	addi	tp,a4,1 # 5001 <_stack_len+0x1001>
             array_add(product,line[i],size_a+size_b-1);
 3a2:	3f00                	fld	fs0,56(a4)
 3a4:	011d                	addi	sp,sp,7
 3a6:	1331                	addi	t1,t1,-20
        for(i = 0; i < size_b; ++i){
 3a8:	0111                	addi	sp,sp,4
 3aa:	0612                	slli	a2,a2,0x4
 3ac:	0b58                	addi	a4,sp,404
        product[j] = product[j] % mod;
 3ae:	0b59                	addi	s6,s6,22
    for(j = 0; j < size_a + size_b -1; ++j){
 3b0:	00000b57          	0xb57
        product[j] = product[j] % mod;
 3b4:	2e40                	fld	fs0,152(a2)
 3b6:	3f01                	jal	2c6 <polymult+0xfa>
 3b8:	0319                	addi	t1,t1,6
 3ba:	3a0e                	fld	fs4,224(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 3bc:	390b3b0b          	0x390b3b0b
    int line[size_b][size_a + size_b];
 3c0:	2019270b          	0x2019270b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3c4:	0013010b          	0x13010b
 3c8:	4100                	lw	s0,0(a0)
 3ca:	0005                	c.nop	1
 3cc:	0b3a0803          	lb	a6,179(s4)
    int line[size_b][size_a + size_b];
 3d0:	0b390b3b          	0xb390b3b
 3d4:	1349                	addi	t1,t1,-14
 3d6:	0000                	unimp
 3d8:	2e42                	fld	ft8,16(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3da:	3101                	jal	ffffffda <_stack_start+0xfffeffda>
 3dc:	12011113          	0x12011113
 3e0:	4006                	0x4006
 3e2:	9718                	0x9718
 3e4:	1942                	slli	s2,s2,0x30
 3e6:	1301                	addi	t1,t1,-32
 3e8:	0000                	unimp
 3ea:	31000543          	fmadd.s	fa0,ft0,fa6,ft6,rne
 3ee:	00180213          	addi	tp,a6,1 # fffe0001 <_stack_start+0xfffd0001>
    int line[size_b][size_a + size_b];
 3f2:	4400                	lw	s0,8(s0)
 3f4:	002e                	c.slli	zero,0xb
 3f6:	193c193f 0e030e6e 	0xe030e6e193c193f
    int pola[size_a];
 3fe:	0b3a                	slli	s6,s6,0xe
    int line[size_b][size_a + size_b];
 400:	00000b3b          	0xb3b
    int pola[size_a];
 404:	0100                	addi	s0,sp,128
    int polb[size_b];
 406:	0011                	c.nop	4
 408:	0610                	addi	a2,sp,768
 40a:	0655                	addi	a2,a2,21
    int pola[size_a];
 40c:	0e1b0e03          	lb	t3,225(s6)
    int polb[size_b];
 410:	0e25                	addi	t3,t3,9
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 412:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	117c                	addi	a5,sp,172
       2:	0000                	unimp
       4:	1192                	slli	gp,gp,0x24
       6:	0000                	unimp
       8:	0001                	nop
       a:	925a                	add	tp,tp,s6
       c:	0011                	c.nop	4
       e:	9500                	0x9500
      10:	0011                	c.nop	4
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	1196                	slli	gp,gp,0x25
      20:	0000                	unimp
      22:	11d0                	addi	a2,sp,228
      24:	0000                	unimp
      26:	0001                	nop
      28:	d65a                	sw	s6,44(sp)
      2a:	0011                	c.nop	4
      2c:	e000                	fsw	fs0,0(s0)
      2e:	0011                	c.nop	4
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	10fe                	slli	ra,ra,0x3f
      3e:	0000                	unimp
      40:	1152                	slli	sp,sp,0x34
      42:	0000                	unimp
      44:	0001                	nop
      46:	525a                	lw	tp,180(sp)
      48:	0011                	c.nop	4
      4a:	7600                	flw	fs0,40(a2)
      4c:	0011                	c.nop	4
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	e000                	fsw	fs0,0(s0)
      5e:	0010                	0x10
      60:	3400                	fld	fs0,40(s0)
      62:	0011                	c.nop	4
      64:	0300                	addi	s0,sp,384
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	1134                	addi	a3,sp,168
      6c:	0000                	unimp
      6e:	113e                	slli	sp,sp,0x2f
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	113e                	slli	sp,sp,0x2f
      78:	0000                	unimp
      7a:	1179                	addi	sp,sp,-2
  jal x0, default_exc_handler
      7c:	0000                	unimp
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	1179                	addi	sp,sp,-2
  jal x0, default_exc_handler
      84:	0000                	unimp
      86:	11d4                	addi	a3,sp,228
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	d479                	beqz	s0,5c <__DYNAMIC+0x5c>
}
      90:	0011                	c.nop	4
    switch(length%3) {
      92:	d600                	sw	s0,40(a2)
      94:	0011                	c.nop	4
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	11d6                	slli	gp,gp,0x35
      9e:	0000                	unimp
      a0:	11e0                	addi	s0,sp,236
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
            for (i = 0; i < (length / 3); i++) {
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
      b0:	e000                	fsw	fs0,0(s0)
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	0010                	0x10
      b4:	0e00                	addi	s0,sp,784
      b6:	0011                	c.nop	4
      b8:	0300                	addi	s0,sp,384
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	110e                	slli	sp,sp,0x23
      c0:	0000                	unimp
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	1110                	addi	a2,sp,160
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
      c8:	007d                	c.nop	31
      ca:	1110                	addi	a2,sp,160
      cc:	0000                	unimp
      ce:	118a                	slli	gp,gp,0x22
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
      d6:	8a7a                	mv	s4,t5
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	0011                	c.nop	4
      da:	9500                	0x9500
      dc:	0011                	c.nop	4
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
      e2:	9500                	0x9500
      e4:	0011                	c.nop	4
      e6:	d400                	sw	s0,40(s0)
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	0011                	c.nop	4
            a1[length-2] = a1[length-2] + a2[length-2];
      ea:	0300                	addi	s0,sp,384
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
      f0:	11d4                	addi	a3,sp,228
      f2:	0000                	unimp
      f4:	11d6                	slli	gp,gp,0x35
      f6:	0000                	unimp
} //end of function
      f8:	f0720003          	lb	zero,-249(tp) # df07 <_stack_len+0x9f07>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fc:	d67a                	sw	t5,44(sp)
    asm volatile(
      fe:	0011                	c.nop	4
     100:	e000                	fsw	fs0,0(s0)
     102:	0011                	c.nop	4
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
            for (i = 0; i < (length / 3); i++) {
     108:	7af0                	flw	fa2,116(a3)
	...
    asm volatile(
     112:	10e0                	addi	s0,sp,108
     114:	0000                	unimp
     116:	111a                	slli	sp,sp,0x26
     118:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	c4910003          	lb	zero,-951(sp)
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	1a7c                	addi	a5,sp,316
     120:	0011                	c.nop	4
    asm volatile(
     122:	2400                	fld	fs0,8(s0)
     124:	0011                	c.nop	4
     126:	0200                	addi	s0,sp,256
     128:	7e00                	flw	fs0,56(a2)
     12a:	2400                	fld	fs0,8(s0)
            for (i = 0; i < ((length-2) / 3); i++) {
     12c:	0011                	c.nop	4
     12e:	ce00                	sw	s0,24(a2)
    asm volatile(
     130:	0011                	c.nop	4
     132:	0200                	addi	s0,sp,256
}
     134:	8200                	0x8200
    switch(length%3) {
     136:	ce00                	sw	s0,24(a2)
     138:	0011                	c.nop	4
     13a:	d400                	sw	s0,40(s0)
     13c:	0011                	c.nop	4
     13e:	0300                	addi	s0,sp,384
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
     144:	11d4                	addi	a3,sp,228
     146:	0000                	unimp
     148:	11d6                	slli	gp,gp,0x35
            for (i = 0; i < (length / 3); i++) {
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
     150:	d67c                	sw	a5,108(a2)
     152:	0011                	c.nop	4
     154:	e000                	fsw	fs0,0(s0)
            for (i = 0; i < ((length-2) / 3); i++) {
     156:	0011                	c.nop	4
     158:	0200                	addi	s0,sp,256
     15a:	8200                	0x8200
	...
     164:	e000                	fsw	fs0,0(s0)
            a1[length-1] = a2[length-1];
     166:	0010                	0x10
     168:	4e00                	lw	s0,24(a2)
     16a:	0011                	c.nop	4
     16c:	0300                	addi	s0,sp,384
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
     172:	114e                	slli	sp,sp,0x33
     174:	0000                	unimp
     176:	1154                	addi	a3,sp,164
            for (i = 0; i < ((length-1) / 3); i++) {
     178:	0000                	unimp
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
     17e:	1154                	addi	a3,sp,164
     180:	0000                	unimp
     182:	1179                	addi	sp,sp,-2
     184:	0000                	unimp
     186:	0002                	c.slli64	zero
            a1[length-1] = a2[length-1];
     188:	0080                	addi	s0,sp,64
            a1[length-2] = a2[length-2];
     18a:	1179                	addi	sp,sp,-2
     18c:	0000                	unimp
     18e:	11d4                	addi	a3,sp,228
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     196:	d47e                	sw	t6,40(sp)
     198:	0011                	c.nop	4
    asm volatile(
     19a:	d600                	sw	s0,40(a2)
     19c:	0011                	c.nop	4
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
            for (i = 0; i < (length / 3); i++) {
     1a4:	11d6                	slli	gp,gp,0x35
     1a6:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1a8:	11e0                	addi	s0,sp,236
     1aa:	0000                	unimp
    asm volatile(
     1ac:	98910003          	lb	zero,-1655(sp)
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
     1b4:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
     1b6:	0000                	unimp
     1b8:	0200                	addi	s0,sp,256
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1ba:	0011                	c.nop	4
     1bc:	0600                	addi	s0,sp,768
    asm volatile(
     1be:	0011                	c.nop	4
     1c0:	0200                	addi	s0,sp,256
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	969f 0011 a400      	0xa4000011969f
            for (i = 0; i < ((length-2) / 3); i++) {
     1ca:	0011                	c.nop	4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1cc:	0200                	addi	s0,sp,256
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
    int line[size_b][size_a + size_b];
     1d6:	0000                	unimp
     1d8:	d000                	sw	s0,32(s0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1da:	000d                	c.nop	3
     1dc:	fc00                	fsw	fs0,56(s0)
    int line[size_b][size_a + size_b];
     1de:	000d                	c.nop	3
     1e0:	0100                	addi	s0,sp,128
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0dfc                	addi	a5,sp,732
     1e6:	0000                	unimp
     1e8:	0e66                	slli	t3,t3,0x19
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ea:	0000                	unimp
     1ec:	0001                	nop
     1ee:	6658                	flw	fa4,12(a2)
     1f0:	000e                	c.slli	zero,0x3
     1f2:	8000                	0x8000
     1f4:	000e                	c.slli	zero,0x3
     1f6:	0300                	addi	s0,sp,384
     1f8:	8700                	0x8700
     1fa:	9f7f                	0x9f7f
     1fc:	0e80                	addi	s0,sp,848
     1fe:	0000                	unimp
     200:	0e86                	slli	t4,t4,0x1
    int line[size_b][size_a + size_b];
     202:	0000                	unimp
    int pola[size_a];
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
     20a:	0e86                	slli	t4,t4,0x1
    int line[size_b][size_a + size_b];
     20c:	0000                	unimp
     20e:	0ebc                	addi	a5,sp,856
    int pola[size_a];
     210:	0000                	unimp
    int line[size_b][size_a + size_b];
     212:	0001                	nop
    int pola[size_a];
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
    int polb[size_b];
     218:	0000                	unimp
     21a:	0000                	unimp
     21c:	d000                	sw	s0,32(s0)
    int pola[size_a];
     21e:	000d                	c.nop	3
    int polb[size_b];
     220:	0a00                	addi	s0,sp,272
     222:	000e                	c.slli	zero,0x3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     224:	0100                	addi	s0,sp,128
     226:	5b00                	lw	s0,48(a4)
     228:	0e0a                	slli	t3,t3,0x2
    int line[size_b][size_a + size_b];
     22a:	0000                	unimp
     22c:	0e7e                	slli	t3,t3,0x1f
    int pola[size_a];
     22e:	0000                	unimp
     230:	0001                	nop
    int polb[size_b];
     232:	7e66                	flw	ft8,120(sp)
    for (i = 0; i < size_b; ++i){
     234:	000e                	c.slli	zero,0x3
     236:	8600                	0x8600
     238:	000e                	c.slli	zero,0x3
            product[j] = 0;
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	869f 000e bc00      	0xbc00000e869f
    array_equ(pola,a,size_a);
     246:	000e                	c.slli	zero,0x3
     248:	0100                	addi	s0,sp,128
     24a:	6600                	flw	fs0,8(a2)
	...
     254:	0dd0                	addi	a2,sp,724
    for (i = 0; i < size_a; ++i){
     256:	0000                	unimp
     258:	0dfe                	slli	s11,s11,0x1f
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	fe5c                	fsw	fa5,60(a2)
     260:	000d                	c.nop	3
     262:	7600                	flw	fs0,40(a2)
     264:	000e                	c.slli	zero,0x3
    array_equ(polb,b,size_b);
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
     26a:	0e76                	slli	t3,t3,0x1d
     26c:	0000                	unimp
   for (i = 0; i < size_b; ++i){
     26e:	0e86                	slli	t4,t4,0x1
     270:	0000                	unimp
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
    if(star_mult == 1){
     278:	0e86                	slli	t4,t4,0x1
     27a:	0000                	unimp
     27c:	0ebc                	addi	a5,sp,856
     27e:	0000                	unimp
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
     286:	0000                	unimp
     288:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     28a:	d000                	sw	s0,32(s0)
     28c:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     28e:	0400                	addi	s0,sp,512
     290:	000e                	c.slli	zero,0x3
            product[j] = 0;
     292:	0100                	addi	s0,sp,128
     294:	5d00                	lw	s0,56(a0)
     296:	0e04                	addi	s1,sp,784
            line[i][j] = 0;
     298:	0000                	unimp
     29a:	00000e1b          	0xe1b
            product[j] = 0;
     29e:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     2a0:	1b5a                	slli	s6,s6,0x36
     2a2:	000e                	c.slli	zero,0x3
     2a4:	bc00                	fsd	fs0,56(s0)
     2a6:	000e                	c.slli	zero,0x3
    for (i = 0; i < size_b; ++i){
     2a8:	0400                	addi	s0,sp,512
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
     2ae:	009f 0000 0000      	0x9f
            pola[i] = pola[i] + mod;
     2b4:	0000                	unimp
     2b6:	d000                	sw	s0,32(s0)
        while (pola[i] < 0){
     2b8:	000d                	c.nop	3
     2ba:	e600                	fsw	fs0,8(a2)
     2bc:	000d                	c.nop	3
        pola[i] = pola[i] % mod;
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
    for (i = 0; i < size_a; ++i){
     2c2:	0de6                	slli	s11,s11,0x19
     2c4:	0000                	unimp
        pola[i] = pola[i] % mod;
     2c6:	0e82                	c.slli64	t4
     2c8:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     2ca:	0001                	nop
            polb[i] = polb[i] + mod;
     2cc:	8268                	0x8268
     2ce:	000e                	c.slli	zero,0x3
        while (polb[i] < 0){
     2d0:	8600                	0x8600
     2d2:	000e                	c.slli	zero,0x3
     2d4:	0400                	addi	s0,sp,512
        polb[i] = polb[i] % mod;
     2d6:	f300                	fsw	fs0,32(a4)
     2d8:	5e01                	li	t3,-32
   for (i = 0; i < size_b; ++i){
     2da:	869f 000e bc00      	0xbc00000e869f
        polb[i] = polb[i] % mod;
     2e0:	000e                	c.slli	zero,0x3
   for (i = 0; i < size_b; ++i){
     2e2:	0100                	addi	s0,sp,128
    if(star_mult == 1){
     2e4:	6800                	flw	fs0,16(s0)
	...
    for (i = 0; i < size_b; ++i){
     2ee:	0dd0                	addi	a2,sp,724
        for(i = 0; i < size_b; ++i){
     2f0:	0000                	unimp
             array_add(product,line[i],size_a+size_b-1);
     2f2:	00000e1b          	0xe1b
     2f6:	0001                	nop
     2f8:	1b5f 000e bc00      	0xbc00000e1b5f
        for(i = 0; i < size_b; ++i){
     2fe:	000e                	c.slli	zero,0x3
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
    for(j = 0; j < size_a + size_b -1; ++j){
     306:	009f 0000 0000      	0x9f
}
     30c:	0000                	unimp
     30e:	d000                	sw	s0,32(s0)
     310:	000d                	c.nop	3
     312:	1b00                	addi	s0,sp,432
     314:	000e                	c.slli	zero,0x3
     316:	0100                	addi	s0,sp,128
     318:	6000                	flw	fs0,0(s0)
     31a:	00000e1b          	0xe1b
     31e:	0e7c                	addi	a5,sp,796
     320:	0000                	unimp
     322:	0001                	nop
     324:	7c65                	lui	s8,0xffff9
     326:	000e                	c.slli	zero,0x3
     328:	8600                	0x8600
     32a:	000e                	c.slli	zero,0x3
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
     330:	6001                	0x6001
     332:	869f 000e bc00      	0xbc00000e869f
                line[size_b-1-j][k] = pola[k]*polb[j];
     338:	000e                	c.slli	zero,0x3
     33a:	0100                	addi	s0,sp,128
     33c:	6500                	flw	fs0,8(a0)
	...
            for (k = size_a-1; k >= 0; k = k-1 ){
     346:	0e62                	slli	t3,t3,0x18
                line[size_b-1-j][k] = pola[k]*polb[j];
     348:	0000                	unimp
     34a:	0e86                	slli	t4,t4,0x1
     34c:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
        for (j = size_b -1; j >= 0; j = j-1){
     352:	0000                	unimp
     354:	0000                	unimp
     356:	0000                	unimp
     358:	1c00                	addi	s0,sp,560
            for (k = size_a-1; k >= 0; k = k-1 ){
     35a:	000e                	c.slli	zero,0x3
     35c:	2b00                	fld	fs0,16(a4)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     35e:	000e                	c.slli	zero,0x3
     360:	0100                	addi	s0,sp,128
     362:	5a00                	lw	s0,48(a2)
	...
     36c:	0e2e                	slli	t3,t3,0xb
            for (k = size_a-1; k >= 0; k = k-1 ){
     36e:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     370:	0e4c                	addi	a1,sp,788
     372:	0000                	unimp
     374:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     376:	4c5a                	lw	s8,148(sp)
     378:	000e                	c.slli	zero,0x3
        for (j = size_b -1; j >= 0; j = j-1){
     37a:	4f00                	lw	s0,24(a4)
     37c:	000e                	c.slli	zero,0x3
     37e:	0100                	addi	s0,sp,128
     380:	5c00                	lw	s0,56(s0)
            line[i][j] = line[i][j] % mod;
     382:	0e86                	slli	t4,t4,0x1
        for(j = 0; j < size_a + size_b -1; ++j){
     384:	0000                	unimp
     386:	0eaa                	slli	t4,t4,0xa
            line[i][j] = line[i][j] % mod;
     388:	0000                	unimp
     38a:	0001                	nop
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     390:	0000                	unimp
     392:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     394:	5000                	lw	s0,32(s0)
     396:	000e                	c.slli	zero,0x3
     398:	5b00                	lw	s0,48(a4)
     39a:	000e                	c.slli	zero,0x3
        for(j = 0; j < size_a + size_b -1; ++j){
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
	...
        for(i = 0; i < size_b; ++i){
     3a8:	0e5c                	addi	a5,sp,788
     3aa:	0000                	unimp
     3ac:	0e86                	slli	t4,t4,0x1
        product[j] = product[j] % mod;
     3ae:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     3b0:	0001                	nop
     3b2:	aa5a                	fsd	fs6,272(sp)
        product[j] = product[j] % mod;
     3b4:	000e                	c.slli	zero,0x3
     3b6:	bc00                	fsd	fs0,56(s0)
     3b8:	000e                	c.slli	zero,0x3
     3ba:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     3bc:	5a00                	lw	s0,48(a2)
	...
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3c6:	0e2e                	slli	t3,t3,0xb
     3c8:	0000                	unimp
     3ca:	0e34                	addi	a3,sp,792
     3cc:	0000                	unimp
    int line[size_b][size_a + size_b];
     3ce:	0001                	nop
     3d0:	3459                	jal	fffffe56 <_stack_start+0xfffefe56>
     3d2:	000e                	c.slli	zero,0x3
     3d4:	4000                	lw	s0,0(s0)
     3d6:	000e                	c.slli	zero,0x3
     3d8:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3da:	5d00                	lw	s0,56(a0)
     3dc:	0e40                	addi	s0,sp,788
     3de:	0000                	unimp
     3e0:	0e46                	slli	t3,t3,0x11
     3e2:	0000                	unimp
     3e4:	0001                	nop
     3e6:	5c5e                	lw	s8,244(sp)
     3e8:	000e                	c.slli	zero,0x3
     3ea:	7400                	flw	fs0,40(s0)
    int line[size_b][size_a + size_b];
     3ec:	000e                	c.slli	zero,0x3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3ee:	0100                	addi	s0,sp,128
     3f0:	5900                	lw	s0,48(a0)
    int line[size_b][size_a + size_b];
     3f2:	0e86                	slli	t4,t4,0x1
     3f4:	0000                	unimp
     3f6:	0e90                	addi	a2,sp,848
    int pola[size_a];
     3f8:	0000                	unimp
     3fa:	0001                	nop
     3fc:	905d                	srli	s0,s0,0x37
     3fe:	000e                	c.slli	zero,0x3
    int line[size_b][size_a + size_b];
     400:	9600                	0x9600
    int pola[size_a];
     402:	000e                	c.slli	zero,0x3
     404:	0300                	addi	s0,sp,384
    int polb[size_b];
     406:	7d00                	flw	fs0,56(a0)
     408:	9f7f                	0x9f7f
     40a:	0e96                	slli	t4,t4,0x5
    int pola[size_a];
     40c:	0000                	unimp
    int polb[size_b];
     40e:	0e98                	addi	a4,sp,848
     410:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     412:	0001                	nop
     414:	985d                	andi	s0,s0,-9
    int line[size_b][size_a + size_b];
     416:	000e                	c.slli	zero,0x3
     418:	aa00                	fsd	fs0,16(a2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     41a:	000e                	c.slli	zero,0x3
    int pola[size_a];
     41c:	0100                	addi	s0,sp,128
     41e:	5e00                	lw	s0,56(a2)
    int polb[size_b];
     420:	0eaa                	slli	t4,t4,0xa
    for (i = 0; i < size_b; ++i){
     422:	0000                	unimp
     424:	0eb4                	addi	a3,sp,856
     426:	0000                	unimp
            product2[j] = 0;
     428:	0001                	nop
     42a:	b459                	j	fffffeb0 <_stack_start+0xfffefeb0>
     42c:	000e                	c.slli	zero,0x3
     42e:	ba00                	fsd	fs0,48(a2)
    for (i = 0; i < size_b; ++i){
     430:	000e                	c.slli	zero,0x3
     432:	0300                	addi	s0,sp,384
    array_equ(pola,a,size_a);
     434:	7900                	flw	fs0,48(a0)
     436:	9f7f                	0x9f7f
     438:	0eba                	slli	t4,t4,0xe
     43a:	0000                	unimp
     43c:	0ebc                	addi	a5,sp,856
     43e:	0000                	unimp
    array_equ(polb,b,size_b);
     440:	0001                	nop
     442:	0059                	c.nop	22
     444:	0000                	unimp
     446:	0000                	unimp
     448:	0000                	unimp
     44a:	2400                	fld	fs0,8(s0)
    if(star_mult == 1){
     44c:	000d                	c.nop	3
     44e:	5200                	lw	s0,32(a2)
     450:	000d                	c.nop	3
     452:	0100                	addi	s0,sp,128
     454:	5a00                	lw	s0,48(a2)
     456:	0d52                	slli	s10,s10,0x14
     458:	0000                	unimp
     45a:	0d9a                	slli	s11,s11,0x6
     45c:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     45e:	0001                	nop
     460:	9a58                	0x9a58
            for (k = size_a-1; k >= 0; k = k-1 ){
     462:	000d                	c.nop	3
     464:	d000                	sw	s0,32(s0)
            product2[j] = 0;
     466:	000d                	c.nop	3
     468:	0400                	addi	s0,sp,512
     46a:	f300                	fsw	fs0,32(a4)
            line[i][j] = 0;
     46c:	5a01                	li	s4,-32
     46e:	009f 0000 0000      	0x9f
        for(j = 0; j < size_a + size_b -1; ++j){
     474:	0000                	unimp
     476:	2400                	fld	fs0,8(s0)
     478:	000d                	c.nop	3
     47a:	5000                	lw	s0,32(s0)
    for (i = 0; i < size_b; ++i){
     47c:	000d                	c.nop	3
     47e:	0100                	addi	s0,sp,128
     480:	5b00                	lw	s0,48(a4)
     482:	0d50                	addi	a2,sp,660
        for(j = 0; j < size_a + size_b -1; ++j){
     484:	0000                	unimp
     486:	0db6                	slli	s11,s11,0xd
                line[size_b-1-j][k] = pola[k]*polb[j];
     488:	0000                	unimp
     48a:	0001                	nop
     48c:	000db663          	0xdb663
     490:	be00                	fsd	fs0,56(a2)
     492:	000d                	c.nop	3
     494:	0400                	addi	s0,sp,512
     496:	f300                	fsw	fs0,32(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
     498:	5b01                	li	s6,-32
                line[size_b-1-j][k] = pola[k]*polb[j];
     49a:	be9f 000d d000      	0xd000000dbe9f
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a0:	000d                	c.nop	3
     4a2:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     4a4:	6300                	flw	fs0,0(a4)
	...
            for (k = size_a-1; k >= 0; k = k-1 ){
     4ae:	0d24                	addi	s1,sp,664
        array_add(product2,line[i],size_a+size_b-1);
     4b0:	0000                	unimp
     4b2:	0d3e                	slli	s10,s10,0xf
     4b4:	0000                	unimp
     4b6:	0001                	nop
    for(i=0;i<size_b;++i){
     4b8:	3e5c                	fld	fa5,184(a2)
     4ba:	000d                	c.nop	3
}
     4bc:	8000                	0x8000
     4be:	000d                	c.nop	3
     4c0:	0100                	addi	s0,sp,128
     4c2:	5900                	lw	s0,48(a0)
     4c4:	0d80                	addi	s0,sp,720
     4c6:	0000                	unimp
     4c8:	00000d83          	lb	s11,0(zero) # 0 <__DYNAMIC>
     4cc:	0001                	nop
     4ce:	000d835b          	0xd835b
     4d2:	d000                	sw	s0,32(s0)
     4d4:	000d                	c.nop	3
     4d6:	0400                	addi	s0,sp,512
     4d8:	f300                	fsw	fs0,32(a4)
     4da:	5c01                	li	s8,-32
     4dc:	009f 0000 0000      	0x9f
     4e2:	0000                	unimp
     4e4:	2400                	fld	fs0,8(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4e6:	000d                	c.nop	3
     4e8:	6100                	flw	fs0,0(a0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4ea:	000d                	c.nop	3
     4ec:	0100                	addi	s0,sp,128
     4ee:	5d00                	lw	s0,56(a0)
     4f0:	0d61                	addi	s10,s10,24
     4f2:	0000                	unimp
     4f4:	0d7c                	addi	a5,sp,668
     4f6:	0000                	unimp
     4f8:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     4fa:	7c64                	flw	fs1,124(s0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4fc:	000d                	c.nop	3
     4fe:	d000                	sw	s0,32(s0)
     500:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     502:	0400                	addi	s0,sp,512
     504:	f300                	fsw	fs0,32(a4)
        for (j = size_b -1; j >= 0; j = j-1){
     506:	5d01                	li	s10,-32
     508:	009f 0000 0000      	0x9f
        array_add(product2,line[i],size_a+size_b-1);
     50e:	0000                	unimp
     510:	2400                	fld	fs0,8(s0)
     512:	000d                	c.nop	3
     514:	6100                	flw	fs0,0(a0)
    for(i=0;i<size_b;++i){
     516:	000d                	c.nop	3
     518:	0100                	addi	s0,sp,128
     51a:	5e00                	lw	s0,56(a2)
    int v[size_N];
     51c:	0d61                	addi	s10,s10,24
     51e:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     520:	0dba                	slli	s11,s11,0xe
    int v[size_N];
     522:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     524:	0001                	nop
     526:	ba65                	j	fffffede <_stack_start+0xfffefede>
     528:	000d                	c.nop	3
     52a:	be00                	fsd	fs0,56(a2)
     52c:	000d                	c.nop	3
     52e:	0400                	addi	s0,sp,512
     530:	f300                	fsw	fs0,32(a4)
     532:	5e01                	li	t3,-32
     534:	be9f 000d d000      	0xd000000dbe9f
     53a:	000d                	c.nop	3
    int v[size_N];
     53c:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     53e:	6500                	flw	fs0,8(a0)
	...
    int q[size_N];
     548:	0da0                	addi	s0,sp,728
     54a:	0000                	unimp
     54c:	0dbe                	slli	s11,s11,0xf
    int num_temp[size_N];
     54e:	0000                	unimp
     550:	0001                	nop
    int denum_temp[size_D];
     552:	005a                	c.slli	zero,0x16
     554:	0000                	unimp
     556:	0000                	unimp
    int num_temp[size_N];
     558:	0000                	unimp
    int denum_temp[size_D];
     55a:	7c00                	flw	fs0,56(s0)
     55c:	000d                	c.nop	3
     55e:	8300                	0x8300
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     560:	000d                	c.nop	3
     562:	0100                	addi	s0,sp,128
    int v[size_N];
     564:	5a00                	lw	s0,48(a2)
     566:	00000d83          	lb	s11,0(zero) # 0 <__DYNAMIC>
    array_equ(num_temp,num,size_N);
     56a:	0db8                	addi	a4,sp,728
     56c:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     56e:	0001                	nop
     570:	be64                	fsd	fs1,248(a2)
    int denum_temp[size_D];
     572:	000d                	c.nop	3
     574:	d000                	sw	s0,32(s0)
    array_equ(num_temp,num,size_N);
     576:	000d                	c.nop	3
    int denum_temp[size_D];
     578:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     57a:	6400                	flw	fs0,8(s0)
	...
    array_equ(denum_temp,denum,size_D);
     584:	0d94                	addi	a3,sp,720
     586:	0000                	unimp
     588:	0db2                	slli	s11,s11,0xc
     58a:	0000                	unimp
    for (i = 0; i < size_D; ++i) {
     58c:	0001                	nop
     58e:	be59                	j	124 <array_add+0x92>
     590:	000d                	c.nop	3
     592:	c800                	sw	s0,16(s0)
    for (i = 0; i < size_N; ++i){
     594:	000d                	c.nop	3
     596:	0100                	addi	s0,sp,128
     598:	5900                	lw	s0,48(a0)
    for (i = size_D-1; i >= 0; i = i-1){
     59a:	0dc8                	addi	a0,sp,724
     59c:	0000                	unimp
     59e:	0dce                	slli	s11,s11,0x13
     5a0:	0000                	unimp
     5a2:	7f790003          	lb	zero,2039(s2) # 557f7 <_stack_start+0x457f7>
    for (i = 0; i < size_N; ++i){
     5a6:	ce9f 000d d000      	0xd000000dce9f
    for (u = 0; u < mod; ++u){
     5ac:	000d                	c.nop	3
     5ae:	0100                	addi	s0,sp,128
     5b0:	5900                	lw	s0,48(a0)
	...
        while (num_temp[i] < 0) {
     5ba:	0a06                	slli	s4,s4,0x1
     5bc:	0000                	unimp
        num_temp[i] = num_temp[i] % mod;
     5be:	0a5e                	slli	s4,s4,0x17
     5c0:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     5c2:	0001                	nop
     5c4:	5e5a                	lw	t3,180(sp)
        num_temp[i] = num_temp[i] % mod;
     5c6:	000a                	c.slli	zero,0x2
     5c8:	2600                	fld	fs0,8(a2)
    for (i = 0; i < size_N; ++i){
     5ca:	000c                	0xc
            denum_temp[i] = denum_temp[i] + mod;
     5cc:	0100                	addi	s0,sp,128
     5ce:	6200                	flw	fs0,0(a2)
        while (denum_temp[i] < 0) {
     5d0:	0c26                	slli	s8,s8,0x9
     5d2:	0000                	unimp
     5d4:	0c5a                	slli	s8,s8,0x16
        denum_temp[i] = denum_temp[i] % mod;
     5d6:	0000                	unimp
     5d8:	7f860003          	lb	zero,2040(a2) # 527f8 <_stack_start+0x427f8>
    for (i = 0; i < size_D; ++i) {
     5dc:	5a9f 000c 7c00      	0x7c00000c5a9f
     5e2:	000c                	0xc
        q[i] = 0;
     5e4:	0400                	addi	s0,sp,512
     5e6:	f300                	fsw	fs0,32(a4)
     5e8:	5a01                	li	s4,-32
     5ea:	7c9f 000c 1000      	0x1000000c7c9f
     5f0:	000d                	c.nop	3
        v[i] = 0;
     5f2:	0100                	addi	s0,sp,128
     5f4:	6200                	flw	fs0,0(a2)
    for (i = 0; i < size_N; ++i){
     5f6:	0d10                	addi	a2,sp,656
     5f8:	0000                	unimp
        if( denum_temp[i] != 0 )
     5fa:	0d24                	addi	s1,sp,664
    for (i = size_D-1; i >= 0; i = i-1){
     5fc:	0000                	unimp
     5fe:	7f860003          	lb	zero,2040(a2)
        if ( (b_N*u)%mod == 1 )
     602:	009f 0000 0000      	0x9f
     608:	0000                	unimp
    for (u = 0; u < mod; ++u){
     60a:	0600                	addi	s0,sp,768
     60c:	000a                	c.slli	zero,0x2
        if( num_temp[i] != 0 )
     60e:	4e00                	lw	s0,24(a2)
    for (i = size_N-1; i >= 0; i = i-1){
     610:	000a                	c.slli	zero,0x2
     612:	0100                	addi	s0,sp,128
     614:	5b00                	lw	s0,48(a4)
     616:	0a4e                	slli	s4,s4,0x13
     618:	0000                	unimp
     61a:	0c62                	slli	s8,s8,0x18
     61c:	0000                	unimp
    while (d >= d2){
     61e:	0001                	nop
     620:	6268                	flw	fa0,68(a2)
     array_equ(result,q,size_N);
     622:	000c                	0xc
     624:	7c00                	flw	fs0,56(s0)
     626:	000c                	0xc
     628:	0400                	addi	s0,sp,512
     62a:	f300                	fsw	fs0,32(a4)
     62c:	5b01                	li	s6,-32
     62e:	7c9f 000c 2400      	0x2400000c7c9f
        result[i] = num_temp[i-size_N];
     634:	000d                	c.nop	3
     636:	0100                	addi	s0,sp,128
     638:	6800                	flw	fs0,16(s0)
	...
}
     642:	0a06                	slli	s4,s4,0x1
     644:	0000                	unimp
     646:	0a52                	slli	s4,s4,0x14
     648:	0000                	unimp
     64a:	0001                	nop
     64c:	525c                	lw	a5,36(a2)
     64e:	000a                	c.slli	zero,0x2
     650:	5e00                	lw	s0,56(a2)
     652:	000c                	0xc
     654:	0100                	addi	s0,sp,128
     656:	6700                	flw	fs0,8(a4)
     658:	0c5e                	slli	s8,s8,0x17
     65a:	0000                	unimp
     65c:	0c7c                	addi	a5,sp,540
     65e:	0000                	unimp
     660:	0004                	0x4
     662:	9f5c01f3          	0x9f5c01f3
     666:	0c7c                	addi	a5,sp,540
     668:	0000                	unimp
        v[(d-d2)] = u*r_d;
     66a:	0d24                	addi	s1,sp,664
     66c:	0000                	unimp
     66e:	0001                	nop
     670:	00000067          	jr	zero # 0 <__DYNAMIC>
     674:	0000                	unimp
     676:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     678:	ac00                	fsd	fs0,24(s0)
     67a:	b600000b          	0xb600000b
     67e:	0100000b          	0x100000b
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     682:	5a00                	lw	s0,48(a2)
	...
     68c:	0bc6                	slli	s7,s7,0x11
        for (i = 0; i < size_N; ++i){
     68e:	0000                	unimp
     690:	0be5                	addi	s7,s7,25
     692:	0000                	unimp
     694:	0001                	nop
     696:	dc5a                	sw	s6,56(sp)
        for (i = 0; i < size_N; ++i){
     698:	000c                	0xc
     69a:	f000                	fsw	fs0,32(s0)
     69c:	000c                	0xc
     69e:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     6a0:	5a00                	lw	s0,48(a2)
	...
        array_add(q, v, size_N);
     6aa:	0be6                	slli	s7,s7,0x19
     6ac:	0000                	unimp
        for(i = 0; i < size_N; ++i){
     6ae:	0bf9                	addi	s7,s7,30
     6b0:	0000                	unimp
     6b2:	0001                	nop
     6b4:	f05a                	fsw	fs6,32(sp)
        for (i = size_N-1; i >= 0; i = i-1){
     6b6:	000c                	0xc
     6b8:	0000                	unimp
     6ba:	000d                	c.nop	3
     6bc:	0100                	addi	s0,sp,128
     6be:	5a00                	lw	s0,48(a2)
	...
            v[i] = v[i] % mod;
     6c8:	0bfa                	slli	s7,s7,0x1e
        for (i = 0; i < size_N; ++i){
     6ca:	0000                	unimp
     6cc:	0c16                	slli	s8,s8,0x5
            v[i] = v[i] % mod;
     6ce:	0000                	unimp
     6d0:	0001                	nop
     6d2:	005a                	c.slli	zero,0x16
     6d4:	000d                	c.nop	3
        for (i = 0; i < size_N; ++i){
     6d6:	1000                	addi	s0,sp,32
                product[i] = product[i] + mod;
     6d8:	000d                	c.nop	3
     6da:	0100                	addi	s0,sp,128
            while (product[i] < 0) {
     6dc:	5a00                	lw	s0,48(a2)
	...
        for (i = 0; i < size_N; ++i){
     6e6:	0b60                	addi	s0,sp,412
     6e8:	0000                	unimp
            product[i] = product[i] % mod;
     6ea:	0c3a                	slli	s8,s8,0xe
     6ec:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     6ee:	0002                	c.slli64	zero
            num_temp[i] = num_temp[i] - product[i];
     6f0:	0072                	c.slli	zero,0x1c
     6f2:	0c3a                	slli	s8,s8,0xe
     6f4:	0000                	unimp
     6f6:	0c52                	slli	s8,s8,0x14
     6f8:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     6fa:	0002                	c.slli64	zero
     6fc:	0084                	addi	s1,sp,64
            num_temp[i] = num_temp[i] - product[i];
     6fe:	0c52                	slli	s8,s8,0x14
     700:	0000                	unimp
     702:	0c5a                	slli	s8,s8,0x16
        for (i = 0; i < size_N; ++i){
     704:	0000                	unimp
                num_temp[i] = num_temp[i] + mod;
     706:	0010                	0x10
     708:	0091                	addi	ra,ra,4
            while (num_temp[i] < 0){
     70a:	0086                	slli	ra,ra,0x1
     70c:	2432                	fld	fs0,264(sp)
     70e:	f0090f23          	sb	zero,-226(s2)
            num_temp[i] = num_temp[i] % mod;
     712:	1c1a                	slli	s8,s8,0x26
        for (i = 0; i < size_N; ++i){
     714:	000a                	c.slli	zero,0x2
     716:	1c02                	slli	s8,s8,0x20
            num_temp[i] = num_temp[i] % mod;
     718:	0c5a                	slli	s8,s8,0x16
     71a:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     71c:	0c7c                	addi	a5,sp,540
            q[i] = q[i] % mod;
     71e:	0000                	unimp
        for(i = 0; i < size_N; ++i){
     720:	00910013          	addi	zero,sp,9
            q[i] = q[i] % mod;
     724:	235a01f3          	0x235a01f3
     728:	3201                	jal	28 <__DYNAMIC+0x28>
     72a:	2324                	fld	fs1,64(a4)
        for(i = 0; i < size_N; ++i){
     72c:	1af0090f          	0x1af0090f
        for (i = size_N-1; i >= 0; i = i-1){
     730:	0a1c                	addi	a5,sp,272
     732:	0200                	addi	s0,sp,256
            v[i] = 0;
     734:	7c1c                	flw	fa5,56(s0)
     736:	000c                	0xc
     738:	2400                	fld	fs0,8(s0)
     73a:	000d                	c.nop	3
     73c:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     73e:	7200                	flw	fs0,32(a2)
	...
        result[i] = num_temp[i-size_N];
     748:	6400                	flw	fs0,8(s0)
     74a:	6600000b          	0x6600000b
     74e:	0200000b          	0x200000b
    for(i = size_N; i < (2*size_N); ++i){
     752:	3100                	fld	fs0,32(a0)
     754:	669f 000b 6c00      	0x6c00000b669f
    int ri_2[size]; // MX-ring poly, a
     75a:	0100000b          	0x100000b
     75e:	5f00                	lw	s0,56(a4)
     760:	0b70                	addi	a2,sp,412
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     762:	0000                	unimp
     764:	0b76                	slli	s6,s6,0x1d
     766:	0000                	unimp
     768:	0001                	nop
     76a:	7e5f 000b 8c00      	0x8c00000b7e5f
     770:	0100000b          	0x100000b
     774:	5f00                	lw	s0,56(a4)
     776:	0b96                	slli	s7,s7,0x5
     778:	0000                	unimp
     77a:	00000bab          	0xbab
    int ri_2[size]; // MX-ring poly, a
     77e:	0001                	nop
     780:	ac5f 000b b600      	0xb600000bac5f
    int ri_1[size]; // f-random poly, f[N] = 0, b
     786:	0500000b          	0x500000b
    int ri[size];
     78a:	8200                	0x8200
     78c:	3100                	fld	fs0,32(a0)
     78e:	9f24                	0x9f24
    int ti_1[size]; // ti_1[0] = 1
     790:	0bb6                	slli	s7,s7,0xd
     792:	0000                	unimp
     794:	0bc5                	addi	s7,s7,17
    int ti[size];
     796:	0000                	unimp
     798:	0001                	nop
     79a:	c65f 000b d600      	0xd600000bc65f
    int qi_1[size];
     7a0:	0500000b          	0x500000b
    int temp[size];
     7a4:	8200                	0x8200
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     7a6:	3300                	fld	fs0,32(a4)
     7a8:	9f1e                	add	t5,t5,t2
     7aa:	0bd6                	slli	s7,s7,0x15
    int ri_2[size]; // MX-ring poly, a
     7ac:	0000                	unimp
     7ae:	0be6                	slli	s7,s7,0x19
    int temp[size];
     7b0:	0000                	unimp
    for (i = 0; i < size; ++i) {
     7b2:	0001                	nop
        ti_2[i] = 0;
     7b4:	e659                	bnez	a2,842 <ext_euclid+0xea>
     7b6:	ee00000b          	0xee00000b
     7ba:	0200000b          	0x200000b
    for (i = 0; i < size; ++i) {
     7be:	3000                	fld	fs0,32(s0)
    array_equ(ri_2,polyR,size);
     7c0:	ee9f 000b f600      	0xf600000bee9f
     7c6:	0100000b          	0x100000b
    array_equ(ri_1,polyf,size);
     7ca:	5e00                	lw	s0,56(a2)
     7cc:	0bfa                	slli	s7,s7,0x1e
     7ce:	0000                	unimp
    ti_1[0] = 1;
     7d0:	0c0c                	addi	a1,sp,528
     7d2:	0000                	unimp
     7d4:	0005                	c.nop	1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7d6:	0082                	c.slli64	ra
     7d8:	2432                	fld	fs0,264(sp)
     7da:	0c9f 000c 2600      	0x2600000c0c9f
        for (i = 0; i < N + 1; ++i) {
     7e0:	000c                	0xc
        ti_2[i] = 0;
     7e2:	0100                	addi	s0,sp,128
     7e4:	6a00                	flw	fs0,16(a2)
     7e6:	0c26                	slli	s8,s8,0x9
     7e8:	0000                	unimp
        ti_1[i] = 0;
     7ea:	0c2e                	slli	s8,s8,0xb
        ti_2[i] = 0;
     7ec:	0000                	unimp
     7ee:	0001                	nop
        ti_1[i] = 0;
     7f0:	7c5f 000c b800      	0xb800000c7c5f
    for (i = 0; i < size; ++i) {
     7f6:	000c                	0xc
                ri_2[i] = ri_2[i] + mod;
     7f8:	0100                	addi	s0,sp,128
     7fa:	5f00                	lw	s0,56(a4)
            while (ri_2[i] < 0) {
     7fc:	0cb8                	addi	a4,sp,600
     7fe:	0000                	unimp
     800:	0cba                	slli	s9,s9,0xe
            ri_2[i] = ri_2[i] % mod;
     802:	0000                	unimp
     804:	7f7f0003          	lb	zero,2039(t5) # 1b7f7 <_stack_start+0xb7f7>
     808:	ba9f 000c dc00      	0xdc00000cba9f
        for (i = 0; i < N + 1; ++i) {
     80e:	000c                	0xc
     810:	0100                	addi	s0,sp,128
     812:	5f00                	lw	s0,56(a4)
     814:	0cdc                	addi	a5,sp,596
     816:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     818:	0cec                	addi	a1,sp,604
     81a:	0000                	unimp
     81c:	0001                	nop
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     81e:	ec59                	bnez	s0,8bc <ext_euclid+0x164>
     820:	000c                	0xc
     822:	ee00                	fsw	fs0,24(a2)
     824:	000c                	0xc
     826:	0300                	addi	s0,sp,384
     828:	7900                	flw	fs0,48(a0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     82a:	9f7f                	0x9f7f
     82c:	0cee                	slli	s9,s9,0x1b
     82e:	0000                	unimp
     830:	0cf0                	addi	a2,sp,604
     832:	0000                	unimp
     834:	0001                	nop
     836:	f059                	bnez	s0,7bc <ext_euclid+0x64>
        for (i = 0; i < N + 1; ++i) {
     838:	000c                	0xc
     83a:	f400                	fsw	fs0,40(s0)
     83c:	000c                	0xc
     83e:	0100                	addi	s0,sp,128
     840:	5e00                	lw	s0,56(a2)
        for (i = 0; i < N + 1; ++i) {
     842:	0cf4                	addi	a3,sp,604
     844:	0000                	unimp
     846:	0cfe                	slli	s9,s9,0x1f
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     848:	0000                	unimp
     84a:	7f7e0003          	lb	zero,2039(t3) # 1a7f7 <_stack_start+0xa7f7>
     84e:	fe9f 000c 0000      	0xcfe9f
     854:	000d                	c.nop	3
    array_equ(qi_1,res1,size);
     856:	0100                	addi	s0,sp,128
     858:	5e00                	lw	s0,56(a2)
     85a:	0d00                	addi	s0,sp,656
        for (i = 0; i < N + 1; ++i) {
     85c:	0000                	unimp
     85e:	0d10                	addi	a2,sp,656
     860:	0000                	unimp
     862:	0001                	nop
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     864:	106a                	c.slli	zero,0x3a
     866:	000d                	c.nop	3
     868:	2000                	fld	fs0,0(s0)
     86a:	000d                	c.nop	3
     86c:	0100                	addi	s0,sp,128
     86e:	5f00                	lw	s0,56(a4)
     870:	0d20                	addi	s0,sp,664
     872:	0000                	unimp
    array_equ(temp,res2,size);
     874:	0d22                	slli	s10,s10,0x8
     876:	0000                	unimp
     878:	7f7f0003          	lb	zero,2039(t5)
        for (i = 0; i < N + 1; ++i) {
     87c:	229f 000d 2400      	0x2400000d229f
        for (i = 0; i < N + 1; ++i) {
     882:	000d                	c.nop	3
     884:	0100                	addi	s0,sp,128
     886:	5f00                	lw	s0,56(a4)
	...
array_equ(ri_2,ri_1,size);
     890:	0c2a                	slli	s8,s8,0xa
     892:	0000                	unimp
     894:	0c7c                	addi	a5,sp,540
     896:	0000                	unimp
array_equ(ri_1,ri,size);
     898:	0006                	c.slli	zero,0x1
     89a:	001c0c03          	lb	s8,1(s8) # ffff9001 <_stack_start+0xfffe9001>
     89e:	9f00                	0x9f00
	...
array_equ(ti_2,ti_1,size);
     8a8:	0b60                	addi	s0,sp,412
     8aa:	0000                	unimp
     8ac:	0c26                	slli	s8,s8,0x9
array_equ(ti_1,ti,size);
     8ae:	0000                	unimp
     8b0:	0001                	nop
     8b2:	2662                	fld	fa2,24(sp)
     8b4:	000c                	0xc
        controlR = 0;
     8b6:	5a00                	lw	s0,48(a2)
        for (i = 0; i < N + 1; ++i) {
     8b8:	000c                	0xc
     8ba:	0300                	addi	s0,sp,384
     8bc:	8600                	0x8600
    while (controlR != 0) {
     8be:	9f7f                	0x9f7f
     8c0:	0c5a                	slli	s8,s8,0x16
        for (j = 0; j < mod; ++j) {
     8c2:	0000                	unimp
            if (((ri_2[0] * j) % mod) == 1)
     8c4:	0c7c                	addi	a5,sp,540
        for (j = 0; j < mod; ++j) {
     8c6:	0000                	unimp
     8c8:	0004                	0x4
     8ca:	9f5a01f3          	0x9f5a01f3
     8ce:	0c7c                	addi	a5,sp,540
     8d0:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8d2:	0d10                	addi	a2,sp,656
     8d4:	0000                	unimp
    }
     8d6:	0001                	nop
     8d8:	1062                	c.slli	zero,0x38
     8da:	000d                	c.nop	3
     8dc:	2400                	fld	fs0,8(s0)
     8de:	000d                	c.nop	3
     8e0:	0300                	addi	s0,sp,384
     8e2:	8600                	0x8600
     8e4:	9f7f                	0x9f7f
	...
     8ee:	0758                	addi	a4,sp,900
     8f0:	0000                	unimp
     8f2:	07c6                	slli	a5,a5,0x11
     8f4:	0000                	unimp
     8f6:	0001                	nop
     8f8:	c65a                	sw	s6,12(sp)
     8fa:	c7000007          	0xc7000007
     8fe:	01000007          	0x1000007
                ri_1[i] = ri_1[i] + mod;
     902:	5b00                	lw	s0,48(a4)
            while (ri_1[i] < 0) {
     904:	000007c7          	fmsub.s	fa5,ft0,ft0,ft0,rne
     908:	07e2                	slli	a5,a5,0x18
            ri_1[i] = ri_1[i] % mod;
     90a:	0000                	unimp
     90c:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     90e:	9f5a01f3          	0x9f5a01f3
            ri_1[i] = ri_1[i] % mod;
     912:	07e2                	slli	a5,a5,0x18
     914:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     916:	07f8                	addi	a4,sp,972
            ri[i - (N + 1)] = res[i];
     918:	0000                	unimp
     91a:	0001                	nop
     91c:	f85a                	fsw	fs6,48(sp)
     91e:	06000007          	0x6000007
        for (i = N + 1; i < (2 * N + 2); ++i) {
     922:	000a                	c.slli	zero,0x2
            ri[i - (N + 1)] = res[i];
     924:	0400                	addi	s0,sp,512
     926:	f300                	fsw	fs0,32(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     928:	5a01                	li	s4,-32
            temp[i] = ri_2[i] - ri[i];
     92a:	009f 0000 0000      	0x9f
     930:	0000                	unimp
     932:	5800                	lw	s0,48(s0)
     934:	c2000007          	0xc2000007
     938:	01000007          	0x1000007
     93c:	5b00                	lw	s0,48(a4)
     93e:	07c2                	slli	a5,a5,0x10
        for (i = 0; i < N + 1; ++i) {
     940:	0000                	unimp
     942:	07de                	slli	a5,a5,0x17
                temp[i] = temp[i] + mod;
     944:	0000                	unimp
     946:	0001                	nop
            while (temp[i] < 0) {
     948:	de6a                	sw	s10,60(sp)
     94a:	e2000007          	0xe2000007
            temp[i] = temp[i] % mod;
     94e:	04000007          	0x4000007
        for (i = 0; i < N + 1; ++i) {
     952:	f300                	fsw	fs0,32(a4)
     954:	5b01                	li	s6,-32
            temp[i] = temp[i] % mod;
     956:	e29f 0007 f800      	0xf8000007e29f
                qi_1[i] = qi_1[i] + mod;
     95c:	01000007          	0x1000007
            while (qi_1[i] < 0) {
     960:	5b00                	lw	s0,48(a4)
     962:	07f8                	addi	a4,sp,972
     964:	0000                	unimp
            qi_1[i] = qi_1[i] % mod;
     966:	0a06                	slli	s4,s4,0x1
     968:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     96a:	0004                	0x4
     96c:	9f5b01f3          	0x9f5b01f3
	...
                temp[i] = temp[i] + mod;
     978:	0758                	addi	a4,sp,900
            while (temp[i] < 0) {
     97a:	0000                	unimp
     97c:	07bc                	addi	a5,sp,968
     97e:	0000                	unimp
     980:	0001                	nop
            temp[i] = temp[i] % mod;
     982:	bc5c                	fsd	fa5,184(s0)
     984:	e0000007          	0xe0000007
        for (i = 0; i < N + 1; ++i) {
     988:	0008                	0x8
            temp[i] = temp[i] % mod;
     98a:	0100                	addi	s0,sp,128
     98c:	5900                	lw	s0,48(a0)
        for (i = 0; i < N + 1; ++i) {
     98e:	08e0                	addi	s0,sp,92
            ti[i] = ti_2[i] - temp[i];
     990:	0000                	unimp
     992:	08f4                	addi	a3,sp,92
     994:	0000                	unimp
     996:	018b0003          	lb	zero,24(s6)
     99a:	f49f 0008 0000      	0x8f49f
     9a0:	0009                	c.nop	2
     9a2:	0400                	addi	s0,sp,512
     9a4:	f300                	fsw	fs0,32(a4)
        for (i = 0; i < N + 1; ++i) {
     9a6:	5c01                	li	s8,-32
            ti[i] = ti_2[i] - temp[i];
     9a8:	009f 0009 0600      	0x6000009009f
        for (i = 0; i < N + 1; ++i) {
     9ae:	000a                	c.slli	zero,0x2
                ti[i] = ti[i] + mod;
     9b0:	0100                	addi	s0,sp,128
     9b2:	5900                	lw	s0,48(a0)
	...
            ti[i] = ti[i] % mod;
     9bc:	0758                	addi	a4,sp,900
        for (i = 0; i < N + 1; ++i) {
     9be:	0000                	unimp
     9c0:	07bc                	addi	a5,sp,968
            ti[i] = ti[i] % mod;
     9c2:	0000                	unimp
     9c4:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     9c6:	bc5d                	j	47c <polymult2+0xbe>
              qi_1[i] = 0;
     9c8:	e2000007          	0xe2000007
     9cc:	0008                	0x8
     9ce:	0100                	addi	s0,sp,128
            controlR += ri[i];
     9d0:	6200                	flw	fs0,0(a2)
     9d2:	08e2                	slli	a7,a7,0x18
              qi_1[i] = 0;
     9d4:	0000                	unimp
     9d6:	0900                	addi	s0,sp,144
        for (i = 0; i < N + 1; ++i) {
     9d8:	0000                	unimp
            controlR += ri[i];
     9da:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     9dc:	9f5d01f3          	0x9f5d01f3
            if (((ri_2[0] * j) % mod) == 1)
     9e0:	0900                	addi	s0,sp,144
     9e2:	0000                	unimp
     9e4:	0a06                	slli	s4,s4,0x1
     9e6:	0000                	unimp
     9e8:	0001                	nop
     9ea:	0062                	c.slli	zero,0x18
     9ec:	0000                	unimp
        for (j = 0; j < mod; ++j) {
     9ee:	0000                	unimp
     9f0:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;
     9f2:	d600                	sw	s0,40(a2)
        for (i = 0; i < N + 1; ++i) {
     9f4:	0008                	0x8
     9f6:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;
     9f8:	0009                	c.nop	2
     9fa:	0600                	addi	s0,sp,768
     9fc:	0300                	addi	s0,sp,384
     9fe:	1a7c                	addi	a5,sp,316
     a00:	0000                	unimp
     a02:	009f 0000 0000      	0x9f
int* generate_keys(int N, int p, int q){
     a08:	0000                	unimp
     a0a:	b200                	fsd	fs0,32(a2)
     a0c:	f4000007          	0xf4000007
     a10:	0008                	0x8
     a12:	0100                	addi	s0,sp,128
     a14:	6b00                	flw	fs0,16(a4)
     a16:	08f4                	addi	a3,sp,92
     a18:	0000                	unimp
     a1a:	0900                	addi	s0,sp,144
     a1c:	0000                	unimp
     a1e:	0006                	c.slli	zero,0x1
     a20:	315c01f3          	0x315c01f3
     a24:	9f1c                	0x9f1c
     a26:	0900                	addi	s0,sp,144
     a28:	0000                	unimp
     a2a:	0a06                	slli	s4,s4,0x1
     a2c:	0000                	unimp
     a2e:	0001                	nop
     a30:	0000006b          	0x6b
     a34:	0000                	unimp
     a36:	0000                	unimp
     a38:	b200                	fsd	fs0,32(a2)
     a3a:	bc000007          	0xbc000007
    resultkon[0] = 0xaaaaaaa0;	
     a3e:	02000007          	0x2000007
     a42:	3000                	fld	fs0,32(s0)
     a44:	bc9f 0007 c700      	0xc7000007bc9f
int* generate_keys(int N, int p, int q){
     a4a:	01000007          	0x1000007
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a4e:	5f00                	lw	s0,56(a4)
     a50:	07e2                	slli	a5,a5,0x18
    resultkon[0] = 0xaaaaaaa0;	
     a52:	0000                	unimp
     a54:	07f8                	addi	a4,sp,972
     a56:	0000                	unimp
     a58:	0001                	nop
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a5a:	f85f 0007 0800      	0x8000007f85f
    resultkon[0] = 0xaaaaaaa0;	
     a60:	0008                	0x8
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a62:	0100                	addi	s0,sp,128
     a64:	5d00                	lw	s0,56(a0)
     a66:	0808                	addi	a0,sp,16
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a68:	0000                	unimp
     a6a:	080a                	slli	a6,a6,0x2
     a6c:	0000                	unimp
     a6e:	7f7d0003          	lb	zero,2039(s10) # 6f7f7 <_stack_start+0x5f7f7>
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a72:	0a9f 0008 2200      	0x220000080a9f
     a78:	0008                	0x8
     a7a:	0100                	addi	s0,sp,128
     a7c:	5d00                	lw	s0,56(a0)
     a7e:	082a                	slli	a6,a6,0xa
     a80:	0000                	unimp
     a82:	082e                	slli	a6,a6,0xb
     a84:	0000                	unimp
     a86:	0001                	nop
     a88:	2e59                	jal	e1e <ntru_deceypt+0x4e>
     a8a:	0008                	0x8
     a8c:	3800                	fld	fs0,48(s0)
     a8e:	0008                	0x8
     a90:	0100                	addi	s0,sp,128
     a92:	5f00                	lw	s0,56(a4)
     a94:	083a                	slli	a6,a6,0xe
     a96:	0000                	unimp
     a98:	0842                	slli	a6,a6,0x10
     a9a:	0000                	unimp
     a9c:	0001                	nop
     a9e:	445e                	lw	s0,212(sp)
     aa0:	0008                	0x8
     aa2:	4c00                	lw	s0,24(s0)
     aa4:	0008                	0x8
     aa6:	0100                	addi	s0,sp,128
     aa8:	5d00                	lw	s0,56(a0)
     aaa:	085c                	addi	a5,sp,20
     aac:	0000                	unimp
     aae:	0860                	addi	s0,sp,28
     ab0:	0000                	unimp
     ab2:	0002                	c.slli64	zero
     ab4:	9f30                	0x9f30
     ab6:	0860                	addi	s0,sp,28
     ab8:	0000                	unimp
     aba:	086a                	slli	a6,a6,0x1a
     abc:	0000                	unimp
     abe:	0001                	nop
     ac0:	7a5d                	lui	s4,0xffff7
     ac2:	0008                	0x8
     ac4:	7c00                	flw	fs0,56(s0)
     ac6:	0008                	0x8
     ac8:	0200                	addi	s0,sp,256
     aca:	3000                	fld	fs0,32(s0)
     acc:	7c9f 0008 8a00      	0x8a0000087c9f
     ad2:	0008                	0x8
     ad4:	0100                	addi	s0,sp,128
     ad6:	5e00                	lw	s0,56(a2)
     ad8:	088c                	addi	a1,sp,80
     ada:	0000                	unimp
     adc:	00000897          	auipc	a7,0x0
    int polyR[N+1];
     ae0:	0001                	nop
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     ae2:	b65d                	j	688 <polydiv+0x16c>
    int polyR[N+1];
     ae4:	0008                	0x8
     ae6:	ba00                	fsd	fs0,48(a2)
     ae8:	0008                	0x8
     aea:	0200                	addi	s0,sp,256
     aec:	3000                	fld	fs0,32(s0)
     aee:	ba9f 0008 c400      	0xc4000008ba9f
    polyR[N] = 1;
     af4:	0008                	0x8
     af6:	0100                	addi	s0,sp,128
     af8:	5e00                	lw	s0,56(a2)
     afa:	08d2                	slli	a7,a7,0x14
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     afc:	0000                	unimp
     afe:	0900                	addi	s0,sp,144
     b00:	0000                	unimp
     b02:	0001                	nop
     b04:	005f 0009 1000      	0x10000009005f
     b0a:	0009                	c.nop	2
     b0c:	0100                	addi	s0,sp,128
     b0e:	5d00                	lw	s0,56(a0)
     b10:	0910                	addi	a2,sp,144
     b12:	0000                	unimp
     b14:	0916                	slli	s2,s2,0x5
     b16:	0000                	unimp
     b18:	7f7d0003          	lb	zero,2039(s10)
     b1c:	169f 0009 1800      	0x18000009169f
     b22:	0009                	c.nop	2
     b24:	0100                	addi	s0,sp,128
     b26:	5d00                	lw	s0,56(a0)
     b28:	0918                	addi	a4,sp,144
     b2a:	0000                	unimp
     b2c:	0922                	slli	s2,s2,0x8
     b2e:	0000                	unimp
     b30:	0001                	nop
     b32:	225f 0009 2800      	0x28000009225f
     b38:	0009                	c.nop	2
     b3a:	0300                	addi	s0,sp,384
     b3c:	7f00                	flw	fs0,56(a4)
     b3e:	9f7f                	0x9f7f
     b40:	0928                	addi	a0,sp,152
     b42:	0000                	unimp
     b44:	092a                	slli	s2,s2,0xa
     b46:	0000                	unimp
     b48:	0001                	nop
     b4a:	2a5f 0009 3c00      	0x3c0000092a5f
     b50:	0009                	c.nop	2
     b52:	0100                	addi	s0,sp,128
     b54:	5e00                	lw	s0,56(a2)
     b56:	093c                	addi	a5,sp,152
     b58:	0000                	unimp
     b5a:	0940                	addi	s0,sp,148
     b5c:	0000                	unimp
     b5e:	7f7e0003          	lb	zero,2039(t3)
    polyR[0] = -1;
     b62:	409f 0009 4400      	0x44000009409f
    for(i = 1; i < N; ++i){
     b68:	0009                	c.nop	2
     b6a:	0100                	addi	s0,sp,128
    for (i = N; i < 55; ++i ){
     b6c:	5e00                	lw	s0,56(a2)
     b6e:	0944                	addi	s1,sp,148
     b70:	0000                	unimp
     b72:	0954                	addi	a3,sp,148
    for(i = 0; i < N; ++i){
     b74:	0000                	unimp
        random_keys[i] = f[i];
     b76:	0001                	nop
     b78:	545d                	li	s0,-9
     b7a:	0009                	c.nop	2
     b7c:	5a00                	lw	s0,48(a2)
    for(i = 0; i < N; ++i){
     b7e:	0009                	c.nop	2
     b80:	0300                	addi	s0,sp,384
     b82:	7d00                	flw	fs0,56(a0)
     b84:	9f7f                	0x9f7f
    for(i = N; i < (2*N); ++i){
     b86:	095a                	slli	s2,s2,0x16
     b88:	0000                	unimp
     b8a:	096c                	addi	a1,sp,156
     b8c:	0000                	unimp
        random_keys[i] = g[i-N];
     b8e:	0001                	nop
     b90:	6c5d                	lui	s8,0x17
     b92:	0009                	c.nop	2
     b94:	7200                	flw	fs0,32(a2)
    for(i = N; i < (2*N); ++i){
     b96:	0009                	c.nop	2
     b98:	0300                	addi	s0,sp,384
    for(i = (2*N); i < (3*N); ++i){
     b9a:	7d00                	flw	fs0,56(a0)
     b9c:	9f7f                	0x9f7f
     b9e:	0972                	slli	s2,s2,0x1c
    fp = ext_euclid(polyR, f, (N+1), p);
     ba0:	0000                	unimp
     ba2:	0974                	addi	a3,sp,156
     ba4:	0000                	unimp
     ba6:	0001                	nop
     ba8:	745d                	lui	s0,0xffff7
     baa:	0009                	c.nop	2
    for(i = (2*N); i < (3*N); ++i){
     bac:	8800                	0x8800
        random_keys[i] = fp[i-(2*N)];
     bae:	0009                	c.nop	2
     bb0:	0100                	addi	s0,sp,128
     bb2:	5e00                	lw	s0,56(a2)
     bb4:	0988                	addi	a0,sp,208
    for(i = (2*N); i < (3*N); ++i){
     bb6:	0000                	unimp
     bb8:	098e                	slli	s3,s3,0x3
    fq = ext_euclid(polyR, f, (N+1), q);
     bba:	0000                	unimp
     bbc:	7f7e0003          	lb	zero,2039(t3)
     bc0:	8e9f 0009 a800      	0xa80000098e9f
    for(i = (3*N); i < (4*N); ++i){
     bc6:	0009                	c.nop	2
     bc8:	0100                	addi	s0,sp,128
     bca:	5e00                	lw	s0,56(a2)
     bcc:	09a8                	addi	a0,sp,216
        random_keys[i] = fq[i-(3*N)];
     bce:	0000                	unimp
     bd0:	09ac                	addi	a1,sp,216
     bd2:	0000                	unimp
     bd4:	7f7e0003          	lb	zero,2039(t3)
    for(i = (3*N); i < (4*N); ++i){
     bd8:	ac9f 0009 b000      	0xb0000009ac9f
    fg = polymult2(fq, N, g, N, 0);
     bde:	0009                	c.nop	2
     be0:	0100                	addi	s0,sp,128
     be2:	5e00                	lw	s0,56(a2)
     be4:	09b0                	addi	a2,sp,216
    for(i = 0; i < (2*N-1); ++i){
     be6:	0000                	unimp
     be8:	09c0                	addi	s0,sp,212
     bea:	0000                	unimp
     bec:	0001                	nop
     bee:	c05d                	beqz	s0,c94 <generate_keys+0x28e>
     bf0:	0009                	c.nop	2
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     bf2:	c600                	sw	s0,8(a2)
     bf4:	0009                	c.nop	2
     bf6:	0300                	addi	s0,sp,384
     bf8:	7d00                	flw	fs0,56(a0)
    for(i = (4*N); i < (5*N); ++i){
     bfa:	9f7f                	0x9f7f
     bfc:	09c6                	slli	s3,s3,0x11
     bfe:	0000                	unimp
     c00:	09c8                	addi	a0,sp,212
     c02:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c04:	0001                	nop
     c06:	c85d                	beqz	s0,cbc <generate_keys+0x2b6>
     c08:	0009                	c.nop	2
     c0a:	da00                	sw	s0,48(a2)
    for(i = (4*N); i < (5*N); ++i){
     c0c:	0009                	c.nop	2
     c0e:	0100                	addi	s0,sp,128
     c10:	5e00                	lw	s0,56(a2)
    for(i = (5*N); i < (6*N+1); ++i){
     c12:	09da                	slli	s3,s3,0x16
     c14:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     c16:	09dc                	addi	a5,sp,212
     c18:	0000                	unimp
     c1a:	7f7e0003          	lb	zero,2039(t3)
    for(i = (5*N); i < (6*N+1); ++i){
     c1e:	dc9f 0009 de00      	0xde000009dc9f
     c24:	0009                	c.nop	2
     c26:	0100                	addi	s0,sp,128
     c28:	5e00                	lw	s0,56(a2)
    resultkon[0] = 0xaaaaaaa1;	
     c2a:	09f2                	slli	s3,s3,0x1c
     c2c:	0000                	unimp
     c2e:	09f6                	slli	s3,s3,0x1d
     c30:	0000                	unimp
     c32:	0001                	nop
     c34:	f65f 0009 0400      	0x4000009f65f
}
     c3a:	000a                	c.slli	zero,0x2
     c3c:	0300                	addi	s0,sp,384
     c3e:	7f00                	flw	fs0,56(a4)
     c40:	9f7f                	0x9f7f
     c42:	0a04                	addi	s1,sp,272
     c44:	0000                	unimp
     c46:	0a06                	slli	s4,s4,0x1
     c48:	0000                	unimp
     c4a:	0001                	nop
     c4c:	005f 0000 0000      	0x5f
     c52:	0000                	unimp
     c54:	c600                	sw	s0,8(a2)
     c56:	0008                	0x8
     c58:	0000                	unimp
     c5a:	0009                	c.nop	2
     c5c:	0100                	addi	s0,sp,128
     c5e:	5e00                	lw	s0,56(a2)
     c60:	09de                	slli	s3,s3,0x17
     c62:	0000                	unimp
     c64:	0a06                	slli	s4,s4,0x1
     c66:	0000                	unimp
     c68:	0001                	nop
     c6a:	005e                	c.slli	zero,0x17
     c6c:	0000                	unimp
     c6e:	0000                	unimp
     c70:	0000                	unimp
     c72:	b000                	fsd	fs0,32(s0)
     c74:	e4000007          	0xe4000007
     c78:	0008                	0x8
     c7a:	0200                	addi	s0,sp,256
        polyR[i] = 0;
     c7c:	8300                	0x8300
     c7e:	0000                	unimp
     c80:	0009                	c.nop	2
     c82:	0600                	addi	s0,sp,768
     c84:	000a                	c.slli	zero,0x2
    for(i = 1; i < N; ++i){
     c86:	0200                	addi	s0,sp,256
     c88:	8300                	0x8300
	...
        f[i] = 0;
     c92:	b000                	fsd	fs0,32(s0)
     c94:	e6000007          	0xe6000007
        g[i] = 0;
     c98:	0008                	0x8
     c9a:	0200                	addi	s0,sp,256
     c9c:	8400                	0x8400
     c9e:	0000                	unimp
     ca0:	0009                	c.nop	2
    for (i = N; i < 55; ++i ){
     ca2:	0600                	addi	s0,sp,768
     ca4:	000a                	c.slli	zero,0x2
        random_keys[i] = f[i];
     ca6:	0200                	addi	s0,sp,256
     ca8:	8400                	0x8400
	...
     cb2:	b000                	fsd	fs0,32(s0)
     cb4:	ec000007          	0xec000007
     cb8:	0008                	0x8
    for(i = 0; i < N; ++i){
     cba:	0200                	addi	s0,sp,256
        random_keys[i] = g[i-N];
     cbc:	8700                	0x8700
     cbe:	0000                	unimp
     cc0:	0009                	c.nop	2
     cc2:	0600                	addi	s0,sp,768
     cc4:	000a                	c.slli	zero,0x2
    for(i = N; i < (2*N); ++i){
     cc6:	0200                	addi	s0,sp,256
     cc8:	8700                	0x8700
	...
        random_keys[i] = fp[i-(2*N)];
     cd2:	b000                	fsd	fs0,32(s0)
     cd4:	ea000007          	0xea000007
    for(i = (2*N); i < (3*N); ++i){
     cd8:	0008                	0x8
     cda:	0200                	addi	s0,sp,256
        random_keys[i] = fq[i-(3*N)];
     cdc:	8600                	0x8600
     cde:	ea00                	fsw	fs0,16(a2)
     ce0:	0008                	0x8
     ce2:	ec00                	fsw	fs0,24(s0)
     ce4:	0008                	0x8
     ce6:	0c00                	addi	s0,sp,528
     ce8:	8700                	0x8700
    for(i = (3*N); i < (4*N); ++i){
     cea:	8b00                	0x8b00
        random_keys[i] = fq[i-(3*N)];
     cec:	3201                	jal	5ec <polydiv+0xd0>
    for(i = (3*N); i < (4*N); ++i){
     cee:	2324                	fld	fs1,64(a4)
        fg[i] = fg[i]*p;
     cf0:	1af0090f          	0x1af0090f
    for(i = 0; i < (2*N-1); ++i){
     cf4:	001c                	0x1c
        fg[i] = fg[i]*p;
     cf6:	0009                	c.nop	2
     cf8:	0600                	addi	s0,sp,768
     cfa:	000a                	c.slli	zero,0x2
     cfc:	0200                	addi	s0,sp,256
    for(i = 0; i < (2*N-1); ++i){
     cfe:	8600                	0x8600
	...
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     d08:	b000                	fsd	fs0,32(s0)
     d0a:	f0000007          	0xf0000007
    for(i = (4*N); i < (5*N); ++i){
     d0e:	0008                	0x8
        random_keys[i] = polyR[i-(5*N)];
     d10:	0200                	addi	s0,sp,256
     d12:	8900                	0x8900
     d14:	0000                	unimp
     d16:	0009                	c.nop	2
     d18:	0600                	addi	s0,sp,768
     d1a:	000a                	c.slli	zero,0x2
     d1c:	0200                	addi	s0,sp,256
    for(i = (5*N); i < (6*N+1); ++i){
     d1e:	8900                	0x8900
	...
    resultkon[0] = 0xbbbbbbb0;	
     d28:	b000                	fsd	fs0,32(s0)
     d2a:	ee000007          	0xee000007
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d2e:	0008                	0x8
     d30:	0200                	addi	s0,sp,256
     d32:	8800                	0x8800
     d34:	ee00                	fsw	fs0,24(a2)
     d36:	0008                	0x8
     d38:	f000                	fsw	fs0,32(s0)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d3a:	0008                	0x8
     d3c:	0c00                	addi	s0,sp,528
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d3e:	8900                	0x8900
    resultkon[0] = 0xbbbbbbb0;	
     d40:	8b00                	0x8b00
     d42:	3201                	jal	642 <polydiv+0x126>
     d44:	2324                	fld	fs1,64(a4)
     d46:	1af0090f          	0x1af0090f
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d4a:	001c                	0x1c
     d4c:	0009                	c.nop	2
     d4e:	0600                	addi	s0,sp,768
     d50:	000a                	c.slli	zero,0x2
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d52:	0200                	addi	s0,sp,256
     d54:	8800                	0x8800
	...
    resultkon[0] = 0xbbbbbbb0;	
     d5e:	b200                	fsd	fs0,32(a2)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d60:	da000007          	0xda000007
    temp = polymult(public_key,N,random_val,48,q,0);
     d64:	0008                	0x8
     d66:	0200                	addi	s0,sp,256
     d68:	7200                	flw	fs0,32(a2)
     d6a:	da00                	sw	s0,48(a2)
     d6c:	0008                	0x8
     d6e:	e800                	fsw	fs0,16(s0)
     d70:	0008                	0x8
     d72:	0200                	addi	s0,sp,256
array_add(temp,message,48);
     d74:	8500                	0x8500
     d76:	e800                	fsw	fs0,16(s0)
     d78:	0008                	0x8
    temp = polymult(public_key,N,random_val,48,q,0);
     d7a:	ee00                	fsw	fs0,24(a2)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d7c:	0008                	0x8
     d7e:	0c00                	addi	s0,sp,528
array_add(temp,message,48);
     d80:	8800                	0x8800
     d82:	8b00                	0x8b00
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d84:	3201                	jal	684 <polydiv+0x168>
     d86:	2324                	fld	fs1,64(a4)
     d88:	1af0090f          	0x1af0090f
     d8c:	ee1c                	fsw	fa5,24(a2)
     d8e:	0008                	0x8
     d90:	f000                	fsw	fs0,32(s0)
     d92:	0008                	0x8
    for(i = (2*N); i < (3*N); ++i){
     d94:	0e00                	addi	s0,sp,784
     d96:	8900                	0x8900
     d98:	8b00                	0x8b00
     d9a:	3201                	jal	69a <polydiv+0x17e>
     d9c:	2324                	fld	fs1,64(a4)
     d9e:	1af0090f          	0x1af0090f
}
     da2:	2431                	jal	fae <memcpy+0x7c>
    resultkon[0] = 0xbbbbbbb1;	
     da4:	001c                	0x1c
     da6:	0009                	c.nop	2
     da8:	0600                	addi	s0,sp,768
     daa:	000a                	c.slli	zero,0x2
     dac:	0200                	addi	s0,sp,256
     dae:	7200                	flw	fs0,32(a2)
	...
}
     db8:	2a00                	fld	fs0,16(a2)
     dba:	0008                	0x8
     dbc:	5200                	lw	s0,32(a2)
        CT[i-(2*N)] = CT[i];
     dbe:	0008                	0x8
     dc0:	0100                	addi	s0,sp,128
     dc2:	5a00                	lw	s0,48(a2)
     dc4:	0918                	addi	a4,sp,144
    for(i = (2*N); i < (3*N); ++i){
     dc6:	0000                	unimp
     dc8:	095c                	addi	a5,sp,148
        CT[i-(2*N)] = CT[i];
     dca:	0000                	unimp
     dcc:	0001                	nop
    for(i = (2*N); i < (3*N); ++i){
     dce:	005a                	c.slli	zero,0x16
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     dd0:	0000                	unimp
     dd2:	0000                	unimp
     dd4:	0000                	unimp
     dd6:	5600                	lw	s0,40(a2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     dd8:	0008                	0x8
     dda:	5a00                	lw	s0,48(a2)
     ddc:	0008                	0x8
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     dde:	0100                	addi	s0,sp,128
     de0:	5a00                	lw	s0,48(a2)
    resultkon[0] = 0xccccccc0;	
     de2:	085a                	slli	a6,a6,0x16
     de4:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     de6:	0000085b          	0x85b
    resultkon[0] = 0xccccccc0;	
     dea:	0001                	nop
     dec:	0000005b          	0x5b
     df0:	0000                	unimp
     df2:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     df4:	7400                	flw	fs0,40(s0)
     df6:	0008                	0x8
     df8:	7800                	flw	fs0,48(s0)
     dfa:	0008                	0x8
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     dfc:	0100                	addi	s0,sp,128
    resultkon[0] = 0xccccccc0;	
     dfe:	5a00                	lw	s0,48(a2)
     e00:	0878                	addi	a4,sp,28
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e02:	0000                	unimp
     e04:	0879                	addi	a6,a6,30
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e06:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e08:	0001                	nop
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e0a:	0000005b          	0x5b
     e0e:	0000                	unimp
     e10:	0000                	unimp
     e12:	b200                	fsd	fs0,32(a2)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e14:	de000007          	0xde000007
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e18:	02000007          	0x2000007
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e1c:	3100                	fld	fs0,32(a0)
     e1e:	e29f 0007 f800      	0xf8000007e29f
     e24:	02000007          	0x2000007
     e28:	3100                	fld	fs0,32(a0)
     e2a:	ba9f 0008 d200      	0xd2000008ba9f
    for(i = (2*N); i < ((2*N)+N); ++i){
     e30:	0008                	0x8
     e32:	0100                	addi	s0,sp,128
     e34:	5f00                	lw	s0,56(a4)
     e36:	09c8                	addi	a0,sp,212
        if(a2[i] <= q/2)
     e38:	0000                	unimp
     e3a:	09f2                	slli	s3,s3,0x1c
     e3c:	0000                	unimp
    for (i = 0; i < N; ++i){
     e3e:	0001                	nop
     e40:	005f 0000 0000      	0x5f
    c = polymult2(secret_key_fp,N,a2,N,0);
     e46:	0000                	unimp
     e48:	b000                	fsd	fs0,32(s0)
     e4a:	f4000007          	0xf4000007
     e4e:	0008                	0x8
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     e50:	0100                	addi	s0,sp,128
     e52:	6b00                	flw	fs0,16(a4)
     e54:	08f4                	addi	a3,sp,92
     e56:	0000                	unimp
     e58:	0900                	addi	s0,sp,144
     e5a:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     e5c:	0006                	c.slli	zero,0x1
     e5e:	315c01f3          	0x315c01f3
}
     e62:	9f1c                	0x9f1c
     e64:	0900                	addi	s0,sp,144
    resultkon[0] = 0xccccccc1;	
     e66:	0000                	unimp
     e68:	0a06                	slli	s4,s4,0x1
     e6a:	0000                	unimp
     e6c:	0001                	nop
     e6e:	0000006b          	0x6b
}
     e72:	0000                	unimp
     e74:	0000                	unimp
     e76:	b000                	fsd	fs0,32(s0)
     e78:	f4000007          	0xf4000007
     e7c:	0008                	0x8
     e7e:	0100                	addi	s0,sp,128
     e80:	6b00                	flw	fs0,16(a4)
     e82:	08f4                	addi	a3,sp,92
     e84:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     e86:	0900                	addi	s0,sp,144
     e88:	0000                	unimp
     e8a:	0006                	c.slli	zero,0x1
     e8c:	315c01f3          	0x315c01f3
    for(i = (2*N); i < ((2*N)+N); ++i){
     e90:	9f1c                	0x9f1c
        a2[i-(2*N)] = a2[i];
     e92:	0900                	addi	s0,sp,144
     e94:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     e96:	0a06                	slli	s4,s4,0x1
        if(a2[i] <= q/2)
     e98:	0000                	unimp
     e9a:	0001                	nop
     e9c:	0000006b          	0x6b
            a2[i] = (-1)*(q-a2[i]);
     ea0:	0000                	unimp
     ea2:	0000                	unimp
    for (i = 0; i < N; ++i){
     ea4:	b000                	fsd	fs0,32(s0)
     ea6:	f4000007          	0xf4000007
        c2[i-(2*N)] = c2[i];
     eaa:	0008                	0x8
     eac:	0100                	addi	s0,sp,128
     eae:	6b00                	flw	fs0,16(a4)
     eb0:	08f4                	addi	a3,sp,92
    for(i = (2*N); i < ((2*N)+N); ++i){
     eb2:	0000                	unimp
     eb4:	0900                	addi	s0,sp,144
        c2[i-(2*N)] = c2[i];
     eb6:	0000                	unimp
     eb8:	0006                	c.slli	zero,0x1
    for(i = (2*N); i < ((2*N)+N); ++i){
     eba:	315c01f3          	0x315c01f3
  jal x0, default_exc_handler
     ebe:	9f1c                	0x9f1c
  mv  x1, x0
     ec0:	0900                	addi	s0,sp,144
     ec2:	0000                	unimp
  mv  x2, x1
     ec4:	0a06                	slli	s4,s4,0x1
  mv  x3, x1
     ec6:	0000                	unimp
  mv  x4, x1
     ec8:	0001                	nop
  mv  x5, x1
     eca:	0000006b          	0x6b
  mv  x7, x1
     ece:	0000                	unimp
  mv  x8, x1
     ed0:	0000                	unimp
  mv  x9, x1
     ed2:	b000                	fsd	fs0,32(s0)
  mv x10, x1
     ed4:	f4000007          	0xf4000007
  mv x12, x1
     ed8:	0008                	0x8
  mv x13, x1
     eda:	0100                	addi	s0,sp,128
  mv x14, x1
     edc:	6b00                	flw	fs0,16(a4)
  mv x15, x1
     ede:	08f4                	addi	a3,sp,92
  mv x16, x1
     ee0:	0000                	unimp
  mv x17, x1
     ee2:	0900                	addi	s0,sp,144
  mv x18, x1
     ee4:	0000                	unimp
  mv x19, x1
     ee6:	0006                	c.slli	zero,0x1
  mv x20, x1
     ee8:	315c01f3          	0x315c01f3
  mv x22, x1
     eec:	9f1c                	0x9f1c
  mv x23, x1
     eee:	0900                	addi	s0,sp,144
  mv x24, x1
     ef0:	0000                	unimp
  mv x25, x1
     ef2:	0a06                	slli	s4,s4,0x1
  mv x26, x1
     ef4:	0000                	unimp
  mv x27, x1
     ef6:	0001                	nop
  mv x28, x1
     ef8:	0000006b          	0x6b
  mv x30, x1
     efc:	0000                	unimp
  mv x31, x1
     efe:	0000                	unimp
  la   x2, _stack_start
     f00:	b000                	fsd	fs0,32(s0)
     f02:	f4000007          	0xf4000007
     f06:	0008                	0x8
  la x26, _bss_start
     f08:	0100                	addi	s0,sp,128
     f0a:	6b00                	flw	fs0,16(a4)
     f0c:	08f4                	addi	a3,sp,92
     f0e:	0000                	unimp
  la x27, _bss_end
     f10:	0900                	addi	s0,sp,144
     f12:	0000                	unimp
     f14:	0006                	c.slli	zero,0x1
     f16:	315c01f3          	0x315c01f3
  bge x26, x27, zero_loop_end
     f1a:	9f1c                	0x9f1c
  sw x0, 0(x26)
     f1c:	0900                	addi	s0,sp,144
     f1e:	0000                	unimp
  addi x26, x26, 4
     f20:	0a06                	slli	s4,s4,0x1
  ble x26, x27, zero_loop
     f22:	0000                	unimp
     f24:	0001                	nop
  addi x10, x0, 0
     f26:	0000006b          	0x6b
  addi x11, x0, 0
     f2a:	0000                	unimp
     f2c:	0000                	unimp
  jal x1, main
     f2e:	b000                	fsd	fs0,32(s0)
     f30:	f4000007          	0xf4000007
     f34:	0008                	0x8
     f36:	0100                	addi	s0,sp,128
     f38:	6b00                	flw	fs0,16(a4)
     f3a:	08f4                	addi	a3,sp,92
     f3c:	0000                	unimp
     f3e:	0900                	addi	s0,sp,144
     f40:	0000                	unimp
     f42:	0006                	c.slli	zero,0x1
     f44:	315c01f3          	0x315c01f3
     f48:	9f1c                	0x9f1c
     f4a:	0900                	addi	s0,sp,144
     f4c:	0000                	unimp
     f4e:	0a06                	slli	s4,s4,0x1
     f50:	0000                	unimp
     f52:	0001                	nop
     f54:	0000006b          	0x6b
     f58:	0000                	unimp
     f5a:	0000                	unimp
     f5c:	b000                	fsd	fs0,32(s0)
     f5e:	f4000007          	0xf4000007
     f62:	0008                	0x8
     f64:	0100                	addi	s0,sp,128
     f66:	6b00                	flw	fs0,16(a4)
     f68:	08f4                	addi	a3,sp,92
     f6a:	0000                	unimp
     f6c:	0900                	addi	s0,sp,144
     f6e:	0000                	unimp
     f70:	0006                	c.slli	zero,0x1
     f72:	315c01f3          	0x315c01f3
     f76:	9f1c                	0x9f1c
     f78:	0900                	addi	s0,sp,144
     f7a:	0000                	unimp
     f7c:	0a06                	slli	s4,s4,0x1
     f7e:	0000                	unimp
     f80:	0001                	nop
     f82:	0000006b          	0x6b
     f86:	0000                	unimp
     f88:	0000                	unimp
     f8a:	1c00                	addi	s0,sp,560
     f8c:	0005                	c.nop	1
     f8e:	6e00                	flw	fs0,24(a2)
     f90:	0005                	c.nop	1
     f92:	0100                	addi	s0,sp,128
     f94:	5a00                	lw	s0,48(a2)
     f96:	056e                	slli	a0,a0,0x1b
     f98:	0000                	unimp
     f9a:	00000577          	0x577
     f9e:	0001                	nop
     fa0:	0005775b          	0x5775b
     fa4:	5800                	lw	s0,48(s0)
     fa6:	04000007          	0x4000007
     faa:	f300                	fsw	fs0,32(a4)
     fac:	5a01                	li	s4,-32
     fae:	009f 0000 0000      	0x9f
     fb4:	0000                	unimp
     fb6:	1c00                	addi	s0,sp,560
     fb8:	0005                	c.nop	1
     fba:	6c00                	flw	fs0,24(s0)
     fbc:	0005                	c.nop	1
     fbe:	0100                	addi	s0,sp,128
     fc0:	5b00                	lw	s0,48(a4)
     fc2:	056c                	addi	a1,sp,652
     fc4:	0000                	unimp
     fc6:	063c                	addi	a5,sp,776
     fc8:	0000                	unimp
     fca:	0001                	nop
     fcc:	3c59                	jal	a62 <generate_keys+0x5c>
     fce:	0006                	c.slli	zero,0x1
     fd0:	5600                	lw	s0,40(a2)
     fd2:	0006                	c.slli	zero,0x1
     fd4:	0300                	addi	s0,sp,384
     fd6:	8700                	0x8700
     fd8:	9f01                	0x9f01
     fda:	0656                	slli	a2,a2,0x15
     fdc:	0000                	unimp
     fde:	066a                	slli	a2,a2,0x1a
     fe0:	0000                	unimp
     fe2:	0004                	0x4
     fe4:	9f5b01f3          	0x9f5b01f3
     fe8:	066a                	slli	a2,a2,0x1a
     fea:	0000                	unimp
     fec:	0746                	slli	a4,a4,0x11
     fee:	0000                	unimp
     ff0:	0001                	nop
     ff2:	4659                	li	a2,22
     ff4:	58000007          	0x58000007
     ff8:	03000007          	0x3000007
     ffc:	8700                	0x8700
     ffe:	9f01                	0x9f01
	...
    1008:	051c                	addi	a5,sp,640
    100a:	0000                	unimp
    100c:	056a                	slli	a0,a0,0x1a
    100e:	0000                	unimp
    1010:	0001                	nop
    1012:	6a5c                	flw	fa5,20(a2)
    1014:	0005                	c.nop	1
    1016:	aa00                	fsd	fs0,16(a2)
    1018:	0005                	c.nop	1
    101a:	0100                	addi	s0,sp,128
    101c:	6b00                	flw	fs0,16(a4)
    101e:	05aa                	slli	a1,a1,0xa
    1020:	0000                	unimp
    1022:	05b4                	addi	a3,sp,712
    1024:	0000                	unimp
    1026:	0004                	0x4
    1028:	9f5c01f3          	0x9f5c01f3
    102c:	05b4                	addi	a3,sp,712
    102e:	0000                	unimp
    1030:	0600                	addi	s0,sp,768
    1032:	0000                	unimp
    1034:	0001                	nop
    1036:	0006006b          	0x6006b
    103a:	5800                	lw	s0,48(s0)
    103c:	04000007          	0x4000007
    1040:	f300                	fsw	fs0,32(a4)
    1042:	5c01                	li	s8,-32
    1044:	009f 0000 0000      	0x9f
    104a:	0000                	unimp
    104c:	1c00                	addi	s0,sp,560
    104e:	0005                	c.nop	1
    1050:	7700                	flw	fs0,40(a4)
    1052:	0005                	c.nop	1
    1054:	0100                	addi	s0,sp,128
    1056:	5d00                	lw	s0,56(a0)
    1058:	00000577          	0x577
    105c:	0658                	addi	a4,sp,772
    105e:	0000                	unimp
    1060:	0001                	nop
    1062:	5868                	lw	a0,116(s0)
    1064:	0006                	c.slli	zero,0x1
    1066:	6a00                	flw	fs0,16(a2)
    1068:	0006                	c.slli	zero,0x1
    106a:	0400                	addi	s0,sp,512
    106c:	f300                	fsw	fs0,32(a4)
    106e:	5d01                	li	s10,-32
    1070:	6a9f 0006 5800      	0x580000066a9f
    1076:	01000007          	0x1000007
    107a:	6800                	flw	fs0,16(s0)
	...
    1084:	051c                	addi	a5,sp,640
    1086:	0000                	unimp
    1088:	00000577          	0x577
    108c:	0001                	nop
    108e:	775e                	flw	fa4,244(sp)
    1090:	0005                	c.nop	1
    1092:	5a00                	lw	s0,48(a2)
    1094:	0006                	c.slli	zero,0x1
    1096:	0100                	addi	s0,sp,128
    1098:	6900                	flw	fs0,16(a0)
    109a:	065a                	slli	a2,a2,0x16
    109c:	0000                	unimp
    109e:	066a                	slli	a2,a2,0x1a
    10a0:	0000                	unimp
    10a2:	0004                	0x4
    10a4:	9f5e01f3          	0x9f5e01f3
    10a8:	066a                	slli	a2,a2,0x1a
    10aa:	0000                	unimp
    10ac:	0758                	addi	a4,sp,900
    10ae:	0000                	unimp
    10b0:	0001                	nop
    10b2:	0069                	c.nop	26
    10b4:	0000                	unimp
    10b6:	0000                	unimp
int main(){
    10b8:	0000                	unimp
    10ba:	ac00                	fsd	fs0,24(s0)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    10bc:	0005                	c.nop	1
    10be:	b400                	fsd	fs0,40(s0)
    10c0:	0005                	c.nop	1
    10c2:	0100                	addi	s0,sp,128
    10c4:	6b00                	flw	fs0,16(a4)
    10c6:	0600                	addi	s0,sp,768
    10c8:	0000                	unimp
int main(){
    10ca:	065e                	slli	a2,a2,0x17
    10cc:	0000                	unimp
    10ce:	0001                	nop
    10d0:	00066a6b          	0x66a6b
    10d4:	5800                	lw	s0,48(s0)
    10d6:	01000007          	0x1000007
    resultkon[0] = 0xaaaaaaa0;
    10da:	6b00                	flw	fs0,16(a4)
	...
    10e4:	061e                	slli	a2,a2,0x7
    10e6:	0000                	unimp
    10e8:	0000062f          	0x62f
    keys = generate_keys(N, p, q);
    10ec:	0001                	nop
    10ee:	6a5f 0006 7200      	0x720000066a5f
    10f4:	0006                	c.slli	zero,0x1
    resultkon[0] = 0xaaaaaaa0;
    10f6:	0100                	addi	s0,sp,128
    resultkon[0] = 0xaaaaaaa1;
    10f8:	5f00                	lw	s0,56(a4)
	...
    for(i = 0; i < N; ++i){
    1102:	057a                	slli	a0,a0,0x1e
    1104:	0000                	unimp
        secret_key_f[i] = keys[i];
    1106:	0580                	addi	s0,sp,704
    1108:	0000                	unimp
    110a:	0002                	c.slli64	zero
    110c:	9f30                	0x9f30
    110e:	0580                	addi	s0,sp,704
    1110:	0000                	unimp
    for(i = 0; i < N; ++i){
    1112:	0000058b          	0x58b
    1116:	0001                	nop
    for(i = N; i < (2*N); ++i){
    1118:	8c5d                	or	s0,s0,a5
    111a:	0005                	c.nop	1
    111c:	9000                	0x9000
    111e:	0005                	c.nop	1
    1120:	0200                	addi	s0,sp,256
    1122:	3000                	fld	fs0,32(s0)
        secret_key_fp[i-(2*N)] = keys[i];
    1124:	909f 0005 9600      	0x96000005909f
    112a:	0005                	c.nop	1
    112c:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
    112e:	5d00                	lw	s0,56(a0)
    1130:	0596                	slli	a1,a1,0x5
    for(i = (3*N); i < (4*N); ++i){
    1132:	0000                	unimp
    1134:	059a                	slli	a1,a1,0x6
    1136:	0000                	unimp
    1138:	0001                	nop
    113a:	9a5f 0005 b400      	0xb40000059a5f
        public_key[i-(4*N)] = keys[i];
    1140:	0005                	c.nop	1
    1142:	0100                	addi	s0,sp,128
    1144:	6200                	flw	fs0,0(a2)
    1146:	05b4                	addi	a3,sp,712
    for(i = (4*N); i < (5*N); ++i){
    1148:	0000                	unimp
    114a:	05c4                	addi	s1,sp,708
    114c:	0000                	unimp
    114e:	0001                	nop
    1150:	c45d                	beqz	s0,11fe <__DTOR_END__+0xe>
    1152:	0005                	c.nop	1
        ring_poly[i-(5*N)] = keys[i];
    1154:	ca00                	sw	s0,16(a2)
    1156:	0005                	c.nop	1
    1158:	0300                	addi	s0,sp,384
    115a:	7d00                	flw	fs0,56(a0)
    115c:	9f7f                	0x9f7f
    for(i = (5*N); i < (6*N+1); ++i){
    115e:	05ca                	slli	a1,a1,0x12
    1160:	0000                	unimp
    resultkon[0] = 0xbbbbbbb0;
    1162:	05dc                	addi	a5,sp,708
    1164:	0000                	unimp
    1166:	0001                	nop
    1168:	dc5d                	beqz	s0,1126 <main+0x6e>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    116a:	0005                	c.nop	1
    116c:	e200                	fsw	fs0,0(a2)
    116e:	0005                	c.nop	1
    1170:	0300                	addi	s0,sp,384
    1172:	7d00                	flw	fs0,56(a0)
    1174:	9f7f                	0x9f7f
    resultkon[0] = 0xbbbbbbb0;
    1176:	05e2                	slli	a1,a1,0x18
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1178:	0000                	unimp
    117a:	05e4                	addi	s1,sp,716
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    117c:	0000                	unimp
    117e:	0001                	nop
    resultkon[0] = 0xbbbbbbb1;
    1180:	e45d                	bnez	s0,122e <__DTOR_END__+0x3e>
    1182:	0005                	c.nop	1
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1184:	fa00                	fsw	fs0,48(a2)
    1186:	0005                	c.nop	1
    1188:	0100                	addi	s0,sp,128
    118a:	5f00                	lw	s0,56(a4)
    118c:	05fa                	slli	a1,a1,0x1e
    118e:	0000                	unimp
    1190:	060e                	slli	a2,a2,0x3
    resultkon[0] = 0xbbbbbbb1;
    1192:	0000                	unimp
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1194:	0001                	nop
            resultkon[0] = 0xDEDEDEDE;
    1196:	0e62                	slli	t3,t3,0x18
    1198:	0006                	c.slli	zero,0x1
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    119a:	1e00                	addi	s0,sp,816
            resultkon[0] = 0xDEDEDEDE;
    119c:	0006                	c.slli	zero,0x1
    119e:	0100                	addi	s0,sp,128
    for(i = 0; i < 32; ++i){
    11a0:	5f00                	lw	s0,56(a4)
    11a2:	0630                	addi	a2,sp,776
        if(!(message[i] == Dec_Message[i])){
    11a4:	0000                	unimp
    11a6:	064a                	slli	a2,a2,0x12
    11a8:	0000                	unimp
    11aa:	0001                	nop
    11ac:	7859                	lui	a6,0xffff6
    11ae:	0006                	c.slli	zero,0x1
    11b0:	7c00                	flw	fs0,56(s0)
    11b2:	0006                	c.slli	zero,0x1
            resultkon[0] = 0xBABABABA;
    11b4:	0200                	addi	s0,sp,256
    11b6:	3000                	fld	fs0,32(s0)
    11b8:	7c9f 0006 8200      	0x820000067c9f
}
    11be:	0006                	c.slli	zero,0x1
    11c0:	0100                	addi	s0,sp,128
    11c2:	5e00                	lw	s0,56(a2)
    11c4:	068e                	slli	a3,a3,0x3
    11c6:	0000                	unimp
    11c8:	0692                	slli	a3,a3,0x4
    11ca:	0000                	unimp
    11cc:	0002                	c.slli64	zero
    11ce:	9f30                	0x9f30
    11d0:	0692                	slli	a3,a3,0x4
    11d2:	0000                	unimp
    11d4:	069a                	slli	a3,a3,0x6
            resultkon[0] = 0xDEDEDEDE;
    11d6:	0000                	unimp
    for(i = 0; i < 32; ++i){
    11d8:	0001                	nop
    11da:	9a5d                	andi	a2,a2,-9
    11dc:	0006                	c.slli	zero,0x1
    11de:	a200                	fsd	fs0,0(a2)
    11e0:	0006                	c.slli	zero,0x1
    11e2:	0100                	addi	s0,sp,128
    11e4:	5f00                	lw	s0,56(a4)
    11e6:	06a2                	slli	a3,a3,0x8
    11e8:	0000                	unimp
    11ea:	06ad                	addi	a3,a3,11
    11ec:	0000                	unimp
    11ee:	0001                	nop
    11f0:	ae5d                	j	15a6 <_bss_start+0x232>
    11f2:	0006                	c.slli	zero,0x1
    11f4:	b200                	fsd	fs0,32(a2)
    11f6:	0006                	c.slli	zero,0x1
    11f8:	0200                	addi	s0,sp,256
    11fa:	3000                	fld	fs0,32(s0)
    11fc:	b29f 0006 b800      	0xb8000006b29f
    1202:	0006                	c.slli	zero,0x1
    1204:	0100                	addi	s0,sp,128
    1206:	5e00                	lw	s0,56(a2)
    1208:	06b8                	addi	a4,sp,840
    120a:	0000                	unimp
    120c:	06c8                	addi	a0,sp,836
    120e:	0000                	unimp
    1210:	0001                	nop
    1212:	c85f 0006 cc00      	0xcc000006c85f
    1218:	0006                	c.slli	zero,0x1
    121a:	0100                	addi	s0,sp,128
    121c:	5e00                	lw	s0,56(a2)
    121e:	06cc                	addi	a1,sp,836
    1220:	0000                	unimp
    1222:	06d6                	slli	a3,a3,0x15
    1224:	0000                	unimp
    1226:	7f7e0003          	lb	zero,2039(t3)
    122a:	d69f 0006 d800      	0xd8000006d69f
    1230:	0006                	c.slli	zero,0x1
    1232:	0100                	addi	s0,sp,128
    1234:	5e00                	lw	s0,56(a2)
    1236:	06d8                	addi	a4,sp,836
    1238:	0000                	unimp
    123a:	06e8                	addi	a0,sp,844
    123c:	0000                	unimp
    123e:	0001                	nop
    1240:	e85d                	bnez	s0,12f6 <__DTOR_END__+0x106>
    1242:	0006                	c.slli	zero,0x1
    1244:	ee00                	fsw	fs0,24(a2)
    1246:	0006                	c.slli	zero,0x1
    1248:	0300                	addi	s0,sp,384
    124a:	7d00                	flw	fs0,56(a0)
    124c:	9f7f                	0x9f7f
    124e:	06ee                	slli	a3,a3,0x1b
    1250:	0000                	unimp
    1252:	06f0                	addi	a2,sp,844
    1254:	0000                	unimp
    1256:	0001                	nop
    1258:	f05d                	bnez	s0,11fe <__DTOR_END__+0xe>
    125a:	0006                	c.slli	zero,0x1
    125c:	fc00                	fsw	fs0,56(s0)
    125e:	0006                	c.slli	zero,0x1
    1260:	0100                	addi	s0,sp,128
    1262:	5f00                	lw	s0,56(a4)
    1264:	06fc                	addi	a5,sp,844
    1266:	0000                	unimp
    1268:	0704                	addi	s1,sp,896
    126a:	0000                	unimp
    126c:	7f7f0003          	lb	zero,2039(t5)
    1270:	049f 0007 0600      	0x6000007049f
    1276:	01000007          	0x1000007
    127a:	5f00                	lw	s0,56(a4)
    127c:	0706                	slli	a4,a4,0x1
    127e:	0000                	unimp
    1280:	0716                	slli	a4,a4,0x5
    1282:	0000                	unimp
    1284:	0001                	nop
    1286:	165d                	addi	a2,a2,-9
    1288:	1c000007          	0x1c000007
    128c:	03000007          	0x3000007
    1290:	7d00                	flw	fs0,56(a0)
    1292:	9f7f                	0x9f7f
    1294:	071c                	addi	a5,sp,896
    1296:	0000                	unimp
    1298:	071e                	slli	a4,a4,0x7
    129a:	0000                	unimp
    129c:	0001                	nop
    129e:	1e5d                	addi	t3,t3,-9
    12a0:	22000007          	0x22000007
    12a4:	01000007          	0x1000007
    12a8:	5e00                	lw	s0,56(a2)
    12aa:	0722                	slli	a4,a4,0x8
    12ac:	0000                	unimp
    12ae:	072c                	addi	a1,sp,904
    12b0:	0000                	unimp
    12b2:	7f7e0003          	lb	zero,2039(t3)
    12b6:	2c9f 0007 2e00      	0x2e0000072c9f
    12bc:	01000007          	0x1000007
    12c0:	5e00                	lw	s0,56(a2)
    12c2:	072e                	slli	a4,a4,0xb
    12c4:	0000                	unimp
    12c6:	0734                	addi	a3,sp,904
    12c8:	0000                	unimp
    12ca:	0001                	nop
    12cc:	345f 0007 4600      	0x46000007345f
    12d2:	01000007          	0x1000007
    12d6:	5d00                	lw	s0,56(a0)
    12d8:	0746                	slli	a4,a4,0x11
    12da:	0000                	unimp
    12dc:	0758                	addi	a4,sp,900
    12de:	0000                	unimp
    12e0:	0001                	nop
    12e2:	0059                	c.nop	22
    12e4:	0000                	unimp
    12e6:	0000                	unimp
    12e8:	0000                	unimp
    12ea:	1e00                	addi	s0,sp,816
    12ec:	0006                	c.slli	zero,0x1
    12ee:	2f00                	fld	fs0,24(a4)
    12f0:	0006                	c.slli	zero,0x1
    12f2:	0100                	addi	s0,sp,128
    12f4:	5e00                	lw	s0,56(a2)
    12f6:	066a                	slli	a2,a2,0x1a
    12f8:	0000                	unimp
    12fa:	066e                	slli	a2,a2,0x1b
    12fc:	0000                	unimp
    12fe:	0001                	nop
    1300:	005e                	c.slli	zero,0x17
    1302:	0000                	unimp
    1304:	0000                	unimp
    1306:	0000                	unimp
    1308:	4000                	lw	s0,0(s0)
    130a:	0006                	c.slli	zero,0x1
    130c:	6a00                	flw	fs0,16(a2)
    130e:	0006                	c.slli	zero,0x1
    1310:	0600                	addi	s0,sp,768
    1312:	0300                	addi	s0,sp,384
    1314:	1824                	addi	s1,sp,56
    1316:	0000                	unimp
    1318:	009f 0000 0000      	0x9f
    131e:	0000                	unimp
    1320:	6800                	flw	fs0,16(s0)
    1322:	0005                	c.nop	1
    1324:	4e00                	lw	s0,24(a2)
    1326:	0006                	c.slli	zero,0x1
    1328:	0200                	addi	s0,sp,256
    132a:	8300                	0x8300
    132c:	6a00                	flw	fs0,16(a2)
    132e:	0006                	c.slli	zero,0x1
    1330:	5800                	lw	s0,48(s0)
    1332:	02000007          	0x2000007
    1336:	8300                	0x8300
	...
    1340:	6800                	flw	fs0,16(s0)
    1342:	0005                	c.nop	1
    1344:	5000                	lw	s0,32(s0)
    1346:	0006                	c.slli	zero,0x1
    1348:	0200                	addi	s0,sp,256
    134a:	8400                	0x8400
    134c:	6a00                	flw	fs0,16(a2)
    134e:	0006                	c.slli	zero,0x1
    1350:	5800                	lw	s0,48(s0)
    1352:	02000007          	0x2000007
    1356:	8400                	0x8400
	...
    1360:	8e00                	0x8e00
    1362:	0006                	c.slli	zero,0x1
    1364:	ac00                	fsd	fs0,24(s0)
    1366:	0006                	c.slli	zero,0x1
    1368:	0100                	addi	s0,sp,128
    136a:	5a00                	lw	s0,48(a2)
    136c:	06d8                	addi	a4,sp,836
    136e:	0000                	unimp
    1370:	071e                	slli	a4,a4,0x7
    1372:	0000                	unimp
    1374:	0001                	nop
    1376:	005a                	c.slli	zero,0x16
    1378:	0000                	unimp
    137a:	0000                	unimp
    137c:	0000                	unimp
    137e:	6800                	flw	fs0,16(s0)
    1380:	0005                	c.nop	1
    1382:	8000                	0x8000
    1384:	0005                	c.nop	1
    1386:	0200                	addi	s0,sp,256
    1388:	8a00                	0x8a00
    138a:	8000                	0x8000
    138c:	0005                	c.nop	1
    138e:	3c00                	fld	fs0,56(s0)
    1390:	0006                	c.slli	zero,0x1
    1392:	0200                	addi	s0,sp,256
    1394:	8600                	0x8600
    1396:	3c00                	fld	fs0,56(s0)
    1398:	0006                	c.slli	zero,0x1
    139a:	5c00                	lw	s0,56(s0)
    139c:	0006                	c.slli	zero,0x1
    139e:	0200                	addi	s0,sp,256
    13a0:	8a00                	0x8a00
    13a2:	6a00                	flw	fs0,16(a2)
    13a4:	0006                	c.slli	zero,0x1
    13a6:	4600                	lw	s0,8(a2)
    13a8:	02000007          	0x2000007
    13ac:	8600                	0x8600
    13ae:	4600                	lw	s0,8(a2)
    13b0:	58000007          	0x58000007
    13b4:	02000007          	0x2000007
    13b8:	8a00                	0x8a00
	...
    13c2:	7a00                	flw	fs0,48(a2)
    13c4:	0005                	c.nop	1
    13c6:	8000                	0x8000
    13c8:	0005                	c.nop	1
    13ca:	0200                	addi	s0,sp,256
    13cc:	8500                	0x8500
    13ce:	8000                	0x8000
    13d0:	0005                	c.nop	1
    13d2:	4400                	lw	s0,8(s0)
    13d4:	0006                	c.slli	zero,0x1
    13d6:	0200                	addi	s0,sp,256
    13d8:	7200                	flw	fs0,32(a2)
    13da:	4400                	lw	s0,8(s0)
    13dc:	0006                	c.slli	zero,0x1
    13de:	5200                	lw	s0,32(a2)
    13e0:	0006                	c.slli	zero,0x1
    13e2:	0200                	addi	s0,sp,256
    13e4:	8500                	0x8500
    13e6:	5200                	lw	s0,32(a2)
    13e8:	0006                	c.slli	zero,0x1
    13ea:	5800                	lw	s0,48(s0)
    13ec:	0006                	c.slli	zero,0x1
    13ee:	0c00                	addi	s0,sp,528
    13f0:	8a00                	0x8a00
    13f2:	8800                	0x8800
    13f4:	3200                	fld	fs0,32(a2)
    13f6:	2324                	fld	fs1,64(a4)
    13f8:	1af0090f          	0x1af0090f
    13fc:	581c                	lw	a5,48(s0)
    13fe:	0006                	c.slli	zero,0x1
    1400:	5c00                	lw	s0,56(s0)
    1402:	0006                	c.slli	zero,0x1
    1404:	0d00                	addi	s0,sp,656
    1406:	8a00                	0x8a00
    1408:	f300                	fsw	fs0,32(a4)
    140a:	5d01                	li	s10,-32
    140c:	2432                	fld	fs0,264(sp)
    140e:	f0090f23          	sb	zero,-226(s2)
    1412:	1c1a                	slli	s8,s8,0x26
    1414:	066a                	slli	a2,a2,0x1a
    1416:	0000                	unimp
    1418:	0758                	addi	a4,sp,900
    141a:	0000                	unimp
    141c:	0002                	c.slli64	zero
    141e:	0072                	c.slli	zero,0x1c
	...
    1428:	0568                	addi	a0,sp,652
    142a:	0000                	unimp
    142c:	0656                	slli	a2,a2,0x15
    142e:	0000                	unimp
    1430:	0001                	nop
    1432:	00065667          	0x65667
    1436:	6a00                	flw	fs0,16(a2)
    1438:	0006                	c.slli	zero,0x1
    143a:	0600                	addi	s0,sp,768
    143c:	f300                	fsw	fs0,32(a4)
    143e:	5b01                	li	s6,-32
    1440:	1c31                	addi	s8,s8,-20
    1442:	6a9f 0006 5800      	0x580000066a9f
    1448:	01000007          	0x1000007
    144c:	6700                	flw	fs0,8(a4)
	...
    1456:	0568                	addi	a0,sp,652
    1458:	0000                	unimp
    145a:	0656                	slli	a2,a2,0x15
    145c:	0000                	unimp
    145e:	0001                	nop
    1460:	00065667          	0x65667
    1464:	6a00                	flw	fs0,16(a2)
    1466:	0006                	c.slli	zero,0x1
    1468:	0600                	addi	s0,sp,768
    146a:	f300                	fsw	fs0,32(a4)
    146c:	5b01                	li	s6,-32
    146e:	1c31                	addi	s8,s8,-20
    1470:	6a9f 0006 5800      	0x580000066a9f
    1476:	01000007          	0x1000007
    147a:	6700                	flw	fs0,8(a4)
	...
    1484:	0568                	addi	a0,sp,652
    1486:	0000                	unimp
    1488:	0656                	slli	a2,a2,0x15
    148a:	0000                	unimp
    148c:	0001                	nop
    148e:	00065667          	0x65667
    1492:	6a00                	flw	fs0,16(a2)
    1494:	0006                	c.slli	zero,0x1
    1496:	0600                	addi	s0,sp,768
    1498:	f300                	fsw	fs0,32(a4)
    149a:	5b01                	li	s6,-32
    149c:	1c31                	addi	s8,s8,-20
    149e:	6a9f 0006 5800      	0x580000066a9f
    14a4:	01000007          	0x1000007
    14a8:	6700                	flw	fs0,8(a4)
	...
    14b2:	0576                	slli	a0,a0,0x1d
    14b4:	0000                	unimp
    14b6:	059a                	slli	a1,a1,0x6
    14b8:	0000                	unimp
    14ba:	0001                	nop
    14bc:	9a62                	add	s4,s4,s8
    14be:	0005                	c.nop	1
    14c0:	b400                	fsd	fs0,40(s0)
    14c2:	0005                	c.nop	1
    14c4:	0300                	addi	s0,sp,384
    14c6:	8800                	0x8800
    14c8:	9f7f                	0x9f7f
    14ca:	05b4                	addi	a3,sp,712
    14cc:	0000                	unimp
    14ce:	05fa                	slli	a1,a1,0x1e
    14d0:	0000                	unimp
    14d2:	0001                	nop
    14d4:	fa62                	fsw	fs8,52(sp)
    14d6:	0005                	c.nop	1
    14d8:	5800                	lw	s0,48(s0)
    14da:	0006                	c.slli	zero,0x1
    14dc:	0300                	addi	s0,sp,384
    14de:	8800                	0x8800
    14e0:	9f7f                	0x9f7f
    14e2:	0658                	addi	a4,sp,772
    14e4:	0000                	unimp
    14e6:	066a                	slli	a2,a2,0x1a
    14e8:	0000                	unimp
    14ea:	0006                	c.slli	zero,0x1
    14ec:	315d01f3          	0x315d01f3
    14f0:	9f1c                	0x9f1c
    14f2:	066a                	slli	a2,a2,0x1a
    14f4:	0000                	unimp
    14f6:	0758                	addi	a4,sp,900
    14f8:	0000                	unimp
    14fa:	7f880003          	lb	zero,2040(a6) # ffff67f8 <_stack_start+0xfffe67f8>
    14fe:	009f 0000 0000      	0x9f
    1504:	0000                	unimp
    1506:	be00                	fsd	fs0,56(a2)
    1508:	3a000003          	lb	zero,928(zero) # 3a0 <polymult+0x1d4>
    150c:	0004                	0x4
    150e:	0100                	addi	s0,sp,128
    1510:	5a00                	lw	s0,48(a2)
    1512:	043a                	slli	s0,s0,0xe
    1514:	0000                	unimp
    1516:	0000043f 3f5b0001 	0x3f5b00010000043f
    151e:	0004                	0x4
    1520:	6600                	flw	fs0,8(a2)
    1522:	0004                	0x4
    1524:	0400                	addi	s0,sp,512
    1526:	f300                	fsw	fs0,32(a4)
    1528:	5a01                	li	s4,-32
    152a:	669f 0004 8800      	0x88000004669f
    1530:	0004                	0x4
    1532:	0100                	addi	s0,sp,128
    1534:	5a00                	lw	s0,48(a2)
    1536:	0488                	addi	a0,sp,576
    1538:	0000                	unimp
    153a:	051c                	addi	a5,sp,640
    153c:	0000                	unimp
    153e:	0004                	0x4
    1540:	9f5a01f3          	0x9f5a01f3
	...
    154c:	03be                	slli	t2,t2,0xf
    154e:	0000                	unimp
    1550:	0438                	addi	a4,sp,520
    1552:	0000                	unimp
    1554:	0001                	nop
    1556:	0004385b          	0x4385b
    155a:	3f00                	fld	fs0,56(a4)
    155c:	0004                	0x4
    155e:	0100                	addi	s0,sp,128
    1560:	5c00                	lw	s0,56(s0)
    1562:	0000043f 00000466 	0x4660000043f
    156a:	01880003          	lb	zero,24(a6)
    156e:	669f 0004 8800      	0x88000004669f
    1574:	0004                	0x4
    1576:	0100                	addi	s0,sp,128
    1578:	5b00                	lw	s0,48(a4)
    157a:	0488                	addi	a0,sp,576
    157c:	0000                	unimp
    157e:	04d4                	addi	a3,sp,580
    1580:	0000                	unimp
    1582:	01880003          	lb	zero,24(a6)
    1586:	d49f 0004 1c00      	0x1c000004d49f
    158c:	0005                	c.nop	1
    158e:	0400                	addi	s0,sp,512
    1590:	f300                	fsw	fs0,32(a4)
    1592:	5b01                	li	s6,-32
    1594:	009f 0000 0000      	0x9f
    159a:	0000                	unimp
    159c:	be00                	fsd	fs0,56(a2)
    159e:	30000003          	lb	zero,768(zero) # 300 <polymult+0x134>
    15a2:	0004                	0x4
    15a4:	0100                	addi	s0,sp,128
    15a6:	5c00                	lw	s0,56(s0)
    15a8:	0430                	addi	a2,sp,520
    15aa:	0000                	unimp
    15ac:	0000043f 3f600001 	0x3f6000010000043f
    15b4:	0004                	0x4
    15b6:	6600                	flw	fs0,8(a2)
    15b8:	0004                	0x4
    15ba:	0300                	addi	s0,sp,384
    15bc:	7800                	flw	fs0,48(s0)
    15be:	7fbc                	flw	fa5,120(a5)
    15c0:	0466                	slli	s0,s0,0x19
    15c2:	0000                	unimp
    15c4:	0488                	addi	a0,sp,576
    15c6:	0000                	unimp
    15c8:	0001                	nop
    15ca:	8860                	0x8860
    15cc:	0004                	0x4
    15ce:	c400                	sw	s0,8(s0)
    15d0:	0004                	0x4
    15d2:	0300                	addi	s0,sp,384
    15d4:	7800                	flw	fs0,48(s0)
    15d6:	7fbc                	flw	fa5,120(a5)
    15d8:	04c4                	addi	s1,sp,580
    15da:	0000                	unimp
    15dc:	051c                	addi	a5,sp,640
    15de:	0000                	unimp
    15e0:	bc910003          	lb	zero,-1079(sp)
    15e4:	007f                	0x7f
    15e6:	0000                	unimp
    15e8:	0000                	unimp
    15ea:	0000                	unimp
    15ec:	be00                	fsd	fs0,56(a2)
    15ee:	26000003          	lb	zero,608(zero) # 260 <polymult+0x94>
    15f2:	0004                	0x4
    15f4:	0100                	addi	s0,sp,128
    15f6:	5d00                	lw	s0,56(a0)
    15f8:	0426                	slli	s0,s0,0x9
    15fa:	0000                	unimp
    15fc:	04cc                	addi	a1,sp,580
    15fe:	0000                	unimp
    1600:	0001                	nop
    1602:	cc64                	sw	s1,92(s0)
    1604:	0004                	0x4
    1606:	e600                	fsw	fs0,8(a2)
    1608:	0004                	0x4
    160a:	0400                	addi	s0,sp,512
    160c:	f300                	fsw	fs0,32(a4)
    160e:	5d01                	li	s10,-32
    1610:	e69f 0004 1c00      	0x1c000004e69f
    1616:	0005                	c.nop	1
    1618:	0100                	addi	s0,sp,128
    161a:	6400                	flw	fs0,8(s0)
	...
    1624:	03be                	slli	t2,t2,0xf
    1626:	0000                	unimp
    1628:	0428                	addi	a0,sp,520
    162a:	0000                	unimp
    162c:	0001                	nop
    162e:	285e                	fld	fa6,464(sp)
    1630:	0004                	0x4
    1632:	da00                	sw	s0,48(a2)
    1634:	0004                	0x4
    1636:	0100                	addi	s0,sp,128
    1638:	6b00                	flw	fs0,16(a4)
    163a:	04da                	slli	s1,s1,0x16
    163c:	0000                	unimp
    163e:	04e6                	slli	s1,s1,0x19
    1640:	0000                	unimp
    1642:	0004                	0x4
    1644:	9f5e01f3          	0x9f5e01f3
    1648:	04e6                	slli	s1,s1,0x19
    164a:	0000                	unimp
    164c:	051c                	addi	a5,sp,640
    164e:	0000                	unimp
    1650:	0001                	nop
    1652:	0000006b          	0x6b
    1656:	0000                	unimp
    1658:	0000                	unimp
    165a:	1a00                	addi	s0,sp,304
    165c:	0004                	0x4
    165e:	5e00                	lw	s0,56(a2)
    1660:	0004                	0x4
    1662:	0200                	addi	s0,sp,256
    1664:	8200                	0x8200
    1666:	5e00                	lw	s0,56(a2)
    1668:	0004                	0x4
    166a:	6600                	flw	fs0,8(a2)
    166c:	0004                	0x4
    166e:	0200                	addi	s0,sp,256
    1670:	8900                	0x8900
    1672:	6600                	flw	fs0,8(a2)
    1674:	0004                	0x4
    1676:	8800                	0x8800
    1678:	0004                	0x4
    167a:	0200                	addi	s0,sp,256
    167c:	8200                	0x8200
    167e:	8800                	0x8800
    1680:	0004                	0x4
    1682:	b800                	fsd	fs0,48(s0)
    1684:	0004                	0x4
    1686:	0200                	addi	s0,sp,256
    1688:	8900                	0x8900
    168a:	e600                	fsw	fs0,8(a2)
    168c:	0004                	0x4
    168e:	0e00                	addi	s0,sp,784
    1690:	0005                	c.nop	1
    1692:	0200                	addi	s0,sp,256
    1694:	8900                	0x8900
	...
    169e:	2200                	fld	fs0,0(a2)
    16a0:	0004                	0x4
    16a2:	3000                	fld	fs0,32(s0)
    16a4:	0004                	0x4
    16a6:	0200                	addi	s0,sp,256
    16a8:	3000                	fld	fs0,32(s0)
    16aa:	309f 0004 3f00      	0x3f000004309f
    16b0:	0004                	0x4
    16b2:	0100                	addi	s0,sp,128
    16b4:	5e00                	lw	s0,56(a2)
    16b6:	0466                	slli	s0,s0,0x19
    16b8:	0000                	unimp
    16ba:	0488                	addi	a0,sp,576
    16bc:	0000                	unimp
    16be:	0001                	nop
    16c0:	b85e                	fsd	fs7,48(sp)
    16c2:	0004                	0x4
    16c4:	c600                	sw	s0,8(a2)
    16c6:	0004                	0x4
    16c8:	0100                	addi	s0,sp,128
    16ca:	5900                	lw	s0,48(a0)
    16cc:	050e                	slli	a0,a0,0x3
    16ce:	0000                	unimp
    16d0:	051c                	addi	a5,sp,640
    16d2:	0000                	unimp
    16d4:	0001                	nop
    16d6:	0059                	c.nop	22
    16d8:	0000                	unimp
    16da:	0000                	unimp
    16dc:	0000                	unimp
    16de:	5e00                	lw	s0,56(a2)
    16e0:	0004                	0x4
    16e2:	6600                	flw	fs0,8(a2)
    16e4:	0004                	0x4
    16e6:	0100                	addi	s0,sp,128
    16e8:	6500                	flw	fs0,8(a0)
    16ea:	0466                	slli	s0,s0,0x19
    16ec:	0000                	unimp
    16ee:	0482                	c.slli64	s1
    16f0:	0000                	unimp
    16f2:	0001                	nop
    16f4:	885f 0004 ce00      	0xce000004885f
    16fa:	0004                	0x4
    16fc:	0100                	addi	s0,sp,128
    16fe:	6500                	flw	fs0,8(a0)
    1700:	04e6                	slli	s1,s1,0x19
    1702:	0000                	unimp
    1704:	051c                	addi	a5,sp,640
    1706:	0000                	unimp
    1708:	0001                	nop
    170a:	0065                	c.nop	25
    170c:	0000                	unimp
    170e:	0000                	unimp
    1710:	0000                	unimp
    1712:	8800                	0x8800
    1714:	0004                	0x4
    1716:	9a00                	0x9a00
    1718:	0004                	0x4
    171a:	0100                	addi	s0,sp,128
    171c:	5f00                	lw	s0,56(a4)
    171e:	049a                	slli	s1,s1,0x6
    1720:	0000                	unimp
    1722:	04a0                	addi	s0,sp,584
    1724:	0000                	unimp
    1726:	017f0003          	lb	zero,23(t5)
    172a:	a09f 0004 aa00      	0xaa000004a09f
    1730:	0004                	0x4
    1732:	0100                	addi	s0,sp,128
    1734:	5f00                	lw	s0,56(a4)
    1736:	04ea                	slli	s1,s1,0x1a
    1738:	0000                	unimp
    173a:	04fc                	addi	a5,sp,588
    173c:	0000                	unimp
    173e:	0001                	nop
    1740:	fc5f 0004 0200      	0x2000004fc5f
    1746:	0005                	c.nop	1
    1748:	0300                	addi	s0,sp,384
    174a:	7f00                	flw	fs0,56(a4)
    174c:	9f01                	0x9f01
    174e:	0502                	c.slli64	a0
    1750:	0000                	unimp
    1752:	050e                	slli	a0,a0,0x3
    1754:	0000                	unimp
    1756:	0001                	nop
    1758:	005f 0000 0000      	0x5f
    175e:	0000                	unimp
    1760:	bc00                	fsd	fs0,56(s0)
    1762:	0004                	0x4
    1764:	e600                	fsw	fs0,8(a2)
    1766:	0004                	0x4
    1768:	0600                	addi	s0,sp,768
    176a:	0300                	addi	s0,sp,384
    176c:	15cc                	addi	a1,sp,740
    176e:	0000                	unimp
    1770:	009f 0000 0000      	0x9f
    1776:	0000                	unimp
    1778:	2000                	fld	fs0,0(s0)
    177a:	0004                	0x4
    177c:	d800                	sw	s0,48(s0)
    177e:	0004                	0x4
    1780:	0200                	addi	s0,sp,256
    1782:	8a00                	0x8a00
    1784:	e600                	fsw	fs0,8(a2)
    1786:	0004                	0x4
    1788:	1c00                	addi	s0,sp,560
    178a:	0005                	c.nop	1
    178c:	0200                	addi	s0,sp,256
    178e:	8a00                	0x8a00
	...
    1798:	2200                	fld	fs0,0(a2)
    179a:	0004                	0x4
    179c:	c000                	sw	s0,0(s0)
    179e:	0004                	0x4
    17a0:	0200                	addi	s0,sp,256
    17a2:	7200                	flw	fs0,32(a2)
    17a4:	c000                	sw	s0,0(s0)
    17a6:	0004                	0x4
    17a8:	cc00                	sw	s0,24(s0)
    17aa:	0004                	0x4
    17ac:	0c00                	addi	s0,sp,528
    17ae:	8a00                	0x8a00
    17b0:	8400                	0x8400
    17b2:	3200                	fld	fs0,32(a2)
    17b4:	2324                	fld	fs1,64(a4)
    17b6:	1af0090f          	0x1af0090f
    17ba:	cc1c                	sw	a5,24(s0)
    17bc:	0004                	0x4
    17be:	d800                	sw	s0,48(s0)
    17c0:	0004                	0x4
    17c2:	0d00                	addi	s0,sp,656
    17c4:	8a00                	0x8a00
    17c6:	f300                	fsw	fs0,32(a4)
    17c8:	5d01                	li	s10,-32
    17ca:	2432                	fld	fs0,264(sp)
    17cc:	f0090f23          	sb	zero,-226(s2)
    17d0:	1c1a                	slli	s8,s8,0x26
    17d2:	04e6                	slli	s1,s1,0x19
    17d4:	0000                	unimp
    17d6:	051c                	addi	a5,sp,640
    17d8:	0000                	unimp
    17da:	0002                	c.slli64	zero
    17dc:	0072                	c.slli	zero,0x1c
	...
    17e6:	041a                	slli	s0,s0,0x6
    17e8:	0000                	unimp
    17ea:	045e                	slli	s0,s0,0x17
    17ec:	0000                	unimp
    17ee:	0001                	nop
    17f0:	5e65                	li	t3,-7
    17f2:	0004                	0x4
    17f4:	6600                	flw	fs0,8(a2)
    17f6:	0004                	0x4
    17f8:	0300                	addi	s0,sp,384
    17fa:	8400                	0x8400
    17fc:	9f7f                	0x9f7f
    17fe:	0466                	slli	s0,s0,0x19
    1800:	0000                	unimp
    1802:	0488                	addi	a0,sp,576
    1804:	0000                	unimp
    1806:	0001                	nop
    1808:	8865                	andi	s0,s0,25
    180a:	0004                	0x4
    180c:	cc00                	sw	s0,24(s0)
    180e:	0004                	0x4
    1810:	0300                	addi	s0,sp,384
    1812:	8400                	0x8400
    1814:	9f7f                	0x9f7f
    1816:	04cc                	addi	a1,sp,580
    1818:	0000                	unimp
    181a:	04e6                	slli	s1,s1,0x19
    181c:	0000                	unimp
    181e:	0006                	c.slli	zero,0x1
    1820:	315d01f3          	0x315d01f3
    1824:	9f1c                	0x9f1c
    1826:	04e6                	slli	s1,s1,0x19
    1828:	0000                	unimp
    182a:	051c                	addi	a5,sp,640
    182c:	0000                	unimp
    182e:	7f840003          	lb	zero,2040(s0) # ffff77f8 <_stack_start+0xfffe77f8>
    1832:	009f 0000 0000      	0x9f
    1838:	0000                	unimp
    183a:	d200                	sw	s0,32(a2)
    183c:	ca000003          	lb	zero,-864(zero) # fffffca0 <_stack_start+0xfffefca0>
    1840:	0004                	0x4
    1842:	0100                	addi	s0,sp,128
    1844:	6300                	flw	fs0,0(a4)
    1846:	04ca                	slli	s1,s1,0x12
    1848:	0000                	unimp
    184a:	04cc                	addi	a1,sp,580
    184c:	0000                	unimp
    184e:	0006                	c.slli	zero,0x1
    1850:	0084                	addi	s1,sp,64
    1852:	0088                	addi	a0,sp,64
    1854:	9f22                	add	t5,t5,s0
    1856:	04cc                	addi	a1,sp,580
    1858:	0000                	unimp
    185a:	04d4                	addi	a3,sp,580
    185c:	0000                	unimp
    185e:	00880007          	0x880007
    1862:	225d01f3          	0x225d01f3
    1866:	d49f 0004 e600      	0xe6000004d49f
    186c:	0004                	0x4
    186e:	0a00                	addi	s0,sp,272
    1870:	f300                	fsw	fs0,32(a4)
    1872:	5b01                	li	s6,-32
    1874:	225d01f3          	0x225d01f3
    1878:	1c31                	addi	s8,s8,-20
    187a:	e69f 0004 1c00      	0x1c000004e69f
    1880:	0005                	c.nop	1
    1882:	0100                	addi	s0,sp,128
    1884:	6300                	flw	fs0,0(a4)
	...
    188e:	0420                	addi	s0,sp,520
    1890:	0000                	unimp
    1892:	04d4                	addi	a3,sp,580
    1894:	0000                	unimp
    1896:	0001                	nop
    1898:	d468                	sw	a0,108(s0)
    189a:	0004                	0x4
    189c:	e600                	fsw	fs0,8(a2)
    189e:	0004                	0x4
    18a0:	0600                	addi	s0,sp,768
    18a2:	f300                	fsw	fs0,32(a4)
    18a4:	5b01                	li	s6,-32
    18a6:	1c31                	addi	s8,s8,-20
    18a8:	e69f 0004 1c00      	0x1c000004e69f
    18ae:	0005                	c.nop	1
    18b0:	0100                	addi	s0,sp,128
    18b2:	6800                	flw	fs0,16(s0)
	...
    18bc:	0420                	addi	s0,sp,520
    18be:	0000                	unimp
    18c0:	045e                	slli	s0,s0,0x17
    18c2:	0000                	unimp
    18c4:	0001                	nop
    18c6:	5e65                	li	t3,-7
    18c8:	0004                	0x4
    18ca:	6600                	flw	fs0,8(a2)
    18cc:	0004                	0x4
    18ce:	0300                	addi	s0,sp,384
    18d0:	8400                	0x8400
    18d2:	9f7f                	0x9f7f
    18d4:	0466                	slli	s0,s0,0x19
    18d6:	0000                	unimp
    18d8:	0488                	addi	a0,sp,576
    18da:	0000                	unimp
    18dc:	0001                	nop
    18de:	8865                	andi	s0,s0,25
    18e0:	0004                	0x4
    18e2:	cc00                	sw	s0,24(s0)
    18e4:	0004                	0x4
    18e6:	0300                	addi	s0,sp,384
    18e8:	8400                	0x8400
    18ea:	9f7f                	0x9f7f
    18ec:	04cc                	addi	a1,sp,580
    18ee:	0000                	unimp
    18f0:	04e6                	slli	s1,s1,0x19
    18f2:	0000                	unimp
    18f4:	0006                	c.slli	zero,0x1
    18f6:	315d01f3          	0x315d01f3
    18fa:	9f1c                	0x9f1c
    18fc:	04e6                	slli	s1,s1,0x19
    18fe:	0000                	unimp
    1900:	051c                	addi	a5,sp,640
    1902:	0000                	unimp
    1904:	7f840003          	lb	zero,2040(s0)
    1908:	009f 0000 0000      	0x9f
    190e:	0000                	unimp
    1910:	cc00                	sw	s0,24(s0)
    1912:	0001                	nop
    1914:	4c00                	lw	s0,24(s0)
    1916:	0002                	c.slli64	zero
    1918:	0100                	addi	s0,sp,128
    191a:	5a00                	lw	s0,48(a2)
    191c:	024c                	addi	a1,sp,260
    191e:	0000                	unimp
    1920:	0255                	addi	tp,tp,21
    1922:	0000                	unimp
    1924:	0001                	nop
    1926:	0002555b          	0x2555b
    192a:	9200                	0x9200
    192c:	0002                	c.slli64	zero
    192e:	0400                	addi	s0,sp,512
    1930:	f300                	fsw	fs0,32(a4)
    1932:	5a01                	li	s4,-32
    1934:	929f 0002 b400      	0xb4000002929f
    193a:	0002                	c.slli64	zero
    193c:	0100                	addi	s0,sp,128
    193e:	5a00                	lw	s0,48(a2)
    1940:	02b4                	addi	a3,sp,328
    1942:	0000                	unimp
    1944:	03be                	slli	t2,t2,0xf
    1946:	0000                	unimp
    1948:	0004                	0x4
    194a:	9f5a01f3          	0x9f5a01f3
	...
    1956:	01cc                	addi	a1,sp,196
    1958:	0000                	unimp
    195a:	0242                	slli	tp,tp,0x10
    195c:	0000                	unimp
    195e:	0001                	nop
    1960:	0002425b          	0x2425b
    1964:	5500                	lw	s0,40(a0)
    1966:	0002                	c.slli64	zero
    1968:	0100                	addi	s0,sp,128
    196a:	6000                	flw	fs0,0(s0)
    196c:	0255                	addi	tp,tp,21
    196e:	0000                	unimp
    1970:	0292                	slli	t0,t0,0x4
    1972:	0000                	unimp
    1974:	b8780003          	lb	zero,-1145(a6)
    1978:	927f                	0x927f
    197a:	0002                	c.slli64	zero
    197c:	b400                	fsd	fs0,40(s0)
    197e:	0002                	c.slli64	zero
    1980:	0100                	addi	s0,sp,128
    1982:	6000                	flw	fs0,0(s0)
    1984:	02b4                	addi	a3,sp,328
    1986:	0000                	unimp
    1988:	0314                	addi	a3,sp,384
    198a:	0000                	unimp
    198c:	b8780003          	lb	zero,-1145(a6)
    1990:	147f                	0x147f
    1992:	be000003          	lb	zero,-1056(zero) # fffffbe0 <_stack_start+0xfffefbe0>
    1996:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    199a:	9100                	0x9100
    199c:	7fb8                	flw	fa4,120(a5)
	...
    19a6:	01cc                	addi	a1,sp,196
    19a8:	0000                	unimp
    19aa:	0238                	addi	a4,sp,264
    19ac:	0000                	unimp
    19ae:	0001                	nop
    19b0:	385c                	fld	fa5,176(s0)
    19b2:	0002                	c.slli64	zero
    19b4:	5500                	lw	s0,40(a0)
    19b6:	0002                	c.slli64	zero
    19b8:	0100                	addi	s0,sp,128
    19ba:	6100                	flw	fs0,0(a0)
    19bc:	0255                	addi	tp,tp,21
    19be:	0000                	unimp
    19c0:	0292                	slli	t0,t0,0x4
    19c2:	0000                	unimp
    19c4:	b4780003          	lb	zero,-1209(a6)
    19c8:	927f                	0x927f
    19ca:	0002                	c.slli64	zero
    19cc:	b400                	fsd	fs0,40(s0)
    19ce:	0002                	c.slli64	zero
    19d0:	0100                	addi	s0,sp,128
    19d2:	6100                	flw	fs0,0(a0)
    19d4:	02b4                	addi	a3,sp,328
    19d6:	0000                	unimp
    19d8:	0314                	addi	a3,sp,384
    19da:	0000                	unimp
    19dc:	b4780003          	lb	zero,-1209(a6)
    19e0:	147f                	0x147f
    19e2:	be000003          	lb	zero,-1056(zero) # fffffbe0 <_stack_start+0xfffefbe0>
    19e6:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    19ea:	9100                	0x9100
    19ec:	7fb4                	flw	fa3,120(a5)
	...
    19f6:	01cc                	addi	a1,sp,196
    19f8:	0000                	unimp
    19fa:	01d6                	slli	gp,gp,0x15
    19fc:	0000                	unimp
    19fe:	0001                	nop
    1a00:	d65d                	beqz	a2,19ae <result+0x18a>
    1a02:	0001                	nop
    1a04:	1800                	addi	s0,sp,48
    1a06:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1a0a:	6200                	flw	fs0,0(a2)
    1a0c:	0318                	addi	a4,sp,384
    1a0e:	0000                	unimp
    1a10:	0336                	slli	t1,t1,0xd
    1a12:	0000                	unimp
    1a14:	0004                	0x4
    1a16:	9f5d01f3          	0x9f5d01f3
    1a1a:	0336                	slli	t1,t1,0xd
    1a1c:	0000                	unimp
    1a1e:	03be                	slli	t2,t2,0xf
    1a20:	0000                	unimp
    1a22:	0001                	nop
    1a24:	0062                	c.slli	zero,0x18
    1a26:	0000                	unimp
    1a28:	0000                	unimp
    1a2a:	0000                	unimp
    1a2c:	cc00                	sw	s0,24(s0)
    1a2e:	0001                	nop
    1a30:	5500                	lw	s0,40(a0)
    1a32:	0002                	c.slli64	zero
    1a34:	0100                	addi	s0,sp,128
    1a36:	5e00                	lw	s0,56(a2)
    1a38:	0255                	addi	tp,tp,21
    1a3a:	0000                	unimp
    1a3c:	0292                	slli	t0,t0,0x4
    1a3e:	0000                	unimp
    1a40:	0001                	nop
    1a42:	9269                	srli	a2,a2,0x3a
    1a44:	0002                	c.slli64	zero
    1a46:	b400                	fsd	fs0,40(s0)
    1a48:	0002                	c.slli64	zero
    1a4a:	0100                	addi	s0,sp,128
    1a4c:	5e00                	lw	s0,56(a2)
    1a4e:	02b4                	addi	a3,sp,328
    1a50:	0000                	unimp
    1a52:	0326                	slli	t1,t1,0x9
    1a54:	0000                	unimp
    1a56:	0001                	nop
    1a58:	2669                	jal	1de2 <random_keys+0x1d6>
    1a5a:	36000003          	lb	zero,864(zero) # 360 <polymult+0x194>
    1a5e:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1a62:	f300                	fsw	fs0,32(a4)
    1a64:	5e01                	li	t3,-32
    1a66:	369f 0003 be00      	0xbe000003369f
    1a6c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1a70:	6900                	flw	fs0,16(a0)
	...
    1a7a:	01cc                	addi	a1,sp,196
    1a7c:	0000                	unimp
    1a7e:	0208                	addi	a0,sp,256
    1a80:	0000                	unimp
    1a82:	0001                	nop
    1a84:	085f 0002 1400      	0x14000002085f
    1a8a:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1a8e:	7800                	flw	fs0,48(s0)
    1a90:	7fbc                	flw	fa5,120(a5)
    1a92:	0314                	addi	a3,sp,384
    1a94:	0000                	unimp
    1a96:	03be                	slli	t2,t2,0xf
    1a98:	0000                	unimp
    1a9a:	bc910003          	lb	zero,-1079(sp)
    1a9e:	007f                	0x7f
    1aa0:	0000                	unimp
    1aa2:	0000                	unimp
    1aa4:	0000                	unimp
    1aa6:	2e00                	fld	fs0,24(a2)
    1aa8:	0002                	c.slli64	zero
    1aaa:	4200                	lw	s0,0(a2)
    1aac:	0002                	c.slli64	zero
    1aae:	0200                	addi	s0,sp,256
    1ab0:	8700                	0x8700
    1ab2:	4200                	lw	s0,0(a2)
    1ab4:	0002                	c.slli64	zero
    1ab6:	fa00                	fsw	fs0,48(a2)
    1ab8:	0002                	c.slli64	zero
    1aba:	0200                	addi	s0,sp,256
    1abc:	8500                	0x8500
    1abe:	3600                	fld	fs0,40(a2)
    1ac0:	a0000003          	lb	zero,-1536(zero) # fffffa00 <_stack_start+0xfffefa00>
    1ac4:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1ac8:	8500                	0x8500
	...
    1ad2:	3400                	fld	fs0,40(s0)
    1ad4:	0002                	c.slli64	zero
    1ad6:	4200                	lw	s0,0(a2)
    1ad8:	0002                	c.slli64	zero
    1ada:	0200                	addi	s0,sp,256
    1adc:	3000                	fld	fs0,32(s0)
    1ade:	429f 0002 5500      	0x55000002429f
    1ae4:	0002                	c.slli64	zero
    1ae6:	0100                	addi	s0,sp,128
    1ae8:	5d00                	lw	s0,56(a0)
    1aea:	0256                	slli	tp,tp,0x15
    1aec:	0000                	unimp
    1aee:	0262                	slli	tp,tp,0x18
    1af0:	0000                	unimp
    1af2:	0002                	c.slli64	zero
    1af4:	9f30                	0x9f30
    1af6:	0262                	slli	tp,tp,0x18
    1af8:	0000                	unimp
    1afa:	0268                	addi	a0,sp,268
    1afc:	0000                	unimp
    1afe:	0001                	nop
    1b00:	6e5c                	flw	fa5,28(a2)
    1b02:	0002                	c.slli64	zero
    1b04:	7200                	flw	fs0,32(a2)
    1b06:	0002                	c.slli64	zero
    1b08:	0200                	addi	s0,sp,256
    1b0a:	3000                	fld	fs0,32(s0)
    1b0c:	729f 0002 8800      	0x88000002729f
    1b12:	0002                	c.slli64	zero
    1b14:	0100                	addi	s0,sp,128
    1b16:	5c00                	lw	s0,56(s0)
    1b18:	0292                	slli	t0,t0,0x4
    1b1a:	0000                	unimp
    1b1c:	02b4                	addi	a3,sp,328
    1b1e:	0000                	unimp
    1b20:	0001                	nop
    1b22:	b45d                	j	15c8 <_bss_start+0x254>
    1b24:	0002                	c.slli64	zero
    1b26:	c400                	sw	s0,8(s0)
    1b28:	0002                	c.slli64	zero
    1b2a:	0100                	addi	s0,sp,128
    1b2c:	5c00                	lw	s0,56(s0)
    1b2e:	02c4                	addi	s1,sp,324
    1b30:	0000                	unimp
    1b32:	02ca                	slli	t0,t0,0x12
    1b34:	0000                	unimp
    1b36:	7f7c0003          	lb	zero,2039(s8) # 177f7 <_stack_start+0x77f7>
    1b3a:	ca9f 0002 dc00      	0xdc000002ca9f
    1b40:	0002                	c.slli64	zero
    1b42:	0100                	addi	s0,sp,128
    1b44:	5c00                	lw	s0,56(s0)
    1b46:	02dc                	addi	a5,sp,324
    1b48:	0000                	unimp
    1b4a:	02e2                	slli	t0,t0,0x18
    1b4c:	0000                	unimp
    1b4e:	7f7c0003          	lb	zero,2039(s8)
    1b52:	e29f 0002 e600      	0xe6000002e29f
    1b58:	0002                	c.slli64	zero
    1b5a:	0100                	addi	s0,sp,128
    1b5c:	5c00                	lw	s0,56(s0)
    1b5e:	02ec                	addi	a1,sp,332
    1b60:	0000                	unimp
    1b62:	02fa                	slli	t0,t0,0x1e
    1b64:	0000                	unimp
    1b66:	0001                	nop
    1b68:	fa5e                	fsw	fs7,52(sp)
    1b6a:	0002                	c.slli64	zero
    1b6c:	1600                	addi	s0,sp,800
    1b6e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1b72:	5900                	lw	s0,48(a0)
    1b74:	0382                	c.slli64	t2
    1b76:	0000                	unimp
    1b78:	03a0                	addi	s0,sp,456
    1b7a:	0000                	unimp
    1b7c:	0001                	nop
    1b7e:	a05e                	fsd	fs7,0(sp)
    1b80:	be000003          	lb	zero,-1056(zero) # fffffbe0 <_stack_start+0xfffefbe0>
    1b84:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1b88:	5900                	lw	s0,48(a0)
	...
    1b92:	028a                	slli	t0,t0,0x2
    1b94:	0000                	unimp
    1b96:	0292                	slli	t0,t0,0x4
    1b98:	0000                	unimp
    1b9a:	0001                	nop
    1b9c:	0002926b          	0x2926b
    1ba0:	ae00                	fsd	fs0,24(a2)
    1ba2:	0002                	c.slli64	zero
    1ba4:	0100                	addi	s0,sp,128
    1ba6:	5f00                	lw	s0,56(a4)
    1ba8:	02e6                	slli	t0,t0,0x19
    1baa:	0000                	unimp
    1bac:	02ec                	addi	a1,sp,332
    1bae:	0000                	unimp
    1bb0:	0001                	nop
    1bb2:	0003086b          	0x3086b
    1bb6:	3600                	fld	fs0,40(a2)
    1bb8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1bbc:	5e00                	lw	s0,56(a2)
    1bbe:	0336                	slli	t1,t1,0xd
    1bc0:	0000                	unimp
    1bc2:	0382                	c.slli64	t2
    1bc4:	0000                	unimp
    1bc6:	0001                	nop
    1bc8:	0003826b          	0x3826b
    1bcc:	8600                	0x8600
    1bce:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1bd2:	5d00                	lw	s0,56(a0)
    1bd4:	0386                	slli	t2,t2,0x1
    1bd6:	0000                	unimp
    1bd8:	0390                	addi	a2,sp,448
    1bda:	0000                	unimp
    1bdc:	7f7d0003          	lb	zero,2039(s10)
    1be0:	909f 0003 9a00      	0x9a000003909f
    1be6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1bea:	5d00                	lw	s0,56(a0)
    1bec:	03ae                	slli	t2,t2,0xb
    1bee:	0000                	unimp
    1bf0:	03b2                	slli	t2,t2,0xc
    1bf2:	0000                	unimp
    1bf4:	0001                	nop
    1bf6:	b25e                	fsd	fs7,288(sp)
    1bf8:	bc000003          	lb	zero,-1088(zero) # fffffbc0 <_stack_start+0xfffefbc0>
    1bfc:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1c00:	7e00                	flw	fs0,56(a2)
    1c02:	9f7f                	0x9f7f
    1c04:	03bc                	addi	a5,sp,456
    1c06:	0000                	unimp
    1c08:	03be                	slli	t2,t2,0xf
    1c0a:	0000                	unimp
    1c0c:	0001                	nop
    1c0e:	005e                	c.slli	zero,0x17
    1c10:	0000                	unimp
    1c12:	0000                	unimp
    1c14:	0000                	unimp
    1c16:	3600                	fld	fs0,40(a2)
    1c18:	48000003          	lb	zero,1152(zero) # 480 <polymult2+0xc2>
    1c1c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1c20:	5f00                	lw	s0,56(a4)
    1c22:	0348                	addi	a0,sp,388
    1c24:	0000                	unimp
    1c26:	034e                	slli	t1,t1,0x13
    1c28:	0000                	unimp
    1c2a:	017f0003          	lb	zero,23(t5)
    1c2e:	4e9f 0003 5a00      	0x5a0000034e9f
    1c34:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1c38:	5f00                	lw	s0,56(a4)
    1c3a:	035e                	slli	t1,t1,0x17
    1c3c:	0000                	unimp
    1c3e:	0370                	addi	a2,sp,396
    1c40:	0000                	unimp
    1c42:	0001                	nop
    1c44:	705f 0003 7600      	0x76000003705f
    1c4a:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1c4e:	7f00                	flw	fs0,56(a4)
    1c50:	9f01                	0x9f01
    1c52:	0376                	slli	t1,t1,0x1d
    1c54:	0000                	unimp
    1c56:	0382                	c.slli64	t2
    1c58:	0000                	unimp
    1c5a:	0001                	nop
    1c5c:	005f 0000 0000      	0x5f
    1c62:	0000                	unimp
    1c64:	0c00                	addi	s0,sp,528
    1c66:	36000003          	lb	zero,864(zero) # 360 <polymult+0x194>
    1c6a:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1c6e:	0300                	addi	s0,sp,384
    1c70:	1374                	addi	a3,sp,428
    1c72:	0000                	unimp
    1c74:	009f 0000 0000      	0x9f
    1c7a:	0000                	unimp
    1c7c:	3200                	fld	fs0,32(a2)
    1c7e:	0002                	c.slli64	zero
    1c80:	2400                	fld	fs0,8(s0)
    1c82:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1c86:	8800                	0x8800
    1c88:	3600                	fld	fs0,40(a2)
    1c8a:	be000003          	lb	zero,-1056(zero) # fffffbe0 <_stack_start+0xfffefbe0>
    1c8e:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1c92:	8800                	0x8800
	...
    1c9c:	3400                	fld	fs0,40(s0)
    1c9e:	0002                	c.slli64	zero
    1ca0:	1000                	addi	s0,sp,32
    1ca2:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1ca6:	7200                	flw	fs0,32(a2)
    1ca8:	1000                	addi	s0,sp,32
    1caa:	18000003          	lb	zero,384(zero) # 180 <array_equ+0x4a>
    1cae:	0c000003          	lb	zero,192(zero) # c0 <array_add+0x2e>
    1cb2:	8800                	0x8800
    1cb4:	8200                	0x8200
    1cb6:	3200                	fld	fs0,32(a2)
    1cb8:	2324                	fld	fs1,64(a4)
    1cba:	1af0090f          	0x1af0090f
    1cbe:	181c                	addi	a5,sp,48
    1cc0:	24000003          	lb	zero,576(zero) # 240 <polymult+0x74>
    1cc4:	0d000003          	lb	zero,208(zero) # d0 <array_add+0x3e>
    1cc8:	8800                	0x8800
    1cca:	f300                	fsw	fs0,32(a4)
    1ccc:	5d01                	li	s10,-32
    1cce:	2432                	fld	fs0,264(sp)
    1cd0:	f0090f23          	sb	zero,-226(s2)
    1cd4:	1c1a                	slli	s8,s8,0x26
    1cd6:	0336                	slli	t1,t1,0xd
    1cd8:	0000                	unimp
    1cda:	03be                	slli	t2,t2,0xf
    1cdc:	0000                	unimp
    1cde:	0002                	c.slli64	zero
    1ce0:	0072                	c.slli	zero,0x1c
	...
    1cea:	022e                	slli	tp,tp,0xb
    1cec:	0000                	unimp
    1cee:	028a                	slli	t0,t0,0x2
    1cf0:	0000                	unimp
    1cf2:	0001                	nop
    1cf4:	00028a6b          	0x28a6b
    1cf8:	9200                	0x9200
    1cfa:	0002                	c.slli64	zero
    1cfc:	0300                	addi	s0,sp,384
    1cfe:	8200                	0x8200
    1d00:	9f7f                	0x9f7f
    1d02:	0292                	slli	t0,t0,0x4
    1d04:	0000                	unimp
    1d06:	02e6                	slli	t0,t0,0x19
    1d08:	0000                	unimp
    1d0a:	0001                	nop
    1d0c:	0002e66b          	0x2e66b
    1d10:	1800                	addi	s0,sp,48
    1d12:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1d16:	8200                	0x8200
    1d18:	9f7f                	0x9f7f
    1d1a:	0318                	addi	a4,sp,384
    1d1c:	0000                	unimp
    1d1e:	0336                	slli	t1,t1,0xd
    1d20:	0000                	unimp
    1d22:	0006                	c.slli	zero,0x1
    1d24:	315d01f3          	0x315d01f3
    1d28:	9f1c                	0x9f1c
    1d2a:	0336                	slli	t1,t1,0xd
    1d2c:	0000                	unimp
    1d2e:	03be                	slli	t2,t2,0xf
    1d30:	0000                	unimp
    1d32:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0xa0>
    1d36:	009f 0000 0000      	0x9f
    1d3c:	0000                	unimp
    1d3e:	e200                	fsw	fs0,0(a2)
    1d40:	0001                	nop
    1d42:	1c00                	addi	s0,sp,560
    1d44:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1d48:	6400                	flw	fs0,8(s0)
    1d4a:	031c                	addi	a5,sp,384
    1d4c:	0000                	unimp
    1d4e:	0336                	slli	t1,t1,0xd
    1d50:	0000                	unimp
    1d52:	b891000b          	0xb891000b
    1d56:	067f                	0x67f
    1d58:	225d01f3          	0x225d01f3
    1d5c:	1c31                	addi	s8,s8,-20
    1d5e:	369f 0003 be00      	0xbe000003369f
    1d64:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1d68:	6400                	flw	fs0,8(s0)
	...
    1d72:	0232                	slli	tp,tp,0xc
    1d74:	0000                	unimp
    1d76:	0320                	addi	s0,sp,392
    1d78:	0000                	unimp
    1d7a:	0001                	nop
    1d7c:	2066                	fld	ft0,88(sp)
    1d7e:	36000003          	lb	zero,864(zero) # 360 <polymult+0x194>
    1d82:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    1d86:	9100                	0x9100
    1d88:	7fb8                	flw	fa4,120(a5)
    1d8a:	3106                	fld	ft2,96(sp)
    1d8c:	9f1c                	0x9f1c
    1d8e:	0336                	slli	t1,t1,0xd
    1d90:	0000                	unimp
    1d92:	03be                	slli	t2,t2,0xf
    1d94:	0000                	unimp
    1d96:	0001                	nop
    1d98:	0066                	c.slli	zero,0x19
    1d9a:	0000                	unimp
    1d9c:	0000                	unimp
    1d9e:	0000                	unimp
    1da0:	3200                	fld	fs0,32(a2)
    1da2:	0002                	c.slli64	zero
    1da4:	8a00                	0x8a00
    1da6:	0002                	c.slli64	zero
    1da8:	0100                	addi	s0,sp,128
    1daa:	6b00                	flw	fs0,16(a4)
    1dac:	028a                	slli	t0,t0,0x2
    1dae:	0000                	unimp
    1db0:	0292                	slli	t0,t0,0x4
    1db2:	0000                	unimp
    1db4:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0xa0>
    1db8:	929f 0002 e600      	0xe6000002929f
    1dbe:	0002                	c.slli64	zero
    1dc0:	0100                	addi	s0,sp,128
    1dc2:	6b00                	flw	fs0,16(a4)
    1dc4:	02e6                	slli	t0,t0,0x19
    1dc6:	0000                	unimp
    1dc8:	0318                	addi	a4,sp,384
    1dca:	0000                	unimp
    1dcc:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0xa0>
    1dd0:	189f 0003 3600      	0x36000003189f
    1dd6:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1dda:	f300                	fsw	fs0,32(a4)
    1ddc:	5d01                	li	s10,-32
    1dde:	1c31                	addi	s8,s8,-20
    1de0:	369f 0003 be00      	0xbe000003369f
    1de6:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1dea:	8200                	0x8200
    1dec:	9f7f                	0x9f7f
	...
    1df6:	0136                	slli	sp,sp,0xd
    1df8:	0000                	unimp
    1dfa:	018e                	slli	gp,gp,0x3
    1dfc:	0000                	unimp
    1dfe:	0001                	nop
    1e00:	00018e5b          	0x18e5b
    1e04:	9600                	0x9600
    1e06:	0001                	nop
    1e08:	0400                	addi	s0,sp,512
    1e0a:	f300                	fsw	fs0,32(a4)
    1e0c:	5b01                	li	s6,-32
    1e0e:	969f 0001 cc00      	0xcc000001969f
    1e14:	0001                	nop
    1e16:	0100                	addi	s0,sp,128
    1e18:	5b00                	lw	s0,48(a4)
	...
    1e22:	0136                	slli	sp,sp,0xd
    1e24:	0000                	unimp
    1e26:	014e                	slli	sp,sp,0x13
    1e28:	0000                	unimp
    1e2a:	0001                	nop
    1e2c:	4e5c                	lw	a5,28(a2)
    1e2e:	0001                	nop
    1e30:	5600                	lw	s0,40(a2)
    1e32:	0001                	nop
    1e34:	0400                	addi	s0,sp,512
    1e36:	f300                	fsw	fs0,32(a4)
    1e38:	5c01                	li	s8,-32
    1e3a:	569f 0001 6800      	0x68000001569f
    1e40:	0001                	nop
    1e42:	0100                	addi	s0,sp,128
    1e44:	5c00                	lw	s0,56(s0)
    1e46:	0168                	addi	a0,sp,140
    1e48:	0000                	unimp
    1e4a:	0178                	addi	a4,sp,140
    1e4c:	0000                	unimp
    1e4e:	0004                	0x4
    1e50:	9f5c01f3          	0x9f5c01f3
    1e54:	0178                	addi	a4,sp,140
    1e56:	0000                	unimp
    1e58:	018a                	slli	gp,gp,0x2
    1e5a:	0000                	unimp
    1e5c:	0001                	nop
    1e5e:	8a5c                	0x8a5c
    1e60:	0001                	nop
    1e62:	a800                	fsd	fs0,16(s0)
    1e64:	0001                	nop
    1e66:	0400                	addi	s0,sp,512
    1e68:	f300                	fsw	fs0,32(a4)
    1e6a:	5c01                	li	s8,-32
    1e6c:	a89f 0001 cc00      	0xcc000001a89f
    1e72:	0001                	nop
    1e74:	0100                	addi	s0,sp,128
    1e76:	5c00                	lw	s0,56(s0)
	...
    1e80:	0136                	slli	sp,sp,0xd
    1e82:	0000                	unimp
    1e84:	0150                	addi	a2,sp,132
    1e86:	0000                	unimp
    1e88:	0002                	c.slli64	zero
    1e8a:	9f30                	0x9f30
    1e8c:	0150                	addi	a2,sp,132
    1e8e:	0000                	unimp
    1e90:	0156                	slli	sp,sp,0x15
    1e92:	0000                	unimp
    1e94:	0001                	nop
    1e96:	565f 0001 6200      	0x62000001565f
    1e9c:	0001                	nop
    1e9e:	0200                	addi	s0,sp,256
    1ea0:	3000                	fld	fs0,32(s0)
    1ea2:	629f 0001 6e00      	0x6e000001629f
    1ea8:	0001                	nop
    1eaa:	0100                	addi	s0,sp,128
    1eac:	5f00                	lw	s0,56(a4)
    1eae:	0178                	addi	a4,sp,140
    1eb0:	0000                	unimp
    1eb2:	0184                	addi	s1,sp,192
    1eb4:	0000                	unimp
    1eb6:	0002                	c.slli64	zero
    1eb8:	9f30                	0x9f30
    1eba:	0184                	addi	s1,sp,192
    1ebc:	0000                	unimp
    1ebe:	018a                	slli	gp,gp,0x2
    1ec0:	0000                	unimp
    1ec2:	0001                	nop
    1ec4:	965f 0001 cc00      	0xcc000001965f
    1eca:	0001                	nop
    1ecc:	0100                	addi	s0,sp,128
    1ece:	5f00                	lw	s0,56(a4)
	...
    1ed8:	019a                	slli	gp,gp,0x6
    1eda:	0000                	unimp
    1edc:	01a0                	addi	s0,sp,200
    1ede:	0000                	unimp
    1ee0:	0006                	c.slli	zero,0x1
    1ee2:	007e007b          	0x7e007b
    1ee6:	9f22                	add	t5,t5,s0
    1ee8:	01a0                	addi	s0,sp,200
    1eea:	0000                	unimp
    1eec:	01a4                	addi	s1,sp,200
    1eee:	0000                	unimp
    1ef0:	0001                	nop
    1ef2:	005e                	c.slli	zero,0x17
    1ef4:	0000                	unimp
    1ef6:	0000                	unimp
    1ef8:	0000                	unimp
    1efa:	9a00                	0x9a00
    1efc:	0001                	nop
    1efe:	9e00                	0x9e00
    1f00:	0001                	nop
    1f02:	0600                	addi	s0,sp,768
    1f04:	7a00                	flw	fs0,48(a2)
    1f06:	7e00                	flw	fs0,56(a2)
    1f08:	2200                	fld	fs0,0(a2)
    1f0a:	9e9f 0001 a400      	0xa40000019e9f
    1f10:	0001                	nop
    1f12:	0100                	addi	s0,sp,128
    1f14:	5d00                	lw	s0,56(a0)
	...
    1f1e:	01ac                	addi	a1,sp,200
    1f20:	0000                	unimp
    1f22:	01b2                	slli	gp,gp,0xc
    1f24:	0000                	unimp
    1f26:	0006                	c.slli	zero,0x1
    1f28:	007e007b          	0x7e007b
    1f2c:	9f22                	add	t5,t5,s0
    1f2e:	01b2                	slli	gp,gp,0xc
    1f30:	0000                	unimp
    1f32:	01b6                	slli	gp,gp,0xd
    1f34:	0000                	unimp
    1f36:	0001                	nop
    1f38:	005e                	c.slli	zero,0x17
    1f3a:	0000                	unimp
    1f3c:	0000                	unimp
    1f3e:	0000                	unimp
    1f40:	ac00                	fsd	fs0,24(s0)
    1f42:	0001                	nop
    1f44:	b000                	fsd	fs0,32(s0)
    1f46:	0001                	nop
    1f48:	0600                	addi	s0,sp,768
    1f4a:	7a00                	flw	fs0,48(a2)
    1f4c:	7e00                	flw	fs0,56(a2)
    1f4e:	2200                	fld	fs0,0(a2)
    1f50:	b09f 0001 b600      	0xb6000001b09f
    1f56:	0001                	nop
    1f58:	0100                	addi	s0,sp,128
    1f5a:	6000                	flw	fs0,0(s0)
	...
    1f64:	01be                	slli	gp,gp,0xf
    1f66:	0000                	unimp
    1f68:	01c4                	addi	s1,sp,196
    1f6a:	0000                	unimp
    1f6c:	0006                	c.slli	zero,0x1
    1f6e:	007e007b          	0x7e007b
    1f72:	9f22                	add	t5,t5,s0
    1f74:	01c4                	addi	s1,sp,196
    1f76:	0000                	unimp
    1f78:	01c8                	addi	a0,sp,196
    1f7a:	0000                	unimp
    1f7c:	0001                	nop
    1f7e:	005e                	c.slli	zero,0x17
    1f80:	0000                	unimp
    1f82:	0000                	unimp
    1f84:	0000                	unimp
    1f86:	be00                	fsd	fs0,56(a2)
    1f88:	0001                	nop
    1f8a:	c200                	sw	s0,0(a2)
    1f8c:	0001                	nop
    1f8e:	0600                	addi	s0,sp,768
    1f90:	7a00                	flw	fs0,48(a2)
    1f92:	7e00                	flw	fs0,56(a2)
    1f94:	2200                	fld	fs0,0(a2)
    1f96:	c29f 0001 c800      	0xc8000001c29f
    1f9c:	0001                	nop
    1f9e:	0100                	addi	s0,sp,128
    1fa0:	6000                	flw	fs0,0(s0)
	...
    1faa:	0092                	slli	ra,ra,0x4
    1fac:	0000                	unimp
    1fae:	00ee                	slli	ra,ra,0x1b
    1fb0:	0000                	unimp
    1fb2:	0001                	nop
    1fb4:	ee5a                	fsw	fs6,28(sp)
    1fb6:	0000                	unimp
    1fb8:	fa00                	fsw	fs0,48(a2)
    1fba:	0000                	unimp
    1fbc:	0400                	addi	s0,sp,512
    1fbe:	f300                	fsw	fs0,32(a4)
    1fc0:	5a01                	li	s4,-32
    1fc2:	fa9f 0000 3000      	0x30000000fa9f
    1fc8:	0001                	nop
    1fca:	0100                	addi	s0,sp,128
    1fcc:	5a00                	lw	s0,48(a2)
	...
    1fd6:	0092                	slli	ra,ra,0x4
    1fd8:	0000                	unimp
    1fda:	00aa                	slli	ra,ra,0xa
    1fdc:	0000                	unimp
    1fde:	0001                	nop
    1fe0:	aa5c                	fsd	fa5,144(a2)
    1fe2:	0000                	unimp
    1fe4:	b200                	fsd	fs0,32(a2)
    1fe6:	0000                	unimp
    1fe8:	0400                	addi	s0,sp,512
    1fea:	f300                	fsw	fs0,32(a4)
    1fec:	5c01                	li	s8,-32
    1fee:	b29f 0000 c400      	0xc4000000b29f
    1ff4:	0000                	unimp
    1ff6:	0100                	addi	s0,sp,128
    1ff8:	5c00                	lw	s0,56(s0)
    1ffa:	00c4                	addi	s1,sp,68
    1ffc:	0000                	unimp
    1ffe:	00d8                	addi	a4,sp,68
    2000:	0000                	unimp
    2002:	0004                	0x4
    2004:	9f5c01f3          	0x9f5c01f3
    2008:	00d8                	addi	a4,sp,68
    200a:	0000                	unimp
    200c:	00ea                	slli	ra,ra,0x1a
    200e:	0000                	unimp
    2010:	0001                	nop
    2012:	ea5c                	fsw	fa5,20(a2)
    2014:	0000                	unimp
    2016:	0c00                	addi	s0,sp,528
    2018:	0001                	nop
    201a:	0400                	addi	s0,sp,512
    201c:	f300                	fsw	fs0,32(a4)
    201e:	5c01                	li	s8,-32
    2020:	0c9f 0001 3000      	0x300000010c9f
    2026:	0001                	nop
    2028:	0100                	addi	s0,sp,128
    202a:	5c00                	lw	s0,56(s0)
	...
    2034:	0092                	slli	ra,ra,0x4
    2036:	0000                	unimp
    2038:	00ac                	addi	a1,sp,72
    203a:	0000                	unimp
    203c:	0002                	c.slli64	zero
    203e:	9f30                	0x9f30
    2040:	00ac                	addi	a1,sp,72
    2042:	0000                	unimp
    2044:	00b2                	slli	ra,ra,0xc
    2046:	0000                	unimp
    2048:	0001                	nop
    204a:	b25f 0000 be00      	0xbe000000b25f
    2050:	0000                	unimp
    2052:	0200                	addi	s0,sp,256
    2054:	3000                	fld	fs0,32(s0)
    2056:	be9f 0000 d000      	0xd0000000be9f
    205c:	0000                	unimp
    205e:	0100                	addi	s0,sp,128
    2060:	5f00                	lw	s0,56(a4)
    2062:	00d8                	addi	a4,sp,68
    2064:	0000                	unimp
    2066:	00e4                	addi	s1,sp,76
    2068:	0000                	unimp
    206a:	0002                	c.slli64	zero
    206c:	9f30                	0x9f30
    206e:	00e4                	addi	s1,sp,76
    2070:	0000                	unimp
    2072:	00ea                	slli	ra,ra,0x1a
    2074:	0000                	unimp
    2076:	0001                	nop
    2078:	fa5f 0000 3000      	0x30000000fa5f
    207e:	0001                	nop
    2080:	0100                	addi	s0,sp,128
    2082:	5f00                	lw	s0,56(a4)
	...
    208c:	00fe                	slli	ra,ra,0x1f
    208e:	0000                	unimp
    2090:	0104                	addi	s1,sp,128
    2092:	0000                	unimp
    2094:	0006                	c.slli	zero,0x1
    2096:	007e007b          	0x7e007b
    209a:	9f22                	add	t5,t5,s0
    209c:	0104                	addi	s1,sp,128
    209e:	0000                	unimp
    20a0:	0108                	addi	a0,sp,128
    20a2:	0000                	unimp
    20a4:	0001                	nop
    20a6:	005e                	c.slli	zero,0x17
    20a8:	0000                	unimp
    20aa:	0000                	unimp
    20ac:	0000                	unimp
    20ae:	fe00                	fsw	fs0,56(a2)
    20b0:	0000                	unimp
    20b2:	0200                	addi	s0,sp,256
    20b4:	0001                	nop
    20b6:	0600                	addi	s0,sp,768
    20b8:	7a00                	flw	fs0,48(a2)
    20ba:	7e00                	flw	fs0,56(a2)
    20bc:	2200                	fld	fs0,0(a2)
    20be:	029f 0001 0800      	0x8000001029f
    20c4:	0001                	nop
    20c6:	0100                	addi	s0,sp,128
    20c8:	5d00                	lw	s0,56(a0)
	...
    20d2:	0110                	addi	a2,sp,128
    20d4:	0000                	unimp
    20d6:	0116                	slli	sp,sp,0x5
    20d8:	0000                	unimp
    20da:	0006                	c.slli	zero,0x1
    20dc:	007e007b          	0x7e007b
    20e0:	9f22                	add	t5,t5,s0
    20e2:	0116                	slli	sp,sp,0x5
    20e4:	0000                	unimp
    20e6:	011a                	slli	sp,sp,0x6
    20e8:	0000                	unimp
    20ea:	0001                	nop
    20ec:	005e                	c.slli	zero,0x17
    20ee:	0000                	unimp
    20f0:	0000                	unimp
    20f2:	0000                	unimp
    20f4:	1000                	addi	s0,sp,32
    20f6:	0001                	nop
    20f8:	1400                	addi	s0,sp,544
    20fa:	0001                	nop
    20fc:	0600                	addi	s0,sp,768
    20fe:	7a00                	flw	fs0,48(a2)
    2100:	7e00                	flw	fs0,56(a2)
    2102:	2200                	fld	fs0,0(a2)
    2104:	149f 0001 1a00      	0x1a000001149f
    210a:	0001                	nop
    210c:	0100                	addi	s0,sp,128
    210e:	6000                	flw	fs0,0(s0)
	...
    2118:	0122                	slli	sp,sp,0x8
    211a:	0000                	unimp
    211c:	0128                	addi	a0,sp,136
    211e:	0000                	unimp
    2120:	0006                	c.slli	zero,0x1
    2122:	007e007b          	0x7e007b
    2126:	9f22                	add	t5,t5,s0
    2128:	0128                	addi	a0,sp,136
    212a:	0000                	unimp
    212c:	012c                	addi	a1,sp,136
    212e:	0000                	unimp
    2130:	0001                	nop
    2132:	005e                	c.slli	zero,0x17
    2134:	0000                	unimp
    2136:	0000                	unimp
    2138:	0000                	unimp
    213a:	2200                	fld	fs0,0(a2)
    213c:	0001                	nop
    213e:	2600                	fld	fs0,8(a2)
    2140:	0001                	nop
    2142:	0600                	addi	s0,sp,768
    2144:	7a00                	flw	fs0,48(a2)
    2146:	7e00                	flw	fs0,56(a2)
    2148:	2200                	fld	fs0,0(a2)
    214a:	269f 0001 2c00      	0x2c000001269f
    2150:	0001                	nop
    2152:	0100                	addi	s0,sp,128
    2154:	6000                	flw	fs0,0(s0)
	...
    215e:	008c                	addi	a1,sp,64
    2160:	0000                	unimp
    2162:	0090                	addi	a2,sp,64
    2164:	0000                	unimp
    2166:	0001                	nop
    2168:	005a                	c.slli	zero,0x16
    216a:	0000                	unimp
    216c:	0000                	unimp
    216e:	0000                	unimp
    2170:	3000                	fld	fs0,32(s0)
    2172:	0001                	nop
    2174:	3400                	fld	fs0,40(s0)
    2176:	0001                	nop
    2178:	0100                	addi	s0,sp,128
    217a:	5a00                	lw	s0,48(a2)
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0e30                	addi	a2,sp,792
  16:	0000                	unimp
  18:	10b8                	addi	a4,sp,104
  1a:	0000                	unimp
  1c:	0128                	addi	a0,sp,136
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	00001bd7          	0x1bd7
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0ebc                	addi	a5,sp,856
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	008c                	addi	a1,sp,64
   2:	0000                	unimp
   4:	0ebc                	addi	a5,sp,856
   6:	0000                	unimp
   8:	10b8                	addi	a4,sp,104
   a:	0000                	unimp
   c:	11e0                	addi	s0,sp,236
	...
  16:	0000                	unimp
  18:	ffff                	0xffff
  1a:	ffff                	0xffff
  1c:	0000                	unimp
  1e:	0000                	unimp
  20:	0ebc                	addi	a5,sp,856
  22:	0000                	unimp
  24:	0f32                	slli	t5,t5,0xc
  26:	0000                	unimp
  28:	0000                	unimp
  2a:	0000                	unimp
  2c:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	2a2d                	jal	13a <array_equ+0x4>
       2:	0000                	unimp
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <polydiv+0x20e>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult+0x194>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <polydiv+0x186>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0x2c>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult+0x1be>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
  jal x0, default_exc_handler
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
  jal x0, reset_handler
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      86:	6972                	flw	fs2,28(sp)
  jal x0, default_exc_handler
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    switch(length%3) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <polydiv+0x1d8>
      a0:	0065                	c.nop	25
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
            for (i = 0; i < (length / 3); i++) {
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
      b0:	00000063          	beqz	zero,b0 <array_add+0x1e>
            for (i = 0; i < ((length-2) / 3); i++) {
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
      b8:	6564                	flw	fs1,76(a0)
      ba:	2e66                	fld	ft8,88(sp)
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
      c0:	5f00                	lw	s0,56(a4)
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0x18>
      de:	0200                	addi	s0,sp,256
      e0:	0000                	unimp
      e2:	6c647473          	csrrci	s0,0x6c6,8
      e6:	6269                	lui	tp,0x1a
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	682e                	flw	fa6,200(sp)
            a1[length-2] = a1[length-2] + a2[length-2];
      ea:	0300                	addi	s0,sp,384
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
      f0:	6975                	lui	s2,0x1d
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
      f6:	3e6e                	fld	ft8,248(sp)
} //end of function
      f8:	0000                	unimp
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fa:	0000                	unimp
      fc:	0500                	addi	s0,sp,640
    asm volatile(
      fe:	02050033          	mul	zero,a0,zero
     102:	008c                	addi	a1,sp,64
     104:	0000                	unimp
     106:	05010f03          	lb	t5,80(sp)
            for (i = 0; i < (length / 3); i++) {
     10a:	0305                	addi	t1,t1,1
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     10c:	00000907          	0x907
    asm volatile(
     110:	0301                	addi	t1,t1,0
     112:	0909                	addi	s2,s2,2
     114:	0004                	0x4
     116:	0501                	addi	a0,a0,0
     118:	0601                	addi	a2,a2,0
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	00090303          	lb	t1,0(s2) # b000 <_stack_len+0x7000>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	0100                	addi	s0,sp,128
     120:	2e05                	jal	450 <polymult2+0x92>
    asm volatile(
     122:	0306                	slli	t1,t1,0x1
     124:	0901                	addi	s2,s2,0
     126:	0002                	c.slli64	zero
     128:	0501                	addi	a0,a0,0
     12a:	0301                	addi	t1,t1,0
            for (i = 0; i < ((length-2) / 3); i++) {
     12c:	0901                	addi	s2,s2,0
     12e:	0000                	unimp
    asm volatile(
     130:	0501                	addi	a0,a0,0
     132:	0305                	addi	t1,t1,1
}
     134:	0901                	addi	s2,s2,0
    switch(length%3) {
     136:	0000                	unimp
     138:	0501                	addi	a0,a0,0
     13a:	0612                	slli	a2,a2,0x4
     13c:	00090003          	lb	zero,0(s2)
     140:	0100                	addi	s0,sp,128
     142:	0505                	addi	a0,a0,1
     144:	06090003          	lb	zero,96(s2)
     148:	0100                	addi	s0,sp,128
            for (i = 0; i < (length / 3); i++) {
     14a:	2505                	jal	76a <ext_euclid+0x12>
     14c:	0e090303          	lb	t1,224(s2)
     150:	0100                	addi	s0,sp,128
     152:	1905                	addi	s2,s2,-31
     154:	0200                	addi	s0,sp,256
            for (i = 0; i < ((length-2) / 3); i++) {
     156:	0104                	addi	s1,sp,128
     158:	0306                	slli	t1,t1,0x1
     15a:	0900                	addi	s0,sp,144
     15c:	0006                	c.slli	zero,0x1
     15e:	0501                	addi	a0,a0,0
     160:	000d                	c.nop	3
     162:	0402                	c.slli64	s0
     164:	0601                	addi	a2,a2,0
            a1[length-1] = a2[length-1];
     166:	00090003          	lb	zero,0(s2)
     16a:	0100                	addi	s0,sp,128
     16c:	2505                	jal	78c <ext_euclid+0x34>
     16e:	06090b03          	lb	s6,96(s2)
     172:	0100                	addi	s0,sp,128
     174:	2905                	jal	5a4 <polydiv+0x88>
     176:	04090003          	lb	zero,64(s2)
            for (i = 0; i < ((length-1) / 3); i++) {
     17a:	0100                	addi	s0,sp,128
     17c:	1405                	addi	s0,s0,-31
     17e:	04090003          	lb	zero,64(s2)
     182:	0100                	addi	s0,sp,128
     184:	1905                	addi	s2,s2,-31
     186:	0200                	addi	s0,sp,256
            a1[length-1] = a2[length-1];
     188:	0104                	addi	s1,sp,128
            a1[length-2] = a2[length-2];
     18a:	0306                	slli	t1,t1,0x1
     18c:	0900                	addi	s0,sp,144
     18e:	0004                	0x4
     190:	0501                	addi	a0,a0,0
     192:	000d                	c.nop	3
} //end of function
     194:	0402                	c.slli64	s0
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     196:	0601                	addi	a2,a2,0
     198:	00090003          	lb	zero,0(s2)
    asm volatile(
     19c:	0100                	addi	s0,sp,128
     19e:	0306                	slli	t1,t1,0x1
     1a0:	00040903          	lb	s2,0(s0)
            for (i = 0; i < (length / 3); i++) {
     1a4:	0501                	addi	a0,a0,0
     1a6:	061e                	slli	a2,a2,0x7
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1a8:	00090003          	lb	zero,0(s2)
    asm volatile(
     1ac:	0100                	addi	s0,sp,128
     1ae:	2d05                	jal	7de <ext_euclid+0x86>
     1b0:	08090003          	lb	zero,128(s2)
     1b4:	0100                	addi	s0,sp,128
            for (i = 0; i < ((length-1) / 3); i++) {
     1b6:	2905                	jal	5e6 <polydiv+0xca>
     1b8:	04090003          	lb	zero,64(s2)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1bc:	0100                	addi	s0,sp,128
    asm volatile(
     1be:	1a05                	addi	s4,s4,-31
     1c0:	06090003          	lb	zero,96(s2)
     1c4:	0100                	addi	s0,sp,128
     1c6:	2505                	jal	7e6 <ext_euclid+0x8e>
            for (i = 0; i < ((length-2) / 3); i++) {
     1c8:	04097703          	0x4097703
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1cc:	0100                	addi	s0,sp,128
     1ce:	2905                	jal	5fe <polydiv+0xe2>
     1d0:	04090003          	lb	zero,64(s2)
    int line[size_b][size_a + size_b];
     1d4:	0100                	addi	s0,sp,128
     1d6:	1405                	addi	s0,s0,-31
     1d8:	04090003          	lb	zero,64(s2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1dc:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     1de:	1905                	addi	s2,s2,-31
     1e0:	0200                	addi	s0,sp,256
     1e2:	0104                	addi	s1,sp,128
     1e4:	0306                	slli	t1,t1,0x1
     1e6:	0900                	addi	s0,sp,144
     1e8:	0004                	0x4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ea:	0501                	addi	a0,a0,0
     1ec:	000d                	c.nop	3
     1ee:	0402                	c.slli64	s0
     1f0:	0601                	addi	a2,a2,0
     1f2:	00090003          	lb	zero,0(s2)
     1f6:	0100                	addi	s0,sp,128
     1f8:	0306                	slli	t1,t1,0x1
     1fa:	00040903          	lb	s2,0(s0)
     1fe:	0501                	addi	a0,a0,0
     200:	061e                	slli	a2,a2,0x7
    int line[size_b][size_a + size_b];
     202:	00090003          	lb	zero,0(s2)
    int pola[size_a];
     206:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     208:	0d05                	addi	s10,s10,1
    int pola[size_a];
     20a:	0306                	slli	t1,t1,0x1
    int line[size_b][size_a + size_b];
     20c:	00020907          	0x20907
    int pola[size_a];
     210:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     212:	061e                	slli	a2,a2,0x7
    int pola[size_a];
     214:	00090003          	lb	zero,0(s2)
    int polb[size_b];
     218:	0100                	addi	s0,sp,128
     21a:	2d05                	jal	84a <ext_euclid+0xf2>
     21c:	04090003          	lb	zero,64(s2)
     220:	0100                	addi	s0,sp,128
     222:	2905                	jal	652 <polydiv+0x136>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     224:	02090003          	lb	zero,32(s2)
     228:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     22a:	1a05                	addi	s4,s4,-31
     22c:	06090003          	lb	zero,96(s2)
    int pola[size_a];
     230:	0100                	addi	s0,sp,128
    int polb[size_b];
     232:	0605                	addi	a2,a2,1
    for (i = 0; i < size_b; ++i){
     234:	0306                	slli	t1,t1,0x1
     236:	0901                	addi	s2,s2,0
     238:	0002                	c.slli64	zero
            product[j] = 0;
     23a:	0501                	addi	a0,a0,0
     23c:	0601                	addi	a2,a2,0
     23e:	00090203          	lb	tp,0(s2)
    for (i = 0; i < size_b; ++i){
     242:	0100                	addi	s0,sp,128
     244:	1105                	addi	sp,sp,-31
    array_equ(pola,a,size_a);
     246:	0200                	addi	s0,sp,256
     248:	0304                	addi	s1,sp,384
     24a:	0306                	slli	t1,t1,0x1
     24c:	0002096f          	jal	s2,2024c <_stack_start+0x1024c>
     250:	0501                	addi	a0,a0,0
     252:	0005                	c.nop	1
     254:	0402                	c.slli64	s0
    for (i = 0; i < size_a; ++i){
     256:	096d0303          	lb	t1,150(s10)
     25a:	0004                	0x4
     25c:	0001                	nop
     25e:	0402                	c.slli64	s0
     260:	09090303          	lb	t1,144(s2)
     264:	000a                	c.slli	zero,0x2
    array_equ(polb,b,size_b);
     266:	0501                	addi	a0,a0,0
     268:	0402002b          	0x402002b
     26c:	09090303          	lb	t1,144(s2)
   for (i = 0; i < size_b; ++i){
     270:	0000                	unimp
     272:	0501                	addi	a0,a0,0
     274:	002c                	addi	a1,sp,8
    if(star_mult == 1){
     276:	0402                	c.slli64	s0
     278:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
     27c:	0009                	c.nop	2
     27e:	0100                	addi	s0,sp,128
     280:	1105                	addi	sp,sp,-31
     282:	0200                	addi	s0,sp,256
     284:	0304                	addi	s1,sp,384
     286:	0306                	slli	t1,t1,0x1
     288:	0906                	slli	s2,s2,0x1
        for (j = size_b -1; j >= 0; j = j-1){
     28a:	0004                	0x4
     28c:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     28e:	0005                	c.nop	1
     290:	0402                	c.slli64	s0
            product[j] = 0;
     292:	09680303          	lb	t1,150(a6)
     296:	0004                	0x4
            line[i][j] = 0;
     298:	0001                	nop
     29a:	0402                	c.slli64	s0
            product[j] = 0;
     29c:	09090303          	lb	t1,144(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     2a0:	000a                	c.slli	zero,0x2
     2a2:	0501                	addi	a0,a0,0
     2a4:	0402002f          	0x402002f
    for (i = 0; i < size_b; ++i){
     2a8:	090e0303          	lb	t1,144(t3) # 1a090 <_stack_start+0xa090>
     2ac:	0000                	unimp
     2ae:	0501                	addi	a0,a0,0
        for(j = 0; j < size_a + size_b -1; ++j){
     2b0:	0030                	addi	a2,sp,8
     2b2:	0402                	c.slli64	s0
            pola[i] = pola[i] + mod;
     2b4:	00030603          	lb	a2,0(t1)
        while (pola[i] < 0){
     2b8:	0009                	c.nop	2
     2ba:	0100                	addi	s0,sp,128
     2bc:	1105                	addi	sp,sp,-31
        pola[i] = pola[i] % mod;
     2be:	0200                	addi	s0,sp,256
     2c0:	0304                	addi	s1,sp,384
    for (i = 0; i < size_a; ++i){
     2c2:	0306                	slli	t1,t1,0x1
     2c4:	00040907          	0x40907
        pola[i] = pola[i] % mod;
     2c8:	0501                	addi	a0,a0,0
    for (i = 0; i < size_a; ++i){
     2ca:	0005                	c.nop	1
            polb[i] = polb[i] + mod;
     2cc:	0402                	c.slli64	s0
     2ce:	09620303          	lb	t1,150(tp) # 1a096 <_stack_start+0xa096>
        while (polb[i] < 0){
     2d2:	0004                	0x4
     2d4:	0001                	nop
        polb[i] = polb[i] % mod;
     2d6:	0402                	c.slli64	s0
     2d8:	09090303          	lb	t1,144(s2)
   for (i = 0; i < size_b; ++i){
     2dc:	000a                	c.slli	zero,0x2
        polb[i] = polb[i] % mod;
     2de:	0501                	addi	a0,a0,0
     2e0:	0402002f          	0x402002f
    if(star_mult == 1){
     2e4:	09140303          	lb	t1,145(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     2e8:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     2ea:	0501                	addi	a0,a0,0
    for (i = 0; i < size_b; ++i){
     2ec:	0030                	addi	a2,sp,8
     2ee:	0402                	c.slli64	s0
        for(i = 0; i < size_b; ++i){
     2f0:	00030603          	lb	a2,0(t1)
             array_add(product,line[i],size_a+size_b-1);
     2f4:	0009                	c.nop	2
     2f6:	0100                	addi	s0,sp,128
     2f8:	3305                	jal	18 <__DYNAMIC+0x18>
        for(i = 0; i < size_b; ++i){
     2fa:	0306                	slli	t1,t1,0x1
     2fc:	090a                	slli	s2,s2,0x2
     2fe:	0004                	0x4
     300:	0501                	addi	a0,a0,0
     302:	0305                	addi	t1,t1,1
     304:	0906                	slli	s2,s2,0x1
    for(j = 0; j < size_a + size_b -1; ++j){
     306:	0000                	unimp
     308:	0301                	addi	t1,t1,0
     30a:	0909                	addi	s2,s2,2
}
     30c:	0004                	0x4
     30e:	0501                	addi	a0,a0,0
     310:	0601                	addi	a2,a2,0
     312:	00090203          	lb	tp,0(s2)
     316:	0100                	addi	s0,sp,128
     318:	2c05                	jal	548 <polydiv+0x2c>
     31a:	0306                	slli	t1,t1,0x1
     31c:	0901                	addi	s2,s2,0
     31e:	0002                	c.slli64	zero
     320:	0501                	addi	a0,a0,0
     322:	0301                	addi	t1,t1,0
     324:	0901                	addi	s2,s2,0
     326:	0000                	unimp
     328:	0501                	addi	a0,a0,0
     32a:	0305                	addi	t1,t1,1
     32c:	0901                	addi	s2,s2,0
     32e:	0000                	unimp
     330:	0501                	addi	a0,a0,0
     332:	0612                	slli	a2,a2,0x4
     334:	00090003          	lb	zero,0(s2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     338:	0100                	addi	s0,sp,128
     33a:	0505                	addi	a0,a0,1
     33c:	06090003          	lb	zero,96(s2)
     340:	0100                	addi	s0,sp,128
     342:	2505                	jal	962 <ext_euclid+0x20a>
     344:	0e090303          	lb	t1,224(s2)
     348:	0100                	addi	s0,sp,128
     34a:	1905                	addi	s2,s2,-31
     34c:	0200                	addi	s0,sp,256
            for (k = size_a-1; k >= 0; k = k-1 ){
     34e:	0104                	addi	s1,sp,128
     350:	0306                	slli	t1,t1,0x1
        for (j = size_b -1; j >= 0; j = j-1){
     352:	0900                	addi	s0,sp,144
     354:	0006                	c.slli	zero,0x1
     356:	0501                	addi	a0,a0,0
     358:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     35a:	0402                	c.slli64	s0
     35c:	0601                	addi	a2,a2,0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     35e:	00090003          	lb	zero,0(s2)
     362:	0100                	addi	s0,sp,128
     364:	2505                	jal	984 <ext_euclid+0x22c>
     366:	06090b03          	lb	s6,96(s2)
     36a:	0100                	addi	s0,sp,128
     36c:	2905                	jal	79c <ext_euclid+0x44>
            for (k = size_a-1; k >= 0; k = k-1 ){
     36e:	04090003          	lb	zero,64(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     372:	0100                	addi	s0,sp,128
     374:	1405                	addi	s0,s0,-31
            for (k = size_a-1; k >= 0; k = k-1 ){
     376:	04090003          	lb	zero,64(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     37a:	0100                	addi	s0,sp,128
     37c:	1905                	addi	s2,s2,-31
     37e:	0200                	addi	s0,sp,256
     380:	0104                	addi	s1,sp,128
            line[i][j] = line[i][j] % mod;
     382:	0306                	slli	t1,t1,0x1
        for(j = 0; j < size_a + size_b -1; ++j){
     384:	0900                	addi	s0,sp,144
     386:	0004                	0x4
            line[i][j] = line[i][j] % mod;
     388:	0501                	addi	a0,a0,0
     38a:	000d                	c.nop	3
     38c:	0402                	c.slli64	s0
     38e:	0601                	addi	a2,a2,0
        for(j = 0; j < size_a + size_b -1; ++j){
     390:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_b; ++i){
     394:	0100                	addi	s0,sp,128
     396:	0306                	slli	t1,t1,0x1
     398:	00040903          	lb	s2,0(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     39c:	0501                	addi	a0,a0,0
     39e:	061e                	slli	a2,a2,0x7
             array_add(product,line[i],size_a+size_b-1);
     3a0:	00090003          	lb	zero,0(s2)
     3a4:	0100                	addi	s0,sp,128
     3a6:	1a05                	addi	s4,s4,-31
        for(i = 0; i < size_b; ++i){
     3a8:	0a090003          	lb	zero,160(s2)
     3ac:	0100                	addi	s0,sp,128
        product[j] = product[j] % mod;
     3ae:	2505                	jal	9ce <ext_euclid+0x276>
    for(j = 0; j < size_a + size_b -1; ++j){
     3b0:	08097703          	0x8097703
        product[j] = product[j] % mod;
     3b4:	0100                	addi	s0,sp,128
     3b6:	2905                	jal	7e6 <ext_euclid+0x8e>
     3b8:	04090003          	lb	zero,64(s2)
    for(j = 0; j < size_a + size_b -1; ++j){
     3bc:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3be:	1405                	addi	s0,s0,-31
    int line[size_b][size_a + size_b];
     3c0:	04090003          	lb	zero,64(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3c4:	0100                	addi	s0,sp,128
     3c6:	1905                	addi	s2,s2,-31
     3c8:	0200                	addi	s0,sp,256
     3ca:	0104                	addi	s1,sp,128
     3cc:	0306                	slli	t1,t1,0x1
    int line[size_b][size_a + size_b];
     3ce:	0900                	addi	s0,sp,144
     3d0:	0004                	0x4
     3d2:	0501                	addi	a0,a0,0
     3d4:	000d                	c.nop	3
     3d6:	0402                	c.slli64	s0
     3d8:	0601                	addi	a2,a2,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3da:	00090003          	lb	zero,0(s2)
     3de:	0100                	addi	s0,sp,128
     3e0:	0306                	slli	t1,t1,0x1
     3e2:	00040903          	lb	s2,0(s0)
     3e6:	0501                	addi	a0,a0,0
     3e8:	061e                	slli	a2,a2,0x7
     3ea:	00090003          	lb	zero,0(s2)
     3ee:	0100                	addi	s0,sp,128
     3f0:	0d05                	addi	s10,s10,1
    int line[size_b][size_a + size_b];
     3f2:	0306                	slli	t1,t1,0x1
     3f4:	00020907          	0x20907
    int pola[size_a];
     3f8:	0501                	addi	a0,a0,0
     3fa:	061e                	slli	a2,a2,0x7
     3fc:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     400:	0100                	addi	s0,sp,128
    int pola[size_a];
     402:	1a05                	addi	s4,s4,-31
     404:	06090003          	lb	zero,96(s2)
    int polb[size_b];
     408:	0100                	addi	s0,sp,128
     40a:	0605                	addi	a2,a2,1
    int pola[size_a];
     40c:	0306                	slli	t1,t1,0x1
    int polb[size_b];
     40e:	0901                	addi	s2,s2,0
     410:	0004                	0x4
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     412:	0501                	addi	a0,a0,0
     414:	0601                	addi	a2,a2,0
    int line[size_b][size_a + size_b];
     416:	00090203          	lb	tp,0(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     41a:	0100                	addi	s0,sp,128
    int pola[size_a];
     41c:	1105                	addi	sp,sp,-31
     41e:	0200                	addi	s0,sp,256
    int polb[size_b];
     420:	0304                	addi	s1,sp,384
    for (i = 0; i < size_b; ++i){
     422:	0306                	slli	t1,t1,0x1
     424:	0002096f          	jal	s2,20424 <_stack_start+0x10424>
            product2[j] = 0;
     428:	0501                	addi	a0,a0,0
     42a:	0005                	c.nop	1
     42c:	0402                	c.slli64	s0
     42e:	096e0303          	lb	t1,150(t3)
    for (i = 0; i < size_b; ++i){
     432:	0004                	0x4
    array_equ(pola,a,size_a);
     434:	0001                	nop
     436:	0402                	c.slli64	s0
     438:	09090303          	lb	t1,144(s2)
     43c:	000a                	c.slli	zero,0x2
     43e:	0501                	addi	a0,a0,0
    array_equ(polb,b,size_b);
     440:	0402002b          	0x402002b
     444:	09080303          	lb	t1,144(a6)
     448:	0000                	unimp
     44a:	0501                	addi	a0,a0,0
    if(star_mult == 1){
     44c:	002c                	addi	a1,sp,8
     44e:	0402                	c.slli64	s0
     450:	00030603          	lb	a2,0(t1)
     454:	0009                	c.nop	2
     456:	0100                	addi	s0,sp,128
     458:	1105                	addi	sp,sp,-31
     45a:	0200                	addi	s0,sp,256
     45c:	0304                	addi	s1,sp,384
        for (j = size_b -1; j >= 0; j = j-1){
     45e:	0306                	slli	t1,t1,0x1
     460:	0906                	slli	s2,s2,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     462:	0004                	0x4
     464:	0501                	addi	a0,a0,0
            product2[j] = 0;
     466:	0005                	c.nop	1
     468:	0402                	c.slli64	s0
     46a:	09690303          	lb	t1,150(s2)
            line[i][j] = 0;
     46e:	0004                	0x4
            product2[j] = 0;
     470:	0001                	nop
     472:	0402                	c.slli64	s0
        for(j = 0; j < size_a + size_b -1; ++j){
     474:	09090303          	lb	t1,144(s2)
     478:	000a                	c.slli	zero,0x2
     47a:	0501                	addi	a0,a0,0
    for (i = 0; i < size_b; ++i){
     47c:	0402002f          	0x402002f
     480:	090d0303          	lb	t1,144(s10)
        for(j = 0; j < size_a + size_b -1; ++j){
     484:	0000                	unimp
     486:	0501                	addi	a0,a0,0
                line[size_b-1-j][k] = pola[k]*polb[j];
     488:	0030                	addi	a2,sp,8
     48a:	0402                	c.slli64	s0
     48c:	00030603          	lb	a2,0(t1)
     490:	0009                	c.nop	2
     492:	0100                	addi	s0,sp,128
     494:	1105                	addi	sp,sp,-31
     496:	0200                	addi	s0,sp,256
            for (k = size_a-1; k >= 0; k = k-1 ){
     498:	0304                	addi	s1,sp,384
                line[size_b-1-j][k] = pola[k]*polb[j];
     49a:	0306                	slli	t1,t1,0x1
     49c:	00040907          	0x40907
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a0:	0501                	addi	a0,a0,0
     4a2:	0005                	c.nop	1
        for (j = size_b -1; j >= 0; j = j-1){
     4a4:	0402                	c.slli64	s0
     4a6:	09630303          	lb	t1,150(t1)
     4aa:	0004                	0x4
     4ac:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     4ae:	0402                	c.slli64	s0
        array_add(product2,line[i],size_a+size_b-1);
     4b0:	09090303          	lb	t1,144(s2)
     4b4:	000a                	c.slli	zero,0x2
     4b6:	0501                	addi	a0,a0,0
    for(i=0;i<size_b;++i){
     4b8:	0402002f          	0x402002f
}
     4bc:	09130303          	lb	t1,145(t1)
     4c0:	0000                	unimp
     4c2:	0501                	addi	a0,a0,0
     4c4:	0030                	addi	a2,sp,8
     4c6:	0402                	c.slli64	s0
     4c8:	00030603          	lb	a2,0(t1)
     4cc:	0009                	c.nop	2
     4ce:	0100                	addi	s0,sp,128
     4d0:	4e05                	li	t3,1
     4d2:	0306                	slli	t1,t1,0x1
     4d4:	0004090f          	0x4090f
     4d8:	0501                	addi	a0,a0,0
     4da:	0305                	addi	t1,t1,1
     4dc:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
     4e0:	0501                	addi	a0,a0,0
     4e2:	064e                	slli	a2,a2,0x13
     4e4:	00097d03          	0x97d03
            for (k = size_a-1; k >= 0; k = k-1 ){
     4e8:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4ea:	1d05                	addi	s10,s10,-31
     4ec:	08090303          	lb	t1,128(s2)
     4f0:	0100                	addi	s0,sp,128
     4f2:	4e05                	li	t3,1
     4f4:	06097d03          	0x6097d03
     4f8:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     4fa:	0905                	addi	s2,s2,1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4fc:	04090303          	lb	t1,64(s2)
     500:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     502:	4e05                	li	t3,1
     504:	0c097d03          	0xc097d03
        for (j = size_b -1; j >= 0; j = j-1){
     508:	0100                	addi	s0,sp,128
     50a:	14090003          	lb	zero,320(s2)
        array_add(product2,line[i],size_a+size_b-1);
     50e:	0100                	addi	s0,sp,128
     510:	0905                	addi	s2,s2,1
     512:	04090303          	lb	t1,64(s2)
    for(i=0;i<size_b;++i){
     516:	0100                	addi	s0,sp,128
     518:	02090303          	lb	t1,32(s2)
    int v[size_N];
     51c:	0100                	addi	s0,sp,128
     51e:	04097d03          	0x4097d03
     522:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     524:	02090303          	lb	t1,32(s2)
     528:	0100                	addi	s0,sp,128
     52a:	02097d03          	0x2097d03
     52e:	0100                	addi	s0,sp,128
     530:	04090303          	lb	t1,64(s2)
     534:	0100                	addi	s0,sp,128
     536:	02097d03          	0x2097d03
     53a:	0100                	addi	s0,sp,128
    int v[size_N];
     53c:	02090303          	lb	t1,32(s2)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     540:	0100                	addi	s0,sp,128
    int v[size_N];
     542:	04090103          	lb	sp,64(s2)
     546:	0100                	addi	s0,sp,128
    int q[size_N];
     548:	06097f03          	0x6097f03
     54c:	0100                	addi	s0,sp,128
    int num_temp[size_N];
     54e:	02090103          	lb	sp,32(s2)
    int denum_temp[size_D];
     552:	0100                	addi	s0,sp,128
     554:	4e05                	li	t3,1
     556:	04097903          	0x4097903
     55a:	0100                	addi	s0,sp,128
     55c:	0905                	addi	s2,s2,1
     55e:	06090303          	lb	t1,96(s2)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     562:	0100                	addi	s0,sp,128
    int v[size_N];
     564:	0505                	addi	a0,a0,1
     566:	0306                	slli	t1,t1,0x1
    array_equ(num_temp,num,size_N);
     568:	0901                	addi	s2,s2,0
     56a:	0004                	0x4
     56c:	0301                	addi	t1,t1,0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     56e:	0901                	addi	s2,s2,0
     570:	0000                	unimp
    int denum_temp[size_D];
     572:	0301                	addi	t1,t1,0
     574:	0901                	addi	s2,s2,0
    array_equ(num_temp,num,size_N);
     576:	0000                	unimp
    int denum_temp[size_D];
     578:	0501                	addi	a0,a0,0
    for (i = 0; i < size_N; ++i){
     57a:	0609                	addi	a2,a2,2
     57c:	00090003          	lb	zero,0(s2)
     580:	0100                	addi	s0,sp,128
     582:	0505                	addi	a0,a0,1
    array_equ(denum_temp,denum,size_D);
     584:	0306                	slli	t1,t1,0x1
     586:	0901                	addi	s2,s2,0
     588:	0004                	0x4
     58a:	0501                	addi	a0,a0,0
    for (i = 0; i < size_D; ++i) {
     58c:	0609                	addi	a2,a2,2
     58e:	00090003          	lb	zero,0(s2)
     592:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     594:	0505                	addi	a0,a0,1
     596:	0306                	slli	t1,t1,0x1
     598:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    for (i = size_D-1; i >= 0; i = i-1){
     59c:	0501                	addi	a0,a0,0
     59e:	060c                	addi	a1,sp,768
     5a0:	04090003          	lb	zero,64(s2)
     5a4:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     5a6:	1805                	addi	a6,a6,-31
     5a8:	02090303          	lb	t1,32(s2)
    for (u = 0; u < mod; ++u){
     5ac:	0100                	addi	s0,sp,128
     5ae:	1105                	addi	sp,sp,-31
     5b0:	0200                	addi	s0,sp,256
     5b2:	0104                	addi	s1,sp,128
            num_temp[i] = num_temp[i] + mod;
     5b4:	0306                	slli	t1,t1,0x1
     5b6:	097d                	addi	s2,s2,31
        while (num_temp[i] < 0) {
     5b8:	0008                	0x8
     5ba:	0501                	addi	a0,a0,0
     5bc:	0005                	c.nop	1
        num_temp[i] = num_temp[i] % mod;
     5be:	0402                	c.slli64	s0
     5c0:	0601                	addi	a2,a2,0
    for (i = 0; i < size_N; ++i){
     5c2:	00090003          	lb	zero,0(s2)
        num_temp[i] = num_temp[i] % mod;
     5c6:	0100                	addi	s0,sp,128
     5c8:	04090703          	lb	a4,64(s2)
            denum_temp[i] = denum_temp[i] + mod;
     5cc:	0100                	addi	s0,sp,128
     5ce:	0306                	slli	t1,t1,0x1
        while (denum_temp[i] < 0) {
     5d0:	0900                	addi	s0,sp,144
     5d2:	000a                	c.slli	zero,0x2
     5d4:	0301                	addi	t1,t1,0
        denum_temp[i] = denum_temp[i] % mod;
     5d6:	0902                	c.slli64	s2
     5d8:	0006                	c.slli	zero,0x1
    for (i = 0; i < size_D; ++i) {
     5da:	0501                	addi	a0,a0,0
     5dc:	060c                	addi	a1,sp,768
        denum_temp[i] = denum_temp[i] % mod;
     5de:	0a090003          	lb	zero,160(s2)
    for (i = 0; i < size_D; ++i) {
     5e2:	0100                	addi	s0,sp,128
        q[i] = 0;
     5e4:	1105                	addi	sp,sp,-31
     5e6:	0200                	addi	s0,sp,256
     5e8:	0104                	addi	s1,sp,128
     5ea:	0306                	slli	t1,t1,0x1
        v[i] = 0;
     5ec:	0900                	addi	s0,sp,144
        q[i] = 0;
     5ee:	0002                	c.slli64	zero
     5f0:	0501                	addi	a0,a0,0
        v[i] = 0;
     5f2:	0005                	c.nop	1
     5f4:	0402                	c.slli64	s0
    for (i = 0; i < size_N; ++i){
     5f6:	0601                	addi	a2,a2,0
     5f8:	00090003          	lb	zero,0(s2)
    for (i = size_D-1; i >= 0; i = i-1){
     5fc:	0100                	addi	s0,sp,128
     5fe:	0306                	slli	t1,t1,0x1
        if ( (b_N*u)%mod == 1 )
     600:	00040907          	0x40907
     604:	0501                	addi	a0,a0,0
     606:	0304                	addi	s1,sp,384
     608:	0902                	c.slli64	s2
    for (u = 0; u < mod; ++u){
     60a:	0008                	0x8
     60c:	0501                	addi	a0,a0,0
        if( num_temp[i] != 0 )
     60e:	0003060b          	0x3060b
    for (i = size_N-1; i >= 0; i = i-1){
     612:	0209                	addi	tp,tp,2
     614:	0100                	addi	s0,sp,128
     616:	1005                	c.nop	-31
     618:	0200                	addi	s0,sp,256
     61a:	0104                	addi	s1,sp,128
     61c:	0306                	slli	t1,t1,0x1
    while (d >= d2){
     61e:	0900                	addi	s0,sp,144
     620:	0002                	c.slli64	zero
     array_equ(result,q,size_N);
     622:	0501                	addi	a0,a0,0
     624:	0004                	0x4
     626:	0402                	c.slli64	s0
     628:	0601                	addi	a2,a2,0
     62a:	00090003          	lb	zero,0(s2)
     62e:	0100                	addi	s0,sp,128
    for(i = size_N; i < (2*size_N); ++i){
     630:	0505                	addi	a0,a0,1
     632:	0306                	slli	t1,t1,0x1
        result[i] = num_temp[i-size_N];
     634:	090a                	slli	s2,s2,0x2
     636:	0004                	0x4
     638:	0501                	addi	a0,a0,0
     63a:	00030607          	0x30607
    for(i = size_N; i < (2*size_N); ++i){
     63e:	0009                	c.nop	2
}
     640:	0100                	addi	s0,sp,128
     642:	1d05                	addi	s10,s10,-31
     644:	0200                	addi	s0,sp,256
     646:	0104                	addi	s1,sp,128
     648:	0306                	slli	t1,t1,0x1
     64a:	0908                	addi	a0,sp,144
     64c:	0014                	0x14
     64e:	0501                	addi	a0,a0,0
     650:	0009                	c.nop	2
     652:	0402                	c.slli64	s0
     654:	0601                	addi	a2,a2,0
     656:	00090003          	lb	zero,0(s2)
     65a:	0100                	addi	s0,sp,128
     65c:	1405                	addi	s0,s0,-31
     65e:	04090103          	lb	sp,64(s2)
     662:	0100                	addi	s0,sp,128
     664:	0d05                	addi	s10,s10,1
     666:	0200                	addi	s0,sp,256
     668:	0304                	addi	s1,sp,384
        v[(d-d2)] = u*r_d;
     66a:	0306                	slli	t1,t1,0x1
     66c:	095d                	addi	s2,s2,23
     66e:	0004                	0x4
     670:	0501                	addi	a0,a0,0
     672:	0018                	0x18
     674:	0402                	c.slli64	s0
     676:	01030603          	lb	a2,16(t1)
        for (i = 0; i < size_N; ++i){
     67a:	0009                	c.nop	2
     67c:	0100                	addi	s0,sp,128
     67e:	0200                	addi	s0,sp,256
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     680:	0304                	addi	s1,sp,384
     682:	06097f03          	0x6097f03
     686:	0100                	addi	s0,sp,128
     688:	0d05                	addi	s10,s10,1
     68a:	0200                	addi	s0,sp,256
     68c:	0304                	addi	s1,sp,384
        for (i = 0; i < size_N; ++i){
     68e:	0306                	slli	t1,t1,0x1
     690:	0901                	addi	s2,s2,0
     692:	0004                	0x4
     694:	0501                	addi	a0,a0,0
     696:	0018                	0x18
        for (i = 0; i < size_N; ++i){
     698:	0402                	c.slli64	s0
     69a:	00030603          	lb	a2,0(t1)
     69e:	0009                	c.nop	2
        for (i = 0; i < size_N; ++i){
     6a0:	0100                	addi	s0,sp,128
     6a2:	2c05                	jal	8d2 <ext_euclid+0x17a>
     6a4:	0200                	addi	s0,sp,256
        array_add(q, v, size_N);
     6a6:	0304                	addi	s1,sp,384
     6a8:	0306                	slli	t1,t1,0x1
     6aa:	097e                	slli	s2,s2,0x1f
     6ac:	0004                	0x4
        for(i = 0; i < size_N; ++i){
     6ae:	0501                	addi	a0,a0,0
     6b0:	0014                	0x14
     6b2:	0402                	c.slli64	s0
     6b4:	0301                	addi	t1,t1,0
        for (i = size_N-1; i >= 0; i = i-1){
     6b6:	0900                	addi	s0,sp,144
     6b8:	0004                	0x4
     6ba:	0501                	addi	a0,a0,0
     6bc:	0009                	c.nop	2
     6be:	0402                	c.slli64	s0
     6c0:	0601                	addi	a2,a2,0
     6c2:	00090003          	lb	zero,0(s2)
     6c6:	0100                	addi	s0,sp,128
            v[i] = v[i] % mod;
     6c8:	1d05                	addi	s10,s10,-31
        for (i = 0; i < size_N; ++i){
     6ca:	0200                	addi	s0,sp,256
     6cc:	0204                	addi	s1,sp,256
            v[i] = v[i] % mod;
     6ce:	0306                	slli	t1,t1,0x1
     6d0:	097f                	0x97f
     6d2:	0004                	0x4
     6d4:	0501                	addi	a0,a0,0
        for (i = 0; i < size_N; ++i){
     6d6:	0103060f          	0x103060f
                product[i] = product[i] + mod;
     6da:	0809                	addi	a6,a6,2
            while (product[i] < 0) {
     6dc:	0100                	addi	s0,sp,128
     6de:	0d05                	addi	s10,s10,1
     6e0:	0306                	slli	t1,t1,0x1
            product[i] = product[i] % mod;
     6e2:	090a                	slli	s2,s2,0x2
     6e4:	0004                	0x4
        for (i = 0; i < size_N; ++i){
     6e6:	0501                	addi	a0,a0,0
     6e8:	061f 0003 0009      	0x90003061f
     6ee:	0100                	addi	s0,sp,128
            num_temp[i] = num_temp[i] - product[i];
     6f0:	1505                	addi	a0,a0,-31
     6f2:	02090003          	lb	zero,32(s2)
     6f6:	0100                	addi	s0,sp,128
     6f8:	0f05                	addi	t5,t5,1
        for (i = 0; i < size_N; ++i){
     6fa:	0306                	slli	t1,t1,0x1
     6fc:	097f                	0x97f
            num_temp[i] = num_temp[i] - product[i];
     6fe:	0002                	c.slli64	zero
     700:	0501                	addi	a0,a0,0
     702:	0614                	addi	a3,sp,768
        for (i = 0; i < size_N; ++i){
     704:	00090003          	lb	zero,0(s2)
                num_temp[i] = num_temp[i] + mod;
     708:	0100                	addi	s0,sp,128
            while (num_temp[i] < 0){
     70a:	0f05                	addi	t5,t5,1
     70c:	02090003          	lb	zero,32(s2)
            num_temp[i] = num_temp[i] % mod;
     710:	0100                	addi	s0,sp,128
     712:	0905                	addi	s2,s2,1
        for (i = 0; i < size_N; ++i){
     714:	0200                	addi	s0,sp,256
     716:	0204                	addi	s1,sp,256
            num_temp[i] = num_temp[i] % mod;
     718:	0306                	slli	t1,t1,0x1
     71a:	00040903          	lb	s2,0(s0)
            q[i] = q[i] % mod;
     71e:	0501                	addi	a0,a0,0
        for(i = 0; i < size_N; ++i){
     720:	0402001b          	0x402001b
            q[i] = q[i] % mod;
     724:	0602                	c.slli64	a2
     726:	00090003          	lb	zero,0(s2)
     72a:	0100                	addi	s0,sp,128
        for(i = 0; i < size_N; ++i){
     72c:	1d05                	addi	s10,s10,-31
            if( num_temp[i] != 0 )
     72e:	0200                	addi	s0,sp,256
        for (i = size_N-1; i >= 0; i = i-1){
     730:	0204                	addi	s1,sp,256
     732:	04097c03          	0x4097c03
            v[i] = 0;
     736:	0100                	addi	s0,sp,128
     738:	1105                	addi	sp,sp,-31
     73a:	0200                	addi	s0,sp,256
     73c:	0204                	addi	s1,sp,256
        for (i = 0; i < size_N; ++i){
     73e:	04090403          	lb	s0,64(s2)
     742:	0100                	addi	s0,sp,128
     744:	1d05                	addi	s10,s10,-31
        result[i] = num_temp[i-size_N];
     746:	0200                	addi	s0,sp,256
     748:	0204                	addi	s1,sp,256
     74a:	0306                	slli	t1,t1,0x1
     74c:	097c                	addi	a5,sp,156
     74e:	0004                	0x4
     750:	0501                	addi	a0,a0,0
    for(i = size_N; i < (2*size_N); ++i){
     752:	030d                	addi	t1,t1,3
     754:	0002090b          	0x2090b
    int ri_2[size]; // MX-ring poly, a
     758:	0501                	addi	a0,a0,0
     75a:	061f 0003 0009      	0x90003061f
     760:	0100                	addi	s0,sp,128
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     762:	1505                	addi	a0,a0,-31
     764:	02090003          	lb	zero,32(s2)
     768:	0100                	addi	s0,sp,128
     76a:	0f05                	addi	t5,t5,1
     76c:	0306                	slli	t1,t1,0x1
     76e:	097f                	0x97f
     770:	0002                	c.slli64	zero
     772:	0501                	addi	a0,a0,0
     774:	0614                	addi	a3,sp,768
     776:	00090003          	lb	zero,0(s2)
     77a:	0100                	addi	s0,sp,128
     77c:	0f05                	addi	t5,t5,1
    int ri_2[size]; // MX-ring poly, a
     77e:	02090003          	lb	zero,32(s2)
     782:	0100                	addi	s0,sp,128
    int ri_1[size]; // f-random poly, f[N] = 0, b
     784:	0905                	addi	s2,s2,1
     786:	0200                	addi	s0,sp,256
     788:	0204                	addi	s1,sp,256
    int ri[size];
     78a:	0306                	slli	t1,t1,0x1
     78c:	00040903          	lb	s2,0(s0)
    int ti_1[size]; // ti_1[0] = 1
     790:	0501                	addi	a0,a0,0
     792:	0402001b          	0x402001b
    int ti[size];
     796:	0602                	c.slli64	a2
     798:	00090003          	lb	zero,0(s2)
    int qi_1[size];
     79c:	0100                	addi	s0,sp,128
     79e:	1c05                	addi	s8,s8,-31
     7a0:	0200                	addi	s0,sp,256
    int temp[size];
     7a2:	0204                	addi	s1,sp,256
     7a4:	04097c03          	0x4097c03
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     7a8:	0100                	addi	s0,sp,128
     7aa:	1105                	addi	sp,sp,-31
    int ri_2[size]; // MX-ring poly, a
     7ac:	0200                	addi	s0,sp,256
     7ae:	0204                	addi	s1,sp,256
    int temp[size];
     7b0:	04090403          	lb	s0,64(s2)
        ti_2[i] = 0;
     7b4:	0100                	addi	s0,sp,128
     7b6:	1c05                	addi	s8,s8,-31
     7b8:	0200                	addi	s0,sp,256
     7ba:	0204                	addi	s1,sp,256
    for (i = 0; i < size; ++i) {
     7bc:	0306                	slli	t1,t1,0x1
     7be:	097c                	addi	a5,sp,156
    array_equ(ri_2,polyR,size);
     7c0:	0004                	0x4
     7c2:	0501                	addi	a0,a0,0
     7c4:	0a030607          	0xa030607
    array_equ(ri_1,polyf,size);
     7c8:	0209                	addi	tp,tp,2
     7ca:	0100                	addi	s0,sp,128
     7cc:	1d05                	addi	s10,s10,-31
     7ce:	0200                	addi	s0,sp,256
    ti_1[0] = 1;
     7d0:	0104                	addi	s1,sp,128
     7d2:	0306                	slli	t1,t1,0x1
     7d4:	0901                	addi	s2,s2,0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7d6:	0002                	c.slli64	zero
     7d8:	0501                	addi	a0,a0,0
     7da:	0009                	c.nop	2
     7dc:	0402                	c.slli64	s0
        for (i = 0; i < N + 1; ++i) {
     7de:	0601                	addi	a2,a2,0
     7e0:	00090003          	lb	zero,0(s2)
        ti_2[i] = 0;
     7e4:	0100                	addi	s0,sp,128
     7e6:	0f05                	addi	t5,t5,1
     7e8:	04091003          	lh	zero,64(s2)
     7ec:	0100                	addi	s0,sp,128
     7ee:	1105                	addi	sp,sp,-31
        ti_1[i] = 0;
     7f0:	0200                	addi	s0,sp,256
     7f2:	0104                	addi	s1,sp,128
    for (i = 0; i < size; ++i) {
     7f4:	0306                	slli	t1,t1,0x1
     7f6:	097f                	0x97f
                ri_2[i] = ri_2[i] + mod;
     7f8:	0002                	c.slli64	zero
     7fa:	0501                	addi	a0,a0,0
            while (ri_2[i] < 0) {
     7fc:	0005                	c.nop	1
     7fe:	0402                	c.slli64	s0
     800:	0601                	addi	a2,a2,0
            ri_2[i] = ri_2[i] % mod;
     802:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     806:	0100                	addi	s0,sp,128
            ri_2[i] = ri_2[i] % mod;
     808:	0f05                	addi	t5,t5,1
        for (i = 0; i < N + 1; ++i) {
     80a:	04090803          	lb	a6,64(s2)
     80e:	0100                	addi	s0,sp,128
     810:	0e05                	addi	t3,t3,1
     812:	02090103          	lb	sp,32(s2)
     816:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     818:	1405                	addi	s0,s0,-31
     81a:	0200                	addi	s0,sp,256
     81c:	0104                	addi	s1,sp,128
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     81e:	0306                	slli	t1,t1,0x1
     820:	097f                	0x97f
     822:	0008                	0x8
     824:	0501                	addi	a0,a0,0
     826:	0009                	c.nop	2
     828:	0402                	c.slli64	s0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     82a:	0601                	addi	a2,a2,0
     82c:	00090003          	lb	zero,0(s2)
     830:	0100                	addi	s0,sp,128
     832:	0b05                	addi	s6,s6,1
     834:	0c090603          	lb	a2,192(s2)
        for (i = 0; i < N + 1; ++i) {
     838:	0100                	addi	s0,sp,128
     83a:	1005                	c.nop	-31
     83c:	0200                	addi	s0,sp,256
     83e:	0104                	addi	s1,sp,128
     840:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     842:	0900                	addi	s0,sp,144
     844:	0002                	c.slli64	zero
     846:	0501                	addi	a0,a0,0
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     848:	0005                	c.nop	1
     84a:	0402                	c.slli64	s0
     84c:	0601                	addi	a2,a2,0
     84e:	00090003          	lb	zero,0(s2)
     852:	0100                	addi	s0,sp,128
     854:	0306                	slli	t1,t1,0x1
    array_equ(qi_1,res1,size);
     856:	0905                	addi	s2,s2,1
     858:	0004                	0x4
     85a:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     85c:	0902                	c.slli64	s2
     85e:	0000                	unimp
     860:	0501                	addi	a0,a0,0
     862:	0601                	addi	a2,a2,0
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     864:	00090103          	lb	sp,0(s2)
     868:	0100                	addi	s0,sp,128
     86a:	1105                	addi	sp,sp,-31
     86c:	0200                	addi	s0,sp,256
     86e:	0304                	addi	s1,sp,384
     870:	0306                	slli	t1,t1,0x1
     872:	095d                	addi	s2,s2,23
    array_equ(temp,res2,size);
     874:	002a                	c.slli	zero,0xa
     876:	0501                	addi	a0,a0,0
     878:	0025                	c.nop	9
        for (i = 0; i < N + 1; ++i) {
     87a:	0402                	c.slli64	s0
     87c:	00030603          	lb	a2,0(t1)
     880:	0409                	addi	s0,s0,2
        for (i = 0; i < N + 1; ++i) {
     882:	0100                	addi	s0,sp,128
     884:	2b05                	jal	db4 <ntru_encyrpt+0x90>
     886:	0200                	addi	s0,sp,256
     888:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     88a:	04090003          	lb	zero,64(s2)
     88e:	0100                	addi	s0,sp,128
array_equ(ri_2,ri_1,size);
     890:	2e05                	jal	bc0 <generate_keys+0x1ba>
     892:	0200                	addi	s0,sp,256
     894:	0304                	addi	s1,sp,384
     896:	02090003          	lb	zero,32(s2)
array_equ(ri_1,ri,size);
     89a:	0100                	addi	s0,sp,128
     89c:	2a05                	jal	9cc <ext_euclid+0x274>
     89e:	0200                	addi	s0,sp,256
array_equ(ti_2,ti_1,size);
     8a0:	0304                	addi	s1,sp,384
     8a2:	06097f03          	0x6097f03
     8a6:	0100                	addi	s0,sp,128
     8a8:	2e05                	jal	bd8 <generate_keys+0x1d2>
     8aa:	0200                	addi	s0,sp,256
     8ac:	0304                	addi	s1,sp,384
array_equ(ti_1,ti,size);
     8ae:	02090103          	lb	sp,32(s2)
     8b2:	0100                	addi	s0,sp,128
     8b4:	2505                	jal	ed4 <reset_handler+0x14>
        controlR = 0;
     8b6:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     8b8:	0304                	addi	s1,sp,384
     8ba:	04090003          	lb	zero,64(s2)
    while (controlR != 0) {
     8be:	0100                	addi	s0,sp,128
     8c0:	2805                	jal	8f0 <ext_euclid+0x198>
        for (j = 0; j < mod; ++j) {
     8c2:	0200                	addi	s0,sp,256
            if (((ri_2[0] * j) % mod) == 1)
     8c4:	0304                	addi	s1,sp,384
        for (j = 0; j < mod; ++j) {
     8c6:	0306                	slli	t1,t1,0x1
     8c8:	097f                	0x97f
     8ca:	0002                	c.slli64	zero
     8cc:	0501                	addi	a0,a0,0
     8ce:	0020                	addi	s0,sp,8
     8d0:	0402                	c.slli64	s0
        for (i = 0; i < N + 1; ++i) {
     8d2:	0301                	addi	t1,t1,0
     8d4:	0900                	addi	s0,sp,144
    }
     8d6:	0000                	unimp
     8d8:	0501                	addi	a0,a0,0
     8da:	000d                	c.nop	3
     8dc:	0402                	c.slli64	s0
     8de:	0601                	addi	a2,a2,0
     8e0:	00090003          	lb	zero,0(s2)
     8e4:	0100                	addi	s0,sp,128
     8e6:	2505                	jal	f06 <reset_handler+0x46>
     8e8:	0200                	addi	s0,sp,256
     8ea:	0204                	addi	s1,sp,256
     8ec:	0306                	slli	t1,t1,0x1
     8ee:	097f                	0x97f
     8f0:	0004                	0x4
     8f2:	0501                	addi	a0,a0,0
     8f4:	04020027          	0x4020027
     8f8:	0602                	c.slli64	a2
     8fa:	00090003          	lb	zero,0(s2)
     8fe:	0100                	addi	s0,sp,128
                ri_1[i] = ri_1[i] + mod;
     900:	1405                	addi	s0,s0,-31
     902:	08090103          	lb	sp,128(s2)
            while (ri_1[i] < 0) {
     906:	0100                	addi	s0,sp,128
     908:	1105                	addi	sp,sp,-31
            ri_1[i] = ri_1[i] % mod;
     90a:	0200                	addi	s0,sp,256
     90c:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     90e:	0306                	slli	t1,t1,0x1
     910:	0908                	addi	a0,sp,144
            ri_1[i] = ri_1[i] % mod;
     912:	0004                	0x4
     914:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     916:	0029                	c.nop	10
            ri[i - (N + 1)] = res[i];
     918:	0402                	c.slli64	s0
     91a:	00030603          	lb	a2,0(t1)
     91e:	0409                	addi	s0,s0,2
        for (i = N + 1; i < (2 * N + 2); ++i) {
     920:	0100                	addi	s0,sp,128
     922:	2f05                	jal	1052 <memset+0x42>
            ri[i - (N + 1)] = res[i];
     924:	0200                	addi	s0,sp,256
     926:	0304                	addi	s1,sp,384
        for (i = N + 1; i < (2 * N + 2); ++i) {
     928:	04090003          	lb	zero,64(s2)
            temp[i] = ri_2[i] - ri[i];
     92c:	0100                	addi	s0,sp,128
     92e:	3205                	jal	24e <polymult+0x82>
     930:	0200                	addi	s0,sp,256
     932:	0304                	addi	s1,sp,384
     934:	02090003          	lb	zero,32(s2)
     938:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     93a:	2a05                	jal	a6a <generate_keys+0x64>
            temp[i] = ri_2[i] - ri[i];
     93c:	0200                	addi	s0,sp,256
     93e:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     940:	06097f03          	0x6097f03
                temp[i] = temp[i] + mod;
     944:	0100                	addi	s0,sp,128
     946:	3205                	jal	266 <polymult+0x9a>
            while (temp[i] < 0) {
     948:	0200                	addi	s0,sp,256
     94a:	0304                	addi	s1,sp,384
     94c:	02090103          	lb	sp,32(s2)
            temp[i] = temp[i] % mod;
     950:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     952:	2905                	jal	d82 <ntru_encyrpt+0x5e>
     954:	0200                	addi	s0,sp,256
            temp[i] = temp[i] % mod;
     956:	0304                	addi	s1,sp,384
     958:	04090003          	lb	zero,64(s2)
                qi_1[i] = qi_1[i] + mod;
     95c:	0100                	addi	s0,sp,128
     95e:	2805                	jal	98e <ext_euclid+0x236>
            while (qi_1[i] < 0) {
     960:	0200                	addi	s0,sp,256
     962:	0304                	addi	s1,sp,384
     964:	0306                	slli	t1,t1,0x1
            qi_1[i] = qi_1[i] % mod;
     966:	097f                	0x97f
     968:	0002                	c.slli64	zero
        for (i = 0; i < N + 1; ++i) {
     96a:	0501                	addi	a0,a0,0
     96c:	0020                	addi	s0,sp,8
            qi_1[i] = qi_1[i] % mod;
     96e:	0402                	c.slli64	s0
     970:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     972:	0900                	addi	s0,sp,144
                temp[i] = temp[i] + mod;
     974:	0000                	unimp
     976:	0501                	addi	a0,a0,0
     978:	000d                	c.nop	3
            while (temp[i] < 0) {
     97a:	0402                	c.slli64	s0
     97c:	0601                	addi	a2,a2,0
     97e:	00090003          	lb	zero,0(s2)
            temp[i] = temp[i] % mod;
     982:	0100                	addi	s0,sp,128
     984:	2505                	jal	fa4 <memcpy+0x72>
        for (i = 0; i < N + 1; ++i) {
     986:	0200                	addi	s0,sp,256
     988:	0204                	addi	s1,sp,256
            temp[i] = temp[i] % mod;
     98a:	0306                	slli	t1,t1,0x1
     98c:	097f                	0x97f
        for (i = 0; i < N + 1; ++i) {
     98e:	0004                	0x4
            ti[i] = ti_2[i] - temp[i];
     990:	0501                	addi	a0,a0,0
     992:	04020027          	0x4020027
     996:	0602                	c.slli64	a2
     998:	00090003          	lb	zero,0(s2)
     99c:	0100                	addi	s0,sp,128
     99e:	0d05                	addi	s10,s10,1
     9a0:	0200                	addi	s0,sp,256
     9a2:	0304                	addi	s1,sp,384
     9a4:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     9a6:	090a                	slli	s2,s2,0x2
            ti[i] = ti_2[i] - temp[i];
     9a8:	0008                	0x8
     9aa:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     9ac:	0025                	c.nop	9
     9ae:	0402                	c.slli64	s0
                ti[i] = ti[i] + mod;
     9b0:	00030603          	lb	a2,0(t1)
            while (ti[i] < 0) {
     9b4:	0009                	c.nop	2
     9b6:	0100                	addi	s0,sp,128
     9b8:	2c05                	jal	be8 <generate_keys+0x1e2>
            ti[i] = ti[i] % mod;
     9ba:	0200                	addi	s0,sp,256
     9bc:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     9be:	02097f03          	0x2097f03
            ti[i] = ti[i] % mod;
     9c2:	0100                	addi	s0,sp,128
     9c4:	2505                	jal	fe4 <memcpy+0xb2>
        for (i = 0; i < N + 1; ++i) {
     9c6:	0200                	addi	s0,sp,256
              qi_1[i] = 0;
     9c8:	0304                	addi	s1,sp,384
     9ca:	04090103          	lb	sp,64(s2)
     9ce:	0100                	addi	s0,sp,128
            controlR += ri[i];
     9d0:	1805                	addi	a6,a6,-31
     9d2:	0200                	addi	s0,sp,256
              qi_1[i] = 0;
     9d4:	0304                	addi	s1,sp,384
     9d6:	04090003          	lb	zero,64(s2)
            controlR += ri[i];
     9da:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     9dc:	2c05                	jal	c0c <generate_keys+0x206>
            if (((ri_2[0] * j) % mod) == 1)
     9de:	0200                	addi	s0,sp,256
     9e0:	0304                	addi	s1,sp,384
     9e2:	0306                	slli	t1,t1,0x1
     9e4:	097f                	0x97f
     9e6:	0004                	0x4
     9e8:	0501                	addi	a0,a0,0
     9ea:	0014                	0x14
     9ec:	0402                	c.slli64	s0
        for (j = 0; j < mod; ++j) {
     9ee:	0301                	addi	t1,t1,0
     9f0:	0900                	addi	s0,sp,144
            ti_2[i] = (ti_2[i] * j) % mod;
     9f2:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     9f4:	0501                	addi	a0,a0,0
     9f6:	0009                	c.nop	2
            ti_2[i] = (ti_2[i] * j) % mod;
     9f8:	0402                	c.slli64	s0
     9fa:	0601                	addi	a2,a2,0
     9fc:	00090003          	lb	zero,0(s2)
     a00:	0100                	addi	s0,sp,128
     a02:	1d05                	addi	s10,s10,-31
        for (i = 0; i < N + 1; ++i) {
     a04:	0200                	addi	s0,sp,256
int* generate_keys(int N, int p, int q){
     a06:	0204                	addi	s1,sp,256
     a08:	0306                	slli	t1,t1,0x1
     a0a:	097f                	0x97f
     a0c:	0004                	0x4
     a0e:	0501                	addi	a0,a0,0
     a10:	0103060f          	0x103060f
     a14:	0809                	addi	a6,a6,2
     a16:	0100                	addi	s0,sp,128
     a18:	0e05                	addi	t3,t3,1
     a1a:	0200                	addi	s0,sp,256
     a1c:	0304                	addi	s1,sp,384
     a1e:	0306                	slli	t1,t1,0x1
     a20:	0908                	addi	a0,sp,144
     a22:	0004                	0x4
     a24:	0501                	addi	a0,a0,0
     a26:	0020                	addi	s0,sp,8
     a28:	0402                	c.slli64	s0
     a2a:	097f0303          	lb	t1,151(t5)
     a2e:	0008                	0x8
     a30:	0501                	addi	a0,a0,0
     a32:	0009                	c.nop	2
     a34:	0402                	c.slli64	s0
     a36:	09070303          	lb	t1,144(a4)
     a3a:	0006                	c.slli	zero,0x1
     a3c:	0501                	addi	a0,a0,0
    resultkon[0] = 0xaaaaaaa0;	
     a3e:	0021                	c.nop	8
     a40:	0402                	c.slli64	s0
     a42:	00030603          	lb	a2,0(t1)
int* generate_keys(int N, int p, int q){
     a46:	0009                	c.nop	2
     a48:	0100                	addi	s0,sp,128
     a4a:	2805                	jal	a7a <generate_keys+0x74>
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a4c:	0200                	addi	s0,sp,256
     a4e:	0304                	addi	s1,sp,384
     a50:	02097f03          	0x2097f03
    resultkon[0] = 0xaaaaaaa0;	
     a54:	0100                	addi	s0,sp,128
     a56:	2105                	jal	e76 <ntru_deceypt+0xa6>
     a58:	0200                	addi	s0,sp,256
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a5a:	0304                	addi	s1,sp,384
     a5c:	04090103          	lb	sp,64(s2)
    resultkon[0] = 0xaaaaaaa0;	
     a60:	0100                	addi	s0,sp,128
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a62:	1405                	addi	s0,s0,-31
     a64:	0200                	addi	s0,sp,256
     a66:	0304                	addi	s1,sp,384
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a68:	04090003          	lb	zero,64(s2)
     a6c:	0100                	addi	s0,sp,128
     a6e:	2805                	jal	a9e <generate_keys+0x98>
     a70:	0200                	addi	s0,sp,256
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a72:	0304                	addi	s1,sp,384
     a74:	0306                	slli	t1,t1,0x1
     a76:	097f                	0x97f
     a78:	0004                	0x4
     a7a:	0501                	addi	a0,a0,0
     a7c:	0346                	slli	t1,t1,0x11
     a7e:	090a                	slli	s2,s2,0x2
     a80:	0002                	c.slli64	zero
     a82:	0501                	addi	a0,a0,0
     a84:	0305                	addi	t1,t1,1
     a86:	0902                	c.slli64	s2
     a88:	0000                	unimp
     a8a:	0501                	addi	a0,a0,0
     a8c:	0646                	slli	a2,a2,0x11
     a8e:	00097e03          	0x97e03
     a92:	0100                	addi	s0,sp,128
     a94:	1d05                	addi	s10,s10,-31
     a96:	02090203          	lb	tp,32(s2)
     a9a:	0100                	addi	s0,sp,128
     a9c:	4605                	li	a2,1
     a9e:	04097e03          	0x4097e03
     aa2:	0100                	addi	s0,sp,128
     aa4:	0905                	addi	s2,s2,1
     aa6:	0a090203          	lb	tp,160(s2)
     aaa:	0100                	addi	s0,sp,128
     aac:	4605                	li	a2,1
     aae:	0c097e03          	0xc097e03
     ab2:	0100                	addi	s0,sp,128
     ab4:	0905                	addi	s2,s2,1
     ab6:	12090203          	lb	tp,288(s2)
     aba:	0100                	addi	s0,sp,128
     abc:	4605                	li	a2,1
     abe:	02097e03          	0x2097e03
     ac2:	0100                	addi	s0,sp,128
     ac4:	0905                	addi	s2,s2,1
     ac6:	04090203          	lb	tp,64(s2)
     aca:	0100                	addi	s0,sp,128
     acc:	4605                	li	a2,1
     ace:	02097e03          	0x2097e03
     ad2:	0100                	addi	s0,sp,128
     ad4:	0905                	addi	s2,s2,1
     ad6:	00090203          	lb	tp,0(s2)
     ada:	0100                	addi	s0,sp,128
     adc:	04090303          	lb	t1,64(s2)
    int polyR[N+1];
     ae0:	0100                	addi	s0,sp,128
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     ae2:	08097d03          	0x8097d03
    int polyR[N+1];
     ae6:	0100                	addi	s0,sp,128
     ae8:	02090303          	lb	t1,32(s2)
     aec:	0100                	addi	s0,sp,128
     aee:	04090103          	lb	sp,64(s2)
    polyR[N] = 1;
     af2:	0100                	addi	s0,sp,128
     af4:	06097f03          	0x6097f03
     af8:	0100                	addi	s0,sp,128
     afa:	02090103          	lb	sp,32(s2)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     afe:	0100                	addi	s0,sp,128
     b00:	4605                	li	a2,1
     b02:	04097a03          	0x4097a03
     b06:	0100                	addi	s0,sp,128
     b08:	0905                	addi	s2,s2,1
     b0a:	04090203          	lb	tp,64(s2)
     b0e:	0100                	addi	s0,sp,128
     b10:	0505                	addi	a0,a0,1
     b12:	0306                	slli	t1,t1,0x1
     b14:	0901                	addi	s2,s2,0
     b16:	0004                	0x4
     b18:	0301                	addi	t1,t1,0
     b1a:	0901                	addi	s2,s2,0
     b1c:	0000                	unimp
     b1e:	0301                	addi	t1,t1,0
     b20:	0901                	addi	s2,s2,0
     b22:	0000                	unimp
     b24:	0501                	addi	a0,a0,0
     b26:	0646                	slli	a2,a2,0x11
     b28:	00097b03          	0x97b03
     b2c:	0100                	addi	s0,sp,128
     b2e:	0905                	addi	s2,s2,1
     b30:	02090503          	lb	a0,32(s2)
     b34:	0100                	addi	s0,sp,128
     b36:	0505                	addi	a0,a0,1
     b38:	0306                	slli	t1,t1,0x1
     b3a:	0901                	addi	s2,s2,0
     b3c:	0004                	0x4
     b3e:	0501                	addi	a0,a0,0
     b40:	0609                	addi	a2,a2,2
     b42:	00090003          	lb	zero,0(s2)
     b46:	0100                	addi	s0,sp,128
     b48:	0505                	addi	a0,a0,1
     b4a:	0306                	slli	t1,t1,0x1
     b4c:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     b50:	0501                	addi	a0,a0,0
     b52:	060c                	addi	a1,sp,768
     b54:	04090003          	lb	zero,64(s2)
     b58:	0100                	addi	s0,sp,128
     b5a:	1905                	addi	s2,s2,-31
     b5c:	02090303          	lb	t1,32(s2)
    polyR[0] = -1;
     b60:	0100                	addi	s0,sp,128
     b62:	1105                	addi	sp,sp,-31
    for(i = 1; i < N; ++i){
     b64:	0200                	addi	s0,sp,256
     b66:	0104                	addi	s1,sp,128
     b68:	0306                	slli	t1,t1,0x1
     b6a:	097d                	addi	s2,s2,31
    for (i = N; i < 55; ++i ){
     b6c:	0008                	0x8
     b6e:	0501                	addi	a0,a0,0
     b70:	0005                	c.nop	1
     b72:	0402                	c.slli64	s0
    for(i = 0; i < N; ++i){
     b74:	0601                	addi	a2,a2,0
        random_keys[i] = f[i];
     b76:	00090003          	lb	zero,0(s2)
     b7a:	0100                	addi	s0,sp,128
     b7c:	04090b03          	lb	s6,64(s2)
    for(i = 0; i < N; ++i){
     b80:	0100                	addi	s0,sp,128
     b82:	0306                	slli	t1,t1,0x1
     b84:	0900                	addi	s0,sp,144
    for(i = N; i < (2*N); ++i){
     b86:	000a                	c.slli	zero,0x2
     b88:	0301                	addi	t1,t1,0
     b8a:	0906                	slli	s2,s2,0x1
     b8c:	0002                	c.slli64	zero
        random_keys[i] = g[i-N];
     b8e:	0301                	addi	t1,t1,0
     b90:	000c0903          	lb	s2,0(s8) # 19000 <_stack_start+0x9000>
     b94:	0501                	addi	a0,a0,0
    for(i = N; i < (2*N); ++i){
     b96:	00030607          	0x30607
    for(i = (2*N); i < (3*N); ++i){
     b9a:	0009                	c.nop	2
     b9c:	0100                	addi	s0,sp,128
     b9e:	1d05                	addi	s10,s10,-31
    fp = ext_euclid(polyR, f, (N+1), p);
     ba0:	0200                	addi	s0,sp,256
     ba2:	0104                	addi	s1,sp,128
     ba4:	0306                	slli	t1,t1,0x1
     ba6:	0908                	addi	a0,sp,144
     ba8:	0012                	c.slli	zero,0x4
     baa:	0501                	addi	a0,a0,0
    for(i = (2*N); i < (3*N); ++i){
     bac:	0009                	c.nop	2
        random_keys[i] = fp[i-(2*N)];
     bae:	0402                	c.slli64	s0
     bb0:	0601                	addi	a2,a2,0
     bb2:	00090003          	lb	zero,0(s2)
    for(i = (2*N); i < (3*N); ++i){
     bb6:	0100                	addi	s0,sp,128
     bb8:	1405                	addi	s0,s0,-31
    fq = ext_euclid(polyR, f, (N+1), q);
     bba:	04090103          	lb	sp,64(s2)
     bbe:	0100                	addi	s0,sp,128
     bc0:	0d05                	addi	s10,s10,1
     bc2:	0200                	addi	s0,sp,256
     bc4:	0304                	addi	s1,sp,384
    for(i = (3*N); i < (4*N); ++i){
     bc6:	0306                	slli	t1,t1,0x1
     bc8:	0965                	addi	s2,s2,25
     bca:	0004                	0x4
     bcc:	0501                	addi	a0,a0,0
        random_keys[i] = fq[i-(3*N)];
     bce:	0019                	c.nop	6
     bd0:	0402                	c.slli64	s0
     bd2:	01030603          	lb	a2,16(t1)
    for(i = (3*N); i < (4*N); ++i){
     bd6:	0009                	c.nop	2
     bd8:	0100                	addi	s0,sp,128
    fg = polymult2(fq, N, g, N, 0);
     bda:	1805                	addi	a6,a6,-31
     bdc:	0200                	addi	s0,sp,256
     bde:	0304                	addi	s1,sp,384
     be0:	06097f03          	0x6097f03
     be4:	0100                	addi	s0,sp,128
    for(i = 0; i < (2*N-1); ++i){
     be6:	0d05                	addi	s10,s10,1
     be8:	0200                	addi	s0,sp,256
     bea:	0304                	addi	s1,sp,384
     bec:	0306                	slli	t1,t1,0x1
     bee:	0901                	addi	s2,s2,0
     bf0:	0004                	0x4
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     bf2:	0501                	addi	a0,a0,0
     bf4:	0019                	c.nop	6
     bf6:	0402                	c.slli64	s0
     bf8:	00030603          	lb	a2,0(t1)
    for(i = (4*N); i < (5*N); ++i){
     bfc:	0009                	c.nop	2
     bfe:	0100                	addi	s0,sp,128
     c00:	2c05                	jal	e30 <ntru_deceypt+0x60>
     c02:	0200                	addi	s0,sp,256
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c04:	0304                	addi	s1,sp,384
     c06:	0306                	slli	t1,t1,0x1
     c08:	097e                	slli	s2,s2,0x1f
     c0a:	0004                	0x4
    for(i = (4*N); i < (5*N); ++i){
     c0c:	0501                	addi	a0,a0,0
     c0e:	0014                	0x14
     c10:	0402                	c.slli64	s0
    for(i = (5*N); i < (6*N+1); ++i){
     c12:	0301                	addi	t1,t1,0
     c14:	0900                	addi	s0,sp,144
        random_keys[i] = polyR[i-(5*N)];
     c16:	0004                	0x4
     c18:	0501                	addi	a0,a0,0
     c1a:	0009                	c.nop	2
     c1c:	0402                	c.slli64	s0
    for(i = (5*N); i < (6*N+1); ++i){
     c1e:	0601                	addi	a2,a2,0
     c20:	00090003          	lb	zero,0(s2)
     c24:	0100                	addi	s0,sp,128
     c26:	1d05                	addi	s10,s10,-31
     c28:	0200                	addi	s0,sp,256
    resultkon[0] = 0xaaaaaaa1;	
     c2a:	0204                	addi	s1,sp,256
     c2c:	0306                	slli	t1,t1,0x1
     c2e:	097f                	0x97f
     c30:	0004                	0x4
     c32:	0501                	addi	a0,a0,0
     c34:	0103060f          	0x103060f
}
     c38:	0809                	addi	a6,a6,2
     c3a:	0100                	addi	s0,sp,128
     c3c:	1105                	addi	sp,sp,-31
     c3e:	0200                	addi	s0,sp,256
     c40:	0304                	addi	s1,sp,384
     c42:	0306                	slli	t1,t1,0x1
     c44:	0916                	slli	s2,s2,0x5
     c46:	0004                	0x4
     c48:	0501                	addi	a0,a0,0
     c4a:	0025                	c.nop	9
     c4c:	0402                	c.slli64	s0
     c4e:	00030603          	lb	a2,0(t1)
     c52:	0409                	addi	s0,s0,2
     c54:	0100                	addi	s0,sp,128
     c56:	2b05                	jal	1186 <main+0xce>
     c58:	0200                	addi	s0,sp,256
     c5a:	0304                	addi	s1,sp,384
     c5c:	04090003          	lb	zero,64(s2)
     c60:	0100                	addi	s0,sp,128
     c62:	2e05                	jal	f92 <memcpy+0x60>
     c64:	0200                	addi	s0,sp,256
     c66:	0304                	addi	s1,sp,384
     c68:	02090003          	lb	zero,32(s2)
     c6c:	0100                	addi	s0,sp,128
     c6e:	2a05                	jal	d9e <ntru_encyrpt+0x7a>
     c70:	0200                	addi	s0,sp,256
     c72:	0304                	addi	s1,sp,384
     c74:	06097f03          	0x6097f03
     c78:	0100                	addi	s0,sp,128
     c7a:	2e05                	jal	faa <memcpy+0x78>
        polyR[i] = 0;
     c7c:	0200                	addi	s0,sp,256
     c7e:	0304                	addi	s1,sp,384
     c80:	02090103          	lb	sp,32(s2)
     c84:	0100                	addi	s0,sp,128
    for(i = 1; i < N; ++i){
     c86:	2505                	jal	12a6 <__DTOR_END__+0xb6>
     c88:	0200                	addi	s0,sp,256
        f[i] = 0;
     c8a:	0304                	addi	s1,sp,384
     c8c:	04090003          	lb	zero,64(s2)
     c90:	0100                	addi	s0,sp,128
     c92:	2805                	jal	cc2 <generate_keys+0x2bc>
     c94:	0200                	addi	s0,sp,256
     c96:	0304                	addi	s1,sp,384
        g[i] = 0;
     c98:	0306                	slli	t1,t1,0x1
     c9a:	097f                	0x97f
     c9c:	0002                	c.slli64	zero
     c9e:	0501                	addi	a0,a0,0
     ca0:	0020                	addi	s0,sp,8
    for (i = N; i < 55; ++i ){
     ca2:	0402                	c.slli64	s0
     ca4:	0301                	addi	t1,t1,0
        random_keys[i] = f[i];
     ca6:	0900                	addi	s0,sp,144
     ca8:	0000                	unimp
     caa:	0501                	addi	a0,a0,0
     cac:	000d                	c.nop	3
     cae:	0402                	c.slli64	s0
     cb0:	0601                	addi	a2,a2,0
     cb2:	00090003          	lb	zero,0(s2)
    for(i = 0; i < N; ++i){
     cb6:	0100                	addi	s0,sp,128
        random_keys[i] = f[i];
     cb8:	2505                	jal	12d8 <__DTOR_END__+0xe8>
    for(i = 0; i < N; ++i){
     cba:	0200                	addi	s0,sp,256
        random_keys[i] = g[i-N];
     cbc:	0204                	addi	s1,sp,256
     cbe:	0306                	slli	t1,t1,0x1
     cc0:	097f                	0x97f
     cc2:	0004                	0x4
     cc4:	0501                	addi	a0,a0,0
    for(i = N; i < (2*N); ++i){
     cc6:	04020027          	0x4020027
     cca:	0602                	c.slli64	a2
        random_keys[i] = fp[i-(2*N)];
     ccc:	00090003          	lb	zero,0(s2)
     cd0:	0100                	addi	s0,sp,128
     cd2:	1d05                	addi	s10,s10,-31
     cd4:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     cd6:	0104                	addi	s1,sp,128
     cd8:	0306                	slli	t1,t1,0x1
     cda:	0900                	addi	s0,sp,144
        random_keys[i] = fq[i-(3*N)];
     cdc:	0006                	c.slli	zero,0x1
     cde:	0501                	addi	a0,a0,0
     ce0:	0009                	c.nop	2
     ce2:	0402                	c.slli64	s0
     ce4:	0601                	addi	a2,a2,0
     ce6:	00090003          	lb	zero,0(s2)
    for(i = (3*N); i < (4*N); ++i){
     cea:	0100                	addi	s0,sp,128
        random_keys[i] = fq[i-(3*N)];
     cec:	1405                	addi	s0,s0,-31
    for(i = (3*N); i < (4*N); ++i){
     cee:	04090803          	lb	a6,64(s2)
    for(i = 0; i < (2*N-1); ++i){
     cf2:	0100                	addi	s0,sp,128
     cf4:	0905                	addi	s2,s2,1
        fg[i] = fg[i]*p;
     cf6:	02090a03          	lb	s4,32(s2)
     cfa:	0100                	addi	s0,sp,128
     cfc:	0d05                	addi	s10,s10,1
    for(i = 0; i < (2*N-1); ++i){
     cfe:	0200                	addi	s0,sp,256
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     d00:	0104                	addi	s1,sp,128
     d02:	0306                	slli	t1,t1,0x1
     d04:	097d                	addi	s2,s2,31
     d06:	0008                	0x8
     d08:	0501                	addi	a0,a0,0
     d0a:	0005                	c.nop	1
    for(i = (4*N); i < (5*N); ++i){
     d0c:	0402                	c.slli64	s0
     d0e:	0601                	addi	a2,a2,0
        random_keys[i] = polyR[i-(5*N)];
     d10:	00090003          	lb	zero,0(s2)
     d14:	0100                	addi	s0,sp,128
     d16:	0306                	slli	t1,t1,0x1
     d18:	00040907          	0x40907
     d1c:	0301                	addi	t1,t1,0
    for(i = (5*N); i < (6*N+1); ++i){
     d1e:	0902                	c.slli64	s2
        random_keys[i] = polyR[i-(5*N)];
     d20:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     d22:	0501                	addi	a0,a0,0
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d24:	0601                	addi	a2,a2,0
    resultkon[0] = 0xbbbbbbb0;	
     d26:	00090103          	lb	sp,0(s2)
     d2a:	0100                	addi	s0,sp,128
     d2c:	1405                	addi	s0,s0,-31
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d2e:	2a096803          	0x2a096803
     d32:	0100                	addi	s0,sp,128
     d34:	1105                	addi	sp,sp,-31
     d36:	0200                	addi	s0,sp,256
     d38:	0304                	addi	s1,sp,384
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d3a:	0306                	slli	t1,t1,0x1
     d3c:	0908                	addi	a0,sp,144
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d3e:	0004                	0x4
    resultkon[0] = 0xbbbbbbb0;	
     d40:	0501                	addi	a0,a0,0
     d42:	0029                	c.nop	10
     d44:	0402                	c.slli64	s0
     d46:	00030603          	lb	a2,0(t1)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d4a:	0409                	addi	s0,s0,2
     d4c:	0100                	addi	s0,sp,128
     d4e:	2f05                	jal	147e <_bss_start+0x10a>
     d50:	0200                	addi	s0,sp,256
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d52:	0304                	addi	s1,sp,384
     d54:	04090003          	lb	zero,64(s2)
     d58:	0100                	addi	s0,sp,128
     d5a:	3205                	jal	67a <polydiv+0x15e>
    resultkon[0] = 0xbbbbbbb0;	
     d5c:	0200                	addi	s0,sp,256
     d5e:	0304                	addi	s1,sp,384
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d60:	02090003          	lb	zero,32(s2)
    temp = polymult(public_key,N,random_val,48,q,0);
     d64:	0100                	addi	s0,sp,128
     d66:	2a05                	jal	e96 <ntru_deceypt+0xc6>
     d68:	0200                	addi	s0,sp,256
     d6a:	0304                	addi	s1,sp,384
     d6c:	06097f03          	0x6097f03
     d70:	0100                	addi	s0,sp,128
     d72:	3205                	jal	692 <polydiv+0x176>
array_add(temp,message,48);
     d74:	0200                	addi	s0,sp,256
     d76:	0304                	addi	s1,sp,384
     d78:	02090103          	lb	sp,32(s2)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d7c:	0100                	addi	s0,sp,128
     d7e:	2905                	jal	11ae <main+0xf6>
array_add(temp,message,48);
     d80:	0200                	addi	s0,sp,256
     d82:	0304                	addi	s1,sp,384
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d84:	04090003          	lb	zero,64(s2)
     d88:	0100                	addi	s0,sp,128
     d8a:	2805                	jal	dba <ntru_encyrpt+0x96>
     d8c:	0200                	addi	s0,sp,256
     d8e:	0304                	addi	s1,sp,384
     d90:	0306                	slli	t1,t1,0x1
     d92:	097f                	0x97f
    for(i = (2*N); i < (3*N); ++i){
     d94:	0002                	c.slli64	zero
     d96:	0501                	addi	a0,a0,0
     d98:	0020                	addi	s0,sp,8
     d9a:	0402                	c.slli64	s0
     d9c:	0301                	addi	t1,t1,0
     d9e:	0900                	addi	s0,sp,144
}
     da0:	0000                	unimp
     da2:	0501                	addi	a0,a0,0
    resultkon[0] = 0xbbbbbbb1;	
     da4:	000d                	c.nop	3
     da6:	0402                	c.slli64	s0
     da8:	0601                	addi	a2,a2,0
     daa:	00090003          	lb	zero,0(s2)
     dae:	0100                	addi	s0,sp,128
}
     db0:	2505                	jal	13d0 <_bss_start+0x5c>
     db2:	0200                	addi	s0,sp,256
     db4:	0204                	addi	s1,sp,256
     db6:	0306                	slli	t1,t1,0x1
     db8:	097f                	0x97f
     dba:	0004                	0x4
     dbc:	0501                	addi	a0,a0,0
        CT[i-(2*N)] = CT[i];
     dbe:	04020027          	0x4020027
     dc2:	0602                	c.slli64	a2
     dc4:	00090003          	lb	zero,0(s2)
    for(i = (2*N); i < (3*N); ++i){
     dc8:	0100                	addi	s0,sp,128
        CT[i-(2*N)] = CT[i];
     dca:	0905                	addi	s2,s2,1
     dcc:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     dce:	0304                	addi	s1,sp,384
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     dd0:	0306                	slli	t1,t1,0x1
     dd2:	0008090b          	0x8090b
     dd6:	0501                	addi	a0,a0,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     dd8:	0016                	c.slli	zero,0x5
     dda:	0402                	c.slli64	s0
     ddc:	097d0303          	lb	t1,151(s10)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     de0:	0008                	0x8
    resultkon[0] = 0xccccccc0;	
     de2:	0501                	addi	a0,a0,0
     de4:	090c0343          	fmadd.s	ft6,fs8,fa6,ft1,rne
     de8:	0006                	c.slli	zero,0x1
     dea:	0501                	addi	a0,a0,0
     dec:	0305                	addi	t1,t1,1
     dee:	0902                	c.slli64	s2
     df0:	0000                	unimp
     df2:	0301                	addi	t1,t1,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     df4:	0901                	addi	s2,s2,0
     df6:	0000                	unimp
     df8:	0301                	addi	t1,t1,0
     dfa:	0902                	c.slli64	s2
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     dfc:	0000                	unimp
    resultkon[0] = 0xccccccc0;	
     dfe:	0501                	addi	a0,a0,0
     e00:	0609                	addi	a2,a2,2
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e02:	00090003          	lb	zero,0(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e06:	0100                	addi	s0,sp,128
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e08:	4305                	li	t1,1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e0a:	04097b03          	0x4097b03
     e0e:	0100                	addi	s0,sp,128
     e10:	0905                	addi	s2,s2,1
     e12:	02090503          	lb	a0,32(s2)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e16:	0100                	addi	s0,sp,128
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e18:	4305                	li	t1,1
     e1a:	02097b03          	0x2097b03
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e1e:	0100                	addi	s0,sp,128
     e20:	0905                	addi	s2,s2,1
     e22:	18090503          	lb	a0,384(s2)
     e26:	0100                	addi	s0,sp,128
     e28:	4305                	li	t1,1
     e2a:	02097b03          	0x2097b03
    for(i = (2*N); i < ((2*N)+N); ++i){
     e2e:	0100                	addi	s0,sp,128
     e30:	0905                	addi	s2,s2,1
     e32:	04090503          	lb	a0,64(s2)
     e36:	0100                	addi	s0,sp,128
        if(a2[i] <= q/2)
     e38:	06090103          	lb	sp,96(s2)
     e3c:	0100                	addi	s0,sp,128
    for (i = 0; i < N; ++i){
     e3e:	06090203          	lb	tp,96(s2)
     e42:	0100                	addi	s0,sp,128
    c = polymult2(secret_key_fp,N,a2,N,0);
     e44:	04090103          	lb	sp,64(s2)
     e48:	0100                	addi	s0,sp,128
     e4a:	06097f03          	0x6097f03
     e4e:	0100                	addi	s0,sp,128
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     e50:	02090103          	lb	sp,32(s2)
     e54:	0100                	addi	s0,sp,128
     e56:	4305                	li	t1,1
     e58:	06097703          	0x6097703
    for(i = (2*N); i < ((2*N)+N); ++i){
     e5c:	0100                	addi	s0,sp,128
     e5e:	0905                	addi	s2,s2,1
     e60:	04090503          	lb	a0,64(s2)
}
     e64:	0100                	addi	s0,sp,128
    resultkon[0] = 0xccccccc1;	
     e66:	0505                	addi	a0,a0,1
     e68:	0306                	slli	t1,t1,0x1
     e6a:	0901                	addi	s2,s2,0
     e6c:	0004                	0x4
     e6e:	0301                	addi	t1,t1,0
     e70:	0901                	addi	s2,s2,0
}
     e72:	0000                	unimp
     e74:	0301                	addi	t1,t1,0
     e76:	0901                	addi	s2,s2,0
     e78:	0000                	unimp
     e7a:	0301                	addi	t1,t1,0
     e7c:	0901                	addi	s2,s2,0
     e7e:	0000                	unimp
     e80:	0601                	addi	a2,a2,0
     e82:	00090203          	lb	tp,0(s2)
        a2[i-(2*N)] = a2[i];
     e86:	0100                	addi	s0,sp,128
     e88:	4305                	li	t1,1
     e8a:	06097503          	0x6097503
    for(i = (2*N); i < ((2*N)+N); ++i){
     e8e:	0100                	addi	s0,sp,128
     e90:	0905                	addi	s2,s2,1
        a2[i-(2*N)] = a2[i];
     e92:	04090903          	lb	s2,64(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e96:	0100                	addi	s0,sp,128
        if(a2[i] <= q/2)
     e98:	0505                	addi	a0,a0,1
     e9a:	04090203          	lb	tp,64(s2)
            a2[i] = (-1)*(q-a2[i]);
     e9e:	0100                	addi	s0,sp,128
     ea0:	0905                	addi	s2,s2,1
     ea2:	02097e03          	0x2097e03
    for (i = 0; i < N; ++i){
     ea6:	0100                	addi	s0,sp,128
     ea8:	0505                	addi	a0,a0,1
        c2[i-(2*N)] = c2[i];
     eaa:	0306                	slli	t1,t1,0x1
     eac:	0902                	c.slli64	s2
     eae:	0002                	c.slli64	zero
     eb0:	0301                	addi	t1,t1,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     eb2:	0904                	addi	s1,sp,144
     eb4:	0000                	unimp
        c2[i-(2*N)] = c2[i];
     eb6:	0501                	addi	a0,a0,0
     eb8:	060c                	addi	a1,sp,768
    for(i = (2*N); i < ((2*N)+N); ++i){
     eba:	04090003          	lb	zero,64(s2)
  jal x0, default_exc_handler
     ebe:	0100                	addi	s0,sp,128
  mv  x1, x0
     ec0:	1105                	addi	sp,sp,-31
     ec2:	0200                	addi	s0,sp,256
  mv  x2, x1
     ec4:	0104                	addi	s1,sp,128
  mv  x3, x1
     ec6:	0306                	slli	t1,t1,0x1
  mv  x4, x1
     ec8:	0900                	addi	s0,sp,144
  mv  x5, x1
     eca:	0002                	c.slli64	zero
  mv  x6, x1
     ecc:	0501                	addi	a0,a0,0
  mv  x7, x1
     ece:	0005                	c.nop	1
  mv  x8, x1
     ed0:	0402                	c.slli64	s0
  mv  x9, x1
     ed2:	0601                	addi	a2,a2,0
  mv x10, x1
     ed4:	00090003          	lb	zero,0(s2)
  mv x12, x1
     ed8:	0100                	addi	s0,sp,128
  mv x13, x1
     eda:	0306                	slli	t1,t1,0x1
  mv x14, x1
     edc:	00040907          	0x40907
  mv x16, x1
     ee0:	0301                	addi	t1,t1,0
  mv x17, x1
     ee2:	0902                	c.slli64	s2
  mv x18, x1
     ee4:	0008                	0x8
  mv x19, x1
     ee6:	0501                	addi	a0,a0,0
  mv x20, x1
     ee8:	060c                	addi	a1,sp,768
  mv x21, x1
     eea:	02090003          	lb	zero,32(s2)
  mv x23, x1
     eee:	0100                	addi	s0,sp,128
  mv x24, x1
     ef0:	1105                	addi	sp,sp,-31
  mv x25, x1
     ef2:	0200                	addi	s0,sp,256
  mv x26, x1
     ef4:	0104                	addi	s1,sp,128
  mv x27, x1
     ef6:	0306                	slli	t1,t1,0x1
  mv x28, x1
     ef8:	0900                	addi	s0,sp,144
  mv x29, x1
     efa:	0002                	c.slli64	zero
  mv x30, x1
     efc:	0501                	addi	a0,a0,0
  mv x31, x1
     efe:	0005                	c.nop	1
  la   x2, _stack_start
     f00:	0402                	c.slli64	s0
     f02:	0601                	addi	a2,a2,0
     f04:	00090003          	lb	zero,0(s2)
  la x26, _bss_start
     f08:	0100                	addi	s0,sp,128
     f0a:	0c05                	addi	s8,s8,1
     f0c:	04090a03          	lb	s4,64(s2)
  la x27, _bss_end
     f10:	0100                	addi	s0,sp,128
     f12:	1105                	addi	sp,sp,-31
     f14:	0200                	addi	s0,sp,256
     f16:	0104                	addi	s1,sp,128
  bge x26, x27, zero_loop_end
     f18:	0306                	slli	t1,t1,0x1
     f1a:	0900                	addi	s0,sp,144
  sw x0, 0(x26)
     f1c:	0002                	c.slli64	zero
     f1e:	0501                	addi	a0,a0,0
  addi x26, x26, 4
     f20:	0005                	c.nop	1
  ble x26, x27, zero_loop
     f22:	0402                	c.slli64	s0
     f24:	0601                	addi	a2,a2,0
  addi x10, x0, 0
     f26:	00090003          	lb	zero,0(s2)
  addi x11, x0, 0
     f2a:	0100                	addi	s0,sp,128
     f2c:	1805                	addi	a6,a6,-31
  jal x1, main
     f2e:	0200                	addi	s0,sp,256
     f30:	0104                	addi	s1,sp,128
     f32:	0306                	slli	t1,t1,0x1
     f34:	0906                	slli	s2,s2,0x1
     f36:	0004                	0x4
     f38:	0501                	addi	a0,a0,0
     f3a:	0005                	c.nop	1
     f3c:	0402                	c.slli64	s0
     f3e:	0601                	addi	a2,a2,0
     f40:	08090003          	lb	zero,128(s2)
     f44:	0100                	addi	s0,sp,128
     f46:	0c05                	addi	s8,s8,1
     f48:	0200                	addi	s0,sp,256
     f4a:	0104                	addi	s1,sp,128
     f4c:	04097a03          	0x4097a03
     f50:	0100                	addi	s0,sp,128
     f52:	0200                	addi	s0,sp,256
     f54:	0104                	addi	s1,sp,128
     f56:	04090f03          	lb	t5,64(s2)
     f5a:	0100                	addi	s0,sp,128
     f5c:	1105                	addi	sp,sp,-31
     f5e:	0200                	addi	s0,sp,256
     f60:	0104                	addi	s1,sp,128
     f62:	0306                	slli	t1,t1,0x1
     f64:	097f                	0x97f
     f66:	0002                	c.slli64	zero
     f68:	0501                	addi	a0,a0,0
     f6a:	0005                	c.nop	1
     f6c:	0402                	c.slli64	s0
     f6e:	0601                	addi	a2,a2,0
     f70:	00090003          	lb	zero,0(s2)
     f74:	0100                	addi	s0,sp,128
     f76:	0d05                	addi	s10,s10,1
     f78:	0306                	slli	t1,t1,0x1
     f7a:	0961                	addi	s2,s2,24
     f7c:	0008                	0x8
     f7e:	0501                	addi	a0,a0,0
     f80:	00030627          	0x30627
     f84:	0009                	c.nop	2
     f86:	0100                	addi	s0,sp,128
     f88:	1905                	addi	s2,s2,-31
     f8a:	02090003          	lb	zero,32(s2)
     f8e:	0100                	addi	s0,sp,128
     f90:	0f05                	addi	t5,t5,1
     f92:	0306                	slli	t1,t1,0x1
     f94:	097f                	0x97f
     f96:	0002                	c.slli64	zero
     f98:	0501                	addi	a0,a0,0
     f9a:	0618                	addi	a4,sp,768
     f9c:	00090003          	lb	zero,0(s2)
     fa0:	0100                	addi	s0,sp,128
     fa2:	0f05                	addi	t5,t5,1
     fa4:	02090003          	lb	zero,32(s2)
     fa8:	0100                	addi	s0,sp,128
     faa:	0905                	addi	s2,s2,1
     fac:	0200                	addi	s0,sp,256
     fae:	0204                	addi	s1,sp,256
     fb0:	0306                	slli	t1,t1,0x1
     fb2:	00040903          	lb	s2,0(s0)
     fb6:	0501                	addi	a0,a0,0
     fb8:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     fbc:	0602                	c.slli64	a2
     fbe:	00090003          	lb	zero,0(s2)
     fc2:	0100                	addi	s0,sp,128
     fc4:	1d05                	addi	s10,s10,-31
     fc6:	0200                	addi	s0,sp,256
     fc8:	0204                	addi	s1,sp,256
     fca:	04097c03          	0x4097c03
     fce:	0100                	addi	s0,sp,128
     fd0:	1505                	addi	a0,a0,-31
     fd2:	0200                	addi	s0,sp,256
     fd4:	0204                	addi	s1,sp,256
     fd6:	04090403          	lb	s0,64(s2)
     fda:	0100                	addi	s0,sp,128
     fdc:	1d05                	addi	s10,s10,-31
     fde:	0200                	addi	s0,sp,256
     fe0:	0204                	addi	s1,sp,256
     fe2:	0306                	slli	t1,t1,0x1
     fe4:	097c                	addi	a5,sp,156
     fe6:	0004                	0x4
     fe8:	0501                	addi	a0,a0,0
     fea:	030d                	addi	t1,t1,3
     fec:	0002090b          	0x2090b
     ff0:	0501                	addi	a0,a0,0
     ff2:	0003062b          	0x3062b
     ff6:	0009                	c.nop	2
     ff8:	0100                	addi	s0,sp,128
     ffa:	1b05                	addi	s6,s6,-31
     ffc:	02090003          	lb	zero,32(s2)
    1000:	0100                	addi	s0,sp,128
    1002:	0f05                	addi	t5,t5,1
    1004:	0306                	slli	t1,t1,0x1
    1006:	097f                	0x97f
    1008:	0002                	c.slli64	zero
    100a:	0501                	addi	a0,a0,0
    100c:	061a                	slli	a2,a2,0x6
    100e:	00090003          	lb	zero,0(s2)
    1012:	0100                	addi	s0,sp,128
    1014:	0f05                	addi	t5,t5,1
    1016:	02090003          	lb	zero,32(s2)
    101a:	0100                	addi	s0,sp,128
    101c:	0905                	addi	s2,s2,1
    101e:	0200                	addi	s0,sp,256
    1020:	0204                	addi	s1,sp,256
    1022:	0306                	slli	t1,t1,0x1
    1024:	00040903          	lb	s2,0(s0)
    1028:	0501                	addi	a0,a0,0
    102a:	04020027          	0x4020027
    102e:	0602                	c.slli64	a2
    1030:	00090003          	lb	zero,0(s2)
    1034:	0100                	addi	s0,sp,128
    1036:	1d05                	addi	s10,s10,-31
    1038:	0200                	addi	s0,sp,256
    103a:	0204                	addi	s1,sp,256
    103c:	04097c03          	0x4097c03
    1040:	0100                	addi	s0,sp,128
    1042:	1705                	addi	a4,a4,-31
    1044:	0200                	addi	s0,sp,256
    1046:	0204                	addi	s1,sp,256
    1048:	04090403          	lb	s0,64(s2)
    104c:	0100                	addi	s0,sp,128
    104e:	1d05                	addi	s10,s10,-31
    1050:	0200                	addi	s0,sp,256
    1052:	0204                	addi	s1,sp,256
    1054:	0306                	slli	t1,t1,0x1
    1056:	097c                	addi	a5,sp,156
    1058:	0004                	0x4
    105a:	0501                	addi	a0,a0,0
    105c:	0009                	c.nop	2
    105e:	0402                	c.slli64	s0
    1060:	090b0303          	lb	t1,144(s6)
    1064:	0002                	c.slli64	zero
    1066:	0501                	addi	a0,a0,0
    1068:	000e                	c.slli	zero,0x3
    106a:	0402                	c.slli64	s0
    106c:	00030603          	lb	a2,0(t1)
    1070:	0409                	addi	s0,s0,2
    1072:	0100                	addi	s0,sp,128
    1074:	0200                	addi	s0,sp,256
    1076:	0304                	addi	s1,sp,384
    1078:	04090103          	lb	sp,64(s2)
    107c:	0100                	addi	s0,sp,128
    107e:	0200                	addi	s0,sp,256
    1080:	0304                	addi	s1,sp,384
    1082:	02097f03          	0x2097f03
    1086:	0100                	addi	s0,sp,128
    1088:	0905                	addi	s2,s2,1
    108a:	0200                	addi	s0,sp,256
    108c:	0304                	addi	s1,sp,384
    108e:	0306                	slli	t1,t1,0x1
    1090:	0901                	addi	s2,s2,0
    1092:	0004                	0x4
    1094:	0501                	addi	a0,a0,0
    1096:	000e                	c.slli	zero,0x3
    1098:	0402                	c.slli64	s0
    109a:	00030603          	lb	a2,0(t1)
    109e:	0009                	c.nop	2
    10a0:	0100                	addi	s0,sp,128
    10a2:	1d05                	addi	s10,s10,-31
    10a4:	0200                	addi	s0,sp,256
    10a6:	0304                	addi	s1,sp,384
    10a8:	0306                	slli	t1,t1,0x1
    10aa:	097e                	slli	s2,s2,0x1f
    10ac:	0004                	0x4
    10ae:	0501                	addi	a0,a0,0
    10b0:	0309                	addi	t1,t1,2
    10b2:	00040907          	0x40907
    10b6:	0501                	addi	a0,a0,0
int main(){
    10b8:	0003060b          	0x3060b
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    10bc:	0009                	c.nop	2
    10be:	0100                	addi	s0,sp,128
    10c0:	2005                	jal	10e0 <main+0x28>
    10c2:	0200                	addi	s0,sp,256
    10c4:	0204                	addi	s1,sp,256
    10c6:	0306                	slli	t1,t1,0x1
    10c8:	097f                	0x97f
int main(){
    10ca:	0002                	c.slli64	zero
    10cc:	0501                	addi	a0,a0,0
    10ce:	0022                	c.slli	zero,0x8
    10d0:	0402                	c.slli64	s0
    10d2:	0602                	c.slli64	a2
    10d4:	00090003          	lb	zero,0(s2)
    10d8:	0100                	addi	s0,sp,128
    resultkon[0] = 0xaaaaaaa0;
    10da:	0905                	addi	s2,s2,1
    10dc:	0306                	slli	t1,t1,0x1
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    10de:	0909                	addi	s2,s2,2
    resultkon[0] = 0xaaaaaaa0;
    10e0:	0004                	0x4
    10e2:	0501                	addi	a0,a0,0
    10e4:	0615                	addi	a2,a2,5
    10e6:	00090003          	lb	zero,0(s2)
    10ea:	0100                	addi	s0,sp,128
    keys = generate_keys(N, p, q);
    10ec:	0c05                	addi	s8,s8,1
    10ee:	06090003          	lb	zero,96(s2)
    10f2:	0100                	addi	s0,sp,128
    10f4:	1a05                	addi	s4,s4,-31
    resultkon[0] = 0xaaaaaaa0;
    10f6:	0200                	addi	s0,sp,256
    resultkon[0] = 0xaaaaaaa1;
    10f8:	0204                	addi	s1,sp,256
    10fa:	0306                	slli	t1,t1,0x1
    keys = generate_keys(N, p, q);
    10fc:	097f                	0x97f
    resultkon[0] = 0xaaaaaaa1;
    10fe:	0004                	0x4
    1100:	0501                	addi	a0,a0,0
    for(i = 0; i < N; ++i){
    1102:	0309                	addi	t1,t1,2
    1104:	00040907          	0x40907
        secret_key_f[i] = keys[i];
    1108:	0501                	addi	a0,a0,0
    110a:	0003060b          	0x3060b
    110e:	0009                	c.nop	2
    1110:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
    1112:	2005                	jal	1132 <main+0x7a>
    1114:	0200                	addi	s0,sp,256
    1116:	0204                	addi	s1,sp,256
    for(i = N; i < (2*N); ++i){
    1118:	0306                	slli	t1,t1,0x1
    111a:	097f                	0x97f
    111c:	0002                	c.slli64	zero
    111e:	0501                	addi	a0,a0,0
    1120:	0022                	c.slli	zero,0x8
    1122:	0402                	c.slli64	s0
        secret_key_fp[i-(2*N)] = keys[i];
    1124:	0602                	c.slli64	a2
    1126:	00090003          	lb	zero,0(s2)
    112a:	0100                	addi	s0,sp,128
    112c:	1805                	addi	a6,a6,-31
    for(i = (2*N); i < (3*N); ++i){
    112e:	0200                	addi	s0,sp,256
    1130:	0104                	addi	s1,sp,128
    for(i = (3*N); i < (4*N); ++i){
    1132:	0306                	slli	t1,t1,0x1
    1134:	0900                	addi	s0,sp,144
    1136:	0002                	c.slli64	zero
    1138:	0501                	addi	a0,a0,0
    113a:	0005                	c.nop	1
    113c:	0402                	c.slli64	s0
        public_key[i-(4*N)] = keys[i];
    113e:	0601                	addi	a2,a2,0
    1140:	08090003          	lb	zero,128(s2)
    1144:	0100                	addi	s0,sp,128
    1146:	0b05                	addi	s6,s6,1
    for(i = (4*N); i < (5*N); ++i){
    1148:	0306                	slli	t1,t1,0x1
    114a:	090c                	addi	a1,sp,144
    114c:	0004                	0x4
    114e:	0501                	addi	a0,a0,0
    1150:	0306                	slli	t1,t1,0x1
    1152:	040900c3          	0x40900c3
        ring_poly[i-(5*N)] = keys[i];
    1156:	0100                	addi	s0,sp,128
    1158:	0505                	addi	a0,a0,1
    115a:	0e090303          	lb	t1,224(s2)
    for(i = (5*N); i < (6*N+1); ++i){
    115e:	0100                	addi	s0,sp,128
    1160:	1b05                	addi	s6,s6,-31
    resultkon[0] = 0xbbbbbbb0;
    1162:	0306                	slli	t1,t1,0x1
    1164:	0900                	addi	s0,sp,144
    1166:	0000                	unimp
    1168:	0501                	addi	a0,a0,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    116a:	09010313          	addi	t1,sp,144
    116e:	0004                	0x4
    1170:	0501                	addi	a0,a0,0
    1172:	0015                	c.nop	5
    1174:	0402                	c.slli64	s0
    resultkon[0] = 0xbbbbbbb0;
    1176:	0601                	addi	a2,a2,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1178:	08097f03          	0x8097f03
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    117c:	0100                	addi	s0,sp,128
    117e:	0505                	addi	a0,a0,1
    resultkon[0] = 0xbbbbbbb1;
    1180:	0200                	addi	s0,sp,256
    1182:	0104                	addi	s1,sp,128
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1184:	0306                	slli	t1,t1,0x1
    1186:	0900                	addi	s0,sp,144
    1188:	0000                	unimp
    118a:	0601                	addi	a2,a2,0
    118c:	04090403          	lb	s0,64(s2)
    1190:	0100                	addi	s0,sp,128
    resultkon[0] = 0xbbbbbbb1;
    1192:	00090203          	lb	tp,0(s2)
            resultkon[0] = 0xDEDEDEDE;
    1196:	0100                	addi	s0,sp,128
    1198:	0105                	addi	sp,sp,1
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    119a:	0306                	slli	t1,t1,0x1
            resultkon[0] = 0xDEDEDEDE;
    119c:	0901                	addi	s2,s2,0
    119e:	0000                	unimp
    for(i = 0; i < 32; ++i){
    11a0:	0501                	addi	a0,a0,0
    11a2:	0609                	addi	a2,a2,2
        if(!(message[i] == Dec_Message[i])){
    11a4:	097fb603          	0x97fb603
    11a8:	002a                	c.slli	zero,0xa
    11aa:	0501                	addi	a0,a0,0
    11ac:	0616                	slli	a2,a2,0x5
    11ae:	00090003          	lb	zero,0(s2)
    11b2:	0100                	addi	s0,sp,128
            resultkon[0] = 0xBABABABA;
    11b4:	0d05                	addi	s10,s10,1
    11b6:	04090003          	lb	zero,64(s2)
    11ba:	0100                	addi	s0,sp,128
    11bc:	1305                	addi	t1,t1,-31
}
    11be:	04090003          	lb	zero,64(s2)
    11c2:	0100                	addi	s0,sp,128
    11c4:	0905                	addi	s2,s2,1
    11c6:	0306                	slli	t1,t1,0x1
    11c8:	0902                	c.slli64	s2
    11ca:	0006                	c.slli	zero,0x1
    11cc:	0501                	addi	a0,a0,0
    11ce:	0610                	addi	a2,sp,768
    11d0:	02090003          	lb	zero,32(s2)
    11d4:	0100                	addi	s0,sp,128
            resultkon[0] = 0xDEDEDEDE;
    11d6:	1505                	addi	a0,a0,-31
    for(i = 0; i < 32; ++i){
    11d8:	0200                	addi	s0,sp,256
    11da:	0104                	addi	s1,sp,128
    11dc:	0306                	slli	t1,t1,0x1
    11de:	0900                	addi	s0,sp,144
    11e0:	0002                	c.slli64	zero
    11e2:	0501                	addi	a0,a0,0
    11e4:	0009                	c.nop	2
    11e6:	0402                	c.slli64	s0
    11e8:	0601                	addi	a2,a2,0
    11ea:	00090003          	lb	zero,0(s2)
    11ee:	0100                	addi	s0,sp,128
    11f0:	0306                	slli	t1,t1,0x1
    11f2:	00040907          	0x40907
    11f6:	0501                	addi	a0,a0,0
    11f8:	00030613          	mv	a2,t1
    11fc:	0009                	c.nop	2
    11fe:	0100                	addi	s0,sp,128
    1200:	0905                	addi	s2,s2,1
    1202:	0306                	slli	t1,t1,0x1
    1204:	000e0903          	lb	s2,0(t3)
    1208:	0501                	addi	a0,a0,0
    120a:	0610                	addi	a2,sp,768
    120c:	02090003          	lb	zero,32(s2)
    1210:	0100                	addi	s0,sp,128
    1212:	1505                	addi	a0,a0,-31
    1214:	0200                	addi	s0,sp,256
    1216:	0104                	addi	s1,sp,128
    1218:	0306                	slli	t1,t1,0x1
    121a:	0900                	addi	s0,sp,144
    121c:	0002                	c.slli64	zero
    121e:	0501                	addi	a0,a0,0
    1220:	0009                	c.nop	2
    1222:	0402                	c.slli64	s0
    1224:	0601                	addi	a2,a2,0
    1226:	00090003          	lb	zero,0(s2)
    122a:	0100                	addi	s0,sp,128
    122c:	1005                	c.nop	-31
    122e:	06090803          	lb	a6,96(s2)
    1232:	0100                	addi	s0,sp,128
    1234:	1505                	addi	a0,a0,-31
    1236:	0200                	addi	s0,sp,256
    1238:	0104                	addi	s1,sp,128
    123a:	0306                	slli	t1,t1,0x1
    123c:	0900                	addi	s0,sp,144
    123e:	0002                	c.slli64	zero
    1240:	0501                	addi	a0,a0,0
    1242:	0009                	c.nop	2
    1244:	0402                	c.slli64	s0
    1246:	0601                	addi	a2,a2,0
    1248:	00090003          	lb	zero,0(s2)
    124c:	0100                	addi	s0,sp,128
    124e:	1005                	c.nop	-31
    1250:	06090603          	lb	a2,96(s2)
    1254:	0100                	addi	s0,sp,128
    1256:	1505                	addi	a0,a0,-31
    1258:	0200                	addi	s0,sp,256
    125a:	0104                	addi	s1,sp,128
    125c:	0306                	slli	t1,t1,0x1
    125e:	0900                	addi	s0,sp,144
    1260:	0002                	c.slli64	zero
    1262:	0501                	addi	a0,a0,0
    1264:	0009                	c.nop	2
    1266:	0402                	c.slli64	s0
    1268:	0601                	addi	a2,a2,0
    126a:	00090003          	lb	zero,0(s2)
    126e:	0100                	addi	s0,sp,128
    1270:	0306                	slli	t1,t1,0x1
    1272:	0909                	addi	s2,s2,2
    1274:	0004                	0x4
    1276:	0301                	addi	t1,t1,0
    1278:	00080903          	lb	s2,0(a6)
    127c:	0501                	addi	a0,a0,0
    127e:	0003060f          	0x3060f
    1282:	0209                	addi	tp,tp,2
    1284:	0100                	addi	s0,sp,128
    1286:	1405                	addi	s0,s0,-31
    1288:	0200                	addi	s0,sp,256
    128a:	0104                	addi	s1,sp,128
    128c:	0306                	slli	t1,t1,0x1
    128e:	0900                	addi	s0,sp,144
    1290:	0002                	c.slli64	zero
    1292:	0501                	addi	a0,a0,0
    1294:	0009                	c.nop	2
    1296:	0402                	c.slli64	s0
    1298:	0601                	addi	a2,a2,0
    129a:	00090003          	lb	zero,0(s2)
    129e:	0100                	addi	s0,sp,128
    12a0:	1005                	c.nop	-31
    12a2:	04090703          	lb	a4,64(s2)
    12a6:	0100                	addi	s0,sp,128
    12a8:	1c05                	addi	s8,s8,-31
    12aa:	0200                	addi	s0,sp,256
    12ac:	0104                	addi	s1,sp,128
    12ae:	0306                	slli	t1,t1,0x1
    12b0:	0900                	addi	s0,sp,144
    12b2:	0002                	c.slli64	zero
    12b4:	0501                	addi	a0,a0,0
    12b6:	0009                	c.nop	2
    12b8:	0402                	c.slli64	s0
    12ba:	0601                	addi	a2,a2,0
    12bc:	08090003          	lb	zero,128(s2)
    12c0:	0100                	addi	s0,sp,128
    12c2:	0d05                	addi	s10,s10,1
    12c4:	0200                	addi	s0,sp,256
    12c6:	0304                	addi	s1,sp,384
    12c8:	0306                	slli	t1,t1,0x1
    12ca:	0956                	slli	s2,s2,0x15
    12cc:	0008                	0x8
    12ce:	0501                	addi	a0,a0,0
    12d0:	0019                	c.nop	6
    12d2:	0402                	c.slli64	s0
    12d4:	00030603          	lb	a2,0(t1)
    12d8:	0009                	c.nop	2
    12da:	0100                	addi	s0,sp,128
    12dc:	2105                	jal	16fc <product2+0x130>
    12de:	0200                	addi	s0,sp,256
    12e0:	0304                	addi	s1,sp,384
    12e2:	02097f03          	0x2097f03
    12e6:	0100                	addi	s0,sp,128
    12e8:	1905                	addi	s2,s2,-31
    12ea:	0200                	addi	s0,sp,256
    12ec:	0304                	addi	s1,sp,384
    12ee:	04090103          	lb	sp,64(s2)
    12f2:	0100                	addi	s0,sp,128
    12f4:	1205                	addi	tp,tp,-31
    12f6:	0200                	addi	s0,sp,256
    12f8:	0304                	addi	s1,sp,384
    12fa:	04090003          	lb	zero,64(s2)
    12fe:	0100                	addi	s0,sp,128
    1300:	2105                	jal	1720 <product2+0x154>
    1302:	0200                	addi	s0,sp,256
    1304:	0304                	addi	s1,sp,384
    1306:	0306                	slli	t1,t1,0x1
    1308:	097f                	0x97f
    130a:	0004                	0x4
    130c:	0501                	addi	a0,a0,0
    130e:	0311                	addi	t1,t1,4
    1310:	090c                	addi	a1,sp,144
    1312:	0002                	c.slli64	zero
    1314:	0501                	addi	a0,a0,0
    1316:	0629                	addi	a2,a2,10
    1318:	00090003          	lb	zero,0(s2)
    131c:	0100                	addi	s0,sp,128
    131e:	1c05                	addi	s8,s8,-31
    1320:	02090003          	lb	zero,32(s2)
    1324:	0100                	addi	s0,sp,128
    1326:	1305                	addi	t1,t1,-31
    1328:	0306                	slli	t1,t1,0x1
    132a:	097f                	0x97f
    132c:	0002                	c.slli64	zero
    132e:	0501                	addi	a0,a0,0
    1330:	0003061b          	0x3061b
    1334:	0009                	c.nop	2
    1336:	0100                	addi	s0,sp,128
    1338:	1305                	addi	t1,t1,-31
    133a:	02090003          	lb	zero,32(s2)
    133e:	0100                	addi	s0,sp,128
    1340:	0d05                	addi	s10,s10,1
    1342:	0200                	addi	s0,sp,256
    1344:	0204                	addi	s1,sp,256
    1346:	0306                	slli	t1,t1,0x1
    1348:	00040903          	lb	s2,0(s0)
    134c:	0501                	addi	a0,a0,0
    134e:	0025                	c.nop	9
    1350:	0402                	c.slli64	s0
    1352:	0602                	c.slli64	a2
    1354:	00090003          	lb	zero,0(s2)
    1358:	0100                	addi	s0,sp,128
    135a:	2105                	jal	177a <product2+0x1ae>
    135c:	0200                	addi	s0,sp,256
    135e:	0204                	addi	s1,sp,256
    1360:	04097c03          	0x4097c03
    1364:	0100                	addi	s0,sp,128
    1366:	1805                	addi	a6,a6,-31
    1368:	0200                	addi	s0,sp,256
    136a:	0204                	addi	s1,sp,256
    136c:	04090403          	lb	s0,64(s2)
    1370:	0100                	addi	s0,sp,128
    1372:	2105                	jal	1792 <product2+0x1c6>
    1374:	0200                	addi	s0,sp,256
    1376:	0204                	addi	s1,sp,256
    1378:	0306                	slli	t1,t1,0x1
    137a:	097c                	addi	a5,sp,156
    137c:	0004                	0x4
    137e:	0501                	addi	a0,a0,0
    1380:	000d                	c.nop	3
    1382:	0402                	c.slli64	s0
    1384:	09090303          	lb	t1,144(s2)
    1388:	0002                	c.slli64	zero
    138a:	0501                	addi	a0,a0,0
    138c:	0030                	addi	a2,sp,8
    138e:	0402                	c.slli64	s0
    1390:	00030603          	lb	a2,0(t1)
    1394:	0009                	c.nop	2
    1396:	0100                	addi	s0,sp,128
    1398:	2705                	jal	1ab8 <ti_2+0x3c>
    139a:	0200                	addi	s0,sp,256
    139c:	0304                	addi	s1,sp,384
    139e:	06090003          	lb	zero,96(s2)
    13a2:	0100                	addi	s0,sp,128
    13a4:	2105                	jal	17c4 <product2+0x1f8>
    13a6:	0200                	addi	s0,sp,256
    13a8:	0304                	addi	s1,sp,384
    13aa:	04097f03          	0x4097f03
    13ae:	0100                	addi	s0,sp,128
    13b0:	2705                	jal	1ad0 <ti_2+0x54>
    13b2:	0200                	addi	s0,sp,256
    13b4:	0304                	addi	s1,sp,384
    13b6:	04090103          	lb	sp,64(s2)
    13ba:	0100                	addi	s0,sp,128
    13bc:	1905                	addi	s2,s2,-31
    13be:	0200                	addi	s0,sp,256
    13c0:	0304                	addi	s1,sp,384
    13c2:	02090003          	lb	zero,32(s2)
    13c6:	0100                	addi	s0,sp,128
    13c8:	2105                	jal	17e8 <product2+0x21c>
    13ca:	0200                	addi	s0,sp,256
    13cc:	0304                	addi	s1,sp,384
    13ce:	0306                	slli	t1,t1,0x1
    13d0:	097f                	0x97f
    13d2:	0004                	0x4
    13d4:	0501                	addi	a0,a0,0
    13d6:	0311                	addi	t1,t1,4
    13d8:	0908                	addi	a0,sp,144
    13da:	0002                	c.slli64	zero
    13dc:	0501                	addi	a0,a0,0
    13de:	0003062b          	0x3062b
    13e2:	0009                	c.nop	2
    13e4:	0100                	addi	s0,sp,128
    13e6:	1d05                	addi	s10,s10,-31
    13e8:	02090003          	lb	zero,32(s2)
    13ec:	0100                	addi	s0,sp,128
    13ee:	1305                	addi	t1,t1,-31
    13f0:	0306                	slli	t1,t1,0x1
    13f2:	097f                	0x97f
    13f4:	0002                	c.slli64	zero
    13f6:	0501                	addi	a0,a0,0
    13f8:	061c                	addi	a5,sp,768
    13fa:	00090003          	lb	zero,0(s2)
    13fe:	0100                	addi	s0,sp,128
    1400:	1305                	addi	t1,t1,-31
    1402:	02090003          	lb	zero,32(s2)
    1406:	0100                	addi	s0,sp,128
    1408:	0d05                	addi	s10,s10,1
    140a:	0200                	addi	s0,sp,256
    140c:	0204                	addi	s1,sp,256
    140e:	0306                	slli	t1,t1,0x1
    1410:	00040903          	lb	s2,0(s0)
    1414:	0501                	addi	a0,a0,0
    1416:	04020027          	0x4020027
    141a:	0602                	c.slli64	a2
    141c:	00090003          	lb	zero,0(s2)
    1420:	0100                	addi	s0,sp,128
    1422:	2105                	jal	1842 <result+0x1e>
    1424:	0200                	addi	s0,sp,256
    1426:	0204                	addi	s1,sp,256
    1428:	04097c03          	0x4097c03
    142c:	0100                	addi	s0,sp,128
    142e:	1905                	addi	s2,s2,-31
    1430:	0200                	addi	s0,sp,256
    1432:	0204                	addi	s1,sp,256
    1434:	04090403          	lb	s0,64(s2)
    1438:	0100                	addi	s0,sp,128
    143a:	2105                	jal	185a <result+0x36>
    143c:	0200                	addi	s0,sp,256
    143e:	0204                	addi	s1,sp,256
    1440:	0306                	slli	t1,t1,0x1
    1442:	097c                	addi	a5,sp,156
    1444:	0004                	0x4
    1446:	0501                	addi	a0,a0,0
    1448:	000d                	c.nop	3
    144a:	0402                	c.slli64	s0
    144c:	090d0303          	lb	t1,144(s10)
    1450:	0002                	c.slli64	zero
    1452:	0501                	addi	a0,a0,0
    1454:	0019                	c.nop	6
    1456:	0402                	c.slli64	s0
    1458:	00030603          	lb	a2,0(t1)
    145c:	0009                	c.nop	2
    145e:	0100                	addi	s0,sp,128
    1460:	2005                	jal	1480 <_bss_start+0x10c>
    1462:	0200                	addi	s0,sp,256
    1464:	0304                	addi	s1,sp,384
    1466:	02097f03          	0x2097f03
    146a:	0100                	addi	s0,sp,128
    146c:	1905                	addi	s2,s2,-31
    146e:	0200                	addi	s0,sp,256
    1470:	0304                	addi	s1,sp,384
    1472:	04090103          	lb	sp,64(s2)
    1476:	0100                	addi	s0,sp,128
    1478:	1205                	addi	tp,tp,-31
    147a:	0200                	addi	s0,sp,256
    147c:	0304                	addi	s1,sp,384
    147e:	04090003          	lb	zero,64(s2)
    1482:	0100                	addi	s0,sp,128
    1484:	2005                	jal	14a4 <_bss_start+0x130>
    1486:	0200                	addi	s0,sp,256
    1488:	0304                	addi	s1,sp,384
    148a:	0306                	slli	t1,t1,0x1
    148c:	097f                	0x97f
    148e:	0004                	0x4
    1490:	0501                	addi	a0,a0,0
    1492:	030d                	addi	t1,t1,3
    1494:	0908                	addi	a0,sp,144
    1496:	0002                	c.slli64	zero
    1498:	0501                	addi	a0,a0,0
    149a:	0003060f          	0x3060f
    149e:	0009                	c.nop	2
    14a0:	0100                	addi	s0,sp,128
    14a2:	2405                	jal	16c2 <product2+0xf6>
    14a4:	0200                	addi	s0,sp,256
    14a6:	0204                	addi	s1,sp,256
    14a8:	0306                	slli	t1,t1,0x1
    14aa:	097f                	0x97f
    14ac:	0002                	c.slli64	zero
    14ae:	0501                	addi	a0,a0,0
    14b0:	0026                	c.slli	zero,0x9
    14b2:	0402                	c.slli64	s0
    14b4:	0602                	c.slli64	a2
    14b6:	00090003          	lb	zero,0(s2)
    14ba:	0100                	addi	s0,sp,128
    14bc:	0d05                	addi	s10,s10,1
    14be:	0200                	addi	s0,sp,256
    14c0:	0304                	addi	s1,sp,384
    14c2:	0306                	slli	t1,t1,0x1
    14c4:	0909                	addi	s2,s2,2
    14c6:	0004                	0x4
    14c8:	0501                	addi	a0,a0,0
    14ca:	0012                	c.slli	zero,0x4
    14cc:	0402                	c.slli64	s0
    14ce:	00030603          	lb	a2,0(t1)
    14d2:	0009                	c.nop	2
    14d4:	0100                	addi	s0,sp,128
    14d6:	2105                	jal	18f6 <result+0xd2>
    14d8:	0200                	addi	s0,sp,256
    14da:	0304                	addi	s1,sp,384
    14dc:	0306                	slli	t1,t1,0x1
    14de:	097f                	0x97f
    14e0:	000a                	c.slli	zero,0x2
    14e2:	0501                	addi	a0,a0,0
    14e4:	0015                	c.nop	5
    14e6:	0402                	c.slli64	s0
    14e8:	0301                	addi	t1,t1,0
    14ea:	0900                	addi	s0,sp,144
    14ec:	0002                	c.slli64	zero
    14ee:	0501                	addi	a0,a0,0
    14f0:	0009                	c.nop	2
    14f2:	0402                	c.slli64	s0
    14f4:	0601                	addi	a2,a2,0
    14f6:	00090003          	lb	zero,0(s2)
    14fa:	0100                	addi	s0,sp,128
    14fc:	0200                	addi	s0,sp,256
    14fe:	0304                	addi	s1,sp,384
    1500:	0306                	slli	t1,t1,0x1
    1502:	0006090f          	0x6090f
    1506:	0501                	addi	a0,a0,0
    1508:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    150c:	00030603          	lb	a2,0(t1)
    1510:	0009                	c.nop	2
    1512:	0100                	addi	s0,sp,128
    1514:	2505                	jal	1b34 <ti_2+0xb8>
    1516:	0200                	addi	s0,sp,256
    1518:	0304                	addi	s1,sp,384
    151a:	0306                	slli	t1,t1,0x1
    151c:	097f                	0x97f
    151e:	000c                	0xc
    1520:	0501                	addi	a0,a0,0
    1522:	033c                	addi	a5,sp,392
    1524:	090a                	slli	s2,s2,0x2
    1526:	0006                	c.slli	zero,0x1
    1528:	0501                	addi	a0,a0,0
    152a:	0305                	addi	t1,t1,1
    152c:	0902                	c.slli64	s2
    152e:	0000                	unimp
    1530:	0301                	addi	t1,t1,0
    1532:	0901                	addi	s2,s2,0
    1534:	0000                	unimp
    1536:	0301                	addi	t1,t1,0
    1538:	0901                	addi	s2,s2,0
    153a:	0000                	unimp
    153c:	0501                	addi	a0,a0,0
    153e:	0609                	addi	a2,a2,2
    1540:	00090003          	lb	zero,0(s2)
    1544:	0100                	addi	s0,sp,128
    1546:	3c05                	jal	f76 <memcpy+0x44>
    1548:	04097c03          	0x4097c03
    154c:	0100                	addi	s0,sp,128
    154e:	0905                	addi	s2,s2,1
    1550:	02090403          	lb	s0,32(s2)
    1554:	0100                	addi	s0,sp,128
    1556:	3c05                	jal	f86 <memcpy+0x54>
    1558:	04097c03          	0x4097c03
    155c:	0100                	addi	s0,sp,128
    155e:	0905                	addi	s2,s2,1
    1560:	1c090403          	lb	s0,448(s2)
    1564:	0100                	addi	s0,sp,128
    1566:	06090103          	lb	sp,96(s2)
    156a:	0100                	addi	s0,sp,128
    156c:	06090103          	lb	sp,96(s2)
    1570:	0100                	addi	s0,sp,128
    1572:	06090203          	lb	tp,96(s2)
    1576:	0100                	addi	s0,sp,128
    1578:	06090103          	lb	sp,96(s2)
    157c:	0100                	addi	s0,sp,128
    157e:	06090103          	lb	sp,96(s2)
    1582:	0100                	addi	s0,sp,128
    1584:	06090103          	lb	sp,96(s2)
    1588:	0100                	addi	s0,sp,128
    158a:	3c05                	jal	fba <memcpy+0x88>
    158c:	04097503          	0x4097503
    1590:	0100                	addi	s0,sp,128
    1592:	0905                	addi	s2,s2,1
    1594:	06090403          	lb	s0,96(s2)
    1598:	0100                	addi	s0,sp,128
    159a:	0505                	addi	a0,a0,1
    159c:	0306                	slli	t1,t1,0x1
    159e:	0901                	addi	s2,s2,0
    15a0:	0004                	0x4
    15a2:	0301                	addi	t1,t1,0
    15a4:	0901                	addi	s2,s2,0
    15a6:	0000                	unimp
    15a8:	0301                	addi	t1,t1,0
    15aa:	0902                	c.slli64	s2
    15ac:	0000                	unimp
    15ae:	0301                	addi	t1,t1,0
    15b0:	0901                	addi	s2,s2,0
    15b2:	0000                	unimp
    15b4:	0301                	addi	t1,t1,0
    15b6:	0901                	addi	s2,s2,0
    15b8:	0000                	unimp
    15ba:	0301                	addi	t1,t1,0
    15bc:	0901                	addi	s2,s2,0
    15be:	0000                	unimp
    15c0:	0501                	addi	a0,a0,0
    15c2:	0609                	addi	a2,a2,2
    15c4:	00090003          	lb	zero,0(s2)
    15c8:	0100                	addi	s0,sp,128
    15ca:	0505                	addi	a0,a0,1
    15cc:	0306                	slli	t1,t1,0x1
    15ce:	0901                	addi	s2,s2,0
    15d0:	0002                	c.slli64	zero
    15d2:	0301                	addi	t1,t1,0
    15d4:	0901                	addi	s2,s2,0
    15d6:	0000                	unimp
    15d8:	0301                	addi	t1,t1,0
    15da:	0901                	addi	s2,s2,0
    15dc:	0000                	unimp
    15de:	0301                	addi	t1,t1,0
    15e0:	0901                	addi	s2,s2,0
    15e2:	0000                	unimp
    15e4:	0301                	addi	t1,t1,0
    15e6:	0902                	c.slli64	s2
    15e8:	0000                	unimp
    15ea:	0301                	addi	t1,t1,0
    15ec:	0901                	addi	s2,s2,0
    15ee:	0000                	unimp
    15f0:	0501                	addi	a0,a0,0
    15f2:	060c                	addi	a1,sp,768
    15f4:	00090003          	lb	zero,0(s2)
    15f8:	0100                	addi	s0,sp,128
    15fa:	1105                	addi	sp,sp,-31
    15fc:	02090303          	lb	t1,32(s2)
    1600:	0100                	addi	s0,sp,128
    1602:	0200                	addi	s0,sp,256
    1604:	0104                	addi	s1,sp,128
    1606:	0306                	slli	t1,t1,0x1
    1608:	097d                	addi	s2,s2,31
    160a:	0008                	0x8
    160c:	0501                	addi	a0,a0,0
    160e:	0005                	c.nop	1
    1610:	0402                	c.slli64	s0
    1612:	0601                	addi	a2,a2,0
    1614:	00090003          	lb	zero,0(s2)
    1618:	0100                	addi	s0,sp,128
    161a:	0306                	slli	t1,t1,0x1
    161c:	0906                	slli	s2,s2,0x1
    161e:	0004                	0x4
    1620:	0301                	addi	t1,t1,0
    1622:	0901                	addi	s2,s2,0
    1624:	0008                	0x8
    1626:	0301                	addi	t1,t1,0
    1628:	0905                	addi	s2,s2,1
    162a:	0008                	0x8
    162c:	0501                	addi	a0,a0,0
    162e:	060d                	addi	a2,a2,3
    1630:	00090003          	lb	zero,0(s2)
    1634:	0100                	addi	s0,sp,128
    1636:	0505                	addi	a0,a0,1
    1638:	0306                	slli	t1,t1,0x1
    163a:	00060903          	lb	s2,0(a2)
    163e:	0501                	addi	a0,a0,0
    1640:	0900030b          	0x900030b
    1644:	0000                	unimp
    1646:	0501                	addi	a0,a0,0
    1648:	0624                	addi	s1,sp,776
    164a:	00091603          	lh	a2,0(s2)
    164e:	0100                	addi	s0,sp,128
    1650:	1005                	c.nop	-31
    1652:	08096e03          	0x8096e03
    1656:	0100                	addi	s0,sp,128
    1658:	0905                	addi	s2,s2,1
    165a:	0200                	addi	s0,sp,256
    165c:	0304                	addi	s1,sp,384
    165e:	0306                	slli	t1,t1,0x1
    1660:	0970                	addi	a2,sp,156
    1662:	0004                	0x4
    1664:	0501                	addi	a0,a0,0
    1666:	0011                	c.nop	4
    1668:	0402                	c.slli64	s0
    166a:	00030603          	lb	a2,0(t1)
    166e:	0409                	addi	s0,s0,2
    1670:	0100                	addi	s0,sp,128
    1672:	0200                	addi	s0,sp,256
    1674:	0304                	addi	s1,sp,384
    1676:	04090103          	lb	sp,64(s2)
    167a:	0100                	addi	s0,sp,128
    167c:	0200                	addi	s0,sp,256
    167e:	0304                	addi	s1,sp,384
    1680:	02097f03          	0x2097f03
    1684:	0100                	addi	s0,sp,128
    1686:	0905                	addi	s2,s2,1
    1688:	0200                	addi	s0,sp,256
    168a:	0304                	addi	s1,sp,384
    168c:	0306                	slli	t1,t1,0x1
    168e:	0901                	addi	s2,s2,0
    1690:	0004                	0x4
    1692:	0501                	addi	a0,a0,0
    1694:	0011                	c.nop	4
    1696:	0402                	c.slli64	s0
    1698:	00030603          	lb	a2,0(t1)
    169c:	0009                	c.nop	2
    169e:	0100                	addi	s0,sp,128
    16a0:	1b05                	addi	s6,s6,-31
    16a2:	0200                	addi	s0,sp,256
    16a4:	0304                	addi	s1,sp,384
    16a6:	0306                	slli	t1,t1,0x1
    16a8:	097c                	addi	a5,sp,156
    16aa:	0004                	0x4
    16ac:	0501                	addi	a0,a0,0
    16ae:	0311                	addi	t1,t1,4
    16b0:	0915                	addi	s2,s2,5
    16b2:	0004                	0x4
    16b4:	0501                	addi	a0,a0,0
    16b6:	00030623          	sb	zero,12(t1)
    16ba:	0009                	c.nop	2
    16bc:	0100                	addi	s0,sp,128
    16be:	1905                	addi	s2,s2,-31
    16c0:	02090003          	lb	zero,32(s2)
    16c4:	0100                	addi	s0,sp,128
    16c6:	1305                	addi	t1,t1,-31
    16c8:	0306                	slli	t1,t1,0x1
    16ca:	097f                	0x97f
    16cc:	0002                	c.slli64	zero
    16ce:	0501                	addi	a0,a0,0
    16d0:	0618                	addi	a4,sp,768
    16d2:	00090003          	lb	zero,0(s2)
    16d6:	0100                	addi	s0,sp,128
    16d8:	1305                	addi	t1,t1,-31
    16da:	02090003          	lb	zero,32(s2)
    16de:	0100                	addi	s0,sp,128
    16e0:	0d05                	addi	s10,s10,1
    16e2:	0200                	addi	s0,sp,256
    16e4:	0204                	addi	s1,sp,256
    16e6:	0306                	slli	t1,t1,0x1
    16e8:	00040903          	lb	s2,0(s0)
    16ec:	0501                	addi	a0,a0,0
    16ee:	001f 0402 0602      	0x6020402001f
    16f4:	00090003          	lb	zero,0(s2)
    16f8:	0100                	addi	s0,sp,128
    16fa:	2005                	jal	171a <product2+0x14e>
    16fc:	0200                	addi	s0,sp,256
    16fe:	0204                	addi	s1,sp,256
    1700:	04097c03          	0x4097c03
    1704:	0100                	addi	s0,sp,128
    1706:	1505                	addi	a0,a0,-31
    1708:	0200                	addi	s0,sp,256
    170a:	0204                	addi	s1,sp,256
    170c:	02090403          	lb	s0,32(s2)
    1710:	0100                	addi	s0,sp,128
    1712:	2005                	jal	1732 <product2+0x166>
    1714:	0200                	addi	s0,sp,256
    1716:	0204                	addi	s1,sp,256
    1718:	0306                	slli	t1,t1,0x1
    171a:	097c                	addi	a5,sp,156
    171c:	0002                	c.slli64	zero
    171e:	0501                	addi	a0,a0,0
    1720:	0015                	c.nop	5
    1722:	0402                	c.slli64	s0
    1724:	0301                	addi	t1,t1,0
    1726:	0900                	addi	s0,sp,144
    1728:	0000                	unimp
    172a:	0501                	addi	a0,a0,0
    172c:	0009                	c.nop	2
    172e:	0402                	c.slli64	s0
    1730:	0601                	addi	a2,a2,0
    1732:	00090003          	lb	zero,0(s2)
    1736:	0100                	addi	s0,sp,128
    1738:	1005                	c.nop	-31
    173a:	0e090903          	lb	s2,224(s2)
    173e:	0100                	addi	s0,sp,128
    1740:	1505                	addi	a0,a0,-31
    1742:	0200                	addi	s0,sp,256
    1744:	0104                	addi	s1,sp,128
    1746:	0306                	slli	t1,t1,0x1
    1748:	0900                	addi	s0,sp,144
    174a:	0002                	c.slli64	zero
    174c:	0501                	addi	a0,a0,0
    174e:	0009                	c.nop	2
    1750:	0402                	c.slli64	s0
    1752:	0601                	addi	a2,a2,0
    1754:	00090003          	lb	zero,0(s2)
    1758:	0100                	addi	s0,sp,128
    175a:	0306                	slli	t1,t1,0x1
    175c:	0908                	addi	a0,sp,144
    175e:	0004                	0x4
    1760:	0501                	addi	a0,a0,0
    1762:	0003060f          	0x3060f
    1766:	0009                	c.nop	2
    1768:	0100                	addi	s0,sp,128
    176a:	0905                	addi	s2,s2,1
    176c:	0306                	slli	t1,t1,0x1
    176e:	0901                	addi	s2,s2,0
    1770:	000c                	0xc
    1772:	0501                	addi	a0,a0,0
    1774:	0019                	c.nop	6
    1776:	0402                	c.slli64	s0
    1778:	0301                	addi	t1,t1,0
    177a:	0900                	addi	s0,sp,144
    177c:	0004                	0x4
    177e:	0501                	addi	a0,a0,0
    1780:	0009                	c.nop	2
    1782:	0402                	c.slli64	s0
    1784:	0601                	addi	a2,a2,0
    1786:	00090003          	lb	zero,0(s2)
    178a:	0100                	addi	s0,sp,128
    178c:	1005                	c.nop	-31
    178e:	0a090603          	lb	a2,160(s2)
    1792:	0100                	addi	s0,sp,128
    1794:	1505                	addi	a0,a0,-31
    1796:	0200                	addi	s0,sp,256
    1798:	0104                	addi	s1,sp,128
    179a:	0306                	slli	t1,t1,0x1
    179c:	0900                	addi	s0,sp,144
    179e:	0002                	c.slli64	zero
    17a0:	0501                	addi	a0,a0,0
    17a2:	0009                	c.nop	2
    17a4:	0402                	c.slli64	s0
    17a6:	0601                	addi	a2,a2,0
    17a8:	00090003          	lb	zero,0(s2)
    17ac:	0100                	addi	s0,sp,128
    17ae:	06090003          	lb	zero,96(s2)
    17b2:	0100                	addi	s0,sp,128
    17b4:	1005                	c.nop	-31
    17b6:	02090603          	lb	a2,32(s2)
    17ba:	0100                	addi	s0,sp,128
    17bc:	1505                	addi	a0,a0,-31
    17be:	0200                	addi	s0,sp,256
    17c0:	0104                	addi	s1,sp,128
    17c2:	0306                	slli	t1,t1,0x1
    17c4:	0900                	addi	s0,sp,144
    17c6:	0002                	c.slli64	zero
    17c8:	0501                	addi	a0,a0,0
    17ca:	0009                	c.nop	2
    17cc:	0402                	c.slli64	s0
    17ce:	0601                	addi	a2,a2,0
    17d0:	00090003          	lb	zero,0(s2)
    17d4:	0100                	addi	s0,sp,128
    17d6:	0306                	slli	t1,t1,0x1
    17d8:	00040907          	0x40907
    17dc:	0501                	addi	a0,a0,0
    17de:	0610                	addi	a2,sp,768
    17e0:	00090003          	lb	zero,0(s2)
    17e4:	0100                	addi	s0,sp,128
    17e6:	0505                	addi	a0,a0,1
    17e8:	0306                	slli	t1,t1,0x1
    17ea:	0904                	addi	s1,sp,144
    17ec:	000e                	c.slli	zero,0x3
    17ee:	0501                	addi	a0,a0,0
    17f0:	0309                	addi	t1,t1,2
    17f2:	00060903          	lb	s2,0(a2)
    17f6:	0501                	addi	a0,a0,0
    17f8:	0610                	addi	a2,sp,768
    17fa:	02090003          	lb	zero,32(s2)
    17fe:	0100                	addi	s0,sp,128
    1800:	1505                	addi	a0,a0,-31
    1802:	0200                	addi	s0,sp,256
    1804:	0104                	addi	s1,sp,128
    1806:	0306                	slli	t1,t1,0x1
    1808:	0900                	addi	s0,sp,144
    180a:	0002                	c.slli64	zero
    180c:	0501                	addi	a0,a0,0
    180e:	0009                	c.nop	2
    1810:	0402                	c.slli64	s0
    1812:	0601                	addi	a2,a2,0
    1814:	00090003          	lb	zero,0(s2)
    1818:	0100                	addi	s0,sp,128
    181a:	0306                	slli	t1,t1,0x1
    181c:	090a                	slli	s2,s2,0x2
    181e:	0004                	0x4
    1820:	0501                	addi	a0,a0,0
    1822:	0610                	addi	a2,sp,768
    1824:	00090003          	lb	zero,0(s2)
    1828:	0100                	addi	s0,sp,128
    182a:	0505                	addi	a0,a0,1
    182c:	0306                	slli	t1,t1,0x1
    182e:	0904                	addi	s1,sp,144
    1830:	0010                	0x10
    1832:	0501                	addi	a0,a0,0
    1834:	0309                	addi	t1,t1,2
    1836:	00060903          	lb	s2,0(a2)
    183a:	0501                	addi	a0,a0,0
    183c:	0610                	addi	a2,sp,768
    183e:	00090003          	lb	zero,0(s2)
    1842:	0100                	addi	s0,sp,128
    1844:	1505                	addi	a0,a0,-31
    1846:	0200                	addi	s0,sp,256
    1848:	0104                	addi	s1,sp,128
    184a:	0306                	slli	t1,t1,0x1
    184c:	0900                	addi	s0,sp,144
    184e:	0002                	c.slli64	zero
    1850:	0501                	addi	a0,a0,0
    1852:	0009                	c.nop	2
    1854:	0402                	c.slli64	s0
    1856:	0601                	addi	a2,a2,0
    1858:	00090003          	lb	zero,0(s2)
    185c:	0100                	addi	s0,sp,128
    185e:	1005                	c.nop	-31
    1860:	06090803          	lb	a6,96(s2)
    1864:	0100                	addi	s0,sp,128
    1866:	1505                	addi	a0,a0,-31
    1868:	0200                	addi	s0,sp,256
    186a:	0104                	addi	s1,sp,128
    186c:	0306                	slli	t1,t1,0x1
    186e:	0900                	addi	s0,sp,144
    1870:	0002                	c.slli64	zero
    1872:	0501                	addi	a0,a0,0
    1874:	0009                	c.nop	2
    1876:	0402                	c.slli64	s0
    1878:	0601                	addi	a2,a2,0
    187a:	00090003          	lb	zero,0(s2)
    187e:	0100                	addi	s0,sp,128
    1880:	1005                	c.nop	-31
    1882:	06090503          	lb	a0,96(s2)
    1886:	0100                	addi	s0,sp,128
    1888:	1505                	addi	a0,a0,-31
    188a:	0200                	addi	s0,sp,256
    188c:	0104                	addi	s1,sp,128
    188e:	0306                	slli	t1,t1,0x1
    1890:	0900                	addi	s0,sp,144
    1892:	0002                	c.slli64	zero
    1894:	0501                	addi	a0,a0,0
    1896:	0009                	c.nop	2
    1898:	0402                	c.slli64	s0
    189a:	0601                	addi	a2,a2,0
    189c:	00090003          	lb	zero,0(s2)
    18a0:	0100                	addi	s0,sp,128
    18a2:	0105                	addi	sp,sp,1
    18a4:	0306                	slli	t1,t1,0x1
    18a6:	090a                	slli	s2,s2,0x2
    18a8:	0004                	0x4
    18aa:	0301                	addi	t1,t1,0
    18ac:	0901                	addi	s2,s2,0
    18ae:	0008                	0x8
    18b0:	0301                	addi	t1,t1,0
    18b2:	0901                	addi	s2,s2,0
    18b4:	0008                	0x8
    18b6:	0301                	addi	t1,t1,0
    18b8:	0901                	addi	s2,s2,0
    18ba:	000e                	c.slli	zero,0x3
    18bc:	0501                	addi	a0,a0,0
    18be:	0309                	addi	t1,t1,2
    18c0:	0902                	c.slli64	s2
    18c2:	0008                	0x8
    18c4:	0501                	addi	a0,a0,0
    18c6:	0612                	slli	a2,a2,0x4
    18c8:	097fa503          	lw	a0,151(t6)
    18cc:	0000                	unimp
    18ce:	0501                	addi	a0,a0,0
    18d0:	0310                	addi	a2,sp,384
    18d2:	020900db          	0x20900db
    18d6:	0100                	addi	s0,sp,128
    18d8:	1505                	addi	a0,a0,-31
    18da:	0200                	addi	s0,sp,256
    18dc:	0104                	addi	s1,sp,128
    18de:	0306                	slli	t1,t1,0x1
    18e0:	0900                	addi	s0,sp,144
    18e2:	0002                	c.slli64	zero
    18e4:	0501                	addi	a0,a0,0
    18e6:	0009                	c.nop	2
    18e8:	0402                	c.slli64	s0
    18ea:	0601                	addi	a2,a2,0
    18ec:	00090003          	lb	zero,0(s2)
    18f0:	0100                	addi	s0,sp,128
    18f2:	0b05                	addi	s6,s6,1
    18f4:	0306                	slli	t1,t1,0x1
    18f6:	04097fa3          	0x4097fa3
    18fa:	0100                	addi	s0,sp,128
    18fc:	1005                	c.nop	-31
    18fe:	0306                	slli	t1,t1,0x1
    1900:	00e8                	addi	a0,sp,76
    1902:	0409                	addi	s0,s0,2
    1904:	0100                	addi	s0,sp,128
    1906:	02090103          	lb	sp,32(s2)
    190a:	0100                	addi	s0,sp,128
    190c:	1505                	addi	a0,a0,-31
    190e:	0200                	addi	s0,sp,256
    1910:	0104                	addi	s1,sp,128
    1912:	0306                	slli	t1,t1,0x1
    1914:	097f                	0x97f
    1916:	0002                	c.slli64	zero
    1918:	0501                	addi	a0,a0,0
    191a:	0009                	c.nop	2
    191c:	0402                	c.slli64	s0
    191e:	0601                	addi	a2,a2,0
    1920:	00090003          	lb	zero,0(s2)
    1924:	0100                	addi	s0,sp,128
    1926:	1505                	addi	a0,a0,-31
    1928:	0200                	addi	s0,sp,256
    192a:	0104                	addi	s1,sp,128
    192c:	0306                	slli	t1,t1,0x1
    192e:	090c                	addi	a1,sp,144
    1930:	000c                	0xc
    1932:	0501                	addi	a0,a0,0
    1934:	0009                	c.nop	2
    1936:	0402                	c.slli64	s0
    1938:	0601                	addi	a2,a2,0
    193a:	00090003          	lb	zero,0(s2)
    193e:	0100                	addi	s0,sp,128
    1940:	0306                	slli	t1,t1,0x1
    1942:	0905                	addi	s2,s2,1
    1944:	0004                	0x4
    1946:	0301                	addi	t1,t1,0
    1948:	0901                	addi	s2,s2,0
    194a:	0000                	unimp
    194c:	0501                	addi	a0,a0,0
    194e:	0605                	addi	a2,a2,1
    1950:	00090103          	lb	sp,0(s2)
    1954:	0100                	addi	s0,sp,128
    1956:	1105                	addi	sp,sp,-31
    1958:	0306                	slli	t1,t1,0x1
    195a:	7f94                	flw	fa3,56(a5)
    195c:	2a09                	jal	1a6e <result+0x24a>
    195e:	0100                	addi	s0,sp,128
    1960:	2305                	jal	1e80 <random_keys+0x274>
    1962:	0306                	slli	t1,t1,0x1
    1964:	0900                	addi	s0,sp,144
    1966:	0000                	unimp
    1968:	0501                	addi	a0,a0,0
    196a:	0319                	addi	t1,t1,6
    196c:	0900                	addi	s0,sp,144
    196e:	0002                	c.slli64	zero
    1970:	0501                	addi	a0,a0,0
    1972:	7f030613          	addi	a2,t1,2032
    1976:	0209                	addi	tp,tp,2
    1978:	0100                	addi	s0,sp,128
    197a:	1805                	addi	a6,a6,-31
    197c:	0306                	slli	t1,t1,0x1
    197e:	0900                	addi	s0,sp,144
    1980:	0000                	unimp
    1982:	0501                	addi	a0,a0,0
    1984:	09000313          	li	t1,144
    1988:	0002                	c.slli64	zero
    198a:	0501                	addi	a0,a0,0
    198c:	000d                	c.nop	3
    198e:	0402                	c.slli64	s0
    1990:	0602                	c.slli64	a2
    1992:	04090303          	lb	t1,64(s2)
    1996:	0100                	addi	s0,sp,128
    1998:	1f05                	addi	t5,t5,-31
    199a:	0200                	addi	s0,sp,256
    199c:	0204                	addi	s1,sp,256
    199e:	0306                	slli	t1,t1,0x1
    19a0:	0900                	addi	s0,sp,144
    19a2:	0000                	unimp
    19a4:	0501                	addi	a0,a0,0
    19a6:	0020                	addi	s0,sp,8
    19a8:	0402                	c.slli64	s0
    19aa:	0302                	c.slli64	t1
    19ac:	097c                	addi	a5,sp,156
    19ae:	0004                	0x4
    19b0:	0501                	addi	a0,a0,0
    19b2:	0015                	c.nop	5
    19b4:	0402                	c.slli64	s0
    19b6:	0302                	c.slli64	t1
    19b8:	0904                	addi	s1,sp,144
    19ba:	0004                	0x4
    19bc:	0501                	addi	a0,a0,0
    19be:	0020                	addi	s0,sp,8
    19c0:	0402                	c.slli64	s0
    19c2:	0602                	c.slli64	a2
    19c4:	04097c03          	0x4097c03
    19c8:	0100                	addi	s0,sp,128
    19ca:	0d05                	addi	s10,s10,1
    19cc:	0200                	addi	s0,sp,256
    19ce:	0304                	addi	s1,sp,384
    19d0:	02090a03          	lb	s4,32(s2)
    19d4:	0100                	addi	s0,sp,128
    19d6:	2205                	jal	1af6 <ti_2+0x7a>
    19d8:	0200                	addi	s0,sp,256
    19da:	0304                	addi	s1,sp,384
    19dc:	0306                	slli	t1,t1,0x1
    19de:	0900                	addi	s0,sp,144
    19e0:	0000                	unimp
    19e2:	0501                	addi	a0,a0,0
    19e4:	002a                	c.slli	zero,0xa
    19e6:	0402                	c.slli64	s0
    19e8:	097f0303          	lb	t1,151(t5)
    19ec:	0008                	0x8
    19ee:	0501                	addi	a0,a0,0
    19f0:	001d                	c.nop	7
    19f2:	0402                	c.slli64	s0
    19f4:	09010303          	lb	t1,144(sp)
    19f8:	0004                	0x4
    19fa:	0501                	addi	a0,a0,0
    19fc:	002a                	c.slli	zero,0xa
    19fe:	0402                	c.slli64	s0
    1a00:	7f030603          	lb	a2,2032(t1)
    1a04:	0409                	addi	s0,s0,2
    1a06:	0100                	addi	s0,sp,128
    1a08:	0d05                	addi	s10,s10,1
    1a0a:	0200                	addi	s0,sp,256
    1a0c:	0304                	addi	s1,sp,384
    1a0e:	02090703          	lb	a4,32(s2)
    1a12:	0100                	addi	s0,sp,128
    1a14:	1b05                	addi	s6,s6,-31
    1a16:	0200                	addi	s0,sp,256
    1a18:	0304                	addi	s1,sp,384
    1a1a:	0306                	slli	t1,t1,0x1
    1a1c:	0900                	addi	s0,sp,144
    1a1e:	0000                	unimp
    1a20:	0501                	addi	a0,a0,0
    1a22:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1a26:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1a2a:	0004                	0x4
    1a2c:	0501                	addi	a0,a0,0
    1a2e:	001f 0402 0303      	0x3030402001f
    1a34:	0900                	addi	s0,sp,144
    1a36:	0004                	0x4
    1a38:	0501                	addi	a0,a0,0
    1a3a:	0015                	c.nop	5
    1a3c:	0402                	c.slli64	s0
    1a3e:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1a42:	0004                	0x4
    1a44:	0501                	addi	a0,a0,0
    1a46:	0020                	addi	s0,sp,8
    1a48:	0402                	c.slli64	s0
    1a4a:	097f0303          	lb	t1,151(t5)
    1a4e:	0004                	0x4
    1a50:	0501                	addi	a0,a0,0
    1a52:	001f 0402 0303      	0x3030402001f
    1a58:	0901                	addi	s2,s2,0
    1a5a:	0002                	c.slli64	zero
    1a5c:	0501                	addi	a0,a0,0
    1a5e:	0015                	c.nop	5
    1a60:	0402                	c.slli64	s0
    1a62:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1a66:	0002                	c.slli64	zero
    1a68:	0501                	addi	a0,a0,0
    1a6a:	0020                	addi	s0,sp,8
    1a6c:	0402                	c.slli64	s0
    1a6e:	7f030603          	lb	a2,2032(t1)
    1a72:	0209                	addi	tp,tp,2
    1a74:	0100                	addi	s0,sp,128
    1a76:	1105                	addi	sp,sp,-31
    1a78:	04090803          	lb	a6,64(s2)
    1a7c:	0100                	addi	s0,sp,128
    1a7e:	2305                	jal	1f9e <random_keys+0x392>
    1a80:	0306                	slli	t1,t1,0x1
    1a82:	0900                	addi	s0,sp,144
    1a84:	0000                	unimp
    1a86:	0501                	addi	a0,a0,0
    1a88:	0319                	addi	t1,t1,6
    1a8a:	0900                	addi	s0,sp,144
    1a8c:	0002                	c.slli64	zero
    1a8e:	0501                	addi	a0,a0,0
    1a90:	7f030613          	addi	a2,t1,2032
    1a94:	0209                	addi	tp,tp,2
    1a96:	0100                	addi	s0,sp,128
    1a98:	1805                	addi	a6,a6,-31
    1a9a:	0306                	slli	t1,t1,0x1
    1a9c:	0900                	addi	s0,sp,144
    1a9e:	0000                	unimp
    1aa0:	0501                	addi	a0,a0,0
    1aa2:	09000313          	li	t1,144
    1aa6:	0002                	c.slli64	zero
    1aa8:	0501                	addi	a0,a0,0
    1aaa:	000d                	c.nop	3
    1aac:	0402                	c.slli64	s0
    1aae:	0602                	c.slli64	a2
    1ab0:	04090303          	lb	t1,64(s2)
    1ab4:	0100                	addi	s0,sp,128
    1ab6:	1f05                	addi	t5,t5,-31
    1ab8:	0200                	addi	s0,sp,256
    1aba:	0204                	addi	s1,sp,256
    1abc:	0306                	slli	t1,t1,0x1
    1abe:	0900                	addi	s0,sp,144
    1ac0:	0000                	unimp
    1ac2:	0501                	addi	a0,a0,0
    1ac4:	0020                	addi	s0,sp,8
    1ac6:	0402                	c.slli64	s0
    1ac8:	0302                	c.slli64	t1
    1aca:	097c                	addi	a5,sp,156
    1acc:	0004                	0x4
    1ace:	0501                	addi	a0,a0,0
    1ad0:	0015                	c.nop	5
    1ad2:	0402                	c.slli64	s0
    1ad4:	0302                	c.slli64	t1
    1ad6:	0904                	addi	s1,sp,144
    1ad8:	0004                	0x4
    1ada:	0501                	addi	a0,a0,0
    1adc:	0020                	addi	s0,sp,8
    1ade:	0402                	c.slli64	s0
    1ae0:	0602                	c.slli64	a2
    1ae2:	04097c03          	0x4097c03
    1ae6:	0100                	addi	s0,sp,128
    1ae8:	1105                	addi	sp,sp,-31
    1aea:	02091003          	lh	zero,32(s2)
    1aee:	0100                	addi	s0,sp,128
    1af0:	2305                	jal	2010 <_min_stack+0x10>
    1af2:	0306                	slli	t1,t1,0x1
    1af4:	0900                	addi	s0,sp,144
    1af6:	0000                	unimp
    1af8:	0501                	addi	a0,a0,0
    1afa:	0319                	addi	t1,t1,6
    1afc:	0900                	addi	s0,sp,144
    1afe:	0002                	c.slli64	zero
    1b00:	0501                	addi	a0,a0,0
    1b02:	7f030613          	addi	a2,t1,2032
    1b06:	0209                	addi	tp,tp,2
    1b08:	0100                	addi	s0,sp,128
    1b0a:	1805                	addi	a6,a6,-31
    1b0c:	0306                	slli	t1,t1,0x1
    1b0e:	0900                	addi	s0,sp,144
    1b10:	0000                	unimp
    1b12:	0501                	addi	a0,a0,0
    1b14:	09000313          	li	t1,144
    1b18:	0002                	c.slli64	zero
    1b1a:	0501                	addi	a0,a0,0
    1b1c:	000d                	c.nop	3
    1b1e:	0402                	c.slli64	s0
    1b20:	0602                	c.slli64	a2
    1b22:	04090303          	lb	t1,64(s2)
    1b26:	0100                	addi	s0,sp,128
    1b28:	1f05                	addi	t5,t5,-31
    1b2a:	0200                	addi	s0,sp,256
    1b2c:	0204                	addi	s1,sp,256
    1b2e:	0306                	slli	t1,t1,0x1
    1b30:	0900                	addi	s0,sp,144
    1b32:	0000                	unimp
    1b34:	0501                	addi	a0,a0,0
    1b36:	0020                	addi	s0,sp,8
    1b38:	0402                	c.slli64	s0
    1b3a:	0302                	c.slli64	t1
    1b3c:	097c                	addi	a5,sp,156
    1b3e:	0004                	0x4
    1b40:	0501                	addi	a0,a0,0
    1b42:	0015                	c.nop	5
    1b44:	0402                	c.slli64	s0
    1b46:	0302                	c.slli64	t1
    1b48:	0904                	addi	s1,sp,144
    1b4a:	0004                	0x4
    1b4c:	0501                	addi	a0,a0,0
    1b4e:	0020                	addi	s0,sp,8
    1b50:	0402                	c.slli64	s0
    1b52:	0602                	c.slli64	a2
    1b54:	04097c03          	0x4097c03
    1b58:	0100                	addi	s0,sp,128
    1b5a:	1105                	addi	sp,sp,-31
    1b5c:	02091303          	lh	t1,32(s2)
    1b60:	0100                	addi	s0,sp,128
    1b62:	2305                	jal	2082 <_min_stack+0x82>
    1b64:	0306                	slli	t1,t1,0x1
    1b66:	0900                	addi	s0,sp,144
    1b68:	0000                	unimp
    1b6a:	0501                	addi	a0,a0,0
    1b6c:	0319                	addi	t1,t1,6
    1b6e:	0900                	addi	s0,sp,144
    1b70:	0002                	c.slli64	zero
    1b72:	0501                	addi	a0,a0,0
    1b74:	7f030613          	addi	a2,t1,2032
    1b78:	0409                	addi	s0,s0,2
    1b7a:	0100                	addi	s0,sp,128
    1b7c:	1805                	addi	a6,a6,-31
    1b7e:	0306                	slli	t1,t1,0x1
    1b80:	0900                	addi	s0,sp,144
    1b82:	0000                	unimp
    1b84:	0501                	addi	a0,a0,0
    1b86:	09000313          	li	t1,144
    1b8a:	0004                	0x4
    1b8c:	0501                	addi	a0,a0,0
    1b8e:	000d                	c.nop	3
    1b90:	0402                	c.slli64	s0
    1b92:	0602                	c.slli64	a2
    1b94:	04090303          	lb	t1,64(s2)
    1b98:	0100                	addi	s0,sp,128
    1b9a:	1f05                	addi	t5,t5,-31
    1b9c:	0200                	addi	s0,sp,256
    1b9e:	0204                	addi	s1,sp,256
    1ba0:	0306                	slli	t1,t1,0x1
    1ba2:	0900                	addi	s0,sp,144
    1ba4:	0000                	unimp
    1ba6:	0501                	addi	a0,a0,0
    1ba8:	0020                	addi	s0,sp,8
    1baa:	0402                	c.slli64	s0
    1bac:	0302                	c.slli64	t1
    1bae:	097c                	addi	a5,sp,156
    1bb0:	0004                	0x4
    1bb2:	0501                	addi	a0,a0,0
    1bb4:	0015                	c.nop	5
    1bb6:	0402                	c.slli64	s0
    1bb8:	0302                	c.slli64	t1
    1bba:	0904                	addi	s1,sp,144
    1bbc:	0004                	0x4
    1bbe:	0501                	addi	a0,a0,0
    1bc0:	0020                	addi	s0,sp,8
    1bc2:	0402                	c.slli64	s0
    1bc4:	0602                	c.slli64	a2
    1bc6:	04097c03          	0x4097c03
    1bca:	0100                	addi	s0,sp,128
    1bcc:	0d05                	addi	s10,s10,1
    1bce:	0200                	addi	s0,sp,256
    1bd0:	0304                	addi	s1,sp,384
    1bd2:	02090903          	lb	s2,32(s2)
    1bd6:	0100                	addi	s0,sp,128
    1bd8:	1905                	addi	s2,s2,-31
    1bda:	0200                	addi	s0,sp,256
    1bdc:	0304                	addi	s1,sp,384
    1bde:	0306                	slli	t1,t1,0x1
    1be0:	0900                	addi	s0,sp,144
    1be2:	0000                	unimp
    1be4:	0501                	addi	a0,a0,0
    1be6:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1bea:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1bee:	000a                	c.slli	zero,0x2
    1bf0:	0501                	addi	a0,a0,0
    1bf2:	001d                	c.nop	7
    1bf4:	0402                	c.slli64	s0
    1bf6:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1bfa:	0004                	0x4
    1bfc:	0501                	addi	a0,a0,0
    1bfe:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1c02:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1c06:	0004                	0x4
    1c08:	0501                	addi	a0,a0,0
    1c0a:	0020                	addi	s0,sp,8
    1c0c:	0402                	c.slli64	s0
    1c0e:	097f0303          	lb	t1,151(t5)
    1c12:	0004                	0x4
    1c14:	0501                	addi	a0,a0,0
    1c16:	001d                	c.nop	7
    1c18:	0402                	c.slli64	s0
    1c1a:	09010303          	lb	t1,144(sp)
    1c1e:	0002                	c.slli64	zero
    1c20:	0501                	addi	a0,a0,0
    1c22:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1c26:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1c2a:	0002                	c.slli64	zero
    1c2c:	0501                	addi	a0,a0,0
    1c2e:	0020                	addi	s0,sp,8
    1c30:	0402                	c.slli64	s0
    1c32:	7f030603          	lb	a2,2032(t1)
    1c36:	0209                	addi	tp,tp,2
    1c38:	0100                	addi	s0,sp,128
    1c3a:	1105                	addi	sp,sp,-31
    1c3c:	04090703          	lb	a4,64(s2)
    1c40:	0100                	addi	s0,sp,128
    1c42:	1f05                	addi	t5,t5,-31
    1c44:	0306                	slli	t1,t1,0x1
    1c46:	0900                	addi	s0,sp,144
    1c48:	0000                	unimp
    1c4a:	0501                	addi	a0,a0,0
    1c4c:	09000317          	auipc	t1,0x9000
    1c50:	0002                	c.slli64	zero
    1c52:	0501                	addi	a0,a0,0
    1c54:	7f030613          	addi	a2,t1,2032 # 900243c <_stack_start+0x8ff243c>
    1c58:	0209                	addi	tp,tp,2
    1c5a:	0100                	addi	s0,sp,128
    1c5c:	1605                	addi	a2,a2,-31
    1c5e:	0306                	slli	t1,t1,0x1
    1c60:	0900                	addi	s0,sp,144
    1c62:	0000                	unimp
    1c64:	0501                	addi	a0,a0,0
    1c66:	09000313          	li	t1,144
    1c6a:	0002                	c.slli64	zero
    1c6c:	0501                	addi	a0,a0,0
    1c6e:	000d                	c.nop	3
    1c70:	0402                	c.slli64	s0
    1c72:	0602                	c.slli64	a2
    1c74:	04090303          	lb	t1,64(s2)
    1c78:	0100                	addi	s0,sp,128
    1c7a:	1b05                	addi	s6,s6,-31
    1c7c:	0200                	addi	s0,sp,256
    1c7e:	0204                	addi	s1,sp,256
    1c80:	0306                	slli	t1,t1,0x1
    1c82:	0900                	addi	s0,sp,144
    1c84:	0000                	unimp
    1c86:	0501                	addi	a0,a0,0
    1c88:	0020                	addi	s0,sp,8
    1c8a:	0402                	c.slli64	s0
    1c8c:	0302                	c.slli64	t1
    1c8e:	097c                	addi	a5,sp,156
    1c90:	0004                	0x4
    1c92:	0501                	addi	a0,a0,0
    1c94:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1c98:	0302                	c.slli64	t1
    1c9a:	0904                	addi	s1,sp,144
    1c9c:	0004                	0x4
    1c9e:	0501                	addi	a0,a0,0
    1ca0:	0020                	addi	s0,sp,8
    1ca2:	0402                	c.slli64	s0
    1ca4:	0602                	c.slli64	a2
    1ca6:	04097c03          	0x4097c03
    1caa:	0100                	addi	s0,sp,128
    1cac:	0f05                	addi	t5,t5,1
    1cae:	0200                	addi	s0,sp,256
    1cb0:	0304                	addi	s1,sp,384
    1cb2:	02091403          	lh	s0,32(s2)
    1cb6:	0100                	addi	s0,sp,128
    1cb8:	1705                	addi	a4,a4,-31
    1cba:	0200                	addi	s0,sp,256
    1cbc:	0304                	addi	s1,sp,384
    1cbe:	0306                	slli	t1,t1,0x1
    1cc0:	0900                	addi	s0,sp,144
    1cc2:	0004                	0x4
    1cc4:	0501                	addi	a0,a0,0
    1cc6:	0402001b          	0x402001b
    1cca:	09010303          	lb	t1,144(sp)
    1cce:	0004                	0x4
    1cd0:	0501                	addi	a0,a0,0
    1cd2:	0016                	c.slli	zero,0x5
    1cd4:	0402                	c.slli64	s0
    1cd6:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1cda:	0002                	c.slli64	zero
    1cdc:	0501                	addi	a0,a0,0
    1cde:	04020017          	auipc	zero,0x4020
    1ce2:	097f0303          	lb	t1,151(t5)
    1ce6:	0002                	c.slli64	zero
    1ce8:	0501                	addi	a0,a0,0
    1cea:	000d                	c.nop	3
    1cec:	0402                	c.slli64	s0
    1cee:	01030603          	lb	a2,16(t1)
    1cf2:	0409                	addi	s0,s0,2
    1cf4:	0100                	addi	s0,sp,128
    1cf6:	2005                	jal	1d16 <random_keys+0x10a>
    1cf8:	0200                	addi	s0,sp,256
    1cfa:	0304                	addi	s1,sp,384
    1cfc:	0306                	slli	t1,t1,0x1
    1cfe:	097a                	slli	s2,s2,0x1e
    1d00:	0000                	unimp
    1d02:	0501                	addi	a0,a0,0
    1d04:	0016                	c.slli	zero,0x5
    1d06:	0402                	c.slli64	s0
    1d08:	09060303          	lb	t1,144(a2)
    1d0c:	0002                	c.slli64	zero
    1d0e:	0501                	addi	a0,a0,0
    1d10:	0020                	addi	s0,sp,8
    1d12:	0402                	c.slli64	s0
    1d14:	7a030603          	lb	a2,1952(t1)
    1d18:	0209                	addi	tp,tp,2
    1d1a:	0100                	addi	s0,sp,128
    1d1c:	0d05                	addi	s10,s10,1
    1d1e:	02090c03          	lb	s8,32(s2)
    1d22:	0100                	addi	s0,sp,128
    1d24:	1b05                	addi	s6,s6,-31
    1d26:	0306                	slli	t1,t1,0x1
    1d28:	0900                	addi	s0,sp,144
    1d2a:	0000                	unimp
    1d2c:	0501                	addi	a0,a0,0
    1d2e:	0320                	addi	s0,sp,392
    1d30:	0900                	addi	s0,sp,144
    1d32:	0008                	0x8
    1d34:	0501                	addi	a0,a0,0
    1d36:	0310                	addi	a2,sp,384
    1d38:	0900                	addi	s0,sp,144
    1d3a:	0004                	0x4
    1d3c:	0501                	addi	a0,a0,0
    1d3e:	001e                	c.slli	zero,0x7
    1d40:	0402                	c.slli64	s0
    1d42:	0602                	c.slli64	a2
    1d44:	04097f03          	0x4097f03
    1d48:	0100                	addi	s0,sp,128
    1d4a:	0d05                	addi	s10,s10,1
    1d4c:	0200                	addi	s0,sp,256
    1d4e:	0304                	addi	s1,sp,384
    1d50:	04090d03          	lb	s10,64(s2)
    1d54:	0100                	addi	s0,sp,128
    1d56:	2005                	jal	1d76 <random_keys+0x16a>
    1d58:	0200                	addi	s0,sp,256
    1d5a:	0304                	addi	s1,sp,384
    1d5c:	0306                	slli	t1,t1,0x1
    1d5e:	0900                	addi	s0,sp,144
    1d60:	0000                	unimp
    1d62:	0001                	nop
    1d64:	0402                	c.slli64	s0
    1d66:	097f0303          	lb	t1,151(t5)
    1d6a:	0002                	c.slli64	zero
    1d6c:	0001                	nop
    1d6e:	0402                	c.slli64	s0
    1d70:	09010303          	lb	t1,144(sp)
    1d74:	0004                	0x4
    1d76:	0501                	addi	a0,a0,0
    1d78:	0025                	c.nop	9
    1d7a:	0402                	c.slli64	s0
    1d7c:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1d80:	0004                	0x4
    1d82:	0501                	addi	a0,a0,0
    1d84:	0015                	c.nop	5
    1d86:	0402                	c.slli64	s0
    1d88:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1d8c:	0004                	0x4
    1d8e:	0501                	addi	a0,a0,0
    1d90:	0020                	addi	s0,sp,8
    1d92:	0402                	c.slli64	s0
    1d94:	7f030603          	lb	a2,2032(t1)
    1d98:	0409                	addi	s0,s0,2
    1d9a:	0100                	addi	s0,sp,128
    1d9c:	2805                	jal	1dcc <random_keys+0x1c0>
    1d9e:	02090c03          	lb	s8,32(s2)
    1da2:	0100                	addi	s0,sp,128
    1da4:	0505                	addi	a0,a0,1
    1da6:	00090103          	lb	sp,0(s2)
    1daa:	0100                	addi	s0,sp,128
    1dac:	2805                	jal	1ddc <random_keys+0x1d0>
    1dae:	0306                	slli	t1,t1,0x1
    1db0:	097f                	0x97f
    1db2:	0000                	unimp
    1db4:	0501                	addi	a0,a0,0
    1db6:	0312                	slli	t1,t1,0x4
    1db8:	0901                	addi	s2,s2,0
    1dba:	0038                	addi	a4,sp,8
    1dbc:	0501                	addi	a0,a0,0
    1dbe:	0328                	addi	a0,sp,392
    1dc0:	097f                	0x97f
    1dc2:	0008                	0x8
    1dc4:	0301                	addi	t1,t1,0
    1dc6:	0900                	addi	s0,sp,144
    1dc8:	0000                	unimp
    1dca:	0501                	addi	a0,a0,0
    1dcc:	0309                	addi	t1,t1,2
    1dce:	0902                	c.slli64	s2
    1dd0:	0006                	c.slli	zero,0x1
    1dd2:	0501                	addi	a0,a0,0
    1dd4:	0312                	slli	t1,t1,0x4
    1dd6:	097f                	0x97f
    1dd8:	0006                	c.slli	zero,0x1
    1dda:	0501                	addi	a0,a0,0
    1ddc:	0309                	addi	t1,t1,2
    1dde:	0901                	addi	s2,s2,0
    1de0:	0008                	0x8
    1de2:	0501                	addi	a0,a0,0
    1de4:	0312                	slli	t1,t1,0x4
    1de6:	097f                	0x97f
    1de8:	0004                	0x4
    1dea:	0501                	addi	a0,a0,0
    1dec:	0605                	addi	a2,a2,1
    1dee:	04090103          	lb	sp,64(s2)
    1df2:	0100                	addi	s0,sp,128
    1df4:	0905                	addi	s2,s2,1
    1df6:	0306                	slli	t1,t1,0x1
    1df8:	0900                	addi	s0,sp,144
    1dfa:	0000                	unimp
    1dfc:	0301                	addi	t1,t1,0
    1dfe:	0901                	addi	s2,s2,0
    1e00:	0006                	c.slli	zero,0x1
    1e02:	0301                	addi	t1,t1,0
    1e04:	097f                	0x97f
    1e06:	000a                	c.slli	zero,0x2
    1e08:	0501                	addi	a0,a0,0
    1e0a:	0605                	addi	a2,a2,1
    1e0c:	6c090103          	lb	sp,1728(s2)
    1e10:	0100                	addi	s0,sp,128
    1e12:	1005                	c.nop	-31
    1e14:	0306                	slli	t1,t1,0x1
    1e16:	0906                	slli	s2,s2,0x1
    1e18:	0000                	unimp
    1e1a:	0501                	addi	a0,a0,0
    1e1c:	0309                	addi	t1,t1,2
    1e1e:	097a                	slli	s2,s2,0x1e
    1e20:	0004                	0x4
    1e22:	0301                	addi	t1,t1,0
    1e24:	0906                	slli	s2,s2,0x1
    1e26:	0002                	c.slli64	zero
    1e28:	0501                	addi	a0,a0,0
    1e2a:	030e                	slli	t1,t1,0x3
    1e2c:	0905                	addi	s2,s2,1
    1e2e:	000e                	c.slli	zero,0x3
    1e30:	0501                	addi	a0,a0,0
    1e32:	0309                	addi	t1,t1,2
    1e34:	0975                	addi	s2,s2,29
    1e36:	000a                	c.slli	zero,0x2
    1e38:	0501                	addi	a0,a0,0
    1e3a:	0605                	addi	a2,a2,1
    1e3c:	64090203          	lb	tp,1600(s2)
    1e40:	0100                	addi	s0,sp,128
    1e42:	00090103          	lb	sp,0(s2)
    1e46:	0100                	addi	s0,sp,128
    1e48:	00090103          	lb	sp,0(s2)
    1e4c:	0100                	addi	s0,sp,128
    1e4e:	00090103          	lb	sp,0(s2)
    1e52:	0100                	addi	s0,sp,128
    1e54:	00090103          	lb	sp,0(s2)
    1e58:	0100                	addi	s0,sp,128
    1e5a:	00090103          	lb	sp,0(s2)
    1e5e:	0100                	addi	s0,sp,128
    1e60:	00090103          	lb	sp,0(s2)
    1e64:	0100                	addi	s0,sp,128
    1e66:	00090303          	lb	t1,0(s2)
    1e6a:	0100                	addi	s0,sp,128
    1e6c:	00090103          	lb	sp,0(s2)
    1e70:	0100                	addi	s0,sp,128
    1e72:	0e05                	addi	t3,t3,1
    1e74:	0306                	slli	t1,t1,0x1
    1e76:	0900                	addi	s0,sp,144
    1e78:	0000                	unimp
    1e7a:	0501                	addi	a0,a0,0
    1e7c:	0605                	addi	a2,a2,1
    1e7e:	04090203          	lb	tp,64(s2)
    1e82:	0100                	addi	s0,sp,128
    1e84:	0b05                	addi	s6,s6,1
    1e86:	0306                	slli	t1,t1,0x1
    1e88:	0900                	addi	s0,sp,144
    1e8a:	0000                	unimp
    1e8c:	0501                	addi	a0,a0,0
    1e8e:	0010                	0x10
    1e90:	0402                	c.slli64	s0
    1e92:	0601                	addi	a2,a2,0
    1e94:	02090003          	lb	zero,32(s2)
    1e98:	0100                	addi	s0,sp,128
    1e9a:	0505                	addi	a0,a0,1
    1e9c:	0200                	addi	s0,sp,256
    1e9e:	0104                	addi	s1,sp,128
    1ea0:	0306                	slli	t1,t1,0x1
    1ea2:	0900                	addi	s0,sp,144
    1ea4:	0000                	unimp
    1ea6:	0301                	addi	t1,t1,0
    1ea8:	0906                	slli	s2,s2,0x1
    1eaa:	0006                	c.slli	zero,0x1
    1eac:	0501                	addi	a0,a0,0
    1eae:	0011                	c.nop	4
    1eb0:	0402                	c.slli64	s0
    1eb2:	0601                	addi	a2,a2,0
    1eb4:	04090003          	lb	zero,64(s2)
    1eb8:	0100                	addi	s0,sp,128
    1eba:	0505                	addi	a0,a0,1
    1ebc:	0200                	addi	s0,sp,256
    1ebe:	0104                	addi	s1,sp,128
    1ec0:	0306                	slli	t1,t1,0x1
    1ec2:	0900                	addi	s0,sp,144
    1ec4:	0000                	unimp
    1ec6:	0501                	addi	a0,a0,0
    1ec8:	0907030b          	0x907030b
    1ecc:	0004                	0x4
    1ece:	0501                	addi	a0,a0,0
    1ed0:	0318                	addi	a4,sp,384
    1ed2:	0901                	addi	s2,s2,0
    1ed4:	0002                	c.slli64	zero
    1ed6:	0501                	addi	a0,a0,0
    1ed8:	0010                	0x10
    1eda:	0402                	c.slli64	s0
    1edc:	0601                	addi	a2,a2,0
    1ede:	08097f03          	0x8097f03
    1ee2:	0100                	addi	s0,sp,128
    1ee4:	0505                	addi	a0,a0,1
    1ee6:	0200                	addi	s0,sp,256
    1ee8:	0104                	addi	s1,sp,128
    1eea:	0306                	slli	t1,t1,0x1
    1eec:	0900                	addi	s0,sp,144
    1eee:	0000                	unimp
    1ef0:	0501                	addi	a0,a0,0
    1ef2:	0316                	slli	t1,t1,0x5
    1ef4:	0905                	addi	s2,s2,1
    1ef6:	0008                	0x8
    1ef8:	0501                	addi	a0,a0,0
    1efa:	0318                	addi	a4,sp,384
    1efc:	0901                	addi	s2,s2,0
    1efe:	0008                	0x8
    1f00:	0501                	addi	a0,a0,0
    1f02:	0010                	0x10
    1f04:	0402                	c.slli64	s0
    1f06:	0601                	addi	a2,a2,0
    1f08:	08097f03          	0x8097f03
    1f0c:	0100                	addi	s0,sp,128
    1f0e:	0505                	addi	a0,a0,1
    1f10:	0200                	addi	s0,sp,256
    1f12:	0104                	addi	s1,sp,128
    1f14:	0306                	slli	t1,t1,0x1
    1f16:	0900                	addi	s0,sp,144
    1f18:	0000                	unimp
    1f1a:	0601                	addi	a2,a2,0
    1f1c:	04090503          	lb	a0,64(s2)
    1f20:	0100                	addi	s0,sp,128
    1f22:	1a05                	addi	s4,s4,-31
    1f24:	0306                	slli	t1,t1,0x1
    1f26:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1f2a:	0501                	addi	a0,a0,0
    1f2c:	030a                	slli	t1,t1,0x2
    1f2e:	097d                	addi	s2,s2,31
    1f30:	0006                	c.slli	zero,0x1
    1f32:	0501                	addi	a0,a0,0
    1f34:	0605                	addi	a2,a2,1
    1f36:	0c090303          	lb	t1,192(s2)
    1f3a:	0100                	addi	s0,sp,128
    1f3c:	1805                	addi	a6,a6,-31
    1f3e:	0306                	slli	t1,t1,0x1
    1f40:	0901                	addi	s2,s2,0
    1f42:	0002                	c.slli64	zero
    1f44:	0501                	addi	a0,a0,0
    1f46:	0014                	0x14
    1f48:	0402                	c.slli64	s0
    1f4a:	0601                	addi	a2,a2,0
    1f4c:	08097f03          	0x8097f03
    1f50:	0100                	addi	s0,sp,128
    1f52:	0505                	addi	a0,a0,1
    1f54:	0200                	addi	s0,sp,256
    1f56:	0104                	addi	s1,sp,128
    1f58:	0306                	slli	t1,t1,0x1
    1f5a:	0900                	addi	s0,sp,144
    1f5c:	0000                	unimp
    1f5e:	0601                	addi	a2,a2,0
    1f60:	04090603          	lb	a2,64(s2)
    1f64:	0100                	addi	s0,sp,128
    1f66:	0a05                	addi	s4,s4,1
    1f68:	0306                	slli	t1,t1,0x1
    1f6a:	0900                	addi	s0,sp,144
    1f6c:	0000                	unimp
    1f6e:	0501                	addi	a0,a0,0
    1f70:	0605                	addi	a2,a2,1
    1f72:	0c090403          	lb	s0,192(s2)
    1f76:	0100                	addi	s0,sp,128
    1f78:	1a05                	addi	s4,s4,-31
    1f7a:	0306                	slli	t1,t1,0x1
    1f7c:	0900                	addi	s0,sp,144
    1f7e:	0006                	c.slli	zero,0x1
    1f80:	0501                	addi	a0,a0,0
    1f82:	0318                	addi	a4,sp,384
    1f84:	0901                	addi	s2,s2,0
    1f86:	0002                	c.slli64	zero
    1f88:	0501                	addi	a0,a0,0
    1f8a:	0014                	0x14
    1f8c:	0402                	c.slli64	s0
    1f8e:	0601                	addi	a2,a2,0
    1f90:	08097f03          	0x8097f03
    1f94:	0100                	addi	s0,sp,128
    1f96:	0505                	addi	a0,a0,1
    1f98:	0200                	addi	s0,sp,256
    1f9a:	0104                	addi	s1,sp,128
    1f9c:	0306                	slli	t1,t1,0x1
    1f9e:	0900                	addi	s0,sp,144
    1fa0:	0000                	unimp
    1fa2:	0601                	addi	a2,a2,0
    1fa4:	04090503          	lb	a0,64(s2)
    1fa8:	0100                	addi	s0,sp,128
    1faa:	0a05                	addi	s4,s4,1
    1fac:	0306                	slli	t1,t1,0x1
    1fae:	0900                	addi	s0,sp,144
    1fb0:	0000                	unimp
    1fb2:	0501                	addi	a0,a0,0
    1fb4:	0605                	addi	a2,a2,1
    1fb6:	0c090303          	lb	t1,192(s2)
    1fba:	0100                	addi	s0,sp,128
    1fbc:	0b05                	addi	s6,s6,1
    1fbe:	0306                	slli	t1,t1,0x1
    1fc0:	0900                	addi	s0,sp,144
    1fc2:	0002                	c.slli64	zero
    1fc4:	0501                	addi	a0,a0,0
    1fc6:	0318                	addi	a4,sp,384
    1fc8:	0900                	addi	s0,sp,144
    1fca:	0002                	c.slli64	zero
    1fcc:	0501                	addi	a0,a0,0
    1fce:	0010                	0x10
    1fd0:	0402                	c.slli64	s0
    1fd2:	0601                	addi	a2,a2,0
    1fd4:	04090003          	lb	zero,64(s2)
    1fd8:	0100                	addi	s0,sp,128
    1fda:	0505                	addi	a0,a0,1
    1fdc:	0200                	addi	s0,sp,256
    1fde:	0104                	addi	s1,sp,128
    1fe0:	0306                	slli	t1,t1,0x1
    1fe2:	0900                	addi	s0,sp,144
    1fe4:	0000                	unimp
    1fe6:	0601                	addi	a2,a2,0
    1fe8:	04090603          	lb	a2,64(s2)
    1fec:	0100                	addi	s0,sp,128
    1fee:	0a05                	addi	s4,s4,1
    1ff0:	0306                	slli	t1,t1,0x1
    1ff2:	0900                	addi	s0,sp,144
    1ff4:	0000                	unimp
    1ff6:	0501                	addi	a0,a0,0
    1ff8:	0605                	addi	a2,a2,1
    1ffa:	08090403          	lb	s0,128(s2)
    1ffe:	0100                	addi	s0,sp,128
    2000:	1a05                	addi	s4,s4,-31
    2002:	0306                	slli	t1,t1,0x1
    2004:	0900                	addi	s0,sp,144
    2006:	0000                	unimp
    2008:	0501                	addi	a0,a0,0
    200a:	0318                	addi	a4,sp,384
    200c:	0901                	addi	s2,s2,0
    200e:	000a                	c.slli	zero,0x2
    2010:	0501                	addi	a0,a0,0
    2012:	0014                	0x14
    2014:	0402                	c.slli64	s0
    2016:	0601                	addi	a2,a2,0
    2018:	08097f03          	0x8097f03
    201c:	0100                	addi	s0,sp,128
    201e:	0505                	addi	a0,a0,1
    2020:	0200                	addi	s0,sp,256
    2022:	0104                	addi	s1,sp,128
    2024:	0306                	slli	t1,t1,0x1
    2026:	0900                	addi	s0,sp,144
    2028:	0002                	c.slli64	zero
    202a:	0501                	addi	a0,a0,0
    202c:	031a                	slli	t1,t1,0x6
    202e:	0905                	addi	s2,s2,1
    2030:	0004                	0x4
    2032:	0501                	addi	a0,a0,0
    2034:	0318                	addi	a4,sp,384
    2036:	0901                	addi	s2,s2,0
    2038:	0004                	0x4
    203a:	0501                	addi	a0,a0,0
    203c:	031a                	slli	t1,t1,0x6
    203e:	097f                	0x97f
    2040:	0008                	0x8
    2042:	0501                	addi	a0,a0,0
    2044:	0014                	0x14
    2046:	0402                	c.slli64	s0
    2048:	0601                	addi	a2,a2,0
    204a:	08090003          	lb	zero,128(s2)
    204e:	0100                	addi	s0,sp,128
    2050:	0505                	addi	a0,a0,1
    2052:	0200                	addi	s0,sp,256
    2054:	0104                	addi	s1,sp,128
    2056:	0306                	slli	t1,t1,0x1
    2058:	0900                	addi	s0,sp,144
    205a:	0000                	unimp
    205c:	0601                	addi	a2,a2,0
    205e:	04090603          	lb	a2,64(s2)
    2062:	0100                	addi	s0,sp,128
    2064:	00090103          	lb	sp,0(s2)
    2068:	0100                	addi	s0,sp,128
    206a:	1205                	addi	tp,tp,-31
    206c:	0306                	slli	t1,t1,0x1
    206e:	0900                	addi	s0,sp,144
    2070:	0000                	unimp
    2072:	0501                	addi	a0,a0,0
    2074:	0605                	addi	a2,a2,1
    2076:	0c090103          	lb	sp,192(s2)
    207a:	0100                	addi	s0,sp,128
    207c:	0105                	addi	sp,sp,1
    207e:	0306                	slli	t1,t1,0x1
    2080:	0901                	addi	s2,s2,0
    2082:	0000                	unimp
    2084:	0501                	addi	a0,a0,0
    2086:	0009                	c.nop	2
    2088:	0402                	c.slli64	s0
    208a:	bd030603          	lb	a2,-1072(t1)
    208e:	097f                	0x97f
    2090:	0046                	c.slli	zero,0x11
    2092:	0501                	addi	a0,a0,0
    2094:	0012                	c.slli	zero,0x4
    2096:	0402                	c.slli64	s0
    2098:	00030603          	lb	a2,0(t1)
    209c:	0009                	c.nop	2
    209e:	0100                	addi	s0,sp,128
    20a0:	1705                	addi	a4,a4,-31
    20a2:	0200                	addi	s0,sp,256
    20a4:	0304                	addi	s1,sp,384
    20a6:	0306                	slli	t1,t1,0x1
    20a8:	097f                	0x97f
    20aa:	000a                	c.slli	zero,0x2
    20ac:	0501                	addi	a0,a0,0
    20ae:	0009                	c.nop	2
    20b0:	0402                	c.slli64	s0
    20b2:	09070303          	lb	t1,144(a4)
    20b6:	0004                	0x4
    20b8:	0501                	addi	a0,a0,0
    20ba:	000e                	c.slli	zero,0x3
    20bc:	0402                	c.slli64	s0
    20be:	00030603          	lb	a2,0(t1)
    20c2:	0409                	addi	s0,s0,2
    20c4:	0100                	addi	s0,sp,128
    20c6:	0905                	addi	s2,s2,1
    20c8:	0200                	addi	s0,sp,256
    20ca:	0304                	addi	s1,sp,384
    20cc:	0306                	slli	t1,t1,0x1
    20ce:	0901                	addi	s2,s2,0
    20d0:	000a                	c.slli	zero,0x2
    20d2:	0501                	addi	a0,a0,0
    20d4:	000e                	c.slli	zero,0x3
    20d6:	0402                	c.slli64	s0
    20d8:	00030603          	lb	a2,0(t1)
    20dc:	0009                	c.nop	2
    20de:	0100                	addi	s0,sp,128
    20e0:	1905                	addi	s2,s2,-31
    20e2:	0200                	addi	s0,sp,256
    20e4:	0304                	addi	s1,sp,384
    20e6:	0306                	slli	t1,t1,0x1
    20e8:	097e                	slli	s2,s2,0x1f
    20ea:	000a                	c.slli	zero,0x2
    20ec:	0501                	addi	a0,a0,0
    20ee:	0009                	c.nop	2
    20f0:	0402                	c.slli64	s0
    20f2:	09080303          	lb	t1,144(a6)
    20f6:	0004                	0x4
    20f8:	0501                	addi	a0,a0,0
    20fa:	0402001b          	0x402001b
    20fe:	00030603          	lb	a2,0(t1)
    2102:	0409                	addi	s0,s0,2
    2104:	0100                	addi	s0,sp,128
    2106:	1805                	addi	a6,a6,-31
    2108:	0200                	addi	s0,sp,256
    210a:	0304                	addi	s1,sp,384
    210c:	04090003          	lb	zero,64(s2)
    2110:	0100                	addi	s0,sp,128
    2112:	1b05                	addi	s6,s6,-31
    2114:	0200                	addi	s0,sp,256
    2116:	0304                	addi	s1,sp,384
    2118:	04090003          	lb	zero,64(s2)
    211c:	0100                	addi	s0,sp,128
    211e:	1805                	addi	a6,a6,-31
    2120:	0200                	addi	s0,sp,256
    2122:	0304                	addi	s1,sp,384
    2124:	02090003          	lb	zero,32(s2)
    2128:	0100                	addi	s0,sp,128
    212a:	1705                	addi	a4,a4,-31
    212c:	0200                	addi	s0,sp,256
    212e:	0304                	addi	s1,sp,384
    2130:	02097f03          	0x2097f03
    2134:	0100                	addi	s0,sp,128
    2136:	1805                	addi	a6,a6,-31
    2138:	0200                	addi	s0,sp,256
    213a:	0304                	addi	s1,sp,384
    213c:	02090103          	lb	sp,32(s2)
    2140:	0100                	addi	s0,sp,128
    2142:	1705                	addi	a4,a4,-31
    2144:	0200                	addi	s0,sp,256
    2146:	0304                	addi	s1,sp,384
    2148:	0306                	slli	t1,t1,0x1
    214a:	097f                	0x97f
    214c:	0002                	c.slli64	zero
    214e:	0501                	addi	a0,a0,0
    2150:	0009                	c.nop	2
    2152:	0402                	c.slli64	s0
    2154:	09060303          	lb	t1,144(a2)
    2158:	0002                	c.slli64	zero
    215a:	0501                	addi	a0,a0,0
    215c:	0018                	0x18
    215e:	0402                	c.slli64	s0
    2160:	00030603          	lb	a2,0(t1)
    2164:	0009                	c.nop	2
    2166:	0100                	addi	s0,sp,128
    2168:	1b05                	addi	s6,s6,-31
    216a:	0200                	addi	s0,sp,256
    216c:	0304                	addi	s1,sp,384
    216e:	0306                	slli	t1,t1,0x1
    2170:	097f                	0x97f
    2172:	000a                	c.slli	zero,0x2
    2174:	0501                	addi	a0,a0,0
    2176:	0009                	c.nop	2
    2178:	0402                	c.slli64	s0
    217a:	09090303          	lb	t1,144(s2)
    217e:	0006                	c.slli	zero,0x1
    2180:	0501                	addi	a0,a0,0
    2182:	001c                	0x1c
    2184:	0402                	c.slli64	s0
    2186:	00030603          	lb	a2,0(t1)
    218a:	0009                	c.nop	2
    218c:	0100                	addi	s0,sp,128
    218e:	1805                	addi	a6,a6,-31
    2190:	0200                	addi	s0,sp,256
    2192:	0304                	addi	s1,sp,384
    2194:	02090003          	lb	zero,32(s2)
    2198:	0100                	addi	s0,sp,128
    219a:	1f05                	addi	t5,t5,-31
    219c:	0200                	addi	s0,sp,256
    219e:	0304                	addi	s1,sp,384
    21a0:	0306                	slli	t1,t1,0x1
    21a2:	097f                	0x97f
    21a4:	0008                	0x8
    21a6:	0501                	addi	a0,a0,0
    21a8:	0009                	c.nop	2
    21aa:	0402                	c.slli64	s0
    21ac:	090b0303          	lb	t1,144(s6)
    21b0:	0006                	c.slli	zero,0x1
    21b2:	0501                	addi	a0,a0,0
    21b4:	001c                	0x1c
    21b6:	0402                	c.slli64	s0
    21b8:	00030603          	lb	a2,0(t1)
    21bc:	0409                	addi	s0,s0,2
    21be:	0100                	addi	s0,sp,128
    21c0:	1805                	addi	a6,a6,-31
    21c2:	0200                	addi	s0,sp,256
    21c4:	0304                	addi	s1,sp,384
    21c6:	08090003          	lb	zero,128(s2)
    21ca:	0100                	addi	s0,sp,128
    21cc:	1f05                	addi	t5,t5,-31
    21ce:	0200                	addi	s0,sp,256
    21d0:	0304                	addi	s1,sp,384
    21d2:	02097f03          	0x2097f03
    21d6:	0100                	addi	s0,sp,128
    21d8:	1805                	addi	a6,a6,-31
    21da:	0200                	addi	s0,sp,256
    21dc:	0304                	addi	s1,sp,384
    21de:	02090103          	lb	sp,32(s2)
    21e2:	0100                	addi	s0,sp,128
    21e4:	1f05                	addi	t5,t5,-31
    21e6:	0200                	addi	s0,sp,256
    21e8:	0304                	addi	s1,sp,384
    21ea:	0306                	slli	t1,t1,0x1
    21ec:	097f                	0x97f
    21ee:	0002                	c.slli64	zero
    21f0:	0501                	addi	a0,a0,0
    21f2:	0009                	c.nop	2
    21f4:	0402                	c.slli64	s0
    21f6:	09090303          	lb	t1,144(s2)
    21fa:	0002                	c.slli64	zero
    21fc:	0501                	addi	a0,a0,0
    21fe:	0016                	c.slli	zero,0x5
    2200:	0402                	c.slli64	s0
    2202:	00030603          	lb	a2,0(t1)
    2206:	0009                	c.nop	2
    2208:	0100                	addi	s0,sp,128
    220a:	1d05                	addi	s10,s10,-31
    220c:	0200                	addi	s0,sp,256
    220e:	0304                	addi	s1,sp,384
    2210:	02097f03          	0x2097f03
    2214:	0100                	addi	s0,sp,128
    2216:	1605                	addi	a2,a2,-31
    2218:	0200                	addi	s0,sp,256
    221a:	0304                	addi	s1,sp,384
    221c:	04090103          	lb	sp,64(s2)
    2220:	0100                	addi	s0,sp,128
    2222:	0f05                	addi	t5,t5,1
    2224:	0200                	addi	s0,sp,256
    2226:	0304                	addi	s1,sp,384
    2228:	04090003          	lb	zero,64(s2)
    222c:	0100                	addi	s0,sp,128
    222e:	1d05                	addi	s10,s10,-31
    2230:	0200                	addi	s0,sp,256
    2232:	0304                	addi	s1,sp,384
    2234:	0306                	slli	t1,t1,0x1
    2236:	097f                	0x97f
    2238:	0004                	0x4
    223a:	0501                	addi	a0,a0,0
    223c:	0009                	c.nop	2
    223e:	0402                	c.slli64	s0
    2240:	090b0303          	lb	t1,144(s6)
    2244:	0002                	c.slli64	zero
    2246:	0501                	addi	a0,a0,0
    2248:	001c                	0x1c
    224a:	0402                	c.slli64	s0
    224c:	00030603          	lb	a2,0(t1)
    2250:	0009                	c.nop	2
    2252:	0100                	addi	s0,sp,128
    2254:	1805                	addi	a6,a6,-31
    2256:	0200                	addi	s0,sp,256
    2258:	0304                	addi	s1,sp,384
    225a:	04090003          	lb	zero,64(s2)
    225e:	0100                	addi	s0,sp,128
    2260:	1f05                	addi	t5,t5,-31
    2262:	0200                	addi	s0,sp,256
    2264:	0304                	addi	s1,sp,384
    2266:	0306                	slli	t1,t1,0x1
    2268:	097f                	0x97f
    226a:	0008                	0x8
    226c:	0501                	addi	a0,a0,0
    226e:	0009                	c.nop	2
    2270:	0402                	c.slli64	s0
    2272:	09060303          	lb	t1,144(a2)
    2276:	0004                	0x4
    2278:	0501                	addi	a0,a0,0
    227a:	0018                	0x18
    227c:	0402                	c.slli64	s0
    227e:	00030603          	lb	a2,0(t1)
    2282:	0409                	addi	s0,s0,2
    2284:	0100                	addi	s0,sp,128
    2286:	1f05                	addi	t5,t5,-31
    2288:	0200                	addi	s0,sp,256
    228a:	0304                	addi	s1,sp,384
    228c:	04090003          	lb	zero,64(s2)
    2290:	0100                	addi	s0,sp,128
    2292:	1805                	addi	a6,a6,-31
    2294:	0200                	addi	s0,sp,256
    2296:	0304                	addi	s1,sp,384
    2298:	04090003          	lb	zero,64(s2)
    229c:	0100                	addi	s0,sp,128
    229e:	2105                	jal	26be <_bss_end+0x5ba>
    22a0:	0200                	addi	s0,sp,256
    22a2:	0304                	addi	s1,sp,384
    22a4:	02097f03          	0x2097f03
    22a8:	0100                	addi	s0,sp,128
    22aa:	1805                	addi	a6,a6,-31
    22ac:	0200                	addi	s0,sp,256
    22ae:	0304                	addi	s1,sp,384
    22b0:	02090103          	lb	sp,32(s2)
    22b4:	0100                	addi	s0,sp,128
    22b6:	2105                	jal	26d6 <_bss_end+0x5d2>
    22b8:	0200                	addi	s0,sp,256
    22ba:	0304                	addi	s1,sp,384
    22bc:	0306                	slli	t1,t1,0x1
    22be:	097f                	0x97f
    22c0:	0002                	c.slli64	zero
    22c2:	0501                	addi	a0,a0,0
    22c4:	090c034b          	fnmsub.s	ft6,fs8,fa6,ft1,rne
    22c8:	0002                	c.slli64	zero
    22ca:	0501                	addi	a0,a0,0
    22cc:	0305                	addi	t1,t1,1
    22ce:	0901                	addi	s2,s2,0
    22d0:	0000                	unimp
    22d2:	0501                	addi	a0,a0,0
    22d4:	7f03064b          	fnmsub.q	fa2,ft6,fa6,fa5,rne
    22d8:	0009                	c.nop	2
    22da:	0100                	addi	s0,sp,128
    22dc:	1205                	addi	tp,tp,-31
    22de:	02090103          	lb	sp,32(s2)
    22e2:	0100                	addi	s0,sp,128
    22e4:	4b05                	li	s6,1
    22e6:	08097f03          	0x8097f03
    22ea:	0100                	addi	s0,sp,128
    22ec:	0905                	addi	s2,s2,1
    22ee:	0c090503          	lb	a0,192(s2)
    22f2:	0100                	addi	s0,sp,128
    22f4:	4b05                	li	s6,1
    22f6:	04097b03          	0x4097b03
    22fa:	0100                	addi	s0,sp,128
    22fc:	1205                	addi	tp,tp,-31
    22fe:	02090103          	lb	sp,32(s2)
    2302:	0100                	addi	s0,sp,128
    2304:	0905                	addi	s2,s2,1
    2306:	08090403          	lb	s0,128(s2)
    230a:	0100                	addi	s0,sp,128
    230c:	4b05                	li	s6,1
    230e:	0a097b03          	0xa097b03
    2312:	0100                	addi	s0,sp,128
    2314:	06090003          	lb	zero,96(s2)
    2318:	0100                	addi	s0,sp,128
    231a:	1205                	addi	tp,tp,-31
    231c:	04090103          	lb	sp,64(s2)
    2320:	0100                	addi	s0,sp,128
    2322:	0505                	addi	a0,a0,1
    2324:	0306                	slli	t1,t1,0x1
    2326:	0901                	addi	s2,s2,0
    2328:	0004                	0x4
    232a:	0301                	addi	t1,t1,0
    232c:	0901                	addi	s2,s2,0
    232e:	0000                	unimp
    2330:	0301                	addi	t1,t1,0
    2332:	0902                	c.slli64	s2
    2334:	0000                	unimp
    2336:	0501                	addi	a0,a0,0
    2338:	0609                	addi	a2,a2,2
    233a:	00090003          	lb	zero,0(s2)
    233e:	0100                	addi	s0,sp,128
    2340:	0505                	addi	a0,a0,1
    2342:	0306                	slli	t1,t1,0x1
    2344:	0901                	addi	s2,s2,0
    2346:	0002                	c.slli64	zero
    2348:	0301                	addi	t1,t1,0
    234a:	0901                	addi	s2,s2,0
    234c:	0000                	unimp
    234e:	0301                	addi	t1,t1,0
    2350:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    2354:	0501                	addi	a0,a0,0
    2356:	060c                	addi	a1,sp,768
    2358:	00090003          	lb	zero,0(s2)
    235c:	0100                	addi	s0,sp,128
    235e:	0105                	addi	sp,sp,1
    2360:	12090703          	lb	a4,288(s2)
    2364:	0100                	addi	s0,sp,128
    2366:	0c05                	addi	s8,s8,1
    2368:	06097903          	0x6097903
    236c:	0100                	addi	s0,sp,128
    236e:	0105                	addi	sp,sp,1
    2370:	0306                	slli	t1,t1,0x1
    2372:	00020907          	0x20907
    2376:	0501                	addi	a0,a0,0
    2378:	060a                	slli	a2,a2,0x2
    237a:	00090303          	lb	t1,0(s2)
    237e:	0100                	addi	s0,sp,128
    2380:	0105                	addi	sp,sp,1
    2382:	04097d03          	0x4097d03
    2386:	0100                	addi	s0,sp,128
    2388:	0505                	addi	a0,a0,1
    238a:	0306                	slli	t1,t1,0x1
    238c:	00040903          	lb	s2,0(s0)
    2390:	0501                	addi	a0,a0,0
    2392:	060a                	slli	a2,a2,0x2
    2394:	00090003          	lb	zero,0(s2)
    2398:	0100                	addi	s0,sp,128
    239a:	0505                	addi	a0,a0,1
    239c:	0306                	slli	t1,t1,0x1
    239e:	0902                	c.slli64	s2
    23a0:	0010                	0x10
    23a2:	0501                	addi	a0,a0,0
    23a4:	061a                	slli	a2,a2,0x6
    23a6:	00090003          	lb	zero,0(s2)
    23aa:	0100                	addi	s0,sp,128
    23ac:	1405                	addi	s0,s0,-31
    23ae:	0200                	addi	s0,sp,256
    23b0:	0104                	addi	s1,sp,128
    23b2:	0306                	slli	t1,t1,0x1
    23b4:	0900                	addi	s0,sp,144
    23b6:	0008                	0x8
    23b8:	0501                	addi	a0,a0,0
    23ba:	0005                	c.nop	1
    23bc:	0402                	c.slli64	s0
    23be:	0601                	addi	a2,a2,0
    23c0:	00090003          	lb	zero,0(s2)
    23c4:	0100                	addi	s0,sp,128
    23c6:	0306                	slli	t1,t1,0x1
    23c8:	00040907          	0x40907
    23cc:	0301                	addi	t1,t1,0
    23ce:	0901                	addi	s2,s2,0
    23d0:	0000                	unimp
    23d2:	0501                	addi	a0,a0,0
    23d4:	0601                	addi	a2,a2,0
    23d6:	00090203          	lb	tp,0(s2)
    23da:	0100                	addi	s0,sp,128
    23dc:	1205                	addi	tp,tp,-31
    23de:	04097e03          	0x4097e03
    23e2:	0100                	addi	s0,sp,128
    23e4:	0505                	addi	a0,a0,1
    23e6:	0306                	slli	t1,t1,0x1
    23e8:	0901                	addi	s2,s2,0
    23ea:	000c                	0xc
    23ec:	0501                	addi	a0,a0,0
    23ee:	0601                	addi	a2,a2,0
    23f0:	00090103          	lb	sp,0(s2)
    23f4:	0100                	addi	s0,sp,128
    23f6:	0905                	addi	s2,s2,1
    23f8:	0200                	addi	s0,sp,256
    23fa:	0304                	addi	s1,sp,384
    23fc:	0306                	slli	t1,t1,0x1
    23fe:	000e0977          	0xe0977
    2402:	0501                	addi	a0,a0,0
    2404:	0019                	c.nop	6
    2406:	0402                	c.slli64	s0
    2408:	00030603          	lb	a2,0(t1)
    240c:	0009                	c.nop	2
    240e:	0100                	addi	s0,sp,128
    2410:	1f05                	addi	t5,t5,-31
    2412:	0200                	addi	s0,sp,256
    2414:	0304                	addi	s1,sp,384
    2416:	08097f03          	0x8097f03
    241a:	0100                	addi	s0,sp,128
    241c:	1505                	addi	a0,a0,-31
    241e:	0200                	addi	s0,sp,256
    2420:	0304                	addi	s1,sp,384
    2422:	04090103          	lb	sp,64(s2)
    2426:	0100                	addi	s0,sp,128
    2428:	1f05                	addi	t5,t5,-31
    242a:	0200                	addi	s0,sp,256
    242c:	0304                	addi	s1,sp,384
    242e:	0306                	slli	t1,t1,0x1
    2430:	097f                	0x97f
    2432:	0004                	0x4
    2434:	0501                	addi	a0,a0,0
    2436:	036c                	addi	a1,sp,396
    2438:	090d                	addi	s2,s2,3
    243a:	0002                	c.slli64	zero
    243c:	0501                	addi	a0,a0,0
    243e:	0305                	addi	t1,t1,1
    2440:	0901                	addi	s2,s2,0
    2442:	0000                	unimp
    2444:	0501                	addi	a0,a0,0
    2446:	066c                	addi	a1,sp,780
    2448:	00097f03          	0x97f03
    244c:	0100                	addi	s0,sp,128
    244e:	1e05                	addi	t3,t3,-31
    2450:	08091103          	lh	sp,128(s2)
    2454:	0100                	addi	s0,sp,128
    2456:	6c05                	lui	s8,0x1
    2458:	06096f03          	0x6096f03
    245c:	0100                	addi	s0,sp,128
    245e:	1205                	addi	tp,tp,-31
    2460:	04090103          	lb	sp,64(s2)
    2464:	0100                	addi	s0,sp,128
    2466:	6c05                	lui	s8,0x1
    2468:	04097f03          	0x4097f03
    246c:	0100                	addi	s0,sp,128
    246e:	1205                	addi	tp,tp,-31
    2470:	02090103          	lb	sp,32(s2)
    2474:	0100                	addi	s0,sp,128
    2476:	6c05                	lui	s8,0x1
    2478:	0c097f03          	0xc097f03
    247c:	0100                	addi	s0,sp,128
    247e:	0905                	addi	s2,s2,1
    2480:	08090a03          	lb	s4,128(s2)
    2484:	0100                	addi	s0,sp,128
    2486:	1205                	addi	tp,tp,-31
    2488:	02097703          	0x2097703
    248c:	0100                	addi	s0,sp,128
    248e:	0505                	addi	a0,a0,1
    2490:	0306                	slli	t1,t1,0x1
    2492:	0901                	addi	s2,s2,0
    2494:	0004                	0x4
    2496:	0301                	addi	t1,t1,0
    2498:	0901                	addi	s2,s2,0
    249a:	0000                	unimp
    249c:	0301                	addi	t1,t1,0
    249e:	0901                	addi	s2,s2,0
    24a0:	0000                	unimp
    24a2:	0301                	addi	t1,t1,0
    24a4:	0901                	addi	s2,s2,0
    24a6:	0000                	unimp
    24a8:	0301                	addi	t1,t1,0
    24aa:	0901                	addi	s2,s2,0
    24ac:	0000                	unimp
    24ae:	0301                	addi	t1,t1,0
    24b0:	0901                	addi	s2,s2,0
    24b2:	0000                	unimp
    24b4:	0301                	addi	t1,t1,0
    24b6:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    24ba:	0501                	addi	a0,a0,0
    24bc:	0609                	addi	a2,a2,2
    24be:	00090003          	lb	zero,0(s2)
    24c2:	0100                	addi	s0,sp,128
    24c4:	6c05                	lui	s8,0x1
    24c6:	04097603          	0x4097603
    24ca:	0100                	addi	s0,sp,128
    24cc:	0905                	addi	s2,s2,1
    24ce:	02090a03          	lb	s4,32(s2)
    24d2:	0100                	addi	s0,sp,128
    24d4:	6c05                	lui	s8,0x1
    24d6:	02097603          	0x2097603
    24da:	0100                	addi	s0,sp,128
    24dc:	08090003          	lb	zero,128(s2)
    24e0:	0100                	addi	s0,sp,128
    24e2:	0a05                	addi	s4,s4,1
    24e4:	02090e03          	lb	t3,32(s2)
    24e8:	0100                	addi	s0,sp,128
    24ea:	0905                	addi	s2,s2,1
    24ec:	04097c03          	0x4097c03
    24f0:	0100                	addi	s0,sp,128
    24f2:	0505                	addi	a0,a0,1
    24f4:	0306                	slli	t1,t1,0x1
    24f6:	0904                	addi	s1,sp,144
    24f8:	0004                	0x4
    24fa:	0501                	addi	a0,a0,0
    24fc:	060a                	slli	a2,a2,0x2
    24fe:	00090003          	lb	zero,0(s2)
    2502:	0100                	addi	s0,sp,128
    2504:	0505                	addi	a0,a0,1
    2506:	0306                	slli	t1,t1,0x1
    2508:	00120903          	lb	s2,1(tp) # 1 <__DYNAMIC+0x1>
    250c:	0501                	addi	a0,a0,0
    250e:	0003060b          	0x3060b
    2512:	0409                	addi	s0,s0,2
    2514:	0100                	addi	s0,sp,128
    2516:	1405                	addi	s0,s0,-31
    2518:	0200                	addi	s0,sp,256
    251a:	0104                	addi	s1,sp,128
    251c:	0306                	slli	t1,t1,0x1
    251e:	0900                	addi	s0,sp,144
    2520:	0002                	c.slli64	zero
    2522:	0501                	addi	a0,a0,0
    2524:	0005                	c.nop	1
    2526:	0402                	c.slli64	s0
    2528:	0601                	addi	a2,a2,0
    252a:	00090003          	lb	zero,0(s2)
    252e:	0100                	addi	s0,sp,128
    2530:	1605                	addi	a2,a2,-31
    2532:	04090603          	lb	a2,64(s2)
    2536:	0100                	addi	s0,sp,128
    2538:	0c05                	addi	s8,s8,1
    253a:	06097f03          	0x6097f03
    253e:	0100                	addi	s0,sp,128
    2540:	1105                	addi	sp,sp,-31
    2542:	0200                	addi	s0,sp,256
    2544:	0104                	addi	s1,sp,128
    2546:	0306                	slli	t1,t1,0x1
    2548:	0900                	addi	s0,sp,144
    254a:	0002                	c.slli64	zero
    254c:	0501                	addi	a0,a0,0
    254e:	0005                	c.nop	1
    2550:	0402                	c.slli64	s0
    2552:	0601                	addi	a2,a2,0
    2554:	00090003          	lb	zero,0(s2)
    2558:	0100                	addi	s0,sp,128
    255a:	0306                	slli	t1,t1,0x1
    255c:	0908                	addi	a0,sp,144
    255e:	0004                	0x4
    2560:	0501                	addi	a0,a0,0
    2562:	0609                	addi	a2,a2,2
    2564:	00090003          	lb	zero,0(s2)
    2568:	0100                	addi	s0,sp,128
    256a:	0505                	addi	a0,a0,1
    256c:	0306                	slli	t1,t1,0x1
    256e:	0904                	addi	s1,sp,144
    2570:	000c                	0xc
    2572:	0501                	addi	a0,a0,0
    2574:	060a                	slli	a2,a2,0x2
    2576:	00090003          	lb	zero,0(s2)
    257a:	0100                	addi	s0,sp,128
    257c:	0505                	addi	a0,a0,1
    257e:	0306                	slli	t1,t1,0x1
    2580:	0901                	addi	s2,s2,0
    2582:	000c                	0xc
    2584:	0501                	addi	a0,a0,0
    2586:	0014                	0x14
    2588:	0402                	c.slli64	s0
    258a:	0301                	addi	t1,t1,0
    258c:	0900                	addi	s0,sp,144
    258e:	0002                	c.slli64	zero
    2590:	0501                	addi	a0,a0,0
    2592:	0005                	c.nop	1
    2594:	0402                	c.slli64	s0
    2596:	0601                	addi	a2,a2,0
    2598:	00090003          	lb	zero,0(s2)
    259c:	0100                	addi	s0,sp,128
    259e:	0306                	slli	t1,t1,0x1
    25a0:	0905                	addi	s2,s2,1
    25a2:	0004                	0x4
    25a4:	0301                	addi	t1,t1,0
    25a6:	0901                	addi	s2,s2,0
    25a8:	0000                	unimp
    25aa:	0501                	addi	a0,a0,0
    25ac:	0601                	addi	a2,a2,0
    25ae:	00090203          	lb	tp,0(s2)
    25b2:	0100                	addi	s0,sp,128
    25b4:	1205                	addi	tp,tp,-31
    25b6:	04097e03          	0x4097e03
    25ba:	0100                	addi	s0,sp,128
    25bc:	0505                	addi	a0,a0,1
    25be:	0306                	slli	t1,t1,0x1
    25c0:	0901                	addi	s2,s2,0
    25c2:	000c                	0xc
    25c4:	0501                	addi	a0,a0,0
    25c6:	0601                	addi	a2,a2,0
    25c8:	00090103          	lb	sp,0(s2)
    25cc:	0100                	addi	s0,sp,128
    25ce:	0905                	addi	s2,s2,1
    25d0:	0200                	addi	s0,sp,256
    25d2:	0304                	addi	s1,sp,384
    25d4:	0306                	slli	t1,t1,0x1
    25d6:	00140967          	jalr	s2,1(s0)
    25da:	0501                	addi	a0,a0,0
    25dc:	0019                	c.nop	6
    25de:	0402                	c.slli64	s0
    25e0:	00030603          	lb	a2,0(t1)
    25e4:	0009                	c.nop	2
    25e6:	0100                	addi	s0,sp,128
    25e8:	2305                	jal	2b08 <_bss_end+0xa04>
    25ea:	0200                	addi	s0,sp,256
    25ec:	0304                	addi	s1,sp,384
    25ee:	08097f03          	0x8097f03
    25f2:	0100                	addi	s0,sp,128
    25f4:	1505                	addi	a0,a0,-31
    25f6:	0200                	addi	s0,sp,256
    25f8:	0304                	addi	s1,sp,384
    25fa:	04090103          	lb	sp,64(s2)
    25fe:	0100                	addi	s0,sp,128
    2600:	2305                	jal	2b20 <_bss_end+0xa1c>
    2602:	0200                	addi	s0,sp,256
    2604:	0304                	addi	s1,sp,384
    2606:	0306                	slli	t1,t1,0x1
    2608:	097f                	0x97f
    260a:	0004                	0x4
    260c:	0501                	addi	a0,a0,0
    260e:	0309                	addi	t1,t1,2
    2610:	0906                	slli	s2,s2,0x1
    2612:	0002                	c.slli64	zero
    2614:	0501                	addi	a0,a0,0
    2616:	060e                	slli	a2,a2,0x3
    2618:	00090003          	lb	zero,0(s2)
    261c:	0100                	addi	s0,sp,128
    261e:	0b05                	addi	s6,s6,1
    2620:	02090003          	lb	zero,32(s2)
    2624:	0100                	addi	s0,sp,128
    2626:	0d05                	addi	s10,s10,1
    2628:	0306                	slli	t1,t1,0x1
    262a:	00040903          	lb	s2,0(s0)
    262e:	0501                	addi	a0,a0,0
    2630:	0619                	addi	a2,a2,6
    2632:	00090003          	lb	zero,0(s2)
    2636:	0100                	addi	s0,sp,128
    2638:	1305                	addi	t1,t1,-31
    263a:	04090003          	lb	zero,64(s2)
    263e:	0100                	addi	s0,sp,128
    2640:	1805                	addi	a6,a6,-31
    2642:	0200                	addi	s0,sp,256
    2644:	0204                	addi	s1,sp,256
    2646:	0306                	slli	t1,t1,0x1
    2648:	097c                	addi	a5,sp,156
    264a:	0002                	c.slli64	zero
    264c:	0501                	addi	a0,a0,0
    264e:	0009                	c.nop	2
    2650:	0402                	c.slli64	s0
    2652:	090e0303          	lb	t1,144(t3)
    2656:	0006                	c.slli	zero,0x1
    2658:	0501                	addi	a0,a0,0
    265a:	0019                	c.nop	6
    265c:	0402                	c.slli64	s0
    265e:	00030603          	lb	a2,0(t1)
    2662:	0009                	c.nop	2
    2664:	0100                	addi	s0,sp,128
    2666:	2305                	jal	2b86 <_bss_end+0xa82>
    2668:	0200                	addi	s0,sp,256
    266a:	0304                	addi	s1,sp,384
    266c:	08097f03          	0x8097f03
    2670:	0100                	addi	s0,sp,128
    2672:	1505                	addi	a0,a0,-31
    2674:	0200                	addi	s0,sp,256
    2676:	0304                	addi	s1,sp,384
    2678:	04090103          	lb	sp,64(s2)
    267c:	0100                	addi	s0,sp,128
    267e:	2305                	jal	2b9e <_bss_end+0xa9a>
    2680:	0200                	addi	s0,sp,256
    2682:	0304                	addi	s1,sp,384
    2684:	0306                	slli	t1,t1,0x1
    2686:	097f                	0x97f
    2688:	0004                	0x4
    268a:	0901                	addi	s2,s2,0
    268c:	0002                	c.slli64	zero
    268e:	0100                	addi	s0,sp,128
    2690:	0501                	addi	a0,a0,0
    2692:	0205000b          	0x205000b
    2696:	10b8                	addi	a4,sp,104
    2698:	0000                	unimp
    269a:	0105d003          	lhu	zero,16(a1)
    269e:	0505                	addi	a0,a0,1
    26a0:	00090103          	lb	sp,0(s2)
    26a4:	0100                	addi	s0,sp,128
    26a6:	00090103          	lb	sp,0(s2)
    26aa:	0100                	addi	s0,sp,128
    26ac:	00090103          	lb	sp,0(s2)
    26b0:	0100                	addi	s0,sp,128
    26b2:	00090103          	lb	sp,0(s2)
    26b6:	0100                	addi	s0,sp,128
    26b8:	00090103          	lb	sp,0(s2)
    26bc:	0100                	addi	s0,sp,128
    26be:	00090103          	lb	sp,0(s2)
    26c2:	0100                	addi	s0,sp,128
    26c4:	00090203          	lb	tp,0(s2)
    26c8:	0100                	addi	s0,sp,128
    26ca:	0b05                	addi	s6,s6,1
    26cc:	0306                	slli	t1,t1,0x1
    26ce:	0978                	addi	a4,sp,156
    26d0:	0000                	unimp
    26d2:	0501                	addi	a0,a0,0
    26d4:	0309                	addi	t1,t1,2
    26d6:	0908                	addi	a0,sp,144
    26d8:	0004                	0x4
    26da:	0501                	addi	a0,a0,0
    26dc:	0978030b          	0x978030b
    26e0:	000e                	c.slli	zero,0x3
    26e2:	0501                	addi	a0,a0,0
    26e4:	0312                	slli	t1,t1,0x4
    26e6:	0918                	addi	a4,sp,144
    26e8:	0010                	0x10
    26ea:	0501                	addi	a0,a0,0
    26ec:	0309                	addi	t1,t1,2
    26ee:	0970                	addi	a2,sp,156
    26f0:	0004                	0x4
    26f2:	0501                	addi	a0,a0,0
    26f4:	0605                	addi	a2,a2,1
    26f6:	02090103          	lb	sp,32(s2)
    26fa:	0100                	addi	s0,sp,128
    26fc:	00090103          	lb	sp,0(s2)
    2700:	0100                	addi	s0,sp,128
    2702:	00090103          	lb	sp,0(s2)
    2706:	0100                	addi	s0,sp,128
    2708:	00090103          	lb	sp,0(s2)
    270c:	0100                	addi	s0,sp,128
    270e:	00090103          	lb	sp,0(s2)
    2712:	0100                	addi	s0,sp,128
    2714:	00090103          	lb	sp,0(s2)
    2718:	0100                	addi	s0,sp,128
    271a:	00090103          	lb	sp,0(s2)
    271e:	0100                	addi	s0,sp,128
    2720:	00090903          	lb	s2,0(s2)
    2724:	0100                	addi	s0,sp,128
    2726:	1205                	addi	tp,tp,-31
    2728:	0306                	slli	t1,t1,0x1
    272a:	0900                	addi	s0,sp,144
    272c:	0000                	unimp
    272e:	0501                	addi	a0,a0,0
    2730:	030c                	addi	a1,sp,384
    2732:	0901                	addi	s2,s2,0
    2734:	000c                	0xc
    2736:	0501                	addi	a0,a0,0
    2738:	0312                	slli	t1,t1,0x4
    273a:	097f                	0x97f
    273c:	000a                	c.slli	zero,0x2
    273e:	0501                	addi	a0,a0,0
    2740:	0605                	addi	a2,a2,1
    2742:	02090103          	lb	sp,32(s2)
    2746:	0100                	addi	s0,sp,128
    2748:	1205                	addi	tp,tp,-31
    274a:	0306                	slli	t1,t1,0x1
    274c:	0901                	addi	s2,s2,0
    274e:	0000                	unimp
    2750:	0501                	addi	a0,a0,0
    2752:	030c                	addi	a1,sp,384
    2754:	097f                	0x97f
    2756:	0004                	0x4
    2758:	0501                	addi	a0,a0,0
    275a:	0605                	addi	a2,a2,1
    275c:	02090103          	lb	sp,32(s2)
    2760:	0100                	addi	s0,sp,128
    2762:	1205                	addi	tp,tp,-31
    2764:	0306                	slli	t1,t1,0x1
    2766:	0900                	addi	s0,sp,144
    2768:	0000                	unimp
    276a:	0501                	addi	a0,a0,0
    276c:	0605                	addi	a2,a2,1
    276e:	04090203          	lb	tp,64(s2)
    2772:	0100                	addi	s0,sp,128
    2774:	1005                	c.nop	-31
    2776:	00090003          	lb	zero,0(s2)
    277a:	0100                	addi	s0,sp,128
    277c:	0505                	addi	a0,a0,1
    277e:	0306                	slli	t1,t1,0x1
    2780:	0900                	addi	s0,sp,144
    2782:	0000                	unimp
    2784:	0501                	addi	a0,a0,0
    2786:	0009                	c.nop	2
    2788:	0402                	c.slli64	s0
    278a:	02030603          	lb	a2,32(t1)
    278e:	0409                	addi	s0,s0,2
    2790:	0100                	addi	s0,sp,128
    2792:	1f05                	addi	t5,t5,-31
    2794:	0200                	addi	s0,sp,256
    2796:	0304                	addi	s1,sp,384
    2798:	0306                	slli	t1,t1,0x1
    279a:	0900                	addi	s0,sp,144
    279c:	0000                	unimp
    279e:	0501                	addi	a0,a0,0
    27a0:	0019                	c.nop	6
    27a2:	0402                	c.slli64	s0
    27a4:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    27a8:	0006                	c.slli	zero,0x1
    27aa:	0501                	addi	a0,a0,0
    27ac:	04020017          	auipc	zero,0x4020
    27b0:	7e030603          	lb	a2,2016(t1)
    27b4:	0609                	addi	a2,a2,2
    27b6:	0100                	addi	s0,sp,128
    27b8:	1005                	c.nop	-31
    27ba:	0200                	addi	s0,sp,256
    27bc:	0304                	addi	s1,sp,384
    27be:	00090003          	lb	zero,0(s2)
    27c2:	0100                	addi	s0,sp,128
    27c4:	0505                	addi	a0,a0,1
    27c6:	0200                	addi	s0,sp,256
    27c8:	0304                	addi	s1,sp,384
    27ca:	0306                	slli	t1,t1,0x1
    27cc:	0900                	addi	s0,sp,144
    27ce:	0002                	c.slli64	zero
    27d0:	0501                	addi	a0,a0,0
    27d2:	0009                	c.nop	2
    27d4:	0402                	c.slli64	s0
    27d6:	09030603          	lb	a2,144(t1)
    27da:	0409                	addi	s0,s0,2
    27dc:	0100                	addi	s0,sp,128
    27de:	1b05                	addi	s6,s6,-31
    27e0:	0200                	addi	s0,sp,256
    27e2:	0304                	addi	s1,sp,384
    27e4:	00097e03          	0x97e03
    27e8:	0100                	addi	s0,sp,128
    27ea:	1005                	c.nop	-31
    27ec:	0200                	addi	s0,sp,256
    27ee:	0304                	addi	s1,sp,384
    27f0:	00090003          	lb	zero,0(s2)
    27f4:	0100                	addi	s0,sp,128
    27f6:	0905                	addi	s2,s2,1
    27f8:	0200                	addi	s0,sp,256
    27fa:	0304                	addi	s1,sp,384
    27fc:	0c090903          	lb	s2,192(s2)
    2800:	0100                	addi	s0,sp,128
    2802:	2605                	jal	2b22 <_bss_end+0xa1e>
    2804:	0200                	addi	s0,sp,256
    2806:	0304                	addi	s1,sp,384
    2808:	0306                	slli	t1,t1,0x1
    280a:	0900                	addi	s0,sp,144
    280c:	0000                	unimp
    280e:	0501                	addi	a0,a0,0
    2810:	0020                	addi	s0,sp,8
    2812:	0402                	c.slli64	s0
    2814:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2818:	0006                	c.slli	zero,0x1
    281a:	0501                	addi	a0,a0,0
    281c:	001f 0402 0603      	0x6030402001f
    2822:	04097e03          	0x4097e03
    2826:	0100                	addi	s0,sp,128
    2828:	1405                	addi	s0,s0,-31
    282a:	0200                	addi	s0,sp,256
    282c:	0304                	addi	s1,sp,384
    282e:	00090003          	lb	zero,0(s2)
    2832:	0100                	addi	s0,sp,128
    2834:	0505                	addi	a0,a0,1
    2836:	0200                	addi	s0,sp,256
    2838:	0304                	addi	s1,sp,384
    283a:	0306                	slli	t1,t1,0x1
    283c:	0900                	addi	s0,sp,144
    283e:	0000                	unimp
    2840:	0501                	addi	a0,a0,0
    2842:	0009                	c.nop	2
    2844:	0402                	c.slli64	s0
    2846:	09030603          	lb	a2,144(t1)
    284a:	0409                	addi	s0,s0,2
    284c:	0100                	addi	s0,sp,128
    284e:	1f05                	addi	t5,t5,-31
    2850:	0200                	addi	s0,sp,256
    2852:	0304                	addi	s1,sp,384
    2854:	00097e03          	0x97e03
    2858:	0100                	addi	s0,sp,128
    285a:	1405                	addi	s0,s0,-31
    285c:	0200                	addi	s0,sp,256
    285e:	0304                	addi	s1,sp,384
    2860:	00090003          	lb	zero,0(s2)
    2864:	0100                	addi	s0,sp,128
    2866:	0905                	addi	s2,s2,1
    2868:	0200                	addi	s0,sp,256
    286a:	0304                	addi	s1,sp,384
    286c:	0c090903          	lb	s2,192(s2)
    2870:	0100                	addi	s0,sp,128
    2872:	2305                	jal	2d92 <_bss_end+0xc8e>
    2874:	0200                	addi	s0,sp,256
    2876:	0304                	addi	s1,sp,384
    2878:	0306                	slli	t1,t1,0x1
    287a:	0900                	addi	s0,sp,144
    287c:	0000                	unimp
    287e:	0501                	addi	a0,a0,0
    2880:	001d                	c.nop	7
    2882:	0402                	c.slli64	s0
    2884:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2888:	0006                	c.slli	zero,0x1
    288a:	0501                	addi	a0,a0,0
    288c:	001f 0402 0603      	0x6030402001f
    2892:	04097e03          	0x4097e03
    2896:	0100                	addi	s0,sp,128
    2898:	1405                	addi	s0,s0,-31
    289a:	0200                	addi	s0,sp,256
    289c:	0304                	addi	s1,sp,384
    289e:	00090003          	lb	zero,0(s2)
    28a2:	0100                	addi	s0,sp,128
    28a4:	0505                	addi	a0,a0,1
    28a6:	0200                	addi	s0,sp,256
    28a8:	0304                	addi	s1,sp,384
    28aa:	0306                	slli	t1,t1,0x1
    28ac:	0900                	addi	s0,sp,144
    28ae:	0000                	unimp
    28b0:	0501                	addi	a0,a0,0
    28b2:	0009                	c.nop	2
    28b4:	0402                	c.slli64	s0
    28b6:	09030603          	lb	a2,144(t1)
    28ba:	0c09                	addi	s8,s8,2
    28bc:	0100                	addi	s0,sp,128
    28be:	2205                	jal	29de <_bss_end+0x8da>
    28c0:	0200                	addi	s0,sp,256
    28c2:	0304                	addi	s1,sp,384
    28c4:	0306                	slli	t1,t1,0x1
    28c6:	0900                	addi	s0,sp,144
    28c8:	0000                	unimp
    28ca:	0501                	addi	a0,a0,0
    28cc:	001c                	0x1c
    28ce:	0402                	c.slli64	s0
    28d0:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    28d4:	0006                	c.slli	zero,0x1
    28d6:	0501                	addi	a0,a0,0
    28d8:	0021                	c.nop	8
    28da:	0402                	c.slli64	s0
    28dc:	7e030603          	lb	a2,2016(t1)
    28e0:	0409                	addi	s0,s0,2
    28e2:	0100                	addi	s0,sp,128
    28e4:	1405                	addi	s0,s0,-31
    28e6:	0200                	addi	s0,sp,256
    28e8:	0304                	addi	s1,sp,384
    28ea:	00090003          	lb	zero,0(s2)
    28ee:	0100                	addi	s0,sp,128
    28f0:	0505                	addi	a0,a0,1
    28f2:	0200                	addi	s0,sp,256
    28f4:	0304                	addi	s1,sp,384
    28f6:	0306                	slli	t1,t1,0x1
    28f8:	0900                	addi	s0,sp,144
    28fa:	0000                	unimp
    28fc:	0601                	addi	a2,a2,0
    28fe:	04090803          	lb	a6,64(s2)
    2902:	0100                	addi	s0,sp,128
    2904:	1205                	addi	tp,tp,-31
    2906:	0306                	slli	t1,t1,0x1
    2908:	0900                	addi	s0,sp,144
    290a:	0000                	unimp
    290c:	0501                	addi	a0,a0,0
    290e:	09010313          	addi	t1,sp,144
    2912:	0008                	0x8
    2914:	0501                	addi	a0,a0,0
    2916:	0312                	slli	t1,t1,0x4
    2918:	097f                	0x97f
    291a:	000c                	0xc
    291c:	0501                	addi	a0,a0,0
    291e:	0605                	addi	a2,a2,1
    2920:	02090103          	lb	sp,32(s2)
    2924:	0100                	addi	s0,sp,128
    2926:	1305                	addi	t1,t1,-31
    2928:	0306                	slli	t1,t1,0x1
    292a:	0900                	addi	s0,sp,144
    292c:	0000                	unimp
    292e:	0501                	addi	a0,a0,0
    2930:	0605                	addi	a2,a2,1
    2932:	04090103          	lb	sp,64(s2)
    2936:	0100                	addi	s0,sp,128
    2938:	1305                	addi	t1,t1,-31
    293a:	0306                	slli	t1,t1,0x1
    293c:	090a                	slli	s2,s2,0x2
    293e:	0000                	unimp
    2940:	0501                	addi	a0,a0,0
    2942:	0312                	slli	t1,t1,0x4
    2944:	0976                	slli	s2,s2,0x1d
    2946:	0004                	0x4
    2948:	0501                	addi	a0,a0,0
    294a:	090a0313          	addi	t1,s4,144 # ffff7090 <_stack_start+0xfffe7090>
    294e:	0004                	0x4
    2950:	0501                	addi	a0,a0,0
    2952:	0312                	slli	t1,t1,0x4
    2954:	0976                	slli	s2,s2,0x1d
    2956:	000e                	c.slli	zero,0x3
    2958:	0501                	addi	a0,a0,0
    295a:	0605                	addi	a2,a2,1
    295c:	02090a03          	lb	s4,32(s2)
    2960:	0100                	addi	s0,sp,128
    2962:	1305                	addi	t1,t1,-31
    2964:	0306                	slli	t1,t1,0x1
    2966:	0900                	addi	s0,sp,144
    2968:	0000                	unimp
    296a:	0501                	addi	a0,a0,0
    296c:	0605                	addi	a2,a2,1
    296e:	02091403          	lh	s0,32(s2)
    2972:	0100                	addi	s0,sp,128
    2974:	1005                	c.nop	-31
    2976:	00090003          	lb	zero,0(s2)
    297a:	0100                	addi	s0,sp,128
    297c:	1a05                	addi	s4,s4,-31
    297e:	0306                	slli	t1,t1,0x1
    2980:	0908                	addi	a0,sp,144
    2982:	0000                	unimp
    2984:	0501                	addi	a0,a0,0
    2986:	09640313          	addi	t1,s0,150
    298a:	0004                	0x4
    298c:	0501                	addi	a0,a0,0
    298e:	031a                	slli	t1,t1,0x6
    2990:	091c                	addi	a5,sp,144
    2992:	0002                	c.slli64	zero
    2994:	0501                	addi	a0,a0,0
    2996:	0305                	addi	t1,t1,1
    2998:	0978                	addi	a4,sp,156
    299a:	0004                	0x4
    299c:	0501                	addi	a0,a0,0
    299e:	0609                	addi	a2,a2,2
    29a0:	04090103          	lb	sp,64(s2)
    29a4:	0100                	addi	s0,sp,128
    29a6:	0b05                	addi	s6,s6,1
    29a8:	0306                	slli	t1,t1,0x1
    29aa:	0900                	addi	s0,sp,144
    29ac:	0000                	unimp
    29ae:	0501                	addi	a0,a0,0
    29b0:	09000327          	0x9000327
    29b4:	0002                	c.slli64	zero
    29b6:	0501                	addi	a0,a0,0
    29b8:	0900030b          	0x900030b
    29bc:	0004                	0x4
    29be:	0501                	addi	a0,a0,0
    29c0:	060d                	addi	a2,a2,3
    29c2:	0a090203          	lb	tp,160(s2)
    29c6:	0100                	addi	s0,sp,128
    29c8:	1a05                	addi	s4,s4,-31
    29ca:	0306                	slli	t1,t1,0x1
    29cc:	0900                	addi	s0,sp,144
    29ce:	0000                	unimp
    29d0:	0501                	addi	a0,a0,0
    29d2:	060d                	addi	a2,a2,3
    29d4:	0a090203          	lb	tp,160(s2)
    29d8:	0100                	addi	s0,sp,128
    29da:	0505                	addi	a0,a0,1
    29dc:	00090903          	lb	s2,0(s2)
    29e0:	0100                	addi	s0,sp,128
    29e2:	0105                	addi	sp,sp,1
    29e4:	0306                	slli	t1,t1,0x1
    29e6:	0901                	addi	s2,s2,0
    29e8:	0000                	unimp
    29ea:	0501                	addi	a0,a0,0
    29ec:	000d                	c.nop	3
    29ee:	0402                	c.slli64	s0
    29f0:	0602                	c.slli64	a2
    29f2:	18097903          	0x18097903
    29f6:	0100                	addi	s0,sp,128
    29f8:	1a05                	addi	s4,s4,-31
    29fa:	0200                	addi	s0,sp,256
    29fc:	0204                	addi	s1,sp,256
    29fe:	0306                	slli	t1,t1,0x1
    2a00:	0900                	addi	s0,sp,144
    2a02:	0000                	unimp
    2a04:	0501                	addi	a0,a0,0
    2a06:	0018                	0x18
    2a08:	0402                	c.slli64	s0
    2a0a:	0602                	c.slli64	a2
    2a0c:	02097803          	0x2097803
    2a10:	0100                	addi	s0,sp,128
    2a12:	1005                	c.nop	-31
    2a14:	0200                	addi	s0,sp,256
    2a16:	0204                	addi	s1,sp,256
    2a18:	00090003          	lb	zero,0(s2)
    2a1c:	0100                	addi	s0,sp,128
    2a1e:	0505                	addi	a0,a0,1
    2a20:	0200                	addi	s0,sp,256
    2a22:	0204                	addi	s1,sp,256
    2a24:	0306                	slli	t1,t1,0x1
    2a26:	0900                	addi	s0,sp,144
    2a28:	0002                	c.slli64	zero
    2a2a:	0901                	addi	s2,s2,0
    2a2c:	0006                	c.slli	zero,0x1
    2a2e:	0100                	addi	s0,sp,128
    2a30:	5001                	c.li	zero,-32
    2a32:	0001                	nop
    2a34:	0300                	addi	s0,sp,384
    2a36:	1d00                	addi	s0,sp,688
    2a38:	0000                	unimp
    2a3a:	0100                	addi	s0,sp,128
    2a3c:	fb01                	bnez	a4,294c <_bss_end+0x848>
    2a3e:	0d0e                	slli	s10,s10,0x3
    2a40:	0100                	addi	s0,sp,128
    2a42:	0101                	addi	sp,sp,0
    2a44:	0001                	nop
    2a46:	0000                	unimp
    2a48:	0001                	nop
    2a4a:	0100                	addi	s0,sp,128
    2a4c:	6300                	flw	fs0,0(a4)
    2a4e:	7472                	flw	fs0,60(sp)
    2a50:	2e30                	fld	fa2,88(a2)
    2a52:	00000053          	fadd.s	ft0,ft0,ft0,rne
    2a56:	0000                	unimp
    2a58:	0500                	addi	s0,sp,640
    2a5a:	bc02                	fsd	ft0,56(sp)
    2a5c:	000e                	c.slli	zero,0x3
    2a5e:	1500                	addi	s0,sp,672
    2a60:	04090403          	lb	s0,64(s2)
    2a64:	0100                	addi	s0,sp,128
    2a66:	04090103          	lb	sp,64(s2)
    2a6a:	0100                	addi	s0,sp,128
    2a6c:	02090103          	lb	sp,32(s2)
    2a70:	0100                	addi	s0,sp,128
    2a72:	02090103          	lb	sp,32(s2)
    2a76:	0100                	addi	s0,sp,128
    2a78:	02090103          	lb	sp,32(s2)
    2a7c:	0100                	addi	s0,sp,128
    2a7e:	02090103          	lb	sp,32(s2)
    2a82:	0100                	addi	s0,sp,128
    2a84:	02090103          	lb	sp,32(s2)
    2a88:	0100                	addi	s0,sp,128
    2a8a:	02090103          	lb	sp,32(s2)
    2a8e:	0100                	addi	s0,sp,128
    2a90:	02090103          	lb	sp,32(s2)
    2a94:	0100                	addi	s0,sp,128
    2a96:	02090103          	lb	sp,32(s2)
    2a9a:	0100                	addi	s0,sp,128
    2a9c:	02090103          	lb	sp,32(s2)
    2aa0:	0100                	addi	s0,sp,128
    2aa2:	02090103          	lb	sp,32(s2)
    2aa6:	0100                	addi	s0,sp,128
    2aa8:	02090103          	lb	sp,32(s2)
    2aac:	0100                	addi	s0,sp,128
    2aae:	02090103          	lb	sp,32(s2)
    2ab2:	0100                	addi	s0,sp,128
    2ab4:	02090103          	lb	sp,32(s2)
    2ab8:	0100                	addi	s0,sp,128
    2aba:	02090103          	lb	sp,32(s2)
    2abe:	0100                	addi	s0,sp,128
    2ac0:	02090103          	lb	sp,32(s2)
    2ac4:	0100                	addi	s0,sp,128
    2ac6:	02090103          	lb	sp,32(s2)
    2aca:	0100                	addi	s0,sp,128
    2acc:	02090103          	lb	sp,32(s2)
    2ad0:	0100                	addi	s0,sp,128
    2ad2:	02090103          	lb	sp,32(s2)
    2ad6:	0100                	addi	s0,sp,128
    2ad8:	02090103          	lb	sp,32(s2)
    2adc:	0100                	addi	s0,sp,128
    2ade:	02090103          	lb	sp,32(s2)
    2ae2:	0100                	addi	s0,sp,128
    2ae4:	02090103          	lb	sp,32(s2)
    2ae8:	0100                	addi	s0,sp,128
    2aea:	02090103          	lb	sp,32(s2)
    2aee:	0100                	addi	s0,sp,128
    2af0:	02090103          	lb	sp,32(s2)
    2af4:	0100                	addi	s0,sp,128
    2af6:	02090103          	lb	sp,32(s2)
    2afa:	0100                	addi	s0,sp,128
    2afc:	02090103          	lb	sp,32(s2)
    2b00:	0100                	addi	s0,sp,128
    2b02:	02090103          	lb	sp,32(s2)
    2b06:	0100                	addi	s0,sp,128
    2b08:	02090103          	lb	sp,32(s2)
    2b0c:	0100                	addi	s0,sp,128
    2b0e:	02090103          	lb	sp,32(s2)
    2b12:	0100                	addi	s0,sp,128
    2b14:	02090103          	lb	sp,32(s2)
    2b18:	0100                	addi	s0,sp,128
    2b1a:	02090303          	lb	t1,32(s2)
    2b1e:	0100                	addi	s0,sp,128
    2b20:	08090603          	lb	a2,128(s2)
    2b24:	0100                	addi	s0,sp,128
    2b26:	08090103          	lb	sp,128(s2)
    2b2a:	0100                	addi	s0,sp,128
    2b2c:	08090203          	lb	tp,128(s2)
    2b30:	0100                	addi	s0,sp,128
    2b32:	04090303          	lb	t1,64(s2)
    2b36:	0100                	addi	s0,sp,128
    2b38:	04090103          	lb	sp,64(s2)
    2b3c:	0100                	addi	s0,sp,128
    2b3e:	02090103          	lb	sp,32(s2)
    2b42:	0100                	addi	s0,sp,128
    2b44:	04090603          	lb	a2,64(s2)
    2b48:	0100                	addi	s0,sp,128
    2b4a:	04090103          	lb	sp,64(s2)
    2b4e:	0100                	addi	s0,sp,128
    2b50:	04090103          	lb	sp,64(s2)
    2b54:	0100                	addi	s0,sp,128
    2b56:	0409                	addi	s0,s0,2
    2b58:	0000                	unimp
    2b5a:	0101                	addi	sp,sp,0
    2b5c:	0500                	addi	s0,sp,640
    2b5e:	0002                	c.slli64	zero
    2b60:	0000                	unimp
    2b62:	0300                	addi	s0,sp,384
    2b64:	030100cb          	fnmsub.d	ft1,ft2,fa6,ft0,rne
    2b68:	0901                	addi	s2,s2,0
    2b6a:	007c                	addi	a5,sp,12
    2b6c:	0301                	addi	t1,t1,0
    2b6e:	0904                	addi	s1,sp,144
    2b70:	0004                	0x4
    2b72:	0301                	addi	t1,t1,0
    2b74:	0904                	addi	s1,sp,144
    2b76:	0004                	0x4
    2b78:	0301                	addi	t1,t1,0
    2b7a:	0904                	addi	s1,sp,144
    2b7c:	0004                	0x4
    2b7e:	0901                	addi	s2,s2,0
    2b80:	0004                	0x4
    2b82:	0100                	addi	s0,sp,128
    2b84:	01              	Address 0x0000000000002b84 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	6e69                	lui	t3,0x1a
  3c:	5f727473          	csrrci	s0,0x5f7,4
  40:	6461                	lui	s0,0x18
  42:	0064                	addi	s1,sp,12
  44:	775f 7263 6f74      	0x6f747263775f
  4a:	626d                	lui	tp,0x1b
  4c:	735f 6174 6574      	0x65746174735f
  52:	5f00                	lw	s0,56(a4)
  54:	72736377          	0x72736377
  58:	6f74                	flw	fa3,92(a4)
  5a:	626d                	lui	tp,0x1b
  5c:	74735f73          	csrrwi	t5,0x747,6
  60:	7461                	lui	s0,0xffff8
  62:	0065                	c.nop	25
  64:	5f5f 7562 6c69      	0x6c6975625f5f
  6a:	6974                	flw	fa3,84(a0)
  6c:	5f6e                	lw	t5,248(sp)
  6e:	656d                	lui	a0,0x1b
  70:	736d                	lui	t1,0xffffb
  72:	7465                	lui	s0,0xffff9
  74:	6c00                	flw	fs0,24(s0)
  76:	20676e6f          	jal	t3,7627c <_stack_start+0x6627c>
  7a:	6f6c                	flw	fa1,92(a4)
  jal x0, default_exc_handler
  7c:	676e                	flw	fa4,216(sp)
  7e:	7520                	flw	fs0,104(a0)
  jal x0, reset_handler
  80:	736e                	flw	ft6,248(sp)
  82:	6769                	lui	a4,0x1a
  jal x0, default_exc_handler
  84:	656e                	flw	fa0,216(sp)
  86:	2064                	fld	fs1,192(s0)
  jal x0, default_exc_handler
  88:	6e69                	lui	t3,0x1a
  8a:	0074                	addi	a3,sp,12
    asm volatile(
  8c:	6544                	flw	fs1,12(a0)
  8e:	654d5f63          	bge	s10,s4,6ec <polydiv+0x1d0>
    switch(length%3) {
  92:	67617373          	csrrci	t1,0x676,2
  96:	0065                	c.nop	25
  98:	6c5f 6662 6973      	0x697366626c5f
  9e:	657a                	flw	fa0,156(sp)
  a0:	7200                	flw	fs0,32(a2)
  a2:	6e61                	lui	t3,0x18
  a4:	6f64                	flw	fs1,92(a4)
            for (i = 0; i < (length / 3); i++) {
  a6:	5f6d                	li	t5,-5
  a8:	7379656b          	0x7379656b
  ac:	5f00                	lw	s0,56(a4)
  ae:	6c5f 636f 6c61      	0x6c61636f6c5f
            for (i = 0; i < ((length-2) / 3); i++) {
  b4:	5f65                	li	t5,-7
  b6:	0074                	addi	a3,sp,12
  b8:	72636573          	csrrsi	a0,0x726,6
  bc:	7465                	lui	s0,0xffff9
  be:	6b5f 7965 665f      	0x665f79656b5f
            a1[length-1] = a1[length-1] + a2[length-1];
  c4:	7300                	flw	fs0,32(a4)
  c6:	6365                	lui	t1,0x19
  c8:	6572                	flw	fa0,28(sp)
  ca:	5f74                	lw	a3,124(a4)
  cc:	5f79656b          	0x5f79656b
  d0:	6d5f0067          	jr	1749(t5)
  d4:	7262                	flw	ft4,56(sp)
  d6:	6f74                	flw	fa3,92(a4)
            for (i = 0; i < ((length-1) / 3); i++) {
  d8:	735f6377          	0x735f6377
  dc:	6174                	flw	fa3,68(a0)
  de:	6574                	flw	fa3,76(a0)
  e0:	5f00                	lw	s0,56(a4)
  e2:	6f746377          	0x6f746377
  e6:	626d                	lui	tp,0x1b
            a1[length-1] = a1[length-1] + a2[length-1];
  e8:	735f 6174 6574      	0x65746174735f
            a1[length-2] = a1[length-2] + a2[length-2];
  ee:	5f00                	lw	s0,56(a4)
  f0:	745f 5f6d 6573      	0x65735f6d745f
  f6:	6f6c0063          	beq	s8,s6,7d6 <ext_euclid+0x7e>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  fa:	676e                	flw	fa4,216(sp)
  fc:	6c20                	flw	fs0,88(s0)
    asm volatile(
  fe:	20676e6f          	jal	t3,76304 <_stack_start+0x66304>
 102:	6e69                	lui	t3,0x1a
 104:	0074                	addi	a3,sp,12
 106:	657a6973          	csrrsi	s2,0x657,20
            for (i = 0; i < (length / 3); i++) {
 10a:	4e5f 7000 6c6f      	0x6c6f70004e5f
    asm volatile(
 110:	6d79                	lui	s10,0x1e
 112:	6c75                	lui	s8,0x1d
 114:	0074                	addi	a3,sp,12
 116:	755f 7562 0066      	0x667562755f
            for (i = 0; i < ((length-1) / 3); i++) {
 11c:	625f 7361 0065      	0x657361625f
    asm volatile(
 122:	5f5f 6d74 685f      	0x685f6d745f5f
 128:	0072756f          	jal	a0,2792e <_stack_start+0x1792e>
            for (i = 0; i < ((length-2) / 3); i++) {
 12c:	5f5f 6673 5f00      	0x5f0066735f5f
    asm volatile(
 132:	655f6e6f          	jal	t3,f6f86 <_stack_start+0xe6f86>
    switch(length%3) {
 136:	6978                	flw	fa4,84(a0)
 138:	5f74                	lw	a3,124(a4)
 13a:	7261                	lui	tp,0xffff8
 13c:	5f007367          	0x5f007367
 140:	6b6f6f63          	bltu	t5,s6,7fe <ext_euclid+0xa6>
 144:	6569                	lui	a0,0x1a
 146:	5f00                	lw	s0,56(a4)
 148:	735f 6c67 6575      	0x65756c67735f
            for (i = 0; i < (length / 3); i++) {
 14e:	7200                	flw	fs0,32(a2)
 150:	7365                	lui	t1,0xffff9
 152:	0031                	c.nop	12
 154:	6572                	flw	fa0,28(sp)
            for (i = 0; i < ((length-2) / 3); i++) {
 156:	5f003273          	csrrc	tp,0x5f0,zero
 15a:	6c66                	flw	fs8,88(sp)
 15c:	6761                	lui	a4,0x18
 15e:	695f0073          	0x695f0073
 162:	78635f73          	csrrwi	t5,0x786,6
            a1[length-1] = a2[length-1];
 166:	0061                	c.nop	24
 168:	735f 6474 6e69      	0x6e696474735f
 16e:	5f00                	lw	s0,56(a4)
 170:	6c62                	flw	fs8,24(sp)
 172:	7a69736b          	0x7a69736b
 176:	0065                	c.nop	25
            for (i = 0; i < ((length-1) / 3); i++) {
 178:	7270                	flw	fa2,100(a2)
 17a:	6375646f          	jal	s0,56fb0 <_stack_start+0x46fb0>
 17e:	0074                	addi	a3,sp,12
 180:	6f70                	flw	fa2,92(a4)
 182:	796c                	flw	fa1,116(a0)
 184:	6964                	flw	fs1,84(a0)
 186:	0076                	c.slli	zero,0x1d
            a1[length-1] = a2[length-1];
 188:	6f70                	flw	fa2,92(a4)
            a1[length-2] = a2[length-2];
 18a:	796c                	flw	fa1,116(a0)
 18c:	0066                	c.slli	zero,0x19
 18e:	635f 7476 7562      	0x75627476635f
} //end of function
 194:	0066                	c.slli	zero,0x19
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 196:	6f5f 6666 6573      	0x657366666f5f
    asm volatile(
 19c:	0074                	addi	a3,sp,12
 19e:	6d5f 7362 7472      	0x747273626d5f
            for (i = 0; i < (length / 3); i++) {
 1a4:	7363776f          	jal	a4,378da <_stack_start+0x278da>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 1a8:	735f 6174 6574      	0x65746174735f
    asm volatile(
 1ae:	5f00                	lw	s0,56(a4)
 1b0:	626d                	lui	tp,0x1b
 1b2:	6c72                	flw	fs8,28(sp)
 1b4:	6e65                	lui	t3,0x19
            for (i = 0; i < ((length-1) / 3); i++) {
 1b6:	735f 6174 6574      	0x65746174735f
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 1bc:	5f00                	lw	s0,56(a4)
    asm volatile(
 1be:	6e66                	flw	ft8,88(sp)
 1c0:	7261                	lui	tp,0xffff8
 1c2:	6e007367          	0x6e007367
 1c6:	7274                	flw	fa3,100(a2)
            for (i = 0; i < ((length-2) / 3); i++) {
 1c8:	5f75                	li	t5,-3
 1ca:	6564                	flw	fs1,76(a0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1cc:	70796563          	bltu	s2,t2,8d6 <ext_euclid+0x17e>
 1d0:	0074                	addi	a3,sp,12
 1d2:	665f 736e 5f00      	0x5f00736e665f
    int line[size_b][size_a + size_b];
 1d8:	6e676973          	csrrsi	s2,0x6e6,14
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1dc:	5f00                	lw	s0,56(a4)
    int line[size_b][size_a + size_b];
 1de:	6c66                	flw	fs8,88(sp)
 1e0:	5f6b636f          	jal	t1,b67d6 <_stack_start+0xa67d6>
 1e4:	0074                	addi	a3,sp,12
 1e6:	735f 6474 7265      	0x72656474735f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1ec:	0072                	c.slli	zero,0x1c
 1ee:	425f 6769 6e69      	0x6e696769425f
 1f4:	0074                	addi	a3,sp,12
 1f6:	675f 6d61 616d      	0x616d6d61675f
 1fc:	735f 6769 676e      	0x676e6769735f
    int line[size_b][size_a + size_b];
 202:	6d61                	lui	s10,0x18
    int pola[size_a];
 204:	5f00                	lw	s0,56(a4)
 206:	6572                	flw	fa0,28(sp)
    int line[size_b][size_a + size_b];
 208:	6461                	lui	s0,0x18
    int pola[size_a];
 20a:	5f00                	lw	s0,56(a4)
    int line[size_b][size_a + size_b];
 20c:	6572                	flw	fa0,28(sp)
 20e:	746c7573          	csrrci	a0,0x746,24
 212:	6b5f 5f00 745f      	0x745f5f006b5f
    int polb[size_b];
 218:	006d                	c.nop	27
 21a:	6564                	flw	fs1,76(a0)
 21c:	756e                	flw	fa0,248(sp)
    int pola[size_a];
 21e:	5f6d                	li	t5,-5
    int polb[size_b];
 220:	6574                	flw	fa3,76(a0)
 222:	706d                	c.lui	zero,0xffffb
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 224:	5f00                	lw	s0,56(a4)
 226:	775f 6863 0062      	0x626863775f
    int line[size_b][size_a + size_b];
 22c:	6572                	flw	fa0,28(sp)
    int pola[size_a];
 22e:	746c7573          	csrrci	a0,0x746,24
    int polb[size_b];
 232:	006e6f6b          	0x6e6f6b
    for (i = 0; i < size_b; ++i){
 236:	735f 6474 756f      	0x756f6474735f
            product[j] = 0;
 23c:	0074                	addi	a3,sp,12
 23e:	635f 7476 656c      	0x656c7476635f
    for (i = 0; i < size_b; ++i){
 244:	006e                	c.slli	zero,0x1b
    array_equ(pola,a,size_a);
 246:	72636573          	csrrsi	a0,0x726,6
 24a:	7465                	lui	s0,0xffff9
 24c:	6b5f 7965 665f      	0x665f79656b5f
 252:	0071                	c.nop	28
 254:	665f 6c69 0065      	0x656c69665f
    for (i = 0; i < size_a; ++i){
 25a:	6572                	flw	fa0,28(sp)
 25c:	7574                	flw	fa3,108(a0)
 25e:	6e72                	flw	ft8,28(sp)
 260:	615f 6464 6572      	0x65726464615f
    array_equ(polb,b,size_b);
 266:	00317373          	csrrci	t1,fcsr,2
 26a:	6572                	flw	fa0,28(sp)
 26c:	7574                	flw	fa3,108(a0)
   for (i = 0; i < size_b; ++i){
 26e:	6e72                	flw	ft8,28(sp)
 270:	615f 6464 6572      	0x65726464615f
    if(star_mult == 1){
 276:	00327373          	csrrci	t1,fcsr,4
 27a:	6572                	flw	fa0,28(sp)
 27c:	7574                	flw	fa3,108(a0)
 27e:	6e72                	flw	ft8,28(sp)
 280:	615f 6464 6572      	0x65726464615f
 286:	00337373          	csrrci	t1,fcsr,6
        for (j = size_b -1; j >= 0; j = j-1){
 28a:	6572                	flw	fa0,28(sp)
 28c:	7574                	flw	fa3,108(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 28e:	6e72                	flw	ft8,28(sp)
 290:	615f 6464 6572      	0x65726464615f
            product[j] = 0;
 296:	00347373          	csrrci	t1,fcsr,8
            line[i][j] = 0;
 29a:	6e5f 6f69 7362      	0x73626f696e5f
        for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	7200                	flw	fs0,32(a2)
 2a2:	7465                	lui	s0,0xffff9
 2a4:	7275                	lui	tp,0xffffd
 2a6:	5f6e                	lw	t5,248(sp)
    for (i = 0; i < size_b; ++i){
 2a8:	6461                	lui	s0,0x18
 2aa:	7264                	flw	fs1,100(a2)
 2ac:	7365                	lui	t1,0xffff9
 2ae:	72003673          	csrrc	a2,0x720,zero
        for(j = 0; j < size_a + size_b -1; ++j){
 2b2:	7465                	lui	s0,0xffff9
            pola[i] = pola[i] + mod;
 2b4:	7275                	lui	tp,0xffffd
 2b6:	5f6e                	lw	t5,248(sp)
        while (pola[i] < 0){
 2b8:	6461                	lui	s0,0x18
 2ba:	7264                	flw	fs1,100(a2)
 2bc:	7365                	lui	t1,0xffff9
        pola[i] = pola[i] % mod;
 2be:	73003773          	csrrc	a4,0x730,zero
    for (i = 0; i < size_a; ++i){
 2c2:	6f68                	flw	fa0,92(a4)
 2c4:	7472                	flw	fs0,60(sp)
        pola[i] = pola[i] % mod;
 2c6:	7520                	flw	fs0,104(a0)
 2c8:	736e                	flw	ft6,248(sp)
    for (i = 0; i < size_a; ++i){
 2ca:	6769                	lui	a4,0x1a
            polb[i] = polb[i] + mod;
 2cc:	656e                	flw	fa0,216(sp)
 2ce:	2064                	fld	fs1,192(s0)
        while (polb[i] < 0){
 2d0:	6e69                	lui	t3,0x1a
 2d2:	0074                	addi	a3,sp,12
 2d4:	615f 6574 6978      	0x69786574615f
   for (i = 0; i < size_b; ++i){
 2da:	3074                	fld	fa3,224(s0)
 2dc:	5f00                	lw	s0,56(a4)
        polb[i] = polb[i] % mod;
 2de:	6e676973          	csrrsi	s2,0x6e6,14
   for (i = 0; i < size_b; ++i){
 2e2:	6c61                	lui	s8,0x18
    if(star_mult == 1){
 2e4:	625f 6675 5f00      	0x5f006675625f
        for(j = 0; j < size_a + size_b -1; ++j){
 2ea:	7361                	lui	t1,0xffff8
    for (i = 0; i < size_b; ++i){
 2ec:	6d697463          	bgeu	s2,s6,9b4 <ext_euclid+0x25c>
        for(i = 0; i < size_b; ++i){
 2f0:	5f65                	li	t5,-7
             array_add(product,line[i],size_a+size_b-1);
 2f2:	7562                	flw	fa0,56(sp)
 2f4:	0066                	c.slli	zero,0x19
 2f6:	725f 7365 6c75      	0x6c757365725f
        for(i = 0; i < size_b; ++i){
 2fc:	0074                	addi	a3,sp,12
 2fe:	5f5f 6377 0068      	0x6863775f5f
 304:	746e6977          	0x746e6977
    for(j = 0; j < size_a + size_b -1; ++j){
 308:	745f 6700 6e65      	0x6e656700745f
}
 30e:	7265                	lui	tp,0xffff9
 310:	7461                	lui	s0,0xffff8
 312:	5f65                	li	t5,-7
 314:	7379656b          	0x7379656b
 318:	5f00                	lw	s0,56(a4)
 31a:	625f 6975 746c      	0x746c6975625f
 320:	6e69                	lui	t3,0x1a
 322:	6d5f 6d65 7063      	0x70636d656d5f
 328:	0079                	c.nop	30
 32a:	6c5f 636f 006b      	0x6b636f6c5f
 330:	544e                	lw	s0,240(sp)
 332:	5552                	lw	a0,52(sp)
 334:	345f 5f38 6962      	0x69625f38345f
                line[size_b-1-j][k] = pola[k]*polb[j];
 33a:	4d74                	lw	a3,92(a0)
 33c:	632e                	flw	ft6,200(sp)
 33e:	7000                	flw	fs0,32(s0)
 340:	6f72                	flw	ft10,28(sp)
 342:	7564                	flw	fs1,108(a0)
 344:	00327463          	bgeu	tp,gp,34c <polymult+0x180>
 348:	7865                	lui	a6,0xffff9
 34a:	5f74                	lw	a3,124(a4)
 34c:	7565                	lui	a0,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 34e:	64696c63          	bltu	s2,t1,9a6 <ext_euclid+0x24e>
        for (j = size_b -1; j >= 0; j = j-1){
 352:	5f00                	lw	s0,56(a4)
 354:	74697277          	0x74697277
 358:	0065                	c.nop	25
            for (k = size_a-1; k >= 0; k = k-1 ){
 35a:	5f5f 6d74 795f      	0x795f6d745f5f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 360:	6165                	addi	sp,sp,112
 362:	0072                	c.slli	zero,0x1c
 364:	6f70                	flw	fa2,92(a4)
 366:	626c                	flw	fa1,68(a2)
 368:	7200                	flw	fs0,32(a2)
 36a:	6e61                	lui	t3,0x18
 36c:	6f64                	flw	fs1,92(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 36e:	5f6d                	li	t5,-5
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 370:	6176                	flw	ft2,92(sp)
 372:	006c                	addi	a1,sp,12
 374:	6e5f 616d 6c6c      	0x6c6c616d6e5f
        for (j = size_b -1; j >= 0; j = j-1){
 37a:	6c00636f          	jal	t1,6a3a <_stack_len+0x2a3a>
 37e:	20676e6f          	jal	t3,76584 <_stack_start+0x66584>
            line[i][j] = line[i][j] % mod;
 382:	6f64                	flw	fs1,92(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
 384:	6275                	lui	tp,0x1d
 386:	656c                	flw	fa1,76(a0)
            line[i][j] = line[i][j] % mod;
 388:	5f00                	lw	s0,56(a4)
 38a:	656e                	flw	fa0,216(sp)
 38c:	7478                	flw	fa4,108(s0)
 38e:	0066                	c.slli	zero,0x19
        for(j = 0; j < size_a + size_b -1; ++j){
 390:	7261                	lui	tp,0xffff8
 392:	6172                	flw	ft2,28(sp)
    for (i = 0; i < size_b; ++i){
 394:	5f79                	li	t5,-2
 396:	7165                	addi	sp,sp,-400
 398:	0075                	c.nop	29
 39a:	656d                	lui	a0,0x1b
        for(j = 0; j < size_a + size_b -1; ++j){
 39c:	67617373          	csrrci	t1,0x676,2
             array_add(product,line[i],size_a+size_b-1);
 3a0:	0065                	c.nop	25
 3a2:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
        for(i = 0; i < size_b; ++i){
 3a8:	72006e6f          	jal	t3,6ac8 <_stack_len+0x2ac8>
 3ac:	7465                	lui	s0,0xffff9
        product[j] = product[j] % mod;
 3ae:	7275                	lui	tp,0xffffd
    for(j = 0; j < size_a + size_b -1; ++j){
 3b0:	5f6e                	lw	t5,248(sp)
 3b2:	6461                	lui	s0,0x18
        product[j] = product[j] % mod;
 3b4:	7264                	flw	fs1,100(a2)
 3b6:	7365                	lui	t1,0xffff9
 3b8:	5f003573          	csrrc	a0,0x5f0,zero
    for(j = 0; j < size_a + size_b -1; ++j){
 3bc:	7461                	lui	s0,0xffff8
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3be:	7865                	lui	a6,0xffff9
    int line[size_b][size_a + size_b];
 3c0:	7469                	lui	s0,0xffffa
 3c2:	7300                	flw	fs0,32(a4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3c4:	6275                	lui	tp,0x1d
 3c6:	6174706f          	j	481dc <_stack_start+0x381dc>
 3ca:	6772                	flw	fa4,28(sp)
 3cc:	5f00                	lw	s0,56(a4)
    int line[size_b][size_a + size_b];
 3ce:	735f 6964 6964      	0x69646964735f
 3d4:	696e                	flw	fs2,216(sp)
 3d6:	0074                	addi	a3,sp,12
 3d8:	6f5f 6666 745f      	0x745f66666f5f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3de:	4500                	lw	s0,8(a0)
 3e0:	636e                	flw	ft6,216(sp)
 3e2:	4d5f 7365 6173      	0x617373654d5f
 3e8:	63006567          	0x63006567
    int line[size_b][size_a + size_b];
 3ec:	72746e6f          	jal	t3,47312 <_stack_start+0x37312>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3f0:	00526c6f          	jal	s8,26bf4 <_stack_start+0x16bf4>
    int line[size_b][size_a + size_b];
 3f4:	665f 6572 6c65      	0x6c656572665f
    int pola[size_a];
 3fa:	7369                	lui	t1,0xffffa
 3fc:	0074                	addi	a3,sp,12
 3fe:	6972                	flw	fs2,28(sp)
    int line[size_b][size_a + size_b];
 400:	676e                	flw	fa4,216(sp)
    int pola[size_a];
 402:	705f 6c6f 0079      	0x796c6f705f
    int polb[size_b];
 408:	4c5f 434f 5f4b      	0x5f4b434f4c5f
 40e:	4552                	lw	a0,20(sp)
 410:	53525543          	fmadd.d	fa0,ft4,fs5,fa0,unknown
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 414:	5649                	li	a2,-14
    int line[size_b][size_a + size_b];
 416:	5f45                	li	t5,-15
 418:	0054                	addi	a3,sp,4
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 41a:	6974                	flw	fa3,84(a0)
    int pola[size_a];
 41c:	315f 7400 5f69      	0x5f697400315f
    for (i = 0; i < size_b; ++i){
 422:	0032                	c.slli	zero,0xc
 424:	6e75                	lui	t3,0x1d
 426:	6e676973          	csrrsi	s2,0x6e6,14
            product2[j] = 0;
 42a:	6465                	lui	s0,0x19
 42c:	6320                	flw	fs0,64(a4)
 42e:	6168                	flw	fa0,68(a0)
    for (i = 0; i < size_b; ++i){
 430:	0072                	c.slli	zero,0x1c
 432:	6971                	lui	s2,0x1c
    array_equ(pola,a,size_a);
 434:	315f 5f00 656e      	0x656e5f00315f
 43a:	685f0077          	0x685f0077
 43e:	655f 7272 6f6e      	0x6f6e7272655f
    array_equ(polb,b,size_b);
 444:	7300                	flw	fs0,32(a4)
 446:	6f68                	flw	fa0,92(a4)
 448:	7472                	flw	fs0,60(sp)
 44a:	6920                	flw	fs0,80(a0)
    if(star_mult == 1){
 44c:	746e                	flw	fs0,248(sp)
 44e:	5f00                	lw	s0,56(a4)
 450:	745f 5f6d 6479      	0x64795f6d745f
 456:	7961                	lui	s2,0xffff8
 458:	5f00                	lw	s0,56(a4)
 45a:	735f 7562 0066      	0x667562735f
        for (j = size_b -1; j >= 0; j = j-1){
 460:	665f 616c 7367      	0x7367616c665f
            product2[j] = 0;
 466:	0032                	c.slli	zero,0xc
 468:	695f 626f 0073      	0x73626f695f
            line[i][j] = 0;
 46e:	5f5f 4946 454c      	0x454c49465f5f
        for(j = 0; j < size_a + size_b -1; ++j){
 474:	5f00                	lw	s0,56(a4)
 476:	626d                	lui	tp,0x1b
 478:	74617473          	csrrci	s0,0x746,2
    for (i = 0; i < size_b; ++i){
 47c:	5f65                	li	t5,-7
 47e:	0074                	addi	a3,sp,12
 480:	5f5f 4673 4c49      	0x4c4946735f5f
        for(j = 0; j < size_a + size_b -1; ++j){
 486:	0045                	c.nop	17
                line[size_b-1-j][k] = pola[k]*polb[j];
 488:	6d5f 7362 6174      	0x617473626d5f
 48e:	6574                	flw	fa3,76(a0)
 490:	5f00                	lw	s0,56(a4)
 492:	6172                	flw	ft2,28(sp)
 494:	646e                	flw	fs0,216(sp)
 496:	6e5f 7865 0074      	0x7478656e5f
 49c:	6d5f 6c62 6e65      	0x6e656c626d5f
            for (k = size_a-1; k >= 0; k = k-1 ){
 4a2:	735f 6174 6574      	0x65746174735f
        for (j = size_b -1; j >= 0; j = j-1){
 4a8:	5f00                	lw	s0,56(a4)
 4aa:	6e69                	lui	t3,0x1a
 4ac:	695f0063          	beq	t5,s5,b2c <generate_keys+0x126>
        array_add(product2,line[i],size_a+size_b-1);
 4b0:	646e                	flw	fs0,216(sp)
 4b2:	2f00                	fld	fs0,24(a4)
 4b4:	6f68                	flw	fa0,92(a4)
 4b6:	656d                	lui	a0,0x1b
    for(i=0;i<size_b;++i){
 4b8:	706f742f          	0x706f742f
}
 4bc:	6c61                	lui	s8,0x18
 4be:	65442f63          	0x65442f63
 4c2:	6f746b73          	csrrsi	s6,0x6f7,8
 4c6:	2f70                	fld	fa2,216(a4)
 4c8:	68746967          	0x68746967
 4cc:	6275                	lui	tp,0x1d
 4ce:	6e65732f          	0x6e65732f
 4d2:	6f69                	lui	t5,0x1a
 4d4:	5f72                	lw	t5,60(sp)
 4d6:	7270                	flw	fa2,100(a2)
 4d8:	63656a6f          	jal	s4,56b0e <_stack_start+0x46b0e>
 4dc:	2f74                	fld	fa3,216(a4)
 4de:	6f2f7773          	csrrci	a4,0x6f2,30
 4e2:	636c                	flw	fa1,68(a4)
 4e4:	6d75                	lui	s10,0x1d
            for (k = size_a-1; k >= 0; k = k-1 ){
 4e6:	656c                	flw	fa1,76(a0)
 4e8:	2f72                	fld	ft10,280(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 4ea:	2e36                	fld	ft8,328(sp)
 4ec:	6461                	lui	s0,0x18
 4ee:	2b64                	fld	fs1,208(a4)
 4f0:	7165                	addi	sp,sp,-400
 4f2:	0075                	c.nop	29
 4f4:	5f5f 6c63 6165      	0x61656c635f5f
            for (k = size_a-1; k >= 0; k = k-1 ){
 4fa:	756e                	flw	fa0,248(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 4fc:	0070                	addi	a2,sp,12
 4fe:	755f 736e 6570      	0x6570736e755f
            for (k = size_a-1; k >= 0; k = k-1 ){
 504:	69666963          	bltu	a2,s6,b96 <generate_keys+0x190>
        for (j = size_b -1; j >= 0; j = j-1){
 508:	6465                	lui	s0,0x19
 50a:	6c5f 636f 6c61      	0x6c61636f6c5f
        array_add(product2,line[i],size_a+size_b-1);
 510:	5f65                	li	t5,-7
 512:	6e69                	lui	t3,0x1a
 514:	6f66                	flw	ft10,88(sp)
    for(i=0;i<size_b;++i){
 516:	5f00                	lw	s0,56(a4)
 518:	616d                	addi	sp,sp,240
 51a:	7778                	flw	fa4,108(a4)
    int v[size_N];
 51c:	7364                	flw	fs1,100(a4)
 51e:	5f00                	lw	s0,56(a4)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 520:	6572                	flw	fa0,28(sp)
    int v[size_N];
 522:	6e65                	lui	t3,0x19
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 524:	0074                	addi	a3,sp,12
 526:	72617473          	csrrci	s0,0x726,2
 52a:	6d5f 6c75 0074      	0x746c756d5f
 530:	735f 6565 0064      	0x646565735f
 536:	6972                	flw	fs2,28(sp)
 538:	325f 5f00 635f      	0x635f5f00325f
 53e:	746e756f          	jal	a0,e7c84 <_stack_start+0xd7c84>
    int v[size_N];
 542:	5f00                	lw	s0,56(a4)
 544:	765f 6c61 6575      	0x65756c61765f
    int q[size_N];
 54a:	5f00                	lw	s0,56(a4)
 54c:	6b656573          	csrrsi	a0,0x6b6,10
    int num_temp[size_N];
 550:	5f00                	lw	s0,56(a4)
    int denum_temp[size_D];
 552:	7066                	flw	ft0,120(sp)
 554:	745f736f          	jal	t1,f8498 <_stack_start+0xe8498>
    int num_temp[size_N];
 558:	6c00                	flw	fs0,24(s0)
    int denum_temp[size_D];
 55a:	6e65                	lui	t3,0x19
 55c:	00687467          	0x687467
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 560:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
    int v[size_N];
 566:	6e69                	lui	t3,0x1a
    array_equ(num_temp,num,size_N);
 568:	7000                	flw	fs0,32(s0)
 56a:	6275                	lui	tp,0x1d
 56c:	696c                	flw	fa1,84(a0)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 56e:	656b5f63          	bge	s6,s6,bcc <generate_keys+0x1c6>
    int denum_temp[size_D];
 572:	0079                	c.nop	30
 574:	7261                	lui	tp,0xffff8
    array_equ(num_temp,num,size_N);
 576:	6172                	flw	ft2,28(sp)
    int denum_temp[size_D];
 578:	5f79                	li	t5,-2
    for (i = 0; i < size_N; ++i){
 57a:	6461                	lui	s0,0x18
 57c:	0064                	addi	s1,sp,12
 57e:	735f 7274 6f74      	0x6f747274735f
    array_equ(denum_temp,denum,size_D);
 584:	616c5f6b          	0x616c5f6b
 588:	5f007473          	csrrci	s0,0x5f0,0
    for (i = 0; i < size_D; ++i) {
 58c:	6e66                	flw	ft8,88(sp)
 58e:	7974                	flw	fa3,116(a0)
 590:	6570                	flw	fa2,76(a0)
 592:	65730073          	0x65730073
    for (i = 0; i < size_N; ++i){
 596:	74657263          	bgeu	a0,t1,cda <generate_keys+0x2d4>
    for (i = size_D-1; i >= 0; i = i-1){
 59a:	6b5f 7965 665f      	0x665f79656b5f
 5a0:	0070                	addi	a2,sp,12
 5a2:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
    for (i = 0; i < size_N; ++i){
 5a8:	69720067          	jr	1687(tp) # 0 <__DYNAMIC>
    for (u = 0; u < mod; ++u){
 5ac:	315f 5f00 6567      	0x65675f00315f
 5b2:	6474                	flw	fa3,76(s0)
            num_temp[i] = num_temp[i] + mod;
 5b4:	7461                	lui	s0,0xffff8
 5b6:	5f65                	li	t5,-7
        while (num_temp[i] < 0) {
 5b8:	7265                	lui	tp,0xffff9
 5ba:	0072                	c.slli	zero,0x1c
 5bc:	675f 6f6c 6162      	0x61626f6c675f
    for (i = 0; i < size_N; ++i){
 5c2:	5f6c                	lw	a1,124(a4)
 5c4:	6d69                	lui	s10,0x1a
        num_temp[i] = num_temp[i] % mod;
 5c6:	7570                	flw	fa2,108(a0)
 5c8:	6572                	flw	fa0,28(sp)
    for (i = 0; i < size_N; ++i){
 5ca:	705f 7274 4700      	0x47007274705f
        while (denum_temp[i] < 0) {
 5d0:	554e                	lw	a0,240(sp)
 5d2:	4320                	lw	s0,64(a4)
 5d4:	3731                	jal	4e0 <polymult2+0x122>
        denum_temp[i] = denum_temp[i] % mod;
 5d6:	3920                	fld	fs0,112(a0)
 5d8:	322e                	fld	ft4,232(sp)
    for (i = 0; i < size_D; ++i) {
 5da:	302e                	fld	ft0,232(sp)
 5dc:	2d20                	fld	fs0,88(a0)
        denum_temp[i] = denum_temp[i] % mod;
 5de:	616d                	addi	sp,sp,240
 5e0:	6372                	flw	ft6,28(sp)
    for (i = 0; i < size_D; ++i) {
 5e2:	3d68                	fld	fa0,248(a0)
        q[i] = 0;
 5e4:	7672                	flw	fa2,60(sp)
 5e6:	6d693233          	0x6d693233
 5ea:	6d2d2063          	0x6d2d2063
 5ee:	6261                	lui	tp,0x18
 5f0:	3d69                	jal	48a <polymult2+0xcc>
        v[i] = 0;
 5f2:	6c69                	lui	s8,0x1a
 5f4:	3370                	fld	fa2,224(a4)
    for (i = 0; i < size_N; ++i){
 5f6:	2032                	fld	ft0,264(sp)
 5f8:	6d2d                	lui	s10,0xb
        if( denum_temp[i] != 0 )
 5fa:	646f6d63          	bltu	t5,t1,c54 <generate_keys+0x24e>
    for (i = size_D-1; i >= 0; i = i-1){
 5fe:	6c65                	lui	s8,0x19
        if ( (b_N*u)%mod == 1 )
 600:	6d3d                	lui	s10,0xf
 602:	6465                	lui	s0,0x19
 604:	6e61                	lui	t3,0x18
 606:	2079                	jal	694 <polydiv+0x178>
 608:	6d2d                	lui	s10,0xb
    for (u = 0; u < mod; ++u){
 60a:	7574                	flw	fa3,108(a0)
 60c:	656e                	flw	fa0,216(sp)
        if( num_temp[i] != 0 )
 60e:	723d                	lui	tp,0xfffef
    for (i = size_N-1; i >= 0; i = i-1){
 610:	656b636f          	jal	t1,b6c66 <_stack_start+0xa6c66>
 614:	2074                	fld	fa3,192(s0)
 616:	672d                	lui	a4,0xb
 618:	2d20                	fld	fs0,88(a0)
 61a:	2d20734f          	0x2d20734f
    while (d >= d2){
 61e:	7666                	flw	fa2,120(sp)
 620:	7369                	lui	t1,0xffffa
     array_equ(result,q,size_N);
 622:	6269                	lui	tp,0x1a
 624:	6c69                	lui	s8,0x1a
 626:	7469                	lui	s0,0xffffa
 628:	3d79                	jal	4c6 <polymult2+0x108>
 62a:	6968                	flw	fa0,84(a0)
 62c:	6464                	flw	fs1,76(s0)
 62e:	6e65                	lui	t3,0x19
    for(i = size_N; i < (2*size_N); ++i){
 630:	5f00                	lw	s0,56(a4)
 632:	6e75                	lui	t3,0x1d
        result[i] = num_temp[i-size_N];
 634:	7375                	lui	t1,0xffffd
 636:	6465                	lui	s0,0x19
 638:	725f 6e61 0064      	0x646e61725f
    for(i = size_N; i < (2*size_N); ++i){
 63e:	696c                	flw	fa1,84(a0)
}
 640:	656e                	flw	fa0,216(sp)
 642:	5f00                	lw	s0,56(a4)
 644:	00736477          	0x736477
 648:	5f5f 6d74 775f      	0x775f6d745f5f
 64e:	6164                	flw	fs1,68(a0)
 650:	0079                	c.nop	30
 652:	675f 756c 0065      	0x65756c675f
 658:	6e69                	lui	t3,0x1a
 65a:	5f727473          	csrrci	s0,0x5f7,4
 65e:	7165                	addi	sp,sp,-400
 660:	0075                	c.nop	29
 662:	746e                	flw	fs0,248(sp)
 664:	7572                	flw	fa0,60(sp)
 666:	655f 636e 7279      	0x7279636e655f
        v[(d-d2)] = u*r_d;
 66c:	7470                	flw	fa2,108(s0)
 66e:	5f00                	lw	s0,56(a4)
 670:	7a697373          	csrrci	t1,0x7a6,18
 674:	5f65                	li	t5,-7
 676:	0074                	addi	a3,sp,12
        for (i = 0; i < size_N; ++i){
 678:	6c5f 3436 5f61      	0x5f6134366c5f
 67e:	7562                	flw	fa0,56(sp)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 680:	0066                	c.slli	zero,0x19
 682:	6564                	flw	fs1,76(a0)
 684:	756e                	flw	fa0,248(sp)
 686:	006d                	c.nop	27
 688:	735f 6769 665f      	0x665f6769735f
        for (i = 0; i < size_N; ++i){
 68e:	6e75                	lui	t3,0x1d
 690:	6e5f0063          	beq	t5,t0,d70 <ntru_encyrpt+0x4c>
 694:	7562                	flw	fa0,56(sp)
 696:	0066                	c.slli	zero,0x19
        for (i = 0; i < size_N; ++i){
 698:	755f 756e 6573      	0x6573756e755f
 69e:	0064                	addi	s1,sp,12
        for (i = 0; i < size_N; ++i){
 6a0:	6f70                	flw	fa2,92(a4)
 6a2:	796c                	flw	fa1,116(a0)
 6a4:	0052                	c.slli	zero,0x14
        array_add(q, v, size_N);
 6a6:	657a6973          	csrrsi	s2,0x657,20
 6aa:	445f 5f00 745f      	0x745f5f00445f
        for(i = 0; i < size_N; ++i){
 6b0:	5f6d                	li	t5,-5
 6b2:	7369                	lui	t1,0xffffa
 6b4:	7364                	flw	fs1,100(a4)
        for (i = size_N-1; i >= 0; i = i-1){
 6b6:	0074                	addi	a3,sp,12
 6b8:	6c5f 636f 6c61      	0x6c61636f6c5f
 6be:	6974                	flw	fa3,84(a0)
 6c0:	656d                	lui	a0,0x1b
 6c2:	625f 6675 5f00      	0x5f006675625f
            v[i] = v[i] % mod;
 6c8:	736f6c63          	bltu	t5,s6,e00 <ntru_deceypt+0x30>
        for (i = 0; i < size_N; ++i){
 6cc:	0065                	c.nop	25
            v[i] = v[i] % mod;
 6ce:	725f 3834 5f00      	0x5f003834725f
 6d4:	626d                	lui	tp,0x1b
        for (i = 0; i < size_N; ++i){
 6d6:	6f74                	flw	fa3,92(a4)
                product[i] = product[i] + mod;
 6d8:	735f6377          	0x735f6377
            while (product[i] < 0) {
 6dc:	6174                	flw	fa3,68(a0)
 6de:	6574                	flw	fa3,76(a0)
 6e0:	5f00                	lw	s0,56(a4)
            product[i] = product[i] % mod;
 6e2:	3570                	fld	fa2,232(a0)
 6e4:	616d0073          	0x616d0073
        for (i = 0; i < size_N; ++i){
 6e8:	6e69                	lui	t3,0x1a
            product[i] = product[i] % mod;
 6ea:	5f00                	lw	s0,56(a4)
 6ec:	6f6c                	flw	fa1,92(a4)
        for (i = 0; i < size_N; ++i){
 6ee:	656c6163          	bltu	s8,s6,d30 <ntru_encyrpt+0xc>
            num_temp[i] = num_temp[i] - product[i];
 6f2:	5f00                	lw	s0,56(a4)
 6f4:	745f 5f6d 646d      	0x646d5f6d745f
        for (i = 0; i < size_N; ++i){
 6fa:	7961                	lui	s2,0xffff8
 6fc:	7300                	flw	fs0,32(a4)
            num_temp[i] = num_temp[i] - product[i];
 6fe:	7a69                	lui	s4,0xffffa
 700:	5f65                	li	t5,-7
 702:	0061                	c.nop	24
        for (i = 0; i < size_N; ++i){
 704:	657a6973          	csrrsi	s2,0x657,20
                num_temp[i] = num_temp[i] + mod;
 708:	625f 6300 7472      	0x74726300625f
            while (num_temp[i] < 0){
 70e:	2e30                	fld	fa2,88(a2)
            num_temp[i] = num_temp[i] % mod;
 710:	682f0053          	0x682f0053
        for (i = 0; i < size_N; ++i){
 714:	2f656d6f          	jal	s10,56a0a <_stack_start+0x46a0a>
            num_temp[i] = num_temp[i] % mod;
 718:	6f74                	flw	fa3,92(a4)
 71a:	6170                	flw	fa2,68(a0)
        for (i = 0; i < size_N; ++i){
 71c:	636c                	flw	fa1,68(a4)
            q[i] = q[i] % mod;
 71e:	7365442f          	0x7365442f
        for(i = 0; i < size_N; ++i){
 722:	706f746b          	0x706f746b
            q[i] = q[i] % mod;
 726:	6f72702f          	0x6f72702f
 72a:	656a                	flw	fa0,152(sp)
        for(i = 0; i < size_N; ++i){
 72c:	656c                	flw	fa1,76(a0)
            if( num_temp[i] != 0 )
 72e:	2f72                	fld	ft10,280(sp)
        for (i = size_N-1; i >= 0; i = i-1){
 730:	75636c6f          	jal	s8,36e86 <_stack_start+0x26e86>
            v[i] = 0;
 734:	2f6d                	jal	eee <reset_handler+0x2e>
 736:	2e36                	fld	ft8,328(sp)
 738:	6461                	lui	s0,0x18
 73a:	2b64                	fld	fs1,208(a4)
 73c:	7165                	addi	sp,sp,-400
        for (i = 0; i < size_N; ++i){
 73e:	0075                	c.nop	29
 740:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
 744:	5341                	li	t1,-16
        result[i] = num_temp[i-size_N];
 746:	3220                	fld	fs0,96(a2)
 748:	332e                	fld	ft6,232(sp)
 74a:	0032                	c.slli	zero,0xc

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <polydiv+0x164>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	009e                	slli	ra,ra,0x7
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0130                	addi	a2,sp,136
  3a:	0000                	unimp
  3c:	0006                	c.slli	zero,0x1
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	0136                	slli	sp,sp,0xd
  4a:	0000                	unimp
  4c:	0096                	slli	ra,ra,0x5
  4e:	0000                	unimp
  50:	0058                	addi	a4,sp,4
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	01cc                	addi	a1,sp,196
  5a:	0000                	unimp
  5c:	01f2                	slli	gp,gp,0x1c
  5e:	0000                	unimp
  60:	0e42                	slli	t3,t3,0x10
  62:	4250                	lw	a2,4(a2)
  64:	0492                	slli	s1,s1,0x4
  66:	9346                	add	t1,t1,a7
  68:	4805                	li	a6,1
  6a:	0694                	addi	a3,sp,832
  6c:	0c9a                	slli	s9,s9,0x6
  6e:	885c                	0x885c
  70:	8902                	jr	s2
  72:	96079503          	lh	a0,-1696(a5)
  76:	9708                	0x9708
  78:	9809                	andi	s0,s0,-30
  7a:	990a                	add	s2,s2,sp
  jal x0, default_exc_handler
  7c:	420d9b0b          	0x420d9b0b
  jal x0, reset_handler
  80:	080c                	addi	a1,sp,16
  82:	4200                	lw	s0,0(a2)
  jal x0, default_exc_handler
  84:	0181                	addi	gp,gp,0
  86:	0a011203          	lh	tp,160(sp)
  jal x0, default_exc_handler
  8a:	020c                	addi	a1,sp,256
    asm volatile(
  8c:	4250                	lw	a2,4(a2)
  8e:	42c1                	li	t0,16
}
  90:	42c8                	lw	a0,4(a3)
    switch(length%3) {
  92:	42c9                	li	t0,18
  94:	42d2                	lw	t0,20(sp)
  96:	42d442d3          	0x42d442d3
  9a:	42d5                	li	t0,21
  9c:	42d6                	lw	t0,84(sp)
  9e:	42d842d7          	0x42d842d7
  a2:	42d9                	li	t0,22
  a4:	42da                	lw	t0,148(sp)
            for (i = 0; i < (length / 3); i++) {
  a6:	000e4adb          	0xe4adb
  aa:	0b42                	slli	s6,s6,0x10
  ac:	0058                	addi	a4,sp,4
  ae:	0000                	unimp
  b0:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	0000                	unimp
  b4:	03be                	slli	t2,t2,0xf
  b6:	0000                	unimp
  b8:	015e                	slli	sp,sp,0x17
  ba:	0000                	unimp
  bc:	0e42                	slli	t3,t3,0x10
  be:	4650                	lw	a2,12(a2)
  c0:	0896                	slli	a7,a7,0x5
            a1[length-1] = a1[length-1] + a2[length-1];
  c2:	9348                	0x9348
  c4:	9705                	srai	a4,a4,0x21
  c6:	6209                	lui	tp,0x2
  c8:	0288                	addi	a0,sp,320
  ca:	0389                	addi	t2,t2,2
  cc:	0492                	slli	s1,s1,0x4
  ce:	0694                	addi	a3,sp,832
  d0:	0795                	addi	a5,a5,5
  d2:	0a98                	addi	a4,sp,336
  d4:	0b99                	addi	s7,s7,6
  d6:	0c9a                	slli	s9,s9,0x6
            for (i = 0; i < ((length-1) / 3); i++) {
  d8:	01810d9b          	0x1810d9b
  dc:	0c42                	slli	s8,s8,0x10
  de:	0008                	0x8
  e0:	ce02                	sw	zero,28(sp)
  e2:	0c0a                	slli	s8,s8,0x2
  e4:	5002                	0x5002
  e6:	c142                	sw	a6,128(sp)
            a1[length-1] = a1[length-1] + a2[length-1];
  e8:	c842                	sw	a6,16(sp)
            a1[length-2] = a1[length-2] + a2[length-2];
  ea:	c942                	sw	a6,144(sp)
  ec:	d242                	sw	a6,36(sp)
  ee:	d342                	sw	a6,164(sp)
  f0:	d442                	sw	a6,40(sp)
  f2:	d542                	sw	a6,168(sp)
  f4:	d642                	sw	a6,44(sp)
  f6:	d742                	sw	a6,172(sp)
} //end of function
  f8:	d842                	sw	a6,48(sp)
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  fa:	d942                	sw	a6,176(sp)
  fc:	da42                	sw	a6,52(sp)
    asm volatile(
  fe:	db42                	sw	a6,180(sp)
 100:	0e4a                	slli	t3,t3,0x12
 102:	4200                	lw	s0,0(a2)
 104:	0000000b          	0xb
            for (i = 0; i < (length / 3); i++) {
 108:	0054                	addi	a3,sp,4
 10a:	0000                	unimp
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 10c:	0000                	unimp
 10e:	0000                	unimp
    asm volatile(
 110:	051c                	addi	a5,sp,640
 112:	0000                	unimp
 114:	023c                	addi	a5,sp,264
 116:	0000                	unimp
 118:	0e46                	slli	t3,t3,0x11
            for (i = 0; i < ((length-1) / 3); i++) {
 11a:	5e40                	lw	s0,60(a2)
 11c:	0288                	addi	a0,sp,320
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 11e:	0389                	addi	t2,t2,2
 120:	0492                	slli	s1,s1,0x4
    asm volatile(
 122:	06940593          	addi	a1,s0,105 # 18069 <_stack_start+0x8069>
 126:	0795                	addi	a5,a5,5
 128:	0896                	slli	a7,a7,0x5
 12a:	0a980997          	auipc	s3,0xa980
            for (i = 0; i < ((length-2) / 3); i++) {
 12e:	0b99                	addi	s7,s7,6
    asm volatile(
 130:	0c9a                	slli	s9,s9,0x6
 132:	01810d9b          	0x1810d9b
    switch(length%3) {
 136:	0c42                	slli	s8,s8,0x10
 138:	0008                	0x8
 13a:	0a010203          	lb	tp,160(sp)
 13e:	020c                	addi	a1,sp,256
 140:	4240                	lw	s0,4(a2)
 142:	42c1                	li	t0,16
 144:	42c8                	lw	a0,4(a3)
 146:	42c9                	li	t0,18
 148:	42d2                	lw	t0,20(sp)
            for (i = 0; i < (length / 3); i++) {
 14a:	42d442d3          	0x42d442d3
 14e:	42d5                	li	t0,21
 150:	42d6                	lw	t0,84(sp)
 152:	42d842d7          	0x42d842d7
            for (i = 0; i < ((length-2) / 3); i++) {
 156:	42d9                	li	t0,22
 158:	42da                	lw	t0,148(sp)
 15a:	000e4adb          	0xe4adb
 15e:	0b42                	slli	s6,s6,0x10
 160:	0054                	addi	a3,sp,4
 162:	0000                	unimp
 164:	0000                	unimp
            a1[length-1] = a2[length-1];
 166:	0000                	unimp
 168:	0758                	addi	a4,sp,900
 16a:	0000                	unimp
 16c:	02ae                	slli	t0,t0,0xb
 16e:	0000                	unimp
 170:	0e46                	slli	t3,t3,0x11
 172:	5e50                	lw	a2,60(a2)
 174:	0288                	addi	a0,sp,320
 176:	0389                	addi	t2,t2,2
            for (i = 0; i < ((length-1) / 3); i++) {
 178:	0492                	slli	s1,s1,0x4
 17a:	06940593          	addi	a1,s0,105
 17e:	0795                	addi	a5,a5,5
 180:	0896                	slli	a7,a7,0x5
 182:	0a980997          	auipc	s3,0xa980
 186:	0b99                	addi	s7,s7,6
            a1[length-1] = a2[length-1];
 188:	0c9a                	slli	s9,s9,0x6
            a1[length-2] = a2[length-2];
 18a:	01810d9b          	0x1810d9b
 18e:	0c42                	slli	s8,s8,0x10
 190:	0008                	0x8
 192:	0a015c03          	lhu	s8,160(sp)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 196:	020c                	addi	a1,sp,256
 198:	4250                	lw	a2,4(a2)
    asm volatile(
 19a:	42c1                	li	t0,16
 19c:	42c8                	lw	a0,4(a3)
 19e:	42c9                	li	t0,18
 1a0:	42d2                	lw	t0,20(sp)
 1a2:	42d442d3          	0x42d442d3
            for (i = 0; i < (length / 3); i++) {
 1a6:	42d5                	li	t0,21
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 1a8:	42d6                	lw	t0,84(sp)
 1aa:	42d842d7          	0x42d842d7
    asm volatile(
 1ae:	42d9                	li	t0,22
 1b0:	42da                	lw	t0,148(sp)
 1b2:	000e4adb          	0xe4adb
            for (i = 0; i < ((length-1) / 3); i++) {
 1b6:	0b42                	slli	s6,s6,0x10
 1b8:	0058                	addi	a4,sp,4
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 1ba:	0000                	unimp
 1bc:	0000                	unimp
    asm volatile(
 1be:	0000                	unimp
 1c0:	0a06                	slli	s4,s4,0x1
 1c2:	0000                	unimp
 1c4:	031e                	slli	t1,t1,0x7
 1c6:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
 1c8:	0e42                	slli	t3,t3,0x10
 1ca:	0480                	addi	s0,sp,576
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1cc:	814c                	0x814c
 1ce:	8801                	andi	s0,s0,0
 1d0:	8902                	jr	s2
 1d2:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
    int line[size_b][size_a + size_b];
 1d6:	7000                	flw	fs0,32(s0)
 1d8:	0492                	slli	s1,s1,0x4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1da:	06940593          	addi	a1,s0,105
    int line[size_b][size_a + size_b];
 1de:	0795                	addi	a5,a5,5
 1e0:	0896                	slli	a7,a7,0x5
 1e2:	0a980997          	auipc	s3,0xa980
 1e6:	0b990d9b          	0xb990d9b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1ea:	0c9a                	slli	s9,s9,0x6
 1ec:	0a01f403          	0xa01f403
 1f0:	020c                	addi	a1,sp,256
 1f2:	0480                	addi	s0,sp,576
 1f4:	c144                	sw	s1,4(a0)
 1f6:	c844                	sw	s1,20(s0)
 1f8:	c944                	sw	s1,20(a0)
 1fa:	d244                	sw	s1,36(a2)
 1fc:	d344                	sw	s1,36(a4)
 1fe:	d444                	sw	s1,44(s0)
 200:	d544                	sw	s1,44(a0)
    int line[size_b][size_a + size_b];
 202:	d644                	sw	s1,44(a2)
    int pola[size_a];
 204:	d744                	sw	s1,44(a4)
 206:	d844                	sw	s1,52(s0)
    int line[size_b][size_a + size_b];
 208:	d944                	sw	s1,52(a0)
    int pola[size_a];
 20a:	da44                	sw	s1,52(a2)
    int line[size_b][size_a + size_b];
 20c:	db44                	sw	s1,52(a4)
 20e:	0e4c                	addi	a1,sp,788
    int pola[size_a];
 210:	4200                	lw	s0,0(a2)
    int line[size_b][size_a + size_b];
 212:	0038000b          	0x38000b
    int pola[size_a];
 216:	0000                	unimp
    int polb[size_b];
 218:	0000                	unimp
 21a:	0000                	unimp
 21c:	0d24                	addi	s1,sp,664
    int pola[size_a];
 21e:	0000                	unimp
    int polb[size_b];
 220:	00ac                	addi	a1,sp,72
 222:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 224:	0e42                	slli	t3,t3,0x10
 226:	01e0                	addi	s0,sp,204
 228:	884c                	0x884c
    int line[size_b][size_a + size_b];
 22a:	8902                	jr	s2
 22c:	04924c03          	lbu	s8,73(tp) # 2049 <_min_stack+0x49>
    int pola[size_a];
 230:	815a0593          	addi	a1,s4,-2027 # ffff9815 <_stack_start+0xfffe9815>
    for (i = 0; i < size_b; ++i){
 234:	9401                	srai	s0,s0,0x20
 236:	9506                	add	a0,a0,ra
 238:	0a4a0207          	0xa4a0207
            product[j] = 0;
 23c:	42c1                	li	t0,16
 23e:	4ec8                	lw	a0,28(a3)
 240:	42c9                	li	t0,18
    for (i = 0; i < size_b; ++i){
 242:	42d2                	lw	t0,20(sp)
 244:	42d442d3          	0x42d442d3
    array_equ(pola,a,size_a);
 248:	42d5                	li	t0,21
 24a:	000e                	c.slli	zero,0x3
 24c:	0b42                	slli	s6,s6,0x10
 24e:	0000                	unimp
 250:	0044                	addi	s1,sp,4
 252:	0000                	unimp
 254:	0000                	unimp
    for (i = 0; i < size_a; ++i){
 256:	0000                	unimp
 258:	0dd0                	addi	a2,sp,724
 25a:	0000                	unimp
 25c:	00ec                	addi	a1,sp,76
 25e:	0000                	unimp
 260:	0e42                	slli	t3,t3,0x10
 262:	4430                	lw	a2,72(s0)
 264:	0288                	addi	a0,sp,320
    array_equ(polb,b,size_b);
 266:	0694                	addi	a3,sp,832
 268:	984a                	add	a6,a6,s2
 26a:	4c0a                	lw	s8,128(sp)
 26c:	924c0593          	addi	a1,s8,-1756
   for (i = 0; i < size_b; ++i){
 270:	9604                	0x9604
 272:	5a08                	lw	a0,48(a2)
 274:	0181                	addi	gp,gp,0
    if(star_mult == 1){
 276:	0389                	addi	t2,t2,2
 278:	0795                	addi	a5,a5,5
 27a:	52020997          	auipc	s3,0x52020
 27e:	c10a                	sw	sp,128(sp)
 280:	c842                	sw	a6,16(sp)
 282:	c94e                	sw	s3,144(sp)
 284:	d242                	sw	a6,36(sp)
 286:	d342                	sw	a6,164(sp)
 288:	d442                	sw	a6,40(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 28a:	d542                	sw	a6,168(sp)
 28c:	d642                	sw	a6,44(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 28e:	d742                	sw	a6,172(sp)
 290:	d842                	sw	a6,48(sp)
            product[j] = 0;
 292:	0e42                	slli	t3,t3,0x10
 294:	4200                	lw	s0,0(a2)
 296:	002c000b          	0x2c000b
            line[i][j] = 0;
 29a:	0000                	unimp
            product[j] = 0;
 29c:	0000                	unimp
 29e:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	10b8                	addi	a4,sp,104
 2a2:	0000                	unimp
 2a4:	0128                	addi	a0,sp,136
 2a6:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 2a8:	0e44                	addi	s1,sp,788
 2aa:	08b0                	addi	a2,sp,88
 2ac:	815e                	mv	sp,s7
 2ae:	8801                	andi	s0,s0,0
        for(j = 0; j < size_a + size_b -1; ++j){
 2b0:	8902                	jr	s2
 2b2:	03049203          	lh	tp,48(s1)
            pola[i] = pola[i] + mod;
 2b6:	00e8                	addi	a0,sp,76
        while (pola[i] < 0){
 2b8:	c10a                	sw	sp,128(sp)
 2ba:	c844                	sw	s1,20(s0)
 2bc:	c944                	sw	s1,20(a0)
        pola[i] = pola[i] % mod;
 2be:	d244                	sw	s1,36(a2)
 2c0:	0e46                	slli	t3,t3,0x11
    for (i = 0; i < size_a; ++i){
 2c2:	4200                	lw	s0,0(a2)
 2c4:	0000000b          	0xb


NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	4f70006f          	j	d72 <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	4f70006f          	j	d76 <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	4ef0006f          	j	d72 <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	4eb0006f          	j	d72 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_mod>:
////////////////CUSTOM INSTRUCTION SET///////////////


void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
      8c:	0cb5750b          	0xcb5750b

    );
    return;


}
      90:	8082                	ret

00000092 <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    for(i=0;i<(length/3);i++) {
      92:	478d                	li	a5,3
      94:	02f64633          	div	a2,a2,a5
    asm volatile(
      98:	46b1                	li	a3,12
    for(i=0;i<(length/3);i++) {
      9a:	4781                	li	a5,0
      9c:	00c7c363          	blt	a5,a2,a2 <array_mod+0x10>
        instr_mod((unsigned int*)&a1[3 * i], (unsigned int)mod);
    }

}
      a0:	8082                	ret
    asm volatile(
      a2:	02d78733          	mul	a4,a5,a3
      a6:	972a                	add	a4,a4,a0
      a8:	0cb7770b          	0xcb7770b
    for(i=0;i<(length/3);i++) {
      ac:	0785                	addi	a5,a5,1
      ae:	b7fd                	j	9c <array_mod+0xa>

000000b0 <polymult>:

/////////////////////////////////////////////////


int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b0:	715d                	addi	sp,sp,-80
      b2:	de4e                	sw	s3,60(sp)
      b4:	d462                	sw	s8,40(sp)
      b6:	00269993          	slli	s3,a3,0x2
      ba:	8c3a                	mv	s8,a4

    int line[size_b][size_a + size_b];
      bc:	00d58733          	add	a4,a1,a3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      c0:	dc52                	sw	s4,56(sp)
      c2:	d65e                	sw	s7,44(sp)
    int line[size_b][size_a + size_b];
      c4:	fff70a13          	addi	s4,a4,-1
      c8:	00271b93          	slli	s7,a4,0x2
      cc:	03370733          	mul	a4,a4,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d0:	c4a2                	sw	s0,72(sp)
      d2:	c2a6                	sw	s1,68(sp)
      d4:	0880                	addi	s0,sp,80
      d6:	c0ca                	sw	s2,64(sp)
      d8:	da56                	sw	s5,52(sp)
      da:	d85a                	sw	s6,48(sp)
      dc:	d266                	sw	s9,36(sp)
      de:	d06a                	sw	s10,32(sp)
      e0:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
      e2:	073d                	addi	a4,a4,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      e4:	c686                	sw	ra,76(sp)
    int line[size_b][size_a + size_b];
      e6:	9b41                	andi	a4,a4,-16
      e8:	40e10133          	sub	sp,sp,a4
    int i,j,k;
    int *return_address1;
    int pola[size_a];
      ec:	00259713          	slli	a4,a1,0x2
      f0:	073d                	addi	a4,a4,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      f2:	8936                	mv	s2,a3
    int line[size_b][size_a + size_b];
      f4:	fff68d13          	addi	s10,a3,-1
    int pola[size_a];
      f8:	9b41                	andi	a4,a4,-16
    int polb[size_b];
      fa:	00f98693          	addi	a3,s3,15
    int line[size_b][size_a + size_b];
      fe:	8d8a                	mv	s11,sp
    int polb[size_b];
     100:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
     102:	40e10133          	sub	sp,sp,a4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     106:	faf42c23          	sw	a5,-72(s0)
    int pola[size_a];
     10a:	8c8a                	mv	s9,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
     10c:	002bd793          	srli	a5,s7,0x2
    int polb[size_b];
     110:	40d10133          	sub	sp,sp,a3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     114:	8832                	mv	a6,a2
    int pola[size_a];
     116:	fff58b13          	addi	s6,a1,-1
    int polb[size_b];
     11a:	848a                	mv	s1,sp
            line[i][j] = 0;
     11c:	faf42e23          	sw	a5,-68(s0)
     120:	8aee                	mv	s5,s11
    for (i = 0; i < size_b; ++i){
     122:	88ee                	mv	a7,s11
     124:	4601                	li	a2,0
            product[j] = 0;
     126:	00001e97          	auipc	t4,0x1
     12a:	0eee8e93          	addi	t4,t4,238 # 1214 <_bss_start>
    for (i = 0; i < size_b; ++i){
     12e:	07264063          	blt	a2,s2,18e <polymult+0xde>
        }
    }

    // make mod calculations
    for (i = 0; i < size_a; ++i){
     132:	4681                	li	a3,0
     134:	06b6c063          	blt	a3,a1,194 <polymult+0xe4>
        pola[i] = a[i];
    }

	array_mod(pola,mod,size_a);
     138:	862e                	mv	a2,a1
     13a:	8566                	mv	a0,s9
     13c:	85e2                	mv	a1,s8
     13e:	fb042a23          	sw	a6,-76(s0)
     142:	3f81                	jal	92 <array_mod>

    for (i = 0; i < size_b; ++i){
     144:	fb442803          	lw	a6,-76(s0)
     148:	4681                	li	a3,0
     14a:	0526cf63          	blt	a3,s2,1a8 <polymult+0xf8>
        polb[i] = b[i];
    }

	array_mod(polb,mod,size_b);
     14e:	8526                	mv	a0,s1
     150:	864a                	mv	a2,s2
     152:	85e2                	mv	a1,s8
     154:	3f3d                	jal	92 <array_mod>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     156:	fb842783          	lw	a5,-72(s0)
     15a:	4685                	li	a3,1
     15c:	94ce                	add	s1,s1,s3
     15e:	04d78e63          	beq	a5,a3,1ba <polymult+0x10a>
     162:	19f1                	addi	s3,s3,-4
     164:	ffcb8593          	addi	a1,s7,-4
     168:	99ee                	add	s3,s3,s11
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     16a:	040d4b63          	bltz	s10,1c0 <polymult+0x110>
            for (k = size_a-1; k >= 0; k = k-1 ){
     16e:	86da                	mv	a3,s6
     170:	a8f1                	j	24c <polymult+0x19c>
            product[j] = 0;
     172:	00269e13          	slli	t3,a3,0x2
     176:	9e76                	add	t3,t3,t4
            line[i][j] = 0;
     178:	00032023          	sw	zero,0(t1)
            product[j] = 0;
     17c:	000e2023          	sw	zero,0(t3)
        for(j = 0; j < size_a + size_b -1; ++j){
     180:	0685                	addi	a3,a3,1
     182:	0311                	addi	t1,t1,4
     184:	ff46c7e3          	blt	a3,s4,172 <polymult+0xc2>
    for (i = 0; i < size_b; ++i){
     188:	0605                	addi	a2,a2,1
     18a:	98de                	add	a7,a7,s7
     18c:	b74d                	j	12e <polymult+0x7e>
     18e:	8346                	mv	t1,a7
        for(j = 0; j < size_a + size_b -1; ++j){
     190:	4681                	li	a3,0
     192:	bfcd                	j	184 <polymult+0xd4>
        pola[i] = a[i];
     194:	00269613          	slli	a2,a3,0x2
     198:	00cc88b3          	add	a7,s9,a2
     19c:	962a                	add	a2,a2,a0
     19e:	4210                	lw	a2,0(a2)
    for (i = 0; i < size_a; ++i){
     1a0:	0685                	addi	a3,a3,1
        pola[i] = a[i];
     1a2:	00c8a023          	sw	a2,0(a7)
    for (i = 0; i < size_a; ++i){
     1a6:	b779                	j	134 <polymult+0x84>
        polb[i] = b[i];
     1a8:	00269613          	slli	a2,a3,0x2
     1ac:	00c485b3          	add	a1,s1,a2
     1b0:	9642                	add	a2,a2,a6
     1b2:	4210                	lw	a2,0(a2)
    for (i = 0; i < size_b; ++i){
     1b4:	0685                	addi	a3,a3,1
        polb[i] = b[i];
     1b6:	c190                	sw	a2,0(a1)
    for (i = 0; i < size_b; ++i){
     1b8:	bf49                	j	14a <polymult+0x9a>
    if(star_mult == 1){
     1ba:	85ee                	mv	a1,s11
        for (j = size_b -1; j >= 0; j = j-1){
     1bc:	060d5a63          	bgez	s10,230 <polymult+0x180>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1c0:	4481                	li	s1,0
            }
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
     1c2:	0924cb63          	blt	s1,s2,258 <polymult+0x1a8>
     1c6:	00001697          	auipc	a3,0x1
     1ca:	04e68693          	addi	a3,a3,78 # 1214 <_bss_start>
        array_mod(line[i],mod,(size_a+size_b-1));
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
     1ce:	4701                	li	a4,0
     1d0:	0b474c63          	blt	a4,s4,288 <polymult+0x1d8>
            product[j] += line[i][j];
        }
    }

    //mod calculations
    array_mod(product,mod,size_a+size_b-1);
     1d4:	8652                	mv	a2,s4
     1d6:	85e2                	mv	a1,s8
     1d8:	00001517          	auipc	a0,0x1
     1dc:	03c50513          	addi	a0,a0,60 # 1214 <_bss_start>
     1e0:	3d4d                	jal	92 <array_mod>

    return_address1 = &product[0];

    return return_address1;
}
     1e2:	fb040113          	addi	sp,s0,-80
     1e6:	40b6                	lw	ra,76(sp)
     1e8:	4426                	lw	s0,72(sp)
     1ea:	4496                	lw	s1,68(sp)
     1ec:	4906                	lw	s2,64(sp)
     1ee:	59f2                	lw	s3,60(sp)
     1f0:	5a62                	lw	s4,56(sp)
     1f2:	5ad2                	lw	s5,52(sp)
     1f4:	5b42                	lw	s6,48(sp)
     1f6:	5bb2                	lw	s7,44(sp)
     1f8:	5c22                	lw	s8,40(sp)
     1fa:	5c92                	lw	s9,36(sp)
     1fc:	5d02                	lw	s10,32(sp)
     1fe:	4df2                	lw	s11,28(sp)
     200:	00001517          	auipc	a0,0x1
     204:	01450513          	addi	a0,a0,20 # 1214 <_bss_start>
     208:	6161                	addi	sp,sp,80
     20a:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     20c:	00269613          	slli	a2,a3,0x2
     210:	00c58533          	add	a0,a1,a2
     214:	9666                	add	a2,a2,s9
     216:	4210                	lw	a2,0(a2)
     218:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     21c:	16fd                	addi	a3,a3,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     21e:	03060633          	mul	a2,a2,a6
     222:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     224:	fe06d4e3          	bgez	a3,20c <polymult+0x15c>
        for (j = size_b -1; j >= 0; j = j-1){
     228:	1d7d                	addi	s10,s10,-1
     22a:	14f1                	addi	s1,s1,-4
     22c:	95de                	add	a1,a1,s7
     22e:	b779                	j	1bc <polymult+0x10c>
            for (k = size_a-1; k >= 0; k = k-1 ){
     230:	86da                	mv	a3,s6
     232:	bfcd                	j	224 <polymult+0x174>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     234:	00269613          	slli	a2,a3,0x2
     238:	00c98533          	add	a0,s3,a2
     23c:	9666                	add	a2,a2,s9
     23e:	4210                	lw	a2,0(a2)
     240:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     244:	16fd                	addi	a3,a3,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     246:	03060633          	mul	a2,a2,a6
     24a:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     24c:	fe06d4e3          	bgez	a3,234 <polymult+0x184>
        for (j = size_b -1; j >= 0; j = j-1){
     250:	1d7d                	addi	s10,s10,-1
     252:	14f1                	addi	s1,s1,-4
     254:	99ae                	add	s3,s3,a1
     256:	bf11                	j	16a <polymult+0xba>
        array_mod(line[i],mod,(size_a+size_b-1));
     258:	8556                	mv	a0,s5
     25a:	8652                	mv	a2,s4
     25c:	85e2                	mv	a1,s8
     25e:	3d15                	jal	92 <array_mod>
    for (i = 0; i < size_b; ++i){
     260:	0485                	addi	s1,s1,1
     262:	9ade                	add	s5,s5,s7
     264:	bfb9                	j	1c2 <polymult+0x112>
            product[j] += line[i][j];
     266:	fbc42783          	lw	a5,-68(s0)
     26a:	428c                	lw	a1,0(a3)
     26c:	02f607b3          	mul	a5,a2,a5
        for(i = 0; i < size_b; ++i){
     270:	0605                	addi	a2,a2,1
            product[j] += line[i][j];
     272:	97ba                	add	a5,a5,a4
     274:	078a                	slli	a5,a5,0x2
     276:	97ee                	add	a5,a5,s11
     278:	439c                	lw	a5,0(a5)
     27a:	97ae                	add	a5,a5,a1
     27c:	c29c                	sw	a5,0(a3)
        for(i = 0; i < size_b; ++i){
     27e:	ff2644e3          	blt	a2,s2,266 <polymult+0x1b6>
    for(j = 0; j < size_a + size_b -1; ++j){
     282:	0705                	addi	a4,a4,1
     284:	0691                	addi	a3,a3,4
     286:	b7a9                	j	1d0 <polymult+0x120>
        for(i = 0; i < size_b; ++i){
     288:	4601                	li	a2,0
     28a:	bfd5                	j	27e <polymult+0x1ce>

0000028c <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
   

    int line[size_b][size_a + size_b];
     28c:	00d587b3          	add	a5,a1,a3
     290:	00269813          	slli	a6,a3,0x2
     294:	00279313          	slli	t1,a5,0x2
     298:	fff78e93          	addi	t4,a5,-1
     29c:	030787b3          	mul	a5,a5,a6
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2a0:	1101                	addi	sp,sp,-32
     2a2:	ce22                	sw	s0,28(sp)
     2a4:	cc26                	sw	s1,24(sp)
     2a6:	ca4a                	sw	s2,20(sp)
     2a8:	c84e                	sw	s3,16(sp)
     2aa:	c25a                	sw	s6,4(sp)
     2ac:	c652                	sw	s4,12(sp)
     2ae:	c456                	sw	s5,8(sp)
     2b0:	1000                	addi	s0,sp,32
    int line[size_b][size_a + size_b];
     2b2:	07bd                	addi	a5,a5,15
     2b4:	9bc1                	andi	a5,a5,-16
     2b6:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     2ba:	00259793          	slli	a5,a1,0x2
     2be:	07bd                	addi	a5,a5,15
     2c0:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     2c2:	8e0a                	mv	t3,sp
    int pola[size_a];
     2c4:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     2c8:	00f80793          	addi	a5,a6,15
     2cc:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     2ce:	828a                	mv	t0,sp
    int polb[size_b];
     2d0:	40f10133          	sub	sp,sp,a5
    int line[size_b][size_a + size_b];
     2d4:	fff68893          	addi	a7,a3,-1
    int pola[size_a];
     2d8:	fff58f93          	addi	t6,a1,-1
    int polb[size_b];
     2dc:	878a                	mv	a5,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
     2de:	00235f13          	srli	t5,t1,0x2
     2e2:	8972                	mv	s2,t3
    for (i = 0; i < size_b; ++i){
     2e4:	89f2                	mv	s3,t3
     2e6:	4481                	li	s1,0
            product2[j] = 0;
     2e8:	00001b17          	auipc	s6,0x1
     2ec:	184b0b13          	addi	s6,s6,388 # 146c <product2>
    for (i = 0; i < size_b; ++i){
     2f0:	04d4c163          	blt	s1,a3,332 <polymult2+0xa6>
        }
    }

    for(i = 0; i < size_a; ++i){
     2f4:	4381                	li	t2,0
     2f6:	04b3c163          	blt	t2,a1,338 <polymult2+0xac>
        pola[i] = a[i];
    }


    for(i = 0; i < size_b; ++i){
     2fa:	4581                	li	a1,0
     2fc:	04d5c863          	blt	a1,a3,34c <polymult2+0xc0>
        polb[i] = b[i];
    }


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     300:	4605                	li	a2,1
     302:	97c2                	add	a5,a5,a6
     304:	06c70f63          	beq	a4,a2,382 <polymult2+0xf6>
     308:	1871                	addi	a6,a6,-4
     30a:	1371                	addi	t1,t1,-4
     30c:	9872                	add	a6,a6,t3
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     30e:	0608cc63          	bltz	a7,386 <polymult2+0xfa>
            for (k = size_a-1; k >= 0; k = k-1 ){
     312:	877e                	mv	a4,t6
     314:	a86d                	j	3ce <polymult2+0x142>
            product2[j] = 0;
     316:	00239a93          	slli	s5,t2,0x2
     31a:	9ada                	add	s5,s5,s6
            line[i][j] = 0;
     31c:	000a2023          	sw	zero,0(s4)
            product2[j] = 0;
     320:	000aa023          	sw	zero,0(s5)
        for(j = 0; j < size_a + size_b -1; ++j){
     324:	0385                	addi	t2,t2,1
     326:	0a11                	addi	s4,s4,4
     328:	ffd3c7e3          	blt	t2,t4,316 <polymult2+0x8a>
    for (i = 0; i < size_b; ++i){
     32c:	0485                	addi	s1,s1,1
     32e:	999a                	add	s3,s3,t1
     330:	b7c1                	j	2f0 <polymult2+0x64>
     332:	8a4e                	mv	s4,s3
        for(j = 0; j < size_a + size_b -1; ++j){
     334:	4381                	li	t2,0
     336:	bfcd                	j	328 <polymult2+0x9c>
        pola[i] = a[i];
     338:	00239493          	slli	s1,t2,0x2
     33c:	009289b3          	add	s3,t0,s1
     340:	94aa                	add	s1,s1,a0
     342:	4084                	lw	s1,0(s1)
    for(i = 0; i < size_a; ++i){
     344:	0385                	addi	t2,t2,1
        pola[i] = a[i];
     346:	0099a023          	sw	s1,0(s3)
    for(i = 0; i < size_a; ++i){
     34a:	b775                	j	2f6 <polymult2+0x6a>
        polb[i] = b[i];
     34c:	00259513          	slli	a0,a1,0x2
     350:	00a783b3          	add	t2,a5,a0
     354:	9532                	add	a0,a0,a2
     356:	4108                	lw	a0,0(a0)
    for(i = 0; i < size_b; ++i){
     358:	0585                	addi	a1,a1,1
        polb[i] = b[i];
     35a:	00a3a023          	sw	a0,0(t2)
    for(i = 0; i < size_b; ++i){
     35e:	bf79                	j	2fc <polymult2+0x70>
                line[size_b-1-j][k] = pola[k]*polb[j];
     360:	00271613          	slli	a2,a4,0x2
     364:	00c905b3          	add	a1,s2,a2
     368:	9616                	add	a2,a2,t0
     36a:	4210                	lw	a2,0(a2)
     36c:	ffc7a503          	lw	a0,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     370:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     372:	02a60633          	mul	a2,a2,a0
     376:	c190                	sw	a2,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     378:	fe0754e3          	bgez	a4,360 <polymult2+0xd4>
        for (j = size_b -1; j >= 0; j = j-1){
     37c:	18fd                	addi	a7,a7,-1
     37e:	17f1                	addi	a5,a5,-4
     380:	991a                	add	s2,s2,t1
     382:	0208d863          	bgez	a7,3b2 <polymult2+0x126>
     386:	00001617          	auipc	a2,0x1
     38a:	0e660613          	addi	a2,a2,230 # 146c <product2>
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
        for(i = 0; i < size_b; ++i){
     38e:	4701                	li	a4,0
    for(j = 0; j < size_a + size_b -1; ++j){
     390:	07d74463          	blt	a4,t4,3f8 <polymult2+0x16c>


    return_address2 = &product2[0];

    return return_address2;
}
     394:	fe040113          	addi	sp,s0,-32
     398:	4472                	lw	s0,28(sp)
     39a:	44e2                	lw	s1,24(sp)
     39c:	4952                	lw	s2,20(sp)
     39e:	49c2                	lw	s3,16(sp)
     3a0:	4a32                	lw	s4,12(sp)
     3a2:	4aa2                	lw	s5,8(sp)
     3a4:	4b12                	lw	s6,4(sp)
     3a6:	00001517          	auipc	a0,0x1
     3aa:	0c650513          	addi	a0,a0,198 # 146c <product2>
     3ae:	6105                	addi	sp,sp,32
     3b0:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b2:	877e                	mv	a4,t6
     3b4:	b7d1                	j	378 <polymult2+0xec>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3b6:	00271613          	slli	a2,a4,0x2
     3ba:	00c805b3          	add	a1,a6,a2
     3be:	9616                	add	a2,a2,t0
     3c0:	4210                	lw	a2,0(a2)
     3c2:	ffc7a503          	lw	a0,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c6:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3c8:	02a60633          	mul	a2,a2,a0
     3cc:	c190                	sw	a2,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ce:	fe0754e3          	bgez	a4,3b6 <polymult2+0x12a>
        for (j = size_b -1; j >= 0; j = j-1){
     3d2:	18fd                	addi	a7,a7,-1
     3d4:	17f1                	addi	a5,a5,-4
     3d6:	981a                	add	a6,a6,t1
     3d8:	bf1d                	j	30e <polymult2+0x82>
            product2[j] += line[i][j];
     3da:	03e587b3          	mul	a5,a1,t5
     3de:	4208                	lw	a0,0(a2)
        for(i = 0; i < size_b; ++i){
     3e0:	0585                	addi	a1,a1,1
            product2[j] += line[i][j];
     3e2:	97ba                	add	a5,a5,a4
     3e4:	078a                	slli	a5,a5,0x2
     3e6:	97f2                	add	a5,a5,t3
     3e8:	439c                	lw	a5,0(a5)
     3ea:	97aa                	add	a5,a5,a0
     3ec:	c21c                	sw	a5,0(a2)
        for(i = 0; i < size_b; ++i){
     3ee:	fed5c6e3          	blt	a1,a3,3da <polymult2+0x14e>
    for(j = 0; j < size_a + size_b -1; ++j){
     3f2:	0705                	addi	a4,a4,1
     3f4:	0611                	addi	a2,a2,4
     3f6:	bf69                	j	390 <polymult2+0x104>
        for(i = 0; i < size_b; ++i){
     3f8:	4581                	li	a1,0
     3fa:	bfd5                	j	3ee <polymult2+0x162>

000003fc <polydiv>:
 

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     3fc:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     400:	715d                	addi	sp,sp,-80
    int v[size_N];
     402:	07bd                	addi	a5,a5,15
     404:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     406:	c4a2                	sw	s0,72(sp)
     408:	c2a6                	sw	s1,68(sp)
     40a:	c0ca                	sw	s2,64(sp)
     40c:	de4e                	sw	s3,60(sp)
     40e:	dc52                	sw	s4,56(sp)
     410:	da56                	sw	s5,52(sp)
     412:	d85a                	sw	s6,48(sp)
     414:	d65e                	sw	s7,44(sp)
     416:	d462                	sw	s8,40(sp)
     418:	d266                	sw	s9,36(sp)
     41a:	ce6e                	sw	s11,28(sp)
     41c:	c686                	sw	ra,76(sp)
     41e:	d06a                	sw	s10,32(sp)
     420:	0880                	addi	s0,sp,80
    int v[size_N];
     422:	40f10133          	sub	sp,sp,a5
     426:	8a0a                	mv	s4,sp
    int q[size_N];
     428:	40f10133          	sub	sp,sp,a5
     42c:	8a8a                	mv	s5,sp
    int *product;
    int num_temp[size_N];
     42e:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     432:	00269793          	slli	a5,a3,0x2
     436:	07bd                	addi	a5,a5,15
     438:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
     43a:	898a                	mv	s3,sp
    int denum_temp[size_D];
     43c:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     440:	892e                	mv	s2,a1
     442:	8c32                	mv	s8,a2
     444:	8b36                	mv	s6,a3
     446:	84ba                	mv	s1,a4
    int v[size_N];
     448:	fff58d93          	addi	s11,a1,-1
    int denum_temp[size_D];
     44c:	fff68b93          	addi	s7,a3,-1
     450:	8c8a                	mv	s9,sp


    // make mod calculation for coefficents
    for (i = 0; i < size_N; ++i){
     452:	4781                	li	a5,0
     454:	0527ca63          	blt	a5,s2,4a8 <polydiv+0xac>
        num_temp[i] = num[i];
    }
    
    if(size_N == 106) {
     458:	06a00793          	li	a5,106
     45c:	06f91363          	bne	s2,a5,4c2 <polydiv+0xc6>
        array_mod(num_temp, mod, size_N - 1);
     460:	06900613          	li	a2,105
     464:	85a6                	mv	a1,s1
     466:	854e                	mv	a0,s3
     468:	312d                	jal	92 <array_mod>
        while(num_temp[size_N - 1] < 0){
     46a:	1a49a783          	lw	a5,420(s3)
     46e:	0407c663          	bltz	a5,4ba <polydiv+0xbe>
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
        }
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     472:	0297e7b3          	rem	a5,a5,s1
     476:	1af9a223          	sw	a5,420(s3)
    for (i = 0; i < size_N; ++i){
     47a:	4781                	li	a5,0
        array_mod(num_temp, mod, size_N);
    }


    // make mod calculation for coefficents
    for (i = 0; i < size_D; ++i) {
     47c:	0567c863          	blt	a5,s6,4cc <polydiv+0xd0>
        denum_temp[i] = denum[i];
    }

	array_mod(denum_temp,mod,size_D);
     480:	865a                	mv	a2,s6
     482:	85a6                	mv	a1,s1
     484:	8566                	mv	a0,s9
     486:	3131                	jal	92 <array_mod>

    for (i = 0; i < size_N; ++i){
     488:	4781                	li	a5,0
     48a:	0527ca63          	blt	a5,s2,4de <polydiv+0xe2>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     48e:	002b9793          	slli	a5,s7,0x2
     492:	97e6                	add	a5,a5,s9
     494:	4398                	lw	a4,0(a5)
     496:	040bdf63          	bgez	s7,4f4 <polydiv+0xf8>
    for (i = 0; i < size_N; ++i){
     49a:	4781                	li	a5,0
     49c:	4c01                	li	s8,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     49e:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     4a0:	049c4d63          	blt	s8,s1,4fa <polydiv+0xfe>
     4a4:	87ee                	mv	a5,s11
     4a6:	a09d                	j	50c <polydiv+0x110>
        num_temp[i] = num[i];
     4a8:	00279713          	slli	a4,a5,0x2
     4ac:	00e986b3          	add	a3,s3,a4
     4b0:	972a                	add	a4,a4,a0
     4b2:	4318                	lw	a4,0(a4)
    for (i = 0; i < size_N; ++i){
     4b4:	0785                	addi	a5,a5,1
        num_temp[i] = num[i];
     4b6:	c298                	sw	a4,0(a3)
    for (i = 0; i < size_N; ++i){
     4b8:	bf71                	j	454 <polydiv+0x58>
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4ba:	97a6                	add	a5,a5,s1
     4bc:	1af9a223          	sw	a5,420(s3)
     4c0:	b76d                	j	46a <polydiv+0x6e>
        array_mod(num_temp, mod, size_N);
     4c2:	864a                	mv	a2,s2
     4c4:	85a6                	mv	a1,s1
     4c6:	854e                	mv	a0,s3
     4c8:	36e9                	jal	92 <array_mod>
     4ca:	bf45                	j	47a <polydiv+0x7e>
        denum_temp[i] = denum[i];
     4cc:	00279713          	slli	a4,a5,0x2
     4d0:	00ec86b3          	add	a3,s9,a4
     4d4:	9762                	add	a4,a4,s8
     4d6:	4318                	lw	a4,0(a4)
    for (i = 0; i < size_D; ++i) {
     4d8:	0785                	addi	a5,a5,1
        denum_temp[i] = denum[i];
     4da:	c298                	sw	a4,0(a3)
    for (i = 0; i < size_D; ++i) {
     4dc:	b745                	j	47c <polydiv+0x80>
        q[i] = 0;
     4de:	00279713          	slli	a4,a5,0x2
     4e2:	00ea86b3          	add	a3,s5,a4
        v[i] = 0;
     4e6:	9752                	add	a4,a4,s4
        q[i] = 0;
     4e8:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     4ec:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     4f0:	0785                	addi	a5,a5,1
     4f2:	bf61                	j	48a <polydiv+0x8e>
        if( denum_temp[i] != 0 )
     4f4:	f35d                	bnez	a4,49a <polydiv+0x9e>
    for (i = size_D-1; i >= 0; i = i-1){
     4f6:	1bfd                	addi	s7,s7,-1
     4f8:	bf59                	j	48e <polydiv+0x92>
        if ( (b_N*u)%mod == 1 )
     4fa:	0297e633          	rem	a2,a5,s1
     4fe:	97ba                	add	a5,a5,a4
     500:	fad602e3          	beq	a2,a3,4a4 <polydiv+0xa8>
    for (u = 0; u < mod; ++u){
     504:	0c05                	addi	s8,s8,1
     506:	bf69                	j	4a0 <polydiv+0xa4>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     508:	eb01                	bnez	a4,518 <polydiv+0x11c>
    for (i = size_N-1; i >= 0; i = i-1){
     50a:	17fd                	addi	a5,a5,-1
     50c:	00279713          	slli	a4,a5,0x2
     510:	974e                	add	a4,a4,s3
     512:	4318                	lw	a4,0(a4)
     514:	fe07dae3          	bgez	a5,508 <polydiv+0x10c>
    while (d >= d2){

        // Set v := u × r_d × X^(d–N)
        v[(d-d2)] = u*r_d;

         if(size_N == 106) {
     518:	06a00d13          	li	s10,106
     51c:	a2a9                	j	666 <polydiv+0x26a>
        v[(d-d2)] = u*r_d;
     51e:	03870733          	mul	a4,a4,s8
     522:	417787b3          	sub	a5,a5,s7
     526:	078a                	slli	a5,a5,0x2
     528:	97d2                	add	a5,a5,s4
     52a:	c398                	sw	a4,0(a5)
         if(size_N == 106) {
     52c:	0ba91b63          	bne	s2,s10,5e2 <polydiv+0x1e6>
            array_mod(v, mod, size_N - 1);
     530:	06900613          	li	a2,105
     534:	85a6                	mv	a1,s1
     536:	8552                	mv	a0,s4
     538:	3ea9                	jal	92 <array_mod>
            while(v[size_N - 1] < 0){
     53a:	1a4a2783          	lw	a5,420(s4)
     53e:	0807ce63          	bltz	a5,5da <polydiv+0x1de>
                v[size_N - 1] = v[size_N - 1]+mod;
            }
            v[size_N - 1] = v[size_N - 1] % mod;
     542:	0297e7b3          	rem	a5,a5,s1
     546:	1afa2223          	sw	a5,420(s4)
        else{
            array_mod(v, mod, size_N);
        }

        // v*b
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     54a:	4781                	li	a5,0
     54c:	8726                	mv	a4,s1
     54e:	86da                	mv	a3,s6
     550:	8652                	mv	a2,s4
     552:	85da                	mv	a1,s6
     554:	8566                	mv	a0,s9
     556:	3ea9                	jal	b0 <polymult>

        // make mod calculation for coefficents
     
        if(size_N == 106) {
     558:	faa42e23          	sw	a0,-68(s0)
     55c:	09a91c63          	bne	s2,s10,5f4 <polydiv+0x1f8>
            array_mod(product, mod, size_N - 1);
     560:	06900613          	li	a2,105
     564:	85a6                	mv	a1,s1
     566:	3635                	jal	92 <array_mod>
            while(product[size_N - 1] < 0){
     568:	fbc42703          	lw	a4,-68(s0)
     56c:	1a472783          	lw	a5,420(a4)
     570:	0607ce63          	bltz	a5,5ec <polydiv+0x1f0>
                product[size_N - 1] = product[size_N - 1]+mod;
            }
            product[size_N - 1] = product[size_N - 1] % mod;
     574:	0297e7b3          	rem	a5,a5,s1
     578:	1af72223          	sw	a5,420(a4)
     57c:	86ce                	mv	a3,s3
     57e:	4781                	li	a5,0
        else{
            array_mod(product, mod, size_N);
        }
        
        //r = r- v*b
        for (i = 0; i < size_N; ++i){
     580:	0927c063          	blt	a5,s2,600 <polydiv+0x204>
            num_temp[i] = num_temp[i] - product[i];
        }

        // make mod calculation for coefficents
 	if(size_N == 106) {
     584:	09a91d63          	bne	s2,s10,61e <polydiv+0x222>
            array_mod(num_temp, mod, size_N - 1);
     588:	06900613          	li	a2,105
     58c:	85a6                	mv	a1,s1
     58e:	854e                	mv	a0,s3
     590:	3609                	jal	92 <array_mod>
            while(num_temp[size_N - 1] < 0){
     592:	1a49a783          	lw	a5,420(s3)
     596:	0807c063          	bltz	a5,616 <polydiv+0x21a>
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
            }
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     59a:	0297e7b3          	rem	a5,a5,s1
     59e:	1af9a223          	sw	a5,420(s3)
     5a2:	8756                	mv	a4,s5
     5a4:	4781                	li	a5,0
        }
        else{
            array_mod(num_temp, mod, size_N);
	}
        // q = q + v;
        for(i = 0; i < size_N; ++i){
     5a6:	0927c163          	blt	a5,s2,628 <polydiv+0x22c>
            q[i] = q[i] + v[i];
        }

 	if(size_N == 106) {
     5aa:	09a91e63          	bne	s2,s10,646 <polydiv+0x24a>
            array_mod(q, mod, size_N - 1);
     5ae:	06900613          	li	a2,105
     5b2:	85a6                	mv	a1,s1
     5b4:	8556                	mv	a0,s5
     5b6:	3cf1                	jal	92 <array_mod>
            while(q[size_N - 1] < 0){
     5b8:	1a4aa783          	lw	a5,420(s5)
     5bc:	0807c163          	bltz	a5,63e <polydiv+0x242>
                q[size_N - 1] = q[size_N - 1]+mod;
            }
            q[size_N - 1] = q[size_N - 1] % mod;
     5c0:	0297e7b3          	rem	a5,a5,s1
     5c4:	1afaa223          	sw	a5,420(s5)
    int v[size_N];
     5c8:	87ee                	mv	a5,s11
        else{
            array_mod(q, mod, size_N);
        }

        // Set d := deg r(X) (num)
        for (i = size_N-1; i >= 0; i = i-1){
     5ca:	00279713          	slli	a4,a5,0x2
     5ce:	974e                	add	a4,a4,s3
     5d0:	4318                	lw	a4,0(a4)
     5d2:	0607df63          	bgez	a5,650 <polydiv+0x254>
     5d6:	4681                	li	a3,0
     5d8:	a069                	j	662 <polydiv+0x266>
                v[size_N - 1] = v[size_N - 1]+mod;
     5da:	97a6                	add	a5,a5,s1
     5dc:	1afa2223          	sw	a5,420(s4)
     5e0:	bfa9                	j	53a <polydiv+0x13e>
            array_mod(v, mod, size_N);
     5e2:	864a                	mv	a2,s2
     5e4:	85a6                	mv	a1,s1
     5e6:	8552                	mv	a0,s4
     5e8:	346d                	jal	92 <array_mod>
     5ea:	b785                	j	54a <polydiv+0x14e>
                product[size_N - 1] = product[size_N - 1]+mod;
     5ec:	97a6                	add	a5,a5,s1
     5ee:	1af72223          	sw	a5,420(a4)
     5f2:	bfad                	j	56c <polydiv+0x170>
            array_mod(product, mod, size_N);
     5f4:	864a                	mv	a2,s2
     5f6:	85a6                	mv	a1,s1
     5f8:	3c69                	jal	92 <array_mod>
     5fa:	fbc42703          	lw	a4,-68(s0)
     5fe:	bfbd                	j	57c <polydiv+0x180>
            num_temp[i] = num_temp[i] - product[i];
     600:	00279593          	slli	a1,a5,0x2
     604:	95ba                	add	a1,a1,a4
     606:	4290                	lw	a2,0(a3)
     608:	418c                	lw	a1,0(a1)
        for (i = 0; i < size_N; ++i){
     60a:	0785                	addi	a5,a5,1
     60c:	0691                	addi	a3,a3,4
            num_temp[i] = num_temp[i] - product[i];
     60e:	8e0d                	sub	a2,a2,a1
     610:	fec6ae23          	sw	a2,-4(a3)
        for (i = 0; i < size_N; ++i){
     614:	b7b5                	j	580 <polydiv+0x184>
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     616:	97a6                	add	a5,a5,s1
     618:	1af9a223          	sw	a5,420(s3)
     61c:	bf9d                	j	592 <polydiv+0x196>
            array_mod(num_temp, mod, size_N);
     61e:	864a                	mv	a2,s2
     620:	85a6                	mv	a1,s1
     622:	854e                	mv	a0,s3
     624:	34bd                	jal	92 <array_mod>
     626:	bfb5                	j	5a2 <polydiv+0x1a6>
            q[i] = q[i] + v[i];
     628:	00279613          	slli	a2,a5,0x2
     62c:	9652                	add	a2,a2,s4
     62e:	4314                	lw	a3,0(a4)
     630:	4210                	lw	a2,0(a2)
        for(i = 0; i < size_N; ++i){
     632:	0785                	addi	a5,a5,1
     634:	0711                	addi	a4,a4,4
            q[i] = q[i] + v[i];
     636:	96b2                	add	a3,a3,a2
     638:	fed72e23          	sw	a3,-4(a4)
        for(i = 0; i < size_N; ++i){
     63c:	b7ad                	j	5a6 <polydiv+0x1aa>
                q[size_N - 1] = q[size_N - 1]+mod;
     63e:	97a6                	add	a5,a5,s1
     640:	1afaa223          	sw	a5,420(s5)
     644:	bf95                	j	5b8 <polydiv+0x1bc>
            array_mod(q, mod, size_N);
     646:	864a                	mv	a2,s2
     648:	85a6                	mv	a1,s1
     64a:	8556                	mv	a0,s5
     64c:	3499                	jal	92 <array_mod>
     64e:	bfad                	j	5c8 <polydiv+0x1cc>
            if( num_temp[i] != 0 )
     650:	f359                	bnez	a4,5d6 <polydiv+0x1da>
        for (i = size_N-1; i >= 0; i = i-1){
     652:	17fd                	addi	a5,a5,-1
     654:	bf9d                	j	5ca <polydiv+0x1ce>
        d = i;
        r_d = num_temp[d];

        // make zero for next calculations
        for (i = 0; i < size_N; ++i){
            v[i] = 0;
     656:	00269613          	slli	a2,a3,0x2
     65a:	9652                	add	a2,a2,s4
     65c:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     660:	0685                	addi	a3,a3,1
     662:	ff26cae3          	blt	a3,s2,656 <polydiv+0x25a>
    while (d >= d2){
     666:	eb77dce3          	bge	a5,s7,51e <polydiv+0x122>
        }


    } //End While-1

    for(i = 0; i < size_N; ++i){
     66a:	4781                	li	a5,0
        result[i] = q[i];
     66c:	00001697          	auipc	a3,0x1
     670:	05868693          	addi	a3,a3,88 # 16c4 <result>
    for(i = 0; i < size_N; ++i){
     674:	0327cf63          	blt	a5,s2,6b2 <polydiv+0x2b6>
    }
    for(i = size_N; i < (2*size_N); ++i){
     678:	00191713          	slli	a4,s2,0x1
        result[i] = num_temp[i-size_N];
     67c:	00001697          	auipc	a3,0x1
     680:	04868693          	addi	a3,a3,72 # 16c4 <result>
    for(i = size_N; i < (2*size_N); ++i){
     684:	04e94063          	blt	s2,a4,6c4 <polydiv+0x2c8>
    }

    return_address3 = &result[0];

    return return_address3;
}
     688:	fb040113          	addi	sp,s0,-80
     68c:	40b6                	lw	ra,76(sp)
     68e:	4426                	lw	s0,72(sp)
     690:	4496                	lw	s1,68(sp)
     692:	4906                	lw	s2,64(sp)
     694:	59f2                	lw	s3,60(sp)
     696:	5a62                	lw	s4,56(sp)
     698:	5ad2                	lw	s5,52(sp)
     69a:	5b42                	lw	s6,48(sp)
     69c:	5bb2                	lw	s7,44(sp)
     69e:	5c22                	lw	s8,40(sp)
     6a0:	5c92                	lw	s9,36(sp)
     6a2:	5d02                	lw	s10,32(sp)
     6a4:	4df2                	lw	s11,28(sp)
     6a6:	00001517          	auipc	a0,0x1
     6aa:	01e50513          	addi	a0,a0,30 # 16c4 <result>
     6ae:	6161                	addi	sp,sp,80
     6b0:	8082                	ret
        result[i] = q[i];
     6b2:	00279713          	slli	a4,a5,0x2
     6b6:	00e68633          	add	a2,a3,a4
     6ba:	9756                	add	a4,a4,s5
     6bc:	4318                	lw	a4,0(a4)
    for(i = 0; i < size_N; ++i){
     6be:	0785                	addi	a5,a5,1
        result[i] = q[i];
     6c0:	c218                	sw	a4,0(a2)
    for(i = 0; i < size_N; ++i){
     6c2:	bf4d                	j	674 <polydiv+0x278>
        result[i] = num_temp[i-size_N];
     6c4:	0009a603          	lw	a2,0(s3)
     6c8:	00291793          	slli	a5,s2,0x2
     6cc:	97b6                	add	a5,a5,a3
     6ce:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     6d0:	0905                	addi	s2,s2,1
     6d2:	0991                	addi	s3,s3,4
     6d4:	bf45                	j	684 <polydiv+0x288>

000006d6 <ext_euclid>:
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
   

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     6d6:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6da:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     6dc:	07bd                	addi	a5,a5,15
     6de:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6e0:	c4a2                	sw	s0,72(sp)
     6e2:	c2a6                	sw	s1,68(sp)
     6e4:	c0ca                	sw	s2,64(sp)
     6e6:	de4e                	sw	s3,60(sp)
     6e8:	dc52                	sw	s4,56(sp)
     6ea:	da56                	sw	s5,52(sp)
     6ec:	d85a                	sw	s6,48(sp)
     6ee:	d65e                	sw	s7,44(sp)
     6f0:	d462                	sw	s8,40(sp)
     6f2:	d266                	sw	s9,36(sp)
     6f4:	ce6e                	sw	s11,28(sp)
     6f6:	c686                	sw	ra,76(sp)
     6f8:	d06a                	sw	s10,32(sp)
     6fa:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     6fc:	40f10133          	sub	sp,sp,a5
     700:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     702:	40f10133          	sub	sp,sp,a5
     706:	8a8a                	mv	s5,sp
    int ri[size];
     708:	40f10133          	sub	sp,sp,a5
     70c:	8c0a                	mv	s8,sp

    int ti_1[size]; // ti_1[0] = 1
     70e:	40f10133          	sub	sp,sp,a5
     712:	8b0a                	mv	s6,sp
    int ti[size];
     714:	40f10133          	sub	sp,sp,a5
     718:	8c8a                	mv	s9,sp
    int qi_1[size];
     71a:	40f10133          	sub	sp,sp,a5
     71e:	8b8a                	mv	s7,sp
    int temp[size];
     720:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     724:	84b6                	mv	s1,a3
     726:	8db2                	mv	s11,a2
    int ri_2[size]; // MX-ring poly, a
     728:	fff60913          	addi	s2,a2,-1
    int temp[size];
     72c:	8a0a                	mv	s4,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     72e:	4781                	li	a5,0
     730:	4701                	li	a4,0
        ri_2[i] = polyR[i];
        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     732:	00001697          	auipc	a3,0x1
     736:	1ea68693          	addi	a3,a3,490 # 191c <ti_2>
    for (i = 0; i < size; ++i) {
     73a:	0fb74163          	blt	a4,s11,81c <ext_euclid+0x146>
    }
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     73e:	4785                	li	a5,1
     740:	00fb2023          	sw	a5,0(s6)
        // make mod for ri_1
	array_mod(ri_1,mod,N+1);


        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     744:	001d9793          	slli	a5,s11,0x1
     748:	faf42e23          	sw	a5,-68(s0)
	
	array_mod(temp,mod,size);


        for (i = 0; i < N + 1; ++i) {
            ti[i] = ti_2[i] - temp[i];
     74c:	00001d17          	auipc	s10,0x1
     750:	1d0d0d13          	addi	s10,s10,464 # 191c <ti_2>
	array_mod(ri_2,mod,N+1);
     754:	866e                	mv	a2,s11
     756:	85a6                	mv	a1,s1
     758:	854e                	mv	a0,s3
     75a:	3a25                	jal	92 <array_mod>
	array_mod(ri_1,mod,N+1);
     75c:	866e                	mv	a2,s11
     75e:	85a6                	mv	a1,s1
     760:	8556                	mv	a0,s5
     762:	3a05                	jal	92 <array_mod>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     764:	8726                	mv	a4,s1
     766:	86ee                	mv	a3,s11
     768:	8656                	mv	a2,s5
     76a:	85ee                	mv	a1,s11
     76c:	854e                	mv	a0,s3
     76e:	3179                	jal	3fc <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     770:	8762                	mv	a4,s8
     772:	87ee                	mv	a5,s11
     774:	fbc42683          	lw	a3,-68(s0)
     778:	0cd7cd63          	blt	a5,a3,852 <ext_euclid+0x17c>
     77c:	4781                	li	a5,0
        for (i = 0; i < N + 1; ++i) {
     77e:	4701                	li	a4,0
     780:	0ee95263          	bge	s2,a4,864 <ext_euclid+0x18e>
        array_mod(temp,mod,N+1);
     784:	866e                	mv	a2,s11
     786:	85a6                	mv	a1,s1
     788:	8552                	mv	a0,s4
     78a:	3221                	jal	92 <array_mod>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     78c:	8726                	mv	a4,s1
     78e:	86ee                	mv	a3,s11
     790:	8656                	mv	a2,s5
     792:	85ee                	mv	a1,s11
     794:	8552                	mv	a0,s4
     796:	319d                	jal	3fc <polydiv>
        for (i = 0; i < N + 1; ++i) {
     798:	4781                	li	a5,0
     79a:	0ef95263          	bge	s2,a5,87e <ext_euclid+0x1a8>
	array_mod(qi_1,mod,size);
     79e:	866e                	mv	a2,s11
     7a0:	85a6                	mv	a1,s1
     7a2:	855e                	mv	a0,s7
     7a4:	30fd                	jal	92 <array_mod>
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7a6:	4781                	li	a5,0
     7a8:	8726                	mv	a4,s1
     7aa:	86ee                	mv	a3,s11
     7ac:	865a                	mv	a2,s6
     7ae:	85ee                	mv	a1,s11
     7b0:	855e                	mv	a0,s7
     7b2:	38fd                	jal	b0 <polymult>
        for (i = 0; i < N + 1; ++i) {
     7b4:	4781                	li	a5,0
     7b6:	0cf95d63          	bge	s2,a5,890 <ext_euclid+0x1ba>
	array_mod(temp,mod,size);
     7ba:	866e                	mv	a2,s11
     7bc:	85a6                	mv	a1,s1
     7be:	8552                	mv	a0,s4
     7c0:	38c9                	jal	92 <array_mod>
        for (i = 0; i < N + 1; ++i) {
     7c2:	4781                	li	a5,0
     7c4:	4701                	li	a4,0
     7c6:	0ce95e63          	bge	s2,a4,8a2 <ext_euclid+0x1cc>
        }

        array_mod(ti,mod,N+1);
     7ca:	866e                	mv	a2,s11
     7cc:	85a6                	mv	a1,s1
     7ce:	8566                	mv	a0,s9
     7d0:	30c9                	jal	92 <array_mod>

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

        for (i = 0; i < N + 1; ++i) {
     7d2:	4781                	li	a5,0
        controlR = 0;
     7d4:	4701                	li	a4,0
        for (i = 0; i < N + 1; ++i) {
     7d6:	4681                	li	a3,0
     7d8:	0ed95263          	bge	s2,a3,8bc <ext_euclid+0x1e6>
    while (controlR != 0) {
     7dc:	ff25                	bnez	a4,754 <ext_euclid+0x7e>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     7de:	4781                	li	a5,0
            if (((ri_2[0] * j) % mod) == 1)
     7e0:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     7e2:	1097cb63          	blt	a5,s1,8f8 <ext_euclid+0x222>
     7e6:	00001617          	auipc	a2,0x1
     7ea:	13660613          	addi	a2,a2,310 # 191c <ti_2>
            if (ri_2[i] != 0)
                //	printf("** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! ***\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     7ee:	10e95f63          	bge	s2,a4,90c <ext_euclid+0x236>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     7f2:	fb040113          	addi	sp,s0,-80
     7f6:	40b6                	lw	ra,76(sp)
     7f8:	4426                	lw	s0,72(sp)
     7fa:	4496                	lw	s1,68(sp)
     7fc:	4906                	lw	s2,64(sp)
     7fe:	59f2                	lw	s3,60(sp)
     800:	5a62                	lw	s4,56(sp)
     802:	5ad2                	lw	s5,52(sp)
     804:	5b42                	lw	s6,48(sp)
     806:	5bb2                	lw	s7,44(sp)
     808:	5c22                	lw	s8,40(sp)
     80a:	5c92                	lw	s9,36(sp)
     80c:	5d02                	lw	s10,32(sp)
     80e:	4df2                	lw	s11,28(sp)
     810:	00001517          	auipc	a0,0x1
     814:	10c50513          	addi	a0,a0,268 # 191c <ti_2>
     818:	6161                	addi	sp,sp,80
     81a:	8082                	ret
        ri_2[i] = polyR[i];
     81c:	00f508b3          	add	a7,a0,a5
     820:	0008a883          	lw	a7,0(a7)
     824:	00f98633          	add	a2,s3,a5
    for (i = 0; i < size; ++i) {
     828:	0705                	addi	a4,a4,1
        ri_2[i] = polyR[i];
     82a:	01162023          	sw	a7,0(a2)
        ri_1[i] = polyf[i];
     82e:	00f588b3          	add	a7,a1,a5
     832:	0008a883          	lw	a7,0(a7)
     836:	00fa8633          	add	a2,s5,a5
     83a:	01162023          	sw	a7,0(a2)
        ti_2[i] = 0;
     83e:	00f68633          	add	a2,a3,a5
     842:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     846:	00fb0633          	add	a2,s6,a5
     84a:	00062023          	sw	zero,0(a2)
    for (i = 0; i < size; ++i) {
     84e:	0791                	addi	a5,a5,4
     850:	b5ed                	j	73a <ext_euclid+0x64>
            ri[i - (N + 1)] = res[i];
     852:	00279693          	slli	a3,a5,0x2
     856:	96aa                	add	a3,a3,a0
     858:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     85a:	0785                	addi	a5,a5,1
     85c:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     85e:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     862:	bf09                	j	774 <ext_euclid+0x9e>
            temp[i] = ri_2[i] - ri[i];
     864:	00f986b3          	add	a3,s3,a5
     868:	00fc05b3          	add	a1,s8,a5
     86c:	4294                	lw	a3,0(a3)
     86e:	418c                	lw	a1,0(a1)
     870:	00fa0633          	add	a2,s4,a5
        for (i = 0; i < N + 1; ++i) {
     874:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     876:	8e8d                	sub	a3,a3,a1
     878:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     87a:	0791                	addi	a5,a5,4
     87c:	b711                	j	780 <ext_euclid+0xaa>
            qi_1[i] = res1[i];
     87e:	00279713          	slli	a4,a5,0x2
     882:	00e506b3          	add	a3,a0,a4
     886:	4294                	lw	a3,0(a3)
     888:	975e                	add	a4,a4,s7
        for (i = 0; i < N + 1; ++i) {
     88a:	0785                	addi	a5,a5,1
            qi_1[i] = res1[i];
     88c:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     88e:	b731                	j	79a <ext_euclid+0xc4>
            temp[i] = res2[i];
     890:	00279713          	slli	a4,a5,0x2
     894:	00e506b3          	add	a3,a0,a4
     898:	4294                	lw	a3,0(a3)
     89a:	9752                	add	a4,a4,s4
        for (i = 0; i < N + 1; ++i) {
     89c:	0785                	addi	a5,a5,1
            temp[i] = res2[i];
     89e:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     8a0:	bf19                	j	7b6 <ext_euclid+0xe0>
            ti[i] = ti_2[i] - temp[i];
     8a2:	00fd06b3          	add	a3,s10,a5
     8a6:	00fa05b3          	add	a1,s4,a5
     8aa:	4294                	lw	a3,0(a3)
     8ac:	418c                	lw	a1,0(a1)
     8ae:	00fc8633          	add	a2,s9,a5
        for (i = 0; i < N + 1; ++i) {
     8b2:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     8b4:	8e8d                	sub	a3,a3,a1
     8b6:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8b8:	0791                	addi	a5,a5,4
     8ba:	b731                	j	7c6 <ext_euclid+0xf0>
            ri_2[i] = ri_1[i];
     8bc:	00fa85b3          	add	a1,s5,a5
     8c0:	4188                	lw	a0,0(a1)
     8c2:	00f98633          	add	a2,s3,a5
        for (i = 0; i < N + 1; ++i) {
     8c6:	0685                	addi	a3,a3,1
            ri_2[i] = ri_1[i];
     8c8:	c208                	sw	a0,0(a2)
            ri_1[i] = ri[i];
     8ca:	00fc0633          	add	a2,s8,a5
     8ce:	4210                	lw	a2,0(a2)
            ti_2[i] = ti_1[i];
     8d0:	00fd0533          	add	a0,s10,a5
            ri_1[i] = ri[i];
     8d4:	c190                	sw	a2,0(a1)
            ti_2[i] = ti_1[i];
     8d6:	00fb05b3          	add	a1,s6,a5
     8da:	0005a883          	lw	a7,0(a1)
            controlR += ri[i];
     8de:	9732                	add	a4,a4,a2
            ti_2[i] = ti_1[i];
     8e0:	01152023          	sw	a7,0(a0)
            ti_1[i] = ti[i];
     8e4:	00fc8533          	add	a0,s9,a5
     8e8:	4108                	lw	a0,0(a0)
     8ea:	c188                	sw	a0,0(a1)
            qi_1[i] = 0;
     8ec:	00fb85b3          	add	a1,s7,a5
     8f0:	0005a023          	sw	zero,0(a1)
        for (i = 0; i < N + 1; ++i) {
     8f4:	0791                	addi	a5,a5,4
     8f6:	b5cd                	j	7d8 <ext_euclid+0x102>
            if (((ri_2[0] * j) % mod) == 1)
     8f8:	0009a683          	lw	a3,0(s3)
     8fc:	02d786b3          	mul	a3,a5,a3
     900:	0296e6b3          	rem	a3,a3,s1
     904:	eec681e3          	beq	a3,a2,7e6 <ext_euclid+0x110>
        for (j = 0; j < mod; ++j) {
     908:	0785                	addi	a5,a5,1
     90a:	bde1                	j	7e2 <ext_euclid+0x10c>
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     90c:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     90e:	0705                	addi	a4,a4,1
     910:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     912:	02d786b3          	mul	a3,a5,a3
     916:	0296e6b3          	rem	a3,a3,s1
     91a:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     91e:	bdc1                	j	7ee <ext_euclid+0x118>

00000920 <generate_keys>:




int* generate_keys(int N, int p, int q){
     920:	7141                	addi	sp,sp,-496
     922:	1e112623          	sw	ra,492(sp)
     926:	1e812423          	sw	s0,488(sp)
     92a:	1e912223          	sw	s1,484(sp)
     92e:	1b80                	addi	s0,sp,496
     930:	1f212023          	sw	s2,480(sp)
     934:	1d312e23          	sw	s3,476(sp)
     938:	1d412c23          	sw	s4,472(sp)
     93c:	1d512a23          	sw	s5,468(sp)
     940:	1d612823          	sw	s6,464(sp)
     944:	1d712623          	sw	s7,460(sp)
     948:	1da12023          	sw	s10,448(sp)
     94c:	1d812423          	sw	s8,456(sp)
     950:	1d912223          	sw	s9,452(sp)
     954:	892a                	mv	s2,a0
     956:	8bae                	mv	s7,a1
     958:	8b32                	mv	s6,a2
  

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     95a:	4581                	li	a1,0
     95c:	0d000613          	li	a2,208
     960:	e2440513          	addi	a0,s0,-476
     964:	238d                	jal	ec6 <memset>
     966:	4485                	li	s1,1
     968:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     96a:	0d800613          	li	a2,216
     96e:	4581                	li	a1,0
     970:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     974:	e1342c23          	sw	s3,-488(s0)
     978:	e0942e23          	sw	s1,-484(s0)
     97c:	e2942023          	sw	s1,-480(s0)
     980:	e3342423          	sw	s3,-472(s0)
     984:	e2942823          	sw	s1,-464(s0)
     988:	e2942e23          	sw	s1,-452(s0)
     98c:	e5342023          	sw	s3,-448(s0)
     990:	e5342223          	sw	s3,-444(s0)
     994:	e4942623          	sw	s1,-436(s0)
     998:	e5342a23          	sw	s3,-428(s0)
     99c:	e4942e23          	sw	s1,-420(s0)
     9a0:	e6942023          	sw	s1,-416(s0)
     9a4:	e7342623          	sw	s3,-404(s0)
     9a8:	e6942a23          	sw	s1,-396(s0)
     9ac:	e8942023          	sw	s1,-384(s0)
     9b0:	e8942223          	sw	s1,-380(s0)
     9b4:	e8942423          	sw	s1,-376(s0)
     9b8:	e9342623          	sw	s3,-372(s0)
     9bc:	e8942a23          	sw	s1,-364(s0)
     9c0:	ea942023          	sw	s1,-352(s0)
     9c4:	ea942223          	sw	s1,-348(s0)
     9c8:	ea942423          	sw	s1,-344(s0)
     9cc:	eb342623          	sw	s3,-340(s0)
     9d0:	ea942a23          	sw	s1,-332(s0)
     9d4:	ec942023          	sw	s1,-320(s0)
     9d8:	ec942223          	sw	s1,-316(s0)
     9dc:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     9e0:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9e4:	21cd                	jal	ec6 <memset>
    int polyR[N+1];
     9e6:	002a9793          	slli	a5,s5,0x2
     9ea:	07bd                	addi	a5,a5,15
     9ec:	9bc1                	andi	a5,a5,-16
     9ee:	40f10133          	sub	sp,sp,a5
     9f2:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     9f4:	00291d13          	slli	s10,s2,0x2
     9f8:	01aa07b3          	add	a5,s4,s10
     9fc:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9fe:	ef342a23          	sw	s3,-268(s0)
     a02:	ee942e23          	sw	s1,-260(s0)
     a06:	f0942023          	sw	s1,-256(s0)
     a0a:	f0942423          	sw	s1,-248(s0)
     a0e:	f1342a23          	sw	s3,-236(s0)
     a12:	f1342e23          	sw	s3,-228(s0)
     a16:	f3342023          	sw	s3,-224(s0)
     a1a:	f2942423          	sw	s1,-216(s0)
     a1e:	f3342823          	sw	s3,-208(s0)
     a22:	f2942c23          	sw	s1,-200(s0)
     a26:	f4942223          	sw	s1,-188(s0)
     a2a:	f5342423          	sw	s3,-184(s0)
     a2e:	f4942823          	sw	s1,-176(s0)
     a32:	f4942e23          	sw	s1,-164(s0)
     a36:	f7342023          	sw	s3,-160(s0)
     a3a:	f6942423          	sw	s1,-152(s0)
     a3e:	f6942a23          	sw	s1,-140(s0)
     a42:	f7342c23          	sw	s3,-136(s0)
     a46:	f8942023          	sw	s1,-128(s0)
     a4a:	f8942423          	sw	s1,-120(s0)
     a4e:	f8942623          	sw	s1,-116(s0)
     a52:	f8942c23          	sw	s1,-104(s0)
     a56:	f9342e23          	sw	s3,-100(s0)
     a5a:	fa942223          	sw	s1,-92(s0)
     a5e:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
     a62:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     a66:	4785                	li	a5,1
     a68:	1127c263          	blt	a5,s2,b6c <generate_keys+0x24c>
     a6c:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     a6e:	03600693          	li	a3,54
     a72:	10f6d463          	bge	a3,a5,b7a <generate_keys+0x25a>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     a76:	4781                	li	a5,0
        random_keys[i] = f[i];
     a78:	00001697          	auipc	a3,0x1
     a7c:	03468693          	addi	a3,a3,52 # 1aac <random_keys>
    for(i = 0; i < N; ++i){
     a80:	1127cb63          	blt	a5,s2,b96 <generate_keys+0x276>
     a84:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     a88:	00191993          	slli	s3,s2,0x1
     a8c:	87ca                	mv	a5,s2
     a8e:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     a90:	00001617          	auipc	a2,0x1
     a94:	01c60613          	addi	a2,a2,28 # 1aac <random_keys>
    for(i = N; i < (2*N); ++i){
     a98:	1137ca63          	blt	a5,s3,bac <generate_keys+0x28c>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     a9c:	448d                	li	s1,3
     a9e:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     aa2:	86de                	mv	a3,s7
     aa4:	8656                	mv	a2,s5
     aa6:	e1840593          	addi	a1,s0,-488
     aaa:	8552                	mv	a0,s4
     aac:	312d                	jal	6d6 <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     aae:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     ab0:	00001697          	auipc	a3,0x1
     ab4:	ffc68693          	addi	a3,a3,-4 # 1aac <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     ab8:	1097c263          	blt	a5,s1,bbc <generate_keys+0x29c>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     abc:	8656                	mv	a2,s5
     abe:	86da                	mv	a3,s6
     ac0:	e1840593          	addi	a1,s0,-488
     ac4:	8552                	mv	a0,s4
     ac6:	3901                	jal	6d6 <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     ac8:	5751                	li	a4,-12
     aca:	02e90733          	mul	a4,s2,a4
     ace:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
     ad0:	00001617          	auipc	a2,0x1
     ad4:	fdc60613          	addi	a2,a2,-36 # 1aac <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     ad8:	0fa4ca63          	blt	s1,s10,bcc <generate_keys+0x2ac>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     adc:	4701                	li	a4,0
     ade:	85ca                	mv	a1,s2
     ae0:	86ca                	mv	a3,s2
     ae2:	8666                	mv	a2,s9
     ae4:	fa8ff0ef          	jal	ra,28c <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     ae8:	87aa                	mv	a5,a0
     aea:	4701                	li	a4,0
     aec:	fff98593          	addi	a1,s3,-1
     af0:	0eb74863          	blt	a4,a1,be0 <generate_keys+0x2c0>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     af4:	86d6                	mv	a3,s5
     af6:	875a                	mv	a4,s6
     af8:	8652                	mv	a2,s4
     afa:	3209                	jal	3fc <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     afc:	4795                	li	a5,5
     afe:	02f907b3          	mul	a5,s2,a5
     b02:	098a                	slli	s3,s3,0x2
     b04:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b06:	00001697          	auipc	a3,0x1
     b0a:	fa668693          	addi	a3,a3,-90 # 1aac <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     b0e:	0991                	addi	s3,s3,4
     b10:	0efc4063          	blt	s8,a5,bf0 <generate_keys+0x2d0>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     b14:	4699                	li	a3,6
     b16:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     b18:	00001617          	auipc	a2,0x1
     b1c:	f9460613          	addi	a2,a2,-108 # 1aac <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     b20:	02d906b3          	mul	a3,s2,a3
     b24:	02a90933          	mul	s2,s2,a0
     b28:	0cf6dc63          	bge	a3,a5,c00 <generate_keys+0x2e0>


    return_address5 = &random_keys[0];

    return return_address5;
}
     b2c:	e1040113          	addi	sp,s0,-496
     b30:	1ec12083          	lw	ra,492(sp)
     b34:	1e812403          	lw	s0,488(sp)
     b38:	1e412483          	lw	s1,484(sp)
     b3c:	1e012903          	lw	s2,480(sp)
     b40:	1dc12983          	lw	s3,476(sp)
     b44:	1d812a03          	lw	s4,472(sp)
     b48:	1d412a83          	lw	s5,468(sp)
     b4c:	1d012b03          	lw	s6,464(sp)
     b50:	1cc12b83          	lw	s7,460(sp)
     b54:	1c812c03          	lw	s8,456(sp)
     b58:	1c412c83          	lw	s9,452(sp)
     b5c:	1c012d03          	lw	s10,448(sp)
     b60:	00001517          	auipc	a0,0x1
     b64:	f4c50513          	addi	a0,a0,-180 # 1aac <random_keys>
     b68:	617d                	addi	sp,sp,496
     b6a:	8082                	ret
        polyR[i] = 0;
     b6c:	00279713          	slli	a4,a5,0x2
     b70:	9752                	add	a4,a4,s4
     b72:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     b76:	0785                	addi	a5,a5,1
     b78:	bdc5                	j	a68 <generate_keys+0x148>
        f[i] = 0;
     b7a:	00279713          	slli	a4,a5,0x2
     b7e:	e1840613          	addi	a2,s0,-488
     b82:	963a                	add	a2,a2,a4
     b84:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     b88:	ef440613          	addi	a2,s0,-268
     b8c:	9732                	add	a4,a4,a2
     b8e:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     b92:	0785                	addi	a5,a5,1
     b94:	bdf9                	j	a72 <generate_keys+0x152>
        random_keys[i] = f[i];
     b96:	00279713          	slli	a4,a5,0x2
     b9a:	e1840593          	addi	a1,s0,-488
     b9e:	00e68633          	add	a2,a3,a4
     ba2:	972e                	add	a4,a4,a1
     ba4:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     ba6:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     ba8:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     baa:	bdd9                	j	a80 <generate_keys+0x160>
        random_keys[i] = g[i-N];
     bac:	430c                	lw	a1,0(a4)
     bae:	00279693          	slli	a3,a5,0x2
     bb2:	96b2                	add	a3,a3,a2
     bb4:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     bb6:	0785                	addi	a5,a5,1
     bb8:	0711                	addi	a4,a4,4
     bba:	bdf9                	j	a98 <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
     bbc:	4110                	lw	a2,0(a0)
     bbe:	00279713          	slli	a4,a5,0x2
     bc2:	9736                	add	a4,a4,a3
     bc4:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     bc6:	0785                	addi	a5,a5,1
     bc8:	0511                	addi	a0,a0,4
     bca:	b5fd                	j	ab8 <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
     bcc:	00249793          	slli	a5,s1,0x2
     bd0:	00f706b3          	add	a3,a4,a5
     bd4:	96aa                	add	a3,a3,a0
     bd6:	4294                	lw	a3,0(a3)
     bd8:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     bda:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     bdc:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     bde:	bded                	j	ad8 <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
     be0:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     be2:	0705                	addi	a4,a4,1
     be4:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     be6:	037686b3          	mul	a3,a3,s7
     bea:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     bee:	b709                	j	af0 <generate_keys+0x1d0>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bf0:	ff89a603          	lw	a2,-8(s3)
     bf4:	002c1713          	slli	a4,s8,0x2
     bf8:	9736                	add	a4,a4,a3
     bfa:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     bfc:	0c05                	addi	s8,s8,1
     bfe:	bf01                	j	b0e <generate_keys+0x1ee>
        random_keys[i] = polyR[i-(5*N)];
     c00:	00279713          	slli	a4,a5,0x2
     c04:	00e605b3          	add	a1,a2,a4
     c08:	974a                	add	a4,a4,s2
     c0a:	9752                	add	a4,a4,s4
     c0c:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     c0e:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     c10:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     c12:	bf19                	j	b28 <generate_keys+0x208>

00000c14 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c14:	7115                	addi	sp,sp,-224
     c16:	cda2                	sw	s0,216(sp)
     c18:	cba6                	sw	s1,212(sp)
     c1a:	c9ca                	sw	s2,208(sp)
     c1c:	842a                	mv	s0,a0
     c1e:	892e                	mv	s2,a1
     c20:	84b2                	mv	s1,a2

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c22:	00000597          	auipc	a1,0x0
     c26:	46e58593          	addi	a1,a1,1134 # 1090 <_endtext>
     c2a:	0c000613          	li	a2,192
     c2e:	850a                	mv	a0,sp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c30:	cf86                	sw	ra,220(sp)
     c32:	c7ce                	sw	s3,204(sp)
     c34:	c5d2                	sw	s4,200(sp)
     c36:	89ba                	mv	s3,a4
     c38:	8a36                	mv	s4,a3
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c3a:	227d                	jal	de8 <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     c3c:	4781                	li	a5,0
     c3e:	860a                	mv	a2,sp
     c40:	874a                	mv	a4,s2
     c42:	03000693          	li	a3,48
     c46:	85a2                	mv	a1,s0
     c48:	8552                	mv	a0,s4
     c4a:	c66ff0ef          	jal	ra,b0 <polymult>
     c4e:	4781                	li	a5,0

    /////// PUBLIC_KEY*RANDOM_VALUE ///////

    for(i = 0; i < 48; ++i){
     c50:	0c000613          	li	a2,192
        temp[i] = temp[i] + message[i];
     c54:	00f506b3          	add	a3,a0,a5
     c58:	00f485b3          	add	a1,s1,a5
     c5c:	4298                	lw	a4,0(a3)
     c5e:	418c                	lw	a1,0(a1)
     c60:	0791                	addi	a5,a5,4
     c62:	972e                	add	a4,a4,a1
     c64:	c298                	sw	a4,0(a3)
    for(i = 0; i < 48; ++i){
     c66:	fec797e3          	bne	a5,a2,c54 <ntru_encyrpt+0x40>
    }

    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c6a:	00141493          	slli	s1,s0,0x1
     c6e:	00140693          	addi	a3,s0,1
     c72:	874a                	mv	a4,s2
     c74:	864e                	mv	a2,s3
     c76:	85a6                	mv	a1,s1
     c78:	f84ff0ef          	jal	ra,3fc <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     c7c:	478d                	li	a5,3
     c7e:	02f40433          	mul	s0,s0,a5
     c82:	87aa                	mv	a5,a0
     c84:	0084ca63          	blt	s1,s0,c98 <ntru_encyrpt+0x84>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
     c88:	40fe                	lw	ra,220(sp)
     c8a:	446e                	lw	s0,216(sp)
     c8c:	44de                	lw	s1,212(sp)
     c8e:	494e                	lw	s2,208(sp)
     c90:	49be                	lw	s3,204(sp)
     c92:	4a2e                	lw	s4,200(sp)
     c94:	612d                	addi	sp,sp,224
     c96:	8082                	ret
        CT[i-(2*N)] = CT[i];
     c98:	00249713          	slli	a4,s1,0x2
     c9c:	972a                	add	a4,a4,a0
     c9e:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     ca0:	0485                	addi	s1,s1,1
     ca2:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     ca4:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     ca8:	bff1                	j	c84 <ntru_encyrpt+0x70>

00000caa <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     caa:	7179                	addi	sp,sp,-48
     cac:	d422                	sw	s0,40(sp)
     cae:	ce4e                	sw	s3,28(sp)
     cb0:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     cb2:	498d                	li	s3,3
     cb4:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb8:	d04a                	sw	s2,32(sp)
     cba:	ca56                	sw	s5,20(sp)
     cbc:	c65e                	sw	s7,12(sp)
     cbe:	8932                	mv	s2,a2
     cc0:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc2:	863e                	mv	a2,a5
     cc4:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc6:	8aae                	mv	s5,a1
     cc8:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cca:	85a2                	mv	a1,s0
     ccc:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cce:	d606                	sw	ra,44(sp)
     cd0:	d226                	sw	s1,36(sp)
     cd2:	cc52                	sw	s4,24(sp)
     cd4:	c85a                	sw	s6,16(sp)
     cd6:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd8:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cdc:	db0ff0ef          	jal	ra,28c <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ce0:	00140b13          	addi	s6,s0,1
     ce4:	874a                	mv	a4,s2
     ce6:	86da                	mv	a3,s6
     ce8:	8652                	mv	a2,s4
     cea:	85a6                	mv	a1,s1
     cec:	f10ff0ef          	jal	ra,3fc <polydiv>
     cf0:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf2:	87aa                	mv	a5,a0
     cf4:	872a                	mv	a4,a0
     cf6:	86a6                	mv	a3,s1
     cf8:	0536c263          	blt	a3,s3,d3c <ntru_deceypt+0x92>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     cfc:	4589                	li	a1,2
     cfe:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     d02:	4701                	li	a4,0
     d04:	04874563          	blt	a4,s0,d4e <ntru_deceypt+0xa4>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     d08:	4701                	li	a4,0
     d0a:	86a2                	mv	a3,s0
     d0c:	85a2                	mv	a1,s0
     d0e:	855e                	mv	a0,s7
     d10:	d7cff0ef          	jal	ra,28c <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d14:	8756                	mv	a4,s5
     d16:	86da                	mv	a3,s6
     d18:	8652                	mv	a2,s4
     d1a:	85a6                	mv	a1,s1
     d1c:	ee0ff0ef          	jal	ra,3fc <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d20:	87aa                	mv	a5,a0
     d22:	0334cf63          	blt	s1,s3,d60 <ntru_deceypt+0xb6>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
     d26:	50b2                	lw	ra,44(sp)
     d28:	5422                	lw	s0,40(sp)
     d2a:	5492                	lw	s1,36(sp)
     d2c:	5902                	lw	s2,32(sp)
     d2e:	49f2                	lw	s3,28(sp)
     d30:	4a62                	lw	s4,24(sp)
     d32:	4ad2                	lw	s5,20(sp)
     d34:	4b42                	lw	s6,16(sp)
     d36:	4bb2                	lw	s7,12(sp)
     d38:	6145                	addi	sp,sp,48
     d3a:	8082                	ret
        a2[i-(2*N)] = a2[i];
     d3c:	00269593          	slli	a1,a3,0x2
     d40:	95b2                	add	a1,a1,a2
     d42:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d44:	0685                	addi	a3,a3,1
     d46:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     d48:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4c:	b775                	j	cf8 <ntru_deceypt+0x4e>
        if(a2[i] <= q/2)
     d4e:	4394                	lw	a3,0(a5)
     d50:	00d5d563          	bge	a1,a3,d5a <ntru_deceypt+0xb0>
            a2[i] = (-1)*(q-a2[i]);
     d54:	412686b3          	sub	a3,a3,s2
     d58:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     d5a:	0705                	addi	a4,a4,1
     d5c:	0791                	addi	a5,a5,4
     d5e:	b75d                	j	d04 <ntru_deceypt+0x5a>
        c2[i-(2*N)] = c2[i];
     d60:	00249713          	slli	a4,s1,0x2
     d64:	972a                	add	a4,a4,a0
     d66:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d68:	0485                	addi	s1,s1,1
     d6a:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     d6c:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d70:	bf4d                	j	d22 <ntru_deceypt+0x78>

00000d72 <default_exc_handler>:
  jal x0, default_exc_handler
     d72:	0000006f          	j	d72 <default_exc_handler>

00000d76 <reset_handler>:
  mv  x1, x0
     d76:	00000093          	li	ra,0
  mv  x2, x1
     d7a:	8106                	mv	sp,ra
  mv  x3, x1
     d7c:	8186                	mv	gp,ra
  mv  x4, x1
     d7e:	8206                	mv	tp,ra
  mv  x5, x1
     d80:	8286                	mv	t0,ra
  mv  x6, x1
     d82:	8306                	mv	t1,ra
  mv  x7, x1
     d84:	8386                	mv	t2,ra
  mv  x8, x1
     d86:	8406                	mv	s0,ra
  mv  x9, x1
     d88:	8486                	mv	s1,ra
  mv x10, x1
     d8a:	8506                	mv	a0,ra
  mv x11, x1
     d8c:	8586                	mv	a1,ra
  mv x12, x1
     d8e:	8606                	mv	a2,ra
  mv x13, x1
     d90:	8686                	mv	a3,ra
  mv x14, x1
     d92:	8706                	mv	a4,ra
  mv x15, x1
     d94:	8786                	mv	a5,ra
  mv x16, x1
     d96:	8806                	mv	a6,ra
  mv x17, x1
     d98:	8886                	mv	a7,ra
  mv x18, x1
     d9a:	8906                	mv	s2,ra
  mv x19, x1
     d9c:	8986                	mv	s3,ra
  mv x20, x1
     d9e:	8a06                	mv	s4,ra
  mv x21, x1
     da0:	8a86                	mv	s5,ra
  mv x22, x1
     da2:	8b06                	mv	s6,ra
  mv x23, x1
     da4:	8b86                	mv	s7,ra
  mv x24, x1
     da6:	8c06                	mv	s8,ra
  mv x25, x1
     da8:	8c86                	mv	s9,ra
  mv x26, x1
     daa:	8d06                	mv	s10,ra
  mv x27, x1
     dac:	8d86                	mv	s11,ra
  mv x28, x1
     dae:	8e06                	mv	t3,ra
  mv x29, x1
     db0:	8e86                	mv	t4,ra
  mv x30, x1
     db2:	8f06                	mv	t5,ra
  mv x31, x1
     db4:	8f86                	mv	t6,ra
  la   x2, _stack_start
     db6:	0000f117          	auipc	sp,0xf
     dba:	24a10113          	addi	sp,sp,586 # 10000 <_stack_start>

00000dbe <_start>:
  la x26, _bss_start
     dbe:	00000d17          	auipc	s10,0x0
     dc2:	456d0d13          	addi	s10,s10,1110 # 1214 <_bss_start>
  la x27, _bss_end
     dc6:	00001d97          	auipc	s11,0x1
     dca:	1e2d8d93          	addi	s11,s11,482 # 1fa8 <_bss_end>
  bge x26, x27, zero_loop_end
     dce:	01bd5763          	bge	s10,s11,ddc <main_entry>

00000dd2 <zero_loop>:
  sw x0, 0(x26)
     dd2:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
     dd6:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
     dd8:	ffaddde3          	bge	s11,s10,dd2 <zero_loop>

00000ddc <main_entry>:
  addi x10, x0, 0
     ddc:	00000513          	li	a0,0
  addi x11, x0, 0
     de0:	00000593          	li	a1,0
  jal x1, main
     de4:	18a000ef          	jal	ra,f6e <main>

00000de8 <memcpy>:
     de8:	00a5c7b3          	xor	a5,a1,a0
     dec:	8b8d                	andi	a5,a5,3
     dee:	00c508b3          	add	a7,a0,a2
     df2:	e7a1                	bnez	a5,e3a <memcpy+0x52>
     df4:	478d                	li	a5,3
     df6:	04c7f263          	bgeu	a5,a2,e3a <memcpy+0x52>
     dfa:	00357793          	andi	a5,a0,3
     dfe:	872a                	mv	a4,a0
     e00:	eba9                	bnez	a5,e52 <memcpy+0x6a>
     e02:	ffc8f613          	andi	a2,a7,-4
     e06:	fe060793          	addi	a5,a2,-32
     e0a:	06f76763          	bltu	a4,a5,e78 <memcpy+0x90>
     e0e:	02c77363          	bgeu	a4,a2,e34 <memcpy+0x4c>
     e12:	86ae                	mv	a3,a1
     e14:	87ba                	mv	a5,a4
     e16:	0006a803          	lw	a6,0(a3)
     e1a:	0791                	addi	a5,a5,4
     e1c:	0691                	addi	a3,a3,4
     e1e:	ff07ae23          	sw	a6,-4(a5)
     e22:	fec7eae3          	bltu	a5,a2,e16 <memcpy+0x2e>
     e26:	fff60793          	addi	a5,a2,-1
     e2a:	8f99                	sub	a5,a5,a4
     e2c:	9bf1                	andi	a5,a5,-4
     e2e:	0791                	addi	a5,a5,4
     e30:	973e                	add	a4,a4,a5
     e32:	95be                	add	a1,a1,a5
     e34:	01176663          	bltu	a4,a7,e40 <memcpy+0x58>
     e38:	8082                	ret
     e3a:	872a                	mv	a4,a0
     e3c:	ff157ee3          	bgeu	a0,a7,e38 <memcpy+0x50>
     e40:	0005c783          	lbu	a5,0(a1)
     e44:	0705                	addi	a4,a4,1
     e46:	0585                	addi	a1,a1,1
     e48:	fef70fa3          	sb	a5,-1(a4)
     e4c:	ff176ae3          	bltu	a4,a7,e40 <memcpy+0x58>
     e50:	8082                	ret
     e52:	0005c683          	lbu	a3,0(a1)
     e56:	0705                	addi	a4,a4,1
     e58:	00377793          	andi	a5,a4,3
     e5c:	fed70fa3          	sb	a3,-1(a4)
     e60:	0585                	addi	a1,a1,1
     e62:	d3c5                	beqz	a5,e02 <memcpy+0x1a>
     e64:	0005c683          	lbu	a3,0(a1)
     e68:	0705                	addi	a4,a4,1
     e6a:	00377793          	andi	a5,a4,3
     e6e:	fed70fa3          	sb	a3,-1(a4)
     e72:	0585                	addi	a1,a1,1
     e74:	fff9                	bnez	a5,e52 <memcpy+0x6a>
     e76:	b771                	j	e02 <memcpy+0x1a>
     e78:	41d4                	lw	a3,4(a1)
     e7a:	0005a283          	lw	t0,0(a1)
     e7e:	0085af83          	lw	t6,8(a1)
     e82:	00c5af03          	lw	t5,12(a1)
     e86:	0105ae83          	lw	t4,16(a1)
     e8a:	0145ae03          	lw	t3,20(a1)
     e8e:	0185a303          	lw	t1,24(a1)
     e92:	01c5a803          	lw	a6,28(a1)
     e96:	c354                	sw	a3,4(a4)
     e98:	5194                	lw	a3,32(a1)
     e9a:	00572023          	sw	t0,0(a4)
     e9e:	01f72423          	sw	t6,8(a4)
     ea2:	01e72623          	sw	t5,12(a4)
     ea6:	01d72823          	sw	t4,16(a4)
     eaa:	01c72a23          	sw	t3,20(a4)
     eae:	00672c23          	sw	t1,24(a4)
     eb2:	01072e23          	sw	a6,28(a4)
     eb6:	d314                	sw	a3,32(a4)
     eb8:	02470713          	addi	a4,a4,36
     ebc:	02458593          	addi	a1,a1,36
     ec0:	faf76ce3          	bltu	a4,a5,e78 <memcpy+0x90>
     ec4:	b7a9                	j	e0e <memcpy+0x26>

00000ec6 <memset>:
     ec6:	433d                	li	t1,15
     ec8:	872a                	mv	a4,a0
     eca:	02c37363          	bgeu	t1,a2,ef0 <memset+0x2a>
     ece:	00f77793          	andi	a5,a4,15
     ed2:	efbd                	bnez	a5,f50 <memset+0x8a>
     ed4:	e5ad                	bnez	a1,f3e <memset+0x78>
     ed6:	ff067693          	andi	a3,a2,-16
     eda:	8a3d                	andi	a2,a2,15
     edc:	96ba                	add	a3,a3,a4
     ede:	c30c                	sw	a1,0(a4)
     ee0:	c34c                	sw	a1,4(a4)
     ee2:	c70c                	sw	a1,8(a4)
     ee4:	c74c                	sw	a1,12(a4)
     ee6:	0741                	addi	a4,a4,16
     ee8:	fed76be3          	bltu	a4,a3,ede <memset+0x18>
     eec:	e211                	bnez	a2,ef0 <memset+0x2a>
     eee:	8082                	ret
     ef0:	40c306b3          	sub	a3,t1,a2
     ef4:	068a                	slli	a3,a3,0x2
     ef6:	00000297          	auipc	t0,0x0
     efa:	9696                	add	a3,a3,t0
     efc:	00a68067          	jr	10(a3)
     f00:	00b70723          	sb	a1,14(a4)
     f04:	00b706a3          	sb	a1,13(a4)
     f08:	00b70623          	sb	a1,12(a4)
     f0c:	00b705a3          	sb	a1,11(a4)
     f10:	00b70523          	sb	a1,10(a4)
     f14:	00b704a3          	sb	a1,9(a4)
     f18:	00b70423          	sb	a1,8(a4)
     f1c:	00b703a3          	sb	a1,7(a4)
     f20:	00b70323          	sb	a1,6(a4)
     f24:	00b702a3          	sb	a1,5(a4)
     f28:	00b70223          	sb	a1,4(a4)
     f2c:	00b701a3          	sb	a1,3(a4)
     f30:	00b70123          	sb	a1,2(a4)
     f34:	00b700a3          	sb	a1,1(a4)
     f38:	00b70023          	sb	a1,0(a4)
     f3c:	8082                	ret
     f3e:	0ff5f593          	andi	a1,a1,255
     f42:	00859693          	slli	a3,a1,0x8
     f46:	8dd5                	or	a1,a1,a3
     f48:	01059693          	slli	a3,a1,0x10
     f4c:	8dd5                	or	a1,a1,a3
     f4e:	b761                	j	ed6 <memset+0x10>
     f50:	00279693          	slli	a3,a5,0x2
     f54:	00000297          	auipc	t0,0x0
     f58:	9696                	add	a3,a3,t0
     f5a:	8286                	mv	t0,ra
     f5c:	fa8680e7          	jalr	-88(a3)
     f60:	8096                	mv	ra,t0
     f62:	17c1                	addi	a5,a5,-16
     f64:	8f1d                	sub	a4,a4,a5
     f66:	963e                	add	a2,a2,a5
     f68:	f8c374e3          	bgeu	t1,a2,ef0 <memset+0x2a>
     f6c:	b7a5                	j	ed4 <memset+0xe>

00000f6e <main>:

int main(){
     f6e:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f72:	0c000613          	li	a2,192
     f76:	00000597          	auipc	a1,0x0
     f7a:	1da58593          	addi	a1,a1,474 # 1150 <_endtext+0xc0>
     f7e:	0068                	addi	a0,sp,12
int main(){
     f80:	42112623          	sw	ra,1068(sp)
     f84:	42812423          	sw	s0,1064(sp)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f88:	3585                	jal	de8 <memcpy>

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    keys = generate_keys(N, p, q);
     f8a:	06500613          	li	a2,101
     f8e:	458d                	li	a1,3
     f90:	03500513          	li	a0,53
     f94:	3271                	jal	920 <generate_keys>
     f96:	4781                	li	a5,0


   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
     f98:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
     f9c:	00f506b3          	add	a3,a0,a5
     fa0:	4290                	lw	a2,0(a3)
     fa2:	1314                	addi	a3,sp,416
     fa4:	96be                	add	a3,a3,a5
     fa6:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
     fa8:	0791                	addi	a5,a5,4
     faa:	fee799e3          	bne	a5,a4,f9c <main+0x2e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
     fae:	1cd8                	addi	a4,sp,628
     fb0:	1a850793          	addi	a5,a0,424
     fb4:	27c50693          	addi	a3,a0,636
     fb8:	843a                	mv	s0,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
     fba:	4390                	lw	a2,0(a5)
     fbc:	0791                	addi	a5,a5,4
     fbe:	0711                	addi	a4,a4,4
     fc0:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
     fc4:	fed79be3          	bne	a5,a3,fba <main+0x4c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
     fc8:	01f8                	addi	a4,sp,204
     fca:	35050793          	addi	a5,a0,848
     fce:	42450613          	addi	a2,a0,1060
     fd2:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
     fd4:	438c                	lw	a1,0(a5)
     fd6:	0791                	addi	a5,a5,4
     fd8:	0711                	addi	a4,a4,4
     fda:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
     fde:	fec79be3          	bne	a5,a2,fd4 <main+0x66>
     fe2:	06b0                	addi	a2,sp,840
     fe4:	4fc50513          	addi	a0,a0,1276
     fe8:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
     fea:	4398                	lw	a4,0(a5)
     fec:	0791                	addi	a5,a5,4
     fee:	0611                	addi	a2,a2,4
     ff0:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
     ff4:	fea79be3          	bne	a5,a0,fea <main+0x7c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ff8:	8742                	mv	a4,a6
     ffa:	0070                	addi	a2,sp,12
     ffc:	06500593          	li	a1,101
    1000:	03500513          	li	a0,53
    1004:	3901                	jal	c14 <ntru_encyrpt>
    1006:	87aa                	mv	a5,a0
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1008:	34810813          	addi	a6,sp,840
    100c:	8722                	mv	a4,s0
    100e:	06500613          	li	a2,101
    1012:	1314                	addi	a3,sp,416
    1014:	458d                	li	a1,3
    1016:	03500513          	li	a0,53
    101a:	3941                	jal	caa <ntru_deceypt>
            resultkon[0] = 0xBABABABA;
 	    *var = resultkon[0];
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    101c:	dedee637          	lui	a2,0xdedee
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1020:	4781                	li	a5,0
    1022:	00001717          	auipc	a4,0x1
    1026:	f8270713          	addi	a4,a4,-126 # 1fa4 <resultkon>
            resultkon[0] = 0xDEDEDEDE;
    102a:	ede60613          	addi	a2,a2,-290 # dededede <_stack_start+0xdedddede>
	    *var = resultkon[0];
    102e:	68c1                	lui	a7,0x10
    for(i = 0; i < 32; ++i){
    1030:	08000813          	li	a6,128
        if(!(message[i] == Dec_Message[i])){
    1034:	006c                	addi	a1,sp,12
    1036:	00f506b3          	add	a3,a0,a5
    103a:	95be                	add	a1,a1,a5
    103c:	418c                	lw	a1,0(a1)
    103e:	4294                	lw	a3,0(a3)
    1040:	02d58563          	beq	a1,a3,106a <main+0xfc>
            resultkon[0] = 0xBABABABA;
    1044:	babac7b7          	lui	a5,0xbabac
    1048:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    104c:	c31c                	sw	a5,0(a4)
 	    *var = resultkon[0];
    104e:	431c                	lw	a5,0(a4)
    1050:	6741                	lui	a4,0x10
    1052:	0ff7f793          	andi	a5,a5,255
    1056:	fef70fa3          	sb	a5,-1(a4) # ffff <_stack+0x1fff>
    //printf("RESULT = %d\n",resultkon[0]);
   // printf("Time Result = %f clocks\n",cpu_time_used);


    return 0;
}
    105a:	42c12083          	lw	ra,1068(sp)
    105e:	42812403          	lw	s0,1064(sp)
    1062:	4501                	li	a0,0
    1064:	43010113          	addi	sp,sp,1072
    1068:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    106a:	c310                	sw	a2,0(a4)
	    *var = resultkon[0];
    106c:	4314                	lw	a3,0(a4)
    106e:	0791                	addi	a5,a5,4
    1070:	0ff6f693          	andi	a3,a3,255
    1074:	fed88fa3          	sb	a3,-1(a7) # ffff <_stack+0x1fff>
    for(i = 0; i < 32; ++i){
    1078:	fb079ee3          	bne	a5,a6,1034 <main+0xc6>
    107c:	bff9                	j	105a <main+0xec>

0000107e <__CTOR_LIST__>:
	...

00001086 <__CTOR_END__>:
	...

0000108e <__DTOR_END__>:
	...

Disassembly of section .rodata:

00001090 <.rodata>:
    1090:	0001                	nop
    1092:	0000                	unimp
    1094:	ffff                	0xffff
    1096:	ffff                	0xffff
    1098:	0000                	unimp
    109a:	0000                	unimp
    109c:	0001                	nop
    109e:	0000                	unimp
    10a0:	ffff                	0xffff
    10a2:	ffff                	0xffff
    10a4:	0001                	nop
    10a6:	0000                	unimp
    10a8:	ffff                	0xffff
    10aa:	ffff                	0xffff
    10ac:	0000                	unimp
    10ae:	0000                	unimp
    10b0:	0001                	nop
    10b2:	0000                	unimp
    10b4:	0001                	nop
    10b6:	0000                	unimp
    10b8:	0000                	unimp
    10ba:	0000                	unimp
    10bc:	ffff                	0xffff
    10be:	ffff                	0xffff
    10c0:	0001                	nop
    10c2:	0000                	unimp
    10c4:	ffff                	0xffff
    10c6:	ffff                	0xffff
    10c8:	0001                	nop
    10ca:	0000                	unimp
    10cc:	0000                	unimp
    10ce:	0000                	unimp
    10d0:	0001                	nop
    10d2:	0000                	unimp
    10d4:	0001                	nop
    10d6:	0000                	unimp
    10d8:	0000                	unimp
    10da:	0000                	unimp
    10dc:	ffff                	0xffff
    10de:	ffff                	0xffff
    10e0:	0001                	nop
    10e2:	0000                	unimp
    10e4:	ffff                	0xffff
    10e6:	ffff                	0xffff
    10e8:	0001                	nop
    10ea:	0000                	unimp
    10ec:	0000                	unimp
    10ee:	0000                	unimp
    10f0:	0001                	nop
    10f2:	0000                	unimp
    10f4:	0001                	nop
    10f6:	0000                	unimp
    10f8:	0000                	unimp
    10fa:	0000                	unimp
    10fc:	0001                	nop
    10fe:	0000                	unimp
    1100:	ffff                	0xffff
    1102:	ffff                	0xffff
    1104:	0001                	nop
    1106:	0000                	unimp
    1108:	ffff                	0xffff
    110a:	ffff                	0xffff
    110c:	0000                	unimp
    110e:	0000                	unimp
    1110:	0001                	nop
    1112:	0000                	unimp
    1114:	ffff                	0xffff
    1116:	ffff                	0xffff
    1118:	0000                	unimp
    111a:	0000                	unimp
    111c:	0001                	nop
    111e:	0000                	unimp
    1120:	ffff                	0xffff
    1122:	ffff                	0xffff
    1124:	0001                	nop
    1126:	0000                	unimp
    1128:	ffff                	0xffff
    112a:	ffff                	0xffff
    112c:	0000                	unimp
    112e:	0000                	unimp
    1130:	0001                	nop
    1132:	0000                	unimp
    1134:	0001                	nop
    1136:	0000                	unimp
    1138:	0000                	unimp
    113a:	0000                	unimp
    113c:	ffff                	0xffff
    113e:	ffff                	0xffff
    1140:	0001                	nop
    1142:	0000                	unimp
    1144:	ffff                	0xffff
    1146:	ffff                	0xffff
    1148:	0001                	nop
    114a:	0000                	unimp
    114c:	0000                	unimp
    114e:	0000                	unimp
    1150:	0001                	nop
    1152:	0000                	unimp
    1154:	0001                	nop
    1156:	0000                	unimp
    1158:	0002                	c.slli64	zero
    115a:	0000                	unimp
    115c:	0001                	nop
    115e:	0000                	unimp
    1160:	0001                	nop
    1162:	0000                	unimp
    1164:	0001                	nop
    1166:	0000                	unimp
    1168:	0001                	nop
    116a:	0000                	unimp
    116c:	0002                	c.slli64	zero
    116e:	0000                	unimp
    1170:	0001                	nop
    1172:	0000                	unimp
    1174:	0001                	nop
    1176:	0000                	unimp
    1178:	0000                	unimp
    117a:	0000                	unimp
    117c:	0001                	nop
    117e:	0000                	unimp
    1180:	0001                	nop
    1182:	0000                	unimp
    1184:	0002                	c.slli64	zero
    1186:	0000                	unimp
    1188:	0001                	nop
    118a:	0000                	unimp
    118c:	0000                	unimp
    118e:	0000                	unimp
    1190:	0001                	nop
    1192:	0000                	unimp
    1194:	0002                	c.slli64	zero
    1196:	0000                	unimp
    1198:	0000                	unimp
    119a:	0000                	unimp
    119c:	0001                	nop
    119e:	0000                	unimp
    11a0:	0001                	nop
    11a2:	0000                	unimp
    11a4:	0001                	nop
    11a6:	0000                	unimp
    11a8:	0001                	nop
    11aa:	0000                	unimp
    11ac:	0000                	unimp
    11ae:	0000                	unimp
    11b0:	0001                	nop
    11b2:	0000                	unimp
    11b4:	0001                	nop
    11b6:	0000                	unimp
    11b8:	0000                	unimp
    11ba:	0000                	unimp
    11bc:	0002                	c.slli64	zero
    11be:	0000                	unimp
    11c0:	0001                	nop
    11c2:	0000                	unimp
    11c4:	0002                	c.slli64	zero
    11c6:	0000                	unimp
    11c8:	0001                	nop
    11ca:	0000                	unimp
    11cc:	0000                	unimp
    11ce:	0000                	unimp
    11d0:	0001                	nop
    11d2:	0000                	unimp
    11d4:	0001                	nop
    11d6:	0000                	unimp
    11d8:	0002                	c.slli64	zero
    11da:	0000                	unimp
    11dc:	0001                	nop
    11de:	0000                	unimp
    11e0:	0001                	nop
    11e2:	0000                	unimp
    11e4:	0001                	nop
    11e6:	0000                	unimp
    11e8:	0001                	nop
    11ea:	0000                	unimp
    11ec:	0002                	c.slli64	zero
    11ee:	0000                	unimp
    11f0:	0001                	nop
    11f2:	0000                	unimp
    11f4:	0001                	nop
    11f6:	0000                	unimp
    11f8:	0002                	c.slli64	zero
    11fa:	0000                	unimp
    11fc:	0001                	nop
    11fe:	0000                	unimp
    1200:	0001                	nop
    1202:	0000                	unimp
    1204:	0001                	nop
    1206:	0000                	unimp
    1208:	0001                	nop
    120a:	0000                	unimp
    120c:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

00001210 <var>:
volatile uint8_t *var = (volatile uint8_t *) 0x0000c010;
    1210:	c010                	sw	a2,0(s0)
	...

Disassembly of section .bss:

00001214 <_bss_start>:
	...

0000146c <product2>:
	...

000016c4 <result>:
	...

0000191c <ti_2>:
	...

00001aac <random_keys>:
	...

00001fa4 <resultkon>:
volatile int resultkon[1];
    1fa4:	0000                	unimp
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	1ad8                	addi	a4,sp,372
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05f9                	addi	a1,a1,30
       e:	0000                	unimp
      10:	420c                	lw	a1,0(a2)
      12:	8f000003          	lb	zero,-1808(zero) # fffff8f0 <_stack_start+0xfffef8f0>
      16:	0004                	0x4
      18:	1800                	addi	s0,sp,48
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	0435                	addi	s0,s0,13
      2a:	0000                	unimp
      2c:	00003c03          	0x3c03
      30:	0200                	addi	s0,sp,256
      32:	0038182b          	0x38182b
      36:	0000                	unimp
      38:	0102                	c.slli64	sp
      3a:	3308                	fld	fa0,32(a4)
      3c:	0004                	0x4
      3e:	0200                	addi	s0,sp,256
      40:	0502                	c.slli64	a0
      42:	0454                	addi	a3,sp,516
      44:	0000                	unimp
      46:	0202                	c.slli64	tp
      48:	0002d307          	0x2d307
      4c:	0200                	addi	s0,sp,256
      4e:	0504                	addi	s1,sp,640
      50:	0105                	addi	sp,sp,1
      52:	0000                	unimp
      54:	0402                	c.slli64	s0
      56:	00008207          	0x8207
      5a:	0200                	addi	s0,sp,256
      5c:	0508                	addi	a0,sp,640
      5e:	0100                	addi	s0,sp,128
      60:	0000                	unimp
      62:	0802                	c.slli64	a6
      64:	00007d07          	0x7d07
      68:	0400                	addi	s0,sp,512
      6a:	0504                	addi	s1,sp,640
      6c:	6e69                	lui	t3,0x1a
      6e:	0074                	addi	a3,sp,12
      70:	6905                	lui	s2,0x1
      72:	0000                	unimp
      74:	0200                	addi	s0,sp,256
      76:	0704                	addi	s1,sp,896
      78:	00000087          	0x87
  jal x0, default_exc_handler
      7c:	1002                	c.slli	zero,0x20
      7e:	9604                	0x9604
  jal x0, reset_handler
      80:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
  jal x0, default_exc_handler
      84:	0316                	slli	t1,t1,0x5
      86:	0000                	unimp
  jal x0, default_exc_handler
      88:	17015e03          	lhu	t3,368(sp)
    asm volatile(
      8c:	0075                	c.nop	29
      8e:	0000                	unimp
}
      90:	0003e703          	0x3e703
    for(i=0;i<(length/3);i++) {
      94:	0400                	addi	s0,sp,512
      96:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      98:	004d                	c.nop	19
    for(i=0;i<(length/3);i++) {
      9a:	0000                	unimp
      9c:	00057603          	0x57603
}
      a0:	0400                	addi	s0,sp,512
    asm volatile(
      a2:	0e74                	addi	a3,sp,796
      a4:	004d                	c.nop	19
      a6:	0000                	unimp
      a8:	00068f03          	lb	t5,0(a3)
    for(i=0;i<(length/3);i++) {
      ac:	0400                	addi	s0,sp,512
      ae:	00691793          	slli	a5,s2,0x6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b2:	0000                	unimp
      b4:	a5040407          	0xa5040407
      b8:	0000d603          	lhu	a2,0(ra)
    int line[size_b][size_a + size_b];
      bc:	0800                	addi	s0,sp,16
      be:	0310                	addi	a2,sp,384
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      c0:	0000                	unimp
      c2:	a704                	fsd	fs1,8(a4)
    int line[size_b][size_a + size_b];
      c4:	830c                	0x830c
      c6:	0000                	unimp
      c8:	0800                	addi	s0,sp,16
      ca:	00000237          	lui	tp,0x0
      ce:	a804                	fsd	fs1,16(s0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d0:	0000d613          	srli	a2,ra,0x0
      d4:	0000                	unimp
      d6:	3809                	jal	fffff8e8 <_stack_start+0xfffef8e8>
      d8:	0000                	unimp
      da:	e600                	fsw	fs0,8(a2)
      dc:	0000                	unimp
      de:	0a00                	addi	s0,sp,272
      e0:	0075                	c.nop	29
    int line[size_b][size_a + size_b];
      e2:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      e4:	080b0003          	lb	zero,128(s6)
    int line[size_b][size_a + size_b];
      e8:	a204                	fsd	fs1,0(a2)
      ea:	0a09                	addi	s4,s4,2
    int pola[size_a];
      ec:	0001                	nop
      ee:	0c00                	addi	s0,sp,528
      f0:	0560                	addi	s0,sp,652
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      f2:	0000                	unimp
    int line[size_b][size_a + size_b];
      f4:	a404                	fsd	fs1,8(s0)
      f6:	00006907          	0x6907
    int polb[size_b];
      fa:	0000                	unimp
      fc:	680c                	flw	fa1,16(s0)
    int line[size_b][size_a + size_b];
      fe:	0005                	c.nop	1
    int polb[size_b];
     100:	0400                	addi	s0,sp,512
    int pola[size_a];
     102:	05a9                	addi	a1,a1,10
     104:	00b4                	addi	a3,sp,72
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     106:	0000                	unimp
     108:	0004                	0x4
    int pola[size_a];
     10a:	00048403          	lb	s0,0(s1)
            line[i][j] = 0;
     10e:	0400                	addi	s0,sp,512
    int polb[size_b];
     110:	03aa                	slli	t2,t2,0xa
     112:	00e6                	slli	ra,ra,0x19
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     114:	0000                	unimp
    int pola[size_a];
     116:	040d                	addi	s0,s0,3
     118:	0005cc03          	lbu	s8,0(a1)
            line[i][j] = 0;
     11c:	0500                	addi	s0,sp,640
     11e:	1916                	slli	s2,s2,0x25
     120:	0054                	addi	a3,sp,4
    for (i = 0; i < size_b; ++i){
     122:	0000                	unimp
     124:	00041703          	lh	a4,0(s0)
            product[j] = 0;
     128:	0600                	addi	s0,sp,768
     12a:	0d0c                	addi	a1,sp,656
     12c:	0069                	c.nop	26
    for (i = 0; i < size_b; ++i){
     12e:	0000                	unimp
     130:	0001ef03          	0x1ef03
    for (i = 0; i < size_a; ++i){
     134:	0500                	addi	s0,sp,640
     136:	01241b23          	sh	s2,22(s0)
	array_mod(pola,mod,size_a);
     13a:	0000                	unimp
     13c:	000e                	c.slli	zero,0x3
     13e:	0002                	c.slli64	zero
     140:	1800                	addi	s0,sp,48
     142:	3405                	jal	fffffb62 <_stack_start+0xfffefb62>
    for (i = 0; i < size_b; ++i){
     144:	9608                	0x9608
     146:	0001                	nop
     148:	0c00                	addi	s0,sp,528
     14a:	04f4                	addi	a3,sp,588
     14c:	0000                	unimp
	array_mod(polb,mod,size_b);
     14e:	3605                	jal	fffffc6e <_stack_start+0xfffefc6e>
     150:	00019613          	slli	a2,gp,0x0
     154:	0000                	unimp
    if(star_mult == 1){
     156:	006b5f0f          	0x6b5f0f
     15a:	3705                	jal	7a <__DYNAMIC+0x7a>
     15c:	00006907          	0x6907
     160:	0400                	addi	s0,sp,512
     162:	3c0c                	fld	fa1,56(s0)
     164:	0005                	c.nop	1
     166:	0500                	addi	s0,sp,640
     168:	00690b37          	lui	s6,0x690
        for (j = size_b -1; j >= 0; j = j-1){
     16c:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     16e:	0c08                	addi	a0,sp,528
     170:	01e9                	addi	gp,gp,26
            product[j] = 0;
     172:	0000                	unimp
     174:	3705                	jal	94 <array_mod+0x2>
     176:	6914                	flw	fa3,16(a0)
            line[i][j] = 0;
     178:	0000                	unimp
     17a:	0c00                	addi	s0,sp,528
            product[j] = 0;
     17c:	6d0c                	flw	fa1,24(a0)
     17e:	0006                	c.slli	zero,0x1
        for(j = 0; j < size_a + size_b -1; ++j){
     180:	0500                	addi	s0,sp,640
     182:	00691b37          	lui	s6,0x691
     186:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     188:	0f10                	addi	a2,sp,912
     18a:	785f 0500 0b38      	0xb380500785f
        for(j = 0; j < size_a + size_b -1; ++j){
     190:	019c                	addi	a5,sp,192
     192:	0000                	unimp
        pola[i] = a[i];
     194:	0014                	0x14
     196:	0410                	addi	a2,sp,512
     198:	013c                	addi	a5,sp,136
     19a:	0000                	unimp
     19c:	1809                	addi	a6,a6,-30
     19e:	0001                	nop
    for (i = 0; i < size_a; ++i){
     1a0:	ac00                	fsd	fs0,24(s0)
        pola[i] = a[i];
     1a2:	0001                	nop
     1a4:	0a00                	addi	s0,sp,272
    for (i = 0; i < size_a; ++i){
     1a6:	0075                	c.nop	29
        polb[i] = b[i];
     1a8:	0000                	unimp
     1aa:	0000                	unimp
     1ac:	270e                	fld	fa4,192(sp)
     1ae:	0002                	c.slli64	zero
     1b0:	2400                	fld	fs0,8(s0)
     1b2:	3c05                	jal	fffffbe2 <_stack_start+0xfffefbe2>
    for (i = 0; i < size_b; ++i){
     1b4:	2f08                	fld	fa0,24(a4)
        polb[i] = b[i];
     1b6:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     1b8:	0c00                	addi	s0,sp,528
    if(star_mult == 1){
     1ba:	000000f7          	0xf7
        for (j = size_b -1; j >= 0; j = j-1){
     1be:	3e05                	jal	fffffcee <_stack_start+0xfffefcee>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1c0:	6909                	lui	s2,0x2
    for (i = 0; i < size_b; ++i){
     1c2:	0000                	unimp
     1c4:	0000                	unimp
     1c6:	850c                	0x850c
     1c8:	0005                	c.nop	1
     1ca:	0500                	addi	s0,sp,640
     1cc:	0069093f 0c040000 	0xc0400000069093f
    array_mod(product,mod,size_a+size_b-1);
     1d4:	0134                	addi	a3,sp,136
     1d6:	0000                	unimp
     1d8:	4005                	c.li	zero,1
     1da:	6909                	lui	s2,0x2
     1dc:	0000                	unimp
     1de:	0800                	addi	s0,sp,16
     1e0:	0b0c                	addi	a1,sp,400
}
     1e2:	05000007          	0x5000007
     1e6:	0941                	addi	s2,s2,16
     1e8:	0069                	c.nop	26
     1ea:	0000                	unimp
     1ec:	0c0c                	addi	a1,sp,528
     1ee:	03b1                	addi	t2,t2,12
     1f0:	0000                	unimp
     1f2:	4205                	li	tp,1
     1f4:	6909                	lui	s2,0x2
     1f6:	0000                	unimp
     1f8:	1000                	addi	s0,sp,32
     1fa:	730c                	flw	fa1,32(a4)
     1fc:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
     200:	00690943          	fmadd.s	fs2,fs2,ft6,ft0,rne
     204:	0000                	unimp
     206:	0c14                	addi	a3,sp,528
     208:	0672                	slli	a2,a2,0x1c
     20a:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     20c:	4405                	li	s0,1
     20e:	6909                	lui	s2,0x2
     210:	0000                	unimp
     212:	1800                	addi	s0,sp,48
     214:	5e0c                	lw	a1,56(a2)
     216:	0004                	0x4
     218:	0500                	addi	s0,sp,640
     21a:	0945                	addi	s2,s2,17
            for (k = size_a-1; k >= 0; k = k-1 ){
     21c:	0069                	c.nop	26
                line[size_b-1-j][k] = pola[k]*polb[j];
     21e:	0000                	unimp
     220:	0c1c                	addi	a5,sp,528
     222:	06cd                	addi	a3,a3,19
            for (k = size_a-1; k >= 0; k = k-1 ){
     224:	0000                	unimp
     226:	4605                	li	a2,1
        for (j = size_b -1; j >= 0; j = j-1){
     228:	6909                	lui	s2,0x2
     22a:	0000                	unimp
     22c:	2000                	fld	fs0,0(s0)
     22e:	1100                	addi	s0,sp,160
            for (k = size_a-1; k >= 0; k = k-1 ){
     230:	00000143          	fmadd.s	ft2,ft0,ft0,ft0,rne
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     234:	0108                	addi	a0,sp,128
     236:	4f05                	li	t5,1
     238:	7408                	flw	fa0,40(s0)
     23a:	0002                	c.slli64	zero
     23c:	0c00                	addi	s0,sp,528
     23e:	000001cf          	fnmadd.s	ft3,ft0,ft0,ft0,rne
     242:	5005                	c.li	zero,-31
            for (k = size_a-1; k >= 0; k = k-1 ){
     244:	740a                	flw	fs0,160(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     246:	0002                	c.slli64	zero
     248:	0000                	unimp
     24a:	000c                	0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
     24c:	0000                	unimp
     24e:	0500                	addi	s0,sp,640
        for (j = size_b -1; j >= 0; j = j-1){
     250:	0951                	addi	s2,s2,20
     252:	0274                	addi	a3,sp,268
     254:	0000                	unimp
     256:	1280                	addi	s0,sp,352
        array_mod(line[i],mod,(size_a+size_b-1));
     258:	05b0                	addi	a2,sp,712
     25a:	0000                	unimp
     25c:	5305                	li	t1,-31
     25e:	180a                	slli	a6,a6,0x22
    for (i = 0; i < size_b; ++i){
     260:	0001                	nop
     262:	0000                	unimp
     264:	1201                	addi	tp,tp,-32
            product[j] += line[i][j];
     266:	0172                	slli	sp,sp,0x1c
     268:	0000                	unimp
     26a:	5605                	li	a2,-31
     26c:	180a                	slli	a6,a6,0x22
     26e:	0001                	nop
        for(i = 0; i < size_b; ++i){
     270:	0400                	addi	s0,sp,512
            product[j] += line[i][j];
     272:	0001                	nop
     274:	1609                	addi	a2,a2,-30
     276:	0001                	nop
     278:	8400                	0x8400
     27a:	0002                	c.slli64	zero
     27c:	0a00                	addi	s0,sp,272
        for(i = 0; i < size_b; ++i){
     27e:	0075                	c.nop	29
     280:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     282:	001f ca11 0003      	0x3ca11001f
        for(i = 0; i < size_b; ++i){
     288:	9000                	0x9000
     28a:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     28c:	0862                	slli	a6,a6,0x18
     28e:	000002c7          	fmsub.s	ft5,ft0,ft0,ft0,rne
     292:	f40c                	fsw	fa1,40(s0)
     294:	0004                	0x4
     296:	0500                	addi	s0,sp,640
     298:	02c71263          	bne	a4,a2,2bc <polymult2+0x30>
     29c:	0000                	unimp
     29e:	0c00                	addi	s0,sp,528
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2a0:	050c                	addi	a1,sp,640
     2a2:	0000                	unimp
     2a4:	6405                	lui	s0,0x1
     2a6:	6906                	flw	fs2,64(sp)
     2a8:	0000                	unimp
     2aa:	0400                	addi	s0,sp,512
     2ac:	e40c                	fsw	fa1,8(s0)
     2ae:	0001                	nop
     2b0:	0500                	addi	s0,sp,640
    int line[size_b][size_a + size_b];
     2b2:	0966                	slli	s2,s2,0x19
     2b4:	02cd                	addi	t0,t0,19
     2b6:	0000                	unimp
     2b8:	0c08                	addi	a0,sp,528
    int pola[size_a];
     2ba:	00000143          	fmadd.s	ft2,ft0,ft0,ft0,rne
     2be:	6705                	lui	a4,0x1
     2c0:	2f1e                	fld	ft10,448(sp)
    int line[size_b][size_a + size_b];
     2c2:	0002                	c.slli64	zero
    int pola[size_a];
     2c4:	8800                	0x8800
     2c6:	1000                	addi	s0,sp,32
    int polb[size_b];
     2c8:	8404                	0x8404
     2ca:	0002                	c.slli64	zero
     2cc:	0900                	addi	s0,sp,144
    int pola[size_a];
     2ce:	02dd                	addi	t0,t0,23
    int polb[size_b];
     2d0:	0000                	unimp
     2d2:	02dd                	addi	t0,t0,23
    int line[size_b][size_a + size_b];
     2d4:	0000                	unimp
     2d6:	750a                	flw	fa0,160(sp)
    int pola[size_a];
     2d8:	0000                	unimp
     2da:	1f00                	addi	s0,sp,944
    int polb[size_b];
     2dc:	1000                	addi	s0,sp,32
            line[i][j] = 0;
     2de:	e304                	fsw	fs1,0(a4)
     2e0:	0002                	c.slli64	zero
     2e2:	1300                	addi	s0,sp,416
    for (i = 0; i < size_b; ++i){
     2e4:	680e                	flw	fa6,192(sp)
     2e6:	0004                	0x4
            product2[j] = 0;
     2e8:	0800                	addi	s0,sp,16
     2ea:	7a05                	lui	s4,0xfffe1
     2ec:	0c08                	addi	a0,sp,528
     2ee:	0c000003          	lb	zero,192(zero) # c0 <polymult+0x10>
    for (i = 0; i < size_b; ++i){
     2f2:	012e                	slli	sp,sp,0xb
    for(i = 0; i < size_a; ++i){
     2f4:	0000                	unimp
     2f6:	7b05                	lui	s6,0xfffe1
     2f8:	0c11                	addi	s8,s8,4
    for(i = 0; i < size_b; ++i){
     2fa:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
     2fe:	110c                	addi	a1,sp,160
    if(star_mult == 1){
     300:	0000                	unimp
     302:	0500                	addi	s0,sp,640
     304:	067c                	addi	a5,sp,780
     306:	0069                	c.nop	26
     308:	0000                	unimp
     30a:	0004                	0x4
     30c:	0410                	addi	a2,sp,512
        for (j = size_b -1; j >= 0; j = j-1){
     30e:	0038                	addi	a4,sp,8
     310:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     312:	170e                	slli	a4,a4,0x23
     314:	0000                	unimp
            product2[j] = 0;
     316:	6800                	flw	fs0,16(s0)
     318:	ba05                	j	fffffc48 <_stack_start+0xfffefc48>
     31a:	5508                	lw	a0,40(a0)
            line[i][j] = 0;
     31c:	0004                	0x4
     31e:	0f00                	addi	s0,sp,912
            product2[j] = 0;
     320:	705f 0500 12bb      	0x12bb0500705f
        for(j = 0; j < size_a + size_b -1; ++j){
     326:	030c                	addi	a1,sp,384
     328:	0000                	unimp
     32a:	0f00                	addi	s0,sp,912
    for (i = 0; i < size_b; ++i){
     32c:	725f 0500 07bc      	0x7bc0500725f
     332:	0069                	c.nop	26
        for(j = 0; j < size_a + size_b -1; ++j){
     334:	0000                	unimp
     336:	0f04                	addi	s1,sp,912
        pola[i] = a[i];
     338:	775f 0500 07bd      	0x7bd0500775f
     33e:	0069                	c.nop	26
     340:	0000                	unimp
     342:	0c08                	addi	a0,sp,528
    for(i = 0; i < size_a; ++i){
     344:	0000016b          	0x16b
        pola[i] = a[i];
     348:	be05                	j	fffffe78 <_stack_start+0xfffefe78>
    for(i = 0; i < size_a; ++i){
     34a:	3f09                	jal	25c <polymult+0x1ac>
        polb[i] = b[i];
     34c:	0000                	unimp
     34e:	0c00                	addi	s0,sp,528
     350:	660c                	flw	fa1,8(a2)
     352:	0002                	c.slli64	zero
     354:	0500                	addi	s0,sp,640
     356:	003f09bf 0f0e0000 	0xf0e0000003f09bf
    for(i = 0; i < size_b; ++i){
     35e:	625f 0066 c005      	0xc0050066625f
                line[size_b-1-j][k] = pola[k]*polb[j];
     364:	e411                	bnez	s0,370 <polymult2+0xe4>
     366:	0002                	c.slli64	zero
     368:	1000                	addi	s0,sp,32
     36a:	a00c                	fsd	fa1,0(s0)
     36c:	0000                	unimp
     36e:	0500                	addi	s0,sp,640
            for (k = size_a-1; k >= 0; k = k-1 ){
     370:	07c1                	addi	a5,a5,16
                line[size_b-1-j][k] = pola[k]*polb[j];
     372:	0069                	c.nop	26
     374:	0000                	unimp
     376:	0c18                	addi	a4,sp,528
            for (k = size_a-1; k >= 0; k = k-1 ){
     378:	0151                	addi	sp,sp,20
     37a:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     37c:	c805                	beqz	s0,3ac <polymult2+0x120>
     37e:	160a                	slli	a2,a2,0x22
     380:	0001                	nop
     382:	1c00                	addi	s0,sp,560
     384:	170c                	addi	a1,sp,928
     386:	0002                	c.slli64	zero
     388:	0500                	addi	s0,sp,640
     38a:	1dca                	slli	s11,s11,0x32
     38c:	05d9                	addi	a1,a1,22
        for(i = 0; i < size_b; ++i){
     38e:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     390:	0c20                	addi	s0,sp,536
     392:	036c                	addi	a1,sp,396
}
     394:	0000                	unimp
     396:	cc05                	beqz	s0,3ce <polymult2+0x142>
     398:	031d                	addi	t1,t1,7
     39a:	0006                	c.slli	zero,0x1
     39c:	2400                	fld	fs0,8(s0)
     39e:	700c                	flw	fa1,32(s0)
     3a0:	0005                	c.nop	1
     3a2:	0500                	addi	s0,sp,640
     3a4:	06270dcf          	fnmadd.q	fs11,fa4,ft2,ft0,rne
     3a8:	0000                	unimp
     3aa:	0c28                	addi	a0,sp,536
     3ac:	000006e7          	jalr	a3,zero # 0 <__DYNAMIC>
     3b0:	d005                	beqz	s0,2d0 <polymult2+0x44>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b2:	4109                	li	sp,2
     3b4:	0006                	c.slli	zero,0x1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3b6:	2c00                	fld	fs0,24(s0)
     3b8:	62755f0f          	0x62755f0f
     3bc:	0500                	addi	s0,sp,640
     3be:	02e411d3          	fadd.d	ft3,fs0,fa4,rtz
     3c2:	0000                	unimp
     3c4:	0f30                	addi	a2,sp,920
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c6:	755f 0070 d405      	0xd4050070755f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3cc:	0c12                	slli	s8,s8,0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ce:	38000003          	lb	zero,896(zero) # 380 <polymult2+0xf4>
        for (j = size_b -1; j >= 0; j = j-1){
     3d2:	72755f0f          	0x72755f0f
     3d6:	0500                	addi	s0,sp,640
     3d8:	07d5                	addi	a5,a5,21
            product2[j] += line[i][j];
     3da:	0069                	c.nop	26
     3dc:	0000                	unimp
     3de:	0c3c                	addi	a5,sp,536
        for(i = 0; i < size_b; ++i){
     3e0:	0128                	addi	a0,sp,136
            product2[j] += line[i][j];
     3e2:	0000                	unimp
     3e4:	d805                	beqz	s0,314 <polymult2+0x88>
     3e6:	4711                	li	a4,4
     3e8:	0006                	c.slli	zero,0x1
     3ea:	4000                	lw	s0,0(s0)
     3ec:	b20c                	fsd	fa1,32(a2)
        for(i = 0; i < size_b; ++i){
     3ee:	0006                	c.slli	zero,0x1
     3f0:	0500                	addi	s0,sp,640
    for(j = 0; j < size_a + size_b -1; ++j){
     3f2:	11d9                	addi	gp,gp,-10
     3f4:	00000657          	0x657
        for(i = 0; i < size_b; ++i){
     3f8:	6c5f0f43          	0x6c5f0f43
    int v[size_N];
     3fc:	0062                	c.slli	zero,0x18
     3fe:	dc05                	beqz	s0,336 <polymult2+0xaa>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     400:	e411                	bnez	s0,40c <polydiv+0x10>
    int v[size_N];
     402:	0002                	c.slli64	zero
     404:	4400                	lw	s0,8(s0)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     406:	810c                	0x810c
     408:	0001                	nop
     40a:	0500                	addi	s0,sp,640
     40c:	07df 0069 0000      	0x6907df
     412:	0c4c                	addi	a1,sp,532
     414:	01a8                	addi	a0,sp,200
     416:	0000                	unimp
     418:	e005                	bnez	s0,438 <polydiv+0x3c>
     41a:	900a                	c.add	zero,sp
     41c:	0000                	unimp
     41e:	5000                	lw	s0,32(s0)
     420:	460c                	lw	a1,8(a2)
    int v[size_N];
     422:	0000                	unimp
     424:	0500                	addi	s0,sp,640
     426:	047312e3          	bne	t1,t2,c6a <ntru_encyrpt+0x56>
    int q[size_N];
     42a:	0000                	unimp
     42c:	0c54                	addi	a3,sp,532
    int num_temp[size_N];
     42e:	033c                	addi	a5,sp,392
     430:	0000                	unimp
    int denum_temp[size_D];
     432:	e705                	bnez	a4,45a <polydiv+0x5e>
     434:	300c                	fld	fa1,32(s0)
     436:	0001                	nop
     438:	5800                	lw	s0,48(s0)
    int num_temp[size_N];
     43a:	e60c                	fsw	fa1,8(a2)
    int denum_temp[size_D];
     43c:	0004                	0x4
     43e:	0500                	addi	s0,sp,640
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     440:	0ee9                	addi	t4,t4,26
     442:	010a                	slli	sp,sp,0x2
     444:	0000                	unimp
     446:	0c5c                	addi	a5,sp,532
    int v[size_N];
     448:	0000046f          	jal	s0,448 <polydiv+0x4c>
    int denum_temp[size_D];
     44c:	ea05                	bnez	a2,47c <polydiv+0x80>
     44e:	6909                	lui	s2,0x2
     450:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     452:	6400                	flw	fs0,8(s0)
     454:	1400                	addi	s0,sp,544
     456:	00a8                	addi	a0,sp,72
    if(size_N == 106) {
     458:	0000                	unimp
     45a:	00000473          	0x473
     45e:	7315                	lui	t1,0xfffe5
        array_mod(num_temp, mod, size_N - 1);
     460:	0004                	0x4
     462:	1500                	addi	s0,sp,672
     464:	0116                	slli	sp,sp,0x5
     466:	0000                	unimp
     468:	c715                	beqz	a4,494 <polydiv+0x98>
        while(num_temp[size_N - 1] < 0){
     46a:	0005                	c.nop	1
     46c:	1500                	addi	s0,sp,672
     46e:	0069                	c.nop	26
     470:	0000                	unimp
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     472:	1000                	addi	s0,sp,32
     474:	7e04                	flw	fs1,56(a2)
     476:	0004                	0x4
     478:	1600                	addi	s0,sp,800
    for (i = 0; i < size_N; ++i){
     47a:	00000473          	0x473
    for (i = 0; i < size_D; ++i) {
     47e:	00054417          	auipc	s0,0x54
	array_mod(denum_temp,mod,size_D);
     482:	2800                	fld	fs0,16(s0)
     484:	0504                	addi	s1,sp,640
     486:	0265                	addi	tp,tp,25
    for (i = 0; i < size_N; ++i){
     488:	c708                	sw	a0,8(a4)
     48a:	0005                	c.nop	1
     48c:	1800                	addi	s0,sp,48
    for (i = size_D-1; i >= 0; i = i-1){
     48e:	044d                	addi	s0,s0,19
     490:	0000                	unimp
     492:	6705                	lui	a4,0x1
     494:	0702                	c.slli64	a4
     496:	0069                	c.nop	26
     498:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     49a:	1800                	addi	s0,sp,48
     49c:	017a                	slli	sp,sp,0x1e
        if ( (b_N*u)%mod == 1 )
     49e:	0000                	unimp
    for (u = 0; u < mod; ++u){
     4a0:	6c05                	lui	s8,0x1
     4a2:	0b02                	c.slli64	s6
     4a4:	000006b3          	add	a3,zero,zero
        num_temp[i] = num[i];
     4a8:	1804                	addi	s1,sp,48
     4aa:	0248                	addi	a0,sp,260
     4ac:	0000                	unimp
     4ae:	6c05                	lui	s8,0x1
     4b0:	1402                	slli	s0,s0,0x20
     4b2:	000006b3          	add	a3,zero,zero
     4b6:	1808                	addi	a0,sp,48
    for (i = 0; i < size_N; ++i){
     4b8:	01f8                	addi	a4,sp,204
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4ba:	0000                	unimp
     4bc:	6c05                	lui	s8,0x1
     4be:	1e02                	slli	t3,t3,0x20
     4c0:	000006b3          	add	a3,zero,zero
        array_mod(num_temp, mod, size_N);
     4c4:	180c                	addi	a1,sp,48
     4c6:	00000507          	0x507
     4ca:	6e05                	lui	t3,0x1
        denum_temp[i] = denum[i];
     4cc:	0802                	c.slli64	a6
     4ce:	0069                	c.nop	26
     4d0:	0000                	unimp
     4d2:	1810                	addi	a2,sp,48
     4d4:	00000027          	0x27
    for (i = 0; i < size_D; ++i) {
     4d8:	6f05                	lui	t5,0x1
        denum_temp[i] = denum[i];
     4da:	0802                	c.slli64	a6
    for (i = 0; i < size_D; ++i) {
     4dc:	000008b3          	add	a7,zero,zero
        q[i] = 0;
     4e0:	1814                	addi	a3,sp,48
     4e2:	00000523          	sb	zero,10(zero) # a <__DYNAMIC+0xa>
        v[i] = 0;
     4e6:	7205                	lui	tp,0xfffe1
        q[i] = 0;
     4e8:	0702                	c.slli64	a4
     4ea:	0069                	c.nop	26
        v[i] = 0;
     4ec:	0000                	unimp
     4ee:	1830                	addi	a2,sp,56
    for (i = 0; i < size_N; ++i){
     4f0:	0511                	addi	a0,a0,4
     4f2:	0000                	unimp
        if( denum_temp[i] != 0 )
     4f4:	7305                	lui	t1,0xfffe1
    for (i = size_D-1; i >= 0; i = i-1){
     4f6:	1602                	slli	a2,a2,0x20
     4f8:	08c8                	addi	a0,sp,84
        if ( (b_N*u)%mod == 1 )
     4fa:	0000                	unimp
     4fc:	1834                	addi	a3,sp,56
     4fe:	03dc                	addi	a5,sp,452
     500:	0000                	unimp
     502:	7505                	lui	a0,0xfffe1
    for (u = 0; u < mod; ++u){
     504:	0702                	c.slli64	a4
     506:	0069                	c.nop	26
        if( num_temp[i] != 0 )
     508:	0000                	unimp
    for (i = size_N-1; i >= 0; i = i-1){
     50a:	1838                	addi	a4,sp,56
     50c:	0519                	addi	a0,a0,6
     50e:	0000                	unimp
     510:	7705                	lui	a4,0xfffe1
     512:	0a02                	c.slli64	s4
     514:	08d9                	addi	a7,a7,22
     516:	0000                	unimp
         if(size_N == 106) {
     518:	183c                	addi	a5,sp,56
     51a:	0308                	addi	a0,sp,384
     51c:	0000                	unimp
        v[(d-d2)] = u*r_d;
     51e:	7a05                	lui	s4,0xfffe1
     520:	1302                	slli	t1,t1,0x20
     522:	0196                	slli	gp,gp,0x5
     524:	0000                	unimp
     526:	1840                	addi	s0,sp,52
     528:	021d                	addi	tp,tp,7
     52a:	0000                	unimp
         if(size_N == 106) {
     52c:	7b05                	lui	s6,0xfffe1
     52e:	0702                	c.slli64	a4
            array_mod(v, mod, size_N - 1);
     530:	0069                	c.nop	26
     532:	0000                	unimp
     534:	1844                	addi	s1,sp,52
     536:	0701                	addi	a4,a4,0
     538:	0000                	unimp
            while(v[size_N - 1] < 0){
     53a:	7c05                	lui	s8,0xfffe1
     53c:	1302                	slli	t1,t1,0x20
     53e:	0196                	slli	gp,gp,0x5
     540:	0000                	unimp
            v[size_N - 1] = v[size_N - 1] % mod;
     542:	1848                	addi	a0,sp,52
     544:	00000403          	lb	s0,0(zero) # 0 <__DYNAMIC>
     548:	7d05                	lui	s10,0xfffe1
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     54a:	1402                	slli	s0,s0,0x20
     54c:	08df 0000 184c      	0x184c000008df
     552:	0250                	addi	a2,sp,260
     554:	0000                	unimp
     556:	8005                	srli	s0,s0,0x1
        if(size_N == 106) {
     558:	0702                	c.slli64	a4
     55a:	0069                	c.nop	26
     55c:	0000                	unimp
     55e:	1850                	addi	a2,sp,52
            array_mod(product, mod, size_N - 1);
     560:	01a0                	addi	s0,sp,200
     562:	0000                	unimp
     564:	8105                	srli	a0,a0,0x1
     566:	0902                	c.slli64	s2
            while(product[size_N - 1] < 0){
     568:	000005c7          	fmsub.s	fa1,ft0,ft0,ft0,rne
     56c:	1854                	addi	a3,sp,52
     56e:	0446                	slli	s0,s0,0x11
     570:	0000                	unimp
     572:	a405                	j	792 <ext_euclid+0xbc>
            product[size_N - 1] = product[size_N - 1] % mod;
     574:	0702                	c.slli64	a4
     576:	088e                	slli	a7,a7,0x3
     578:	0000                	unimp
     57a:	1958                	addi	a4,sp,180
     57c:	03ca                	slli	t2,t2,0x12
     57e:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     580:	a805                	j	5b0 <polydiv+0x1b4>
     582:	1302                	slli	t1,t1,0x20
 	if(size_N == 106) {
     584:	000002c7          	fmsub.s	ft5,ft0,ft0,ft0,rne
            array_mod(num_temp, mod, size_N - 1);
     588:	0148                	addi	a0,sp,132
     58a:	e619                	bnez	a2,598 <polydiv+0x19c>
     58c:	0002                	c.slli64	zero
     58e:	0500                	addi	s0,sp,640
     590:	02a9                	addi	t0,t0,10
            while(num_temp[size_N - 1] < 0){
     592:	8412                	mv	s0,tp
     594:	0002                	c.slli64	zero
     596:	4c00                	lw	s0,24(s0)
     598:	1901                	addi	s2,s2,-32
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     59a:	06a8                	addi	a0,sp,840
     59c:	0000                	unimp
     59e:	ad05                	j	bce <generate_keys+0x2ae>
     5a0:	0c02                	c.slli64	s8
     5a2:	08f0                	addi	a2,sp,92
     5a4:	0000                	unimp
        for(i = 0; i < size_N; ++i){
     5a6:	02dc                	addi	a5,sp,324
     5a8:	5919                	li	s2,-26
 	if(size_N == 106) {
     5aa:	0001                	nop
     5ac:	0500                	addi	s0,sp,640
            array_mod(q, mod, size_N - 1);
     5ae:	02b2                	slli	t0,t0,0xc
     5b0:	7410                	flw	fa2,40(s0)
     5b2:	0006                	c.slli	zero,0x1
     5b4:	e000                	fsw	fs0,0(s0)
     5b6:	1902                	slli	s2,s2,0x20
            while(q[size_N - 1] < 0){
     5b8:	013e                	slli	sp,sp,0xf
     5ba:	0000                	unimp
     5bc:	b405                	j	ffffffdc <_stack_start+0xfffeffdc>
     5be:	0a02                	c.slli64	s4
            q[size_N - 1] = q[size_N - 1] % mod;
     5c0:	08fc                	addi	a5,sp,92
     5c2:	0000                	unimp
     5c4:	02ec                	addi	a1,sp,332
     5c6:	1000                	addi	s0,sp,32
    int v[size_N];
     5c8:	cd04                	sw	s1,24(a0)
        for (i = size_N-1; i >= 0; i = i-1){
     5ca:	0005                	c.nop	1
     5cc:	0200                	addi	s0,sp,256
     5ce:	0801                	addi	a6,a6,0
     5d0:	043c                	addi	a5,sp,520
     5d2:	0000                	unimp
     5d4:	cd16                	sw	t0,152(sp)
     5d6:	0005                	c.nop	1
     5d8:	1000                	addi	s0,sp,32
                v[size_N - 1] = v[size_N - 1]+mod;
     5da:	5504                	lw	s1,40(a0)
     5dc:	0004                	0x4
     5de:	1400                	addi	s0,sp,544
     5e0:	00a8                	addi	a0,sp,72
            array_mod(v, mod, size_N);
     5e2:	0000                	unimp
     5e4:	05fd                	addi	a1,a1,31
     5e6:	0000                	unimp
     5e8:	7315                	lui	t1,0xfffe5
     5ea:	0004                	0x4
                product[size_N - 1] = product[size_N - 1]+mod;
     5ec:	1500                	addi	s0,sp,672
     5ee:	0116                	slli	sp,sp,0x5
     5f0:	0000                	unimp
     5f2:	fd15                	bnez	a0,52e <polydiv+0x132>
            array_mod(product, mod, size_N);
     5f4:	0005                	c.nop	1
     5f6:	1500                	addi	s0,sp,672
     5f8:	0069                	c.nop	26
     5fa:	0000                	unimp
     5fc:	1000                	addi	s0,sp,32
     5fe:	d404                	sw	s1,40(s0)
            num_temp[i] = num_temp[i] - product[i];
     600:	0005                	c.nop	1
     602:	1000                	addi	s0,sp,32
     604:	df04                	sw	s1,56(a4)
     606:	0005                	c.nop	1
     608:	1400                	addi	s0,sp,544
        for (i = 0; i < size_N; ++i){
     60a:	009c                	addi	a5,sp,64
     60c:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     60e:	00000627          	0x627
     612:	7315                	lui	t1,0xfffe5
        for (i = 0; i < size_N; ++i){
     614:	0004                	0x4
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     616:	1500                	addi	s0,sp,672
     618:	0116                	slli	sp,sp,0x5
     61a:	0000                	unimp
     61c:	9c15                	0x9c15
            array_mod(num_temp, mod, size_N);
     61e:	0000                	unimp
     620:	1500                	addi	s0,sp,672
     622:	0069                	c.nop	26
     624:	0000                	unimp
     626:	1000                	addi	s0,sp,32
            q[i] = q[i] + v[i];
     628:	0904                	addi	s1,sp,144
     62a:	0006                	c.slli	zero,0x1
     62c:	1400                	addi	s0,sp,544
     62e:	0069                	c.nop	26
     630:	0000                	unimp
        for(i = 0; i < size_N; ++i){
     632:	0641                	addi	a2,a2,16
     634:	0000                	unimp
            q[i] = q[i] + v[i];
     636:	7315                	lui	t1,0xfffe5
     638:	0004                	0x4
     63a:	1500                	addi	s0,sp,672
        for(i = 0; i < size_N; ++i){
     63c:	0116                	slli	sp,sp,0x5
                q[size_N - 1] = q[size_N - 1]+mod;
     63e:	0000                	unimp
     640:	1000                	addi	s0,sp,32
     642:	2d04                	fld	fs1,24(a0)
     644:	0006                	c.slli	zero,0x1
            array_mod(q, mod, size_N);
     646:	0900                	addi	s0,sp,144
     648:	0038                	addi	a4,sp,8
     64a:	0000                	unimp
     64c:	00000657          	0x657
            if( num_temp[i] != 0 )
     650:	750a                	flw	fa0,160(sp)
        for (i = size_N-1; i >= 0; i = i-1){
     652:	0000                	unimp
     654:	0200                	addi	s0,sp,256
            v[i] = 0;
     656:	0900                	addi	s0,sp,144
     658:	0038                	addi	a4,sp,8
     65a:	0000                	unimp
     65c:	00000667          	jalr	a2,zero # 0 <__DYNAMIC>
        for (i = 0; i < size_N; ++i){
     660:	750a                	flw	fa0,160(sp)
     662:	0000                	unimp
     664:	0000                	unimp
    while (d >= d2){
     666:	0600                	addi	s0,sp,768
     668:	047d                	addi	s0,s0,31
    for(i = 0; i < size_N; ++i){
     66a:	0000                	unimp
        result[i] = q[i];
     66c:	2405                	jal	88c <ext_euclid+0x1b6>
     66e:	1a01                	addi	s4,s4,-32
     670:	0312                	slli	t1,t1,0x4
     672:	0000                	unimp
    for(i = 0; i < size_N; ++i){
     674:	7c1a                	flw	fs8,164(sp)
     676:	0006                	c.slli	zero,0x1
    for(i = size_N; i < (2*size_N); ++i){
     678:	0c00                	addi	s0,sp,528
     67a:	2805                	jal	6aa <polydiv+0x2ae>
        result[i] = num_temp[i-size_N];
     67c:	0801                	addi	a6,a6,0
     67e:	06ad                	addi	a3,a3,11
     680:	0000                	unimp
     682:	f418                	fsw	fa4,40(s0)
    for(i = size_N; i < (2*size_N); ++i){
     684:	0004                	0x4
     686:	0500                	addi	s0,sp,640
}
     688:	012a                	slli	sp,sp,0xa
     68a:	ad11                	j	c9e <ntru_encyrpt+0x8a>
     68c:	0006                	c.slli	zero,0x1
     68e:	0000                	unimp
     690:	ac18                	fsd	fa4,24(s0)
     692:	0002                	c.slli64	zero
     694:	0500                	addi	s0,sp,640
     696:	6907012b          	0x6907012b
     69a:	0000                	unimp
     69c:	0400                	addi	s0,sp,512
     69e:	7718                	flw	fa4,40(a4)
     6a0:	0004                	0x4
     6a2:	0500                	addi	s0,sp,640
     6a4:	012c                	addi	a1,sp,136
     6a6:	0006b30b          	0x6b30b
     6aa:	0800                	addi	s0,sp,16
     6ac:	1000                	addi	s0,sp,32
     6ae:	7404                	flw	fs1,40(s0)
     6b0:	0006                	c.slli	zero,0x1
        result[i] = q[i];
     6b2:	1000                	addi	s0,sp,32
     6b4:	6704                	flw	fs1,8(a4)
     6b6:	0006                	c.slli	zero,0x1
     6b8:	1a00                	addi	s0,sp,304
     6ba:	001f 0000 050e      	0x50e0000001f
     6c0:	0144                	addi	s1,sp,132
    for(i = 0; i < size_N; ++i){
     6c2:	f208                	fsw	fa0,32(a2)
        result[i] = num_temp[i-size_N];
     6c4:	0006                	c.slli	zero,0x1
     6c6:	1800                	addi	s0,sp,48
     6c8:	0555                	addi	a0,a0,21
     6ca:	0000                	unimp
     6cc:	4505                	li	a0,1
     6ce:	1201                	addi	tp,tp,-32
    for(i = size_N; i < (2*size_N); ++i){
     6d0:	06f2                	slli	a3,a3,0x1c
     6d2:	0000                	unimp
     6d4:	1800                	addi	s0,sp,48
    int ri_2[size]; // MX-ring poly, a
     6d6:	0000054f          	fnmadd.s	fa0,ft0,ft0,ft0,rne
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6da:	4605                	li	a2,1
    int ri_2[size]; // MX-ring poly, a
     6dc:	1201                	addi	tp,tp,-32
     6de:	06f2                	slli	a3,a3,0x1c
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6e0:	0000                	unimp
     6e2:	1806                	slli	a6,a6,0x21
     6e4:	000005c7          	fmsub.s	fa1,ft0,ft0,ft0,rne
     6e8:	4705                	li	a4,1
     6ea:	1201                	addi	tp,tp,-32
     6ec:	0046                	c.slli	zero,0x11
     6ee:	0000                	unimp
     6f0:	000c                	0xc
     6f2:	4609                	li	a2,2
     6f4:	0000                	unimp
     6f6:	0200                	addi	s0,sp,256
     6f8:	0a000007          	0xa000007
    int ri_2[size]; // MX-ring poly, a
     6fc:	0075                	c.nop	29
     6fe:	0000                	unimp
     700:	0002                	c.slli64	zero
    int ri_1[size]; // f-random poly, f[N] = 0, b
     702:	8505d01b          	0x8505d01b
     706:	0702                	c.slli64	a4
    int ri[size];
     708:	00000817          	auipc	a6,0x0
     70c:	5b18                	lw	a4,48(a4)
    int ti_1[size]; // ti_1[0] = 1
     70e:	0006                	c.slli	zero,0x1
     710:	0500                	addi	s0,sp,640
     712:	75180287          	0x75180287
    int ti[size];
     716:	0000                	unimp
     718:	0000                	unimp
    int qi_1[size];
     71a:	a318                	fsd	fa4,0(a4)
     71c:	0005                	c.nop	1
     71e:	0500                	addi	s0,sp,640
    int temp[size];
     720:	0288                	addi	a0,sp,320
     722:	c712                	sw	tp,140(sp)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     724:	0005                	c.nop	1
     726:	0400                	addi	s0,sp,512
    int ri_2[size]; // MX-ring poly, a
     728:	fb18                	fsw	fa4,48(a4)
     72a:	0002                	c.slli64	zero
    int temp[size];
     72c:	0500                	addi	s0,sp,640
    for (i = 0; i < size; ++i) {
     72e:	0289                	addi	t0,t0,2
     730:	1710                	addi	a2,sp,928
        ti_2[i] = 0;
     732:	0008                	0x8
     734:	0800                	addi	s0,sp,16
     736:	d818                	sw	a4,48(s0)
     738:	0006                	c.slli	zero,0x1
    for (i = 0; i < size; ++i) {
     73a:	0500                	addi	s0,sp,640
     73c:	028a                	slli	t0,t0,0x2
    ti_1[0] = 1;
     73e:	0001ac17          	auipc	s8,0x1a
     742:	2400                	fld	fs0,8(s0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     744:	0818                	addi	a4,sp,16
     746:	0002                	c.slli64	zero
     748:	0500                	addi	s0,sp,640
     74a:	690f028b          	0x690f028b
            ti[i] = ti_2[i] - temp[i];
     74e:	0000                	unimp
     750:	4800                	lw	s0,16(s0)
     752:	ef18                	fsw	fa4,24(a4)
	array_mod(ri_2,mod,N+1);
     754:	0004                	0x4
     756:	0500                	addi	s0,sp,640
     758:	028c                	addi	a1,sp,320
     75a:	622c                	flw	fa1,64(a2)
	array_mod(ri_1,mod,N+1);
     75c:	0000                	unimp
     75e:	5000                	lw	s0,32(s0)
     760:	ee18                	fsw	fa4,24(a2)
     762:	0006                	c.slli	zero,0x1
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     764:	0500                	addi	s0,sp,640
     766:	028d                	addi	t0,t0,3
     768:	b91a                	fsd	ft6,176(sp)
     76a:	0006                	c.slli	zero,0x1
     76c:	5800                	lw	s0,48(s0)
     76e:	fa18                	fsw	fa4,48(a2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     770:	0004                	0x4
     772:	0500                	addi	s0,sp,640
     774:	028e                	slli	t0,t0,0x3
     776:	0a16                	slli	s4,s4,0x5
     778:	0001                	nop
     77a:	6800                	flw	fs0,16(s0)
     77c:	f318                	fsw	fa4,32(a4)
        for (i = 0; i < N + 1; ++i) {
     77e:	0006                	c.slli	zero,0x1
     780:	0500                	addi	s0,sp,640
     782:	0a16028f          	0xa16028f
        array_mod(temp,mod,N+1);
     786:	0001                	nop
     788:	7000                	flw	fs0,32(s0)
     78a:	e918                	fsw	fa4,16(a0)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     78c:	0000                	unimp
     78e:	0500                	addi	s0,sp,640
     790:	0290                	addi	a2,sp,320
     792:	0a16                	slli	s4,s4,0x5
     794:	0001                	nop
     796:	7800                	flw	fs0,48(s0)
        for (i = 0; i < N + 1; ++i) {
     798:	9818                	0x9818
     79a:	0006                	c.slli	zero,0x1
     79c:	0500                	addi	s0,sp,640
	array_mod(qi_1,mod,size);
     79e:	0291                	addi	t0,t0,4
     7a0:	2710                	fld	fa2,8(a4)
     7a2:	0008                	0x8
     7a4:	8000                	0x8000
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7a6:	ef18                	fsw	fa4,24(a4)
     7a8:	0002                	c.slli64	zero
     7aa:	0500                	addi	s0,sp,640
     7ac:	0292                	slli	t0,t0,0x4
     7ae:	3710                	fld	fa2,40(a4)
     7b0:	0008                	0x8
     7b2:	8800                	0x8800
        for (i = 0; i < N + 1; ++i) {
     7b4:	d918                	sw	a4,48(a0)
     7b6:	0005                	c.nop	1
     7b8:	0500                	addi	s0,sp,640
	array_mod(temp,mod,size);
     7ba:	690f0293          	addi	t0,t5,1680 # 1690 <product2+0x224>
     7be:	0000                	unimp
     7c0:	a000                	fsd	fs0,0(s0)
        for (i = 0; i < N + 1; ++i) {
     7c2:	c118                	sw	a4,0(a0)
     7c4:	0001                	nop
     7c6:	0500                	addi	s0,sp,640
     7c8:	0294                	addi	a3,sp,320
        array_mod(ti,mod,N+1);
     7ca:	0a16                	slli	s4,s4,0x5
     7cc:	0001                	nop
     7ce:	a400                	fsd	fs0,8(s0)
     7d0:	da18                	sw	a4,48(a2)
        for (i = 0; i < N + 1; ++i) {
     7d2:	0000                	unimp
        controlR = 0;
     7d4:	0500                	addi	s0,sp,640
        for (i = 0; i < N + 1; ++i) {
     7d6:	0295                	addi	t0,t0,5
     7d8:	0a16                	slli	s4,s4,0x5
     7da:	0001                	nop
    while (controlR != 0) {
     7dc:	ac00                	fsd	fs0,24(s0)
        for (j = 0; j < mod; ++j) {
     7de:	b018                	fsd	fa4,32(s0)
            if (((ri_2[0] * j) % mod) == 1)
     7e0:	0001                	nop
        for (j = 0; j < mod; ++j) {
     7e2:	0500                	addi	s0,sp,640
     7e4:	0296                	slli	t0,t0,0x5
     7e6:	0a16                	slli	s4,s4,0x5
     7e8:	0001                	nop
     7ea:	b400                	fsd	fs0,40(s0)
     7ec:	4c18                	lw	a4,24(s0)
        for (i = 0; i < N + 1; ++i) {
     7ee:	0000                	unimp
     7f0:	0500                	addi	s0,sp,640
    }
     7f2:	0a160297          	auipc	t0,0xa160
     7f6:	0001                	nop
     7f8:	bc00                	fsd	fs0,56(s0)
     7fa:	5b18                	lw	a4,48(a4)
     7fc:	0000                	unimp
     7fe:	0500                	addi	s0,sp,640
     800:	0298                	addi	a4,sp,320
     802:	0a16                	slli	s4,s4,0x5
     804:	0001                	nop
     806:	c400                	sw	s0,8(s0)
     808:	4b18                	lw	a4,16(a4)
     80a:	0004                	0x4
     80c:	0500                	addi	s0,sp,640
     80e:	0299                	addi	t0,t0,6
     810:	6908                	flw	fa0,16(a0)
     812:	0000                	unimp
     814:	cc00                	sw	s0,24(s0)
     816:	0900                	addi	s0,sp,144
     818:	05cd                	addi	a1,a1,19
     81a:	0000                	unimp
        ri_2[i] = polyR[i];
     81c:	00000827          	0x827
     820:	750a                	flw	fa0,160(sp)
     822:	0000                	unimp
     824:	1900                	addi	s0,sp,176
     826:	0900                	addi	s0,sp,144
    for (i = 0; i < size; ++i) {
     828:	05cd                	addi	a1,a1,19
        ri_2[i] = polyR[i];
     82a:	0000                	unimp
     82c:	00000837          	lui	a6,0x0
        ri_1[i] = polyf[i];
     830:	750a                	flw	fa0,160(sp)
     832:	0000                	unimp
     834:	0700                	addi	s0,sp,896
     836:	0900                	addi	s0,sp,144
     838:	05cd                	addi	a1,a1,19
     83a:	0000                	unimp
     83c:	00000847          	fmsub.s	fa6,ft0,ft0,ft0,rne
        ti_2[i] = 0;
     840:	750a                	flw	fa0,160(sp)
     842:	0000                	unimp
     844:	1700                	addi	s0,sp,928
        ti_1[i] = 0;
     846:	1b00                	addi	s0,sp,432
     848:	05f0                	addi	a2,sp,716
     84a:	029e                	slli	t0,t0,0x7
     84c:	00086e07          	0x86e07
    for (i = 0; i < size; ++i) {
     850:	1800                	addi	s0,sp,48
            ri[i - (N + 1)] = res[i];
     852:	03a2                	slli	t2,t2,0x8
     854:	0000                	unimp
     856:	a105                	j	c76 <ntru_encyrpt+0x62>
     858:	1b02                	slli	s6,s6,0x20
        for (i = N + 1; i < (2 * N + 2); ++i) {
     85a:	086e                	slli	a6,a6,0x1b
     85c:	0000                	unimp
            ri[i - (N + 1)] = res[i];
     85e:	1800                	addi	s0,sp,48
     860:	038d                	addi	t2,t2,3
        for (i = N + 1; i < (2 * N + 2); ++i) {
     862:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     864:	a205                	j	984 <generate_keys+0x64>
     866:	1802                	slli	a6,a6,0x20
     868:	087e                	slli	a6,a6,0x1f
     86a:	0000                	unimp
     86c:	0078                	addi	a4,sp,12
     86e:	0c09                	addi	s8,s8,2
     870:	7e000003          	lb	zero,2016(zero) # 7e0 <ext_euclid+0x10a>
        for (i = 0; i < N + 1; ++i) {
     874:	0008                	0x8
            temp[i] = ri_2[i] - ri[i];
     876:	0a00                	addi	s0,sp,272
     878:	0075                	c.nop	29
        for (i = 0; i < N + 1; ++i) {
     87a:	0000                	unimp
     87c:	001d                	c.nop	7
            qi_1[i] = res1[i];
     87e:	7509                	lui	a0,0xfffe2
     880:	0000                	unimp
     882:	8e00                	0x8e00
     884:	0008                	0x8
     886:	0a00                	addi	s0,sp,272
     888:	0075                	c.nop	29
        for (i = 0; i < N + 1; ++i) {
     88a:	0000                	unimp
            qi_1[i] = res1[i];
     88c:	001d                	c.nop	7
        for (i = 0; i < N + 1; ++i) {
     88e:	f01c                	fsw	fa5,32(s0)
            temp[i] = res2[i];
     890:	8305                	srli	a4,a4,0x1
     892:	0302                	c.slli64	t1
     894:	000008b3          	add	a7,zero,zero
     898:	441d                	li	s0,7
     89a:	0005                	c.nop	1
        for (i = 0; i < N + 1; ++i) {
     89c:	0500                	addi	s0,sp,640
            temp[i] = res2[i];
     89e:	029a                	slli	t0,t0,0x6
        for (i = 0; i < N + 1; ++i) {
     8a0:	0007020b          	0x7020b
            ti[i] = ti_2[i] - temp[i];
     8a4:	1d00                	addi	s0,sp,688
     8a6:	06b8                	addi	a4,sp,840
     8a8:	0000                	unimp
     8aa:	a305                	j	dca <_start+0xc>
     8ac:	0b02                	c.slli64	s6
     8ae:	00000847          	fmsub.s	fa6,ft0,ft0,ft0,rne
        for (i = 0; i < N + 1; ++i) {
     8b2:	0900                	addi	s0,sp,144
            ti[i] = ti_2[i] - temp[i];
     8b4:	05cd                	addi	a1,a1,19
     8b6:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8b8:	000008c3          	fmadd.s	fa7,ft0,ft0,ft0,rne
            ri_2[i] = ri_1[i];
     8bc:	750a                	flw	fa0,160(sp)
     8be:	0000                	unimp
     8c0:	1800                	addi	s0,sp,48
     8c2:	1e00                	addi	s0,sp,816
     8c4:	00b5                	addi	ra,ra,13
        for (i = 0; i < N + 1; ++i) {
     8c6:	0000                	unimp
            ri_2[i] = ri_1[i];
     8c8:	0410                	addi	a2,sp,512
            ri_1[i] = ri[i];
     8ca:	000008c3          	fmadd.s	fa7,ft0,ft0,ft0,rne
     8ce:	d91f 0008 1500      	0x15000008d91f
     8d4:	00000473          	0x473
            ti_2[i] = ti_1[i];
     8d8:	1000                	addi	s0,sp,32
     8da:	ce04                	sw	s1,24(a2)
     8dc:	0008                	0x8
            controlR += ri[i];
     8de:	1000                	addi	s0,sp,32
            ti_2[i] = ti_1[i];
     8e0:	9604                	0x9604
     8e2:	0001                	nop
            ti_1[i] = ti[i];
     8e4:	1f00                	addi	s0,sp,944
     8e6:	08f0                	addi	a2,sp,92
     8e8:	0000                	unimp
     8ea:	6915                	lui	s2,0x5
            qi_1[i] = 0;
     8ec:	0000                	unimp
     8ee:	0000                	unimp
     8f0:	0410                	addi	a2,sp,512
     8f2:	08f6                	slli	a7,a7,0x1d
        for (i = 0; i < N + 1; ++i) {
     8f4:	0000                	unimp
     8f6:	0410                	addi	a2,sp,512
            if (((ri_2[0] * j) % mod) == 1)
     8f8:	08e5                	addi	a7,a7,25
     8fa:	0000                	unimp
     8fc:	6709                	lui	a4,0x2
     8fe:	0006                	c.slli	zero,0x1
     900:	0c00                	addi	s0,sp,528
     902:	0009                	c.nop	2
     904:	0a00                	addi	s0,sp,272
     906:	0075                	c.nop	29
        for (j = 0; j < mod; ++j) {
     908:	0000                	unimp
     90a:	0002                	c.slli64	zero
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     90c:	ed20                	fsw	fs0,88(a0)
        for (i = 0; i < N + 1; ++i) {
     90e:	0005                	c.nop	1
     910:	0500                	addi	s0,sp,640
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     912:	73170333          	0x73170333
     916:	0004                	0x4
     918:	2000                	fld	fs0,0(s0)
     91a:	05e6                	slli	a1,a1,0x19
     91c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     91e:	3405                	jal	33e <polymult2+0xb2>
int* generate_keys(int N, int p, int q){
     920:	04791d03          	lh	s10,71(s2) # 5047 <_stack_len+0x1047>
     924:	0000                	unimp
     926:	00003e03          	0x3e03
     92a:	0700                	addi	s0,sp,896
     92c:	1318                	addi	a4,sp,416
     92e:	002c                	addi	a1,sp,8
     930:	0000                	unimp
     932:	2605                	jal	c52 <ntru_encyrpt+0x3e>
     934:	0009                	c.nop	2
     936:	2100                	fld	fs0,0(a0)
     938:	03d2                	slli	t2,t2,0x14
     93a:	0000                	unimp
     93c:	6708                	flw	fa0,8(a4)
     93e:	c70e                	sw	gp,140(sp)
     940:	0005                	c.nop	1
     942:	0900                	addi	s0,sp,144
     944:	0069                	c.nop	26
     946:	0000                	unimp
     948:	00000953          	fadd.s	fs2,ft0,ft0,rne
     94c:	750a                	flw	fa0,160(sp)
     94e:	0000                	unimp
     950:	9500                	0x9500
     952:	2200                	fld	fs0,0(a2)
     954:	018a                	slli	gp,gp,0x2
     956:	0000                	unimp
     958:	0601                	addi	a2,a2,0
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     95a:	430c                	lw	a1,0(a4)
     95c:	0009                	c.nop	2
     95e:	0500                	addi	s0,sp,640
     960:	00121403          	lh	s0,1(tp) # fffe1001 <_stack_start+0xfffd1001>
     964:	2200                	fld	fs0,0(a2)
     966:	0358                	addi	a4,sp,388
     968:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     96a:	0701                	addi	a4,a4,0
     96c:	430c                	lw	a1,0(a4)
     96e:	0009                	c.nop	2
     970:	0500                	addi	s0,sp,640
     972:	00146c03          	0x146c03
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     976:	2200                	fld	fs0,0(a2)
     978:	0309                	addi	t1,t1,2
     97a:	0000                	unimp
     97c:	0801                	addi	a6,a6,0
     97e:	430c                	lw	a1,0(a4)
     980:	0009                	c.nop	2
     982:	0500                	addi	s0,sp,640
     984:	0016c403          	lbu	s0,1(a3)
     988:	0900                	addi	s0,sp,144
     98a:	0069                	c.nop	26
     98c:	0000                	unimp
     98e:	0999                	addi	s3,s3,6
     990:	0000                	unimp
     992:	750a                	flw	fa0,160(sp)
     994:	0000                	unimp
     996:	6300                	flw	fs0,0(a4)
     998:	2200                	fld	fs0,0(a2)
     99a:	042e                	slli	s0,s0,0xb
     99c:	0000                	unimp
     99e:	0901                	addi	s2,s2,0
     9a0:	890c                	0x890c
     9a2:	0009                	c.nop	2
     9a4:	0500                	addi	s0,sp,640
     9a6:	00191c03          	lh	s8,1(s2)
     9aa:	0900                	addi	s0,sp,144
     9ac:	0069                	c.nop	26
     9ae:	0000                	unimp
     9b0:	09bc                	addi	a5,sp,216
     9b2:	0000                	unimp
     9b4:	00007523          	0x7523
     9b8:	3d00                	fld	fs0,56(a0)
     9ba:	0001                	nop
     9bc:	a922                	fsd	fs0,144(sp)
     9be:	0000                	unimp
     9c0:	0100                	addi	s0,sp,128
     9c2:	0c0a                	slli	s8,s8,0x2
     9c4:	000009ab          	0x9ab
     9c8:	0305                	addi	t1,t1,1
     9ca:	1aac                	addi	a1,sp,376
     9cc:	0000                	unimp
     9ce:	7009                	c.lui	zero,0xfffe2
     9d0:	0000                	unimp
     9d2:	de00                	sw	s0,56(a2)
     9d4:	0009                	c.nop	2
     9d6:	0a00                	addi	s0,sp,272
     9d8:	0075                	c.nop	29
     9da:	0000                	unimp
     9dc:	0000                	unimp
     9de:	ce05                	beqz	a2,a16 <generate_keys+0xf6>
    int polyR[N+1];
     9e0:	0009                	c.nop	2
     9e2:	2400                	fld	fs0,8(s0)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9e4:	023e                	slli	tp,tp,0xf
    int polyR[N+1];
     9e6:	0000                	unimp
     9e8:	0b01                	addi	s6,s6,0
     9ea:	de0e                	sw	gp,60(sp)
     9ec:	0009                	c.nop	2
     9ee:	0500                	addi	s0,sp,640
     9f0:	001fa403          	lw	s0,1(t6)
    polyR[N] = 1;
     9f4:	2500                	fld	fs0,8(a0)
     9f6:	6176                	flw	ft2,92(sp)
     9f8:	0072                	c.slli	zero,0x1c
     9fa:	0c01                	addi	s8,s8,0
     9fc:	000a0713          	mv	a4,s4
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a00:	0500                	addi	s0,sp,640
     a02:	00121003          	lh	zero,1(tp) # 1 <__DYNAMIC+0x1>
     a06:	1000                	addi	s0,sp,32
     a08:	3204                	fld	fs1,32(a2)
     a0a:	0009                	c.nop	2
     a0c:	2600                	fld	fs0,8(a2)
     a0e:	0706                	slli	a4,a4,0x1
     a10:	0000                	unimp
     a12:	6a01                	0x6a01
     a14:	0502                	c.slli64	a0
     a16:	0069                	c.nop	26
     a18:	0000                	unimp
     a1a:	0f6e                	slli	t5,t5,0x1b
     a1c:	0000                	unimp
     a1e:	0110                	addi	a2,sp,128
     a20:	0000                	unimp
     a22:	9c01                	0x9c01
     a24:	00000ba7          	0xba7
     a28:	72617627          	0x72617627
     a2c:	0100                	addi	s0,sp,128
     a2e:	0713026b          	0x713026b
     a32:	000a                	c.slli	zero,0x2
     a34:	ff00                	fsw	fs0,56(a4)
     a36:	28ff                	0x28ff
     a38:	03ee                	slli	t2,t2,0x1b
     a3a:	0000                	unimp
     a3c:	6c01                	0x6c01
     a3e:	0a02                	c.slli64	s4
     a40:	00000ba7          	0xba7
     a44:	0000                	unimp
     a46:	0000                	unimp
     a48:	9428                	0x9428
     a4a:	0000                	unimp
     a4c:	0100                	addi	s0,sp,128
     a4e:	026d                	addi	tp,tp,27
     a50:	a70a                	fsd	ft2,392(sp)
     a52:	1e00000b          	0x1e00000b
     a56:	0000                	unimp
     a58:	2800                	fld	fs0,16(s0)
     a5a:	0326                	slli	t1,t1,0x9
     a5c:	0000                	unimp
     a5e:	6e01                	0x6e01
     a60:	0a02                	c.slli64	s4
    polyR[0] = -1;
     a62:	00000ba7          	0xba7
    for(i = 1; i < N; ++i){
     a66:	003c                	addi	a5,sp,8
     a68:	0000                	unimp
     a6a:	4e29                	li	t3,10
     a6c:	0100                	addi	s0,sp,128
    for (i = N; i < 55; ++i ){
     a6e:	6909026f          	jal	tp,910fe <_stack_start+0x810fe>
     a72:	0000                	unimp
     a74:	3500                	fld	fs0,40(a0)
    for(i = 0; i < N; ++i){
     a76:	7029                	c.lui	zero,0xfffea
        random_keys[i] = f[i];
     a78:	0100                	addi	s0,sp,128
     a7a:	0270                	addi	a2,sp,268
     a7c:	6909                	lui	s2,0x2
     a7e:	0000                	unimp
    for(i = 0; i < N; ++i){
     a80:	0300                	addi	s0,sp,384
     a82:	7129                	addi	sp,sp,-320
     a84:	0100                	addi	s0,sp,128
     a86:	0271                	addi	tp,tp,28
    for(i = N; i < (2*N); ++i){
     a88:	6909                	lui	s2,0x2
     a8a:	0000                	unimp
     a8c:	6500                	flw	fs0,8(a0)
     a8e:	a92a                	fsd	fa0,144(sp)
        random_keys[i] = g[i-N];
     a90:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     a94:	ad090273          	0xad090273
    for(i = N; i < (2*N); ++i){
     a98:	0300000b          	0x300000b
    for(i = (2*N); i < (3*N); ++i){
     a9c:	dc91                	beqz	s1,9b8 <generate_keys+0x98>
     a9e:	058e2877          	0x58e2877
    fp = ext_euclid(polyR, f, (N+1), p);
     aa2:	0000                	unimp
     aa4:	7401                	lui	s0,0xfffe0
     aa6:	0902                	c.slli64	s2
     aa8:	0bbd                	addi	s7,s7,15
     aaa:	0000                	unimp
     aac:	005d                	c.nop	23
    for(i = (2*N); i < (3*N); ++i){
     aae:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     ab0:	c028                	sw	a0,64(s0)
     ab2:	0000                	unimp
     ab4:	0100                	addi	s0,sp,128
     ab6:	0275                	addi	tp,tp,29
    for(i = (2*N); i < (3*N); ++i){
     ab8:	cf09                	beqz	a4,ad2 <generate_keys+0x1b2>
     aba:	b100000b          	0xb100000b
    fq = ext_euclid(polyR, f, (N+1), q);
     abe:	0000                	unimp
     ac0:	2b00                	fld	fs0,16(a4)
     ac2:	00cd                	addi	ra,ra,19
     ac4:	0000                	unimp
     ac6:	7601                	lui	a2,0xfffe0
    for(i = (3*N); i < (4*N); ++i){
     ac8:	0902                	c.slli64	s2
     aca:	0be1                	addi	s7,s7,24
     acc:	0000                	unimp
     ace:	b928                	fsd	fa0,112(a0)
        random_keys[i] = fq[i-(3*N)];
     ad0:	0005                	c.nop	1
     ad2:	0100                	addi	s0,sp,128
     ad4:	f3090277          	0xf3090277
    for(i = (3*N); i < (4*N); ++i){
     ad8:	1200000b          	0x1200000b
    fg = polymult2(fq, N, g, N, 0);
     adc:	0001                	nop
     ade:	2b00                	fld	fs0,16(a4)
     ae0:	0258                	addi	a4,sp,260
     ae2:	0000                	unimp
     ae4:	7801                	lui	a6,0xfffe0
     ae6:	0902                	c.slli64	s2
    for(i = 0; i < (2*N-1); ++i){
     ae8:	0c05                	addi	s8,s8,1
     aea:	0000                	unimp
     aec:	0d28                	addi	a0,sp,664
     aee:	0004                	0x4
     af0:	0100                	addi	s0,sp,128
     af2:	0279                	addi	tp,tp,30
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     af4:	1709                	addi	a4,a4,-30
     af6:	000c                	0xc
     af8:	6500                	flw	fs0,8(a0)
     afa:	0001                	nop
    for(i = (4*N); i < (5*N); ++i){
     afc:	2c00                	fld	fs0,24(s0)
     afe:	0069                	c.nop	26
     b00:	7a01                	lui	s4,0xfffe0
     b02:	0902                	c.slli64	s2
     b04:	0069                	c.nop	26
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b06:	0000                	unimp
     b08:	01b9                	addi	gp,gp,14
     b0a:	0000                	unimp
     b0c:	8a2d                	andi	a2,a2,11
    for(i = (4*N); i < (5*N); ++i){
     b0e:	c500000f          	0xc500000f
     b12:	001a                	c.slli	zero,0x6
    for(i = (5*N); i < (6*N+1); ++i){
     b14:	3000                	fld	fs0,32(s0)
     b16:	2e00000b          	0x2e00000b
        random_keys[i] = polyR[i-(5*N)];
     b1a:	5a01                	li	s4,-32
     b1c:	77dc9103          	lh	sp,1917(s9)
    for(i = (5*N); i < (6*N+1); ++i){
     b20:	012e                	slli	sp,sp,0xb
     b22:	5003055b          	0x5003055b
     b26:	0011                	c.nop	4
     b28:	2e00                	fld	fs0,24(a2)
     b2a:	5c01                	li	s8,-32
}
     b2c:	0802                	c.slli64	a6
     b2e:	00c0                	addi	s0,sp,68
     b30:	962d                	srai	a2,a2,0x2b
     b32:	d900000f          	0xd900000f
     b36:	000e                	c.slli	zero,0x3
     b38:	4f00                	lw	s0,24(a4)
     b3a:	2e00000b          	0x2e00000b
     b3e:	5a01                	li	s4,-32
     b40:	0802                	c.slli64	a6
     b42:	2e35                	jal	e7e <memcpy+0x96>
     b44:	5b01                	li	s6,-32
     b46:	3301                	jal	846 <ext_euclid+0x170>
     b48:	012e                	slli	sp,sp,0xb
     b4a:	025c                	addi	a5,sp,260
     b4c:	6508                	flw	fa0,8(a0)
     b4e:	2d00                	fld	fs0,24(a0)
     b50:	1006                	c.slli	zero,0x21
     b52:	0000                	unimp
     b54:	0daa                	slli	s11,s11,0xa
     b56:	0000                	unimp
     b58:	00000b77          	0xb77
     b5c:	012e                	slli	sp,sp,0xb
     b5e:	025a                	slli	tp,tp,0x16
     b60:	3508                	fld	fa0,40(a0)
     b62:	012e                	slli	sp,sp,0xb
     b64:	6508025b          	0x6508025b
     b68:	012e                	slli	sp,sp,0xb
     b6a:	035c                	addi	a5,sp,388
        polyR[i] = 0;
     b6c:	dc91                	beqz	s1,a88 <generate_keys+0x168>
     b6e:	5e012e77          	0x5e012e77
     b72:	7e989103          	lh	sp,2025(a7)
    for(i = 1; i < N; ++i){
     b76:	2f00                	fld	fs0,24(a4)
     b78:	101c                	addi	a5,sp,32
        f[i] = 0;
     b7a:	0000                	unimp
     b7c:	0c29                	addi	s8,s8,10
     b7e:	0000                	unimp
     b80:	012e                	slli	sp,sp,0xb
     b82:	025a                	slli	tp,tp,0x16
     b84:	3508                	fld	fa0,40(a0)
     b86:	012e                	slli	sp,sp,0xb
        g[i] = 0;
     b88:	2e33015b          	0x2e33015b
     b8c:	5c01                	li	s8,-32
     b8e:	0802                	c.slli64	a6
     b90:	2e65                	jal	f48 <memset+0x82>
    for (i = N; i < 55; ++i ){
     b92:	5d01                	li	s10,-32
     b94:	7af09103          	lh	sp,1967(ra)
        random_keys[i] = f[i];
     b98:	012e                	slli	sp,sp,0xb
     b9a:	025e                	slli	tp,tp,0x17
     b9c:	0078                	addi	a4,sp,12
     b9e:	012e                	slli	sp,sp,0xb
     ba0:	0360                	addi	s0,sp,396
     ba2:	9891                	andi	s1,s1,-28
     ba4:	007e                	c.slli	zero,0x1f
    for(i = 0; i < N; ++i){
     ba6:	1000                	addi	s0,sp,32
        random_keys[i] = f[i];
     ba8:	6904                	flw	fs1,16(a0)
    for(i = 0; i < N; ++i){
     baa:	0000                	unimp
        random_keys[i] = g[i-N];
     bac:	0900                	addi	s0,sp,144
     bae:	0069                	c.nop	26
     bb0:	0000                	unimp
     bb2:	0bbd                	addi	s7,s7,15
     bb4:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     bb6:	750a                	flw	fa0,160(sp)
     bb8:	0000                	unimp
     bba:	2f00                	fld	fs0,24(a4)
        random_keys[i] = fp[i-(2*N)];
     bbc:	0900                	addi	s0,sp,144
     bbe:	0069                	c.nop	26
     bc0:	0000                	unimp
     bc2:	00000bcf          	fnmadd.s	fs7,ft0,ft0,ft0,rne
    for(i = (2*N); i < (3*N); ++i){
     bc6:	7530                	flw	fa2,104(a0)
     bc8:	0000                	unimp
     bca:	0200                	addi	s0,sp,256
        random_keys[i] = fq[i-(3*N)];
     bcc:	3408                	fld	fa0,40(s0)
     bce:	0900                	addi	s0,sp,144
     bd0:	0069                	c.nop	26
     bd2:	0000                	unimp
     bd4:	0be1                	addi	s7,s7,24
     bd6:	0000                	unimp
     bd8:	7530                	flw	fa2,104(a0)
    for(i = (3*N); i < (4*N); ++i){
     bda:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     bdc:	0200                	addi	s0,sp,256
    for(i = (3*N); i < (4*N); ++i){
     bde:	3408                	fld	fa0,40(s0)
        fg[i] = fg[i]*p;
     be0:	0900                	addi	s0,sp,144
    for(i = 0; i < (2*N-1); ++i){
     be2:	0069                	c.nop	26
     be4:	0000                	unimp
        fg[i] = fg[i]*p;
     be6:	00000bf3          	0xbf3
     bea:	7530                	flw	fa2,104(a0)
     bec:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     bee:	0200                	addi	s0,sp,256
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bf0:	3408                	fld	fa0,40(s0)
     bf2:	0900                	addi	s0,sp,144
     bf4:	0069                	c.nop	26
     bf6:	0000                	unimp
     bf8:	0c05                	addi	s8,s8,1
     bfa:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     bfc:	7530                	flw	fa2,104(a0)
     bfe:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     c00:	0200                	addi	s0,sp,256
     c02:	3408                	fld	fa0,40(s0)
     c04:	0900                	addi	s0,sp,144
     c06:	0069                	c.nop	26
     c08:	0000                	unimp
     c0a:	00000c17          	auipc	s8,0x0
    for(i = (5*N); i < (6*N+1); ++i){
     c0e:	7530                	flw	fa2,104(a0)
        random_keys[i] = polyR[i-(5*N)];
     c10:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     c12:	0200                	addi	s0,sp,256
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c14:	3408                	fld	fa0,40(s0)
     c16:	0900                	addi	s0,sp,144
     c18:	0069                	c.nop	26
     c1a:	0000                	unimp
     c1c:	0c29                	addi	s8,s8,10
     c1e:	0000                	unimp
     c20:	7530                	flw	fa2,104(a0)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c22:	0000                	unimp
     c24:	0200                	addi	s0,sp,256
     c26:	3508                	fld	fa0,40(a0)
     c28:	3100                	fld	fs0,32(a0)
     c2a:	000001d7          	0x1d7
     c2e:	3e01                	jal	73e <ext_euclid+0x68>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c30:	0602                	c.slli64	a2
     c32:	00000ba7          	0xba7
     c36:	0caa                	slli	s9,s9,0xa
     c38:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c3a:	00c8                	addi	a0,sp,68
    temp = polymult(public_key,N,random_val,48,q,0);
     c3c:	0000                	unimp
     c3e:	9c01                	0x9c01
     c40:	0daa                	slli	s11,s11,0xa
     c42:	0000                	unimp
     c44:	4e32                	lw	t3,12(sp)
     c46:	0100                	addi	s0,sp,128
     c48:	023e                	slli	tp,tp,0xf
     c4a:	00006917          	auipc	s2,0x6
     c4e:	d900                	sw	s0,48(a0)
    for(i = 0; i < 48; ++i){
     c50:	0001                	nop
     c52:	3200                	fld	fs0,32(a2)
        temp[i] = temp[i] + message[i];
     c54:	0070                	addi	a2,sp,12
     c56:	3e01                	jal	766 <ext_euclid+0x90>
     c58:	1e02                	slli	t3,t3,0x20
     c5a:	0069                	c.nop	26
     c5c:	0000                	unimp
     c5e:	021d                	addi	tp,tp,7
     c60:	0000                	unimp
     c62:	7132                	flw	ft2,44(sp)
     c64:	0100                	addi	s0,sp,128
    for(i = 0; i < 48; ++i){
     c66:	023e                	slli	tp,tp,0xf
     c68:	6925                	lui	s2,0x9
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c6a:	0000                	unimp
     c6c:	5400                	lw	s0,40(s0)
     c6e:	0002                	c.slli64	zero
     c70:	3300                	fld	fs0,32(a4)
     c72:	00c0                	addi	s0,sp,68
     c74:	0000                	unimp
     c76:	3e01                	jal	786 <ext_euclid+0xb0>
     c78:	2d02                	fld	fs10,0(sp)
     c7a:	00000ba7          	0xba7
    for(i = (2*N); i < (3*N); ++i){
     c7e:	0000028b          	0x28b
     c82:	0005b933          	sltu	s2,a1,zero
     c86:	0100                	addi	s0,sp,128
}
     c88:	023e                	slli	tp,tp,0xf
     c8a:	a740                	fsd	fs0,136(a4)
     c8c:	b700000b          	0xb700000b
     c90:	0002                	c.slli64	zero
     c92:	3300                	fld	fs0,32(a4)
     c94:	03ee                	slli	t2,t2,0x1b
     c96:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     c98:	3e01                	jal	7a8 <ext_euclid+0xd2>
     c9a:	5402                	lw	s0,32(sp)
     c9c:	00000ba7          	0xba7
    for(i = (2*N); i < (3*N); ++i){
     ca0:	02ee                	slli	t0,t0,0x1b
     ca2:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     ca4:	0006c033          	xor	zero,a3,zero
    for(i = (2*N); i < (3*N); ++i){
     ca8:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     caa:	023e                	slli	tp,tp,0xf
     cac:	a766                	fsd	fs9,392(sp)
     cae:	0f00000b          	0xf00000b
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb2:	2b000003          	lb	zero,688(zero) # 2b0 <polymult2+0x24>
     cb6:	000002c3          	fmadd.s	ft5,ft0,ft0,ft0,rne
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cba:	4001                	c.li	zero,0
     cbc:	0a02                	c.slli64	s4
     cbe:	00000ba7          	0xba7
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc2:	612c                	flw	fa1,64(a0)
     cc4:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc6:	0241                	addi	tp,tp,16
     cc8:	a70a                	fsd	ft2,392(sp)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cca:	4600000b          	0x4600000b
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cce:	2c000003          	lb	zero,704(zero) # 2c0 <polymult2+0x34>
     cd2:	3261                	jal	65a <polydiv+0x25e>
     cd4:	0100                	addi	s0,sp,128
     cd6:	0242                	slli	tp,tp,0x10
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd8:	a70a                	fsd	ft2,392(sp)
     cda:	5900000b          	0x5900000b
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cde:	2c000003          	lb	zero,704(zero) # 2c0 <polymult2+0x34>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ce2:	43010063          	beq	sp,a6,1102 <_endtext+0x72>
     ce6:	0a02                	c.slli64	s4
     ce8:	00000ba7          	0xba7
     cec:	0382                	c.slli64	t2
     cee:	0000                	unimp
     cf0:	632c                	flw	fa1,64(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf2:	0032                	c.slli	zero,0xc
     cf4:	4401                	li	s0,0
     cf6:	0a02                	c.slli64	s4
     cf8:	00000ba7          	0xba7
        if(a2[i] <= q/2)
     cfc:	0395                	addi	t2,t2,5
     cfe:	0000                	unimp
     d00:	692c                	flw	fa1,80(a0)
    for (i = 0; i < N; ++i){
     d02:	0100                	addi	s0,sp,128
     d04:	0245                	addi	tp,tp,17
     d06:	6909                	lui	s2,0x2
    c = polymult2(secret_key_fp,N,a2,N,0);
     d08:	0000                	unimp
     d0a:	b300                	fsd	fs0,32(a4)
     d0c:	2d000003          	lb	zero,720(zero) # 2d0 <polymult2+0x44>
     d10:	0ce0                	addi	s0,sp,604
     d12:	0000                	unimp
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d14:	171d                	addi	a4,a4,-25
     d16:	0000                	unimp
     d18:	0d3c                	addi	a5,sp,664
     d1a:	0000                	unimp
     d1c:	012e                	slli	sp,sp,0xb
     d1e:	035a                	slli	t1,t1,0x16
    for(i = (2*N); i < ((2*N)+N); ++i){
     d20:	2e5d01f3          	0x2e5d01f3
     d24:	5b01                	li	s6,-32
}
     d26:	7802                	flw	fa6,32(sp)
     d28:	2e00                	fld	fs0,24(a2)
     d2a:	5c01                	li	s8,-32
     d2c:	5f01f303          	0x5f01f303
     d30:	012e                	slli	sp,sp,0xb
     d32:	025d                	addi	tp,tp,23
     d34:	0078                	addi	a4,sp,12
     d36:	012e                	slli	sp,sp,0xb
     d38:	015e                	slli	sp,sp,0x17
     d3a:	0030                	addi	a2,sp,8
        a2[i-(2*N)] = a2[i];
     d3c:	f02d                	bnez	s0,c9e <ntru_encyrpt+0x8a>
     d3e:	000c                	0xc
     d40:	0c00                	addi	s0,sp,528
     d42:	0014                	0x14
    for(i = (2*N); i < ((2*N)+N); ++i){
     d44:	6200                	flw	fs0,0(a2)
     d46:	000d                	c.nop	3
        a2[i-(2*N)] = a2[i];
     d48:	2e00                	fld	fs0,24(a2)
     d4a:	5b01                	li	s6,-32
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4c:	7902                	flw	fs2,32(sp)
        if(a2[i] <= q/2)
     d4e:	2e00                	fld	fs0,24(a2)
     d50:	5c01                	li	s8,-32
     d52:	8402                	jr	s0
            a2[i] = (-1)*(q-a2[i]);
     d54:	2e00                	fld	fs0,24(a2)
     d56:	5d01                	li	s10,-32
     d58:	8602                	jr	a2
    for (i = 0; i < N; ++i){
     d5a:	2e00                	fld	fs0,24(a2)
     d5c:	5e01                	li	t3,-32
     d5e:	8202                	jr	tp
        c2[i-(2*N)] = c2[i];
     d60:	0000                	unimp
     d62:	142d                	addi	s0,s0,-21
     d64:	000d                	c.nop	3
     d66:	1d00                	addi	s0,sp,688
    for(i = (2*N); i < ((2*N)+N); ++i){
     d68:	87000017          	auipc	zero,0x87000
        c2[i-(2*N)] = c2[i];
     d6c:	000d                	c.nop	3
     d6e:	2e00                	fld	fs0,24(a2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d70:	5a01                	li	s4,-32
  jal x0, default_exc_handler
     d72:	8702                	jr	a4
     d74:	2e00                	fld	fs0,24(a2)
  mv  x1, x0
     d76:	5b01                	li	s6,-32
     d78:	7802                	flw	fa6,32(sp)
  mv  x2, x1
     d7a:	2e00                	fld	fs0,24(a2)
  mv  x3, x1
     d7c:	5d01                	li	s10,-32
  mv  x4, x1
     d7e:	7802                	flw	fa6,32(sp)
  mv  x5, x1
     d80:	2e00                	fld	fs0,24(a2)
  mv  x6, x1
     d82:	5e01                	li	t3,-32
  mv  x7, x1
     d84:	3001                	jal	584 <polydiv+0x188>
  mv  x8, x1
     d86:	2f00                	fld	fs0,24(a4)
  mv  x9, x1
     d88:	0d20                	addi	s0,sp,664
  mv x10, x1
     d8a:	0000                	unimp
  mv x11, x1
     d8c:	140c                	addi	a1,sp,544
  mv x12, x1
     d8e:	0000                	unimp
  mv x13, x1
     d90:	012e                	slli	sp,sp,0xb
  mv x14, x1
     d92:	0079025b          	0x79025b
  mv x16, x1
     d96:	012e                	slli	sp,sp,0xb
  mv x17, x1
     d98:	025c                	addi	a5,sp,260
  mv x18, x1
     d9a:	0084                	addi	s1,sp,64
  mv x19, x1
     d9c:	012e                	slli	sp,sp,0xb
  mv x20, x1
     d9e:	025d                	addi	tp,tp,23
  mv x21, x1
     da0:	0086                	slli	ra,ra,0x1
  mv x22, x1
     da2:	012e                	slli	sp,sp,0xb
  mv x23, x1
     da4:	025e                	slli	tp,tp,0x17
  mv x24, x1
     da6:	0085                	addi	ra,ra,1
  mv x25, x1
     da8:	0000                	unimp
  mv x26, x1
     daa:	8231                	srli	a2,a2,0xc
  mv x27, x1
     dac:	0006                	c.slli	zero,0x1
  mv x28, x1
     dae:	0100                	addi	s0,sp,128
  mv x29, x1
     db0:	021c                	addi	a5,sp,256
  mv x30, x1
     db2:	a706                	fsd	ft1,392(sp)
  mv x31, x1
     db4:	1400000b          	0x1400000b
  la   x2, _stack_start
     db8:	000c                	0xc
     dba:	9600                	0x9600
     dbc:	0000                	unimp
  la x26, _bss_start
     dbe:	0100                	addi	s0,sp,128
     dc0:	d99c                	sw	a5,48(a1)
     dc2:	000e                	c.slli	zero,0x3
     dc4:	3200                	fld	fs0,32(a2)
  la x27, _bss_end
     dc6:	004e                	c.slli	zero,0x13
     dc8:	1c01                	addi	s8,s8,-32
     dca:	1702                	slli	a4,a4,0x20
     dcc:	0069                	c.nop	26
  bge x26, x27, zero_loop_end
     dce:	0000                	unimp
     dd0:	0438                	addi	a4,sp,520
  sw x0, 0(x26)
     dd2:	0000                	unimp
     dd4:	7132                	flw	ft2,44(sp)
  addi x26, x26, 4
     dd6:	0100                	addi	s0,sp,128
  ble x26, x27, zero_loop
     dd8:	021c                	addi	a5,sp,256
     dda:	691e                	flw	fs2,196(sp)
  addi x10, x0, 0
     ddc:	0000                	unimp
     dde:	6400                	flw	fs0,8(s0)
  addi x11, x0, 0
     de0:	0004                	0x4
     de2:	3300                	fld	fs0,32(a4)
  jal x1, main
     de4:	03a9                	addi	t2,t2,10
     de6:	0000                	unimp
     de8:	1c01                	addi	s8,s8,-32
     dea:	2602                	fld	fa2,0(sp)
     dec:	00000ba7          	0xba7
     df0:	0000049b          	0x49b
     df4:	00058e33          	add	t3,a1,zero
     df8:	0100                	addi	s0,sp,128
     dfa:	021c                	addi	a5,sp,256
     dfc:	a734                	fsd	fa3,72(a4)
     dfe:	c700000b          	0xc700000b
     e02:	0004                	0x4
     e04:	3300                	fld	fs0,32(a4)
     e06:	06c0                	addi	s0,sp,836
     e08:	0000                	unimp
     e0a:	1c01                	addi	s8,s8,-32
     e0c:	4502                	lw	a0,0(sp)
     e0e:	00000ba7          	0xba7
     e12:	04fe                	slli	s1,s1,0x1f
     e14:	0000                	unimp
     e16:	0002b32b          	0x2b32b
     e1a:	0100                	addi	s0,sp,128
     e1c:	021e                	slli	tp,tp,0x7
     e1e:	a70a                	fsd	ft2,392(sp)
     e20:	3400000b          	0x3400000b
     e24:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     e28:	021f a70a 000b      	0xba70a021f
     e2e:	0100                	addi	s0,sp,128
     e30:	2a5a                	fld	fs4,400(sp)
     e32:	0382                	c.slli64	t2
     e34:	0000                	unimp
     e36:	2101                	jal	1236 <_bss_start+0x22>
     e38:	0902                	c.slli64	s2
     e3a:	0bad                	addi	s7,s7,11
     e3c:	0000                	unimp
     e3e:	7ea09103          	lh	sp,2026(ra)
     e42:	3228                	fld	fa0,96(a2)
     e44:	0002                	c.slli64	zero
     e46:	0100                	addi	s0,sp,128
     e48:	0222                	slli	tp,tp,0x8
     e4a:	a70a                	fsd	ft2,392(sp)
     e4c:	3500000b          	0x3500000b
     e50:	0005                	c.nop	1
     e52:	2c00                	fld	fs0,24(s0)
     e54:	0069                	c.nop	26
     e56:	2301                	jal	1356 <_bss_start+0x142>
     e58:	0902                	c.slli64	s2
     e5a:	0069                	c.nop	26
     e5c:	0000                	unimp
     e5e:	0548                	addi	a0,sp,644
     e60:	0000                	unimp
     e62:	3c2d                	jal	89c <ext_euclid+0x1c6>
     e64:	000c                	0xc
     e66:	c500                	sw	s0,8(a0)
     e68:	001a                	c.slli	zero,0x6
     e6a:	8500                	0x8500
     e6c:	000e                	c.slli	zero,0x3
     e6e:	2e00                	fld	fs0,24(a2)
     e70:	5a01                	li	s4,-32
     e72:	7202                	flw	ft4,32(sp)
     e74:	2e00                	fld	fs0,24(a2)
     e76:	5b01                	li	s6,-32
     e78:	0305                	addi	t1,t1,1
     e7a:	1090                	addi	a2,sp,96
     e7c:	0000                	unimp
     e7e:	012e                	slli	sp,sp,0xb
     e80:	025c                	addi	a5,sp,260
     e82:	c008                	sw	a0,0(s0)
     e84:	2d00                	fld	fs0,24(a0)
     e86:	0c4e                	slli	s8,s8,0x13
     e88:	0000                	unimp
     e8a:	183d                	addi	a6,a6,-17
     e8c:	0000                	unimp
     e8e:	0eb6                	slli	t4,t4,0xd
     e90:	0000                	unimp
     e92:	012e                	slli	sp,sp,0xb
     e94:	025a                	slli	tp,tp,0x16
     e96:	0084                	addi	s1,sp,64
     e98:	012e                	slli	sp,sp,0xb
     e9a:	0078025b          	0x78025b
     e9e:	012e                	slli	sp,sp,0xb
     ea0:	025c                	addi	a5,sp,260
     ea2:	0072                	c.slli	zero,0x1c
     ea4:	012e                	slli	sp,sp,0xb
     ea6:	025d                	addi	tp,tp,23
     ea8:	3008                	fld	fa0,32(s0)
     eaa:	012e                	slli	sp,sp,0xb
     eac:	025e                	slli	tp,tp,0x17
     eae:	0082                	c.slli64	ra
     eb0:	012e                	slli	sp,sp,0xb
     eb2:	015f 0030 7c2f      	0x7c2f0030015f
     eb8:	000c                	0xc
     eba:	0c00                	addi	s0,sp,528
     ebc:	0014                	0x14
     ebe:	2e00                	fld	fs0,24(a2)
     ec0:	5b01                	li	s6,-32
     ec2:	7902                	flw	fs2,32(sp)
     ec4:	2e00                	fld	fs0,24(a2)
     ec6:	5c01                	li	s8,-32
     ec8:	8302                	jr	t1
     eca:	2e00                	fld	fs0,24(a2)
     ecc:	5d01                	li	s10,-32
     ece:	7802                	flw	fa6,32(sp)
     ed0:	2e01                	jal	11e0 <_endtext+0x150>
     ed2:	5e01                	li	t3,-32
     ed4:	8202                	jr	tp
     ed6:	0000                	unimp
     ed8:	3100                	fld	fs0,32(a0)
     eda:	031d                	addi	t1,t1,7
     edc:	0000                	unimp
     ede:	c301                	beqz	a4,ede <memset+0x18>
     ee0:	0601                	addi	a2,a2,0
     ee2:	00000ba7          	0xba7
     ee6:	0920                	addi	s0,sp,152
     ee8:	0000                	unimp
     eea:	02f4                	addi	a3,sp,332
     eec:	0000                	unimp
     eee:	9c01                	0x9c01
     ef0:	1089                	addi	ra,ra,-30
     ef2:	0000                	unimp
     ef4:	4e32                	lw	t3,12(sp)
     ef6:	0100                	addi	s0,sp,128
     ef8:	691801c3          	fmadd.s	ft3,fa6,fa7,fa3,rne
     efc:	0000                	unimp
     efe:	8a00                	0x8a00
     f00:	0005                	c.nop	1
     f02:	3200                	fld	fs0,32(a2)
     f04:	0070                	addi	a2,sp,12
     f06:	c301                	beqz	a4,f06 <memset+0x40>
     f08:	1f01                	addi	t5,t5,-32
     f0a:	0069                	c.nop	26
     f0c:	0000                	unimp
     f0e:	000005db          	0x5db
     f12:	7132                	flw	ft2,44(sp)
     f14:	0100                	addi	s0,sp,128
     f16:	692601c3          	fmadd.s	ft3,fa2,fs2,fa3,rne
     f1a:	0000                	unimp
     f1c:	1200                	addi	s0,sp,288
     f1e:	0006                	c.slli	zero,0x1
     f20:	3400                	fld	fs0,40(s0)
     f22:	0066                	c.slli	zero,0x19
     f24:	c601                	beqz	a2,f2c <memset+0x66>
     f26:	0901                	addi	s2,s2,0
     f28:	1089                	addi	ra,ra,-30
     f2a:	0000                	unimp
     f2c:	7c989103          	lh	sp,1993(a7)
     f30:	6734                	flw	fa3,72(a4)
     f32:	0100                	addi	s0,sp,128
     f34:	890901c7          	fmsub.s	ft3,fs2,fa6,fa7,rne
     f38:	0010                	0x10
     f3a:	0300                	addi	s0,sp,384
     f3c:	f491                	bnez	s1,e48 <memcpy+0x60>
     f3e:	2c7d                	jal	11fc <_endtext+0x16c>
     f40:	7066                	flw	ft0,120(sp)
     f42:	0100                	addi	s0,sp,128
     f44:	01c9                	addi	gp,gp,18
     f46:	a70a                	fsd	ft2,392(sp)
     f48:	4900000b          	0x4900000b
     f4c:	0006                	c.slli	zero,0x1
     f4e:	2c00                	fld	fs0,24(s0)
     f50:	7166                	flw	ft2,120(sp)
     f52:	0100                	addi	s0,sp,128
     f54:	01ca                	slli	gp,gp,0x12
     f56:	a70a                	fsd	ft2,392(sp)
     f58:	5c00000b          	0x5c00000b
     f5c:	0006                	c.slli	zero,0x1
     f5e:	2c00                	fld	fs0,24(s0)
     f60:	6766                	flw	fa4,88(sp)
     f62:	0100                	addi	s0,sp,128
     f64:	a70a01cb          	fnmsub.q	ft3,fs4,fa6,fs4,rne
     f68:	7a00000b          	0x7a00000b
     f6c:	0006                	c.slli	zero,0x1
int main(){
     f6e:	2c00                	fld	fs0,24(s0)
     f70:	6b70                	flw	fa2,84(a4)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f72:	0100                	addi	s0,sp,128
     f74:	01cc                	addi	a1,sp,196
     f76:	a70a                	fsd	ft2,392(sp)
     f78:	9800000b          	0x9800000b
     f7c:	0006                	c.slli	zero,0x1
     f7e:	2800                	fld	fs0,16(s0)
int main(){
     f80:	06c0                	addi	s0,sp,836
     f82:	0000                	unimp
     f84:	cd01                	beqz	a0,f9c <main+0x2e>
     f86:	0901                	addi	s2,s2,0
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f88:	1099                	addi	ra,ra,-26
    keys = generate_keys(N, p, q);
     f8a:	0000                	unimp
     f8c:	06b6                	slli	a3,a3,0xd
     f8e:	0000                	unimp
     f90:	692c                	flw	fa1,80(a0)
     f92:	0100                	addi	s0,sp,128
     f94:	01ce                	slli	gp,gp,0x13
     f96:	6909                	lui	s2,0x2
    for(i = 0; i < N; ++i){
     f98:	0000                	unimp
     f9a:	1900                	addi	s0,sp,176
        secret_key_f[i] = keys[i];
     f9c:	28000007          	0x28000007
     fa0:	03ba                	slli	t2,t2,0xe
     fa2:	0000                	unimp
     fa4:	cf01                	beqz	a4,fbc <main+0x4e>
     fa6:	0a01                	addi	s4,s4,0
    for(i = 0; i < N; ++i){
     fa8:	00000ba7          	0xba7
     fac:	0855                	addi	a6,a6,21
    for(i = N; i < (2*N); ++i){
     fae:	0000                	unimp
     fb0:	7535                	lui	a0,0xfffed
     fb2:	0000                	unimp
     fb4:	6d00                	flw	fs0,24(a0)
     fb6:	0008                	0x8
     fb8:	2d00                	fld	fs0,24(a0)
        secret_key_fp[i-(2*N)] = keys[i];
     fba:	0966                	slli	s2,s2,0x19
     fbc:	0000                	unimp
     fbe:	1ad0                	addi	a2,sp,372
     fc0:	0000                	unimp
     fc2:	0fd9                	addi	t6,t6,22
    for(i = (2*N); i < (3*N); ++i){
     fc4:	0000                	unimp
     fc6:	012e                	slli	sp,sp,0xb
    for(i = (3*N); i < (4*N); ++i){
     fc8:	035a                	slli	t1,t1,0x16
     fca:	a478                	fsd	fa4,200(s0)
     fcc:	2e7c                	fld	fa5,216(a2)
     fce:	5b01                	li	s6,-32
     fd0:	3001                	jal	7d0 <ext_euclid+0xfa>
     fd2:	012e                	slli	sp,sp,0xb
        public_key[i-(4*N)] = keys[i];
     fd4:	025c                	addi	a5,sp,260
     fd6:	d008                	sw	a0,32(s0)
     fd8:	2d00                	fld	fs0,24(a0)
     fda:	09e6                	slli	s3,s3,0x19
     fdc:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     fde:	1ad0                	addi	a2,sp,372
     fe0:	0000                	unimp
     fe2:	0ff9                	addi	t6,t6,30
     fe4:	0000                	unimp
     fe6:	012e                	slli	sp,sp,0xb
     fe8:	035a                	slli	t1,t1,0x16
        ring_poly[i-(5*N)] = keys[i];
     fea:	f878                	fsw	fa4,116(s0)
     fec:	2e7d                	jal	13aa <_bss_start+0x196>
     fee:	5b01                	li	s6,-32
     ff0:	3001                	jal	7f0 <ext_euclid+0x11a>
     ff2:	012e                	slli	sp,sp,0xb
    for(i = (5*N); i < (6*N+1); ++i){
     ff4:	025c                	addi	a5,sp,260
     ff6:	d808                	sw	a0,48(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ff8:	2d00                	fld	fs0,24(a0)
     ffa:	0aae                	slli	s5,s5,0xb
     ffc:	0000                	unimp
     ffe:	10ac                	addi	a1,sp,104
    1000:	0000                	unimp
    1002:	1020                	addi	s0,sp,40
    1004:	0000                	unimp
    1006:	012e                	slli	sp,sp,0xb
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1008:	025a                	slli	tp,tp,0x16
    100a:	0072                	c.slli	zero,0x1c
    100c:	012e                	slli	sp,sp,0xb
    100e:	9878035b          	0x9878035b
    1012:	2e7c                	fld	fa5,216(a2)
    1014:	5c01                	li	s8,-32
    1016:	8502                	jr	a0
    1018:	2e00                	fld	fs0,24(a2)
    101a:	5d01                	li	s10,-32
            resultkon[0] = 0xDEDEDEDE;
    101c:	8702                	jr	a4
    101e:	0000                	unimp
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1020:	c82d                	beqz	s0,1092 <_endtext+0x2>
    1022:	000a                	c.slli	zero,0x2
    1024:	ac00                	fsd	fs0,24(s0)
    1026:	0010                	0x10
    1028:	4700                	lw	s0,8(a4)
            resultkon[0] = 0xDEDEDEDE;
    102a:	0010                	0x10
    102c:	2e00                	fld	fs0,24(a2)
	    *var = resultkon[0];
    102e:	5a01                	li	s4,-32
    for(i = 0; i < 32; ++i){
    1030:	7202                	flw	ft4,32(sp)
    1032:	2e00                	fld	fs0,24(a2)
        if(!(message[i] == Dec_Message[i])){
    1034:	5b01                	li	s6,-32
    1036:	7c987803          	0x7c987803
    103a:	012e                	slli	sp,sp,0xb
    103c:	025c                	addi	a5,sp,260
    103e:	0085                	addi	ra,ra,1
    1040:	012e                	slli	sp,sp,0xb
    1042:	025d                	addi	tp,tp,23
            resultkon[0] = 0xBABABABA;
    1044:	0086                	slli	ra,ra,0x1
    1046:	2d00                	fld	fs0,24(a0)
    1048:	0ae8                	addi	a0,sp,348
    104a:	0000                	unimp
    104c:	171d                	addi	a4,a4,-25
 	    *var = resultkon[0];
    104e:	0000                	unimp
    1050:	106c                	addi	a1,sp,44
    1052:	0000                	unimp
    1054:	012e                	slli	sp,sp,0xb
    1056:	0082025b          	0x82025b
}
    105a:	012e                	slli	sp,sp,0xb
    105c:	025c                	addi	a5,sp,260
    105e:	0089                	addi	ra,ra,2
    1060:	012e                	slli	sp,sp,0xb
    1062:	025d                	addi	tp,tp,23
    1064:	0082                	c.slli64	ra
    1066:	012e                	slli	sp,sp,0xb
    1068:	015e                	slli	sp,sp,0x17
            resultkon[0] = 0xDEDEDEDE;
    106a:	0030                	addi	a2,sp,8
	    *var = resultkon[0];
    106c:	000afc2f          	0xafc2f
    1070:	0c00                	addi	s0,sp,528
    1072:	0014                	0x14
    1074:	2e00                	fld	fs0,24(a2)
    1076:	5c01                	li	s8,-32
    for(i = 0; i < 32; ++i){
    1078:	7202                	flw	ft4,32(sp)
    107a:	2e00                	fld	fs0,24(a2)
    107c:	5d01                	li	s10,-32
    107e:	8502                	jr	a0
    1080:	2e00                	fld	fs0,24(a2)
    1082:	5e01                	li	t3,-32
    1084:	8602                	jr	a2
    1086:	0000                	unimp
    1088:	0900                	addi	s0,sp,144
    108a:	0069                	c.nop	26
    108c:	0000                	unimp
    108e:	1099                	addi	ra,ra,-26
    1090:	0000                	unimp
    1092:	750a                	flw	fa0,160(sp)
    1094:	0000                	unimp
    1096:	3600                	fld	fs0,40(a2)
    1098:	0900                	addi	s0,sp,144
    109a:	0069                	c.nop	26
    109c:	0000                	unimp
    109e:	10ac                	addi	a1,sp,104
    10a0:	0000                	unimp
    10a2:	7536                	flw	fa0,108(sp)
    10a4:	0000                	unimp
    10a6:	b000                	fsd	fs0,32(s0)
    10a8:	0000000f          	fence	unknown,unknown
    10ac:	6131                	addi	sp,sp,320
    10ae:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    10b2:	a706014b          	fnmsub.q	ft2,fa2,fa6,fs4,rne
    10b6:	d600000b          	0xd600000b
    10ba:	0006                	c.slli	zero,0x1
    10bc:	4a00                	lw	s0,16(a2)
    10be:	0002                	c.slli64	zero
    10c0:	0100                	addi	s0,sp,128
    10c2:	879c                	0x879c
    10c4:	33000013          	li	zero,816
    10c8:	06c0                	addi	s0,sp,836
    10ca:	0000                	unimp
    10cc:	4b01                	li	s6,0
    10ce:	1601                	addi	a2,a2,-32
    10d0:	00000ba7          	0xba7
    10d4:	000008b3          	add	a7,zero,zero
    10d8:	00019a33          	sll	s4,gp,zero
    10dc:	0100                	addi	s0,sp,128
    10de:	a722014b          	fnmsub.q	ft2,ft4,fs2,fs4,rne
    10e2:	ed00000b          	0xed00000b
    10e6:	0008                	0x8
    10e8:	3300                	fld	fs0,32(a4)
    10ea:	0012                	c.slli	zero,0x4
    10ec:	0000                	unimp
    10ee:	4b01                	li	s6,0
    10f0:	2d01                	jal	1700 <result+0x3c>
    10f2:	0069                	c.nop	26
    10f4:	0000                	unimp
    10f6:	00000927          	0x927
    10fa:	6d32                	flw	fs10,12(sp)
    10fc:	0100646f          	jal	s0,710c <_stack_len+0x310c>
    1100:	6937014b          	fnmsub.s	ft2,fa4,fs3,fa3,rne
    1104:	0000                	unimp
    1106:	5e00                	lw	s0,56(a2)
    1108:	0009                	c.nop	2
    110a:	2800                	fld	fs0,16(s0)
    110c:	029c                	addi	a5,sp,320
    110e:	0000                	unimp
    1110:	4e01                	li	t3,0
    1112:	0a01                	addi	s4,s4,0
    1114:	00000ba7          	0xba7
    1118:	0995                	addi	s3,s3,5
    111a:	0000                	unimp
    111c:	4e2c                	lw	a1,88(a2)
    111e:	0100                	addi	s0,sp,128
    1120:	6909014f          	fnmadd.s	ft2,fs2,fa6,fa3,rne
    1124:	0000                	unimp
    1126:	ad00                	fsd	fs0,24(a0)
    1128:	0009                	c.nop	2
    112a:	2c00                	fld	fs0,24(s0)
    112c:	0069                	c.nop	26
    112e:	4f01                	li	t5,0
    1130:	0c01                	addi	s8,s8,0
    1132:	0069                	c.nop	26
    1134:	0000                	unimp
    1136:	09e8                	addi	a0,sp,220
    1138:	0000                	unimp
    113a:	6a2c                	flw	fa1,80(a2)
    113c:	0100                	addi	s0,sp,128
    113e:	690f014f          	fnmadd.s	ft2,ft10,fa6,fa3,rne
    1142:	0000                	unimp
    1144:	9100                	0x9100
    1146:	2800000b          	0x2800000b
    114a:	0000055b          	0x55b
    114e:	5001                	c.li	zero,-32
    1150:	0901                	addi	s2,s2,0
    1152:	00001387          	0x1387
    1156:	00000baf          	0xbaf
    115a:	d428                	sw	a0,104(s0)
    115c:	0005                	c.nop	1
    115e:	0100                	addi	s0,sp,128
    1160:	0151                	addi	sp,sp,20
    1162:	9a09                	andi	a2,a2,-30
    1164:	cf000013          	li	zero,-784
    1168:	2c00000b          	0x2c00000b
    116c:	6972                	flw	fs2,28(sp)
    116e:	0100                	addi	s0,sp,128
    1170:	0152                	slli	sp,sp,0x14
    1172:	ad09                	j	1784 <result+0xc0>
    1174:	ef000013          	li	zero,-272
    1178:	2800000b          	0x2800000b
    117c:	0429                	addi	s0,s0,10
    117e:	0000                	unimp
    1180:	5401                	li	s0,-32
    1182:	0901                	addi	s2,s2,0
    1184:	13c0                	addi	s0,sp,484
    1186:	0000                	unimp
    1188:	00000c0f          	0xc0f
    118c:	742c                	flw	fa1,104(s0)
    118e:	0069                	c.nop	26
    1190:	5501                	li	a0,-32
    1192:	0901                	addi	s2,s2,0
    1194:	000013d3          	fadd.s	ft7,ft0,ft0,rtz
    1198:	0c45                	addi	s8,s8,17
    119a:	0000                	unimp
    119c:	4128                	lw	a0,64(a0)
    119e:	0004                	0x4
    11a0:	0100                	addi	s0,sp,128
    11a2:	0156                	slli	sp,sp,0x15
    11a4:	e609                	bnez	a2,11ae <_endtext+0x11e>
    11a6:	65000013          	li	zero,1616
    11aa:	000c                	0xc
    11ac:	2800                	fld	fs0,16(s0)
    11ae:	0232                	slli	tp,tp,0xc
    11b0:	0000                	unimp
    11b2:	5701                	li	a4,-32
    11b4:	0901                	addi	s2,s2,0
    11b6:	13f9                	addi	t2,t2,-2
    11b8:	0000                	unimp
    11ba:	00000c9b          	0xc9b
    11be:	722c                	flw	fa1,96(a2)
    11c0:	7365                	lui	t1,0xffff9
    11c2:	0100                	addi	s0,sp,128
    11c4:	0158                	addi	a4,sp,132
    11c6:	a70a                	fsd	ft2,392(sp)
    11c8:	f500000b          	0xf500000b
    11cc:	000c                	0xc
    11ce:	2800                	fld	fs0,16(s0)
    11d0:	0161                	addi	sp,sp,24
    11d2:	0000                	unimp
    11d4:	5901                	li	s2,-32
    11d6:	0a01                	addi	s4,s4,0
    11d8:	00000ba7          	0xba7
    11dc:	00000d13          	li	s10,0
    11e0:	6628                	flw	fa0,72(a2)
    11e2:	0001                	nop
    11e4:	0100                	addi	s0,sp,128
    11e6:	015a                	slli	sp,sp,0x16
    11e8:	a70a                	fsd	ft2,392(sp)
    11ea:	3100000b          	0x3100000b
    11ee:	000d                	c.nop	3
    11f0:	2800                	fld	fs0,16(s0)
    11f2:	03fa                	slli	t2,t2,0x1e
    11f4:	0000                	unimp
    11f6:	5b01                	li	s6,-32
    11f8:	0901                	addi	s2,s2,0
    11fa:	0069                	c.nop	26
    11fc:	0000                	unimp
    11fe:	00000d4f          	fnmadd.s	fs10,ft0,ft0,ft0,rne
    1202:	7535                	lui	a0,0xfffed
    1204:	0000                	unimp
    1206:	a800                	fsd	fs0,16(s0)
    1208:	000d                	c.nop	3
    120a:	3500                	fld	fs0,40(a0)
    120c:	0075                	c.nop	29
    120e:	0000                	unimp
    1210:	00000de3          	beqz	zero,1a2a <ti_2+0x10e>
    1214:	7535                	lui	a0,0xfffed
    1216:	0000                	unimp
    1218:	1e00                	addi	s0,sp,816
    121a:	000e                	c.slli	zero,0x3
    121c:	3500                	fld	fs0,40(a0)
    121e:	0075                	c.nop	29
    1220:	0000                	unimp
    1222:	0e59                	addi	t3,t3,22
    1224:	0000                	unimp
    1226:	7535                	lui	a0,0xfffed
    1228:	0000                	unimp
    122a:	9400                	0x9400
    122c:	000e                	c.slli	zero,0x3
    122e:	3500                	fld	fs0,40(a0)
    1230:	0075                	c.nop	29
    1232:	0000                	unimp
    1234:	00000ecf          	fnmadd.s	ft9,ft0,ft0,ft0,rne
    1238:	7535                	lui	a0,0xfffed
    123a:	0000                	unimp
    123c:	0a00                	addi	s0,sp,272
    123e:	2d00000f          	0x2d00000f
    1242:	075c                	addi	a5,sp,900
    1244:	0000                	unimp
    1246:	00001a03          	lh	s4,0(zero) # 0 <__DYNAMIC>
    124a:	1261                	addi	tp,tp,-8
    124c:	0000                	unimp
    124e:	012e                	slli	sp,sp,0xb
    1250:	025a                	slli	tp,tp,0x16
    1252:	012e0083          	lb	ra,18(t3) # 1012 <main+0xa4>
    1256:	0079025b          	0x79025b
    125a:	012e                	slli	sp,sp,0xb
    125c:	025c                	addi	a5,sp,260
    125e:	2d00008b          	0x2d00008b
    1262:	0764                	addi	s1,sp,908
    1264:	0000                	unimp
    1266:	00001a03          	lh	s4,0(zero) # 0 <__DYNAMIC>
    126a:	1281                	addi	t0,t0,-32
    126c:	0000                	unimp
    126e:	012e                	slli	sp,sp,0xb
    1270:	025a                	slli	tp,tp,0x16
    1272:	0085                	addi	ra,ra,1
    1274:	012e                	slli	sp,sp,0xb
    1276:	0079025b          	0x79025b
    127a:	012e                	slli	sp,sp,0xb
    127c:	025c                	addi	a5,sp,260
    127e:	2d00008b          	0x2d00008b
    1282:	0770                	addi	a2,sp,908
    1284:	0000                	unimp
    1286:	140c                	addi	a1,sp,544
    1288:	0000                	unimp
    128a:	12ad                	addi	t0,t0,-21
    128c:	0000                	unimp
    128e:	012e                	slli	sp,sp,0xb
    1290:	025a                	slli	tp,tp,0x16
    1292:	012e0083          	lb	ra,18(t3)
    1296:	008b025b          	0x8b025b
    129a:	012e                	slli	sp,sp,0xb
    129c:	025c                	addi	a5,sp,260
    129e:	0085                	addi	ra,ra,1
    12a0:	012e                	slli	sp,sp,0xb
    12a2:	025d                	addi	tp,tp,23
    12a4:	012e008b          	0x12e008b
    12a8:	025e                	slli	tp,tp,0x17
    12aa:	0079                	c.nop	30
    12ac:	2d00                	fld	fs0,24(a0)
    12ae:	078c                	addi	a1,sp,960
    12b0:	0000                	unimp
    12b2:	00001a03          	lh	s4,0(zero) # 0 <__DYNAMIC>
    12b6:	12cd                	addi	t0,t0,-13
    12b8:	0000                	unimp
    12ba:	012e                	slli	sp,sp,0xb
    12bc:	025a                	slli	tp,tp,0x16
    12be:	0072                	c.slli	zero,0x1c
    12c0:	012e                	slli	sp,sp,0xb
    12c2:	0079025b          	0x79025b
    12c6:	012e                	slli	sp,sp,0xb
    12c8:	025c                	addi	a5,sp,260
    12ca:	2d00008b          	0x2d00008b
    12ce:	0798                	addi	a4,sp,960
    12d0:	0000                	unimp
    12d2:	140c                	addi	a1,sp,544
    12d4:	0000                	unimp
    12d6:	12f9                	addi	t0,t0,-2
    12d8:	0000                	unimp
    12da:	012e                	slli	sp,sp,0xb
    12dc:	025a                	slli	tp,tp,0x16
    12de:	0072                	c.slli	zero,0x1c
    12e0:	012e                	slli	sp,sp,0xb
    12e2:	008b025b          	0x8b025b
    12e6:	012e                	slli	sp,sp,0xb
    12e8:	025c                	addi	a5,sp,260
    12ea:	0085                	addi	ra,ra,1
    12ec:	012e                	slli	sp,sp,0xb
    12ee:	025d                	addi	tp,tp,23
    12f0:	012e008b          	0x12e008b
    12f4:	025e                	slli	tp,tp,0x17
    12f6:	0079                	c.nop	30
    12f8:	2d00                	fld	fs0,24(a0)
    12fa:	07a6                	slli	a5,a5,0x9
    12fc:	0000                	unimp
    12fe:	00001a03          	lh	s4,0(zero) # 0 <__DYNAMIC>
    1302:	1319                	addi	t1,t1,-26
    1304:	0000                	unimp
    1306:	012e                	slli	sp,sp,0xb
    1308:	025a                	slli	tp,tp,0x16
    130a:	012e0087          	0x12e0087
    130e:	0079025b          	0x79025b
    1312:	012e                	slli	sp,sp,0xb
    1314:	025c                	addi	a5,sp,260
    1316:	2d00008b          	0x2d00008b
    131a:	07b4                	addi	a3,sp,968
    131c:	0000                	unimp
    131e:	183d                	addi	a6,a6,-17
    1320:	0000                	unimp
    1322:	134a                	slli	t1,t1,0x32
    1324:	0000                	unimp
    1326:	012e                	slli	sp,sp,0xb
    1328:	025a                	slli	tp,tp,0x16
    132a:	012e0087          	0x12e0087
    132e:	008b025b          	0x8b025b
    1332:	012e                	slli	sp,sp,0xb
    1334:	025c                	addi	a5,sp,260
    1336:	0086                	slli	ra,ra,0x1
    1338:	012e                	slli	sp,sp,0xb
    133a:	025d                	addi	tp,tp,23
    133c:	012e008b          	0x12e008b
    1340:	025e                	slli	tp,tp,0x17
    1342:	0079                	c.nop	30
    1344:	012e                	slli	sp,sp,0xb
    1346:	015f 0030 c22d      	0xc22d0030015f
    134c:	03000007          	0x3000007
    1350:	001a                	c.slli	zero,0x6
    1352:	6a00                	flw	fs0,16(a2)
    1354:	2e000013          	li	zero,736
    1358:	5a01                	li	s4,-32
    135a:	7202                	flw	ft4,32(sp)
    135c:	2e00                	fld	fs0,24(a2)
    135e:	5b01                	li	s6,-32
    1360:	7902                	flw	fs2,32(sp)
    1362:	2e00                	fld	fs0,24(a2)
    1364:	5c01                	li	s8,-32
    1366:	8b02                	jr	s6
    1368:	0000                	unimp
    136a:	0007d22f          	0x7d22f
    136e:	0300                	addi	s0,sp,384
    1370:	001a                	c.slli	zero,0x6
    1372:	2e00                	fld	fs0,24(a2)
    1374:	5a01                	li	s4,-32
    1376:	8902                	jr	s2
    1378:	2e00                	fld	fs0,24(a2)
    137a:	5b01                	li	s6,-32
    137c:	7902                	flw	fs2,32(sp)
    137e:	2e00                	fld	fs0,24(a2)
    1380:	5c01                	li	s8,-32
    1382:	8b02                	jr	s6
    1384:	0000                	unimp
    1386:	0900                	addi	s0,sp,144
    1388:	0069                	c.nop	26
    138a:	0000                	unimp
    138c:	139a                	slli	t2,t2,0x26
    138e:	0000                	unimp
    1390:	7536                	flw	fa0,108(sp)
    1392:	0000                	unimp
    1394:	0200                	addi	s0,sp,256
    1396:	0012                	c.slli	zero,0x4
    1398:	0000                	unimp
    139a:	6909                	lui	s2,0x2
    139c:	0000                	unimp
    139e:	ad00                	fsd	fs0,24(a0)
    13a0:	36000013          	li	zero,864
    13a4:	0075                	c.nop	29
    13a6:	0000                	unimp
    13a8:	0000120b          	0x120b
    13ac:	0900                	addi	s0,sp,144
    13ae:	0069                	c.nop	26
    13b0:	0000                	unimp
    13b2:	13c0                	addi	s0,sp,484
    13b4:	0000                	unimp
    13b6:	7536                	flw	fa0,108(sp)
    13b8:	0000                	unimp
    13ba:	1400                	addi	s0,sp,544
    13bc:	0012                	c.slli	zero,0x4
    13be:	0000                	unimp
    13c0:	6909                	lui	s2,0x2
    13c2:	0000                	unimp
    13c4:	d300                	sw	s0,32(a4)
    13c6:	36000013          	li	zero,864
    13ca:	0075                	c.nop	29
    13cc:	0000                	unimp
    13ce:	121d                	addi	tp,tp,-25
    13d0:	0000                	unimp
    13d2:	0900                	addi	s0,sp,144
    13d4:	0069                	c.nop	26
    13d6:	0000                	unimp
    13d8:	13e6                	slli	t2,t2,0x39
    13da:	0000                	unimp
    13dc:	7536                	flw	fa0,108(sp)
    13de:	0000                	unimp
    13e0:	2600                	fld	fs0,8(a2)
    13e2:	0012                	c.slli	zero,0x4
    13e4:	0000                	unimp
    13e6:	6909                	lui	s2,0x2
    13e8:	0000                	unimp
    13ea:	f900                	fsw	fs0,48(a0)
    13ec:	36000013          	li	zero,864
    13f0:	0075                	c.nop	29
    13f2:	0000                	unimp
    13f4:	0000122f          	0x122f
    13f8:	0900                	addi	s0,sp,144
    13fa:	0069                	c.nop	26
    13fc:	0000                	unimp
    13fe:	140c                	addi	a1,sp,544
    1400:	0000                	unimp
    1402:	7536                	flw	fa0,108(sp)
    1404:	0000                	unimp
    1406:	3800                	fld	fs0,48(s0)
    1408:	0012                	c.slli	zero,0x4
    140a:	0000                	unimp
    140c:	00019237          	lui	tp,0x19
    1410:	0100                	addi	s0,sp,128
    1412:	06a9                	addi	a3,a3,10
    1414:	00000ba7          	0xba7
    1418:	03fc                	addi	a5,sp,460
    141a:	0000                	unimp
    141c:	02da                	slli	t0,t0,0x16
    141e:	0000                	unimp
    1420:	9c01                	0x9c01
    1422:	16d1                	addi	a3,a3,-12
    1424:	0000                	unimp
    1426:	6e38                	flw	fa4,88(a2)
    1428:	6d75                	lui	s10,0x1d
    142a:	0100                	addi	s0,sp,128
    142c:	13a9                	addi	t2,t2,-22
    142e:	00000ba7          	0xba7
    1432:	0f45                	addi	t5,t5,17
    1434:	0000                	unimp
    1436:	0e39                	addi	t3,t3,14
    1438:	0001                	nop
    143a:	0100                	addi	s0,sp,128
    143c:	1ca9                	addi	s9,s9,-22
    143e:	0069                	c.nop	26
    1440:	0000                	unimp
    1442:	0f98                	addi	a4,sp,976
    1444:	0000                	unimp
    1446:	a239                	j	1554 <product2+0xe8>
    1448:	0006                	c.slli	zero,0x1
    144a:	0100                	addi	s0,sp,128
    144c:	28a9                	jal	14a6 <product2+0x3a>
    144e:	00000ba7          	0xba7
    1452:	1015                	c.nop	-27
    1454:	0000                	unimp
    1456:	c639                	beqz	a2,14a4 <product2+0x38>
    1458:	0006                	c.slli	zero,0x1
    145a:	0100                	addi	s0,sp,128
    145c:	33a9                	jal	11a6 <_endtext+0x116>
    145e:	0069                	c.nop	26
    1460:	0000                	unimp
    1462:	0000107b          	0x107b
    1466:	6d38                	flw	fa4,88(a0)
    1468:	0100646f          	jal	s0,7478 <_stack_len+0x3478>
    146c:	3fa9                	jal	13c6 <_bss_start+0x1b2>
    146e:	0069                	c.nop	26
    1470:	0000                	unimp
    1472:	10b2                	slli	ra,ra,0x2c
    1474:	0000                	unimp
    1476:	753a                	flw	fa0,172(sp)
    1478:	0100                	addi	s0,sp,128
    147a:	09ac                	addi	a1,sp,216
    147c:	0069                	c.nop	26
    147e:	0000                	unimp
    1480:	10e9                	addi	ra,ra,-6
    1482:	0000                	unimp
    1484:	643a                	flw	fs0,140(sp)
    1486:	0100                	addi	s0,sp,128
    1488:	0bac                	addi	a1,sp,472
    148a:	0069                	c.nop	26
    148c:	0000                	unimp
    148e:	1112                	slli	sp,sp,0x24
    1490:	0000                	unimp
    1492:	0032643b          	0x32643b
    1496:	ac01                	j	16a6 <product2+0x23a>
    1498:	690d                	lui	s2,0x3
    149a:	0000                	unimp
    149c:	3a00                	fld	fs0,48(a2)
    149e:	0069                	c.nop	26
    14a0:	ac01                	j	16b0 <product2+0x244>
    14a2:	6910                	flw	fa2,16(a0)
    14a4:	0000                	unimp
    14a6:	3000                	fld	fs0,32(s0)
    14a8:	0011                	c.nop	4
    14aa:	3b00                	fld	fs0,48(a4)
    14ac:	5f62                	lw	t5,56(sp)
    14ae:	004e                	c.slli	zero,0x13
    14b0:	ac01                	j	16c0 <product2+0x254>
    14b2:	6912                	flw	fs2,4(sp)
    14b4:	0000                	unimp
    14b6:	3a00                	fld	fs0,48(a2)
    14b8:	5f72                	lw	t5,60(sp)
    14ba:	0064                	addi	s1,sp,12
    14bc:	ac01                	j	16cc <result+0x8>
    14be:	6916                	flw	fs2,68(sp)
    14c0:	0000                	unimp
    14c2:	ba00                	fsd	fs0,48(a2)
    14c4:	0012                	c.slli	zero,0x4
    14c6:	3c00                	fld	fs0,56(s0)
    14c8:	028c                	addi	a1,sp,320
    14ca:	0000                	unimp
    14cc:	ad01                	j	1adc <random_keys+0x30>
    14ce:	a70a                	fsd	ft2,392(sp)
    14d0:	d800000b          	0xd800000b
    14d4:	0012                	c.slli	zero,0x4
    14d6:	3a00                	fld	fs0,48(a2)
    14d8:	0076                	c.slli	zero,0x1d
    14da:	af01                	j	1bea <random_keys+0x13e>
    14dc:	d109                	beqz	a0,13de <_bss_start+0x1ca>
    14de:	0016                	c.slli	zero,0x5
    14e0:	f000                	fsw	fs0,32(s0)
    14e2:	0012                	c.slli	zero,0x4
    14e4:	3a00                	fld	fs0,48(a2)
    14e6:	0071                	c.nop	28
    14e8:	b001                	j	ce8 <ntru_deceypt+0x3e>
    14ea:	e409                	bnez	s0,14f4 <product2+0x88>
    14ec:	0016                	c.slli	zero,0x5
    14ee:	1000                	addi	s0,sp,32
    14f0:	3c000013          	li	zero,960
    14f4:	018a                	slli	gp,gp,0x2
    14f6:	0000                	unimp
    14f8:	b101                	j	10f8 <_endtext+0x68>
    14fa:	a70a                	fsd	ft2,392(sp)
    14fc:	3000000b          	0x3000000b
    1500:	3c000013          	li	zero,960
    1504:	022e                	slli	tp,tp,0xb
    1506:	0000                	unimp
    1508:	b201                	j	e08 <memcpy+0x20>
    150a:	f709                	bnez	a4,1414 <_bss_start+0x200>
    150c:	0016                	c.slli	zero,0x5
    150e:	5d00                	lw	s0,56(a0)
    1510:	3c000013          	li	zero,960
    1514:	022c                	addi	a1,sp,264
    1516:	0000                	unimp
    1518:	b301                	j	1218 <_bss_start+0x4>
    151a:	0a09                	addi	s4,s4,2
    151c:	a9000017          	auipc	zero,0xa9000
    1520:	35000013          	li	zero,848
    1524:	0075                	c.nop	29
    1526:	0000                	unimp
    1528:	13d5                	addi	t2,t2,-11
    152a:	0000                	unimp
    152c:	7535                	lui	a0,0xfffed
    152e:	0000                	unimp
    1530:	0300                	addi	s0,sp,384
    1532:	0014                	0x14
    1534:	3500                	fld	fs0,40(a0)
    1536:	0075                	c.nop	29
    1538:	0000                	unimp
    153a:	1431                	addi	s0,s0,-20
    153c:	0000                	unimp
    153e:	7535                	lui	a0,0xfffed
    1540:	0000                	unimp
    1542:	5f00                	lw	s0,56(a4)
    1544:	0014                	0x14
    1546:	2d00                	fld	fs0,24(a0)
    1548:	046a                	slli	s0,s0,0x1a
    154a:	0000                	unimp
    154c:	00001a03          	lh	s4,0(zero) # 0 <__DYNAMIC>
    1550:	00001567          	0x1567
    1554:	012e                	slli	sp,sp,0xb
    1556:	025a                	slli	tp,tp,0x16
    1558:	012e0083          	lb	ra,18(t3)
    155c:	0079025b          	0x79025b
    1560:	012e                	slli	sp,sp,0xb
    1562:	025c                	addi	a5,sp,260
    1564:	6908                	flw	fa0,16(a0)
    1566:	2d00                	fld	fs0,24(a0)
    1568:	0488                	addi	a0,sp,576
    156a:	0000                	unimp
    156c:	00001a03          	lh	s4,0(zero) # 0 <__DYNAMIC>
    1570:	00001587          	0x1587
    1574:	012e                	slli	sp,sp,0xb
    1576:	025a                	slli	tp,tp,0x16
    1578:	0072                	c.slli	zero,0x1c
    157a:	012e                	slli	sp,sp,0xb
    157c:	0079025b          	0x79025b
    1580:	012e                	slli	sp,sp,0xb
    1582:	025c                	addi	a5,sp,260
    1584:	0086                	slli	ra,ra,0x1
    1586:	2d00                	fld	fs0,24(a0)
    1588:	04ca                	slli	s1,s1,0x12
    158a:	0000                	unimp
    158c:	00001a03          	lh	s4,0(zero) # 0 <__DYNAMIC>
    1590:	000015a7          	0x15a7
    1594:	012e                	slli	sp,sp,0xb
    1596:	025a                	slli	tp,tp,0x16
    1598:	012e0083          	lb	ra,18(t3)
    159c:	0079025b          	0x79025b
    15a0:	012e                	slli	sp,sp,0xb
    15a2:	025c                	addi	a5,sp,260
    15a4:	0082                	c.slli64	ra
    15a6:	2d00                	fld	fs0,24(a0)
    15a8:	053a                	slli	a0,a0,0xe
    15aa:	0000                	unimp
    15ac:	00001a03          	lh	s4,0(zero) # 0 <__DYNAMIC>
    15b0:	000015c7          	fmsub.s	fa1,ft0,ft0,ft0,rtz
    15b4:	012e                	slli	sp,sp,0xb
    15b6:	025a                	slli	tp,tp,0x16
    15b8:	0084                	addi	s1,sp,64
    15ba:	012e                	slli	sp,sp,0xb
    15bc:	0079025b          	0x79025b
    15c0:	012e                	slli	sp,sp,0xb
    15c2:	025c                	addi	a5,sp,260
    15c4:	6908                	flw	fa0,16(a0)
    15c6:	2d00                	fld	fs0,24(a0)
    15c8:	0558                	addi	a4,sp,644
    15ca:	0000                	unimp
    15cc:	183d                	addi	a6,a6,-17
    15ce:	0000                	unimp
    15d0:	15f8                	addi	a4,sp,748
    15d2:	0000                	unimp
    15d4:	012e                	slli	sp,sp,0xb
    15d6:	025a                	slli	tp,tp,0x16
    15d8:	0072                	c.slli	zero,0x1c
    15da:	012e                	slli	sp,sp,0xb
    15dc:	0086025b          	0x86025b
    15e0:	012e                	slli	sp,sp,0xb
    15e2:	025c                	addi	a5,sp,260
    15e4:	0084                	addi	s1,sp,64
    15e6:	012e                	slli	sp,sp,0xb
    15e8:	025d                	addi	tp,tp,23
    15ea:	0086                	slli	ra,ra,0x1
    15ec:	012e                	slli	sp,sp,0xb
    15ee:	025e                	slli	tp,tp,0x17
    15f0:	0079                	c.nop	30
    15f2:	012e                	slli	sp,sp,0xb
    15f4:	015f 0030 682d      	0x682d0030015f
    15fa:	0005                	c.nop	1
    15fc:	0300                	addi	s0,sp,384
    15fe:	001a                	c.slli	zero,0x6
    1600:	1a00                	addi	s0,sp,304
    1602:	0016                	c.slli	zero,0x5
    1604:	2e00                	fld	fs0,24(a2)
    1606:	5a01                	li	s4,-32
    1608:	7804                	flw	fs1,48(s0)
    160a:	7fbc                	flw	fa5,120(a5)
    160c:	2e06                	fld	ft8,64(sp)
    160e:	5b01                	li	s6,-32
    1610:	7902                	flw	fs2,32(sp)
    1612:	2e00                	fld	fs0,24(a2)
    1614:	5c01                	li	s8,-32
    1616:	0802                	c.slli64	a6
    1618:	0069                	c.nop	26
    161a:	922d                	srli	a2,a2,0x2b
    161c:	0005                	c.nop	1
    161e:	0300                	addi	s0,sp,384
    1620:	001a                	c.slli	zero,0x6
    1622:	3a00                	fld	fs0,48(a2)
    1624:	0016                	c.slli	zero,0x5
    1626:	2e00                	fld	fs0,24(a2)
    1628:	5a01                	li	s4,-32
    162a:	8302                	jr	t1
    162c:	2e00                	fld	fs0,24(a2)
    162e:	5b01                	li	s6,-32
    1630:	7902                	flw	fs2,32(sp)
    1632:	2e00                	fld	fs0,24(a2)
    1634:	5c01                	li	s8,-32
    1636:	0802                	c.slli64	a6
    1638:	0069                	c.nop	26
    163a:	b82d                	j	e74 <memcpy+0x8c>
    163c:	0005                	c.nop	1
    163e:	0300                	addi	s0,sp,384
    1640:	001a                	c.slli	zero,0x6
    1642:	5a00                	lw	s0,48(a2)
    1644:	0016                	c.slli	zero,0x5
    1646:	2e00                	fld	fs0,24(a2)
    1648:	5a01                	li	s4,-32
    164a:	8502                	jr	a0
    164c:	2e00                	fld	fs0,24(a2)
    164e:	5b01                	li	s6,-32
    1650:	7902                	flw	fs2,32(sp)
    1652:	2e00                	fld	fs0,24(a2)
    1654:	5c01                	li	s8,-32
    1656:	0802                	c.slli64	a6
    1658:	0069                	c.nop	26
    165a:	ea2d                	bnez	a2,16cc <result+0x8>
    165c:	0005                	c.nop	1
    165e:	0300                	addi	s0,sp,384
    1660:	001a                	c.slli	zero,0x6
    1662:	7a00                	flw	fs0,48(a2)
    1664:	0016                	c.slli	zero,0x5
    1666:	2e00                	fld	fs0,24(a2)
    1668:	5a01                	li	s4,-32
    166a:	8402                	jr	s0
    166c:	2e00                	fld	fs0,24(a2)
    166e:	5b01                	li	s6,-32
    1670:	7902                	flw	fs2,32(sp)
    1672:	2e00                	fld	fs0,24(a2)
    1674:	5c01                	li	s8,-32
    1676:	8202                	jr	tp
    1678:	0000                	unimp
    167a:	fa2d                	bnez	a2,15ec <product2+0x180>
    167c:	0005                	c.nop	1
    167e:	0300                	addi	s0,sp,384
    1680:	001a                	c.slli	zero,0x6
    1682:	9400                	0x9400
    1684:	0016                	c.slli	zero,0x5
    1686:	2e00                	fld	fs0,24(a2)
    1688:	5b01                	li	s6,-32
    168a:	7902                	flw	fs2,32(sp)
    168c:	2e00                	fld	fs0,24(a2)
    168e:	5c01                	li	s8,-32
    1690:	8202                	jr	tp
    1692:	0000                	unimp
    1694:	262d                	jal	19be <ti_2+0xa2>
    1696:	0006                	c.slli	zero,0x1
    1698:	0300                	addi	s0,sp,384
    169a:	001a                	c.slli	zero,0x6
    169c:	b400                	fsd	fs0,40(s0)
    169e:	0016                	c.slli	zero,0x5
    16a0:	2e00                	fld	fs0,24(a2)
    16a2:	5a01                	li	s4,-32
    16a4:	8302                	jr	t1
    16a6:	2e00                	fld	fs0,24(a2)
    16a8:	5b01                	li	s6,-32
    16aa:	7902                	flw	fs2,32(sp)
    16ac:	2e00                	fld	fs0,24(a2)
    16ae:	5c01                	li	s8,-32
    16b0:	8202                	jr	tp
    16b2:	0000                	unimp
    16b4:	00064e2f          	0x64e2f
    16b8:	0300                	addi	s0,sp,384
    16ba:	001a                	c.slli	zero,0x6
    16bc:	2e00                	fld	fs0,24(a2)
    16be:	5a01                	li	s4,-32
    16c0:	8502                	jr	a0
    16c2:	2e00                	fld	fs0,24(a2)
    16c4:	5b01                	li	s6,-32
    16c6:	7902                	flw	fs2,32(sp)
    16c8:	2e00                	fld	fs0,24(a2)
    16ca:	5c01                	li	s8,-32
    16cc:	8202                	jr	tp
    16ce:	0000                	unimp
    16d0:	0900                	addi	s0,sp,144
    16d2:	0069                	c.nop	26
    16d4:	0000                	unimp
    16d6:	16e4                	addi	s1,sp,876
    16d8:	0000                	unimp
    16da:	7536                	flw	fa0,108(sp)
    16dc:	0000                	unimp
    16de:	2300                	fld	fs0,0(a4)
    16e0:	0015                	c.nop	5
    16e2:	0000                	unimp
    16e4:	6909                	lui	s2,0x2
    16e6:	0000                	unimp
    16e8:	f700                	fsw	fs0,40(a4)
    16ea:	0016                	c.slli	zero,0x5
    16ec:	3600                	fld	fs0,40(a2)
    16ee:	0075                	c.nop	29
    16f0:	0000                	unimp
    16f2:	152c                	addi	a1,sp,680
    16f4:	0000                	unimp
    16f6:	0900                	addi	s0,sp,144
    16f8:	0069                	c.nop	26
    16fa:	0000                	unimp
    16fc:	170a                	slli	a4,a4,0x22
    16fe:	0000                	unimp
    1700:	7536                	flw	fa0,108(sp)
    1702:	0000                	unimp
    1704:	3500                	fld	fs0,40(a0)
    1706:	0015                	c.nop	5
    1708:	0000                	unimp
    170a:	6909                	lui	s2,0x2
    170c:	0000                	unimp
    170e:	1d00                	addi	s0,sp,688
    1710:	36000017          	auipc	zero,0x36000
    1714:	0075                	c.nop	29
    1716:	0000                	unimp
    1718:	153e                	slli	a0,a0,0x2f
    171a:	0000                	unimp
    171c:	3700                	fld	fs0,40(a4)
    171e:	0032                	c.slli	zero,0xc
    1720:	0000                	unimp
    1722:	7101                	addi	sp,sp,-512
    1724:	a706                	fsd	ft1,392(sp)
    1726:	8c00000b          	0x8c00000b
    172a:	0002                	c.slli64	zero
    172c:	7000                	flw	fs0,32(s0)
    172e:	0001                	nop
    1730:	0100                	addi	s0,sp,128
    1732:	fd9c                	fsw	fa5,56(a1)
    1734:	38000017          	auipc	zero,0x38000
    1738:	0061                	c.nop	24
    173a:	7101                	addi	sp,sp,-512
    173c:	a715                	j	1e60 <random_keys+0x3b4>
    173e:	b400000b          	0xb400000b
    1742:	0014                	0x14
    1744:	3900                	fld	fs0,48(a0)
    1746:	0351                	addi	t1,t1,20
    1748:	0000                	unimp
    174a:	7101                	addi	sp,sp,-512
    174c:	691c                	flw	fa5,16(a0)
    174e:	0000                	unimp
    1750:	ee00                	fsw	fs0,24(a2)
    1752:	0014                	0x14
    1754:	3800                	fld	fs0,48(s0)
    1756:	0062                	c.slli	zero,0x18
    1758:	7101                	addi	sp,sp,-512
    175a:	a729                	j	1e64 <random_keys+0x3b8>
    175c:	2600000b          	0x2600000b
    1760:	0015                	c.nop	5
    1762:	3d00                	fld	fs0,56(a0)
    1764:	0715                	addi	a4,a4,5
    1766:	0000                	unimp
    1768:	7101                	addi	sp,sp,-512
    176a:	6930                	flw	fa2,80(a0)
    176c:	0000                	unimp
    176e:	0100                	addi	s0,sp,128
    1770:	395d                	jal	1426 <_bss_start+0x212>
    1772:	0000054b          	fnmsub.s	fa0,ft0,ft0,ft0,rne
    1776:	7101                	addi	sp,sp,-512
    1778:	693c                	flw	fa5,80(a0)
    177a:	0000                	unimp
    177c:	6000                	flw	fs0,0(s0)
    177e:	0015                	c.nop	5
    1780:	3c00                	fld	fs0,56(s0)
    1782:	0668                	addi	a0,sp,780
    1784:	0000                	unimp
    1786:	7401                	lui	s0,0xfffe0
    1788:	fd09                	bnez	a0,16a2 <product2+0x236>
    178a:	9a000017          	auipc	zero,0x9a000
    178e:	0015                	c.nop	5
    1790:	3a00                	fld	fs0,48(a2)
    1792:	0069                	c.nop	26
    1794:	7501                	lui	a0,0xfffe0
    1796:	6909                	lui	s2,0x2
    1798:	0000                	unimp
    179a:	de00                	sw	s0,56(a2)
    179c:	0015                	c.nop	5
    179e:	3a00                	fld	fs0,48(a2)
    17a0:	006a                	c.slli	zero,0x1a
    17a2:	7501                	lui	a0,0xfffe0
    17a4:	0000690b          	0x690b
    17a8:	8700                	0x8700
    17aa:	0016                	c.slli	zero,0x5
    17ac:	3a00                	fld	fs0,48(a2)
    17ae:	7501006b          	0x7501006b
    17b2:	690d                	lui	s2,0x3
    17b4:	0000                	unimp
    17b6:	d100                	sw	s0,32(a0)
    17b8:	0016                	c.slli	zero,0x5
    17ba:	3c00                	fld	fs0,56(s0)
    17bc:	027c                	addi	a5,sp,268
    17be:	0000                	unimp
    17c0:	7601                	lui	a2,0xfffe0
    17c2:	a70a                	fsd	ft2,392(sp)
    17c4:	1f00000b          	0x1f00000b
    17c8:	22000017          	auipc	zero,0x22000
    17cc:	000c                	0xc
    17ce:	0000                	unimp
    17d0:	7701                	lui	a4,0xfffe0
    17d2:	1809                	addi	a6,a6,-30
    17d4:	0018                	0x18
    17d6:	0200                	addi	s0,sp,256
    17d8:	0075                	c.nop	29
    17da:	7d3c                	flw	fa5,120(a0)
    17dc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17e0:	0978                	addi	a4,sp,156
    17e2:	182a                	slli	a6,a6,0x2a
    17e4:	0000                	unimp
    17e6:	00001737          	lui	a4,0x1
    17ea:	7535                	lui	a0,0xfffed
    17ec:	0000                	unimp
    17ee:	6d00                	flw	fs0,24(a0)
    17f0:	35000017          	auipc	zero,0x35000
    17f4:	0075                	c.nop	29
    17f6:	0000                	unimp
    17f8:	17a5                	addi	a5,a5,-23
    17fa:	0000                	unimp
    17fc:	0900                	addi	s0,sp,144
    17fe:	0069                	c.nop	26
    1800:	0000                	unimp
    1802:	1818                	addi	a4,sp,48
    1804:	0000                	unimp
    1806:	7536                	flw	fa0,108(sp)
    1808:	0000                	unimp
    180a:	ea00                	fsw	fs0,16(a2)
    180c:	30000017          	auipc	zero,0x30000
    1810:	0075                	c.nop	29
    1812:	0000                	unimp
    1814:	8d02                	jr	s10
    1816:	0000                	unimp
    1818:	6909                	lui	s2,0x2
    181a:	0000                	unimp
    181c:	2a00                	fld	fs0,16(a2)
    181e:	0018                	0x18
    1820:	3000                	fld	fs0,32(s0)
    1822:	0075                	c.nop	29
    1824:	0000                	unimp
    1826:	8f02                	jr	t5
    1828:	0000                	unimp
    182a:	6909                	lui	s2,0x2
    182c:	0000                	unimp
    182e:	3d00                	fld	fs0,56(a0)
    1830:	0018                	0x18
    1832:	3600                	fld	fs0,40(a2)
    1834:	0075                	c.nop	29
    1836:	0000                	unimp
    1838:	000017f3          	csrrw	a5,ustatus,zero
    183c:	3700                	fld	fs0,40(a4)
    183e:	011f 0000 3001      	0x30010000011f
    1844:	a706                	fsd	ft1,392(sp)
    1846:	b000000b          	0xb000000b
    184a:	0000                	unimp
    184c:	dc00                	sw	s0,56(s0)
    184e:	0001                	nop
    1850:	0100                	addi	s0,sp,128
    1852:	c19c                	sw	a5,0(a1)
    1854:	0019                	c.nop	6
    1856:	3800                	fld	fs0,48(s0)
    1858:	0061                	c.nop	24
    185a:	3001                	jal	105a <main+0xec>
    185c:	a714                	fsd	fa3,8(a4)
    185e:	dd00000b          	0xdd00000b
    1862:	39000017          	auipc	zero,0x39000
    1866:	0351                	addi	t1,t1,20
    1868:	0000                	unimp
    186a:	3001                	jal	106a <main+0xfc>
    186c:	0000691b          	0x691b
    1870:	1700                	addi	s0,sp,928
    1872:	0018                	0x18
    1874:	3800                	fld	fs0,48(s0)
    1876:	0062                	c.slli	zero,0x18
    1878:	3001                	jal	1078 <main+0x10a>
    187a:	a728                	fsd	fa0,72(a4)
    187c:	6800000b          	0x6800000b
    1880:	0018                	0x18
    1882:	3900                	fld	fs0,48(a0)
    1884:	0715                	addi	a4,a4,5
    1886:	0000                	unimp
    1888:	3001                	jal	1088 <__CTOR_END__+0x2>
    188a:	0000692f          	0x692f
    188e:	b800                	fsd	fs0,48(s0)
    1890:	0018                	0x18
    1892:	3800                	fld	fs0,48(s0)
    1894:	6f6d                	lui	t5,0x1b
    1896:	0064                	addi	s1,sp,12
    1898:	3001                	jal	1098 <_endtext+0x8>
    189a:	0000693b          	0x693b
    189e:	ef00                	fsw	fs0,24(a4)
    18a0:	0018                	0x18
    18a2:	3900                	fld	fs0,48(a0)
    18a4:	0000054b          	fnmsub.s	fa0,ft0,ft0,ft0,rne
    18a8:	3001                	jal	10a8 <_endtext+0x18>
    18aa:	6944                	flw	fs1,20(a0)
    18ac:	0000                	unimp
    18ae:	2600                	fld	fs0,8(a2)
    18b0:	0019                	c.nop	6
    18b2:	3c00                	fld	fs0,56(s0)
    18b4:	0668                	addi	a0,sp,780
    18b6:	0000                	unimp
    18b8:	3201                	jal	11b8 <_endtext+0x128>
    18ba:	c109                	beqz	a0,18bc <result+0x1f8>
    18bc:	0019                	c.nop	6
    18be:	5300                	lw	s0,32(a4)
    18c0:	0019                	c.nop	6
    18c2:	3a00                	fld	fs0,48(a2)
    18c4:	0069                	c.nop	26
    18c6:	3301                	jal	15c6 <product2+0x15a>
    18c8:	6909                	lui	s2,0x2
    18ca:	0000                	unimp
    18cc:	a300                	fsd	fs0,0(a4)
    18ce:	0019                	c.nop	6
    18d0:	3a00                	fld	fs0,48(a2)
    18d2:	006a                	c.slli	zero,0x1a
    18d4:	3301                	jal	15d4 <product2+0x168>
    18d6:	0000690b          	0x690b
    18da:	6300                	flw	fs0,0(a4)
    18dc:	001a                	c.slli	zero,0x6
    18de:	3a00                	fld	fs0,48(a2)
    18e0:	3301006b          	0x3301006b
    18e4:	690d                	lui	s2,0x3
    18e6:	0000                	unimp
    18e8:	ad00                	fsd	fs0,24(a0)
    18ea:	001a                	c.slli	zero,0x6
    18ec:	3c00                	fld	fs0,56(s0)
    18ee:	026c                	addi	a1,sp,268
    18f0:	0000                	unimp
    18f2:	3401                	jal	12f2 <_bss_start+0xde>
    18f4:	a70a                	fsd	ft2,392(sp)
    18f6:	fb00000b          	0xfb00000b
    18fa:	001a                	c.slli	zero,0x6
    18fc:	3c00                	fld	fs0,56(s0)
    18fe:	000c                	0xc
    1900:	0000                	unimp
    1902:	3501                	jal	1702 <result+0x3e>
    1904:	dd09                	beqz	a0,181e <result+0x15a>
    1906:	0019                	c.nop	6
    1908:	1300                	addi	s0,sp,416
    190a:	3c00001b          	0x3c00001b
    190e:	037d                	addi	t1,t1,31
    1910:	0000                	unimp
    1912:	3601                	jal	1412 <_bss_start+0x1fe>
    1914:	f009                	bnez	s0,1816 <result+0x152>
    1916:	0019                	c.nop	6
    1918:	4a00                	lw	s0,16(a2)
    191a:	3500001b          	0x3500001b
    191e:	0075                	c.nop	29
    1920:	0000                	unimp
    1922:	1bb9                	addi	s7,s7,-18
    1924:	0000                	unimp
    1926:	7535                	lui	a0,0xfffed
    1928:	0000                	unimp
    192a:	0e00                	addi	s0,sp,784
    192c:	001c                	0x1c
    192e:	3500                	fld	fs0,40(a0)
    1930:	0075                	c.nop	29
    1932:	0000                	unimp
    1934:	1c51                	addi	s8,s8,-12
    1936:	0000                	unimp
    1938:	7535                	lui	a0,0xfffed
    193a:	0000                	unimp
    193c:	7f00                	flw	fs0,56(a4)
    193e:	001c                	0x1c
    1940:	2d00                	fld	fs0,24(a0)
    1942:	0144                	addi	s1,sp,132
    1944:	0000                	unimp
    1946:	00001a03          	lh	s4,0(zero) # 0 <__DYNAMIC>
    194a:	1961                	addi	s2,s2,-8
    194c:	0000                	unimp
    194e:	012e                	slli	sp,sp,0xb
    1950:	025a                	slli	tp,tp,0x16
    1952:	0089                	addi	ra,ra,2
    1954:	012e                	slli	sp,sp,0xb
    1956:	0088025b          	0x88025b
    195a:	012e                	slli	sp,sp,0xb
    195c:	025c                	addi	a5,sp,260
    195e:	0186                	slli	gp,gp,0x1
    1960:	2d00                	fld	fs0,24(a0)
    1962:	0156                	slli	sp,sp,0x15
    1964:	0000                	unimp
    1966:	00001a03          	lh	s4,0(zero) # 0 <__DYNAMIC>
    196a:	1981                	addi	s3,s3,-32
    196c:	0000                	unimp
    196e:	012e                	slli	sp,sp,0xb
    1970:	025a                	slli	tp,tp,0x16
    1972:	0072                	c.slli	zero,0x1c
    1974:	012e                	slli	sp,sp,0xb
    1976:	0088025b          	0x88025b
    197a:	012e                	slli	sp,sp,0xb
    197c:	025c                	addi	a5,sp,260
    197e:	0082                	c.slli64	ra
    1980:	2d00                	fld	fs0,24(a0)
    1982:	01e2                	slli	gp,gp,0x18
    1984:	0000                	unimp
    1986:	00001a03          	lh	s4,0(zero) # 0 <__DYNAMIC>
    198a:	19a4                	addi	s1,sp,248
    198c:	0000                	unimp
    198e:	012e                	slli	sp,sp,0xb
    1990:	055a                	slli	a0,a0,0x16
    1992:	00121403          	lh	s0,1(tp) # 19001 <_stack_start+0x9001>
    1996:	2e00                	fld	fs0,24(a2)
    1998:	5b01                	li	s6,-32
    199a:	8802                	jr	a6
    199c:	2e00                	fld	fs0,24(a2)
    199e:	5c01                	li	s8,-32
    19a0:	8402                	jr	s0
    19a2:	0000                	unimp
    19a4:	0002602f          	0x2602f
    19a8:	0300                	addi	s0,sp,384
    19aa:	001a                	c.slli	zero,0x6
    19ac:	2e00                	fld	fs0,24(a2)
    19ae:	5a01                	li	s4,-32
    19b0:	8502                	jr	a0
    19b2:	2e00                	fld	fs0,24(a2)
    19b4:	5b01                	li	s6,-32
    19b6:	8802                	jr	a6
    19b8:	2e00                	fld	fs0,24(a2)
    19ba:	5c01                	li	s8,-32
    19bc:	8402                	jr	s0
    19be:	0000                	unimp
    19c0:	0900                	addi	s0,sp,144
    19c2:	0069                	c.nop	26
    19c4:	0000                	unimp
    19c6:	19dd                	addi	s3,s3,-9
    19c8:	0000                	unimp
    19ca:	7536                	flw	fa0,108(sp)
    19cc:	0000                	unimp
    19ce:	1d00                	addi	s0,sp,688
    19d0:	0019                	c.nop	6
    19d2:	3600                	fld	fs0,40(a2)
    19d4:	0075                	c.nop	29
    19d6:	0000                	unimp
    19d8:	1926                	slli	s2,s2,0x29
    19da:	0000                	unimp
    19dc:	0900                	addi	s0,sp,144
    19de:	0069                	c.nop	26
    19e0:	0000                	unimp
    19e2:	19f0                	addi	a2,sp,252
    19e4:	0000                	unimp
    19e6:	7536                	flw	fa0,108(sp)
    19e8:	0000                	unimp
    19ea:	2f00                	fld	fs0,24(a4)
    19ec:	0019                	c.nop	6
    19ee:	0000                	unimp
    19f0:	6909                	lui	s2,0x2
    19f2:	0000                	unimp
    19f4:	0300                	addi	s0,sp,384
    19f6:	001a                	c.slli	zero,0x6
    19f8:	3600                	fld	fs0,40(a2)
    19fa:	0075                	c.nop	29
    19fc:	0000                	unimp
    19fe:	1938                	addi	a4,sp,184
    1a00:	0000                	unimp
    1a02:	3e00                	fld	fs0,56(a2)
    1a04:	0599                	addi	a1,a1,6
    1a06:	0000                	unimp
    1a08:	2001                	jal	1a08 <ti_2+0xec>
    1a0a:	9206                	add	tp,tp,ra
    1a0c:	0000                	unimp
    1a0e:	1e00                	addi	s0,sp,816
    1a10:	0000                	unimp
    1a12:	0100                	addi	s0,sp,128
    1a14:	769c                	flw	fa5,40(a3)
    1a16:	001a                	c.slli	zero,0x6
    1a18:	3f00                	fld	fs0,56(a4)
    1a1a:	3161                	jal	16a2 <product2+0x236>
    1a1c:	0100                	addi	s0,sp,128
    1a1e:	1520                	addi	s0,sp,680
    1a20:	00000ba7          	0xba7
    1a24:	5a01                	li	s4,-32
    1a26:	646f6d3f 1d200100 	0x1d200100646f6d3f
    1a2e:	0069                	c.nop	26
    1a30:	0000                	unimp
    1a32:	5b01                	li	s6,-32
    1a34:	7e39                	lui	t3,0xfffee
    1a36:	0005                	c.nop	1
    1a38:	0100                	addi	s0,sp,128
    1a3a:	2520                	fld	fs0,72(a0)
    1a3c:	0069                	c.nop	26
    1a3e:	0000                	unimp
    1a40:	1cd4                	addi	a3,sp,628
    1a42:	0000                	unimp
    1a44:	693a                	flw	fs2,140(sp)
    1a46:	0100                	addi	s0,sp,128
    1a48:	0525                	addi	a0,a0,9
    1a4a:	0069                	c.nop	26
    1a4c:	0000                	unimp
    1a4e:	1cf5                	addi	s9,s9,-3
    1a50:	0000                	unimp
    1a52:	7640                	flw	fs0,44(a2)
    1a54:	001a                	c.slli	zero,0x6
    1a56:	9800                	0x9800
    1a58:	0000                	unimp
    1a5a:	0000                	unimp
    1a5c:	0000                	unimp
    1a5e:	0100                	addi	s0,sp,128
    1a60:	0928                	addi	a0,sp,152
    1a62:	8e41                	or	a2,a2,s0
    1a64:	001a                	c.slli	zero,0x6
    1a66:	1400                	addi	s0,sp,544
    1a68:	001d                	c.nop	7
    1a6a:	4100                	lw	s0,0(a0)
    1a6c:	00001a83          	lh	s5,0(zero) # 0 <__DYNAMIC>
    1a70:	00001d27          	0x1d27
    1a74:	0000                	unimp
    1a76:	1542                	slli	a0,a0,0x30
    1a78:	0001                	nop
    1a7a:	0100                	addi	s0,sp,128
    1a7c:	0611                	addi	a2,a2,4
    1a7e:	9b01                	andi	a4,a4,-32
    1a80:	001a                	c.slli	zero,0x6
    1a82:	4300                	lw	s0,0(a4)
    1a84:	3161                	jal	170c <result+0x48>
    1a86:	0100                	addi	s0,sp,128
    1a88:	1e11                	addi	t3,t3,-28
    1a8a:	00001a9b          	0x1a9b
    1a8e:	646f6d43          	0x646f6d43
    1a92:	0100                	addi	s0,sp,128
    1a94:	2f11                	jal	21a8 <_min_stack+0x1a8>
    1a96:	0075                	c.nop	29
    1a98:	0000                	unimp
    1a9a:	1000                	addi	s0,sp,32
    1a9c:	7504                	flw	fs1,40(a0)
    1a9e:	0000                	unimp
    1aa0:	4400                	lw	s0,8(s0)
    1aa2:	1a76                	slli	s4,s4,0x3d
    1aa4:	0000                	unimp
    1aa6:	008c                	addi	a1,sp,64
    1aa8:	0000                	unimp
    1aaa:	0006                	c.slli	zero,0x1
    1aac:	0000                	unimp
    1aae:	9c01                	0x9c01
    1ab0:	1ac5                	addi	s5,s5,-15
    1ab2:	0000                	unimp
    1ab4:	8341                	srli	a4,a4,0x10
    1ab6:	001a                	c.slli	zero,0x6
    1ab8:	4100                	lw	s0,0(a0)
    1aba:	001d                	c.nop	7
    1abc:	4500                	lw	s0,8(a0)
    1abe:	1a8e                	slli	s5,s5,0x23
    1ac0:	0000                	unimp
    1ac2:	5b01                	li	s6,-32
    1ac4:	4600                	lw	s0,8(a2)
    1ac6:	0335                	addi	t1,t1,13
    1ac8:	0000                	unimp
    1aca:	0000032b          	0x32b
    1ace:	0009                	c.nop	2
    1ad0:	7646                	flw	fa2,112(sp)
    1ad2:	0000                	unimp
    1ad4:	6c00                	flw	fs0,24(s0)
    1ad6:	0000                	unimp
    1ad8:	0900                	addi	s0,sp,144
    1ada:	0000                	unimp
    1adc:	001e                	c.slli	zero,0x7
    1ade:	0000                	unimp
    1ae0:	0002                	c.slli64	zero
    1ae2:	00000427          	0x427
    1ae6:	0104                	addi	s1,sp,128
    1ae8:	2624                	fld	fs1,72(a2)
    1aea:	0000                	unimp
    1aec:	0030                	addi	a2,sp,8
    1aee:	0000                	unimp
    1af0:	071c                	addi	a5,sp,896
    1af2:	0000                	unimp
    1af4:	0000048f          	0x48f
    1af8:	00000723          	sb	zero,14(zero) # e <__DYNAMIC+0xe>
    1afc:	8001                	c.srli64	s0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x206>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	03001603          	lh	a2,48(zero) # 30 <__DYNAMIC+0x30>
  22:	3a0e                	fld	fs4,224(sp)
  24:	390b3b0b          	0x390b3b0b
  28:	0013490b          	0x13490b
  2c:	0400                	addi	s0,sp,512
  2e:	0024                	addi	s1,sp,8
  30:	0b3e0b0b          	0xb3e0b0b
  34:	00000803          	lb	a6,0(zero) # 0 <__DYNAMIC>
  38:	3505                	jal	fffffe58 <_stack_start+0xfffefe58>
  3a:	4900                	lw	s0,16(a0)
  3c:	06000013          	li	zero,96
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # fffe00b3 <_stack_start+0xfffd00b3>
  46:	0b39053b          	0xb39053b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1 # ffff9001 <_stack_start+0xfffe9001>
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    for(i=0;i<(length/3);i++) {
  94:	0b390b3b          	0xb390b3b
    asm volatile(
  98:	1349                	addi	t1,t1,-14
    for(i=0;i<(length/3);i++) {
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
}
  a0:	0b00                	addi	s0,sp,400
    asm volatile(
  a2:	0e00000b          	0xe00000b
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
    for(i=0;i<(length/3);i++) {
  ae:	0b390b3b          	0xb390b3b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  b2:	1301                	addi	t1,t1,-32
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
    int line[size_b][size_a + size_b];
  bc:	390b3b0b          	0x390b3b0b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  c0:	3813490b          	0x3813490b
    int line[size_b][size_a + size_b];
  c4:	1000000b          	0x1000000b
  c8:	0b0b000f          	0xb0b000f
  cc:	1349                	addi	t1,t1,-14
  ce:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
  d8:	390b3b0b          	0x390b3b0b
  dc:	0013010b          	0x13010b
  e0:	1200                	addi	s0,sp,288
    int line[size_b][size_a + size_b];
  e2:	000d                	c.nop	3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  e4:	0b3a0e03          	lb	t3,179(s4)
    int line[size_b][size_a + size_b];
  e8:	0b390b3b          	0xb390b3b
    int pola[size_a];
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
  f0:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  f2:	27001513          	0x27001513
    int line[size_b][size_a + size_b];
  f6:	0019                	c.nop	6
    int pola[size_a];
  f8:	1400                	addi	s0,sp,544
    int polb[size_b];
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
 100:	1301                	addi	t1,t1,-32
    int pola[size_a];
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 106:	4900                	lw	s0,16(a0)
 108:	16000013          	li	zero,352
            line[i][j] = 0;
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
    int polb[size_b];
 110:	0000                	unimp
 112:	03011317          	auipc	t1,0x3011
    int pola[size_a];
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
    int polb[size_b];
 11a:	39053b0b          	0x39053b0b
            line[i][j] = 0;
 11e:	0013010b          	0x13010b
    for (i = 0; i < size_b; ++i){
 122:	1800                	addi	s0,sp,48
 124:	000d                	c.nop	3
            product[j] = 0;
 126:	0b3a0e03          	lb	t3,179(s4)
 12a:	0b39053b          	0xb39053b
    for (i = 0; i < size_b; ++i){
 12e:	1349                	addi	t1,t1,-14
 130:	0b38                	addi	a4,sp,408
    for (i = 0; i < size_a; ++i){
 132:	0000                	unimp
 134:	0d19                	addi	s10,s10,6
 136:	0300                	addi	s0,sp,384
	array_mod(pola,mod,size_a);
 138:	3a0e                	fld	fs4,224(sp)
 13a:	39053b0b          	0x39053b0b
 13e:	3813490b          	0x3813490b
 142:	0005                	c.nop	1
    for (i = 0; i < size_b; ++i){
 144:	1a00                	addi	s0,sp,304
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
 14a:	0b3a0b0b          	0xb3a0b0b
	array_mod(polb,mod,size_b);
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
    if(star_mult == 1){
 156:	0b01131b          	0xb01131b
 15a:	3b0b3a0b          	0x3b0b3a0b
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
 164:	1c00                	addi	s0,sp,560
 166:	0b0b0117          	auipc	sp,0xb0b0
        for (j = size_b -1; j >= 0; j = j-1){
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
            for (k = size_a-1; k >= 0; k = k-1 ){
 170:	1301                	addi	t1,t1,-32
            product[j] = 0;
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
            line[i][j] = 0;
 178:	3a0e                	fld	fs4,224(sp)
 17a:	39053b0b          	0x39053b0b
            product[j] = 0;
 17e:	0013490b          	0x13490b
        for(j = 0; j < size_a + size_b -1; ++j){
 182:	1e00                	addi	s0,sp,816
 184:	0e030013          	addi	zero,t1,224
    for (i = 0; i < size_b; ++i){
 188:	193c                	addi	a5,sp,184
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
        for(j = 0; j < size_a + size_b -1; ++j){
 192:	20000013          	li	zero,512
        pola[i] = a[i];
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
 19c:	0b39053b          	0xb39053b
    for (i = 0; i < size_a; ++i){
 1a0:	1349                	addi	t1,t1,-14
        pola[i] = a[i];
 1a2:	193c193f 34210000 	0x34210000193c193f
        polb[i] = b[i];
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
 1b2:	3f13490b          	0x3f13490b
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
    for (i = 0; i < size_b; ++i){
 1b8:	0019                	c.nop	6
    if(star_mult == 1){
 1ba:	2200                	fld	fs0,0(a2)
        for (j = size_b -1; j >= 0; j = j-1){
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < size_b; ++i){
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0x86>
    for(j = 0; j < size_a + size_b -1; ++j){
 1d0:	00052f13          	slti	t5,a0,0
    array_mod(product,mod,size_a+size_b-1);
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
 1dc:	0b390b3b          	0xb390b3b
 1e0:	1349                	addi	t1,t1,-14
}
 1e2:	1802193f 34250000 	0x342500001802193f
 1ea:	0300                	addi	s0,sp,384
 1ec:	3a08                	fld	fa0,48(a2)
 1ee:	390b3b0b          	0x390b3b0b
 1f2:	3f13490b          	0x3f13490b
 1f6:	0219                	addi	tp,tp,6
 1f8:	0018                	0x18
 1fa:	2600                	fld	fs0,8(a2)
 1fc:	012e                	slli	sp,sp,0xb
 1fe:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
 206:	0b39                	addi	s6,s6,14
 208:	1349                	addi	t1,t1,-14
 20a:	0111                	addi	sp,sp,4
                line[size_b-1-j][k] = pola[k]*polb[j];
 20c:	0612                	slli	a2,a2,0x4
 20e:	1840                	addi	s0,sp,52
 210:	01194297          	auipc	t0,0x1194
 214:	27000013          	li	zero,624
 218:	0034                	addi	a3,sp,8
 21a:	0b3a0803          	lb	a6,179(s4)
 21e:	0b39053b          	0xb39053b
 222:	1349                	addi	t1,t1,-14
            for (k = size_a-1; k >= 0; k = k-1 ){
 224:	051c                	addi	a5,sp,640
 226:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
 228:	3428                	fld	fa0,104(s0)
 22a:	0300                	addi	s0,sp,384
 22c:	3a0e                	fld	fs4,224(sp)
 22e:	39053b0b          	0x39053b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 232:	0213490b          	0x213490b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 236:	29000017          	auipc	zero,0x29000
 23a:	0034                	addi	a3,sp,8
 23c:	0b3a0803          	lb	a6,179(s4)
 240:	0b39053b          	0xb39053b
            for (k = size_a-1; k >= 0; k = k-1 ){
 244:	1349                	addi	t1,t1,-14
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 246:	0b1c                	addi	a5,sp,400
 248:	0000                	unimp
 24a:	342a                	fld	fs0,168(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 24c:	0300                	addi	s0,sp,384
 24e:	3a0e                	fld	fs4,224(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 250:	39053b0b          	0x39053b0b
 254:	0213490b          	0x213490b
        array_mod(line[i],mod,(size_a+size_b-1));
 258:	0018                	0x18
 25a:	2b00                	fld	fs0,16(a4)
 25c:	0034                	addi	a3,sp,8
 25e:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < size_b; ++i){
 262:	0b39053b          	0xb39053b
            product[j] += line[i][j];
 266:	1349                	addi	t1,t1,-14
 268:	0000                	unimp
 26a:	342c                	fld	fa1,104(s0)
 26c:	0300                	addi	s0,sp,384
 26e:	3a08                	fld	fa0,48(a2)
        for(i = 0; i < size_b; ++i){
 270:	39053b0b          	0x39053b0b
            product[j] += line[i][j];
 274:	0213490b          	0x213490b
 278:	2d000017          	auipc	zero,0x2d000
 27c:	8289                	srli	a3,a3,0x2
        for(i = 0; i < size_b; ++i){
 27e:	0101                	addi	sp,sp,0
 280:	0111                	addi	sp,sp,4
    for(j = 0; j < size_a + size_b -1; ++j){
 282:	1331                	addi	t1,t1,-20
 284:	1301                	addi	t1,t1,-32
 286:	0000                	unimp
        for(i = 0; i < size_b; ++i){
 288:	8a2e                	mv	s4,a1
 28a:	0182                	c.slli64	gp
    int line[size_b][size_a + size_b];
 28c:	0200                	addi	s0,sp,256
 28e:	9118                	0x9118
 290:	1842                	slli	a6,a6,0x30
 292:	0000                	unimp
 294:	0182892f          	0x182892f
 298:	1101                	addi	sp,sp,-32
 29a:	3101                	jal	fffffe9a <_stack_start+0xfffefe9a>
 29c:	30000013          	li	zero,768
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2a0:	0021                	c.nop	8
 2a2:	1349                	addi	t1,t1,-14
 2a4:	0000182f          	0x182f
 2a8:	2e31                	jal	5c4 <polydiv+0x1c8>
 2aa:	3f01                	jal	1ba <polymult+0x10a>
 2ac:	0319                	addi	t1,t1,6
 2ae:	3a0e                	fld	fs4,224(sp)
 2b0:	39053b0b          	0x39053b0b
    int line[size_b][size_a + size_b];
 2b4:	4919270b          	0x4919270b
 2b8:	12011113          	0x12011113
    int pola[size_a];
 2bc:	4006                	0x4006
 2be:	9718                	0x9718
 2c0:	1942                	slli	s2,s2,0x30
    int line[size_b][size_a + size_b];
 2c2:	1301                	addi	t1,t1,-32
    int pola[size_a];
 2c4:	0000                	unimp
 2c6:	0532                	slli	a0,a0,0xc
    int polb[size_b];
 2c8:	0300                	addi	s0,sp,384
 2ca:	3a08                	fld	fa0,48(a2)
 2cc:	39053b0b          	0x39053b0b
 2d0:	0213490b          	0x213490b
    int line[size_b][size_a + size_b];
 2d4:	33000017          	auipc	zero,0x33000
    int pola[size_a];
 2d8:	0005                	c.nop	1
 2da:	0b3a0e03          	lb	t3,179(s4)
            line[i][j] = 0;
 2de:	0b39053b          	0xb39053b
 2e2:	1349                	addi	t1,t1,-14
    for (i = 0; i < size_b; ++i){
 2e4:	1702                	slli	a4,a4,0x20
 2e6:	0000                	unimp
            product2[j] = 0;
 2e8:	3434                	fld	fa3,104(s0)
 2ea:	0300                	addi	s0,sp,384
 2ec:	3a08                	fld	fa0,48(a2)
 2ee:	39053b0b          	0x39053b0b
    for (i = 0; i < size_b; ++i){
 2f2:	0213490b          	0x213490b
    for(i = 0; i < size_a; ++i){
 2f6:	0018                	0x18
 2f8:	3500                	fld	fs0,40(a0)
    for(i = 0; i < size_b; ++i){
 2fa:	0034                	addi	a3,sp,8
 2fc:	1349                	addi	t1,t1,-14
 2fe:	1934                	addi	a3,sp,184
    if(star_mult == 1){
 300:	1702                	slli	a4,a4,0x20
 302:	0000                	unimp
 304:	2136                	fld	ft2,328(sp)
 306:	4900                	lw	s0,16(a0)
 308:	00132f13          	slti	t5,t1,1
 30c:	3700                	fld	fs0,40(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 30e:	012e                	slli	sp,sp,0xb
 310:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
            product2[j] = 0;
 318:	0b39                	addi	s6,s6,14
 31a:	13491927          	0x13491927
            line[i][j] = 0;
 31e:	0111                	addi	sp,sp,4
            product2[j] = 0;
 320:	0612                	slli	a2,a2,0x4
 322:	1840                	addi	s0,sp,52
        for(j = 0; j < size_a + size_b -1; ++j){
 324:	01194297          	auipc	t0,0x1194
 328:	38000013          	li	zero,896
    for (i = 0; i < size_b; ++i){
 32c:	0005                	c.nop	1
 32e:	0b3a0803          	lb	a6,179(s4)
 332:	0b390b3b          	0xb390b3b
        for(j = 0; j < size_a + size_b -1; ++j){
 336:	1349                	addi	t1,t1,-14
        pola[i] = a[i];
 338:	1702                	slli	a4,a4,0x20
 33a:	0000                	unimp
 33c:	0539                	addi	a0,a0,14
 33e:	0300                	addi	s0,sp,384
 340:	3a0e                	fld	fs4,224(sp)
 342:	390b3b0b          	0x390b3b0b
 346:	0213490b          	0x213490b
    for(i = 0; i < size_a; ++i){
 34a:	3a000017          	auipc	zero,0x3a000
        polb[i] = b[i];
 34e:	0034                	addi	a3,sp,8
 350:	0b3a0803          	lb	a6,179(s4)
 354:	0b390b3b          	0xb390b3b
    for(i = 0; i < size_b; ++i){
 358:	1349                	addi	t1,t1,-14
        polb[i] = b[i];
 35a:	1702                	slli	a4,a4,0x20
 35c:	0000                	unimp
    for(i = 0; i < size_b; ++i){
 35e:	0300343b          	0x300343b
                line[size_b-1-j][k] = pola[k]*polb[j];
 362:	3a08                	fld	fa0,48(a2)
 364:	390b3b0b          	0x390b3b0b
 368:	0013490b          	0x13490b
 36c:	3c00                	fld	fs0,56(s0)
 36e:	0034                	addi	a3,sp,8
            for (k = size_a-1; k >= 0; k = k-1 ){
 370:	0b3a0e03          	lb	t3,179(s4)
                line[size_b-1-j][k] = pola[k]*polb[j];
 374:	0b390b3b          	0xb390b3b
            for (k = size_a-1; k >= 0; k = k-1 ){
 378:	1349                	addi	t1,t1,-14
 37a:	1702                	slli	a4,a4,0x20
        for (j = size_b -1; j >= 0; j = j-1){
 37c:	0000                	unimp
 37e:	053d                	addi	a0,a0,15
 380:	0300                	addi	s0,sp,384
 382:	3a0e                	fld	fs4,224(sp)
 384:	390b3b0b          	0x390b3b0b
 388:	0213490b          	0x213490b
 38c:	0018                	0x18
        for(i = 0; i < size_b; ++i){
 38e:	3e00                	fld	fs0,56(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
 390:	012e                	slli	sp,sp,0xb
 392:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
}
 39a:	0b39                	addi	s6,s6,14
 39c:	01111927          	0x1111927
 3a0:	0612                	slli	a2,a2,0x4
 3a2:	1840                	addi	s0,sp,52
 3a4:	01194297          	auipc	t0,0x1194
 3a8:	3f000013          	li	zero,1008
 3ac:	0005                	c.nop	1
 3ae:	0b3a0803          	lb	a6,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3b2:	0b390b3b          	0xb390b3b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3b6:	1349                	addi	t1,t1,-14
 3b8:	1802                	slli	a6,a6,0x20
 3ba:	0000                	unimp
 3bc:	1d40                	addi	s0,sp,692
 3be:	3101                	jal	ffffffbe <_stack_start+0xfffeffbe>
 3c0:	55015213          	0x55015213
 3c4:	590b5817          	auipc	a6,0x590b5
 3c8:	000b570b          	0xb570b
 3cc:	4100                	lw	s0,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ce:	0005                	c.nop	1
 3d0:	1331                	addi	t1,t1,-20
        for (j = size_b -1; j >= 0; j = j-1){
 3d2:	1702                	slli	a4,a4,0x20
 3d4:	0000                	unimp
 3d6:	2e42                	fld	ft8,16(sp)
 3d8:	3f01                	jal	2e8 <polymult2+0x5c>
            product2[j] += line[i][j];
 3da:	0319                	addi	t1,t1,6
 3dc:	3a0e                	fld	fs4,224(sp)
 3de:	390b3b0b          	0x390b3b0b
 3e2:	2019270b          	0x2019270b
 3e6:	0013010b          	0x13010b
 3ea:	4300                	lw	s0,0(a4)
 3ec:	0005                	c.nop	1
        for(i = 0; i < size_b; ++i){
 3ee:	0b3a0803          	lb	a6,179(s4)
    for(j = 0; j < size_a + size_b -1; ++j){
 3f2:	0b390b3b          	0xb390b3b
 3f6:	1349                	addi	t1,t1,-14
        for(i = 0; i < size_b; ++i){
 3f8:	0000                	unimp
 3fa:	2e44                	fld	fs1,152(a2)
    int v[size_N];
 3fc:	3101                	jal	fffffffc <_stack_start+0xfffefffc>
 3fe:	12011113          	0x12011113
 402:	4006                	0x4006
 404:	9718                	0x9718
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 406:	1942                	slli	s2,s2,0x30
 408:	1301                	addi	t1,t1,-32
 40a:	0000                	unimp
 40c:	0545                	addi	a0,a0,17
 40e:	3100                	fld	fs0,32(a0)
 410:	00180213          	addi	tp,a6,1 # 590b53c5 <_stack_start+0x590a53c5>
 414:	4600                	lw	s0,8(a2)
 416:	002e                	c.slli	zero,0xb
 418:	193c193f 0e030e6e 	0xe030e6e193c193f
 420:	0b3a                	slli	s6,s6,0xe
    int v[size_N];
 422:	00000b3b          	0xb3b
 426:	0100                	addi	s0,sp,128
    int q[size_N];
 428:	0011                	c.nop	4
 42a:	0610                	addi	a2,sp,768
 42c:	0655                	addi	a2,a2,21
    int num_temp[size_N];
 42e:	0e1b0e03          	lb	t3,225(s6) # fffe10e1 <_stack_start+0xfffd10e1>
    int denum_temp[size_D];
 432:	0e25                	addi	t3,t3,9
 434:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	1008                	addi	a0,sp,32
       2:	0000                	unimp
       4:	101a                	c.slli	zero,0x26
       6:	0000                	unimp
       8:	0001                	nop
       a:	1a5a                	slli	s4,s4,0x36
       c:	0010                	0x10
       e:	1b00                	addi	s0,sp,432
      10:	0010                	0x10
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	101c                	addi	a5,sp,32
      20:	0000                	unimp
      22:	1064                	addi	s1,sp,44
      24:	0000                	unimp
      26:	0001                	nop
      28:	6a5a                	flw	fs4,148(sp)
      2a:	0010                	0x10
      2c:	7e00                	flw	fs0,56(a2)
      2e:	0010                	0x10
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0f96                	slli	t6,t6,0x5
      3e:	0000                	unimp
      40:	0fe8                	addi	a0,sp,988
      42:	0000                	unimp
      44:	0001                	nop
      46:	e85a                	fsw	fs6,16(sp)
      48:	0400000f          	fence	o,unknown
      4c:	0010                	0x10
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	8a00                	0x8a00
      5e:	ca00000f          	0xca00000f
      62:	0300000f          	fence	rw,unknown
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0fca                	slli	t6,t6,0x12
      6c:	0000                	unimp
      6e:	0fd4                	addi	a3,sp,980
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0fd4                	addi	a3,sp,980
      78:	0000                	unimp
      7a:	1005                	c.nop	-31
  jal x0, default_exc_handler
      7c:	0000                	unimp
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	1005                	c.nop	-31
  jal x0, default_exc_handler
      84:	0000                	unimp
      86:	1068                	addi	a0,sp,44
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	6879                	lui	a6,0x1e
}
      90:	0010                	0x10
    for(i=0;i<(length/3);i++) {
      92:	6a00                	flw	fs0,16(a2)
      94:	0010                	0x10
      96:	0300                	addi	s0,sp,384
    asm volatile(
      98:	7200                	flw	fs0,32(a2)
    for(i=0;i<(length/3);i++) {
      9a:	799c                	flw	fa5,48(a1)
      9c:	106a                	c.slli	zero,0x3a
      9e:	0000                	unimp
}
      a0:	107e                	c.slli	zero,0x3f
    asm volatile(
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      ac:	0000                	unimp
      ae:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b0:	8a00                	0x8a00
      b2:	a400000f          	0xa400000f
      b6:	0300000f          	fence	rw,unknown
      ba:	9100                	0x9100
    int line[size_b][size_a + size_b];
      bc:	7af0                	flw	fa2,116(a3)
      be:	0fa4                	addi	s1,sp,984
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      c0:	0000                	unimp
      c2:	0fa6                	slli	t6,t6,0x9
    int line[size_b][size_a + size_b];
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
      c8:	007d                	c.nop	31
      ca:	0fa6                	slli	t6,t6,0x9
      cc:	0000                	unimp
      ce:	1014                	addi	a3,sp,32
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
      d6:	147a                	slli	s0,s0,0x3e
      d8:	0010                	0x10
      da:	1b00                	addi	s0,sp,432
      dc:	0010                	0x10
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
    int line[size_b][size_a + size_b];
      e2:	1b00                	addi	s0,sp,432
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      e4:	0010                	0x10
    int line[size_b][size_a + size_b];
      e6:	6800                	flw	fs0,16(s0)
      e8:	0010                	0x10
      ea:	0300                	addi	s0,sp,384
    int pola[size_a];
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
      f0:	1068                	addi	a0,sp,44
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      f2:	0000                	unimp
    int line[size_b][size_a + size_b];
      f4:	106a                	c.slli	zero,0x3a
      f6:	0000                	unimp
    int pola[size_a];
      f8:	f0720003          	lb	zero,-249(tp) # ffffff07 <_stack_start+0xfffeff07>
    int polb[size_b];
      fc:	6a7a                	flw	fs4,156(sp)
    int line[size_b][size_a + size_b];
      fe:	0010                	0x10
    int polb[size_b];
     100:	7e00                	flw	fs0,56(a2)
    int pola[size_a];
     102:	0010                	0x10
     104:	0300                	addi	s0,sp,384
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     106:	9100                	0x9100
     108:	7af0                	flw	fa2,116(a3)
	...
    int polb[size_b];
     112:	0f8a                	slli	t6,t6,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     114:	0000                	unimp
    int pola[size_a];
     116:	0fb0                	addi	a2,sp,984
     118:	0000                	unimp
    int polb[size_b];
     11a:	c4910003          	lb	zero,-951(sp)
            line[i][j] = 0;
     11e:	b07c                	fsd	fa5,224(s0)
     120:	ba00000f          	0xba00000f
    for (i = 0; i < size_b; ++i){
     124:	0200000f          	fence	r,unknown
            product[j] = 0;
     128:	7e00                	flw	fs0,56(a2)
     12a:	ba00                	fsd	fs0,48(a2)
     12c:	6200000f          	0x6200000f
    for (i = 0; i < size_b; ++i){
     130:	0010                	0x10
    for (i = 0; i < size_a; ++i){
     132:	0200                	addi	s0,sp,256
     134:	7800                	flw	fs0,48(s0)
     136:	6200                	flw	fs0,0(a2)
	array_mod(pola,mod,size_a);
     138:	0010                	0x10
     13a:	6800                	flw	fs0,16(s0)
     13c:	0010                	0x10
     13e:	0300                	addi	s0,sp,384
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
    for (i = 0; i < size_b; ++i){
     144:	1068                	addi	a0,sp,44
     146:	0000                	unimp
     148:	106a                	c.slli	zero,0x3a
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
	array_mod(polb,mod,size_b);
     150:	6a7c                	flw	fa5,84(a2)
     152:	0010                	0x10
     154:	7e00                	flw	fs0,56(a2)
    if(star_mult == 1){
     156:	0010                	0x10
     158:	0200                	addi	s0,sp,256
     15a:	7800                	flw	fs0,48(s0)
	...
     164:	8a00                	0x8a00
     166:	e400000f          	0xe400000f
        for (j = size_b -1; j >= 0; j = j-1){
     16a:	0300000f          	fence	rw,unknown
            for (k = size_a-1; k >= 0; k = k-1 ){
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
            product[j] = 0;
     172:	0fe4                	addi	s1,sp,988
     174:	0000                	unimp
     176:	0fea                	slli	t6,t6,0x1a
            line[i][j] = 0;
     178:	0000                	unimp
     17a:	0002                	c.slli64	zero
            product[j] = 0;
     17c:	007c                	addi	a5,sp,12
     17e:	0fea                	slli	t6,t6,0x1a
        for(j = 0; j < size_a + size_b -1; ++j){
     180:	0000                	unimp
     182:	1005                	c.nop	-31
     184:	0000                	unimp
     186:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     188:	0080                	addi	s0,sp,64
     18a:	1005                	c.nop	-31
     18c:	0000                	unimp
     18e:	1068                	addi	a0,sp,44
        for(j = 0; j < size_a + size_b -1; ++j){
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
        pola[i] = a[i];
     196:	687e                	flw	fa6,220(sp)
     198:	0010                	0x10
     19a:	6a00                	flw	fs0,16(a2)
     19c:	0010                	0x10
     19e:	0300                	addi	s0,sp,384
    for (i = 0; i < size_a; ++i){
     1a0:	7200                	flw	fs0,32(a2)
        pola[i] = a[i];
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	106a                	c.slli	zero,0x3a
    for (i = 0; i < size_a; ++i){
     1a6:	0000                	unimp
        polb[i] = b[i];
     1a8:	107e                	c.slli	zero,0x3f
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     1b4:	0000                	unimp
        polb[i] = b[i];
     1b6:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     1b8:	9600                	0x9600
    if(star_mult == 1){
     1ba:	9c00000f          	0x9c00000f
        for (j = size_b -1; j >= 0; j = j-1){
     1be:	0200000f          	fence	r,unknown
    for (i = 0; i < size_b; ++i){
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	1c9f 0010 3400      	0x340000101c9f
     1ca:	0010                	0x10
     1cc:	0200                	addi	s0,sp,256
    for(j = 0; j < size_a + size_b -1; ++j){
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
    array_mod(product,mod,size_a+size_b-1);
     1d6:	0000                	unimp
     1d8:	aa00                	fsd	fs0,16(a2)
     1da:	000c                	0xc
     1dc:	c200                	sw	s0,0(a2)
     1de:	000c                	0xc
     1e0:	0100                	addi	s0,sp,128
}
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0cc2                	slli	s9,s9,0x10
     1e6:	0000                	unimp
     1e8:	0d2a                	slli	s10,s10,0xa
     1ea:	0000                	unimp
     1ec:	0001                	nop
     1ee:	2a58                	fld	fa4,144(a2)
     1f0:	000d                	c.nop	3
     1f2:	3600                	fld	fs0,40(a2)
     1f4:	000d                	c.nop	3
     1f6:	0300                	addi	s0,sp,384
     1f8:	8600                	0x8600
     1fa:	9f7f                	0x9f7f
     1fc:	0d36                	slli	s10,s10,0xd
     1fe:	0000                	unimp
     200:	0d3c                	addi	a5,sp,664
     202:	0000                	unimp
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
     20a:	0d3c                	addi	a5,sp,664
                line[size_b-1-j][k] = pola[k]*polb[j];
     20c:	0000                	unimp
     20e:	0d72                	slli	s10,s10,0x1c
     210:	0000                	unimp
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
     218:	0000                	unimp
     21a:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     21c:	aa00                	fsd	fs0,16(a2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     21e:	000c                	0xc
     220:	cc00                	sw	s0,24(s0)
     222:	000c                	0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
     224:	0100                	addi	s0,sp,128
     226:	5b00                	lw	s0,48(a4)
        for (j = size_b -1; j >= 0; j = j-1){
     228:	0ccc                	addi	a1,sp,596
     22a:	0000                	unimp
     22c:	0d34                	addi	a3,sp,664
     22e:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     230:	0001                	nop
     232:	3465                	jal	fffffcda <_stack_start+0xfffefcda>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     234:	000d                	c.nop	3
     236:	3c00                	fld	fs0,56(s0)
     238:	000d                	c.nop	3
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	3c9f 000d 7200      	0x7200000d3c9f
     246:	000d                	c.nop	3
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
        for (j = size_b -1; j >= 0; j = j-1){
     254:	0caa                	slli	s9,s9,0xa
     256:	0000                	unimp
        array_mod(line[i],mod,(size_a+size_b-1));
     258:	0cc4                	addi	s1,sp,596
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	c45c                	sw	a5,12(s0)
    for (i = 0; i < size_b; ++i){
     260:	000c                	0xc
     262:	2e00                	fld	fs0,24(a2)
     264:	000d                	c.nop	3
            product[j] += line[i][j];
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
     26a:	0d2e                	slli	s10,s10,0xb
     26c:	0000                	unimp
     26e:	0d3c                	addi	a5,sp,664
        for(i = 0; i < size_b; ++i){
     270:	0000                	unimp
            product[j] += line[i][j];
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0d3c                	addi	a5,sp,664
     27a:	0000                	unimp
     27c:	0d72                	slli	s10,s10,0x1c
        for(i = 0; i < size_b; ++i){
     27e:	0000                	unimp
     280:	0001                	nop
    for(j = 0; j < size_a + size_b -1; ++j){
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
     286:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     288:	0000                	unimp
     28a:	aa00                	fsd	fs0,16(a2)
    int line[size_b][size_a + size_b];
     28c:	000c                	0xc
     28e:	c600                	sw	s0,8(a2)
     290:	000c                	0xc
     292:	0100                	addi	s0,sp,128
     294:	5d00                	lw	s0,56(a0)
     296:	0cc6                	slli	s9,s9,0x11
     298:	0000                	unimp
     29a:	0cdf 0000 0001      	0x100000cdf
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2a0:	df5a                	sw	s6,188(sp)
     2a2:	000c                	0xc
     2a4:	7200                	flw	fs0,32(a2)
     2a6:	000d                	c.nop	3
     2a8:	0400                	addi	s0,sp,512
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
     2ae:	009f 0000 0000      	0x9f
    int line[size_b][size_a + size_b];
     2b4:	0000                	unimp
     2b6:	aa00                	fsd	fs0,16(a2)
     2b8:	000c                	0xc
    int pola[size_a];
     2ba:	ce00                	sw	s0,24(a2)
     2bc:	000c                	0xc
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
    int line[size_b][size_a + size_b];
     2c2:	0cce                	slli	s9,s9,0x13
    int pola[size_a];
     2c4:	0000                	unimp
     2c6:	0d38                	addi	a4,sp,664
    int polb[size_b];
     2c8:	0000                	unimp
     2ca:	0001                	nop
     2cc:	000d3867          	0xd3867
     2d0:	3c00                	fld	fs0,56(s0)
     2d2:	000d                	c.nop	3
    int line[size_b][size_a + size_b];
     2d4:	0400                	addi	s0,sp,512
     2d6:	f300                	fsw	fs0,32(a4)
    int pola[size_a];
     2d8:	5e01                	li	t3,-32
     2da:	3c9f 000d 7200      	0x7200000d3c9f
            line[i][j] = 0;
     2e0:	000d                	c.nop	3
     2e2:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     2e4:	6700                	flw	fs0,8(a4)
	...
            product2[j] = 0;
     2ee:	0caa                	slli	s9,s9,0xa
    for (i = 0; i < size_b; ++i){
     2f0:	0000                	unimp
     2f2:	0cdf 0000 0001      	0x100000cdf
    for(i = 0; i < size_a; ++i){
     2f8:	df5f 000c 7200      	0x7200000cdf5f
    for(i = 0; i < size_b; ++i){
     2fe:	000d                	c.nop	3
    if(star_mult == 1){
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
     306:	009f 0000 0000      	0x9f
     30c:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     30e:	aa00                	fsd	fs0,16(a2)
     310:	000c                	0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
     312:	df00                	sw	s0,56(a4)
     314:	000c                	0xc
            product2[j] = 0;
     316:	0100                	addi	s0,sp,128
     318:	6000                	flw	fs0,0(s0)
     31a:	0cdf 0000 0d32      	0xd3200000cdf
     320:	0000                	unimp
     322:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     324:	3264                	fld	fs1,224(a2)
     326:	000d                	c.nop	3
     328:	3c00                	fld	fs0,56(s0)
     32a:	000d                	c.nop	3
    for (i = 0; i < size_b; ++i){
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
     330:	6001                	0x6001
     332:	3c9f 000d 7200      	0x7200000d3c9f
        pola[i] = a[i];
     338:	000d                	c.nop	3
     33a:	0100                	addi	s0,sp,128
     33c:	6400                	flw	fs0,8(s0)
	...
     346:	0ce0                	addi	s0,sp,604
     348:	0000                	unimp
    for(i = 0; i < size_a; ++i){
     34a:	00000cef          	jal	s9,34a <polymult2+0xbe>
        polb[i] = b[i];
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
     352:	0000                	unimp
     354:	0000                	unimp
     356:	0000                	unimp
    for(i = 0; i < size_b; ++i){
     358:	f200                	fsw	fs0,32(a2)
        polb[i] = b[i];
     35a:	000c                	0xc
     35c:	1000                	addi	s0,sp,32
    for(i = 0; i < size_b; ++i){
     35e:	000d                	c.nop	3
                line[size_b-1-j][k] = pola[k]*polb[j];
     360:	0100                	addi	s0,sp,128
     362:	5a00                	lw	s0,48(a2)
     364:	0d10                	addi	a2,sp,656
     366:	0000                	unimp
     368:	00000d13          	li	s10,0
     36c:	0001                	nop
     36e:	3c5c                	fld	fa5,184(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     370:	000d                	c.nop	3
                line[size_b-1-j][k] = pola[k]*polb[j];
     372:	6000                	flw	fs0,0(s0)
     374:	000d                	c.nop	3
     376:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     378:	5a00                	lw	s0,48(a2)
	...
        for (j = size_b -1; j >= 0; j = j-1){
     382:	0d14                	addi	a3,sp,656
     384:	0000                	unimp
     386:	0d1f 0000 0001      	0x100000d1f
     38c:	005a                	c.slli	zero,0x16
        for(i = 0; i < size_b; ++i){
     38e:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     390:	0000                	unimp
     392:	0000                	unimp
}
     394:	2000                	fld	fs0,0(s0)
     396:	000d                	c.nop	3
     398:	3c00                	fld	fs0,56(s0)
     39a:	000d                	c.nop	3
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0d60                	addi	s0,sp,668
     3a2:	0000                	unimp
     3a4:	0d72                	slli	s10,s10,0x1c
     3a6:	0000                	unimp
     3a8:	0001                	nop
     3aa:	005a                	c.slli	zero,0x16
     3ac:	0000                	unimp
     3ae:	0000                	unimp
     3b0:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b2:	f200                	fsw	fs0,32(a2)
     3b4:	000c                	0xc
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3b6:	f800                	fsw	fs0,48(s0)
     3b8:	000c                	0xc
     3ba:	0100                	addi	s0,sp,128
     3bc:	5900                	lw	s0,48(a0)
     3be:	0cf8                	addi	a4,sp,604
     3c0:	0000                	unimp
     3c2:	0d04                	addi	s1,sp,656
     3c4:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c6:	0001                	nop
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3c8:	045d                	addi	s0,s0,23
     3ca:	000d                	c.nop	3
     3cc:	0a00                	addi	s0,sp,272
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ce:	000d                	c.nop	3
     3d0:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     3d2:	5e00                	lw	s0,56(a2)
     3d4:	0d20                	addi	s0,sp,664
     3d6:	0000                	unimp
     3d8:	0d2c                	addi	a1,sp,664
            product2[j] += line[i][j];
     3da:	0000                	unimp
     3dc:	0001                	nop
     3de:	3c59                	jal	fffffe74 <_stack_start+0xfffefe74>
        for(i = 0; i < size_b; ++i){
     3e0:	000d                	c.nop	3
            product2[j] += line[i][j];
     3e2:	4600                	lw	s0,8(a2)
     3e4:	000d                	c.nop	3
     3e6:	0100                	addi	s0,sp,128
     3e8:	5d00                	lw	s0,56(a0)
     3ea:	0d46                	slli	s10,s10,0x11
     3ec:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     3ee:	0d4c                	addi	a1,sp,660
     3f0:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     3f2:	7f7d0003          	lb	zero,2039(s10) # 1d7f7 <_stack_start+0xd7f7>
     3f6:	4c9f 000d 4e00      	0x4e00000d4c9f
    int v[size_N];
     3fc:	000d                	c.nop	3
     3fe:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     400:	5d00                	lw	s0,56(a0)
    int v[size_N];
     402:	0d4e                	slli	s10,s10,0x13
     404:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     406:	0d60                	addi	s0,sp,668
     408:	0000                	unimp
     40a:	0001                	nop
     40c:	605e                	flw	ft0,212(sp)
     40e:	000d                	c.nop	3
     410:	6a00                	flw	fs0,16(a2)
     412:	000d                	c.nop	3
     414:	0100                	addi	s0,sp,128
     416:	5900                	lw	s0,48(a0)
     418:	0d6a                	slli	s10,s10,0x1a
     41a:	0000                	unimp
     41c:	0d70                	addi	a2,sp,668
     41e:	0000                	unimp
     420:	7f790003          	lb	zero,2039(s2) # 27f7 <_min_stack+0x7f7>
    int v[size_N];
     424:	709f 000d 7200      	0x7200000d709f
    int q[size_N];
     42a:	000d                	c.nop	3
     42c:	0100                	addi	s0,sp,128
    int num_temp[size_N];
     42e:	5900                	lw	s0,48(a0)
	...
    int denum_temp[size_D];
     438:	0c14                	addi	a3,sp,528
    int num_temp[size_N];
     43a:	0000                	unimp
    int denum_temp[size_D];
     43c:	0c30                	addi	a2,sp,536
     43e:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     440:	0001                	nop
     442:	305a                	fld	ft0,432(sp)
     444:	000c                	0xc
     446:	8200                	0x8200
    int v[size_N];
     448:	000c                	0xc
     44a:	0100                	addi	s0,sp,128
    int denum_temp[size_D];
     44c:	5800                	lw	s0,48(s0)
     44e:	0c82                	c.slli64	s9
     450:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     452:	0caa                	slli	s9,s9,0xa
     454:	0000                	unimp
     456:	0004                	0x4
    if(size_N == 106) {
     458:	9f5a01f3          	0x9f5a01f3
	...
        array_mod(num_temp, mod, size_N - 1);
     464:	0c14                	addi	a3,sp,528
     466:	0000                	unimp
     468:	0c2a                	slli	s8,s8,0xa
        while(num_temp[size_N - 1] < 0){
     46a:	0000                	unimp
     46c:	0001                	nop
     46e:	000c2a5b          	0xc2a5b
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     472:	9000                	0x9000
     474:	000c                	0xc
     476:	0100                	addi	s0,sp,128
     478:	6200                	flw	fs0,0(a2)
    for (i = 0; i < size_N; ++i){
     47a:	0c90                	addi	a2,sp,592
    for (i = 0; i < size_D; ++i) {
     47c:	0000                	unimp
     47e:	0c98                	addi	a4,sp,592
	array_mod(denum_temp,mod,size_D);
     480:	0000                	unimp
     482:	0004                	0x4
     484:	9f5b01f3          	0x9f5b01f3
    for (i = 0; i < size_N; ++i){
     488:	0c98                	addi	a4,sp,592
     48a:	0000                	unimp
     48c:	0caa                	slli	s9,s9,0xa
    for (i = size_D-1; i >= 0; i = i-1){
     48e:	0000                	unimp
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
     494:	0000                	unimp
     496:	0000                	unimp
     498:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     49a:	1400                	addi	s0,sp,544
     49c:	000c                	0xc
        if ( (b_N*u)%mod == 1 )
     49e:	2e00                	fld	fs0,24(a2)
    for (u = 0; u < mod; ++u){
     4a0:	000c                	0xc
     4a2:	0100                	addi	s0,sp,128
     4a4:	5c00                	lw	s0,56(s0)
     4a6:	0c2e                	slli	s8,s8,0xb
        num_temp[i] = num[i];
     4a8:	0000                	unimp
     4aa:	0c6e                	slli	s8,s8,0x1b
     4ac:	0000                	unimp
     4ae:	0001                	nop
     4b0:	6e59                	lui	t3,0x16
     4b2:	000c                	0xc
    for (i = 0; i < size_N; ++i){
     4b4:	aa00                	fsd	fs0,16(a2)
        num_temp[i] = num[i];
     4b6:	000c                	0xc
    for (i = 0; i < size_N; ++i){
     4b8:	0400                	addi	s0,sp,512
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4ba:	f300                	fsw	fs0,32(a4)
     4bc:	5c01                	li	s8,-32
     4be:	009f 0000 0000      	0x9f
        array_mod(num_temp, mod, size_N);
     4c4:	0000                	unimp
     4c6:	1400                	addi	s0,sp,544
     4c8:	000c                	0xc
     4ca:	3b00                	fld	fs0,48(a4)
        denum_temp[i] = denum[i];
     4cc:	000c                	0xc
     4ce:	0100                	addi	s0,sp,128
     4d0:	5d00                	lw	s0,56(a0)
     4d2:	00000c3b          	0xc3b
     4d6:	0c94                	addi	a3,sp,592
    for (i = 0; i < size_D; ++i) {
     4d8:	0000                	unimp
        denum_temp[i] = denum[i];
     4da:	0001                	nop
    for (i = 0; i < size_D; ++i) {
     4dc:	9464                	0x9464
        q[i] = 0;
     4de:	000c                	0xc
     4e0:	9800                	0x9800
     4e2:	000c                	0xc
     4e4:	0400                	addi	s0,sp,512
        v[i] = 0;
     4e6:	f300                	fsw	fs0,32(a4)
        q[i] = 0;
     4e8:	5d01                	li	s10,-32
     4ea:	989f 000c aa00      	0xaa00000c989f
    for (i = 0; i < size_N; ++i){
     4f0:	000c                	0xc
     4f2:	0100                	addi	s0,sp,128
        if( denum_temp[i] != 0 )
     4f4:	6400                	flw	fs0,8(s0)
	...
        if ( (b_N*u)%mod == 1 )
     4fe:	0c14                	addi	a3,sp,528
     500:	0000                	unimp
     502:	00000c3b          	0xc3b
    for (u = 0; u < mod; ++u){
     506:	0001                	nop
        if( num_temp[i] != 0 )
     508:	3b5e                	fld	fs6,496(sp)
    for (i = size_N-1; i >= 0; i = i-1){
     50a:	000c                	0xc
     50c:	9200                	0x9200
     50e:	000c                	0xc
     510:	0100                	addi	s0,sp,128
     512:	6300                	flw	fs0,0(a4)
     514:	0c92                	slli	s9,s9,0x4
     516:	0000                	unimp
         if(size_N == 106) {
     518:	0c98                	addi	a4,sp,592
     51a:	0000                	unimp
     51c:	0004                	0x4
        v[(d-d2)] = u*r_d;
     51e:	9f5e01f3          	0x9f5e01f3
     522:	0c98                	addi	a4,sp,592
     524:	0000                	unimp
     526:	0caa                	slli	s9,s9,0xa
     528:	0000                	unimp
     52a:	0001                	nop
         if(size_N == 106) {
     52c:	00000063          	beqz	zero,52c <polydiv+0x130>
            array_mod(v, mod, size_N - 1);
     530:	0000                	unimp
     532:	0000                	unimp
     534:	4e00                	lw	s0,24(a2)
     536:	000c                	0xc
     538:	7b00                	flw	fs0,48(a4)
            while(v[size_N - 1] < 0){
     53a:	000c                	0xc
     53c:	0100                	addi	s0,sp,128
     53e:	5a00                	lw	s0,48(a2)
	...
            v[size_N - 1] = v[size_N - 1] % mod;
     548:	0c4e                	slli	s8,s8,0x13
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     54a:	0000                	unimp
     54c:	0c54                	addi	a3,sp,532
     54e:	0000                	unimp
     550:	0002                	c.slli64	zero
     552:	9f30                	0x9f30
     554:	0c7c                	addi	a5,sp,540
     556:	0000                	unimp
        if(size_N == 106) {
     558:	0c8e                	slli	s9,s9,0x3
     55a:	0000                	unimp
     55c:	0001                	nop
     55e:	9859                	andi	s0,s0,-10
            array_mod(product, mod, size_N - 1);
     560:	000c                	0xc
     562:	a200                	fsd	fs0,0(a2)
     564:	000c                	0xc
     566:	0100                	addi	s0,sp,128
            while(product[size_N - 1] < 0){
     568:	5900                	lw	s0,48(a0)
     56a:	0ca2                	slli	s9,s9,0x8
     56c:	0000                	unimp
     56e:	0ca8                	addi	a0,sp,600
     570:	0000                	unimp
     572:	7f790003          	lb	zero,2039(s2)
            product[size_N - 1] = product[size_N - 1] % mod;
     576:	a89f 000c aa00      	0xaa00000ca89f
     57c:	000c                	0xc
     57e:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     580:	5900                	lw	s0,48(a0)
	...
            array_mod(num_temp, mod, size_N - 1);
     58a:	0920                	addi	s0,sp,152
     58c:	0000                	unimp
     58e:	0964                	addi	s1,sp,156
     590:	0000                	unimp
            while(num_temp[size_N - 1] < 0){
     592:	0001                	nop
     594:	645a                	flw	fs0,148(sp)
     596:	0009                	c.nop	2
     598:	2800                	fld	fs0,16(s0)
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     59a:	0100000b          	0x100000b
     59e:	6200                	flw	fs0,0(a2)
     5a0:	0b28                	addi	a0,sp,408
     5a2:	0000                	unimp
     5a4:	0b4c                	addi	a1,sp,404
        for(i = 0; i < size_N; ++i){
     5a6:	0000                	unimp
     5a8:	7f850003          	lb	zero,2040(a0) # fffed7f8 <_stack_start+0xfffdd7f8>
 	if(size_N == 106) {
     5ac:	4c9f 000b 6c00      	0x6c00000b4c9f
            array_mod(q, mod, size_N - 1);
     5b2:	0400000b          	0x400000b
     5b6:	f300                	fsw	fs0,32(a4)
            while(q[size_N - 1] < 0){
     5b8:	5a01                	li	s4,-32
     5ba:	6c9f 000b 0000      	0xb6c9f
            q[size_N - 1] = q[size_N - 1] % mod;
     5c0:	000c                	0xc
     5c2:	0100                	addi	s0,sp,128
     5c4:	6200                	flw	fs0,0(a2)
     5c6:	0c00                	addi	s0,sp,528
    int v[size_N];
     5c8:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     5ca:	0c14                	addi	a3,sp,528
     5cc:	0000                	unimp
     5ce:	7f850003          	lb	zero,2040(a0)
     5d2:	009f 0000 0000      	0x9f
     5d8:	0000                	unimp
                v[size_N - 1] = v[size_N - 1]+mod;
     5da:	2000                	fld	fs0,0(s0)
     5dc:	0009                	c.nop	2
     5de:	5c00                	lw	s0,56(s0)
     5e0:	0009                	c.nop	2
            array_mod(v, mod, size_N);
     5e2:	0100                	addi	s0,sp,128
     5e4:	5b00                	lw	s0,48(a4)
     5e6:	095c                	addi	a5,sp,148
     5e8:	0000                	unimp
     5ea:	0b54                	addi	a3,sp,404
                product[size_N - 1] = product[size_N - 1]+mod;
     5ec:	0000                	unimp
     5ee:	0001                	nop
     5f0:	000b5467          	0xb5467
            array_mod(product, mod, size_N);
     5f4:	6c00                	flw	fs0,24(s0)
     5f6:	0400000b          	0x400000b
     5fa:	f300                	fsw	fs0,32(a4)
     5fc:	5b01                	li	s6,-32
     5fe:	6c9f 000b 1400      	0x1400000b6c9f
            num_temp[i] = num_temp[i] - product[i];
     604:	000c                	0xc
     606:	0100                	addi	s0,sp,128
     608:	6700                	flw	fs0,8(a4)
	...
     612:	0920                	addi	s0,sp,152
        for (i = 0; i < size_N; ++i){
     614:	0000                	unimp
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     616:	0960                	addi	s0,sp,156
     618:	0000                	unimp
     61a:	0001                	nop
     61c:	605c                	flw	fa5,4(s0)
            array_mod(num_temp, mod, size_N);
     61e:	0009                	c.nop	2
     620:	5000                	lw	s0,32(s0)
     622:	0100000b          	0x100000b
     626:	6600                	flw	fs0,8(a2)
            q[i] = q[i] + v[i];
     628:	0b50                	addi	a2,sp,404
     62a:	0000                	unimp
     62c:	0b6c                	addi	a1,sp,412
     62e:	0000                	unimp
     630:	0004                	0x4
        for(i = 0; i < size_N; ++i){
     632:	9f5c01f3          	0x9f5c01f3
            q[i] = q[i] + v[i];
     636:	0b6c                	addi	a1,sp,412
     638:	0000                	unimp
     63a:	0c14                	addi	a3,sp,528
        for(i = 0; i < size_N; ++i){
     63c:	0000                	unimp
                q[size_N - 1] = q[size_N - 1]+mod;
     63e:	0001                	nop
     640:	0066                	c.slli	zero,0x19
     642:	0000                	unimp
     644:	0000                	unimp
            array_mod(q, mod, size_N);
     646:	0000                	unimp
     648:	ae00                	fsd	fs0,24(a2)
     64a:	000a                	c.slli	zero,0x2
     64c:	b800                	fsd	fs0,48(s0)
     64e:	000a                	c.slli	zero,0x2
            if( num_temp[i] != 0 )
     650:	0100                	addi	s0,sp,128
        for (i = size_N-1; i >= 0; i = i-1){
     652:	5a00                	lw	s0,48(a2)
	...
            v[i] = 0;
     65c:	0ac8                	addi	a0,sp,340
     65e:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     660:	00000ae7          	jalr	s5,zero # 0 <__DYNAMIC>
     664:	0001                	nop
    while (d >= d2){
     666:	cc5a                	sw	s6,24(sp)
     668:	e000000b          	0xe000000b
        result[i] = q[i];
     66c:	0100000b          	0x100000b
     670:	5a00                	lw	s0,48(a2)
	...
    for(i = size_N; i < (2*size_N); ++i){
     67a:	0ae8                	addi	a0,sp,348
        result[i] = num_temp[i-size_N];
     67c:	0000                	unimp
     67e:	00000afb          	0xafb
     682:	0001                	nop
    for(i = size_N; i < (2*size_N); ++i){
     684:	e05a                	fsw	fs6,0(sp)
     686:	f000000b          	0xf000000b
}
     68a:	0100000b          	0x100000b
     68e:	5a00                	lw	s0,48(a2)
	...
     698:	0afc                	addi	a5,sp,348
     69a:	0000                	unimp
     69c:	0b18                	addi	a4,sp,400
     69e:	0000                	unimp
     6a0:	0001                	nop
     6a2:	f05a                	fsw	fs6,32(sp)
     6a4:	0000000b          	0xb
     6a8:	000c                	0xc
     6aa:	0100                	addi	s0,sp,128
     6ac:	5a00                	lw	s0,48(a2)
	...
        result[i] = q[i];
     6b6:	0a62                	slli	s4,s4,0x18
     6b8:	0000                	unimp
     6ba:	0b30                	addi	a2,sp,408
     6bc:	0000                	unimp
    for(i = 0; i < size_N; ++i){
     6be:	0002                	c.slli64	zero
        result[i] = q[i];
     6c0:	0072                	c.slli	zero,0x1c
    for(i = 0; i < size_N; ++i){
     6c2:	0b30                	addi	a2,sp,408
        result[i] = num_temp[i-size_N];
     6c4:	0000                	unimp
     6c6:	0b48                	addi	a0,sp,404
     6c8:	0000                	unimp
     6ca:	0002                	c.slli64	zero
     6cc:	0084                	addi	s1,sp,64
     6ce:	0b48                	addi	a0,sp,404
    for(i = size_N; i < (2*size_N); ++i){
     6d0:	0000                	unimp
     6d2:	0b4c                	addi	a1,sp,404
     6d4:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     6d6:	0010                	0x10
     6d8:	0091                	addi	ra,ra,4
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6da:	0085                	addi	ra,ra,1
    int ri_2[size]; // MX-ring poly, a
     6dc:	2432                	fld	fs0,264(sp)
     6de:	f0090f23          	sb	zero,-226(s2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6e2:	1c1a                	slli	s8,s8,0x26
     6e4:	f00a                	fsw	ft2,32(sp)
     6e6:	1c01                	addi	s8,s8,-32
     6e8:	0b4c                	addi	a1,sp,404
     6ea:	0000                	unimp
     6ec:	0b6c                	addi	a1,sp,412
     6ee:	0000                	unimp
     6f0:	00910013          	addi	zero,sp,9
     6f4:	235a01f3          	0x235a01f3
     6f8:	3201                	jal	fffffff8 <_stack_start+0xfffefff8>
     6fa:	2324                	fld	fs1,64(a4)
    int ri_2[size]; // MX-ring poly, a
     6fc:	1af0090f          	0x1af0090f
     700:	0a1c                	addi	a5,sp,272
    int ri_1[size]; // f-random poly, f[N] = 0, b
     702:	01f0                	addi	a2,sp,204
     704:	6c1c                	flw	fa5,24(s0)
     706:	1400000b          	0x1400000b
    int ri[size];
     70a:	000c                	0xc
     70c:	0200                	addi	s0,sp,256
    int ti_1[size]; // ti_1[0] = 1
     70e:	7200                	flw	fs0,32(a2)
	...
    int ti[size];
     718:	6600                	flw	fs0,8(a2)
    int qi_1[size];
     71a:	000a                	c.slli	zero,0x2
     71c:	6800                	flw	fs0,16(s0)
     71e:	000a                	c.slli	zero,0x2
    int temp[size];
     720:	0200                	addi	s0,sp,256
     722:	3100                	fld	fs0,32(a0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     724:	689f 000a 6e00      	0x6e00000a689f
    int ri_2[size]; // MX-ring poly, a
     72a:	000a                	c.slli	zero,0x2
    int temp[size];
     72c:	0100                	addi	s0,sp,128
    for (i = 0; i < size; ++i) {
     72e:	5f00                	lw	s0,56(a4)
     730:	0a72                	slli	s4,s4,0x1c
        ti_2[i] = 0;
     732:	0000                	unimp
     734:	0a78                	addi	a4,sp,284
     736:	0000                	unimp
     738:	0001                	nop
    for (i = 0; i < size; ++i) {
     73a:	805f 000a 8e00      	0x8e00000a805f
    ti_1[0] = 1;
     740:	000a                	c.slli	zero,0x2
     742:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     744:	5f00                	lw	s0,56(a4)
     746:	0a98                	addi	a4,sp,336
     748:	0000                	unimp
     74a:	0aad                	addi	s5,s5,11
            ti[i] = ti_2[i] - temp[i];
     74c:	0000                	unimp
     74e:	0001                	nop
     750:	ae5f 000a b800      	0xb800000aae5f
	array_mod(ri_2,mod,N+1);
     756:	000a                	c.slli	zero,0x2
     758:	0500                	addi	s0,sp,640
     75a:	8200                	0x8200
	array_mod(ri_1,mod,N+1);
     75c:	3100                	fld	fs0,32(a0)
     75e:	9f24                	0x9f24
     760:	0ab8                	addi	a4,sp,344
     762:	0000                	unimp
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     764:	00000ac7          	fmsub.s	fs5,ft0,ft0,ft0,rne
     768:	0001                	nop
     76a:	c85f 000a d800      	0xd800000ac85f
        for (i = N + 1; i < (2 * N + 2); ++i) {
     770:	000a                	c.slli	zero,0x2
     772:	0500                	addi	s0,sp,640
     774:	8200                	0x8200
     776:	3300                	fld	fs0,32(a4)
     778:	9f1e                	add	t5,t5,t2
     77a:	0ad8                	addi	a4,sp,340
     77c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     77e:	0ae8                	addi	a0,sp,348
     780:	0000                	unimp
     782:	0001                	nop
        array_mod(temp,mod,N+1);
     784:	e859                	bnez	s0,81a <ext_euclid+0x144>
     786:	000a                	c.slli	zero,0x2
     788:	f000                	fsw	fs0,32(s0)
     78a:	000a                	c.slli	zero,0x2
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     78c:	0200                	addi	s0,sp,256
     78e:	3000                	fld	fs0,32(s0)
     790:	f09f 000a f800      	0xf800000af09f
     796:	000a                	c.slli	zero,0x2
        for (i = 0; i < N + 1; ++i) {
     798:	0100                	addi	s0,sp,128
     79a:	5e00                	lw	s0,56(a2)
     79c:	0afc                	addi	a5,sp,348
	array_mod(qi_1,mod,size);
     79e:	0000                	unimp
     7a0:	0b0e                	slli	s6,s6,0x3
     7a2:	0000                	unimp
     7a4:	0005                	c.nop	1
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7a6:	0082                	c.slli64	ra
     7a8:	2432                	fld	fs0,264(sp)
     7aa:	0e9f 000b 2800      	0x2800000b0e9f
     7b0:	0100000b          	0x100000b
        for (i = 0; i < N + 1; ++i) {
     7b4:	6800                	flw	fs0,16(s0)
     7b6:	0b28                	addi	a0,sp,408
     7b8:	0000                	unimp
	array_mod(temp,mod,size);
     7ba:	0ba8                	addi	a0,sp,472
     7bc:	0000                	unimp
     7be:	0001                	nop
     7c0:	a85f 000b aa00      	0xaa00000ba85f
        for (i = 0; i < N + 1; ++i) {
     7c6:	0300000b          	0x300000b
        array_mod(ti,mod,N+1);
     7ca:	7f00                	flw	fs0,56(a4)
     7cc:	9f7f                	0x9f7f
     7ce:	0baa                	slli	s7,s7,0xa
     7d0:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7d2:	0bcc                	addi	a1,sp,468
        controlR = 0;
     7d4:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7d6:	0001                	nop
     7d8:	cc5f 000b dc00      	0xdc00000bcc5f
        for (j = 0; j < mod; ++j) {
     7de:	0100000b          	0x100000b
     7e2:	5900                	lw	s0,48(a0)
     7e4:	0bdc                	addi	a5,sp,468
     7e6:	0000                	unimp
     7e8:	0bde                	slli	s7,s7,0x17
     7ea:	0000                	unimp
     7ec:	7f790003          	lb	zero,2039(s2)
        for (i = 0; i < N + 1; ++i) {
     7f0:	de9f 000b e000      	0xe000000bde9f
    }
     7f6:	0100000b          	0x100000b
     7fa:	5900                	lw	s0,48(a0)
     7fc:	0be0                	addi	s0,sp,476
     7fe:	0000                	unimp
     800:	0be4                	addi	s1,sp,476
     802:	0000                	unimp
     804:	0001                	nop
     806:	e45e                	fsw	fs7,8(sp)
     808:	ee00000b          	0xee00000b
     80c:	0300000b          	0x300000b
     810:	7e00                	flw	fs0,56(a2)
     812:	9f7f                	0x9f7f
     814:	0bee                	slli	s7,s7,0x1b
     816:	0000                	unimp
     818:	0bf0                	addi	a2,sp,476
     81a:	0000                	unimp
        ri_2[i] = polyR[i];
     81c:	0001                	nop
     81e:	f05e                	fsw	fs7,32(sp)
     820:	0000000b          	0xb
     824:	000c                	0xc
     826:	0100                	addi	s0,sp,128
    for (i = 0; i < size; ++i) {
     828:	6800                	flw	fs0,16(s0)
        ri_2[i] = polyR[i];
     82a:	0c00                	addi	s0,sp,528
     82c:	0000                	unimp
        ri_1[i] = polyf[i];
     82e:	0c10                	addi	a2,sp,528
     830:	0000                	unimp
     832:	0001                	nop
     834:	105f 000c 1200      	0x1200000c105f
     83a:	000c                	0xc
     83c:	0300                	addi	s0,sp,384
        ti_2[i] = 0;
     83e:	7f00                	flw	fs0,56(a4)
     840:	9f7f                	0x9f7f
     842:	0c12                	slli	s8,s8,0x4
     844:	0000                	unimp
        ti_1[i] = 0;
     846:	0c14                	addi	a3,sp,528
     848:	0000                	unimp
     84a:	0001                	nop
     84c:	005f 0000 0000      	0x5f
            ri[i - (N + 1)] = res[i];
     852:	0000                	unimp
     854:	2c00                	fld	fs0,24(s0)
     856:	6c00000b          	0x6c00000b
        for (i = N + 1; i < (2 * N + 2); ++i) {
     85a:	0600000b          	0x600000b
            ri[i - (N + 1)] = res[i];
     85e:	0300                	addi	s0,sp,384
     860:	1aac                	addi	a1,sp,376
        for (i = N + 1; i < (2 * N + 2); ++i) {
     862:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     864:	009f 0000 0000      	0x9f
     86a:	0000                	unimp
     86c:	6200                	flw	fs0,0(a2)
     86e:	000a                	c.slli	zero,0x2
     870:	2800                	fld	fs0,16(s0)
     872:	0100000b          	0x100000b
     876:	6200                	flw	fs0,0(a2)
     878:	0b28                	addi	a0,sp,408
        for (i = 0; i < N + 1; ++i) {
     87a:	0000                	unimp
     87c:	0b4c                	addi	a1,sp,404
            qi_1[i] = res1[i];
     87e:	0000                	unimp
     880:	7f850003          	lb	zero,2040(a0)
     884:	4c9f 000b 6c00      	0x6c00000b4c9f
        for (i = 0; i < N + 1; ++i) {
     88a:	0400000b          	0x400000b
     88e:	f300                	fsw	fs0,32(a4)
            temp[i] = res2[i];
     890:	5a01                	li	s4,-32
     892:	6c9f 000b 0000      	0xb6c9f
     898:	000c                	0xc
     89a:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     89c:	6200                	flw	fs0,0(a2)
            temp[i] = res2[i];
     89e:	0c00                	addi	s0,sp,528
        for (i = 0; i < N + 1; ++i) {
     8a0:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     8a2:	0c14                	addi	a3,sp,528
     8a4:	0000                	unimp
     8a6:	7f850003          	lb	zero,2040(a0)
     8aa:	009f 0000 0000      	0x9f
     8b0:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8b2:	d600                	sw	s0,40(a2)
            ti[i] = ti_2[i] - temp[i];
     8b4:	0006                	c.slli	zero,0x1
     8b6:	5400                	lw	s0,40(s0)
        for (i = 0; i < N + 1; ++i) {
     8b8:	01000007          	0x1000007
            ri_2[i] = ri_1[i];
     8bc:	5a00                	lw	s0,48(a2)
     8be:	0754                	addi	a3,sp,900
     8c0:	0000                	unimp
     8c2:	081c                	addi	a5,sp,16
     8c4:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8c6:	0004                	0x4
            ri_2[i] = ri_1[i];
     8c8:	9f5a01f3          	0x9f5a01f3
            ri_1[i] = ri[i];
     8cc:	081c                	addi	a5,sp,16
     8ce:	0000                	unimp
            ti_2[i] = ti_1[i];
     8d0:	0852                	slli	a6,a6,0x14
     8d2:	0000                	unimp
            ri_1[i] = ri[i];
     8d4:	0001                	nop
            ti_2[i] = ti_1[i];
     8d6:	525a                	lw	tp,180(sp)
     8d8:	0008                	0x8
     8da:	2000                	fld	fs0,0(s0)
     8dc:	0009                	c.nop	2
            controlR += ri[i];
     8de:	0400                	addi	s0,sp,512
            ti_2[i] = ti_1[i];
     8e0:	f300                	fsw	fs0,32(a4)
     8e2:	5a01                	li	s4,-32
            ti_1[i] = ti[i];
     8e4:	009f 0000 0000      	0x9f
     8ea:	0000                	unimp
            qi_1[i] = 0;
     8ec:	d600                	sw	s0,40(a2)
     8ee:	0006                	c.slli	zero,0x1
     8f0:	5400                	lw	s0,40(s0)
     8f2:	01000007          	0x1000007
        for (i = 0; i < N + 1; ++i) {
     8f6:	5b00                	lw	s0,48(a4)
            if (((ri_2[0] * j) % mod) == 1)
     8f8:	0754                	addi	a3,sp,900
     8fa:	0000                	unimp
     8fc:	081c                	addi	a5,sp,16
     8fe:	0000                	unimp
     900:	0004                	0x4
     902:	9f5b01f3          	0x9f5b01f3
     906:	081c                	addi	a5,sp,16
        for (j = 0; j < mod; ++j) {
     908:	0000                	unimp
     90a:	0852                	slli	a6,a6,0x14
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     90c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     90e:	0001                	nop
     910:	0008525b          	0x8525b
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     914:	2000                	fld	fs0,0(s0)
     916:	0009                	c.nop	2
     918:	0400                	addi	s0,sp,512
     91a:	f300                	fsw	fs0,32(a4)
     91c:	5b01                	li	s6,-32
        for (i = 0; i < N + 1; ++i) {
     91e:	009f 0000 0000      	0x9f
int* generate_keys(int N, int p, int q){
     924:	0000                	unimp
     926:	d600                	sw	s0,40(a2)
     928:	0006                	c.slli	zero,0x1
     92a:	3a00                	fld	fs0,48(a2)
     92c:	01000007          	0x1000007
     930:	5c00                	lw	s0,56(s0)
     932:	073a                	slli	a4,a4,0xe
     934:	0000                	unimp
     936:	0810                	addi	a2,sp,16
     938:	0000                	unimp
     93a:	0001                	nop
     93c:	0008106b          	0x8106b
     940:	1c00                	addi	s0,sp,560
     942:	0008                	0x8
     944:	0400                	addi	s0,sp,512
     946:	f300                	fsw	fs0,32(a4)
     948:	5c01                	li	s8,-32
     94a:	1c9f 0008 2000      	0x200000081c9f
     950:	0009                	c.nop	2
     952:	0100                	addi	s0,sp,128
     954:	6b00                	flw	fs0,16(a4)
	...
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     95e:	06d6                	slli	a3,a3,0x15
     960:	0000                	unimp
     962:	073a                	slli	a4,a4,0xe
     964:	0000                	unimp
     966:	0001                	nop
     968:	3a5d                	jal	31e <polymult2+0x92>
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     96a:	fc000007          	0xfc000007
     96e:	01000007          	0x1000007
     972:	5900                	lw	s0,48(a0)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     974:	07fc                	addi	a5,sp,972
     976:	0000                	unimp
     978:	081c                	addi	a5,sp,16
     97a:	0000                	unimp
     97c:	0004                	0x4
     97e:	9f5d01f3          	0x9f5d01f3
     982:	081c                	addi	a5,sp,16
     984:	0000                	unimp
     986:	0920                	addi	s0,sp,152
     988:	0000                	unimp
     98a:	0001                	nop
     98c:	0059                	c.nop	22
     98e:	0000                	unimp
     990:	0000                	unimp
     992:	0000                	unimp
     994:	f200                	fsw	fs0,32(a2)
     996:	1c000007          	0x1c000007
     99a:	0008                	0x8
     99c:	0600                	addi	s0,sp,768
     99e:	0300                	addi	s0,sp,384
     9a0:	191c                	addi	a5,sp,176
     9a2:	0000                	unimp
     9a4:	009f 0000 0000      	0x9f
     9aa:	0000                	unimp
     9ac:	2e00                	fld	fs0,24(a2)
     9ae:	fe000007          	0xfe000007
     9b2:	01000007          	0x1000007
     9b6:	6200                	flw	fs0,0(a2)
     9b8:	07fe                	slli	a5,a5,0x1f
     9ba:	0000                	unimp
     9bc:	0810                	addi	a2,sp,16
     9be:	0000                	unimp
     9c0:	7f8b0003          	lb	zero,2040(s6)
     9c4:	109f 0008 1c00      	0x1c000008109f
     9ca:	0008                	0x8
     9cc:	0600                	addi	s0,sp,768
     9ce:	f300                	fsw	fs0,32(a4)
     9d0:	5c01                	li	s8,-32
     9d2:	1c31                	addi	s8,s8,-20
     9d4:	1c9f 0008 2000      	0x200000081c9f
     9da:	0009                	c.nop	2
     9dc:	0100                	addi	s0,sp,128
     9de:	6200                	flw	fs0,0(a2)
	...
    int polyR[N+1];
     9e8:	072e                	slli	a4,a4,0xb
     9ea:	0000                	unimp
     9ec:	073a                	slli	a4,a4,0xe
     9ee:	0000                	unimp
     9f0:	0002                	c.slli64	zero
     9f2:	9f30                	0x9f30
    polyR[N] = 1;
     9f4:	073a                	slli	a4,a4,0xe
     9f6:	0000                	unimp
     9f8:	0754                	addi	a3,sp,900
     9fa:	0000                	unimp
     9fc:	0001                	nop
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9fe:	705e                	flw	ft0,244(sp)
     a00:	74000007          	0x74000007
     a04:	01000007          	0x1000007
     a08:	6b00                	flw	fs0,16(a4)
     a0a:	0774                	addi	a3,sp,908
     a0c:	0000                	unimp
     a0e:	077e                	slli	a4,a4,0x1f
     a10:	0000                	unimp
     a12:	0001                	nop
     a14:	805f 0007 8b00      	0x8b000007805f
     a1a:	01000007          	0x1000007
     a1e:	5e00                	lw	s0,56(a2)
     a20:	0798                	addi	a4,sp,960
     a22:	0000                	unimp
     a24:	079a                	slli	a5,a5,0x6
     a26:	0000                	unimp
     a28:	0002                	c.slli64	zero
     a2a:	9f30                	0x9f30
     a2c:	079a                	slli	a5,a5,0x6
     a2e:	0000                	unimp
     a30:	07a5                	addi	a5,a5,9
     a32:	0000                	unimp
     a34:	0001                	nop
     a36:	b45f 0007 b600      	0xb6000007b45f
     a3c:	02000007          	0x2000007
     a40:	3000                	fld	fs0,32(s0)
     a42:	b69f 0007 c100      	0xc1000007b69f
     a48:	01000007          	0x1000007
     a4c:	5f00                	lw	s0,56(a4)
     a4e:	07c2                	slli	a5,a5,0x10
     a50:	0000                	unimp
     a52:	07c6                	slli	a5,a5,0x11
     a54:	0000                	unimp
     a56:	0002                	c.slli64	zero
     a58:	9f30                	0x9f30
     a5a:	07c6                	slli	a5,a5,0x11
     a5c:	0000                	unimp
     a5e:	07d1                	addi	a5,a5,20
     a60:	0000                	unimp
    polyR[0] = -1;
     a62:	0001                	nop
     a64:	d25e                	sw	s7,36(sp)
    for(i = 1; i < N; ++i){
     a66:	d8000007          	0xd8000007
     a6a:	02000007          	0x2000007
    for (i = N; i < 55; ++i ){
     a6e:	3000                	fld	fs0,32(s0)
     a70:	d89f 0007 e200      	0xe2000007d89f
    for(i = 0; i < N; ++i){
     a76:	01000007          	0x1000007
        random_keys[i] = f[i];
     a7a:	5d00                	lw	s0,56(a0)
     a7c:	07ee                	slli	a5,a5,0x1b
     a7e:	0000                	unimp
    for(i = 0; i < N; ++i){
     a80:	082a                	slli	a6,a6,0xa
     a82:	0000                	unimp
     a84:	0001                	nop
     a86:	2a5e                	fld	fs4,464(sp)
    for(i = N; i < (2*N); ++i){
     a88:	0008                	0x8
     a8a:	4e00                	lw	s0,24(a2)
     a8c:	0008                	0x8
     a8e:	0300                	addi	s0,sp,384
        random_keys[i] = g[i-N];
     a90:	7e00                	flw	fs0,56(a2)
     a92:	9f7f                	0x9f7f
     a94:	084e                	slli	a6,a6,0x13
     a96:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     a98:	0852                	slli	a6,a6,0x14
     a9a:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     a9c:	0001                	nop
     a9e:	525e                	lw	tp,244(sp)
     aa0:	0008                	0x8
    fp = ext_euclid(polyR, f, (N+1), p);
     aa2:	5c00                	lw	s0,56(s0)
     aa4:	0008                	0x8
     aa6:	0100                	addi	s0,sp,128
     aa8:	5f00                	lw	s0,56(a4)
     aaa:	085c                	addi	a5,sp,20
     aac:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     aae:	0862                	slli	a6,a6,0x18
        random_keys[i] = fp[i-(2*N)];
     ab0:	0000                	unimp
     ab2:	7f7f0003          	lb	zero,2039(t5) # 1b7f7 <_stack_start+0xb7f7>
     ab6:	629f 0008 6400      	0x64000008629f
    fq = ext_euclid(polyR, f, (N+1), q);
     abc:	0008                	0x8
     abe:	0100                	addi	s0,sp,128
     ac0:	5f00                	lw	s0,56(a4)
     ac2:	0864                	addi	s1,sp,28
     ac4:	0000                	unimp
     ac6:	0876                	slli	a6,a6,0x1d
    for(i = (3*N); i < (4*N); ++i){
     ac8:	0000                	unimp
     aca:	0001                	nop
     acc:	765e                	flw	fa2,244(sp)
     ace:	0008                	0x8
        random_keys[i] = fq[i-(3*N)];
     ad0:	7a00                	flw	fs0,48(a2)
     ad2:	0008                	0x8
     ad4:	0300                	addi	s0,sp,384
     ad6:	7e00                	flw	fs0,56(a2)
    for(i = (3*N); i < (4*N); ++i){
     ad8:	9f7f                	0x9f7f
     ada:	087a                	slli	a6,a6,0x1e
    fg = polymult2(fq, N, g, N, 0);
     adc:	0000                	unimp
     ade:	087e                	slli	a6,a6,0x1f
     ae0:	0000                	unimp
     ae2:	0001                	nop
     ae4:	7e5e                	flw	ft8,244(sp)
     ae6:	0008                	0x8
    for(i = 0; i < (2*N-1); ++i){
     ae8:	8c00                	0x8c00
     aea:	0008                	0x8
     aec:	0100                	addi	s0,sp,128
     aee:	5f00                	lw	s0,56(a4)
     af0:	088c                	addi	a1,sp,80
     af2:	0000                	unimp
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     af4:	088e                	slli	a7,a7,0x3
     af6:	0000                	unimp
     af8:	7f7f0003          	lb	zero,2039(t5)
    for(i = (4*N); i < (5*N); ++i){
     afc:	8e9f 0008 9e00      	0x9e0000088e9f
     b02:	0008                	0x8
     b04:	0100                	addi	s0,sp,128
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b06:	5f00                	lw	s0,56(a4)
     b08:	089e                	slli	a7,a7,0x7
     b0a:	0000                	unimp
     b0c:	08a0                	addi	s0,sp,88
    for(i = (4*N); i < (5*N); ++i){
     b0e:	0000                	unimp
     b10:	7f7f0003          	lb	zero,2039(t5)
    for(i = (5*N); i < (6*N+1); ++i){
     b14:	a09f 0008 a200      	0xa2000008a09f
        random_keys[i] = polyR[i-(5*N)];
     b1a:	0008                	0x8
     b1c:	0100                	addi	s0,sp,128
     b1e:	5f00                	lw	s0,56(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     b20:	08a2                	slli	a7,a7,0x8
     b22:	0000                	unimp
     b24:	08b4                	addi	a3,sp,88
     b26:	0000                	unimp
     b28:	0001                	nop
     b2a:	b45e                	fsd	fs7,40(sp)
}
     b2c:	0008                	0x8
     b2e:	b800                	fsd	fs0,48(s0)
     b30:	0008                	0x8
     b32:	0300                	addi	s0,sp,384
     b34:	7e00                	flw	fs0,56(a2)
     b36:	9f7f                	0x9f7f
     b38:	08b8                	addi	a4,sp,88
     b3a:	0000                	unimp
     b3c:	08bc                	addi	a5,sp,88
     b3e:	0000                	unimp
     b40:	0001                	nop
     b42:	bc5e                	fsd	fs7,56(sp)
     b44:	0008                	0x8
     b46:	c800                	sw	s0,16(s0)
     b48:	0008                	0x8
     b4a:	0100                	addi	s0,sp,128
     b4c:	5d00                	lw	s0,56(a0)
     b4e:	08c8                	addi	a0,sp,84
     b50:	0000                	unimp
     b52:	08f4                	addi	a3,sp,92
     b54:	0000                	unimp
     b56:	7f7d0003          	lb	zero,2039(s10)
     b5a:	f49f 0008 f800      	0xf8000008f49f
     b60:	0008                	0x8
     b62:	0100                	addi	s0,sp,128
     b64:	5d00                	lw	s0,56(a0)
     b66:	090c                	addi	a1,sp,144
     b68:	0000                	unimp
     b6a:	0910                	addi	a2,sp,144
        polyR[i] = 0;
     b6c:	0000                	unimp
     b6e:	0001                	nop
     b70:	105e                	c.slli	zero,0x37
     b72:	0009                	c.nop	2
     b74:	1e00                	addi	s0,sp,816
    for(i = 1; i < N; ++i){
     b76:	0009                	c.nop	2
     b78:	0300                	addi	s0,sp,384
        f[i] = 0;
     b7a:	7e00                	flw	fs0,56(a2)
     b7c:	9f7f                	0x9f7f
     b7e:	091e                	slli	s2,s2,0x7
     b80:	0000                	unimp
     b82:	0920                	addi	s0,sp,152
     b84:	0000                	unimp
     b86:	0001                	nop
        g[i] = 0;
     b88:	005e                	c.slli	zero,0x17
     b8a:	0000                	unimp
     b8c:	0000                	unimp
     b8e:	0000                	unimp
     b90:	e200                	fsw	fs0,0(a2)
    for (i = N; i < 55; ++i ){
     b92:	1c000007          	0x1c000007
        random_keys[i] = f[i];
     b96:	0008                	0x8
     b98:	0100                	addi	s0,sp,128
     b9a:	5f00                	lw	s0,56(a4)
     b9c:	08f8                	addi	a4,sp,92
     b9e:	0000                	unimp
     ba0:	0920                	addi	s0,sp,152
     ba2:	0000                	unimp
     ba4:	0001                	nop
    for(i = 0; i < N; ++i){
     ba6:	005f 0000 0000      	0x5f
        random_keys[i] = g[i-N];
     bac:	0000                	unimp
     bae:	2c00                	fld	fs0,24(s0)
     bb0:	00000007          	0x7
     bb4:	0008                	0x8
    for(i = N; i < (2*N); ++i){
     bb6:	0200                	addi	s0,sp,256
     bb8:	8300                	0x8300
     bba:	1c00                	addi	s0,sp,560
        random_keys[i] = fp[i-(2*N)];
     bbc:	0008                	0x8
     bbe:	2000                	fld	fs0,0(s0)
     bc0:	0009                	c.nop	2
     bc2:	0200                	addi	s0,sp,256
     bc4:	8300                	0x8300
	...
        random_keys[i] = fq[i-(3*N)];
     bce:	2c00                	fld	fs0,24(s0)
     bd0:	04000007          	0x4000007
     bd4:	0008                	0x8
     bd6:	0200                	addi	s0,sp,256
     bd8:	8500                	0x8500
    for(i = (3*N); i < (4*N); ++i){
     bda:	1c00                	addi	s0,sp,560
        random_keys[i] = fq[i-(3*N)];
     bdc:	0008                	0x8
    for(i = (3*N); i < (4*N); ++i){
     bde:	2000                	fld	fs0,0(s0)
        fg[i] = fg[i]*p;
     be0:	0009                	c.nop	2
    for(i = 0; i < (2*N-1); ++i){
     be2:	0200                	addi	s0,sp,256
     be4:	8500                	0x8500
	...
     bee:	2c00                	fld	fs0,24(s0)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bf0:	0a000007          	0xa000007
     bf4:	0008                	0x8
     bf6:	0200                	addi	s0,sp,256
     bf8:	8800                	0x8800
     bfa:	1c00                	addi	s0,sp,560
    for(i = (4*N); i < (5*N); ++i){
     bfc:	0008                	0x8
     bfe:	2000                	fld	fs0,0(s0)
        random_keys[i] = polyR[i-(5*N)];
     c00:	0009                	c.nop	2
     c02:	0200                	addi	s0,sp,256
     c04:	8800                	0x8800
	...
    for(i = (5*N); i < (6*N+1); ++i){
     c0e:	2c00                	fld	fs0,24(s0)
        random_keys[i] = polyR[i-(5*N)];
     c10:	06000007          	0x6000007
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c14:	0008                	0x8
     c16:	0200                	addi	s0,sp,256
     c18:	8600                	0x8600
     c1a:	0600                	addi	s0,sp,768
     c1c:	0008                	0x8
     c1e:	0a00                	addi	s0,sp,272
     c20:	0008                	0x8
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c22:	0c00                	addi	s0,sp,528
     c24:	8800                	0x8800
     c26:	8b00                	0x8b00
     c28:	3200                	fld	fs0,32(a2)
     c2a:	2324                	fld	fs1,64(a4)
     c2c:	1af0090f          	0x1af0090f
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c30:	1c1c                	addi	a5,sp,560
     c32:	0008                	0x8
     c34:	2000                	fld	fs0,0(s0)
     c36:	0009                	c.nop	2
     c38:	0200                	addi	s0,sp,256
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c3a:	8600                	0x8600
	...
    temp = polymult(public_key,N,random_val,48,q,0);
     c44:	2c00                	fld	fs0,24(s0)
     c46:	0c000007          	0xc000007
     c4a:	0008                	0x8
     c4c:	0200                	addi	s0,sp,256
     c4e:	8900                	0x8900
    for(i = 0; i < 48; ++i){
     c50:	1c00                	addi	s0,sp,560
     c52:	0008                	0x8
        temp[i] = temp[i] + message[i];
     c54:	2000                	fld	fs0,0(s0)
     c56:	0009                	c.nop	2
     c58:	0200                	addi	s0,sp,256
     c5a:	8900                	0x8900
	...
     c64:	2c00                	fld	fs0,24(s0)
    for(i = 0; i < 48; ++i){
     c66:	08000007          	0x8000007
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c6a:	0008                	0x8
     c6c:	0200                	addi	s0,sp,256
     c6e:	8700                	0x8700
     c70:	0800                	addi	s0,sp,16
     c72:	0008                	0x8
     c74:	0c00                	addi	s0,sp,528
     c76:	0008                	0x8
     c78:	0c00                	addi	s0,sp,528
     c7a:	8900                	0x8900
    for(i = (2*N); i < (3*N); ++i){
     c7c:	8b00                	0x8b00
     c7e:	3200                	fld	fs0,32(a2)
     c80:	2324                	fld	fs1,64(a4)
     c82:	1af0090f          	0x1af0090f
     c86:	1c1c                	addi	a5,sp,560
}
     c88:	0008                	0x8
     c8a:	2000                	fld	fs0,0(s0)
     c8c:	0009                	c.nop	2
     c8e:	0200                	addi	s0,sp,256
     c90:	8700                	0x8700
	...
        CT[i-(2*N)] = CT[i];
     c9a:	2e00                	fld	fs0,24(a2)
     c9c:	f6000007          	0xf6000007
    for(i = (2*N); i < (3*N); ++i){
     ca0:	02000007          	0x2000007
        CT[i-(2*N)] = CT[i];
     ca4:	7200                	flw	fs0,32(a2)
     ca6:	f600                	fsw	fs0,40(a2)
    for(i = (2*N); i < (3*N); ++i){
     ca8:	02000007          	0x2000007
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cac:	0008                	0x8
     cae:	0200                	addi	s0,sp,256
     cb0:	8400                	0x8400
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb2:	0200                	addi	s0,sp,256
     cb4:	0008                	0x8
     cb6:	0800                	addi	s0,sp,16
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb8:	0008                	0x8
     cba:	0c00                	addi	s0,sp,528
     cbc:	8700                	0x8700
     cbe:	8b00                	0x8b00
     cc0:	3200                	fld	fs0,32(a2)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc2:	2324                	fld	fs1,64(a4)
     cc4:	1af0090f          	0x1af0090f
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc8:	081c                	addi	a5,sp,16
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cca:	0008                	0x8
     ccc:	0c00                	addi	s0,sp,528
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cce:	0008                	0x8
     cd0:	0e00                	addi	s0,sp,784
     cd2:	8900                	0x8900
     cd4:	8b00                	0x8b00
     cd6:	3200                	fld	fs0,32(a2)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd8:	2324                	fld	fs1,64(a4)
     cda:	1af0090f          	0x1af0090f
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cde:	2431                	jal	eea <memset+0x24>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ce0:	1c1c                	addi	a5,sp,560
     ce2:	0008                	0x8
     ce4:	2000                	fld	fs0,0(s0)
     ce6:	0009                	c.nop	2
     ce8:	0200                	addi	s0,sp,256
     cea:	7200                	flw	fs0,32(a2)
	...
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf4:	7000                	flw	fs0,32(s0)
     cf6:	8a000007          	0x8a000007
     cfa:	01000007          	0x1000007
        if(a2[i] <= q/2)
     cfe:	5a00                	lw	s0,48(a2)
     d00:	0852                	slli	a6,a6,0x14
    for (i = 0; i < N; ++i){
     d02:	0000                	unimp
     d04:	087e                	slli	a6,a6,0x1f
     d06:	0000                	unimp
    c = polymult2(secret_key_fp,N,a2,N,0);
     d08:	0001                	nop
     d0a:	005a                	c.slli	zero,0x16
     d0c:	0000                	unimp
     d0e:	0000                	unimp
     d10:	0000                	unimp
     d12:	9800                	0x9800
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d14:	a4000007          	0xa4000007
     d18:	01000007          	0x1000007
     d1c:	5a00                	lw	s0,48(a2)
     d1e:	087e                	slli	a6,a6,0x1f
    for(i = (2*N); i < ((2*N)+N); ++i){
     d20:	0000                	unimp
     d22:	0890                	addi	a2,sp,80
     d24:	0000                	unimp
}
     d26:	0001                	nop
     d28:	005a                	c.slli	zero,0x16
     d2a:	0000                	unimp
     d2c:	0000                	unimp
     d2e:	0000                	unimp
     d30:	b400                	fsd	fs0,40(s0)
     d32:	c0000007          	0xc0000007
     d36:	01000007          	0x1000007
     d3a:	5a00                	lw	s0,48(a2)
        a2[i-(2*N)] = a2[i];
     d3c:	0890                	addi	a2,sp,80
     d3e:	0000                	unimp
     d40:	08a2                	slli	a7,a7,0x8
     d42:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d44:	0001                	nop
     d46:	005a                	c.slli	zero,0x16
        a2[i-(2*N)] = a2[i];
     d48:	0000                	unimp
     d4a:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4c:	0000                	unimp
        if(a2[i] <= q/2)
     d4e:	2e00                	fld	fs0,24(a2)
     d50:	54000007          	0x54000007
            a2[i] = (-1)*(q-a2[i]);
     d54:	02000007          	0x2000007
     d58:	3100                	fld	fs0,32(a0)
    for (i = 0; i < N; ++i){
     d5a:	549f 0007 d800      	0xd8000007549f
        c2[i-(2*N)] = c2[i];
     d60:	02000007          	0x2000007
     d64:	3000                	fld	fs0,32(s0)
     d66:	d89f 0007 ee00      	0xee000007d89f
     d6c:	01000007          	0x1000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     d70:	5e00                	lw	s0,56(a2)
  jal x0, default_exc_handler
     d72:	081c                	addi	a5,sp,16
     d74:	0000                	unimp
  mv  x1, x0
     d76:	0852                	slli	a6,a6,0x14
     d78:	0000                	unimp
  mv  x2, x1
     d7a:	0002                	c.slli64	zero
  mv  x3, x1
     d7c:	9f31                	0x9f31
  mv  x4, x1
     d7e:	0852                	slli	a6,a6,0x14
  mv  x5, x1
     d80:	0000                	unimp
  mv  x6, x1
     d82:	08bc                	addi	a5,sp,88
  mv  x7, x1
     d84:	0000                	unimp
  mv  x8, x1
     d86:	0002                	c.slli64	zero
  mv  x9, x1
     d88:	9f30                	0x9f30
  mv x10, x1
     d8a:	08bc                	addi	a5,sp,88
  mv x11, x1
     d8c:	0000                	unimp
  mv x12, x1
     d8e:	08e0                	addi	s0,sp,92
  mv x13, x1
     d90:	0000                	unimp
  mv x14, x1
     d92:	0001                	nop
  mv x15, x1
     d94:	f45e                	fsw	fs7,40(sp)
  mv x16, x1
     d96:	0008                	0x8
  mv x17, x1
     d98:	0c00                	addi	s0,sp,528
  mv x18, x1
     d9a:	0009                	c.nop	2
  mv x19, x1
     d9c:	0100                	addi	s0,sp,128
  mv x20, x1
     d9e:	5e00                	lw	s0,56(a2)
	...
  mv x25, x1
     da8:	072c                	addi	a1,sp,904
  mv x26, x1
     daa:	0000                	unimp
  mv x27, x1
     dac:	07fe                	slli	a5,a5,0x1f
  mv x28, x1
     dae:	0000                	unimp
  mv x29, x1
     db0:	0001                	nop
  mv x30, x1
     db2:	fe62                	fsw	fs8,60(sp)
  mv x31, x1
     db4:	10000007          	0x10000007
  la   x2, _stack_start
     db8:	0008                	0x8
     dba:	0300                	addi	s0,sp,384
     dbc:	8b00                	0x8b00
  la x26, _bss_start
     dbe:	9f7f                	0x9f7f
     dc0:	0810                	addi	a2,sp,16
     dc2:	0000                	unimp
     dc4:	081c                	addi	a5,sp,16
  la x27, _bss_end
     dc6:	0000                	unimp
     dc8:	0006                	c.slli	zero,0x1
     dca:	315c01f3          	0x315c01f3
  bge x26, x27, zero_loop_end
     dce:	9f1c                	0x9f1c
     dd0:	081c                	addi	a5,sp,16
  sw x0, 0(x26)
     dd2:	0000                	unimp
     dd4:	0920                	addi	s0,sp,152
  addi x26, x26, 4
     dd6:	0000                	unimp
  ble x26, x27, zero_loop
     dd8:	0001                	nop
     dda:	0062                	c.slli	zero,0x18
  addi x10, x0, 0
     ddc:	0000                	unimp
     dde:	0000                	unimp
  addi x11, x0, 0
     de0:	0000                	unimp
     de2:	2c00                	fld	fs0,24(s0)
  jal x1, main
     de4:	fe000007          	0xfe000007
     de8:	01000007          	0x1000007
     dec:	6200                	flw	fs0,0(a2)
     dee:	07fe                	slli	a5,a5,0x1f
     df0:	0000                	unimp
     df2:	0810                	addi	a2,sp,16
     df4:	0000                	unimp
     df6:	7f8b0003          	lb	zero,2040(s6)
     dfa:	109f 0008 1c00      	0x1c000008109f
     e00:	0008                	0x8
     e02:	0600                	addi	s0,sp,768
     e04:	f300                	fsw	fs0,32(a4)
     e06:	5c01                	li	s8,-32
     e08:	1c31                	addi	s8,s8,-20
     e0a:	1c9f 0008 2000      	0x200000081c9f
     e10:	0009                	c.nop	2
     e12:	0100                	addi	s0,sp,128
     e14:	6200                	flw	fs0,0(a2)
	...
     e1e:	072c                	addi	a1,sp,904
     e20:	0000                	unimp
     e22:	07fe                	slli	a5,a5,0x1f
     e24:	0000                	unimp
     e26:	0001                	nop
     e28:	fe62                	fsw	fs8,60(sp)
     e2a:	10000007          	0x10000007
     e2e:	0008                	0x8
     e30:	0300                	addi	s0,sp,384
     e32:	8b00                	0x8b00
     e34:	9f7f                	0x9f7f
     e36:	0810                	addi	a2,sp,16
     e38:	0000                	unimp
     e3a:	081c                	addi	a5,sp,16
     e3c:	0000                	unimp
     e3e:	0006                	c.slli	zero,0x1
     e40:	315c01f3          	0x315c01f3
     e44:	9f1c                	0x9f1c
     e46:	081c                	addi	a5,sp,16
     e48:	0000                	unimp
     e4a:	0920                	addi	s0,sp,152
     e4c:	0000                	unimp
     e4e:	0001                	nop
     e50:	0062                	c.slli	zero,0x18
     e52:	0000                	unimp
     e54:	0000                	unimp
     e56:	0000                	unimp
     e58:	2c00                	fld	fs0,24(s0)
     e5a:	fe000007          	0xfe000007
     e5e:	01000007          	0x1000007
     e62:	6200                	flw	fs0,0(a2)
     e64:	07fe                	slli	a5,a5,0x1f
     e66:	0000                	unimp
     e68:	0810                	addi	a2,sp,16
     e6a:	0000                	unimp
     e6c:	7f8b0003          	lb	zero,2040(s6)
     e70:	109f 0008 1c00      	0x1c000008109f
     e76:	0008                	0x8
     e78:	0600                	addi	s0,sp,768
     e7a:	f300                	fsw	fs0,32(a4)
     e7c:	5c01                	li	s8,-32
     e7e:	1c31                	addi	s8,s8,-20
     e80:	1c9f 0008 2000      	0x200000081c9f
     e86:	0009                	c.nop	2
     e88:	0100                	addi	s0,sp,128
     e8a:	6200                	flw	fs0,0(a2)
	...
     e94:	072c                	addi	a1,sp,904
     e96:	0000                	unimp
     e98:	07fe                	slli	a5,a5,0x1f
     e9a:	0000                	unimp
     e9c:	0001                	nop
     e9e:	fe62                	fsw	fs8,60(sp)
     ea0:	10000007          	0x10000007
     ea4:	0008                	0x8
     ea6:	0300                	addi	s0,sp,384
     ea8:	8b00                	0x8b00
     eaa:	9f7f                	0x9f7f
     eac:	0810                	addi	a2,sp,16
     eae:	0000                	unimp
     eb0:	081c                	addi	a5,sp,16
     eb2:	0000                	unimp
     eb4:	0006                	c.slli	zero,0x1
     eb6:	315c01f3          	0x315c01f3
     eba:	9f1c                	0x9f1c
     ebc:	081c                	addi	a5,sp,16
     ebe:	0000                	unimp
     ec0:	0920                	addi	s0,sp,152
     ec2:	0000                	unimp
     ec4:	0001                	nop
     ec6:	0062                	c.slli	zero,0x18
     ec8:	0000                	unimp
     eca:	0000                	unimp
     ecc:	0000                	unimp
     ece:	2c00                	fld	fs0,24(s0)
     ed0:	fe000007          	0xfe000007
     ed4:	01000007          	0x1000007
     ed8:	6200                	flw	fs0,0(a2)
     eda:	07fe                	slli	a5,a5,0x1f
     edc:	0000                	unimp
     ede:	0810                	addi	a2,sp,16
     ee0:	0000                	unimp
     ee2:	7f8b0003          	lb	zero,2040(s6)
     ee6:	109f 0008 1c00      	0x1c000008109f
     eec:	0008                	0x8
     eee:	0600                	addi	s0,sp,768
     ef0:	f300                	fsw	fs0,32(a4)
     ef2:	5c01                	li	s8,-32
     ef4:	1c31                	addi	s8,s8,-20
     ef6:	1c9f 0008 2000      	0x200000081c9f
     efc:	0009                	c.nop	2
     efe:	0100                	addi	s0,sp,128
     f00:	6200                	flw	fs0,0(a2)
	...
     f0a:	072c                	addi	a1,sp,904
     f0c:	0000                	unimp
     f0e:	07fe                	slli	a5,a5,0x1f
     f10:	0000                	unimp
     f12:	0001                	nop
     f14:	fe62                	fsw	fs8,60(sp)
     f16:	10000007          	0x10000007
     f1a:	0008                	0x8
     f1c:	0300                	addi	s0,sp,384
     f1e:	8b00                	0x8b00
     f20:	9f7f                	0x9f7f
     f22:	0810                	addi	a2,sp,16
     f24:	0000                	unimp
     f26:	081c                	addi	a5,sp,16
     f28:	0000                	unimp
     f2a:	0006                	c.slli	zero,0x1
     f2c:	315c01f3          	0x315c01f3
     f30:	9f1c                	0x9f1c
     f32:	081c                	addi	a5,sp,16
     f34:	0000                	unimp
     f36:	0920                	addi	s0,sp,152
     f38:	0000                	unimp
     f3a:	0001                	nop
     f3c:	0062                	c.slli	zero,0x18
     f3e:	0000                	unimp
     f40:	0000                	unimp
     f42:	0000                	unimp
     f44:	fc00                	fsw	fs0,56(s0)
     f46:	68000003          	lb	zero,1664(zero) # 680 <polydiv+0x284>
     f4a:	0004                	0x4
     f4c:	0100                	addi	s0,sp,128
     f4e:	5a00                	lw	s0,48(a2)
     f50:	0468                	addi	a0,sp,524
     f52:	0000                	unimp
     f54:	04a8                	addi	a0,sp,584
     f56:	0000                	unimp
     f58:	0004                	0x4
     f5a:	9f5a01f3          	0x9f5a01f3
     f5e:	04a8                	addi	a0,sp,584
     f60:	0000                	unimp
     f62:	04ba                	slli	s1,s1,0xe
     f64:	0000                	unimp
     f66:	0001                	nop
     f68:	ba5a                	fsd	fs6,304(sp)
     f6a:	0004                	0x4
     f6c:	c200                	sw	s0,0(a2)
int main(){
     f6e:	0004                	0x4
     f70:	0400                	addi	s0,sp,512
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f72:	f300                	fsw	fs0,32(a4)
     f74:	5a01                	li	s4,-32
     f76:	c29f 0004 c800      	0xc8000004c29f
     f7c:	0004                	0x4
     f7e:	0100                	addi	s0,sp,128
int main(){
     f80:	5a00                	lw	s0,48(a2)
     f82:	04c8                	addi	a0,sp,580
     f84:	0000                	unimp
     f86:	06d6                	slli	a3,a3,0x15
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f88:	0000                	unimp
    keys = generate_keys(N, p, q);
     f8a:	0004                	0x4
     f8c:	9f5a01f3          	0x9f5a01f3
	...
    for(i = 0; i < N; ++i){
     f98:	03fc                	addi	a5,sp,460
     f9a:	0000                	unimp
        secret_key_f[i] = keys[i];
     f9c:	0466                	slli	s0,s0,0x19
     f9e:	0000                	unimp
     fa0:	0001                	nop
     fa2:	0004665b          	0x4665b
     fa6:	a800                	fsd	fs0,16(s0)
    for(i = 0; i < N; ++i){
     fa8:	0004                	0x4
     faa:	0100                	addi	s0,sp,128
     fac:	6200                	flw	fs0,0(a2)
    for(i = N; i < (2*N); ++i){
     fae:	04a8                	addi	a0,sp,584
     fb0:	0000                	unimp
     fb2:	04ba                	slli	s1,s1,0xe
     fb4:	0000                	unimp
     fb6:	0001                	nop
     fb8:	0004ba5b          	0x4ba5b
        secret_key_fp[i-(2*N)] = keys[i];
     fbc:	c200                	sw	s0,0(a2)
     fbe:	0004                	0x4
     fc0:	0100                	addi	s0,sp,128
     fc2:	6200                	flw	fs0,0(a2)
    for(i = (2*N); i < (3*N); ++i){
     fc4:	04c2                	slli	s1,s1,0x10
     fc6:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     fc8:	04c6                	slli	s1,s1,0x11
     fca:	0000                	unimp
     fcc:	0001                	nop
     fce:	0004c65b          	0x4c65b
     fd2:	8400                	0x8400
        public_key[i-(4*N)] = keys[i];
     fd4:	0006                	c.slli	zero,0x1
     fd6:	0100                	addi	s0,sp,128
     fd8:	6200                	flw	fs0,0(a2)
     fda:	0684                	addi	s1,sp,832
     fdc:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     fde:	06a6                	slli	a3,a3,0x9
     fe0:	0000                	unimp
     fe2:	018b0003          	lb	zero,24(s6)
     fe6:	a69f 0006 b200      	0xb2000006a69f
        ring_poly[i-(5*N)] = keys[i];
     fec:	0006                	c.slli	zero,0x1
     fee:	0400                	addi	s0,sp,512
     ff0:	f300                	fsw	fs0,32(a4)
     ff2:	5b01                	li	s6,-32
    for(i = (5*N); i < (6*N+1); ++i){
     ff4:	b29f 0006 c400      	0xc4000006b29f
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ffa:	0006                	c.slli	zero,0x1
     ffc:	0100                	addi	s0,sp,128
     ffe:	6200                	flw	fs0,0(a2)
    1000:	06c4                	addi	s1,sp,836
    1002:	0000                	unimp
    1004:	06d6                	slli	a3,a3,0x15
    1006:	0000                	unimp
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1008:	018b0003          	lb	zero,24(s6)
    100c:	009f 0000 0000      	0x9f
    1012:	0000                	unimp
    1014:	fc00                	fsw	fs0,56(s0)
    1016:	64000003          	lb	zero,1600(zero) # 640 <polydiv+0x244>
    101a:	0004                	0x4
            resultkon[0] = 0xDEDEDEDE;
    101c:	0100                	addi	s0,sp,128
    101e:	5c00                	lw	s0,56(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1020:	0464                	addi	s1,sp,524
    1022:	0000                	unimp
    1024:	049e                	slli	s1,s1,0x7
    1026:	0000                	unimp
    1028:	0001                	nop
            resultkon[0] = 0xDEDEDEDE;
    102a:	9e68                	0x9e68
    102c:	0004                	0x4
	    *var = resultkon[0];
    102e:	a800                	fsd	fs0,16(s0)
    for(i = 0; i < 32; ++i){
    1030:	0004                	0x4
    1032:	0400                	addi	s0,sp,512
        if(!(message[i] == Dec_Message[i])){
    1034:	f300                	fsw	fs0,32(a4)
    1036:	5c01                	li	s8,-32
    1038:	a89f 0004 ba00      	0xba000004a89f
    103e:	0004                	0x4
    1040:	0100                	addi	s0,sp,128
    1042:	5c00                	lw	s0,56(s0)
            resultkon[0] = 0xBABABABA;
    1044:	04ba                	slli	s1,s1,0xe
    1046:	0000                	unimp
    1048:	04c2                	slli	s1,s1,0x10
    104a:	0000                	unimp
    104c:	0001                	nop
 	    *var = resultkon[0];
    104e:	c268                	sw	a0,68(a2)
    1050:	0004                	0x4
    1052:	c400                	sw	s0,8(s0)
    1054:	0004                	0x4
    1056:	0100                	addi	s0,sp,128
    1058:	5c00                	lw	s0,56(s0)
}
    105a:	04c4                	addi	s1,sp,580
    105c:	0000                	unimp
    105e:	04fa                	slli	s1,s1,0x1e
    1060:	0000                	unimp
    1062:	0001                	nop
    1064:	fa68                	fsw	fa0,116(a2)
    1066:	0004                	0x4
    1068:	d600                	sw	s0,40(a2)
            resultkon[0] = 0xDEDEDEDE;
    106a:	0006                	c.slli	zero,0x1
	    *var = resultkon[0];
    106c:	0400                	addi	s0,sp,512
    106e:	f300                	fsw	fs0,32(a4)
    1070:	5c01                	li	s8,-32
    1072:	009f 0000 0000      	0x9f
    for(i = 0; i < 32; ++i){
    1078:	0000                	unimp
    107a:	fc00                	fsw	fs0,56(s0)
    107c:	54000003          	lb	zero,1344(zero) # 540 <polydiv+0x144>
    1080:	0004                	0x4
    1082:	0100                	addi	s0,sp,128
    1084:	5d00                	lw	s0,56(a0)
    1086:	0454                	addi	a3,sp,516
    1088:	0000                	unimp
    108a:	069c                	addi	a5,sp,832
    108c:	0000                	unimp
    108e:	0001                	nop
    1090:	9c66                	add	s8,s8,s9
    1092:	0006                	c.slli	zero,0x1
    1094:	b200                	fsd	fs0,32(a2)
    1096:	0006                	c.slli	zero,0x1
    1098:	0400                	addi	s0,sp,512
    109a:	f300                	fsw	fs0,32(a4)
    109c:	5d01                	li	s10,-32
    109e:	b29f 0006 d600      	0xd6000006b29f
    10a4:	0006                	c.slli	zero,0x1
    10a6:	0100                	addi	s0,sp,128
    10a8:	6600                	flw	fs0,8(a2)
	...
    10b2:	03fc                	addi	a5,sp,460
    10b4:	0000                	unimp
    10b6:	0454                	addi	a3,sp,516
    10b8:	0000                	unimp
    10ba:	0001                	nop
    10bc:	545e                	lw	s0,244(sp)
    10be:	0004                	0x4
    10c0:	9200                	0x9200
    10c2:	0006                	c.slli	zero,0x1
    10c4:	0100                	addi	s0,sp,128
    10c6:	5900                	lw	s0,48(a0)
    10c8:	0692                	slli	a3,a3,0x4
    10ca:	0000                	unimp
    10cc:	06b2                	slli	a3,a3,0xc
    10ce:	0000                	unimp
    10d0:	0004                	0x4
    10d2:	9f5e01f3          	0x9f5e01f3
    10d6:	06b2                	slli	a3,a3,0xc
    10d8:	0000                	unimp
    10da:	06d6                	slli	a3,a3,0x15
    10dc:	0000                	unimp
    10de:	0001                	nop
    10e0:	0059                	c.nop	22
    10e2:	0000                	unimp
    10e4:	0000                	unimp
    10e6:	0000                	unimp
    10e8:	a000                	fsd	fs0,0(s0)
    10ea:	0004                	0x4
    10ec:	a800                	fsd	fs0,16(s0)
    10ee:	0004                	0x4
    10f0:	0100                	addi	s0,sp,128
    10f2:	6800                	flw	fs0,16(s0)
    10f4:	04fa                	slli	s1,s1,0x1e
    10f6:	0000                	unimp
    10f8:	06a0                	addi	s0,sp,840
    10fa:	0000                	unimp
    10fc:	0001                	nop
    10fe:	b268                	fsd	fa0,224(a2)
    1100:	0006                	c.slli	zero,0x1
    1102:	d600                	sw	s0,40(a2)
    1104:	0006                	c.slli	zero,0x1
    1106:	0100                	addi	s0,sp,128
    1108:	6800                	flw	fs0,16(s0)
	...
    1112:	051e                	slli	a0,a0,0x7
    1114:	0000                	unimp
    1116:	0526                	slli	a0,a0,0x9
    1118:	0000                	unimp
    111a:	0001                	nop
    111c:	665f 0006 6c00      	0x6c000006665f
    1122:	0006                	c.slli	zero,0x1
    1124:	0100                	addi	s0,sp,128
    1126:	5f00                	lw	s0,56(a4)
	...
    1130:	0452                	slli	s0,s0,0x14
    1132:	0000                	unimp
    1134:	0454                	addi	a3,sp,516
    1136:	0000                	unimp
    1138:	0002                	c.slli64	zero
    113a:	9f30                	0x9f30
    113c:	0454                	addi	a3,sp,516
    113e:	0000                	unimp
    1140:	045c                	addi	a5,sp,516
    1142:	0000                	unimp
    1144:	0001                	nop
    1146:	7c5f 0004 8700      	0x870000047c5f
    114c:	0004                	0x4
    114e:	0100                	addi	s0,sp,128
    1150:	5f00                	lw	s0,56(a4)
    1152:	0488                	addi	a0,sp,576
    1154:	0000                	unimp
    1156:	048a                	slli	s1,s1,0x2
    1158:	0000                	unimp
    115a:	0002                	c.slli64	zero
    115c:	9f30                	0x9f30
    115e:	048a                	slli	s1,s1,0x2
    1160:	0000                	unimp
    1162:	048e                	slli	s1,s1,0x3
    1164:	0000                	unimp
    1166:	0001                	nop
    1168:	8e5f 0004 a800      	0xa80000048e5f
    116e:	0004                	0x4
    1170:	0100                	addi	s0,sp,128
    1172:	6700                	flw	fs0,8(a4)
    1174:	04a8                	addi	a0,sp,584
    1176:	0000                	unimp
    1178:	04b6                	slli	s1,s1,0xd
    117a:	0000                	unimp
    117c:	0001                	nop
    117e:	b65f 0004 b800      	0xb8000004b65f
    1184:	0004                	0x4
    1186:	0300                	addi	s0,sp,384
    1188:	7f00                	flw	fs0,56(a4)
    118a:	9f7f                	0x9f7f
    118c:	04b8                	addi	a4,sp,584
    118e:	0000                	unimp
    1190:	04ba                	slli	s1,s1,0xe
    1192:	0000                	unimp
    1194:	0001                	nop
    1196:	cc5f 0004 da00      	0xda000004cc5f
    119c:	0004                	0x4
    119e:	0100                	addi	s0,sp,128
    11a0:	5f00                	lw	s0,56(a4)
    11a2:	04da                	slli	s1,s1,0x16
    11a4:	0000                	unimp
    11a6:	04dc                	addi	a5,sp,580
    11a8:	0000                	unimp
    11aa:	7f7f0003          	lb	zero,2039(t5)
    11ae:	dc9f 0004 f400      	0xf4000004dc9f
    11b4:	0004                	0x4
    11b6:	0100                	addi	s0,sp,128
    11b8:	5f00                	lw	s0,56(a4)
    11ba:	04f4                	addi	a3,sp,588
    11bc:	0000                	unimp
    11be:	0508                	addi	a0,sp,640
    11c0:	0000                	unimp
    11c2:	0001                	nop
    11c4:	00050867          	jalr	a6,a0
    11c8:	1e00                	addi	s0,sp,816
    11ca:	0005                	c.nop	1
    11cc:	0100                	addi	s0,sp,128
    11ce:	5f00                	lw	s0,56(a4)
    11d0:	0580                	addi	s0,sp,704
    11d2:	0000                	unimp
    11d4:	0591                	addi	a1,a1,4
    11d6:	0000                	unimp
    11d8:	0001                	nop
    11da:	a65f 0005 b700      	0xb7000005a65f
    11e0:	0005                	c.nop	1
    11e2:	0100                	addi	s0,sp,128
    11e4:	5f00                	lw	s0,56(a4)
    11e6:	05c8                	addi	a0,sp,708
    11e8:	0000                	unimp
    11ea:	05ca                	slli	a1,a1,0x12
    11ec:	0000                	unimp
    11ee:	0001                	nop
    11f0:	0005ca6b          	0x5ca6b
    11f4:	da00                	sw	s0,48(a2)
    11f6:	0005                	c.nop	1
    11f8:	0100                	addi	s0,sp,128
    11fa:	5f00                	lw	s0,56(a4)
    11fc:	0600                	addi	s0,sp,768
    11fe:	0000                	unimp
    1200:	060c                	addi	a1,sp,768
    1202:	0000                	unimp
    1204:	0001                	nop
    1206:	0c5f 0006 1400      	0x140000060c5f
    120c:	0006                	c.slli	zero,0x1
    120e:	0300                	addi	s0,sp,384
    1210:	7f00                	flw	fs0,56(a4)
    1212:	9f7f                	0x9f7f
    1214:	0614                	addi	a3,sp,768
    1216:	0000                	unimp
    1218:	0616                	slli	a2,a2,0x5
    121a:	0000                	unimp
    121c:	0001                	nop
    121e:	1e5f 0006 2500      	0x250000061e5f
    1224:	0006                	c.slli	zero,0x1
    1226:	0100                	addi	s0,sp,128
    1228:	5f00                	lw	s0,56(a4)
    122a:	0628                	addi	a0,sp,776
    122c:	0000                	unimp
    122e:	0634                	addi	a3,sp,776
    1230:	0000                	unimp
    1232:	0001                	nop
    1234:	345f 0006 3c00      	0x3c000006345f
    123a:	0006                	c.slli	zero,0x1
    123c:	0300                	addi	s0,sp,384
    123e:	7f00                	flw	fs0,56(a4)
    1240:	9f7f                	0x9f7f
    1242:	063c                	addi	a5,sp,776
    1244:	0000                	unimp
    1246:	063e                	slli	a2,a2,0xf
    1248:	0000                	unimp
    124a:	0001                	nop
    124c:	465f 0006 4d00      	0x4d000006465f
    1252:	0006                	c.slli	zero,0x1
    1254:	0100                	addi	s0,sp,128
    1256:	5f00                	lw	s0,56(a4)
    1258:	0650                	addi	a2,sp,772
    125a:	0000                	unimp
    125c:	0656                	slli	a2,a2,0x15
    125e:	0000                	unimp
    1260:	0001                	nop
    1262:	565f 0006 6600      	0x66000006565f
    1268:	0006                	c.slli	zero,0x1
    126a:	0100                	addi	s0,sp,128
    126c:	5d00                	lw	s0,56(a0)
    126e:	0674                	addi	a3,sp,780
    1270:	0000                	unimp
    1272:	0684                	addi	s1,sp,832
    1274:	0000                	unimp
    1276:	0001                	nop
    1278:	845f 0006 9400      	0x94000006845f
    127e:	0006                	c.slli	zero,0x1
    1280:	0100                	addi	s0,sp,128
    1282:	6200                	flw	fs0,0(a2)
    1284:	06b2                	slli	a3,a3,0xc
    1286:	0000                	unimp
    1288:	06c0                	addi	s0,sp,836
    128a:	0000                	unimp
    128c:	0001                	nop
    128e:	c05f 0006 c200      	0xc2000006c05f
    1294:	0006                	c.slli	zero,0x1
    1296:	0300                	addi	s0,sp,384
    1298:	7f00                	flw	fs0,56(a4)
    129a:	9f7f                	0x9f7f
    129c:	06c2                	slli	a3,a3,0x10
    129e:	0000                	unimp
    12a0:	06c4                	addi	s1,sp,836
    12a2:	0000                	unimp
    12a4:	0001                	nop
    12a6:	c45f 0006 d600      	0xd6000006c45f
    12ac:	0006                	c.slli	zero,0x1
    12ae:	0100                	addi	s0,sp,128
    12b0:	6200                	flw	fs0,0(a2)
	...
    12ba:	051e                	slli	a0,a0,0x7
    12bc:	0000                	unimp
    12be:	0522                	slli	a0,a0,0x8
    12c0:	0000                	unimp
    12c2:	0001                	nop
    12c4:	665e                	flw	fa2,212(sp)
    12c6:	0006                	c.slli	zero,0x1
    12c8:	7400                	flw	fs0,40(s0)
    12ca:	0006                	c.slli	zero,0x1
    12cc:	0100                	addi	s0,sp,128
    12ce:	5e00                	lw	s0,56(a2)
	...
    12d8:	0688                	addi	a0,sp,832
    12da:	0000                	unimp
    12dc:	06b2                	slli	a3,a3,0xc
    12de:	0000                	unimp
    12e0:	0006                	c.slli	zero,0x1
    12e2:	0016c403          	lbu	s0,1(a3)
    12e6:	9f00                	0x9f00
	...
    12f0:	044c                	addi	a1,sp,516
    12f2:	0000                	unimp
    12f4:	0698                	addi	a4,sp,832
    12f6:	0000                	unimp
    12f8:	0002                	c.slli64	zero
    12fa:	0084                	addi	s1,sp,64
    12fc:	06b2                	slli	a3,a3,0xc
    12fe:	0000                	unimp
    1300:	06d6                	slli	a3,a3,0x15
    1302:	0000                	unimp
    1304:	0002                	c.slli64	zero
    1306:	0084                	addi	s1,sp,64
	...
    1310:	044c                	addi	a1,sp,516
    1312:	0000                	unimp
    1314:	069a                	slli	a3,a3,0x6
    1316:	0000                	unimp
    1318:	0002                	c.slli64	zero
    131a:	0085                	addi	ra,ra,1
    131c:	06b2                	slli	a3,a3,0xc
    131e:	0000                	unimp
    1320:	06d6                	slli	a3,a3,0x15
    1322:	0000                	unimp
    1324:	0002                	c.slli64	zero
    1326:	0085                	addi	ra,ra,1
	...
    1330:	0558                	addi	a4,sp,644
    1332:	0000                	unimp
    1334:	00000567          	jalr	a0,zero # 0 <__DYNAMIC>
    1338:	0001                	nop
    133a:	675a                	flw	fa4,148(sp)
    133c:	0005                	c.nop	1
    133e:	da00                	sw	s0,48(a2)
    1340:	0005                	c.nop	1
    1342:	0300                	addi	s0,sp,384
    1344:	7800                	flw	fs0,48(s0)
    1346:	7fbc                	flw	fa5,120(a5)
    1348:	05ec                	addi	a1,sp,716
    134a:	0000                	unimp
    134c:	0666                	slli	a2,a2,0x19
    134e:	0000                	unimp
    1350:	bc780003          	lb	zero,-1081(a6) # 1dbc7 <_stack_start+0xdbc7>
    1354:	007f                	0x7f
    1356:	0000                	unimp
    1358:	0000                	unimp
    135a:	0000                	unimp
    135c:	4c00                	lw	s0,24(s0)
    135e:	0004                	0x4
    1360:	8400                	0x8400
    1362:	0006                	c.slli	zero,0x1
    1364:	0200                	addi	s0,sp,256
    1366:	8300                	0x8300
    1368:	8400                	0x8400
    136a:	0006                	c.slli	zero,0x1
    136c:	9a00                	0x9a00
    136e:	0006                	c.slli	zero,0x1
    1370:	0c00                	addi	s0,sp,528
    1372:	8500                	0x8500
    1374:	8b00                	0x8b00
    1376:	3201                	jal	c76 <ntru_encyrpt+0x62>
    1378:	2324                	fld	fs1,64(a4)
    137a:	1af0090f          	0x1af0090f
    137e:	b21c                	fsd	fa5,32(a2)
    1380:	0006                	c.slli	zero,0x1
    1382:	c400                	sw	s0,8(s0)
    1384:	0006                	c.slli	zero,0x1
    1386:	0200                	addi	s0,sp,256
    1388:	8300                	0x8300
    138a:	c400                	sw	s0,8(s0)
    138c:	0006                	c.slli	zero,0x1
    138e:	d600                	sw	s0,40(a2)
    1390:	0006                	c.slli	zero,0x1
    1392:	0c00                	addi	s0,sp,528
    1394:	8500                	0x8500
    1396:	8b00                	0x8b00
    1398:	3201                	jal	c98 <ntru_encyrpt+0x84>
    139a:	2324                	fld	fs1,64(a4)
    139c:	1af0090f          	0x1af0090f
    13a0:	001c                	0x1c
    13a2:	0000                	unimp
    13a4:	0000                	unimp
    13a6:	0000                	unimp
    13a8:	5200                	lw	s0,32(a2)
    13aa:	0004                	0x4
    13ac:	8c00                	0x8c00
    13ae:	0006                	c.slli	zero,0x1
    13b0:	0200                	addi	s0,sp,256
    13b2:	7200                	flw	fs0,32(a2)
    13b4:	8c00                	0x8c00
    13b6:	0006                	c.slli	zero,0x1
    13b8:	a200                	fsd	fs0,0(a2)
    13ba:	0006                	c.slli	zero,0x1
    13bc:	0200                	addi	s0,sp,256
    13be:	8900                	0x8900
    13c0:	b200                	fsd	fs0,32(a2)
    13c2:	0006                	c.slli	zero,0x1
    13c4:	d600                	sw	s0,40(a2)
    13c6:	0006                	c.slli	zero,0x1
    13c8:	0200                	addi	s0,sp,256
    13ca:	7200                	flw	fs0,32(a2)
	...
    13d4:	4c00                	lw	s0,24(s0)
    13d6:	0004                	0x4
    13d8:	a600                	fsd	fs0,8(a2)
    13da:	0006                	c.slli	zero,0x1
    13dc:	0100                	addi	s0,sp,128
    13de:	6b00                	flw	fs0,16(a4)
    13e0:	06a6                	slli	a3,a3,0x9
    13e2:	0000                	unimp
    13e4:	06b2                	slli	a3,a3,0xc
    13e6:	0000                	unimp
    13e8:	0006                	c.slli	zero,0x1
    13ea:	315b01f3          	0x315b01f3
    13ee:	9f1c                	0x9f1c
    13f0:	06b2                	slli	a3,a3,0xc
    13f2:	0000                	unimp
    13f4:	06d6                	slli	a3,a3,0x15
    13f6:	0000                	unimp
    13f8:	0001                	nop
    13fa:	0000006b          	0x6b
    13fe:	0000                	unimp
    1400:	0000                	unimp
    1402:	4c00                	lw	s0,24(s0)
    1404:	0004                	0x4
    1406:	a600                	fsd	fs0,8(a2)
    1408:	0006                	c.slli	zero,0x1
    140a:	0100                	addi	s0,sp,128
    140c:	6b00                	flw	fs0,16(a4)
    140e:	06a6                	slli	a3,a3,0x9
    1410:	0000                	unimp
    1412:	06b2                	slli	a3,a3,0xc
    1414:	0000                	unimp
    1416:	0006                	c.slli	zero,0x1
    1418:	315b01f3          	0x315b01f3
    141c:	9f1c                	0x9f1c
    141e:	06b2                	slli	a3,a3,0xc
    1420:	0000                	unimp
    1422:	06d6                	slli	a3,a3,0x15
    1424:	0000                	unimp
    1426:	0001                	nop
    1428:	0000006b          	0x6b
    142c:	0000                	unimp
    142e:	0000                	unimp
    1430:	4c00                	lw	s0,24(s0)
    1432:	0004                	0x4
    1434:	a600                	fsd	fs0,8(a2)
    1436:	0006                	c.slli	zero,0x1
    1438:	0100                	addi	s0,sp,128
    143a:	6b00                	flw	fs0,16(a4)
    143c:	06a6                	slli	a3,a3,0x9
    143e:	0000                	unimp
    1440:	06b2                	slli	a3,a3,0xc
    1442:	0000                	unimp
    1444:	0006                	c.slli	zero,0x1
    1446:	315b01f3          	0x315b01f3
    144a:	9f1c                	0x9f1c
    144c:	06b2                	slli	a3,a3,0xc
    144e:	0000                	unimp
    1450:	06d6                	slli	a3,a3,0x15
    1452:	0000                	unimp
    1454:	0001                	nop
    1456:	0000006b          	0x6b
    145a:	0000                	unimp
    145c:	0000                	unimp
    145e:	5000                	lw	s0,32(s0)
    1460:	0004                	0x4
    1462:	8e00                	0x8e00
    1464:	0004                	0x4
    1466:	0100                	addi	s0,sp,128
    1468:	6700                	flw	fs0,8(a4)
    146a:	048e                	slli	s1,s1,0x3
    146c:	0000                	unimp
    146e:	04a8                	addi	a0,sp,584
    1470:	0000                	unimp
    1472:	7f860003          	lb	zero,2040(a2) # fffe07f8 <_stack_start+0xfffd07f8>
    1476:	a89f 0004 f400      	0xf4000004a89f
    147c:	0004                	0x4
    147e:	0100                	addi	s0,sp,128
    1480:	6700                	flw	fs0,8(a4)
    1482:	04f4                	addi	a3,sp,588
    1484:	0000                	unimp
    1486:	069c                	addi	a5,sp,832
    1488:	0000                	unimp
    148a:	7f860003          	lb	zero,2040(a2)
    148e:	9c9f 0006 b200      	0xb20000069c9f
    1494:	0006                	c.slli	zero,0x1
    1496:	0600                	addi	s0,sp,768
    1498:	f300                	fsw	fs0,32(a4)
    149a:	5d01                	li	s10,-32
    149c:	1c31                	addi	s8,s8,-20
    149e:	b29f 0006 d600      	0xd6000006b29f
    14a4:	0006                	c.slli	zero,0x1
    14a6:	0300                	addi	s0,sp,384
    14a8:	8600                	0x8600
    14aa:	9f7f                	0x9f7f
	...
    14b4:	028c                	addi	a1,sp,320
    14b6:	0000                	unimp
    14b8:	02fc                	addi	a5,sp,332
    14ba:	0000                	unimp
    14bc:	0001                	nop
    14be:	fc5a                	fsw	fs6,56(sp)
    14c0:	0002                	c.slli64	zero
    14c2:	1600                	addi	s0,sp,800
    14c4:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    14c8:	f300                	fsw	fs0,32(a4)
    14ca:	5a01                	li	s4,-32
    14cc:	169f 0003 4c00      	0x4c000003169f
    14d2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    14d6:	5a00                	lw	s0,48(a2)
    14d8:	034c                	addi	a1,sp,388
    14da:	0000                	unimp
    14dc:	03fc                	addi	a5,sp,460
    14de:	0000                	unimp
    14e0:	0004                	0x4
    14e2:	9f5a01f3          	0x9f5a01f3
	...
    14ee:	028c                	addi	a1,sp,320
    14f0:	0000                	unimp
    14f2:	02fc                	addi	a5,sp,332
    14f4:	0000                	unimp
    14f6:	0001                	nop
    14f8:	0002fc5b          	0x2fc5b
    14fc:	1600                	addi	s0,sp,800
    14fe:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1502:	8f00                	0x8f00
    1504:	9f01                	0x9f01
    1506:	0316                	slli	t1,t1,0x5
    1508:	0000                	unimp
    150a:	034c                	addi	a1,sp,388
    150c:	0000                	unimp
    150e:	0001                	nop
    1510:	00034c5b          	0x34c5b
    1514:	fc00                	fsw	fs0,56(s0)
    1516:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    151a:	8f00                	0x8f00
    151c:	9f01                	0x9f01
	...
    1526:	028c                	addi	a1,sp,320
    1528:	0000                	unimp
    152a:	0302                	c.slli64	t1
    152c:	0000                	unimp
    152e:	0001                	nop
    1530:	025c                	addi	a5,sp,260
    1532:	16000003          	lb	zero,352(zero) # 160 <polymult+0xb0>
    1536:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    153a:	f300                	fsw	fs0,32(a4)
    153c:	5c01                	li	s8,-32
    153e:	169f 0003 6000      	0x60000003169f
    1544:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1548:	5c00                	lw	s0,56(s0)
    154a:	0360                	addi	s0,sp,396
    154c:	0000                	unimp
    154e:	03fc                	addi	a5,sp,460
    1550:	0000                	unimp
    1552:	0004                	0x4
    1554:	9f5c01f3          	0x9f5c01f3
	...
    1560:	028c                	addi	a1,sp,320
    1562:	0000                	unimp
    1564:	030e                	slli	t1,t1,0x3
    1566:	0000                	unimp
    1568:	0001                	nop
    156a:	0e5e                	slli	t3,t3,0x17
    156c:	16000003          	lb	zero,352(zero) # 160 <polymult+0xb0>
    1570:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1574:	f300                	fsw	fs0,32(a4)
    1576:	5e01                	li	t3,-32
    1578:	169f 0003 6000      	0x60000003169f
    157e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1582:	5e00                	lw	s0,56(a2)
    1584:	0360                	addi	s0,sp,396
    1586:	0000                	unimp
    1588:	03fc                	addi	a5,sp,460
    158a:	0000                	unimp
    158c:	0004                	0x4
    158e:	9f5e01f3          	0x9f5e01f3
	...
    159a:	02d8                	addi	a4,sp,324
    159c:	0000                	unimp
    159e:	02f0                	addi	a2,sp,332
    15a0:	0000                	unimp
    15a2:	0002                	c.slli64	zero
    15a4:	008c                	addi	a1,sp,64
    15a6:	02f0                	addi	a2,sp,332
    15a8:	0000                	unimp
    15aa:	0360                	addi	s0,sp,396
    15ac:	0000                	unimp
    15ae:	0002                	c.slli64	zero
    15b0:	0082                	c.slli64	ra
    15b2:	0360                	addi	s0,sp,396
    15b4:	0000                	unimp
    15b6:	03b6                	slli	t2,t2,0xd
    15b8:	0000                	unimp
    15ba:	0002                	c.slli64	zero
    15bc:	008c                	addi	a1,sp,64
    15be:	03b6                	slli	t2,t2,0xd
    15c0:	0000                	unimp
    15c2:	03da                	slli	t2,t2,0x16
    15c4:	0000                	unimp
    15c6:	0002                	c.slli64	zero
    15c8:	0082                	c.slli64	ra
    15ca:	03da                	slli	t2,t2,0x16
    15cc:	0000                	unimp
    15ce:	03fc                	addi	a5,sp,460
    15d0:	0000                	unimp
    15d2:	0002                	c.slli64	zero
    15d4:	008c                	addi	a1,sp,64
	...
    15de:	02de                	slli	t0,t0,0x17
    15e0:	0000                	unimp
    15e2:	02f0                	addi	a2,sp,332
    15e4:	0000                	unimp
    15e6:	0002                	c.slli64	zero
    15e8:	9f30                	0x9f30
    15ea:	02f0                	addi	a2,sp,332
    15ec:	0000                	unimp
    15ee:	02f6                	slli	t0,t0,0x1d
    15f0:	0000                	unimp
    15f2:	0001                	nop
    15f4:	f659                	bnez	a2,1582 <product2+0x116>
    15f6:	0002                	c.slli64	zero
    15f8:	fc00                	fsw	fs0,56(s0)
    15fa:	0002                	c.slli64	zero
    15fc:	0100                	addi	s0,sp,128
    15fe:	5700                	lw	s0,40(a4)
    1600:	02fc                	addi	a5,sp,332
    1602:	0000                	unimp
    1604:	030e                	slli	t1,t1,0x3
    1606:	0000                	unimp
    1608:	0001                	nop
    160a:	0003165b          	0x3165b
    160e:	3800                	fld	fs0,48(s0)
    1610:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1614:	5900                	lw	s0,48(a0)
    1616:	0338                	addi	a4,sp,392
    1618:	0000                	unimp
    161a:	0346                	slli	t1,t1,0x11
    161c:	0000                	unimp
    161e:	0001                	nop
    1620:	00034657          	0x34657
    1624:	4a00                	lw	s0,16(a2)
    1626:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    162a:	7700                	flw	fs0,40(a4)
    162c:	9f7f                	0x9f7f
    162e:	034a                	slli	t1,t1,0x12
    1630:	0000                	unimp
    1632:	034c                	addi	a1,sp,388
    1634:	0000                	unimp
    1636:	0001                	nop
    1638:	00034c57          	0x34c57
    163c:	5a00                	lw	s0,48(a2)
    163e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1642:	5b00                	lw	s0,48(a4)
    1644:	035a                	slli	t1,t1,0x16
    1646:	0000                	unimp
    1648:	035e                	slli	t1,t1,0x17
    164a:	0000                	unimp
    164c:	7f7b0003          	lb	zero,2039(s6)
    1650:	5e9f 0003 6000      	0x600000035e9f
    1656:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    165a:	5b00                	lw	s0,48(a4)
    165c:	03da                	slli	t2,t2,0x16
    165e:	0000                	unimp
    1660:	03e2                	slli	t2,t2,0x18
    1662:	0000                	unimp
    1664:	0001                	nop
    1666:	0003e25b          	0x3e25b
    166a:	ee00                	fsw	fs0,24(a2)
    166c:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1670:	7b00                	flw	fs0,48(a4)
    1672:	9f7f                	0x9f7f
    1674:	03ee                	slli	t2,t2,0x1b
    1676:	0000                	unimp
    1678:	03f8                	addi	a4,sp,460
    167a:	0000                	unimp
    167c:	0001                	nop
    167e:	0000005b          	0x5b
    1682:	0000                	unimp
    1684:	0000                	unimp
    1686:	0e00                	addi	s0,sp,784
    1688:	16000003          	lb	zero,352(zero) # 160 <polymult+0xb0>
    168c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1690:	6100                	flw	fs0,0(a0)
    1692:	0316                	slli	t1,t1,0x5
    1694:	0000                	unimp
    1696:	0332                	slli	t1,t1,0xc
    1698:	0000                	unimp
    169a:	0001                	nop
    169c:	00036057          	0x36057
    16a0:	9000                	0x9000
    16a2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16a6:	6100                	flw	fs0,0(a0)
    16a8:	0390                	addi	a2,sp,448
    16aa:	0000                	unimp
    16ac:	03b2                	slli	t2,t2,0xc
    16ae:	0000                	unimp
    16b0:	0001                	nop
    16b2:	b25e                	fsd	fs7,288(sp)
    16b4:	da000003          	lb	zero,-608(zero) # fffffda0 <_stack_start+0xfffefda0>
    16b8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16bc:	6100                	flw	fs0,0(a0)
    16be:	03da                	slli	t2,t2,0x16
    16c0:	0000                	unimp
    16c2:	03fc                	addi	a5,sp,460
    16c4:	0000                	unimp
    16c6:	0001                	nop
    16c8:	005e                	c.slli	zero,0x17
    16ca:	0000                	unimp
    16cc:	0000                	unimp
    16ce:	0000                	unimp
    16d0:	6000                	flw	fs0,0(s0)
    16d2:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x4a>
    16d6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16da:	5e00                	lw	s0,56(a2)
    16dc:	0372                	slli	t1,t1,0x1c
    16de:	0000                	unimp
    16e0:	0378                	addi	a4,sp,396
    16e2:	0000                	unimp
    16e4:	017e0003          	lb	zero,23(t3) # 16017 <_stack_start+0x6017>
    16e8:	789f 0003 8200      	0x82000003789f
    16ee:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16f2:	5e00                	lw	s0,56(a2)
    16f4:	03b6                	slli	t2,t2,0xd
    16f6:	0000                	unimp
    16f8:	03c8                	addi	a0,sp,452
    16fa:	0000                	unimp
    16fc:	0001                	nop
    16fe:	c85e                	sw	s7,16(sp)
    1700:	ce000003          	lb	zero,-800(zero) # fffffce0 <_stack_start+0xfffefce0>
    1704:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1708:	7e00                	flw	fs0,56(a2)
    170a:	9f01                	0x9f01
    170c:	03ce                	slli	t2,t2,0x13
    170e:	0000                	unimp
    1710:	03da                	slli	t2,t2,0x16
    1712:	0000                	unimp
    1714:	0001                	nop
    1716:	005e                	c.slli	zero,0x17
    1718:	0000                	unimp
    171a:	0000                	unimp
    171c:	0000                	unimp
    171e:	9400                	0x9400
    1720:	b2000003          	lb	zero,-1248(zero) # fffffb20 <_stack_start+0xfffefb20>
    1724:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1728:	0300                	addi	s0,sp,384
    172a:	146c                	addi	a1,sp,556
    172c:	0000                	unimp
    172e:	009f 0000 0000      	0x9f
    1734:	0000                	unimp
    1736:	de00                	sw	s0,56(a2)
    1738:	0002                	c.slli64	zero
    173a:	9800                	0x9800
    173c:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1740:	7200                	flw	fs0,32(a2)
    1742:	9800                	0x9800
    1744:	b2000003          	lb	zero,-1248(zero) # fffffb20 <_stack_start+0xfffefb20>
    1748:	0c000003          	lb	zero,192(zero) # c0 <polymult+0x10>
    174c:	7500                	flw	fs0,40(a0)
    174e:	7d00                	flw	fs0,56(a0)
    1750:	3200                	fld	fs0,32(a2)
    1752:	2324                	fld	fs1,64(a4)
    1754:	1af0090f          	0x1af0090f
    1758:	b21c                	fsd	fa5,32(a2)
    175a:	fc000003          	lb	zero,-64(zero) # ffffffc0 <_stack_start+0xfffeffc0>
    175e:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1762:	7200                	flw	fs0,32(a2)
	...
    176c:	d800                	sw	s0,48(s0)
    176e:	0002                	c.slli64	zero
    1770:	0e00                	addi	s0,sp,784
    1772:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1776:	6100                	flw	fs0,0(a0)
    1778:	030e                	slli	t1,t1,0x3
    177a:	0000                	unimp
    177c:	0316                	slli	t1,t1,0x5
    177e:	0000                	unimp
    1780:	7f7d0003          	lb	zero,2039(s10)
    1784:	169f 0003 6000      	0x60000003169f
    178a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    178e:	6100                	flw	fs0,0(a0)
    1790:	0360                	addi	s0,sp,396
    1792:	0000                	unimp
    1794:	03fc                	addi	a5,sp,460
    1796:	0000                	unimp
    1798:	7f7d0003          	lb	zero,2039(s10)
    179c:	009f 0000 0000      	0x9f
    17a2:	0000                	unimp
    17a4:	dc00                	sw	s0,56(s0)
    17a6:	0002                	c.slli64	zero
    17a8:	0e00                	addi	s0,sp,784
    17aa:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17ae:	6100                	flw	fs0,0(a0)
    17b0:	030e                	slli	t1,t1,0x3
    17b2:	0000                	unimp
    17b4:	0316                	slli	t1,t1,0x5
    17b6:	0000                	unimp
    17b8:	7f7d0003          	lb	zero,2039(s10)
    17bc:	169f 0003 6000      	0x60000003169f
    17c2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17c6:	6100                	flw	fs0,0(a0)
    17c8:	0360                	addi	s0,sp,396
    17ca:	0000                	unimp
    17cc:	03fc                	addi	a5,sp,460
    17ce:	0000                	unimp
    17d0:	7f7d0003          	lb	zero,2039(s10)
    17d4:	009f 0000 0000      	0x9f
    17da:	0000                	unimp
    17dc:	b000                	fsd	fs0,32(s0)
    17de:	0000                	unimp
    17e0:	3c00                	fld	fs0,56(s0)
    17e2:	0001                	nop
    17e4:	0100                	addi	s0,sp,128
    17e6:	5a00                	lw	s0,48(a2)
    17e8:	013c                	addi	a5,sp,136
    17ea:	0000                	unimp
    17ec:	0172                	slli	sp,sp,0x1c
    17ee:	0000                	unimp
    17f0:	0004                	0x4
    17f2:	9f5a01f3          	0x9f5a01f3
    17f6:	0172                	slli	sp,sp,0x1c
    17f8:	0000                	unimp
    17fa:	01a8                	addi	a0,sp,200
    17fc:	0000                	unimp
    17fe:	0001                	nop
    1800:	a85a                	fsd	fs6,16(sp)
    1802:	0001                	nop
    1804:	8c00                	0x8c00
    1806:	0002                	c.slli64	zero
    1808:	0400                	addi	s0,sp,512
    180a:	f300                	fsw	fs0,32(a4)
    180c:	5a01                	li	s4,-32
    180e:	009f 0000 0000      	0x9f
    1814:	0000                	unimp
    1816:	b000                	fsd	fs0,32(s0)
    1818:	0000                	unimp
    181a:	3e00                	fld	fs0,56(a2)
    181c:	0001                	nop
    181e:	0100                	addi	s0,sp,128
    1820:	5b00                	lw	s0,48(a4)
    1822:	013e                	slli	sp,sp,0xf
    1824:	0000                	unimp
    1826:	00000143          	fmadd.s	ft2,ft0,ft0,ft0,rne
    182a:	0001                	nop
    182c:	435c                	lw	a5,4(a4)
    182e:	0001                	nop
    1830:	7200                	flw	fs0,32(a2)
    1832:	0001                	nop
    1834:	0300                	addi	s0,sp,384
    1836:	8600                	0x8600
    1838:	9f01                	0x9f01
    183a:	0172                	slli	sp,sp,0x1c
    183c:	0000                	unimp
    183e:	01a8                	addi	a0,sp,200
    1840:	0000                	unimp
    1842:	0001                	nop
    1844:	0001a85b          	0x1a85b
    1848:	f600                	fsw	fs0,40(a2)
    184a:	0001                	nop
    184c:	0300                	addi	s0,sp,384
    184e:	8600                	0x8600
    1850:	9f01                	0x9f01
    1852:	01f6                	slli	gp,gp,0x1d
    1854:	0000                	unimp
    1856:	028c                	addi	a1,sp,320
    1858:	0000                	unimp
    185a:	0004                	0x4
    185c:	9f5b01f3          	0x9f5b01f3
	...
    1868:	00b0                	addi	a2,sp,72
    186a:	0000                	unimp
    186c:	0126                	slli	sp,sp,0x9
    186e:	0000                	unimp
    1870:	0001                	nop
    1872:	265c                	fld	fa5,136(a2)
    1874:	0001                	nop
    1876:	4300                	lw	s0,0(a4)
    1878:	0001                	nop
    187a:	0100                	addi	s0,sp,128
    187c:	6000                	flw	fs0,0(s0)
    187e:	00000143          	fmadd.s	ft2,ft0,ft0,ft0,rne
    1882:	0172                	slli	sp,sp,0x1c
    1884:	0000                	unimp
    1886:	b4780003          	lb	zero,-1209(a6)
    188a:	727f                	0x727f
    188c:	0001                	nop
    188e:	a800                	fsd	fs0,16(s0)
    1890:	0001                	nop
    1892:	0100                	addi	s0,sp,128
    1894:	6000                	flw	fs0,0(s0)
    1896:	01a8                	addi	a0,sp,200
    1898:	0000                	unimp
    189a:	01ea                	slli	gp,gp,0x1a
    189c:	0000                	unimp
    189e:	b4780003          	lb	zero,-1209(a6)
    18a2:	ea7f                	0xea7f
    18a4:	0001                	nop
    18a6:	8c00                	0x8c00
    18a8:	0002                	c.slli64	zero
    18aa:	0300                	addi	s0,sp,384
    18ac:	9100                	0x9100
    18ae:	7fb4                	flw	fa3,120(a5)
	...
    18b8:	00b0                	addi	a2,sp,72
    18ba:	0000                	unimp
    18bc:	00fe                	slli	ra,ra,0x1f
    18be:	0000                	unimp
    18c0:	0001                	nop
    18c2:	fe5d                	bnez	a2,1880 <result+0x1bc>
    18c4:	0000                	unimp
    18c6:	ee00                	fsw	fs0,24(a2)
    18c8:	0001                	nop
    18ca:	0100                	addi	s0,sp,128
    18cc:	6200                	flw	fs0,0(a2)
    18ce:	01ee                	slli	gp,gp,0x1b
    18d0:	0000                	unimp
    18d2:	020c                	addi	a1,sp,256
    18d4:	0000                	unimp
    18d6:	0004                	0x4
    18d8:	9f5d01f3          	0x9f5d01f3
    18dc:	020c                	addi	a1,sp,256
    18de:	0000                	unimp
    18e0:	028c                	addi	a1,sp,320
    18e2:	0000                	unimp
    18e4:	0001                	nop
    18e6:	0062                	c.slli	zero,0x18
    18e8:	0000                	unimp
    18ea:	0000                	unimp
    18ec:	0000                	unimp
    18ee:	b000                	fsd	fs0,32(s0)
    18f0:	0000                	unimp
    18f2:	c000                	sw	s0,0(s0)
    18f4:	0000                	unimp
    18f6:	0100                	addi	s0,sp,128
    18f8:	5e00                	lw	s0,56(a2)
    18fa:	00c0                	addi	s0,sp,68
    18fc:	0000                	unimp
    18fe:	01fa                	slli	gp,gp,0x1e
    1900:	0000                	unimp
    1902:	0001                	nop
    1904:	fa68                	fsw	fa0,116(a2)
    1906:	0001                	nop
    1908:	0c00                	addi	s0,sp,528
    190a:	0002                	c.slli64	zero
    190c:	0400                	addi	s0,sp,512
    190e:	f300                	fsw	fs0,32(a4)
    1910:	5e01                	li	t3,-32
    1912:	0c9f 0002 8c00      	0x8c0000020c9f
    1918:	0002                	c.slli64	zero
    191a:	0100                	addi	s0,sp,128
    191c:	6800                	flw	fs0,16(s0)
	...
    1926:	00b0                	addi	a2,sp,72
    1928:	0000                	unimp
    192a:	0110                	addi	a2,sp,128
    192c:	0000                	unimp
    192e:	0001                	nop
    1930:	105f 0001 ea00      	0xea000001105f
    1936:	0001                	nop
    1938:	0300                	addi	s0,sp,384
    193a:	7800                	flw	fs0,48(s0)
    193c:	7fb8                	flw	fa4,120(a5)
    193e:	01ea                	slli	gp,gp,0x1a
    1940:	0000                	unimp
    1942:	028c                	addi	a1,sp,320
    1944:	0000                	unimp
    1946:	b8910003          	lb	zero,-1143(sp)
    194a:	007f                	0x7f
	...
    1954:	0001                	nop
    1956:	0600                	addi	s0,sp,768
    1958:	0001                	nop
    195a:	0200                	addi	s0,sp,256
    195c:	7200                	flw	fs0,32(a2)
    195e:	0600                	addi	s0,sp,768
    1960:	0001                	nop
    1962:	2e00                	fld	fs0,24(a2)
    1964:	0001                	nop
    1966:	0200                	addi	s0,sp,256
    1968:	8b00                	0x8b00
    196a:	2e00                	fld	fs0,24(a2)
    196c:	0001                	nop
    196e:	c200                	sw	s0,0(a2)
    1970:	0001                	nop
    1972:	0200                	addi	s0,sp,256
    1974:	8500                	0x8500
    1976:	c200                	sw	s0,0(a2)
    1978:	0001                	nop
    197a:	0000                	unimp
    197c:	0002                	c.slli64	zero
    197e:	0200                	addi	s0,sp,256
    1980:	8b00                	0x8b00
    1982:	0c00                	addi	s0,sp,528
    1984:	0002                	c.slli64	zero
    1986:	5800                	lw	s0,48(s0)
    1988:	0002                	c.slli64	zero
    198a:	0200                	addi	s0,sp,256
    198c:	8500                	0x8500
    198e:	5800                	lw	s0,48(s0)
    1990:	0002                	c.slli64	zero
    1992:	8c00                	0x8c00
    1994:	0002                	c.slli64	zero
    1996:	0200                	addi	s0,sp,256
    1998:	8b00                	0x8b00
	...
    19a2:	1c00                	addi	s0,sp,560
    19a4:	0001                	nop
    19a6:	2e00                	fld	fs0,24(a2)
    19a8:	0001                	nop
    19aa:	0200                	addi	s0,sp,256
    19ac:	3000                	fld	fs0,32(s0)
    19ae:	2e9f 0001 3400      	0x340000012e9f
    19b4:	0001                	nop
    19b6:	0100                	addi	s0,sp,128
    19b8:	5c00                	lw	s0,56(s0)
    19ba:	0134                	addi	a3,sp,136
    19bc:	0000                	unimp
    19be:	00000143          	fmadd.s	ft2,ft0,ft0,ft0,rne
    19c2:	0001                	nop
    19c4:	445d                	li	s0,23
    19c6:	0001                	nop
    19c8:	4a00                	lw	s0,16(a2)
    19ca:	0001                	nop
    19cc:	0200                	addi	s0,sp,256
    19ce:	3000                	fld	fs0,32(s0)
    19d0:	4a9f 0001 5500      	0x550000014a9f
    19d6:	0001                	nop
    19d8:	0100                	addi	s0,sp,128
    19da:	5d00                	lw	s0,56(a0)
    19dc:	0172                	slli	sp,sp,0x1c
    19de:	0000                	unimp
    19e0:	0194                	addi	a3,sp,192
    19e2:	0000                	unimp
    19e4:	0001                	nop
    19e6:	945c                	0x945c
    19e8:	0001                	nop
    19ea:	a200                	fsd	fs0,0(a2)
    19ec:	0001                	nop
    19ee:	0100                	addi	s0,sp,128
    19f0:	5d00                	lw	s0,56(a0)
    19f2:	01a2                	slli	gp,gp,0x8
    19f4:	0000                	unimp
    19f6:	01a6                	slli	gp,gp,0x9
    19f8:	0000                	unimp
    19fa:	7f7d0003          	lb	zero,2039(s10)
    19fe:	a69f 0001 b600      	0xb6000001a69f
    1a04:	0001                	nop
    1a06:	0100                	addi	s0,sp,128
    1a08:	5d00                	lw	s0,56(a0)
    1a0a:	01b6                	slli	gp,gp,0xd
    1a0c:	0000                	unimp
    1a0e:	01b8                	addi	a4,sp,200
    1a10:	0000                	unimp
    1a12:	7f7d0003          	lb	zero,2039(s10)
    1a16:	b89f 0001 ba00      	0xba000001b89f
    1a1c:	0001                	nop
    1a1e:	0100                	addi	s0,sp,128
    1a20:	5d00                	lw	s0,56(a0)
    1a22:	01c2                	slli	gp,gp,0x10
    1a24:	0000                	unimp
    1a26:	01d0                	addi	a2,sp,196
    1a28:	0000                	unimp
    1a2a:	0001                	nop
    1a2c:	5859                	li	a6,-10
    1a2e:	0002                	c.slli64	zero
    1a30:	6600                	flw	fs0,8(a2)
    1a32:	0002                	c.slli64	zero
    1a34:	0100                	addi	s0,sp,128
    1a36:	5900                	lw	s0,48(a0)
    1a38:	0266                	slli	tp,tp,0x19
    1a3a:	0000                	unimp
    1a3c:	0272                	slli	tp,tp,0x1c
    1a3e:	0000                	unimp
    1a40:	0001                	nop
    1a42:	725c                	flw	fa5,36(a2)
    1a44:	0002                	c.slli64	zero
    1a46:	7e00                	flw	fs0,56(a2)
    1a48:	0002                	c.slli64	zero
    1a4a:	0300                	addi	s0,sp,384
    1a4c:	7c00                	flw	fs0,56(s0)
    1a4e:	9f7f                	0x9f7f
    1a50:	027e                	slli	tp,tp,0x1f
    1a52:	0000                	unimp
    1a54:	0288                	addi	a0,sp,320
    1a56:	0000                	unimp
    1a58:	0001                	nop
    1a5a:	005c                	addi	a5,sp,4
    1a5c:	0000                	unimp
    1a5e:	0000                	unimp
    1a60:	0000                	unimp
    1a62:	6a00                	flw	fs0,16(a2)
    1a64:	0001                	nop
    1a66:	7200                	flw	fs0,32(a2)
    1a68:	0001                	nop
    1a6a:	0100                	addi	s0,sp,128
    1a6c:	6a00                	flw	fs0,16(a2)
    1a6e:	0172                	slli	sp,sp,0x1c
    1a70:	0000                	unimp
    1a72:	018e                	slli	gp,gp,0x3
    1a74:	0000                	unimp
    1a76:	0001                	nop
    1a78:	bc5d                	j	152e <product2+0xc2>
    1a7a:	0001                	nop
    1a7c:	d000                	sw	s0,32(s0)
    1a7e:	0001                	nop
    1a80:	0100                	addi	s0,sp,128
    1a82:	6a00                	flw	fs0,16(a2)
    1a84:	01d0                	addi	a2,sp,196
    1a86:	0000                	unimp
    1a88:	01e1                	addi	gp,gp,24
    1a8a:	0000                	unimp
    1a8c:	0001                	nop
    1a8e:	0c5e                	slli	s8,s8,0x17
    1a90:	0002                	c.slli64	zero
    1a92:	6600                	flw	fs0,8(a2)
    1a94:	0002                	c.slli64	zero
    1a96:	0100                	addi	s0,sp,128
    1a98:	6a00                	flw	fs0,16(a2)
    1a9a:	0266                	slli	tp,tp,0x19
    1a9c:	0000                	unimp
    1a9e:	028c                	addi	a1,sp,320
    1aa0:	0000                	unimp
    1aa2:	0001                	nop
    1aa4:	005e                	c.slli	zero,0x17
    1aa6:	0000                	unimp
    1aa8:	0000                	unimp
    1aaa:	0000                	unimp
    1aac:	0c00                	addi	s0,sp,528
    1aae:	0002                	c.slli64	zero
    1ab0:	1e00                	addi	s0,sp,816
    1ab2:	0002                	c.slli64	zero
    1ab4:	0100                	addi	s0,sp,128
    1ab6:	5d00                	lw	s0,56(a0)
    1ab8:	021e                	slli	tp,tp,0x7
    1aba:	0000                	unimp
    1abc:	0224                	addi	s1,sp,264
    1abe:	0000                	unimp
    1ac0:	017d0003          	lb	zero,23(s10)
    1ac4:	249f 0002 3000      	0x30000002249f
    1aca:	0002                	c.slli64	zero
    1acc:	0100                	addi	s0,sp,128
    1ace:	5d00                	lw	s0,56(a0)
    1ad0:	0234                	addi	a3,sp,264
    1ad2:	0000                	unimp
    1ad4:	0246                	slli	tp,tp,0x11
    1ad6:	0000                	unimp
    1ad8:	0001                	nop
    1ada:	465d                	li	a2,23
    1adc:	0002                	c.slli64	zero
    1ade:	4c00                	lw	s0,24(s0)
    1ae0:	0002                	c.slli64	zero
    1ae2:	0300                	addi	s0,sp,384
    1ae4:	7d00                	flw	fs0,56(a0)
    1ae6:	9f01                	0x9f01
    1ae8:	024c                	addi	a1,sp,260
    1aea:	0000                	unimp
    1aec:	0258                	addi	a4,sp,260
    1aee:	0000                	unimp
    1af0:	0001                	nop
    1af2:	005d                	c.nop	23
    1af4:	0000                	unimp
    1af6:	0000                	unimp
    1af8:	0000                	unimp
    1afa:	e200                	fsw	fs0,0(a2)
    1afc:	0001                	nop
    1afe:	0c00                	addi	s0,sp,528
    1b00:	0002                	c.slli64	zero
    1b02:	0600                	addi	s0,sp,768
    1b04:	0300                	addi	s0,sp,384
    1b06:	1214                	addi	a3,sp,288
    1b08:	0000                	unimp
    1b0a:	009f 0000 0000      	0x9f
    1b10:	0000                	unimp
    1b12:	1a00                	addi	s0,sp,304
    1b14:	0001                	nop
    1b16:	fc00                	fsw	fs0,56(s0)
    1b18:	0001                	nop
    1b1a:	0200                	addi	s0,sp,256
    1b1c:	8900                	0x8900
    1b1e:	fc00                	fsw	fs0,56(s0)
    1b20:	0001                	nop
    1b22:	0000                	unimp
    1b24:	0002                	c.slli64	zero
    1b26:	0d00                	addi	s0,sp,656
    1b28:	8b00                	0x8b00
    1b2a:	f300                	fsw	fs0,32(a4)
    1b2c:	5b01                	li	s6,-32
    1b2e:	2432                	fld	fs0,264(sp)
    1b30:	f0090f23          	sb	zero,-226(s2)
    1b34:	1c1a                	slli	s8,s8,0x26
    1b36:	020c                	addi	a1,sp,256
    1b38:	0000                	unimp
    1b3a:	028c                	addi	a1,sp,320
    1b3c:	0000                	unimp
    1b3e:	0002                	c.slli64	zero
    1b40:	0089                	addi	ra,ra,2
	...
    1b4a:	011c                	addi	a5,sp,128
    1b4c:	0000                	unimp
    1b4e:	01e6                	slli	gp,gp,0x19
    1b50:	0000                	unimp
    1b52:	0002                	c.slli64	zero
    1b54:	0072                	c.slli	zero,0x1c
    1b56:	01e6                	slli	gp,gp,0x19
    1b58:	0000                	unimp
    1b5a:	01ee                	slli	gp,gp,0x1b
    1b5c:	0000                	unimp
    1b5e:	000c                	0xc
    1b60:	0089                	addi	ra,ra,2
    1b62:	0082                	c.slli64	ra
    1b64:	2432                	fld	fs0,264(sp)
    1b66:	f0090f23          	sb	zero,-226(s2)
    1b6a:	1c1a                	slli	s8,s8,0x26
    1b6c:	01ee                	slli	gp,gp,0x1b
    1b6e:	0000                	unimp
    1b70:	01fc                	addi	a5,sp,204
    1b72:	0000                	unimp
    1b74:	000d                	c.nop	3
    1b76:	0089                	addi	ra,ra,2
    1b78:	325d01f3          	0x325d01f3
    1b7c:	2324                	fld	fs1,64(a4)
    1b7e:	1af0090f          	0x1af0090f
    1b82:	fc1c                	fsw	fa5,56(s0)
    1b84:	0001                	nop
    1b86:	0000                	unimp
    1b88:	0002                	c.slli64	zero
    1b8a:	1800                	addi	s0,sp,48
    1b8c:	8b00                	0x8b00
    1b8e:	f300                	fsw	fs0,32(a4)
    1b90:	5b01                	li	s6,-32
    1b92:	2432                	fld	fs0,264(sp)
    1b94:	f0090f23          	sb	zero,-226(s2)
    1b98:	1c1a                	slli	s8,s8,0x26
    1b9a:	325d01f3          	0x325d01f3
    1b9e:	2324                	fld	fs1,64(a4)
    1ba0:	1af0090f          	0x1af0090f
    1ba4:	0c1c                	addi	a5,sp,528
    1ba6:	0002                	c.slli64	zero
    1ba8:	8c00                	0x8c00
    1baa:	0002                	c.slli64	zero
    1bac:	0200                	addi	s0,sp,256
    1bae:	7200                	flw	fs0,32(a2)
	...
    1bb8:	f800                	fsw	fs0,48(s0)
    1bba:	0000                	unimp
    1bbc:	6a00                	flw	fs0,16(a2)
    1bbe:	0001                	nop
    1bc0:	0100                	addi	s0,sp,128
    1bc2:	6a00                	flw	fs0,16(a2)
    1bc4:	016a                	slli	sp,sp,0x1a
    1bc6:	0000                	unimp
    1bc8:	0172                	slli	sp,sp,0x1c
    1bca:	0000                	unimp
    1bcc:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x122>
    1bd0:	729f 0001 bc00      	0xbc000001729f
    1bd6:	0001                	nop
    1bd8:	0100                	addi	s0,sp,128
    1bda:	6a00                	flw	fs0,16(a2)
    1bdc:	01bc                	addi	a5,sp,200
    1bde:	0000                	unimp
    1be0:	01ee                	slli	gp,gp,0x1b
    1be2:	0000                	unimp
    1be4:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x122>
    1be8:	ee9f 0001 0c00      	0xc000001ee9f
    1bee:	0002                	c.slli64	zero
    1bf0:	0600                	addi	s0,sp,768
    1bf2:	f300                	fsw	fs0,32(a4)
    1bf4:	5d01                	li	s10,-32
    1bf6:	1c31                	addi	s8,s8,-20
    1bf8:	0c9f 0002 8c00      	0x8c0000020c9f
    1bfe:	0002                	c.slli64	zero
    1c00:	0300                	addi	s0,sp,384
    1c02:	8200                	0x8200
    1c04:	9f7f                	0x9f7f
	...
    1c0e:	00c8                	addi	a0,sp,68
    1c10:	0000                	unimp
    1c12:	01f2                	slli	gp,gp,0x1c
    1c14:	0000                	unimp
    1c16:	0001                	nop
    1c18:	f264                	fsw	fs1,100(a2)
    1c1a:	0001                	nop
    1c1c:	f600                	fsw	fs0,40(a2)
    1c1e:	0001                	nop
    1c20:	0700                	addi	s0,sp,896
    1c22:	8600                	0x8600
    1c24:	f300                	fsw	fs0,32(a4)
    1c26:	5d01                	li	s10,-32
    1c28:	9f22                	add	t5,t5,s0
    1c2a:	01f6                	slli	gp,gp,0x1d
    1c2c:	0000                	unimp
    1c2e:	020c                	addi	a1,sp,256
    1c30:	0000                	unimp
    1c32:	000a                	c.slli	zero,0x2
    1c34:	f35b01f3          	0xf35b01f3
    1c38:	5d01                	li	s10,-32
    1c3a:	3122                	fld	ft2,40(sp)
    1c3c:	9f1c                	0x9f1c
    1c3e:	020c                	addi	a1,sp,256
    1c40:	0000                	unimp
    1c42:	028c                	addi	a1,sp,320
    1c44:	0000                	unimp
    1c46:	0001                	nop
    1c48:	0064                	addi	s1,sp,12
    1c4a:	0000                	unimp
    1c4c:	0000                	unimp
    1c4e:	0000                	unimp
    1c50:	1a00                	addi	s0,sp,304
    1c52:	0001                	nop
    1c54:	f600                	fsw	fs0,40(a2)
    1c56:	0001                	nop
    1c58:	0100                	addi	s0,sp,128
    1c5a:	6600                	flw	fs0,8(a2)
    1c5c:	01f6                	slli	gp,gp,0x1d
    1c5e:	0000                	unimp
    1c60:	020c                	addi	a1,sp,256
    1c62:	0000                	unimp
    1c64:	0006                	c.slli	zero,0x1
    1c66:	315b01f3          	0x315b01f3
    1c6a:	9f1c                	0x9f1c
    1c6c:	020c                	addi	a1,sp,256
    1c6e:	0000                	unimp
    1c70:	028c                	addi	a1,sp,320
    1c72:	0000                	unimp
    1c74:	0001                	nop
    1c76:	0066                	c.slli	zero,0x19
    1c78:	0000                	unimp
    1c7a:	0000                	unimp
    1c7c:	0000                	unimp
    1c7e:	1a00                	addi	s0,sp,304
    1c80:	0001                	nop
    1c82:	6a00                	flw	fs0,16(a2)
    1c84:	0001                	nop
    1c86:	0100                	addi	s0,sp,128
    1c88:	6a00                	flw	fs0,16(a2)
    1c8a:	016a                	slli	sp,sp,0x1a
    1c8c:	0000                	unimp
    1c8e:	0172                	slli	sp,sp,0x1c
    1c90:	0000                	unimp
    1c92:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x122>
    1c96:	729f 0001 bc00      	0xbc000001729f
    1c9c:	0001                	nop
    1c9e:	0100                	addi	s0,sp,128
    1ca0:	6a00                	flw	fs0,16(a2)
    1ca2:	01bc                	addi	a5,sp,200
    1ca4:	0000                	unimp
    1ca6:	01ee                	slli	gp,gp,0x1b
    1ca8:	0000                	unimp
    1caa:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x122>
    1cae:	ee9f 0001 0c00      	0xc000001ee9f
    1cb4:	0002                	c.slli64	zero
    1cb6:	0600                	addi	s0,sp,768
    1cb8:	f300                	fsw	fs0,32(a4)
    1cba:	5d01                	li	s10,-32
    1cbc:	1c31                	addi	s8,s8,-20
    1cbe:	0c9f 0002 8c00      	0x8c0000020c9f
    1cc4:	0002                	c.slli64	zero
    1cc6:	0300                	addi	s0,sp,384
    1cc8:	8200                	0x8200
    1cca:	9f7f                	0x9f7f
	...
    1cd4:	0092                	slli	ra,ra,0x4
    1cd6:	0000                	unimp
    1cd8:	0098                	addi	a4,sp,64
    1cda:	0000                	unimp
    1cdc:	0001                	nop
    1cde:	985c                	0x985c
    1ce0:	0000                	unimp
    1ce2:	b000                	fsd	fs0,32(s0)
    1ce4:	0000                	unimp
    1ce6:	0400                	addi	s0,sp,512
    1ce8:	f300                	fsw	fs0,32(a4)
    1cea:	5c01                	li	s8,-32
    1cec:	009f 0000 0000      	0x9f
    1cf2:	0000                	unimp
    1cf4:	9200                	0x9200
    1cf6:	0000                	unimp
    1cf8:	9c00                	0x9c00
    1cfa:	0000                	unimp
    1cfc:	0200                	addi	s0,sp,256
    1cfe:	3000                	fld	fs0,32(s0)
    1d00:	9c9f 0000 b000      	0xb00000009c9f
    1d06:	0000                	unimp
    1d08:	0100                	addi	s0,sp,128
    1d0a:	5f00                	lw	s0,56(a4)
	...
    1d14:	00a2                	slli	ra,ra,0x8
    1d16:	0000                	unimp
    1d18:	00ac                	addi	a1,sp,72
    1d1a:	0000                	unimp
    1d1c:	0001                	nop
    1d1e:	0000005b          	0x5b
    1d22:	0000                	unimp
    1d24:	0000                	unimp
    1d26:	a200                	fsd	fs0,0(a2)
    1d28:	0000                	unimp
    1d2a:	ac00                	fsd	fs0,24(s0)
    1d2c:	0000                	unimp
    1d2e:	0800                	addi	s0,sp,16
    1d30:	7f00                	flw	fs0,56(a4)
    1d32:	3c00                	fld	fs0,56(s0)
    1d34:	7a1e                	flw	fs4,228(sp)
    1d36:	2200                	fld	fs0,0(a2)
    1d38:	009f 0000 0000      	0x9f
    1d3e:	0000                	unimp
    1d40:	8c00                	0x8c00
    1d42:	0000                	unimp
    1d44:	9000                	0x9000
    1d46:	0000                	unimp
    1d48:	0100                	addi	s0,sp,128
    1d4a:	5a00                	lw	s0,48(a2)
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0ce6                	slli	s9,s9,0x19
  16:	0000                	unimp
  18:	0f6e                	slli	t5,t5,0x1b
  1a:	0000                	unimp
  1c:	0110                	addi	a2,sp,128
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1adc                	addi	a5,sp,372
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d72                	slli	s10,s10,0x1c
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	0098                	addi	a4,sp,64
   2:	0000                	unimp
   4:	009a                	slli	ra,ra,0x6
   6:	0000                	unimp
   8:	00a2                	slli	ra,ra,0x8
   a:	0000                	unimp
   c:	00ac                	addi	a1,sp,72
	...
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0d72                	slli	s10,s10,0x1c
  1e:	0000                	unimp
  20:	0f6e                	slli	t5,t5,0x1b
  22:	0000                	unimp
  24:	107e                	c.slli	zero,0x3f
	...
  2e:	0000                	unimp
  30:	ffff                	0xffff
  32:	ffff                	0xffff
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d72                	slli	s10,s10,0x1c
  3a:	0000                	unimp
  3c:	0de8                	addi	a0,sp,732
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	2620                	fld	fs0,72(a2)
       2:	0000                	unimp
       4:	01430003          	lb	zero,20(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x54>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	6972                	flw	fs2,28(sp)
      28:	33766373          	csrrsi	t1,mhpmevent23,12
      2c:	2d32                	fld	fs10,264(sp)
      2e:	6e75                	lui	t3,0x1d
      30:	776f6e6b          	0x776f6e6b
      34:	2d6e                	fld	fs10,216(sp)
      36:	6c65                	lui	s8,0x19
      38:	2f66                	fld	ft10,88(sp)
      3a:	6e69                	lui	t3,0x1a
      3c:	64756c63          	bltu	a0,t2,694 <polydiv+0x298>
      40:	2f65                	jal	7f8 <ext_euclid+0x122>
      42:	616d                	addi	sp,sp,240
      44:	6e696863          	bltu	s2,t1,734 <ext_euclid+0x5e>
      48:	0065                	c.nop	25
      4a:	74706f2f          	0x74706f2f
      4e:	7369722f          	0x7369722f
      52:	6c2f7663          	bgeu	t5,sp,71e <ext_euclid+0x48>
      56:	6269                	lui	tp,0x1a
      58:	6363672f          	0x6363672f
      5c:	7369722f          	0x7369722f
      60:	32337663          	bgeu	t1,gp,38c <polymult2+0x100>
      64:	752d                	lui	a0,0xfffeb
      66:	6b6e                	flw	fs6,216(sp)
      68:	6f6e                	flw	ft10,216(sp)
      6a:	652d6e77          	0x652d6e77
      6e:	666c                	flw	fa1,76(a2)
      70:	322e392f          	0x322e392f
      74:	302e                	fld	ft0,232(sp)
      76:	636e692f          	0x636e692f
      7a:	756c                	flw	fa1,108(a0)
  jal x0, default_exc_handler
      7c:	6564                	flw	fs1,76(a0)
      7e:	2f00                	fld	fs0,24(a4)
  jal x0, reset_handler
      80:	2f74706f          	j	47b76 <_stack_start+0x37b76>
  jal x0, default_exc_handler
      84:	6972                	flw	fs2,28(sp)
      86:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      8a:	6972                	flw	fs2,28(sp)
    asm volatile(
      8c:	33766373          	csrrsi	t1,mhpmevent23,12
}
      90:	2d32                	fld	fs10,264(sp)
    for(i=0;i<(length/3);i++) {
      92:	6e75                	lui	t3,0x1d
      94:	776f6e6b          	0x776f6e6b
    asm volatile(
      98:	2d6e                	fld	fs10,216(sp)
    for(i=0;i<(length/3);i++) {
      9a:	6c65                	lui	s8,0x19
      9c:	2f66                	fld	ft10,88(sp)
      9e:	6e69                	lui	t3,0x1a
}
      a0:	64756c63          	bltu	a0,t2,6f8 <ext_euclid+0x22>
    asm volatile(
      a4:	2f65                	jal	85c <ext_euclid+0x186>
      a6:	00737973          	csrrci	s2,0x7,6
      aa:	74706f2f          	0x74706f2f
    for(i=0;i<(length/3);i++) {
      ae:	7369722f          	0x7369722f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b2:	722f7663          	bgeu	t5,sp,7de <ext_euclid+0x108>
      b6:	7369                	lui	t1,0xffffa
      b8:	32337663          	bgeu	t1,gp,3e4 <polymult2+0x158>
    int line[size_b][size_a + size_b];
      bc:	752d                	lui	a0,0xfffeb
      be:	6b6e                	flw	fs6,216(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      c0:	6f6e                	flw	ft10,216(sp)
      c2:	652d6e77          	0x652d6e77
    int line[size_b][size_a + size_b];
      c6:	666c                	flw	fa1,76(a2)
      c8:	636e692f          	0x636e692f
      cc:	756c                	flw	fa1,108(a0)
      ce:	6564                	flw	fs1,76(a0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d0:	0000                	unimp
      d2:	544e                	lw	s0,240(sp)
      d4:	5552                	lw	a0,52(sp)
      d6:	345f 5f38 6962      	0x69625f38345f
      dc:	4d74                	lw	a3,92(a0)
      de:	632e                	flw	ft6,200(sp)
      e0:	0000                	unimp
    int line[size_b][size_a + size_b];
      e2:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      e4:	645f 6665 7561      	0x75616665645f
    int line[size_b][size_a + size_b];
      ea:	746c                	flw	fa1,108(s0)
    int pola[size_a];
      ec:	745f 7079 7365      	0x73657079745f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      f2:	682e                	flw	fa6,200(sp)
    int line[size_b][size_a + size_b];
      f4:	0100                	addi	s0,sp,128
      f6:	0000                	unimp
    int pola[size_a];
      f8:	64647473          	csrrci	s0,0x646,8
    int polb[size_b];
      fc:	6665                	lui	a2,0x19
    int line[size_b][size_a + size_b];
      fe:	682e                	flw	fa6,200(sp)
    int polb[size_b];
     100:	0200                	addi	s0,sp,256
    int pola[size_a];
     102:	0000                	unimp
     104:	745f 7079 7365      	0x73657079745f
     10a:	682e                	flw	fa6,200(sp)
            line[i][j] = 0;
     10c:	0300                	addi	s0,sp,384
     10e:	0000                	unimp
    int polb[size_b];
     110:	6572                	flw	fa0,28(sp)
     112:	6e65                	lui	t3,0x19
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     114:	2e74                	fld	fa3,216(a2)
    int pola[size_a];
     116:	0068                	addi	a0,sp,12
     118:	6c000003          	lb	zero,1728(zero) # 6c0 <polydiv+0x2c4>
            line[i][j] = 0;
     11c:	2e6b636f          	jal	t1,b6402 <_stack_start+0xa6402>
     120:	0068                	addi	a0,sp,12
    for (i = 0; i < size_b; ++i){
     122:	5f000003          	lb	zero,1520(zero) # 5f0 <polydiv+0x1f4>
            product[j] = 0;
     126:	69647473          	csrrci	s0,0x696,8
     12a:	746e                	flw	fs0,248(sp)
     12c:	682e                	flw	fa6,200(sp)
    for (i = 0; i < size_b; ++i){
     12e:	0300                	addi	s0,sp,384
     130:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     132:	6c647473          	csrrci	s0,0x6c6,8
     136:	6269                	lui	tp,0x1a
	array_mod(pola,mod,size_a);
     138:	682e                	flw	fa6,200(sp)
     13a:	0400                	addi	s0,sp,512
     13c:	0000                	unimp
     13e:	623c                	flw	fa5,64(a2)
     140:	6975                	lui	s2,0x1d
     142:	746c                	flw	fa1,108(s0)
    for (i = 0; i < size_b; ++i){
     144:	692d                	lui	s2,0xb
     146:	3e6e                	fld	ft8,248(sp)
     148:	0000                	unimp
     14a:	0000                	unimp
     14c:	0500                	addi	s0,sp,640
	array_mod(polb,mod,size_b);
     14e:	0034                	addi	a3,sp,8
     150:	0205                	addi	tp,tp,1
     152:	008c                	addi	a1,sp,64
     154:	0000                	unimp
    if(star_mult == 1){
     156:	05011003          	lh	zero,80(sp)
     15a:	0305                	addi	t1,t1,1
     15c:	0902                	c.slli64	s2
     15e:	0000                	unimp
     160:	0301                	addi	t1,t1,0
     162:	0909                	addi	s2,s2,2
     164:	0004                	0x4
     166:	0501                	addi	a0,a0,0
     168:	0601                	addi	a2,a2,0
        for (j = size_b -1; j >= 0; j = j-1){
     16a:	00090303          	lb	t1,0(s2) # b000 <_stack_len+0x7000>
            for (k = size_a-1; k >= 0; k = k-1 ){
     16e:	0100                	addi	s0,sp,128
     170:	2c05                	jal	3a0 <polymult2+0x114>
            product[j] = 0;
     172:	0306                	slli	t1,t1,0x1
     174:	0901                	addi	s2,s2,0
     176:	0002                	c.slli64	zero
            line[i][j] = 0;
     178:	0501                	addi	a0,a0,0
     17a:	0301                	addi	t1,t1,0
            product[j] = 0;
     17c:	0905                	addi	s2,s2,1
     17e:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     180:	0501                	addi	a0,a0,0
     182:	0305                	addi	t1,t1,1
     184:	0902                	c.slli64	s2
     186:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     188:	0501                	addi	a0,a0,0
     18a:	0616                	slli	a2,a2,0x5
     18c:	00090003          	lb	zero,0(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     190:	0100                	addi	s0,sp,128
     192:	0505                	addi	a0,a0,1
        pola[i] = a[i];
     194:	06096c03          	0x6096c03
     198:	0100                	addi	s0,sp,128
     19a:	0a05                	addi	s4,s4,1
     19c:	02091403          	lh	s0,32(s2)
    for (i = 0; i < size_a; ++i){
     1a0:	0100                	addi	s0,sp,128
        pola[i] = a[i];
     1a2:	0d05                	addi	s10,s10,1
     1a4:	0200                	addi	s0,sp,256
    for (i = 0; i < size_a; ++i){
     1a6:	0104                	addi	s1,sp,128
        polb[i] = b[i];
     1a8:	0306                	slli	t1,t1,0x1
     1aa:	0900                	addi	s0,sp,144
     1ac:	0002                	c.slli64	zero
     1ae:	0501                	addi	a0,a0,0
     1b0:	0005                	c.nop	1
     1b2:	0402                	c.slli64	s0
    for (i = 0; i < size_b; ++i){
     1b4:	0601                	addi	a2,a2,0
        polb[i] = b[i];
     1b6:	00090003          	lb	zero,0(s2)
    if(star_mult == 1){
     1ba:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     1bc:	0105                	addi	sp,sp,1
     1be:	04090403          	lb	s0,64(s2)
    for (i = 0; i < size_b; ++i){
     1c2:	0100                	addi	s0,sp,128
     1c4:	0905                	addi	s2,s2,1
     1c6:	0200                	addi	s0,sp,256
     1c8:	0304                	addi	s1,sp,384
     1ca:	0306                	slli	t1,t1,0x1
     1cc:	097d                	addi	s2,s2,31
    for(j = 0; j < size_a + size_b -1; ++j){
     1ce:	0002                	c.slli64	zero
     1d0:	0501                	addi	a0,a0,0
     1d2:	0005                	c.nop	1
    array_mod(product,mod,size_a+size_b-1);
     1d4:	0402                	c.slli64	s0
     1d6:	096b0303          	lb	t1,150(s6)
     1da:	0000                	unimp
     1dc:	0001                	nop
     1de:	0402                	c.slli64	s0
     1e0:	09090303          	lb	t1,144(s2)
}
     1e4:	000a                	c.slli	zero,0x2
     1e6:	0501                	addi	a0,a0,0
     1e8:	001a                	c.slli	zero,0x6
     1ea:	0402                	c.slli64	s0
     1ec:	090b0303          	lb	t1,144(s6)
     1f0:	0000                	unimp
     1f2:	0501                	addi	a0,a0,0
     1f4:	0402001b          	0x402001b
     1f8:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
     1fc:	0009                	c.nop	2
     1fe:	0100                	addi	s0,sp,128
     200:	4e05                	li	t3,1
     202:	0306                	slli	t1,t1,0x1
     204:	0909                	addi	s2,s2,2
     206:	0004                	0x4
     208:	0501                	addi	a0,a0,0
     20a:	0305                	addi	t1,t1,1
                line[size_b-1-j][k] = pola[k]*polb[j];
     20c:	0902                	c.slli64	s2
     20e:	0000                	unimp
     210:	0501                	addi	a0,a0,0
     212:	064e                	slli	a2,a2,0x13
     214:	00097e03          	0x97e03
     218:	0100                	addi	s0,sp,128
     21a:	1d05                	addi	s10,s10,-31
            for (k = size_a-1; k >= 0; k = k-1 ){
     21c:	0c090203          	lb	tp,192(s2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     220:	0100                	addi	s0,sp,128
     222:	4e05                	li	t3,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     224:	04097e03          	0x4097e03
        for (j = size_b -1; j >= 0; j = j-1){
     228:	0100                	addi	s0,sp,128
     22a:	0905                	addi	s2,s2,1
     22c:	04090203          	lb	tp,64(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     230:	0100                	addi	s0,sp,128
     232:	4e05                	li	t3,1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     234:	0c097e03          	0xc097e03
     238:	0100                	addi	s0,sp,128
     23a:	0905                	addi	s2,s2,1
     23c:	12090203          	lb	tp,288(s2)
     240:	0100                	addi	s0,sp,128
     242:	4e05                	li	t3,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     244:	02097e03          	0x2097e03
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     248:	0100                	addi	s0,sp,128
     24a:	0905                	addi	s2,s2,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     24c:	02090203          	lb	tp,32(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     250:	0100                	addi	s0,sp,128
     252:	4e05                	li	t3,1
     254:	02097e03          	0x2097e03
        array_mod(line[i],mod,(size_a+size_b-1));
     258:	0100                	addi	s0,sp,128
     25a:	0905                	addi	s2,s2,1
     25c:	00090203          	lb	tp,0(s2)
    for (i = 0; i < size_b; ++i){
     260:	0100                	addi	s0,sp,128
     262:	04090303          	lb	t1,64(s2)
            product[j] += line[i][j];
     266:	0100                	addi	s0,sp,128
     268:	4e05                	li	t3,1
     26a:	06097b03          	0x6097b03
     26e:	0100                	addi	s0,sp,128
        for(i = 0; i < size_b; ++i){
     270:	0905                	addi	s2,s2,1
            product[j] += line[i][j];
     272:	02090203          	lb	tp,32(s2)
     276:	0100                	addi	s0,sp,128
     278:	04090303          	lb	t1,64(s2)
     27c:	0100                	addi	s0,sp,128
        for(i = 0; i < size_b; ++i){
     27e:	02090103          	lb	sp,32(s2)
    for(j = 0; j < size_a + size_b -1; ++j){
     282:	0100                	addi	s0,sp,128
     284:	04097c03          	0x4097c03
        for(i = 0; i < size_b; ++i){
     288:	0100                	addi	s0,sp,128
     28a:	0505                	addi	a0,a0,1
    int line[size_b][size_a + size_b];
     28c:	0306                	slli	t1,t1,0x1
     28e:	0901                	addi	s2,s2,0
     290:	0002                	c.slli64	zero
     292:	0301                	addi	t1,t1,0
     294:	0901                	addi	s2,s2,0
     296:	0000                	unimp
     298:	0301                	addi	t1,t1,0
     29a:	0901                	addi	s2,s2,0
     29c:	0000                	unimp
     29e:	0501                	addi	a0,a0,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2a0:	0609                	addi	a2,a2,2
     2a2:	00090103          	lb	sp,0(s2)
     2a6:	0100                	addi	s0,sp,128
     2a8:	02097f03          	0x2097f03
     2ac:	0100                	addi	s0,sp,128
     2ae:	4e05                	li	t3,1
     2b0:	04097b03          	0x4097b03
    int line[size_b][size_a + size_b];
     2b4:	0100                	addi	s0,sp,128
     2b6:	0905                	addi	s2,s2,1
     2b8:	04090503          	lb	a0,64(s2)
    int pola[size_a];
     2bc:	0100                	addi	s0,sp,128
     2be:	1405                	addi	s0,s0,-31
     2c0:	02090603          	lb	a2,32(s2)
     2c4:	0100                	addi	s0,sp,128
     2c6:	0905                	addi	s2,s2,1
    int polb[size_b];
     2c8:	04097b03          	0x4097b03
     2cc:	0100                	addi	s0,sp,128
    int pola[size_a];
     2ce:	4e05                	li	t3,1
    int polb[size_b];
     2d0:	04097a03          	0x4097a03
    int line[size_b][size_a + size_b];
     2d4:	0100                	addi	s0,sp,128
     2d6:	0905                	addi	s2,s2,1
    int pola[size_a];
     2d8:	02090503          	lb	a0,32(s2)
    int polb[size_b];
     2dc:	0100                	addi	s0,sp,128
            line[i][j] = 0;
     2de:	0505                	addi	a0,a0,1
     2e0:	0306                	slli	t1,t1,0x1
     2e2:	0901                	addi	s2,s2,0
    for (i = 0; i < size_b; ++i){
     2e4:	0004                	0x4
     2e6:	0501                	addi	a0,a0,0
            product2[j] = 0;
     2e8:	0609                	addi	a2,a2,2
     2ea:	00090003          	lb	zero,0(s2)
     2ee:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     2f0:	0505                	addi	a0,a0,1
     2f2:	0306                	slli	t1,t1,0x1
    for(i = 0; i < size_a; ++i){
     2f4:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
     2f8:	0501                	addi	a0,a0,0
    for(i = 0; i < size_b; ++i){
     2fa:	0614                	addi	a3,sp,768
     2fc:	00090203          	lb	tp,0(s2)
    if(star_mult == 1){
     300:	0100                	addi	s0,sp,128
     302:	0505                	addi	a0,a0,1
     304:	06097e03          	0x6097e03
     308:	0100                	addi	s0,sp,128
     30a:	0c05                	addi	s8,s8,1
     30c:	02090003          	lb	zero,32(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     310:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     312:	1805                	addi	a6,a6,-31
     314:	02090303          	lb	t1,32(s2)
            product2[j] = 0;
     318:	0100                	addi	s0,sp,128
     31a:	1105                	addi	sp,sp,-31
            line[i][j] = 0;
     31c:	0200                	addi	s0,sp,256
     31e:	0104                	addi	s1,sp,128
            product2[j] = 0;
     320:	0306                	slli	t1,t1,0x1
     322:	097d                	addi	s2,s2,31
        for(j = 0; j < size_a + size_b -1; ++j){
     324:	0008                	0x8
     326:	0501                	addi	a0,a0,0
     328:	0005                	c.nop	1
     32a:	0402                	c.slli64	s0
    for (i = 0; i < size_b; ++i){
     32c:	0601                	addi	a2,a2,0
     32e:	00090003          	lb	zero,0(s2)
     332:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     334:	0c05                	addi	s8,s8,1
     336:	04090803          	lb	a6,64(s2)
        pola[i] = a[i];
     33a:	0100                	addi	s0,sp,128
     33c:	1105                	addi	sp,sp,-31
     33e:	0200                	addi	s0,sp,256
     340:	0104                	addi	s1,sp,128
     342:	0306                	slli	t1,t1,0x1
    for(i = 0; i < size_a; ++i){
     344:	0900                	addi	s0,sp,144
        pola[i] = a[i];
     346:	0002                	c.slli64	zero
     348:	0501                	addi	a0,a0,0
    for(i = 0; i < size_a; ++i){
     34a:	0005                	c.nop	1
        polb[i] = b[i];
     34c:	0402                	c.slli64	s0
     34e:	0601                	addi	a2,a2,0
     350:	00090003          	lb	zero,0(s2)
     354:	0100                	addi	s0,sp,128
     356:	0205                	addi	tp,tp,1
    for(i = 0; i < size_b; ++i){
     358:	04090403          	lb	s0,64(s2)
        polb[i] = b[i];
     35c:	0100                	addi	s0,sp,128
    for(i = 0; i < size_b; ++i){
     35e:	0306                	slli	t1,t1,0x1
                line[size_b-1-j][k] = pola[k]*polb[j];
     360:	0900                	addi	s0,sp,144
     362:	000a                	c.slli	zero,0x2
     364:	0501                	addi	a0,a0,0
     366:	0305                	addi	t1,t1,1
     368:	0902                	c.slli64	s2
     36a:	0002                	c.slli64	zero
     36c:	0501                	addi	a0,a0,0
     36e:	060c                	addi	a1,sp,768
            for (k = size_a-1; k >= 0; k = k-1 ){
     370:	04090003          	lb	zero,64(s2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     374:	0100                	addi	s0,sp,128
     376:	1105                	addi	sp,sp,-31
            for (k = size_a-1; k >= 0; k = k-1 ){
     378:	0200                	addi	s0,sp,256
     37a:	0104                	addi	s1,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     37c:	0306                	slli	t1,t1,0x1
     37e:	0900                	addi	s0,sp,144
     380:	0002                	c.slli64	zero
     382:	0501                	addi	a0,a0,0
     384:	0005                	c.nop	1
     386:	0402                	c.slli64	s0
     388:	0601                	addi	a2,a2,0
     38a:	00090003          	lb	zero,0(s2)
        for(i = 0; i < size_b; ++i){
     38e:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     390:	0205                	addi	tp,tp,1
     392:	0306                	slli	t1,t1,0x1
}
     394:	0904                	addi	s1,sp,144
     396:	0004                	0x4
     398:	0501                	addi	a0,a0,0
     39a:	0305                	addi	t1,t1,1
     39c:	00080903          	lb	s2,0(a6)
     3a0:	0501                	addi	a0,a0,0
     3a2:	00030607          	0x30607
     3a6:	0009                	c.nop	2
     3a8:	0100                	addi	s0,sp,128
     3aa:	1d05                	addi	s10,s10,-31
     3ac:	0200                	addi	s0,sp,256
     3ae:	0104                	addi	s1,sp,128
     3b0:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b2:	0908                	addi	a0,sp,144
     3b4:	0014                	0x14
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3b6:	0501                	addi	a0,a0,0
     3b8:	0009                	c.nop	2
     3ba:	0402                	c.slli64	s0
     3bc:	0601                	addi	a2,a2,0
     3be:	00090003          	lb	zero,0(s2)
     3c2:	0100                	addi	s0,sp,128
     3c4:	1405                	addi	s0,s0,-31
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c6:	04090103          	lb	sp,64(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3ca:	0100                	addi	s0,sp,128
     3cc:	0d05                	addi	s10,s10,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ce:	0200                	addi	s0,sp,256
     3d0:	0304                	addi	s1,sp,384
        for (j = size_b -1; j >= 0; j = j-1){
     3d2:	0306                	slli	t1,t1,0x1
     3d4:	0964                	addi	s1,sp,156
     3d6:	0004                	0x4
     3d8:	0501                	addi	a0,a0,0
            product2[j] += line[i][j];
     3da:	0018                	0x18
     3dc:	0402                	c.slli64	s0
     3de:	01030603          	lb	a2,16(t1)
     3e2:	0009                	c.nop	2
     3e4:	0100                	addi	s0,sp,128
     3e6:	0200                	addi	s0,sp,256
     3e8:	0304                	addi	s1,sp,384
     3ea:	06097f03          	0x6097f03
        for(i = 0; i < size_b; ++i){
     3ee:	0100                	addi	s0,sp,128
     3f0:	0d05                	addi	s10,s10,1
    for(j = 0; j < size_a + size_b -1; ++j){
     3f2:	0200                	addi	s0,sp,256
     3f4:	0304                	addi	s1,sp,384
     3f6:	0306                	slli	t1,t1,0x1
        for(i = 0; i < size_b; ++i){
     3f8:	0901                	addi	s2,s2,0
     3fa:	0004                	0x4
    int v[size_N];
     3fc:	0501                	addi	a0,a0,0
     3fe:	0018                	0x18
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     400:	0402                	c.slli64	s0
    int v[size_N];
     402:	00030603          	lb	a2,0(t1)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     406:	0009                	c.nop	2
     408:	0100                	addi	s0,sp,128
     40a:	2c05                	jal	63a <polydiv+0x23e>
     40c:	0200                	addi	s0,sp,256
     40e:	0304                	addi	s1,sp,384
     410:	0306                	slli	t1,t1,0x1
     412:	097e                	slli	s2,s2,0x1f
     414:	0004                	0x4
     416:	0501                	addi	a0,a0,0
     418:	0014                	0x14
     41a:	0402                	c.slli64	s0
     41c:	0301                	addi	t1,t1,0
     41e:	0900                	addi	s0,sp,144
     420:	0004                	0x4
    int v[size_N];
     422:	0501                	addi	a0,a0,0
     424:	0009                	c.nop	2
     426:	0402                	c.slli64	s0
    int q[size_N];
     428:	0601                	addi	a2,a2,0
     42a:	00090003          	lb	zero,0(s2)
    int num_temp[size_N];
     42e:	0100                	addi	s0,sp,128
     430:	1d05                	addi	s10,s10,-31
    int denum_temp[size_D];
     432:	0200                	addi	s0,sp,256
     434:	0204                	addi	s1,sp,256
     436:	0306                	slli	t1,t1,0x1
     438:	097f                	0x97f
    int num_temp[size_N];
     43a:	0004                	0x4
    int denum_temp[size_D];
     43c:	0501                	addi	a0,a0,0
     43e:	0103060f          	0x103060f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     442:	0809                	addi	a6,a6,2
     444:	0100                	addi	s0,sp,128
     446:	0905                	addi	s2,s2,1
    int v[size_N];
     448:	0200                	addi	s0,sp,256
     44a:	0304                	addi	s1,sp,384
    int denum_temp[size_D];
     44c:	0306                	slli	t1,t1,0x1
     44e:	0908                	addi	a0,sp,144
     450:	0004                	0x4
    for (i = 0; i < size_N; ++i){
     452:	0501                	addi	a0,a0,0
     454:	0011                	c.nop	4
     456:	0402                	c.slli64	s0
    if(size_N == 106) {
     458:	00030603          	lb	a2,0(t1)
     45c:	0409                	addi	s0,s0,2
     45e:	0100                	addi	s0,sp,128
        array_mod(num_temp, mod, size_N - 1);
     460:	1405                	addi	s0,s0,-31
     462:	0200                	addi	s0,sp,256
     464:	0304                	addi	s1,sp,384
     466:	04090003          	lb	zero,64(s2)
        while(num_temp[size_N - 1] < 0){
     46a:	0100                	addi	s0,sp,128
     46c:	1105                	addi	sp,sp,-31
     46e:	0200                	addi	s0,sp,256
     470:	0304                	addi	s1,sp,384
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     472:	02090003          	lb	zero,32(s2)
     476:	0100                	addi	s0,sp,128
     478:	1d05                	addi	s10,s10,-31
    for (i = 0; i < size_N; ++i){
     47a:	0200                	addi	s0,sp,256
    for (i = 0; i < size_D; ++i) {
     47c:	0304                	addi	s1,sp,384
     47e:	02097f03          	0x2097f03
	array_mod(denum_temp,mod,size_D);
     482:	0100                	addi	s0,sp,128
     484:	1105                	addi	sp,sp,-31
     486:	0200                	addi	s0,sp,256
    for (i = 0; i < size_N; ++i){
     488:	0304                	addi	s1,sp,384
     48a:	02090103          	lb	sp,32(s2)
    for (i = size_D-1; i >= 0; i = i-1){
     48e:	0100                	addi	s0,sp,128
     490:	1d05                	addi	s10,s10,-31
     492:	0200                	addi	s0,sp,256
     494:	0304                	addi	s1,sp,384
     496:	0306                	slli	t1,t1,0x1
     498:	097f                	0x97f
    for (i = 0; i < size_N; ++i){
     49a:	0004                	0x4
     49c:	0501                	addi	a0,a0,0
        if ( (b_N*u)%mod == 1 )
     49e:	0009                	c.nop	2
    for (u = 0; u < mod; ++u){
     4a0:	0402                	c.slli64	s0
     4a2:	09070303          	lb	t1,144(a4) # 1090 <_endtext>
     4a6:	0002                	c.slli64	zero
        num_temp[i] = num[i];
     4a8:	0501                	addi	a0,a0,0
     4aa:	0011                	c.nop	4
     4ac:	0402                	c.slli64	s0
     4ae:	00030603          	lb	a2,0(t1)
     4b2:	0409                	addi	s0,s0,2
    for (i = 0; i < size_N; ++i){
     4b4:	0100                	addi	s0,sp,128
        num_temp[i] = num[i];
     4b6:	1405                	addi	s0,s0,-31
    for (i = 0; i < size_N; ++i){
     4b8:	0200                	addi	s0,sp,256
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4ba:	0304                	addi	s1,sp,384
     4bc:	04090003          	lb	zero,64(s2)
     4c0:	0100                	addi	s0,sp,128
        array_mod(num_temp, mod, size_N);
     4c2:	1105                	addi	sp,sp,-31
     4c4:	0200                	addi	s0,sp,256
     4c6:	0304                	addi	s1,sp,384
     4c8:	02090003          	lb	zero,32(s2)
        denum_temp[i] = denum[i];
     4cc:	0100                	addi	s0,sp,128
     4ce:	1d05                	addi	s10,s10,-31
     4d0:	0200                	addi	s0,sp,256
     4d2:	0304                	addi	s1,sp,384
     4d4:	02097f03          	0x2097f03
    for (i = 0; i < size_D; ++i) {
     4d8:	0100                	addi	s0,sp,128
        denum_temp[i] = denum[i];
     4da:	1105                	addi	sp,sp,-31
    for (i = 0; i < size_D; ++i) {
     4dc:	0200                	addi	s0,sp,256
        q[i] = 0;
     4de:	0304                	addi	s1,sp,384
     4e0:	02090103          	lb	sp,32(s2)
     4e4:	0100                	addi	s0,sp,128
        v[i] = 0;
     4e6:	1d05                	addi	s10,s10,-31
        q[i] = 0;
     4e8:	0200                	addi	s0,sp,256
     4ea:	0304                	addi	s1,sp,384
        v[i] = 0;
     4ec:	0306                	slli	t1,t1,0x1
     4ee:	097f                	0x97f
    for (i = 0; i < size_N; ++i){
     4f0:	0002                	c.slli64	zero
     4f2:	0501                	addi	a0,a0,0
        if( denum_temp[i] != 0 )
     4f4:	07030607          	0x7030607
    for (i = size_D-1; i >= 0; i = i-1){
     4f8:	0209                	addi	tp,tp,2
        if ( (b_N*u)%mod == 1 )
     4fa:	0100                	addi	s0,sp,128
     4fc:	1d05                	addi	s10,s10,-31
     4fe:	0200                	addi	s0,sp,256
     500:	0104                	addi	s1,sp,128
     502:	0306                	slli	t1,t1,0x1
    for (u = 0; u < mod; ++u){
     504:	0901                	addi	s2,s2,0
     506:	0002                	c.slli64	zero
        if( num_temp[i] != 0 )
     508:	0501                	addi	a0,a0,0
    for (i = size_N-1; i >= 0; i = i-1){
     50a:	0009                	c.nop	2
     50c:	0402                	c.slli64	s0
     50e:	0601                	addi	a2,a2,0
     510:	00090003          	lb	zero,0(s2)
     514:	0100                	addi	s0,sp,128
     516:	1405                	addi	s0,s0,-31
         if(size_N == 106) {
     518:	04090803          	lb	a6,64(s2)
     51c:	0100                	addi	s0,sp,128
        v[(d-d2)] = u*r_d;
     51e:	1105                	addi	sp,sp,-31
     520:	0200                	addi	s0,sp,256
     522:	0104                	addi	s1,sp,128
     524:	0306                	slli	t1,t1,0x1
     526:	00020907          	0x20907
     52a:	0501                	addi	a0,a0,0
         if(size_N == 106) {
     52c:	0005                	c.nop	1
     52e:	0402                	c.slli64	s0
            array_mod(v, mod, size_N - 1);
     530:	0601                	addi	a2,a2,0
     532:	00090003          	lb	zero,0(s2)
     536:	0100                	addi	s0,sp,128
     538:	0b05                	addi	s6,s6,1
            while(v[size_N - 1] < 0){
     53a:	0c090503          	lb	a0,192(s2)
     53e:	0100                	addi	s0,sp,128
     540:	1005                	c.nop	-31
            v[size_N - 1] = v[size_N - 1] % mod;
     542:	0200                	addi	s0,sp,256
     544:	0104                	addi	s1,sp,128
     546:	0306                	slli	t1,t1,0x1
     548:	0900                	addi	s0,sp,144
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     54a:	0002                	c.slli64	zero
     54c:	0501                	addi	a0,a0,0
     54e:	0005                	c.nop	1
     550:	0402                	c.slli64	s0
     552:	0601                	addi	a2,a2,0
     554:	00090003          	lb	zero,0(s2)
        if(size_N == 106) {
     558:	0100                	addi	s0,sp,128
     55a:	0306                	slli	t1,t1,0x1
     55c:	00040907          	0x40907
            array_mod(product, mod, size_N - 1);
     560:	0301                	addi	t1,t1,0
     562:	0902                	c.slli64	s2
     564:	000e                	c.slli	zero,0x3
     566:	0301                	addi	t1,t1,0
            while(product[size_N - 1] < 0){
     568:	0902                	c.slli64	s2
     56a:	0000                	unimp
     56c:	0501                	addi	a0,a0,0
     56e:	0601                	addi	a2,a2,0
     570:	00090103          	lb	sp,0(s2)
            product[size_N - 1] = product[size_N - 1] % mod;
     574:	0100                	addi	s0,sp,128
     576:	1105                	addi	sp,sp,-31
     578:	0200                	addi	s0,sp,256
     57a:	0304                	addi	s1,sp,384
     57c:	0306                	slli	t1,t1,0x1
     57e:	0962                	slli	s2,s2,0x18
        for (i = 0; i < size_N; ++i){
     580:	002a                	c.slli	zero,0xa
     582:	0501                	addi	a0,a0,0
 	if(size_N == 106) {
     584:	0025                	c.nop	9
     586:	0402                	c.slli64	s0
            array_mod(num_temp, mod, size_N - 1);
     588:	00030603          	lb	a2,0(t1)
     58c:	0409                	addi	s0,s0,2
     58e:	0100                	addi	s0,sp,128
     590:	2b05                	jal	ac0 <generate_keys+0x1a0>
            while(num_temp[size_N - 1] < 0){
     592:	0200                	addi	s0,sp,256
     594:	0304                	addi	s1,sp,384
     596:	04090003          	lb	zero,64(s2)
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     59a:	0100                	addi	s0,sp,128
     59c:	2e05                	jal	8cc <ext_euclid+0x1f6>
     59e:	0200                	addi	s0,sp,256
     5a0:	0304                	addi	s1,sp,384
     5a2:	02090003          	lb	zero,32(s2)
        for(i = 0; i < size_N; ++i){
     5a6:	0100                	addi	s0,sp,128
     5a8:	2a05                	jal	6d8 <ext_euclid+0x2>
 	if(size_N == 106) {
     5aa:	0200                	addi	s0,sp,256
     5ac:	0304                	addi	s1,sp,384
            array_mod(q, mod, size_N - 1);
     5ae:	06097f03          	0x6097f03
     5b2:	0100                	addi	s0,sp,128
     5b4:	2e05                	jal	8e4 <ext_euclid+0x20e>
     5b6:	0200                	addi	s0,sp,256
            while(q[size_N - 1] < 0){
     5b8:	0304                	addi	s1,sp,384
     5ba:	02090103          	lb	sp,32(s2)
     5be:	0100                	addi	s0,sp,128
            q[size_N - 1] = q[size_N - 1] % mod;
     5c0:	2505                	jal	be0 <generate_keys+0x2c0>
     5c2:	0200                	addi	s0,sp,256
     5c4:	0304                	addi	s1,sp,384
     5c6:	04090003          	lb	zero,64(s2)
        for (i = size_N-1; i >= 0; i = i-1){
     5ca:	0100                	addi	s0,sp,128
     5cc:	2805                	jal	5fc <polydiv+0x200>
     5ce:	0200                	addi	s0,sp,256
     5d0:	0304                	addi	s1,sp,384
     5d2:	0306                	slli	t1,t1,0x1
     5d4:	097f                	0x97f
     5d6:	0002                	c.slli64	zero
     5d8:	0501                	addi	a0,a0,0
                v[size_N - 1] = v[size_N - 1]+mod;
     5da:	0020                	addi	s0,sp,8
     5dc:	0402                	c.slli64	s0
     5de:	0301                	addi	t1,t1,0
     5e0:	0900                	addi	s0,sp,144
            array_mod(v, mod, size_N);
     5e2:	0000                	unimp
     5e4:	0501                	addi	a0,a0,0
     5e6:	000d                	c.nop	3
     5e8:	0402                	c.slli64	s0
     5ea:	0601                	addi	a2,a2,0
                product[size_N - 1] = product[size_N - 1]+mod;
     5ec:	00090003          	lb	zero,0(s2)
     5f0:	0100                	addi	s0,sp,128
     5f2:	2505                	jal	c12 <generate_keys+0x2f2>
            array_mod(product, mod, size_N);
     5f4:	0200                	addi	s0,sp,256
     5f6:	0204                	addi	s1,sp,256
     5f8:	0306                	slli	t1,t1,0x1
     5fa:	097f                	0x97f
     5fc:	0004                	0x4
     5fe:	0501                	addi	a0,a0,0
            num_temp[i] = num_temp[i] - product[i];
     600:	04020027          	0x4020027
     604:	0602                	c.slli64	a2
     606:	00090003          	lb	zero,0(s2)
        for (i = 0; i < size_N; ++i){
     60a:	0100                	addi	s0,sp,128
     60c:	1405                	addi	s0,s0,-31
            num_temp[i] = num_temp[i] - product[i];
     60e:	08090103          	lb	sp,128(s2)
     612:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     614:	1105                	addi	sp,sp,-31
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     616:	0200                	addi	s0,sp,256
     618:	0304                	addi	s1,sp,384
     61a:	0306                	slli	t1,t1,0x1
     61c:	0908                	addi	a0,sp,144
            array_mod(num_temp, mod, size_N);
     61e:	0004                	0x4
     620:	0501                	addi	a0,a0,0
     622:	0029                	c.nop	10
     624:	0402                	c.slli64	s0
     626:	00030603          	lb	a2,0(t1)
            q[i] = q[i] + v[i];
     62a:	0409                	addi	s0,s0,2
     62c:	0100                	addi	s0,sp,128
     62e:	2f05                	jal	d5e <ntru_deceypt+0xb4>
     630:	0200                	addi	s0,sp,256
        for(i = 0; i < size_N; ++i){
     632:	0304                	addi	s1,sp,384
     634:	04090003          	lb	zero,64(s2)
            q[i] = q[i] + v[i];
     638:	0100                	addi	s0,sp,128
     63a:	3205                	jal	ffffff5a <_stack_start+0xfffeff5a>
        for(i = 0; i < size_N; ++i){
     63c:	0200                	addi	s0,sp,256
                q[size_N - 1] = q[size_N - 1]+mod;
     63e:	0304                	addi	s1,sp,384
     640:	02090003          	lb	zero,32(s2)
     644:	0100                	addi	s0,sp,128
            array_mod(q, mod, size_N);
     646:	2a05                	jal	776 <ext_euclid+0xa0>
     648:	0200                	addi	s0,sp,256
     64a:	0304                	addi	s1,sp,384
     64c:	06097f03          	0x6097f03
            if( num_temp[i] != 0 )
     650:	0100                	addi	s0,sp,128
        for (i = size_N-1; i >= 0; i = i-1){
     652:	3205                	jal	ffffff72 <_stack_start+0xfffeff72>
     654:	0200                	addi	s0,sp,256
            v[i] = 0;
     656:	0304                	addi	s1,sp,384
     658:	02090103          	lb	sp,32(s2)
     65c:	0100                	addi	s0,sp,128
     65e:	2905                	jal	a8e <generate_keys+0x16e>
        for (i = 0; i < size_N; ++i){
     660:	0200                	addi	s0,sp,256
     662:	0304                	addi	s1,sp,384
     664:	04090003          	lb	zero,64(s2)
    while (d >= d2){
     668:	0100                	addi	s0,sp,128
    for(i = 0; i < size_N; ++i){
     66a:	2805                	jal	69a <polydiv+0x29e>
        result[i] = q[i];
     66c:	0200                	addi	s0,sp,256
     66e:	0304                	addi	s1,sp,384
     670:	0306                	slli	t1,t1,0x1
     672:	097f                	0x97f
    for(i = 0; i < size_N; ++i){
     674:	0002                	c.slli64	zero
     676:	0501                	addi	a0,a0,0
    for(i = size_N; i < (2*size_N); ++i){
     678:	0020                	addi	s0,sp,8
     67a:	0402                	c.slli64	s0
        result[i] = num_temp[i-size_N];
     67c:	0301                	addi	t1,t1,0
     67e:	0900                	addi	s0,sp,144
     680:	0000                	unimp
     682:	0501                	addi	a0,a0,0
    for(i = size_N; i < (2*size_N); ++i){
     684:	000d                	c.nop	3
     686:	0402                	c.slli64	s0
}
     688:	0601                	addi	a2,a2,0
     68a:	00090003          	lb	zero,0(s2)
     68e:	0100                	addi	s0,sp,128
     690:	2505                	jal	cb0 <ntru_deceypt+0x6>
     692:	0200                	addi	s0,sp,256
     694:	0204                	addi	s1,sp,256
     696:	0306                	slli	t1,t1,0x1
     698:	097f                	0x97f
     69a:	0004                	0x4
     69c:	0501                	addi	a0,a0,0
     69e:	04020027          	0x4020027
     6a2:	0602                	c.slli64	a2
     6a4:	00090003          	lb	zero,0(s2)
     6a8:	0100                	addi	s0,sp,128
     6aa:	0905                	addi	s2,s2,1
     6ac:	0200                	addi	s0,sp,256
     6ae:	0304                	addi	s1,sp,384
     6b0:	0306                	slli	t1,t1,0x1
        result[i] = q[i];
     6b2:	0909                	addi	s2,s2,2
     6b4:	0008                	0x8
     6b6:	0501                	addi	a0,a0,0
     6b8:	001d                	c.nop	7
     6ba:	0402                	c.slli64	s0
     6bc:	097f0303          	lb	t1,151(t5)
     6c0:	0008                	0x8
    for(i = 0; i < size_N; ++i){
     6c2:	0501                	addi	a0,a0,0
        result[i] = num_temp[i-size_N];
     6c4:	000d                	c.nop	3
     6c6:	0402                	c.slli64	s0
     6c8:	09070303          	lb	t1,144(a4)
     6cc:	0006                	c.slli	zero,0x1
     6ce:	0501                	addi	a0,a0,0
    for(i = size_N; i < (2*size_N); ++i){
     6d0:	0022                	c.slli	zero,0x8
     6d2:	0402                	c.slli64	s0
     6d4:	00030603          	lb	a2,0(t1)
    int ri_2[size]; // MX-ring poly, a
     6d8:	0009                	c.nop	2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6da:	0100                	addi	s0,sp,128
    int ri_2[size]; // MX-ring poly, a
     6dc:	1805                	addi	a6,a6,-31
     6de:	0200                	addi	s0,sp,256
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6e0:	0304                	addi	s1,sp,384
     6e2:	04090003          	lb	zero,64(s2)
     6e6:	0100                	addi	s0,sp,128
     6e8:	2205                	jal	808 <ext_euclid+0x132>
     6ea:	0200                	addi	s0,sp,256
     6ec:	0304                	addi	s1,sp,384
     6ee:	02090003          	lb	zero,32(s2)
     6f2:	0100                	addi	s0,sp,128
     6f4:	2005                	jal	714 <ext_euclid+0x3e>
     6f6:	0200                	addi	s0,sp,256
     6f8:	0304                	addi	s1,sp,384
     6fa:	04097f03          	0x4097f03
    int ri_2[size]; // MX-ring poly, a
     6fe:	0100                	addi	s0,sp,128
     700:	2205                	jal	820 <ext_euclid+0x14a>
    int ri_1[size]; // f-random poly, f[N] = 0, b
     702:	0200                	addi	s0,sp,256
     704:	0304                	addi	s1,sp,384
     706:	02090103          	lb	sp,32(s2)
    int ri[size];
     70a:	0100                	addi	s0,sp,128
     70c:	1805                	addi	a6,a6,-31
    int ti_1[size]; // ti_1[0] = 1
     70e:	0200                	addi	s0,sp,256
     710:	0304                	addi	s1,sp,384
     712:	06090003          	lb	zero,96(s2)
    int ti[size];
     716:	0100                	addi	s0,sp,128
     718:	2005                	jal	738 <ext_euclid+0x62>
    int qi_1[size];
     71a:	0200                	addi	s0,sp,256
     71c:	0304                	addi	s1,sp,384
     71e:	0306                	slli	t1,t1,0x1
    int temp[size];
     720:	097f                	0x97f
     722:	0006                	c.slli	zero,0x1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     724:	0501                	addi	a0,a0,0
     726:	0014                	0x14
    int ri_2[size]; // MX-ring poly, a
     728:	0402                	c.slli64	s0
     72a:	0301                	addi	t1,t1,0
    int temp[size];
     72c:	0900                	addi	s0,sp,144
    for (i = 0; i < size; ++i) {
     72e:	0000                	unimp
     730:	0501                	addi	a0,a0,0
        ti_2[i] = 0;
     732:	0009                	c.nop	2
     734:	0402                	c.slli64	s0
     736:	0601                	addi	a2,a2,0
     738:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size; ++i) {
     73c:	0100                	addi	s0,sp,128
    ti_1[0] = 1;
     73e:	2805                	jal	76e <ext_euclid+0x98>
     740:	0200                	addi	s0,sp,256
     742:	0204                	addi	s1,sp,256
        for (i = N + 1; i < (2 * N + 2); ++i) {
     744:	0306                	slli	t1,t1,0x1
     746:	097f                	0x97f
     748:	0004                	0x4
     74a:	0501                	addi	a0,a0,0
            ti[i] = ti_2[i] - temp[i];
     74c:	0103060f          	0x103060f
     750:	0609                	addi	a2,a2,2
     752:	0100                	addi	s0,sp,128
	array_mod(ri_2,mod,N+1);
     754:	4605                	li	a2,1
     756:	0306                	slli	t1,t1,0x1
     758:	090d                	addi	s2,s2,3
     75a:	0004                	0x4
	array_mod(ri_1,mod,N+1);
     75c:	0501                	addi	a0,a0,0
     75e:	0305                	addi	t1,t1,1
     760:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     764:	0501                	addi	a0,a0,0
     766:	061d                	addi	a2,a2,7
     768:	00090003          	lb	zero,0(s2)
     76c:	0100                	addi	s0,sp,128
     76e:	0905                	addi	s2,s2,1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     770:	08090003          	lb	zero,128(s2)
     774:	0100                	addi	s0,sp,128
     776:	4605                	li	a2,1
     778:	0c097d03          	0xc097d03
     77c:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     77e:	0905                	addi	s2,s2,1
     780:	12090303          	lb	t1,288(s2)
        array_mod(temp,mod,N+1);
     784:	0100                	addi	s0,sp,128
     786:	4605                	li	a2,1
     788:	04097d03          	0x4097d03
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     78c:	0100                	addi	s0,sp,128
     78e:	0905                	addi	s2,s2,1
     790:	00090303          	lb	t1,0(s2)
     794:	0100                	addi	s0,sp,128
     796:	04090303          	lb	t1,64(s2)
        for (i = 0; i < N + 1; ++i) {
     79a:	0100                	addi	s0,sp,128
     79c:	08097d03          	0x8097d03
	array_mod(qi_1,mod,size);
     7a0:	0100                	addi	s0,sp,128
     7a2:	02090303          	lb	t1,32(s2)
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7a6:	0100                	addi	s0,sp,128
     7a8:	04090103          	lb	sp,64(s2)
     7ac:	0100                	addi	s0,sp,128
     7ae:	06097f03          	0x6097f03
     7b2:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     7b4:	02090103          	lb	sp,32(s2)
     7b8:	0100                	addi	s0,sp,128
	array_mod(temp,mod,size);
     7ba:	04097c03          	0x4097c03
     7be:	0100                	addi	s0,sp,128
     7c0:	0505                	addi	a0,a0,1
        for (i = 0; i < N + 1; ++i) {
     7c2:	0306                	slli	t1,t1,0x1
     7c4:	0901                	addi	s2,s2,0
     7c6:	0004                	0x4
     7c8:	0301                	addi	t1,t1,0
        array_mod(ti,mod,N+1);
     7ca:	0901                	addi	s2,s2,0
     7cc:	0000                	unimp
     7ce:	0301                	addi	t1,t1,0
     7d0:	0901                	addi	s2,s2,0
        for (i = 0; i < N + 1; ++i) {
     7d2:	0000                	unimp
        controlR = 0;
     7d4:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     7d6:	0609                	addi	a2,a2,2
     7d8:	00090003          	lb	zero,0(s2)
    while (controlR != 0) {
     7dc:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     7de:	0505                	addi	a0,a0,1
            if (((ri_2[0] * j) % mod) == 1)
     7e0:	0306                	slli	t1,t1,0x1
        for (j = 0; j < mod; ++j) {
     7e2:	0901                	addi	s2,s2,0
     7e4:	0004                	0x4
     7e6:	0501                	addi	a0,a0,0
     7e8:	0609                	addi	a2,a2,2
     7ea:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     7ee:	0100                	addi	s0,sp,128
     7f0:	0505                	addi	a0,a0,1
    }
     7f2:	0306                	slli	t1,t1,0x1
     7f4:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     7f8:	0501                	addi	a0,a0,0
     7fa:	0614                	addi	a3,sp,768
     7fc:	00090203          	lb	tp,0(s2)
     800:	0100                	addi	s0,sp,128
     802:	0505                	addi	a0,a0,1
     804:	06097e03          	0x6097e03
     808:	0100                	addi	s0,sp,128
     80a:	0c05                	addi	s8,s8,1
     80c:	02090003          	lb	zero,32(s2)
     810:	0100                	addi	s0,sp,128
     812:	1905                	addi	s2,s2,-31
     814:	02090303          	lb	t1,32(s2)
     818:	0100                	addi	s0,sp,128
     81a:	1105                	addi	sp,sp,-31
        ri_2[i] = polyR[i];
     81c:	0200                	addi	s0,sp,256
     81e:	0104                	addi	s1,sp,128
     820:	0306                	slli	t1,t1,0x1
     822:	097d                	addi	s2,s2,31
     824:	0008                	0x8
     826:	0501                	addi	a0,a0,0
    for (i = 0; i < size; ++i) {
     828:	0005                	c.nop	1
        ri_2[i] = polyR[i];
     82a:	0402                	c.slli64	s0
     82c:	0601                	addi	a2,a2,0
        ri_1[i] = polyf[i];
     82e:	00090003          	lb	zero,0(s2)
     832:	0100                	addi	s0,sp,128
     834:	0b05                	addi	s6,s6,1
     836:	04090703          	lb	a4,64(s2)
     83a:	0100                	addi	s0,sp,128
     83c:	1005                	c.nop	-31
        ti_2[i] = 0;
     83e:	0200                	addi	s0,sp,256
     840:	0104                	addi	s1,sp,128
     842:	0306                	slli	t1,t1,0x1
     844:	0900                	addi	s0,sp,144
        ti_1[i] = 0;
     846:	0002                	c.slli64	zero
     848:	0501                	addi	a0,a0,0
     84a:	0005                	c.nop	1
     84c:	0402                	c.slli64	s0
    for (i = 0; i < size; ++i) {
     84e:	0601                	addi	a2,a2,0
     850:	00090003          	lb	zero,0(s2)
            ri[i - (N + 1)] = res[i];
     854:	0100                	addi	s0,sp,128
     856:	0b05                	addi	s6,s6,1
     858:	04090503          	lb	a0,64(s2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     85c:	0100                	addi	s0,sp,128
            ri[i - (N + 1)] = res[i];
     85e:	1005                	c.nop	-31
     860:	0200                	addi	s0,sp,256
        for (i = N + 1; i < (2 * N + 2); ++i) {
     862:	0104                	addi	s1,sp,128
            temp[i] = ri_2[i] - ri[i];
     864:	0306                	slli	t1,t1,0x1
     866:	0900                	addi	s0,sp,144
     868:	0002                	c.slli64	zero
     86a:	0501                	addi	a0,a0,0
     86c:	0005                	c.nop	1
     86e:	0402                	c.slli64	s0
     870:	0601                	addi	a2,a2,0
     872:	00090003          	lb	zero,0(s2)
     876:	0100                	addi	s0,sp,128
     878:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     87a:	0906                	slli	s2,s2,0x1
     87c:	0004                	0x4
            qi_1[i] = res1[i];
     87e:	0501                	addi	a0,a0,0
     880:	00030607          	0x30607
     884:	0009                	c.nop	2
     886:	0100                	addi	s0,sp,128
     888:	1d05                	addi	s10,s10,-31
        for (i = 0; i < N + 1; ++i) {
     88a:	0200                	addi	s0,sp,256
            qi_1[i] = res1[i];
     88c:	0104                	addi	s1,sp,128
        for (i = 0; i < N + 1; ++i) {
     88e:	0306                	slli	t1,t1,0x1
            temp[i] = res2[i];
     890:	0908                	addi	a0,sp,144
     892:	000e                	c.slli	zero,0x3
     894:	0501                	addi	a0,a0,0
     896:	0009                	c.nop	2
     898:	0402                	c.slli64	s0
     89a:	0601                	addi	a2,a2,0
        for (i = 0; i < N + 1; ++i) {
     89c:	00090003          	lb	zero,0(s2)
     8a0:	0100                	addi	s0,sp,128
            ti[i] = ti_2[i] - temp[i];
     8a2:	1405                	addi	s0,s0,-31
     8a4:	04090103          	lb	sp,64(s2)
     8a8:	0100                	addi	s0,sp,128
     8aa:	0d05                	addi	s10,s10,1
     8ac:	0200                	addi	s0,sp,256
     8ae:	0304                	addi	s1,sp,384
     8b0:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     8b2:	00040967          	jalr	s2,s0 # fffe0000 <_stack_start+0xfffd0000>
            ti[i] = ti_2[i] - temp[i];
     8b6:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     8b8:	0019                	c.nop	6
     8ba:	0402                	c.slli64	s0
            ri_2[i] = ri_1[i];
     8bc:	01030603          	lb	a2,16(t1)
     8c0:	0009                	c.nop	2
     8c2:	0100                	addi	s0,sp,128
     8c4:	1805                	addi	a6,a6,-31
        for (i = 0; i < N + 1; ++i) {
     8c6:	0200                	addi	s0,sp,256
            ri_2[i] = ri_1[i];
     8c8:	0304                	addi	s1,sp,384
            ri_1[i] = ri[i];
     8ca:	06097f03          	0x6097f03
     8ce:	0100                	addi	s0,sp,128
            ti_2[i] = ti_1[i];
     8d0:	0d05                	addi	s10,s10,1
     8d2:	0200                	addi	s0,sp,256
            ri_1[i] = ri[i];
     8d4:	0304                	addi	s1,sp,384
            ti_2[i] = ti_1[i];
     8d6:	0306                	slli	t1,t1,0x1
     8d8:	0901                	addi	s2,s2,0
     8da:	0004                	0x4
     8dc:	0501                	addi	a0,a0,0
            controlR += ri[i];
     8de:	0019                	c.nop	6
            ti_2[i] = ti_1[i];
     8e0:	0402                	c.slli64	s0
     8e2:	00030603          	lb	a2,0(t1)
            ti_1[i] = ti[i];
     8e6:	0009                	c.nop	2
     8e8:	0100                	addi	s0,sp,128
     8ea:	2c05                	jal	b1a <generate_keys+0x1fa>
            qi_1[i] = 0;
     8ec:	0200                	addi	s0,sp,256
     8ee:	0304                	addi	s1,sp,384
     8f0:	0306                	slli	t1,t1,0x1
     8f2:	097e                	slli	s2,s2,0x1f
        for (i = 0; i < N + 1; ++i) {
     8f4:	0004                	0x4
     8f6:	0501                	addi	a0,a0,0
            if (((ri_2[0] * j) % mod) == 1)
     8f8:	0014                	0x14
     8fa:	0402                	c.slli64	s0
     8fc:	0301                	addi	t1,t1,0
     8fe:	0900                	addi	s0,sp,144
     900:	0004                	0x4
     902:	0501                	addi	a0,a0,0
     904:	0009                	c.nop	2
     906:	0402                	c.slli64	s0
        for (j = 0; j < mod; ++j) {
     908:	0601                	addi	a2,a2,0
     90a:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     90e:	0100                	addi	s0,sp,128
     910:	1d05                	addi	s10,s10,-31
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     912:	0200                	addi	s0,sp,256
     914:	0204                	addi	s1,sp,256
     916:	0306                	slli	t1,t1,0x1
     918:	097f                	0x97f
     91a:	0004                	0x4
     91c:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     91e:	0103060f          	0x103060f
int* generate_keys(int N, int p, int q){
     922:	0809                	addi	a6,a6,2
     924:	0100                	addi	s0,sp,128
     926:	0905                	addi	s2,s2,1
     928:	0200                	addi	s0,sp,256
     92a:	0304                	addi	s1,sp,384
     92c:	0306                	slli	t1,t1,0x1
     92e:	00040907          	0x40907
     932:	0501                	addi	a0,a0,0
     934:	0011                	c.nop	4
     936:	0402                	c.slli64	s0
     938:	00030603          	lb	a2,0(t1)
     93c:	0409                	addi	s0,s0,2
     93e:	0100                	addi	s0,sp,128
     940:	1405                	addi	s0,s0,-31
     942:	0200                	addi	s0,sp,256
     944:	0304                	addi	s1,sp,384
     946:	04090003          	lb	zero,64(s2)
     94a:	0100                	addi	s0,sp,128
     94c:	1105                	addi	sp,sp,-31
     94e:	0200                	addi	s0,sp,256
     950:	0304                	addi	s1,sp,384
     952:	02090003          	lb	zero,32(s2)
     956:	0100                	addi	s0,sp,128
     958:	1c05                	addi	s8,s8,-31
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     95a:	0200                	addi	s0,sp,256
     95c:	0304                	addi	s1,sp,384
     95e:	02097f03          	0x2097f03
     962:	0100                	addi	s0,sp,128
     964:	1105                	addi	sp,sp,-31
     966:	0200                	addi	s0,sp,256
     968:	0304                	addi	s1,sp,384
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     96a:	02090103          	lb	sp,32(s2)
     96e:	0100                	addi	s0,sp,128
     970:	1c05                	addi	s8,s8,-31
     972:	0200                	addi	s0,sp,256
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     974:	0304                	addi	s1,sp,384
     976:	0306                	slli	t1,t1,0x1
     978:	097f                	0x97f
     97a:	0004                	0x4
     97c:	0501                	addi	a0,a0,0
     97e:	0009                	c.nop	2
     980:	0402                	c.slli64	s0
     982:	09060303          	lb	t1,144(a2) # 19090 <_stack_start+0x9090>
     986:	0002                	c.slli64	zero
     988:	0501                	addi	a0,a0,0
     98a:	0011                	c.nop	4
     98c:	0402                	c.slli64	s0
     98e:	00030603          	lb	a2,0(t1)
     992:	0409                	addi	s0,s0,2
     994:	0100                	addi	s0,sp,128
     996:	1405                	addi	s0,s0,-31
     998:	0200                	addi	s0,sp,256
     99a:	0304                	addi	s1,sp,384
     99c:	04090003          	lb	zero,64(s2)
     9a0:	0100                	addi	s0,sp,128
     9a2:	1105                	addi	sp,sp,-31
     9a4:	0200                	addi	s0,sp,256
     9a6:	0304                	addi	s1,sp,384
     9a8:	02090003          	lb	zero,32(s2)
     9ac:	0100                	addi	s0,sp,128
     9ae:	1c05                	addi	s8,s8,-31
     9b0:	0200                	addi	s0,sp,256
     9b2:	0304                	addi	s1,sp,384
     9b4:	02097f03          	0x2097f03
     9b8:	0100                	addi	s0,sp,128
     9ba:	1105                	addi	sp,sp,-31
     9bc:	0200                	addi	s0,sp,256
     9be:	0304                	addi	s1,sp,384
     9c0:	02090103          	lb	sp,32(s2)
     9c4:	0100                	addi	s0,sp,128
     9c6:	1c05                	addi	s8,s8,-31
     9c8:	0200                	addi	s0,sp,256
     9ca:	0304                	addi	s1,sp,384
     9cc:	0306                	slli	t1,t1,0x1
     9ce:	097f                	0x97f
     9d0:	0004                	0x4
     9d2:	0501                	addi	a0,a0,0
     9d4:	0011                	c.nop	4
     9d6:	0402                	c.slli64	s0
     9d8:	09090303          	lb	t1,144(s2)
     9dc:	0002                	c.slli64	zero
     9de:	0501                	addi	a0,a0,0
    int polyR[N+1];
     9e0:	0025                	c.nop	9
     9e2:	0402                	c.slli64	s0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9e4:	00030603          	lb	a2,0(t1)
    int polyR[N+1];
     9e8:	0409                	addi	s0,s0,2
     9ea:	0100                	addi	s0,sp,128
     9ec:	2b05                	jal	f1c <memset+0x56>
     9ee:	0200                	addi	s0,sp,256
     9f0:	0304                	addi	s1,sp,384
     9f2:	04090003          	lb	zero,64(s2)
    polyR[N] = 1;
     9f6:	0100                	addi	s0,sp,128
     9f8:	2e05                	jal	d28 <ntru_deceypt+0x7e>
     9fa:	0200                	addi	s0,sp,256
     9fc:	0304                	addi	s1,sp,384
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9fe:	02090003          	lb	zero,32(s2)
     a02:	0100                	addi	s0,sp,128
     a04:	2a05                	jal	b34 <generate_keys+0x214>
     a06:	0200                	addi	s0,sp,256
     a08:	0304                	addi	s1,sp,384
     a0a:	06097f03          	0x6097f03
     a0e:	0100                	addi	s0,sp,128
     a10:	2e05                	jal	d40 <ntru_deceypt+0x96>
     a12:	0200                	addi	s0,sp,256
     a14:	0304                	addi	s1,sp,384
     a16:	02090103          	lb	sp,32(s2)
     a1a:	0100                	addi	s0,sp,128
     a1c:	2505                	jal	103c <main+0xce>
     a1e:	0200                	addi	s0,sp,256
     a20:	0304                	addi	s1,sp,384
     a22:	04090003          	lb	zero,64(s2)
     a26:	0100                	addi	s0,sp,128
     a28:	2805                	jal	a58 <generate_keys+0x138>
     a2a:	0200                	addi	s0,sp,256
     a2c:	0304                	addi	s1,sp,384
     a2e:	0306                	slli	t1,t1,0x1
     a30:	097f                	0x97f
     a32:	0002                	c.slli64	zero
     a34:	0501                	addi	a0,a0,0
     a36:	0020                	addi	s0,sp,8
     a38:	0402                	c.slli64	s0
     a3a:	0301                	addi	t1,t1,0
     a3c:	0900                	addi	s0,sp,144
     a3e:	0000                	unimp
     a40:	0501                	addi	a0,a0,0
     a42:	000d                	c.nop	3
     a44:	0402                	c.slli64	s0
     a46:	0601                	addi	a2,a2,0
     a48:	00090003          	lb	zero,0(s2)
     a4c:	0100                	addi	s0,sp,128
     a4e:	2505                	jal	106e <main+0x100>
     a50:	0200                	addi	s0,sp,256
     a52:	0204                	addi	s1,sp,256
     a54:	0306                	slli	t1,t1,0x1
     a56:	097f                	0x97f
     a58:	0004                	0x4
     a5a:	0501                	addi	a0,a0,0
     a5c:	04020027          	0x4020027
     a60:	0602                	c.slli64	a2
    polyR[0] = -1;
     a62:	00090003          	lb	zero,0(s2)
    for(i = 1; i < N; ++i){
     a66:	0100                	addi	s0,sp,128
     a68:	1d05                	addi	s10,s10,-31
     a6a:	0200                	addi	s0,sp,256
     a6c:	0104                	addi	s1,sp,128
    for (i = N; i < 55; ++i ){
     a6e:	0306                	slli	t1,t1,0x1
     a70:	0900                	addi	s0,sp,144
     a72:	0006                	c.slli	zero,0x1
     a74:	0501                	addi	a0,a0,0
    for(i = 0; i < N; ++i){
     a76:	0009                	c.nop	2
        random_keys[i] = f[i];
     a78:	0402                	c.slli64	s0
     a7a:	0601                	addi	a2,a2,0
     a7c:	00090003          	lb	zero,0(s2)
    for(i = 0; i < N; ++i){
     a80:	0100                	addi	s0,sp,128
     a82:	0f05                	addi	t5,t5,1
     a84:	0c091003          	lh	zero,192(s2)
    for(i = N; i < (2*N); ++i){
     a88:	0100                	addi	s0,sp,128
     a8a:	1005                	c.nop	-31
     a8c:	0200                	addi	s0,sp,256
     a8e:	0104                	addi	s1,sp,128
        random_keys[i] = g[i-N];
     a90:	0306                	slli	t1,t1,0x1
     a92:	097f                	0x97f
     a94:	0002                	c.slli64	zero
     a96:	0501                	addi	a0,a0,0
    for(i = N; i < (2*N); ++i){
     a98:	0005                	c.nop	1
     a9a:	0402                	c.slli64	s0
    for(i = (2*N); i < (3*N); ++i){
     a9c:	0601                	addi	a2,a2,0
     a9e:	00090003          	lb	zero,0(s2)
    fp = ext_euclid(polyR, f, (N+1), p);
     aa2:	0100                	addi	s0,sp,128
     aa4:	0306                	slli	t1,t1,0x1
     aa6:	00040907          	0x40907
     aaa:	0301                	addi	t1,t1,0
     aac:	0902                	c.slli64	s2
    for(i = (2*N); i < (3*N); ++i){
     aae:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     ab0:	0501                	addi	a0,a0,0
     ab2:	0601                	addi	a2,a2,0
     ab4:	00090103          	lb	sp,0(s2)
    for(i = (2*N); i < (3*N); ++i){
     ab8:	0100                	addi	s0,sp,128
     aba:	1405                	addi	s0,s0,-31
    fq = ext_euclid(polyR, f, (N+1), q);
     abc:	1e096803          	0x1e096803
     ac0:	0100                	addi	s0,sp,128
     ac2:	1105                	addi	sp,sp,-31
     ac4:	0200                	addi	s0,sp,256
     ac6:	0304                	addi	s1,sp,384
    for(i = (3*N); i < (4*N); ++i){
     ac8:	0306                	slli	t1,t1,0x1
     aca:	0908                	addi	a0,sp,144
     acc:	0004                	0x4
     ace:	0501                	addi	a0,a0,0
        random_keys[i] = fq[i-(3*N)];
     ad0:	0029                	c.nop	10
     ad2:	0402                	c.slli64	s0
     ad4:	00030603          	lb	a2,0(t1)
    for(i = (3*N); i < (4*N); ++i){
     ad8:	0409                	addi	s0,s0,2
     ada:	0100                	addi	s0,sp,128
    fg = polymult2(fq, N, g, N, 0);
     adc:	2f05                	jal	120c <_endtext+0x17c>
     ade:	0200                	addi	s0,sp,256
     ae0:	0304                	addi	s1,sp,384
     ae2:	04090003          	lb	zero,64(s2)
     ae6:	0100                	addi	s0,sp,128
    for(i = 0; i < (2*N-1); ++i){
     ae8:	3205                	jal	408 <polydiv+0xc>
     aea:	0200                	addi	s0,sp,256
     aec:	0304                	addi	s1,sp,384
     aee:	02090003          	lb	zero,32(s2)
     af2:	0100                	addi	s0,sp,128
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     af4:	2a05                	jal	c24 <ntru_encyrpt+0x10>
     af6:	0200                	addi	s0,sp,256
     af8:	0304                	addi	s1,sp,384
     afa:	06097f03          	0x6097f03
    for(i = (4*N); i < (5*N); ++i){
     afe:	0100                	addi	s0,sp,128
     b00:	3205                	jal	420 <polydiv+0x24>
     b02:	0200                	addi	s0,sp,256
     b04:	0304                	addi	s1,sp,384
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b06:	02090103          	lb	sp,32(s2)
     b0a:	0100                	addi	s0,sp,128
     b0c:	2905                	jal	f3c <memset+0x76>
    for(i = (4*N); i < (5*N); ++i){
     b0e:	0200                	addi	s0,sp,256
     b10:	0304                	addi	s1,sp,384
     b12:	04090003          	lb	zero,64(s2)
    for(i = (5*N); i < (6*N+1); ++i){
     b16:	0100                	addi	s0,sp,128
        random_keys[i] = polyR[i-(5*N)];
     b18:	2805                	jal	b48 <generate_keys+0x228>
     b1a:	0200                	addi	s0,sp,256
     b1c:	0304                	addi	s1,sp,384
     b1e:	0306                	slli	t1,t1,0x1
    for(i = (5*N); i < (6*N+1); ++i){
     b20:	097f                	0x97f
     b22:	0002                	c.slli64	zero
     b24:	0501                	addi	a0,a0,0
     b26:	0020                	addi	s0,sp,8
     b28:	0402                	c.slli64	s0
     b2a:	0301                	addi	t1,t1,0
}
     b2c:	0900                	addi	s0,sp,144
     b2e:	0000                	unimp
     b30:	0501                	addi	a0,a0,0
     b32:	000d                	c.nop	3
     b34:	0402                	c.slli64	s0
     b36:	0601                	addi	a2,a2,0
     b38:	00090003          	lb	zero,0(s2)
     b3c:	0100                	addi	s0,sp,128
     b3e:	2505                	jal	115e <_endtext+0xce>
     b40:	0200                	addi	s0,sp,256
     b42:	0204                	addi	s1,sp,256
     b44:	0306                	slli	t1,t1,0x1
     b46:	097f                	0x97f
     b48:	0004                	0x4
     b4a:	0501                	addi	a0,a0,0
     b4c:	04020027          	0x4020027
     b50:	0602                	c.slli64	a2
     b52:	00090003          	lb	zero,0(s2)
     b56:	0100                	addi	s0,sp,128
     b58:	0d05                	addi	s10,s10,1
     b5a:	0200                	addi	s0,sp,256
     b5c:	0304                	addi	s1,sp,384
     b5e:	0306                	slli	t1,t1,0x1
     b60:	090a                	slli	s2,s2,0x2
     b62:	0008                	0x8
     b64:	0501                	addi	a0,a0,0
     b66:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     b6a:	00030603          	lb	a2,0(t1)
        polyR[i] = 0;
     b6e:	0009                	c.nop	2
     b70:	0100                	addi	s0,sp,128
     b72:	1905                	addi	s2,s2,-31
     b74:	0200                	addi	s0,sp,256
    for(i = 1; i < N; ++i){
     b76:	0304                	addi	s1,sp,384
     b78:	04090003          	lb	zero,64(s2)
        f[i] = 0;
     b7c:	0100                	addi	s0,sp,128
     b7e:	2005                	jal	b9e <generate_keys+0x27e>
     b80:	0200                	addi	s0,sp,256
     b82:	0304                	addi	s1,sp,384
     b84:	02097f03          	0x2097f03
        g[i] = 0;
     b88:	0100                	addi	s0,sp,128
     b8a:	2305                	jal	10aa <_endtext+0x1a>
     b8c:	0200                	addi	s0,sp,256
     b8e:	0304                	addi	s1,sp,384
     b90:	02090103          	lb	sp,32(s2)
    for (i = N; i < 55; ++i ){
     b94:	0100                	addi	s0,sp,128
        random_keys[i] = f[i];
     b96:	1905                	addi	s2,s2,-31
     b98:	0200                	addi	s0,sp,256
     b9a:	0304                	addi	s1,sp,384
     b9c:	06090003          	lb	zero,96(s2)
     ba0:	0100                	addi	s0,sp,128
     ba2:	2005                	jal	bc2 <generate_keys+0x2a2>
     ba4:	0200                	addi	s0,sp,256
    for(i = 0; i < N; ++i){
     ba6:	0304                	addi	s1,sp,384
        random_keys[i] = f[i];
     ba8:	0306                	slli	t1,t1,0x1
    for(i = 0; i < N; ++i){
     baa:	097f                	0x97f
        random_keys[i] = g[i-N];
     bac:	0006                	c.slli	zero,0x1
     bae:	0501                	addi	a0,a0,0
     bb0:	0014                	0x14
     bb2:	0402                	c.slli64	s0
     bb4:	0301                	addi	t1,t1,0
    for(i = N; i < (2*N); ++i){
     bb6:	0900                	addi	s0,sp,144
     bb8:	0000                	unimp
     bba:	0501                	addi	a0,a0,0
        random_keys[i] = fp[i-(2*N)];
     bbc:	0009                	c.nop	2
     bbe:	0402                	c.slli64	s0
     bc0:	0601                	addi	a2,a2,0
     bc2:	00090003          	lb	zero,0(s2)
    for(i = (2*N); i < (3*N); ++i){
     bc6:	0100                	addi	s0,sp,128
     bc8:	2805                	jal	bf8 <generate_keys+0x2d8>
     bca:	0200                	addi	s0,sp,256
        random_keys[i] = fq[i-(3*N)];
     bcc:	0204                	addi	s1,sp,256
     bce:	0306                	slli	t1,t1,0x1
     bd0:	097f                	0x97f
     bd2:	0004                	0x4
     bd4:	0501                	addi	a0,a0,0
     bd6:	0103060f          	0x103060f
    for(i = (3*N); i < (4*N); ++i){
     bda:	0609                	addi	a2,a2,2
        random_keys[i] = fq[i-(3*N)];
     bdc:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     bde:	4305                	li	t1,1
        fg[i] = fg[i]*p;
     be0:	0306                	slli	t1,t1,0x1
    for(i = 0; i < (2*N-1); ++i){
     be2:	0004090b          	0x4090b
        fg[i] = fg[i]*p;
     be6:	0501                	addi	a0,a0,0
     be8:	0305                	addi	t1,t1,1
     bea:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    for(i = 0; i < (2*N-1); ++i){
     bee:	0301                	addi	t1,t1,0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bf0:	0901                	addi	s2,s2,0
     bf2:	0000                	unimp
     bf4:	0301                	addi	t1,t1,0
     bf6:	0902                	c.slli64	s2
     bf8:	0000                	unimp
     bfa:	0501                	addi	a0,a0,0
    for(i = (4*N); i < (5*N); ++i){
     bfc:	0609                	addi	a2,a2,2
     bfe:	00090003          	lb	zero,0(s2)
        random_keys[i] = polyR[i-(5*N)];
     c02:	0100                	addi	s0,sp,128
     c04:	4305                	li	t1,1
     c06:	04097a03          	0x4097a03
     c0a:	0100                	addi	s0,sp,128
     c0c:	0905                	addi	s2,s2,1
    for(i = (5*N); i < (6*N+1); ++i){
     c0e:	02090603          	lb	a2,32(s2)
     c12:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c14:	4305                	li	t1,1
     c16:	04097a03          	0x4097a03
     c1a:	0100                	addi	s0,sp,128
     c1c:	0905                	addi	s2,s2,1
     c1e:	1c090603          	lb	a2,448(s2)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c22:	0100                	addi	s0,sp,128
     c24:	06090103          	lb	sp,96(s2)
     c28:	0100                	addi	s0,sp,128
     c2a:	06090203          	lb	tp,96(s2)
     c2e:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c30:	04090103          	lb	sp,64(s2)
     c34:	0100                	addi	s0,sp,128
     c36:	08097f03          	0x8097f03
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c3a:	0100                	addi	s0,sp,128
    temp = polymult(public_key,N,random_val,48,q,0);
     c3c:	02090103          	lb	sp,32(s2)
     c40:	0100                	addi	s0,sp,128
     c42:	4305                	li	t1,1
     c44:	04097603          	0x4097603
     c48:	0100                	addi	s0,sp,128
     c4a:	0905                	addi	s2,s2,1
     c4c:	08090603          	lb	a2,128(s2)
    for(i = 0; i < 48; ++i){
     c50:	0100                	addi	s0,sp,128
     c52:	0505                	addi	a0,a0,1
        temp[i] = temp[i] + message[i];
     c54:	0306                	slli	t1,t1,0x1
     c56:	0901                	addi	s2,s2,0
     c58:	0004                	0x4
     c5a:	0301                	addi	t1,t1,0
     c5c:	0901                	addi	s2,s2,0
     c5e:	0000                	unimp
     c60:	0301                	addi	t1,t1,0
     c62:	0901                	addi	s2,s2,0
     c64:	0000                	unimp
    for(i = 0; i < 48; ++i){
     c66:	0301                	addi	t1,t1,0
     c68:	0901                	addi	s2,s2,0
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c6a:	0000                	unimp
     c6c:	0501                	addi	a0,a0,0
     c6e:	0609                	addi	a2,a2,2
     c70:	00090003          	lb	zero,0(s2)
     c74:	0100                	addi	s0,sp,128
     c76:	0505                	addi	a0,a0,1
     c78:	0306                	slli	t1,t1,0x1
     c7a:	0904                	addi	s1,sp,144
    for(i = (2*N); i < (3*N); ++i){
     c7c:	0006                	c.slli	zero,0x1
     c7e:	0501                	addi	a0,a0,0
     c80:	060c                	addi	a1,sp,768
     c82:	00090003          	lb	zero,0(s2)
     c86:	0100                	addi	s0,sp,128
}
     c88:	1105                	addi	sp,sp,-31
     c8a:	0200                	addi	s0,sp,256
     c8c:	0104                	addi	s1,sp,128
     c8e:	0306                	slli	t1,t1,0x1
     c90:	0900                	addi	s0,sp,144
     c92:	0002                	c.slli64	zero
     c94:	0501                	addi	a0,a0,0
     c96:	0005                	c.nop	1
        CT[i-(2*N)] = CT[i];
     c98:	0402                	c.slli64	s0
     c9a:	0601                	addi	a2,a2,0
     c9c:	00090003          	lb	zero,0(s2)
    for(i = (2*N); i < (3*N); ++i){
     ca0:	0100                	addi	s0,sp,128
     ca2:	0306                	slli	t1,t1,0x1
        CT[i-(2*N)] = CT[i];
     ca4:	0904                	addi	s1,sp,144
     ca6:	0004                	0x4
    for(i = (2*N); i < (3*N); ++i){
     ca8:	0501                	addi	a0,a0,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     caa:	00030607          	0x30607
     cae:	0009                	c.nop	2
     cb0:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb2:	0905                	addi	s2,s2,1
     cb4:	0306                	slli	t1,t1,0x1
     cb6:	0901                	addi	s2,s2,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb8:	0008                	0x8
     cba:	0301                	addi	t1,t1,0
     cbc:	0901                	addi	s2,s2,0
     cbe:	000a                	c.slli	zero,0x2
     cc0:	0501                	addi	a0,a0,0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc2:	030e                	slli	t1,t1,0x3
     cc4:	0900                	addi	s0,sp,144
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc6:	0000                	unimp
     cc8:	0501                	addi	a0,a0,0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cca:	00030617          	auipc	a2,0x30
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cce:	0009                	c.nop	2
     cd0:	0100                	addi	s0,sp,128
     cd2:	0e05                	addi	t3,t3,1
     cd4:	04090003          	lb	zero,64(s2)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd8:	0100                	addi	s0,sp,128
     cda:	0905                	addi	s2,s2,1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cdc:	0306                	slli	t1,t1,0x1
     cde:	00040903          	lb	s2,0(s0)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ce2:	0501                	addi	a0,a0,0
     ce4:	0635                	addi	a2,a2,13
     ce6:	00090003          	lb	zero,0(s2)
     cea:	0100                	addi	s0,sp,128
     cec:	1e05                	addi	t3,t3,-31
     cee:	04090003          	lb	zero,64(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf2:	0100                	addi	s0,sp,128
     cf4:	0c05                	addi	s8,s8,1
     cf6:	0200                	addi	s0,sp,256
     cf8:	0104                	addi	s1,sp,128
     cfa:	04097703          	0x4097703
        if(a2[i] <= q/2)
     cfe:	0100                	addi	s0,sp,128
     d00:	1105                	addi	sp,sp,-31
    for (i = 0; i < N; ++i){
     d02:	0200                	addi	s0,sp,256
     d04:	0104                	addi	s1,sp,128
     d06:	0306                	slli	t1,t1,0x1
    c = polymult2(secret_key_fp,N,a2,N,0);
     d08:	0911                	addi	s2,s2,4
     d0a:	0002                	c.slli64	zero
     d0c:	0501                	addi	a0,a0,0
     d0e:	0005                	c.nop	1
     d10:	0402                	c.slli64	s0
     d12:	0601                	addi	a2,a2,0
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d14:	00090003          	lb	zero,0(s2)
     d18:	0100                	addi	s0,sp,128
     d1a:	0205                	addi	tp,tp,1
     d1c:	0306                	slli	t1,t1,0x1
     d1e:	0904                	addi	s1,sp,144
    for(i = (2*N); i < ((2*N)+N); ++i){
     d20:	0004                	0x4
     d22:	0501                	addi	a0,a0,0
     d24:	0305                	addi	t1,t1,1
}
     d26:	0902                	c.slli64	s2
     d28:	0008                	0x8
     d2a:	0501                	addi	a0,a0,0
     d2c:	060c                	addi	a1,sp,768
     d2e:	00090003          	lb	zero,0(s2)
     d32:	0100                	addi	s0,sp,128
     d34:	1105                	addi	sp,sp,-31
     d36:	0200                	addi	s0,sp,256
     d38:	0104                	addi	s1,sp,128
     d3a:	0306                	slli	t1,t1,0x1
        a2[i-(2*N)] = a2[i];
     d3c:	0900                	addi	s0,sp,144
     d3e:	0002                	c.slli64	zero
     d40:	0501                	addi	a0,a0,0
     d42:	0005                	c.nop	1
    for(i = (2*N); i < ((2*N)+N); ++i){
     d44:	0402                	c.slli64	s0
     d46:	0601                	addi	a2,a2,0
        a2[i-(2*N)] = a2[i];
     d48:	00090003          	lb	zero,0(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4c:	0100                	addi	s0,sp,128
        if(a2[i] <= q/2)
     d4e:	1805                	addi	a6,a6,-31
     d50:	0200                	addi	s0,sp,256
     d52:	0104                	addi	s1,sp,128
            a2[i] = (-1)*(q-a2[i]);
     d54:	0306                	slli	t1,t1,0x1
     d56:	0906                	slli	s2,s2,0x1
     d58:	0004                	0x4
    for (i = 0; i < N; ++i){
     d5a:	0501                	addi	a0,a0,0
     d5c:	0005                	c.nop	1
     d5e:	0402                	c.slli64	s0
        c2[i-(2*N)] = c2[i];
     d60:	0601                	addi	a2,a2,0
     d62:	08090003          	lb	zero,128(s2)
     d66:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d68:	0c05                	addi	s8,s8,1
     d6a:	0200                	addi	s0,sp,256
        c2[i-(2*N)] = c2[i];
     d6c:	0104                	addi	s1,sp,128
     d6e:	04097a03          	0x4097a03
  jal x0, default_exc_handler
     d72:	0100                	addi	s0,sp,128
     d74:	0200                	addi	s0,sp,256
  mv  x1, x0
     d76:	0104                	addi	s1,sp,128
     d78:	04090f03          	lb	t5,64(s2)
  mv  x3, x1
     d7c:	0100                	addi	s0,sp,128
  mv  x4, x1
     d7e:	1105                	addi	sp,sp,-31
  mv  x5, x1
     d80:	0200                	addi	s0,sp,256
  mv  x6, x1
     d82:	0104                	addi	s1,sp,128
  mv  x7, x1
     d84:	0306                	slli	t1,t1,0x1
  mv  x8, x1
     d86:	097f                	0x97f
  mv  x9, x1
     d88:	0002                	c.slli64	zero
  mv x10, x1
     d8a:	0501                	addi	a0,a0,0
  mv x11, x1
     d8c:	0005                	c.nop	1
  mv x12, x1
     d8e:	0402                	c.slli64	s0
  mv x13, x1
     d90:	0601                	addi	a2,a2,0
  mv x14, x1
     d92:	00090003          	lb	zero,0(s2)
  mv x16, x1
     d96:	0100                	addi	s0,sp,128
  mv x17, x1
     d98:	0905                	addi	s2,s2,1
  mv x18, x1
     d9a:	0200                	addi	s0,sp,256
  mv x19, x1
     d9c:	0304                	addi	s1,sp,384
  mv x20, x1
     d9e:	0306                	slli	t1,t1,0x1
  mv x21, x1
     da0:	095c                	addi	a5,sp,148
  mv x22, x1
     da2:	0008                	0x8
  mv x23, x1
     da4:	0501                	addi	a0,a0,0
  mv x24, x1
     da6:	0015                	c.nop	5
  mv x25, x1
     da8:	0402                	c.slli64	s0
  mv x26, x1
     daa:	00030603          	lb	a2,0(t1)
  mv x28, x1
     dae:	0409                	addi	s0,s0,2
  mv x29, x1
     db0:	0100                	addi	s0,sp,128
  mv x30, x1
     db2:	1a05                	addi	s4,s4,-31
  mv x31, x1
     db4:	0200                	addi	s0,sp,256
  la   x2, _stack_start
     db6:	0304                	addi	s1,sp,384
     db8:	04090003          	lb	zero,64(s2)
     dbc:	0100                	addi	s0,sp,128
  la x26, _bss_start
     dbe:	1505                	addi	a0,a0,-31
     dc0:	0200                	addi	s0,sp,256
     dc2:	0304                	addi	s1,sp,384
     dc4:	02090003          	lb	zero,32(s2)
  la x27, _bss_end
     dc8:	0100                	addi	s0,sp,128
     dca:	1d05                	addi	s10,s10,-31
     dcc:	0200                	addi	s0,sp,256
  bge x26, x27, zero_loop_end
     dce:	0304                	addi	s1,sp,384
     dd0:	02097f03          	0x2097f03
  sw x0, 0(x26)
     dd4:	0100                	addi	s0,sp,128
  addi x26, x26, 4
     dd6:	1505                	addi	a0,a0,-31
  ble x26, x27, zero_loop
     dd8:	0200                	addi	s0,sp,256
     dda:	0304                	addi	s1,sp,384
  addi x10, x0, 0
     ddc:	02090103          	lb	sp,32(s2)
  addi x11, x0, 0
     de0:	0100                	addi	s0,sp,128
     de2:	1d05                	addi	s10,s10,-31
  jal x1, main
     de4:	0200                	addi	s0,sp,256
     de6:	0304                	addi	s1,sp,384
     de8:	0306                	slli	t1,t1,0x1
     dea:	097f                	0x97f
     dec:	0002                	c.slli64	zero
     dee:	0501                	addi	a0,a0,0
     df0:	030d                	addi	t1,t1,3
     df2:	00020907          	0x20907
     df6:	0501                	addi	a0,a0,0
     df8:	0638                	addi	a4,sp,776
     dfa:	00090003          	lb	zero,0(s2)
     dfe:	0100                	addi	s0,sp,128
     e00:	2205                	jal	f20 <memset+0x5a>
     e02:	02090003          	lb	zero,32(s2)
     e06:	0100                	addi	s0,sp,128
     e08:	0905                	addi	s2,s2,1
     e0a:	0306                	slli	t1,t1,0x1
     e0c:	0905                	addi	s2,s2,1
     e0e:	0006                	c.slli	zero,0x1
     e10:	0001                	nop
     e12:	0402                	c.slli64	s0
     e14:	09060303          	lb	t1,144(a2) # 30d5a <_stack_start+0x20d5a>
     e18:	000a                	c.slli	zero,0x2
     e1a:	0501                	addi	a0,a0,0
     e1c:	04020017          	auipc	zero,0x4020
     e20:	00030603          	lb	a2,0(t1)
     e24:	0409                	addi	s0,s0,2
     e26:	0100                	addi	s0,sp,128
     e28:	1e05                	addi	t3,t3,-31
     e2a:	0200                	addi	s0,sp,256
     e2c:	0304                	addi	s1,sp,384
     e2e:	04090003          	lb	zero,64(s2)
     e32:	0100                	addi	s0,sp,128
     e34:	1705                	addi	a4,a4,-31
     e36:	0200                	addi	s0,sp,256
     e38:	0304                	addi	s1,sp,384
     e3a:	02090003          	lb	zero,32(s2)
     e3e:	0100                	addi	s0,sp,128
     e40:	1d05                	addi	s10,s10,-31
     e42:	0200                	addi	s0,sp,256
     e44:	0304                	addi	s1,sp,384
     e46:	02097f03          	0x2097f03
     e4a:	0100                	addi	s0,sp,128
     e4c:	1705                	addi	a4,a4,-31
     e4e:	0200                	addi	s0,sp,256
     e50:	0304                	addi	s1,sp,384
     e52:	02090103          	lb	sp,32(s2)
     e56:	0100                	addi	s0,sp,128
     e58:	1d05                	addi	s10,s10,-31
     e5a:	0200                	addi	s0,sp,256
     e5c:	0304                	addi	s1,sp,384
     e5e:	0306                	slli	t1,t1,0x1
     e60:	097f                	0x97f
     e62:	0002                	c.slli64	zero
     e64:	0501                	addi	a0,a0,0
     e66:	0009                	c.nop	2
     e68:	0402                	c.slli64	s0
     e6a:	09070303          	lb	t1,144(a4)
     e6e:	0002                	c.slli64	zero
     e70:	0501                	addi	a0,a0,0
     e72:	000e                	c.slli	zero,0x3
     e74:	0402                	c.slli64	s0
     e76:	00030603          	lb	a2,0(t1)
     e7a:	0409                	addi	s0,s0,2
     e7c:	0100                	addi	s0,sp,128
     e7e:	0200                	addi	s0,sp,256
     e80:	0304                	addi	s1,sp,384
     e82:	04090103          	lb	sp,64(s2)
     e86:	0100                	addi	s0,sp,128
     e88:	0200                	addi	s0,sp,256
     e8a:	0304                	addi	s1,sp,384
     e8c:	02097f03          	0x2097f03
     e90:	0100                	addi	s0,sp,128
     e92:	0905                	addi	s2,s2,1
     e94:	0200                	addi	s0,sp,256
     e96:	0304                	addi	s1,sp,384
     e98:	0306                	slli	t1,t1,0x1
     e9a:	0901                	addi	s2,s2,0
     e9c:	0004                	0x4
     e9e:	0501                	addi	a0,a0,0
     ea0:	000e                	c.slli	zero,0x3
     ea2:	0402                	c.slli64	s0
     ea4:	00030603          	lb	a2,0(t1)
     ea8:	0009                	c.nop	2
     eaa:	0100                	addi	s0,sp,128
     eac:	1d05                	addi	s10,s10,-31
     eae:	0200                	addi	s0,sp,256
     eb0:	0304                	addi	s1,sp,384
     eb2:	0306                	slli	t1,t1,0x1
     eb4:	097e                	slli	s2,s2,0x1f
     eb6:	0004                	0x4
     eb8:	0501                	addi	a0,a0,0
     eba:	0309                	addi	t1,t1,2
     ebc:	00040907          	0x40907
     ec0:	0501                	addi	a0,a0,0
     ec2:	0003060b          	0x3060b
     ec6:	0009                	c.nop	2
     ec8:	0100                	addi	s0,sp,128
     eca:	2005                	jal	eea <memset+0x24>
     ecc:	0200                	addi	s0,sp,256
     ece:	0204                	addi	s1,sp,256
     ed0:	0306                	slli	t1,t1,0x1
     ed2:	097f                	0x97f
     ed4:	0002                	c.slli64	zero
     ed6:	0501                	addi	a0,a0,0
     ed8:	0022                	c.slli	zero,0x8
     eda:	0402                	c.slli64	s0
     edc:	0602                	c.slli64	a2
     ede:	00090003          	lb	zero,0(s2)
     ee2:	0100                	addi	s0,sp,128
     ee4:	0905                	addi	s2,s2,1
     ee6:	0306                	slli	t1,t1,0x1
     ee8:	0909                	addi	s2,s2,2
     eea:	0004                	0x4
     eec:	0501                	addi	a0,a0,0
     eee:	0615                	addi	a2,a2,5
     ef0:	00090003          	lb	zero,0(s2)
     ef4:	0100                	addi	s0,sp,128
     ef6:	0c05                	addi	s8,s8,1
     ef8:	06090003          	lb	zero,96(s2)
     efc:	0100                	addi	s0,sp,128
     efe:	1a05                	addi	s4,s4,-31
     f00:	0200                	addi	s0,sp,256
     f02:	0204                	addi	s1,sp,256
     f04:	0306                	slli	t1,t1,0x1
     f06:	097f                	0x97f
     f08:	0004                	0x4
     f0a:	0501                	addi	a0,a0,0
     f0c:	0309                	addi	t1,t1,2
     f0e:	00040907          	0x40907
     f12:	0501                	addi	a0,a0,0
     f14:	0003060b          	0x3060b
     f18:	0009                	c.nop	2
     f1a:	0100                	addi	s0,sp,128
     f1c:	2005                	jal	f3c <memset+0x76>
     f1e:	0200                	addi	s0,sp,256
     f20:	0204                	addi	s1,sp,256
     f22:	0306                	slli	t1,t1,0x1
     f24:	097f                	0x97f
     f26:	0002                	c.slli64	zero
     f28:	0501                	addi	a0,a0,0
     f2a:	0022                	c.slli	zero,0x8
     f2c:	0402                	c.slli64	s0
     f2e:	0602                	c.slli64	a2
     f30:	00090003          	lb	zero,0(s2)
     f34:	0100                	addi	s0,sp,128
     f36:	1805                	addi	a6,a6,-31
     f38:	0200                	addi	s0,sp,256
     f3a:	0104                	addi	s1,sp,128
     f3c:	0306                	slli	t1,t1,0x1
     f3e:	0900                	addi	s0,sp,144
     f40:	0002                	c.slli64	zero
     f42:	0501                	addi	a0,a0,0
     f44:	0005                	c.nop	1
     f46:	0402                	c.slli64	s0
     f48:	0601                	addi	a2,a2,0
     f4a:	08090003          	lb	zero,128(s2)
     f4e:	0100                	addi	s0,sp,128
     f50:	0c05                	addi	s8,s8,1
     f52:	04091103          	lh	sp,64(s2)
     f56:	0100                	addi	s0,sp,128
     f58:	0905                	addi	s2,s2,1
     f5a:	0306                	slli	t1,t1,0x1
     f5c:	097e                	slli	s2,s2,0x1f
     f5e:	0006                	c.slli	zero,0x1
     f60:	0501                	addi	a0,a0,0
     f62:	0616                	slli	a2,a2,0x5
     f64:	00090003          	lb	zero,0(s2)
     f68:	0100                	addi	s0,sp,128
     f6a:	0d05                	addi	s10,s10,1
     f6c:	04090003          	lb	zero,64(s2)
int main(){
     f70:	0100                	addi	s0,sp,128
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f72:	1305                	addi	t1,t1,-31
     f74:	04090003          	lb	zero,64(s2)
     f78:	0100                	addi	s0,sp,128
     f7a:	0a05                	addi	s4,s4,1
     f7c:	0306                	slli	t1,t1,0x1
     f7e:	0902                	c.slli64	s2
int main(){
     f80:	0006                	c.slli	zero,0x1
     f82:	0501                	addi	a0,a0,0
     f84:	060c                	addi	a1,sp,768
     f86:	00090003          	lb	zero,0(s2)
    keys = generate_keys(N, p, q);
     f8a:	0100                	addi	s0,sp,128
     f8c:	0d05                	addi	s10,s10,1
     f8e:	0306                	slli	t1,t1,0x1
     f90:	0901                	addi	s2,s2,0
     f92:	0004                	0x4
     f94:	0301                	addi	t1,t1,0
     f96:	0901                	addi	s2,s2,0
    for(i = 0; i < N; ++i){
     f98:	000a                	c.slli	zero,0x2
     f9a:	0501                	addi	a0,a0,0
        secret_key_f[i] = keys[i];
     f9c:	0312                	slli	t1,t1,0x4
     f9e:	0900                	addi	s0,sp,144
     fa0:	0000                	unimp
     fa2:	0501                	addi	a0,a0,0
     fa4:	0614                	addi	a3,sp,768
     fa6:	00090003          	lb	zero,0(s2)
    for(i = 0; i < N; ++i){
     faa:	0100                	addi	s0,sp,128
     fac:	1205                	addi	tp,tp,-31
    for(i = N; i < (2*N); ++i){
     fae:	04090003          	lb	zero,64(s2)
     fb2:	0100                	addi	s0,sp,128
     fb4:	0d05                	addi	s10,s10,1
     fb6:	0306                	slli	t1,t1,0x1
     fb8:	00040903          	lb	s2,0(s0)
        secret_key_fp[i-(2*N)] = keys[i];
     fbc:	0501                	addi	a0,a0,0
     fbe:	0003062b          	0x3062b
     fc2:	0009                	c.nop	2
    for(i = (2*N); i < (3*N); ++i){
     fc4:	0100                	addi	s0,sp,128
     fc6:	1b05                	addi	s6,s6,-31
    for(i = (3*N); i < (4*N); ++i){
     fc8:	04090003          	lb	zero,64(s2)
     fcc:	0100                	addi	s0,sp,128
     fce:	0905                	addi	s2,s2,1
     fd0:	0306                	slli	t1,t1,0x1
     fd2:	00040907          	0x40907
        public_key[i-(4*N)] = keys[i];
     fd6:	0501                	addi	a0,a0,0
     fd8:	00030613          	mv	a2,t1
     fdc:	0009                	c.nop	2
    for(i = (4*N); i < (5*N); ++i){
     fde:	0100                	addi	s0,sp,128
     fe0:	0905                	addi	s2,s2,1
     fe2:	0306                	slli	t1,t1,0x1
     fe4:	0904                	addi	s1,sp,144
     fe6:	000e                	c.slli	zero,0x3
     fe8:	0501                	addi	a0,a0,0
        ring_poly[i-(5*N)] = keys[i];
     fea:	0003060b          	0x3060b
     fee:	0409                	addi	s0,s0,2
     ff0:	0100                	addi	s0,sp,128
     ff2:	0d05                	addi	s10,s10,1
    for(i = (5*N); i < (6*N+1); ++i){
     ff4:	0306                	slli	t1,t1,0x1
     ff6:	0901                	addi	s2,s2,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ff8:	0004                	0x4
     ffa:	0301                	addi	t1,t1,0
     ffc:	0901                	addi	s2,s2,0
     ffe:	0008                	0x8
    1000:	0501                	addi	a0,a0,0
    1002:	0612                	slli	a2,a2,0x4
    1004:	00090003          	lb	zero,0(s2)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1008:	0100                	addi	s0,sp,128
    100a:	0306                	slli	t1,t1,0x1
    100c:	0900                	addi	s0,sp,144
    100e:	0004                	0x4
    1010:	0501                	addi	a0,a0,0
    1012:	061a                	slli	a2,a2,0x6
    1014:	00090003          	lb	zero,0(s2)
    1018:	0100                	addi	s0,sp,128
    101a:	1205                	addi	tp,tp,-31
            resultkon[0] = 0xDEDEDEDE;
    101c:	04090003          	lb	zero,64(s2)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1020:	0100                	addi	s0,sp,128
    1022:	0d05                	addi	s10,s10,1
    1024:	0306                	slli	t1,t1,0x1
    1026:	00040903          	lb	s2,0(s0)
            resultkon[0] = 0xDEDEDEDE;
    102a:	0501                	addi	a0,a0,0
    102c:	00030637          	lui	a2,0x30
    for(i = 0; i < 32; ++i){
    1030:	0009                	c.nop	2
    1032:	0100                	addi	s0,sp,128
        if(!(message[i] == Dec_Message[i])){
    1034:	2105                	jal	1454 <_bss_start+0x240>
    1036:	04090003          	lb	zero,64(s2)
    103a:	0100                	addi	s0,sp,128
    103c:	1505                	addi	a0,a0,-31
    103e:	0200                	addi	s0,sp,256
    1040:	0104                	addi	s1,sp,128
    1042:	0306                	slli	t1,t1,0x1
            resultkon[0] = 0xBABABABA;
    1044:	00080907          	0x80907
    1048:	0501                	addi	a0,a0,0
    104a:	0009                	c.nop	2
    104c:	0402                	c.slli64	s0
 	    *var = resultkon[0];
    104e:	0601                	addi	a2,a2,0
    1050:	00090003          	lb	zero,0(s2)
    1054:	0100                	addi	s0,sp,128
    1056:	0305                	addi	t1,t1,1
    1058:	0306                	slli	t1,t1,0x1
}
    105a:	0905                	addi	s2,s2,1
    105c:	0004                	0x4
    105e:	0501                	addi	a0,a0,0
    1060:	0605                	addi	a2,a2,1
    1062:	00090003          	lb	zero,0(s2)
    1066:	0100                	addi	s0,sp,128
    1068:	0d05                	addi	s10,s10,1
            resultkon[0] = 0xDEDEDEDE;
    106a:	0306                	slli	t1,t1,0x1
	    *var = resultkon[0];
    106c:	0901                	addi	s2,s2,0
    106e:	0004                	0x4
    1070:	0301                	addi	t1,t1,0
    1072:	0901                	addi	s2,s2,0
    1074:	000a                	c.slli	zero,0x2
    1076:	0501                	addi	a0,a0,0
    for(i = 0; i < 32; ++i){
    1078:	0312                	slli	t1,t1,0x4
    107a:	0900                	addi	s0,sp,144
    107c:	0000                	unimp
    107e:	0501                	addi	a0,a0,0
    1080:	0003061b          	0x3061b
    1084:	0009                	c.nop	2
    1086:	0100                	addi	s0,sp,128
    1088:	1205                	addi	tp,tp,-31
    108a:	04090003          	lb	zero,64(s2)
    108e:	0100                	addi	s0,sp,128
    1090:	0d05                	addi	s10,s10,1
    1092:	0306                	slli	t1,t1,0x1
    1094:	00040903          	lb	s2,0(s0)
    1098:	0501                	addi	a0,a0,0
    109a:	0639                	addi	a2,a2,14
    109c:	00090003          	lb	zero,0(s2)
    10a0:	0100                	addi	s0,sp,128
    10a2:	2205                	jal	11c2 <_endtext+0x132>
    10a4:	04090003          	lb	zero,64(s2)
    10a8:	0100                	addi	s0,sp,128
    10aa:	1405                	addi	s0,s0,-31
    10ac:	0200                	addi	s0,sp,256
    10ae:	0104                	addi	s1,sp,128
    10b0:	0306                	slli	t1,t1,0x1
    10b2:	0906                	slli	s2,s2,0x1
    10b4:	0008                	0x8
    10b6:	0501                	addi	a0,a0,0
    10b8:	0009                	c.nop	2
    10ba:	0402                	c.slli64	s0
    10bc:	0601                	addi	a2,a2,0
    10be:	00090003          	lb	zero,0(s2)
    10c2:	0100                	addi	s0,sp,128
    10c4:	0305                	addi	t1,t1,1
    10c6:	0306                	slli	t1,t1,0x1
    10c8:	0904                	addi	s1,sp,144
    10ca:	0004                	0x4
    10cc:	0501                	addi	a0,a0,0
    10ce:	0605                	addi	a2,a2,1
    10d0:	00090003          	lb	zero,0(s2)
    10d4:	0100                	addi	s0,sp,128
    10d6:	0d05                	addi	s10,s10,1
    10d8:	0306                	slli	t1,t1,0x1
    10da:	0901                	addi	s2,s2,0
    10dc:	0004                	0x4
    10de:	0301                	addi	t1,t1,0
    10e0:	0901                	addi	s2,s2,0
    10e2:	000a                	c.slli	zero,0x2
    10e4:	0501                	addi	a0,a0,0
    10e6:	0312                	slli	t1,t1,0x4
    10e8:	0900                	addi	s0,sp,144
    10ea:	0000                	unimp
    10ec:	0501                	addi	a0,a0,0
    10ee:	0614                	addi	a3,sp,768
    10f0:	00090003          	lb	zero,0(s2)
    10f4:	0100                	addi	s0,sp,128
    10f6:	1205                	addi	tp,tp,-31
    10f8:	04090003          	lb	zero,64(s2)
    10fc:	0100                	addi	s0,sp,128
    10fe:	0d05                	addi	s10,s10,1
    1100:	0306                	slli	t1,t1,0x1
    1102:	00040903          	lb	s2,0(s0)
    1106:	0501                	addi	a0,a0,0
    1108:	0003062b          	0x3062b
    110c:	0009                	c.nop	2
    110e:	0100                	addi	s0,sp,128
    1110:	1b05                	addi	s6,s6,-31
    1112:	04090003          	lb	zero,64(s2)
    1116:	0100                	addi	s0,sp,128
    1118:	0905                	addi	s2,s2,1
    111a:	0306                	slli	t1,t1,0x1
    111c:	00040907          	0x40907
    1120:	0601                	addi	a2,a2,0
    1122:	097f8003          	lb	zero,151(t6)
    1126:	0000                	unimp
    1128:	0501                	addi	a0,a0,0
    112a:	001c                	0x1c
    112c:	0402                	c.slli64	s0
    112e:	0601                	addi	a2,a2,0
    1130:	09018003          	lb	zero,144(gp)
    1134:	0002                	c.slli64	zero
    1136:	0501                	addi	a0,a0,0
    1138:	0009                	c.nop	2
    113a:	0402                	c.slli64	s0
    113c:	0601                	addi	a2,a2,0
    113e:	08090003          	lb	zero,128(s2)
    1142:	0100                	addi	s0,sp,128
    1144:	1105                	addi	sp,sp,-31
    1146:	0306                	slli	t1,t1,0x1
    1148:	00080947          	fmsub.s	fs2,fa6,ft0,ft0,rne
    114c:	0501                	addi	a0,a0,0
    114e:	062e                	slli	a2,a2,0xb
    1150:	00090003          	lb	zero,0(s2)
    1154:	0100                	addi	s0,sp,128
    1156:	1f05                	addi	t5,t5,-31
    1158:	02090003          	lb	zero,32(s2)
    115c:	0100                	addi	s0,sp,128
    115e:	0d05                	addi	s10,s10,1
    1160:	0306                	slli	t1,t1,0x1
    1162:	0905                	addi	s2,s2,1
    1164:	0006                	c.slli	zero,0x1
    1166:	0501                	addi	a0,a0,0
    1168:	0311                	addi	t1,t1,4
    116a:	000a090b          	0xa090b
    116e:	0501                	addi	a0,a0,0
    1170:	063a                	slli	a2,a2,0xe
    1172:	00090003          	lb	zero,0(s2)
    1176:	0100                	addi	s0,sp,128
    1178:	2505                	jal	1798 <result+0xd4>
    117a:	02090003          	lb	zero,32(s2)
    117e:	0100                	addi	s0,sp,128
    1180:	0d05                	addi	s10,s10,1
    1182:	0306                	slli	t1,t1,0x1
    1184:	0905                	addi	s2,s2,1
    1186:	0006                	c.slli	zero,0x1
    1188:	0001                	nop
    118a:	0402                	c.slli64	s0
    118c:	09050303          	lb	t1,144(a0) # fffeb090 <_stack_start+0xfffdb090>
    1190:	000c                	0xc
    1192:	0501                	addi	a0,a0,0
    1194:	0030                	addi	a2,sp,8
    1196:	0402                	c.slli64	s0
    1198:	00030603          	lb	a2,0(t1)
    119c:	0009                	c.nop	2
    119e:	0100                	addi	s0,sp,128
    11a0:	2705                	jal	18c0 <result+0x1fc>
    11a2:	0200                	addi	s0,sp,256
    11a4:	0304                	addi	s1,sp,384
    11a6:	06090003          	lb	zero,96(s2)
    11aa:	0100                	addi	s0,sp,128
    11ac:	2105                	jal	15cc <product2+0x160>
    11ae:	0200                	addi	s0,sp,256
    11b0:	0304                	addi	s1,sp,384
    11b2:	04097f03          	0x4097f03
    11b6:	0100                	addi	s0,sp,128
    11b8:	2705                	jal	18d8 <result+0x214>
    11ba:	0200                	addi	s0,sp,256
    11bc:	0304                	addi	s1,sp,384
    11be:	04090103          	lb	sp,64(s2)
    11c2:	0100                	addi	s0,sp,128
    11c4:	1905                	addi	s2,s2,-31
    11c6:	0200                	addi	s0,sp,256
    11c8:	0304                	addi	s1,sp,384
    11ca:	02090003          	lb	zero,32(s2)
    11ce:	0100                	addi	s0,sp,128
    11d0:	2105                	jal	15f0 <product2+0x184>
    11d2:	0200                	addi	s0,sp,256
    11d4:	0304                	addi	s1,sp,384
    11d6:	0306                	slli	t1,t1,0x1
    11d8:	097f                	0x97f
    11da:	0004                	0x4
    11dc:	0501                	addi	a0,a0,0
    11de:	0311                	addi	t1,t1,4
    11e0:	0908                	addi	a0,sp,144
    11e2:	0002                	c.slli64	zero
    11e4:	0501                	addi	a0,a0,0
    11e6:	063c                	addi	a5,sp,776
    11e8:	00090003          	lb	zero,0(s2)
    11ec:	0100                	addi	s0,sp,128
    11ee:	2605                	jal	150e <product2+0xa2>
    11f0:	02090003          	lb	zero,32(s2)
    11f4:	0100                	addi	s0,sp,128
    11f6:	0d05                	addi	s10,s10,1
    11f8:	0306                	slli	t1,t1,0x1
    11fa:	0905                	addi	s2,s2,1
    11fc:	0006                	c.slli	zero,0x1
    11fe:	0001                	nop
    1200:	0402                	c.slli64	s0
    1202:	09040303          	lb	t1,144(s0)
    1206:	000a                	c.slli	zero,0x2
    1208:	0501                	addi	a0,a0,0
    120a:	001c                	0x1c
    120c:	0402                	c.slli64	s0
    120e:	00030603          	lb	a2,0(t1)
    1212:	0009                	c.nop	2
    1214:	0100                	addi	s0,sp,128
    1216:	1905                	addi	s2,s2,-31
    1218:	0200                	addi	s0,sp,256
    121a:	0304                	addi	s1,sp,384
    121c:	06090003          	lb	zero,96(s2)
    1220:	0100                	addi	s0,sp,128
    1222:	2005                	jal	1242 <_bss_start+0x2e>
    1224:	0200                	addi	s0,sp,256
    1226:	0304                	addi	s1,sp,384
    1228:	04097f03          	0x4097f03
    122c:	0100                	addi	s0,sp,128
    122e:	1905                	addi	s2,s2,-31
    1230:	0200                	addi	s0,sp,256
    1232:	0304                	addi	s1,sp,384
    1234:	04090103          	lb	sp,64(s2)
    1238:	0100                	addi	s0,sp,128
    123a:	1205                	addi	tp,tp,-31
    123c:	0200                	addi	s0,sp,256
    123e:	0304                	addi	s1,sp,384
    1240:	02090003          	lb	zero,32(s2)
    1244:	0100                	addi	s0,sp,128
    1246:	2005                	jal	1266 <_bss_start+0x52>
    1248:	0200                	addi	s0,sp,256
    124a:	0304                	addi	s1,sp,384
    124c:	0306                	slli	t1,t1,0x1
    124e:	097f                	0x97f
    1250:	0004                	0x4
    1252:	0501                	addi	a0,a0,0
    1254:	0311                	addi	t1,t1,4
    1256:	00020907          	0x20907
    125a:	0501                	addi	a0,a0,0
    125c:	062e                	slli	a2,a2,0xb
    125e:	00090003          	lb	zero,0(s2)
    1262:	0100                	addi	s0,sp,128
    1264:	1f05                	addi	t5,t5,-31
    1266:	02090003          	lb	zero,32(s2)
    126a:	0100                	addi	s0,sp,128
    126c:	0d05                	addi	s10,s10,1
    126e:	0306                	slli	t1,t1,0x1
    1270:	0905                	addi	s2,s2,1
    1272:	0006                	c.slli	zero,0x1
    1274:	0301                	addi	t1,t1,0
    1276:	0905                	addi	s2,s2,1
    1278:	000a                	c.slli	zero,0x2
    127a:	0501                	addi	a0,a0,0
    127c:	0003060f          	0x3060f
    1280:	0009                	c.nop	2
    1282:	0100                	addi	s0,sp,128
    1284:	2405                	jal	14a4 <product2+0x38>
    1286:	0200                	addi	s0,sp,256
    1288:	0204                	addi	s1,sp,256
    128a:	0306                	slli	t1,t1,0x1
    128c:	097f                	0x97f
    128e:	0002                	c.slli64	zero
    1290:	0501                	addi	a0,a0,0
    1292:	0026                	c.slli	zero,0x9
    1294:	0402                	c.slli64	s0
    1296:	0602                	c.slli64	a2
    1298:	00090003          	lb	zero,0(s2)
    129c:	0100                	addi	s0,sp,128
    129e:	0d05                	addi	s10,s10,1
    12a0:	0200                	addi	s0,sp,256
    12a2:	0304                	addi	s1,sp,384
    12a4:	0306                	slli	t1,t1,0x1
    12a6:	0909                	addi	s2,s2,2
    12a8:	0004                	0x4
    12aa:	0501                	addi	a0,a0,0
    12ac:	0012                	c.slli	zero,0x4
    12ae:	0402                	c.slli64	s0
    12b0:	00030603          	lb	a2,0(t1)
    12b4:	0009                	c.nop	2
    12b6:	0100                	addi	s0,sp,128
    12b8:	2105                	jal	16d8 <result+0x14>
    12ba:	0200                	addi	s0,sp,256
    12bc:	0304                	addi	s1,sp,384
    12be:	0306                	slli	t1,t1,0x1
    12c0:	097f                	0x97f
    12c2:	000a                	c.slli	zero,0x2
    12c4:	0501                	addi	a0,a0,0
    12c6:	0015                	c.nop	5
    12c8:	0402                	c.slli64	s0
    12ca:	0301                	addi	t1,t1,0
    12cc:	0900                	addi	s0,sp,144
    12ce:	0002                	c.slli64	zero
    12d0:	0501                	addi	a0,a0,0
    12d2:	0009                	c.nop	2
    12d4:	0402                	c.slli64	s0
    12d6:	0601                	addi	a2,a2,0
    12d8:	00090003          	lb	zero,0(s2)
    12dc:	0100                	addi	s0,sp,128
    12de:	0b05                	addi	s6,s6,1
    12e0:	0306                	slli	t1,t1,0x1
    12e2:	04097fb7          	lui	t6,0x4097
    12e6:	0100                	addi	s0,sp,128
    12e8:	0306                	slli	t1,t1,0x1
    12ea:	00d0                	addi	a2,sp,68
    12ec:	0409                	addi	s0,s0,2
    12ee:	0100                	addi	s0,sp,128
    12f0:	1305                	addi	t1,t1,-31
    12f2:	02090103          	lb	sp,32(s2)
    12f6:	0100                	addi	s0,sp,128
    12f8:	1005                	c.nop	-31
    12fa:	0200                	addi	s0,sp,256
    12fc:	0104                	addi	s1,sp,128
    12fe:	0306                	slli	t1,t1,0x1
    1300:	097f                	0x97f
    1302:	0008                	0x8
    1304:	0501                	addi	a0,a0,0
    1306:	0005                	c.nop	1
    1308:	0402                	c.slli64	s0
    130a:	0601                	addi	a2,a2,0
    130c:	00090003          	lb	zero,0(s2)
    1310:	0100                	addi	s0,sp,128
    1312:	1b05                	addi	s6,s6,-31
    1314:	04090303          	lb	t1,64(s2)
    1318:	0100                	addi	s0,sp,128
    131a:	1305                	addi	t1,t1,-31
    131c:	04090103          	lb	sp,64(s2)
    1320:	0100                	addi	s0,sp,128
    1322:	1505                	addi	a0,a0,-31
    1324:	0200                	addi	s0,sp,256
    1326:	0104                	addi	s1,sp,128
    1328:	0306                	slli	t1,t1,0x1
    132a:	097f                	0x97f
    132c:	0008                	0x8
    132e:	0501                	addi	a0,a0,0
    1330:	0005                	c.nop	1
    1332:	0402                	c.slli64	s0
    1334:	0601                	addi	a2,a2,0
    1336:	00090003          	lb	zero,0(s2)
    133a:	0100                	addi	s0,sp,128
    133c:	0306                	slli	t1,t1,0x1
    133e:	0904                	addi	s1,sp,144
    1340:	0004                	0x4
    1342:	0301                	addi	t1,t1,0
    1344:	0902                	c.slli64	s2
    1346:	0000                	unimp
    1348:	0501                	addi	a0,a0,0
    134a:	0601                	addi	a2,a2,0
    134c:	00090103          	lb	sp,0(s2)
    1350:	0100                	addi	s0,sp,128
    1352:	0905                	addi	s2,s2,1
    1354:	0200                	addi	s0,sp,256
    1356:	0304                	addi	s1,sp,384
    1358:	0306                	slli	t1,t1,0x1
    135a:	002a0977          	0x2a0977
    135e:	0501                	addi	a0,a0,0
    1360:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1364:	00030603          	lb	a2,0(t1)
    1368:	0409                	addi	s0,s0,2
    136a:	0100                	addi	s0,sp,128
    136c:	1605                	addi	a2,a2,-31
    136e:	0200                	addi	s0,sp,256
    1370:	0304                	addi	s1,sp,384
    1372:	04090003          	lb	zero,64(s2)
    1376:	0100                	addi	s0,sp,128
    1378:	1305                	addi	t1,t1,-31
    137a:	0200                	addi	s0,sp,256
    137c:	0304                	addi	s1,sp,384
    137e:	02090003          	lb	zero,32(s2)
    1382:	0100                	addi	s0,sp,128
    1384:	1c05                	addi	s8,s8,-31
    1386:	0200                	addi	s0,sp,256
    1388:	0304                	addi	s1,sp,384
    138a:	02097f03          	0x2097f03
    138e:	0100                	addi	s0,sp,128
    1390:	1305                	addi	t1,t1,-31
    1392:	0200                	addi	s0,sp,256
    1394:	0304                	addi	s1,sp,384
    1396:	02090103          	lb	sp,32(s2)
    139a:	0100                	addi	s0,sp,128
    139c:	1c05                	addi	s8,s8,-31
    139e:	0200                	addi	s0,sp,256
    13a0:	0304                	addi	s1,sp,384
    13a2:	0306                	slli	t1,t1,0x1
    13a4:	097f                	0x97f
    13a6:	0002                	c.slli64	zero
    13a8:	0501                	addi	a0,a0,0
    13aa:	0009                	c.nop	2
    13ac:	0402                	c.slli64	s0
    13ae:	09040303          	lb	t1,144(s0)
    13b2:	0002                	c.slli64	zero
    13b4:	0501                	addi	a0,a0,0
    13b6:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    13ba:	00030603          	lb	a2,0(t1)
    13be:	0009                	c.nop	2
    13c0:	0100                	addi	s0,sp,128
    13c2:	2505                	jal	19e2 <ti_2+0xc6>
    13c4:	0200                	addi	s0,sp,256
    13c6:	0304                	addi	s1,sp,384
    13c8:	0306                	slli	t1,t1,0x1
    13ca:	097f                	0x97f
    13cc:	000c                	0xc
    13ce:	0501                	addi	a0,a0,0
    13d0:	033c                	addi	a5,sp,392
    13d2:	090a                	slli	s2,s2,0x2
    13d4:	0006                	c.slli	zero,0x1
    13d6:	0501                	addi	a0,a0,0
    13d8:	0305                	addi	t1,t1,1
    13da:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    13de:	0301                	addi	t1,t1,0
    13e0:	0901                	addi	s2,s2,0
    13e2:	0000                	unimp
    13e4:	0301                	addi	t1,t1,0
    13e6:	0901                	addi	s2,s2,0
    13e8:	0000                	unimp
    13ea:	0501                	addi	a0,a0,0
    13ec:	0609                	addi	a2,a2,2
    13ee:	00090003          	lb	zero,0(s2)
    13f2:	0100                	addi	s0,sp,128
    13f4:	3c05                	jal	e24 <memcpy+0x3c>
    13f6:	04097b03          	0x4097b03
    13fa:	0100                	addi	s0,sp,128
    13fc:	0905                	addi	s2,s2,1
    13fe:	02090503          	lb	a0,32(s2)
    1402:	0100                	addi	s0,sp,128
    1404:	3c05                	jal	e34 <memcpy+0x4c>
    1406:	04097b03          	0x4097b03
    140a:	0100                	addi	s0,sp,128
    140c:	0905                	addi	s2,s2,1
    140e:	1c090503          	lb	a0,448(s2)
    1412:	0100                	addi	s0,sp,128
    1414:	06090103          	lb	sp,96(s2)
    1418:	0100                	addi	s0,sp,128
    141a:	06090103          	lb	sp,96(s2)
    141e:	0100                	addi	s0,sp,128
    1420:	06090203          	lb	tp,96(s2)
    1424:	0100                	addi	s0,sp,128
    1426:	06090103          	lb	sp,96(s2)
    142a:	0100                	addi	s0,sp,128
    142c:	06090103          	lb	sp,96(s2)
    1430:	0100                	addi	s0,sp,128
    1432:	06090103          	lb	sp,96(s2)
    1436:	0100                	addi	s0,sp,128
    1438:	3c05                	jal	e68 <memcpy+0x80>
    143a:	04097403          	0x4097403
    143e:	0100                	addi	s0,sp,128
    1440:	0905                	addi	s2,s2,1
    1442:	04090503          	lb	a0,64(s2)
    1446:	0100                	addi	s0,sp,128
    1448:	0505                	addi	a0,a0,1
    144a:	0306                	slli	t1,t1,0x1
    144c:	0901                	addi	s2,s2,0
    144e:	0004                	0x4
    1450:	0301                	addi	t1,t1,0
    1452:	0901                	addi	s2,s2,0
    1454:	0000                	unimp
    1456:	0301                	addi	t1,t1,0
    1458:	0902                	c.slli64	s2
    145a:	0000                	unimp
    145c:	0301                	addi	t1,t1,0
    145e:	0901                	addi	s2,s2,0
    1460:	0000                	unimp
    1462:	0301                	addi	t1,t1,0
    1464:	0901                	addi	s2,s2,0
    1466:	0000                	unimp
    1468:	0301                	addi	t1,t1,0
    146a:	0901                	addi	s2,s2,0
    146c:	0000                	unimp
    146e:	0501                	addi	a0,a0,0
    1470:	0609                	addi	a2,a2,2
    1472:	00090003          	lb	zero,0(s2)
    1476:	0100                	addi	s0,sp,128
    1478:	0505                	addi	a0,a0,1
    147a:	0306                	slli	t1,t1,0x1
    147c:	0901                	addi	s2,s2,0
    147e:	0002                	c.slli64	zero
    1480:	0301                	addi	t1,t1,0
    1482:	0901                	addi	s2,s2,0
    1484:	0000                	unimp
    1486:	0301                	addi	t1,t1,0
    1488:	0901                	addi	s2,s2,0
    148a:	0000                	unimp
    148c:	0301                	addi	t1,t1,0
    148e:	0901                	addi	s2,s2,0
    1490:	0000                	unimp
    1492:	0301                	addi	t1,t1,0
    1494:	0902                	c.slli64	s2
    1496:	0000                	unimp
    1498:	0301                	addi	t1,t1,0
    149a:	0901                	addi	s2,s2,0
    149c:	0000                	unimp
    149e:	0501                	addi	a0,a0,0
    14a0:	060c                	addi	a1,sp,768
    14a2:	02090003          	lb	zero,32(s2)
    14a6:	0100                	addi	s0,sp,128
    14a8:	1105                	addi	sp,sp,-31
    14aa:	02090303          	lb	t1,32(s2)
    14ae:	0100                	addi	s0,sp,128
    14b0:	0200                	addi	s0,sp,256
    14b2:	0104                	addi	s1,sp,128
    14b4:	0306                	slli	t1,t1,0x1
    14b6:	097d                	addi	s2,s2,31
    14b8:	0008                	0x8
    14ba:	0501                	addi	a0,a0,0
    14bc:	0005                	c.nop	1
    14be:	0402                	c.slli64	s0
    14c0:	0601                	addi	a2,a2,0
    14c2:	00090003          	lb	zero,0(s2)
    14c6:	0100                	addi	s0,sp,128
    14c8:	0306                	slli	t1,t1,0x1
    14ca:	090a                	slli	s2,s2,0x2
    14cc:	0004                	0x4
    14ce:	0501                	addi	a0,a0,0
    14d0:	060d                	addi	a2,a2,3
    14d2:	00090003          	lb	zero,0(s2)
    14d6:	0100                	addi	s0,sp,128
    14d8:	0505                	addi	a0,a0,1
    14da:	0306                	slli	t1,t1,0x1
    14dc:	00060903          	lb	s2,0(a2) # 30000 <_stack_start+0x20000>
    14e0:	0501                	addi	a0,a0,0
    14e2:	0900030b          	0x900030b
    14e6:	0000                	unimp
    14e8:	0501                	addi	a0,a0,0
    14ea:	0624                	addi	s1,sp,776
    14ec:	00090b03          	lb	s6,0(s2)
    14f0:	0100                	addi	s0,sp,128
    14f2:	1905                	addi	s2,s2,-31
    14f4:	08092303          	lw	t1,128(s2)
    14f8:	0100                	addi	s0,sp,128
    14fa:	0905                	addi	s2,s2,1
    14fc:	0306                	slli	t1,t1,0x1
    14fe:	0954                	addi	a3,sp,148
    1500:	0008                	0x8
    1502:	0501                	addi	a0,a0,0
    1504:	0302                	c.slli64	t1
    1506:	0902                	c.slli64	s2
    1508:	0000                	unimp
    150a:	0301                	addi	t1,t1,0
    150c:	00080903          	lb	s2,0(a6)
    1510:	0501                	addi	a0,a0,0
    1512:	0309                	addi	t1,t1,2
    1514:	00080903          	lb	s2,0(a6)
    1518:	0501                	addi	a0,a0,0
    151a:	0003060f          	0x3060f
    151e:	0009                	c.nop	2
    1520:	0100                	addi	s0,sp,128
    1522:	0905                	addi	s2,s2,1
    1524:	0306                	slli	t1,t1,0x1
    1526:	0901                	addi	s2,s2,0
    1528:	000c                	0xc
    152a:	0501                	addi	a0,a0,0
    152c:	0019                	c.nop	6
    152e:	0402                	c.slli64	s0
    1530:	0301                	addi	t1,t1,0
    1532:	0900                	addi	s0,sp,144
    1534:	0004                	0x4
    1536:	0501                	addi	a0,a0,0
    1538:	0009                	c.nop	2
    153a:	0402                	c.slli64	s0
    153c:	0601                	addi	a2,a2,0
    153e:	00090003          	lb	zero,0(s2)
    1542:	0100                	addi	s0,sp,128
    1544:	1005                	c.nop	-31
    1546:	0a090603          	lb	a2,160(s2)
    154a:	0100                	addi	s0,sp,128
    154c:	1505                	addi	a0,a0,-31
    154e:	0200                	addi	s0,sp,256
    1550:	0104                	addi	s1,sp,128
    1552:	0306                	slli	t1,t1,0x1
    1554:	0900                	addi	s0,sp,144
    1556:	0002                	c.slli64	zero
    1558:	0501                	addi	a0,a0,0
    155a:	0009                	c.nop	2
    155c:	0402                	c.slli64	s0
    155e:	0601                	addi	a2,a2,0
    1560:	00090003          	lb	zero,0(s2)
    1564:	0100                	addi	s0,sp,128
    1566:	0306                	slli	t1,t1,0x1
    1568:	0905                	addi	s2,s2,1
    156a:	0004                	0x4
    156c:	0301                	addi	t1,t1,0
    156e:	0902                	c.slli64	s2
    1570:	0008                	0x8
    1572:	0501                	addi	a0,a0,0
    1574:	0610                	addi	a2,sp,768
    1576:	00090003          	lb	zero,0(s2)
    157a:	0100                	addi	s0,sp,128
    157c:	0905                	addi	s2,s2,1
    157e:	0306                	slli	t1,t1,0x1
    1580:	0901                	addi	s2,s2,0
    1582:	000c                	0xc
    1584:	0501                	addi	a0,a0,0
    1586:	0610                	addi	a2,sp,768
    1588:	00090003          	lb	zero,0(s2)
    158c:	0100                	addi	s0,sp,128
    158e:	1505                	addi	a0,a0,-31
    1590:	0200                	addi	s0,sp,256
    1592:	0104                	addi	s1,sp,128
    1594:	0306                	slli	t1,t1,0x1
    1596:	0900                	addi	s0,sp,144
    1598:	0002                	c.slli64	zero
    159a:	0501                	addi	a0,a0,0
    159c:	0009                	c.nop	2
    159e:	0402                	c.slli64	s0
    15a0:	0601                	addi	a2,a2,0
    15a2:	00090003          	lb	zero,0(s2)
    15a6:	0100                	addi	s0,sp,128
    15a8:	0205                	addi	tp,tp,1
    15aa:	0306                	slli	t1,t1,0x1
    15ac:	0906                	slli	s2,s2,0x1
    15ae:	0004                	0x4
    15b0:	0501                	addi	a0,a0,0
    15b2:	0309                	addi	t1,t1,2
    15b4:	0905                	addi	s2,s2,1
    15b6:	0008                	0x8
    15b8:	0501                	addi	a0,a0,0
    15ba:	0610                	addi	a2,sp,768
    15bc:	00090003          	lb	zero,0(s2)
    15c0:	0100                	addi	s0,sp,128
    15c2:	0905                	addi	s2,s2,1
    15c4:	0306                	slli	t1,t1,0x1
    15c6:	0901                	addi	s2,s2,0
    15c8:	000e                	c.slli	zero,0x3
    15ca:	0501                	addi	a0,a0,0
    15cc:	0610                	addi	a2,sp,768
    15ce:	00090003          	lb	zero,0(s2)
    15d2:	0100                	addi	s0,sp,128
    15d4:	1505                	addi	a0,a0,-31
    15d6:	0200                	addi	s0,sp,256
    15d8:	0104                	addi	s1,sp,128
    15da:	0306                	slli	t1,t1,0x1
    15dc:	0900                	addi	s0,sp,144
    15de:	0002                	c.slli64	zero
    15e0:	0501                	addi	a0,a0,0
    15e2:	0009                	c.nop	2
    15e4:	0402                	c.slli64	s0
    15e6:	0601                	addi	a2,a2,0
    15e8:	00090003          	lb	zero,0(s2)
    15ec:	0100                	addi	s0,sp,128
    15ee:	0205                	addi	tp,tp,1
    15f0:	0306                	slli	t1,t1,0x1
    15f2:	0905                	addi	s2,s2,1
    15f4:	0004                	0x4
    15f6:	0501                	addi	a0,a0,0
    15f8:	0309                	addi	t1,t1,2
    15fa:	00080903          	lb	s2,0(a6)
    15fe:	0501                	addi	a0,a0,0
    1600:	0610                	addi	a2,sp,768
    1602:	02090003          	lb	zero,32(s2)
    1606:	0100                	addi	s0,sp,128
    1608:	1505                	addi	a0,a0,-31
    160a:	0200                	addi	s0,sp,256
    160c:	0104                	addi	s1,sp,128
    160e:	0306                	slli	t1,t1,0x1
    1610:	0900                	addi	s0,sp,144
    1612:	0002                	c.slli64	zero
    1614:	0501                	addi	a0,a0,0
    1616:	0009                	c.nop	2
    1618:	0402                	c.slli64	s0
    161a:	0601                	addi	a2,a2,0
    161c:	00090003          	lb	zero,0(s2)
    1620:	0100                	addi	s0,sp,128
    1622:	0306                	slli	t1,t1,0x1
    1624:	0904                	addi	s1,sp,144
    1626:	0004                	0x4
    1628:	0301                	addi	t1,t1,0
    162a:	0904                	addi	s1,sp,144
    162c:	0008                	0x8
    162e:	0501                	addi	a0,a0,0
    1630:	0612                	slli	a2,a2,0x4
    1632:	02094d03          	lbu	s10,32(s2)
    1636:	0100                	addi	s0,sp,128
    1638:	1005                	c.nop	-31
    163a:	02093303          	0x2093303
    163e:	0100                	addi	s0,sp,128
    1640:	1505                	addi	a0,a0,-31
    1642:	0200                	addi	s0,sp,256
    1644:	0104                	addi	s1,sp,128
    1646:	0306                	slli	t1,t1,0x1
    1648:	0900                	addi	s0,sp,144
    164a:	0002                	c.slli64	zero
    164c:	0501                	addi	a0,a0,0
    164e:	0009                	c.nop	2
    1650:	0402                	c.slli64	s0
    1652:	0601                	addi	a2,a2,0
    1654:	00090003          	lb	zero,0(s2)
    1658:	0100                	addi	s0,sp,128
    165a:	0b05                	addi	s6,s6,1
    165c:	0306                	slli	t1,t1,0x1
    165e:	0004094b          	fnmsub.s	fs2,fs0,ft0,ft0,rne
    1662:	0501                	addi	a0,a0,0
    1664:	0610                	addi	a2,sp,768
    1666:	0900c003          	lbu	zero,144(ra)
    166a:	0002                	c.slli64	zero
    166c:	0301                	addi	t1,t1,0
    166e:	0901                	addi	s2,s2,0
    1670:	0002                	c.slli64	zero
    1672:	0501                	addi	a0,a0,0
    1674:	0015                	c.nop	5
    1676:	0402                	c.slli64	s0
    1678:	0601                	addi	a2,a2,0
    167a:	02097f03          	0x2097f03
    167e:	0100                	addi	s0,sp,128
    1680:	0905                	addi	s2,s2,1
    1682:	0200                	addi	s0,sp,256
    1684:	0104                	addi	s1,sp,128
    1686:	0306                	slli	t1,t1,0x1
    1688:	0900                	addi	s0,sp,144
    168a:	0000                	unimp
    168c:	0501                	addi	a0,a0,0
    168e:	0015                	c.nop	5
    1690:	0402                	c.slli64	s0
    1692:	0601                	addi	a2,a2,0
    1694:	0c090c03          	lb	s8,192(s2)
    1698:	0100                	addi	s0,sp,128
    169a:	0905                	addi	s2,s2,1
    169c:	0200                	addi	s0,sp,256
    169e:	0104                	addi	s1,sp,128
    16a0:	0306                	slli	t1,t1,0x1
    16a2:	0900                	addi	s0,sp,144
    16a4:	0000                	unimp
    16a6:	0601                	addi	a2,a2,0
    16a8:	04090503          	lb	a0,64(s2)
    16ac:	0100                	addi	s0,sp,128
    16ae:	00090103          	lb	sp,0(s2)
    16b2:	0100                	addi	s0,sp,128
    16b4:	0505                	addi	a0,a0,1
    16b6:	0306                	slli	t1,t1,0x1
    16b8:	0901                	addi	s2,s2,0
    16ba:	0000                	unimp
    16bc:	0501                	addi	a0,a0,0
    16be:	0009                	c.nop	2
    16c0:	0402                	c.slli64	s0
    16c2:	a1030603          	lb	a2,-1520(t1)
    16c6:	097f                	0x97f
    16c8:	002a                	c.slli	zero,0xa
    16ca:	0501                	addi	a0,a0,0
    16cc:	0018                	0x18
    16ce:	0402                	c.slli64	s0
    16d0:	00030603          	lb	a2,0(t1)
    16d4:	0009                	c.nop	2
    16d6:	0100                	addi	s0,sp,128
    16d8:	1105                	addi	sp,sp,-31
    16da:	0200                	addi	s0,sp,256
    16dc:	0304                	addi	s1,sp,384
    16de:	04090003          	lb	zero,64(s2)
    16e2:	0100                	addi	s0,sp,128
    16e4:	1b05                	addi	s6,s6,-31
    16e6:	0200                	addi	s0,sp,256
    16e8:	0304                	addi	s1,sp,384
    16ea:	08097f03          	0x8097f03
    16ee:	0100                	addi	s0,sp,128
    16f0:	1105                	addi	sp,sp,-31
    16f2:	0200                	addi	s0,sp,256
    16f4:	0304                	addi	s1,sp,384
    16f6:	02090103          	lb	sp,32(s2)
    16fa:	0100                	addi	s0,sp,128
    16fc:	0905                	addi	s2,s2,1
    16fe:	0200                	addi	s0,sp,256
    1700:	0304                	addi	s1,sp,384
    1702:	0306                	slli	t1,t1,0x1
    1704:	0901                	addi	s2,s2,0
    1706:	0004                	0x4
    1708:	0501                	addi	a0,a0,0
    170a:	0018                	0x18
    170c:	0402                	c.slli64	s0
    170e:	00030603          	lb	a2,0(t1)
    1712:	0009                	c.nop	2
    1714:	0100                	addi	s0,sp,128
    1716:	1105                	addi	sp,sp,-31
    1718:	0200                	addi	s0,sp,256
    171a:	0304                	addi	s1,sp,384
    171c:	04090003          	lb	zero,64(s2)
    1720:	0100                	addi	s0,sp,128
    1722:	0905                	addi	s2,s2,1
    1724:	0200                	addi	s0,sp,256
    1726:	0304                	addi	s1,sp,384
    1728:	0306                	slli	t1,t1,0x1
    172a:	0901                	addi	s2,s2,0
    172c:	000c                	0xc
    172e:	0501                	addi	a0,a0,0
    1730:	0011                	c.nop	4
    1732:	0402                	c.slli64	s0
    1734:	00030603          	lb	a2,0(t1)
    1738:	0009                	c.nop	2
    173a:	0100                	addi	s0,sp,128
    173c:	0905                	addi	s2,s2,1
    173e:	0200                	addi	s0,sp,256
    1740:	0304                	addi	s1,sp,384
    1742:	0306                	slli	t1,t1,0x1
    1744:	0901                	addi	s2,s2,0
    1746:	0008                	0x8
    1748:	0501                	addi	a0,a0,0
    174a:	0011                	c.nop	4
    174c:	0402                	c.slli64	s0
    174e:	00030603          	lb	a2,0(t1)
    1752:	0009                	c.nop	2
    1754:	0100                	addi	s0,sp,128
    1756:	1b05                	addi	s6,s6,-31
    1758:	0200                	addi	s0,sp,256
    175a:	0304                	addi	s1,sp,384
    175c:	0306                	slli	t1,t1,0x1
    175e:	097c                	addi	a5,sp,156
    1760:	0008                	0x8
    1762:	0501                	addi	a0,a0,0
    1764:	000d                	c.nop	3
    1766:	0402                	c.slli64	s0
    1768:	09190303          	lb	t1,145(s2)
    176c:	0004                	0x4
    176e:	0501                	addi	a0,a0,0
    1770:	0022                	c.slli	zero,0x8
    1772:	0402                	c.slli64	s0
    1774:	00030603          	lb	a2,0(t1)
    1778:	0009                	c.nop	2
    177a:	0100                	addi	s0,sp,128
    177c:	1d05                	addi	s10,s10,-31
    177e:	0200                	addi	s0,sp,256
    1780:	0304                	addi	s1,sp,384
    1782:	06090003          	lb	zero,96(s2)
    1786:	0100                	addi	s0,sp,128
    1788:	2a05                	jal	18b8 <result+0x1f4>
    178a:	0200                	addi	s0,sp,256
    178c:	0304                	addi	s1,sp,384
    178e:	02097f03          	0x2097f03
    1792:	0100                	addi	s0,sp,128
    1794:	1d05                	addi	s10,s10,-31
    1796:	0200                	addi	s0,sp,256
    1798:	0304                	addi	s1,sp,384
    179a:	04090103          	lb	sp,64(s2)
    179e:	0100                	addi	s0,sp,128
    17a0:	2a05                	jal	18d0 <result+0x20c>
    17a2:	0200                	addi	s0,sp,256
    17a4:	0304                	addi	s1,sp,384
    17a6:	0306                	slli	t1,t1,0x1
    17a8:	097f                	0x97f
    17aa:	0004                	0x4
    17ac:	0501                	addi	a0,a0,0
    17ae:	000d                	c.nop	3
    17b0:	0402                	c.slli64	s0
    17b2:	09070303          	lb	t1,144(a4)
    17b6:	0002                	c.slli64	zero
    17b8:	0501                	addi	a0,a0,0
    17ba:	0402001b          	0x402001b
    17be:	00030603          	lb	a2,0(t1)
    17c2:	0009                	c.nop	2
    17c4:	0100                	addi	s0,sp,128
    17c6:	2305                	jal	1ce6 <random_keys+0x23a>
    17c8:	0200                	addi	s0,sp,256
    17ca:	0304                	addi	s1,sp,384
    17cc:	04090003          	lb	zero,64(s2)
    17d0:	0100                	addi	s0,sp,128
    17d2:	1f05                	addi	t5,t5,-31
    17d4:	0200                	addi	s0,sp,256
    17d6:	0304                	addi	s1,sp,384
    17d8:	04090003          	lb	zero,64(s2)
    17dc:	0100                	addi	s0,sp,128
    17de:	1505                	addi	a0,a0,-31
    17e0:	0200                	addi	s0,sp,256
    17e2:	0304                	addi	s1,sp,384
    17e4:	04090003          	lb	zero,64(s2)
    17e8:	0100                	addi	s0,sp,128
    17ea:	2005                	jal	180a <result+0x146>
    17ec:	0200                	addi	s0,sp,256
    17ee:	0304                	addi	s1,sp,384
    17f0:	04097f03          	0x4097f03
    17f4:	0100                	addi	s0,sp,128
    17f6:	1f05                	addi	t5,t5,-31
    17f8:	0200                	addi	s0,sp,256
    17fa:	0304                	addi	s1,sp,384
    17fc:	02090103          	lb	sp,32(s2)
    1800:	0100                	addi	s0,sp,128
    1802:	1505                	addi	a0,a0,-31
    1804:	0200                	addi	s0,sp,256
    1806:	0304                	addi	s1,sp,384
    1808:	02090003          	lb	zero,32(s2)
    180c:	0100                	addi	s0,sp,128
    180e:	2005                	jal	182e <result+0x16a>
    1810:	0200                	addi	s0,sp,256
    1812:	0304                	addi	s1,sp,384
    1814:	0306                	slli	t1,t1,0x1
    1816:	097f                	0x97f
    1818:	0002                	c.slli64	zero
    181a:	0501                	addi	a0,a0,0
    181c:	000d                	c.nop	3
    181e:	0402                	c.slli64	s0
    1820:	09090303          	lb	t1,144(s2)
    1824:	0004                	0x4
    1826:	0501                	addi	a0,a0,0
    1828:	0402001b          	0x402001b
    182c:	00030603          	lb	a2,0(t1)
    1830:	0409                	addi	s0,s0,2
    1832:	0100                	addi	s0,sp,128
    1834:	1505                	addi	a0,a0,-31
    1836:	0200                	addi	s0,sp,256
    1838:	0304                	addi	s1,sp,384
    183a:	06090003          	lb	zero,96(s2)
    183e:	0100                	addi	s0,sp,128
    1840:	2005                	jal	1860 <result+0x19c>
    1842:	0200                	addi	s0,sp,256
    1844:	0304                	addi	s1,sp,384
    1846:	02097f03          	0x2097f03
    184a:	0100                	addi	s0,sp,128
    184c:	1505                	addi	a0,a0,-31
    184e:	0200                	addi	s0,sp,256
    1850:	0304                	addi	s1,sp,384
    1852:	02090103          	lb	sp,32(s2)
    1856:	0100                	addi	s0,sp,128
    1858:	2005                	jal	1878 <result+0x1b4>
    185a:	0200                	addi	s0,sp,256
    185c:	0304                	addi	s1,sp,384
    185e:	0306                	slli	t1,t1,0x1
    1860:	097f                	0x97f
    1862:	0002                	c.slli64	zero
    1864:	0501                	addi	a0,a0,0
    1866:	000d                	c.nop	3
    1868:	0402                	c.slli64	s0
    186a:	090d0303          	lb	t1,144(s10)
    186e:	0002                	c.slli64	zero
    1870:	0501                	addi	a0,a0,0
    1872:	0402001b          	0x402001b
    1876:	00030603          	lb	a2,0(t1)
    187a:	0409                	addi	s0,s0,2
    187c:	0100                	addi	s0,sp,128
    187e:	1505                	addi	a0,a0,-31
    1880:	0200                	addi	s0,sp,256
    1882:	0304                	addi	s1,sp,384
    1884:	06090003          	lb	zero,96(s2)
    1888:	0100                	addi	s0,sp,128
    188a:	2005                	jal	18aa <result+0x1e6>
    188c:	0200                	addi	s0,sp,256
    188e:	0304                	addi	s1,sp,384
    1890:	02097f03          	0x2097f03
    1894:	0100                	addi	s0,sp,128
    1896:	1505                	addi	a0,a0,-31
    1898:	0200                	addi	s0,sp,256
    189a:	0304                	addi	s1,sp,384
    189c:	02090103          	lb	sp,32(s2)
    18a0:	0100                	addi	s0,sp,128
    18a2:	2005                	jal	18c2 <result+0x1fe>
    18a4:	0200                	addi	s0,sp,256
    18a6:	0304                	addi	s1,sp,384
    18a8:	0306                	slli	t1,t1,0x1
    18aa:	097f                	0x97f
    18ac:	0002                	c.slli64	zero
    18ae:	0501                	addi	a0,a0,0
    18b0:	000d                	c.nop	3
    18b2:	0402                	c.slli64	s0
    18b4:	09090303          	lb	t1,144(s2)
    18b8:	0002                	c.slli64	zero
    18ba:	0501                	addi	a0,a0,0
    18bc:	0019                	c.nop	6
    18be:	0402                	c.slli64	s0
    18c0:	00030603          	lb	a2,0(t1)
    18c4:	0009                	c.nop	2
    18c6:	0100                	addi	s0,sp,128
    18c8:	2305                	jal	1de8 <random_keys+0x33c>
    18ca:	0200                	addi	s0,sp,256
    18cc:	0304                	addi	s1,sp,384
    18ce:	04090003          	lb	zero,64(s2)
    18d2:	0100                	addi	s0,sp,128
    18d4:	1d05                	addi	s10,s10,-31
    18d6:	0200                	addi	s0,sp,256
    18d8:	0304                	addi	s1,sp,384
    18da:	04090003          	lb	zero,64(s2)
    18de:	0100                	addi	s0,sp,128
    18e0:	1305                	addi	t1,t1,-31
    18e2:	0200                	addi	s0,sp,256
    18e4:	0304                	addi	s1,sp,384
    18e6:	04090003          	lb	zero,64(s2)
    18ea:	0100                	addi	s0,sp,128
    18ec:	2005                	jal	190c <result+0x248>
    18ee:	0200                	addi	s0,sp,256
    18f0:	0304                	addi	s1,sp,384
    18f2:	04097f03          	0x4097f03
    18f6:	0100                	addi	s0,sp,128
    18f8:	1d05                	addi	s10,s10,-31
    18fa:	0200                	addi	s0,sp,256
    18fc:	0304                	addi	s1,sp,384
    18fe:	02090103          	lb	sp,32(s2)
    1902:	0100                	addi	s0,sp,128
    1904:	1305                	addi	t1,t1,-31
    1906:	0200                	addi	s0,sp,256
    1908:	0304                	addi	s1,sp,384
    190a:	02090003          	lb	zero,32(s2)
    190e:	0100                	addi	s0,sp,128
    1910:	2005                	jal	1930 <ti_2+0x14>
    1912:	0200                	addi	s0,sp,256
    1914:	0304                	addi	s1,sp,384
    1916:	0306                	slli	t1,t1,0x1
    1918:	097f                	0x97f
    191a:	0002                	c.slli64	zero
    191c:	0501                	addi	a0,a0,0
    191e:	000d                	c.nop	3
    1920:	0402                	c.slli64	s0
    1922:	09090303          	lb	t1,144(s2)
    1926:	0004                	0x4
    1928:	0501                	addi	a0,a0,0
    192a:	0015                	c.nop	5
    192c:	0402                	c.slli64	s0
    192e:	00030603          	lb	a2,0(t1)
    1932:	0409                	addi	s0,s0,2
    1934:	0100                	addi	s0,sp,128
    1936:	2005                	jal	1956 <ti_2+0x3a>
    1938:	0200                	addi	s0,sp,256
    193a:	0304                	addi	s1,sp,384
    193c:	06097f03          	0x6097f03
    1940:	0100                	addi	s0,sp,128
    1942:	1505                	addi	a0,a0,-31
    1944:	0200                	addi	s0,sp,256
    1946:	0304                	addi	s1,sp,384
    1948:	02090103          	lb	sp,32(s2)
    194c:	0100                	addi	s0,sp,128
    194e:	0d05                	addi	s10,s10,1
    1950:	0200                	addi	s0,sp,256
    1952:	0304                	addi	s1,sp,384
    1954:	0306                	slli	t1,t1,0x1
    1956:	0901                	addi	s2,s2,0
    1958:	0002                	c.slli64	zero
    195a:	0501                	addi	a0,a0,0
    195c:	0019                	c.nop	6
    195e:	0402                	c.slli64	s0
    1960:	00030603          	lb	a2,0(t1)
    1964:	0009                	c.nop	2
    1966:	0100                	addi	s0,sp,128
    1968:	1505                	addi	a0,a0,-31
    196a:	0200                	addi	s0,sp,256
    196c:	0304                	addi	s1,sp,384
    196e:	06090103          	lb	sp,96(s2)
    1972:	0100                	addi	s0,sp,128
    1974:	0200                	addi	s0,sp,256
    1976:	0304                	addi	s1,sp,384
    1978:	04097f03          	0x4097f03
    197c:	0100                	addi	s0,sp,128
    197e:	0d05                	addi	s10,s10,1
    1980:	0200                	addi	s0,sp,256
    1982:	0304                	addi	s1,sp,384
    1984:	0306                	slli	t1,t1,0x1
    1986:	0901                	addi	s2,s2,0
    1988:	0002                	c.slli64	zero
    198a:	0501                	addi	a0,a0,0
    198c:	0015                	c.nop	5
    198e:	0402                	c.slli64	s0
    1990:	00030603          	lb	a2,0(t1)
    1994:	0409                	addi	s0,s0,2
    1996:	0100                	addi	s0,sp,128
    1998:	1605                	addi	a2,a2,-31
    199a:	0200                	addi	s0,sp,256
    199c:	0304                	addi	s1,sp,384
    199e:	04090303          	lb	t1,64(s2)
    19a2:	0100                	addi	s0,sp,128
    19a4:	1505                	addi	a0,a0,-31
    19a6:	0200                	addi	s0,sp,256
    19a8:	0304                	addi	s1,sp,384
    19aa:	02097d03          	0x2097d03
    19ae:	0100                	addi	s0,sp,128
    19b0:	0d05                	addi	s10,s10,1
    19b2:	0200                	addi	s0,sp,256
    19b4:	0304                	addi	s1,sp,384
    19b6:	0306                	slli	t1,t1,0x1
    19b8:	0901                	addi	s2,s2,0
    19ba:	0004                	0x4
    19bc:	0501                	addi	a0,a0,0
    19be:	0019                	c.nop	6
    19c0:	0402                	c.slli64	s0
    19c2:	00030603          	lb	a2,0(t1)
    19c6:	0009                	c.nop	2
    19c8:	0100                	addi	s0,sp,128
    19ca:	1505                	addi	a0,a0,-31
    19cc:	0200                	addi	s0,sp,256
    19ce:	0304                	addi	s1,sp,384
    19d0:	04090003          	lb	zero,64(s2)
    19d4:	0100                	addi	s0,sp,128
    19d6:	0d05                	addi	s10,s10,1
    19d8:	0200                	addi	s0,sp,256
    19da:	0304                	addi	s1,sp,384
    19dc:	0306                	slli	t1,t1,0x1
    19de:	0901                	addi	s2,s2,0
    19e0:	0004                	0x4
    19e2:	0501                	addi	a0,a0,0
    19e4:	0015                	c.nop	5
    19e6:	0402                	c.slli64	s0
    19e8:	00030603          	lb	a2,0(t1)
    19ec:	0009                	c.nop	2
    19ee:	0100                	addi	s0,sp,128
    19f0:	0d05                	addi	s10,s10,1
    19f2:	0200                	addi	s0,sp,256
    19f4:	0304                	addi	s1,sp,384
    19f6:	0306                	slli	t1,t1,0x1
    19f8:	0901                	addi	s2,s2,0
    19fa:	0008                	0x8
    19fc:	0501                	addi	a0,a0,0
    19fe:	0020                	addi	s0,sp,8
    1a00:	0402                	c.slli64	s0
    1a02:	097a0303          	lb	t1,151(s4)
    1a06:	0000                	unimp
    1a08:	0501                	addi	a0,a0,0
    1a0a:	030d                	addi	t1,t1,3
    1a0c:	090c                	addi	a1,sp,144
    1a0e:	0004                	0x4
    1a10:	0501                	addi	a0,a0,0
    1a12:	0003061b          	0x3061b
    1a16:	0009                	c.nop	2
    1a18:	0100                	addi	s0,sp,128
    1a1a:	2005                	jal	1a3a <ti_2+0x11e>
    1a1c:	08090003          	lb	zero,128(s2)
    1a20:	0100                	addi	s0,sp,128
    1a22:	1005                	c.nop	-31
    1a24:	04090003          	lb	zero,64(s2)
    1a28:	0100                	addi	s0,sp,128
    1a2a:	1e05                	addi	t3,t3,-31
    1a2c:	0200                	addi	s0,sp,256
    1a2e:	0204                	addi	s1,sp,256
    1a30:	0306                	slli	t1,t1,0x1
    1a32:	097f                	0x97f
    1a34:	0004                	0x4
    1a36:	0501                	addi	a0,a0,0
    1a38:	000d                	c.nop	3
    1a3a:	0402                	c.slli64	s0
    1a3c:	090d0303          	lb	t1,144(s10)
    1a40:	0004                	0x4
    1a42:	0501                	addi	a0,a0,0
    1a44:	0020                	addi	s0,sp,8
    1a46:	0402                	c.slli64	s0
    1a48:	00030603          	lb	a2,0(t1)
    1a4c:	0009                	c.nop	2
    1a4e:	0100                	addi	s0,sp,128
    1a50:	0200                	addi	s0,sp,256
    1a52:	0304                	addi	s1,sp,384
    1a54:	02097f03          	0x2097f03
    1a58:	0100                	addi	s0,sp,128
    1a5a:	0200                	addi	s0,sp,256
    1a5c:	0304                	addi	s1,sp,384
    1a5e:	04090103          	lb	sp,64(s2)
    1a62:	0100                	addi	s0,sp,128
    1a64:	2505                	jal	2084 <_min_stack+0x84>
    1a66:	0200                	addi	s0,sp,256
    1a68:	0304                	addi	s1,sp,384
    1a6a:	04090003          	lb	zero,64(s2)
    1a6e:	0100                	addi	s0,sp,128
    1a70:	1505                	addi	a0,a0,-31
    1a72:	0200                	addi	s0,sp,256
    1a74:	0304                	addi	s1,sp,384
    1a76:	04090003          	lb	zero,64(s2)
    1a7a:	0100                	addi	s0,sp,128
    1a7c:	2005                	jal	1a9c <ti_2+0x180>
    1a7e:	0200                	addi	s0,sp,256
    1a80:	0304                	addi	s1,sp,384
    1a82:	0306                	slli	t1,t1,0x1
    1a84:	097f                	0x97f
    1a86:	0004                	0x4
    1a88:	0501                	addi	a0,a0,0
    1a8a:	0328                	addi	a0,sp,392
    1a8c:	090c                	addi	a1,sp,144
    1a8e:	0002                	c.slli64	zero
    1a90:	0501                	addi	a0,a0,0
    1a92:	0305                	addi	t1,t1,1
    1a94:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1a98:	0501                	addi	a0,a0,0
    1a9a:	0628                	addi	a0,sp,776
    1a9c:	00097d03          	0x97d03
    1aa0:	0100                	addi	s0,sp,128
    1aa2:	36090003          	lb	zero,864(s2)
    1aa6:	0100                	addi	s0,sp,128
    1aa8:	0905                	addi	s2,s2,1
    1aaa:	04090303          	lb	t1,64(s2)
    1aae:	0100                	addi	s0,sp,128
    1ab0:	10090103          	lb	sp,256(s2)
    1ab4:	0100                	addi	s0,sp,128
    1ab6:	0a097f03          	0xa097f03
    1aba:	0100                	addi	s0,sp,128
    1abc:	0505                	addi	a0,a0,1
    1abe:	0306                	slli	t1,t1,0x1
    1ac0:	0901                	addi	s2,s2,0
    1ac2:	006c                	addi	a1,sp,12
    1ac4:	0501                	addi	a0,a0,0
    1ac6:	0610                	addi	a2,sp,768
    1ac8:	00090603          	lb	a2,0(s2)
    1acc:	0100                	addi	s0,sp,128
    1ace:	0905                	addi	s2,s2,1
    1ad0:	04097a03          	0x4097a03
    1ad4:	0100                	addi	s0,sp,128
    1ad6:	02090603          	lb	a2,32(s2)
    1ada:	0100                	addi	s0,sp,128
    1adc:	0e05                	addi	t3,t3,1
    1ade:	0e090503          	lb	a0,224(s2)
    1ae2:	0100                	addi	s0,sp,128
    1ae4:	0905                	addi	s2,s2,1
    1ae6:	0a097503          	0xa097503
    1aea:	0100                	addi	s0,sp,128
    1aec:	0505                	addi	a0,a0,1
    1aee:	0306                	slli	t1,t1,0x1
    1af0:	0902                	c.slli64	s2
    1af2:	0064                	addi	s1,sp,12
    1af4:	0301                	addi	t1,t1,0
    1af6:	0901                	addi	s2,s2,0
    1af8:	0000                	unimp
    1afa:	0301                	addi	t1,t1,0
    1afc:	0901                	addi	s2,s2,0
    1afe:	0000                	unimp
    1b00:	0301                	addi	t1,t1,0
    1b02:	0901                	addi	s2,s2,0
    1b04:	0000                	unimp
    1b06:	0301                	addi	t1,t1,0
    1b08:	0901                	addi	s2,s2,0
    1b0a:	0000                	unimp
    1b0c:	0301                	addi	t1,t1,0
    1b0e:	0901                	addi	s2,s2,0
    1b10:	0000                	unimp
    1b12:	0301                	addi	t1,t1,0
    1b14:	0901                	addi	s2,s2,0
    1b16:	0000                	unimp
    1b18:	0301                	addi	t1,t1,0
    1b1a:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1b1e:	0301                	addi	t1,t1,0
    1b20:	0901                	addi	s2,s2,0
    1b22:	0000                	unimp
    1b24:	0501                	addi	a0,a0,0
    1b26:	060e                	slli	a2,a2,0x3
    1b28:	00090003          	lb	zero,0(s2)
    1b2c:	0100                	addi	s0,sp,128
    1b2e:	0505                	addi	a0,a0,1
    1b30:	0306                	slli	t1,t1,0x1
    1b32:	0902                	c.slli64	s2
    1b34:	0004                	0x4
    1b36:	0501                	addi	a0,a0,0
    1b38:	0003060b          	0x3060b
    1b3c:	0009                	c.nop	2
    1b3e:	0100                	addi	s0,sp,128
    1b40:	1005                	c.nop	-31
    1b42:	0200                	addi	s0,sp,256
    1b44:	0104                	addi	s1,sp,128
    1b46:	0306                	slli	t1,t1,0x1
    1b48:	0900                	addi	s0,sp,144
    1b4a:	0002                	c.slli64	zero
    1b4c:	0501                	addi	a0,a0,0
    1b4e:	0005                	c.nop	1
    1b50:	0402                	c.slli64	s0
    1b52:	0601                	addi	a2,a2,0
    1b54:	00090003          	lb	zero,0(s2)
    1b58:	0100                	addi	s0,sp,128
    1b5a:	06090603          	lb	a2,96(s2)
    1b5e:	0100                	addi	s0,sp,128
    1b60:	1105                	addi	sp,sp,-31
    1b62:	0200                	addi	s0,sp,256
    1b64:	0104                	addi	s1,sp,128
    1b66:	0306                	slli	t1,t1,0x1
    1b68:	0900                	addi	s0,sp,144
    1b6a:	0004                	0x4
    1b6c:	0501                	addi	a0,a0,0
    1b6e:	0005                	c.nop	1
    1b70:	0402                	c.slli64	s0
    1b72:	0601                	addi	a2,a2,0
    1b74:	00090003          	lb	zero,0(s2)
    1b78:	0100                	addi	s0,sp,128
    1b7a:	0b05                	addi	s6,s6,1
    1b7c:	04090703          	lb	a4,64(s2)
    1b80:	0100                	addi	s0,sp,128
    1b82:	1805                	addi	a6,a6,-31
    1b84:	02090103          	lb	sp,32(s2)
    1b88:	0100                	addi	s0,sp,128
    1b8a:	1005                	c.nop	-31
    1b8c:	0200                	addi	s0,sp,256
    1b8e:	0104                	addi	s1,sp,128
    1b90:	0306                	slli	t1,t1,0x1
    1b92:	097f                	0x97f
    1b94:	0008                	0x8
    1b96:	0501                	addi	a0,a0,0
    1b98:	0005                	c.nop	1
    1b9a:	0402                	c.slli64	s0
    1b9c:	0601                	addi	a2,a2,0
    1b9e:	00090003          	lb	zero,0(s2)
    1ba2:	0100                	addi	s0,sp,128
    1ba4:	1605                	addi	a2,a2,-31
    1ba6:	08090503          	lb	a0,128(s2)
    1baa:	0100                	addi	s0,sp,128
    1bac:	1805                	addi	a6,a6,-31
    1bae:	08090103          	lb	sp,128(s2)
    1bb2:	0100                	addi	s0,sp,128
    1bb4:	1005                	c.nop	-31
    1bb6:	0200                	addi	s0,sp,256
    1bb8:	0104                	addi	s1,sp,128
    1bba:	0306                	slli	t1,t1,0x1
    1bbc:	097f                	0x97f
    1bbe:	0008                	0x8
    1bc0:	0501                	addi	a0,a0,0
    1bc2:	0005                	c.nop	1
    1bc4:	0402                	c.slli64	s0
    1bc6:	0601                	addi	a2,a2,0
    1bc8:	00090003          	lb	zero,0(s2)
    1bcc:	0100                	addi	s0,sp,128
    1bce:	0306                	slli	t1,t1,0x1
    1bd0:	0905                	addi	s2,s2,1
    1bd2:	0004                	0x4
    1bd4:	0501                	addi	a0,a0,0
    1bd6:	061a                	slli	a2,a2,0x6
    1bd8:	00090303          	lb	t1,0(s2)
    1bdc:	0100                	addi	s0,sp,128
    1bde:	0a05                	addi	s4,s4,1
    1be0:	06097d03          	0x6097d03
    1be4:	0100                	addi	s0,sp,128
    1be6:	0505                	addi	a0,a0,1
    1be8:	0306                	slli	t1,t1,0x1
    1bea:	000c0903          	lb	s2,0(s8) # 19000 <_stack_start+0x9000>
    1bee:	0501                	addi	a0,a0,0
    1bf0:	0618                	addi	a4,sp,768
    1bf2:	02090103          	lb	sp,32(s2)
    1bf6:	0100                	addi	s0,sp,128
    1bf8:	1405                	addi	s0,s0,-31
    1bfa:	0200                	addi	s0,sp,256
    1bfc:	0104                	addi	s1,sp,128
    1bfe:	0306                	slli	t1,t1,0x1
    1c00:	097f                	0x97f
    1c02:	0008                	0x8
    1c04:	0501                	addi	a0,a0,0
    1c06:	0005                	c.nop	1
    1c08:	0402                	c.slli64	s0
    1c0a:	0601                	addi	a2,a2,0
    1c0c:	00090003          	lb	zero,0(s2)
    1c10:	0100                	addi	s0,sp,128
    1c12:	0306                	slli	t1,t1,0x1
    1c14:	0906                	slli	s2,s2,0x1
    1c16:	0004                	0x4
    1c18:	0501                	addi	a0,a0,0
    1c1a:	060a                	slli	a2,a2,0x2
    1c1c:	00090003          	lb	zero,0(s2)
    1c20:	0100                	addi	s0,sp,128
    1c22:	0505                	addi	a0,a0,1
    1c24:	0306                	slli	t1,t1,0x1
    1c26:	0904                	addi	s1,sp,144
    1c28:	000c                	0xc
    1c2a:	0501                	addi	a0,a0,0
    1c2c:	061a                	slli	a2,a2,0x6
    1c2e:	06090003          	lb	zero,96(s2)
    1c32:	0100                	addi	s0,sp,128
    1c34:	1805                	addi	a6,a6,-31
    1c36:	02090103          	lb	sp,32(s2)
    1c3a:	0100                	addi	s0,sp,128
    1c3c:	1405                	addi	s0,s0,-31
    1c3e:	0200                	addi	s0,sp,256
    1c40:	0104                	addi	s1,sp,128
    1c42:	0306                	slli	t1,t1,0x1
    1c44:	097f                	0x97f
    1c46:	0008                	0x8
    1c48:	0501                	addi	a0,a0,0
    1c4a:	0005                	c.nop	1
    1c4c:	0402                	c.slli64	s0
    1c4e:	0601                	addi	a2,a2,0
    1c50:	00090003          	lb	zero,0(s2)
    1c54:	0100                	addi	s0,sp,128
    1c56:	0306                	slli	t1,t1,0x1
    1c58:	0905                	addi	s2,s2,1
    1c5a:	0004                	0x4
    1c5c:	0501                	addi	a0,a0,0
    1c5e:	060a                	slli	a2,a2,0x2
    1c60:	00090003          	lb	zero,0(s2)
    1c64:	0100                	addi	s0,sp,128
    1c66:	0505                	addi	a0,a0,1
    1c68:	0306                	slli	t1,t1,0x1
    1c6a:	000c0903          	lb	s2,0(s8)
    1c6e:	0501                	addi	a0,a0,0
    1c70:	0003060b          	0x3060b
    1c74:	0209                	addi	tp,tp,2
    1c76:	0100                	addi	s0,sp,128
    1c78:	1805                	addi	a6,a6,-31
    1c7a:	02090003          	lb	zero,32(s2)
    1c7e:	0100                	addi	s0,sp,128
    1c80:	1005                	c.nop	-31
    1c82:	0200                	addi	s0,sp,256
    1c84:	0104                	addi	s1,sp,128
    1c86:	0306                	slli	t1,t1,0x1
    1c88:	0900                	addi	s0,sp,144
    1c8a:	0004                	0x4
    1c8c:	0501                	addi	a0,a0,0
    1c8e:	0005                	c.nop	1
    1c90:	0402                	c.slli64	s0
    1c92:	0601                	addi	a2,a2,0
    1c94:	00090003          	lb	zero,0(s2)
    1c98:	0100                	addi	s0,sp,128
    1c9a:	0306                	slli	t1,t1,0x1
    1c9c:	0906                	slli	s2,s2,0x1
    1c9e:	0004                	0x4
    1ca0:	0501                	addi	a0,a0,0
    1ca2:	060a                	slli	a2,a2,0x2
    1ca4:	00090003          	lb	zero,0(s2)
    1ca8:	0100                	addi	s0,sp,128
    1caa:	0505                	addi	a0,a0,1
    1cac:	0306                	slli	t1,t1,0x1
    1cae:	0904                	addi	s1,sp,144
    1cb0:	0008                	0x8
    1cb2:	0501                	addi	a0,a0,0
    1cb4:	061a                	slli	a2,a2,0x6
    1cb6:	00090003          	lb	zero,0(s2)
    1cba:	0100                	addi	s0,sp,128
    1cbc:	1805                	addi	a6,a6,-31
    1cbe:	0a090103          	lb	sp,160(s2)
    1cc2:	0100                	addi	s0,sp,128
    1cc4:	1405                	addi	s0,s0,-31
    1cc6:	0200                	addi	s0,sp,256
    1cc8:	0104                	addi	s1,sp,128
    1cca:	0306                	slli	t1,t1,0x1
    1ccc:	097f                	0x97f
    1cce:	0008                	0x8
    1cd0:	0501                	addi	a0,a0,0
    1cd2:	0005                	c.nop	1
    1cd4:	0402                	c.slli64	s0
    1cd6:	0601                	addi	a2,a2,0
    1cd8:	02090003          	lb	zero,32(s2)
    1cdc:	0100                	addi	s0,sp,128
    1cde:	1a05                	addi	s4,s4,-31
    1ce0:	04090503          	lb	a0,64(s2)
    1ce4:	0100                	addi	s0,sp,128
    1ce6:	1805                	addi	a6,a6,-31
    1ce8:	04090103          	lb	sp,64(s2)
    1cec:	0100                	addi	s0,sp,128
    1cee:	1a05                	addi	s4,s4,-31
    1cf0:	08097f03          	0x8097f03
    1cf4:	0100                	addi	s0,sp,128
    1cf6:	1405                	addi	s0,s0,-31
    1cf8:	0200                	addi	s0,sp,256
    1cfa:	0104                	addi	s1,sp,128
    1cfc:	0306                	slli	t1,t1,0x1
    1cfe:	0900                	addi	s0,sp,144
    1d00:	0008                	0x8
    1d02:	0501                	addi	a0,a0,0
    1d04:	0005                	c.nop	1
    1d06:	0402                	c.slli64	s0
    1d08:	0601                	addi	a2,a2,0
    1d0a:	00090003          	lb	zero,0(s2)
    1d0e:	0100                	addi	s0,sp,128
    1d10:	0306                	slli	t1,t1,0x1
    1d12:	0906                	slli	s2,s2,0x1
    1d14:	0004                	0x4
    1d16:	0301                	addi	t1,t1,0
    1d18:	0902                	c.slli64	s2
    1d1a:	0000                	unimp
    1d1c:	0501                	addi	a0,a0,0
    1d1e:	0601                	addi	a2,a2,0
    1d20:	00090103          	lb	sp,0(s2)
    1d24:	0100                	addi	s0,sp,128
    1d26:	0905                	addi	s2,s2,1
    1d28:	0200                	addi	s0,sp,256
    1d2a:	0304                	addi	s1,sp,384
    1d2c:	0306                	slli	t1,t1,0x1
    1d2e:	7fbd                	lui	t6,0xfffef
    1d30:	4009                	c.li	zero,2
    1d32:	0100                	addi	s0,sp,128
    1d34:	1205                	addi	tp,tp,-31
    1d36:	0200                	addi	s0,sp,256
    1d38:	0304                	addi	s1,sp,384
    1d3a:	0306                	slli	t1,t1,0x1
    1d3c:	0900                	addi	s0,sp,144
    1d3e:	0000                	unimp
    1d40:	0501                	addi	a0,a0,0
    1d42:	04020017          	auipc	zero,0x4020
    1d46:	7f030603          	lb	a2,2032(t1)
    1d4a:	0a09                	addi	s4,s4,2
    1d4c:	0100                	addi	s0,sp,128
    1d4e:	0905                	addi	s2,s2,1
    1d50:	0200                	addi	s0,sp,256
    1d52:	0304                	addi	s1,sp,384
    1d54:	04090703          	lb	a4,64(s2)
    1d58:	0100                	addi	s0,sp,128
    1d5a:	0e05                	addi	t3,t3,1
    1d5c:	0200                	addi	s0,sp,256
    1d5e:	0304                	addi	s1,sp,384
    1d60:	0306                	slli	t1,t1,0x1
    1d62:	0900                	addi	s0,sp,144
    1d64:	0004                	0x4
    1d66:	0501                	addi	a0,a0,0
    1d68:	0009                	c.nop	2
    1d6a:	0402                	c.slli64	s0
    1d6c:	01030603          	lb	a2,16(t1)
    1d70:	0a09                	addi	s4,s4,2
    1d72:	0100                	addi	s0,sp,128
    1d74:	0e05                	addi	t3,t3,1
    1d76:	0200                	addi	s0,sp,256
    1d78:	0304                	addi	s1,sp,384
    1d7a:	0306                	slli	t1,t1,0x1
    1d7c:	0900                	addi	s0,sp,144
    1d7e:	0000                	unimp
    1d80:	0501                	addi	a0,a0,0
    1d82:	0019                	c.nop	6
    1d84:	0402                	c.slli64	s0
    1d86:	7e030603          	lb	a2,2016(t1)
    1d8a:	0a09                	addi	s4,s4,2
    1d8c:	0100                	addi	s0,sp,128
    1d8e:	0905                	addi	s2,s2,1
    1d90:	0200                	addi	s0,sp,256
    1d92:	0304                	addi	s1,sp,384
    1d94:	04090803          	lb	a6,64(s2)
    1d98:	0100                	addi	s0,sp,128
    1d9a:	1b05                	addi	s6,s6,-31
    1d9c:	0200                	addi	s0,sp,256
    1d9e:	0304                	addi	s1,sp,384
    1da0:	0306                	slli	t1,t1,0x1
    1da2:	0900                	addi	s0,sp,144
    1da4:	0004                	0x4
    1da6:	0501                	addi	a0,a0,0
    1da8:	0018                	0x18
    1daa:	0402                	c.slli64	s0
    1dac:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1db0:	0004                	0x4
    1db2:	0501                	addi	a0,a0,0
    1db4:	0402001b          	0x402001b
    1db8:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1dbc:	0004                	0x4
    1dbe:	0501                	addi	a0,a0,0
    1dc0:	0018                	0x18
    1dc2:	0402                	c.slli64	s0
    1dc4:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1dc8:	0002                	c.slli64	zero
    1dca:	0501                	addi	a0,a0,0
    1dcc:	04020017          	auipc	zero,0x4020
    1dd0:	097f0303          	lb	t1,151(t5)
    1dd4:	0002                	c.slli64	zero
    1dd6:	0501                	addi	a0,a0,0
    1dd8:	0018                	0x18
    1dda:	0402                	c.slli64	s0
    1ddc:	09010303          	lb	t1,144(sp)
    1de0:	0002                	c.slli64	zero
    1de2:	0501                	addi	a0,a0,0
    1de4:	04020017          	auipc	zero,0x4020
    1de8:	7f030603          	lb	a2,2032(t1)
    1dec:	0209                	addi	tp,tp,2
    1dee:	0100                	addi	s0,sp,128
    1df0:	0905                	addi	s2,s2,1
    1df2:	0200                	addi	s0,sp,256
    1df4:	0304                	addi	s1,sp,384
    1df6:	02090603          	lb	a2,32(s2)
    1dfa:	0100                	addi	s0,sp,128
    1dfc:	1805                	addi	a6,a6,-31
    1dfe:	0200                	addi	s0,sp,256
    1e00:	0304                	addi	s1,sp,384
    1e02:	0306                	slli	t1,t1,0x1
    1e04:	0900                	addi	s0,sp,144
    1e06:	0000                	unimp
    1e08:	0501                	addi	a0,a0,0
    1e0a:	0402001b          	0x402001b
    1e0e:	7f030603          	lb	a2,2032(t1)
    1e12:	0a09                	addi	s4,s4,2
    1e14:	0100                	addi	s0,sp,128
    1e16:	0905                	addi	s2,s2,1
    1e18:	0200                	addi	s0,sp,256
    1e1a:	0304                	addi	s1,sp,384
    1e1c:	06090903          	lb	s2,96(s2)
    1e20:	0100                	addi	s0,sp,128
    1e22:	1c05                	addi	s8,s8,-31
    1e24:	0200                	addi	s0,sp,256
    1e26:	0304                	addi	s1,sp,384
    1e28:	0306                	slli	t1,t1,0x1
    1e2a:	0900                	addi	s0,sp,144
    1e2c:	0000                	unimp
    1e2e:	0501                	addi	a0,a0,0
    1e30:	0018                	0x18
    1e32:	0402                	c.slli64	s0
    1e34:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1e38:	0002                	c.slli64	zero
    1e3a:	0501                	addi	a0,a0,0
    1e3c:	001f 0402 0603      	0x6030402001f
    1e42:	08097f03          	0x8097f03
    1e46:	0100                	addi	s0,sp,128
    1e48:	0905                	addi	s2,s2,1
    1e4a:	0200                	addi	s0,sp,256
    1e4c:	0304                	addi	s1,sp,384
    1e4e:	06090b03          	lb	s6,96(s2)
    1e52:	0100                	addi	s0,sp,128
    1e54:	1c05                	addi	s8,s8,-31
    1e56:	0200                	addi	s0,sp,256
    1e58:	0304                	addi	s1,sp,384
    1e5a:	0306                	slli	t1,t1,0x1
    1e5c:	0900                	addi	s0,sp,144
    1e5e:	0004                	0x4
    1e60:	0501                	addi	a0,a0,0
    1e62:	0018                	0x18
    1e64:	0402                	c.slli64	s0
    1e66:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1e6a:	0008                	0x8
    1e6c:	0501                	addi	a0,a0,0
    1e6e:	001f 0402 0303      	0x3030402001f
    1e74:	097f                	0x97f
    1e76:	0002                	c.slli64	zero
    1e78:	0501                	addi	a0,a0,0
    1e7a:	0018                	0x18
    1e7c:	0402                	c.slli64	s0
    1e7e:	09010303          	lb	t1,144(sp)
    1e82:	0002                	c.slli64	zero
    1e84:	0501                	addi	a0,a0,0
    1e86:	001f 0402 0603      	0x6030402001f
    1e8c:	02097f03          	0x2097f03
    1e90:	0100                	addi	s0,sp,128
    1e92:	0905                	addi	s2,s2,1
    1e94:	0200                	addi	s0,sp,256
    1e96:	0304                	addi	s1,sp,384
    1e98:	02090903          	lb	s2,32(s2)
    1e9c:	0100                	addi	s0,sp,128
    1e9e:	1605                	addi	a2,a2,-31
    1ea0:	0200                	addi	s0,sp,256
    1ea2:	0304                	addi	s1,sp,384
    1ea4:	0306                	slli	t1,t1,0x1
    1ea6:	0900                	addi	s0,sp,144
    1ea8:	0000                	unimp
    1eaa:	0501                	addi	a0,a0,0
    1eac:	001d                	c.nop	7
    1eae:	0402                	c.slli64	s0
    1eb0:	097f0303          	lb	t1,151(t5)
    1eb4:	0002                	c.slli64	zero
    1eb6:	0501                	addi	a0,a0,0
    1eb8:	0016                	c.slli	zero,0x5
    1eba:	0402                	c.slli64	s0
    1ebc:	09010303          	lb	t1,144(sp)
    1ec0:	0004                	0x4
    1ec2:	0501                	addi	a0,a0,0
    1ec4:	0402000f          	0x402000f
    1ec8:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1ecc:	0004                	0x4
    1ece:	0501                	addi	a0,a0,0
    1ed0:	001d                	c.nop	7
    1ed2:	0402                	c.slli64	s0
    1ed4:	7f030603          	lb	a2,2032(t1)
    1ed8:	0409                	addi	s0,s0,2
    1eda:	0100                	addi	s0,sp,128
    1edc:	0905                	addi	s2,s2,1
    1ede:	0200                	addi	s0,sp,256
    1ee0:	0304                	addi	s1,sp,384
    1ee2:	02090b03          	lb	s6,32(s2)
    1ee6:	0100                	addi	s0,sp,128
    1ee8:	1c05                	addi	s8,s8,-31
    1eea:	0200                	addi	s0,sp,256
    1eec:	0304                	addi	s1,sp,384
    1eee:	0306                	slli	t1,t1,0x1
    1ef0:	0900                	addi	s0,sp,144
    1ef2:	0000                	unimp
    1ef4:	0501                	addi	a0,a0,0
    1ef6:	0018                	0x18
    1ef8:	0402                	c.slli64	s0
    1efa:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1efe:	0004                	0x4
    1f00:	0501                	addi	a0,a0,0
    1f02:	001f 0402 0603      	0x6030402001f
    1f08:	08097f03          	0x8097f03
    1f0c:	0100                	addi	s0,sp,128
    1f0e:	0905                	addi	s2,s2,1
    1f10:	0200                	addi	s0,sp,256
    1f12:	0304                	addi	s1,sp,384
    1f14:	04090603          	lb	a2,64(s2)
    1f18:	0100                	addi	s0,sp,128
    1f1a:	1805                	addi	a6,a6,-31
    1f1c:	0200                	addi	s0,sp,256
    1f1e:	0304                	addi	s1,sp,384
    1f20:	0306                	slli	t1,t1,0x1
    1f22:	0900                	addi	s0,sp,144
    1f24:	0004                	0x4
    1f26:	0501                	addi	a0,a0,0
    1f28:	001f 0402 0303      	0x3030402001f
    1f2e:	0900                	addi	s0,sp,144
    1f30:	0004                	0x4
    1f32:	0501                	addi	a0,a0,0
    1f34:	0018                	0x18
    1f36:	0402                	c.slli64	s0
    1f38:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1f3c:	0004                	0x4
    1f3e:	0501                	addi	a0,a0,0
    1f40:	0021                	c.nop	8
    1f42:	0402                	c.slli64	s0
    1f44:	097f0303          	lb	t1,151(t5)
    1f48:	0002                	c.slli64	zero
    1f4a:	0501                	addi	a0,a0,0
    1f4c:	0018                	0x18
    1f4e:	0402                	c.slli64	s0
    1f50:	09010303          	lb	t1,144(sp)
    1f54:	0002                	c.slli64	zero
    1f56:	0501                	addi	a0,a0,0
    1f58:	0021                	c.nop	8
    1f5a:	0402                	c.slli64	s0
    1f5c:	7f030603          	lb	a2,2032(t1)
    1f60:	0209                	addi	tp,tp,2
    1f62:	0100                	addi	s0,sp,128
    1f64:	4b05                	li	s6,1
    1f66:	02090c03          	lb	s8,32(s2)
    1f6a:	0100                	addi	s0,sp,128
    1f6c:	0505                	addi	a0,a0,1
    1f6e:	00090203          	lb	tp,0(s2)
    1f72:	0100                	addi	s0,sp,128
    1f74:	00090103          	lb	sp,0(s2)
    1f78:	0100                	addi	s0,sp,128
    1f7a:	00090203          	lb	tp,0(s2)
    1f7e:	0100                	addi	s0,sp,128
    1f80:	4b05                	li	s6,1
    1f82:	0306                	slli	t1,t1,0x1
    1f84:	0000097b          	0x97b
    1f88:	0501                	addi	a0,a0,0
    1f8a:	0309                	addi	t1,t1,2
    1f8c:	0905                	addi	s2,s2,1
    1f8e:	000e                	c.slli	zero,0x3
    1f90:	0501                	addi	a0,a0,0
    1f92:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    1f96:	000e                	c.slli	zero,0x3
    1f98:	0301                	addi	t1,t1,0
    1f9a:	0900                	addi	s0,sp,144
    1f9c:	0006                	c.slli	zero,0x1
    1f9e:	0501                	addi	a0,a0,0
    1fa0:	0309                	addi	t1,t1,2
    1fa2:	0905                	addi	s2,s2,1
    1fa4:	0004                	0x4
    1fa6:	0501                	addi	a0,a0,0
    1fa8:	0605                	addi	a2,a2,1
    1faa:	02090103          	lb	sp,32(s2)
    1fae:	0100                	addi	s0,sp,128
    1fb0:	00090103          	lb	sp,0(s2)
    1fb4:	0100                	addi	s0,sp,128
    1fb6:	00090303          	lb	t1,0(s2)
    1fba:	0100                	addi	s0,sp,128
    1fbc:	0c05                	addi	s8,s8,1
    1fbe:	0306                	slli	t1,t1,0x1
    1fc0:	0900                	addi	s0,sp,144
    1fc2:	0000                	unimp
    1fc4:	0501                	addi	a0,a0,0
    1fc6:	0605                	addi	a2,a2,1
    1fc8:	12090403          	lb	s0,288(s2)
    1fcc:	0100                	addi	s0,sp,128
    1fce:	1005                	c.nop	-31
    1fd0:	00090003          	lb	zero,0(s2)
    1fd4:	0100                	addi	s0,sp,128
    1fd6:	0c05                	addi	s8,s8,1
    1fd8:	0306                	slli	t1,t1,0x1
    1fda:	097c                	addi	a5,sp,156
    1fdc:	0000                	unimp
    1fde:	0501                	addi	a0,a0,0
    1fe0:	0305                	addi	t1,t1,1
    1fe2:	0904                	addi	s1,sp,144
    1fe4:	0002                	c.slli64	zero
    1fe6:	0501                	addi	a0,a0,0
    1fe8:	0009                	c.nop	2
    1fea:	0402                	c.slli64	s0
    1fec:	01030603          	lb	a2,16(t1)
    1ff0:	0409                	addi	s0,s0,2
    1ff2:	0100                	addi	s0,sp,128
    1ff4:	2405                	jal	2214 <_min_stack+0x214>
    1ff6:	0200                	addi	s0,sp,256
    1ff8:	0304                	addi	s1,sp,384
    1ffa:	0306                	slli	t1,t1,0x1
    1ffc:	0900                	addi	s0,sp,144
    1ffe:	0004                	0x4
    2000:	0501                	addi	a0,a0,0
    2002:	0402001b          	0x402001b
    2006:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    200a:	0004                	0x4
    200c:	0501                	addi	a0,a0,0
    200e:	0011                	c.nop	4
    2010:	0402                	c.slli64	s0
    2012:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    2016:	0008                	0x8
    2018:	0501                	addi	a0,a0,0
    201a:	0018                	0x18
    201c:	0402                	c.slli64	s0
    201e:	7f030603          	lb	a2,2032(t1)
    2022:	0209                	addi	tp,tp,2
    2024:	0100                	addi	s0,sp,128
    2026:	1005                	c.nop	-31
    2028:	0200                	addi	s0,sp,256
    202a:	0304                	addi	s1,sp,384
    202c:	00090003          	lb	zero,0(s2)
    2030:	0100                	addi	s0,sp,128
    2032:	0505                	addi	a0,a0,1
    2034:	0200                	addi	s0,sp,256
    2036:	0304                	addi	s1,sp,384
    2038:	0306                	slli	t1,t1,0x1
    203a:	0900                	addi	s0,sp,144
    203c:	0000                	unimp
    203e:	0601                	addi	a2,a2,0
    2040:	04090603          	lb	a2,64(s2)
    2044:	0100                	addi	s0,sp,128
    2046:	0a05                	addi	s4,s4,1
    2048:	0306                	slli	t1,t1,0x1
    204a:	0900                	addi	s0,sp,144
    204c:	0000                	unimp
    204e:	0501                	addi	a0,a0,0
    2050:	0605                	addi	a2,a2,1
    2052:	12090203          	lb	tp,288(s2)
    2056:	0100                	addi	s0,sp,128
    2058:	1a05                	addi	s4,s4,-31
    205a:	0306                	slli	t1,t1,0x1
    205c:	0900                	addi	s0,sp,144
    205e:	0000                	unimp
    2060:	0501                	addi	a0,a0,0
    2062:	0014                	0x14
    2064:	0402                	c.slli64	s0
    2066:	0601                	addi	a2,a2,0
    2068:	08090003          	lb	zero,128(s2)
    206c:	0100                	addi	s0,sp,128
    206e:	0505                	addi	a0,a0,1
    2070:	0200                	addi	s0,sp,256
    2072:	0104                	addi	s1,sp,128
    2074:	0306                	slli	t1,t1,0x1
    2076:	0900                	addi	s0,sp,144
    2078:	0000                	unimp
    207a:	0501                	addi	a0,a0,0
    207c:	0301                	addi	t1,t1,0
    207e:	0909                	addi	s2,s2,2
    2080:	0004                	0x4
    2082:	0501                	addi	a0,a0,0
    2084:	0009                	c.nop	2
    2086:	0402                	c.slli64	s0
    2088:	78030603          	lb	a2,1920(t1)
    208c:	1009                	c.nop	-30
    208e:	0100                	addi	s0,sp,128
    2090:	1905                	addi	s2,s2,-31
    2092:	0200                	addi	s0,sp,256
    2094:	0304                	addi	s1,sp,384
    2096:	0306                	slli	t1,t1,0x1
    2098:	0900                	addi	s0,sp,144
    209a:	0000                	unimp
    209c:	0501                	addi	a0,a0,0
    209e:	001f 0402 0303      	0x3030402001f
    20a4:	097f                	0x97f
    20a6:	0008                	0x8
    20a8:	0501                	addi	a0,a0,0
    20aa:	0015                	c.nop	5
    20ac:	0402                	c.slli64	s0
    20ae:	09010303          	lb	t1,144(sp)
    20b2:	0004                	0x4
    20b4:	0501                	addi	a0,a0,0
    20b6:	001f 0402 0603      	0x6030402001f
    20bc:	04097f03          	0x4097f03
    20c0:	0100                	addi	s0,sp,128
    20c2:	6c05                	lui	s8,0x1
    20c4:	02090c03          	lb	s8,32(s2)
    20c8:	0100                	addi	s0,sp,128
    20ca:	0505                	addi	a0,a0,1
    20cc:	00090203          	lb	tp,0(s2)
    20d0:	0100                	addi	s0,sp,128
    20d2:	00090103          	lb	sp,0(s2)
    20d6:	0100                	addi	s0,sp,128
    20d8:	00090103          	lb	sp,0(s2)
    20dc:	0100                	addi	s0,sp,128
    20de:	00090103          	lb	sp,0(s2)
    20e2:	0100                	addi	s0,sp,128
    20e4:	00090103          	lb	sp,0(s2)
    20e8:	0100                	addi	s0,sp,128
    20ea:	00090103          	lb	sp,0(s2)
    20ee:	0100                	addi	s0,sp,128
    20f0:	00090303          	lb	t1,0(s2)
    20f4:	0100                	addi	s0,sp,128
    20f6:	6c05                	lui	s8,0x1
    20f8:	0306                	slli	t1,t1,0x1
    20fa:	0976                	slli	s2,s2,0x1d
    20fc:	0000                	unimp
    20fe:	0501                	addi	a0,a0,0
    2100:	031e                	slli	t1,t1,0x7
    2102:	0911                	addi	s2,s2,4
    2104:	0008                	0x8
    2106:	0501                	addi	a0,a0,0
    2108:	036c                	addi	a1,sp,396
    210a:	0006096f          	jal	s2,6210a <_stack_start+0x5210a>
    210e:	0501                	addi	a0,a0,0
    2110:	0309                	addi	t1,t1,2
    2112:	090a                	slli	s2,s2,0x2
    2114:	000a                	c.slli	zero,0x2
    2116:	0501                	addi	a0,a0,0
    2118:	036c                	addi	a1,sp,396
    211a:	0976                	slli	s2,s2,0x1d
    211c:	0004                	0x4
    211e:	0501                	addi	a0,a0,0
    2120:	0309                	addi	t1,t1,2
    2122:	090a                	slli	s2,s2,0x2
    2124:	0004                	0x4
    2126:	0501                	addi	a0,a0,0
    2128:	036c                	addi	a1,sp,396
    212a:	0976                	slli	s2,s2,0x1d
    212c:	0004                	0x4
    212e:	0301                	addi	t1,t1,0
    2130:	0900                	addi	s0,sp,144
    2132:	0008                	0x8
    2134:	0501                	addi	a0,a0,0
    2136:	030a                	slli	t1,t1,0x2
    2138:	090e                	slli	s2,s2,0x3
    213a:	0002                	c.slli64	zero
    213c:	0501                	addi	a0,a0,0
    213e:	0309                	addi	t1,t1,2
    2140:	097c                	addi	a5,sp,156
    2142:	0004                	0x4
    2144:	0501                	addi	a0,a0,0
    2146:	0605                	addi	a2,a2,1
    2148:	04090403          	lb	s0,64(s2)
    214c:	0100                	addi	s0,sp,128
    214e:	0a05                	addi	s4,s4,1
    2150:	0306                	slli	t1,t1,0x1
    2152:	0900                	addi	s0,sp,144
    2154:	0000                	unimp
    2156:	0501                	addi	a0,a0,0
    2158:	0605                	addi	a2,a2,1
    215a:	12090303          	lb	t1,288(s2)
    215e:	0100                	addi	s0,sp,128
    2160:	0b05                	addi	s6,s6,1
    2162:	0306                	slli	t1,t1,0x1
    2164:	0900                	addi	s0,sp,144
    2166:	0004                	0x4
    2168:	0501                	addi	a0,a0,0
    216a:	0014                	0x14
    216c:	0402                	c.slli64	s0
    216e:	0601                	addi	a2,a2,0
    2170:	02090003          	lb	zero,32(s2)
    2174:	0100                	addi	s0,sp,128
    2176:	0505                	addi	a0,a0,1
    2178:	0200                	addi	s0,sp,256
    217a:	0104                	addi	s1,sp,128
    217c:	0306                	slli	t1,t1,0x1
    217e:	0900                	addi	s0,sp,144
    2180:	0000                	unimp
    2182:	0501                	addi	a0,a0,0
    2184:	0316                	slli	t1,t1,0x5
    2186:	0906                	slli	s2,s2,0x1
    2188:	0004                	0x4
    218a:	0501                	addi	a0,a0,0
    218c:	030c                	addi	a1,sp,384
    218e:	097f                	0x97f
    2190:	0006                	c.slli	zero,0x1
    2192:	0501                	addi	a0,a0,0
    2194:	0011                	c.nop	4
    2196:	0402                	c.slli64	s0
    2198:	0601                	addi	a2,a2,0
    219a:	02090003          	lb	zero,32(s2)
    219e:	0100                	addi	s0,sp,128
    21a0:	0505                	addi	a0,a0,1
    21a2:	0200                	addi	s0,sp,256
    21a4:	0104                	addi	s1,sp,128
    21a6:	0306                	slli	t1,t1,0x1
    21a8:	0900                	addi	s0,sp,144
    21aa:	0000                	unimp
    21ac:	0601                	addi	a2,a2,0
    21ae:	04090803          	lb	a6,64(s2)
    21b2:	0100                	addi	s0,sp,128
    21b4:	0905                	addi	s2,s2,1
    21b6:	0306                	slli	t1,t1,0x1
    21b8:	0900                	addi	s0,sp,144
    21ba:	0000                	unimp
    21bc:	0501                	addi	a0,a0,0
    21be:	0605                	addi	a2,a2,1
    21c0:	0c090403          	lb	s0,192(s2)
    21c4:	0100                	addi	s0,sp,128
    21c6:	0a05                	addi	s4,s4,1
    21c8:	0306                	slli	t1,t1,0x1
    21ca:	0900                	addi	s0,sp,144
    21cc:	0000                	unimp
    21ce:	0501                	addi	a0,a0,0
    21d0:	0605                	addi	a2,a2,1
    21d2:	0c090103          	lb	sp,192(s2)
    21d6:	0100                	addi	s0,sp,128
    21d8:	1405                	addi	s0,s0,-31
    21da:	0200                	addi	s0,sp,256
    21dc:	0104                	addi	s1,sp,128
    21de:	02090003          	lb	zero,32(s2)
    21e2:	0100                	addi	s0,sp,128
    21e4:	0505                	addi	a0,a0,1
    21e6:	0200                	addi	s0,sp,256
    21e8:	0104                	addi	s1,sp,128
    21ea:	0306                	slli	t1,t1,0x1
    21ec:	0900                	addi	s0,sp,144
    21ee:	0000                	unimp
    21f0:	0501                	addi	a0,a0,0
    21f2:	0301                	addi	t1,t1,0
    21f4:	00040907          	0x40907
    21f8:	0501                	addi	a0,a0,0
    21fa:	0009                	c.nop	2
    21fc:	0402                	c.slli64	s0
    21fe:	68030603          	lb	a2,1664(t1)
    2202:	1609                	addi	a2,a2,-30
    2204:	0100                	addi	s0,sp,128
    2206:	1905                	addi	s2,s2,-31
    2208:	0200                	addi	s0,sp,256
    220a:	0304                	addi	s1,sp,384
    220c:	0306                	slli	t1,t1,0x1
    220e:	0900                	addi	s0,sp,144
    2210:	0000                	unimp
    2212:	0501                	addi	a0,a0,0
    2214:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2218:	097f0303          	lb	t1,151(t5)
    221c:	0008                	0x8
    221e:	0501                	addi	a0,a0,0
    2220:	0015                	c.nop	5
    2222:	0402                	c.slli64	s0
    2224:	09010303          	lb	t1,144(sp)
    2228:	0004                	0x4
    222a:	0501                	addi	a0,a0,0
    222c:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2230:	7f030603          	lb	a2,2032(t1)
    2234:	0409                	addi	s0,s0,2
    2236:	0100                	addi	s0,sp,128
    2238:	0905                	addi	s2,s2,1
    223a:	02090603          	lb	a2,32(s2)
    223e:	0100                	addi	s0,sp,128
    2240:	0e05                	addi	t3,t3,1
    2242:	0306                	slli	t1,t1,0x1
    2244:	0900                	addi	s0,sp,144
    2246:	0000                	unimp
    2248:	0501                	addi	a0,a0,0
    224a:	0900030b          	0x900030b
    224e:	0002                	c.slli64	zero
    2250:	0501                	addi	a0,a0,0
    2252:	060d                	addi	a2,a2,3
    2254:	04090303          	lb	t1,64(s2)
    2258:	0100                	addi	s0,sp,128
    225a:	1905                	addi	s2,s2,-31
    225c:	0306                	slli	t1,t1,0x1
    225e:	0900                	addi	s0,sp,144
    2260:	0000                	unimp
    2262:	0501                	addi	a0,a0,0
    2264:	09000313          	li	t1,144
    2268:	0004                	0x4
    226a:	0501                	addi	a0,a0,0
    226c:	0018                	0x18
    226e:	0402                	c.slli64	s0
    2270:	0602                	c.slli64	a2
    2272:	02097c03          	0x2097c03
    2276:	0100                	addi	s0,sp,128
    2278:	0905                	addi	s2,s2,1
    227a:	0200                	addi	s0,sp,256
    227c:	0304                	addi	s1,sp,384
    227e:	06090e03          	lb	t3,96(s2)
    2282:	0100                	addi	s0,sp,128
    2284:	1905                	addi	s2,s2,-31
    2286:	0200                	addi	s0,sp,256
    2288:	0304                	addi	s1,sp,384
    228a:	0306                	slli	t1,t1,0x1
    228c:	0900                	addi	s0,sp,144
    228e:	0000                	unimp
    2290:	0501                	addi	a0,a0,0
    2292:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2296:	097f0303          	lb	t1,151(t5)
    229a:	0008                	0x8
    229c:	0501                	addi	a0,a0,0
    229e:	0015                	c.nop	5
    22a0:	0402                	c.slli64	s0
    22a2:	09010303          	lb	t1,144(sp)
    22a6:	0004                	0x4
    22a8:	0501                	addi	a0,a0,0
    22aa:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    22ae:	7f030603          	lb	a2,2032(t1)
    22b2:	0409                	addi	s0,s0,2
    22b4:	0100                	addi	s0,sp,128
    22b6:	0209                	addi	tp,tp,2
    22b8:	0000                	unimp
    22ba:	0101                	addi	sp,sp,0
    22bc:	0b05                	addi	s6,s6,1
    22be:	0500                	addi	s0,sp,640
    22c0:	6e02                	flw	ft8,0(sp)
    22c2:	0300000f          	fence	rw,unknown
    22c6:	04e9                	addi	s1,s1,26
    22c8:	0501                	addi	a0,a0,0
    22ca:	0301                	addi	t1,t1,0
    22cc:	0901                	addi	s2,s2,0
    22ce:	0000                	unimp
    22d0:	0501                	addi	a0,a0,0
    22d2:	0305                	addi	t1,t1,1
    22d4:	0901                	addi	s2,s2,0
    22d6:	0000                	unimp
    22d8:	0301                	addi	t1,t1,0
    22da:	0901                	addi	s2,s2,0
    22dc:	0000                	unimp
    22de:	0301                	addi	t1,t1,0
    22e0:	0901                	addi	s2,s2,0
    22e2:	0000                	unimp
    22e4:	0301                	addi	t1,t1,0
    22e6:	0901                	addi	s2,s2,0
    22e8:	0000                	unimp
    22ea:	0301                	addi	t1,t1,0
    22ec:	0901                	addi	s2,s2,0
    22ee:	0000                	unimp
    22f0:	0301                	addi	t1,t1,0
    22f2:	0901                	addi	s2,s2,0
    22f4:	0000                	unimp
    22f6:	0301                	addi	t1,t1,0
    22f8:	0902                	c.slli64	s2
    22fa:	0000                	unimp
    22fc:	0501                	addi	a0,a0,0
    22fe:	7703060b          	0x7703060b
    2302:	0009                	c.nop	2
    2304:	0100                	addi	s0,sp,128
    2306:	0905                	addi	s2,s2,1
    2308:	04090903          	lb	s2,64(s2)
    230c:	0100                	addi	s0,sp,128
    230e:	0b05                	addi	s6,s6,1
    2310:	0e097703          	0xe097703
    2314:	0100                	addi	s0,sp,128
    2316:	0905                	addi	s2,s2,1
    2318:	08090903          	lb	s2,128(s2)
    231c:	0100                	addi	s0,sp,128
    231e:	0505                	addi	a0,a0,1
    2320:	0306                	slli	t1,t1,0x1
    2322:	0901                	addi	s2,s2,0
    2324:	0002                	c.slli64	zero
    2326:	0301                	addi	t1,t1,0
    2328:	0901                	addi	s2,s2,0
    232a:	0000                	unimp
    232c:	0301                	addi	t1,t1,0
    232e:	0901                	addi	s2,s2,0
    2330:	0000                	unimp
    2332:	0301                	addi	t1,t1,0
    2334:	0901                	addi	s2,s2,0
    2336:	0000                	unimp
    2338:	0301                	addi	t1,t1,0
    233a:	0901                	addi	s2,s2,0
    233c:	0000                	unimp
    233e:	0301                	addi	t1,t1,0
    2340:	0901                	addi	s2,s2,0
    2342:	0000                	unimp
    2344:	0301                	addi	t1,t1,0
    2346:	0901                	addi	s2,s2,0
    2348:	0000                	unimp
    234a:	0301                	addi	t1,t1,0
    234c:	0909                	addi	s2,s2,2
    234e:	0000                	unimp
    2350:	0501                	addi	a0,a0,0
    2352:	060c                	addi	a1,sp,768
    2354:	00090003          	lb	zero,0(s2)
    2358:	0100                	addi	s0,sp,128
    235a:	0505                	addi	a0,a0,1
    235c:	0306                	slli	t1,t1,0x1
    235e:	0904                	addi	s1,sp,144
    2360:	000c                	0xc
    2362:	0501                	addi	a0,a0,0
    2364:	0310                	addi	a2,sp,384
    2366:	0900                	addi	s0,sp,144
    2368:	0000                	unimp
    236a:	0501                	addi	a0,a0,0
    236c:	060c                	addi	a1,sp,768
    236e:	00097c03          	0x97c03
    2372:	0100                	addi	s0,sp,128
    2374:	0505                	addi	a0,a0,1
    2376:	02090403          	lb	s0,32(s2)
    237a:	0100                	addi	s0,sp,128
    237c:	0905                	addi	s2,s2,1
    237e:	0200                	addi	s0,sp,256
    2380:	0304                	addi	s1,sp,384
    2382:	0306                	slli	t1,t1,0x1
    2384:	0902                	c.slli64	s2
    2386:	0004                	0x4
    2388:	0501                	addi	a0,a0,0
    238a:	001f 0402 0603      	0x6030402001f
    2390:	00090003          	lb	zero,0(s2)
    2394:	0100                	addi	s0,sp,128
    2396:	1905                	addi	s2,s2,-31
    2398:	0200                	addi	s0,sp,256
    239a:	0304                	addi	s1,sp,384
    239c:	06090003          	lb	zero,96(s2)
    23a0:	0100                	addi	s0,sp,128
    23a2:	1705                	addi	a4,a4,-31
    23a4:	0200                	addi	s0,sp,256
    23a6:	0304                	addi	s1,sp,384
    23a8:	0306                	slli	t1,t1,0x1
    23aa:	097e                	slli	s2,s2,0x1f
    23ac:	0006                	c.slli	zero,0x1
    23ae:	0501                	addi	a0,a0,0
    23b0:	0010                	0x10
    23b2:	0402                	c.slli64	s0
    23b4:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    23b8:	0000                	unimp
    23ba:	0501                	addi	a0,a0,0
    23bc:	0005                	c.nop	1
    23be:	0402                	c.slli64	s0
    23c0:	00030603          	lb	a2,0(t1)
    23c4:	0209                	addi	tp,tp,2
    23c6:	0100                	addi	s0,sp,128
    23c8:	0905                	addi	s2,s2,1
    23ca:	0200                	addi	s0,sp,256
    23cc:	0304                	addi	s1,sp,384
    23ce:	0306                	slli	t1,t1,0x1
    23d0:	0909                	addi	s2,s2,2
    23d2:	0004                	0x4
    23d4:	0501                	addi	a0,a0,0
    23d6:	0402001b          	0x402001b
    23da:	097e0303          	lb	t1,151(t3) # 19097 <_stack_start+0x9097>
    23de:	0000                	unimp
    23e0:	0501                	addi	a0,a0,0
    23e2:	0010                	0x10
    23e4:	0402                	c.slli64	s0
    23e6:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    23ea:	0000                	unimp
    23ec:	0501                	addi	a0,a0,0
    23ee:	0009                	c.nop	2
    23f0:	0402                	c.slli64	s0
    23f2:	09090303          	lb	t1,144(s2)
    23f6:	000c                	0xc
    23f8:	0501                	addi	a0,a0,0
    23fa:	0026                	c.slli	zero,0x9
    23fc:	0402                	c.slli64	s0
    23fe:	00030603          	lb	a2,0(t1)
    2402:	0009                	c.nop	2
    2404:	0100                	addi	s0,sp,128
    2406:	2005                	jal	2426 <_min_stack+0x426>
    2408:	0200                	addi	s0,sp,256
    240a:	0304                	addi	s1,sp,384
    240c:	06090003          	lb	zero,96(s2)
    2410:	0100                	addi	s0,sp,128
    2412:	1f05                	addi	t5,t5,-31
    2414:	0200                	addi	s0,sp,256
    2416:	0304                	addi	s1,sp,384
    2418:	0306                	slli	t1,t1,0x1
    241a:	097e                	slli	s2,s2,0x1f
    241c:	0004                	0x4
    241e:	0501                	addi	a0,a0,0
    2420:	0014                	0x14
    2422:	0402                	c.slli64	s0
    2424:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    2428:	0000                	unimp
    242a:	0501                	addi	a0,a0,0
    242c:	0005                	c.nop	1
    242e:	0402                	c.slli64	s0
    2430:	00030603          	lb	a2,0(t1)
    2434:	0009                	c.nop	2
    2436:	0100                	addi	s0,sp,128
    2438:	0905                	addi	s2,s2,1
    243a:	0200                	addi	s0,sp,256
    243c:	0304                	addi	s1,sp,384
    243e:	0306                	slli	t1,t1,0x1
    2440:	0909                	addi	s2,s2,2
    2442:	0004                	0x4
    2444:	0501                	addi	a0,a0,0
    2446:	001f 0402 0303      	0x3030402001f
    244c:	097e                	slli	s2,s2,0x1f
    244e:	0000                	unimp
    2450:	0501                	addi	a0,a0,0
    2452:	0014                	0x14
    2454:	0402                	c.slli64	s0
    2456:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    245a:	0000                	unimp
    245c:	0501                	addi	a0,a0,0
    245e:	0009                	c.nop	2
    2460:	0402                	c.slli64	s0
    2462:	09090303          	lb	t1,144(s2)
    2466:	000c                	0xc
    2468:	0501                	addi	a0,a0,0
    246a:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    246e:	00030603          	lb	a2,0(t1)
    2472:	0009                	c.nop	2
    2474:	0100                	addi	s0,sp,128
    2476:	1d05                	addi	s10,s10,-31
    2478:	0200                	addi	s0,sp,256
    247a:	0304                	addi	s1,sp,384
    247c:	06090003          	lb	zero,96(s2)
    2480:	0100                	addi	s0,sp,128
    2482:	1f05                	addi	t5,t5,-31
    2484:	0200                	addi	s0,sp,256
    2486:	0304                	addi	s1,sp,384
    2488:	0306                	slli	t1,t1,0x1
    248a:	097e                	slli	s2,s2,0x1f
    248c:	0004                	0x4
    248e:	0501                	addi	a0,a0,0
    2490:	0014                	0x14
    2492:	0402                	c.slli64	s0
    2494:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    2498:	0000                	unimp
    249a:	0501                	addi	a0,a0,0
    249c:	0005                	c.nop	1
    249e:	0402                	c.slli64	s0
    24a0:	00030603          	lb	a2,0(t1)
    24a4:	0009                	c.nop	2
    24a6:	0100                	addi	s0,sp,128
    24a8:	0905                	addi	s2,s2,1
    24aa:	0200                	addi	s0,sp,256
    24ac:	0304                	addi	s1,sp,384
    24ae:	0306                	slli	t1,t1,0x1
    24b0:	0909                	addi	s2,s2,2
    24b2:	000c                	0xc
    24b4:	0501                	addi	a0,a0,0
    24b6:	0022                	c.slli	zero,0x8
    24b8:	0402                	c.slli64	s0
    24ba:	00030603          	lb	a2,0(t1)
    24be:	0009                	c.nop	2
    24c0:	0100                	addi	s0,sp,128
    24c2:	1c05                	addi	s8,s8,-31
    24c4:	0200                	addi	s0,sp,256
    24c6:	0304                	addi	s1,sp,384
    24c8:	06090003          	lb	zero,96(s2)
    24cc:	0100                	addi	s0,sp,128
    24ce:	2105                	jal	28ee <_min_stack+0x8ee>
    24d0:	0200                	addi	s0,sp,256
    24d2:	0304                	addi	s1,sp,384
    24d4:	0306                	slli	t1,t1,0x1
    24d6:	097e                	slli	s2,s2,0x1f
    24d8:	0004                	0x4
    24da:	0501                	addi	a0,a0,0
    24dc:	0014                	0x14
    24de:	0402                	c.slli64	s0
    24e0:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    24e4:	0000                	unimp
    24e6:	0501                	addi	a0,a0,0
    24e8:	0005                	c.nop	1
    24ea:	0402                	c.slli64	s0
    24ec:	00030603          	lb	a2,0(t1)
    24f0:	0009                	c.nop	2
    24f2:	0100                	addi	s0,sp,128
    24f4:	0306                	slli	t1,t1,0x1
    24f6:	0908                	addi	a0,sp,144
    24f8:	0004                	0x4
    24fa:	0501                	addi	a0,a0,0
    24fc:	00030613          	mv	a2,t1
    2500:	0009                	c.nop	2
    2502:	0100                	addi	s0,sp,128
    2504:	0505                	addi	a0,a0,1
    2506:	0306                	slli	t1,t1,0x1
    2508:	0909                	addi	s2,s2,2
    250a:	0010                	0x10
    250c:	0501                	addi	a0,a0,0
    250e:	00030613          	mv	a2,t1
    2512:	0009                	c.nop	2
    2514:	0100                	addi	s0,sp,128
    2516:	0505                	addi	a0,a0,1
    2518:	0306                	slli	t1,t1,0x1
    251a:	00140913          	addi	s2,s0,1
    251e:	0501                	addi	a0,a0,0
    2520:	0310                	addi	a2,sp,384
    2522:	0900                	addi	s0,sp,144
    2524:	0000                	unimp
    2526:	0501                	addi	a0,a0,0
    2528:	061a                	slli	a2,a2,0x6
    252a:	00090803          	lb	a6,0(s2)
    252e:	0100                	addi	s0,sp,128
    2530:	1305                	addi	t1,t1,-31
    2532:	04096503          	0x4096503
    2536:	0100                	addi	s0,sp,128
    2538:	1a05                	addi	s4,s4,-31
    253a:	0a091b03          	lh	s6,160(s2)
    253e:	0100                	addi	s0,sp,128
    2540:	0b05                	addi	s6,s6,1
    2542:	04090103          	lb	sp,64(s2)
    2546:	0100                	addi	s0,sp,128
    2548:	0505                	addi	a0,a0,1
    254a:	02097703          	0x2097703
    254e:	0100                	addi	s0,sp,128
    2550:	0905                	addi	s2,s2,1
    2552:	0306                	slli	t1,t1,0x1
    2554:	0901                	addi	s2,s2,0
    2556:	0004                	0x4
    2558:	0501                	addi	a0,a0,0
    255a:	0003060b          	0x3060b
    255e:	0009                	c.nop	2
    2560:	0100                	addi	s0,sp,128
    2562:	2705                	jal	2c82 <_min_stack+0xc82>
    2564:	02090003          	lb	zero,32(s2)
    2568:	0100                	addi	s0,sp,128
    256a:	0b05                	addi	s6,s6,1
    256c:	04090003          	lb	zero,64(s2)
    2570:	0100                	addi	s0,sp,128
    2572:	0d05                	addi	s10,s10,1
    2574:	0306                	slli	t1,t1,0x1
    2576:	0902                	c.slli64	s2
    2578:	000a                	c.slli	zero,0x2
    257a:	0501                	addi	a0,a0,0
    257c:	061a                	slli	a2,a2,0x6
    257e:	00090003          	lb	zero,0(s2)
    2582:	0100                	addi	s0,sp,128
    2584:	0705                	addi	a4,a4,1
    2586:	0306                	slli	t1,t1,0x1
    2588:	0901                	addi	s2,s2,0
    258a:	000a                	c.slli	zero,0x2
    258c:	0501                	addi	a0,a0,0
    258e:	00030617          	auipc	a2,0x30
    2592:	0009                	c.nop	2
    2594:	0100                	addi	s0,sp,128
    2596:	0c05                	addi	s8,s8,1
    2598:	02090003          	lb	zero,32(s2)
    259c:	0100                	addi	s0,sp,128
    259e:	0d05                	addi	s10,s10,1
    25a0:	0306                	slli	t1,t1,0x1
    25a2:	0901                	addi	s2,s2,0
    25a4:	000a                	c.slli	zero,0x2
    25a6:	0501                	addi	a0,a0,0
    25a8:	0305                	addi	t1,t1,1
    25aa:	090c                	addi	a1,sp,144
    25ac:	0000                	unimp
    25ae:	0501                	addi	a0,a0,0
    25b0:	0601                	addi	a2,a2,0
    25b2:	00090103          	lb	sp,0(s2)
    25b6:	0100                	addi	s0,sp,128
    25b8:	0d05                	addi	s10,s10,1
    25ba:	0200                	addi	s0,sp,256
    25bc:	0204                	addi	s1,sp,256
    25be:	0306                	slli	t1,t1,0x1
    25c0:	0976                	slli	s2,s2,0x1d
    25c2:	0010                	0x10
    25c4:	0501                	addi	a0,a0,0
    25c6:	001a                	c.slli	zero,0x6
    25c8:	0402                	c.slli64	s0
    25ca:	0602                	c.slli64	a2
    25cc:	00090003          	lb	zero,0(s2)
    25d0:	0100                	addi	s0,sp,128
    25d2:	0605                	addi	a2,a2,1
    25d4:	0200                	addi	s0,sp,256
    25d6:	0204                	addi	s1,sp,256
    25d8:	0306                	slli	t1,t1,0x1
    25da:	0901                	addi	s2,s2,0
    25dc:	0002                	c.slli64	zero
    25de:	0501                	addi	a0,a0,0
    25e0:	0016                	c.slli	zero,0x5
    25e2:	0402                	c.slli64	s0
    25e4:	0602                	c.slli64	a2
    25e6:	00090003          	lb	zero,0(s2)
    25ea:	0100                	addi	s0,sp,128
    25ec:	0b05                	addi	s6,s6,1
    25ee:	0200                	addi	s0,sp,256
    25f0:	0204                	addi	s1,sp,256
    25f2:	04090003          	lb	zero,64(s2)
    25f6:	0100                	addi	s0,sp,128
    25f8:	1805                	addi	a6,a6,-31
    25fa:	0200                	addi	s0,sp,256
    25fc:	0204                	addi	s1,sp,256
    25fe:	0306                	slli	t1,t1,0x1
    2600:	00080977          	0x80977
    2604:	0501                	addi	a0,a0,0
    2606:	0010                	0x10
    2608:	0402                	c.slli64	s0
    260a:	0302                	c.slli64	t1
    260c:	0900                	addi	s0,sp,144
    260e:	0000                	unimp
    2610:	0501                	addi	a0,a0,0
    2612:	0005                	c.nop	1
    2614:	0402                	c.slli64	s0
    2616:	0602                	c.slli64	a2
    2618:	00090003          	lb	zero,0(s2)
    261c:	0100                	addi	s0,sp,128
    261e:	0609                	addi	a2,a2,2
    2620:	0000                	unimp
    2622:	0101                	addi	sp,sp,0
    2624:	0150                	addi	a2,sp,132
    2626:	0000                	unimp
    2628:	001d0003          	lb	zero,1(s10)
    262c:	0000                	unimp
    262e:	0101                	addi	sp,sp,0
    2630:	000d0efb          	0xd0efb
    2634:	0101                	addi	sp,sp,0
    2636:	0101                	addi	sp,sp,0
    2638:	0000                	unimp
    263a:	0100                	addi	s0,sp,128
    263c:	0000                	unimp
    263e:	0001                	nop
    2640:	30747263          	bgeu	s0,t2,2944 <_min_stack+0x944>
    2644:	532e                	lw	t1,232(sp)
    2646:	0000                	unimp
    2648:	0000                	unimp
    264a:	0000                	unimp
    264c:	0205                	addi	tp,tp,1
    264e:	0d72                	slli	s10,s10,0x1c
    2650:	0000                	unimp
    2652:	0315                	addi	t1,t1,5
    2654:	0904                	addi	s1,sp,144
    2656:	0004                	0x4
    2658:	0301                	addi	t1,t1,0
    265a:	0901                	addi	s2,s2,0
    265c:	0004                	0x4
    265e:	0301                	addi	t1,t1,0
    2660:	0901                	addi	s2,s2,0
    2662:	0002                	c.slli64	zero
    2664:	0301                	addi	t1,t1,0
    2666:	0901                	addi	s2,s2,0
    2668:	0002                	c.slli64	zero
    266a:	0301                	addi	t1,t1,0
    266c:	0901                	addi	s2,s2,0
    266e:	0002                	c.slli64	zero
    2670:	0301                	addi	t1,t1,0
    2672:	0901                	addi	s2,s2,0
    2674:	0002                	c.slli64	zero
    2676:	0301                	addi	t1,t1,0
    2678:	0901                	addi	s2,s2,0
    267a:	0002                	c.slli64	zero
    267c:	0301                	addi	t1,t1,0
    267e:	0901                	addi	s2,s2,0
    2680:	0002                	c.slli64	zero
    2682:	0301                	addi	t1,t1,0
    2684:	0901                	addi	s2,s2,0
    2686:	0002                	c.slli64	zero
    2688:	0301                	addi	t1,t1,0
    268a:	0901                	addi	s2,s2,0
    268c:	0002                	c.slli64	zero
    268e:	0301                	addi	t1,t1,0
    2690:	0901                	addi	s2,s2,0
    2692:	0002                	c.slli64	zero
    2694:	0301                	addi	t1,t1,0
    2696:	0901                	addi	s2,s2,0
    2698:	0002                	c.slli64	zero
    269a:	0301                	addi	t1,t1,0
    269c:	0901                	addi	s2,s2,0
    269e:	0002                	c.slli64	zero
    26a0:	0301                	addi	t1,t1,0
    26a2:	0901                	addi	s2,s2,0
    26a4:	0002                	c.slli64	zero
    26a6:	0301                	addi	t1,t1,0
    26a8:	0901                	addi	s2,s2,0
    26aa:	0002                	c.slli64	zero
    26ac:	0301                	addi	t1,t1,0
    26ae:	0901                	addi	s2,s2,0
    26b0:	0002                	c.slli64	zero
    26b2:	0301                	addi	t1,t1,0
    26b4:	0901                	addi	s2,s2,0
    26b6:	0002                	c.slli64	zero
    26b8:	0301                	addi	t1,t1,0
    26ba:	0901                	addi	s2,s2,0
    26bc:	0002                	c.slli64	zero
    26be:	0301                	addi	t1,t1,0
    26c0:	0901                	addi	s2,s2,0
    26c2:	0002                	c.slli64	zero
    26c4:	0301                	addi	t1,t1,0
    26c6:	0901                	addi	s2,s2,0
    26c8:	0002                	c.slli64	zero
    26ca:	0301                	addi	t1,t1,0
    26cc:	0901                	addi	s2,s2,0
    26ce:	0002                	c.slli64	zero
    26d0:	0301                	addi	t1,t1,0
    26d2:	0901                	addi	s2,s2,0
    26d4:	0002                	c.slli64	zero
    26d6:	0301                	addi	t1,t1,0
    26d8:	0901                	addi	s2,s2,0
    26da:	0002                	c.slli64	zero
    26dc:	0301                	addi	t1,t1,0
    26de:	0901                	addi	s2,s2,0
    26e0:	0002                	c.slli64	zero
    26e2:	0301                	addi	t1,t1,0
    26e4:	0901                	addi	s2,s2,0
    26e6:	0002                	c.slli64	zero
    26e8:	0301                	addi	t1,t1,0
    26ea:	0901                	addi	s2,s2,0
    26ec:	0002                	c.slli64	zero
    26ee:	0301                	addi	t1,t1,0
    26f0:	0901                	addi	s2,s2,0
    26f2:	0002                	c.slli64	zero
    26f4:	0301                	addi	t1,t1,0
    26f6:	0901                	addi	s2,s2,0
    26f8:	0002                	c.slli64	zero
    26fa:	0301                	addi	t1,t1,0
    26fc:	0901                	addi	s2,s2,0
    26fe:	0002                	c.slli64	zero
    2700:	0301                	addi	t1,t1,0
    2702:	0901                	addi	s2,s2,0
    2704:	0002                	c.slli64	zero
    2706:	0301                	addi	t1,t1,0
    2708:	0901                	addi	s2,s2,0
    270a:	0002                	c.slli64	zero
    270c:	0301                	addi	t1,t1,0
    270e:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    2712:	0301                	addi	t1,t1,0
    2714:	0906                	slli	s2,s2,0x1
    2716:	0008                	0x8
    2718:	0301                	addi	t1,t1,0
    271a:	0901                	addi	s2,s2,0
    271c:	0008                	0x8
    271e:	0301                	addi	t1,t1,0
    2720:	0902                	c.slli64	s2
    2722:	0008                	0x8
    2724:	0301                	addi	t1,t1,0
    2726:	00040903          	lb	s2,0(s0)
    272a:	0301                	addi	t1,t1,0
    272c:	0901                	addi	s2,s2,0
    272e:	0004                	0x4
    2730:	0301                	addi	t1,t1,0
    2732:	0901                	addi	s2,s2,0
    2734:	0002                	c.slli64	zero
    2736:	0301                	addi	t1,t1,0
    2738:	0906                	slli	s2,s2,0x1
    273a:	0004                	0x4
    273c:	0301                	addi	t1,t1,0
    273e:	0901                	addi	s2,s2,0
    2740:	0004                	0x4
    2742:	0301                	addi	t1,t1,0
    2744:	0901                	addi	s2,s2,0
    2746:	0004                	0x4
    2748:	0901                	addi	s2,s2,0
    274a:	0004                	0x4
    274c:	0100                	addi	s0,sp,128
    274e:	0001                	nop
    2750:	0205                	addi	tp,tp,1
    2752:	0000                	unimp
    2754:	0000                	unimp
    2756:	0100cb03          	lbu	s6,16(ra)
    275a:	7c090103          	lb	sp,1984(s2)
    275e:	0100                	addi	s0,sp,128
    2760:	04090403          	lb	s0,64(s2)
    2764:	0100                	addi	s0,sp,128
    2766:	04090403          	lb	s0,64(s2)
    276a:	0100                	addi	s0,sp,128
    276c:	04090403          	lb	s0,64(s2)
    2770:	0100                	addi	s0,sp,128
    2772:	0409                	addi	s0,s0,2
    2774:	0000                	unimp
    2776:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	735f 4946 454c      	0x454c4946735f
  1e:	5f00                	lw	s0,56(a4)
  20:	6172                	flw	ft2,28(sp)
  22:	646e                	flw	fs0,216(sp)
  24:	3834                	fld	fa3,112(s0)
  26:	5f00                	lw	s0,56(a4)
  28:	6d65                	lui	s10,0x19
  2a:	7265                	lui	tp,0xffff9
  2c:	636e6567          	0x636e6567
  30:	0079                	c.nop	30
  32:	6f70                	flw	fa2,92(a4)
  34:	796c                	flw	fa1,116(a0)
  36:	756d                	lui	a0,0xffffb
  38:	746c                	flw	fa1,108(s0)
  3a:	0032                	c.slli	zero,0xc
  3c:	5f5f 6975 746e      	0x746e69755f5f
  42:	5f38                	lw	a4,120(a4)
  44:	0074                	addi	a3,sp,12
  46:	645f 7461 0061      	0x617461645f
  4c:	775f 7263 6f74      	0x6f747263775f
  52:	626d                	lui	tp,0x1b
  54:	735f 6174 6574      	0x65746174735f
  5a:	5f00                	lw	s0,56(a4)
  5c:	72736377          	0x72736377
  60:	6f74                	flw	fa3,92(a4)
  62:	626d                	lui	tp,0x1b
  64:	74735f73          	csrrwi	t5,0x747,6
  68:	7461                	lui	s0,0xffff8
  6a:	0065                	c.nop	25
  6c:	5f5f 7562 6c69      	0x6c6975625f5f
  72:	6974                	flw	fa3,84(a0)
  74:	5f6e                	lw	t5,248(sp)
  76:	656d                	lui	a0,0x1b
  78:	736d                	lui	t1,0xffffb
  7a:	7465                	lui	s0,0xffff9
  jal x0, default_exc_handler
  7c:	6c00                	flw	fs0,24(s0)
  7e:	20676e6f          	jal	t3,76284 <_stack_start+0x66284>
  jal x0, reset_handler
  82:	6f6c                	flw	fa1,92(a4)
  jal x0, default_exc_handler
  84:	676e                	flw	fa4,216(sp)
  86:	7520                	flw	fs0,104(a0)
  jal x0, default_exc_handler
  88:	736e                	flw	ft6,248(sp)
  8a:	6769                	lui	a4,0x1a
    asm volatile(
  8c:	656e                	flw	fa0,216(sp)
  8e:	2064                	fld	fs1,192(s0)
}
  90:	6e69                	lui	t3,0x1a
    for(i=0;i<(length/3);i++) {
  92:	0074                	addi	a3,sp,12
  94:	6544                	flw	fs1,12(a0)
  96:	654d5f63          	bge	s10,s4,6f4 <ext_euclid+0x1e>
  9a:	67617373          	csrrci	t1,0x676,2
  9e:	0065                	c.nop	25
}
  a0:	6c5f 6662 6973      	0x697366626c5f
    asm volatile(
  a6:	657a                	flw	fa0,156(sp)
  a8:	7200                	flw	fs0,32(a2)
  aa:	6e61                	lui	t3,0x18
    for(i=0;i<(length/3);i++) {
  ac:	6f64                	flw	fs1,92(a4)
  ae:	5f6d                	li	t5,-5
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  b0:	7379656b          	0x7379656b
  b4:	5f00                	lw	s0,56(a4)
  b6:	6c5f 636f 6c61      	0x6c61636f6c5f
    int line[size_b][size_a + size_b];
  bc:	5f65                	li	t5,-7
  be:	0074                	addi	a3,sp,12
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  c0:	72636573          	csrrsi	a0,0x726,6
    int line[size_b][size_a + size_b];
  c4:	7465                	lui	s0,0xffff9
  c6:	6b5f 7965 665f      	0x665f79656b5f
  cc:	7300                	flw	fs0,32(a4)
  ce:	6365                	lui	t1,0x19
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d0:	6572                	flw	fa0,28(sp)
  d2:	5f74                	lw	a3,124(a4)
  d4:	5f79656b          	0x5f79656b
  d8:	6d5f0067          	jr	1749(t5)
  dc:	7262                	flw	ft4,56(sp)
  de:	6f74                	flw	fa3,92(a4)
  e0:	735f6377          	0x735f6377
  e4:	6174                	flw	fa3,68(a0)
    int line[size_b][size_a + size_b];
  e6:	6574                	flw	fa3,76(a0)
  e8:	5f00                	lw	s0,56(a4)
  ea:	6f746377          	0x6f746377
    int pola[size_a];
  ee:	626d                	lui	tp,0x1b
  f0:	735f 6174 6574      	0x65746174735f
    int line[size_b][size_a + size_b];
  f6:	5f00                	lw	s0,56(a4)
    int pola[size_a];
  f8:	745f 5f6d 6573      	0x65735f6d745f
    int line[size_b][size_a + size_b];
  fe:	6f6c0063          	beq	s8,s6,7de <ext_euclid+0x108>
    int pola[size_a];
 102:	676e                	flw	fa4,216(sp)
 104:	6c20                	flw	fs0,88(s0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 106:	20676e6f          	jal	t3,7630c <_stack_start+0x6630c>
    int pola[size_a];
 10a:	6e69                	lui	t3,0x1a
            line[i][j] = 0;
 10c:	0074                	addi	a3,sp,12
 10e:	657a6973          	csrrsi	s2,0x657,20
    int polb[size_b];
 112:	4e5f 6900 736e      	0x736e69004e5f
    int pola[size_a];
 118:	7274                	flw	fa3,100(a2)
    int polb[size_b];
 11a:	6d5f 646f 7000      	0x7000646f6d5f
            line[i][j] = 0;
 120:	6d796c6f          	jal	s8,96ff6 <_stack_start+0x86ff6>
    for (i = 0; i < size_b; ++i){
 124:	6c75                	lui	s8,0x1d
            product[j] = 0;
 126:	0074                	addi	a3,sp,12
 128:	755f 7562 0066      	0x667562755f
    for (i = 0; i < size_b; ++i){
 12e:	625f 7361 0065      	0x657361625f
    for (i = 0; i < size_a; ++i){
 134:	5f5f 6d74 685f      	0x685f6d745f5f
	array_mod(pola,mod,size_a);
 13a:	0072756f          	jal	a0,27940 <_stack_start+0x17940>
 13e:	5f5f 6673 5f00      	0x5f0066735f5f
    for (i = 0; i < size_b; ++i){
 144:	655f6e6f          	jal	t3,f6f98 <_stack_start+0xe6f98>
 148:	6978                	flw	fa4,84(a0)
 14a:	5f74                	lw	a3,124(a4)
 14c:	7261                	lui	tp,0xffff8
	array_mod(polb,mod,size_b);
 14e:	5f007367          	0x5f007367
 152:	6b6f6f63          	bltu	t5,s6,810 <ext_euclid+0x13a>
    if(star_mult == 1){
 156:	6569                	lui	a0,0x1a
 158:	5f00                	lw	s0,56(a4)
 15a:	735f 6c67 6575      	0x65756c67735f
 160:	7200                	flw	fs0,32(a2)
 162:	7365                	lui	t1,0xffff9
 164:	0031                	c.nop	12
 166:	6572                	flw	fa0,28(sp)
 168:	5f003273          	csrrc	tp,0x5f0,zero
        for (j = size_b -1; j >= 0; j = j-1){
 16c:	6c66                	flw	fs8,88(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 16e:	6761                	lui	a4,0x18
 170:	695f0073          	0x695f0073
            product[j] = 0;
 174:	78635f73          	csrrwi	t5,0x786,6
            line[i][j] = 0;
 178:	0061                	c.nop	24
 17a:	735f 6474 6e69      	0x6e696474735f
        for(j = 0; j < size_a + size_b -1; ++j){
 180:	5f00                	lw	s0,56(a4)
 182:	6c62                	flw	fs8,24(sp)
 184:	7a69736b          	0x7a69736b
    for (i = 0; i < size_b; ++i){
 188:	0065                	c.nop	25
 18a:	7270                	flw	fa2,100(a2)
 18c:	6375646f          	jal	s0,56fc2 <_stack_start+0x46fc2>
        for(j = 0; j < size_a + size_b -1; ++j){
 190:	0074                	addi	a3,sp,12
 192:	6f70                	flw	fa2,92(a4)
        pola[i] = a[i];
 194:	796c                	flw	fa1,116(a0)
 196:	6964                	flw	fs1,84(a0)
 198:	0076                	c.slli	zero,0x1d
 19a:	6f70                	flw	fa2,92(a4)
 19c:	796c                	flw	fa1,116(a0)
 19e:	0066                	c.slli	zero,0x19
    for (i = 0; i < size_a; ++i){
 1a0:	635f 7476 7562      	0x75627476635f
 1a6:	0066                	c.slli	zero,0x19
        polb[i] = b[i];
 1a8:	6f5f 6666 6573      	0x657366666f5f
 1ae:	0074                	addi	a3,sp,12
 1b0:	6d5f 7362 7472      	0x747273626d5f
 1b6:	7363776f          	jal	a4,378ec <_stack_start+0x278ec>
    if(star_mult == 1){
 1ba:	735f 6174 6574      	0x65746174735f
            for (k = size_a-1; k >= 0; k = k-1 ){
 1c0:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_b; ++i){
 1c2:	626d                	lui	tp,0x1b
 1c4:	6c72                	flw	fs8,28(sp)
 1c6:	6e65                	lui	t3,0x19
 1c8:	735f 6174 6574      	0x65746174735f
    for(j = 0; j < size_a + size_b -1; ++j){
 1ce:	5f00                	lw	s0,56(a4)
 1d0:	6e66                	flw	ft8,88(sp)
 1d2:	7261                	lui	tp,0xffff8
    array_mod(product,mod,size_a+size_b-1);
 1d4:	6e007367          	0x6e007367
 1d8:	7274                	flw	fa3,100(a2)
 1da:	5f75                	li	t5,-3
 1dc:	6564                	flw	fs1,76(a0)
 1de:	70796563          	bltu	s2,t2,8e8 <ext_euclid+0x212>
}
 1e2:	0074                	addi	a3,sp,12
 1e4:	665f 736e 5f00      	0x5f00736e665f
 1ea:	6e676973          	csrrsi	s2,0x6e6,14
 1ee:	5f00                	lw	s0,56(a4)
 1f0:	6c66                	flw	fs8,88(sp)
 1f2:	5f6b636f          	jal	t1,b67e8 <_stack_start+0xa67e8>
 1f6:	0074                	addi	a3,sp,12
 1f8:	735f 6474 7265      	0x72656474735f
 1fe:	0072                	c.slli	zero,0x1c
 200:	425f 6769 6e69      	0x6e696769425f
 206:	0074                	addi	a3,sp,12
 208:	675f 6d61 616d      	0x616d6d61675f
                line[size_b-1-j][k] = pola[k]*polb[j];
 20e:	735f 6769 676e      	0x676e6769735f
 214:	6d61                	lui	s10,0x18
 216:	5f00                	lw	s0,56(a4)
 218:	6572                	flw	fa0,28(sp)
 21a:	6461                	lui	s0,0x18
            for (k = size_a-1; k >= 0; k = k-1 ){
 21c:	5f00                	lw	s0,56(a4)
                line[size_b-1-j][k] = pola[k]*polb[j];
 21e:	6572                	flw	fa0,28(sp)
 220:	746c7573          	csrrci	a0,0x746,24
            for (k = size_a-1; k >= 0; k = k-1 ){
 224:	6b5f 5f00 745f      	0x745f5f006b5f
        for (j = size_b -1; j >= 0; j = j-1){
 22a:	006d                	c.nop	27
 22c:	6564                	flw	fs1,76(a0)
 22e:	756e                	flw	fa0,248(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 230:	5f6d                	li	t5,-5
 232:	6574                	flw	fa3,76(a0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 234:	706d                	c.lui	zero,0xffffb
 236:	5f00                	lw	s0,56(a4)
 238:	775f 6863 0062      	0x626863775f
 23e:	6572                	flw	fa0,28(sp)
 240:	746c7573          	csrrci	a0,0x746,24
            for (k = size_a-1; k >= 0; k = k-1 ){
 244:	006e6f6b          	0x6e6f6b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 248:	735f 6474 756f      	0x756f6474735f
            for (k = size_a-1; k >= 0; k = k-1 ){
 24e:	0074                	addi	a3,sp,12
        for (j = size_b -1; j >= 0; j = j-1){
 250:	635f 7476 656c      	0x656c7476635f
 256:	006e                	c.slli	zero,0x1b
        array_mod(line[i],mod,(size_a+size_b-1));
 258:	72636573          	csrrsi	a0,0x726,6
 25c:	7465                	lui	s0,0xffff9
 25e:	6b5f 7965 665f      	0x665f79656b5f
    for (i = 0; i < size_b; ++i){
 264:	0071                	c.nop	28
            product[j] += line[i][j];
 266:	665f 6c69 0065      	0x656c69665f
 26c:	6572                	flw	fa0,28(sp)
 26e:	7574                	flw	fa3,108(a0)
        for(i = 0; i < size_b; ++i){
 270:	6e72                	flw	ft8,28(sp)
            product[j] += line[i][j];
 272:	615f 6464 6572      	0x65726464615f
 278:	00317373          	csrrci	t1,fcsr,2
 27c:	6572                	flw	fa0,28(sp)
        for(i = 0; i < size_b; ++i){
 27e:	7574                	flw	fa3,108(a0)
 280:	6e72                	flw	ft8,28(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 282:	615f 6464 6572      	0x65726464615f
        for(i = 0; i < size_b; ++i){
 288:	00327373          	csrrci	t1,fcsr,4
    int line[size_b][size_a + size_b];
 28c:	6572                	flw	fa0,28(sp)
 28e:	7574                	flw	fa3,108(a0)
 290:	6e72                	flw	ft8,28(sp)
 292:	615f 6464 6572      	0x65726464615f
 298:	00337373          	csrrci	t1,fcsr,6
 29c:	6572                	flw	fa0,28(sp)
 29e:	7574                	flw	fa3,108(a0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2a0:	6e72                	flw	ft8,28(sp)
 2a2:	615f 6464 6572      	0x65726464615f
 2a8:	00347373          	csrrci	t1,fcsr,8
 2ac:	6e5f 6f69 7362      	0x73626f696e5f
    int line[size_b][size_a + size_b];
 2b2:	7200                	flw	fs0,32(a2)
 2b4:	7465                	lui	s0,0xffff9
 2b6:	7275                	lui	tp,0xffffd
 2b8:	5f6e                	lw	t5,248(sp)
    int pola[size_a];
 2ba:	6461                	lui	s0,0x18
 2bc:	7264                	flw	fs1,100(a2)
 2be:	7365                	lui	t1,0xffff9
 2c0:	72003673          	csrrc	a2,0x720,zero
 2c4:	7465                	lui	s0,0xffff9
 2c6:	7275                	lui	tp,0xffffd
    int polb[size_b];
 2c8:	5f6e                	lw	t5,248(sp)
 2ca:	6461                	lui	s0,0x18
 2cc:	7264                	flw	fs1,100(a2)
    int pola[size_a];
 2ce:	7365                	lui	t1,0xffff9
    int polb[size_b];
 2d0:	73003773          	csrrc	a4,0x730,zero
    int line[size_b][size_a + size_b];
 2d4:	6f68                	flw	fa0,92(a4)
 2d6:	7472                	flw	fs0,60(sp)
    int pola[size_a];
 2d8:	7520                	flw	fs0,104(a0)
 2da:	736e                	flw	ft6,248(sp)
    int polb[size_b];
 2dc:	6769                	lui	a4,0x1a
            line[i][j] = 0;
 2de:	656e                	flw	fa0,216(sp)
 2e0:	2064                	fld	fs1,192(s0)
 2e2:	6e69                	lui	t3,0x1a
    for (i = 0; i < size_b; ++i){
 2e4:	0074                	addi	a3,sp,12
 2e6:	615f 6574 6978      	0x69786574615f
            product2[j] = 0;
 2ec:	3074                	fld	fa3,224(s0)
 2ee:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_b; ++i){
 2f0:	6e676973          	csrrsi	s2,0x6e6,14
    for(i = 0; i < size_a; ++i){
 2f4:	6c61                	lui	s8,0x18
 2f6:	625f 6675 5f00      	0x5f006675625f
    for(i = 0; i < size_b; ++i){
 2fc:	7361                	lui	t1,0xffff8
 2fe:	6d697463          	bgeu	s2,s6,9c6 <generate_keys+0xa6>
    if(star_mult == 1){
 302:	5f65                	li	t5,-7
 304:	7562                	flw	fa0,56(sp)
 306:	0066                	c.slli	zero,0x19
 308:	725f 7365 6c75      	0x6c757365725f
        for (j = size_b -1; j >= 0; j = j-1){
 30e:	0074                	addi	a3,sp,12
 310:	5f5f 6377 0068      	0x6863775f5f
            product2[j] = 0;
 316:	746e6977          	0x746e6977
 31a:	745f 6700 6e65      	0x6e656700745f
 320:	7265                	lui	tp,0xffff9
 322:	7461                	lui	s0,0xffff8
        for(j = 0; j < size_a + size_b -1; ++j){
 324:	5f65                	li	t5,-7
 326:	7379656b          	0x7379656b
 32a:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_b; ++i){
 32c:	625f 6975 746c      	0x746c6975625f
 332:	6e69                	lui	t3,0x1a
        for(j = 0; j < size_a + size_b -1; ++j){
 334:	6d5f 6d65 7063      	0x70636d656d5f
        pola[i] = a[i];
 33a:	0079                	c.nop	30
 33c:	6c5f 636f 006b      	0x6b636f6c5f
 342:	544e                	lw	s0,240(sp)
    for(i = 0; i < size_a; ++i){
 344:	5552                	lw	a0,52(sp)
        pola[i] = a[i];
 346:	345f 5f38 6962      	0x69625f38345f
        polb[i] = b[i];
 34c:	4d74                	lw	a3,92(a0)
 34e:	632e                	flw	ft6,200(sp)
 350:	7300                	flw	fs0,32(a4)
 352:	7a69                	lui	s4,0xffffa
 354:	5f65                	li	t5,-7
 356:	0061                	c.nop	24
    for(i = 0; i < size_b; ++i){
 358:	7270                	flw	fa2,100(a2)
        polb[i] = b[i];
 35a:	6375646f          	jal	s0,57190 <_stack_start+0x47190>
    for(i = 0; i < size_b; ++i){
 35e:	3274                	fld	fa3,224(a2)
                line[size_b-1-j][k] = pola[k]*polb[j];
 360:	6500                	flw	fs0,8(a0)
 362:	7478                	flw	fa4,108(s0)
 364:	655f 6375 696c      	0x696c6375655f
 36a:	0064                	addi	s1,sp,12
 36c:	775f 6972 6574      	0x65746972775f
 372:	5f00                	lw	s0,56(a4)
 374:	745f 5f6d 6579      	0x65795f6d745f
            for (k = size_a-1; k >= 0; k = k-1 ){
 37a:	7261                	lui	tp,0xffff8
        for (j = size_b -1; j >= 0; j = j-1){
 37c:	7000                	flw	fs0,32(s0)
 37e:	00626c6f          	jal	s8,26384 <_stack_start+0x16384>
 382:	6172                	flw	ft2,28(sp)
 384:	646e                	flw	fs0,216(sp)
 386:	765f6d6f          	jal	s10,f72ea <_stack_start+0xe72ea>
 38a:	6c61                	lui	s8,0x18
 38c:	5f00                	lw	s0,56(a4)
        for(i = 0; i < size_b; ++i){
 38e:	6d6e                	flw	fs10,216(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 390:	6c61                	lui	s8,0x18
 392:	6f6c                	flw	fa1,92(a4)
}
 394:	6f6c0063          	beq	s8,s6,a74 <generate_keys+0x154>
 398:	676e                	flw	fa4,216(sp)
 39a:	6420                	flw	fs0,72(s0)
 39c:	6c62756f          	jal	a0,27a62 <_stack_start+0x17a62>
 3a0:	0065                	c.nop	25
 3a2:	6e5f 7865 6674      	0x667478656e5f
 3a8:	6d00                	flw	fs0,24(a0)
 3aa:	7365                	lui	t1,0xffff9
 3ac:	65676173          	csrrsi	sp,0x656,14
 3b0:	5f00                	lw	s0,56(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3b2:	745f 5f6d 6f6d      	0x6f6d5f6d745f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3b8:	006e                	c.slli	zero,0x1b
 3ba:	6572                	flw	fa0,28(sp)
 3bc:	7574                	flw	fa3,108(a0)
 3be:	6e72                	flw	ft8,28(sp)
 3c0:	615f 6464 6572      	0x65726464615f
            for (k = size_a-1; k >= 0; k = k-1 ){
 3c6:	00357373          	csrrci	t1,fcsr,10
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3ca:	615f 6574 6978      	0x69786574615f
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d0:	0074                	addi	a3,sp,12
        for (j = size_b -1; j >= 0; j = j-1){
 3d2:	6f627573          	csrrci	a0,0x6f6,4
 3d6:	7470                	flw	fa2,108(s0)
 3d8:	7261                	lui	tp,0xffff8
            product2[j] += line[i][j];
 3da:	5f5f0067          	jr	1525(t5)
 3de:	64696473          	csrrsi	s0,0x646,18
 3e2:	6e69                	lui	t3,0x1a
 3e4:	7469                	lui	s0,0xffffa
 3e6:	5f00                	lw	s0,56(a4)
 3e8:	5f66666f          	jal	a2,669de <_stack_start+0x569de>
 3ec:	0074                	addi	a3,sp,12
        for(i = 0; i < size_b; ++i){
 3ee:	6e45                	lui	t3,0x11
 3f0:	654d5f63          	bge	s10,s4,a4e <generate_keys+0x12e>
    for(j = 0; j < size_a + size_b -1; ++j){
 3f4:	67617373          	csrrci	t1,0x676,2
        for(i = 0; i < size_b; ++i){
 3f8:	0065                	c.nop	25
 3fa:	746e6f63          	bltu	t3,t1,b58 <generate_keys+0x238>
    int v[size_N];
 3fe:	6f72                	flw	ft10,28(sp)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 400:	526c                	lw	a1,100(a2)
    int v[size_N];
 402:	5f00                	lw	s0,56(a4)
 404:	7266                	flw	ft4,120(sp)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 406:	6565                	lui	a0,0x19
 408:	696c                	flw	fa1,84(a0)
 40a:	72007473          	csrrci	s0,0x720,0
 40e:	6e69                	lui	t3,0x1a
 410:	6f705f67          	0x6f705f67
 414:	796c                	flw	fa1,116(a0)
 416:	5f00                	lw	s0,56(a4)
 418:	4f4c                	lw	a1,28(a4)
 41a:	525f4b43          	fmadd.d	fs6,ft10,ft5,fa0,rmm
 41e:	4345                	li	t1,17
 420:	5255                	li	tp,-11
    int v[size_N];
 422:	45564953          	0x45564953
 426:	545f 7400 5f69      	0x5f697400545f
    int q[size_N];
 42c:	0031                	c.nop	12
    int num_temp[size_N];
 42e:	6974                	flw	fa3,84(a0)
 430:	325f 7500 736e      	0x736e7500325f
    int denum_temp[size_D];
 436:	6769                	lui	a4,0x1a
 438:	656e                	flw	fa0,216(sp)
    int num_temp[size_N];
 43a:	2064                	fld	fs1,192(s0)
    int denum_temp[size_D];
 43c:	72616863          	bltu	sp,t1,b6c <generate_keys+0x24c>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 440:	7100                	flw	fs0,32(a0)
 442:	5f69                	li	t5,-6
 444:	0031                	c.nop	12
 446:	6e5f 7765 5f00      	0x5f0077656e5f
    int denum_temp[size_D];
 44c:	5f68                	lw	a0,124(a4)
 44e:	7265                	lui	tp,0xffff9
 450:	6e72                	flw	ft8,28(sp)
    for (i = 0; i < size_N; ++i){
 452:	6873006f          	j	312d8 <_stack_start+0x212d8>
 456:	2074726f          	jal	tp,47e5c <_stack_start+0x37e5c>
    if(size_N == 106) {
 45a:	6e69                	lui	t3,0x1a
 45c:	0074                	addi	a3,sp,12
 45e:	5f5f 6d74 795f      	0x795f6d745f5f
        array_mod(num_temp, mod, size_N - 1);
 464:	6164                	flw	fs1,68(a0)
 466:	0079                	c.nop	30
 468:	5f5f 6273 6675      	0x667562735f5f
        while(num_temp[size_N - 1] < 0){
 46e:	5f00                	lw	s0,56(a4)
 470:	6c66                	flw	fs8,88(sp)
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
 472:	6761                	lui	a4,0x18
 474:	5f003273          	csrrc	tp,0x5f0,zero
 478:	6f69                	lui	t5,0x1a
    for (i = 0; i < size_N; ++i){
 47a:	7362                	flw	ft6,56(sp)
    for (i = 0; i < size_D; ++i) {
 47c:	5f00                	lw	s0,56(a4)
 47e:	465f 4c49 0045      	0x454c49465f
	array_mod(denum_temp,mod,size_D);
 484:	6d5f 7362 6174      	0x617473626d5f
    for (i = 0; i < size_N; ++i){
 48a:	6574                	flw	fa3,76(a0)
 48c:	745f 2f00 6f68      	0x6f682f00745f
    for (i = size_D-1; i >= 0; i = i-1){
 492:	656d                	lui	a0,0x1b
 494:	696c652f          	0x696c652f
 498:	6e66                	flw	ft8,88(sp)
    for (i = 0; i < size_N; ++i){
 49a:	7275                	lui	tp,0xffffd
 49c:	7365442f          	0x7365442f
    for (u = 0; u < mod; ++u){
 4a0:	706f746b          	0x706f746b
 4a4:	6562692f          	0x6562692f
        num_temp[i] = num[i];
 4a8:	5f78                	lw	a4,124(a4)
 4aa:	3276                	fld	ft4,376(sp)
 4ac:	6562692f          	0x6562692f
 4b0:	2d78                	fld	fa4,216(a0)
 4b2:	616d                	addi	sp,sp,240
    for (i = 0; i < size_N; ++i){
 4b4:	72657473          	csrrci	s0,0x726,10
 4b8:	6178652f          	0x6178652f
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
 4bc:	706d                	c.lui	zero,0xffffb
 4be:	656c                	flw	fa1,76(a0)
 4c0:	77732f73          	csrrs	t5,0x777,t1
        array_mod(num_temp, mod, size_N);
 4c4:	72746e2f          	0x72746e2f
 4c8:	5f75                	li	t5,-3
 4ca:	616c                	flw	fa1,68(a0)
        denum_temp[i] = denum[i];
 4cc:	6974                	flw	fa3,84(a0)
 4ce:	6866                	flw	fa6,88(sp)
 4d0:	2f61636f          	jal	t1,167c6 <_stack_start+0x67c6>
 4d4:	68746977          	0x68746977
    for (i = 0; i < size_D; ++i) {
 4d8:	635f 7375 6f74      	0x6f747375635f
        q[i] = 0;
 4de:	2f6d                	jal	c98 <ntru_encyrpt+0x84>
 4e0:	656e                	flw	fa0,216(sp)
 4e2:	7274                	flw	fa3,100(a2)
 4e4:	0079                	c.nop	30
        v[i] = 0;
 4e6:	6d5f 7362 6174      	0x617473626d5f
 4ec:	6574                	flw	fa3,76(a0)
 4ee:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_N; ++i){
 4f0:	6172                	flw	ft2,28(sp)
 4f2:	646e                	flw	fs0,216(sp)
        if( denum_temp[i] != 0 )
 4f4:	6e5f 7865 0074      	0x7478656e5f
        if ( (b_N*u)%mod == 1 )
 4fa:	6d5f 6c62 6e65      	0x6e656c626d5f
 500:	735f 6174 6574      	0x65746174735f
    for (u = 0; u < mod; ++u){
 506:	5f00                	lw	s0,56(a4)
        if( num_temp[i] != 0 )
 508:	6e69                	lui	t3,0x1a
    for (i = size_N-1; i >= 0; i = i-1){
 50a:	695f0063          	beq	t5,s5,b8a <generate_keys+0x26a>
 50e:	646e                	flw	fs0,216(sp)
 510:	5f00                	lw	s0,56(a4)
 512:	6f6c                	flw	fa1,92(a4)
 514:	656c6163          	bltu	s8,s6,b56 <generate_keys+0x236>
         if(size_N == 106) {
 518:	5f00                	lw	s0,56(a4)
 51a:	635f 656c 6e61      	0x6e61656c635f
        v[(d-d2)] = u*r_d;
 520:	7075                	c.lui	zero,0xffffd
 522:	5f00                	lw	s0,56(a4)
 524:	6e75                	lui	t3,0x1d
 526:	63657073          	csrci	0x636,10
 52a:	6669                	lui	a2,0x1a
         if(size_N == 106) {
 52c:	6569                	lui	a0,0x1a
 52e:	5f64                	lw	s1,124(a4)
            array_mod(v, mod, size_N - 1);
 530:	6f6c                	flw	fa1,92(a4)
 532:	656c6163          	bltu	s8,s6,b74 <generate_keys+0x254>
 536:	695f 666e 006f      	0x6f666e695f
            while(v[size_N - 1] < 0){
 53c:	6d5f 7861 6477      	0x647778616d5f
            v[size_N - 1] = v[size_N - 1] % mod;
 542:	725f0073          	0x725f0073
 546:	6565                	lui	a0,0x19
 548:	746e                	flw	fs0,248(sp)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 54a:	7300                	flw	fs0,32(a4)
 54c:	6174                	flw	fa3,68(a0)
 54e:	5f72                	lw	t5,60(sp)
 550:	756d                	lui	a0,0xffffb
 552:	746c                	flw	fa1,108(s0)
 554:	5f00                	lw	s0,56(a4)
 556:	64656573          	csrrsi	a0,0x646,10
        if(size_N == 106) {
 55a:	7200                	flw	fs0,32(a2)
 55c:	5f69                	li	t5,-6
 55e:	0032                	c.slli	zero,0xc
            array_mod(product, mod, size_N - 1);
 560:	5f5f 6f63 6e75      	0x6e756f635f5f
 566:	0074                	addi	a3,sp,12
            while(product[size_N - 1] < 0){
 568:	5f5f 6176 756c      	0x756c61765f5f
 56e:	0065                	c.nop	25
 570:	735f 6565 006b      	0x6b6565735f
            product[size_N - 1] = product[size_N - 1] % mod;
 576:	665f 6f70 5f73      	0x5f736f70665f
 57c:	0074                	addi	a3,sp,12
 57e:	656c                	flw	fa1,76(a0)
        for (i = 0; i < size_N; ++i){
 580:	676e                	flw	fa4,216(sp)
 582:	6874                	flw	fa3,84(s0)
 	if(size_N == 106) {
 584:	5f00                	lw	s0,56(a4)
 586:	745f 5f6d 696d      	0x696d5f6d745f
            array_mod(num_temp, mod, size_N - 1);
 58c:	006e                	c.slli	zero,0x1b
 58e:	7570                	flw	fa2,108(a0)
 590:	6c62                	flw	fs8,24(sp)
            while(num_temp[size_N - 1] < 0){
 592:	6369                	lui	t1,0x1a
 594:	6b5f 7965 6100      	0x610079656b5f
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
 59a:	7272                	flw	ft4,60(sp)
 59c:	7961                	lui	s2,0xffff8
 59e:	6d5f 646f 5f00      	0x5f00646f6d5f
 5a4:	74727473          	csrrci	s0,0x747,4
        for(i = 0; i < size_N; ++i){
 5a8:	6c5f6b6f          	jal	s6,f746c <_stack_start+0xe746c>
 	if(size_N == 106) {
 5ac:	7361                	lui	t1,0xffff8
            array_mod(q, mod, size_N - 1);
 5ae:	0074                	addi	a3,sp,12
 5b0:	665f 746e 7079      	0x7079746e665f
 5b6:	7365                	lui	t1,0xffff9
            while(q[size_N - 1] < 0){
 5b8:	7300                	flw	fs0,32(a4)
 5ba:	6365                	lui	t1,0x19
 5bc:	6572                	flw	fa0,28(sp)
 5be:	5f74                	lw	a3,124(a4)
            q[size_N - 1] = q[size_N - 1] % mod;
 5c0:	5f79656b          	0x5f79656b
 5c4:	7066                	flw	ft0,120(sp)
 5c6:	5f00                	lw	s0,56(a4)
    int v[size_N];
 5c8:	6461                	lui	s0,0x18
        for (i = size_N-1; i >= 0; i = i-1){
 5ca:	0064                	addi	s1,sp,12
 5cc:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
 5d2:	69720067          	jr	1687(tp) # 0 <__DYNAMIC>
 5d6:	315f 5f00 6567      	0x65675f00315f
                v[size_N - 1] = v[size_N - 1]+mod;
 5dc:	6474                	flw	fa3,76(s0)
 5de:	7461                	lui	s0,0xffff8
 5e0:	5f65                	li	t5,-7
            array_mod(v, mod, size_N);
 5e2:	7265                	lui	tp,0xffff9
 5e4:	0072                	c.slli	zero,0x1c
 5e6:	675f 6f6c 6162      	0x61626f6c675f
                product[size_N - 1] = product[size_N - 1]+mod;
 5ec:	5f6c                	lw	a1,124(a4)
 5ee:	6d69                	lui	s10,0x1a
 5f0:	7570                	flw	fa2,108(a0)
 5f2:	6572                	flw	fa0,28(sp)
            array_mod(product, mod, size_N);
 5f4:	705f 7274 4700      	0x47007274705f
 5fa:	554e                	lw	a0,240(sp)
 5fc:	4320                	lw	s0,64(a4)
 5fe:	3731                	jal	50a <polydiv+0x10e>
            num_temp[i] = num_temp[i] - product[i];
 600:	3920                	fld	fs0,112(a0)
 602:	322e                	fld	ft4,232(sp)
 604:	302e                	fld	ft0,232(sp)
 606:	2d20                	fld	fs0,88(a0)
 608:	616d                	addi	sp,sp,240
        for (i = 0; i < size_N; ++i){
 60a:	6372                	flw	ft6,28(sp)
 60c:	3d68                	fld	fa0,248(a0)
            num_temp[i] = num_temp[i] - product[i];
 60e:	7672                	flw	fa2,60(sp)
 610:	6d693233          	0x6d693233
        for (i = 0; i < size_N; ++i){
 614:	6d2d2063          	0x6d2d2063
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
 618:	6261                	lui	tp,0x18
 61a:	3d69                	jal	4b4 <polydiv+0xb8>
 61c:	6c69                	lui	s8,0x1a
            array_mod(num_temp, mod, size_N);
 61e:	3370                	fld	fa2,224(a4)
 620:	2032                	fld	ft0,264(sp)
 622:	6d2d                	lui	s10,0xb
 624:	646f6d63          	bltu	t5,t1,c7e <ntru_encyrpt+0x6a>
            q[i] = q[i] + v[i];
 628:	6c65                	lui	s8,0x19
 62a:	6d3d                	lui	s10,0xf
 62c:	6465                	lui	s0,0x19
 62e:	6e61                	lui	t3,0x18
 630:	2079                	jal	6be <polydiv+0x2c2>
        for(i = 0; i < size_N; ++i){
 632:	6d2d                	lui	s10,0xb
 634:	7574                	flw	fa3,108(a0)
            q[i] = q[i] + v[i];
 636:	656e                	flw	fa0,216(sp)
 638:	723d                	lui	tp,0xfffef
 63a:	656b636f          	jal	t1,b6c90 <_stack_start+0xa6c90>
                q[size_N - 1] = q[size_N - 1]+mod;
 63e:	2074                	fld	fa3,192(s0)
 640:	672d                	lui	a4,0xb
 642:	2d20                	fld	fs0,88(a0)
 644:	2d20734f          	0x2d20734f
            array_mod(q, mod, size_N);
 648:	7666                	flw	fa2,120(sp)
 64a:	7369                	lui	t1,0xffffa
 64c:	6269                	lui	tp,0x1a
 64e:	6c69                	lui	s8,0x1a
            if( num_temp[i] != 0 )
 650:	7469                	lui	s0,0xffffa
        for (i = size_N-1; i >= 0; i = i-1){
 652:	3d79                	jal	4f0 <polydiv+0xf4>
 654:	6968                	flw	fa0,84(a0)
            v[i] = 0;
 656:	6464                	flw	fs1,76(s0)
 658:	6e65                	lui	t3,0x19
 65a:	5f00                	lw	s0,56(a4)
 65c:	6e75                	lui	t3,0x1d
 65e:	7375                	lui	t1,0xffffd
        for (i = 0; i < size_N; ++i){
 660:	6465                	lui	s0,0x19
 662:	725f 6e61 0064      	0x646e61725f
    while (d >= d2){
 668:	696c                	flw	fa1,84(a0)
    for(i = 0; i < size_N; ++i){
 66a:	656e                	flw	fa0,216(sp)
        result[i] = q[i];
 66c:	5f00                	lw	s0,56(a4)
 66e:	00736477          	0x736477
 672:	5f5f 6d74 775f      	0x775f6d745f5f
    for(i = size_N; i < (2*size_N); ++i){
 678:	6164                	flw	fs1,68(a0)
 67a:	0079                	c.nop	30
        result[i] = num_temp[i-size_N];
 67c:	675f 756c 0065      	0x65756c675f
 682:	746e                	flw	fs0,248(sp)
    for(i = size_N; i < (2*size_N); ++i){
 684:	7572                	flw	fa0,60(sp)
 686:	655f 636e 7279      	0x7279636e655f
}
 68c:	7470                	flw	fa2,108(s0)
 68e:	5f00                	lw	s0,56(a4)
 690:	7a697373          	csrrci	t1,0x7a6,18
 694:	5f65                	li	t5,-7
 696:	0074                	addi	a3,sp,12
 698:	6c5f 3436 5f61      	0x5f6134366c5f
 69e:	7562                	flw	fa0,56(sp)
 6a0:	0066                	c.slli	zero,0x19
 6a2:	6564                	flw	fs1,76(a0)
 6a4:	756e                	flw	fa0,248(sp)
 6a6:	006d                	c.nop	27
 6a8:	735f 6769 665f      	0x665f6769735f
 6ae:	6e75                	lui	t3,0x1d
 6b0:	6e5f0063          	beq	t5,t0,d90 <reset_handler+0x1a>
        result[i] = q[i];
 6b4:	7562                	flw	fa0,56(sp)
 6b6:	0066                	c.slli	zero,0x19
 6b8:	755f 756e 6573      	0x6573756e755f
    for(i = 0; i < size_N; ++i){
 6be:	0064                	addi	s1,sp,12
        result[i] = q[i];
 6c0:	6f70                	flw	fa2,92(a4)
    for(i = 0; i < size_N; ++i){
 6c2:	796c                	flw	fa1,116(a0)
        result[i] = num_temp[i-size_N];
 6c4:	0052                	c.slli	zero,0x14
 6c6:	657a6973          	csrrsi	s2,0x657,20
 6ca:	445f 5f00 745f      	0x745f5f00445f
    for(i = size_N; i < (2*size_N); ++i){
 6d0:	5f6d                	li	t5,-5
 6d2:	7369                	lui	t1,0xffffa
 6d4:	7364                	flw	fs1,100(a4)
    int ri_2[size]; // MX-ring poly, a
 6d6:	0074                	addi	a3,sp,12
 6d8:	6c5f 636f 6c61      	0x6c61636f6c5f
 6de:	6974                	flw	fa3,84(a0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6e0:	656d                	lui	a0,0x1b
 6e2:	625f 6675 5f00      	0x5f006675625f
 6e8:	736f6c63          	bltu	t5,s6,e20 <memcpy+0x38>
 6ec:	0065                	c.nop	25
 6ee:	725f 3834 5f00      	0x5f003834725f
 6f4:	626d                	lui	tp,0x1b
 6f6:	6f74                	flw	fa3,92(a4)
 6f8:	735f6377          	0x735f6377
    int ri_2[size]; // MX-ring poly, a
 6fc:	6174                	flw	fa3,68(a0)
 6fe:	6574                	flw	fa3,76(a0)
 700:	5f00                	lw	s0,56(a4)
    int ri_1[size]; // f-random poly, f[N] = 0, b
 702:	3570                	fld	fa2,232(a0)
 704:	616d0073          	0x616d0073
    int ri[size];
 708:	6e69                	lui	t3,0x1a
 70a:	5f00                	lw	s0,56(a4)
 70c:	745f 5f6d 646d      	0x646d5f6d745f
    int ti_1[size]; // ti_1[0] = 1
 712:	7961                	lui	s2,0xffff8
    int ti[size];
 714:	7300                	flw	fs0,32(a4)
 716:	7a69                	lui	s4,0xffffa
 718:	5f65                	li	t5,-7
    int qi_1[size];
 71a:	0062                	c.slli	zero,0x18
 71c:	30747263          	bgeu	s0,t2,a20 <generate_keys+0x100>
    int temp[size];
 720:	532e                	lw	t1,232(sp)
 722:	4700                	lw	s0,8(a4)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 724:	554e                	lw	a0,240(sp)
 726:	4120                	lw	s0,64(a0)
    int ri_2[size]; // MX-ring poly, a
 728:	2e322053          	0x2e322053
    int temp[size];
 72c:	          	snez	tp,zero

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <polydiv+0x284>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	001e                	c.slli	zero,0x7
  2e:	0000                	unimp
  30:	0058                	addi	a4,sp,4
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	00b0                	addi	a2,sp,72
  3a:	0000                	unimp
  3c:	01dc                	addi	a5,sp,196
  3e:	0000                	unimp
  40:	0e42                	slli	t3,t3,0x10
  42:	4450                	lw	a2,12(s0)
  44:	0a980593          	addi	a1,a6,169
  48:	944e                	add	s0,s0,s3
  4a:	9706                	add	a4,a4,ra
  4c:	5009                	c.li	zero,-30
  4e:	0288                	addi	a0,sp,320
  50:	0389                	addi	t2,t2,2
  52:	0c42                	slli	s8,s8,0x10
  54:	0008                	0x8
  56:	9252                	add	tp,tp,s4
  58:	9504                	0x9504
  5a:	99089607          	0x99089607
  5e:	9b0c9a0b          	0x9b0c9a0b
  62:	810d                	srli	a0,a0,0x3
  64:	0301                	addi	t1,t1,0
  66:	00fe                	slli	ra,ra,0x1f
  68:	0c0a                	slli	s8,s8,0x2
  6a:	5002                	0x5002
  6c:	c142                	sw	a6,128(sp)
  6e:	c842                	sw	a6,16(sp)
  70:	c942                	sw	a6,144(sp)
  72:	d242                	sw	a6,36(sp)
  74:	d342                	sw	a6,164(sp)
  76:	d442                	sw	a6,40(sp)
  78:	d542                	sw	a6,168(sp)
  7a:	d642                	sw	a6,44(sp)
  jal x0, default_exc_handler
  7c:	d742                	sw	a6,172(sp)
  7e:	d842                	sw	a6,48(sp)
  jal x0, reset_handler
  80:	d942                	sw	a6,176(sp)
  82:	da42                	sw	a6,52(sp)
  jal x0, default_exc_handler
  84:	db42                	sw	a6,180(sp)
  86:	0e4a                	slli	t3,t3,0x12
  jal x0, default_exc_handler
  88:	4200                	lw	s0,0(a2)
  8a:	003c000b          	0x3c000b
    asm volatile(
  8e:	0000                	unimp
}
  90:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  92:	0000                	unimp
  94:	028c                	addi	a1,sp,320
  96:	0000                	unimp
    asm volatile(
  98:	0170                	addi	a2,sp,140
    for(i=0;i<(length/3);i++) {
  9a:	0000                	unimp
  9c:	0e56                	slli	t3,t3,0x15
  9e:	4e20                	lw	s0,88(a2)
}
  a0:	0188                	addi	a0,sp,192
    asm volatile(
  a2:	0289                	addi	t0,t0,2
  a4:	0392                	slli	t2,t2,0x4
  a6:	07960493          	addi	s1,a2,121 # 1a079 <_stack_start+0xa079>
  aa:	0594                	addi	a3,sp,704
    for(i=0;i<(length/3);i++) {
  ac:	0695                	addi	a3,a3,5
  ae:	0c42                	slli	s8,s8,0x10
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  b0:	0008                	0x8
  b2:	e602                	fsw	ft0,12(sp)
  b4:	0c0a                	slli	s8,s8,0x2
  b6:	2002                	fld	ft0,0(sp)
  b8:	c842                	sw	a6,16(sp)
  ba:	c942                	sw	a6,144(sp)
    int line[size_b][size_a + size_b];
  bc:	d242                	sw	a6,36(sp)
  be:	d342                	sw	a6,164(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  c0:	d442                	sw	a6,40(sp)
  c2:	d542                	sw	a6,168(sp)
    int line[size_b][size_a + size_b];
  c4:	d642                	sw	a6,44(sp)
  c6:	0e4a                	slli	t3,t3,0x12
  c8:	4200                	lw	s0,0(a2)
  ca:	0054000b          	0x54000b
  ce:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d0:	0000                	unimp
  d2:	0000                	unimp
  d4:	03fc                	addi	a5,sp,460
  d6:	0000                	unimp
  d8:	02da                	slli	t0,t0,0x16
  da:	0000                	unimp
  dc:	0e46                	slli	t3,t3,0x11
  de:	5e50                	lw	a2,60(a2)
  e0:	0288                	addi	a0,sp,320
    int line[size_b][size_a + size_b];
  e2:	0389                	addi	t2,t2,2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  e4:	0492                	slli	s1,s1,0x4
    int line[size_b][size_a + size_b];
  e6:	06940593          	addi	a1,s0,105 # 19069 <_stack_start+0x9069>
  ea:	0795                	addi	a5,a5,5
    int pola[size_a];
  ec:	0896                	slli	a7,a7,0x5
  ee:	0a980997          	auipc	s3,0xa980
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  f2:	0b99                	addi	s7,s7,6
    int line[size_b][size_a + size_b];
  f4:	01810d9b          	0x1810d9b
    int pola[size_a];
  f8:	0c9a                	slli	s9,s9,0x6
    int polb[size_b];
  fa:	0c42                	slli	s8,s8,0x10
  fc:	0008                	0x8
    int line[size_b][size_a + size_b];
  fe:	0a026a03          	0xa026a03
    int pola[size_a];
 102:	020c                	addi	a1,sp,256
 104:	4250                	lw	a2,4(a2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 106:	42c1                	li	t0,16
 108:	42c8                	lw	a0,4(a3)
    int pola[size_a];
 10a:	42c9                	li	t0,18
            line[i][j] = 0;
 10c:	42d2                	lw	t0,20(sp)
 10e:	42d442d3          	0x42d442d3
    int polb[size_b];
 112:	42d5                	li	t0,21
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 114:	42d6                	lw	t0,84(sp)
    int pola[size_a];
 116:	42d842d7          	0x42d842d7
    int polb[size_b];
 11a:	42d9                	li	t0,22
            line[i][j] = 0;
 11c:	42da                	lw	t0,148(sp)
 11e:	000e4adb          	0xe4adb
    for (i = 0; i < size_b; ++i){
 122:	0b42                	slli	s6,s6,0x10
 124:	0054                	addi	a3,sp,4
            product[j] = 0;
 126:	0000                	unimp
 128:	0000                	unimp
 12a:	0000                	unimp
 12c:	06d6                	slli	a3,a3,0x15
    for (i = 0; i < size_b; ++i){
 12e:	0000                	unimp
 130:	024a                	slli	tp,tp,0x12
    for (i = 0; i < size_a; ++i){
 132:	0000                	unimp
 134:	0e46                	slli	t3,t3,0x11
 136:	5e50                	lw	a2,60(a2)
	array_mod(pola,mod,size_a);
 138:	0288                	addi	a0,sp,320
 13a:	0389                	addi	t2,t2,2
 13c:	0492                	slli	s1,s1,0x4
 13e:	06940593          	addi	a1,s0,105
 142:	0795                	addi	a5,a5,5
    for (i = 0; i < size_b; ++i){
 144:	0896                	slli	a7,a7,0x5
 146:	0a980997          	auipc	s3,0xa980
 14a:	0b99                	addi	s7,s7,6
 14c:	01810d9b          	0x1810d9b
	array_mod(polb,mod,size_b);
 150:	0c9a                	slli	s9,s9,0x6
 152:	0c42                	slli	s8,s8,0x10
 154:	0008                	0x8
    if(star_mult == 1){
 156:	0a00fa03          	0xa00fa03
 15a:	020c                	addi	a1,sp,256
 15c:	4250                	lw	a2,4(a2)
 15e:	42c1                	li	t0,16
 160:	42c8                	lw	a0,4(a3)
 162:	42c9                	li	t0,18
 164:	42d2                	lw	t0,20(sp)
 166:	42d442d3          	0x42d442d3
        for (j = size_b -1; j >= 0; j = j-1){
 16a:	42d5                	li	t0,21
 16c:	42d6                	lw	t0,84(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 16e:	42d842d7          	0x42d842d7
            product[j] = 0;
 172:	42d9                	li	t0,22
 174:	42da                	lw	t0,148(sp)
 176:	000e4adb          	0xe4adb
            line[i][j] = 0;
 17a:	0b42                	slli	s6,s6,0x10
            product[j] = 0;
 17c:	0054                	addi	a3,sp,4
 17e:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 180:	0000                	unimp
 182:	0000                	unimp
 184:	0920                	addi	s0,sp,152
 186:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 188:	02f4                	addi	a3,sp,332
 18a:	0000                	unimp
 18c:	0e42                	slli	t3,t3,0x10
 18e:	03f0                	addi	a2,sp,460
        for(j = 0; j < size_a + size_b -1; ++j){
 190:	814c                	0x814c
 192:	8801                	andi	s0,s0,0
        pola[i] = a[i];
 194:	8902                	jr	s2
 196:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
 19a:	6400                	flw	fs0,8(s0)
 19c:	0492                	slli	s1,s1,0x4
 19e:	06940593          	addi	a1,s0,105
 1a2:	0795                	addi	a5,a5,5
 1a4:	0896                	slli	a7,a7,0x5
    for (i = 0; i < size_a; ++i){
 1a6:	0c9a0997          	auipc	s3,0xc9a0
        polb[i] = b[i];
 1aa:	0a98                	addi	a4,sp,336
 1ac:	0b99                	addi	s7,s7,6
 1ae:	0a01dc03          	lhu	s8,160(gp)
 1b2:	020c                	addi	a1,sp,256
    for (i = 0; i < size_b; ++i){
 1b4:	03f0                	addi	a2,sp,460
        polb[i] = b[i];
 1b6:	c144                	sw	s1,4(a0)
    for (i = 0; i < size_b; ++i){
 1b8:	c844                	sw	s1,20(s0)
    if(star_mult == 1){
 1ba:	c944                	sw	s1,20(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 1bc:	d244                	sw	s1,36(a2)
 1be:	d344                	sw	s1,36(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 1c0:	d444                	sw	s1,44(s0)
    for (i = 0; i < size_b; ++i){
 1c2:	d544                	sw	s1,44(a0)
 1c4:	d644                	sw	s1,44(a2)
 1c6:	d744                	sw	s1,44(a4)
 1c8:	d844                	sw	s1,52(s0)
 1ca:	d944                	sw	s1,52(a0)
 1cc:	da44                	sw	s1,52(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
 1ce:	0e4a                	slli	t3,t3,0x12
 1d0:	4200                	lw	s0,0(a2)
 1d2:	0034000b          	0x34000b
    array_mod(product,mod,size_a+size_b-1);
 1d6:	0000                	unimp
 1d8:	0000                	unimp
 1da:	0000                	unimp
 1dc:	0c14                	addi	a3,sp,528
 1de:	0000                	unimp
 1e0:	0096                	slli	ra,ra,0x5
}
 1e2:	0000                	unimp
 1e4:	0e42                	slli	t3,t3,0x10
 1e6:	01e0                	addi	s0,sp,204
 1e8:	8846                	mv	a6,a7
 1ea:	8902                	jr	s2
 1ec:	5a049203          	lh	tp,1440(s1)
 1f0:	0181                	addi	gp,gp,0
 1f2:	06940593          	addi	a1,s0,105
 1f6:	5402                	lw	s0,32(sp)
 1f8:	c10a                	sw	sp,128(sp)
 1fa:	c842                	sw	a6,16(sp)
 1fc:	c942                	sw	a6,144(sp)
 1fe:	d242                	sw	a6,36(sp)
 200:	d342                	sw	a6,164(sp)
 202:	d442                	sw	a6,40(sp)
 204:	0e42                	slli	t3,t3,0x10
 206:	4200                	lw	s0,0(a2)
 208:	0000000b          	0xb
                line[size_b-1-j][k] = pola[k]*polb[j];
 20c:	0040                	addi	s0,sp,4
 20e:	0000                	unimp
 210:	0000                	unimp
 212:	0000                	unimp
 214:	0caa                	slli	s9,s9,0xa
 216:	0000                	unimp
 218:	00c8                	addi	a0,sp,68
 21a:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 21c:	0e42                	slli	t3,t3,0x10
                line[size_b-1-j][k] = pola[k]*polb[j];
 21e:	4430                	lw	a2,72(s0)
 220:	0288                	addi	a0,sp,320
 222:	924e0593          	addi	a1,t3,-1756 # 19924 <_stack_start+0x9924>
            for (k = size_a-1; k >= 0; k = k-1 ){
 226:	9504                	0x9504
        for (j = size_b -1; j >= 0; j = j-1){
 228:	58099707          	0x58099707
 22c:	0181                	addi	gp,gp,0
 22e:	0389                	addi	t2,t2,2
            for (k = size_a-1; k >= 0; k = k-1 ){
 230:	0694                	addi	a3,sp,832
 232:	0896                	slli	a7,a7,0x5
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 234:	5202                	lw	tp,32(sp)
 236:	c10a                	sw	sp,128(sp)
 238:	c842                	sw	a6,16(sp)
 23a:	c942                	sw	a6,144(sp)
 23c:	d242                	sw	a6,36(sp)
 23e:	d342                	sw	a6,164(sp)
 240:	d442                	sw	a6,40(sp)
 242:	d542                	sw	a6,168(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 244:	d642                	sw	a6,44(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 246:	d742                	sw	a6,172(sp)
 248:	0e42                	slli	t3,t3,0x10
 24a:	4200                	lw	s0,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 24c:	0000000b          	0xb
        for (j = size_b -1; j >= 0; j = j-1){
 250:	0020                	addi	s0,sp,8
 252:	0000                	unimp
 254:	0000                	unimp
 256:	0000                	unimp
        array_mod(line[i],mod,(size_a+size_b-1));
 258:	0f6e                	slli	t5,t5,0x1b
 25a:	0000                	unimp
 25c:	0110                	addi	a2,sp,128
 25e:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 260:	0e44                	addi	s1,sp,788
 262:	08b0                	addi	a2,sp,88
 264:	8156                	mv	sp,s5
            product[j] += line[i][j];
 266:	8801                	andi	s0,s0,0
 268:	0202                	c.slli64	tp
 26a:	0ad6                	slli	s5,s5,0x15
 26c:	44c1                	li	s1,16
 26e:	46c8                	lw	a0,12(a3)
        for(i = 0; i < size_b; ++i){
 270:	000e                	c.slli	zero,0x3
            product[j] += line[i][j];
 272:	0b42                	slli	s6,s6,0x10


NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	4cd0006f          	j	d48 <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	4cd0006f          	j	d4c <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	4c50006f          	j	d48 <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	4c10006f          	j	d48 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_add>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      8c:	06b5750b          	0x6b5750b
    );

    return;


}
      90:	8082                	ret

00000092 <array_add>:
void array_add(int *a1, int *a2, int length) {
int i =0;
    for(i=0;i<(length/3);i++) {
      92:	478d                	li	a5,3
      94:	02f64633          	div	a2,a2,a5
      98:	4831                	li	a6,12
      9a:	4781                	li	a5,0
      9c:	00c7c363          	blt	a5,a2,a2 <array_add+0x10>
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
    }
}
      a0:	8082                	ret
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	03078733          	mul	a4,a5,a6
    asm volatile(
      a6:	00e506b3          	add	a3,a0,a4
      aa:	972e                	add	a4,a4,a1
      ac:	06e6f70b          	0x6e6f70b
    for(i=0;i<(length/3);i++) {
      b0:	0785                	addi	a5,a5,1
      b2:	b7ed                	j	9c <array_add+0xa>

000000b4 <instr_mod>:

void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
      b4:	0cb5750b          	0xcb5750b

    );
    return;


}
      b8:	8082                	ret

000000ba <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    for(i=0;i<(length/3);i++) {
      ba:	478d                	li	a5,3
      bc:	02f64633          	div	a2,a2,a5
    asm volatile(
      c0:	46b1                	li	a3,12
    for(i=0;i<(length/3);i++) {
      c2:	4781                	li	a5,0
      c4:	00c7c363          	blt	a5,a2,ca <array_mod+0x10>
        instr_mod((unsigned int*)&a1[3 * i], (unsigned int)mod);
    }

}
      c8:	8082                	ret
    asm volatile(
      ca:	02d78733          	mul	a4,a5,a3
      ce:	972a                	add	a4,a4,a0
      d0:	0cb7770b          	0xcb7770b
    for(i=0;i<(length/3);i++) {
      d4:	0785                	addi	a5,a5,1
      d6:	b7fd                	j	c4 <array_mod+0xa>

000000d8 <polymult>:

/////////////////////////////////////////////////


int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d8:	715d                	addi	sp,sp,-80
      da:	de4e                	sw	s3,60(sp)
      dc:	ce6e                	sw	s11,28(sp)
      de:	89ba                	mv	s3,a4
      e0:	00269d93          	slli	s11,a3,0x2

    int line[size_b][size_a + size_b];
      e4:	00d58733          	add	a4,a1,a3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      e8:	dc52                	sw	s4,56(sp)
      ea:	da56                	sw	s5,52(sp)
    int line[size_b][size_a + size_b];
      ec:	fff70a13          	addi	s4,a4,-1
      f0:	00271a93          	slli	s5,a4,0x2
      f4:	02ed8733          	mul	a4,s11,a4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      f8:	c4a2                	sw	s0,72(sp)
      fa:	c2a6                	sw	s1,68(sp)
      fc:	c0ca                	sw	s2,64(sp)
      fe:	d85a                	sw	s6,48(sp)
     100:	d65e                	sw	s7,44(sp)
     102:	d462                	sw	s8,40(sp)
     104:	d266                	sw	s9,36(sp)
     106:	d06a                	sw	s10,32(sp)
     108:	0880                	addi	s0,sp,80
     10a:	c686                	sw	ra,76(sp)
     10c:	faf42e23          	sw	a5,-68(s0)
    int line[size_b][size_a + size_b];
     110:	073d                	addi	a4,a4,15
    int i,j,k;
    int *return_address1;
    int pola[size_a];
     112:	00259793          	slli	a5,a1,0x2
    int line[size_b][size_a + size_b];
     116:	9b41                	andi	a4,a4,-16
    int pola[size_a];
     118:	07bd                	addi	a5,a5,15
    int line[size_b][size_a + size_b];
     11a:	40e10133          	sub	sp,sp,a4
    int pola[size_a];
     11e:	9bc1                	andi	a5,a5,-16
    int polb[size_b];
     120:	00fd8713          	addi	a4,s11,15
    int line[size_b][size_a + size_b];
     124:	890a                	mv	s2,sp
    int polb[size_b];
     126:	9b41                	andi	a4,a4,-16
    int pola[size_a];
     128:	40f10133          	sub	sp,sp,a5
     12c:	8c8a                	mv	s9,sp
    int polb[size_b];
     12e:	40e10133          	sub	sp,sp,a4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     132:	8832                	mv	a6,a2
     134:	8c36                	mv	s8,a3
    int line[size_b][size_a + size_b];
     136:	fff68d13          	addi	s10,a3,-1
    int pola[size_a];
     13a:	fff58b93          	addi	s7,a1,-1
    int polb[size_b];
     13e:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     140:	8b4a                	mv	s6,s2
     142:	864a                	mv	a2,s2
     144:	4681                	li	a3,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product[j] = 0;
     146:	00001e17          	auipc	t3,0x1
     14a:	12ee0e13          	addi	t3,t3,302 # 1274 <_bss_start>
    for (i = 0; i < size_b; ++i){
     14e:	0786c063          	blt	a3,s8,1ae <polymult+0xd6>
        }
    }

    // make mod calculations
    for (i = 0; i < size_a; ++i){
     152:	4701                	li	a4,0
     154:	06b74063          	blt	a4,a1,1b4 <polymult+0xdc>
        pola[i] = a[i];
    }

	array_mod(pola,mod,size_a);
     158:	862e                	mv	a2,a1
     15a:	8566                	mv	a0,s9
     15c:	85ce                	mv	a1,s3
     15e:	fb042c23          	sw	a6,-72(s0)
     162:	3fa1                	jal	ba <array_mod>

    for (i = 0; i < size_b; ++i){
     164:	fb842803          	lw	a6,-72(s0)
     168:	4701                	li	a4,0
     16a:	05874e63          	blt	a4,s8,1c6 <polymult+0xee>
        polb[i] = b[i];
    }

	array_mod(polb,mod,size_b);
     16e:	8526                	mv	a0,s1
     170:	8662                	mv	a2,s8
     172:	85ce                	mv	a1,s3
     174:	3799                	jal	ba <array_mod>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     176:	fbc42783          	lw	a5,-68(s0)
     17a:	4705                	li	a4,1
     17c:	94ee                	add	s1,s1,s11
     17e:	06e78e63          	beq	a5,a4,1fa <polymult+0x122>
     182:	1df1                	addi	s11,s11,-4
     184:	ffca8613          	addi	a2,s5,-4
     188:	996e                	add	s2,s2,s11
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     18a:	060d4a63          	bltz	s10,1fe <polymult+0x126>
            for (k = size_a-1; k >= 0; k = k-1 ){
     18e:	875e                	mv	a4,s7
     190:	a8c1                	j	260 <polymult+0x188>
            product[j] = 0;
     192:	00271313          	slli	t1,a4,0x2
     196:	9372                	add	t1,t1,t3
            line[i][j] = 0;
     198:	0008a023          	sw	zero,0(a7)
            product[j] = 0;
     19c:	00032023          	sw	zero,0(t1)
        for(j = 0; j < size_a + size_b -1; ++j){
     1a0:	0705                	addi	a4,a4,1
     1a2:	0891                	addi	a7,a7,4
     1a4:	ff4747e3          	blt	a4,s4,192 <polymult+0xba>
    for (i = 0; i < size_b; ++i){
     1a8:	0685                	addi	a3,a3,1
     1aa:	9656                	add	a2,a2,s5
     1ac:	b74d                	j	14e <polymult+0x76>
     1ae:	88b2                	mv	a7,a2
        for(j = 0; j < size_a + size_b -1; ++j){
     1b0:	4701                	li	a4,0
     1b2:	bfcd                	j	1a4 <polymult+0xcc>
        pola[i] = a[i];
     1b4:	00271693          	slli	a3,a4,0x2
     1b8:	00dc8633          	add	a2,s9,a3
     1bc:	96aa                	add	a3,a3,a0
     1be:	4294                	lw	a3,0(a3)
    for (i = 0; i < size_a; ++i){
     1c0:	0705                	addi	a4,a4,1
        pola[i] = a[i];
     1c2:	c214                	sw	a3,0(a2)
    for (i = 0; i < size_a; ++i){
     1c4:	bf41                	j	154 <polymult+0x7c>
        polb[i] = b[i];
     1c6:	00271693          	slli	a3,a4,0x2
     1ca:	00d48633          	add	a2,s1,a3
     1ce:	96c2                	add	a3,a3,a6
     1d0:	4294                	lw	a3,0(a3)
    for (i = 0; i < size_b; ++i){
     1d2:	0705                	addi	a4,a4,1
        polb[i] = b[i];
     1d4:	c214                	sw	a3,0(a2)
    for (i = 0; i < size_b; ++i){
     1d6:	bf51                	j	16a <polymult+0x92>
                line[size_b-1-j][k] = pola[k]*polb[j];
     1d8:	00271693          	slli	a3,a4,0x2
     1dc:	00d90633          	add	a2,s2,a3
     1e0:	96e6                	add	a3,a3,s9
     1e2:	4294                	lw	a3,0(a3)
     1e4:	ffc4a583          	lw	a1,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e8:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     1ea:	02b686b3          	mul	a3,a3,a1
     1ee:	c214                	sw	a3,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f0:	fe0754e3          	bgez	a4,1d8 <polymult+0x100>
        for (j = size_b -1; j >= 0; j = j-1){
     1f4:	1d7d                	addi	s10,s10,-1
     1f6:	14f1                	addi	s1,s1,-4
     1f8:	9956                	add	s2,s2,s5
     1fa:	040d5563          	bgez	s10,244 <polymult+0x16c>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1fe:	4481                	li	s1,0
    }

    //mod calculations & construct product
    for (i = 0; i < size_b; ++i){
        array_mod(line[i],mod,(size_a+size_b-1));
	array_add(product, line[i], (size_a + size_b - 1));
     200:	00001917          	auipc	s2,0x1
     204:	07490913          	addi	s2,s2,116 # 1274 <_bss_start>
        array_mod(line[i],mod,(size_a+size_b-1));
     208:	8652                	mv	a2,s4
     20a:	85ce                	mv	a1,s3
    for (i = 0; i < size_b; ++i){
     20c:	0784c063          	blt	s1,s8,26c <polymult+0x194>
    }


    //mod calculations
    array_mod(product,mod,size_a+size_b-1);
     210:	00001517          	auipc	a0,0x1
     214:	06450513          	addi	a0,a0,100 # 1274 <_bss_start>
     218:	354d                	jal	ba <array_mod>

    return_address1 = &product[0];

    return return_address1;
}
     21a:	fb040113          	addi	sp,s0,-80
     21e:	40b6                	lw	ra,76(sp)
     220:	4426                	lw	s0,72(sp)
     222:	4496                	lw	s1,68(sp)
     224:	4906                	lw	s2,64(sp)
     226:	59f2                	lw	s3,60(sp)
     228:	5a62                	lw	s4,56(sp)
     22a:	5ad2                	lw	s5,52(sp)
     22c:	5b42                	lw	s6,48(sp)
     22e:	5bb2                	lw	s7,44(sp)
     230:	5c22                	lw	s8,40(sp)
     232:	5c92                	lw	s9,36(sp)
     234:	5d02                	lw	s10,32(sp)
     236:	4df2                	lw	s11,28(sp)
     238:	00001517          	auipc	a0,0x1
     23c:	03c50513          	addi	a0,a0,60 # 1274 <_bss_start>
     240:	6161                	addi	sp,sp,80
     242:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
     244:	875e                	mv	a4,s7
     246:	b76d                	j	1f0 <polymult+0x118>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     248:	00271693          	slli	a3,a4,0x2
     24c:	00d905b3          	add	a1,s2,a3
     250:	96e6                	add	a3,a3,s9
     252:	4294                	lw	a3,0(a3)
     254:	ffc4a503          	lw	a0,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     258:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     25a:	02a686b3          	mul	a3,a3,a0
     25e:	c194                	sw	a3,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     260:	fe0754e3          	bgez	a4,248 <polymult+0x170>
        for (j = size_b -1; j >= 0; j = j-1){
     264:	1d7d                	addi	s10,s10,-1
     266:	14f1                	addi	s1,s1,-4
     268:	9932                	add	s2,s2,a2
     26a:	b705                	j	18a <polymult+0xb2>
        array_mod(line[i],mod,(size_a+size_b-1));
     26c:	855a                	mv	a0,s6
     26e:	35b1                	jal	ba <array_mod>
	array_add(product, line[i], (size_a + size_b - 1));
     270:	85da                	mv	a1,s6
     272:	8652                	mv	a2,s4
     274:	854a                	mv	a0,s2
     276:	3d31                	jal	92 <array_add>
    for (i = 0; i < size_b; ++i){
     278:	0485                	addi	s1,s1,1
     27a:	9b56                	add	s6,s6,s5
     27c:	b771                	j	208 <polymult+0x130>

0000027e <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     27e:	1101                	addi	sp,sp,-32
     280:	ca26                	sw	s1,20(sp)
     282:	84b6                	mv	s1,a3
   

    int line[size_b][size_a + size_b];
     284:	00d587b3          	add	a5,a1,a3
     288:	00249893          	slli	a7,s1,0x2
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     28c:	c84a                	sw	s2,16(sp)
     28e:	c64e                	sw	s3,12(sp)
    int line[size_b][size_a + size_b];
     290:	00279913          	slli	s2,a5,0x2
     294:	fff78993          	addi	s3,a5,-1
     298:	02f887b3          	mul	a5,a7,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     29c:	cc22                	sw	s0,24(sp)
     29e:	c452                	sw	s4,8(sp)
     2a0:	c256                	sw	s5,4(sp)
     2a2:	ce06                	sw	ra,28(sp)
     2a4:	c05a                	sw	s6,0(sp)
     2a6:	1000                	addi	s0,sp,32
     2a8:	832e                	mv	t1,a1
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     2aa:	fff58e13          	addi	t3,a1,-1
    int line[size_b][size_a + size_b];
     2ae:	07bd                	addi	a5,a5,15
     2b0:	9bc1                	andi	a5,a5,-16
     2b2:	40f10133          	sub	sp,sp,a5
    int pola[size_a];
     2b6:	00259793          	slli	a5,a1,0x2
     2ba:	07bd                	addi	a5,a5,15
     2bc:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     2be:	880a                	mv	a6,sp
    int pola[size_a];
     2c0:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     2c4:	00f88793          	addi	a5,a7,15
     2c8:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     2ca:	858a                	mv	a1,sp
    int polb[size_b];
     2cc:	40f10133          	sub	sp,sp,a5
    int line[size_b][size_a + size_b];
     2d0:	16fd                	addi	a3,a3,-1
    int polb[size_b];
     2d2:	878a                	mv	a5,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     2d4:	8a42                	mv	s4,a6
     2d6:	8fc2                	mv	t6,a6
     2d8:	4f01                	li	t5,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
     2da:	00001a97          	auipc	s5,0x1
     2de:	1f2a8a93          	addi	s5,s5,498 # 14cc <product2>
    for (i = 0; i < size_b; ++i){
     2e2:	049f4263          	blt	t5,s1,326 <polymult2+0xa8>
        }
    }

    for(i = 0; i < size_a; ++i){
     2e6:	4e81                	li	t4,0
     2e8:	046ec263          	blt	t4,t1,32c <polymult2+0xae>
        pola[i] = a[i];
    }


    for(i = 0; i < size_b; ++i){
     2ec:	4501                	li	a0,0
     2ee:	04954a63          	blt	a0,s1,342 <polymult2+0xc4>
        polb[i] = b[i];
    }


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     2f2:	4605                	li	a2,1
     2f4:	97c6                	add	a5,a5,a7
     2f6:	08c70263          	beq	a4,a2,37a <polymult2+0xfc>
     2fa:	18f1                	addi	a7,a7,-4
     2fc:	ffc90313          	addi	t1,s2,-4
     300:	9846                	add	a6,a6,a7
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     302:	0606ce63          	bltz	a3,37e <polymult2+0x100>
            for (k = size_a-1; k >= 0; k = k-1 ){
     306:	8772                	mv	a4,t3
     308:	a0c9                	j	3ca <polymult2+0x14c>
            product2[j] = 0;
     30a:	002e9393          	slli	t2,t4,0x2
     30e:	93d6                	add	t2,t2,s5
            line[i][j] = 0;
     310:	0002a023          	sw	zero,0(t0)
            product2[j] = 0;
     314:	0003a023          	sw	zero,0(t2)
        for(j = 0; j < size_a + size_b -1; ++j){
     318:	0e85                	addi	t4,t4,1
     31a:	0291                	addi	t0,t0,4
     31c:	ff3ec7e3          	blt	t4,s3,30a <polymult2+0x8c>
    for (i = 0; i < size_b; ++i){
     320:	0f05                	addi	t5,t5,1
     322:	9fca                	add	t6,t6,s2
     324:	bf7d                	j	2e2 <polymult2+0x64>
     326:	82fe                	mv	t0,t6
        for(j = 0; j < size_a + size_b -1; ++j){
     328:	4e81                	li	t4,0
     32a:	bfcd                	j	31c <polymult2+0x9e>
        pola[i] = a[i];
     32c:	002e9f13          	slli	t5,t4,0x2
     330:	01e58fb3          	add	t6,a1,t5
     334:	9f2a                	add	t5,t5,a0
     336:	000f2f03          	lw	t5,0(t5)
    for(i = 0; i < size_a; ++i){
     33a:	0e85                	addi	t4,t4,1
        pola[i] = a[i];
     33c:	01efa023          	sw	t5,0(t6)
    for(i = 0; i < size_a; ++i){
     340:	b765                	j	2e8 <polymult2+0x6a>
        polb[i] = b[i];
     342:	00251313          	slli	t1,a0,0x2
     346:	00678eb3          	add	t4,a5,t1
     34a:	9332                	add	t1,t1,a2
     34c:	00032303          	lw	t1,0(t1)
    for(i = 0; i < size_b; ++i){
     350:	0505                	addi	a0,a0,1
        polb[i] = b[i];
     352:	006ea023          	sw	t1,0(t4)
    for(i = 0; i < size_b; ++i){
     356:	bf61                	j	2ee <polymult2+0x70>
                line[size_b-1-j][k] = pola[k]*polb[j];
     358:	00271613          	slli	a2,a4,0x2
     35c:	00c80533          	add	a0,a6,a2
     360:	962e                	add	a2,a2,a1
     362:	4210                	lw	a2,0(a2)
     364:	ffc7a883          	lw	a7,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     368:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     36a:	03160633          	mul	a2,a2,a7
     36e:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     370:	fe0754e3          	bgez	a4,358 <polymult2+0xda>
        for (j = size_b -1; j >= 0; j = j-1){
     374:	16fd                	addi	a3,a3,-1
     376:	17f1                	addi	a5,a5,-4
     378:	984a                	add	a6,a6,s2
     37a:	0206d963          	bgez	a3,3ac <polymult2+0x12e>
            for (k = size_a-1; k >= 0; k = k-1 ){
     37e:	4a81                	li	s5,0
    }

    // construct product
   
        for(i = 0; i < size_b; ++i){
         array_add(product2,line[i],size_a+size_b-1);
     380:	00001b17          	auipc	s6,0x1
     384:	14cb0b13          	addi	s6,s6,332 # 14cc <product2>
        for(i = 0; i < size_b; ++i){
     388:	049ac763          	blt	s5,s1,3d6 <polymult2+0x158>


    return_address2 = &product2[0];

    return return_address2;
}
     38c:	fe040113          	addi	sp,s0,-32
     390:	40f2                	lw	ra,28(sp)
     392:	4462                	lw	s0,24(sp)
     394:	44d2                	lw	s1,20(sp)
     396:	4942                	lw	s2,16(sp)
     398:	49b2                	lw	s3,12(sp)
     39a:	4a22                	lw	s4,8(sp)
     39c:	4a92                	lw	s5,4(sp)
     39e:	4b02                	lw	s6,0(sp)
     3a0:	00001517          	auipc	a0,0x1
     3a4:	12c50513          	addi	a0,a0,300 # 14cc <product2>
     3a8:	6105                	addi	sp,sp,32
     3aa:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ac:	8772                	mv	a4,t3
     3ae:	b7c9                	j	370 <polymult2+0xf2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3b0:	00271513          	slli	a0,a4,0x2
     3b4:	00a808b3          	add	a7,a6,a0
     3b8:	952e                	add	a0,a0,a1
     3ba:	4110                	lw	a2,0(a0)
     3bc:	ffc7a503          	lw	a0,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c0:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3c2:	02a60633          	mul	a2,a2,a0
     3c6:	00c8a023          	sw	a2,0(a7)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	fe0753e3          	bgez	a4,3b0 <polymult2+0x132>
        for (j = size_b -1; j >= 0; j = j-1){
     3ce:	16fd                	addi	a3,a3,-1
     3d0:	17f1                	addi	a5,a5,-4
     3d2:	981a                	add	a6,a6,t1
     3d4:	b73d                	j	302 <polymult2+0x84>
         array_add(product2,line[i],size_a+size_b-1);
     3d6:	85d2                	mv	a1,s4
     3d8:	864e                	mv	a2,s3
     3da:	855a                	mv	a0,s6
     3dc:	395d                	jal	92 <array_add>
        for(i = 0; i < size_b; ++i){
     3de:	0a85                	addi	s5,s5,1
     3e0:	9a4a                	add	s4,s4,s2
     3e2:	b75d                	j	388 <polymult2+0x10a>

000003e4 <polydiv>:
 

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     3e4:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3e8:	715d                	addi	sp,sp,-80
    int v[size_N];
     3ea:	07bd                	addi	a5,a5,15
     3ec:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3ee:	c4a2                	sw	s0,72(sp)
     3f0:	c2a6                	sw	s1,68(sp)
     3f2:	c0ca                	sw	s2,64(sp)
     3f4:	de4e                	sw	s3,60(sp)
     3f6:	dc52                	sw	s4,56(sp)
     3f8:	da56                	sw	s5,52(sp)
     3fa:	d85a                	sw	s6,48(sp)
     3fc:	d65e                	sw	s7,44(sp)
     3fe:	d462                	sw	s8,40(sp)
     400:	d266                	sw	s9,36(sp)
     402:	d06a                	sw	s10,32(sp)
     404:	c686                	sw	ra,76(sp)
     406:	ce6e                	sw	s11,28(sp)
     408:	0880                	addi	s0,sp,80
    int v[size_N];
     40a:	40f10133          	sub	sp,sp,a5
     40e:	8a0a                	mv	s4,sp
    int q[size_N];
     410:	40f10133          	sub	sp,sp,a5
     414:	8a8a                	mv	s5,sp
    int *product;
    int num_temp[size_N];
     416:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     41a:	00269793          	slli	a5,a3,0x2
     41e:	07bd                	addi	a5,a5,15
     420:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
     422:	898a                	mv	s3,sp
    int denum_temp[size_D];
     424:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     428:	892e                	mv	s2,a1
     42a:	8c32                	mv	s8,a2
     42c:	8b36                	mv	s6,a3
     42e:	84ba                	mv	s1,a4
    int v[size_N];
     430:	fff58d13          	addi	s10,a1,-1
    int denum_temp[size_D];
     434:	fff68b93          	addi	s7,a3,-1
     438:	8c8a                	mv	s9,sp


    // make mod calculation for coefficents
    for (i = 0; i < size_N; ++i){
     43a:	4781                	li	a5,0
     43c:	0527ca63          	blt	a5,s2,490 <polydiv+0xac>
        num_temp[i] = num[i];
    }
    
    if(size_N == 106) {
     440:	06a00793          	li	a5,106
     444:	06f91363          	bne	s2,a5,4aa <polydiv+0xc6>
        array_mod(num_temp, mod, size_N - 1);
     448:	06900613          	li	a2,105
     44c:	85a6                	mv	a1,s1
     44e:	854e                	mv	a0,s3
     450:	31ad                	jal	ba <array_mod>
        while(num_temp[size_N - 1] < 0){
     452:	1a49a783          	lw	a5,420(s3)
     456:	0407c663          	bltz	a5,4a2 <polydiv+0xbe>
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
        }
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     45a:	0297e7b3          	rem	a5,a5,s1
     45e:	1af9a223          	sw	a5,420(s3)
    for (i = 0; i < size_N; ++i){
     462:	4781                	li	a5,0
        array_mod(num_temp, mod, size_N);
    }


    // make mod calculation for coefficents
    for (i = 0; i < size_D; ++i) {
     464:	0567c863          	blt	a5,s6,4b4 <polydiv+0xd0>
        denum_temp[i] = denum[i];
    }

	array_mod(denum_temp,mod,size_D);
     468:	865a                	mv	a2,s6
     46a:	85a6                	mv	a1,s1
     46c:	8566                	mv	a0,s9
     46e:	31b1                	jal	ba <array_mod>

    for (i = 0; i < size_N; ++i){
     470:	4781                	li	a5,0
     472:	0527ca63          	blt	a5,s2,4c6 <polydiv+0xe2>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     476:	002b9793          	slli	a5,s7,0x2
     47a:	97e6                	add	a5,a5,s9
     47c:	4398                	lw	a4,0(a5)
     47e:	040bdf63          	bgez	s7,4dc <polydiv+0xf8>
    for (i = 0; i < size_N; ++i){
     482:	4781                	li	a5,0
     484:	4c01                	li	s8,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     486:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     488:	049c4d63          	blt	s8,s1,4e2 <polydiv+0xfe>
     48c:	87ea                	mv	a5,s10
     48e:	a09d                	j	4f4 <polydiv+0x110>
        num_temp[i] = num[i];
     490:	00279713          	slli	a4,a5,0x2
     494:	00e986b3          	add	a3,s3,a4
     498:	972a                	add	a4,a4,a0
     49a:	4318                	lw	a4,0(a4)
    for (i = 0; i < size_N; ++i){
     49c:	0785                	addi	a5,a5,1
        num_temp[i] = num[i];
     49e:	c298                	sw	a4,0(a3)
    for (i = 0; i < size_N; ++i){
     4a0:	bf71                	j	43c <polydiv+0x58>
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4a2:	97a6                	add	a5,a5,s1
     4a4:	1af9a223          	sw	a5,420(s3)
     4a8:	b76d                	j	452 <polydiv+0x6e>
        array_mod(num_temp, mod, size_N);
     4aa:	864a                	mv	a2,s2
     4ac:	85a6                	mv	a1,s1
     4ae:	854e                	mv	a0,s3
     4b0:	3129                	jal	ba <array_mod>
     4b2:	bf45                	j	462 <polydiv+0x7e>
        denum_temp[i] = denum[i];
     4b4:	00279713          	slli	a4,a5,0x2
     4b8:	00ec86b3          	add	a3,s9,a4
     4bc:	9762                	add	a4,a4,s8
     4be:	4318                	lw	a4,0(a4)
    for (i = 0; i < size_D; ++i) {
     4c0:	0785                	addi	a5,a5,1
        denum_temp[i] = denum[i];
     4c2:	c298                	sw	a4,0(a3)
    for (i = 0; i < size_D; ++i) {
     4c4:	b745                	j	464 <polydiv+0x80>
        q[i] = 0;
     4c6:	00279713          	slli	a4,a5,0x2
     4ca:	00ea86b3          	add	a3,s5,a4
        v[i] = 0;
     4ce:	9752                	add	a4,a4,s4
        q[i] = 0;
     4d0:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     4d4:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     4d8:	0785                	addi	a5,a5,1
     4da:	bf61                	j	472 <polydiv+0x8e>
        if( denum_temp[i] != 0 )
     4dc:	f35d                	bnez	a4,482 <polydiv+0x9e>
    for (i = size_D-1; i >= 0; i = i-1){
     4de:	1bfd                	addi	s7,s7,-1
     4e0:	bf59                	j	476 <polydiv+0x92>
        if ( (b_N*u)%mod == 1 )
     4e2:	0297e633          	rem	a2,a5,s1
     4e6:	97ba                	add	a5,a5,a4
     4e8:	fad602e3          	beq	a2,a3,48c <polydiv+0xa8>
    for (u = 0; u < mod; ++u){
     4ec:	0c05                	addi	s8,s8,1
     4ee:	bf69                	j	488 <polydiv+0xa4>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     4f0:	eb01                	bnez	a4,500 <polydiv+0x11c>
    for (i = size_N-1; i >= 0; i = i-1){
     4f2:	17fd                	addi	a5,a5,-1
     4f4:	00279713          	slli	a4,a5,0x2
     4f8:	974e                	add	a4,a4,s3
     4fa:	4318                	lw	a4,0(a4)
     4fc:	fe07dae3          	bgez	a5,4f0 <polydiv+0x10c>
    while (d >= d2){

        // Set v := u × r_d × X^(d–N)
        v[(d-d2)] = u*r_d;

         if(size_N == 106) {
     500:	06a00d93          	li	s11,106
     504:	a299                	j	64a <polydiv+0x266>
        v[(d-d2)] = u*r_d;
     506:	03870733          	mul	a4,a4,s8
     50a:	417787b3          	sub	a5,a5,s7
     50e:	078a                	slli	a5,a5,0x2
     510:	97d2                	add	a5,a5,s4
     512:	c398                	sw	a4,0(a5)
         if(size_N == 106) {
     514:	0bb91963          	bne	s2,s11,5c6 <polydiv+0x1e2>
            array_mod(v, mod, size_N - 1);
     518:	06900613          	li	a2,105
     51c:	85a6                	mv	a1,s1
     51e:	8552                	mv	a0,s4
     520:	3e69                	jal	ba <array_mod>
            while(v[size_N - 1] < 0){
     522:	1a4a2783          	lw	a5,420(s4)
     526:	0807cc63          	bltz	a5,5be <polydiv+0x1da>
                v[size_N - 1] = v[size_N - 1]+mod;
            }
            v[size_N - 1] = v[size_N - 1] % mod;
     52a:	0297e7b3          	rem	a5,a5,s1
     52e:	1afa2223          	sw	a5,420(s4)
        else{
            array_mod(v, mod, size_N);
        }

        // v*b
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     532:	4781                	li	a5,0
     534:	8726                	mv	a4,s1
     536:	86da                	mv	a3,s6
     538:	8652                	mv	a2,s4
     53a:	85da                	mv	a1,s6
     53c:	8566                	mv	a0,s9
     53e:	3e69                	jal	d8 <polymult>

        // make mod calculation for coefficents
     
        if(size_N == 106) {
     540:	faa42e23          	sw	a0,-68(s0)
     544:	09b91a63          	bne	s2,s11,5d8 <polydiv+0x1f4>
            array_mod(product, mod, size_N - 1);
     548:	06900613          	li	a2,105
     54c:	85a6                	mv	a1,s1
     54e:	36b5                	jal	ba <array_mod>
            while(product[size_N - 1] < 0){
     550:	fbc42703          	lw	a4,-68(s0)
     554:	1a472783          	lw	a5,420(a4)
     558:	0607cc63          	bltz	a5,5d0 <polydiv+0x1ec>
                product[size_N - 1] = product[size_N - 1]+mod;
            }
            product[size_N - 1] = product[size_N - 1] % mod;
     55c:	0297e7b3          	rem	a5,a5,s1
     560:	1af72223          	sw	a5,420(a4)
     564:	86ce                	mv	a3,s3
     566:	4781                	li	a5,0
        else{
            array_mod(product, mod, size_N);
        }
        
        //r = r- v*b
        for (i = 0; i < size_N; ++i){
     568:	0727ce63          	blt	a5,s2,5e4 <polydiv+0x200>
            num_temp[i] = num_temp[i] - product[i];
        }

        // make mod calculation for coefficents
 	if(size_N == 106) {
     56c:	09b91b63          	bne	s2,s11,602 <polydiv+0x21e>
            array_mod(num_temp, mod, size_N - 1);
     570:	06900613          	li	a2,105
     574:	85a6                	mv	a1,s1
     576:	854e                	mv	a0,s3
     578:	3689                	jal	ba <array_mod>
            while(num_temp[size_N - 1] < 0){
     57a:	1a49a783          	lw	a5,420(s3)
     57e:	0607ce63          	bltz	a5,5fa <polydiv+0x216>
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
            }
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     582:	0297e7b3          	rem	a5,a5,s1
        else{
            array_mod(num_temp, mod, size_N);
	}
        // q = q + v;
    	if(size_N == 106) {
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     586:	06900613          	li	a2,105
     58a:	85d2                	mv	a1,s4
     58c:	8556                	mv	a0,s5
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     58e:	1af9a223          	sw	a5,420(s3)
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     592:	3601                	jal	92 <array_add>
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     594:	1a4aa783          	lw	a5,420(s5)
     598:	1a4a2703          	lw	a4,420(s4)
        else{
            array_add(q, v, size_N );

        }
 	if(size_N == 106) {
            array_mod(q, mod, size_N - 1);
     59c:	06900613          	li	a2,105
     5a0:	85a6                	mv	a1,s1
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     5a2:	97ba                	add	a5,a5,a4
            array_mod(q, mod, size_N - 1);
     5a4:	8556                	mv	a0,s5
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     5a6:	1afaa223          	sw	a5,420(s5)
            array_mod(q, mod, size_N - 1);
     5aa:	3e01                	jal	ba <array_mod>
            while(q[size_N - 1] < 0){
     5ac:	1a4aa783          	lw	a5,420(s5)
     5b0:	0607ce63          	bltz	a5,62c <polydiv+0x248>
                q[size_N - 1] = q[size_N - 1]+mod;
            }
            q[size_N - 1] = q[size_N - 1] % mod;
     5b4:	0297e7b3          	rem	a5,a5,s1
     5b8:	1afaa223          	sw	a5,420(s5)
     5bc:	a8b9                	j	61a <polydiv+0x236>
                v[size_N - 1] = v[size_N - 1]+mod;
     5be:	97a6                	add	a5,a5,s1
     5c0:	1afa2223          	sw	a5,420(s4)
     5c4:	bfb9                	j	522 <polydiv+0x13e>
            array_mod(v, mod, size_N);
     5c6:	864a                	mv	a2,s2
     5c8:	85a6                	mv	a1,s1
     5ca:	8552                	mv	a0,s4
     5cc:	34fd                	jal	ba <array_mod>
     5ce:	b795                	j	532 <polydiv+0x14e>
                product[size_N - 1] = product[size_N - 1]+mod;
     5d0:	97a6                	add	a5,a5,s1
     5d2:	1af72223          	sw	a5,420(a4)
     5d6:	bfbd                	j	554 <polydiv+0x170>
            array_mod(product, mod, size_N);
     5d8:	864a                	mv	a2,s2
     5da:	85a6                	mv	a1,s1
     5dc:	3cf9                	jal	ba <array_mod>
     5de:	fbc42703          	lw	a4,-68(s0)
     5e2:	b749                	j	564 <polydiv+0x180>
            num_temp[i] = num_temp[i] - product[i];
     5e4:	00279593          	slli	a1,a5,0x2
     5e8:	95ba                	add	a1,a1,a4
     5ea:	4290                	lw	a2,0(a3)
     5ec:	418c                	lw	a1,0(a1)
        for (i = 0; i < size_N; ++i){
     5ee:	0785                	addi	a5,a5,1
     5f0:	0691                	addi	a3,a3,4
            num_temp[i] = num_temp[i] - product[i];
     5f2:	8e0d                	sub	a2,a2,a1
     5f4:	fec6ae23          	sw	a2,-4(a3)
        for (i = 0; i < size_N; ++i){
     5f8:	bf85                	j	568 <polydiv+0x184>
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     5fa:	97a6                	add	a5,a5,s1
     5fc:	1af9a223          	sw	a5,420(s3)
     600:	bfad                	j	57a <polydiv+0x196>
            array_mod(num_temp, mod, size_N);
     602:	864a                	mv	a2,s2
     604:	85a6                	mv	a1,s1
     606:	854e                	mv	a0,s3
     608:	3c4d                	jal	ba <array_mod>
            array_add(q, v, size_N );
     60a:	864a                	mv	a2,s2
     60c:	85d2                	mv	a1,s4
     60e:	8556                	mv	a0,s5
     610:	3449                	jal	92 <array_add>
        }
        else{
            array_mod(q, mod, size_N);
     612:	864a                	mv	a2,s2
     614:	85a6                	mv	a1,s1
     616:	8556                	mv	a0,s5
     618:	344d                	jal	ba <array_mod>
    int v[size_N];
     61a:	87ea                	mv	a5,s10
        }

        // Set d := deg r(X) (num)
        for (i = size_N-1; i >= 0; i = i-1){
     61c:	00279713          	slli	a4,a5,0x2
     620:	974e                	add	a4,a4,s3
     622:	4318                	lw	a4,0(a4)
     624:	0007d863          	bgez	a5,634 <polydiv+0x250>
     628:	4681                	li	a3,0
     62a:	a831                	j	646 <polydiv+0x262>
                q[size_N - 1] = q[size_N - 1]+mod;
     62c:	97a6                	add	a5,a5,s1
     62e:	1afaa223          	sw	a5,420(s5)
     632:	bfad                	j	5ac <polydiv+0x1c8>
            if( num_temp[i] != 0 )
     634:	fb75                	bnez	a4,628 <polydiv+0x244>
        for (i = size_N-1; i >= 0; i = i-1){
     636:	17fd                	addi	a5,a5,-1
     638:	b7d5                	j	61c <polydiv+0x238>
        d = i;
        r_d = num_temp[d];

        // make zero for next calculations
        for (i = 0; i < size_N; ++i){
            v[i] = 0;
     63a:	00269613          	slli	a2,a3,0x2
     63e:	9652                	add	a2,a2,s4
     640:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     644:	0685                	addi	a3,a3,1
     646:	ff26cae3          	blt	a3,s2,63a <polydiv+0x256>
    while (d >= d2){
     64a:	eb77dee3          	bge	a5,s7,506 <polydiv+0x122>
        }


    } //End While-1

    for(i = 0; i < size_N; ++i){
     64e:	4781                	li	a5,0
        result[i] = q[i];
     650:	00001697          	auipc	a3,0x1
     654:	0d468693          	addi	a3,a3,212 # 1724 <result>
    for(i = 0; i < size_N; ++i){
     658:	0327cf63          	blt	a5,s2,696 <polydiv+0x2b2>
    }
    for(i = size_N; i < (2*size_N); ++i){
     65c:	00191713          	slli	a4,s2,0x1
        result[i] = num_temp[i-size_N];
     660:	00001697          	auipc	a3,0x1
     664:	0c468693          	addi	a3,a3,196 # 1724 <result>
    for(i = size_N; i < (2*size_N); ++i){
     668:	04e94063          	blt	s2,a4,6a8 <polydiv+0x2c4>
    }

    return_address3 = &result[0];

    return return_address3;
}
     66c:	fb040113          	addi	sp,s0,-80
     670:	40b6                	lw	ra,76(sp)
     672:	4426                	lw	s0,72(sp)
     674:	4496                	lw	s1,68(sp)
     676:	4906                	lw	s2,64(sp)
     678:	59f2                	lw	s3,60(sp)
     67a:	5a62                	lw	s4,56(sp)
     67c:	5ad2                	lw	s5,52(sp)
     67e:	5b42                	lw	s6,48(sp)
     680:	5bb2                	lw	s7,44(sp)
     682:	5c22                	lw	s8,40(sp)
     684:	5c92                	lw	s9,36(sp)
     686:	5d02                	lw	s10,32(sp)
     688:	4df2                	lw	s11,28(sp)
     68a:	00001517          	auipc	a0,0x1
     68e:	09a50513          	addi	a0,a0,154 # 1724 <result>
     692:	6161                	addi	sp,sp,80
     694:	8082                	ret
        result[i] = q[i];
     696:	00279713          	slli	a4,a5,0x2
     69a:	00e68633          	add	a2,a3,a4
     69e:	9756                	add	a4,a4,s5
     6a0:	4318                	lw	a4,0(a4)
    for(i = 0; i < size_N; ++i){
     6a2:	0785                	addi	a5,a5,1
        result[i] = q[i];
     6a4:	c218                	sw	a4,0(a2)
    for(i = 0; i < size_N; ++i){
     6a6:	bf4d                	j	658 <polydiv+0x274>
        result[i] = num_temp[i-size_N];
     6a8:	0009a603          	lw	a2,0(s3)
     6ac:	00291793          	slli	a5,s2,0x2
     6b0:	97b6                	add	a5,a5,a3
     6b2:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     6b4:	0905                	addi	s2,s2,1
     6b6:	0991                	addi	s3,s3,4
     6b8:	bf45                	j	668 <polydiv+0x284>

000006ba <ext_euclid>:
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
   

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     6ba:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6be:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     6c0:	07bd                	addi	a5,a5,15
     6c2:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6c4:	c4a2                	sw	s0,72(sp)
     6c6:	c2a6                	sw	s1,68(sp)
     6c8:	c0ca                	sw	s2,64(sp)
     6ca:	de4e                	sw	s3,60(sp)
     6cc:	dc52                	sw	s4,56(sp)
     6ce:	da56                	sw	s5,52(sp)
     6d0:	d85a                	sw	s6,48(sp)
     6d2:	d65e                	sw	s7,44(sp)
     6d4:	d462                	sw	s8,40(sp)
     6d6:	d266                	sw	s9,36(sp)
     6d8:	ce6e                	sw	s11,28(sp)
     6da:	c686                	sw	ra,76(sp)
     6dc:	d06a                	sw	s10,32(sp)
     6de:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     6e0:	40f10133          	sub	sp,sp,a5
     6e4:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6e6:	40f10133          	sub	sp,sp,a5
     6ea:	8a8a                	mv	s5,sp
    int ri[size];
     6ec:	40f10133          	sub	sp,sp,a5
     6f0:	8c0a                	mv	s8,sp

    int ti_1[size]; // ti_1[0] = 1
     6f2:	40f10133          	sub	sp,sp,a5
     6f6:	8b0a                	mv	s6,sp
    int ti[size];
     6f8:	40f10133          	sub	sp,sp,a5
     6fc:	8c8a                	mv	s9,sp
    int qi_1[size];
     6fe:	40f10133          	sub	sp,sp,a5
     702:	8b8a                	mv	s7,sp
    int temp[size];
     704:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     708:	84b6                	mv	s1,a3
     70a:	8db2                	mv	s11,a2
    int ri_2[size]; // MX-ring poly, a
     70c:	fff60913          	addi	s2,a2,-1
    int temp[size];
     710:	8a0a                	mv	s4,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     712:	4781                	li	a5,0
     714:	4701                	li	a4,0
        ri_2[i] = polyR[i];
        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     716:	00001697          	auipc	a3,0x1
     71a:	26668693          	addi	a3,a3,614 # 197c <ti_2>
    for (i = 0; i < size; ++i) {
     71e:	0fb74163          	blt	a4,s11,800 <ext_euclid+0x146>
    }
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     722:	4785                	li	a5,1
     724:	00fb2023          	sw	a5,0(s6)
        // make mod for ri_1
	array_mod(ri_1,mod,N+1);


        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     728:	001d9793          	slli	a5,s11,0x1
     72c:	faf42e23          	sw	a5,-68(s0)
	
	array_mod(temp,mod,size);


        for (i = 0; i < N + 1; ++i) {
            ti[i] = ti_2[i] - temp[i];
     730:	00001d17          	auipc	s10,0x1
     734:	24cd0d13          	addi	s10,s10,588 # 197c <ti_2>
	array_mod(ri_2,mod,N+1);
     738:	866e                	mv	a2,s11
     73a:	85a6                	mv	a1,s1
     73c:	854e                	mv	a0,s3
     73e:	3ab5                	jal	ba <array_mod>
	array_mod(ri_1,mod,N+1);
     740:	866e                	mv	a2,s11
     742:	85a6                	mv	a1,s1
     744:	8556                	mv	a0,s5
     746:	3a95                	jal	ba <array_mod>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     748:	8726                	mv	a4,s1
     74a:	86ee                	mv	a3,s11
     74c:	8656                	mv	a2,s5
     74e:	85ee                	mv	a1,s11
     750:	854e                	mv	a0,s3
     752:	3949                	jal	3e4 <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     754:	8762                	mv	a4,s8
     756:	87ee                	mv	a5,s11
     758:	fbc42683          	lw	a3,-68(s0)
     75c:	0cd7cd63          	blt	a5,a3,836 <ext_euclid+0x17c>
     760:	4781                	li	a5,0
        for (i = 0; i < N + 1; ++i) {
     762:	4701                	li	a4,0
     764:	0ee95263          	bge	s2,a4,848 <ext_euclid+0x18e>
        array_mod(temp,mod,N+1);
     768:	866e                	mv	a2,s11
     76a:	85a6                	mv	a1,s1
     76c:	8552                	mv	a0,s4
     76e:	32b1                	jal	ba <array_mod>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     770:	8726                	mv	a4,s1
     772:	86ee                	mv	a3,s11
     774:	8656                	mv	a2,s5
     776:	85ee                	mv	a1,s11
     778:	8552                	mv	a0,s4
     77a:	31ad                	jal	3e4 <polydiv>
        for (i = 0; i < N + 1; ++i) {
     77c:	4781                	li	a5,0
     77e:	0ef95263          	bge	s2,a5,862 <ext_euclid+0x1a8>
	array_mod(qi_1,mod,size);
     782:	866e                	mv	a2,s11
     784:	85a6                	mv	a1,s1
     786:	855e                	mv	a0,s7
     788:	3a0d                	jal	ba <array_mod>
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     78a:	4781                	li	a5,0
     78c:	8726                	mv	a4,s1
     78e:	86ee                	mv	a3,s11
     790:	865a                	mv	a2,s6
     792:	85ee                	mv	a1,s11
     794:	855e                	mv	a0,s7
     796:	3289                	jal	d8 <polymult>
        for (i = 0; i < N + 1; ++i) {
     798:	4781                	li	a5,0
     79a:	0cf95d63          	bge	s2,a5,874 <ext_euclid+0x1ba>
	array_mod(temp,mod,size);
     79e:	866e                	mv	a2,s11
     7a0:	85a6                	mv	a1,s1
     7a2:	8552                	mv	a0,s4
     7a4:	3a19                	jal	ba <array_mod>
        for (i = 0; i < N + 1; ++i) {
     7a6:	4781                	li	a5,0
     7a8:	4701                	li	a4,0
     7aa:	0ce95e63          	bge	s2,a4,886 <ext_euclid+0x1cc>
        }

        array_mod(ti,mod,N+1);
     7ae:	866e                	mv	a2,s11
     7b0:	85a6                	mv	a1,s1
     7b2:	8566                	mv	a0,s9
     7b4:	3219                	jal	ba <array_mod>

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

        for (i = 0; i < N + 1; ++i) {
     7b6:	4781                	li	a5,0
        controlR = 0;
     7b8:	4701                	li	a4,0
        for (i = 0; i < N + 1; ++i) {
     7ba:	4681                	li	a3,0
     7bc:	0ed95263          	bge	s2,a3,8a0 <ext_euclid+0x1e6>
    while (controlR != 0) {
     7c0:	ff25                	bnez	a4,738 <ext_euclid+0x7e>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     7c2:	4781                	li	a5,0
            if (((ri_2[0] * j) % mod) == 1)
     7c4:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     7c6:	1097cb63          	blt	a5,s1,8dc <ext_euclid+0x222>
     7ca:	00001617          	auipc	a2,0x1
     7ce:	1b260613          	addi	a2,a2,434 # 197c <ti_2>
            if (ri_2[i] != 0)
                //	printf("** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! ***\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     7d2:	10e95f63          	bge	s2,a4,8f0 <ext_euclid+0x236>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     7d6:	fb040113          	addi	sp,s0,-80
     7da:	40b6                	lw	ra,76(sp)
     7dc:	4426                	lw	s0,72(sp)
     7de:	4496                	lw	s1,68(sp)
     7e0:	4906                	lw	s2,64(sp)
     7e2:	59f2                	lw	s3,60(sp)
     7e4:	5a62                	lw	s4,56(sp)
     7e6:	5ad2                	lw	s5,52(sp)
     7e8:	5b42                	lw	s6,48(sp)
     7ea:	5bb2                	lw	s7,44(sp)
     7ec:	5c22                	lw	s8,40(sp)
     7ee:	5c92                	lw	s9,36(sp)
     7f0:	5d02                	lw	s10,32(sp)
     7f2:	4df2                	lw	s11,28(sp)
     7f4:	00001517          	auipc	a0,0x1
     7f8:	18850513          	addi	a0,a0,392 # 197c <ti_2>
     7fc:	6161                	addi	sp,sp,80
     7fe:	8082                	ret
        ri_2[i] = polyR[i];
     800:	00f508b3          	add	a7,a0,a5
     804:	0008a883          	lw	a7,0(a7)
     808:	00f98633          	add	a2,s3,a5
    for (i = 0; i < size; ++i) {
     80c:	0705                	addi	a4,a4,1
        ri_2[i] = polyR[i];
     80e:	01162023          	sw	a7,0(a2)
        ri_1[i] = polyf[i];
     812:	00f588b3          	add	a7,a1,a5
     816:	0008a883          	lw	a7,0(a7)
     81a:	00fa8633          	add	a2,s5,a5
     81e:	01162023          	sw	a7,0(a2)
        ti_2[i] = 0;
     822:	00f68633          	add	a2,a3,a5
     826:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     82a:	00fb0633          	add	a2,s6,a5
     82e:	00062023          	sw	zero,0(a2)
    for (i = 0; i < size; ++i) {
     832:	0791                	addi	a5,a5,4
     834:	b5ed                	j	71e <ext_euclid+0x64>
            ri[i - (N + 1)] = res[i];
     836:	00279693          	slli	a3,a5,0x2
     83a:	96aa                	add	a3,a3,a0
     83c:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     83e:	0785                	addi	a5,a5,1
     840:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     842:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     846:	bf09                	j	758 <ext_euclid+0x9e>
            temp[i] = ri_2[i] - ri[i];
     848:	00f986b3          	add	a3,s3,a5
     84c:	00fc05b3          	add	a1,s8,a5
     850:	4294                	lw	a3,0(a3)
     852:	418c                	lw	a1,0(a1)
     854:	00fa0633          	add	a2,s4,a5
        for (i = 0; i < N + 1; ++i) {
     858:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     85a:	8e8d                	sub	a3,a3,a1
     85c:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     85e:	0791                	addi	a5,a5,4
     860:	b711                	j	764 <ext_euclid+0xaa>
            qi_1[i] = res1[i];
     862:	00279713          	slli	a4,a5,0x2
     866:	00e506b3          	add	a3,a0,a4
     86a:	4294                	lw	a3,0(a3)
     86c:	975e                	add	a4,a4,s7
        for (i = 0; i < N + 1; ++i) {
     86e:	0785                	addi	a5,a5,1
            qi_1[i] = res1[i];
     870:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     872:	b731                	j	77e <ext_euclid+0xc4>
            temp[i] = res2[i];
     874:	00279713          	slli	a4,a5,0x2
     878:	00e506b3          	add	a3,a0,a4
     87c:	4294                	lw	a3,0(a3)
     87e:	9752                	add	a4,a4,s4
        for (i = 0; i < N + 1; ++i) {
     880:	0785                	addi	a5,a5,1
            temp[i] = res2[i];
     882:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     884:	bf19                	j	79a <ext_euclid+0xe0>
            ti[i] = ti_2[i] - temp[i];
     886:	00fd06b3          	add	a3,s10,a5
     88a:	00fa05b3          	add	a1,s4,a5
     88e:	4294                	lw	a3,0(a3)
     890:	418c                	lw	a1,0(a1)
     892:	00fc8633          	add	a2,s9,a5
        for (i = 0; i < N + 1; ++i) {
     896:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     898:	8e8d                	sub	a3,a3,a1
     89a:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     89c:	0791                	addi	a5,a5,4
     89e:	b731                	j	7aa <ext_euclid+0xf0>
            ri_2[i] = ri_1[i];
     8a0:	00fa85b3          	add	a1,s5,a5
     8a4:	4188                	lw	a0,0(a1)
     8a6:	00f98633          	add	a2,s3,a5
        for (i = 0; i < N + 1; ++i) {
     8aa:	0685                	addi	a3,a3,1
            ri_2[i] = ri_1[i];
     8ac:	c208                	sw	a0,0(a2)
            ri_1[i] = ri[i];
     8ae:	00fc0633          	add	a2,s8,a5
     8b2:	4210                	lw	a2,0(a2)
            ti_2[i] = ti_1[i];
     8b4:	00fd0533          	add	a0,s10,a5
            ri_1[i] = ri[i];
     8b8:	c190                	sw	a2,0(a1)
            ti_2[i] = ti_1[i];
     8ba:	00fb05b3          	add	a1,s6,a5
     8be:	0005a883          	lw	a7,0(a1)
            controlR += ri[i];
     8c2:	9732                	add	a4,a4,a2
            ti_2[i] = ti_1[i];
     8c4:	01152023          	sw	a7,0(a0)
            ti_1[i] = ti[i];
     8c8:	00fc8533          	add	a0,s9,a5
     8cc:	4108                	lw	a0,0(a0)
     8ce:	c188                	sw	a0,0(a1)
            qi_1[i] = 0;
     8d0:	00fb85b3          	add	a1,s7,a5
     8d4:	0005a023          	sw	zero,0(a1)
        for (i = 0; i < N + 1; ++i) {
     8d8:	0791                	addi	a5,a5,4
     8da:	b5cd                	j	7bc <ext_euclid+0x102>
            if (((ri_2[0] * j) % mod) == 1)
     8dc:	0009a683          	lw	a3,0(s3)
     8e0:	02d786b3          	mul	a3,a5,a3
     8e4:	0296e6b3          	rem	a3,a3,s1
     8e8:	eec681e3          	beq	a3,a2,7ca <ext_euclid+0x110>
        for (j = 0; j < mod; ++j) {
     8ec:	0785                	addi	a5,a5,1
     8ee:	bde1                	j	7c6 <ext_euclid+0x10c>
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8f0:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8f2:	0705                	addi	a4,a4,1
     8f4:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8f6:	02d786b3          	mul	a3,a5,a3
     8fa:	0296e6b3          	rem	a3,a3,s1
     8fe:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     902:	bdc1                	j	7d2 <ext_euclid+0x118>

00000904 <generate_keys>:




int* generate_keys(int N, int p, int q){
     904:	7141                	addi	sp,sp,-496
     906:	1e112623          	sw	ra,492(sp)
     90a:	1e812423          	sw	s0,488(sp)
     90e:	1e912223          	sw	s1,484(sp)
     912:	1b80                	addi	s0,sp,496
     914:	1f212023          	sw	s2,480(sp)
     918:	1d312e23          	sw	s3,476(sp)
     91c:	1d412c23          	sw	s4,472(sp)
     920:	1d512a23          	sw	s5,468(sp)
     924:	1d612823          	sw	s6,464(sp)
     928:	1d712623          	sw	s7,460(sp)
     92c:	1da12023          	sw	s10,448(sp)
     930:	1d812423          	sw	s8,456(sp)
     934:	1d912223          	sw	s9,452(sp)
     938:	892a                	mv	s2,a0
     93a:	8bae                	mv	s7,a1
     93c:	8b32                	mv	s6,a2
  

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     93e:	4581                	li	a1,0
     940:	0d000613          	li	a2,208
     944:	e2440513          	addi	a0,s0,-476
     948:	2b91                	jal	e9c <memset>
     94a:	4485                	li	s1,1
     94c:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     94e:	0d800613          	li	a2,216
     952:	4581                	li	a1,0
     954:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     958:	e1342c23          	sw	s3,-488(s0)
     95c:	e0942e23          	sw	s1,-484(s0)
     960:	e2942023          	sw	s1,-480(s0)
     964:	e3342423          	sw	s3,-472(s0)
     968:	e2942823          	sw	s1,-464(s0)
     96c:	e2942e23          	sw	s1,-452(s0)
     970:	e5342023          	sw	s3,-448(s0)
     974:	e5342223          	sw	s3,-444(s0)
     978:	e4942623          	sw	s1,-436(s0)
     97c:	e5342a23          	sw	s3,-428(s0)
     980:	e4942e23          	sw	s1,-420(s0)
     984:	e6942023          	sw	s1,-416(s0)
     988:	e7342623          	sw	s3,-404(s0)
     98c:	e6942a23          	sw	s1,-396(s0)
     990:	e8942023          	sw	s1,-384(s0)
     994:	e8942223          	sw	s1,-380(s0)
     998:	e8942423          	sw	s1,-376(s0)
     99c:	e9342623          	sw	s3,-372(s0)
     9a0:	e8942a23          	sw	s1,-364(s0)
     9a4:	ea942023          	sw	s1,-352(s0)
     9a8:	ea942223          	sw	s1,-348(s0)
     9ac:	ea942423          	sw	s1,-344(s0)
     9b0:	eb342623          	sw	s3,-340(s0)
     9b4:	ea942a23          	sw	s1,-332(s0)
     9b8:	ec942023          	sw	s1,-320(s0)
     9bc:	ec942223          	sw	s1,-316(s0)
     9c0:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     9c4:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9c8:	29d1                	jal	e9c <memset>
    int polyR[N+1];
     9ca:	002a9793          	slli	a5,s5,0x2
     9ce:	07bd                	addi	a5,a5,15
     9d0:	9bc1                	andi	a5,a5,-16
     9d2:	40f10133          	sub	sp,sp,a5
     9d6:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     9d8:	00291d13          	slli	s10,s2,0x2
     9dc:	01aa07b3          	add	a5,s4,s10
     9e0:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9e2:	ef342a23          	sw	s3,-268(s0)
     9e6:	ee942e23          	sw	s1,-260(s0)
     9ea:	f0942023          	sw	s1,-256(s0)
     9ee:	f0942423          	sw	s1,-248(s0)
     9f2:	f1342a23          	sw	s3,-236(s0)
     9f6:	f1342e23          	sw	s3,-228(s0)
     9fa:	f3342023          	sw	s3,-224(s0)
     9fe:	f2942423          	sw	s1,-216(s0)
     a02:	f3342823          	sw	s3,-208(s0)
     a06:	f2942c23          	sw	s1,-200(s0)
     a0a:	f4942223          	sw	s1,-188(s0)
     a0e:	f5342423          	sw	s3,-184(s0)
     a12:	f4942823          	sw	s1,-176(s0)
     a16:	f4942e23          	sw	s1,-164(s0)
     a1a:	f7342023          	sw	s3,-160(s0)
     a1e:	f6942423          	sw	s1,-152(s0)
     a22:	f6942a23          	sw	s1,-140(s0)
     a26:	f7342c23          	sw	s3,-136(s0)
     a2a:	f8942023          	sw	s1,-128(s0)
     a2e:	f8942423          	sw	s1,-120(s0)
     a32:	f8942623          	sw	s1,-116(s0)
     a36:	f8942c23          	sw	s1,-104(s0)
     a3a:	f9342e23          	sw	s3,-100(s0)
     a3e:	fa942223          	sw	s1,-92(s0)
     a42:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
     a46:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     a4a:	4785                	li	a5,1
     a4c:	1127c263          	blt	a5,s2,b50 <generate_keys+0x24c>
     a50:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     a52:	03600693          	li	a3,54
     a56:	10f6d463          	bge	a3,a5,b5e <generate_keys+0x25a>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     a5a:	4781                	li	a5,0
        random_keys[i] = f[i];
     a5c:	00001697          	auipc	a3,0x1
     a60:	0b068693          	addi	a3,a3,176 # 1b0c <random_keys>
    for(i = 0; i < N; ++i){
     a64:	1127cb63          	blt	a5,s2,b7a <generate_keys+0x276>
     a68:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     a6c:	00191993          	slli	s3,s2,0x1
     a70:	87ca                	mv	a5,s2
     a72:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     a74:	00001617          	auipc	a2,0x1
     a78:	09860613          	addi	a2,a2,152 # 1b0c <random_keys>
    for(i = N; i < (2*N); ++i){
     a7c:	1137ca63          	blt	a5,s3,b90 <generate_keys+0x28c>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     a80:	448d                	li	s1,3
     a82:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     a86:	86de                	mv	a3,s7
     a88:	8656                	mv	a2,s5
     a8a:	e1840593          	addi	a1,s0,-488
     a8e:	8552                	mv	a0,s4
     a90:	312d                	jal	6ba <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     a92:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     a94:	00001697          	auipc	a3,0x1
     a98:	07868693          	addi	a3,a3,120 # 1b0c <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     a9c:	1097c263          	blt	a5,s1,ba0 <generate_keys+0x29c>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     aa0:	8656                	mv	a2,s5
     aa2:	86da                	mv	a3,s6
     aa4:	e1840593          	addi	a1,s0,-488
     aa8:	8552                	mv	a0,s4
     aaa:	3901                	jal	6ba <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     aac:	5751                	li	a4,-12
     aae:	02e90733          	mul	a4,s2,a4
     ab2:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
     ab4:	00001617          	auipc	a2,0x1
     ab8:	05860613          	addi	a2,a2,88 # 1b0c <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     abc:	0fa4ca63          	blt	s1,s10,bb0 <generate_keys+0x2ac>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     ac0:	4701                	li	a4,0
     ac2:	85ca                	mv	a1,s2
     ac4:	86ca                	mv	a3,s2
     ac6:	8666                	mv	a2,s9
     ac8:	fb6ff0ef          	jal	ra,27e <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     acc:	87aa                	mv	a5,a0
     ace:	4701                	li	a4,0
     ad0:	fff98593          	addi	a1,s3,-1
     ad4:	0eb74863          	blt	a4,a1,bc4 <generate_keys+0x2c0>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ad8:	86d6                	mv	a3,s5
     ada:	875a                	mv	a4,s6
     adc:	8652                	mv	a2,s4
     ade:	3219                	jal	3e4 <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     ae0:	4795                	li	a5,5
     ae2:	02f907b3          	mul	a5,s2,a5
     ae6:	098a                	slli	s3,s3,0x2
     ae8:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     aea:	00001697          	auipc	a3,0x1
     aee:	02268693          	addi	a3,a3,34 # 1b0c <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     af2:	0991                	addi	s3,s3,4
     af4:	0efc4063          	blt	s8,a5,bd4 <generate_keys+0x2d0>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     af8:	4699                	li	a3,6
     afa:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     afc:	00001617          	auipc	a2,0x1
     b00:	01060613          	addi	a2,a2,16 # 1b0c <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     b04:	02d906b3          	mul	a3,s2,a3
     b08:	02a90933          	mul	s2,s2,a0
     b0c:	0cf6dc63          	bge	a3,a5,be4 <generate_keys+0x2e0>


    return_address5 = &random_keys[0];

    return return_address5;
}
     b10:	e1040113          	addi	sp,s0,-496
     b14:	1ec12083          	lw	ra,492(sp)
     b18:	1e812403          	lw	s0,488(sp)
     b1c:	1e412483          	lw	s1,484(sp)
     b20:	1e012903          	lw	s2,480(sp)
     b24:	1dc12983          	lw	s3,476(sp)
     b28:	1d812a03          	lw	s4,472(sp)
     b2c:	1d412a83          	lw	s5,468(sp)
     b30:	1d012b03          	lw	s6,464(sp)
     b34:	1cc12b83          	lw	s7,460(sp)
     b38:	1c812c03          	lw	s8,456(sp)
     b3c:	1c412c83          	lw	s9,452(sp)
     b40:	1c012d03          	lw	s10,448(sp)
     b44:	00001517          	auipc	a0,0x1
     b48:	fc850513          	addi	a0,a0,-56 # 1b0c <random_keys>
     b4c:	617d                	addi	sp,sp,496
     b4e:	8082                	ret
        polyR[i] = 0;
     b50:	00279713          	slli	a4,a5,0x2
     b54:	9752                	add	a4,a4,s4
     b56:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     b5a:	0785                	addi	a5,a5,1
     b5c:	bdc5                	j	a4c <generate_keys+0x148>
        f[i] = 0;
     b5e:	00279713          	slli	a4,a5,0x2
     b62:	e1840613          	addi	a2,s0,-488
     b66:	963a                	add	a2,a2,a4
     b68:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     b6c:	ef440613          	addi	a2,s0,-268
     b70:	9732                	add	a4,a4,a2
     b72:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     b76:	0785                	addi	a5,a5,1
     b78:	bdf9                	j	a56 <generate_keys+0x152>
        random_keys[i] = f[i];
     b7a:	00279713          	slli	a4,a5,0x2
     b7e:	e1840593          	addi	a1,s0,-488
     b82:	00e68633          	add	a2,a3,a4
     b86:	972e                	add	a4,a4,a1
     b88:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     b8a:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     b8c:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     b8e:	bdd9                	j	a64 <generate_keys+0x160>
        random_keys[i] = g[i-N];
     b90:	430c                	lw	a1,0(a4)
     b92:	00279693          	slli	a3,a5,0x2
     b96:	96b2                	add	a3,a3,a2
     b98:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     b9a:	0785                	addi	a5,a5,1
     b9c:	0711                	addi	a4,a4,4
     b9e:	bdf9                	j	a7c <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
     ba0:	4110                	lw	a2,0(a0)
     ba2:	00279713          	slli	a4,a5,0x2
     ba6:	9736                	add	a4,a4,a3
     ba8:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     baa:	0785                	addi	a5,a5,1
     bac:	0511                	addi	a0,a0,4
     bae:	b5fd                	j	a9c <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
     bb0:	00249793          	slli	a5,s1,0x2
     bb4:	00f706b3          	add	a3,a4,a5
     bb8:	96aa                	add	a3,a3,a0
     bba:	4294                	lw	a3,0(a3)
     bbc:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     bbe:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     bc0:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     bc2:	bded                	j	abc <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
     bc4:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     bc6:	0705                	addi	a4,a4,1
     bc8:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     bca:	037686b3          	mul	a3,a3,s7
     bce:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     bd2:	b709                	j	ad4 <generate_keys+0x1d0>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bd4:	ff89a603          	lw	a2,-8(s3)
     bd8:	002c1713          	slli	a4,s8,0x2
     bdc:	9736                	add	a4,a4,a3
     bde:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     be0:	0c05                	addi	s8,s8,1
     be2:	bf01                	j	af2 <generate_keys+0x1ee>
        random_keys[i] = polyR[i-(5*N)];
     be4:	00279713          	slli	a4,a5,0x2
     be8:	00e605b3          	add	a1,a2,a4
     bec:	974a                	add	a4,a4,s2
     bee:	9752                	add	a4,a4,s4
     bf0:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     bf2:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     bf4:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     bf6:	bf19                	j	b0c <generate_keys+0x208>

00000bf8 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bf8:	7115                	addi	sp,sp,-224
     bfa:	cda2                	sw	s0,216(sp)
     bfc:	cba6                	sw	s1,212(sp)
     bfe:	842a                	mv	s0,a0
     c00:	84b2                	mv	s1,a2
     c02:	c9ca                	sw	s2,208(sp)

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c04:	0c000613          	li	a2,192
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c08:	892e                	mv	s2,a1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c0a:	850a                	mv	a0,sp
     c0c:	00000597          	auipc	a1,0x0
     c10:	4e458593          	addi	a1,a1,1252 # 10f0 <__DTOR_END__>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c14:	cf86                	sw	ra,220(sp)
     c16:	c7ce                	sw	s3,204(sp)
     c18:	c5d2                	sw	s4,200(sp)
     c1a:	89b6                	mv	s3,a3
     c1c:	8a3a                	mv	s4,a4
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1e:	2245                	jal	dbe <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     c20:	4781                	li	a5,0
     c22:	874a                	mv	a4,s2
     c24:	03000693          	li	a3,48
     c28:	85a2                	mv	a1,s0
     c2a:	860a                	mv	a2,sp
     c2c:	854e                	mv	a0,s3
     c2e:	caaff0ef          	jal	ra,d8 <polymult>

    /////// PUBLIC_KEY*RANDOM_VALUE ///////


	array_add(temp,message,48);
     c32:	85a6                	mv	a1,s1
     c34:	03000613          	li	a2,48
    temp = polymult(public_key,N,random_val,48,q,0);
     c38:	89aa                	mv	s3,a0

    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c3a:	00141493          	slli	s1,s0,0x1
	array_add(temp,message,48);
     c3e:	c54ff0ef          	jal	ra,92 <array_add>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c42:	00140693          	addi	a3,s0,1
     c46:	874a                	mv	a4,s2
     c48:	8652                	mv	a2,s4
     c4a:	85a6                	mv	a1,s1
     c4c:	854e                	mv	a0,s3
     c4e:	f96ff0ef          	jal	ra,3e4 <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     c52:	478d                	li	a5,3
     c54:	02f40433          	mul	s0,s0,a5
     c58:	87aa                	mv	a5,a0
     c5a:	0084ca63          	blt	s1,s0,c6e <ntru_encyrpt+0x76>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
     c5e:	40fe                	lw	ra,220(sp)
     c60:	446e                	lw	s0,216(sp)
     c62:	44de                	lw	s1,212(sp)
     c64:	494e                	lw	s2,208(sp)
     c66:	49be                	lw	s3,204(sp)
     c68:	4a2e                	lw	s4,200(sp)
     c6a:	612d                	addi	sp,sp,224
     c6c:	8082                	ret
        CT[i-(2*N)] = CT[i];
     c6e:	00249713          	slli	a4,s1,0x2
     c72:	972a                	add	a4,a4,a0
     c74:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     c76:	0485                	addi	s1,s1,1
     c78:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     c7a:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     c7e:	bff1                	j	c5a <ntru_encyrpt+0x62>

00000c80 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c80:	7179                	addi	sp,sp,-48
     c82:	d422                	sw	s0,40(sp)
     c84:	ce4e                	sw	s3,28(sp)
     c86:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     c88:	498d                	li	s3,3
     c8a:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c8e:	d04a                	sw	s2,32(sp)
     c90:	ca56                	sw	s5,20(sp)
     c92:	c65e                	sw	s7,12(sp)
     c94:	8932                	mv	s2,a2
     c96:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c98:	863e                	mv	a2,a5
     c9a:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c9c:	8aae                	mv	s5,a1
     c9e:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ca0:	85a2                	mv	a1,s0
     ca2:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca4:	d606                	sw	ra,44(sp)
     ca6:	d226                	sw	s1,36(sp)
     ca8:	cc52                	sw	s4,24(sp)
     caa:	c85a                	sw	s6,16(sp)
     cac:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cae:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cb2:	dccff0ef          	jal	ra,27e <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cb6:	00140b13          	addi	s6,s0,1
     cba:	874a                	mv	a4,s2
     cbc:	86da                	mv	a3,s6
     cbe:	8652                	mv	a2,s4
     cc0:	85a6                	mv	a1,s1
     cc2:	f22ff0ef          	jal	ra,3e4 <polydiv>
     cc6:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     cc8:	87aa                	mv	a5,a0
     cca:	872a                	mv	a4,a0
     ccc:	86a6                	mv	a3,s1
     cce:	0536c263          	blt	a3,s3,d12 <ntru_deceypt+0x92>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     cd2:	4589                	li	a1,2
     cd4:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     cd8:	4701                	li	a4,0
     cda:	04874563          	blt	a4,s0,d24 <ntru_deceypt+0xa4>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     cde:	4701                	li	a4,0
     ce0:	86a2                	mv	a3,s0
     ce2:	85a2                	mv	a1,s0
     ce4:	855e                	mv	a0,s7
     ce6:	d98ff0ef          	jal	ra,27e <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cea:	8756                	mv	a4,s5
     cec:	86da                	mv	a3,s6
     cee:	8652                	mv	a2,s4
     cf0:	85a6                	mv	a1,s1
     cf2:	ef2ff0ef          	jal	ra,3e4 <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf6:	87aa                	mv	a5,a0
     cf8:	0334cf63          	blt	s1,s3,d36 <ntru_deceypt+0xb6>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
     cfc:	50b2                	lw	ra,44(sp)
     cfe:	5422                	lw	s0,40(sp)
     d00:	5492                	lw	s1,36(sp)
     d02:	5902                	lw	s2,32(sp)
     d04:	49f2                	lw	s3,28(sp)
     d06:	4a62                	lw	s4,24(sp)
     d08:	4ad2                	lw	s5,20(sp)
     d0a:	4b42                	lw	s6,16(sp)
     d0c:	4bb2                	lw	s7,12(sp)
     d0e:	6145                	addi	sp,sp,48
     d10:	8082                	ret
        a2[i-(2*N)] = a2[i];
     d12:	00269593          	slli	a1,a3,0x2
     d16:	95b2                	add	a1,a1,a2
     d18:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d1a:	0685                	addi	a3,a3,1
     d1c:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     d1e:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d22:	b775                	j	cce <ntru_deceypt+0x4e>
        if(a2[i] <= q/2)
     d24:	4394                	lw	a3,0(a5)
     d26:	00d5d563          	bge	a1,a3,d30 <ntru_deceypt+0xb0>
            a2[i] = (-1)*(q-a2[i]);
     d2a:	412686b3          	sub	a3,a3,s2
     d2e:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     d30:	0705                	addi	a4,a4,1
     d32:	0791                	addi	a5,a5,4
     d34:	b75d                	j	cda <ntru_deceypt+0x5a>
        c2[i-(2*N)] = c2[i];
     d36:	00249713          	slli	a4,s1,0x2
     d3a:	972a                	add	a4,a4,a0
     d3c:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d3e:	0485                	addi	s1,s1,1
     d40:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     d42:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d46:	bf4d                	j	cf8 <ntru_deceypt+0x78>

00000d48 <default_exc_handler>:
  jal x0, default_exc_handler
     d48:	0000006f          	j	d48 <default_exc_handler>

00000d4c <reset_handler>:
  mv  x1, x0
     d4c:	00000093          	li	ra,0
  mv  x2, x1
     d50:	8106                	mv	sp,ra
  mv  x3, x1
     d52:	8186                	mv	gp,ra
  mv  x4, x1
     d54:	8206                	mv	tp,ra
  mv  x5, x1
     d56:	8286                	mv	t0,ra
  mv  x6, x1
     d58:	8306                	mv	t1,ra
  mv  x7, x1
     d5a:	8386                	mv	t2,ra
  mv  x8, x1
     d5c:	8406                	mv	s0,ra
  mv  x9, x1
     d5e:	8486                	mv	s1,ra
  mv x10, x1
     d60:	8506                	mv	a0,ra
  mv x11, x1
     d62:	8586                	mv	a1,ra
  mv x12, x1
     d64:	8606                	mv	a2,ra
  mv x13, x1
     d66:	8686                	mv	a3,ra
  mv x14, x1
     d68:	8706                	mv	a4,ra
  mv x15, x1
     d6a:	8786                	mv	a5,ra
  mv x16, x1
     d6c:	8806                	mv	a6,ra
  mv x17, x1
     d6e:	8886                	mv	a7,ra
  mv x18, x1
     d70:	8906                	mv	s2,ra
  mv x19, x1
     d72:	8986                	mv	s3,ra
  mv x20, x1
     d74:	8a06                	mv	s4,ra
  mv x21, x1
     d76:	8a86                	mv	s5,ra
  mv x22, x1
     d78:	8b06                	mv	s6,ra
  mv x23, x1
     d7a:	8b86                	mv	s7,ra
  mv x24, x1
     d7c:	8c06                	mv	s8,ra
  mv x25, x1
     d7e:	8c86                	mv	s9,ra
  mv x26, x1
     d80:	8d06                	mv	s10,ra
  mv x27, x1
     d82:	8d86                	mv	s11,ra
  mv x28, x1
     d84:	8e06                	mv	t3,ra
  mv x29, x1
     d86:	8e86                	mv	t4,ra
  mv x30, x1
     d88:	8f06                	mv	t5,ra
  mv x31, x1
     d8a:	8f86                	mv	t6,ra
  la   x2, _stack_start
     d8c:	0000f117          	auipc	sp,0xf
     d90:	27410113          	addi	sp,sp,628 # 10000 <_stack_start>

00000d94 <_start>:
  la x26, _bss_start
     d94:	00000d17          	auipc	s10,0x0
     d98:	4e0d0d13          	addi	s10,s10,1248 # 1274 <_bss_start>
  la x27, _bss_end
     d9c:	00001d97          	auipc	s11,0x1
     da0:	26cd8d93          	addi	s11,s11,620 # 2008 <_bss_end>
  bge x26, x27, zero_loop_end
     da4:	01bd5763          	bge	s10,s11,db2 <main_entry>

00000da8 <zero_loop>:
  sw x0, 0(x26)
     da8:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
     dac:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
     dae:	ffaddde3          	bge	s11,s10,da8 <zero_loop>

00000db2 <main_entry>:
  addi x10, x0, 0
     db2:	00000513          	li	a0,0
  addi x11, x0, 0
     db6:	00000593          	li	a1,0
  jal x1, main
     dba:	18a000ef          	jal	ra,f44 <main>

00000dbe <memcpy>:
     dbe:	00a5c7b3          	xor	a5,a1,a0
     dc2:	8b8d                	andi	a5,a5,3
     dc4:	00c508b3          	add	a7,a0,a2
     dc8:	e7a1                	bnez	a5,e10 <memcpy+0x52>
     dca:	478d                	li	a5,3
     dcc:	04c7f263          	bgeu	a5,a2,e10 <memcpy+0x52>
     dd0:	00357793          	andi	a5,a0,3
     dd4:	872a                	mv	a4,a0
     dd6:	eba9                	bnez	a5,e28 <memcpy+0x6a>
     dd8:	ffc8f613          	andi	a2,a7,-4
     ddc:	fe060793          	addi	a5,a2,-32
     de0:	06f76763          	bltu	a4,a5,e4e <memcpy+0x90>
     de4:	02c77363          	bgeu	a4,a2,e0a <memcpy+0x4c>
     de8:	86ae                	mv	a3,a1
     dea:	87ba                	mv	a5,a4
     dec:	0006a803          	lw	a6,0(a3)
     df0:	0791                	addi	a5,a5,4
     df2:	0691                	addi	a3,a3,4
     df4:	ff07ae23          	sw	a6,-4(a5)
     df8:	fec7eae3          	bltu	a5,a2,dec <memcpy+0x2e>
     dfc:	fff60793          	addi	a5,a2,-1
     e00:	8f99                	sub	a5,a5,a4
     e02:	9bf1                	andi	a5,a5,-4
     e04:	0791                	addi	a5,a5,4
     e06:	973e                	add	a4,a4,a5
     e08:	95be                	add	a1,a1,a5
     e0a:	01176663          	bltu	a4,a7,e16 <memcpy+0x58>
     e0e:	8082                	ret
     e10:	872a                	mv	a4,a0
     e12:	ff157ee3          	bgeu	a0,a7,e0e <memcpy+0x50>
     e16:	0005c783          	lbu	a5,0(a1)
     e1a:	0705                	addi	a4,a4,1
     e1c:	0585                	addi	a1,a1,1
     e1e:	fef70fa3          	sb	a5,-1(a4)
     e22:	ff176ae3          	bltu	a4,a7,e16 <memcpy+0x58>
     e26:	8082                	ret
     e28:	0005c683          	lbu	a3,0(a1)
     e2c:	0705                	addi	a4,a4,1
     e2e:	00377793          	andi	a5,a4,3
     e32:	fed70fa3          	sb	a3,-1(a4)
     e36:	0585                	addi	a1,a1,1
     e38:	d3c5                	beqz	a5,dd8 <memcpy+0x1a>
     e3a:	0005c683          	lbu	a3,0(a1)
     e3e:	0705                	addi	a4,a4,1
     e40:	00377793          	andi	a5,a4,3
     e44:	fed70fa3          	sb	a3,-1(a4)
     e48:	0585                	addi	a1,a1,1
     e4a:	fff9                	bnez	a5,e28 <memcpy+0x6a>
     e4c:	b771                	j	dd8 <memcpy+0x1a>
     e4e:	41d4                	lw	a3,4(a1)
     e50:	0005a283          	lw	t0,0(a1)
     e54:	0085af83          	lw	t6,8(a1)
     e58:	00c5af03          	lw	t5,12(a1)
     e5c:	0105ae83          	lw	t4,16(a1)
     e60:	0145ae03          	lw	t3,20(a1)
     e64:	0185a303          	lw	t1,24(a1)
     e68:	01c5a803          	lw	a6,28(a1)
     e6c:	c354                	sw	a3,4(a4)
     e6e:	5194                	lw	a3,32(a1)
     e70:	00572023          	sw	t0,0(a4)
     e74:	01f72423          	sw	t6,8(a4)
     e78:	01e72623          	sw	t5,12(a4)
     e7c:	01d72823          	sw	t4,16(a4)
     e80:	01c72a23          	sw	t3,20(a4)
     e84:	00672c23          	sw	t1,24(a4)
     e88:	01072e23          	sw	a6,28(a4)
     e8c:	d314                	sw	a3,32(a4)
     e8e:	02470713          	addi	a4,a4,36
     e92:	02458593          	addi	a1,a1,36
     e96:	faf76ce3          	bltu	a4,a5,e4e <memcpy+0x90>
     e9a:	b7a9                	j	de4 <memcpy+0x26>

00000e9c <memset>:
     e9c:	433d                	li	t1,15
     e9e:	872a                	mv	a4,a0
     ea0:	02c37363          	bgeu	t1,a2,ec6 <memset+0x2a>
     ea4:	00f77793          	andi	a5,a4,15
     ea8:	efbd                	bnez	a5,f26 <memset+0x8a>
     eaa:	e5ad                	bnez	a1,f14 <memset+0x78>
     eac:	ff067693          	andi	a3,a2,-16
     eb0:	8a3d                	andi	a2,a2,15
     eb2:	96ba                	add	a3,a3,a4
     eb4:	c30c                	sw	a1,0(a4)
     eb6:	c34c                	sw	a1,4(a4)
     eb8:	c70c                	sw	a1,8(a4)
     eba:	c74c                	sw	a1,12(a4)
     ebc:	0741                	addi	a4,a4,16
     ebe:	fed76be3          	bltu	a4,a3,eb4 <memset+0x18>
     ec2:	e211                	bnez	a2,ec6 <memset+0x2a>
     ec4:	8082                	ret
     ec6:	40c306b3          	sub	a3,t1,a2
     eca:	068a                	slli	a3,a3,0x2
     ecc:	00000297          	auipc	t0,0x0
     ed0:	9696                	add	a3,a3,t0
     ed2:	00a68067          	jr	10(a3)
     ed6:	00b70723          	sb	a1,14(a4)
     eda:	00b706a3          	sb	a1,13(a4)
     ede:	00b70623          	sb	a1,12(a4)
     ee2:	00b705a3          	sb	a1,11(a4)
     ee6:	00b70523          	sb	a1,10(a4)
     eea:	00b704a3          	sb	a1,9(a4)
     eee:	00b70423          	sb	a1,8(a4)
     ef2:	00b703a3          	sb	a1,7(a4)
     ef6:	00b70323          	sb	a1,6(a4)
     efa:	00b702a3          	sb	a1,5(a4)
     efe:	00b70223          	sb	a1,4(a4)
     f02:	00b701a3          	sb	a1,3(a4)
     f06:	00b70123          	sb	a1,2(a4)
     f0a:	00b700a3          	sb	a1,1(a4)
     f0e:	00b70023          	sb	a1,0(a4)
     f12:	8082                	ret
     f14:	0ff5f593          	andi	a1,a1,255
     f18:	00859693          	slli	a3,a1,0x8
     f1c:	8dd5                	or	a1,a1,a3
     f1e:	01059693          	slli	a3,a1,0x10
     f22:	8dd5                	or	a1,a1,a3
     f24:	b761                	j	eac <memset+0x10>
     f26:	00279693          	slli	a3,a5,0x2
     f2a:	00000297          	auipc	t0,0x0
     f2e:	9696                	add	a3,a3,t0
     f30:	8286                	mv	t0,ra
     f32:	fa8680e7          	jalr	-88(a3)
     f36:	8096                	mv	ra,t0
     f38:	17c1                	addi	a5,a5,-16
     f3a:	8f1d                	sub	a4,a4,a5
     f3c:	963e                	add	a2,a2,a5
     f3e:	f8c374e3          	bgeu	t1,a2,ec6 <memset+0x2a>
     f42:	b7a5                	j	eaa <memset+0xe>

00000f44 <main>:

int main(){
     f44:	bc010113          	addi	sp,sp,-1088
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f48:	0c000613          	li	a2,192
     f4c:	00000597          	auipc	a1,0x0
     f50:	26458593          	addi	a1,a1,612 # 11b0 <__DTOR_END__+0xc0>
     f54:	0068                	addi	a0,sp,12
int main(){
     f56:	42112e23          	sw	ra,1084(sp)
     f5a:	42812c23          	sw	s0,1080(sp)
     f5e:	42912a23          	sw	s1,1076(sp)
     f62:	43212823          	sw	s2,1072(sp)

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
	resultkon[0] = 0xAAAAAAA0;
     f66:	aaaab4b7          	lui	s1,0xaaaab
int main(){
     f6a:	43312623          	sw	s3,1068(sp)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f6e:	3d81                	jal	dbe <memcpy>
	resultkon[0] = 0xAAAAAAA0;
     f70:	00001417          	auipc	s0,0x1
     f74:	09440413          	addi	s0,s0,148 # 2004 <resultkon>
     f78:	aa048793          	addi	a5,s1,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
     f7c:	c01c                	sw	a5,0(s0)
 	*var = resultkon[0];
     f7e:	401c                	lw	a5,0(s0)
     f80:	6941                	lui	s2,0x10

    keys = generate_keys(N, p, q);
     f82:	06500613          	li	a2,101
 	*var = resultkon[0];
     f86:	0ff7f793          	andi	a5,a5,255
     f8a:	fef90fa3          	sb	a5,-1(s2) # ffff <_stack+0x1fff>
    keys = generate_keys(N, p, q);
     f8e:	458d                	li	a1,3
     f90:	03500513          	li	a0,53
	resultkon[0] = 0xAAAAAAA1;
     f94:	aa148493          	addi	s1,s1,-1375
    keys = generate_keys(N, p, q);
     f98:	32b5                	jal	904 <generate_keys>
	resultkon[0] = 0xAAAAAAA1;
     f9a:	c004                	sw	s1,0(s0)
 	*var = resultkon[0];
     f9c:	401c                	lw	a5,0(s0)

   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
     f9e:	0d400713          	li	a4,212
 	*var = resultkon[0];
     fa2:	0ff7f793          	andi	a5,a5,255
     fa6:	fef90fa3          	sb	a5,-1(s2)
     faa:	4781                	li	a5,0
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
     fac:	00f506b3          	add	a3,a0,a5
     fb0:	4290                	lw	a2,0(a3)
     fb2:	1314                	addi	a3,sp,416
     fb4:	96be                	add	a3,a3,a5
     fb6:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
     fb8:	0791                	addi	a5,a5,4
     fba:	fee799e3          	bne	a5,a4,fac <main+0x68>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
     fbe:	1cd8                	addi	a4,sp,628
     fc0:	1a850793          	addi	a5,a0,424
     fc4:	27c50693          	addi	a3,a0,636
     fc8:	89ba                	mv	s3,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
     fca:	4390                	lw	a2,0(a5)
     fcc:	0791                	addi	a5,a5,4
     fce:	0711                	addi	a4,a4,4
     fd0:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
     fd4:	fed79be3          	bne	a5,a3,fca <main+0x86>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
     fd8:	01f8                	addi	a4,sp,204
     fda:	35050793          	addi	a5,a0,848
     fde:	42450613          	addi	a2,a0,1060
     fe2:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
     fe4:	438c                	lw	a1,0(a5)
     fe6:	0791                	addi	a5,a5,4
     fe8:	0711                	addi	a4,a4,4
     fea:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
     fee:	fec79be3          	bne	a5,a2,fe4 <main+0xa0>
     ff2:	06b0                	addi	a2,sp,840
     ff4:	4fc50513          	addi	a0,a0,1276
     ff8:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
     ffa:	4398                	lw	a4,0(a5)
     ffc:	0791                	addi	a5,a5,4
     ffe:	0611                	addi	a2,a2,4
    1000:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
    1004:	fea79be3          	bne	a5,a0,ffa <main+0xb6>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
	resultkon[0] = 0xBBBBBBB0;
    1008:	bbbbc937          	lui	s2,0xbbbbc
    100c:	bb090793          	addi	a5,s2,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
    1010:	c01c                	sw	a5,0(s0)
 	*var = resultkon[0];
    1012:	401c                	lw	a5,0(s0)
    1014:	64c1                	lui	s1,0x10
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1016:	8742                	mv	a4,a6
 	*var = resultkon[0];
    1018:	0ff7f793          	andi	a5,a5,255
    101c:	fef48fa3          	sb	a5,-1(s1) # ffff <_stack+0x1fff>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1020:	0070                	addi	a2,sp,12
    1022:	06500593          	li	a1,101
	resultkon[0] = 0xBBBBBBB1;
    1026:	bb190913          	addi	s2,s2,-1103
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    102a:	03500513          	li	a0,53
    102e:	36e9                	jal	bf8 <ntru_encyrpt>
	resultkon[0] = 0xBBBBBBB1;
    1030:	01242023          	sw	s2,0(s0)
 	*var = resultkon[0];
    1034:	4014                	lw	a3,0(s0)
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
	resultkon[0] = 0xCCCCCCC0;
    1036:	ccccd937          	lui	s2,0xccccd
    103a:	cc090713          	addi	a4,s2,-832 # ccccccc0 <_stack_start+0xcccbccc0>
 	*var = resultkon[0];
    103e:	0ff6f693          	andi	a3,a3,255
    1042:	fed48fa3          	sb	a3,-1(s1)
	resultkon[0] = 0xCCCCCCC0;
    1046:	c018                	sw	a4,0(s0)
 	*var = resultkon[0];
    1048:	4014                	lw	a3,0(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    104a:	87aa                	mv	a5,a0
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    104c:	34810813          	addi	a6,sp,840
 	*var = resultkon[0];
    1050:	0ff6f693          	andi	a3,a3,255
    1054:	fed48fa3          	sb	a3,-1(s1)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1058:	458d                	li	a1,3
    105a:	1314                	addi	a3,sp,416
    105c:	874e                	mv	a4,s3
    105e:	06500613          	li	a2,101
    1062:	03500513          	li	a0,53
	resultkon[0] = 0xCCCCCCC1;
    1066:	cc190913          	addi	s2,s2,-831
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    106a:	3919                	jal	c80 <ntru_deceypt>
	resultkon[0] = 0xCCCCCCC1;
    106c:	01242023          	sw	s2,0(s0)
 	*var = resultkon[0];
    1070:	401c                	lw	a5,0(s0)
            resultkon[0] = 0xBABABABA;
 	    *var = resultkon[0];
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    1072:	dedee6b7          	lui	a3,0xdedee
    1076:	ede68693          	addi	a3,a3,-290 # dededede <_stack_start+0xdedddede>
 	*var = resultkon[0];
    107a:	0ff7f793          	andi	a5,a5,255
    107e:	fef48fa3          	sb	a5,-1(s1)
	    *var = resultkon[0];
    1082:	6841                	lui	a6,0x10
 	*var = resultkon[0];
    1084:	4781                	li	a5,0
    for(i = 0; i < 32; ++i){
    1086:	08000593          	li	a1,128
        if(!(message[i] == Dec_Message[i])){
    108a:	0070                	addi	a2,sp,12
    108c:	00f50733          	add	a4,a0,a5
    1090:	963e                	add	a2,a2,a5
    1092:	4210                	lw	a2,0(a2)
    1094:	4318                	lw	a4,0(a4)
    1096:	02e60b63          	beq	a2,a4,10cc <main+0x188>
            resultkon[0] = 0xBABABABA;
    109a:	babac7b7          	lui	a5,0xbabac
    109e:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    10a2:	c01c                	sw	a5,0(s0)
 	    *var = resultkon[0];
    10a4:	401c                	lw	a5,0(s0)
    10a6:	6741                	lui	a4,0x10
    10a8:	0ff7f793          	andi	a5,a5,255
    10ac:	fef70fa3          	sb	a5,-1(a4) # ffff <_stack+0x1fff>
    //printf("RESULT = %d\n",resultkon[0]);
   // printf("Time Result = %f clocks\n",cpu_time_used);


    return 0;
}
    10b0:	43c12083          	lw	ra,1084(sp)
    10b4:	43812403          	lw	s0,1080(sp)
    10b8:	43412483          	lw	s1,1076(sp)
    10bc:	43012903          	lw	s2,1072(sp)
    10c0:	42c12983          	lw	s3,1068(sp)
    10c4:	4501                	li	a0,0
    10c6:	44010113          	addi	sp,sp,1088
    10ca:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    10cc:	c014                	sw	a3,0(s0)
	    *var = resultkon[0];
    10ce:	4018                	lw	a4,0(s0)
    10d0:	0791                	addi	a5,a5,4
    10d2:	0ff77713          	andi	a4,a4,255
    10d6:	fee80fa3          	sb	a4,-1(a6) # ffff <_stack+0x1fff>
    for(i = 0; i < 32; ++i){
    10da:	fab798e3          	bne	a5,a1,108a <main+0x146>
    10de:	bfc9                	j	10b0 <main+0x16c>

000010e0 <__CTOR_LIST__>:
	...

000010e8 <__CTOR_END__>:
	...

Disassembly of section .rodata:

000010f0 <.rodata>:
    10f0:	0001                	nop
    10f2:	0000                	unimp
    10f4:	ffff                	0xffff
    10f6:	ffff                	0xffff
    10f8:	0000                	unimp
    10fa:	0000                	unimp
    10fc:	0001                	nop
    10fe:	0000                	unimp
    1100:	ffff                	0xffff
    1102:	ffff                	0xffff
    1104:	0001                	nop
    1106:	0000                	unimp
    1108:	ffff                	0xffff
    110a:	ffff                	0xffff
    110c:	0000                	unimp
    110e:	0000                	unimp
    1110:	0001                	nop
    1112:	0000                	unimp
    1114:	0001                	nop
    1116:	0000                	unimp
    1118:	0000                	unimp
    111a:	0000                	unimp
    111c:	ffff                	0xffff
    111e:	ffff                	0xffff
    1120:	0001                	nop
    1122:	0000                	unimp
    1124:	ffff                	0xffff
    1126:	ffff                	0xffff
    1128:	0001                	nop
    112a:	0000                	unimp
    112c:	0000                	unimp
    112e:	0000                	unimp
    1130:	0001                	nop
    1132:	0000                	unimp
    1134:	0001                	nop
    1136:	0000                	unimp
    1138:	0000                	unimp
    113a:	0000                	unimp
    113c:	ffff                	0xffff
    113e:	ffff                	0xffff
    1140:	0001                	nop
    1142:	0000                	unimp
    1144:	ffff                	0xffff
    1146:	ffff                	0xffff
    1148:	0001                	nop
    114a:	0000                	unimp
    114c:	0000                	unimp
    114e:	0000                	unimp
    1150:	0001                	nop
    1152:	0000                	unimp
    1154:	0001                	nop
    1156:	0000                	unimp
    1158:	0000                	unimp
    115a:	0000                	unimp
    115c:	0001                	nop
    115e:	0000                	unimp
    1160:	ffff                	0xffff
    1162:	ffff                	0xffff
    1164:	0001                	nop
    1166:	0000                	unimp
    1168:	ffff                	0xffff
    116a:	ffff                	0xffff
    116c:	0000                	unimp
    116e:	0000                	unimp
    1170:	0001                	nop
    1172:	0000                	unimp
    1174:	ffff                	0xffff
    1176:	ffff                	0xffff
    1178:	0000                	unimp
    117a:	0000                	unimp
    117c:	0001                	nop
    117e:	0000                	unimp
    1180:	ffff                	0xffff
    1182:	ffff                	0xffff
    1184:	0001                	nop
    1186:	0000                	unimp
    1188:	ffff                	0xffff
    118a:	ffff                	0xffff
    118c:	0000                	unimp
    118e:	0000                	unimp
    1190:	0001                	nop
    1192:	0000                	unimp
    1194:	0001                	nop
    1196:	0000                	unimp
    1198:	0000                	unimp
    119a:	0000                	unimp
    119c:	ffff                	0xffff
    119e:	ffff                	0xffff
    11a0:	0001                	nop
    11a2:	0000                	unimp
    11a4:	ffff                	0xffff
    11a6:	ffff                	0xffff
    11a8:	0001                	nop
    11aa:	0000                	unimp
    11ac:	0000                	unimp
    11ae:	0000                	unimp
    11b0:	0001                	nop
    11b2:	0000                	unimp
    11b4:	0001                	nop
    11b6:	0000                	unimp
    11b8:	0002                	c.slli64	zero
    11ba:	0000                	unimp
    11bc:	0001                	nop
    11be:	0000                	unimp
    11c0:	0001                	nop
    11c2:	0000                	unimp
    11c4:	0001                	nop
    11c6:	0000                	unimp
    11c8:	0001                	nop
    11ca:	0000                	unimp
    11cc:	0002                	c.slli64	zero
    11ce:	0000                	unimp
    11d0:	0001                	nop
    11d2:	0000                	unimp
    11d4:	0001                	nop
    11d6:	0000                	unimp
    11d8:	0000                	unimp
    11da:	0000                	unimp
    11dc:	0001                	nop
    11de:	0000                	unimp
    11e0:	0001                	nop
    11e2:	0000                	unimp
    11e4:	0002                	c.slli64	zero
    11e6:	0000                	unimp
    11e8:	0001                	nop
    11ea:	0000                	unimp
    11ec:	0000                	unimp
    11ee:	0000                	unimp
    11f0:	0001                	nop
    11f2:	0000                	unimp
    11f4:	0002                	c.slli64	zero
    11f6:	0000                	unimp
    11f8:	0000                	unimp
    11fa:	0000                	unimp
    11fc:	0001                	nop
    11fe:	0000                	unimp
    1200:	0001                	nop
    1202:	0000                	unimp
    1204:	0001                	nop
    1206:	0000                	unimp
    1208:	0001                	nop
    120a:	0000                	unimp
    120c:	0000                	unimp
    120e:	0000                	unimp
    1210:	0001                	nop
    1212:	0000                	unimp
    1214:	0001                	nop
    1216:	0000                	unimp
    1218:	0000                	unimp
    121a:	0000                	unimp
    121c:	0002                	c.slli64	zero
    121e:	0000                	unimp
    1220:	0001                	nop
    1222:	0000                	unimp
    1224:	0002                	c.slli64	zero
    1226:	0000                	unimp
    1228:	0001                	nop
    122a:	0000                	unimp
    122c:	0000                	unimp
    122e:	0000                	unimp
    1230:	0001                	nop
    1232:	0000                	unimp
    1234:	0001                	nop
    1236:	0000                	unimp
    1238:	0002                	c.slli64	zero
    123a:	0000                	unimp
    123c:	0001                	nop
    123e:	0000                	unimp
    1240:	0001                	nop
    1242:	0000                	unimp
    1244:	0001                	nop
    1246:	0000                	unimp
    1248:	0001                	nop
    124a:	0000                	unimp
    124c:	0002                	c.slli64	zero
    124e:	0000                	unimp
    1250:	0001                	nop
    1252:	0000                	unimp
    1254:	0001                	nop
    1256:	0000                	unimp
    1258:	0002                	c.slli64	zero
    125a:	0000                	unimp
    125c:	0001                	nop
    125e:	0000                	unimp
    1260:	0001                	nop
    1262:	0000                	unimp
    1264:	0001                	nop
    1266:	0000                	unimp
    1268:	0001                	nop
    126a:	0000                	unimp
    126c:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

00001270 <var>:
volatile uint8_t *var = (volatile uint8_t *) 0x0000c010;
    1270:	c010                	sw	a2,0(s0)
	...

Disassembly of section .bss:

00001274 <_bss_start>:
	...

000014cc <product2>:
	...

00001724 <result>:
	...

0000197c <ti_2>:
	...

00001b0c <random_keys>:
	...

00002004 <resultkon>:
volatile int resultkon[1];
    2004:	0000                	unimp
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	1c3d                	addi	s8,s8,-17
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	060a                	slli	a2,a2,0x2
       e:	0000                	unimp
      10:	440c                	lw	a1,8(s0)
      12:	98000003          	lb	zero,-1664(zero) # fffff980 <_stack_start+0xfffef980>
      16:	18000003          	lb	zero,384(zero) # 180 <polymult+0xa8>
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	0490                	addi	a2,sp,576
      2a:	0000                	unimp
      2c:	00003403          	0x3403
      30:	0200                	addi	s0,sp,256
      32:	0038182b          	0x38182b
      36:	0000                	unimp
      38:	0102                	c.slli64	sp
      3a:	8e08                	0x8e08
      3c:	0004                	0x4
      3e:	0200                	addi	s0,sp,256
      40:	0502                	c.slli64	a0
      42:	000004af          	0x4af
      46:	0202                	c.slli64	tp
      48:	0002d507          	0x2d507
      4c:	0200                	addi	s0,sp,256
      4e:	0504                	addi	s1,sp,640
      50:	00000107          	0x107
      54:	0402                	c.slli64	s0
      56:	00008407          	0x8407
      5a:	0200                	addi	s0,sp,256
      5c:	0508                	addi	a0,sp,640
      5e:	0102                	c.slli64	sp
      60:	0000                	unimp
      62:	0802                	c.slli64	a6
      64:	00007f07          	0x7f07
      68:	0400                	addi	s0,sp,512
      6a:	0504                	addi	s1,sp,640
      6c:	6e69                	lui	t3,0x1a
      6e:	0074                	addi	a3,sp,12
      70:	6905                	lui	s2,0x1
      72:	0000                	unimp
      74:	0200                	addi	s0,sp,256
      76:	0704                	addi	s1,sp,896
      78:	0089                	addi	ra,ra,2
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	1002                	c.slli	zero,0x20
      7e:	f104                	fsw	fs1,32(a0)
  jal x0, reset_handler
      80:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
  jal x0, default_exc_handler
      84:	0318                	addi	a4,sp,384
      86:	0000                	unimp
  jal x0, default_exc_handler
      88:	17015e03          	lhu	t3,368(sp)
    asm volatile(
      8c:	0075                	c.nop	29
      8e:	0000                	unimp
}
      90:	00044203          	lbu	tp,0(s0)
    for(i=0;i<(length/3);i++) {
      94:	0400                	addi	s0,sp,512
      96:	0e2e                	slli	t3,t3,0xb
      98:	004d                	c.nop	19
      9a:	0000                	unimp
      9c:	00058203          	lb	tp,0(a1)
}
      a0:	0400                	addi	s0,sp,512
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	0e74                	addi	a3,sp,796
      a4:	004d                	c.nop	19
    asm volatile(
      a6:	0000                	unimp
      a8:	0006a003          	lw	zero,0(a3)
      ac:	0400                	addi	s0,sp,512
      ae:	00691793          	slli	a5,s2,0x6
    for(i=0;i<(length/3);i++) {
      b2:	0000                	unimp
    asm volatile(
      b4:	a5040407          	0xa5040407
}
      b8:	0000d603          	lhu	a2,0(ra)
    for(i=0;i<(length/3);i++) {
      bc:	0800                	addi	s0,sp,16
      be:	0312                	slli	t1,t1,0x4
    asm volatile(
      c0:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      c2:	a704                	fsd	fs1,8(a4)
      c4:	830c                	0x830c
      c6:	0000                	unimp
}
      c8:	0800                	addi	s0,sp,16
    asm volatile(
      ca:	0239                	addi	tp,tp,14
      cc:	0000                	unimp
      ce:	a804                	fsd	fs1,16(s0)
      d0:	0000d613          	srli	a2,ra,0x0
    for(i=0;i<(length/3);i++) {
      d4:	0000                	unimp
      d6:	3809                	jal	fffff8e8 <_stack_start+0xfffef8e8>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d8:	0000                	unimp
      da:	e600                	fsw	fs0,8(a2)
      dc:	0000                	unimp
      de:	0a00                	addi	s0,sp,272
      e0:	0075                	c.nop	29
      e2:	0000                	unimp
    int line[size_b][size_a + size_b];
      e4:	080b0003          	lb	zero,128(s6)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      e8:	a204                	fsd	fs1,0(a2)
      ea:	0a09                	addi	s4,s4,2
    int line[size_b][size_a + size_b];
      ec:	0001                	nop
      ee:	0c00                	addi	s0,sp,528
      f0:	056c                	addi	a1,sp,652
      f2:	0000                	unimp
      f4:	a404                	fsd	fs1,8(s0)
      f6:	00006907          	0x6907
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      fa:	0000                	unimp
      fc:	740c                	flw	fa1,40(s0)
      fe:	0005                	c.nop	1
     100:	0400                	addi	s0,sp,512
     102:	05a9                	addi	a1,a1,10
     104:	00b4                	addi	a3,sp,72
     106:	0000                	unimp
     108:	0004                	0x4
     10a:	0004df03          	lhu	t5,0(s1)
     10e:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     110:	03aa                	slli	t2,t2,0xa
    int pola[size_a];
     112:	00e6                	slli	ra,ra,0x19
     114:	0000                	unimp
    int line[size_b][size_a + size_b];
     116:	040d                	addi	s0,s0,3
    int pola[size_a];
     118:	0005dd03          	lhu	s10,0(a1)
    int line[size_b][size_a + size_b];
     11c:	0500                	addi	s0,sp,640
    int pola[size_a];
     11e:	1916                	slli	s2,s2,0x25
    int polb[size_b];
     120:	0054                	addi	a3,sp,4
     122:	0000                	unimp
    int line[size_b][size_a + size_b];
     124:	00047203          	0x47203
    int pola[size_a];
     128:	0600                	addi	s0,sp,768
     12a:	0d0c                	addi	a1,sp,656
     12c:	0069                	c.nop	26
    int polb[size_b];
     12e:	0000                	unimp
     130:	0001f103          	0x1f103
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     134:	0500                	addi	s0,sp,640
    int line[size_b][size_a + size_b];
     136:	01241b23          	sh	s2,22(s0)
    int pola[size_a];
     13a:	0000                	unimp
     13c:	020e                	slli	tp,tp,0x3
    int polb[size_b];
     13e:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     140:	1800                	addi	s0,sp,48
     142:	3405                	jal	fffffb62 <_stack_start+0xfffefb62>
     144:	9608                	0x9608
            product[j] = 0;
     146:	0001                	nop
     148:	0c00                	addi	s0,sp,528
     14a:	0500                	addi	s0,sp,640
     14c:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     14e:	3605                	jal	fffffc6e <_stack_start+0xfffefc6e>
     150:	00019613          	slli	a2,gp,0x0
    for (i = 0; i < size_a; ++i){
     154:	0000                	unimp
     156:	006b5f0f          	0x6b5f0f
	array_mod(pola,mod,size_a);
     15a:	3705                	jal	7a <__DYNAMIC+0x7a>
     15c:	00006907          	0x6907
     160:	0400                	addi	s0,sp,512
     162:	480c                	lw	a1,16(s0)
    for (i = 0; i < size_b; ++i){
     164:	0005                	c.nop	1
     166:	0500                	addi	s0,sp,640
     168:	00690b37          	lui	s6,0x690
     16c:	0000                	unimp
	array_mod(polb,mod,size_b);
     16e:	0c08                	addi	a0,sp,528
     170:	000001eb          	0x1eb
     174:	3705                	jal	94 <array_add+0x2>
    if(star_mult == 1){
     176:	6914                	flw	fa3,16(a0)
     178:	0000                	unimp
     17a:	0c00                	addi	s0,sp,528
     17c:	7e0c                	flw	fa1,56(a2)
     17e:	0006                	c.slli	zero,0x1
     180:	0500                	addi	s0,sp,640
     182:	00691b37          	lui	s6,0x691
     186:	0000                	unimp
     188:	0f10                	addi	a2,sp,912
        for (j = size_b -1; j >= 0; j = j-1){
     18a:	785f 0500 0b38      	0xb380500785f
            for (k = size_a-1; k >= 0; k = k-1 ){
     190:	019c                	addi	a5,sp,192
            product[j] = 0;
     192:	0000                	unimp
     194:	0014                	0x14
     196:	0410                	addi	a2,sp,512
            line[i][j] = 0;
     198:	013c                	addi	a5,sp,136
     19a:	0000                	unimp
            product[j] = 0;
     19c:	1809                	addi	a6,a6,-30
     19e:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     1a0:	ac00                	fsd	fs0,24(s0)
     1a2:	0001                	nop
     1a4:	0a00                	addi	s0,sp,272
     1a6:	0075                	c.nop	29
    for (i = 0; i < size_b; ++i){
     1a8:	0000                	unimp
     1aa:	0000                	unimp
     1ac:	290e                	fld	fs2,192(sp)
     1ae:	0002                	c.slli64	zero
        for(j = 0; j < size_a + size_b -1; ++j){
     1b0:	2400                	fld	fs0,8(s0)
     1b2:	3c05                	jal	fffffbe2 <_stack_start+0xfffefbe2>
        pola[i] = a[i];
     1b4:	2f08                	fld	fa0,24(a4)
     1b6:	0002                	c.slli64	zero
     1b8:	0c00                	addi	s0,sp,528
     1ba:	00f9                	addi	ra,ra,30
     1bc:	0000                	unimp
     1be:	3e05                	jal	fffffcee <_stack_start+0xfffefcee>
    for (i = 0; i < size_a; ++i){
     1c0:	6909                	lui	s2,0x2
        pola[i] = a[i];
     1c2:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     1c4:	0000                	unimp
        polb[i] = b[i];
     1c6:	910c                	0x910c
     1c8:	0005                	c.nop	1
     1ca:	0500                	addi	s0,sp,640
     1cc:	0069093f 0c040000 	0xc0400000069093f
     1d4:	0136                	slli	sp,sp,0xd
    for (i = 0; i < size_b; ++i){
     1d6:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     1d8:	4005                	c.li	zero,1
     1da:	6909                	lui	s2,0x2
     1dc:	0000                	unimp
     1de:	0800                	addi	s0,sp,16
     1e0:	1c0c                	addi	a1,sp,560
     1e2:	05000007          	0x5000007
     1e6:	0941                	addi	s2,s2,16
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e8:	0069                	c.nop	26
                line[size_b-1-j][k] = pola[k]*polb[j];
     1ea:	0000                	unimp
     1ec:	0c0c                	addi	a1,sp,528
     1ee:	040c                	addi	a1,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f0:	0000                	unimp
     1f2:	4205                	li	tp,1
        for (j = size_b -1; j >= 0; j = j-1){
     1f4:	6909                	lui	s2,0x2
     1f6:	0000                	unimp
     1f8:	1000                	addi	s0,sp,32
     1fa:	750c                	flw	fa1,40(a0)
     1fc:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
	array_add(product, line[i], (size_a + size_b - 1));
     200:	00690943          	fmadd.s	fs2,fs2,ft6,ft0,rne
     204:	0000                	unimp
     206:	0c14                	addi	a3,sp,528
        array_mod(line[i],mod,(size_a+size_b-1));
     208:	00000683          	lb	a3,0(zero) # 0 <__DYNAMIC>
    for (i = 0; i < size_b; ++i){
     20c:	4405                	li	s0,1
     20e:	6909                	lui	s2,0x2
    array_mod(product,mod,size_a+size_b-1);
     210:	0000                	unimp
     212:	1800                	addi	s0,sp,48
     214:	b90c                	fsd	fa1,48(a0)
     216:	0004                	0x4
     218:	0500                	addi	s0,sp,640
}
     21a:	0945                	addi	s2,s2,17
     21c:	0069                	c.nop	26
     21e:	0000                	unimp
     220:	0c1c                	addi	a5,sp,528
     222:	06de                	slli	a3,a3,0x17
     224:	0000                	unimp
     226:	4605                	li	a2,1
     228:	6909                	lui	s2,0x2
     22a:	0000                	unimp
     22c:	2000                	fld	fs0,0(s0)
     22e:	1100                	addi	s0,sp,160
     230:	0145                	addi	sp,sp,17
     232:	0000                	unimp
     234:	0108                	addi	a0,sp,128
     236:	4f05                	li	t5,1
     238:	7408                	flw	fa0,40(s0)
     23a:	0002                	c.slli64	zero
     23c:	0c00                	addi	s0,sp,528
     23e:	01d1                	addi	gp,gp,20
     240:	0000                	unimp
     242:	5005                	c.li	zero,-31
            for (k = size_a-1; k >= 0; k = k-1 ){
     244:	740a                	flw	fs0,160(sp)
     246:	0002                	c.slli64	zero
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     248:	0000                	unimp
     24a:	000c                	0xc
     24c:	0000                	unimp
     24e:	0500                	addi	s0,sp,640
     250:	0951                	addi	s2,s2,20
     252:	0274                	addi	a3,sp,268
     254:	0000                	unimp
     256:	1280                	addi	s0,sp,352
            for (k = size_a-1; k >= 0; k = k-1 ){
     258:	05c6                	slli	a1,a1,0x11
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     25a:	0000                	unimp
     25c:	5305                	li	t1,-31
     25e:	180a                	slli	a6,a6,0x22
            for (k = size_a-1; k >= 0; k = k-1 ){
     260:	0001                	nop
     262:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     264:	1201                	addi	tp,tp,-32
     266:	0174                	addi	a3,sp,140
     268:	0000                	unimp
     26a:	5605                	li	a2,-31
        array_mod(line[i],mod,(size_a+size_b-1));
     26c:	180a                	slli	a6,a6,0x22
     26e:	0001                	nop
	array_add(product, line[i], (size_a + size_b - 1));
     270:	0400                	addi	s0,sp,512
     272:	0001                	nop
     274:	1609                	addi	a2,a2,-30
     276:	0001                	nop
    for (i = 0; i < size_b; ++i){
     278:	8400                	0x8400
     27a:	0002                	c.slli64	zero
     27c:	0a00                	addi	s0,sp,272
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     27e:	0075                	c.nop	29
     280:	0000                	unimp
     282:	001f 2511 0004      	0x42511001f
    int line[size_b][size_a + size_b];
     288:	9000                	0x9000
     28a:	0501                	addi	a0,a0,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     28c:	0862                	slli	a6,a6,0x18
     28e:	000002c7          	fmsub.s	ft5,ft0,ft0,ft0,rne
    int line[size_b][size_a + size_b];
     292:	000c                	0xc
     294:	0005                	c.nop	1
     296:	0500                	addi	s0,sp,640
     298:	02c71263          	bne	a4,a2,2bc <polymult2+0x3e>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     29c:	0000                	unimp
     29e:	0c00                	addi	s0,sp,528
     2a0:	0518                	addi	a4,sp,640
     2a2:	0000                	unimp
     2a4:	6405                	lui	s0,0x1
     2a6:	6906                	flw	fs2,64(sp)
     2a8:	0000                	unimp
    int pola[size_a];
     2aa:	0400                	addi	s0,sp,512
     2ac:	e60c                	fsw	fa1,8(a2)
    int line[size_b][size_a + size_b];
     2ae:	0001                	nop
     2b0:	0500                	addi	s0,sp,640
     2b2:	0966                	slli	s2,s2,0x19
     2b4:	02cd                	addi	t0,t0,19
    int pola[size_a];
     2b6:	0000                	unimp
     2b8:	0c08                	addi	a0,sp,528
     2ba:	0145                	addi	sp,sp,17
     2bc:	0000                	unimp
    int line[size_b][size_a + size_b];
     2be:	6705                	lui	a4,0x1
    int pola[size_a];
     2c0:	2f1e                	fld	ft10,448(sp)
     2c2:	0002                	c.slli64	zero
    int polb[size_b];
     2c4:	8800                	0x8800
     2c6:	1000                	addi	s0,sp,32
     2c8:	8404                	0x8404
    int pola[size_a];
     2ca:	0002                	c.slli64	zero
    int polb[size_b];
     2cc:	0900                	addi	s0,sp,144
     2ce:	02dd                	addi	t0,t0,23
    int line[size_b][size_a + size_b];
     2d0:	0000                	unimp
    int polb[size_b];
     2d2:	02dd                	addi	t0,t0,23
    for (i = 0; i < size_b; ++i){
     2d4:	0000                	unimp
     2d6:	750a                	flw	fa0,160(sp)
     2d8:	0000                	unimp
            product2[j] = 0;
     2da:	1f00                	addi	s0,sp,944
     2dc:	1000                	addi	s0,sp,32
     2de:	e304                	fsw	fs1,0(a4)
     2e0:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     2e2:	1300                	addi	s0,sp,416
     2e4:	c30e                	sw	gp,132(sp)
    for(i = 0; i < size_a; ++i){
     2e6:	0004                	0x4
     2e8:	0800                	addi	s0,sp,16
     2ea:	7a05                	lui	s4,0xfffe1
    for(i = 0; i < size_b; ++i){
     2ec:	0c08                	addi	a0,sp,528
     2ee:	0c000003          	lb	zero,192(zero) # c0 <array_mod+0x6>
    if(star_mult == 1){
     2f2:	0130                	addi	a2,sp,136
     2f4:	0000                	unimp
     2f6:	7b05                	lui	s6,0xfffe1
     2f8:	0c11                	addi	s8,s8,4
     2fa:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
     2fe:	110c                	addi	a1,sp,160
     300:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     302:	0500                	addi	s0,sp,640
     304:	067c                	addi	a5,sp,780
            for (k = size_a-1; k >= 0; k = k-1 ){
     306:	0069                	c.nop	26
     308:	0000                	unimp
            product2[j] = 0;
     30a:	0004                	0x4
     30c:	0410                	addi	a2,sp,512
     30e:	0038                	addi	a4,sp,8
            line[i][j] = 0;
     310:	0000                	unimp
     312:	ea0e                	fsw	ft3,20(sp)
            product2[j] = 0;
     314:	0004                	0x4
     316:	6800                	flw	fs0,16(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     318:	ba05                	j	fffffc48 <_stack_start+0xfffefc48>
     31a:	5508                	lw	a0,40(a0)
     31c:	0004                	0x4
     31e:	0f00                	addi	s0,sp,912
    for (i = 0; i < size_b; ++i){
     320:	705f 0500 12bb      	0x12bb0500705f
     326:	030c                	addi	a1,sp,384
        for(j = 0; j < size_a + size_b -1; ++j){
     328:	0000                	unimp
     32a:	0f00                	addi	s0,sp,912
        pola[i] = a[i];
     32c:	725f 0500 07bc      	0x7bc0500725f
     332:	0069                	c.nop	26
     334:	0000                	unimp
     336:	0f04                	addi	s1,sp,912
     338:	775f 0500 07bd      	0x7bd0500775f
     33e:	0069                	c.nop	26
    for(i = 0; i < size_a; ++i){
     340:	0000                	unimp
        polb[i] = b[i];
     342:	0c08                	addi	a0,sp,528
     344:	016d                	addi	sp,sp,27
     346:	0000                	unimp
     348:	be05                	j	fffffe78 <_stack_start+0xfffefe78>
     34a:	3f09                	jal	25c <polymult+0x184>
     34c:	0000                	unimp
     34e:	0c00                	addi	s0,sp,528
    for(i = 0; i < size_b; ++i){
     350:	680c                	flw	fa1,16(s0)
        polb[i] = b[i];
     352:	0002                	c.slli64	zero
     354:	0500                	addi	s0,sp,640
    for(i = 0; i < size_b; ++i){
     356:	003f09bf 0f0e0000 	0xf0e0000003f09bf
                line[size_b-1-j][k] = pola[k]*polb[j];
     35e:	625f 0066 c005      	0xc0050066625f
     364:	e411                	bnez	s0,370 <polymult2+0xf2>
     366:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     368:	1000                	addi	s0,sp,32
                line[size_b-1-j][k] = pola[k]*polb[j];
     36a:	a20c                	fsd	fa1,0(a2)
     36c:	0000                	unimp
     36e:	0500                	addi	s0,sp,640
            for (k = size_a-1; k >= 0; k = k-1 ){
     370:	07c1                	addi	a5,a5,16
     372:	0069                	c.nop	26
        for (j = size_b -1; j >= 0; j = j-1){
     374:	0000                	unimp
     376:	0c18                	addi	a4,sp,528
     378:	00000153          	fadd.s	ft2,ft0,ft0,rne
     37c:	c805                	beqz	s0,3ac <polymult2+0x12e>
            for (k = size_a-1; k >= 0; k = k-1 ){
     37e:	160a                	slli	a2,a2,0x22
         array_add(product2,line[i],size_a+size_b-1);
     380:	0001                	nop
     382:	1c00                	addi	s0,sp,560
     384:	190c                	addi	a1,sp,176
     386:	0002                	c.slli64	zero
        for(i = 0; i < size_b; ++i){
     388:	0500                	addi	s0,sp,640
     38a:	1dca                	slli	s11,s11,0x32
}
     38c:	05d9                	addi	a1,a1,22
     38e:	0000                	unimp
     390:	0c20                	addi	s0,sp,536
     392:	036e                	slli	t1,t1,0x1b
     394:	0000                	unimp
     396:	cc05                	beqz	s0,3ce <polymult2+0x150>
     398:	031d                	addi	t1,t1,7
     39a:	0006                	c.slli	zero,0x1
     39c:	2400                	fld	fs0,8(s0)
     39e:	7c0c                	flw	fa1,56(s0)
     3a0:	0005                	c.nop	1
     3a2:	0500                	addi	s0,sp,640
     3a4:	06270dcf          	fnmadd.q	fs11,fa4,ft2,ft0,rne
     3a8:	0000                	unimp
     3aa:	0c28                	addi	a0,sp,536
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ac:	06f8                	addi	a4,sp,844
     3ae:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3b0:	d005                	beqz	s0,2d0 <polymult2+0x52>
     3b2:	4109                	li	sp,2
     3b4:	0006                	c.slli	zero,0x1
     3b6:	2c00                	fld	fs0,24(s0)
     3b8:	62755f0f          	0x62755f0f
     3bc:	0500                	addi	s0,sp,640
     3be:	02e411d3          	fadd.d	ft3,fs0,fa4,rtz
     3c2:	0000                	unimp
     3c4:	0f30                	addi	a2,sp,920
     3c6:	755f 0070 d405      	0xd4050070755f
            for (k = size_a-1; k >= 0; k = k-1 ){
     3cc:	0c12                	slli	s8,s8,0x4
        for (j = size_b -1; j >= 0; j = j-1){
     3ce:	38000003          	lb	zero,896(zero) # 380 <polymult2+0x102>
     3d2:	72755f0f          	0x72755f0f
         array_add(product2,line[i],size_a+size_b-1);
     3d6:	0500                	addi	s0,sp,640
     3d8:	07d5                	addi	a5,a5,21
     3da:	0069                	c.nop	26
     3dc:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     3de:	0c3c                	addi	a5,sp,536
     3e0:	012a                	slli	sp,sp,0xa
     3e2:	0000                	unimp
    int v[size_N];
     3e4:	d805                	beqz	s0,314 <polymult2+0x96>
     3e6:	4711                	li	a4,4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3e8:	0006                	c.slli	zero,0x1
    int v[size_N];
     3ea:	4000                	lw	s0,0(s0)
     3ec:	c30c                	sw	a1,0(a4)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3ee:	0006                	c.slli	zero,0x1
     3f0:	0500                	addi	s0,sp,640
     3f2:	11d9                	addi	gp,gp,-10
     3f4:	00000657          	0x657
     3f8:	6c5f0f43          	0x6c5f0f43
     3fc:	0062                	c.slli	zero,0x18
     3fe:	dc05                	beqz	s0,336 <polymult2+0xb8>
     400:	e411                	bnez	s0,40c <polydiv+0x28>
     402:	0002                	c.slli64	zero
     404:	4400                	lw	s0,8(s0)
     406:	830c                	0x830c
     408:	0001                	nop
    int v[size_N];
     40a:	0500                	addi	s0,sp,640
     40c:	07df 0069 0000      	0x6907df
    int q[size_N];
     412:	0c4c                	addi	a1,sp,532
     414:	01aa                	slli	gp,gp,0xa
    int num_temp[size_N];
     416:	0000                	unimp
     418:	e005                	bnez	s0,438 <polydiv+0x54>
    int denum_temp[size_D];
     41a:	900a                	c.add	zero,sp
     41c:	0000                	unimp
     41e:	5000                	lw	s0,32(s0)
     420:	3e0c                	fld	fa1,56(a2)
    int num_temp[size_N];
     422:	0000                	unimp
    int denum_temp[size_D];
     424:	0500                	addi	s0,sp,640
     426:	047312e3          	bne	t1,t2,c6a <ntru_encyrpt+0x72>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     42a:	0000                	unimp
     42c:	0c54                	addi	a3,sp,532
     42e:	033e                	slli	t1,t1,0xf
    int v[size_N];
     430:	0000                	unimp
     432:	e705                	bnez	a4,45a <polydiv+0x76>
    int denum_temp[size_D];
     434:	300c                	fld	fa1,32(s0)
     436:	0001                	nop
     438:	5800                	lw	s0,48(s0)
    for (i = 0; i < size_N; ++i){
     43a:	f20c                	fsw	fa1,32(a2)
     43c:	0004                	0x4
     43e:	0500                	addi	s0,sp,640
    if(size_N == 106) {
     440:	0ee9                	addi	t4,t4,26
     442:	010a                	slli	sp,sp,0x2
     444:	0000                	unimp
     446:	0c5c                	addi	a5,sp,532
        array_mod(num_temp, mod, size_N - 1);
     448:	04ca                	slli	s1,s1,0x12
     44a:	0000                	unimp
     44c:	ea05                	bnez	a2,47c <polydiv+0x98>
     44e:	6909                	lui	s2,0x2
     450:	0000                	unimp
        while(num_temp[size_N - 1] < 0){
     452:	6400                	flw	fs0,8(s0)
     454:	1400                	addi	s0,sp,544
     456:	00a8                	addi	a0,sp,72
     458:	0000                	unimp
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     45a:	00000473          	0x473
     45e:	7315                	lui	t1,0xfffe5
     460:	0004                	0x4
    for (i = 0; i < size_N; ++i){
     462:	1500                	addi	s0,sp,672
    for (i = 0; i < size_D; ++i) {
     464:	0116                	slli	sp,sp,0x5
     466:	0000                	unimp
	array_mod(denum_temp,mod,size_D);
     468:	c715                	beqz	a4,494 <polydiv+0xb0>
     46a:	0005                	c.nop	1
     46c:	1500                	addi	s0,sp,672
     46e:	0069                	c.nop	26
    for (i = 0; i < size_N; ++i){
     470:	0000                	unimp
     472:	1000                	addi	s0,sp,32
     474:	7e04                	flw	fs1,56(a2)
    for (i = size_D-1; i >= 0; i = i-1){
     476:	0004                	0x4
     478:	1600                	addi	s0,sp,800
     47a:	00000473          	0x473
     47e:	00055017          	auipc	zero,0x55
    for (i = 0; i < size_N; ++i){
     482:	2800                	fld	fs0,16(s0)
     484:	0504                	addi	s1,sp,640
        if ( (b_N*u)%mod == 1 )
     486:	0265                	addi	tp,tp,25
    for (u = 0; u < mod; ++u){
     488:	c708                	sw	a0,8(a4)
     48a:	0005                	c.nop	1
     48c:	1800                	addi	s0,sp,48
     48e:	04a8                	addi	a0,sp,584
        num_temp[i] = num[i];
     490:	0000                	unimp
     492:	6705                	lui	a4,0x1
     494:	0702                	c.slli64	a4
     496:	0069                	c.nop	26
     498:	0000                	unimp
     49a:	1800                	addi	s0,sp,48
    for (i = 0; i < size_N; ++i){
     49c:	017c                	addi	a5,sp,140
        num_temp[i] = num[i];
     49e:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     4a0:	6c05                	lui	s8,0x1
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4a2:	0b02                	c.slli64	s6
     4a4:	000006b3          	add	a3,zero,zero
     4a8:	1804                	addi	s1,sp,48
        array_mod(num_temp, mod, size_N);
     4aa:	024a                	slli	tp,tp,0x12
     4ac:	0000                	unimp
     4ae:	6c05                	lui	s8,0x1
     4b0:	1402                	slli	s0,s0,0x20
     4b2:	000006b3          	add	a3,zero,zero
        denum_temp[i] = denum[i];
     4b6:	1808                	addi	a0,sp,48
     4b8:	01fa                	slli	gp,gp,0x1e
     4ba:	0000                	unimp
     4bc:	6c05                	lui	s8,0x1
     4be:	1e02                	slli	t3,t3,0x20
    for (i = 0; i < size_D; ++i) {
     4c0:	000006b3          	add	a3,zero,zero
     4c4:	180c                	addi	a1,sp,48
        q[i] = 0;
     4c6:	00000513          	li	a0,0
     4ca:	6e05                	lui	t3,0x1
     4cc:	0802                	c.slli64	a6
        v[i] = 0;
     4ce:	0069                	c.nop	26
        q[i] = 0;
     4d0:	0000                	unimp
     4d2:	1810                	addi	a2,sp,48
        v[i] = 0;
     4d4:	001f 0000 6f05      	0x6f050000001f
    for (i = 0; i < size_N; ++i){
     4da:	0802                	c.slli64	a6
        if( denum_temp[i] != 0 )
     4dc:	000008b3          	add	a7,zero,zero
    for (i = size_D-1; i >= 0; i = i-1){
     4e0:	1814                	addi	a3,sp,48
        if ( (b_N*u)%mod == 1 )
     4e2:	0000052f          	0x52f
     4e6:	7205                	lui	tp,0xfffe1
     4e8:	0702                	c.slli64	a4
     4ea:	0069                	c.nop	26
    for (u = 0; u < mod; ++u){
     4ec:	0000                	unimp
     4ee:	1830                	addi	a2,sp,56
        if( num_temp[i] != 0 )
     4f0:	051d                	addi	a0,a0,7
    for (i = size_N-1; i >= 0; i = i-1){
     4f2:	0000                	unimp
     4f4:	7305                	lui	t1,0xfffe1
     4f6:	1602                	slli	a2,a2,0x20
     4f8:	08c8                	addi	a0,sp,84
     4fa:	0000                	unimp
     4fc:	1834                	addi	a3,sp,56
     4fe:	00000437          	lui	s0,0x0
         if(size_N == 106) {
     502:	7505                	lui	a0,0xfffe1
     504:	0702                	c.slli64	a4
        v[(d-d2)] = u*r_d;
     506:	0069                	c.nop	26
     508:	0000                	unimp
     50a:	1838                	addi	a4,sp,56
     50c:	0525                	addi	a0,a0,9
     50e:	0000                	unimp
     510:	7705                	lui	a4,0xfffe1
     512:	0a02                	c.slli64	s4
         if(size_N == 106) {
     514:	08d9                	addi	a7,a7,22
     516:	0000                	unimp
            array_mod(v, mod, size_N - 1);
     518:	183c                	addi	a5,sp,56
     51a:	030a                	slli	t1,t1,0x2
     51c:	0000                	unimp
     51e:	7a05                	lui	s4,0xfffe1
     520:	1302                	slli	t1,t1,0x20
            while(v[size_N - 1] < 0){
     522:	0196                	slli	gp,gp,0x5
     524:	0000                	unimp
     526:	1840                	addi	s0,sp,52
     528:	021f 0000 7b05      	0x7b050000021f
            v[size_N - 1] = v[size_N - 1] % mod;
     52e:	0702                	c.slli64	a4
     530:	0069                	c.nop	26
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     532:	0000                	unimp
     534:	1844                	addi	s1,sp,52
     536:	0712                	slli	a4,a4,0x4
     538:	0000                	unimp
     53a:	7c05                	lui	s8,0xfffe1
     53c:	1302                	slli	t1,t1,0x20
     53e:	0196                	slli	gp,gp,0x5
        if(size_N == 106) {
     540:	0000                	unimp
     542:	1848                	addi	a0,sp,52
     544:	045e                	slli	s0,s0,0x17
     546:	0000                	unimp
            array_mod(product, mod, size_N - 1);
     548:	7d05                	lui	s10,0xfffe1
     54a:	1402                	slli	s0,s0,0x20
     54c:	08df 0000 184c      	0x184c000008df
            while(product[size_N - 1] < 0){
     552:	0252                	slli	tp,tp,0x14
     554:	0000                	unimp
     556:	8005                	srli	s0,s0,0x1
     558:	0702                	c.slli64	a4
     55a:	0069                	c.nop	26
            product[size_N - 1] = product[size_N - 1] % mod;
     55c:	0000                	unimp
     55e:	1850                	addi	a2,sp,52
     560:	01a2                	slli	gp,gp,0x8
     562:	0000                	unimp
     564:	8105                	srli	a0,a0,0x1
     566:	0902                	c.slli64	s2
        for (i = 0; i < size_N; ++i){
     568:	000005c7          	fmsub.s	fa1,ft0,ft0,ft0,rne
 	if(size_N == 106) {
     56c:	1854                	addi	a3,sp,52
     56e:	04a1                	addi	s1,s1,8
            array_mod(num_temp, mod, size_N - 1);
     570:	0000                	unimp
     572:	a405                	j	792 <ext_euclid+0xd8>
     574:	0702                	c.slli64	a4
     576:	088e                	slli	a7,a7,0x3
     578:	0000                	unimp
            while(num_temp[size_N - 1] < 0){
     57a:	1958                	addi	a4,sp,180
     57c:	0425                	addi	s0,s0,9
     57e:	0000                	unimp
     580:	a805                	j	5b0 <polydiv+0x1cc>
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     582:	1302                	slli	t1,t1,0x20
     584:	000002c7          	fmsub.s	ft5,ft0,ft0,ft0,rne
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     588:	0148                	addi	a0,sp,132
     58a:	e819                	bnez	s0,5a0 <polydiv+0x1bc>
     58c:	0002                	c.slli64	zero
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     58e:	0500                	addi	s0,sp,640
     590:	02a9                	addi	t0,t0,10
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     592:	8412                	mv	s0,tp
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     594:	0002                	c.slli64	zero
     596:	4c00                	lw	s0,24(s0)
     598:	1901                	addi	s2,s2,-32
     59a:	06b9                	addi	a3,a3,14
            array_mod(q, mod, size_N - 1);
     59c:	0000                	unimp
     59e:	ad05                	j	bce <generate_keys+0x2ca>
     5a0:	0c02                	c.slli64	s8
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     5a2:	08f0                	addi	a2,sp,92
            array_mod(q, mod, size_N - 1);
     5a4:	0000                	unimp
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     5a6:	02dc                	addi	a5,sp,324
     5a8:	5b19                	li	s6,-26
            array_mod(q, mod, size_N - 1);
     5aa:	0001                	nop
            while(q[size_N - 1] < 0){
     5ac:	0500                	addi	s0,sp,640
     5ae:	02b2                	slli	t0,t0,0xc
     5b0:	7410                	flw	fa2,40(s0)
     5b2:	0006                	c.slli	zero,0x1
            q[size_N - 1] = q[size_N - 1] % mod;
     5b4:	e000                	fsw	fs0,0(s0)
     5b6:	1902                	slli	s2,s2,0x20
     5b8:	0140                	addi	s0,sp,132
     5ba:	0000                	unimp
     5bc:	b405                	j	ffffffdc <_stack_start+0xfffeffdc>
                v[size_N - 1] = v[size_N - 1]+mod;
     5be:	0a02                	c.slli64	s4
     5c0:	08fc                	addi	a5,sp,92
     5c2:	0000                	unimp
     5c4:	02ec                	addi	a1,sp,332
            array_mod(v, mod, size_N);
     5c6:	1000                	addi	s0,sp,32
     5c8:	cd04                	sw	s1,24(a0)
     5ca:	0005                	c.nop	1
     5cc:	0200                	addi	s0,sp,256
     5ce:	0801                	addi	a6,a6,0
                product[size_N - 1] = product[size_N - 1]+mod;
     5d0:	00000497          	auipc	s1,0x0
     5d4:	cd16                	sw	t0,152(sp)
     5d6:	0005                	c.nop	1
            array_mod(product, mod, size_N);
     5d8:	1000                	addi	s0,sp,32
     5da:	5504                	lw	s1,40(a0)
     5dc:	0004                	0x4
     5de:	1400                	addi	s0,sp,544
     5e0:	00a8                	addi	a0,sp,72
     5e2:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     5e4:	05fd                	addi	a1,a1,31
     5e6:	0000                	unimp
     5e8:	7315                	lui	t1,0xfffe5
     5ea:	0004                	0x4
     5ec:	1500                	addi	s0,sp,672
        for (i = 0; i < size_N; ++i){
     5ee:	0116                	slli	sp,sp,0x5
     5f0:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     5f2:	fd15                	bnez	a0,52e <polydiv+0x14a>
     5f4:	0005                	c.nop	1
     5f6:	1500                	addi	s0,sp,672
        for (i = 0; i < size_N; ++i){
     5f8:	0069                	c.nop	26
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     5fa:	0000                	unimp
     5fc:	1000                	addi	s0,sp,32
     5fe:	d404                	sw	s1,40(s0)
     600:	0005                	c.nop	1
            array_mod(num_temp, mod, size_N);
     602:	1000                	addi	s0,sp,32
     604:	df04                	sw	s1,56(a4)
     606:	0005                	c.nop	1
     608:	1400                	addi	s0,sp,544
            array_add(q, v, size_N );
     60a:	009c                	addi	a5,sp,64
     60c:	0000                	unimp
     60e:	00000627          	0x627
            array_mod(q, mod, size_N);
     612:	7315                	lui	t1,0xfffe5
     614:	0004                	0x4
     616:	1500                	addi	s0,sp,672
     618:	0116                	slli	sp,sp,0x5
    int v[size_N];
     61a:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     61c:	9c15                	0x9c15
     61e:	0000                	unimp
     620:	1500                	addi	s0,sp,672
     622:	0069                	c.nop	26
     624:	0000                	unimp
     626:	1000                	addi	s0,sp,32
     628:	0904                	addi	s1,sp,144
     62a:	0006                	c.slli	zero,0x1
                q[size_N - 1] = q[size_N - 1]+mod;
     62c:	1400                	addi	s0,sp,544
     62e:	0069                	c.nop	26
     630:	0000                	unimp
     632:	0641                	addi	a2,a2,16
            if( num_temp[i] != 0 )
     634:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     636:	7315                	lui	t1,0xfffe5
     638:	0004                	0x4
            v[i] = 0;
     63a:	1500                	addi	s0,sp,672
     63c:	0116                	slli	sp,sp,0x5
     63e:	0000                	unimp
     640:	1000                	addi	s0,sp,32
     642:	2d04                	fld	fs1,24(a0)
        for (i = 0; i < size_N; ++i){
     644:	0006                	c.slli	zero,0x1
     646:	0900                	addi	s0,sp,144
     648:	0038                	addi	a4,sp,8
    while (d >= d2){
     64a:	0000                	unimp
     64c:	00000657          	0x657
        result[i] = q[i];
     650:	750a                	flw	fa0,160(sp)
     652:	0000                	unimp
     654:	0200                	addi	s0,sp,256
     656:	0900                	addi	s0,sp,144
    for(i = 0; i < size_N; ++i){
     658:	0038                	addi	a4,sp,8
     65a:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     65c:	00000667          	jalr	a2,zero # 0 <__DYNAMIC>
        result[i] = num_temp[i-size_N];
     660:	750a                	flw	fa0,160(sp)
     662:	0000                	unimp
     664:	0000                	unimp
     666:	0600                	addi	s0,sp,768
    for(i = size_N; i < (2*size_N); ++i){
     668:	04d8                	addi	a4,sp,580
     66a:	0000                	unimp
}
     66c:	2405                	jal	88c <ext_euclid+0x1d2>
     66e:	1a01                	addi	s4,s4,-32
     670:	0312                	slli	t1,t1,0x4
     672:	0000                	unimp
     674:	8d1a                	mv	s10,t1
     676:	0006                	c.slli	zero,0x1
     678:	0c00                	addi	s0,sp,528
     67a:	2805                	jal	6aa <polydiv+0x2c6>
     67c:	0801                	addi	a6,a6,0
     67e:	06ad                	addi	a3,a3,11
     680:	0000                	unimp
     682:	0018                	0x18
     684:	0005                	c.nop	1
     686:	0500                	addi	s0,sp,640
     688:	012a                	slli	sp,sp,0xa
     68a:	ad11                	j	c9e <ntru_deceypt+0x1e>
     68c:	0006                	c.slli	zero,0x1
     68e:	0000                	unimp
     690:	ae18                	fsd	fa4,24(a2)
     692:	0002                	c.slli64	zero
     694:	0500                	addi	s0,sp,640
        result[i] = q[i];
     696:	6907012b          	0x6907012b
     69a:	0000                	unimp
     69c:	0400                	addi	s0,sp,512
     69e:	d218                	sw	a4,32(a2)
     6a0:	0004                	0x4
    for(i = 0; i < size_N; ++i){
     6a2:	0500                	addi	s0,sp,640
        result[i] = q[i];
     6a4:	012c                	addi	a1,sp,136
    for(i = 0; i < size_N; ++i){
     6a6:	0006b30b          	0x6b30b
        result[i] = num_temp[i-size_N];
     6aa:	0800                	addi	s0,sp,16
     6ac:	1000                	addi	s0,sp,32
     6ae:	7404                	flw	fs1,40(s0)
     6b0:	0006                	c.slli	zero,0x1
     6b2:	1000                	addi	s0,sp,32
    for(i = size_N; i < (2*size_N); ++i){
     6b4:	6704                	flw	fs1,8(a4)
     6b6:	0006                	c.slli	zero,0x1
     6b8:	1a00                	addi	s0,sp,304
    int ri_2[size]; // MX-ring poly, a
     6ba:	00000017          	auipc	zero,0x0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6be:	050e                	slli	a0,a0,0x3
    int ri_2[size]; // MX-ring poly, a
     6c0:	0144                	addi	s1,sp,132
     6c2:	f208                	fsw	fa0,32(a2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6c4:	0006                	c.slli	zero,0x1
     6c6:	1800                	addi	s0,sp,48
     6c8:	0561                	addi	a0,a0,24
     6ca:	0000                	unimp
     6cc:	4505                	li	a0,1
     6ce:	1201                	addi	tp,tp,-32
     6d0:	06f2                	slli	a3,a3,0x1c
     6d2:	0000                	unimp
     6d4:	1800                	addi	s0,sp,48
     6d6:	0000055b          	0x55b
     6da:	4605                	li	a2,1
     6dc:	1201                	addi	tp,tp,-32
     6de:	06f2                	slli	a3,a3,0x1c
    int ri_2[size]; // MX-ring poly, a
     6e0:	0000                	unimp
     6e2:	1806                	slli	a6,a6,0x21
     6e4:	0049                	c.nop	18
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6e6:	0000                	unimp
     6e8:	4705                	li	a4,1
     6ea:	1201                	addi	tp,tp,-32
    int ri[size];
     6ec:	0046                	c.slli	zero,0x11
     6ee:	0000                	unimp
     6f0:	000c                	0xc
    int ti_1[size]; // ti_1[0] = 1
     6f2:	4609                	li	a2,2
     6f4:	0000                	unimp
     6f6:	0200                	addi	s0,sp,256
    int ti[size];
     6f8:	0a000007          	0xa000007
     6fc:	0075                	c.nop	29
    int qi_1[size];
     6fe:	0000                	unimp
     700:	0002                	c.slli64	zero
     702:	8505d01b          	0x8505d01b
    int temp[size];
     706:	0702                	c.slli64	a4
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     708:	00000817          	auipc	a6,0x0
    int ri_2[size]; // MX-ring poly, a
     70c:	6c18                	flw	fa4,24(s0)
     70e:	0006                	c.slli	zero,0x1
    int temp[size];
     710:	0500                	addi	s0,sp,640
    for (i = 0; i < size; ++i) {
     712:	75180287          	0x75180287
        ti_2[i] = 0;
     716:	0000                	unimp
     718:	0000                	unimp
     71a:	b918                	fsd	fa4,48(a0)
     71c:	0005                	c.nop	1
    for (i = 0; i < size; ++i) {
     71e:	0500                	addi	s0,sp,640
     720:	0288                	addi	a0,sp,320
    ti_1[0] = 1;
     722:	c712                	sw	tp,140(sp)
     724:	0005                	c.nop	1
     726:	0400                	addi	s0,sp,512
        for (i = N + 1; i < (2 * N + 2); ++i) {
     728:	fd18                	fsw	fa4,56(a0)
     72a:	0002                	c.slli64	zero
     72c:	0500                	addi	s0,sp,640
     72e:	0289                	addi	t0,t0,2
            ti[i] = ti_2[i] - temp[i];
     730:	1710                	addi	a2,sp,928
     732:	0008                	0x8
     734:	0800                	addi	s0,sp,16
     736:	e918                	fsw	fa4,16(a0)
	array_mod(ri_2,mod,N+1);
     738:	0006                	c.slli	zero,0x1
     73a:	0500                	addi	s0,sp,640
     73c:	028a                	slli	t0,t0,0x2
     73e:	0001ac17          	auipc	s8,0x1a
	array_mod(ri_1,mod,N+1);
     742:	2400                	fld	fs0,8(s0)
     744:	0a18                	addi	a4,sp,272
     746:	0002                	c.slli64	zero
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     748:	0500                	addi	s0,sp,640
     74a:	690f028b          	0x690f028b
     74e:	0000                	unimp
     750:	4800                	lw	s0,16(s0)
     752:	fb18                	fsw	fa4,48(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     754:	0004                	0x4
     756:	0500                	addi	s0,sp,640
     758:	028c                	addi	a1,sp,320
     75a:	622c                	flw	fa1,64(a2)
     75c:	0000                	unimp
     75e:	5000                	lw	s0,32(s0)
     760:	ff18                	fsw	fa4,56(a4)
        for (i = 0; i < N + 1; ++i) {
     762:	0006                	c.slli	zero,0x1
     764:	0500                	addi	s0,sp,640
     766:	028d                	addi	t0,t0,3
        array_mod(temp,mod,N+1);
     768:	b91a                	fsd	ft6,176(sp)
     76a:	0006                	c.slli	zero,0x1
     76c:	5800                	lw	s0,48(s0)
     76e:	0618                	addi	a4,sp,768
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     770:	0005                	c.nop	1
     772:	0500                	addi	s0,sp,640
     774:	028e                	slli	t0,t0,0x3
     776:	0a16                	slli	s4,s4,0x5
     778:	0001                	nop
     77a:	6800                	flw	fs0,16(s0)
        for (i = 0; i < N + 1; ++i) {
     77c:	0418                	addi	a4,sp,512
     77e:	05000007          	0x5000007
	array_mod(qi_1,mod,size);
     782:	0a16028f          	0xa16028f
     786:	0001                	nop
     788:	7000                	flw	fs0,32(s0)
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     78a:	eb18                	fsw	fa4,16(a4)
     78c:	0000                	unimp
     78e:	0500                	addi	s0,sp,640
     790:	0290                	addi	a2,sp,320
     792:	0a16                	slli	s4,s4,0x5
     794:	0001                	nop
     796:	7800                	flw	fs0,48(s0)
        for (i = 0; i < N + 1; ++i) {
     798:	a918                	fsd	fa4,16(a0)
     79a:	0006                	c.slli	zero,0x1
     79c:	0500                	addi	s0,sp,640
	array_mod(temp,mod,size);
     79e:	0291                	addi	t0,t0,4
     7a0:	2710                	fld	fa2,8(a4)
     7a2:	0008                	0x8
     7a4:	8000                	0x8000
        for (i = 0; i < N + 1; ++i) {
     7a6:	f118                	fsw	fa4,32(a0)
     7a8:	0002                	c.slli64	zero
     7aa:	0500                	addi	s0,sp,640
     7ac:	0292                	slli	t0,t0,0x4
        array_mod(ti,mod,N+1);
     7ae:	3710                	fld	fa2,40(a4)
     7b0:	0008                	0x8
     7b2:	8800                	0x8800
     7b4:	ea18                	fsw	fa4,16(a2)
        for (i = 0; i < N + 1; ++i) {
     7b6:	0005                	c.nop	1
        controlR = 0;
     7b8:	0500                	addi	s0,sp,640
        for (i = 0; i < N + 1; ++i) {
     7ba:	690f0293          	addi	t0,t5,1680
     7be:	0000                	unimp
    while (controlR != 0) {
     7c0:	a000                	fsd	fs0,0(s0)
        for (j = 0; j < mod; ++j) {
     7c2:	c318                	sw	a4,0(a4)
            if (((ri_2[0] * j) % mod) == 1)
     7c4:	0001                	nop
        for (j = 0; j < mod; ++j) {
     7c6:	0500                	addi	s0,sp,640
     7c8:	0294                	addi	a3,sp,320
     7ca:	0a16                	slli	s4,s4,0x5
     7cc:	0001                	nop
     7ce:	a400                	fsd	fs0,8(s0)
     7d0:	dc18                	sw	a4,56(s0)
        for (i = 0; i < N + 1; ++i) {
     7d2:	0000                	unimp
     7d4:	0500                	addi	s0,sp,640
    }
     7d6:	0295                	addi	t0,t0,5
     7d8:	0a16                	slli	s4,s4,0x5
     7da:	0001                	nop
     7dc:	ac00                	fsd	fs0,24(s0)
     7de:	b218                	fsd	fa4,32(a2)
     7e0:	0001                	nop
     7e2:	0500                	addi	s0,sp,640
     7e4:	0296                	slli	t0,t0,0x5
     7e6:	0a16                	slli	s4,s4,0x5
     7e8:	0001                	nop
     7ea:	b400                	fsd	fs0,40(s0)
     7ec:	4e18                	lw	a4,24(a2)
     7ee:	0000                	unimp
     7f0:	0500                	addi	s0,sp,640
     7f2:	0a160297          	auipc	t0,0xa160
     7f6:	0001                	nop
     7f8:	bc00                	fsd	fs0,56(s0)
     7fa:	5d18                	lw	a4,56(a0)
     7fc:	0000                	unimp
     7fe:	0500                	addi	s0,sp,640
        ri_2[i] = polyR[i];
     800:	0298                	addi	a4,sp,320
     802:	0a16                	slli	s4,s4,0x5
     804:	0001                	nop
     806:	c400                	sw	s0,8(s0)
     808:	a618                	fsd	fa4,8(a2)
     80a:	0004                	0x4
    for (i = 0; i < size; ++i) {
     80c:	0500                	addi	s0,sp,640
        ri_2[i] = polyR[i];
     80e:	0299                	addi	t0,t0,6
     810:	6908                	flw	fa0,16(a0)
        ri_1[i] = polyf[i];
     812:	0000                	unimp
     814:	cc00                	sw	s0,24(s0)
     816:	0900                	addi	s0,sp,144
     818:	05cd                	addi	a1,a1,19
     81a:	0000                	unimp
     81c:	00000827          	0x827
     820:	750a                	flw	fa0,160(sp)
        ti_2[i] = 0;
     822:	0000                	unimp
     824:	1900                	addi	s0,sp,176
     826:	0900                	addi	s0,sp,144
     828:	05cd                	addi	a1,a1,19
        ti_1[i] = 0;
     82a:	0000                	unimp
     82c:	00000837          	lui	a6,0x0
     830:	750a                	flw	fa0,160(sp)
    for (i = 0; i < size; ++i) {
     832:	0000                	unimp
     834:	0700                	addi	s0,sp,896
            ri[i - (N + 1)] = res[i];
     836:	0900                	addi	s0,sp,144
     838:	05cd                	addi	a1,a1,19
     83a:	0000                	unimp
     83c:	00000847          	fmsub.s	fa6,ft0,ft0,ft0,rne
        for (i = N + 1; i < (2 * N + 2); ++i) {
     840:	750a                	flw	fa0,160(sp)
            ri[i - (N + 1)] = res[i];
     842:	0000                	unimp
     844:	1700                	addi	s0,sp,928
        for (i = N + 1; i < (2 * N + 2); ++i) {
     846:	1b00                	addi	s0,sp,432
            temp[i] = ri_2[i] - ri[i];
     848:	05f0                	addi	a2,sp,716
     84a:	029e                	slli	t0,t0,0x7
     84c:	00086e07          	0x86e07
     850:	1800                	addi	s0,sp,48
     852:	03fd                	addi	t2,t2,31
     854:	0000                	unimp
     856:	a105                	j	c76 <ntru_encyrpt+0x7e>
        for (i = 0; i < N + 1; ++i) {
     858:	1b02                	slli	s6,s6,0x20
            temp[i] = ri_2[i] - ri[i];
     85a:	086e                	slli	a6,a6,0x1b
     85c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     85e:	1800                	addi	s0,sp,48
     860:	0000038f          	0x38f
            qi_1[i] = res1[i];
     864:	a205                	j	984 <generate_keys+0x80>
     866:	1802                	slli	a6,a6,0x20
     868:	087e                	slli	a6,a6,0x1f
     86a:	0000                	unimp
     86c:	0078                	addi	a4,sp,12
        for (i = 0; i < N + 1; ++i) {
     86e:	0c09                	addi	s8,s8,2
            qi_1[i] = res1[i];
     870:	7e000003          	lb	zero,2016(zero) # 7e0 <ext_euclid+0x126>
            temp[i] = res2[i];
     874:	0008                	0x8
     876:	0a00                	addi	s0,sp,272
     878:	0075                	c.nop	29
     87a:	0000                	unimp
     87c:	001d                	c.nop	7
     87e:	7509                	lui	a0,0xfffe2
        for (i = 0; i < N + 1; ++i) {
     880:	0000                	unimp
            temp[i] = res2[i];
     882:	8e00                	0x8e00
        for (i = 0; i < N + 1; ++i) {
     884:	0008                	0x8
            ti[i] = ti_2[i] - temp[i];
     886:	0a00                	addi	s0,sp,272
     888:	0075                	c.nop	29
     88a:	0000                	unimp
     88c:	001d                	c.nop	7
     88e:	f01c                	fsw	fa5,32(s0)
     890:	8305                	srli	a4,a4,0x1
     892:	0302                	c.slli64	t1
     894:	000008b3          	add	a7,zero,zero
     898:	501d                	c.li	zero,-25
     89a:	0005                	c.nop	1
        for (i = 0; i < N + 1; ++i) {
     89c:	0500                	addi	s0,sp,640
     89e:	029a                	slli	t0,t0,0x6
            ri_2[i] = ri_1[i];
     8a0:	0007020b          	0x7020b
     8a4:	1d00                	addi	s0,sp,688
     8a6:	06c9                	addi	a3,a3,18
     8a8:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8aa:	a305                	j	dca <memcpy+0xc>
            ri_2[i] = ri_1[i];
     8ac:	0b02                	c.slli64	s6
            ri_1[i] = ri[i];
     8ae:	00000847          	fmsub.s	fa6,ft0,ft0,ft0,rne
     8b2:	0900                	addi	s0,sp,144
            ti_2[i] = ti_1[i];
     8b4:	05cd                	addi	a1,a1,19
     8b6:	0000                	unimp
            ri_1[i] = ri[i];
     8b8:	000008c3          	fmadd.s	fa7,ft0,ft0,ft0,rne
            ti_2[i] = ti_1[i];
     8bc:	750a                	flw	fa0,160(sp)
     8be:	0000                	unimp
     8c0:	1800                	addi	s0,sp,48
            controlR += ri[i];
     8c2:	1e00                	addi	s0,sp,816
            ti_2[i] = ti_1[i];
     8c4:	000000b7          	lui	ra,0x0
            ti_1[i] = ti[i];
     8c8:	0410                	addi	a2,sp,512
     8ca:	000008c3          	fmadd.s	fa7,ft0,ft0,ft0,rne
     8ce:	d91f 0008 1500      	0x15000008d91f
            qi_1[i] = 0;
     8d4:	00000473          	0x473
        for (i = 0; i < N + 1; ++i) {
     8d8:	1000                	addi	s0,sp,32
     8da:	ce04                	sw	s1,24(a2)
            if (((ri_2[0] * j) % mod) == 1)
     8dc:	0008                	0x8
     8de:	1000                	addi	s0,sp,32
     8e0:	9604                	0x9604
     8e2:	0001                	nop
     8e4:	1f00                	addi	s0,sp,944
     8e6:	08f0                	addi	a2,sp,92
     8e8:	0000                	unimp
     8ea:	6915                	lui	s2,0x5
        for (j = 0; j < mod; ++j) {
     8ec:	0000                	unimp
     8ee:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8f0:	0410                	addi	a2,sp,512
        for (i = 0; i < N + 1; ++i) {
     8f2:	08f6                	slli	a7,a7,0x1d
     8f4:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8f6:	0410                	addi	a2,sp,512
     8f8:	08e5                	addi	a7,a7,25
     8fa:	0000                	unimp
     8fc:	6709                	lui	a4,0x2
     8fe:	0006                	c.slli	zero,0x1
     900:	0c00                	addi	s0,sp,528
        for (i = 0; i < N + 1; ++i) {
     902:	0009                	c.nop	2
int* generate_keys(int N, int p, int q){
     904:	0a00                	addi	s0,sp,272
     906:	0075                	c.nop	29
     908:	0000                	unimp
     90a:	0002                	c.slli64	zero
     90c:	fe20                	fsw	fs0,120(a2)
     90e:	0005                	c.nop	1
     910:	0500                	addi	s0,sp,640
     912:	73170333          	0x73170333
     916:	0004                	0x4
     918:	2000                	fld	fs0,0(s0)
     91a:	000005f7          	0x5f7
     91e:	3405                	jal	33e <polymult2+0xc0>
     920:	04791d03          	lh	s10,71(s2) # 5047 <_stack_len+0x1047>
     924:	0000                	unimp
     926:	00003603          	0x3603
     92a:	0700                	addi	s0,sp,896
     92c:	1318                	addi	a4,sp,416
     92e:	002c                	addi	a1,sp,8
     930:	0000                	unimp
     932:	2605                	jal	c52 <ntru_encyrpt+0x5a>
     934:	0009                	c.nop	2
     936:	2100                	fld	fs0,0(a0)
     938:	042d                	addi	s0,s0,11
     93a:	0000                	unimp
     93c:	6708                	flw	fa0,8(a4)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     93e:	c70e                	sw	gp,140(sp)
     940:	0005                	c.nop	1
     942:	0900                	addi	s0,sp,144
     944:	0069                	c.nop	26
     946:	0000                	unimp
     948:	00000953          	fadd.s	fs2,ft0,ft0,rne
     94c:	750a                	flw	fa0,160(sp)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     94e:	0000                	unimp
     950:	9500                	0x9500
     952:	2200                	fld	fs0,0(a2)
     954:	018c                	addi	a1,sp,192
     956:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     958:	0601                	addi	a2,a2,0
     95a:	430c                	lw	a1,0(a4)
     95c:	0009                	c.nop	2
     95e:	0500                	addi	s0,sp,640
     960:	00127403          	0x127403
     964:	2200                	fld	fs0,0(a2)
     966:	035a                	slli	t1,t1,0x16
     968:	0000                	unimp
     96a:	0701                	addi	a4,a4,0
     96c:	430c                	lw	a1,0(a4)
     96e:	0009                	c.nop	2
     970:	0500                	addi	s0,sp,640
     972:	0014cc03          	lbu	s8,1(s1) # 5d1 <polydiv+0x1ed>
     976:	2200                	fld	fs0,0(a2)
     978:	0000030b          	0x30b
     97c:	0801                	addi	a6,a6,0
     97e:	430c                	lw	a1,0(a4)
     980:	0009                	c.nop	2
     982:	0500                	addi	s0,sp,640
     984:	00172403          	lw	s0,1(a4) # 2001 <_min_stack+0x1>
     988:	0900                	addi	s0,sp,144
     98a:	0069                	c.nop	26
     98c:	0000                	unimp
     98e:	0999                	addi	s3,s3,6
     990:	0000                	unimp
     992:	750a                	flw	fa0,160(sp)
     994:	0000                	unimp
     996:	6300                	flw	fs0,0(a4)
     998:	2200                	fld	fs0,0(a2)
     99a:	0489                	addi	s1,s1,2
     99c:	0000                	unimp
     99e:	0901                	addi	s2,s2,0
     9a0:	890c                	0x890c
     9a2:	0009                	c.nop	2
     9a4:	0500                	addi	s0,sp,640
     9a6:	00197c03          	0x197c03
     9aa:	0900                	addi	s0,sp,144
     9ac:	0069                	c.nop	26
     9ae:	0000                	unimp
     9b0:	09bc                	addi	a5,sp,216
     9b2:	0000                	unimp
     9b4:	00007523          	0x7523
     9b8:	3d00                	fld	fs0,56(a0)
     9ba:	0001                	nop
     9bc:	ab22                	fsd	fs0,400(sp)
     9be:	0000                	unimp
     9c0:	0100                	addi	s0,sp,128
     9c2:	0c0a                	slli	s8,s8,0x2
    int polyR[N+1];
     9c4:	000009ab          	0x9ab
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9c8:	0305                	addi	t1,t1,1
    int polyR[N+1];
     9ca:	1b0c                	addi	a1,sp,432
     9cc:	0000                	unimp
     9ce:	7009                	c.lui	zero,0xfffe2
     9d0:	0000                	unimp
     9d2:	de00                	sw	s0,56(a2)
     9d4:	0009                	c.nop	2
     9d6:	0a00                	addi	s0,sp,272
    polyR[N] = 1;
     9d8:	0075                	c.nop	29
     9da:	0000                	unimp
     9dc:	0000                	unimp
     9de:	ce05                	beqz	a2,a16 <generate_keys+0x112>
     9e0:	0009                	c.nop	2
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9e2:	2400                	fld	fs0,8(s0)
     9e4:	0240                	addi	s0,sp,260
     9e6:	0000                	unimp
     9e8:	0b01                	addi	s6,s6,0
     9ea:	de0e                	sw	gp,60(sp)
     9ec:	0009                	c.nop	2
     9ee:	0500                	addi	s0,sp,640
     9f0:	00200403          	lb	s0,2(zero) # 2 <__DYNAMIC+0x2>
     9f4:	2500                	fld	fs0,8(a0)
     9f6:	6176                	flw	ft2,92(sp)
     9f8:	0072                	c.slli	zero,0x1c
     9fa:	0c01                	addi	s8,s8,0
     9fc:	000a0713          	mv	a4,s4
     a00:	0500                	addi	s0,sp,640
     a02:	00127003          	0x127003
     a06:	1000                	addi	s0,sp,32
     a08:	3204                	fld	fs1,32(a2)
     a0a:	0009                	c.nop	2
     a0c:	2600                	fld	fs0,8(a2)
     a0e:	00000717          	auipc	a4,0x0
     a12:	8401                	c.srai64	s0
     a14:	0502                	c.slli64	a0
     a16:	0069                	c.nop	26
     a18:	0000                	unimp
     a1a:	0f44                	addi	s1,sp,916
     a1c:	0000                	unimp
     a1e:	019c                	addi	a5,sp,192
     a20:	0000                	unimp
     a22:	9c01                	0x9c01
     a24:	00000ba7          	0xba7
     a28:	72617627          	0x72617627
     a2c:	0100                	addi	s0,sp,128
     a2e:	0285                	addi	t0,t0,1
     a30:	000a0713          	mv	a4,s4
     a34:	ff00                	fsw	fs0,56(a4)
     a36:	28ff                	0x28ff
     a38:	0449                	addi	s0,s0,18
     a3a:	0000                	unimp
     a3c:	8601                	c.srai64	a2
     a3e:	0a02                	c.slli64	s4
     a40:	00000ba7          	0xba7
     a44:	0000                	unimp
    polyR[0] = -1;
     a46:	0000                	unimp
     a48:	9628                	0x9628
    for(i = 1; i < N; ++i){
     a4a:	0000                	unimp
     a4c:	0100                	addi	s0,sp,128
     a4e:	a70a0287          	0xa70a0287
    for (i = N; i < 55; ++i ){
     a52:	1e00000b          	0x1e00000b
     a56:	0000                	unimp
     a58:	2800                	fld	fs0,16(s0)
    for(i = 0; i < N; ++i){
     a5a:	0328                	addi	a0,sp,392
        random_keys[i] = f[i];
     a5c:	0000                	unimp
     a5e:	8801                	andi	s0,s0,0
     a60:	0a02                	c.slli64	s4
     a62:	00000ba7          	0xba7
    for(i = 0; i < N; ++i){
     a66:	003c                	addi	a5,sp,8
     a68:	0000                	unimp
     a6a:	4e29                	li	t3,10
    for(i = N; i < (2*N); ++i){
     a6c:	0100                	addi	s0,sp,128
     a6e:	0289                	addi	t0,t0,2
     a70:	6909                	lui	s2,0x2
     a72:	0000                	unimp
        random_keys[i] = g[i-N];
     a74:	3500                	fld	fs0,40(a0)
     a76:	7029                	c.lui	zero,0xfffea
     a78:	0100                	addi	s0,sp,128
     a7a:	028a                	slli	t0,t0,0x2
    for(i = N; i < (2*N); ++i){
     a7c:	6909                	lui	s2,0x2
     a7e:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     a80:	0300                	addi	s0,sp,384
     a82:	7129                	addi	sp,sp,-320
     a84:	0100                	addi	s0,sp,128
    fp = ext_euclid(polyR, f, (N+1), p);
     a86:	6909028b          	0x6909028b
     a8a:	0000                	unimp
     a8c:	6500                	flw	fs0,8(a0)
     a8e:	042a                	slli	s0,s0,0xa
     a90:	0004                	0x4
    for(i = (2*N); i < (3*N); ++i){
     a92:	0100                	addi	s0,sp,128
        random_keys[i] = fp[i-(2*N)];
     a94:	028d                	addi	t0,t0,3
     a96:	ad09                	j	10a8 <main+0x164>
     a98:	0300000b          	0x300000b
    for(i = (2*N); i < (3*N); ++i){
     a9c:	cc91                	beqz	s1,ab8 <generate_keys+0x1b4>
     a9e:	059a2877          	0x59a2877
    fq = ext_euclid(polyR, f, (N+1), q);
     aa2:	0000                	unimp
     aa4:	8e01                	sub	a2,a2,s0
     aa6:	0902                	c.slli64	s2
     aa8:	0bbd                	addi	s7,s7,15
     aaa:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     aac:	005d                	c.nop	23
     aae:	0000                	unimp
     ab0:	c228                	sw	a0,64(a2)
     ab2:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     ab4:	0100                	addi	s0,sp,128
     ab6:	cf09028f          	0xcf09028f
     aba:	b100000b          	0xb100000b
    for(i = (3*N); i < (4*N); ++i){
     abe:	0000                	unimp
    fg = polymult2(fq, N, g, N, 0);
     ac0:	2b00                	fld	fs0,16(a4)
     ac2:	000000cf          	fnmadd.s	ft1,ft0,ft0,ft0,rne
     ac6:	9001                	srli	s0,s0,0x20
     ac8:	0902                	c.slli64	s2
     aca:	0be1                	addi	s7,s7,24
    for(i = 0; i < (2*N-1); ++i){
     acc:	0000                	unimp
     ace:	cf28                	sw	a0,88(a4)
     ad0:	0005                	c.nop	1
     ad2:	0100                	addi	s0,sp,128
     ad4:	0291                	addi	t0,t0,4
     ad6:	f309                	bnez	a4,9d8 <generate_keys+0xd4>
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ad8:	1200000b          	0x1200000b
     adc:	0001                	nop
     ade:	2b00                	fld	fs0,16(a4)
    for(i = (4*N); i < (5*N); ++i){
     ae0:	025a                	slli	tp,tp,0x16
     ae2:	0000                	unimp
     ae4:	9201                	srli	a2,a2,0x20
     ae6:	0902                	c.slli64	s2
     ae8:	0c05                	addi	s8,s8,1
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     aea:	0000                	unimp
     aec:	6828                	flw	fa0,80(s0)
     aee:	0004                	0x4
     af0:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     af2:	17090293          	addi	t0,s2,368 # 2170 <_bss_end+0x168>
     af6:	000c                	0xc
    for(i = (5*N); i < (6*N+1); ++i){
     af8:	6500                	flw	fs0,8(a0)
     afa:	0001                	nop
        random_keys[i] = polyR[i-(5*N)];
     afc:	2c00                	fld	fs0,24(s0)
     afe:	0069                	c.nop	26
     b00:	9401                	srai	s0,s0,0x20
     b02:	0902                	c.slli64	s2
    for(i = (5*N); i < (6*N+1); ++i){
     b04:	0069                	c.nop	26
     b06:	0000                	unimp
     b08:	01b9                	addi	gp,gp,14
     b0a:	0000                	unimp
     b0c:	702d                	c.lui	zero,0xfffeb
     b0e:	2a00000f          	0x2a00000f
}
     b12:	001c                	0x1c
     b14:	3000                	fld	fs0,32(s0)
     b16:	2e00000b          	0x2e00000b
     b1a:	5a01                	li	s4,-32
     b1c:	77cc9103          	lh	sp,1916(s9)
     b20:	012e                	slli	sp,sp,0xb
     b22:	b003055b          	0xb003055b
     b26:	0011                	c.nop	4
     b28:	2e00                	fld	fs0,24(a2)
     b2a:	5c01                	li	s8,-32
     b2c:	0802                	c.slli64	a6
     b2e:	00c0                	addi	s0,sp,68
     b30:	9a2d                	andi	a2,a2,-21
     b32:	0000000f          	fence	unknown,unknown
     b36:	4f00000f          	0x4f00000f
     b3a:	2e00000b          	0x2e00000b
     b3e:	5a01                	li	s4,-32
     b40:	0802                	c.slli64	a6
     b42:	2e35                	jal	e7e <memcpy+0xc0>
     b44:	5b01                	li	s6,-32
     b46:	3301                	jal	846 <ext_euclid+0x18c>
     b48:	012e                	slli	sp,sp,0xb
     b4a:	025c                	addi	a5,sp,260
     b4c:	6508                	flw	fa0,8(a0)
     b4e:	2d00                	fld	fs0,24(a0)
        polyR[i] = 0;
     b50:	1030                	addi	a2,sp,40
     b52:	0000                	unimp
     b54:	0daa                	slli	s11,s11,0xa
     b56:	0000                	unimp
     b58:	00000b77          	0xb77
    for(i = 1; i < N; ++i){
     b5c:	012e                	slli	sp,sp,0xb
        f[i] = 0;
     b5e:	025a                	slli	tp,tp,0x16
     b60:	3508                	fld	fa0,40(a0)
     b62:	012e                	slli	sp,sp,0xb
     b64:	6508025b          	0x6508025b
     b68:	012e                	slli	sp,sp,0xb
     b6a:	035c                	addi	a5,sp,388
        g[i] = 0;
     b6c:	cc91                	beqz	s1,b88 <generate_keys+0x284>
     b6e:	5e012e77          	0x5e012e77
     b72:	7e889103          	lh	sp,2024(a7)
    for (i = N; i < 55; ++i ){
     b76:	2f00                	fld	fs0,24(a4)
     b78:	106c                	addi	a1,sp,44
        random_keys[i] = f[i];
     b7a:	0000                	unimp
     b7c:	0c29                	addi	s8,s8,10
     b7e:	0000                	unimp
     b80:	012e                	slli	sp,sp,0xb
     b82:	025a                	slli	tp,tp,0x16
     b84:	3508                	fld	fa0,40(a0)
     b86:	012e                	slli	sp,sp,0xb
     b88:	2e33015b          	0x2e33015b
     b8c:	5c01                	li	s8,-32
    for(i = 0; i < N; ++i){
     b8e:	0802                	c.slli64	a6
        random_keys[i] = g[i-N];
     b90:	2e65                	jal	f48 <main+0x4>
     b92:	5d01                	li	s10,-32
     b94:	7ae09103          	lh	sp,1966(ra) # 7ae <ext_euclid+0xf4>
     b98:	012e                	slli	sp,sp,0xb
    for(i = N; i < (2*N); ++i){
     b9a:	025e                	slli	tp,tp,0x17
     b9c:	012e0083          	lb	ra,18(t3) # 1012 <main+0xce>
        random_keys[i] = fp[i-(2*N)];
     ba0:	0360                	addi	s0,sp,396
     ba2:	8891                	andi	s1,s1,4
     ba4:	007e                	c.slli	zero,0x1f
     ba6:	1000                	addi	s0,sp,32
     ba8:	6904                	flw	fs1,16(a0)
    for(i = (2*N); i < (3*N); ++i){
     baa:	0000                	unimp
     bac:	0900                	addi	s0,sp,144
     bae:	0069                	c.nop	26
        random_keys[i] = fq[i-(3*N)];
     bb0:	0000                	unimp
     bb2:	0bbd                	addi	s7,s7,15
     bb4:	0000                	unimp
     bb6:	750a                	flw	fa0,160(sp)
     bb8:	0000                	unimp
     bba:	2f00                	fld	fs0,24(a4)
     bbc:	0900                	addi	s0,sp,144
    for(i = (3*N); i < (4*N); ++i){
     bbe:	0069                	c.nop	26
        random_keys[i] = fq[i-(3*N)];
     bc0:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     bc2:	00000bcf          	fnmadd.s	fs7,ft0,ft0,ft0,rne
    for(i = 0; i < (2*N-1); ++i){
     bc6:	7530                	flw	fa2,104(a0)
     bc8:	0000                	unimp
        fg[i] = fg[i]*p;
     bca:	0200                	addi	s0,sp,256
     bcc:	3408                	fld	fa0,40(s0)
     bce:	0900                	addi	s0,sp,144
     bd0:	0069                	c.nop	26
    for(i = 0; i < (2*N-1); ++i){
     bd2:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bd4:	0be1                	addi	s7,s7,24
     bd6:	0000                	unimp
     bd8:	7530                	flw	fa2,104(a0)
     bda:	0000                	unimp
     bdc:	0200                	addi	s0,sp,256
     bde:	3408                	fld	fa0,40(s0)
    for(i = (4*N); i < (5*N); ++i){
     be0:	0900                	addi	s0,sp,144
     be2:	0069                	c.nop	26
        random_keys[i] = polyR[i-(5*N)];
     be4:	0000                	unimp
     be6:	00000bf3          	0xbf3
     bea:	7530                	flw	fa2,104(a0)
     bec:	0000                	unimp
     bee:	0200                	addi	s0,sp,256
     bf0:	3408                	fld	fa0,40(s0)
    for(i = (5*N); i < (6*N+1); ++i){
     bf2:	0900                	addi	s0,sp,144
        random_keys[i] = polyR[i-(5*N)];
     bf4:	0069                	c.nop	26
    for(i = (5*N); i < (6*N+1); ++i){
     bf6:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bf8:	0c05                	addi	s8,s8,1
     bfa:	0000                	unimp
     bfc:	7530                	flw	fa2,104(a0)
     bfe:	0000                	unimp
     c00:	0200                	addi	s0,sp,256
     c02:	3408                	fld	fa0,40(s0)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c04:	0900                	addi	s0,sp,144
     c06:	0069                	c.nop	26
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c08:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c0a:	00000c17          	auipc	s8,0x0
     c0e:	7530                	flw	fa2,104(a0)
     c10:	0000                	unimp
     c12:	0200                	addi	s0,sp,256
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c14:	3408                	fld	fa0,40(s0)
     c16:	0900                	addi	s0,sp,144
     c18:	0069                	c.nop	26
     c1a:	0000                	unimp
     c1c:	0c29                	addi	s8,s8,10
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1e:	0000                	unimp
    temp = polymult(public_key,N,random_val,48,q,0);
     c20:	7530                	flw	fa2,104(a0)
     c22:	0000                	unimp
     c24:	0200                	addi	s0,sp,256
     c26:	3508                	fld	fa0,40(a0)
     c28:	3100                	fld	fs0,32(a0)
     c2a:	01d9                	addi	gp,gp,22
     c2c:	0000                	unimp
     c2e:	5801                	li	a6,-32
     c30:	0602                	c.slli64	a2
	array_add(temp,message,48);
     c32:	00000ba7          	0xba7
     c36:	0c80                	addi	s0,sp,592
    temp = polymult(public_key,N,random_val,48,q,0);
     c38:	0000                	unimp
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c3a:	00c8                	addi	a0,sp,68
     c3c:	0000                	unimp
	array_add(temp,message,48);
     c3e:	9c01                	0x9c01
     c40:	0daa                	slli	s11,s11,0xa
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c42:	0000                	unimp
     c44:	4e32                	lw	t3,12(sp)
     c46:	0100                	addi	s0,sp,128
     c48:	0258                	addi	a4,sp,260
     c4a:	00006917          	auipc	s2,0x6
     c4e:	d900                	sw	s0,48(a0)
     c50:	0001                	nop
    for(i = (2*N); i < (3*N); ++i){
     c52:	3200                	fld	fs0,32(a2)
     c54:	0070                	addi	a2,sp,12
     c56:	5801                	li	a6,-32
     c58:	1e02                	slli	t3,t3,0x20
     c5a:	0069                	c.nop	26
     c5c:	0000                	unimp
}
     c5e:	021d                	addi	tp,tp,7
     c60:	0000                	unimp
     c62:	7132                	flw	ft2,44(sp)
     c64:	0100                	addi	s0,sp,128
     c66:	0258                	addi	a4,sp,260
     c68:	6925                	lui	s2,0x9
     c6a:	0000                	unimp
     c6c:	5400                	lw	s0,40(s0)
        CT[i-(2*N)] = CT[i];
     c6e:	0002                	c.slli64	zero
     c70:	3300                	fld	fs0,32(a4)
     c72:	00c2                	slli	ra,ra,0x10
     c74:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     c76:	5801                	li	a6,-32
     c78:	2d02                	fld	fs10,0(sp)
        CT[i-(2*N)] = CT[i];
     c7a:	00000ba7          	0xba7
    for(i = (2*N); i < (3*N); ++i){
     c7e:	0000028b          	0x28b
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c82:	0005cf33          	xor	t5,a1,zero
     c86:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     c88:	0258                	addi	a4,sp,260
     c8a:	a740                	fsd	fs0,136(a4)
     c8c:	b700000b          	0xb700000b
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c90:	0002                	c.slli64	zero
     c92:	3300                	fld	fs0,32(a4)
     c94:	0449                	addi	s0,s0,18
     c96:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c98:	5801                	li	a6,-32
     c9a:	5402                	lw	s0,32(sp)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c9c:	00000ba7          	0xba7
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ca0:	02ee                	slli	t0,t0,0x1b
     ca2:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca4:	0006d133          	srl	sp,a3,zero
     ca8:	0100                	addi	s0,sp,128
     caa:	0258                	addi	a4,sp,260
     cac:	a766                	fsd	fs9,392(sp)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cae:	0f00000b          	0xf00000b
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cb2:	2b000003          	lb	zero,688(zero) # 2b0 <polymult2+0x32>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cb6:	02c5                	addi	t0,t0,17
     cb8:	0000                	unimp
     cba:	5a01                	li	s4,-32
     cbc:	0a02                	c.slli64	s4
     cbe:	00000ba7          	0xba7
     cc2:	612c                	flw	fa1,64(a0)
     cc4:	0100                	addi	s0,sp,128
     cc6:	a70a025b          	0xa70a025b
    for(i = (2*N); i < ((2*N)+N); ++i){
     cca:	4600000b          	0x4600000b
     cce:	2c000003          	lb	zero,704(zero) # 2c0 <polymult2+0x42>
        if(a2[i] <= q/2)
     cd2:	3261                	jal	65a <polydiv+0x276>
     cd4:	0100                	addi	s0,sp,128
     cd6:	025c                	addi	a5,sp,260
    for (i = 0; i < N; ++i){
     cd8:	a70a                	fsd	ft2,392(sp)
     cda:	5900000b          	0x5900000b
    c = polymult2(secret_key_fp,N,a2,N,0);
     cde:	2c000003          	lb	zero,704(zero) # 2c0 <polymult2+0x42>
     ce2:	5d010063          	beq	sp,a6,12a2 <_bss_start+0x2e>
     ce6:	0a02                	c.slli64	s4
     ce8:	00000ba7          	0xba7
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cec:	0382                	c.slli64	t2
     cee:	0000                	unimp
     cf0:	632c                	flw	fa1,64(a4)
     cf2:	0032                	c.slli	zero,0xc
     cf4:	5e01                	li	t3,-32
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf6:	0a02                	c.slli64	s4
     cf8:	00000ba7          	0xba7
}
     cfc:	0395                	addi	t2,t2,5
     cfe:	0000                	unimp
     d00:	692c                	flw	fa1,80(a0)
     d02:	0100                	addi	s0,sp,128
     d04:	025f 6909 0000      	0x6909025f
     d0a:	b300                	fsd	fs0,32(a4)
     d0c:	2d000003          	lb	zero,720(zero) # 2d0 <polymult2+0x52>
     d10:	0cb6                	slli	s9,s9,0xd
        a2[i-(2*N)] = a2[i];
     d12:	0000                	unimp
     d14:	1784                	addi	s1,sp,992
     d16:	0000                	unimp
     d18:	0d3c                	addi	a5,sp,664
    for(i = (2*N); i < ((2*N)+N); ++i){
     d1a:	0000                	unimp
     d1c:	012e                	slli	sp,sp,0xb
        a2[i-(2*N)] = a2[i];
     d1e:	035a                	slli	t1,t1,0x16
     d20:	2e5d01f3          	0x2e5d01f3
        if(a2[i] <= q/2)
     d24:	5b01                	li	s6,-32
     d26:	7802                	flw	fa6,32(sp)
     d28:	2e00                	fld	fs0,24(a2)
            a2[i] = (-1)*(q-a2[i]);
     d2a:	5c01                	li	s8,-32
     d2c:	5f01f303          	0x5f01f303
    for (i = 0; i < N; ++i){
     d30:	012e                	slli	sp,sp,0xb
     d32:	025d                	addi	tp,tp,23
     d34:	0078                	addi	a4,sp,12
        c2[i-(2*N)] = c2[i];
     d36:	012e                	slli	sp,sp,0xb
     d38:	015e                	slli	sp,sp,0x17
     d3a:	0030                	addi	a2,sp,8
     d3c:	c62d                	beqz	a2,da6 <_start+0x12>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d3e:	000c                	0xc
     d40:	3300                	fld	fs0,32(a4)
        c2[i-(2*N)] = c2[i];
     d42:	0014                	0x14
     d44:	6200                	flw	fs0,0(a2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d46:	000d                	c.nop	3
  jal x0, default_exc_handler
     d48:	2e00                	fld	fs0,24(a2)
     d4a:	5b01                	li	s6,-32
  mv  x1, x0
     d4c:	7902                	flw	fs2,32(sp)
     d4e:	2e00                	fld	fs0,24(a2)
  mv  x2, x1
     d50:	5c01                	li	s8,-32
  mv  x3, x1
     d52:	8402                	jr	s0
  mv  x4, x1
     d54:	2e00                	fld	fs0,24(a2)
  mv  x5, x1
     d56:	5d01                	li	s10,-32
  mv  x6, x1
     d58:	8602                	jr	a2
  mv  x7, x1
     d5a:	2e00                	fld	fs0,24(a2)
  mv  x8, x1
     d5c:	5e01                	li	t3,-32
  mv  x9, x1
     d5e:	8202                	jr	tp
  mv x10, x1
     d60:	0000                	unimp
  mv x11, x1
     d62:	ea2d                	bnez	a2,dd4 <memcpy+0x16>
  mv x12, x1
     d64:	000c                	0xc
  mv x13, x1
     d66:	8400                	0x8400
  mv x14, x1
     d68:	87000017          	auipc	zero,0x87000
  mv x16, x1
     d6c:	000d                	c.nop	3
  mv x17, x1
     d6e:	2e00                	fld	fs0,24(a2)
  mv x18, x1
     d70:	5a01                	li	s4,-32
  mv x19, x1
     d72:	8702                	jr	a4
  mv x20, x1
     d74:	2e00                	fld	fs0,24(a2)
  mv x21, x1
     d76:	5b01                	li	s6,-32
  mv x22, x1
     d78:	7802                	flw	fa6,32(sp)
  mv x23, x1
     d7a:	2e00                	fld	fs0,24(a2)
  mv x24, x1
     d7c:	5d01                	li	s10,-32
  mv x25, x1
     d7e:	7802                	flw	fa6,32(sp)
  mv x26, x1
     d80:	2e00                	fld	fs0,24(a2)
  mv x27, x1
     d82:	5e01                	li	t3,-32
  mv x28, x1
     d84:	3001                	jal	584 <polydiv+0x1a0>
  mv x29, x1
     d86:	2f00                	fld	fs0,24(a4)
  mv x30, x1
     d88:	0cf6                	slli	s9,s9,0x1d
  mv x31, x1
     d8a:	0000                	unimp
  la   x2, _stack_start
     d8c:	00001433          	sll	s0,zero,zero
     d90:	012e                	slli	sp,sp,0xb
     d92:	0079025b          	0x79025b
  la x26, _bss_start
     d96:	012e                	slli	sp,sp,0xb
     d98:	025c                	addi	a5,sp,260
     d9a:	0084                	addi	s1,sp,64
  la x27, _bss_end
     d9c:	012e                	slli	sp,sp,0xb
     d9e:	025d                	addi	tp,tp,23
     da0:	0086                	slli	ra,ra,0x1
     da2:	012e                	slli	sp,sp,0xb
  bge x26, x27, zero_loop_end
     da4:	025e                	slli	tp,tp,0x17
     da6:	0085                	addi	ra,ra,1
  sw x0, 0(x26)
     da8:	0000                	unimp
     daa:	9331                	srli	a4,a4,0x2c
  addi x26, x26, 4
     dac:	0006                	c.slli	zero,0x1
  ble x26, x27, zero_loop
     dae:	0100                	addi	s0,sp,128
     db0:	a7060237          	lui	tp,0xa7060
  addi x10, x0, 0
     db4:	f800000b          	0xf800000b
  addi x11, x0, 0
     db8:	8800000b          	0x8800000b
  jal x1, main
     dbc:	0000                	unimp
     dbe:	0100                	addi	s0,sp,128
     dc0:	009c                	addi	a5,sp,64
     dc2:	3200000f          	0x3200000f
     dc6:	004e                	c.slli	zero,0x13
     dc8:	3701                	jal	cc8 <ntru_deceypt+0x48>
     dca:	1702                	slli	a4,a4,0x20
     dcc:	0069                	c.nop	26
     dce:	0000                	unimp
     dd0:	0438                	addi	a4,sp,520
     dd2:	0000                	unimp
     dd4:	7132                	flw	ft2,44(sp)
     dd6:	0100                	addi	s0,sp,128
     dd8:	691e0237          	lui	tp,0x691e0
     ddc:	0000                	unimp
     dde:	6400                	flw	fs0,8(s0)
     de0:	0004                	0x4
     de2:	3300                	fld	fs0,32(a4)
     de4:	0404                	addi	s1,sp,512
     de6:	0000                	unimp
     de8:	3701                	jal	ce8 <ntru_deceypt+0x68>
     dea:	2602                	fld	fa2,0(sp)
     dec:	00000ba7          	0xba7
     df0:	0000049b          	0x49b
     df4:	00059a33          	sll	s4,a1,zero
     df8:	0100                	addi	s0,sp,128
     dfa:	a7340237          	lui	tp,0xa7340
     dfe:	d200000b          	0xd200000b
     e02:	0004                	0x4
     e04:	3300                	fld	fs0,32(a4)
     e06:	06d1                	addi	a3,a3,20
     e08:	0000                	unimp
     e0a:	3701                	jal	d0a <ntru_deceypt+0x8a>
     e0c:	4502                	lw	a0,0(sp)
     e0e:	00000ba7          	0xba7
     e12:	04fe                	slli	s1,s1,0x1f
     e14:	0000                	unimp
     e16:	0002b52b          	0x2b52b
     e1a:	0100                	addi	s0,sp,128
     e1c:	0239                	addi	tp,tp,14
     e1e:	a70a                	fsd	ft2,392(sp)
     e20:	3400000b          	0x3400000b
     e24:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     e28:	023a                	slli	tp,tp,0xe
     e2a:	a70a                	fsd	ft2,392(sp)
     e2c:	0100000b          	0x100000b
     e30:	2a5a                	fld	fs4,400(sp)
     e32:	0384                	addi	s1,sp,448
     e34:	0000                	unimp
     e36:	3c01                	jal	846 <ext_euclid+0x18c>
     e38:	0902                	c.slli64	s2
     e3a:	0bad                	addi	s7,s7,11
     e3c:	0000                	unimp
     e3e:	7ea09103          	lh	sp,2026(ra)
     e42:	3428                	fld	fa0,104(s0)
     e44:	0002                	c.slli64	zero
     e46:	0100                	addi	s0,sp,128
     e48:	023d                	addi	tp,tp,15
     e4a:	a70a                	fsd	ft2,392(sp)
     e4c:	3500000b          	0x3500000b
     e50:	0005                	c.nop	1
     e52:	2c00                	fld	fs0,24(s0)
     e54:	0069                	c.nop	26
     e56:	3e01                	jal	966 <generate_keys+0x62>
     e58:	0902                	c.slli64	s2
     e5a:	0069                	c.nop	26
     e5c:	0000                	unimp
     e5e:	055e                	slli	a0,a0,0x17
     e60:	0000                	unimp
     e62:	202d                	jal	e8c <memcpy+0xce>
     e64:	000c                	0xc
     e66:	2a00                	fld	fs0,16(a2)
     e68:	001c                	0x1c
     e6a:	8500                	0x8500
     e6c:	000e                	c.slli	zero,0x3
     e6e:	2e00                	fld	fs0,24(a2)
     e70:	5a01                	li	s4,-32
     e72:	7202                	flw	ft4,32(sp)
     e74:	2e00                	fld	fs0,24(a2)
     e76:	5b01                	li	s6,-32
     e78:	0305                	addi	t1,t1,1
     e7a:	10f0                	addi	a2,sp,108
     e7c:	0000                	unimp
     e7e:	012e                	slli	sp,sp,0xb
     e80:	025c                	addi	a5,sp,260
     e82:	c008                	sw	a0,0(s0)
     e84:	2d00                	fld	fs0,24(a0)
     e86:	0c32                	slli	s8,s8,0xc
     e88:	0000                	unimp
     e8a:	000018d7          	0x18d7
     e8e:	0eb6                	slli	t4,t4,0xd
     e90:	0000                	unimp
     e92:	012e                	slli	sp,sp,0xb
     e94:	025a                	slli	tp,tp,0x16
     e96:	012e0083          	lb	ra,18(t3)
     e9a:	0078025b          	0x78025b
     e9e:	012e                	slli	sp,sp,0xb
     ea0:	025c                	addi	a5,sp,260
     ea2:	0072                	c.slli	zero,0x1c
     ea4:	012e                	slli	sp,sp,0xb
     ea6:	025d                	addi	tp,tp,23
     ea8:	3008                	fld	fa0,32(s0)
     eaa:	012e                	slli	sp,sp,0xb
     eac:	025e                	slli	tp,tp,0x17
     eae:	0082                	c.slli64	ra
     eb0:	012e                	slli	sp,sp,0xb
     eb2:	015f 0030 422d      	0x422d0030015f
     eb8:	000c                	0xc
     eba:	4c00                	lw	s0,24(s0)
     ebc:	d700001b          	0xd700001b
     ec0:	000e                	c.slli	zero,0x3
     ec2:	2e00                	fld	fs0,24(a2)
     ec4:	5a01                	li	s4,-32
     ec6:	8302                	jr	t1
     ec8:	2e00                	fld	fs0,24(a2)
     eca:	5b01                	li	s6,-32
     ecc:	5c01f303          	0x5c01f303
     ed0:	012e                	slli	sp,sp,0xb
     ed2:	025c                	addi	a5,sp,260
     ed4:	3008                	fld	fa0,32(s0)
     ed6:	2f00                	fld	fs0,24(a4)
     ed8:	0c52                	slli	s8,s8,0x14
     eda:	0000                	unimp
     edc:	00001433          	sll	s0,zero,zero
     ee0:	012e                	slli	sp,sp,0xb
     ee2:	025a                	slli	tp,tp,0x16
     ee4:	012e0083          	lb	ra,18(t3)
     ee8:	0079025b          	0x79025b
     eec:	012e                	slli	sp,sp,0xb
     eee:	025c                	addi	a5,sp,260
     ef0:	0084                	addi	s1,sp,64
     ef2:	012e                	slli	sp,sp,0xb
     ef4:	025d                	addi	tp,tp,23
     ef6:	0178                	addi	a4,sp,140
     ef8:	012e                	slli	sp,sp,0xb
     efa:	025e                	slli	tp,tp,0x17
     efc:	0082                	c.slli64	ra
     efe:	0000                	unimp
     f00:	1f31                	addi	t5,t5,-20
     f02:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     f06:	01de                	slli	gp,gp,0x17
     f08:	a706                	fsd	ft1,392(sp)
     f0a:	0400000b          	0x400000b
     f0e:	0009                	c.nop	2
     f10:	f400                	fsw	fs0,40(s0)
     f12:	0002                	c.slli64	zero
     f14:	0100                	addi	s0,sp,128
     f16:	b09c                	fsd	fa5,32(s1)
     f18:	0010                	0x10
     f1a:	3200                	fld	fs0,32(a2)
     f1c:	004e                	c.slli	zero,0x13
     f1e:	de01                	beqz	a2,e36 <memcpy+0x78>
     f20:	1801                	addi	a6,a6,-32
     f22:	0069                	c.nop	26
     f24:	0000                	unimp
     f26:	0594                	addi	a3,sp,704
     f28:	0000                	unimp
     f2a:	7032                	flw	ft0,44(sp)
     f2c:	0100                	addi	s0,sp,128
     f2e:	01de                	slli	gp,gp,0x17
     f30:	691f 0000 e500      	0xe5000000691f
     f36:	0005                	c.nop	1
     f38:	3200                	fld	fs0,32(a2)
     f3a:	0071                	c.nop	28
     f3c:	de01                	beqz	a2,e54 <memcpy+0x96>
     f3e:	2601                	jal	123e <__DTOR_END__+0x14e>
     f40:	0069                	c.nop	26
     f42:	0000                	unimp
int main(){
     f44:	061c                	addi	a5,sp,768
     f46:	0000                	unimp
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f48:	6634                	flw	fa3,72(a2)
     f4a:	0100                	addi	s0,sp,128
     f4c:	01e1                	addi	gp,gp,24
     f4e:	b009                	j	750 <ext_euclid+0x96>
     f50:	0010                	0x10
     f52:	0300                	addi	s0,sp,384
     f54:	9891                	andi	s1,s1,-28
int main(){
     f56:	347c                	fld	fa5,232(s0)
     f58:	e2010067          	jr	-480(sp)
     f5c:	0901                	addi	s2,s2,0
     f5e:	10b0                	addi	a2,sp,104
     f60:	0000                	unimp
     f62:	7df49103          	lh	sp,2015(s1)
	resultkon[0] = 0xAAAAAAA0;
     f66:	662c                	flw	fa1,72(a2)
     f68:	0070                	addi	a2,sp,12
int main(){
     f6a:	e401                	bnez	s0,f72 <main+0x2e>
     f6c:	0a01                	addi	s4,s4,0
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f6e:	00000ba7          	0xba7
	resultkon[0] = 0xAAAAAAA0;
     f72:	00000653          	fadd.s	fa2,ft0,ft0,rne
     f76:	662c                	flw	fa1,72(a2)
     f78:	0071                	c.nop	28
     f7a:	e501                	bnez	a0,f82 <main+0x3e>
     f7c:	0a01                	addi	s4,s4,0
 	*var = resultkon[0];
     f7e:	00000ba7          	0xba7
    keys = generate_keys(N, p, q);
     f82:	0666                	slli	a2,a2,0x19
     f84:	0000                	unimp
 	*var = resultkon[0];
     f86:	662c                	flw	fa1,72(a2)
     f88:	e6010067          	jr	-416(sp)
     f8c:	0a01                	addi	s4,s4,0
    keys = generate_keys(N, p, q);
     f8e:	00000ba7          	0xba7
     f92:	0684                	addi	s1,sp,832
	resultkon[0] = 0xAAAAAAA1;
     f94:	0000                	unimp
     f96:	702c                	flw	fa1,96(s0)
    keys = generate_keys(N, p, q);
     f98:	e701006b          	0xe701006b
 	*var = resultkon[0];
     f9c:	0a01                	addi	s4,s4,0
    for(i = 0; i < N; ++i){
     f9e:	00000ba7          	0xba7
 	*var = resultkon[0];
     fa2:	06a2                	slli	a3,a3,0x8
     fa4:	0000                	unimp
     fa6:	d128                	sw	a0,96(a0)
     fa8:	0006                	c.slli	zero,0x1
     faa:	0100                	addi	s0,sp,128
        secret_key_f[i] = keys[i];
     fac:	01e8                	addi	a0,sp,204
     fae:	c009                	beqz	s0,fb0 <main+0x6c>
     fb0:	0010                	0x10
     fb2:	c000                	sw	s0,0(s0)
     fb4:	0006                	c.slli	zero,0x1
     fb6:	2c00                	fld	fs0,24(s0)
    for(i = 0; i < N; ++i){
     fb8:	0069                	c.nop	26
     fba:	e901                	bnez	a0,fca <main+0x86>
     fbc:	0901                	addi	s2,s2,0
    for(i = N; i < (2*N); ++i){
     fbe:	0069                	c.nop	26
     fc0:	0000                	unimp
     fc2:	00000723          	sb	zero,14(zero) # e <__DYNAMIC+0xe>
     fc6:	1528                	addi	a0,sp,680
     fc8:	0004                	0x4
        secret_key_fp[i-(2*N)] = keys[i];
     fca:	0100                	addi	s0,sp,128
     fcc:	01ea                	slli	gp,gp,0x1a
     fce:	a70a                	fsd	ft2,392(sp)
     fd0:	5f00000b          	0x5f00000b
    for(i = (2*N); i < (3*N); ++i){
     fd4:	0008                	0x8
     fd6:	3500                	fld	fs0,40(a0)
    for(i = (3*N); i < (4*N); ++i){
     fd8:	0075                	c.nop	29
     fda:	0000                	unimp
     fdc:	00000877          	0x877
     fe0:	4a2d                	li	s4,11
     fe2:	0009                	c.nop	2
        public_key[i-(4*N)] = keys[i];
     fe4:	3500                	fld	fs0,40(a0)
     fe6:	001c                	0x1c
     fe8:	0000                	unimp
     fea:	0010                	0x10
     fec:	2e00                	fld	fs0,24(a2)
    for(i = (4*N); i < (5*N); ++i){
     fee:	5a01                	li	s4,-32
     ff0:	7ca47803          	0x7ca47803
     ff4:	012e                	slli	sp,sp,0xb
     ff6:	2e30015b          	0x2e30015b
        ring_poly[i-(5*N)] = keys[i];
     ffa:	5c01                	li	s8,-32
     ffc:	0802                	c.slli64	a6
     ffe:	00d0                	addi	a2,sp,68
    1000:	ca2d                	beqz	a2,1072 <main+0x12e>
    1002:	0009                	c.nop	2
    for(i = (5*N); i < (6*N+1); ++i){
    1004:	3500                	fld	fs0,40(a0)
    1006:	001c                	0x1c
	resultkon[0] = 0xBBBBBBB0;
    1008:	2000                	fld	fs0,0(s0)
    100a:	0010                	0x10
    100c:	2e00                	fld	fs0,24(a2)
    100e:	5a01                	li	s4,-32
    1010:	7df87803          	0x7df87803
 	*var = resultkon[0];
    1014:	012e                	slli	sp,sp,0xb
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1016:	2e30015b          	0x2e30015b
 	*var = resultkon[0];
    101a:	5c01                	li	s8,-32
    101c:	0802                	c.slli64	a6
    101e:	00d8                	addi	a4,sp,68
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1020:	922d                	srli	a2,a2,0x2b
    1022:	000a                	c.slli	zero,0x2
    1024:	d300                	sw	s0,32(a4)
	resultkon[0] = 0xBBBBBBB1;
    1026:	0010                	0x10
    1028:	4700                	lw	s0,8(a4)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    102a:	0010                	0x10
    102c:	2e00                	fld	fs0,24(a2)
    102e:	5a01                	li	s4,-32
	resultkon[0] = 0xBBBBBBB1;
    1030:	7202                	flw	ft4,32(sp)
    1032:	2e00                	fld	fs0,24(a2)
 	*var = resultkon[0];
    1034:	5b01                	li	s6,-32
	resultkon[0] = 0xCCCCCCC0;
    1036:	7c987803          	0x7c987803
    103a:	012e                	slli	sp,sp,0xb
    103c:	025c                	addi	a5,sp,260
 	*var = resultkon[0];
    103e:	0085                	addi	ra,ra,1
    1040:	012e                	slli	sp,sp,0xb
    1042:	025d                	addi	tp,tp,23
    1044:	2d000087          	0x2d000087
 	*var = resultkon[0];
    1048:	0aac                	addi	a1,sp,344
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    104a:	0000                	unimp
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    104c:	000010d3          	fadd.s	ft1,ft0,ft0,rtz
 	*var = resultkon[0];
    1050:	106e                	c.slli	zero,0x3b
    1052:	0000                	unimp
    1054:	012e                	slli	sp,sp,0xb
    1056:	025a                	slli	tp,tp,0x16
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1058:	0072                	c.slli	zero,0x1c
    105a:	012e                	slli	sp,sp,0xb
    105c:	9878035b          	0x9878035b
    1060:	2e7c                	fld	fa5,216(a2)
    1062:	5c01                	li	s8,-32
    1064:	8502                	jr	a0
	resultkon[0] = 0xCCCCCCC1;
    1066:	2e00                	fld	fs0,24(a2)
    1068:	5d01                	li	s10,-32
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    106a:	8602                	jr	a2
	resultkon[0] = 0xCCCCCCC1;
    106c:	0000                	unimp
    106e:	cc2d                	beqz	s0,10e8 <__CTOR_END__>
 	*var = resultkon[0];
    1070:	000a                	c.slli	zero,0x2
            resultkon[0] = 0xDEDEDEDE;
    1072:	8400                	0x8400
    1074:	93000017          	auipc	zero,0x93000
    1078:	0010                	0x10
 	*var = resultkon[0];
    107a:	2e00                	fld	fs0,24(a2)
    107c:	5b01                	li	s6,-32
    107e:	8202                	jr	tp
    1080:	2e00                	fld	fs0,24(a2)
	    *var = resultkon[0];
    1082:	5c01                	li	s8,-32
 	*var = resultkon[0];
    1084:	8902                	jr	s2
    for(i = 0; i < 32; ++i){
    1086:	2e00                	fld	fs0,24(a2)
    1088:	5d01                	li	s10,-32
        if(!(message[i] == Dec_Message[i])){
    108a:	8202                	jr	tp
    108c:	2e00                	fld	fs0,24(a2)
    108e:	5e01                	li	t3,-32
    1090:	3001                	jal	890 <ext_euclid+0x1d6>
    1092:	2f00                	fld	fs0,24(a4)
    1094:	0ae0                	addi	s0,sp,348
    1096:	0000                	unimp
    1098:	00001433          	sll	s0,zero,zero
            resultkon[0] = 0xBABABABA;
    109c:	012e                	slli	sp,sp,0xb
    109e:	025c                	addi	a5,sp,260
    10a0:	0072                	c.slli	zero,0x1c
    10a2:	012e                	slli	sp,sp,0xb
 	    *var = resultkon[0];
    10a4:	025d                	addi	tp,tp,23
    10a6:	0085                	addi	ra,ra,1
    10a8:	012e                	slli	sp,sp,0xb
    10aa:	025e                	slli	tp,tp,0x17
    10ac:	0086                	slli	ra,ra,0x1
    10ae:	0000                	unimp
}
    10b0:	6909                	lui	s2,0x2
    10b2:	0000                	unimp
    10b4:	c000                	sw	s0,0(s0)
    10b6:	0010                	0x10
    10b8:	0a00                	addi	s0,sp,272
    10ba:	0075                	c.nop	29
    10bc:	0000                	unimp
    10be:	0036                	c.slli	zero,0xd
    10c0:	6909                	lui	s2,0x2
    10c2:	0000                	unimp
    10c4:	d300                	sw	s0,32(a4)
    10c6:	0010                	0x10
    10c8:	3600                	fld	fs0,40(a2)
    10ca:	0075                	c.nop	29
            resultkon[0] = 0xDEDEDEDE;
    10cc:	0000                	unimp
	    *var = resultkon[0];
    10ce:	00000fd7          	0xfd7
    10d2:	3100                	fld	fs0,32(a0)
    10d4:	00000363          	beqz	zero,10da <main+0x196>
    10d8:	6601                	0x6601
    for(i = 0; i < 32; ++i){
    10da:	0601                	addi	a2,a2,0
    10dc:	00000ba7          	0xba7
    10e0:	06ba                	slli	a3,a3,0xe
    10e2:	0000                	unimp
    10e4:	024a                	slli	tp,tp,0x12
    10e6:	0000                	unimp
    10e8:	9c01                	0x9c01
    10ea:	13ae                	slli	t2,t2,0x2b
    10ec:	0000                	unimp
    10ee:	0006d133          	srl	sp,a3,zero
    10f2:	0100                	addi	s0,sp,128
    10f4:	0166                	slli	sp,sp,0x19
    10f6:	a716                	fsd	ft5,392(sp)
    10f8:	bd00000b          	0xbd00000b
    10fc:	0008                	0x8
    10fe:	3300                	fld	fs0,32(a4)
    1100:	019c                	addi	a5,sp,192
    1102:	0000                	unimp
    1104:	6601                	0x6601
    1106:	2201                	jal	1206 <__DTOR_END__+0x116>
    1108:	00000ba7          	0xba7
    110c:	000008f7          	0x8f7
    1110:	00001233          	sll	tp,zero,zero
    1114:	0100                	addi	s0,sp,128
    1116:	0166                	slli	sp,sp,0x19
    1118:	692d                	lui	s2,0xb
    111a:	0000                	unimp
    111c:	3100                	fld	fs0,32(a0)
    111e:	0009                	c.nop	2
    1120:	3200                	fld	fs0,32(a2)
    1122:	6f6d                	lui	t5,0x1b
    1124:	0064                	addi	s1,sp,12
    1126:	6601                	0x6601
    1128:	3701                	jal	1028 <main+0xe4>
    112a:	0069                	c.nop	26
    112c:	0000                	unimp
    112e:	0968                	addi	a0,sp,156
    1130:	0000                	unimp
    1132:	9e28                	0x9e28
    1134:	0002                	c.slli64	zero
    1136:	0100                	addi	s0,sp,128
    1138:	0169                	addi	sp,sp,26
    113a:	a70a                	fsd	ft2,392(sp)
    113c:	9f00000b          	0x9f00000b
    1140:	0009                	c.nop	2
    1142:	2c00                	fld	fs0,24(s0)
    1144:	004e                	c.slli	zero,0x13
    1146:	6a01                	0x6a01
    1148:	0901                	addi	s2,s2,0
    114a:	0069                	c.nop	26
    114c:	0000                	unimp
    114e:	000009b7          	lui	s3,0x0
    1152:	692c                	flw	fa1,80(a0)
    1154:	0100                	addi	s0,sp,128
    1156:	016a                	slli	sp,sp,0x1a
    1158:	690c                	flw	fa1,16(a0)
    115a:	0000                	unimp
    115c:	f200                	fsw	fs0,32(a2)
    115e:	0009                	c.nop	2
    1160:	2c00                	fld	fs0,24(s0)
    1162:	006a                	c.slli	zero,0x1a
    1164:	6a01                	0x6a01
    1166:	0f01                	addi	t5,t5,0
    1168:	0069                	c.nop	26
    116a:	0000                	unimp
    116c:	00000b9b          	0xb9b
    1170:	6728                	flw	fa0,72(a4)
    1172:	0005                	c.nop	1
    1174:	0100                	addi	s0,sp,128
    1176:	ae09016b          	0xae09016b
    117a:	b9000013          	li	zero,-1136
    117e:	2800000b          	0x2800000b
    1182:	05e5                	addi	a1,a1,25
    1184:	0000                	unimp
    1186:	6c01                	0x6c01
    1188:	0901                	addi	s2,s2,0
    118a:	13c1                	addi	t2,t2,-16
    118c:	0000                	unimp
    118e:	0bd9                	addi	s7,s7,22
    1190:	0000                	unimp
    1192:	722c                	flw	fa1,96(a2)
    1194:	0069                	c.nop	26
    1196:	6d01                	0x6d01
    1198:	0901                	addi	s2,s2,0
    119a:	13d4                	addi	a3,sp,484
    119c:	0000                	unimp
    119e:	0bf9                	addi	s7,s7,30
    11a0:	0000                	unimp
    11a2:	8428                	0x8428
    11a4:	0004                	0x4
    11a6:	0100                	addi	s0,sp,128
    11a8:	e709016f          	jal	sp,fff91818 <_stack_start+0xfff81818>
    11ac:	19000013          	li	zero,400
    11b0:	000c                	0xc
    11b2:	2c00                	fld	fs0,24(s0)
    11b4:	6974                	flw	fa3,84(a0)
    11b6:	0100                	addi	s0,sp,128
    11b8:	0170                	addi	a2,sp,140
    11ba:	fa09                	bnez	a2,10cc <main+0x188>
    11bc:	4f000013          	li	zero,1264
    11c0:	000c                	0xc
    11c2:	2800                	fld	fs0,16(s0)
    11c4:	049c                	addi	a5,sp,576
    11c6:	0000                	unimp
    11c8:	7101                	addi	sp,sp,-512
    11ca:	0901                	addi	s2,s2,0
    11cc:	140d                	addi	s0,s0,-29
    11ce:	0000                	unimp
    11d0:	00000c6f          	jal	s8,11d0 <__DTOR_END__+0xe0>
    11d4:	3428                	fld	fa0,104(s0)
    11d6:	0002                	c.slli64	zero
    11d8:	0100                	addi	s0,sp,128
    11da:	0172                	slli	sp,sp,0x1c
    11dc:	2009                	jal	11de <__DTOR_END__+0xee>
    11de:	0014                	0x14
    11e0:	a500                	fsd	fs0,8(a0)
    11e2:	000c                	0xc
    11e4:	2c00                	fld	fs0,24(s0)
    11e6:	6572                	flw	fa0,28(sp)
    11e8:	73010073          	0x73010073
    11ec:	0a01                	addi	s4,s4,0
    11ee:	00000ba7          	0xba7
    11f2:	0cff                	0xcff
    11f4:	0000                	unimp
    11f6:	6328                	flw	fa0,64(a4)
    11f8:	0001                	nop
    11fa:	0100                	addi	s0,sp,128
    11fc:	0174                	addi	a3,sp,140
    11fe:	a70a                	fsd	ft2,392(sp)
    1200:	1d00000b          	0x1d00000b
    1204:	000d                	c.nop	3
    1206:	2800                	fld	fs0,16(s0)
    1208:	0168                	addi	a0,sp,140
    120a:	0000                	unimp
    120c:	7501                	lui	a0,0xfffe0
    120e:	0a01                	addi	s4,s4,0
    1210:	00000ba7          	0xba7
    1214:	00000d3b          	0xd3b
    1218:	5528                	lw	a0,104(a0)
    121a:	0004                	0x4
    121c:	0100                	addi	s0,sp,128
    121e:	0176                	slli	sp,sp,0x1d
    1220:	6909                	lui	s2,0x2
    1222:	0000                	unimp
    1224:	5900                	lw	s0,48(a0)
    1226:	000d                	c.nop	3
    1228:	3500                	fld	fs0,40(a0)
    122a:	0075                	c.nop	29
    122c:	0000                	unimp
    122e:	0db2                	slli	s11,s11,0xc
    1230:	0000                	unimp
    1232:	7535                	lui	a0,0xfffed
    1234:	0000                	unimp
    1236:	ed00                	fsw	fs0,24(a0)
    1238:	000d                	c.nop	3
    123a:	3500                	fld	fs0,40(a0)
    123c:	0075                	c.nop	29
    123e:	0000                	unimp
    1240:	0e28                	addi	a0,sp,792
    1242:	0000                	unimp
    1244:	7535                	lui	a0,0xfffed
    1246:	0000                	unimp
    1248:	6300                	flw	fs0,0(a4)
    124a:	000e                	c.slli	zero,0x3
    124c:	3500                	fld	fs0,40(a0)
    124e:	0075                	c.nop	29
    1250:	0000                	unimp
    1252:	0e9e                	slli	t4,t4,0x7
    1254:	0000                	unimp
    1256:	7535                	lui	a0,0xfffed
    1258:	0000                	unimp
    125a:	d900                	sw	s0,48(a0)
    125c:	000e                	c.slli	zero,0x3
    125e:	3500                	fld	fs0,40(a0)
    1260:	0075                	c.nop	29
    1262:	0000                	unimp
    1264:	0f14                	addi	a3,sp,912
    1266:	0000                	unimp
    1268:	402d                	c.li	zero,11
    126a:	ae000007          	0xae000007
    126e:	001a                	c.slli	zero,0x6
    1270:	8800                	0x8800
    1272:	0012                	c.slli	zero,0x4
    1274:	2e00                	fld	fs0,24(a2)
    1276:	5a01                	li	s4,-32
    1278:	8302                	jr	t1
    127a:	2e00                	fld	fs0,24(a2)
    127c:	5b01                	li	s6,-32
    127e:	7902                	flw	fs2,32(sp)
    1280:	2e00                	fld	fs0,24(a2)
    1282:	5c01                	li	s8,-32
    1284:	8b02                	jr	s6
    1286:	0000                	unimp
    1288:	482d                	li	a6,11
    128a:	ae000007          	0xae000007
    128e:	001a                	c.slli	zero,0x6
    1290:	a800                	fsd	fs0,16(s0)
    1292:	0012                	c.slli	zero,0x4
    1294:	2e00                	fld	fs0,24(a2)
    1296:	5a01                	li	s4,-32
    1298:	8502                	jr	a0
    129a:	2e00                	fld	fs0,24(a2)
    129c:	5b01                	li	s6,-32
    129e:	7902                	flw	fs2,32(sp)
    12a0:	2e00                	fld	fs0,24(a2)
    12a2:	5c01                	li	s8,-32
    12a4:	8b02                	jr	s6
    12a6:	0000                	unimp
    12a8:	542d                	li	s0,-21
    12aa:	33000007          	0x33000007
    12ae:	0014                	0x14
    12b0:	d400                	sw	s0,40(s0)
    12b2:	0012                	c.slli	zero,0x4
    12b4:	2e00                	fld	fs0,24(a2)
    12b6:	5a01                	li	s4,-32
    12b8:	8302                	jr	t1
    12ba:	2e00                	fld	fs0,24(a2)
    12bc:	5b01                	li	s6,-32
    12be:	8b02                	jr	s6
    12c0:	2e00                	fld	fs0,24(a2)
    12c2:	5c01                	li	s8,-32
    12c4:	8502                	jr	a0
    12c6:	2e00                	fld	fs0,24(a2)
    12c8:	5d01                	li	s10,-32
    12ca:	8b02                	jr	s6
    12cc:	2e00                	fld	fs0,24(a2)
    12ce:	5e01                	li	t3,-32
    12d0:	7902                	flw	fs2,32(sp)
    12d2:	0000                	unimp
    12d4:	702d                	c.lui	zero,0xfffeb
    12d6:	ae000007          	0xae000007
    12da:	001a                	c.slli	zero,0x6
    12dc:	f400                	fsw	fs0,40(s0)
    12de:	0012                	c.slli	zero,0x4
    12e0:	2e00                	fld	fs0,24(a2)
    12e2:	5a01                	li	s4,-32
    12e4:	7202                	flw	ft4,32(sp)
    12e6:	2e00                	fld	fs0,24(a2)
    12e8:	5b01                	li	s6,-32
    12ea:	7902                	flw	fs2,32(sp)
    12ec:	2e00                	fld	fs0,24(a2)
    12ee:	5c01                	li	s8,-32
    12f0:	8b02                	jr	s6
    12f2:	0000                	unimp
    12f4:	7c2d                	lui	s8,0xfffeb
    12f6:	33000007          	0x33000007
    12fa:	0014                	0x14
    12fc:	2000                	fld	fs0,0(s0)
    12fe:	2e000013          	li	zero,736
    1302:	5a01                	li	s4,-32
    1304:	7202                	flw	ft4,32(sp)
    1306:	2e00                	fld	fs0,24(a2)
    1308:	5b01                	li	s6,-32
    130a:	8b02                	jr	s6
    130c:	2e00                	fld	fs0,24(a2)
    130e:	5c01                	li	s8,-32
    1310:	8502                	jr	a0
    1312:	2e00                	fld	fs0,24(a2)
    1314:	5d01                	li	s10,-32
    1316:	8b02                	jr	s6
    1318:	2e00                	fld	fs0,24(a2)
    131a:	5e01                	li	t3,-32
    131c:	7902                	flw	fs2,32(sp)
    131e:	0000                	unimp
    1320:	8a2d                	andi	a2,a2,11
    1322:	ae000007          	0xae000007
    1326:	001a                	c.slli	zero,0x6
    1328:	4000                	lw	s0,0(s0)
    132a:	2e000013          	li	zero,736
    132e:	5a01                	li	s4,-32
    1330:	8702                	jr	a4
    1332:	2e00                	fld	fs0,24(a2)
    1334:	5b01                	li	s6,-32
    1336:	7902                	flw	fs2,32(sp)
    1338:	2e00                	fld	fs0,24(a2)
    133a:	5c01                	li	s8,-32
    133c:	8b02                	jr	s6
    133e:	0000                	unimp
    1340:	982d                	andi	s0,s0,-21
    1342:	d7000007          	0xd7000007
    1346:	0018                	0x18
    1348:	7100                	flw	fs0,32(a0)
    134a:	2e000013          	li	zero,736
    134e:	5a01                	li	s4,-32
    1350:	8702                	jr	a4
    1352:	2e00                	fld	fs0,24(a2)
    1354:	5b01                	li	s6,-32
    1356:	8b02                	jr	s6
    1358:	2e00                	fld	fs0,24(a2)
    135a:	5c01                	li	s8,-32
    135c:	8602                	jr	a2
    135e:	2e00                	fld	fs0,24(a2)
    1360:	5d01                	li	s10,-32
    1362:	8b02                	jr	s6
    1364:	2e00                	fld	fs0,24(a2)
    1366:	5e01                	li	t3,-32
    1368:	7902                	flw	fs2,32(sp)
    136a:	2e00                	fld	fs0,24(a2)
    136c:	5f01                	li	t5,-32
    136e:	3001                	jal	b6e <generate_keys+0x26a>
    1370:	2d00                	fld	fs0,24(a0)
    1372:	07a6                	slli	a5,a5,0x9
    1374:	0000                	unimp
    1376:	1aae                	slli	s5,s5,0x2b
    1378:	0000                	unimp
    137a:	1391                	addi	t2,t2,-28
    137c:	0000                	unimp
    137e:	012e                	slli	sp,sp,0xb
    1380:	025a                	slli	tp,tp,0x16
    1382:	0072                	c.slli	zero,0x1c
    1384:	012e                	slli	sp,sp,0xb
    1386:	0079025b          	0x79025b
    138a:	012e                	slli	sp,sp,0xb
    138c:	025c                	addi	a5,sp,260
    138e:	2f00008b          	0x2f00008b
    1392:	07b6                	slli	a5,a5,0xd
    1394:	0000                	unimp
    1396:	1aae                	slli	s5,s5,0x2b
    1398:	0000                	unimp
    139a:	012e                	slli	sp,sp,0xb
    139c:	025a                	slli	tp,tp,0x16
    139e:	0089                	addi	ra,ra,2
    13a0:	012e                	slli	sp,sp,0xb
    13a2:	0079025b          	0x79025b
    13a6:	012e                	slli	sp,sp,0xb
    13a8:	025c                	addi	a5,sp,260
    13aa:	0000008b          	0x8b
    13ae:	6909                	lui	s2,0x2
    13b0:	0000                	unimp
    13b2:	c100                	sw	s0,0(a0)
    13b4:	36000013          	li	zero,864
    13b8:	0075                	c.nop	29
    13ba:	0000                	unimp
    13bc:	1229                	addi	tp,tp,-22
    13be:	0000                	unimp
    13c0:	0900                	addi	s0,sp,144
    13c2:	0069                	c.nop	26
    13c4:	0000                	unimp
    13c6:	13d4                	addi	a3,sp,484
    13c8:	0000                	unimp
    13ca:	7536                	flw	fa0,108(sp)
    13cc:	0000                	unimp
    13ce:	3200                	fld	fs0,32(a2)
    13d0:	0012                	c.slli	zero,0x4
    13d2:	0000                	unimp
    13d4:	6909                	lui	s2,0x2
    13d6:	0000                	unimp
    13d8:	e700                	fsw	fs0,8(a4)
    13da:	36000013          	li	zero,864
    13de:	0075                	c.nop	29
    13e0:	0000                	unimp
    13e2:	0000123b          	0x123b
    13e6:	0900                	addi	s0,sp,144
    13e8:	0069                	c.nop	26
    13ea:	0000                	unimp
    13ec:	13fa                	slli	t2,t2,0x3e
    13ee:	0000                	unimp
    13f0:	7536                	flw	fa0,108(sp)
    13f2:	0000                	unimp
    13f4:	4400                	lw	s0,8(s0)
    13f6:	0012                	c.slli	zero,0x4
    13f8:	0000                	unimp
    13fa:	6909                	lui	s2,0x2
    13fc:	0000                	unimp
    13fe:	0d00                	addi	s0,sp,656
    1400:	0014                	0x14
    1402:	3600                	fld	fs0,40(a2)
    1404:	0075                	c.nop	29
    1406:	0000                	unimp
    1408:	124d                	addi	tp,tp,-13
    140a:	0000                	unimp
    140c:	0900                	addi	s0,sp,144
    140e:	0069                	c.nop	26
    1410:	0000                	unimp
    1412:	1420                	addi	s0,sp,552
    1414:	0000                	unimp
    1416:	7536                	flw	fa0,108(sp)
    1418:	0000                	unimp
    141a:	5600                	lw	s0,40(a2)
    141c:	0012                	c.slli	zero,0x4
    141e:	0000                	unimp
    1420:	6909                	lui	s2,0x2
    1422:	0000                	unimp
    1424:	3300                	fld	fs0,32(a4)
    1426:	0014                	0x14
    1428:	3600                	fld	fs0,40(a2)
    142a:	0075                	c.nop	29
    142c:	0000                	unimp
    142e:	125f 0000 3700      	0x37000000125f
    1434:	0194                	addi	a3,sp,192
    1436:	0000                	unimp
    1438:	c001                	beqz	s0,1438 <_bss_start+0x1c4>
    143a:	a706                	fsd	ft1,392(sp)
    143c:	e400000b          	0xe400000b
    1440:	d6000003          	lb	zero,-672(zero) # fffffd60 <_stack_start+0xfffefd60>
    1444:	0002                	c.slli64	zero
    1446:	0100                	addi	s0,sp,128
    1448:	389c                	fld	fa5,48(s1)
    144a:	38000017          	auipc	zero,0x38000
    144e:	756e                	flw	fa0,248(sp)
    1450:	006d                	c.nop	27
    1452:	c001                	beqz	s0,1452 <_bss_start+0x1de>
    1454:	000ba713          	slti	a4,s7,0
    1458:	4f00                	lw	s0,24(a4)
    145a:	3900000f          	0x3900000f
    145e:	0110                	addi	a2,sp,128
    1460:	0000                	unimp
    1462:	c001                	beqz	s0,1462 <_bss_start+0x1ee>
    1464:	691c                	flw	fa5,16(a0)
    1466:	0000                	unimp
    1468:	a200                	fsd	fs0,0(a2)
    146a:	3900000f          	0x3900000f
    146e:	000006b3          	add	a3,zero,zero
    1472:	c001                	beqz	s0,1472 <_bss_start+0x1fe>
    1474:	a728                	fsd	fa0,72(a4)
    1476:	1f00000b          	0x1f00000b
    147a:	0010                	0x10
    147c:	3900                	fld	fs0,48(a0)
    147e:	000006d7          	0x6d7
    1482:	c001                	beqz	s0,1482 <_bss_start+0x20e>
    1484:	00006933          	or	s2,zero,zero
    1488:	8500                	0x8500
    148a:	0010                	0x10
    148c:	3800                	fld	fs0,48(s0)
    148e:	6f6d                	lui	t5,0x1b
    1490:	0064                	addi	s1,sp,12
    1492:	c001                	beqz	s0,1492 <_bss_start+0x21e>
    1494:	0000693f 0010bc00 	0x10bc000000693f
    149c:	3a00                	fld	fs0,48(a2)
    149e:	0075                	c.nop	29
    14a0:	c301                	beqz	a4,14a0 <_bss_start+0x22c>
    14a2:	6909                	lui	s2,0x2
    14a4:	0000                	unimp
    14a6:	f300                	fsw	fs0,32(a4)
    14a8:	0010                	0x10
    14aa:	3a00                	fld	fs0,48(a2)
    14ac:	0064                	addi	s1,sp,12
    14ae:	c301                	beqz	a4,14ae <_bss_start+0x23a>
    14b0:	0000690b          	0x690b
    14b4:	1c00                	addi	s0,sp,560
    14b6:	0011                	c.nop	4
    14b8:	3b00                	fld	fs0,48(a4)
    14ba:	3264                	fld	fs1,224(a2)
    14bc:	0100                	addi	s0,sp,128
    14be:	00690dc3          	fmadd.s	fs11,fs2,ft6,ft0,rne
    14c2:	0000                	unimp
    14c4:	693a                	flw	fs2,140(sp)
    14c6:	0100                	addi	s0,sp,128
    14c8:	006910c3          	fmadd.s	ft1,fs2,ft6,ft0,rtz
    14cc:	0000                	unimp
    14ce:	113a                	slli	sp,sp,0x2e
    14d0:	0000                	unimp
    14d2:	4e5f623b          	0x4e5f623b
    14d6:	0100                	addi	s0,sp,128
    14d8:	006912c3          	fmadd.s	ft5,fs2,ft6,ft0,rtz
    14dc:	0000                	unimp
    14de:	723a                	flw	ft4,172(sp)
    14e0:	645f 0100 16c3      	0x16c30100645f
    14e6:	0069                	c.nop	26
    14e8:	0000                	unimp
    14ea:	0000128b          	0x128b
    14ee:	8e3c                	0x8e3c
    14f0:	0002                	c.slli64	zero
    14f2:	0100                	addi	s0,sp,128
    14f4:	0ac4                	addi	s1,sp,340
    14f6:	00000ba7          	0xba7
    14fa:	12a9                	addi	t0,t0,-22
    14fc:	0000                	unimp
    14fe:	763a                	flw	fa2,172(sp)
    1500:	0100                	addi	s0,sp,128
    1502:	09c6                	slli	s3,s3,0x11
    1504:	1738                	addi	a4,sp,936
    1506:	0000                	unimp
    1508:	12c1                	addi	t0,t0,-16
    150a:	0000                	unimp
    150c:	713a                	flw	ft2,172(sp)
    150e:	0100                	addi	s0,sp,128
    1510:	174b09c7          	fmsub.q	fs3,fs6,fs4,ft2,rne
    1514:	0000                	unimp
    1516:	12e1                	addi	t0,t0,-8
    1518:	0000                	unimp
    151a:	8c3c                	0x8c3c
    151c:	0001                	nop
    151e:	0100                	addi	s0,sp,128
    1520:	0ac8                	addi	a0,sp,340
    1522:	00000ba7          	0xba7
    1526:	1301                	addi	t1,t1,-32
    1528:	0000                	unimp
    152a:	303c                	fld	fa5,96(s0)
    152c:	0002                	c.slli64	zero
    152e:	0100                	addi	s0,sp,128
    1530:	09c9                	addi	s3,s3,18
    1532:	175e                	slli	a4,a4,0x37
    1534:	0000                	unimp
    1536:	132e                	slli	t1,t1,0x2b
    1538:	0000                	unimp
    153a:	2e3c                	fld	fa5,88(a2)
    153c:	0002                	c.slli64	zero
    153e:	0100                	addi	s0,sp,128
    1540:	09ca                	slli	s3,s3,0x12
    1542:	1771                	addi	a4,a4,-4
    1544:	0000                	unimp
    1546:	137a                	slli	t1,t1,0x3e
    1548:	0000                	unimp
    154a:	7535                	lui	a0,0xfffed
    154c:	0000                	unimp
    154e:	a600                	fsd	fs0,8(a2)
    1550:	35000013          	li	zero,848
    1554:	0075                	c.nop	29
    1556:	0000                	unimp
    1558:	13d4                	addi	a3,sp,484
    155a:	0000                	unimp
    155c:	7535                	lui	a0,0xfffed
    155e:	0000                	unimp
    1560:	0200                	addi	s0,sp,256
    1562:	0014                	0x14
    1564:	3500                	fld	fs0,40(a0)
    1566:	0075                	c.nop	29
    1568:	0000                	unimp
    156a:	1430                	addi	a2,sp,552
    156c:	0000                	unimp
    156e:	522d                	li	tp,-21
    1570:	0004                	0x4
    1572:	ae00                	fsd	fs0,24(a2)
    1574:	001a                	c.slli	zero,0x6
    1576:	8e00                	0x8e00
    1578:	0015                	c.nop	5
    157a:	2e00                	fld	fs0,24(a2)
    157c:	5a01                	li	s4,-32
    157e:	8302                	jr	t1
    1580:	2e00                	fld	fs0,24(a2)
    1582:	5b01                	li	s6,-32
    1584:	7902                	flw	fs2,32(sp)
    1586:	2e00                	fld	fs0,24(a2)
    1588:	5c01                	li	s8,-32
    158a:	0802                	c.slli64	a6
    158c:	0069                	c.nop	26
    158e:	702d                	c.lui	zero,0xfffeb
    1590:	0004                	0x4
    1592:	ae00                	fsd	fs0,24(a2)
    1594:	001a                	c.slli	zero,0x6
    1596:	ae00                	fsd	fs0,24(a2)
    1598:	0015                	c.nop	5
    159a:	2e00                	fld	fs0,24(a2)
    159c:	5a01                	li	s4,-32
    159e:	7202                	flw	ft4,32(sp)
    15a0:	2e00                	fld	fs0,24(a2)
    15a2:	5b01                	li	s6,-32
    15a4:	7902                	flw	fs2,32(sp)
    15a6:	2e00                	fld	fs0,24(a2)
    15a8:	5c01                	li	s8,-32
    15aa:	8602                	jr	a2
    15ac:	0000                	unimp
    15ae:	b22d                	j	ed8 <memset+0x3c>
    15b0:	0004                	0x4
    15b2:	ae00                	fsd	fs0,24(a2)
    15b4:	001a                	c.slli	zero,0x6
    15b6:	ce00                	sw	s0,24(a2)
    15b8:	0015                	c.nop	5
    15ba:	2e00                	fld	fs0,24(a2)
    15bc:	5a01                	li	s4,-32
    15be:	8302                	jr	t1
    15c0:	2e00                	fld	fs0,24(a2)
    15c2:	5b01                	li	s6,-32
    15c4:	7902                	flw	fs2,32(sp)
    15c6:	2e00                	fld	fs0,24(a2)
    15c8:	5c01                	li	s8,-32
    15ca:	8202                	jr	tp
    15cc:	0000                	unimp
    15ce:	222d                	jal	16f8 <product2+0x22c>
    15d0:	0005                	c.nop	1
    15d2:	ae00                	fsd	fs0,24(a2)
    15d4:	001a                	c.slli	zero,0x6
    15d6:	ee00                	fsw	fs0,24(a2)
    15d8:	0015                	c.nop	5
    15da:	2e00                	fld	fs0,24(a2)
    15dc:	5a01                	li	s4,-32
    15de:	8402                	jr	s0
    15e0:	2e00                	fld	fs0,24(a2)
    15e2:	5b01                	li	s6,-32
    15e4:	7902                	flw	fs2,32(sp)
    15e6:	2e00                	fld	fs0,24(a2)
    15e8:	5c01                	li	s8,-32
    15ea:	0802                	c.slli64	a6
    15ec:	0069                	c.nop	26
    15ee:	402d                	c.li	zero,11
    15f0:	0005                	c.nop	1
    15f2:	d700                	sw	s0,40(a4)
    15f4:	0018                	0x18
    15f6:	1f00                	addi	s0,sp,944
    15f8:	0016                	c.slli	zero,0x5
    15fa:	2e00                	fld	fs0,24(a2)
    15fc:	5a01                	li	s4,-32
    15fe:	7202                	flw	ft4,32(sp)
    1600:	2e00                	fld	fs0,24(a2)
    1602:	5b01                	li	s6,-32
    1604:	8602                	jr	a2
    1606:	2e00                	fld	fs0,24(a2)
    1608:	5c01                	li	s8,-32
    160a:	8402                	jr	s0
    160c:	2e00                	fld	fs0,24(a2)
    160e:	5d01                	li	s10,-32
    1610:	8602                	jr	a2
    1612:	2e00                	fld	fs0,24(a2)
    1614:	5e01                	li	t3,-32
    1616:	7902                	flw	fs2,32(sp)
    1618:	2e00                	fld	fs0,24(a2)
    161a:	5f01                	li	t5,-32
    161c:	3001                	jal	e1c <memcpy+0x5e>
    161e:	2d00                	fld	fs0,24(a0)
    1620:	0550                	addi	a2,sp,644
    1622:	0000                	unimp
    1624:	1aae                	slli	s5,s5,0x2b
    1626:	0000                	unimp
    1628:	1641                	addi	a2,a2,-16
    162a:	0000                	unimp
    162c:	012e                	slli	sp,sp,0xb
    162e:	045a                	slli	s0,s0,0x16
    1630:	bc78                	fsd	fa4,248(s0)
    1632:	067f                	0x67f
    1634:	012e                	slli	sp,sp,0xb
    1636:	0079025b          	0x79025b
    163a:	012e                	slli	sp,sp,0xb
    163c:	025c                	addi	a5,sp,260
    163e:	6908                	flw	fa0,16(a0)
    1640:	2d00                	fld	fs0,24(a0)
    1642:	057a                	slli	a0,a0,0x1e
    1644:	0000                	unimp
    1646:	1aae                	slli	s5,s5,0x2b
    1648:	0000                	unimp
    164a:	1661                	addi	a2,a2,-8
    164c:	0000                	unimp
    164e:	012e                	slli	sp,sp,0xb
    1650:	025a                	slli	tp,tp,0x16
    1652:	012e0083          	lb	ra,18(t3)
    1656:	0079025b          	0x79025b
    165a:	012e                	slli	sp,sp,0xb
    165c:	025c                	addi	a5,sp,260
    165e:	6908                	flw	fa0,16(a0)
    1660:	2d00                	fld	fs0,24(a0)
    1662:	0594                	addi	a3,sp,704
    1664:	0000                	unimp
    1666:	1b4c                	addi	a1,sp,436
    1668:	0000                	unimp
    166a:	1681                	addi	a3,a3,-32
    166c:	0000                	unimp
    166e:	012e                	slli	sp,sp,0xb
    1670:	025a                	slli	tp,tp,0x16
    1672:	0085                	addi	ra,ra,1
    1674:	012e                	slli	sp,sp,0xb
    1676:	0084025b          	0x84025b
    167a:	012e                	slli	sp,sp,0xb
    167c:	025c                	addi	a5,sp,260
    167e:	6908                	flw	fa0,16(a0)
    1680:	2d00                	fld	fs0,24(a0)
    1682:	05ac                	addi	a1,sp,712
    1684:	0000                	unimp
    1686:	1aae                	slli	s5,s5,0x2b
    1688:	0000                	unimp
    168a:	16a1                	addi	a3,a3,-24
    168c:	0000                	unimp
    168e:	012e                	slli	sp,sp,0xb
    1690:	025a                	slli	tp,tp,0x16
    1692:	0085                	addi	ra,ra,1
    1694:	012e                	slli	sp,sp,0xb
    1696:	0079025b          	0x79025b
    169a:	012e                	slli	sp,sp,0xb
    169c:	025c                	addi	a5,sp,260
    169e:	6908                	flw	fa0,16(a0)
    16a0:	2d00                	fld	fs0,24(a0)
    16a2:	05ce                	slli	a1,a1,0x13
    16a4:	0000                	unimp
    16a6:	1aae                	slli	s5,s5,0x2b
    16a8:	0000                	unimp
    16aa:	16c1                	addi	a3,a3,-16
    16ac:	0000                	unimp
    16ae:	012e                	slli	sp,sp,0xb
    16b0:	025a                	slli	tp,tp,0x16
    16b2:	0084                	addi	s1,sp,64
    16b4:	012e                	slli	sp,sp,0xb
    16b6:	0079025b          	0x79025b
    16ba:	012e                	slli	sp,sp,0xb
    16bc:	025c                	addi	a5,sp,260
    16be:	0082                	c.slli64	ra
    16c0:	2d00                	fld	fs0,24(a0)
    16c2:	05de                	slli	a1,a1,0x17
    16c4:	0000                	unimp
    16c6:	1aae                	slli	s5,s5,0x2b
    16c8:	0000                	unimp
    16ca:	000016db          	0x16db
    16ce:	012e                	slli	sp,sp,0xb
    16d0:	0079025b          	0x79025b
    16d4:	012e                	slli	sp,sp,0xb
    16d6:	025c                	addi	a5,sp,260
    16d8:	0082                	c.slli64	ra
    16da:	2d00                	fld	fs0,24(a0)
    16dc:	060a                	slli	a2,a2,0x2
    16de:	0000                	unimp
    16e0:	1aae                	slli	s5,s5,0x2b
    16e2:	0000                	unimp
    16e4:	000016fb          	0x16fb
    16e8:	012e                	slli	sp,sp,0xb
    16ea:	025a                	slli	tp,tp,0x16
    16ec:	012e0083          	lb	ra,18(t3)
    16f0:	0079025b          	0x79025b
    16f4:	012e                	slli	sp,sp,0xb
    16f6:	025c                	addi	a5,sp,260
    16f8:	0082                	c.slli64	ra
    16fa:	2d00                	fld	fs0,24(a0)
    16fc:	0612                	slli	a2,a2,0x4
    16fe:	0000                	unimp
    1700:	1b4c                	addi	a1,sp,436
    1702:	0000                	unimp
    1704:	0000171b          	0x171b
    1708:	012e                	slli	sp,sp,0xb
    170a:	025a                	slli	tp,tp,0x16
    170c:	0085                	addi	ra,ra,1
    170e:	012e                	slli	sp,sp,0xb
    1710:	0084025b          	0x84025b
    1714:	012e                	slli	sp,sp,0xb
    1716:	025c                	addi	a5,sp,260
    1718:	0082                	c.slli64	ra
    171a:	2f00                	fld	fs0,24(a4)
    171c:	061a                	slli	a2,a2,0x6
    171e:	0000                	unimp
    1720:	1aae                	slli	s5,s5,0x2b
    1722:	0000                	unimp
    1724:	012e                	slli	sp,sp,0xb
    1726:	025a                	slli	tp,tp,0x16
    1728:	0085                	addi	ra,ra,1
    172a:	012e                	slli	sp,sp,0xb
    172c:	0079025b          	0x79025b
    1730:	012e                	slli	sp,sp,0xb
    1732:	025c                	addi	a5,sp,260
    1734:	0082                	c.slli64	ra
    1736:	0000                	unimp
    1738:	6909                	lui	s2,0x2
    173a:	0000                	unimp
    173c:	4b00                	lw	s0,16(a4)
    173e:	36000017          	auipc	zero,0x36000
    1742:	0075                	c.nop	29
    1744:	0000                	unimp
    1746:	154a                	slli	a0,a0,0x32
    1748:	0000                	unimp
    174a:	0900                	addi	s0,sp,144
    174c:	0069                	c.nop	26
    174e:	0000                	unimp
    1750:	175e                	slli	a4,a4,0x37
    1752:	0000                	unimp
    1754:	7536                	flw	fa0,108(sp)
    1756:	0000                	unimp
    1758:	5300                	lw	s0,32(a4)
    175a:	0015                	c.nop	5
    175c:	0000                	unimp
    175e:	6909                	lui	s2,0x2
    1760:	0000                	unimp
    1762:	7100                	flw	fs0,32(a0)
    1764:	36000017          	auipc	zero,0x36000
    1768:	0075                	c.nop	29
    176a:	0000                	unimp
    176c:	155c                	addi	a5,sp,676
    176e:	0000                	unimp
    1770:	0900                	addi	s0,sp,144
    1772:	0069                	c.nop	26
    1774:	0000                	unimp
    1776:	1784                	addi	s1,sp,992
    1778:	0000                	unimp
    177a:	7536                	flw	fa0,108(sp)
    177c:	0000                	unimp
    177e:	6500                	flw	fs0,8(a0)
    1780:	0015                	c.nop	5
    1782:	0000                	unimp
    1784:	00002a37          	lui	s4,0x2
    1788:	0100                	addi	s0,sp,128
    178a:	0688                	addi	a0,sp,832
    178c:	00000ba7          	0xba7
    1790:	027e                	slli	tp,tp,0x1f
    1792:	0000                	unimp
    1794:	0166                	slli	sp,sp,0x19
    1796:	0000                	unimp
    1798:	9c01                	0x9c01
    179a:	1895                	addi	a7,a7,-27
    179c:	0000                	unimp
    179e:	6138                	flw	fa4,64(a0)
    17a0:	0100                	addi	s0,sp,128
    17a2:	1588                	addi	a0,sp,736
    17a4:	00000ba7          	0xba7
    17a8:	1485                	addi	s1,s1,-31
    17aa:	0000                	unimp
    17ac:	5339                	li	t1,-18
    17ae:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17b2:	1c88                	addi	a0,sp,624
    17b4:	0069                	c.nop	26
    17b6:	0000                	unimp
    17b8:	000014bf 01006238 	0x1006238000014bf
    17c0:	2988                	fld	fa0,16(a1)
    17c2:	00000ba7          	0xba7
    17c6:	1510                	addi	a2,sp,672
    17c8:	0000                	unimp
    17ca:	2639                	jal	1ad8 <ti_2+0x15c>
    17cc:	01000007          	0x1000007
    17d0:	3088                	fld	fa0,32(s1)
    17d2:	0069                	c.nop	26
    17d4:	0000                	unimp
    17d6:	154a                	slli	a0,a0,0x32
    17d8:	0000                	unimp
    17da:	5739                	li	a4,-18
    17dc:	0005                	c.nop	1
    17de:	0100                	addi	s0,sp,128
    17e0:	3c88                	fld	fa0,56(s1)
    17e2:	0069                	c.nop	26
    17e4:	0000                	unimp
    17e6:	1581                	addi	a1,a1,-32
    17e8:	0000                	unimp
    17ea:	793c                	flw	fa5,112(a0)
    17ec:	0006                	c.slli	zero,0x1
    17ee:	0100                	addi	s0,sp,128
    17f0:	1895098b          	0x1895098b
    17f4:	0000                	unimp
    17f6:	000015bb          	0x15bb
    17fa:	693a                	flw	fs2,140(sp)
    17fc:	0100                	addi	s0,sp,128
    17fe:	098c                	addi	a1,sp,208
    1800:	0069                	c.nop	26
    1802:	0000                	unimp
    1804:	15ff                	0x15ff
    1806:	0000                	unimp
    1808:	6a3a                	flw	fs4,140(sp)
    180a:	0100                	addi	s0,sp,128
    180c:	0b8c                	addi	a1,sp,464
    180e:	0069                	c.nop	26
    1810:	0000                	unimp
    1812:	0000169b          	0x169b
    1816:	6b3a                	flw	fs6,140(sp)
    1818:	0100                	addi	s0,sp,128
    181a:	0d8c                	addi	a1,sp,720
    181c:	0069                	c.nop	26
    181e:	0000                	unimp
    1820:	000016cf          	fnmadd.s	fa3,ft0,ft0,ft0,rtz
    1824:	7e3c                	flw	fa5,120(a2)
    1826:	0002                	c.slli64	zero
    1828:	0100                	addi	s0,sp,128
    182a:	0a8d                	addi	s5,s5,3
    182c:	00000ba7          	0xba7
    1830:	171d                	addi	a4,a4,-25
    1832:	0000                	unimp
    1834:	0c3c                	addi	a5,sp,536
    1836:	0000                	unimp
    1838:	0100                	addi	s0,sp,128
    183a:	098e                	slli	s3,s3,0x3
    183c:	18b1                	addi	a7,a7,-20
    183e:	0000                	unimp
    1840:	1735                	addi	a4,a4,-19
    1842:	0000                	unimp
    1844:	7f3c                	flw	fa5,120(a4)
    1846:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    184a:	18c4098f          	0x18c4098f
    184e:	0000                	unimp
    1850:	1755                	addi	a4,a4,-11
    1852:	0000                	unimp
    1854:	7535                	lui	a0,0xfffed
    1856:	0000                	unimp
    1858:	7500                	flw	fs0,40(a0)
    185a:	35000017          	auipc	zero,0x35000
    185e:	0075                	c.nop	29
    1860:	0000                	unimp
    1862:	17ca                	slli	a5,a5,0x32
    1864:	0000                	unimp
    1866:	7535                	lui	a0,0xfffed
    1868:	0000                	unimp
    186a:	fc00                	fsw	fs0,56(s0)
    186c:	35000017          	auipc	zero,0x35000
    1870:	0075                	c.nop	29
    1872:	0000                	unimp
    1874:	183a                	slli	a6,a6,0x2e
    1876:	0000                	unimp
    1878:	0003de2f          	0x3de2f
    187c:	4c00                	lw	s0,24(s0)
    187e:	2e00001b          	0x2e00001b
    1882:	5a01                	li	s4,-32
    1884:	8602                	jr	a2
    1886:	2e00                	fld	fs0,24(a2)
    1888:	5b01                	li	s6,-32
    188a:	8402                	jr	s0
    188c:	2e00                	fld	fs0,24(a2)
    188e:	5c01                	li	s8,-32
    1890:	8302                	jr	t1
    1892:	0000                	unimp
    1894:	0900                	addi	s0,sp,144
    1896:	0069                	c.nop	26
    1898:	0000                	unimp
    189a:	18b1                	addi	a7,a7,-20
    189c:	0000                	unimp
    189e:	7536                	flw	fa0,108(sp)
    18a0:	0000                	unimp
    18a2:	5400                	lw	s0,40(s0)
    18a4:	0018                	0x18
    18a6:	3600                	fld	fs0,40(a2)
    18a8:	0075                	c.nop	29
    18aa:	0000                	unimp
    18ac:	185d                	addi	a6,a6,-9
    18ae:	0000                	unimp
    18b0:	0900                	addi	s0,sp,144
    18b2:	0069                	c.nop	26
    18b4:	0000                	unimp
    18b6:	18c4                	addi	s1,sp,116
    18b8:	0000                	unimp
    18ba:	7536                	flw	fa0,108(sp)
    18bc:	0000                	unimp
    18be:	6600                	flw	fs0,8(a2)
    18c0:	0018                	0x18
    18c2:	0000                	unimp
    18c4:	6909                	lui	s2,0x2
    18c6:	0000                	unimp
    18c8:	d700                	sw	s0,40(a4)
    18ca:	0018                	0x18
    18cc:	3600                	fld	fs0,40(a2)
    18ce:	0075                	c.nop	29
    18d0:	0000                	unimp
    18d2:	0000186f          	jal	a6,28d2 <_bss_end+0x8ca>
    18d6:	3700                	fld	fs0,40(a4)
    18d8:	0121                	addi	sp,sp,8
    18da:	0000                	unimp
    18dc:	4c01                	li	s8,0
    18de:	a706                	fsd	ft1,392(sp)
    18e0:	d800000b          	0xd800000b
    18e4:	0000                	unimp
    18e6:	a600                	fsd	fs0,8(a2)
    18e8:	0001                	nop
    18ea:	0100                	addi	s0,sp,128
    18ec:	6c9c                	flw	fa5,24(s1)
    18ee:	001a                	c.slli	zero,0x6
    18f0:	3800                	fld	fs0,48(s0)
    18f2:	0061                	c.nop	24
    18f4:	4c01                	li	s8,0
    18f6:	a714                	fsd	fa3,8(a4)
    18f8:	8f00000b          	0x8f00000b
    18fc:	0018                	0x18
    18fe:	3900                	fld	fs0,48(a0)
    1900:	00000353          	fadd.s	ft6,ft0,ft0,rne
    1904:	4c01                	li	s8,0
    1906:	0000691b          	0x691b
    190a:	c900                	sw	s0,16(a0)
    190c:	0018                	0x18
    190e:	3800                	fld	fs0,48(s0)
    1910:	0062                	c.slli	zero,0x18
    1912:	4c01                	li	s8,0
    1914:	a728                	fsd	fa0,72(a4)
    1916:	1a00000b          	0x1a00000b
    191a:	0019                	c.nop	6
    191c:	3900                	fld	fs0,48(a0)
    191e:	0726                	slli	a4,a4,0x9
    1920:	0000                	unimp
    1922:	4c01                	li	s8,0
    1924:	0000692f          	0x692f
    1928:	6a00                	flw	fs0,16(a2)
    192a:	0019                	c.nop	6
    192c:	3800                	fld	fs0,48(s0)
    192e:	6f6d                	lui	t5,0x1b
    1930:	0064                	addi	s1,sp,12
    1932:	4c01                	li	s8,0
    1934:	0000693b          	0x693b
    1938:	a100                	fsd	fs0,0(a0)
    193a:	0019                	c.nop	6
    193c:	3900                	fld	fs0,48(a0)
    193e:	00000557          	0x557
    1942:	4c01                	li	s8,0
    1944:	6944                	flw	fs1,20(a0)
    1946:	0000                	unimp
    1948:	0400                	addi	s0,sp,512
    194a:	001a                	c.slli	zero,0x6
    194c:	3c00                	fld	fs0,56(s0)
    194e:	0679                	addi	a2,a2,30
    1950:	0000                	unimp
    1952:	4e01                	li	t3,0
    1954:	6c09                	lui	s8,0x2
    1956:	001a                	c.slli	zero,0x6
    1958:	3100                	fld	fs0,32(a0)
    195a:	001a                	c.slli	zero,0x6
    195c:	3a00                	fld	fs0,48(a2)
    195e:	0069                	c.nop	26
    1960:	4f01                	li	t5,0
    1962:	6909                	lui	s2,0x2
    1964:	0000                	unimp
    1966:	7500                	flw	fs0,40(a0)
    1968:	001a                	c.slli	zero,0x6
    196a:	3a00                	fld	fs0,48(a2)
    196c:	006a                	c.slli	zero,0x1a
    196e:	4f01                	li	t5,0
    1970:	0000690b          	0x690b
    1974:	1200                	addi	s0,sp,288
    1976:	3a00001b          	0x3a00001b
    197a:	4f01006b          	0x4f01006b
    197e:	690d                	lui	s2,0x3
    1980:	0000                	unimp
    1982:	4600                	lw	s0,8(a2)
    1984:	3c00001b          	0x3c00001b
    1988:	026e                	slli	tp,tp,0x1b
    198a:	0000                	unimp
    198c:	5001                	c.li	zero,-32
    198e:	a70a                	fsd	ft2,392(sp)
    1990:	9400000b          	0x9400000b
    1994:	3c00001b          	0x3c00001b
    1998:	000c                	0xc
    199a:	0000                	unimp
    199c:	5101                	li	sp,-32
    199e:	8809                	andi	s0,s0,2
    19a0:	001a                	c.slli	zero,0x6
    19a2:	ac00                	fsd	fs0,24(s0)
    19a4:	3c00001b          	0x3c00001b
    19a8:	037f                	0x37f
    19aa:	0000                	unimp
    19ac:	5201                	li	tp,-32
    19ae:	9b09                	andi	a4,a4,-30
    19b0:	001a                	c.slli	zero,0x6
    19b2:	cc00                	sw	s0,24(s0)
    19b4:	3500001b          	0x3500001b
    19b8:	0075                	c.nop	29
    19ba:	0000                	unimp
    19bc:	1c19                	addi	s8,s8,-26
    19be:	0000                	unimp
    19c0:	7535                	lui	a0,0xfffed
    19c2:	0000                	unimp
    19c4:	6e00                	flw	fs0,24(a2)
    19c6:	001c                	0x1c
    19c8:	3500                	fld	fs0,40(a0)
    19ca:	0075                	c.nop	29
    19cc:	0000                	unimp
    19ce:	00001cef          	jal	s9,29ce <_bss_end+0x9c6>
    19d2:	7535                	lui	a0,0xfffed
    19d4:	0000                	unimp
    19d6:	1d00                	addi	s0,sp,688
    19d8:	001d                	c.nop	7
    19da:	2d00                	fld	fs0,24(a0)
    19dc:	0164                	addi	s1,sp,140
    19de:	0000                	unimp
    19e0:	1aae                	slli	s5,s5,0x2b
    19e2:	0000                	unimp
    19e4:	000019fb          	0x19fb
    19e8:	012e                	slli	sp,sp,0xb
    19ea:	025a                	slli	tp,tp,0x16
    19ec:	0089                	addi	ra,ra,2
    19ee:	012e                	slli	sp,sp,0xb
    19f0:	0083025b          	0x83025b
    19f4:	012e                	slli	sp,sp,0xb
    19f6:	025c                	addi	a5,sp,260
    19f8:	2d000187          	0x2d000187
    19fc:	0176                	slli	sp,sp,0x1d
    19fe:	0000                	unimp
    1a00:	1aae                	slli	s5,s5,0x2b
    1a02:	0000                	unimp
    1a04:	00001a1b          	0x1a1b
    1a08:	012e                	slli	sp,sp,0xb
    1a0a:	025a                	slli	tp,tp,0x16
    1a0c:	0072                	c.slli	zero,0x1c
    1a0e:	012e                	slli	sp,sp,0xb
    1a10:	0083025b          	0x83025b
    1a14:	012e                	slli	sp,sp,0xb
    1a16:	025c                	addi	a5,sp,260
    1a18:	0088                	addi	a0,sp,64
    1a1a:	2d00                	fld	fs0,24(a0)
    1a1c:	021a                	slli	tp,tp,0x6
    1a1e:	0000                	unimp
    1a20:	1aae                	slli	s5,s5,0x2b
    1a22:	0000                	unimp
    1a24:	00001a3b          	0x1a3b
    1a28:	012e                	slli	sp,sp,0xb
    1a2a:	025a                	slli	tp,tp,0x16
    1a2c:	0082                	c.slli64	ra
    1a2e:	012e                	slli	sp,sp,0xb
    1a30:	0083025b          	0x83025b
    1a34:	012e                	slli	sp,sp,0xb
    1a36:	025c                	addi	a5,sp,260
    1a38:	0084                	addi	s1,sp,64
    1a3a:	2d00                	fld	fs0,24(a0)
    1a3c:	0270                	addi	a2,sp,268
    1a3e:	0000                	unimp
    1a40:	1aae                	slli	s5,s5,0x2b
    1a42:	0000                	unimp
    1a44:	00001a4f          	fnmadd.s	fs4,ft0,ft0,ft0,rtz
    1a48:	012e                	slli	sp,sp,0xb
    1a4a:	025a                	slli	tp,tp,0x16
    1a4c:	0086                	slli	ra,ra,0x1
    1a4e:	2f00                	fld	fs0,24(a4)
    1a50:	0278                	addi	a4,sp,268
    1a52:	0000                	unimp
    1a54:	1b4c                	addi	a1,sp,436
    1a56:	0000                	unimp
    1a58:	012e                	slli	sp,sp,0xb
    1a5a:	025a                	slli	tp,tp,0x16
    1a5c:	0082                	c.slli64	ra
    1a5e:	012e                	slli	sp,sp,0xb
    1a60:	0086025b          	0x86025b
    1a64:	012e                	slli	sp,sp,0xb
    1a66:	025c                	addi	a5,sp,260
    1a68:	0084                	addi	s1,sp,64
    1a6a:	0000                	unimp
    1a6c:	6909                	lui	s2,0x2
    1a6e:	0000                	unimp
    1a70:	8800                	0x8800
    1a72:	001a                	c.slli	zero,0x6
    1a74:	3600                	fld	fs0,40(a2)
    1a76:	0075                	c.nop	29
    1a78:	0000                	unimp
    1a7a:	000019b7          	lui	s3,0x1
    1a7e:	7536                	flw	fa0,108(sp)
    1a80:	0000                	unimp
    1a82:	c000                	sw	s0,0(s0)
    1a84:	0019                	c.nop	6
    1a86:	0000                	unimp
    1a88:	6909                	lui	s2,0x2
    1a8a:	0000                	unimp
    1a8c:	9b00                	0x9b00
    1a8e:	001a                	c.slli	zero,0x6
    1a90:	3600                	fld	fs0,40(a2)
    1a92:	0075                	c.nop	29
    1a94:	0000                	unimp
    1a96:	19c9                	addi	s3,s3,-14
    1a98:	0000                	unimp
    1a9a:	0900                	addi	s0,sp,144
    1a9c:	0069                	c.nop	26
    1a9e:	0000                	unimp
    1aa0:	1aae                	slli	s5,s5,0x2b
    1aa2:	0000                	unimp
    1aa4:	7536                	flw	fa0,108(sp)
    1aa6:	0000                	unimp
    1aa8:	d200                	sw	s0,32(a2)
    1aaa:	0019                	c.nop	6
    1aac:	0000                	unimp
    1aae:	af3d                	j	21ec <_bss_end+0x1e4>
    1ab0:	0005                	c.nop	1
    1ab2:	0100                	addi	s0,sp,128
    1ab4:	063c                	addi	a5,sp,776
    1ab6:	00ba                	slli	ra,ra,0xe
    1ab8:	0000                	unimp
    1aba:	001e                	c.slli	zero,0x7
    1abc:	0000                	unimp
    1abe:	9c01                	0x9c01
    1ac0:	1b21                	addi	s6,s6,-24
    1ac2:	0000                	unimp
    1ac4:	613e                	flw	ft2,204(sp)
    1ac6:	0031                	c.nop	12
    1ac8:	3c01                	jal	14d8 <product2+0xc>
    1aca:	a715                	j	21ee <_bss_end+0x1e6>
    1acc:	0100000b          	0x100000b
    1ad0:	3e5a                	fld	ft8,432(sp)
    1ad2:	6f6d                	lui	t5,0x1b
    1ad4:	0064                	addi	s1,sp,12
    1ad6:	3c01                	jal	14e6 <product2+0x1a>
    1ad8:	691d                	lui	s2,0x7
    1ada:	0000                	unimp
    1adc:	0100                	addi	s0,sp,128
    1ade:	058a395b          	0x58a395b
    1ae2:	0000                	unimp
    1ae4:	3c01                	jal	14f4 <product2+0x28>
    1ae6:	6925                	lui	s2,0x9
    1ae8:	0000                	unimp
    1aea:	7200                	flw	fs0,32(a2)
    1aec:	001d                	c.nop	7
    1aee:	3a00                	fld	fs0,48(a2)
    1af0:	0069                	c.nop	26
    1af2:	4101                	li	sp,0
    1af4:	6905                	lui	s2,0x1
    1af6:	0000                	unimp
    1af8:	9300                	0x9300
    1afa:	001d                	c.nop	7
    1afc:	3f00                	fld	fs0,56(a4)
    1afe:	1b21                	addi	s6,s6,-24
    1b00:	0000                	unimp
    1b02:	00c0                	addi	s0,sp,68
    1b04:	0000                	unimp
    1b06:	0000                	unimp
    1b08:	0000                	unimp
    1b0a:	4401                	li	s0,0
    1b0c:	4009                	c.li	zero,2
    1b0e:	1b39                	addi	s6,s6,-18
    1b10:	0000                	unimp
    1b12:	1db2                	slli	s11,s11,0x2c
    1b14:	0000                	unimp
    1b16:	2e40                	fld	fs0,152(a2)
    1b18:	c500001b          	0xc500001b
    1b1c:	001d                	c.nop	7
    1b1e:	0000                	unimp
    1b20:	4100                	lw	s0,0(a0)
    1b22:	00000117          	auipc	sp,0x0
    1b26:	2d01                	jal	2136 <_bss_end+0x12e>
    1b28:	0106                	slli	sp,sp,0x1
    1b2a:	1b46                	slli	s6,s6,0x31
    1b2c:	0000                	unimp
    1b2e:	6142                	flw	ft2,16(sp)
    1b30:	0031                	c.nop	12
    1b32:	2d01                	jal	2142 <_bss_end+0x13a>
    1b34:	461e                	lw	a2,196(sp)
    1b36:	4200001b          	0x4200001b
    1b3a:	6f6d                	lui	t5,0x1b
    1b3c:	0064                	addi	s1,sp,12
    1b3e:	2d01                	jal	214e <_bss_end+0x146>
    1b40:	0000752f          	0x752f
    1b44:	0000                	unimp
    1b46:	0410                	addi	a2,sp,512
    1b48:	0075                	c.nop	29
    1b4a:	0000                	unimp
    1b4c:	a53d                	j	217a <_bss_end+0x172>
    1b4e:	0005                	c.nop	1
    1b50:	0100                	addi	s0,sp,128
    1b52:	0626                	slli	a2,a2,0x9
    1b54:	0092                	slli	ra,ra,0x4
    1b56:	0000                	unimp
    1b58:	0022                	c.slli	zero,0x8
    1b5a:	0000                	unimp
    1b5c:	9c01                	0x9c01
    1b5e:	1bbe                	slli	s7,s7,0x2f
    1b60:	0000                	unimp
    1b62:	613e                	flw	ft2,204(sp)
    1b64:	0031                	c.nop	12
    1b66:	2601                	jal	1e66 <random_keys+0x35a>
    1b68:	a715                	j	228c <_bss_end+0x284>
    1b6a:	0100000b          	0x100000b
    1b6e:	3e5a                	fld	ft8,432(sp)
    1b70:	3261                	jal	14f8 <product2+0x2c>
    1b72:	0100                	addi	s0,sp,128
    1b74:	1e26                	slli	t3,t3,0x29
    1b76:	00000ba7          	0xba7
    1b7a:	5b01                	li	s6,-32
    1b7c:	8a39                	andi	a2,a2,14
    1b7e:	0005                	c.nop	1
    1b80:	0100                	addi	s0,sp,128
    1b82:	2626                	fld	fa2,72(sp)
    1b84:	0069                	c.nop	26
    1b86:	0000                	unimp
    1b88:	1ddf 0000 693a      	0x693a00001ddf
    1b8e:	0100                	addi	s0,sp,128
    1b90:	00690527          	0x690527
    1b94:	0000                	unimp
    1b96:	1e00                	addi	s0,sp,816
    1b98:	0000                	unimp
    1b9a:	001bbe43          	fmadd.s	ft8,fs7,ft1,ft0,rup
    1b9e:	a600                	fsd	fs0,8(a2)
    1ba0:	0000                	unimp
    1ba2:	0a00                	addi	s0,sp,272
    1ba4:	0000                	unimp
    1ba6:	0100                	addi	s0,sp,128
    1ba8:	0729                	addi	a4,a4,10
    1baa:	d640                	sw	s0,44(a2)
    1bac:	1f00001b          	0x1f00001b
    1bb0:	001e                	c.slli	zero,0x7
    1bb2:	4000                	lw	s0,0(s0)
    1bb4:	00001bcb          	fnmsub.s	fs7,ft0,ft0,ft0,rtz
    1bb8:	1e42                	slli	t3,t3,0x30
    1bba:	0000                	unimp
    1bbc:	0000                	unimp
    1bbe:	4441                	li	s0,16
    1bc0:	0000                	unimp
    1bc2:	0100                	addi	s0,sp,128
    1bc4:	0611                	addi	a2,a2,4
    1bc6:	e201                	bnez	a2,1bc6 <random_keys+0xba>
    1bc8:	4200001b          	0x4200001b
    1bcc:	3161                	jal	1854 <result+0x130>
    1bce:	0100                	addi	s0,sp,128
    1bd0:	1e11                	addi	t3,t3,-28
    1bd2:	1b46                	slli	s6,s6,0x31
    1bd4:	0000                	unimp
    1bd6:	6142                	flw	ft2,16(sp)
    1bd8:	0032                	c.slli	zero,0xc
    1bda:	1101                	addi	sp,sp,-32
    1bdc:	4630                	lw	a2,72(a2)
    1bde:	0000001b          	0x1b
    1be2:	be44                	fsd	fs1,184(a2)
    1be4:	8c00001b          	0x8c00001b
    1be8:	0000                	unimp
    1bea:	0600                	addi	s0,sp,768
    1bec:	0000                	unimp
    1bee:	0100                	addi	s0,sp,128
    1bf0:	069c                	addi	a5,sp,832
    1bf2:	001c                	0x1c
    1bf4:	4000                	lw	s0,0(s0)
    1bf6:	00001bcb          	fnmsub.s	fs7,ft0,ft0,ft0,rtz
    1bfa:	1e65                	addi	t3,t3,-7
    1bfc:	0000                	unimp
    1bfe:	d645                	beqz	a2,1ba6 <random_keys+0x9a>
    1c00:	0100001b          	0x100001b
    1c04:	2144005b          	0x2144005b
    1c08:	b400001b          	0xb400001b
    1c0c:	0000                	unimp
    1c0e:	0600                	addi	s0,sp,768
    1c10:	0000                	unimp
    1c12:	0100                	addi	s0,sp,128
    1c14:	2a9c                	fld	fa5,16(a3)
    1c16:	001c                	0x1c
    1c18:	4000                	lw	s0,0(s0)
    1c1a:	1b2e                	slli	s6,s6,0x2b
    1c1c:	0000                	unimp
    1c1e:	1e78                	addi	a4,sp,828
    1c20:	0000                	unimp
    1c22:	3945                	jal	18d2 <result+0x1ae>
    1c24:	0100001b          	0x100001b
    1c28:	3746005b          	0x3746005b
    1c2c:	2d000003          	lb	zero,720(zero) # 2d0 <polymult2+0x52>
    1c30:	09000003          	lb	zero,144(zero) # 90 <instr_add+0x4>
    1c34:	4600                	lw	s0,8(a2)
    1c36:	0078                	addi	a4,sp,12
    1c38:	0000                	unimp
    1c3a:	006e                	c.slli	zero,0x1b
    1c3c:	0000                	unimp
    1c3e:	0009                	c.nop	2
    1c40:	1e00                	addi	s0,sp,816
    1c42:	0000                	unimp
    1c44:	0200                	addi	s0,sp,256
    1c46:	2700                	fld	fs0,8(a4)
    1c48:	0004                	0x4
    1c4a:	0400                	addi	s0,sp,512
    1c4c:	9e01                	0x9e01
    1c4e:	0026                	c.slli	zero,0x9
    1c50:	3000                	fld	fs0,32(s0)
    1c52:	0000                	unimp
    1c54:	2d00                	fld	fs0,24(a0)
    1c56:	98000007          	0x98000007
    1c5a:	34000003          	lb	zero,832(zero) # 340 <polymult2+0xc2>
    1c5e:	01000007          	0x1000007
    1c62:	80              	Address 0x0000000000001c62 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x21e>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	03001603          	lh	a2,48(zero) # 30 <__DYNAMIC+0x30>
  22:	3a0e                	fld	fs4,224(sp)
  24:	390b3b0b          	0x390b3b0b
  28:	0013490b          	0x13490b
  2c:	0400                	addi	s0,sp,512
  2e:	0024                	addi	s1,sp,8
  30:	0b3e0b0b          	0xb3e0b0b
  34:	00000803          	lb	a6,0(zero) # 0 <__DYNAMIC>
  38:	3505                	jal	fffffe58 <_stack_start+0xfffefe58>
  3a:	4900                	lw	s0,16(a0)
  3c:	06000013          	li	zero,96
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # 20b3 <_bss_end+0xab>
  46:	0b39053b          	0xb39053b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1 # fffe5001 <_stack_start+0xfffd5001>
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    for(i=0;i<(length/3);i++) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
}
  a0:	0b00                	addi	s0,sp,400
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	0e00000b          	0xe00000b
    asm volatile(
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
    for(i=0;i<(length/3);i++) {
  b2:	1301                	addi	t1,t1,-32
    asm volatile(
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
    for(i=0;i<(length/3);i++) {
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
    asm volatile(
  c0:	3813490b          	0x3813490b
    for(i=0;i<(length/3);i++) {
  c4:	1000000b          	0x1000000b
}
  c8:	0b0b000f          	0xb0b000f
    asm volatile(
  cc:	1349                	addi	t1,t1,-14
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
    for(i=0;i<(length/3);i++) {
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d8:	390b3b0b          	0x390b3b0b
  dc:	0013010b          	0x13010b
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
    int line[size_b][size_a + size_b];
  e4:	0b3a0e03          	lb	t3,179(s4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  e8:	0b390b3b          	0xb390b3b
    int line[size_b][size_a + size_b];
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
  f0:	0000                	unimp
  f2:	27001513          	0x27001513
  f6:	0019                	c.nop	6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
 108:	16000013          	li	zero,352
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
    int line[size_b][size_a + size_b];
 110:	0000                	unimp
    int pola[size_a];
 112:	03011317          	auipc	t1,0x3011
    int line[size_b][size_a + size_b];
 116:	0b0e                	slli	s6,s6,0x3
    int pola[size_a];
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
    int line[size_b][size_a + size_b];
 11a:	39053b0b          	0x39053b0b
    int pola[size_a];
 11e:	0013010b          	0x13010b
    int polb[size_b];
 122:	1800                	addi	s0,sp,48
    int line[size_b][size_a + size_b];
 124:	000d                	c.nop	3
    int polb[size_b];
 126:	0b3a0e03          	lb	t3,179(s4)
    int pola[size_a];
 12a:	0b39053b          	0xb39053b
    int polb[size_b];
 12e:	1349                	addi	t1,t1,-14
 130:	0b38                	addi	a4,sp,408
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 132:	0000                	unimp
 134:	0d19                	addi	s10,s10,6
    int line[size_b][size_a + size_b];
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
    int pola[size_a];
 13a:	39053b0b          	0x39053b0b
    int polb[size_b];
 13e:	3813490b          	0x3813490b
    for (i = 0; i < size_b; ++i){
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
            product[j] = 0;
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
 14a:	0b3a0b0b          	0xb3a0b0b
    for (i = 0; i < size_b; ++i){
 14e:	0b39053b          	0xb39053b
    for (i = 0; i < size_a; ++i){
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
 156:	0b01131b          	0xb01131b
	array_mod(pola,mod,size_a);
 15a:	3b0b3a0b          	0x3b0b3a0b
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
    for (i = 0; i < size_b; ++i){
 164:	1c00                	addi	s0,sp,560
 166:	0b0b0117          	auipc	sp,0xb0b0
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
	array_mod(polb,mod,size_b);
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
    if(star_mult == 1){
 176:	0300                	addi	s0,sp,384
 178:	3a0e                	fld	fs4,224(sp)
 17a:	39053b0b          	0x39053b0b
 17e:	0013490b          	0x13490b
 182:	1e00                	addi	s0,sp,816
 184:	0e030013          	addi	zero,t1,224
 188:	193c                	addi	a5,sp,184
        for (j = size_b -1; j >= 0; j = j-1){
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
            product[j] = 0;
 192:	20000013          	li	zero,512
 196:	0034                	addi	a3,sp,8
            line[i][j] = 0;
 198:	0b3a0e03          	lb	t3,179(s4)
            product[j] = 0;
 19c:	0b39053b          	0xb39053b
        for(j = 0; j < size_a + size_b -1; ++j){
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
    for (i = 0; i < size_b; ++i){
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
        for(j = 0; j < size_a + size_b -1; ++j){
 1b2:	3f13490b          	0x3f13490b
        pola[i] = a[i];
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
 1c2:	0b390b3b          	0xb390b3b
        polb[i] = b[i];
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0x9e>
 1d0:	00052f13          	slti	t5,a0,0
 1d4:	2400                	fld	fs0,8(s0)
    for (i = 0; i < size_b; ++i){
 1d6:	0034                	addi	a3,sp,8
                line[size_b-1-j][k] = pola[k]*polb[j];
 1d8:	0b3a0e03          	lb	t3,179(s4)
 1dc:	0b390b3b          	0xb390b3b
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 34250000 	0x342500001802193f
 1ea:	0300                	addi	s0,sp,384
 1ec:	3a08                	fld	fa0,48(a2)
 1ee:	390b3b0b          	0x390b3b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f2:	3f13490b          	0x3f13490b
        for (j = size_b -1; j >= 0; j = j-1){
 1f6:	0219                	addi	tp,tp,6
 1f8:	0018                	0x18
 1fa:	2600                	fld	fs0,8(a2)
 1fc:	012e                	slli	sp,sp,0xb
            for (k = size_a-1; k >= 0; k = k-1 ){
 1fe:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
	array_add(product, line[i], (size_a + size_b - 1));
 206:	0b39                	addi	s6,s6,14
        array_mod(line[i],mod,(size_a+size_b-1));
 208:	1349                	addi	t1,t1,-14
 20a:	0111                	addi	sp,sp,4
    for (i = 0; i < size_b; ++i){
 20c:	0612                	slli	a2,a2,0x4
 20e:	1840                	addi	s0,sp,52
    array_mod(product,mod,size_a+size_b-1);
 210:	01194297          	auipc	t0,0x1194
 214:	27000013          	li	zero,624
 218:	0034                	addi	a3,sp,8
}
 21a:	0b3a0803          	lb	a6,179(s4)
 21e:	0b39053b          	0xb39053b
 222:	1349                	addi	t1,t1,-14
 224:	051c                	addi	a5,sp,640
 226:	0000                	unimp
 228:	3428                	fld	fa0,104(s0)
 22a:	0300                	addi	s0,sp,384
 22c:	3a0e                	fld	fs4,224(sp)
 22e:	39053b0b          	0x39053b0b
 232:	0213490b          	0x213490b
 236:	29000017          	auipc	zero,0x29000
 23a:	0034                	addi	a3,sp,8
 23c:	0b3a0803          	lb	a6,179(s4)
 240:	0b39053b          	0xb39053b
            for (k = size_a-1; k >= 0; k = k-1 ){
 244:	1349                	addi	t1,t1,-14
 246:	0b1c                	addi	a5,sp,400
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 248:	0000                	unimp
 24a:	342a                	fld	fs0,168(sp)
 24c:	0300                	addi	s0,sp,384
 24e:	3a0e                	fld	fs4,224(sp)
 250:	39053b0b          	0x39053b0b
 254:	0213490b          	0x213490b
            for (k = size_a-1; k >= 0; k = k-1 ){
 258:	0018                	0x18
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 25a:	2b00                	fld	fs0,16(a4)
 25c:	0034                	addi	a3,sp,8
 25e:	0b3a0e03          	lb	t3,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 262:	0b39053b          	0xb39053b
        for (j = size_b -1; j >= 0; j = j-1){
 266:	1349                	addi	t1,t1,-14
 268:	0000                	unimp
 26a:	342c                	fld	fa1,104(s0)
        array_mod(line[i],mod,(size_a+size_b-1));
 26c:	0300                	addi	s0,sp,384
 26e:	3a08                	fld	fa0,48(a2)
	array_add(product, line[i], (size_a + size_b - 1));
 270:	39053b0b          	0x39053b0b
 274:	0213490b          	0x213490b
    for (i = 0; i < size_b; ++i){
 278:	2d000017          	auipc	zero,0x2d000
 27c:	8289                	srli	a3,a3,0x2
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 27e:	0101                	addi	sp,sp,0
 280:	0111                	addi	sp,sp,4
 282:	1331                	addi	t1,t1,-20
    int line[size_b][size_a + size_b];
 284:	1301                	addi	t1,t1,-32
 286:	0000                	unimp
 288:	8a2e                	mv	s4,a1
 28a:	0182                	c.slli64	gp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 28c:	0200                	addi	s0,sp,256
 28e:	9118                	0x9118
    int line[size_b][size_a + size_b];
 290:	1842                	slli	a6,a6,0x30
 292:	0000                	unimp
 294:	0182892f          	0x182892f
 298:	1101                	addi	sp,sp,-32
 29a:	3101                	jal	fffffe9a <_stack_start+0xfffefe9a>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 29c:	30000013          	li	zero,768
 2a0:	0021                	c.nop	8
 2a2:	1349                	addi	t1,t1,-14
 2a4:	0000182f          	0x182f
 2a8:	2e31                	jal	5c4 <polydiv+0x1e0>
    int pola[size_a];
 2aa:	3f01                	jal	1ba <polymult+0xe2>
 2ac:	0319                	addi	t1,t1,6
    int line[size_b][size_a + size_b];
 2ae:	3a0e                	fld	fs4,224(sp)
 2b0:	39053b0b          	0x39053b0b
 2b4:	4919270b          	0x4919270b
    int pola[size_a];
 2b8:	12011113          	0x12011113
 2bc:	4006                	0x4006
    int line[size_b][size_a + size_b];
 2be:	9718                	0x9718
    int pola[size_a];
 2c0:	1942                	slli	s2,s2,0x30
 2c2:	1301                	addi	t1,t1,-32
    int polb[size_b];
 2c4:	0000                	unimp
 2c6:	0532                	slli	a0,a0,0xc
 2c8:	0300                	addi	s0,sp,384
    int pola[size_a];
 2ca:	3a08                	fld	fa0,48(a2)
    int polb[size_b];
 2cc:	39053b0b          	0x39053b0b
    int line[size_b][size_a + size_b];
 2d0:	0213490b          	0x213490b
    for (i = 0; i < size_b; ++i){
 2d4:	33000017          	auipc	zero,0x33000
 2d8:	0005                	c.nop	1
            product2[j] = 0;
 2da:	0b3a0e03          	lb	t3,179(s4)
 2de:	0b39053b          	0xb39053b
    for (i = 0; i < size_b; ++i){
 2e2:	1349                	addi	t1,t1,-14
 2e4:	1702                	slli	a4,a4,0x20
    for(i = 0; i < size_a; ++i){
 2e6:	0000                	unimp
 2e8:	3434                	fld	fa3,104(s0)
 2ea:	0300                	addi	s0,sp,384
    for(i = 0; i < size_b; ++i){
 2ec:	3a08                	fld	fa0,48(a2)
 2ee:	39053b0b          	0x39053b0b
    if(star_mult == 1){
 2f2:	0213490b          	0x213490b
 2f6:	0018                	0x18
 2f8:	3500                	fld	fs0,40(a0)
 2fa:	0034                	addi	a3,sp,8
 2fc:	1349                	addi	t1,t1,-14
 2fe:	1934                	addi	a3,sp,184
 300:	1702                	slli	a4,a4,0x20
        for (j = size_b -1; j >= 0; j = j-1){
 302:	0000                	unimp
 304:	2136                	fld	ft2,328(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 306:	4900                	lw	s0,16(a0)
 308:	00132f13          	slti	t5,t1,1
            product2[j] = 0;
 30c:	3700                	fld	fs0,40(a4)
 30e:	012e                	slli	sp,sp,0xb
            line[i][j] = 0;
 310:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
        for(j = 0; j < size_a + size_b -1; ++j){
 318:	0b39                	addi	s6,s6,14
 31a:	13491927          	0x13491927
 31e:	0111                	addi	sp,sp,4
    for (i = 0; i < size_b; ++i){
 320:	0612                	slli	a2,a2,0x4
 322:	1840                	addi	s0,sp,52
 324:	01194297          	auipc	t0,0x1194
        for(j = 0; j < size_a + size_b -1; ++j){
 328:	38000013          	li	zero,896
        pola[i] = a[i];
 32c:	0005                	c.nop	1
 32e:	0b3a0803          	lb	a6,179(s4)
 332:	0b390b3b          	0xb390b3b
 336:	1349                	addi	t1,t1,-14
 338:	1702                	slli	a4,a4,0x20
    for(i = 0; i < size_a; ++i){
 33a:	0000                	unimp
        pola[i] = a[i];
 33c:	0539                	addi	a0,a0,14
 33e:	0300                	addi	s0,sp,384
    for(i = 0; i < size_a; ++i){
 340:	3a0e                	fld	fs4,224(sp)
        polb[i] = b[i];
 342:	390b3b0b          	0x390b3b0b
 346:	0213490b          	0x213490b
 34a:	3a000017          	auipc	zero,0x3a000
 34e:	0034                	addi	a3,sp,8
    for(i = 0; i < size_b; ++i){
 350:	0b3a0803          	lb	a6,179(s4)
        polb[i] = b[i];
 354:	0b390b3b          	0xb390b3b
                line[size_b-1-j][k] = pola[k]*polb[j];
 358:	1349                	addi	t1,t1,-14
 35a:	1702                	slli	a4,a4,0x20
 35c:	0000                	unimp
 35e:	0300343b          	0x300343b
 362:	3a08                	fld	fa0,48(a2)
 364:	390b3b0b          	0x390b3b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 368:	0013490b          	0x13490b
                line[size_b-1-j][k] = pola[k]*polb[j];
 36c:	3c00                	fld	fs0,56(s0)
 36e:	0034                	addi	a3,sp,8
            for (k = size_a-1; k >= 0; k = k-1 ){
 370:	0b3a0e03          	lb	t3,179(s4)
        for (j = size_b -1; j >= 0; j = j-1){
 374:	0b390b3b          	0xb390b3b
 378:	1349                	addi	t1,t1,-14
 37a:	1702                	slli	a4,a4,0x20
 37c:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 37e:	2e3d                	jal	6bc <ext_euclid+0x2>
         array_add(product2,line[i],size_a+size_b-1);
 380:	3f01                	jal	290 <polymult2+0x12>
 382:	0319                	addi	t1,t1,6
 384:	3a0e                	fld	fs4,224(sp)
 386:	390b3b0b          	0x390b3b0b
        for(i = 0; i < size_b; ++i){
 38a:	1119270b          	0x1119270b
}
 38e:	1201                	addi	tp,tp,-32
 390:	4006                	0x4006
 392:	9718                	0x9718
 394:	1942                	slli	s2,s2,0x30
 396:	1301                	addi	t1,t1,-32
 398:	0000                	unimp
 39a:	053e                	slli	a0,a0,0xf
 39c:	0300                	addi	s0,sp,384
 39e:	3a08                	fld	fa0,48(a2)
 3a0:	390b3b0b          	0x390b3b0b
 3a4:	0213490b          	0x213490b
 3a8:	0018                	0x18
 3aa:	3f00                	fld	fs0,56(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ac:	011d                	addi	sp,sp,7
 3ae:	1331                	addi	t1,t1,-20
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3b0:	0152                	slli	sp,sp,0x14
 3b2:	1755                	addi	a4,a4,-11
 3b4:	0b58                	addi	a4,sp,404
 3b6:	0b59                	addi	s6,s6,22
 3b8:	00000b57          	0xb57
 3bc:	0540                	addi	s0,sp,644
 3be:	3100                	fld	fs0,32(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3c0:	00170213          	addi	tp,a4,1 # a0f <generate_keys+0x10b>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3c4:	4100                	lw	s0,0(a0)
 3c6:	012e                	slli	sp,sp,0xb
 3c8:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
        for (j = size_b -1; j >= 0; j = j-1){
 3d0:	0b39                	addi	s6,s6,14
 3d2:	0b201927          	0xb201927
         array_add(product2,line[i],size_a+size_b-1);
 3d6:	1301                	addi	t1,t1,-32
 3d8:	0000                	unimp
 3da:	0542                	slli	a0,a0,0x10
 3dc:	0300                	addi	s0,sp,384
        for(i = 0; i < size_b; ++i){
 3de:	3a08                	fld	fa0,48(a2)
 3e0:	390b3b0b          	0x390b3b0b
    int v[size_N];
 3e4:	0013490b          	0x13490b
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 3e8:	4300                	lw	s0,0(a4)
    int v[size_N];
 3ea:	011d                	addi	sp,sp,7
 3ec:	1331                	addi	t1,t1,-20
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 3ee:	0111                	addi	sp,sp,4
 3f0:	0612                	slli	a2,a2,0x4
 3f2:	0b58                	addi	a4,sp,404
 3f4:	0b59                	addi	s6,s6,22
 3f6:	00000b57          	0xb57
 3fa:	2e44                	fld	fs1,152(a2)
 3fc:	3101                	jal	fffffffc <_stack_start+0xfffefffc>
 3fe:	12011113          	0x12011113
 402:	4006                	0x4006
 404:	9718                	0x9718
 406:	1942                	slli	s2,s2,0x30
 408:	1301                	addi	t1,t1,-32
    int v[size_N];
 40a:	0000                	unimp
 40c:	0545                	addi	a0,a0,17
 40e:	3100                	fld	fs0,32(a0)
    int q[size_N];
 410:	00180213          	addi	tp,a6,1 # 1 <__DYNAMIC+0x1>
 414:	4600                	lw	s0,8(a2)
    int num_temp[size_N];
 416:	002e                	c.slli	zero,0xb
 418:	193c193f 0e030e6e 	0xe030e6e193c193f
    int denum_temp[size_D];
 420:	0b3a                	slli	s6,s6,0xe
    int num_temp[size_N];
 422:	00000b3b          	0xb3b
    int denum_temp[size_D];
 426:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 428:	0011                	c.nop	4
 42a:	0610                	addi	a2,sp,768
 42c:	0655                	addi	a2,a2,21
 42e:	0e1b0e03          	lb	t3,225(s6) # fffe10e1 <_stack_start+0xfffd10e1>
    int v[size_N];
 432:	0e25                	addi	t3,t3,9
    int denum_temp[size_D];
 434:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	104c                	addi	a1,sp,36
       2:	0000                	unimp
       4:	1066                	c.slli	zero,0x39
       6:	0000                	unimp
       8:	0001                	nop
       a:	665a                	flw	fa2,148(sp)
       c:	0010                	0x10
       e:	6b00                	flw	fs0,16(a4)
      10:	0010                	0x10
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	106c                	addi	a1,sp,44
      20:	0000                	unimp
      22:	10c6                	slli	ra,ra,0x31
      24:	0000                	unimp
      26:	0001                	nop
      28:	cc5a                	sw	s6,24(sp)
      2a:	0010                	0x10
      2c:	e000                	fsw	fs0,0(s0)
      2e:	0010                	0x10
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0f9a                	slli	t6,t6,0x6
      3e:	0000                	unimp
      40:	0ff8                	addi	a4,sp,988
      42:	0000                	unimp
      44:	0001                	nop
      46:	f85a                	fsw	fs6,48(sp)
      48:	2e00000f          	0x2e00000f
      4c:	0010                	0x10
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	7000                	flw	fs0,32(s0)
      5e:	da00000f          	0xda00000f
      62:	0300000f          	fence	rw,unknown
      66:	9100                	0x9100
      68:	798c                	flw	fa1,48(a1)
      6a:	0fda                	slli	t6,t6,0x16
      6c:	0000                	unimp
      6e:	0fe4                	addi	s1,sp,988
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0fe4                	addi	s1,sp,988
      78:	0000                	unimp
      7a:	0000102f          	0x102f
  jal x0, default_exc_handler
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	0000102f          	0x102f
  jal x0, default_exc_handler
      86:	10ca                	slli	ra,ra,0x32
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	8c910003          	lb	zero,-1847(sp) # b0afa2f <_stack_start+0xb09fa2f>
    asm volatile(
      8e:	ca79                	beqz	a2,164 <polymult+0x8c>
}
      90:	0010                	0x10
    for(i=0;i<(length/3);i++) {
      92:	cc00                	sw	s0,24(s0)
      94:	0010                	0x10
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	798c                	flw	fa1,48(a1)
      9c:	10cc                	addi	a1,sp,100
      9e:	0000                	unimp
}
      a0:	10e0                	addi	s0,sp,108
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	0000                	unimp
      a4:	8c910003          	lb	zero,-1847(sp)
    asm volatile(
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      b0:	7000                	flw	fs0,32(s0)
      b2:	b400000f          	0xb400000f
    asm volatile(
      b6:	0300000f          	fence	rw,unknown
    for(i=0;i<(length/3);i++) {
      ba:	9100                	0x9100
      bc:	7ae0                	flw	fs0,116(a3)
      be:	0fb4                	addi	a3,sp,984
    asm volatile(
      c0:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      c2:	0fb6                	slli	t6,t6,0xd
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
}
      c8:	007d                	c.nop	31
    asm volatile(
      ca:	0fb6                	slli	t6,t6,0xd
      cc:	0000                	unimp
      ce:	105c                	addi	a5,sp,36
      d0:	0000                	unimp
      d2:	e0910003          	lb	zero,-503(sp)
    for(i=0;i<(length/3);i++) {
      d6:	5c7a                	lw	s8,188(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d8:	0010                	0x10
      da:	6b00                	flw	fs0,16(a4)
      dc:	0010                	0x10
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
      e2:	6b00                	flw	fs0,16(a4)
    int line[size_b][size_a + size_b];
      e4:	0010                	0x10
      e6:	ca00                	sw	s0,16(a2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      e8:	0010                	0x10
      ea:	0300                	addi	s0,sp,384
    int line[size_b][size_a + size_b];
      ec:	9100                	0x9100
      ee:	7ae0                	flw	fs0,116(a3)
      f0:	10ca                	slli	ra,ra,0x32
      f2:	0000                	unimp
      f4:	10cc                	addi	a1,sp,100
      f6:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      f8:	e0720003          	lb	zero,-505(tp) # a733fe07 <_stack_start+0xa732fe07>
      fc:	cc7a                	sw	t5,24(sp)
      fe:	0010                	0x10
     100:	e000                	fsw	fs0,0(s0)
     102:	0010                	0x10
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
     108:	7ae0                	flw	fs0,116(a3)
	...
    int pola[size_a];
     112:	0f70                	addi	a2,sp,924
     114:	0000                	unimp
    int line[size_b][size_a + size_b];
     116:	0fc0                	addi	s0,sp,980
    int pola[size_a];
     118:	0000                	unimp
    int line[size_b][size_a + size_b];
     11a:	b4910003          	lb	zero,-1207(sp)
    int pola[size_a];
     11e:	c07c                	sw	a5,68(s0)
    int polb[size_b];
     120:	ca00000f          	0xca00000f
    int line[size_b][size_a + size_b];
     124:	0200000f          	fence	r,unknown
    int pola[size_a];
     128:	7e00                	flw	fs0,56(a2)
     12a:	ca00                	sw	s0,16(a2)
     12c:	c400000f          	0xc400000f
    int polb[size_b];
     130:	0010                	0x10
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     132:	0200                	addi	s0,sp,256
     134:	8300                	0x8300
    int line[size_b][size_a + size_b];
     136:	c400                	sw	s0,8(s0)
     138:	0010                	0x10
    int pola[size_a];
     13a:	ca00                	sw	s0,16(a2)
     13c:	0010                	0x10
    int polb[size_b];
     13e:	0300                	addi	s0,sp,384
    for (i = 0; i < size_b; ++i){
     140:	9100                	0x9100
     142:	7cb4                	flw	fa3,120(s1)
     144:	10ca                	slli	ra,ra,0x32
            product[j] = 0;
     146:	0000                	unimp
     148:	10cc                	addi	a1,sp,100
     14a:	0000                	unimp
     14c:	b4720003          	lb	zero,-1209(tp) # fffffb47 <_stack_start+0xfffefb47>
    for (i = 0; i < size_b; ++i){
     150:	cc7c                	sw	a5,92(s0)
    for (i = 0; i < size_a; ++i){
     152:	0010                	0x10
     154:	e000                	fsw	fs0,0(s0)
     156:	0010                	0x10
	array_mod(pola,mod,size_a);
     158:	0200                	addi	s0,sp,256
     15a:	8300                	0x8300
	...
    for (i = 0; i < size_b; ++i){
     164:	7000                	flw	fs0,32(s0)
     166:	f400000f          	0xf400000f
     16a:	0300000f          	fence	rw,unknown
	array_mod(polb,mod,size_b);
     16e:	9100                	0x9100
     170:	7e88                	flw	fa0,56(a3)
     172:	0ff4                	addi	a3,sp,988
     174:	0000                	unimp
    if(star_mult == 1){
     176:	0ffa                	slli	t6,t6,0x1e
     178:	0000                	unimp
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
     17e:	0ffa                	slli	t6,t6,0x1e
     180:	0000                	unimp
     182:	0000102f          	0x102f
     186:	0002                	c.slli64	zero
     188:	0080                	addi	s0,sp,64
        for (j = size_b -1; j >= 0; j = j-1){
     18a:	0000102f          	0x102f
            for (k = size_a-1; k >= 0; k = k-1 ){
     18e:	10ca                	slli	ra,ra,0x32
     190:	0000                	unimp
            product[j] = 0;
     192:	88910003          	lb	zero,-1911(sp)
     196:	ca7e                	sw	t6,20(sp)
            line[i][j] = 0;
     198:	0010                	0x10
     19a:	cc00                	sw	s0,24(s0)
            product[j] = 0;
     19c:	0010                	0x10
     19e:	0300                	addi	s0,sp,384
        for(j = 0; j < size_a + size_b -1; ++j){
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e88                	flw	fa0,56(a3)
     1a4:	10cc                	addi	a1,sp,100
     1a6:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     1a8:	10e0                	addi	s0,sp,108
     1aa:	0000                	unimp
     1ac:	88910003          	lb	zero,-1911(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
        pola[i] = a[i];
     1b4:	0000                	unimp
     1b6:	0000                	unimp
     1b8:	aa00                	fsd	fs0,16(a2)
     1ba:	ac00000f          	0xac00000f
     1be:	0200000f          	fence	r,unknown
     1c2:	3000                	fld	fs0,32(s0)
    for (i = 0; i < size_a; ++i){
     1c4:	829f 0010 8a00      	0x8a000010829f
        polb[i] = b[i];
     1ca:	0010                	0x10
     1cc:	0200                	addi	s0,sp,256
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
    for (i = 0; i < size_b; ++i){
     1d6:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     1d8:	8000                	0x8000
     1da:	000c                	0xc
     1dc:	9800                	0x9800
     1de:	000c                	0xc
     1e0:	0100                	addi	s0,sp,128
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0c98                	addi	a4,sp,592
     1e6:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e8:	0d00                	addi	s0,sp,656
                line[size_b-1-j][k] = pola[k]*polb[j];
     1ea:	0000                	unimp
     1ec:	0001                	nop
     1ee:	0058                	addi	a4,sp,4
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f0:	000d                	c.nop	3
     1f2:	0c00                	addi	s0,sp,528
        for (j = size_b -1; j >= 0; j = j-1){
     1f4:	000d                	c.nop	3
     1f6:	0300                	addi	s0,sp,384
     1f8:	8600                	0x8600
     1fa:	9f7f                	0x9f7f
     1fc:	0d0c                	addi	a1,sp,656
            for (k = size_a-1; k >= 0; k = k-1 ){
     1fe:	0000                	unimp
	array_add(product, line[i], (size_a + size_b - 1));
     200:	0d12                	slli	s10,s10,0x4
     202:	0000                	unimp
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
        array_mod(line[i],mod,(size_a+size_b-1));
     20a:	0d12                	slli	s10,s10,0x4
    for (i = 0; i < size_b; ++i){
     20c:	0000                	unimp
     20e:	0d48                	addi	a0,sp,660
    array_mod(product,mod,size_a+size_b-1);
     210:	0000                	unimp
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
     218:	0000                	unimp
}
     21a:	0000                	unimp
     21c:	8000                	0x8000
     21e:	000c                	0xc
     220:	a200                	fsd	fs0,0(a2)
     222:	000c                	0xc
     224:	0100                	addi	s0,sp,128
     226:	5b00                	lw	s0,48(a4)
     228:	0ca2                	slli	s9,s9,0x8
     22a:	0000                	unimp
     22c:	0d0a                	slli	s10,s10,0x2
     22e:	0000                	unimp
     230:	0001                	nop
     232:	0a65                	addi	s4,s4,25
     234:	000d                	c.nop	3
     236:	1200                	addi	s0,sp,288
     238:	000d                	c.nop	3
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	129f 000d 4800      	0x4800000d129f
            for (k = size_a-1; k >= 0; k = k-1 ){
     246:	000d                	c.nop	3
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
     254:	0c80                	addi	s0,sp,592
     256:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     258:	0c9a                	slli	s9,s9,0x6
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	9a5c                	0x9a5c
            for (k = size_a-1; k >= 0; k = k-1 ){
     260:	000c                	0xc
     262:	0400                	addi	s0,sp,512
        for (j = size_b -1; j >= 0; j = j-1){
     264:	000d                	c.nop	3
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
     26a:	0d04                	addi	s1,sp,656
        array_mod(line[i],mod,(size_a+size_b-1));
     26c:	0000                	unimp
     26e:	0d12                	slli	s10,s10,0x4
	array_add(product, line[i], (size_a + size_b - 1));
     270:	0000                	unimp
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
    for (i = 0; i < size_b; ++i){
     278:	0d12                	slli	s10,s10,0x4
     27a:	0000                	unimp
     27c:	0d48                	addi	a0,sp,660
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     27e:	0000                	unimp
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
    int line[size_b][size_a + size_b];
     284:	0000                	unimp
     286:	0000                	unimp
     288:	0000                	unimp
     28a:	8000                	0x8000
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     28c:	000c                	0xc
     28e:	9c00                	0x9c00
    int line[size_b][size_a + size_b];
     290:	000c                	0xc
     292:	0100                	addi	s0,sp,128
     294:	5d00                	lw	s0,56(a0)
     296:	0c9c                	addi	a5,sp,592
     298:	0000                	unimp
     29a:	0cb5                	addi	s9,s9,13
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     29c:	0000                	unimp
     29e:	0001                	nop
     2a0:	b55a                	fsd	fs6,168(sp)
     2a2:	000c                	0xc
     2a4:	4800                	lw	s0,16(s0)
     2a6:	000d                	c.nop	3
     2a8:	0400                	addi	s0,sp,512
    int pola[size_a];
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
    int line[size_b][size_a + size_b];
     2ae:	009f 0000 0000      	0x9f
     2b4:	0000                	unimp
    int pola[size_a];
     2b6:	8000                	0x8000
     2b8:	000c                	0xc
     2ba:	a400                	fsd	fs0,8(s0)
     2bc:	000c                	0xc
    int line[size_b][size_a + size_b];
     2be:	0100                	addi	s0,sp,128
    int pola[size_a];
     2c0:	5e00                	lw	s0,56(a2)
     2c2:	0ca4                	addi	s1,sp,600
    int polb[size_b];
     2c4:	0000                	unimp
     2c6:	0d0e                	slli	s10,s10,0x3
     2c8:	0000                	unimp
    int pola[size_a];
     2ca:	0001                	nop
    int polb[size_b];
     2cc:	000d0e67          	jalr	t3,s10 # fffe1000 <_stack_start+0xfffd1000>
    int line[size_b][size_a + size_b];
     2d0:	1200                	addi	s0,sp,288
    int polb[size_b];
     2d2:	000d                	c.nop	3
    for (i = 0; i < size_b; ++i){
     2d4:	0400                	addi	s0,sp,512
     2d6:	f300                	fsw	fs0,32(a4)
     2d8:	5e01                	li	t3,-32
            product2[j] = 0;
     2da:	129f 000d 4800      	0x4800000d129f
     2e0:	000d                	c.nop	3
    for (i = 0; i < size_b; ++i){
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
    for(i = 0; i < size_b; ++i){
     2ee:	0c80                	addi	s0,sp,592
     2f0:	0000                	unimp
    if(star_mult == 1){
     2f2:	0cb5                	addi	s9,s9,13
     2f4:	0000                	unimp
     2f6:	0001                	nop
     2f8:	b55f 000c 4800      	0x4800000cb55f
     2fe:	000d                	c.nop	3
     300:	0400                	addi	s0,sp,512
        for (j = size_b -1; j >= 0; j = j-1){
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
            for (k = size_a-1; k >= 0; k = k-1 ){
     306:	009f 0000 0000      	0x9f
            product2[j] = 0;
     30c:	0000                	unimp
     30e:	8000                	0x8000
            line[i][j] = 0;
     310:	000c                	0xc
     312:	b500                	fsd	fs0,40(a0)
            product2[j] = 0;
     314:	000c                	0xc
     316:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     318:	6000                	flw	fs0,0(s0)
     31a:	0cb5                	addi	s9,s9,13
     31c:	0000                	unimp
     31e:	0d08                	addi	a0,sp,656
    for (i = 0; i < size_b; ++i){
     320:	0000                	unimp
     322:	0001                	nop
     324:	0864                	addi	s1,sp,28
     326:	000d                	c.nop	3
        for(j = 0; j < size_a + size_b -1; ++j){
     328:	1200                	addi	s0,sp,288
     32a:	000d                	c.nop	3
        pola[i] = a[i];
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
     330:	6001                	0x6001
     332:	129f 000d 4800      	0x4800000d129f
     338:	000d                	c.nop	3
    for(i = 0; i < size_a; ++i){
     33a:	0100                	addi	s0,sp,128
        pola[i] = a[i];
     33c:	6400                	flw	fs0,8(s0)
	...
        polb[i] = b[i];
     346:	0cb6                	slli	s9,s9,0xd
     348:	0000                	unimp
     34a:	0cc5                	addi	s9,s9,17
     34c:	0000                	unimp
     34e:	0001                	nop
    for(i = 0; i < size_b; ++i){
     350:	005a                	c.slli	zero,0x16
        polb[i] = b[i];
     352:	0000                	unimp
     354:	0000                	unimp
    for(i = 0; i < size_b; ++i){
     356:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     358:	c800                	sw	s0,16(s0)
     35a:	000c                	0xc
     35c:	e600                	fsw	fs0,8(a2)
     35e:	000c                	0xc
     360:	0100                	addi	s0,sp,128
     362:	5a00                	lw	s0,48(a2)
     364:	0ce6                	slli	s9,s9,0x19
     366:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     368:	0ce9                	addi	s9,s9,26
                line[size_b-1-j][k] = pola[k]*polb[j];
     36a:	0000                	unimp
     36c:	0001                	nop
     36e:	125c                	addi	a5,sp,292
            for (k = size_a-1; k >= 0; k = k-1 ){
     370:	000d                	c.nop	3
     372:	3600                	fld	fs0,40(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     374:	000d                	c.nop	3
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
         array_add(product2,line[i],size_a+size_b-1);
     382:	0cea                	slli	s9,s9,0x1a
     384:	0000                	unimp
     386:	0cf5                	addi	s9,s9,29
        for(i = 0; i < size_b; ++i){
     388:	0000                	unimp
     38a:	0001                	nop
}
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
     390:	0000                	unimp
     392:	0000                	unimp
     394:	f600                	fsw	fs0,40(a2)
     396:	000c                	0xc
     398:	1200                	addi	s0,sp,288
     39a:	000d                	c.nop	3
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0d36                	slli	s10,s10,0xd
     3a2:	0000                	unimp
     3a4:	0d48                	addi	a0,sp,660
     3a6:	0000                	unimp
     3a8:	0001                	nop
     3aa:	005a                	c.slli	zero,0x16
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ac:	0000                	unimp
     3ae:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3b0:	0000                	unimp
     3b2:	c800                	sw	s0,16(s0)
     3b4:	000c                	0xc
     3b6:	ce00                	sw	s0,24(a2)
     3b8:	000c                	0xc
     3ba:	0100                	addi	s0,sp,128
     3bc:	5900                	lw	s0,48(a0)
     3be:	0cce                	slli	s9,s9,0x13
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c0:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3c2:	0cda                	slli	s9,s9,0x16
     3c4:	0000                	unimp
     3c6:	0001                	nop
     3c8:	da5d                	beqz	a2,37e <polymult2+0x100>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	000c                	0xc
     3cc:	e000                	fsw	fs0,0(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     3ce:	000c                	0xc
     3d0:	0100                	addi	s0,sp,128
     3d2:	5e00                	lw	s0,56(a2)
     3d4:	0cf6                	slli	s9,s9,0x1d
         array_add(product2,line[i],size_a+size_b-1);
     3d6:	0000                	unimp
     3d8:	0d02                	c.slli64	s10
     3da:	0000                	unimp
     3dc:	0001                	nop
        for(i = 0; i < size_b; ++i){
     3de:	1259                	addi	tp,tp,-10
     3e0:	000d                	c.nop	3
     3e2:	1c00                	addi	s0,sp,560
    int v[size_N];
     3e4:	000d                	c.nop	3
     3e6:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3e8:	5d00                	lw	s0,56(a0)
    int v[size_N];
     3ea:	0d1c                	addi	a5,sp,656
     3ec:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3ee:	0d22                	slli	s10,s10,0x8
     3f0:	0000                	unimp
     3f2:	7f7d0003          	lb	zero,2039(s10)
     3f6:	229f 000d 2400      	0x2400000d229f
     3fc:	000d                	c.nop	3
     3fe:	0100                	addi	s0,sp,128
     400:	5d00                	lw	s0,56(a0)
     402:	0d24                	addi	s1,sp,664
     404:	0000                	unimp
     406:	0d36                	slli	s10,s10,0xd
     408:	0000                	unimp
    int v[size_N];
     40a:	0001                	nop
     40c:	365e                	fld	fa2,496(sp)
     40e:	000d                	c.nop	3
    int q[size_N];
     410:	4000                	lw	s0,0(s0)
     412:	000d                	c.nop	3
     414:	0100                	addi	s0,sp,128
    int num_temp[size_N];
     416:	5900                	lw	s0,48(a0)
     418:	0d40                	addi	s0,sp,660
    int denum_temp[size_D];
     41a:	0000                	unimp
     41c:	0d46                	slli	s10,s10,0x11
     41e:	0000                	unimp
     420:	7f790003          	lb	zero,2039(s2) # 17f7 <result+0xd3>
     424:	469f 000d 4800      	0x4800000d469f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     42a:	000d                	c.nop	3
     42c:	0100                	addi	s0,sp,128
     42e:	5900                	lw	s0,48(a0)
	...
    int denum_temp[size_D];
     438:	0bf8                	addi	a4,sp,476
    for (i = 0; i < size_N; ++i){
     43a:	0000                	unimp
     43c:	0c0c                	addi	a1,sp,528
     43e:	0000                	unimp
    if(size_N == 106) {
     440:	0001                	nop
     442:	0c5a                	slli	s8,s8,0x16
     444:	000c                	0xc
     446:	5800                	lw	s0,48(s0)
        array_mod(num_temp, mod, size_N - 1);
     448:	000c                	0xc
     44a:	0100                	addi	s0,sp,128
     44c:	5800                	lw	s0,48(s0)
     44e:	0c58                	addi	a4,sp,532
     450:	0000                	unimp
        while(num_temp[size_N - 1] < 0){
     452:	0c80                	addi	s0,sp,592
     454:	0000                	unimp
     456:	0004                	0x4
     458:	9f5a01f3          	0x9f5a01f3
	...
    for (i = 0; i < size_D; ++i) {
     464:	0bf8                	addi	a4,sp,476
     466:	0000                	unimp
	array_mod(denum_temp,mod,size_D);
     468:	0c14                	addi	a3,sp,528
     46a:	0000                	unimp
     46c:	0001                	nop
     46e:	000c145b          	0xc145b
    for (i = 0; i < size_N; ++i){
     472:	6600                	flw	fs0,8(a2)
     474:	000c                	0xc
    for (i = size_D-1; i >= 0; i = i-1){
     476:	0100                	addi	s0,sp,128
     478:	6200                	flw	fs0,0(a2)
     47a:	0c66                	slli	s8,s8,0x19
     47c:	0000                	unimp
     47e:	0c6e                	slli	s8,s8,0x1b
     480:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     482:	0004                	0x4
     484:	9f5b01f3          	0x9f5b01f3
    for (u = 0; u < mod; ++u){
     488:	0c6e                	slli	s8,s8,0x1b
     48a:	0000                	unimp
     48c:	0c80                	addi	s0,sp,592
     48e:	0000                	unimp
        num_temp[i] = num[i];
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
     494:	0000                	unimp
     496:	0000                	unimp
     498:	0000                	unimp
     49a:	f800                	fsw	fs0,48(s0)
    for (i = 0; i < size_N; ++i){
     49c:	0800000b          	0x800000b
     4a0:	000c                	0xc
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4a2:	0100                	addi	s0,sp,128
     4a4:	5c00                	lw	s0,56(s0)
     4a6:	0c08                	addi	a0,sp,528
     4a8:	0000                	unimp
        array_mod(num_temp, mod, size_N);
     4aa:	0c3e                	slli	s8,s8,0xf
     4ac:	0000                	unimp
     4ae:	0001                	nop
     4b0:	3e59                	jal	46 <__DYNAMIC+0x46>
     4b2:	000c                	0xc
        denum_temp[i] = denum[i];
     4b4:	4100                	lw	s0,0(a0)
     4b6:	000c                	0xc
     4b8:	0100                	addi	s0,sp,128
     4ba:	5b00                	lw	s0,48(a4)
     4bc:	0c41                	addi	s8,s8,16
     4be:	0000                	unimp
    for (i = 0; i < size_D; ++i) {
     4c0:	0c80                	addi	s0,sp,592
        denum_temp[i] = denum[i];
     4c2:	0000                	unimp
    for (i = 0; i < size_D; ++i) {
     4c4:	0004                	0x4
        q[i] = 0;
     4c6:	9f5c01f3          	0x9f5c01f3
	...
     4d2:	0bf8                	addi	a4,sp,476
        v[i] = 0;
     4d4:	0000                	unimp
     4d6:	0c1f 0000 0001      	0x100000c1f
        if( denum_temp[i] != 0 )
     4dc:	1f5d                	addi	t5,t5,-9
    for (i = size_D-1; i >= 0; i = i-1){
     4de:	000c                	0xc
     4e0:	3a00                	fld	fs0,48(a2)
        if ( (b_N*u)%mod == 1 )
     4e2:	000c                	0xc
     4e4:	0100                	addi	s0,sp,128
     4e6:	6300                	flw	fs0,0(a4)
     4e8:	0c3a                	slli	s8,s8,0xe
     4ea:	0000                	unimp
    for (u = 0; u < mod; ++u){
     4ec:	0c80                	addi	s0,sp,592
     4ee:	0000                	unimp
        if( num_temp[i] != 0 )
     4f0:	0004                	0x4
    for (i = size_N-1; i >= 0; i = i-1){
     4f2:	9f5d01f3          	0x9f5d01f3
	...
     4fe:	0bf8                	addi	a4,sp,476
         if(size_N == 106) {
     500:	0000                	unimp
     502:	0c1f 0000 0001      	0x100000c1f
        v[(d-d2)] = u*r_d;
     508:	1f5e                	slli	t5,t5,0x37
     50a:	000c                	0xc
     50c:	6a00                	flw	fs0,16(a2)
     50e:	000c                	0xc
     510:	0100                	addi	s0,sp,128
     512:	6400                	flw	fs0,8(s0)
         if(size_N == 106) {
     514:	0c6a                	slli	s8,s8,0x1a
     516:	0000                	unimp
            array_mod(v, mod, size_N - 1);
     518:	0c6e                	slli	s8,s8,0x1b
     51a:	0000                	unimp
     51c:	0004                	0x4
     51e:	9f5e01f3          	0x9f5e01f3
            while(v[size_N - 1] < 0){
     522:	0c6e                	slli	s8,s8,0x1b
     524:	0000                	unimp
     526:	0c80                	addi	s0,sp,592
     528:	0000                	unimp
            v[size_N - 1] = v[size_N - 1] % mod;
     52a:	0001                	nop
     52c:	0064                	addi	s1,sp,12
     52e:	0000                	unimp
     530:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     532:	0000                	unimp
     534:	3a00                	fld	fs0,48(a2)
     536:	000c                	0xc
     538:	4100                	lw	s0,0(a0)
     53a:	000c                	0xc
     53c:	0100                	addi	s0,sp,128
     53e:	5a00                	lw	s0,48(a2)
        if(size_N == 106) {
     540:	0c41                	addi	s8,s8,16
     542:	0000                	unimp
     544:	0c68                	addi	a0,sp,540
     546:	0000                	unimp
            array_mod(product, mod, size_N - 1);
     548:	0001                	nop
     54a:	000c6e63          	bltu	s8,zero,566 <polydiv+0x182>
     54e:	8000                	0x8000
            while(product[size_N - 1] < 0){
     550:	000c                	0xc
     552:	0100                	addi	s0,sp,128
     554:	6300                	flw	fs0,0(a4)
	...
            product[size_N - 1] = product[size_N - 1] % mod;
     55e:	0c52                	slli	s8,s8,0x14
     560:	0000                	unimp
     562:	0c64                	addi	s1,sp,540
     564:	0000                	unimp
     566:	0001                	nop
        for (i = 0; i < size_N; ++i){
     568:	6e59                	lui	t3,0x16
     56a:	000c                	0xc
 	if(size_N == 106) {
     56c:	7800                	flw	fs0,48(s0)
     56e:	000c                	0xc
            array_mod(num_temp, mod, size_N - 1);
     570:	0100                	addi	s0,sp,128
     572:	5900                	lw	s0,48(a0)
     574:	0c78                	addi	a4,sp,540
     576:	0000                	unimp
     578:	0c7e                	slli	s8,s8,0x1f
            while(num_temp[size_N - 1] < 0){
     57a:	0000                	unimp
     57c:	7f790003          	lb	zero,2039(s2)
     580:	7e9f 000c 8000      	0x8000000c7e9f
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     586:	000c                	0xc
     588:	0100                	addi	s0,sp,128
     58a:	5900                	lw	s0,48(a0)
	...
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     594:	0904                	addi	s1,sp,144
     596:	0000                	unimp
     598:	0948                	addi	a0,sp,148
     59a:	0000                	unimp
            array_mod(q, mod, size_N - 1);
     59c:	0001                	nop
     59e:	485a                	lw	a6,148(sp)
     5a0:	0009                	c.nop	2
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     5a2:	0c00                	addi	s0,sp,528
            array_mod(q, mod, size_N - 1);
     5a4:	0100000b          	0x100000b
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     5a8:	6200                	flw	fs0,0(a2)
            array_mod(q, mod, size_N - 1);
     5aa:	0b0c                	addi	a1,sp,400
            while(q[size_N - 1] < 0){
     5ac:	0000                	unimp
     5ae:	0b30                	addi	a2,sp,408
     5b0:	0000                	unimp
     5b2:	7f850003          	lb	zero,2040(a0) # fffed7f8 <_stack_start+0xfffdd7f8>
            q[size_N - 1] = q[size_N - 1] % mod;
     5b6:	309f 000b 5000      	0x5000000b309f
     5bc:	0400000b          	0x400000b
                v[size_N - 1] = v[size_N - 1]+mod;
     5c0:	f300                	fsw	fs0,32(a4)
     5c2:	5a01                	li	s4,-32
     5c4:	509f 000b e400      	0xe400000b509f
            array_mod(v, mod, size_N);
     5ca:	0100000b          	0x100000b
     5ce:	6200                	flw	fs0,0(a2)
                product[size_N - 1] = product[size_N - 1]+mod;
     5d0:	0be4                	addi	s1,sp,476
     5d2:	0000                	unimp
     5d4:	0bf8                	addi	a4,sp,476
     5d6:	0000                	unimp
            array_mod(product, mod, size_N);
     5d8:	7f850003          	lb	zero,2040(a0)
     5dc:	009f 0000 0000      	0x9f
     5e2:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     5e4:	0400                	addi	s0,sp,512
     5e6:	0009                	c.nop	2
     5e8:	4000                	lw	s0,0(s0)
     5ea:	0009                	c.nop	2
     5ec:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     5ee:	5b00                	lw	s0,48(a4)
     5f0:	0940                	addi	s0,sp,148
            num_temp[i] = num_temp[i] - product[i];
     5f2:	0000                	unimp
     5f4:	0b38                	addi	a4,sp,408
     5f6:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     5f8:	0001                	nop
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     5fa:	000b3867          	0xb3867
     5fe:	5000                	lw	s0,32(s0)
     600:	0400000b          	0x400000b
            array_mod(num_temp, mod, size_N);
     604:	f300                	fsw	fs0,32(a4)
     606:	5b01                	li	s6,-32
     608:	509f 000b f800      	0xf800000b509f
            array_add(q, v, size_N );
     60e:	0100000b          	0x100000b
            array_mod(q, mod, size_N);
     612:	6700                	flw	fs0,8(a4)
	...
        for (i = size_N-1; i >= 0; i = i-1){
     61c:	0904                	addi	s1,sp,144
     61e:	0000                	unimp
     620:	0944                	addi	s1,sp,148
     622:	0000                	unimp
     624:	0001                	nop
     626:	445c                	lw	a5,12(s0)
     628:	0009                	c.nop	2
     62a:	3400                	fld	fs0,40(s0)
                q[size_N - 1] = q[size_N - 1]+mod;
     62c:	0100000b          	0x100000b
     630:	6600                	flw	fs0,8(a2)
     632:	0b34                	addi	a3,sp,408
            if( num_temp[i] != 0 )
     634:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     636:	0b50                	addi	a2,sp,404
     638:	0000                	unimp
            v[i] = 0;
     63a:	0004                	0x4
     63c:	9f5c01f3          	0x9f5c01f3
     640:	0b50                	addi	a2,sp,404
     642:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     644:	0bf8                	addi	a4,sp,476
     646:	0000                	unimp
     648:	0001                	nop
    while (d >= d2){
     64a:	0066                	c.slli	zero,0x19
     64c:	0000                	unimp
    for(i = 0; i < size_N; ++i){
     64e:	0000                	unimp
        result[i] = q[i];
     650:	0000                	unimp
     652:	9200                	0x9200
     654:	000a                	c.slli	zero,0x2
     656:	9c00                	0x9c00
    for(i = 0; i < size_N; ++i){
     658:	000a                	c.slli	zero,0x2
     65a:	0100                	addi	s0,sp,128
    for(i = size_N; i < (2*size_N); ++i){
     65c:	5a00                	lw	s0,48(a2)
	...
        result[i] = num_temp[i-size_N];
     666:	0aac                	addi	a1,sp,344
    for(i = size_N; i < (2*size_N); ++i){
     668:	0000                	unimp
     66a:	00000acb          	fnmsub.s	fs5,ft0,ft0,ft0,rne
}
     66e:	0001                	nop
     670:	b05a                	fsd	fs6,32(sp)
     672:	c400000b          	0xc400000b
     676:	0100000b          	0x100000b
     67a:	5a00                	lw	s0,48(a2)
	...
     684:	0acc                	addi	a1,sp,340
     686:	0000                	unimp
     688:	0adf 0000 0001      	0x100000adf
     68e:	c45a                	sw	s6,8(sp)
     690:	d400000b          	0xd400000b
     694:	0100000b          	0x100000b
        result[i] = q[i];
     698:	5a00                	lw	s0,48(a2)
	...
    for(i = 0; i < size_N; ++i){
     6a2:	0ae0                	addi	s0,sp,348
        result[i] = q[i];
     6a4:	0000                	unimp
    for(i = 0; i < size_N; ++i){
     6a6:	0afc                	addi	a5,sp,348
        result[i] = num_temp[i-size_N];
     6a8:	0000                	unimp
     6aa:	0001                	nop
     6ac:	d45a                	sw	s6,40(sp)
     6ae:	e400000b          	0xe400000b
     6b2:	0100000b          	0x100000b
    for(i = size_N; i < (2*size_N); ++i){
     6b6:	5a00                	lw	s0,48(a2)
	...
    int ri_2[size]; // MX-ring poly, a
     6c0:	0a46                	slli	s4,s4,0x11
     6c2:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6c4:	0b14                	addi	a3,sp,400
     6c6:	0000                	unimp
     6c8:	0002                	c.slli64	zero
     6ca:	0072                	c.slli	zero,0x1c
     6cc:	0b14                	addi	a3,sp,400
     6ce:	0000                	unimp
     6d0:	0b2c                	addi	a1,sp,408
     6d2:	0000                	unimp
     6d4:	0002                	c.slli64	zero
     6d6:	0084                	addi	s1,sp,64
     6d8:	0b2c                	addi	a1,sp,408
     6da:	0000                	unimp
     6dc:	0b30                	addi	a2,sp,408
     6de:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     6e0:	0010                	0x10
     6e2:	0091                	addi	ra,ra,4
     6e4:	0085                	addi	ra,ra,1
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6e6:	2432                	fld	fs0,264(sp)
     6e8:	f0090f23          	sb	zero,-226(s2)
    int ri[size];
     6ec:	1c1a                	slli	s8,s8,0x26
     6ee:	f00a                	fsw	ft2,32(sp)
     6f0:	1c01                	addi	s8,s8,-32
    int ti_1[size]; // ti_1[0] = 1
     6f2:	0b30                	addi	a2,sp,408
     6f4:	0000                	unimp
     6f6:	0b50                	addi	a2,sp,404
    int ti[size];
     6f8:	0000                	unimp
     6fa:	00910013          	addi	zero,sp,9
    int qi_1[size];
     6fe:	235a01f3          	0x235a01f3
     702:	3201                	jal	2 <__DYNAMIC+0x2>
    int temp[size];
     704:	2324                	fld	fs1,64(a4)
     706:	1af0090f          	0x1af0090f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     70a:	0a1c                	addi	a5,sp,272
    int ri_2[size]; // MX-ring poly, a
     70c:	01f0                	addi	a2,sp,204
     70e:	501c                	lw	a5,32(s0)
    int temp[size];
     710:	f800000b          	0xf800000b
    for (i = 0; i < size; ++i) {
     714:	0200000b          	0x200000b
        ti_2[i] = 0;
     718:	7200                	flw	fs0,32(a2)
	...
    ti_1[0] = 1;
     722:	4a00                	lw	s0,16(a2)
     724:	000a                	c.slli	zero,0x2
     726:	4c00                	lw	s0,24(s0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     728:	000a                	c.slli	zero,0x2
     72a:	0200                	addi	s0,sp,256
     72c:	3100                	fld	fs0,32(a0)
     72e:	4c9f 000a 5200      	0x5200000a4c9f
            ti[i] = ti_2[i] - temp[i];
     734:	000a                	c.slli	zero,0x2
     736:	0100                	addi	s0,sp,128
	array_mod(ri_2,mod,N+1);
     738:	5f00                	lw	s0,56(a4)
     73a:	0a56                	slli	s4,s4,0x15
     73c:	0000                	unimp
     73e:	0a5c                	addi	a5,sp,276
	array_mod(ri_1,mod,N+1);
     740:	0000                	unimp
     742:	0001                	nop
     744:	645f 000a 7200      	0x7200000a645f
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     74a:	000a                	c.slli	zero,0x2
     74c:	0100                	addi	s0,sp,128
     74e:	5f00                	lw	s0,56(a4)
     750:	0a7c                	addi	a5,sp,284
     752:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     754:	0a91                	addi	s5,s5,4
     756:	0000                	unimp
     758:	0001                	nop
     75a:	925f 000a 9c00      	0x9c00000a925f
     760:	000a                	c.slli	zero,0x2
        for (i = 0; i < N + 1; ++i) {
     762:	0500                	addi	s0,sp,640
     764:	8200                	0x8200
     766:	3100                	fld	fs0,32(a0)
        array_mod(temp,mod,N+1);
     768:	9f24                	0x9f24
     76a:	0a9c                	addi	a5,sp,336
     76c:	0000                	unimp
     76e:	00000aab          	0xaab
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     772:	0001                	nop
     774:	ac5f 000a bc00      	0xbc00000aac5f
     77a:	000a                	c.slli	zero,0x2
        for (i = 0; i < N + 1; ++i) {
     77c:	0500                	addi	s0,sp,640
     77e:	8200                	0x8200
     780:	3300                	fld	fs0,32(a4)
	array_mod(qi_1,mod,size);
     782:	9f1e                	add	t5,t5,t2
     784:	0abc                	addi	a5,sp,344
     786:	0000                	unimp
     788:	0acc                	addi	a1,sp,340
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     78a:	0000                	unimp
     78c:	0001                	nop
     78e:	cc59                	beqz	s0,82c <ext_euclid+0x172>
     790:	000a                	c.slli	zero,0x2
     792:	d400                	sw	s0,40(s0)
     794:	000a                	c.slli	zero,0x2
     796:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     798:	3000                	fld	fs0,32(s0)
     79a:	d49f 000a dc00      	0xdc00000ad49f
	array_mod(temp,mod,size);
     7a0:	000a                	c.slli	zero,0x2
     7a2:	0100                	addi	s0,sp,128
     7a4:	5e00                	lw	s0,56(a2)
        for (i = 0; i < N + 1; ++i) {
     7a6:	0ae0                	addi	s0,sp,348
     7a8:	0000                	unimp
     7aa:	0af2                	slli	s5,s5,0x1c
     7ac:	0000                	unimp
        array_mod(ti,mod,N+1);
     7ae:	0005                	c.nop	1
     7b0:	0082                	c.slli64	ra
     7b2:	2432                	fld	fs0,264(sp)
     7b4:	f29f 000a 0c00      	0xc00000af29f
        for (i = 0; i < N + 1; ++i) {
     7ba:	0100000b          	0x100000b
     7be:	6800                	flw	fs0,16(s0)
    while (controlR != 0) {
     7c0:	0b0c                	addi	a1,sp,400
        for (j = 0; j < mod; ++j) {
     7c2:	0000                	unimp
            if (((ri_2[0] * j) % mod) == 1)
     7c4:	0b8c                	addi	a1,sp,464
        for (j = 0; j < mod; ++j) {
     7c6:	0000                	unimp
     7c8:	0001                	nop
     7ca:	8c5f 000b 8e00      	0x8e00000b8c5f
     7d0:	0300000b          	0x300000b
        for (i = 0; i < N + 1; ++i) {
     7d4:	7f00                	flw	fs0,56(a4)
    }
     7d6:	9f7f                	0x9f7f
     7d8:	0b8e                	slli	s7,s7,0x3
     7da:	0000                	unimp
     7dc:	0bb0                	addi	a2,sp,472
     7de:	0000                	unimp
     7e0:	0001                	nop
     7e2:	b05f 000b c000      	0xc000000bb05f
     7e8:	0100000b          	0x100000b
     7ec:	5900                	lw	s0,48(a0)
     7ee:	0bc0                	addi	s0,sp,468
     7f0:	0000                	unimp
     7f2:	0bc2                	slli	s7,s7,0x10
     7f4:	0000                	unimp
     7f6:	7f790003          	lb	zero,2039(s2)
     7fa:	c29f 000b c400      	0xc400000bc29f
        ri_2[i] = polyR[i];
     800:	0100000b          	0x100000b
     804:	5900                	lw	s0,48(a0)
     806:	0bc4                	addi	s1,sp,468
     808:	0000                	unimp
     80a:	0bc8                	addi	a0,sp,468
    for (i = 0; i < size; ++i) {
     80c:	0000                	unimp
        ri_2[i] = polyR[i];
     80e:	0001                	nop
     810:	c85e                	sw	s7,16(sp)
        ri_1[i] = polyf[i];
     812:	d200000b          	0xd200000b
     816:	0300000b          	0x300000b
     81a:	7e00                	flw	fs0,56(a2)
     81c:	9f7f                	0x9f7f
     81e:	0bd2                	slli	s7,s7,0x14
     820:	0000                	unimp
        ti_2[i] = 0;
     822:	0bd4                	addi	a3,sp,468
     824:	0000                	unimp
     826:	0001                	nop
     828:	d45e                	sw	s7,40(sp)
        ti_1[i] = 0;
     82a:	e400000b          	0xe400000b
     82e:	0100000b          	0x100000b
    for (i = 0; i < size; ++i) {
     832:	6800                	flw	fs0,16(s0)
     834:	0be4                	addi	s1,sp,476
            ri[i - (N + 1)] = res[i];
     836:	0000                	unimp
     838:	0bf4                	addi	a3,sp,476
     83a:	0000                	unimp
     83c:	0001                	nop
        for (i = N + 1; i < (2 * N + 2); ++i) {
     83e:	f45f 000b f600      	0xf600000bf45f
            ri[i - (N + 1)] = res[i];
     844:	0300000b          	0x300000b
            temp[i] = ri_2[i] - ri[i];
     848:	7f00                	flw	fs0,56(a4)
     84a:	9f7f                	0x9f7f
     84c:	0bf6                	slli	s7,s7,0x1d
     84e:	0000                	unimp
     850:	0bf8                	addi	a4,sp,476
     852:	0000                	unimp
     854:	0001                	nop
     856:	005f 0000 0000      	0x5f
     85c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     85e:	1000                	addi	s0,sp,32
     860:	5000000b          	0x5000000b
            qi_1[i] = res1[i];
     864:	0600000b          	0x600000b
     868:	0300                	addi	s0,sp,384
     86a:	1b0c                	addi	a1,sp,432
     86c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     86e:	009f 0000 0000      	0x9f
            temp[i] = res2[i];
     874:	0000                	unimp
     876:	4600                	lw	s0,8(a2)
     878:	000a                	c.slli	zero,0x2
     87a:	0c00                	addi	s0,sp,528
     87c:	0100000b          	0x100000b
        for (i = 0; i < N + 1; ++i) {
     880:	6200                	flw	fs0,0(a2)
            temp[i] = res2[i];
     882:	0b0c                	addi	a1,sp,400
        for (i = 0; i < N + 1; ++i) {
     884:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     886:	0b30                	addi	a2,sp,408
     888:	0000                	unimp
     88a:	7f850003          	lb	zero,2040(a0)
     88e:	309f 000b 5000      	0x5000000b309f
     894:	0400000b          	0x400000b
     898:	f300                	fsw	fs0,32(a4)
     89a:	5a01                	li	s4,-32
        for (i = 0; i < N + 1; ++i) {
     89c:	509f 000b e400      	0xe400000b509f
            ri_2[i] = ri_1[i];
     8a2:	0100000b          	0x100000b
     8a6:	6200                	flw	fs0,0(a2)
     8a8:	0be4                	addi	s1,sp,476
        for (i = 0; i < N + 1; ++i) {
     8aa:	0000                	unimp
            ri_2[i] = ri_1[i];
     8ac:	0bf8                	addi	a4,sp,476
            ri_1[i] = ri[i];
     8ae:	0000                	unimp
     8b0:	7f850003          	lb	zero,2040(a0)
            ti_2[i] = ti_1[i];
     8b4:	009f 0000 0000      	0x9f
     8ba:	0000                	unimp
     8bc:	ba00                	fsd	fs0,48(a2)
     8be:	0006                	c.slli	zero,0x1
     8c0:	3800                	fld	fs0,48(s0)
            controlR += ri[i];
     8c2:	01000007          	0x1000007
            ti_2[i] = ti_1[i];
     8c6:	5a00                	lw	s0,48(a2)
            ti_1[i] = ti[i];
     8c8:	0738                	addi	a4,sp,904
     8ca:	0000                	unimp
     8cc:	0800                	addi	s0,sp,16
     8ce:	0000                	unimp
            qi_1[i] = 0;
     8d0:	0004                	0x4
     8d2:	9f5a01f3          	0x9f5a01f3
     8d6:	0800                	addi	s0,sp,16
        for (i = 0; i < N + 1; ++i) {
     8d8:	0000                	unimp
     8da:	0836                	slli	a6,a6,0xd
            if (((ri_2[0] * j) % mod) == 1)
     8dc:	0000                	unimp
     8de:	0001                	nop
     8e0:	365a                	fld	fa2,432(sp)
     8e2:	0008                	0x8
     8e4:	0400                	addi	s0,sp,512
     8e6:	0009                	c.nop	2
     8e8:	0400                	addi	s0,sp,512
     8ea:	f300                	fsw	fs0,32(a4)
        for (j = 0; j < mod; ++j) {
     8ec:	5a01                	li	s4,-32
     8ee:	009f 0000 0000      	0x9f
        for (i = 0; i < N + 1; ++i) {
     8f4:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8f6:	ba00                	fsd	fs0,48(a2)
     8f8:	0006                	c.slli	zero,0x1
     8fa:	3800                	fld	fs0,48(s0)
     8fc:	01000007          	0x1000007
     900:	5b00                	lw	s0,48(a4)
        for (i = 0; i < N + 1; ++i) {
     902:	0738                	addi	a4,sp,904
int* generate_keys(int N, int p, int q){
     904:	0000                	unimp
     906:	0800                	addi	s0,sp,16
     908:	0000                	unimp
     90a:	0004                	0x4
     90c:	9f5b01f3          	0x9f5b01f3
     910:	0800                	addi	s0,sp,16
     912:	0000                	unimp
     914:	0836                	slli	a6,a6,0xd
     916:	0000                	unimp
     918:	0001                	nop
     91a:	0008365b          	0x8365b
     91e:	0400                	addi	s0,sp,512
     920:	0009                	c.nop	2
     922:	0400                	addi	s0,sp,512
     924:	f300                	fsw	fs0,32(a4)
     926:	5b01                	li	s6,-32
     928:	009f 0000 0000      	0x9f
     92e:	0000                	unimp
     930:	ba00                	fsd	fs0,48(a2)
     932:	0006                	c.slli	zero,0x1
     934:	1e00                	addi	s0,sp,816
     936:	01000007          	0x1000007
     93a:	5c00                	lw	s0,56(s0)
     93c:	071e                	slli	a4,a4,0x7
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     93e:	0000                	unimp
     940:	07f4                	addi	a3,sp,972
     942:	0000                	unimp
     944:	0001                	nop
     946:	0007f46b          	0x7f46b
     94a:	0000                	unimp
     94c:	0008                	0x8
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     94e:	0400                	addi	s0,sp,512
     950:	f300                	fsw	fs0,32(a4)
     952:	5c01                	li	s8,-32
     954:	009f 0008 0400      	0x4000008009f
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     95a:	0009                	c.nop	2
     95c:	0100                	addi	s0,sp,128
     95e:	6b00                	flw	fs0,16(a4)
	...
     968:	06ba                	slli	a3,a3,0xe
     96a:	0000                	unimp
     96c:	071e                	slli	a4,a4,0x7
     96e:	0000                	unimp
     970:	0001                	nop
     972:	1e5d                	addi	t3,t3,-9
     974:	e0000007          	0xe0000007
     978:	01000007          	0x1000007
     97c:	5900                	lw	s0,48(a0)
     97e:	07e0                	addi	s0,sp,972
     980:	0000                	unimp
     982:	0800                	addi	s0,sp,16
     984:	0000                	unimp
     986:	0004                	0x4
     988:	9f5d01f3          	0x9f5d01f3
     98c:	0800                	addi	s0,sp,16
     98e:	0000                	unimp
     990:	0904                	addi	s1,sp,144
     992:	0000                	unimp
     994:	0001                	nop
     996:	0059                	c.nop	22
     998:	0000                	unimp
     99a:	0000                	unimp
     99c:	0000                	unimp
     99e:	d600                	sw	s0,40(a2)
     9a0:	00000007          	0x7
     9a4:	0008                	0x8
     9a6:	0600                	addi	s0,sp,768
     9a8:	0300                	addi	s0,sp,384
     9aa:	197c                	addi	a5,sp,188
     9ac:	0000                	unimp
     9ae:	009f 0000 0000      	0x9f
     9b4:	0000                	unimp
     9b6:	1200                	addi	s0,sp,288
     9b8:	e2000007          	0xe2000007
     9bc:	01000007          	0x1000007
     9c0:	6200                	flw	fs0,0(a2)
     9c2:	07e2                	slli	a5,a5,0x18
    int polyR[N+1];
     9c4:	0000                	unimp
     9c6:	07f4                	addi	a3,sp,972
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9c8:	0000                	unimp
    int polyR[N+1];
     9ca:	7f8b0003          	lb	zero,2040(s6)
     9ce:	f49f 0007 0000      	0x7f49f
     9d4:	0008                	0x8
     9d6:	0600                	addi	s0,sp,768
    polyR[N] = 1;
     9d8:	f300                	fsw	fs0,32(a4)
     9da:	5c01                	li	s8,-32
     9dc:	1c31                	addi	s8,s8,-20
     9de:	009f 0008 0400      	0x4000008009f
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9e4:	0009                	c.nop	2
     9e6:	0100                	addi	s0,sp,128
     9e8:	6200                	flw	fs0,0(a2)
	...
     9f2:	0712                	slli	a4,a4,0x4
     9f4:	0000                	unimp
     9f6:	071e                	slli	a4,a4,0x7
     9f8:	0000                	unimp
     9fa:	0002                	c.slli64	zero
     9fc:	9f30                	0x9f30
     9fe:	071e                	slli	a4,a4,0x7
     a00:	0000                	unimp
     a02:	0738                	addi	a4,sp,904
     a04:	0000                	unimp
     a06:	0001                	nop
     a08:	545e                	lw	s0,244(sp)
     a0a:	58000007          	0x58000007
     a0e:	01000007          	0x1000007
     a12:	6b00                	flw	fs0,16(a4)
     a14:	0758                	addi	a4,sp,900
     a16:	0000                	unimp
     a18:	0762                	slli	a4,a4,0x18
     a1a:	0000                	unimp
     a1c:	0001                	nop
     a1e:	645f 0007 6f00      	0x6f000007645f
     a24:	01000007          	0x1000007
     a28:	5e00                	lw	s0,56(a2)
     a2a:	077c                	addi	a5,sp,908
     a2c:	0000                	unimp
     a2e:	077e                	slli	a4,a4,0x1f
     a30:	0000                	unimp
     a32:	0002                	c.slli64	zero
     a34:	9f30                	0x9f30
     a36:	077e                	slli	a4,a4,0x1f
     a38:	0000                	unimp
     a3a:	0789                	addi	a5,a5,2
     a3c:	0000                	unimp
     a3e:	0001                	nop
     a40:	985f 0007 9a00      	0x9a000007985f
    polyR[0] = -1;
     a46:	02000007          	0x2000007
    for(i = 1; i < N; ++i){
     a4a:	3000                	fld	fs0,32(s0)
     a4c:	9a9f 0007 a500      	0xa50000079a9f
    for (i = N; i < 55; ++i ){
     a52:	01000007          	0x1000007
     a56:	5f00                	lw	s0,56(a4)
     a58:	07a6                	slli	a5,a5,0x9
    for(i = 0; i < N; ++i){
     a5a:	0000                	unimp
        random_keys[i] = f[i];
     a5c:	07aa                	slli	a5,a5,0xa
     a5e:	0000                	unimp
     a60:	0002                	c.slli64	zero
     a62:	9f30                	0x9f30
    for(i = 0; i < N; ++i){
     a64:	07aa                	slli	a5,a5,0xa
     a66:	0000                	unimp
     a68:	07b5                	addi	a5,a5,13
     a6a:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     a6c:	0001                	nop
     a6e:	b65e                	fsd	fs7,296(sp)
     a70:	bc000007          	0xbc000007
        random_keys[i] = g[i-N];
     a74:	02000007          	0x2000007
     a78:	3000                	fld	fs0,32(s0)
     a7a:	bc9f 0007 c600      	0xc6000007bc9f
    for(i = (2*N); i < (3*N); ++i){
     a80:	01000007          	0x1000007
     a84:	5d00                	lw	s0,56(a0)
    fp = ext_euclid(polyR, f, (N+1), p);
     a86:	07d2                	slli	a5,a5,0x14
     a88:	0000                	unimp
     a8a:	080e                	slli	a6,a6,0x3
     a8c:	0000                	unimp
     a8e:	0001                	nop
     a90:	0e5e                	slli	t3,t3,0x17
    for(i = (2*N); i < (3*N); ++i){
     a92:	0008                	0x8
        random_keys[i] = fp[i-(2*N)];
     a94:	3200                	fld	fs0,32(a2)
     a96:	0008                	0x8
     a98:	0300                	addi	s0,sp,384
     a9a:	7e00                	flw	fs0,56(a2)
    for(i = (2*N); i < (3*N); ++i){
     a9c:	9f7f                	0x9f7f
     a9e:	0832                	slli	a6,a6,0xc
    fq = ext_euclid(polyR, f, (N+1), q);
     aa0:	0000                	unimp
     aa2:	0836                	slli	a6,a6,0xd
     aa4:	0000                	unimp
     aa6:	0001                	nop
     aa8:	365e                	fld	fa2,496(sp)
     aaa:	0008                	0x8
    for(i = (3*N); i < (4*N); ++i){
     aac:	4000                	lw	s0,0(s0)
     aae:	0008                	0x8
     ab0:	0100                	addi	s0,sp,128
     ab2:	5f00                	lw	s0,56(a4)
        random_keys[i] = fq[i-(3*N)];
     ab4:	0840                	addi	s0,sp,20
     ab6:	0000                	unimp
     ab8:	0846                	slli	a6,a6,0x11
     aba:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     abc:	7f7f0003          	lb	zero,2039(t5) # 1b7f7 <_stack_start+0xb7f7>
    fg = polymult2(fq, N, g, N, 0);
     ac0:	469f 0008 4800      	0x48000008469f
     ac6:	0008                	0x8
     ac8:	0100                	addi	s0,sp,128
     aca:	5f00                	lw	s0,56(a4)
    for(i = 0; i < (2*N-1); ++i){
     acc:	0848                	addi	a0,sp,20
     ace:	0000                	unimp
     ad0:	085a                	slli	a6,a6,0x16
     ad2:	0000                	unimp
     ad4:	0001                	nop
     ad6:	5a5e                	lw	s4,244(sp)
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ad8:	0008                	0x8
     ada:	5e00                	lw	s0,56(a2)
     adc:	0008                	0x8
     ade:	0300                	addi	s0,sp,384
    for(i = (4*N); i < (5*N); ++i){
     ae0:	7e00                	flw	fs0,56(a2)
     ae2:	9f7f                	0x9f7f
     ae4:	085e                	slli	a6,a6,0x17
     ae6:	0000                	unimp
     ae8:	0862                	slli	a6,a6,0x18
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     aea:	0000                	unimp
     aec:	0001                	nop
     aee:	625e                	flw	ft4,212(sp)
     af0:	0008                	0x8
    for(i = (4*N); i < (5*N); ++i){
     af2:	7000                	flw	fs0,32(s0)
     af4:	0008                	0x8
     af6:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     af8:	5f00                	lw	s0,56(a4)
     afa:	0870                	addi	a2,sp,28
        random_keys[i] = polyR[i-(5*N)];
     afc:	0000                	unimp
     afe:	0872                	slli	a6,a6,0x1c
     b00:	0000                	unimp
     b02:	7f7f0003          	lb	zero,2039(t5)
    for(i = (5*N); i < (6*N+1); ++i){
     b06:	729f 0008 8200      	0x82000008729f
     b0c:	0008                	0x8
     b0e:	0100                	addi	s0,sp,128
}
     b10:	5f00                	lw	s0,56(a4)
     b12:	0882                	c.slli64	a7
     b14:	0000                	unimp
     b16:	0884                	addi	s1,sp,80
     b18:	0000                	unimp
     b1a:	7f7f0003          	lb	zero,2039(t5)
     b1e:	849f 0008 8600      	0x86000008849f
     b24:	0008                	0x8
     b26:	0100                	addi	s0,sp,128
     b28:	5f00                	lw	s0,56(a4)
     b2a:	0886                	slli	a7,a7,0x1
     b2c:	0000                	unimp
     b2e:	0898                	addi	a4,sp,80
     b30:	0000                	unimp
     b32:	0001                	nop
     b34:	985e                	add	a6,a6,s7
     b36:	0008                	0x8
     b38:	9c00                	0x9c00
     b3a:	0008                	0x8
     b3c:	0300                	addi	s0,sp,384
     b3e:	7e00                	flw	fs0,56(a2)
     b40:	9f7f                	0x9f7f
     b42:	089c                	addi	a5,sp,80
     b44:	0000                	unimp
     b46:	08a0                	addi	s0,sp,88
     b48:	0000                	unimp
     b4a:	0001                	nop
     b4c:	a05e                	fsd	fs7,0(sp)
     b4e:	0008                	0x8
        polyR[i] = 0;
     b50:	ac00                	fsd	fs0,24(s0)
     b52:	0008                	0x8
     b54:	0100                	addi	s0,sp,128
     b56:	5d00                	lw	s0,56(a0)
     b58:	08ac                	addi	a1,sp,88
    for(i = 1; i < N; ++i){
     b5a:	0000                	unimp
     b5c:	08d8                	addi	a4,sp,84
        f[i] = 0;
     b5e:	0000                	unimp
     b60:	7f7d0003          	lb	zero,2039(s10)
     b64:	d89f 0008 dc00      	0xdc000008d89f
     b6a:	0008                	0x8
        g[i] = 0;
     b6c:	0100                	addi	s0,sp,128
     b6e:	5d00                	lw	s0,56(a0)
     b70:	08f0                	addi	a2,sp,92
     b72:	0000                	unimp
     b74:	08f4                	addi	a3,sp,92
    for (i = N; i < 55; ++i ){
     b76:	0000                	unimp
     b78:	0001                	nop
        random_keys[i] = f[i];
     b7a:	f45e                	fsw	fs7,40(sp)
     b7c:	0008                	0x8
     b7e:	0200                	addi	s0,sp,256
     b80:	0009                	c.nop	2
     b82:	0300                	addi	s0,sp,384
     b84:	7e00                	flw	fs0,56(a2)
     b86:	9f7f                	0x9f7f
     b88:	0902                	c.slli64	s2
    for(i = 0; i < N; ++i){
     b8a:	0000                	unimp
        random_keys[i] = f[i];
     b8c:	0904                	addi	s1,sp,144
    for(i = 0; i < N; ++i){
     b8e:	0000                	unimp
        random_keys[i] = g[i-N];
     b90:	0001                	nop
     b92:	005e                	c.slli	zero,0x17
     b94:	0000                	unimp
     b96:	0000                	unimp
     b98:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     b9a:	c600                	sw	s0,8(a2)
     b9c:	00000007          	0x7
        random_keys[i] = fp[i-(2*N)];
     ba0:	0008                	0x8
     ba2:	0100                	addi	s0,sp,128
     ba4:	5f00                	lw	s0,56(a4)
     ba6:	08dc                	addi	a5,sp,84
     ba8:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     baa:	0904                	addi	s1,sp,144
     bac:	0000                	unimp
     bae:	0001                	nop
        random_keys[i] = fq[i-(3*N)];
     bb0:	005f 0000 0000      	0x5f
     bb6:	0000                	unimp
     bb8:	1000                	addi	s0,sp,32
     bba:	e4000007          	0xe4000007
    for(i = (3*N); i < (4*N); ++i){
     bbe:	02000007          	0x2000007
     bc2:	8300                	0x8300
        fg[i] = fg[i]*p;
     bc4:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     bc6:	0008                	0x8
     bc8:	0400                	addi	s0,sp,512
        fg[i] = fg[i]*p;
     bca:	0009                	c.nop	2
     bcc:	0200                	addi	s0,sp,256
     bce:	8300                	0x8300
	...
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bd8:	1000                	addi	s0,sp,32
     bda:	e8000007          	0xe8000007
     bde:	02000007          	0x2000007
    for(i = (4*N); i < (5*N); ++i){
     be2:	8500                	0x8500
        random_keys[i] = polyR[i-(5*N)];
     be4:	0000                	unimp
     be6:	0008                	0x8
     be8:	0400                	addi	s0,sp,512
     bea:	0009                	c.nop	2
     bec:	0200                	addi	s0,sp,256
     bee:	8500                	0x8500
	...
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bf8:	1000                	addi	s0,sp,32
     bfa:	ee000007          	0xee000007
     bfe:	02000007          	0x2000007
     c02:	8800                	0x8800
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c04:	0000                	unimp
     c06:	0008                	0x8
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c08:	0400                	addi	s0,sp,512
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c0a:	0009                	c.nop	2
     c0c:	0200                	addi	s0,sp,256
     c0e:	8800                	0x8800
	...
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c18:	1000                	addi	s0,sp,32
     c1a:	ea000007          	0xea000007
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1e:	02000007          	0x2000007
    temp = polymult(public_key,N,random_val,48,q,0);
     c22:	8600                	0x8600
     c24:	ea00                	fsw	fs0,16(a2)
     c26:	ee000007          	0xee000007
     c2a:	0c000007          	0xc000007
     c2e:	8800                	0x8800
     c30:	8b00                	0x8b00
	array_add(temp,message,48);
     c32:	3200                	fld	fs0,32(a2)
     c34:	2324                	fld	fs1,64(a4)
     c36:	1af0090f          	0x1af0090f
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c3a:	001c                	0x1c
     c3c:	0008                	0x8
	array_add(temp,message,48);
     c3e:	0400                	addi	s0,sp,512
     c40:	0009                	c.nop	2
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c42:	0200                	addi	s0,sp,256
     c44:	8600                	0x8600
	...
     c4e:	1000                	addi	s0,sp,32
     c50:	f0000007          	0xf0000007
    for(i = (2*N); i < (3*N); ++i){
     c54:	02000007          	0x2000007
     c58:	8900                	0x8900
     c5a:	0000                	unimp
     c5c:	0008                	0x8
}
     c5e:	0400                	addi	s0,sp,512
     c60:	0009                	c.nop	2
     c62:	0200                	addi	s0,sp,256
     c64:	8900                	0x8900
	...
        CT[i-(2*N)] = CT[i];
     c6e:	1000                	addi	s0,sp,32
     c70:	ec000007          	0xec000007
     c74:	02000007          	0x2000007
    for(i = (2*N); i < (3*N); ++i){
     c78:	8700                	0x8700
        CT[i-(2*N)] = CT[i];
     c7a:	ec00                	fsw	fs0,24(s0)
     c7c:	f0000007          	0xf0000007
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c80:	0c000007          	0xc000007
     c84:	8900                	0x8900
     c86:	8b00                	0x8b00
    for(i = (2*N); i < ((2*N)+N); ++i){
     c88:	3200                	fld	fs0,32(a2)
     c8a:	2324                	fld	fs1,64(a4)
     c8c:	1af0090f          	0x1af0090f
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c90:	001c                	0x1c
     c92:	0008                	0x8
     c94:	0400                	addi	s0,sp,512
     c96:	0009                	c.nop	2
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c98:	0200                	addi	s0,sp,256
     c9a:	8700                	0x8700
	...
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca4:	1200                	addi	s0,sp,288
     ca6:	da000007          	0xda000007
     caa:	02000007          	0x2000007
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cae:	7200                	flw	fs0,32(a2)
     cb0:	da00                	sw	s0,48(a2)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cb2:	e6000007          	0xe6000007
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cb6:	02000007          	0x2000007
     cba:	8400                	0x8400
     cbc:	e600                	fsw	fs0,8(a2)
     cbe:	ec000007          	0xec000007
     cc2:	0c000007          	0xc000007
     cc6:	8700                	0x8700
    for(i = (2*N); i < ((2*N)+N); ++i){
     cc8:	8b00                	0x8b00
     cca:	3200                	fld	fs0,32(a2)
     ccc:	2324                	fld	fs1,64(a4)
     cce:	1af0090f          	0x1af0090f
        if(a2[i] <= q/2)
     cd2:	ec1c                	fsw	fa5,24(s0)
     cd4:	f0000007          	0xf0000007
    for (i = 0; i < N; ++i){
     cd8:	0e000007          	0xe000007
     cdc:	8900                	0x8900
    c = polymult2(secret_key_fp,N,a2,N,0);
     cde:	8b00                	0x8b00
     ce0:	3200                	fld	fs0,32(a2)
     ce2:	2324                	fld	fs1,64(a4)
     ce4:	1af0090f          	0x1af0090f
     ce8:	2431                	jal	ef4 <memset+0x58>
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cea:	001c                	0x1c
     cec:	0008                	0x8
     cee:	0400                	addi	s0,sp,512
     cf0:	0009                	c.nop	2
     cf2:	0200                	addi	s0,sp,256
     cf4:	7200                	flw	fs0,32(a2)
	...
}
     cfe:	5400                	lw	s0,40(s0)
     d00:	6e000007          	0x6e000007
     d04:	01000007          	0x1000007
     d08:	5a00                	lw	s0,48(a2)
     d0a:	0836                	slli	a6,a6,0xd
     d0c:	0000                	unimp
     d0e:	0862                	slli	a6,a6,0x18
     d10:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     d12:	0001                	nop
     d14:	005a                	c.slli	zero,0x16
     d16:	0000                	unimp
     d18:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d1a:	0000                	unimp
     d1c:	7c00                	flw	fs0,56(s0)
        a2[i-(2*N)] = a2[i];
     d1e:	88000007          	0x88000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     d22:	01000007          	0x1000007
        if(a2[i] <= q/2)
     d26:	5a00                	lw	s0,48(a2)
     d28:	0862                	slli	a6,a6,0x18
            a2[i] = (-1)*(q-a2[i]);
     d2a:	0000                	unimp
     d2c:	0874                	addi	a3,sp,28
     d2e:	0000                	unimp
    for (i = 0; i < N; ++i){
     d30:	0001                	nop
     d32:	005a                	c.slli	zero,0x16
     d34:	0000                	unimp
        c2[i-(2*N)] = c2[i];
     d36:	0000                	unimp
     d38:	0000                	unimp
     d3a:	9800                	0x9800
     d3c:	a4000007          	0xa4000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     d40:	01000007          	0x1000007
        c2[i-(2*N)] = c2[i];
     d44:	5a00                	lw	s0,48(a2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d46:	0874                	addi	a3,sp,28
  jal x0, default_exc_handler
     d48:	0000                	unimp
     d4a:	0886                	slli	a7,a7,0x1
  mv  x1, x0
     d4c:	0000                	unimp
     d4e:	0001                	nop
  mv  x2, x1
     d50:	005a                	c.slli	zero,0x16
  mv  x3, x1
     d52:	0000                	unimp
  mv  x4, x1
     d54:	0000                	unimp
  mv  x5, x1
     d56:	0000                	unimp
  mv  x6, x1
     d58:	1200                	addi	s0,sp,288
  mv  x7, x1
     d5a:	38000007          	0x38000007
  mv  x9, x1
     d5e:	02000007          	0x2000007
  mv x11, x1
     d62:	3100                	fld	fs0,32(a0)
  mv x12, x1
     d64:	389f 0007 bc00      	0xbc000007389f
  mv x15, x1
     d6a:	02000007          	0x2000007
  mv x17, x1
     d6e:	3000                	fld	fs0,32(s0)
  mv x18, x1
     d70:	bc9f 0007 d200      	0xd2000007bc9f
  mv x21, x1
     d76:	01000007          	0x1000007
  mv x23, x1
     d7a:	5e00                	lw	s0,56(a2)
  mv x24, x1
     d7c:	0800                	addi	s0,sp,16
  mv x25, x1
     d7e:	0000                	unimp
  mv x26, x1
     d80:	0836                	slli	a6,a6,0xd
  mv x27, x1
     d82:	0000                	unimp
  mv x28, x1
     d84:	0002                	c.slli64	zero
  mv x29, x1
     d86:	9f31                	0x9f31
  mv x30, x1
     d88:	0836                	slli	a6,a6,0xd
  mv x31, x1
     d8a:	0000                	unimp
  la   x2, _stack_start
     d8c:	08a0                	addi	s0,sp,88
     d8e:	0000                	unimp
     d90:	0002                	c.slli64	zero
     d92:	9f30                	0x9f30
  la x26, _bss_start
     d94:	08a0                	addi	s0,sp,88
     d96:	0000                	unimp
     d98:	08c4                	addi	s1,sp,84
     d9a:	0000                	unimp
  la x27, _bss_end
     d9c:	0001                	nop
     d9e:	d85e                	sw	s7,48(sp)
     da0:	0008                	0x8
     da2:	f000                	fsw	fs0,32(s0)
  bge x26, x27, zero_loop_end
     da4:	0008                	0x8
     da6:	0100                	addi	s0,sp,128
  sw x0, 0(x26)
     da8:	5e00                	lw	s0,56(a2)
	...
  addi x10, x0, 0
     db2:	0710                	addi	a2,sp,896
     db4:	0000                	unimp
  addi x11, x0, 0
     db6:	07e2                	slli	a5,a5,0x18
     db8:	0000                	unimp
  jal x1, main
     dba:	0001                	nop
     dbc:	e262                	fsw	fs8,4(sp)
     dbe:	f4000007          	0xf4000007
     dc2:	03000007          	0x3000007
     dc6:	8b00                	0x8b00
     dc8:	9f7f                	0x9f7f
     dca:	07f4                	addi	a3,sp,972
     dcc:	0000                	unimp
     dce:	0800                	addi	s0,sp,16
     dd0:	0000                	unimp
     dd2:	0006                	c.slli	zero,0x1
     dd4:	315c01f3          	0x315c01f3
     dd8:	9f1c                	0x9f1c
     dda:	0800                	addi	s0,sp,16
     ddc:	0000                	unimp
     dde:	0904                	addi	s1,sp,144
     de0:	0000                	unimp
     de2:	0001                	nop
     de4:	0062                	c.slli	zero,0x18
     de6:	0000                	unimp
     de8:	0000                	unimp
     dea:	0000                	unimp
     dec:	1000                	addi	s0,sp,32
     dee:	e2000007          	0xe2000007
     df2:	01000007          	0x1000007
     df6:	6200                	flw	fs0,0(a2)
     df8:	07e2                	slli	a5,a5,0x18
     dfa:	0000                	unimp
     dfc:	07f4                	addi	a3,sp,972
     dfe:	0000                	unimp
     e00:	7f8b0003          	lb	zero,2040(s6)
     e04:	f49f 0007 0000      	0x7f49f
     e0a:	0008                	0x8
     e0c:	0600                	addi	s0,sp,768
     e0e:	f300                	fsw	fs0,32(a4)
     e10:	5c01                	li	s8,-32
     e12:	1c31                	addi	s8,s8,-20
     e14:	009f 0008 0400      	0x4000008009f
     e1a:	0009                	c.nop	2
     e1c:	0100                	addi	s0,sp,128
     e1e:	6200                	flw	fs0,0(a2)
	...
     e28:	0710                	addi	a2,sp,896
     e2a:	0000                	unimp
     e2c:	07e2                	slli	a5,a5,0x18
     e2e:	0000                	unimp
     e30:	0001                	nop
     e32:	e262                	fsw	fs8,4(sp)
     e34:	f4000007          	0xf4000007
     e38:	03000007          	0x3000007
     e3c:	8b00                	0x8b00
     e3e:	9f7f                	0x9f7f
     e40:	07f4                	addi	a3,sp,972
     e42:	0000                	unimp
     e44:	0800                	addi	s0,sp,16
     e46:	0000                	unimp
     e48:	0006                	c.slli	zero,0x1
     e4a:	315c01f3          	0x315c01f3
     e4e:	9f1c                	0x9f1c
     e50:	0800                	addi	s0,sp,16
     e52:	0000                	unimp
     e54:	0904                	addi	s1,sp,144
     e56:	0000                	unimp
     e58:	0001                	nop
     e5a:	0062                	c.slli	zero,0x18
     e5c:	0000                	unimp
     e5e:	0000                	unimp
     e60:	0000                	unimp
     e62:	1000                	addi	s0,sp,32
     e64:	e2000007          	0xe2000007
     e68:	01000007          	0x1000007
     e6c:	6200                	flw	fs0,0(a2)
     e6e:	07e2                	slli	a5,a5,0x18
     e70:	0000                	unimp
     e72:	07f4                	addi	a3,sp,972
     e74:	0000                	unimp
     e76:	7f8b0003          	lb	zero,2040(s6)
     e7a:	f49f 0007 0000      	0x7f49f
     e80:	0008                	0x8
     e82:	0600                	addi	s0,sp,768
     e84:	f300                	fsw	fs0,32(a4)
     e86:	5c01                	li	s8,-32
     e88:	1c31                	addi	s8,s8,-20
     e8a:	009f 0008 0400      	0x4000008009f
     e90:	0009                	c.nop	2
     e92:	0100                	addi	s0,sp,128
     e94:	6200                	flw	fs0,0(a2)
	...
     e9e:	0710                	addi	a2,sp,896
     ea0:	0000                	unimp
     ea2:	07e2                	slli	a5,a5,0x18
     ea4:	0000                	unimp
     ea6:	0001                	nop
     ea8:	e262                	fsw	fs8,4(sp)
     eaa:	f4000007          	0xf4000007
     eae:	03000007          	0x3000007
     eb2:	8b00                	0x8b00
     eb4:	9f7f                	0x9f7f
     eb6:	07f4                	addi	a3,sp,972
     eb8:	0000                	unimp
     eba:	0800                	addi	s0,sp,16
     ebc:	0000                	unimp
     ebe:	0006                	c.slli	zero,0x1
     ec0:	315c01f3          	0x315c01f3
     ec4:	9f1c                	0x9f1c
     ec6:	0800                	addi	s0,sp,16
     ec8:	0000                	unimp
     eca:	0904                	addi	s1,sp,144
     ecc:	0000                	unimp
     ece:	0001                	nop
     ed0:	0062                	c.slli	zero,0x18
     ed2:	0000                	unimp
     ed4:	0000                	unimp
     ed6:	0000                	unimp
     ed8:	1000                	addi	s0,sp,32
     eda:	e2000007          	0xe2000007
     ede:	01000007          	0x1000007
     ee2:	6200                	flw	fs0,0(a2)
     ee4:	07e2                	slli	a5,a5,0x18
     ee6:	0000                	unimp
     ee8:	07f4                	addi	a3,sp,972
     eea:	0000                	unimp
     eec:	7f8b0003          	lb	zero,2040(s6)
     ef0:	f49f 0007 0000      	0x7f49f
     ef6:	0008                	0x8
     ef8:	0600                	addi	s0,sp,768
     efa:	f300                	fsw	fs0,32(a4)
     efc:	5c01                	li	s8,-32
     efe:	1c31                	addi	s8,s8,-20
     f00:	009f 0008 0400      	0x4000008009f
     f06:	0009                	c.nop	2
     f08:	0100                	addi	s0,sp,128
     f0a:	6200                	flw	fs0,0(a2)
	...
     f14:	0710                	addi	a2,sp,896
     f16:	0000                	unimp
     f18:	07e2                	slli	a5,a5,0x18
     f1a:	0000                	unimp
     f1c:	0001                	nop
     f1e:	e262                	fsw	fs8,4(sp)
     f20:	f4000007          	0xf4000007
     f24:	03000007          	0x3000007
     f28:	8b00                	0x8b00
     f2a:	9f7f                	0x9f7f
     f2c:	07f4                	addi	a3,sp,972
     f2e:	0000                	unimp
     f30:	0800                	addi	s0,sp,16
     f32:	0000                	unimp
     f34:	0006                	c.slli	zero,0x1
     f36:	315c01f3          	0x315c01f3
     f3a:	9f1c                	0x9f1c
     f3c:	0800                	addi	s0,sp,16
     f3e:	0000                	unimp
     f40:	0904                	addi	s1,sp,144
     f42:	0000                	unimp
int main(){
     f44:	0001                	nop
     f46:	0062                	c.slli	zero,0x18
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f48:	0000                	unimp
     f4a:	0000                	unimp
     f4c:	0000                	unimp
     f4e:	e400                	fsw	fs0,8(s0)
     f50:	50000003          	lb	zero,1280(zero) # 500 <polydiv+0x11c>
     f54:	0004                	0x4
int main(){
     f56:	0100                	addi	s0,sp,128
     f58:	5a00                	lw	s0,48(a2)
     f5a:	0450                	addi	a2,sp,516
     f5c:	0000                	unimp
     f5e:	0490                	addi	a2,sp,576
     f60:	0000                	unimp
     f62:	0004                	0x4
     f64:	9f5a01f3          	0x9f5a01f3
	resultkon[0] = 0xAAAAAAA0;
     f68:	0490                	addi	a2,sp,576
int main(){
     f6a:	0000                	unimp
     f6c:	04a2                	slli	s1,s1,0x8
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f6e:	0000                	unimp
	resultkon[0] = 0xAAAAAAA0;
     f70:	0001                	nop
     f72:	a25a                	fsd	fs6,256(sp)
     f74:	0004                	0x4
     f76:	aa00                	fsd	fs0,16(a2)
     f78:	0004                	0x4
     f7a:	0400                	addi	s0,sp,512
     f7c:	f300                	fsw	fs0,32(a4)
 	*var = resultkon[0];
     f7e:	5a01                	li	s4,-32
     f80:	aa9f 0004 b000      	0xb0000004aa9f
     f86:	0004                	0x4
     f88:	0100                	addi	s0,sp,128
     f8a:	5a00                	lw	s0,48(a2)
     f8c:	04b0                	addi	a2,sp,584
    keys = generate_keys(N, p, q);
     f8e:	0000                	unimp
     f90:	06ba                	slli	a3,a3,0xe
     f92:	0000                	unimp
	resultkon[0] = 0xAAAAAAA1;
     f94:	0004                	0x4
     f96:	9f5a01f3          	0x9f5a01f3
	...
 	*var = resultkon[0];
     fa2:	03e4                	addi	s1,sp,460
     fa4:	0000                	unimp
     fa6:	044e                	slli	s0,s0,0x13
     fa8:	0000                	unimp
     faa:	0001                	nop
        secret_key_f[i] = keys[i];
     fac:	00044e5b          	0x44e5b
     fb0:	9000                	0x9000
     fb2:	0004                	0x4
     fb4:	0100                	addi	s0,sp,128
     fb6:	6200                	flw	fs0,0(a2)
    for(i = 0; i < N; ++i){
     fb8:	0490                	addi	a2,sp,576
     fba:	0000                	unimp
     fbc:	04a2                	slli	s1,s1,0x8
    for(i = N; i < (2*N); ++i){
     fbe:	0000                	unimp
     fc0:	0001                	nop
     fc2:	0004a25b          	0x4a25b
     fc6:	aa00                	fsd	fs0,16(a2)
     fc8:	0004                	0x4
        secret_key_fp[i-(2*N)] = keys[i];
     fca:	0100                	addi	s0,sp,128
     fcc:	6200                	flw	fs0,0(a2)
     fce:	04aa                	slli	s1,s1,0xa
     fd0:	0000                	unimp
     fd2:	04ae                	slli	s1,s1,0xb
    for(i = (2*N); i < (3*N); ++i){
     fd4:	0000                	unimp
     fd6:	0001                	nop
    for(i = (3*N); i < (4*N); ++i){
     fd8:	0004ae5b          	0x4ae5b
     fdc:	6800                	flw	fs0,16(s0)
     fde:	0006                	c.slli	zero,0x1
     fe0:	0100                	addi	s0,sp,128
     fe2:	6200                	flw	fs0,0(a2)
        public_key[i-(4*N)] = keys[i];
     fe4:	0668                	addi	a0,sp,780
     fe6:	0000                	unimp
     fe8:	0688                	addi	a0,sp,832
     fea:	0000                	unimp
     fec:	018a0003          	lb	zero,24(s4)
    for(i = (4*N); i < (5*N); ++i){
     ff0:	889f 0006 9600      	0x96000006889f
     ff6:	0006                	c.slli	zero,0x1
     ff8:	0400                	addi	s0,sp,512
        ring_poly[i-(5*N)] = keys[i];
     ffa:	f300                	fsw	fs0,32(a4)
     ffc:	5b01                	li	s6,-32
     ffe:	969f 0006 a800      	0xa8000006969f
    for(i = (5*N); i < (6*N+1); ++i){
    1004:	0006                	c.slli	zero,0x1
    1006:	0100                	addi	s0,sp,128
	resultkon[0] = 0xBBBBBBB0;
    1008:	6200                	flw	fs0,0(a2)
    100a:	06a8                	addi	a0,sp,840
    100c:	0000                	unimp
    100e:	06ba                	slli	a3,a3,0xe
    1010:	0000                	unimp
 	*var = resultkon[0];
    1012:	018a0003          	lb	zero,24(s4)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1016:	009f 0000 0000      	0x9f
 	*var = resultkon[0];
    101c:	0000                	unimp
    101e:	e400                	fsw	fs0,8(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1020:	4c000003          	lb	zero,1216(zero) # 4c0 <polydiv+0xdc>
    1024:	0004                	0x4
	resultkon[0] = 0xBBBBBBB1;
    1026:	0100                	addi	s0,sp,128
    1028:	5c00                	lw	s0,56(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    102a:	044c                	addi	a1,sp,516
    102c:	0000                	unimp
    102e:	0486                	slli	s1,s1,0x1
	resultkon[0] = 0xBBBBBBB1;
    1030:	0000                	unimp
    1032:	0001                	nop
 	*var = resultkon[0];
    1034:	8668                	0x8668
	resultkon[0] = 0xCCCCCCC0;
    1036:	0004                	0x4
    1038:	9000                	0x9000
    103a:	0004                	0x4
    103c:	0400                	addi	s0,sp,512
 	*var = resultkon[0];
    103e:	f300                	fsw	fs0,32(a4)
    1040:	5c01                	li	s8,-32
    1042:	909f 0004 a200      	0xa2000004909f
 	*var = resultkon[0];
    1048:	0004                	0x4
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    104a:	0100                	addi	s0,sp,128
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    104c:	5c00                	lw	s0,56(s0)
    104e:	04a2                	slli	s1,s1,0x8
 	*var = resultkon[0];
    1050:	0000                	unimp
    1052:	04aa                	slli	s1,s1,0xa
    1054:	0000                	unimp
    1056:	0001                	nop
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1058:	aa68                	fsd	fa0,208(a2)
    105a:	0004                	0x4
    105c:	ac00                	fsd	fs0,24(s0)
    105e:	0004                	0x4
    1060:	0100                	addi	s0,sp,128
    1062:	5c00                	lw	s0,56(s0)
    1064:	04ac                	addi	a1,sp,584
	resultkon[0] = 0xCCCCCCC1;
    1066:	0000                	unimp
    1068:	04e2                	slli	s1,s1,0x18
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    106a:	0000                	unimp
	resultkon[0] = 0xCCCCCCC1;
    106c:	0001                	nop
    106e:	e268                	fsw	fa0,68(a2)
 	*var = resultkon[0];
    1070:	0004                	0x4
            resultkon[0] = 0xDEDEDEDE;
    1072:	ba00                	fsd	fs0,48(a2)
    1074:	0006                	c.slli	zero,0x1
    1076:	0400                	addi	s0,sp,512
    1078:	f300                	fsw	fs0,32(a4)
 	*var = resultkon[0];
    107a:	5c01                	li	s8,-32
    107c:	009f 0000 0000      	0x9f
	    *var = resultkon[0];
    1082:	0000                	unimp
 	*var = resultkon[0];
    1084:	e400                	fsw	fs0,8(s0)
    for(i = 0; i < 32; ++i){
    1086:	3c000003          	lb	zero,960(zero) # 3c0 <polymult2+0x142>
        if(!(message[i] == Dec_Message[i])){
    108a:	0004                	0x4
    108c:	0100                	addi	s0,sp,128
    108e:	5d00                	lw	s0,56(a0)
    1090:	043c                	addi	a5,sp,520
    1092:	0000                	unimp
    1094:	0680                	addi	s0,sp,832
    1096:	0000                	unimp
    1098:	0001                	nop
            resultkon[0] = 0xBABABABA;
    109a:	8066                	c.mv	zero,s9
    109c:	0006                	c.slli	zero,0x1
    109e:	9600                	0x9600
    10a0:	0006                	c.slli	zero,0x1
    10a2:	0400                	addi	s0,sp,512
 	    *var = resultkon[0];
    10a4:	f300                	fsw	fs0,32(a4)
    10a6:	5d01                	li	s10,-32
    10a8:	969f 0006 ba00      	0xba000006969f
    10ae:	0006                	c.slli	zero,0x1
}
    10b0:	0100                	addi	s0,sp,128
    10b2:	6600                	flw	fs0,8(a2)
	...
    10bc:	03e4                	addi	s1,sp,460
    10be:	0000                	unimp
    10c0:	043c                	addi	a5,sp,520
    10c2:	0000                	unimp
    10c4:	0001                	nop
    10c6:	3c5e                	fld	fs8,496(sp)
    10c8:	0004                	0x4
    10ca:	7600                	flw	fs0,40(a2)
            resultkon[0] = 0xDEDEDEDE;
    10cc:	0006                	c.slli	zero,0x1
	    *var = resultkon[0];
    10ce:	0100                	addi	s0,sp,128
    10d0:	5900                	lw	s0,48(a0)
    10d2:	0676                	slli	a2,a2,0x1d
    10d4:	0000                	unimp
    10d6:	0696                	slli	a3,a3,0x5
    10d8:	0000                	unimp
    for(i = 0; i < 32; ++i){
    10da:	0004                	0x4
    10dc:	9f5e01f3          	0x9f5e01f3
    10e0:	0696                	slli	a3,a3,0x5
    10e2:	0000                	unimp
    10e4:	06ba                	slli	a3,a3,0xe
    10e6:	0000                	unimp
    10e8:	0001                	nop
    10ea:	0059                	c.nop	22
    10ec:	0000                	unimp
    10ee:	0000                	unimp
    10f0:	0000                	unimp
    10f2:	8800                	0x8800
    10f4:	0004                	0x4
    10f6:	9000                	0x9000
    10f8:	0004                	0x4
    10fa:	0100                	addi	s0,sp,128
    10fc:	6800                	flw	fs0,16(s0)
    10fe:	04e2                	slli	s1,s1,0x18
    1100:	0000                	unimp
    1102:	0684                	addi	s1,sp,832
    1104:	0000                	unimp
    1106:	0001                	nop
    1108:	9668                	0x9668
    110a:	0006                	c.slli	zero,0x1
    110c:	ba00                	fsd	fs0,48(a2)
    110e:	0006                	c.slli	zero,0x1
    1110:	0100                	addi	s0,sp,128
    1112:	6800                	flw	fs0,16(s0)
	...
    111c:	0506                	slli	a0,a0,0x1
    111e:	0000                	unimp
    1120:	050e                	slli	a0,a0,0x3
    1122:	0000                	unimp
    1124:	0001                	nop
    1126:	4a5f 0006 5000      	0x500000064a5f
    112c:	0006                	c.slli	zero,0x1
    112e:	0100                	addi	s0,sp,128
    1130:	5f00                	lw	s0,56(a4)
	...
    113a:	043a                	slli	s0,s0,0xe
    113c:	0000                	unimp
    113e:	043c                	addi	a5,sp,520
    1140:	0000                	unimp
    1142:	0002                	c.slli64	zero
    1144:	9f30                	0x9f30
    1146:	043c                	addi	a5,sp,520
    1148:	0000                	unimp
    114a:	0444                	addi	s1,sp,516
    114c:	0000                	unimp
    114e:	0001                	nop
    1150:	645f 0004 6f00      	0x6f000004645f
    1156:	0004                	0x4
    1158:	0100                	addi	s0,sp,128
    115a:	5f00                	lw	s0,56(a4)
    115c:	0470                	addi	a2,sp,524
    115e:	0000                	unimp
    1160:	0472                	slli	s0,s0,0x1c
    1162:	0000                	unimp
    1164:	0002                	c.slli64	zero
    1166:	9f30                	0x9f30
    1168:	0472                	slli	s0,s0,0x1c
    116a:	0000                	unimp
    116c:	0476                	slli	s0,s0,0x1d
    116e:	0000                	unimp
    1170:	0001                	nop
    1172:	765f 0004 9000      	0x90000004765f
    1178:	0004                	0x4
    117a:	0100                	addi	s0,sp,128
    117c:	6700                	flw	fs0,8(a4)
    117e:	0490                	addi	a2,sp,576
    1180:	0000                	unimp
    1182:	049e                	slli	s1,s1,0x7
    1184:	0000                	unimp
    1186:	0001                	nop
    1188:	9e5f 0004 a000      	0xa00000049e5f
    118e:	0004                	0x4
    1190:	0300                	addi	s0,sp,384
    1192:	7f00                	flw	fs0,56(a4)
    1194:	9f7f                	0x9f7f
    1196:	04a0                	addi	s0,sp,584
    1198:	0000                	unimp
    119a:	04a2                	slli	s1,s1,0x8
    119c:	0000                	unimp
    119e:	0001                	nop
    11a0:	b45f 0004 c200      	0xc2000004b45f
    11a6:	0004                	0x4
    11a8:	0100                	addi	s0,sp,128
    11aa:	5f00                	lw	s0,56(a4)
    11ac:	04c2                	slli	s1,s1,0x10
    11ae:	0000                	unimp
    11b0:	04c4                	addi	s1,sp,580
    11b2:	0000                	unimp
    11b4:	7f7f0003          	lb	zero,2039(t5)
    11b8:	c49f 0004 dc00      	0xdc000004c49f
    11be:	0004                	0x4
    11c0:	0100                	addi	s0,sp,128
    11c2:	5f00                	lw	s0,56(a4)
    11c4:	04dc                	addi	a5,sp,580
    11c6:	0000                	unimp
    11c8:	04f0                	addi	a2,sp,588
    11ca:	0000                	unimp
    11cc:	0001                	nop
    11ce:	0004f067          	0x4f067
    11d2:	0600                	addi	s0,sp,768
    11d4:	0005                	c.nop	1
    11d6:	0100                	addi	s0,sp,128
    11d8:	5f00                	lw	s0,56(a4)
    11da:	0568                	addi	a0,sp,652
    11dc:	0000                	unimp
    11de:	0579                	addi	a0,a0,30
    11e0:	0000                	unimp
    11e2:	0001                	nop
    11e4:	e45f 0005 f000      	0xf0000005e45f
    11ea:	0005                	c.nop	1
    11ec:	0100                	addi	s0,sp,128
    11ee:	5f00                	lw	s0,56(a4)
    11f0:	05f0                	addi	a2,sp,716
    11f2:	0000                	unimp
    11f4:	05f8                	addi	a4,sp,716
    11f6:	0000                	unimp
    11f8:	7f7f0003          	lb	zero,2039(t5)
    11fc:	f89f 0005 fa00      	0xfa000005f89f
    1202:	0005                	c.nop	1
    1204:	0100                	addi	s0,sp,128
    1206:	5f00                	lw	s0,56(a4)
    1208:	0602                	c.slli64	a2
    120a:	0000                	unimp
    120c:	0609                	addi	a2,a2,2
    120e:	0000                	unimp
    1210:	0001                	nop
    1212:	1a5f 0006 1c00      	0x1c0000061a5f
    1218:	0006                	c.slli	zero,0x1
    121a:	0100                	addi	s0,sp,128
    121c:	6a00                	flw	fs0,16(a2)
    121e:	061c                	addi	a5,sp,768
    1220:	0000                	unimp
    1222:	062c                	addi	a1,sp,776
    1224:	0000                	unimp
    1226:	0001                	nop
    1228:	345f 0006 3a00      	0x3a000006345f
    122e:	0006                	c.slli	zero,0x1
    1230:	0100                	addi	s0,sp,128
    1232:	5f00                	lw	s0,56(a4)
    1234:	063a                	slli	a2,a2,0xe
    1236:	0000                	unimp
    1238:	064a                	slli	a2,a2,0x12
    123a:	0000                	unimp
    123c:	0001                	nop
    123e:	585d                	li	a6,-9
    1240:	0006                	c.slli	zero,0x1
    1242:	6800                	flw	fs0,16(s0)
    1244:	0006                	c.slli	zero,0x1
    1246:	0100                	addi	s0,sp,128
    1248:	5f00                	lw	s0,56(a4)
    124a:	0668                	addi	a0,sp,780
    124c:	0000                	unimp
    124e:	0678                	addi	a4,sp,780
    1250:	0000                	unimp
    1252:	0001                	nop
    1254:	9662                	add	a2,a2,s8
    1256:	0006                	c.slli	zero,0x1
    1258:	a400                	fsd	fs0,8(s0)
    125a:	0006                	c.slli	zero,0x1
    125c:	0100                	addi	s0,sp,128
    125e:	5f00                	lw	s0,56(a4)
    1260:	06a4                	addi	s1,sp,840
    1262:	0000                	unimp
    1264:	06a6                	slli	a3,a3,0x9
    1266:	0000                	unimp
    1268:	7f7f0003          	lb	zero,2039(t5)
    126c:	a69f 0006 a800      	0xa8000006a69f
    1272:	0006                	c.slli	zero,0x1
    1274:	0100                	addi	s0,sp,128
    1276:	5f00                	lw	s0,56(a4)
    1278:	06a8                	addi	a0,sp,840
    127a:	0000                	unimp
    127c:	06ba                	slli	a3,a3,0xe
    127e:	0000                	unimp
    1280:	0001                	nop
    1282:	0062                	c.slli	zero,0x18
    1284:	0000                	unimp
    1286:	0000                	unimp
    1288:	0000                	unimp
    128a:	0600                	addi	s0,sp,768
    128c:	0005                	c.nop	1
    128e:	0a00                	addi	s0,sp,272
    1290:	0005                	c.nop	1
    1292:	0100                	addi	s0,sp,128
    1294:	5e00                	lw	s0,56(a2)
    1296:	064a                	slli	a2,a2,0x12
    1298:	0000                	unimp
    129a:	0658                	addi	a4,sp,772
    129c:	0000                	unimp
    129e:	0001                	nop
    12a0:	005e                	c.slli	zero,0x17
    12a2:	0000                	unimp
    12a4:	0000                	unimp
    12a6:	0000                	unimp
    12a8:	6c00                	flw	fs0,24(s0)
    12aa:	0006                	c.slli	zero,0x1
    12ac:	9600                	0x9600
    12ae:	0006                	c.slli	zero,0x1
    12b0:	0600                	addi	s0,sp,768
    12b2:	0300                	addi	s0,sp,384
    12b4:	1724                	addi	s1,sp,936
    12b6:	0000                	unimp
    12b8:	009f 0000 0000      	0x9f
    12be:	0000                	unimp
    12c0:	3400                	fld	fs0,40(s0)
    12c2:	0004                	0x4
    12c4:	7c00                	flw	fs0,56(s0)
    12c6:	0006                	c.slli	zero,0x1
    12c8:	0200                	addi	s0,sp,256
    12ca:	8400                	0x8400
    12cc:	9600                	0x9600
    12ce:	0006                	c.slli	zero,0x1
    12d0:	ba00                	fsd	fs0,48(a2)
    12d2:	0006                	c.slli	zero,0x1
    12d4:	0200                	addi	s0,sp,256
    12d6:	8400                	0x8400
	...
    12e0:	3400                	fld	fs0,40(s0)
    12e2:	0004                	0x4
    12e4:	7e00                	flw	fs0,56(a2)
    12e6:	0006                	c.slli	zero,0x1
    12e8:	0200                	addi	s0,sp,256
    12ea:	8500                	0x8500
    12ec:	9600                	0x9600
    12ee:	0006                	c.slli	zero,0x1
    12f0:	ba00                	fsd	fs0,48(a2)
    12f2:	0006                	c.slli	zero,0x1
    12f4:	0200                	addi	s0,sp,256
    12f6:	8500                	0x8500
	...
    1300:	4000                	lw	s0,0(s0)
    1302:	0005                	c.nop	1
    1304:	4f00                	lw	s0,24(a4)
    1306:	0005                	c.nop	1
    1308:	0100                	addi	s0,sp,128
    130a:	5a00                	lw	s0,48(a2)
    130c:	0000054f          	fnmadd.s	fa0,ft0,ft0,ft0,rne
    1310:	05be                	slli	a1,a1,0xf
    1312:	0000                	unimp
    1314:	bc780003          	lb	zero,-1081(a6)
    1318:	d07f                	0xd07f
    131a:	0005                	c.nop	1
    131c:	4a00                	lw	s0,16(a2)
    131e:	0006                	c.slli	zero,0x1
    1320:	0300                	addi	s0,sp,384
    1322:	7800                	flw	fs0,48(s0)
    1324:	7fbc                	flw	fa5,120(a5)
	...
    132e:	0434                	addi	a3,sp,520
    1330:	0000                	unimp
    1332:	0668                	addi	a0,sp,780
    1334:	0000                	unimp
    1336:	0002                	c.slli64	zero
    1338:	06680083          	lb	ra,102(a6)
    133c:	0000                	unimp
    133e:	067e                	slli	a2,a2,0x1f
    1340:	0000                	unimp
    1342:	000c                	0xc
    1344:	0085                	addi	ra,ra,1
    1346:	018a                	slli	gp,gp,0x2
    1348:	2432                	fld	fs0,264(sp)
    134a:	f0090f23          	sb	zero,-226(s2)
    134e:	1c1a                	slli	s8,s8,0x26
    1350:	0696                	slli	a3,a3,0x5
    1352:	0000                	unimp
    1354:	06a8                	addi	a0,sp,840
    1356:	0000                	unimp
    1358:	0002                	c.slli64	zero
    135a:	06a80083          	lb	ra,106(a6)
    135e:	0000                	unimp
    1360:	06ba                	slli	a3,a3,0xe
    1362:	0000                	unimp
    1364:	000c                	0xc
    1366:	0085                	addi	ra,ra,1
    1368:	018a                	slli	gp,gp,0x2
    136a:	2432                	fld	fs0,264(sp)
    136c:	f0090f23          	sb	zero,-226(s2)
    1370:	1c1a                	slli	s8,s8,0x26
	...
    137a:	043a                	slli	s0,s0,0xe
    137c:	0000                	unimp
    137e:	0670                	addi	a2,sp,780
    1380:	0000                	unimp
    1382:	0002                	c.slli64	zero
    1384:	0072                	c.slli	zero,0x1c
    1386:	0670                	addi	a2,sp,780
    1388:	0000                	unimp
    138a:	0686                	slli	a3,a3,0x1
    138c:	0000                	unimp
    138e:	0002                	c.slli64	zero
    1390:	0089                	addi	ra,ra,2
    1392:	0696                	slli	a3,a3,0x5
    1394:	0000                	unimp
    1396:	06ba                	slli	a3,a3,0xe
    1398:	0000                	unimp
    139a:	0002                	c.slli64	zero
    139c:	0072                	c.slli	zero,0x1c
	...
    13a6:	0434                	addi	a3,sp,520
    13a8:	0000                	unimp
    13aa:	0688                	addi	a0,sp,832
    13ac:	0000                	unimp
    13ae:	0001                	nop
    13b0:	886a                	mv	a6,s10
    13b2:	0006                	c.slli	zero,0x1
    13b4:	9600                	0x9600
    13b6:	0006                	c.slli	zero,0x1
    13b8:	0600                	addi	s0,sp,768
    13ba:	f300                	fsw	fs0,32(a4)
    13bc:	5b01                	li	s6,-32
    13be:	1c31                	addi	s8,s8,-20
    13c0:	969f 0006 ba00      	0xba000006969f
    13c6:	0006                	c.slli	zero,0x1
    13c8:	0100                	addi	s0,sp,128
    13ca:	6a00                	flw	fs0,16(a2)
	...
    13d4:	0434                	addi	a3,sp,520
    13d6:	0000                	unimp
    13d8:	0688                	addi	a0,sp,832
    13da:	0000                	unimp
    13dc:	0001                	nop
    13de:	886a                	mv	a6,s10
    13e0:	0006                	c.slli	zero,0x1
    13e2:	9600                	0x9600
    13e4:	0006                	c.slli	zero,0x1
    13e6:	0600                	addi	s0,sp,768
    13e8:	f300                	fsw	fs0,32(a4)
    13ea:	5b01                	li	s6,-32
    13ec:	1c31                	addi	s8,s8,-20
    13ee:	969f 0006 ba00      	0xba000006969f
    13f4:	0006                	c.slli	zero,0x1
    13f6:	0100                	addi	s0,sp,128
    13f8:	6a00                	flw	fs0,16(a2)
	...
    1402:	0434                	addi	a3,sp,520
    1404:	0000                	unimp
    1406:	0688                	addi	a0,sp,832
    1408:	0000                	unimp
    140a:	0001                	nop
    140c:	886a                	mv	a6,s10
    140e:	0006                	c.slli	zero,0x1
    1410:	9600                	0x9600
    1412:	0006                	c.slli	zero,0x1
    1414:	0600                	addi	s0,sp,768
    1416:	f300                	fsw	fs0,32(a4)
    1418:	5b01                	li	s6,-32
    141a:	1c31                	addi	s8,s8,-20
    141c:	969f 0006 ba00      	0xba000006969f
    1422:	0006                	c.slli	zero,0x1
    1424:	0100                	addi	s0,sp,128
    1426:	6a00                	flw	fs0,16(a2)
	...
    1430:	0438                	addi	a4,sp,520
    1432:	0000                	unimp
    1434:	0476                	slli	s0,s0,0x1d
    1436:	0000                	unimp
    1438:	0001                	nop
    143a:	00047667          	0x47667
    143e:	9000                	0x9000
    1440:	0004                	0x4
    1442:	0300                	addi	s0,sp,384
    1444:	8600                	0x8600
    1446:	9f7f                	0x9f7f
    1448:	0490                	addi	a2,sp,576
    144a:	0000                	unimp
    144c:	04dc                	addi	a5,sp,580
    144e:	0000                	unimp
    1450:	0001                	nop
    1452:	0004dc67          	0x4dc67
    1456:	8000                	0x8000
    1458:	0006                	c.slli	zero,0x1
    145a:	0300                	addi	s0,sp,384
    145c:	8600                	0x8600
    145e:	9f7f                	0x9f7f
    1460:	0680                	addi	s0,sp,832
    1462:	0000                	unimp
    1464:	0696                	slli	a3,a3,0x5
    1466:	0000                	unimp
    1468:	0006                	c.slli	zero,0x1
    146a:	315d01f3          	0x315d01f3
    146e:	9f1c                	0x9f1c
    1470:	0696                	slli	a3,a3,0x5
    1472:	0000                	unimp
    1474:	06ba                	slli	a3,a3,0xe
    1476:	0000                	unimp
    1478:	7f860003          	lb	zero,2040(a2)
    147c:	009f 0000 0000      	0x9f
    1482:	0000                	unimp
    1484:	7e00                	flw	fs0,56(a2)
    1486:	0002                	c.slli64	zero
    1488:	ee00                	fsw	fs0,24(a2)
    148a:	0002                	c.slli64	zero
    148c:	0100                	addi	s0,sp,128
    148e:	5a00                	lw	s0,48(a2)
    1490:	02ee                	slli	t0,t0,0x1b
    1492:	0000                	unimp
    1494:	030a                	slli	t1,t1,0x2
    1496:	0000                	unimp
    1498:	0004                	0x4
    149a:	9f5a01f3          	0x9f5a01f3
    149e:	030a                	slli	t1,t1,0x2
    14a0:	0000                	unimp
    14a2:	0342                	slli	t1,t1,0x10
    14a4:	0000                	unimp
    14a6:	0001                	nop
    14a8:	425a                	lw	tp,148(sp)
    14aa:	e4000003          	lb	zero,-448(zero) # fffffe40 <_stack_start+0xfffefe40>
    14ae:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    14b2:	f300                	fsw	fs0,32(a4)
    14b4:	5a01                	li	s4,-32
    14b6:	009f 0000 0000      	0x9f
    14bc:	0000                	unimp
    14be:	7e00                	flw	fs0,56(a2)
    14c0:	0002                	c.slli64	zero
    14c2:	cc00                	sw	s0,24(s0)
    14c4:	0002                	c.slli64	zero
    14c6:	0100                	addi	s0,sp,128
    14c8:	5b00                	lw	s0,48(a4)
    14ca:	02cc                	addi	a1,sp,324
    14cc:	0000                	unimp
    14ce:	02ee                	slli	t0,t0,0x1b
    14d0:	0000                	unimp
    14d2:	0001                	nop
    14d4:	ee56                	fsw	fs5,28(sp)
    14d6:	0002                	c.slli64	zero
    14d8:	0a00                	addi	s0,sp,272
    14da:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    14de:	8c00                	0x8c00
    14e0:	9f01                	0x9f01
    14e2:	030a                	slli	t1,t1,0x2
    14e4:	0000                	unimp
    14e6:	0342                	slli	t1,t1,0x10
    14e8:	0000                	unimp
    14ea:	0001                	nop
    14ec:	4256                	lw	tp,84(sp)
    14ee:	88000003          	lb	zero,-1920(zero) # fffff880 <_stack_start+0xfffef880>
    14f2:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    14f6:	8c00                	0x8c00
    14f8:	9f01                	0x9f01
    14fa:	0388                	addi	a0,sp,448
    14fc:	0000                	unimp
    14fe:	03e4                	addi	s1,sp,460
    1500:	0000                	unimp
    1502:	0004                	0x4
    1504:	9f5b01f3          	0x9f5b01f3
	...
    1510:	027e                	slli	tp,tp,0x1f
    1512:	0000                	unimp
    1514:	02f4                	addi	a3,sp,332
    1516:	0000                	unimp
    1518:	0001                	nop
    151a:	f45c                	fsw	fa5,44(s0)
    151c:	0002                	c.slli64	zero
    151e:	0a00                	addi	s0,sp,272
    1520:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1524:	f300                	fsw	fs0,32(a4)
    1526:	5c01                	li	s8,-32
    1528:	0a9f 0003 5800      	0x580000030a9f
    152e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1532:	5c00                	lw	s0,56(s0)
    1534:	0358                	addi	a4,sp,388
    1536:	0000                	unimp
    1538:	03e4                	addi	s1,sp,460
    153a:	0000                	unimp
    153c:	0004                	0x4
    153e:	9f5c01f3          	0x9f5c01f3
	...
    154a:	027e                	slli	tp,tp,0x1f
    154c:	0000                	unimp
    154e:	02d2                	slli	t0,t0,0x14
    1550:	0000                	unimp
    1552:	0001                	nop
    1554:	d25d                	beqz	a2,14fa <product2+0x2e>
    1556:	0002                	c.slli64	zero
    1558:	9600                	0x9600
    155a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    155e:	5900                	lw	s0,48(a0)
    1560:	0396                	slli	t2,t2,0x5
    1562:	0000                	unimp
    1564:	03ac                	addi	a1,sp,456
    1566:	0000                	unimp
    1568:	0004                	0x4
    156a:	9f5d01f3          	0x9f5d01f3
    156e:	03ac                	addi	a1,sp,456
    1570:	0000                	unimp
    1572:	03e4                	addi	s1,sp,460
    1574:	0000                	unimp
    1576:	0001                	nop
    1578:	0059                	c.nop	22
    157a:	0000                	unimp
    157c:	0000                	unimp
    157e:	0000                	unimp
    1580:	7e00                	flw	fs0,56(a2)
    1582:	0002                	c.slli64	zero
    1584:	0200                	addi	s0,sp,256
    1586:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    158a:	5e00                	lw	s0,56(a2)
    158c:	0302                	c.slli64	t1
    158e:	0000                	unimp
    1590:	030a                	slli	t1,t1,0x2
    1592:	0000                	unimp
    1594:	0004                	0x4
    1596:	9f5e01f3          	0x9f5e01f3
    159a:	030a                	slli	t1,t1,0x2
    159c:	0000                	unimp
    159e:	0358                	addi	a4,sp,388
    15a0:	0000                	unimp
    15a2:	0001                	nop
    15a4:	585e                	lw	a6,244(sp)
    15a6:	e4000003          	lb	zero,-448(zero) # fffffe40 <_stack_start+0xfffefe40>
    15aa:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    15ae:	f300                	fsw	fs0,32(a4)
    15b0:	5e01                	li	t3,-32
    15b2:	009f 0000 0000      	0x9f
    15b8:	0000                	unimp
    15ba:	d200                	sw	s0,32(a2)
    15bc:	0002                	c.slli64	zero
    15be:	0200                	addi	s0,sp,256
    15c0:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    15c4:	8000                	0x8000
    15c6:	0200                	addi	s0,sp,256
    15c8:	0a000003          	lb	zero,160(zero) # a0 <array_add+0xe>
    15cc:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    15d0:	8400                	0x8400
    15d2:	0a00                	addi	s0,sp,272
    15d4:	58000003          	lb	zero,1408(zero) # 580 <polydiv+0x19c>
    15d8:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    15dc:	8000                	0x8000
    15de:	5800                	lw	s0,48(s0)
    15e0:	88000003          	lb	zero,-1920(zero) # fffff880 <_stack_start+0xfffef880>
    15e4:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    15e8:	8400                	0x8400
    15ea:	ac00                	fsd	fs0,24(s0)
    15ec:	d6000003          	lb	zero,-672(zero) # fffffd60 <_stack_start+0xfffefd60>
    15f0:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    15f4:	8400                	0x8400
	...
    15fe:	d400                	sw	s0,40(s0)
    1600:	0002                	c.slli64	zero
    1602:	e200                	fsw	fs0,0(a2)
    1604:	0002                	c.slli64	zero
    1606:	0200                	addi	s0,sp,256
    1608:	3000                	fld	fs0,32(s0)
    160a:	e29f 0002 e800      	0xe8000002e29f
    1610:	0002                	c.slli64	zero
    1612:	0100                	addi	s0,sp,128
    1614:	6e00                	flw	fs0,24(a2)
    1616:	02e8                	addi	a0,sp,332
    1618:	0000                	unimp
    161a:	02ee                	slli	t0,t0,0x1b
    161c:	0000                	unimp
    161e:	0001                	nop
    1620:	ee6d                	bnez	a2,171a <product2+0x24e>
    1622:	0002                	c.slli64	zero
    1624:	0200                	addi	s0,sp,256
    1626:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    162a:	5a00                	lw	s0,48(a2)
    162c:	030a                	slli	t1,t1,0x2
    162e:	0000                	unimp
    1630:	032c                	addi	a1,sp,392
    1632:	0000                	unimp
    1634:	0001                	nop
    1636:	2c6e                	fld	fs8,216(sp)
    1638:	3c000003          	lb	zero,960(zero) # 3c0 <polymult2+0x142>
    163c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1640:	6d00                	flw	fs0,24(a0)
    1642:	033c                	addi	a5,sp,392
    1644:	0000                	unimp
    1646:	0340                	addi	s0,sp,388
    1648:	0000                	unimp
    164a:	7f8d0003          	lb	zero,2040(s10)
    164e:	409f 0003 4200      	0x42000003409f
    1654:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1658:	6d00                	flw	fs0,24(a0)
    165a:	0342                	slli	t1,t1,0x10
    165c:	0000                	unimp
    165e:	0352                	slli	t1,t1,0x14
    1660:	0000                	unimp
    1662:	0001                	nop
    1664:	525a                	lw	tp,180(sp)
    1666:	56000003          	lb	zero,1376(zero) # 560 <polydiv+0x17c>
    166a:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    166e:	7a00                	flw	fs0,48(a2)
    1670:	9f7f                	0x9f7f
    1672:	0356                	slli	t1,t1,0x15
    1674:	0000                	unimp
    1676:	0358                	addi	a4,sp,388
    1678:	0000                	unimp
    167a:	0001                	nop
    167c:	885a                	mv	a6,s6
    167e:	9e000003          	lb	zero,-1568(zero) # fffff9e0 <_stack_start+0xfffef9e0>
    1682:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1686:	6500                	flw	fs0,8(a0)
    1688:	03d6                	slli	t2,t2,0x15
    168a:	0000                	unimp
    168c:	03e4                	addi	s1,sp,460
    168e:	0000                	unimp
    1690:	0001                	nop
    1692:	0065                	c.nop	25
    1694:	0000                	unimp
    1696:	0000                	unimp
    1698:	0000                	unimp
    169a:	0200                	addi	s0,sp,256
    169c:	0a000003          	lb	zero,160(zero) # a0 <array_add+0xe>
    16a0:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16a4:	5d00                	lw	s0,56(a0)
    16a6:	030a                	slli	t1,t1,0x2
    16a8:	0000                	unimp
    16aa:	0326                	slli	t1,t1,0x9
    16ac:	0000                	unimp
    16ae:	0001                	nop
    16b0:	586d                	li	a6,-5
    16b2:	88000003          	lb	zero,-1920(zero) # fffff880 <_stack_start+0xfffef880>
    16b6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16ba:	5d00                	lw	s0,56(a0)
    16bc:	03ac                	addi	a1,sp,456
    16be:	0000                	unimp
    16c0:	03d6                	slli	t2,t2,0x15
    16c2:	0000                	unimp
    16c4:	0001                	nop
    16c6:	005d                	c.nop	23
    16c8:	0000                	unimp
    16ca:	0000                	unimp
    16cc:	0000                	unimp
    16ce:	5800                	lw	s0,48(s0)
    16d0:	6a000003          	lb	zero,1696(zero) # 6a0 <polydiv+0x2bc>
    16d4:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16d8:	5e00                	lw	s0,56(a2)
    16da:	036a                	slli	t1,t1,0x1a
    16dc:	0000                	unimp
    16de:	0370                	addi	a2,sp,396
    16e0:	0000                	unimp
    16e2:	017e0003          	lb	zero,23(t3) # 16017 <_stack_start+0x6017>
    16e6:	709f 0003 7a00      	0x7a000003709f
    16ec:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16f0:	5e00                	lw	s0,56(a2)
    16f2:	03b0                	addi	a2,sp,456
    16f4:	0000                	unimp
    16f6:	03c2                	slli	t2,t2,0x10
    16f8:	0000                	unimp
    16fa:	0001                	nop
    16fc:	c25e                	sw	s7,4(sp)
    16fe:	ca000003          	lb	zero,-864(zero) # fffffca0 <_stack_start+0xfffefca0>
    1702:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1706:	7e00                	flw	fs0,56(a2)
    1708:	9f01                	0x9f01
    170a:	03ca                	slli	t2,t2,0x12
    170c:	0000                	unimp
    170e:	03d6                	slli	t2,t2,0x15
    1710:	0000                	unimp
    1712:	0001                	nop
    1714:	005e                	c.slli	zero,0x17
    1716:	0000                	unimp
    1718:	0000                	unimp
    171a:	0000                	unimp
    171c:	8c00                	0x8c00
    171e:	ac000003          	lb	zero,-1344(zero) # fffffac0 <_stack_start+0xfffefac0>
    1722:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1726:	0300                	addi	s0,sp,384
    1728:	14cc                	addi	a1,sp,612
    172a:	0000                	unimp
    172c:	009f 0000 0000      	0x9f
    1732:	0000                	unimp
    1734:	d200                	sw	s0,32(a2)
    1736:	0002                	c.slli64	zero
    1738:	8800                	0x8800
    173a:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    173e:	7b00                	flw	fs0,48(a4)
    1740:	ac00                	fsd	fs0,24(s0)
    1742:	d6000003          	lb	zero,-672(zero) # fffffd60 <_stack_start+0xfffefd60>
    1746:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    174a:	7b00                	flw	fs0,48(a4)
	...
    1754:	d400                	sw	s0,40(s0)
    1756:	0002                	c.slli64	zero
    1758:	9000                	0x9000
    175a:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    175e:	7200                	flw	fs0,32(a2)
    1760:	ac00                	fsd	fs0,24(s0)
    1762:	e4000003          	lb	zero,-448(zero) # fffffe40 <_stack_start+0xfffefe40>
    1766:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    176a:	7200                	flw	fs0,32(a2)
	...
    1774:	d200                	sw	s0,32(a2)
    1776:	0002                	c.slli64	zero
    1778:	0200                	addi	s0,sp,256
    177a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    177e:	5d00                	lw	s0,56(a0)
    1780:	0302                	c.slli64	t1
    1782:	0000                	unimp
    1784:	030a                	slli	t1,t1,0x2
    1786:	0000                	unimp
    1788:	7f790003          	lb	zero,2039(s2)
    178c:	0a9f 0003 5800      	0x580000030a9f
    1792:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1796:	5d00                	lw	s0,56(a0)
    1798:	0358                	addi	a4,sp,388
    179a:	0000                	unimp
    179c:	0396                	slli	t2,t2,0x5
    179e:	0000                	unimp
    17a0:	7f790003          	lb	zero,2039(s2)
    17a4:	969f 0003 ac00      	0xac000003969f
    17aa:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    17ae:	f300                	fsw	fs0,32(a4)
    17b0:	5d01                	li	s10,-32
    17b2:	1c31                	addi	s8,s8,-20
    17b4:	ac9f 0003 e400      	0xe4000003ac9f
    17ba:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    17be:	7900                	flw	fs0,48(a0)
    17c0:	9f7f                	0x9f7f
	...
    17ca:	0298                	addi	a4,sp,320
    17cc:	0000                	unimp
    17ce:	039a                	slli	t2,t2,0x6
    17d0:	0000                	unimp
    17d2:	0001                	nop
    17d4:	00039a63          	bnez	t2,17e8 <result+0xc4>
    17d8:	ac00                	fsd	fs0,24(s0)
    17da:	0a000003          	lb	zero,160(zero) # a0 <array_add+0xe>
    17de:	f300                	fsw	fs0,32(a4)
    17e0:	5b01                	li	s6,-32
    17e2:	225d01f3          	0x225d01f3
    17e6:	1c31                	addi	s8,s8,-20
    17e8:	ac9f 0003 e400      	0xe4000003ac9f
    17ee:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17f2:	6300                	flw	fs0,0(a4)
	...
    17fc:	02d2                	slli	t0,t0,0x14
    17fe:	0000                	unimp
    1800:	0388                	addi	a0,sp,448
    1802:	0000                	unimp
    1804:	0001                	nop
    1806:	886c                	0x886c
    1808:	ac000003          	lb	zero,-1344(zero) # fffffac0 <_stack_start+0xfffefac0>
    180c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1810:	f300                	fsw	fs0,32(a4)
    1812:	5b01                	li	s6,-32
    1814:	1c31                	addi	s8,s8,-20
    1816:	ac9f 0003 d600      	0xd6000003ac9f
    181c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1820:	6c00                	flw	fs0,24(s0)
    1822:	03d6                	slli	t2,t2,0x15
    1824:	0000                	unimp
    1826:	03e4                	addi	s1,sp,460
    1828:	0000                	unimp
    182a:	0006                	c.slli	zero,0x1
    182c:	315b01f3          	0x315b01f3
    1830:	9f1c                	0x9f1c
	...
    183a:	02d2                	slli	t0,t0,0x14
    183c:	0000                	unimp
    183e:	0302                	c.slli64	t1
    1840:	0000                	unimp
    1842:	0001                	nop
    1844:	025d                	addi	tp,tp,23
    1846:	0a000003          	lb	zero,160(zero) # a0 <array_add+0xe>
    184a:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    184e:	7900                	flw	fs0,48(a0)
    1850:	9f7f                	0x9f7f
    1852:	030a                	slli	t1,t1,0x2
    1854:	0000                	unimp
    1856:	0358                	addi	a4,sp,388
    1858:	0000                	unimp
    185a:	0001                	nop
    185c:	585d                	li	a6,-9
    185e:	96000003          	lb	zero,-1696(zero) # fffff960 <_stack_start+0xfffef960>
    1862:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1866:	7900                	flw	fs0,48(a0)
    1868:	9f7f                	0x9f7f
    186a:	0396                	slli	t2,t2,0x5
    186c:	0000                	unimp
    186e:	03ac                	addi	a1,sp,456
    1870:	0000                	unimp
    1872:	0006                	c.slli	zero,0x1
    1874:	315d01f3          	0x315d01f3
    1878:	9f1c                	0x9f1c
    187a:	03ac                	addi	a1,sp,456
    187c:	0000                	unimp
    187e:	03e4                	addi	s1,sp,460
    1880:	0000                	unimp
    1882:	7f790003          	lb	zero,2039(s2)
    1886:	009f 0000 0000      	0x9f
    188c:	0000                	unimp
    188e:	d800                	sw	s0,48(s0)
    1890:	0000                	unimp
    1892:	5c00                	lw	s0,56(s0)
    1894:	0001                	nop
    1896:	0100                	addi	s0,sp,128
    1898:	5a00                	lw	s0,48(a2)
    189a:	015c                	addi	a5,sp,132
    189c:	0000                	unimp
    189e:	0192                	slli	gp,gp,0x4
    18a0:	0000                	unimp
    18a2:	0004                	0x4
    18a4:	9f5a01f3          	0x9f5a01f3
    18a8:	0192                	slli	gp,gp,0x4
    18aa:	0000                	unimp
    18ac:	01c6                	slli	gp,gp,0x11
    18ae:	0000                	unimp
    18b0:	0001                	nop
    18b2:	c65a                	sw	s6,12(sp)
    18b4:	0001                	nop
    18b6:	7e00                	flw	fs0,56(a2)
    18b8:	0002                	c.slli64	zero
    18ba:	0400                	addi	s0,sp,512
    18bc:	f300                	fsw	fs0,32(a4)
    18be:	5a01                	li	s4,-32
    18c0:	009f 0000 0000      	0x9f
    18c6:	0000                	unimp
    18c8:	d800                	sw	s0,48(s0)
    18ca:	0000                	unimp
    18cc:	5e00                	lw	s0,56(a2)
    18ce:	0001                	nop
    18d0:	0100                	addi	s0,sp,128
    18d2:	5b00                	lw	s0,48(a4)
    18d4:	015e                	slli	sp,sp,0x17
    18d6:	0000                	unimp
    18d8:	00000163          	beqz	zero,18da <result+0x1b6>
    18dc:	0001                	nop
    18de:	635c                	flw	fa5,4(a4)
    18e0:	0001                	nop
    18e2:	9200                	0x9200
    18e4:	0001                	nop
    18e6:	0300                	addi	s0,sp,384
    18e8:	8700                	0x8700
    18ea:	9f01                	0x9f01
    18ec:	0192                	slli	gp,gp,0x4
    18ee:	0000                	unimp
    18f0:	01c6                	slli	gp,gp,0x11
    18f2:	0000                	unimp
    18f4:	0001                	nop
    18f6:	0001c65b          	0x1c65b
    18fa:	3000                	fld	fs0,32(s0)
    18fc:	0002                	c.slli64	zero
    18fe:	0300                	addi	s0,sp,384
    1900:	8700                	0x8700
    1902:	9f01                	0x9f01
    1904:	0230                	addi	a2,sp,264
    1906:	0000                	unimp
    1908:	027e                	slli	tp,tp,0x1f
    190a:	0000                	unimp
    190c:	0004                	0x4
    190e:	9f5b01f3          	0x9f5b01f3
	...
    191a:	00d8                	addi	a4,sp,68
    191c:	0000                	unimp
    191e:	0144                	addi	s1,sp,132
    1920:	0000                	unimp
    1922:	0001                	nop
    1924:	445c                	lw	a5,12(s0)
    1926:	0001                	nop
    1928:	6300                	flw	fs0,0(a4)
    192a:	0001                	nop
    192c:	0100                	addi	s0,sp,128
    192e:	6000                	flw	fs0,0(s0)
    1930:	00000163          	beqz	zero,1932 <result+0x20e>
    1934:	0192                	slli	gp,gp,0x4
    1936:	0000                	unimp
    1938:	b8780003          	lb	zero,-1145(a6)
    193c:	927f                	0x927f
    193e:	0001                	nop
    1940:	c600                	sw	s0,8(a2)
    1942:	0001                	nop
    1944:	0100                	addi	s0,sp,128
    1946:	6000                	flw	fs0,0(s0)
    1948:	01c6                	slli	gp,gp,0x11
    194a:	0000                	unimp
    194c:	0222                	slli	tp,tp,0x8
    194e:	0000                	unimp
    1950:	b8780003          	lb	zero,-1145(a6)
    1954:	227f                	0x227f
    1956:	0002                	c.slli64	zero
    1958:	7e00                	flw	fs0,56(a2)
    195a:	0002                	c.slli64	zero
    195c:	0300                	addi	s0,sp,384
    195e:	9100                	0x9100
    1960:	7fb8                	flw	fa4,120(a5)
	...
    196a:	00d8                	addi	a4,sp,68
    196c:	0000                	unimp
    196e:	0146                	slli	sp,sp,0x11
    1970:	0000                	unimp
    1972:	0001                	nop
    1974:	465d                	li	a2,23
    1976:	0001                	nop
    1978:	3200                	fld	fs0,32(a2)
    197a:	0002                	c.slli64	zero
    197c:	0100                	addi	s0,sp,128
    197e:	6800                	flw	fs0,16(s0)
    1980:	0232                	slli	tp,tp,0xc
    1982:	0000                	unimp
    1984:	0244                	addi	s1,sp,260
    1986:	0000                	unimp
    1988:	0004                	0x4
    198a:	9f5d01f3          	0x9f5d01f3
    198e:	0244                	addi	s1,sp,260
    1990:	0000                	unimp
    1992:	027e                	slli	tp,tp,0x1f
    1994:	0000                	unimp
    1996:	0001                	nop
    1998:	0068                	addi	a0,sp,12
    199a:	0000                	unimp
    199c:	0000                	unimp
    199e:	0000                	unimp
    19a0:	d800                	sw	s0,48(s0)
    19a2:	0000                	unimp
    19a4:	e800                	fsw	fs0,16(s0)
    19a6:	0000                	unimp
    19a8:	0100                	addi	s0,sp,128
    19aa:	5e00                	lw	s0,56(a2)
    19ac:	00e8                	addi	a0,sp,76
    19ae:	0000                	unimp
    19b0:	0210                	addi	a2,sp,256
    19b2:	0000                	unimp
    19b4:	0001                	nop
    19b6:	00021063          	bnez	tp,19b6 <ti_2+0x3a>
    19ba:	1900                	addi	s0,sp,176
    19bc:	0002                	c.slli64	zero
    19be:	0100                	addi	s0,sp,128
    19c0:	5b00                	lw	s0,48(a4)
    19c2:	0219                	addi	tp,tp,6
    19c4:	0000                	unimp
    19c6:	0228                	addi	a0,sp,264
    19c8:	0000                	unimp
    19ca:	0001                	nop
    19cc:	00022863          	0x22863
    19d0:	4400                	lw	s0,8(s0)
    19d2:	0002                	c.slli64	zero
    19d4:	0400                	addi	s0,sp,512
    19d6:	f300                	fsw	fs0,32(a4)
    19d8:	5e01                	li	t3,-32
    19da:	449f 0002 6c00      	0x6c000002449f
    19e0:	0002                	c.slli64	zero
    19e2:	0100                	addi	s0,sp,128
    19e4:	6300                	flw	fs0,0(a4)
    19e6:	026c                	addi	a1,sp,268
    19e8:	0000                	unimp
    19ea:	0000026f          	jal	tp,19ea <ti_2+0x6e>
    19ee:	0001                	nop
    19f0:	00026f5b          	0x26f5b
    19f4:	7e00                	flw	fs0,56(a2)
    19f6:	0002                	c.slli64	zero
    19f8:	0100                	addi	s0,sp,128
    19fa:	6300                	flw	fs0,0(a4)
	...
    1a04:	00d8                	addi	a4,sp,68
    1a06:	0000                	unimp
    1a08:	0116                	slli	sp,sp,0x5
    1a0a:	0000                	unimp
    1a0c:	0001                	nop
    1a0e:	165f 0001 2200      	0x22000001165f
    1a14:	0002                	c.slli64	zero
    1a16:	0300                	addi	s0,sp,384
    1a18:	7800                	flw	fs0,48(s0)
    1a1a:	7fbc                	flw	fa5,120(a5)
    1a1c:	0222                	slli	tp,tp,0x8
    1a1e:	0000                	unimp
    1a20:	027e                	slli	tp,tp,0x1f
    1a22:	0000                	unimp
    1a24:	bc910003          	lb	zero,-1079(sp)
    1a28:	007f                	0x7f
    1a2a:	0000                	unimp
    1a2c:	0000                	unimp
    1a2e:	0000                	unimp
    1a30:	3a00                	fld	fs0,48(a2)
    1a32:	0001                	nop
    1a34:	8a00                	0x8a00
    1a36:	0001                	nop
    1a38:	0200                	addi	s0,sp,256
    1a3a:	8200                	0x8200
    1a3c:	8a00                	0x8a00
    1a3e:	0001                	nop
    1a40:	9200                	0x9200
    1a42:	0001                	nop
    1a44:	0200                	addi	s0,sp,256
    1a46:	8600                	0x8600
    1a48:	9200                	0x9200
    1a4a:	0001                	nop
    1a4c:	d800                	sw	s0,48(s0)
    1a4e:	0001                	nop
    1a50:	0200                	addi	s0,sp,256
    1a52:	8200                	0x8200
    1a54:	d800                	sw	s0,48(s0)
    1a56:	0001                	nop
    1a58:	0800                	addi	s0,sp,16
    1a5a:	0002                	c.slli64	zero
    1a5c:	0200                	addi	s0,sp,256
    1a5e:	8600                	0x8600
    1a60:	4400                	lw	s0,8(s0)
    1a62:	0002                	c.slli64	zero
    1a64:	6c00                	flw	fs0,24(s0)
    1a66:	0002                	c.slli64	zero
    1a68:	0200                	addi	s0,sp,256
    1a6a:	8600                	0x8600
	...
    1a74:	4000                	lw	s0,0(s0)
    1a76:	0001                	nop
    1a78:	4e00                	lw	s0,24(a2)
    1a7a:	0001                	nop
    1a7c:	0200                	addi	s0,sp,256
    1a7e:	3000                	fld	fs0,32(s0)
    1a80:	4e9f 0001 5400      	0x540000014e9f
    1a86:	0001                	nop
    1a88:	0100                	addi	s0,sp,128
    1a8a:	5d00                	lw	s0,56(a0)
    1a8c:	0154                	addi	a3,sp,132
    1a8e:	0000                	unimp
    1a90:	00000163          	beqz	zero,1a92 <ti_2+0x116>
    1a94:	0001                	nop
    1a96:	645e                	flw	fs0,212(sp)
    1a98:	0001                	nop
    1a9a:	6a00                	flw	fs0,16(a2)
    1a9c:	0001                	nop
    1a9e:	0200                	addi	s0,sp,256
    1aa0:	3000                	fld	fs0,32(s0)
    1aa2:	6a9f 0001 7500      	0x750000016a9f
    1aa8:	0001                	nop
    1aaa:	0100                	addi	s0,sp,128
    1aac:	5e00                	lw	s0,56(a2)
    1aae:	0192                	slli	gp,gp,0x4
    1ab0:	0000                	unimp
    1ab2:	01b4                	addi	a3,sp,200
    1ab4:	0000                	unimp
    1ab6:	0001                	nop
    1ab8:	b45d                	j	155e <product2+0x92>
    1aba:	0001                	nop
    1abc:	c200                	sw	s0,0(a2)
    1abe:	0001                	nop
    1ac0:	0100                	addi	s0,sp,128
    1ac2:	5e00                	lw	s0,56(a2)
    1ac4:	01c2                	slli	gp,gp,0x10
    1ac6:	0000                	unimp
    1ac8:	01c4                	addi	s1,sp,196
    1aca:	0000                	unimp
    1acc:	7f7e0003          	lb	zero,2039(t3)
    1ad0:	c49f 0001 d400      	0xd4000001c49f
    1ad6:	0001                	nop
    1ad8:	0100                	addi	s0,sp,128
    1ada:	5e00                	lw	s0,56(a2)
    1adc:	01d4                	addi	a3,sp,196
    1ade:	0000                	unimp
    1ae0:	01d6                	slli	gp,gp,0x15
    1ae2:	0000                	unimp
    1ae4:	7f7e0003          	lb	zero,2039(t3)
    1ae8:	d69f 0001 d800      	0xd8000001d69f
    1aee:	0001                	nop
    1af0:	0100                	addi	s0,sp,128
    1af2:	5e00                	lw	s0,56(a2)
    1af4:	0208                	addi	a0,sp,256
    1af6:	0000                	unimp
    1af8:	0224                	addi	s1,sp,264
    1afa:	0000                	unimp
    1afc:	0001                	nop
    1afe:	6c59                	lui	s8,0x16
    1b00:	0002                	c.slli64	zero
    1b02:	7e00                	flw	fs0,56(a2)
    1b04:	0002                	c.slli64	zero
    1b06:	0100                	addi	s0,sp,128
    1b08:	5900                	lw	s0,48(a0)
	...
    1b12:	018a                	slli	gp,gp,0x2
    1b14:	0000                	unimp
    1b16:	0192                	slli	gp,gp,0x4
    1b18:	0000                	unimp
    1b1a:	0001                	nop
    1b1c:	926a                	add	tp,tp,s10
    1b1e:	0001                	nop
    1b20:	ae00                	fsd	fs0,24(a2)
    1b22:	0001                	nop
    1b24:	0100                	addi	s0,sp,128
    1b26:	5e00                	lw	s0,56(a2)
    1b28:	01d8                	addi	a4,sp,196
    1b2a:	0000                	unimp
    1b2c:	0236                	slli	tp,tp,0xd
    1b2e:	0000                	unimp
    1b30:	0001                	nop
    1b32:	446a                	lw	s0,152(sp)
    1b34:	0002                	c.slli64	zero
    1b36:	7e00                	flw	fs0,56(a2)
    1b38:	0002                	c.slli64	zero
    1b3a:	0100                	addi	s0,sp,128
    1b3c:	6a00                	flw	fs0,16(a2)
	...
    1b46:	01d8                	addi	a4,sp,196
    1b48:	0000                	unimp
    1b4a:	01ea                	slli	gp,gp,0x1a
    1b4c:	0000                	unimp
    1b4e:	0001                	nop
    1b50:	ea5e                	fsw	fs7,20(sp)
    1b52:	0001                	nop
    1b54:	f000                	fsw	fs0,32(s0)
    1b56:	0001                	nop
    1b58:	0300                	addi	s0,sp,384
    1b5a:	7e00                	flw	fs0,56(a2)
    1b5c:	9f01                	0x9f01
    1b5e:	01f0                	addi	a2,sp,204
    1b60:	0000                	unimp
    1b62:	01fa                	slli	gp,gp,0x1e
    1b64:	0000                	unimp
    1b66:	0001                	nop
    1b68:	485e                	lw	a6,212(sp)
    1b6a:	0002                	c.slli64	zero
    1b6c:	5a00                	lw	s0,48(a2)
    1b6e:	0002                	c.slli64	zero
    1b70:	0100                	addi	s0,sp,128
    1b72:	5e00                	lw	s0,56(a2)
    1b74:	025a                	slli	tp,tp,0x16
    1b76:	0000                	unimp
    1b78:	0260                	addi	s0,sp,268
    1b7a:	0000                	unimp
    1b7c:	017e0003          	lb	zero,23(t3)
    1b80:	609f 0002 6c00      	0x6c000002609f
    1b86:	0002                	c.slli64	zero
    1b88:	0100                	addi	s0,sp,128
    1b8a:	5e00                	lw	s0,56(a2)
	...
    1b94:	021a                	slli	tp,tp,0x6
    1b96:	0000                	unimp
    1b98:	0244                	addi	s1,sp,260
    1b9a:	0000                	unimp
    1b9c:	0006                	c.slli	zero,0x1
    1b9e:	00127403          	0x127403
    1ba2:	9f00                	0x9f00
	...
    1bac:	013e                	slli	sp,sp,0xf
    1bae:	0000                	unimp
    1bb0:	0234                	addi	a3,sp,264
    1bb2:	0000                	unimp
    1bb4:	0002                	c.slli64	zero
    1bb6:	0089                	addi	ra,ra,2
    1bb8:	0244                	addi	s1,sp,260
    1bba:	0000                	unimp
    1bbc:	027e                	slli	tp,tp,0x1f
    1bbe:	0000                	unimp
    1bc0:	0002                	c.slli64	zero
    1bc2:	0089                	addi	ra,ra,2
	...
    1bcc:	0140                	addi	s0,sp,132
    1bce:	0000                	unimp
    1bd0:	021e                	slli	tp,tp,0x7
    1bd2:	0000                	unimp
    1bd4:	0002                	c.slli64	zero
    1bd6:	0072                	c.slli	zero,0x1c
    1bd8:	021e                	slli	tp,tp,0x7
    1bda:	0000                	unimp
    1bdc:	0232                	slli	tp,tp,0xc
    1bde:	0000                	unimp
    1be0:	000c                	0xc
    1be2:	0089                	addi	ra,ra,2
    1be4:	0088                	addi	a0,sp,64
    1be6:	2432                	fld	fs0,264(sp)
    1be8:	f0090f23          	sb	zero,-226(s2)
    1bec:	1c1a                	slli	s8,s8,0x26
    1bee:	0232                	slli	tp,tp,0xc
    1bf0:	0000                	unimp
    1bf2:	0234                	addi	a3,sp,264
    1bf4:	0000                	unimp
    1bf6:	000d                	c.nop	3
    1bf8:	0089                	addi	ra,ra,2
    1bfa:	325d01f3          	0x325d01f3
    1bfe:	2324                	fld	fs1,64(a4)
    1c00:	1af0090f          	0x1af0090f
    1c04:	441c                	lw	a5,8(s0)
    1c06:	0002                	c.slli64	zero
    1c08:	7e00                	flw	fs0,56(a2)
    1c0a:	0002                	c.slli64	zero
    1c0c:	0200                	addi	s0,sp,256
    1c0e:	7200                	flw	fs0,32(a2)
	...
    1c18:	3a00                	fld	fs0,48(a2)
    1c1a:	0001                	nop
    1c1c:	8a00                	0x8a00
    1c1e:	0001                	nop
    1c20:	0100                	addi	s0,sp,128
    1c22:	6a00                	flw	fs0,16(a2)
    1c24:	018a                	slli	gp,gp,0x2
    1c26:	0000                	unimp
    1c28:	0192                	slli	gp,gp,0x4
    1c2a:	0000                	unimp
    1c2c:	7f880003          	lb	zero,2040(a6)
    1c30:	929f 0001 d800      	0xd8000001929f
    1c36:	0001                	nop
    1c38:	0100                	addi	s0,sp,128
    1c3a:	6a00                	flw	fs0,16(a2)
    1c3c:	01d8                	addi	a4,sp,196
    1c3e:	0000                	unimp
    1c40:	0232                	slli	tp,tp,0xc
    1c42:	0000                	unimp
    1c44:	7f880003          	lb	zero,2040(a6)
    1c48:	329f 0002 4400      	0x44000002329f
    1c4e:	0002                	c.slli64	zero
    1c50:	0600                	addi	s0,sp,768
    1c52:	f300                	fsw	fs0,32(a4)
    1c54:	5d01                	li	s10,-32
    1c56:	1c31                	addi	s8,s8,-20
    1c58:	449f 0002 7e00      	0x7e000002449f
    1c5e:	0002                	c.slli64	zero
    1c60:	0300                	addi	s0,sp,384
    1c62:	8800                	0x8800
    1c64:	9f7f                	0x9f7f
	...
    1c6e:	00f0                	addi	a2,sp,76
    1c70:	0000                	unimp
    1c72:	0210                	addi	a2,sp,256
    1c74:	0000                	unimp
    1c76:	0001                	nop
    1c78:	1064                	addi	s1,sp,44
    1c7a:	0002                	c.slli64	zero
    1c7c:	1900                	addi	s0,sp,176
    1c7e:	0002                	c.slli64	zero
    1c80:	0100                	addi	s0,sp,128
    1c82:	5c00                	lw	s0,56(s0)
    1c84:	0219                	addi	tp,tp,6
    1c86:	0000                	unimp
    1c88:	022a                	slli	tp,tp,0xa
    1c8a:	0000                	unimp
    1c8c:	0001                	nop
    1c8e:	2a64                	fld	fs1,208(a2)
    1c90:	0002                	c.slli64	zero
    1c92:	3000                	fld	fs0,32(s0)
    1c94:	0002                	c.slli64	zero
    1c96:	0600                	addi	s0,sp,768
    1c98:	8700                	0x8700
    1c9a:	8800                	0x8800
    1c9c:	2200                	fld	fs0,0(a2)
    1c9e:	309f 0002 3200      	0x32000002309f
    1ca4:	0002                	c.slli64	zero
    1ca6:	0900                	addi	s0,sp,144
    1ca8:	f300                	fsw	fs0,32(a4)
    1caa:	5b01                	li	s6,-32
    1cac:	0088                	addi	a0,sp,64
    1cae:	3122                	fld	ft2,40(sp)
    1cb0:	9f1c                	0x9f1c
    1cb2:	0232                	slli	tp,tp,0xc
    1cb4:	0000                	unimp
    1cb6:	0244                	addi	s1,sp,260
    1cb8:	0000                	unimp
    1cba:	000a                	c.slli	zero,0x2
    1cbc:	f35b01f3          	0xf35b01f3
    1cc0:	5d01                	li	s10,-32
    1cc2:	3122                	fld	ft2,40(sp)
    1cc4:	9f1c                	0x9f1c
    1cc6:	0244                	addi	s1,sp,260
    1cc8:	0000                	unimp
    1cca:	026c                	addi	a1,sp,268
    1ccc:	0000                	unimp
    1cce:	0001                	nop
    1cd0:	6c64                	flw	fs1,92(s0)
    1cd2:	0002                	c.slli64	zero
    1cd4:	6f00                	flw	fs0,24(a4)
    1cd6:	0002                	c.slli64	zero
    1cd8:	0100                	addi	s0,sp,128
    1cda:	5c00                	lw	s0,56(s0)
    1cdc:	0000026f          	jal	tp,1cdc <random_keys+0x1d0>
    1ce0:	027e                	slli	tp,tp,0x1f
    1ce2:	0000                	unimp
    1ce4:	0001                	nop
    1ce6:	0064                	addi	s1,sp,12
    1ce8:	0000                	unimp
    1cea:	0000                	unimp
    1cec:	0000                	unimp
    1cee:	3e00                	fld	fs0,56(a2)
    1cf0:	0001                	nop
    1cf2:	3000                	fld	fs0,32(s0)
    1cf4:	0002                	c.slli64	zero
    1cf6:	0100                	addi	s0,sp,128
    1cf8:	6700                	flw	fs0,8(a4)
    1cfa:	0230                	addi	a2,sp,264
    1cfc:	0000                	unimp
    1cfe:	0244                	addi	s1,sp,260
    1d00:	0000                	unimp
    1d02:	0006                	c.slli	zero,0x1
    1d04:	315b01f3          	0x315b01f3
    1d08:	9f1c                	0x9f1c
    1d0a:	0244                	addi	s1,sp,260
    1d0c:	0000                	unimp
    1d0e:	027e                	slli	tp,tp,0x1f
    1d10:	0000                	unimp
    1d12:	0001                	nop
    1d14:	00000067          	jr	zero # 0 <__DYNAMIC>
    1d18:	0000                	unimp
    1d1a:	0000                	unimp
    1d1c:	3e00                	fld	fs0,56(a2)
    1d1e:	0001                	nop
    1d20:	8a00                	0x8a00
    1d22:	0001                	nop
    1d24:	0100                	addi	s0,sp,128
    1d26:	6a00                	flw	fs0,16(a2)
    1d28:	018a                	slli	gp,gp,0x2
    1d2a:	0000                	unimp
    1d2c:	0192                	slli	gp,gp,0x4
    1d2e:	0000                	unimp
    1d30:	7f880003          	lb	zero,2040(a6)
    1d34:	929f 0001 d800      	0xd8000001929f
    1d3a:	0001                	nop
    1d3c:	0100                	addi	s0,sp,128
    1d3e:	6a00                	flw	fs0,16(a2)
    1d40:	01d8                	addi	a4,sp,196
    1d42:	0000                	unimp
    1d44:	0232                	slli	tp,tp,0xc
    1d46:	0000                	unimp
    1d48:	7f880003          	lb	zero,2040(a6)
    1d4c:	329f 0002 4400      	0x44000002329f
    1d52:	0002                	c.slli64	zero
    1d54:	0600                	addi	s0,sp,768
    1d56:	f300                	fsw	fs0,32(a4)
    1d58:	5d01                	li	s10,-32
    1d5a:	1c31                	addi	s8,s8,-20
    1d5c:	449f 0002 7e00      	0x7e000002449f
    1d62:	0002                	c.slli64	zero
    1d64:	0300                	addi	s0,sp,384
    1d66:	8800                	0x8800
    1d68:	9f7f                	0x9f7f
	...
    1d72:	00ba                	slli	ra,ra,0xe
    1d74:	0000                	unimp
    1d76:	00c0                	addi	s0,sp,68
    1d78:	0000                	unimp
    1d7a:	0001                	nop
    1d7c:	c05c                	sw	a5,4(s0)
    1d7e:	0000                	unimp
    1d80:	d800                	sw	s0,48(s0)
    1d82:	0000                	unimp
    1d84:	0400                	addi	s0,sp,512
    1d86:	f300                	fsw	fs0,32(a4)
    1d88:	5c01                	li	s8,-32
    1d8a:	009f 0000 0000      	0x9f
    1d90:	0000                	unimp
    1d92:	ba00                	fsd	fs0,48(a2)
    1d94:	0000                	unimp
    1d96:	c400                	sw	s0,8(s0)
    1d98:	0000                	unimp
    1d9a:	0200                	addi	s0,sp,256
    1d9c:	3000                	fld	fs0,32(s0)
    1d9e:	c49f 0000 d800      	0xd8000000c49f
    1da4:	0000                	unimp
    1da6:	0100                	addi	s0,sp,128
    1da8:	5f00                	lw	s0,56(a4)
	...
    1db2:	00ca                	slli	ra,ra,0x12
    1db4:	0000                	unimp
    1db6:	00d4                	addi	a3,sp,68
    1db8:	0000                	unimp
    1dba:	0001                	nop
    1dbc:	0000005b          	0x5b
    1dc0:	0000                	unimp
    1dc2:	0000                	unimp
    1dc4:	ca00                	sw	s0,16(a2)
    1dc6:	0000                	unimp
    1dc8:	d400                	sw	s0,40(s0)
    1dca:	0000                	unimp
    1dcc:	0800                	addi	s0,sp,16
    1dce:	7f00                	flw	fs0,56(a4)
    1dd0:	3c00                	fld	fs0,56(s0)
    1dd2:	7a1e                	flw	fs4,228(sp)
    1dd4:	2200                	fld	fs0,0(a2)
    1dd6:	009f 0000 0000      	0x9f
    1ddc:	0000                	unimp
    1dde:	9200                	0x9200
    1de0:	0000                	unimp
    1de2:	9800                	0x9800
    1de4:	0000                	unimp
    1de6:	0100                	addi	s0,sp,128
    1de8:	5c00                	lw	s0,56(s0)
    1dea:	0098                	addi	a4,sp,64
    1dec:	0000                	unimp
    1dee:	00b4                	addi	a3,sp,72
    1df0:	0000                	unimp
    1df2:	0004                	0x4
    1df4:	9f5c01f3          	0x9f5c01f3
	...
    1e00:	0092                	slli	ra,ra,0x4
    1e02:	0000                	unimp
    1e04:	009c                	addi	a5,sp,64
    1e06:	0000                	unimp
    1e08:	0002                	c.slli64	zero
    1e0a:	9f30                	0x9f30
    1e0c:	009c                	addi	a5,sp,64
    1e0e:	0000                	unimp
    1e10:	00b4                	addi	a3,sp,72
    1e12:	0000                	unimp
    1e14:	0001                	nop
    1e16:	005f 0000 0000      	0x5f
    1e1c:	0000                	unimp
    1e1e:	a600                	fsd	fs0,8(a2)
    1e20:	0000                	unimp
    1e22:	ac00                	fsd	fs0,24(s0)
    1e24:	0000                	unimp
    1e26:	0600                	addi	s0,sp,768
    1e28:	7b00                	flw	fs0,48(a4)
    1e2a:	7e00                	flw	fs0,56(a2)
    1e2c:	2200                	fld	fs0,0(a2)
    1e2e:	ac9f 0000 b000      	0xb0000000ac9f
    1e34:	0000                	unimp
    1e36:	0100                	addi	s0,sp,128
    1e38:	5e00                	lw	s0,56(a2)
	...
    1e42:	00a6                	slli	ra,ra,0x9
    1e44:	0000                	unimp
    1e46:	00aa                	slli	ra,ra,0xa
    1e48:	0000                	unimp
    1e4a:	0006                	c.slli	zero,0x1
    1e4c:	007a                	c.slli	zero,0x1e
    1e4e:	007e                	c.slli	zero,0x1f
    1e50:	9f22                	add	t5,t5,s0
    1e52:	00aa                	slli	ra,ra,0xa
    1e54:	0000                	unimp
    1e56:	00b0                	addi	a2,sp,72
    1e58:	0000                	unimp
    1e5a:	0001                	nop
    1e5c:	005d                	c.nop	23
    1e5e:	0000                	unimp
    1e60:	0000                	unimp
    1e62:	0000                	unimp
    1e64:	8c00                	0x8c00
    1e66:	0000                	unimp
    1e68:	9000                	0x9000
    1e6a:	0000                	unimp
    1e6c:	0100                	addi	s0,sp,128
    1e6e:	5a00                	lw	s0,48(a2)
	...
    1e78:	00b4                	addi	a3,sp,72
    1e7a:	0000                	unimp
    1e7c:	00b8                	addi	a4,sp,72
    1e7e:	0000                	unimp
    1e80:	0001                	nop
    1e82:	005a                	c.slli	zero,0x16
    1e84:	0000                	unimp
    1e86:	0000                	unimp
    1e88:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0cbc                	addi	a5,sp,600
  16:	0000                	unimp
  18:	0f44                	addi	s1,sp,916
  1a:	0000                	unimp
  1c:	019c                	addi	a5,sp,192
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1c41                	addi	s8,s8,-16
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d48                	addi	a0,sp,660
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00c0                	addi	s0,sp,68
   2:	0000                	unimp
   4:	00c2                	slli	ra,ra,0x10
   6:	0000                	unimp
   8:	00ca                	slli	ra,ra,0x12
   a:	0000                	unimp
   c:	00d4                	addi	a3,sp,68
	...
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0d48                	addi	a0,sp,660
  1e:	0000                	unimp
  20:	0f44                	addi	s1,sp,916
  22:	0000                	unimp
  24:	10e0                	addi	s0,sp,108
	...
  2e:	0000                	unimp
  30:	ffff                	0xffff
  32:	ffff                	0xffff
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d48                	addi	a0,sp,660
  3a:	0000                	unimp
  3c:	0dbe                	slli	s11,s11,0xf
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	269a                	fld	fa3,384(sp)
       2:	0000                	unimp
       4:	01430003          	lb	zero,20(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x70>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	6972                	flw	fs2,28(sp)
      28:	33766373          	csrrsi	t1,mhpmevent23,12
      2c:	2d32                	fld	fs10,264(sp)
      2e:	6e75                	lui	t3,0x1d
      30:	776f6e6b          	0x776f6e6b
      34:	2d6e                	fld	fs10,216(sp)
      36:	6c65                	lui	s8,0x19
      38:	2f66                	fld	ft10,88(sp)
      3a:	6e69                	lui	t3,0x1a
      3c:	64756c63          	bltu	a0,t2,694 <polydiv+0x2b0>
      40:	2f65                	jal	7f8 <ext_euclid+0x13e>
      42:	616d                	addi	sp,sp,240
      44:	6e696863          	bltu	s2,t1,734 <ext_euclid+0x7a>
      48:	0065                	c.nop	25
      4a:	74706f2f          	0x74706f2f
      4e:	7369722f          	0x7369722f
      52:	6c2f7663          	bgeu	t5,sp,71e <ext_euclid+0x64>
      56:	6269                	lui	tp,0x1a
      58:	6363672f          	0x6363672f
      5c:	7369722f          	0x7369722f
      60:	32337663          	bgeu	t1,gp,38c <polymult2+0x10e>
      64:	752d                	lui	a0,0xfffeb
      66:	6b6e                	flw	fs6,216(sp)
      68:	6f6e                	flw	ft10,216(sp)
      6a:	652d6e77          	0x652d6e77
      6e:	666c                	flw	fa1,76(a2)
      70:	322e392f          	0x322e392f
      74:	302e                	fld	ft0,232(sp)
      76:	636e692f          	0x636e692f
      7a:	756c                	flw	fa1,108(a0)
  jal x0, default_exc_handler
      7c:	6564                	flw	fs1,76(a0)
      7e:	2f00                	fld	fs0,24(a4)
  jal x0, reset_handler
      80:	2f74706f          	j	47b76 <_stack_start+0x37b76>
  jal x0, default_exc_handler
      84:	6972                	flw	fs2,28(sp)
      86:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      8a:	6972                	flw	fs2,28(sp)
    asm volatile(
      8c:	33766373          	csrrsi	t1,mhpmevent23,12
}
      90:	2d32                	fld	fs10,264(sp)
    for(i=0;i<(length/3);i++) {
      92:	6e75                	lui	t3,0x1d
      94:	776f6e6b          	0x776f6e6b
      98:	2d6e                	fld	fs10,216(sp)
      9a:	6c65                	lui	s8,0x19
      9c:	2f66                	fld	ft10,88(sp)
      9e:	6e69                	lui	t3,0x1a
}
      a0:	64756c63          	bltu	a0,t2,6f8 <ext_euclid+0x3e>
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a4:	2f65                	jal	85c <ext_euclid+0x1a2>
    asm volatile(
      a6:	00737973          	csrrci	s2,0x7,6
      aa:	74706f2f          	0x74706f2f
      ae:	7369722f          	0x7369722f
    for(i=0;i<(length/3);i++) {
      b2:	722f7663          	bgeu	t5,sp,7de <ext_euclid+0x124>
    asm volatile(
      b6:	7369                	lui	t1,0xffffa
}
      b8:	32337663          	bgeu	t1,gp,3e4 <polydiv>
    for(i=0;i<(length/3);i++) {
      bc:	752d                	lui	a0,0xfffeb
      be:	6b6e                	flw	fs6,216(sp)
    asm volatile(
      c0:	6f6e                	flw	ft10,216(sp)
    for(i=0;i<(length/3);i++) {
      c2:	652d6e77          	0x652d6e77
      c6:	666c                	flw	fa1,76(a2)
}
      c8:	636e692f          	0x636e692f
    asm volatile(
      cc:	756c                	flw	fa1,108(a0)
      ce:	6564                	flw	fs1,76(a0)
      d0:	0000                	unimp
      d2:	544e                	lw	s0,240(sp)
    for(i=0;i<(length/3);i++) {
      d4:	5552                	lw	a0,52(sp)
      d6:	345f 5f38 6962      	0x69625f38345f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      dc:	4d74                	lw	a3,92(a0)
      de:	632e                	flw	ft6,200(sp)
      e0:	0000                	unimp
      e2:	0000                	unimp
    int line[size_b][size_a + size_b];
      e4:	645f 6665 7561      	0x75616665645f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      ea:	746c                	flw	fa1,108(s0)
    int line[size_b][size_a + size_b];
      ec:	745f 7079 7365      	0x73657079745f
      f2:	682e                	flw	fa6,200(sp)
      f4:	0100                	addi	s0,sp,128
      f6:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      f8:	64647473          	csrrci	s0,0x646,8
      fc:	6665                	lui	a2,0x19
      fe:	682e                	flw	fa6,200(sp)
     100:	0200                	addi	s0,sp,256
     102:	0000                	unimp
     104:	745f 7079 7365      	0x73657079745f
     10a:	682e                	flw	fa6,200(sp)
     10c:	0300                	addi	s0,sp,384
     10e:	0000                	unimp
    int line[size_b][size_a + size_b];
     110:	6572                	flw	fa0,28(sp)
    int pola[size_a];
     112:	6e65                	lui	t3,0x19
     114:	2e74                	fld	fa3,216(a2)
    int line[size_b][size_a + size_b];
     116:	0068                	addi	a0,sp,12
    int pola[size_a];
     118:	6c000003          	lb	zero,1728(zero) # 6c0 <ext_euclid+0x6>
    int line[size_b][size_a + size_b];
     11c:	2e6b636f          	jal	t1,b6402 <_stack_start+0xa6402>
    int polb[size_b];
     120:	0068                	addi	a0,sp,12
     122:	5f000003          	lb	zero,1520(zero) # 5f0 <polydiv+0x20c>
     126:	69647473          	csrrci	s0,0x696,8
    int pola[size_a];
     12a:	746e                	flw	fs0,248(sp)
     12c:	682e                	flw	fa6,200(sp)
    int polb[size_b];
     12e:	0300                	addi	s0,sp,384
     130:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     132:	6c647473          	csrrci	s0,0x6c6,8
    int line[size_b][size_a + size_b];
     136:	6269                	lui	tp,0x1a
     138:	682e                	flw	fa6,200(sp)
    int pola[size_a];
     13a:	0400                	addi	s0,sp,512
     13c:	0000                	unimp
    int polb[size_b];
     13e:	623c                	flw	fa5,64(a2)
    for (i = 0; i < size_b; ++i){
     140:	6975                	lui	s2,0x1d
     142:	746c                	flw	fa1,108(s0)
     144:	692d                	lui	s2,0xb
            product[j] = 0;
     146:	3e6e                	fld	ft8,248(sp)
     148:	0000                	unimp
     14a:	0000                	unimp
     14c:	0500                	addi	s0,sp,640
    for (i = 0; i < size_b; ++i){
     14e:	02050033          	mul	zero,a0,zero
    for (i = 0; i < size_a; ++i){
     152:	008c                	addi	a1,sp,64
     154:	0000                	unimp
     156:	05011003          	lh	zero,80(sp)
	array_mod(pola,mod,size_a);
     15a:	0305                	addi	t1,t1,1
     15c:	00000907          	0x907
     160:	0301                	addi	t1,t1,0
     162:	090a                	slli	s2,s2,0x2
    for (i = 0; i < size_b; ++i){
     164:	0004                	0x4
     166:	0501                	addi	a0,a0,0
     168:	0601                	addi	a2,a2,0
     16a:	00090303          	lb	t1,0(s2) # b000 <_stack_len+0x7000>
	array_mod(polb,mod,size_b);
     16e:	0100                	addi	s0,sp,128
     170:	2e05                	jal	4a0 <polydiv+0xbc>
     172:	0306                	slli	t1,t1,0x1
     174:	0901                	addi	s2,s2,0
    if(star_mult == 1){
     176:	0002                	c.slli64	zero
     178:	0501                	addi	a0,a0,0
     17a:	0301                	addi	t1,t1,0
     17c:	0901                	addi	s2,s2,0
     17e:	0000                	unimp
     180:	0501                	addi	a0,a0,0
     182:	0305                	addi	t1,t1,1
     184:	0901                	addi	s2,s2,0
     186:	0000                	unimp
     188:	0501                	addi	a0,a0,0
        for (j = size_b -1; j >= 0; j = j-1){
     18a:	0616                	slli	a2,a2,0x5
     18c:	00090003          	lb	zero,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     190:	0100                	addi	s0,sp,128
            product[j] = 0;
     192:	0a05                	addi	s4,s4,1
     194:	08090003          	lb	zero,128(s2)
            line[i][j] = 0;
     198:	0100                	addi	s0,sp,128
     19a:	0d05                	addi	s10,s10,1
            product[j] = 0;
     19c:	0200                	addi	s0,sp,256
     19e:	0104                	addi	s1,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     1a0:	0306                	slli	t1,t1,0x1
     1a2:	0900                	addi	s0,sp,144
     1a4:	0002                	c.slli64	zero
     1a6:	0501                	addi	a0,a0,0
    for (i = 0; i < size_b; ++i){
     1a8:	0005                	c.nop	1
     1aa:	0402                	c.slli64	s0
     1ac:	0601                	addi	a2,a2,0
     1ae:	00090003          	lb	zero,0(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     1b2:	0100                	addi	s0,sp,128
        pola[i] = a[i];
     1b4:	0105                	addi	sp,sp,1
     1b6:	04090303          	lb	t1,64(s2)
     1ba:	0100                	addi	s0,sp,128
     1bc:	0705                	addi	a4,a4,1
     1be:	0200                	addi	s0,sp,256
    for (i = 0; i < size_a; ++i){
     1c0:	0304                	addi	s1,sp,384
        pola[i] = a[i];
     1c2:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_a; ++i){
     1c4:	097e                	slli	s2,s2,0x1f
        polb[i] = b[i];
     1c6:	0002                	c.slli64	zero
     1c8:	0501                	addi	a0,a0,0
     1ca:	0005                	c.nop	1
     1cc:	0402                	c.slli64	s0
     1ce:	096f0303          	lb	t1,150(t5)
    for (i = 0; i < size_b; ++i){
     1d2:	0004                	0x4
        polb[i] = b[i];
     1d4:	0001                	nop
    for (i = 0; i < size_b; ++i){
     1d6:	0402                	c.slli64	s0
                line[size_b-1-j][k] = pola[k]*polb[j];
     1d8:	090a0303          	lb	t1,144(s4)
     1dc:	000a                	c.slli	zero,0x2
     1de:	0501                	addi	a0,a0,0
     1e0:	001a                	c.slli	zero,0x6
     1e2:	0402                	c.slli64	s0
     1e4:	09060303          	lb	t1,144(a2) # 19090 <_stack_start+0x9090>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e8:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     1ea:	0501                	addi	a0,a0,0
     1ec:	0402001b          	0x402001b
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f0:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
        for (j = size_b -1; j >= 0; j = j-1){
     1f4:	0009                	c.nop	2
     1f6:	0100                	addi	s0,sp,128
     1f8:	3405                	jal	fffffc18 <_stack_start+0xfffefc18>
     1fa:	0306                	slli	t1,t1,0x1
     1fc:	0905                	addi	s2,s2,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     1fe:	0004                	0x4
	array_add(product, line[i], (size_a + size_b - 1));
     200:	0501                	addi	a0,a0,0
     202:	0305                	addi	t1,t1,1
     204:	0902                	c.slli64	s2
     206:	0000                	unimp
        array_mod(line[i],mod,(size_a+size_b-1));
     208:	0301                	addi	t1,t1,0
     20a:	0909                	addi	s2,s2,2
    for (i = 0; i < size_b; ++i){
     20c:	0004                	0x4
     20e:	0501                	addi	a0,a0,0
    array_mod(product,mod,size_a+size_b-1);
     210:	0601                	addi	a2,a2,0
     212:	00090303          	lb	t1,0(s2)
     216:	0100                	addi	s0,sp,128
     218:	2c05                	jal	448 <polydiv+0x64>
}
     21a:	0306                	slli	t1,t1,0x1
     21c:	0901                	addi	s2,s2,0
     21e:	0002                	c.slli64	zero
     220:	0501                	addi	a0,a0,0
     222:	0301                	addi	t1,t1,0
     224:	0905                	addi	s2,s2,1
     226:	0000                	unimp
     228:	0501                	addi	a0,a0,0
     22a:	0305                	addi	t1,t1,1
     22c:	0902                	c.slli64	s2
     22e:	0000                	unimp
     230:	0501                	addi	a0,a0,0
     232:	0616                	slli	a2,a2,0x5
     234:	00090003          	lb	zero,0(s2)
     238:	0100                	addi	s0,sp,128
     23a:	0505                	addi	a0,a0,1
     23c:	06096c03          	0x6096c03
     240:	0100                	addi	s0,sp,128
     242:	0a05                	addi	s4,s4,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     244:	02091403          	lh	s0,32(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     248:	0100                	addi	s0,sp,128
     24a:	0d05                	addi	s10,s10,1
     24c:	0200                	addi	s0,sp,256
     24e:	0104                	addi	s1,sp,128
     250:	0306                	slli	t1,t1,0x1
     252:	0900                	addi	s0,sp,144
     254:	0002                	c.slli64	zero
     256:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     258:	0005                	c.nop	1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     25a:	0402                	c.slli64	s0
     25c:	0601                	addi	a2,a2,0
     25e:	00090003          	lb	zero,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     262:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     264:	0105                	addi	sp,sp,1
     266:	04090403          	lb	s0,64(s2)
     26a:	0100                	addi	s0,sp,128
        array_mod(line[i],mod,(size_a+size_b-1));
     26c:	0905                	addi	s2,s2,1
     26e:	0200                	addi	s0,sp,256
	array_add(product, line[i], (size_a + size_b - 1));
     270:	0304                	addi	s1,sp,384
     272:	0306                	slli	t1,t1,0x1
     274:	097d                	addi	s2,s2,31
     276:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     278:	0501                	addi	a0,a0,0
     27a:	0005                	c.nop	1
     27c:	0402                	c.slli64	s0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     27e:	096b0303          	lb	t1,150(s6)
     282:	0000                	unimp
    int line[size_b][size_a + size_b];
     284:	0001                	nop
     286:	0402                	c.slli64	s0
     288:	09090303          	lb	t1,144(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     28c:	000a                	c.slli	zero,0x2
     28e:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     290:	001a                	c.slli	zero,0x6
     292:	0402                	c.slli64	s0
     294:	090b0303          	lb	t1,144(s6)
     298:	0000                	unimp
     29a:	0501                	addi	a0,a0,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     29c:	0402001b          	0x402001b
     2a0:	00030603          	lb	a2,0(t1)
     2a4:	0009                	c.nop	2
     2a6:	0100                	addi	s0,sp,128
     2a8:	4e05                	li	t3,1
    int pola[size_a];
     2aa:	0306                	slli	t1,t1,0x1
     2ac:	0909                	addi	s2,s2,2
    int line[size_b][size_a + size_b];
     2ae:	0004                	0x4
     2b0:	0501                	addi	a0,a0,0
     2b2:	0305                	addi	t1,t1,1
     2b4:	0902                	c.slli64	s2
    int pola[size_a];
     2b6:	0000                	unimp
     2b8:	0501                	addi	a0,a0,0
     2ba:	064e                	slli	a2,a2,0x13
     2bc:	00097e03          	0x97e03
     2c0:	0100                	addi	s0,sp,128
     2c2:	1d05                	addi	s10,s10,-31
    int polb[size_b];
     2c4:	0c090203          	lb	tp,192(s2)
     2c8:	0100                	addi	s0,sp,128
    int pola[size_a];
     2ca:	4e05                	li	t3,1
    int polb[size_b];
     2cc:	04097e03          	0x4097e03
    int line[size_b][size_a + size_b];
     2d0:	0100                	addi	s0,sp,128
    int polb[size_b];
     2d2:	0905                	addi	s2,s2,1
    for (i = 0; i < size_b; ++i){
     2d4:	04090203          	lb	tp,64(s2)
     2d8:	0100                	addi	s0,sp,128
            product2[j] = 0;
     2da:	4e05                	li	t3,1
     2dc:	0c097e03          	0xc097e03
     2e0:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     2e2:	14090003          	lb	zero,320(s2)
    for(i = 0; i < size_a; ++i){
     2e6:	0100                	addi	s0,sp,128
     2e8:	0905                	addi	s2,s2,1
     2ea:	04090203          	lb	tp,64(s2)
    for(i = 0; i < size_b; ++i){
     2ee:	0100                	addi	s0,sp,128
     2f0:	02090303          	lb	t1,32(s2)
    if(star_mult == 1){
     2f4:	0100                	addi	s0,sp,128
     2f6:	04097d03          	0x4097d03
     2fa:	0100                	addi	s0,sp,128
     2fc:	02090303          	lb	t1,32(s2)
     300:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     302:	02097d03          	0x2097d03
            for (k = size_a-1; k >= 0; k = k-1 ){
     306:	0100                	addi	s0,sp,128
     308:	04090303          	lb	t1,64(s2)
            product2[j] = 0;
     30c:	0100                	addi	s0,sp,128
     30e:	02090103          	lb	sp,32(s2)
            line[i][j] = 0;
     312:	0100                	addi	s0,sp,128
            product2[j] = 0;
     314:	04097c03          	0x4097c03
        for(j = 0; j < size_a + size_b -1; ++j){
     318:	0100                	addi	s0,sp,128
     31a:	02090403          	lb	s0,32(s2)
     31e:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     320:	02097f03          	0x2097f03
     324:	0100                	addi	s0,sp,128
     326:	06090103          	lb	sp,96(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     32a:	0100                	addi	s0,sp,128
        pola[i] = a[i];
     32c:	4e05                	li	t3,1
     32e:	04097a03          	0x4097a03
     332:	0100                	addi	s0,sp,128
     334:	0905                	addi	s2,s2,1
     336:	04090203          	lb	tp,64(s2)
    for(i = 0; i < size_a; ++i){
     33a:	0100                	addi	s0,sp,128
        pola[i] = a[i];
     33c:	0505                	addi	a0,a0,1
     33e:	0306                	slli	t1,t1,0x1
    for(i = 0; i < size_a; ++i){
     340:	0901                	addi	s2,s2,0
        polb[i] = b[i];
     342:	0004                	0x4
     344:	0301                	addi	t1,t1,0
     346:	0901                	addi	s2,s2,0
     348:	0000                	unimp
     34a:	0301                	addi	t1,t1,0
     34c:	0901                	addi	s2,s2,0
     34e:	0000                	unimp
    for(i = 0; i < size_b; ++i){
     350:	0501                	addi	a0,a0,0
        polb[i] = b[i];
     352:	0609                	addi	a2,a2,2
     354:	00090003          	lb	zero,0(s2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     358:	0100                	addi	s0,sp,128
     35a:	0505                	addi	a0,a0,1
     35c:	0306                	slli	t1,t1,0x1
     35e:	0901                	addi	s2,s2,0
     360:	0004                	0x4
     362:	0501                	addi	a0,a0,0
     364:	0609                	addi	a2,a2,2
     366:	00090003          	lb	zero,0(s2)
     36a:	0100                	addi	s0,sp,128
     36c:	0505                	addi	a0,a0,1
     36e:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     370:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
        for (j = size_b -1; j >= 0; j = j-1){
     374:	0501                	addi	a0,a0,0
     376:	060c                	addi	a1,sp,768
     378:	04090003          	lb	zero,64(s2)
     37c:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     37e:	1805                	addi	a6,a6,-31
         array_add(product2,line[i],size_a+size_b-1);
     380:	02090303          	lb	t1,32(s2)
     384:	0100                	addi	s0,sp,128
     386:	1105                	addi	sp,sp,-31
        for(i = 0; i < size_b; ++i){
     388:	0200                	addi	s0,sp,256
     38a:	0104                	addi	s1,sp,128
}
     38c:	0306                	slli	t1,t1,0x1
     38e:	097d                	addi	s2,s2,31
     390:	0008                	0x8
     392:	0501                	addi	a0,a0,0
     394:	0005                	c.nop	1
     396:	0402                	c.slli64	s0
     398:	0601                	addi	a2,a2,0
     39a:	00090003          	lb	zero,0(s2)
     39e:	0100                	addi	s0,sp,128
     3a0:	0c05                	addi	s8,s8,1
     3a2:	04090803          	lb	a6,64(s2)
     3a6:	0100                	addi	s0,sp,128
     3a8:	1105                	addi	sp,sp,-31
     3aa:	0200                	addi	s0,sp,256
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ac:	0104                	addi	s1,sp,128
     3ae:	0306                	slli	t1,t1,0x1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3b0:	0900                	addi	s0,sp,144
     3b2:	0002                	c.slli64	zero
     3b4:	0501                	addi	a0,a0,0
     3b6:	0005                	c.nop	1
     3b8:	0402                	c.slli64	s0
     3ba:	0601                	addi	a2,a2,0
     3bc:	00090003          	lb	zero,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c0:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3c2:	0205                	addi	tp,tp,1
     3c4:	04090403          	lb	s0,64(s2)
     3c8:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	0306                	slli	t1,t1,0x1
     3cc:	0900                	addi	s0,sp,144
        for (j = size_b -1; j >= 0; j = j-1){
     3ce:	000a                	c.slli	zero,0x2
     3d0:	0501                	addi	a0,a0,0
     3d2:	0305                	addi	t1,t1,1
     3d4:	0902                	c.slli64	s2
         array_add(product2,line[i],size_a+size_b-1);
     3d6:	0002                	c.slli64	zero
     3d8:	0501                	addi	a0,a0,0
     3da:	060c                	addi	a1,sp,768
     3dc:	04090003          	lb	zero,64(s2)
        for(i = 0; i < size_b; ++i){
     3e0:	0100                	addi	s0,sp,128
     3e2:	1105                	addi	sp,sp,-31
    int v[size_N];
     3e4:	0200                	addi	s0,sp,256
     3e6:	0104                	addi	s1,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3e8:	0306                	slli	t1,t1,0x1
    int v[size_N];
     3ea:	0900                	addi	s0,sp,144
     3ec:	0002                	c.slli64	zero
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3ee:	0501                	addi	a0,a0,0
     3f0:	0005                	c.nop	1
     3f2:	0402                	c.slli64	s0
     3f4:	0601                	addi	a2,a2,0
     3f6:	00090003          	lb	zero,0(s2)
     3fa:	0100                	addi	s0,sp,128
     3fc:	0205                	addi	tp,tp,1
     3fe:	0306                	slli	t1,t1,0x1
     400:	0904                	addi	s1,sp,144
     402:	0004                	0x4
     404:	0501                	addi	a0,a0,0
     406:	0305                	addi	t1,t1,1
     408:	00080903          	lb	s2,0(a6)
    int v[size_N];
     40c:	0501                	addi	a0,a0,0
     40e:	00030607          	0x30607
    int q[size_N];
     412:	0009                	c.nop	2
     414:	0100                	addi	s0,sp,128
    int num_temp[size_N];
     416:	1d05                	addi	s10,s10,-31
     418:	0200                	addi	s0,sp,256
    int denum_temp[size_D];
     41a:	0104                	addi	s1,sp,128
     41c:	0306                	slli	t1,t1,0x1
     41e:	0908                	addi	a0,sp,144
     420:	0014                	0x14
    int num_temp[size_N];
     422:	0501                	addi	a0,a0,0
    int denum_temp[size_D];
     424:	0009                	c.nop	2
     426:	0402                	c.slli64	s0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     428:	0601                	addi	a2,a2,0
     42a:	00090003          	lb	zero,0(s2)
     42e:	0100                	addi	s0,sp,128
    int v[size_N];
     430:	1405                	addi	s0,s0,-31
     432:	04090103          	lb	sp,64(s2)
    int denum_temp[size_D];
     436:	0100                	addi	s0,sp,128
     438:	0d05                	addi	s10,s10,1
    for (i = 0; i < size_N; ++i){
     43a:	0200                	addi	s0,sp,256
     43c:	0304                	addi	s1,sp,384
     43e:	0306                	slli	t1,t1,0x1
    if(size_N == 106) {
     440:	0964                	addi	s1,sp,156
     442:	0004                	0x4
     444:	0501                	addi	a0,a0,0
     446:	0018                	0x18
        array_mod(num_temp, mod, size_N - 1);
     448:	0402                	c.slli64	s0
     44a:	01030603          	lb	a2,16(t1)
     44e:	0009                	c.nop	2
     450:	0100                	addi	s0,sp,128
        while(num_temp[size_N - 1] < 0){
     452:	0200                	addi	s0,sp,256
     454:	0304                	addi	s1,sp,384
     456:	06097f03          	0x6097f03
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     45a:	0100                	addi	s0,sp,128
     45c:	0d05                	addi	s10,s10,1
     45e:	0200                	addi	s0,sp,256
     460:	0304                	addi	s1,sp,384
    for (i = 0; i < size_N; ++i){
     462:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_D; ++i) {
     464:	0901                	addi	s2,s2,0
     466:	0004                	0x4
	array_mod(denum_temp,mod,size_D);
     468:	0501                	addi	a0,a0,0
     46a:	0018                	0x18
     46c:	0402                	c.slli64	s0
     46e:	00030603          	lb	a2,0(t1)
    for (i = 0; i < size_N; ++i){
     472:	0009                	c.nop	2
     474:	0100                	addi	s0,sp,128
    for (i = size_D-1; i >= 0; i = i-1){
     476:	2c05                	jal	6a6 <polydiv+0x2c2>
     478:	0200                	addi	s0,sp,256
     47a:	0304                	addi	s1,sp,384
     47c:	0306                	slli	t1,t1,0x1
     47e:	097e                	slli	s2,s2,0x1f
     480:	0004                	0x4
    for (i = 0; i < size_N; ++i){
     482:	0501                	addi	a0,a0,0
     484:	0014                	0x14
        if ( (b_N*u)%mod == 1 )
     486:	0402                	c.slli64	s0
    for (u = 0; u < mod; ++u){
     488:	0301                	addi	t1,t1,0
     48a:	0900                	addi	s0,sp,144
     48c:	0004                	0x4
     48e:	0501                	addi	a0,a0,0
        num_temp[i] = num[i];
     490:	0009                	c.nop	2
     492:	0402                	c.slli64	s0
     494:	0601                	addi	a2,a2,0
     496:	00090003          	lb	zero,0(s2)
     49a:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     49c:	1d05                	addi	s10,s10,-31
        num_temp[i] = num[i];
     49e:	0200                	addi	s0,sp,256
    for (i = 0; i < size_N; ++i){
     4a0:	0204                	addi	s1,sp,256
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4a2:	0306                	slli	t1,t1,0x1
     4a4:	097f                	0x97f
     4a6:	0004                	0x4
     4a8:	0501                	addi	a0,a0,0
        array_mod(num_temp, mod, size_N);
     4aa:	0103060f          	0x103060f
     4ae:	0809                	addi	a6,a6,2
     4b0:	0100                	addi	s0,sp,128
     4b2:	0905                	addi	s2,s2,1
        denum_temp[i] = denum[i];
     4b4:	0200                	addi	s0,sp,256
     4b6:	0304                	addi	s1,sp,384
     4b8:	0306                	slli	t1,t1,0x1
     4ba:	0908                	addi	a0,sp,144
     4bc:	0004                	0x4
     4be:	0501                	addi	a0,a0,0
    for (i = 0; i < size_D; ++i) {
     4c0:	0011                	c.nop	4
        denum_temp[i] = denum[i];
     4c2:	0402                	c.slli64	s0
    for (i = 0; i < size_D; ++i) {
     4c4:	00030603          	lb	a2,0(t1)
        q[i] = 0;
     4c8:	0409                	addi	s0,s0,2
     4ca:	0100                	addi	s0,sp,128
     4cc:	1405                	addi	s0,s0,-31
        v[i] = 0;
     4ce:	0200                	addi	s0,sp,256
        q[i] = 0;
     4d0:	0304                	addi	s1,sp,384
     4d2:	04090003          	lb	zero,64(s2)
        v[i] = 0;
     4d6:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     4d8:	1105                	addi	sp,sp,-31
     4da:	0200                	addi	s0,sp,256
        if( denum_temp[i] != 0 )
     4dc:	0304                	addi	s1,sp,384
    for (i = size_D-1; i >= 0; i = i-1){
     4de:	02090003          	lb	zero,32(s2)
        if ( (b_N*u)%mod == 1 )
     4e2:	0100                	addi	s0,sp,128
     4e4:	1d05                	addi	s10,s10,-31
     4e6:	0200                	addi	s0,sp,256
     4e8:	0304                	addi	s1,sp,384
     4ea:	02097f03          	0x2097f03
    for (u = 0; u < mod; ++u){
     4ee:	0100                	addi	s0,sp,128
        if( num_temp[i] != 0 )
     4f0:	1105                	addi	sp,sp,-31
    for (i = size_N-1; i >= 0; i = i-1){
     4f2:	0200                	addi	s0,sp,256
     4f4:	0304                	addi	s1,sp,384
     4f6:	02090103          	lb	sp,32(s2)
     4fa:	0100                	addi	s0,sp,128
     4fc:	1d05                	addi	s10,s10,-31
     4fe:	0200                	addi	s0,sp,256
         if(size_N == 106) {
     500:	0304                	addi	s1,sp,384
     502:	0306                	slli	t1,t1,0x1
     504:	097f                	0x97f
        v[(d-d2)] = u*r_d;
     506:	0002                	c.slli64	zero
     508:	0501                	addi	a0,a0,0
     50a:	0009                	c.nop	2
     50c:	0402                	c.slli64	s0
     50e:	09070303          	lb	t1,144(a4)
     512:	0002                	c.slli64	zero
         if(size_N == 106) {
     514:	0501                	addi	a0,a0,0
     516:	0011                	c.nop	4
            array_mod(v, mod, size_N - 1);
     518:	0402                	c.slli64	s0
     51a:	00030603          	lb	a2,0(t1)
     51e:	0409                	addi	s0,s0,2
     520:	0100                	addi	s0,sp,128
            while(v[size_N - 1] < 0){
     522:	1405                	addi	s0,s0,-31
     524:	0200                	addi	s0,sp,256
     526:	0304                	addi	s1,sp,384
     528:	04090003          	lb	zero,64(s2)
            v[size_N - 1] = v[size_N - 1] % mod;
     52c:	0100                	addi	s0,sp,128
     52e:	1105                	addi	sp,sp,-31
     530:	0200                	addi	s0,sp,256
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     532:	0304                	addi	s1,sp,384
     534:	02090003          	lb	zero,32(s2)
     538:	0100                	addi	s0,sp,128
     53a:	1d05                	addi	s10,s10,-31
     53c:	0200                	addi	s0,sp,256
     53e:	0304                	addi	s1,sp,384
        if(size_N == 106) {
     540:	02097f03          	0x2097f03
     544:	0100                	addi	s0,sp,128
     546:	1105                	addi	sp,sp,-31
            array_mod(product, mod, size_N - 1);
     548:	0200                	addi	s0,sp,256
     54a:	0304                	addi	s1,sp,384
     54c:	02090103          	lb	sp,32(s2)
            while(product[size_N - 1] < 0){
     550:	0100                	addi	s0,sp,128
     552:	1d05                	addi	s10,s10,-31
     554:	0200                	addi	s0,sp,256
     556:	0304                	addi	s1,sp,384
     558:	0306                	slli	t1,t1,0x1
     55a:	097f                	0x97f
            product[size_N - 1] = product[size_N - 1] % mod;
     55c:	0002                	c.slli64	zero
     55e:	0501                	addi	a0,a0,0
     560:	0011                	c.nop	4
     562:	0402                	c.slli64	s0
     564:	090a0303          	lb	t1,144(s4)
        for (i = 0; i < size_N; ++i){
     568:	0002                	c.slli64	zero
     56a:	0501                	addi	a0,a0,0
 	if(size_N == 106) {
     56c:	0025                	c.nop	9
     56e:	0402                	c.slli64	s0
            array_mod(num_temp, mod, size_N - 1);
     570:	00030603          	lb	a2,0(t1)
     574:	0409                	addi	s0,s0,2
     576:	0100                	addi	s0,sp,128
     578:	2b05                	jal	aa8 <generate_keys+0x1a4>
            while(num_temp[size_N - 1] < 0){
     57a:	0200                	addi	s0,sp,256
     57c:	0304                	addi	s1,sp,384
     57e:	04090003          	lb	zero,64(s2)
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     582:	0100                	addi	s0,sp,128
     584:	2e05                	jal	8b4 <ext_euclid+0x1fa>
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     586:	0200                	addi	s0,sp,256
     588:	0304                	addi	s1,sp,384
     58a:	02090003          	lb	zero,32(s2)
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     58e:	0100                	addi	s0,sp,128
     590:	2a05                	jal	6c0 <ext_euclid+0x6>
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     592:	0200                	addi	s0,sp,256
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     594:	0304                	addi	s1,sp,384
     596:	06097f03          	0x6097f03
     59a:	0100                	addi	s0,sp,128
            array_mod(q, mod, size_N - 1);
     59c:	2e05                	jal	8cc <ext_euclid+0x212>
     59e:	0200                	addi	s0,sp,256
     5a0:	0304                	addi	s1,sp,384
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     5a2:	02090103          	lb	sp,32(s2)
     5a6:	0100                	addi	s0,sp,128
     5a8:	2505                	jal	bc8 <generate_keys+0x2c4>
            array_mod(q, mod, size_N - 1);
     5aa:	0200                	addi	s0,sp,256
            while(q[size_N - 1] < 0){
     5ac:	0304                	addi	s1,sp,384
     5ae:	04090003          	lb	zero,64(s2)
     5b2:	0100                	addi	s0,sp,128
            q[size_N - 1] = q[size_N - 1] % mod;
     5b4:	2805                	jal	5e4 <polydiv+0x200>
     5b6:	0200                	addi	s0,sp,256
     5b8:	0304                	addi	s1,sp,384
     5ba:	0306                	slli	t1,t1,0x1
     5bc:	097f                	0x97f
                v[size_N - 1] = v[size_N - 1]+mod;
     5be:	0002                	c.slli64	zero
     5c0:	0501                	addi	a0,a0,0
     5c2:	0020                	addi	s0,sp,8
     5c4:	0402                	c.slli64	s0
            array_mod(v, mod, size_N);
     5c6:	0301                	addi	t1,t1,0
     5c8:	0900                	addi	s0,sp,144
     5ca:	0000                	unimp
     5cc:	0501                	addi	a0,a0,0
     5ce:	000d                	c.nop	3
                product[size_N - 1] = product[size_N - 1]+mod;
     5d0:	0402                	c.slli64	s0
     5d2:	0601                	addi	a2,a2,0
     5d4:	00090003          	lb	zero,0(s2)
            array_mod(product, mod, size_N);
     5d8:	0100                	addi	s0,sp,128
     5da:	2505                	jal	bfa <ntru_encyrpt+0x2>
     5dc:	0200                	addi	s0,sp,256
     5de:	0204                	addi	s1,sp,256
     5e0:	0306                	slli	t1,t1,0x1
     5e2:	097f                	0x97f
            num_temp[i] = num_temp[i] - product[i];
     5e4:	0004                	0x4
     5e6:	0501                	addi	a0,a0,0
     5e8:	04020027          	0x4020027
     5ec:	0602                	c.slli64	a2
        for (i = 0; i < size_N; ++i){
     5ee:	00090003          	lb	zero,0(s2)
            num_temp[i] = num_temp[i] - product[i];
     5f2:	0100                	addi	s0,sp,128
     5f4:	1d05                	addi	s10,s10,-31
     5f6:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     5f8:	0104                	addi	s1,sp,128
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     5fa:	0306                	slli	t1,t1,0x1
     5fc:	0900                	addi	s0,sp,144
     5fe:	0006                	c.slli	zero,0x1
     600:	0501                	addi	a0,a0,0
            array_mod(num_temp, mod, size_N);
     602:	0009                	c.nop	2
     604:	0402                	c.slli64	s0
     606:	0601                	addi	a2,a2,0
     608:	00090003          	lb	zero,0(s2)
            array_add(q, v, size_N );
     60c:	0100                	addi	s0,sp,128
     60e:	1405                	addi	s0,s0,-31
     610:	04090803          	lb	a6,64(s2)
            array_mod(q, mod, size_N);
     614:	0100                	addi	s0,sp,128
     616:	0205                	addi	tp,tp,1
     618:	02090903          	lb	s2,32(s2)
        for (i = size_N-1; i >= 0; i = i-1){
     61c:	0100                	addi	s0,sp,128
     61e:	1105                	addi	sp,sp,-31
     620:	0200                	addi	s0,sp,256
     622:	0104                	addi	s1,sp,128
     624:	0306                	slli	t1,t1,0x1
     626:	097e                	slli	s2,s2,0x1f
     628:	0008                	0x8
     62a:	0501                	addi	a0,a0,0
                q[size_N - 1] = q[size_N - 1]+mod;
     62c:	0009                	c.nop	2
     62e:	0402                	c.slli64	s0
     630:	0601                	addi	a2,a2,0
     632:	00090103          	lb	sp,0(s2)
        for (i = size_N-1; i >= 0; i = i-1){
     636:	0100                	addi	s0,sp,128
     638:	0505                	addi	a0,a0,1
            v[i] = 0;
     63a:	0200                	addi	s0,sp,256
     63c:	0104                	addi	s1,sp,128
     63e:	04097f03          	0x4097f03
     642:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     644:	0306                	slli	t1,t1,0x1
     646:	00040907          	0x40907
    while (d >= d2){
     64a:	0301                	addi	t1,t1,0
     64c:	0902                	c.slli64	s2
    for(i = 0; i < size_N; ++i){
     64e:	000a                	c.slli	zero,0x2
        result[i] = q[i];
     650:	0301                	addi	t1,t1,0
     652:	0902                	c.slli64	s2
     654:	0000                	unimp
     656:	0501                	addi	a0,a0,0
    for(i = 0; i < size_N; ++i){
     658:	0601                	addi	a2,a2,0
     65a:	00090103          	lb	sp,0(s2)
    for(i = size_N; i < (2*size_N); ++i){
     65e:	0100                	addi	s0,sp,128
        result[i] = num_temp[i-size_N];
     660:	1405                	addi	s0,s0,-31
     662:	2a096603          	0x2a096603
     666:	0100                	addi	s0,sp,128
    for(i = size_N; i < (2*size_N); ++i){
     668:	1105                	addi	sp,sp,-31
     66a:	0200                	addi	s0,sp,256
}
     66c:	0304                	addi	s1,sp,384
     66e:	0306                	slli	t1,t1,0x1
     670:	0908                	addi	a0,sp,144
     672:	0004                	0x4
     674:	0501                	addi	a0,a0,0
     676:	0029                	c.nop	10
     678:	0402                	c.slli64	s0
     67a:	00030603          	lb	a2,0(t1)
     67e:	0409                	addi	s0,s0,2
     680:	0100                	addi	s0,sp,128
     682:	2f05                	jal	db2 <main_entry>
     684:	0200                	addi	s0,sp,256
     686:	0304                	addi	s1,sp,384
     688:	04090003          	lb	zero,64(s2)
     68c:	0100                	addi	s0,sp,128
     68e:	3205                	jal	ffffffae <_stack_start+0xfffeffae>
     690:	0200                	addi	s0,sp,256
     692:	0304                	addi	s1,sp,384
     694:	02090003          	lb	zero,32(s2)
        result[i] = q[i];
     698:	0100                	addi	s0,sp,128
     69a:	2a05                	jal	7ca <ext_euclid+0x110>
     69c:	0200                	addi	s0,sp,256
     69e:	0304                	addi	s1,sp,384
     6a0:	06097f03          	0x6097f03
     6a4:	0100                	addi	s0,sp,128
    for(i = 0; i < size_N; ++i){
     6a6:	3205                	jal	ffffffc6 <_stack_start+0xfffeffc6>
        result[i] = num_temp[i-size_N];
     6a8:	0200                	addi	s0,sp,256
     6aa:	0304                	addi	s1,sp,384
     6ac:	02090103          	lb	sp,32(s2)
     6b0:	0100                	addi	s0,sp,128
     6b2:	2905                	jal	ae2 <generate_keys+0x1de>
    for(i = size_N; i < (2*size_N); ++i){
     6b4:	0200                	addi	s0,sp,256
     6b6:	0304                	addi	s1,sp,384
     6b8:	04090003          	lb	zero,64(s2)
    int ri_2[size]; // MX-ring poly, a
     6bc:	0100                	addi	s0,sp,128
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6be:	2805                	jal	6ee <ext_euclid+0x34>
    int ri_2[size]; // MX-ring poly, a
     6c0:	0200                	addi	s0,sp,256
     6c2:	0304                	addi	s1,sp,384
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6c4:	0306                	slli	t1,t1,0x1
     6c6:	097f                	0x97f
     6c8:	0002                	c.slli64	zero
     6ca:	0501                	addi	a0,a0,0
     6cc:	0020                	addi	s0,sp,8
     6ce:	0402                	c.slli64	s0
     6d0:	0301                	addi	t1,t1,0
     6d2:	0900                	addi	s0,sp,144
     6d4:	0000                	unimp
     6d6:	0501                	addi	a0,a0,0
     6d8:	000d                	c.nop	3
     6da:	0402                	c.slli64	s0
     6dc:	0601                	addi	a2,a2,0
     6de:	00090003          	lb	zero,0(s2)
    int ri_2[size]; // MX-ring poly, a
     6e2:	0100                	addi	s0,sp,128
     6e4:	2505                	jal	d04 <ntru_deceypt+0x84>
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6e6:	0200                	addi	s0,sp,256
     6e8:	0204                	addi	s1,sp,256
     6ea:	0306                	slli	t1,t1,0x1
    int ri[size];
     6ec:	097f                	0x97f
     6ee:	0004                	0x4
     6f0:	0501                	addi	a0,a0,0
    int ti_1[size]; // ti_1[0] = 1
     6f2:	04020027          	0x4020027
     6f6:	0602                	c.slli64	a2
    int ti[size];
     6f8:	00090003          	lb	zero,0(s2)
     6fc:	0100                	addi	s0,sp,128
    int qi_1[size];
     6fe:	0905                	addi	s2,s2,1
     700:	0200                	addi	s0,sp,256
     702:	0304                	addi	s1,sp,384
    int temp[size];
     704:	0306                	slli	t1,t1,0x1
     706:	0909                	addi	s2,s2,2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     708:	0008                	0x8
     70a:	0501                	addi	a0,a0,0
    int ri_2[size]; // MX-ring poly, a
     70c:	0002                	c.slli64	zero
     70e:	0402                	c.slli64	s0
    int temp[size];
     710:	09010303          	lb	t1,144(sp)
    for (i = 0; i < size; ++i) {
     714:	0004                	0x4
        ti_2[i] = 0;
     716:	0501                	addi	a0,a0,0
     718:	001d                	c.nop	7
     71a:	0402                	c.slli64	s0
     71c:	097e0303          	lb	t1,151(t3) # 19097 <_stack_start+0x9097>
    for (i = 0; i < size; ++i) {
     720:	0008                	0x8
    ti_1[0] = 1;
     722:	0501                	addi	a0,a0,0
     724:	0346                	slli	t1,t1,0x11
     726:	090e                	slli	s2,s2,0x3
        for (i = N + 1; i < (2 * N + 2); ++i) {
     728:	0006                	c.slli	zero,0x1
     72a:	0501                	addi	a0,a0,0
     72c:	0305                	addi	t1,t1,1
     72e:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
            ti[i] = ti_2[i] - temp[i];
     732:	0501                	addi	a0,a0,0
     734:	0646                	slli	a2,a2,0x11
     736:	00097d03          	0x97d03
	array_mod(ri_2,mod,N+1);
     73a:	0100                	addi	s0,sp,128
     73c:	1d05                	addi	s10,s10,-31
     73e:	06090303          	lb	t1,96(s2)
	array_mod(ri_1,mod,N+1);
     742:	0100                	addi	s0,sp,128
     744:	4605                	li	a2,1
     746:	08097d03          	0x8097d03
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     74a:	0100                	addi	s0,sp,128
     74c:	0905                	addi	s2,s2,1
     74e:	04090303          	lb	t1,64(s2)
     752:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     754:	4605                	li	a2,1
     756:	0c097d03          	0xc097d03
     75a:	0100                	addi	s0,sp,128
     75c:	0c090003          	lb	zero,192(s2)
     760:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     762:	0905                	addi	s2,s2,1
     764:	02090603          	lb	a2,32(s2)
        array_mod(temp,mod,N+1);
     768:	0100                	addi	s0,sp,128
     76a:	04097d03          	0x4097d03
     76e:	0100                	addi	s0,sp,128
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     770:	08090303          	lb	t1,128(s2)
     774:	0100                	addi	s0,sp,128
     776:	08097d03          	0x8097d03
     77a:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     77c:	02090303          	lb	t1,32(s2)
     780:	0100                	addi	s0,sp,128
	array_mod(qi_1,mod,size);
     782:	04090103          	lb	sp,64(s2)
     786:	0100                	addi	s0,sp,128
     788:	06097f03          	0x6097f03
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     78c:	0100                	addi	s0,sp,128
     78e:	02090103          	lb	sp,32(s2)
     792:	0100                	addi	s0,sp,128
     794:	04097c03          	0x4097c03
        for (i = 0; i < N + 1; ++i) {
     798:	0100                	addi	s0,sp,128
     79a:	0505                	addi	a0,a0,1
     79c:	0306                	slli	t1,t1,0x1
	array_mod(temp,mod,size);
     79e:	0901                	addi	s2,s2,0
     7a0:	0002                	c.slli64	zero
     7a2:	0301                	addi	t1,t1,0
     7a4:	0901                	addi	s2,s2,0
        for (i = 0; i < N + 1; ++i) {
     7a6:	0000                	unimp
     7a8:	0301                	addi	t1,t1,0
     7aa:	0901                	addi	s2,s2,0
     7ac:	0000                	unimp
        array_mod(ti,mod,N+1);
     7ae:	0301                	addi	t1,t1,0
     7b0:	0901                	addi	s2,s2,0
     7b2:	0000                	unimp
     7b4:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     7b6:	0609                	addi	a2,a2,2
        controlR = 0;
     7b8:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     7bc:	0100                	addi	s0,sp,128
     7be:	0505                	addi	a0,a0,1
    while (controlR != 0) {
     7c0:	0306                	slli	t1,t1,0x1
        for (j = 0; j < mod; ++j) {
     7c2:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     7c6:	0501                	addi	a0,a0,0
     7c8:	060c                	addi	a1,sp,768
     7ca:	04090003          	lb	zero,64(s2)
     7ce:	0100                	addi	s0,sp,128
     7d0:	1905                	addi	s2,s2,-31
        for (i = 0; i < N + 1; ++i) {
     7d2:	02090303          	lb	t1,32(s2)
    }
     7d6:	0100                	addi	s0,sp,128
     7d8:	1105                	addi	sp,sp,-31
     7da:	0200                	addi	s0,sp,256
     7dc:	0104                	addi	s1,sp,128
     7de:	0306                	slli	t1,t1,0x1
     7e0:	097d                	addi	s2,s2,31
     7e2:	0008                	0x8
     7e4:	0501                	addi	a0,a0,0
     7e6:	0005                	c.nop	1
     7e8:	0402                	c.slli64	s0
     7ea:	0601                	addi	a2,a2,0
     7ec:	00090003          	lb	zero,0(s2)
     7f0:	0100                	addi	s0,sp,128
     7f2:	0b05                	addi	s6,s6,1
     7f4:	04090703          	lb	a4,64(s2)
     7f8:	0100                	addi	s0,sp,128
     7fa:	1005                	c.nop	-31
     7fc:	0200                	addi	s0,sp,256
     7fe:	0104                	addi	s1,sp,128
        ri_2[i] = polyR[i];
     800:	0306                	slli	t1,t1,0x1
     802:	0900                	addi	s0,sp,144
     804:	0002                	c.slli64	zero
     806:	0501                	addi	a0,a0,0
     808:	0005                	c.nop	1
     80a:	0402                	c.slli64	s0
    for (i = 0; i < size; ++i) {
     80c:	0601                	addi	a2,a2,0
        ri_2[i] = polyR[i];
     80e:	00090003          	lb	zero,0(s2)
        ri_1[i] = polyf[i];
     812:	0100                	addi	s0,sp,128
     814:	0b05                	addi	s6,s6,1
     816:	04090503          	lb	a0,64(s2)
     81a:	0100                	addi	s0,sp,128
     81c:	1005                	c.nop	-31
     81e:	0200                	addi	s0,sp,256
     820:	0104                	addi	s1,sp,128
        ti_2[i] = 0;
     822:	0306                	slli	t1,t1,0x1
     824:	0900                	addi	s0,sp,144
     826:	0002                	c.slli64	zero
     828:	0501                	addi	a0,a0,0
        ti_1[i] = 0;
     82a:	0005                	c.nop	1
     82c:	0402                	c.slli64	s0
     82e:	0601                	addi	a2,a2,0
     830:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size; ++i) {
     834:	0100                	addi	s0,sp,128
            ri[i - (N + 1)] = res[i];
     836:	0306                	slli	t1,t1,0x1
     838:	0906                	slli	s2,s2,0x1
     83a:	0004                	0x4
     83c:	0501                	addi	a0,a0,0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     83e:	00030607          	0x30607
            ri[i - (N + 1)] = res[i];
     842:	0009                	c.nop	2
     844:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     846:	1d05                	addi	s10,s10,-31
            temp[i] = ri_2[i] - ri[i];
     848:	0200                	addi	s0,sp,256
     84a:	0104                	addi	s1,sp,128
     84c:	0306                	slli	t1,t1,0x1
     84e:	0908                	addi	a0,sp,144
     850:	0010                	0x10
     852:	0501                	addi	a0,a0,0
     854:	0009                	c.nop	2
     856:	0402                	c.slli64	s0
        for (i = 0; i < N + 1; ++i) {
     858:	0601                	addi	a2,a2,0
            temp[i] = ri_2[i] - ri[i];
     85a:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     85e:	0100                	addi	s0,sp,128
     860:	1405                	addi	s0,s0,-31
            qi_1[i] = res1[i];
     862:	04090103          	lb	sp,64(s2)
     866:	0100                	addi	s0,sp,128
     868:	0d05                	addi	s10,s10,1
     86a:	0200                	addi	s0,sp,256
     86c:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     86e:	0306                	slli	t1,t1,0x1
            qi_1[i] = res1[i];
     870:	00040967          	jalr	s2,s0 # 0 <__DYNAMIC>
            temp[i] = res2[i];
     874:	0501                	addi	a0,a0,0
     876:	0019                	c.nop	6
     878:	0402                	c.slli64	s0
     87a:	01030603          	lb	a2,16(t1)
     87e:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     880:	0100                	addi	s0,sp,128
            temp[i] = res2[i];
     882:	1805                	addi	a6,a6,-31
        for (i = 0; i < N + 1; ++i) {
     884:	0200                	addi	s0,sp,256
            ti[i] = ti_2[i] - temp[i];
     886:	0304                	addi	s1,sp,384
     888:	06097f03          	0x6097f03
     88c:	0100                	addi	s0,sp,128
     88e:	0d05                	addi	s10,s10,1
     890:	0200                	addi	s0,sp,256
     892:	0304                	addi	s1,sp,384
     894:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     896:	0901                	addi	s2,s2,0
            ti[i] = ti_2[i] - temp[i];
     898:	0004                	0x4
     89a:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     89c:	0019                	c.nop	6
     89e:	0402                	c.slli64	s0
            ri_2[i] = ri_1[i];
     8a0:	00030603          	lb	a2,0(t1)
     8a4:	0009                	c.nop	2
     8a6:	0100                	addi	s0,sp,128
     8a8:	2c05                	jal	ad8 <generate_keys+0x1d4>
        for (i = 0; i < N + 1; ++i) {
     8aa:	0200                	addi	s0,sp,256
            ri_2[i] = ri_1[i];
     8ac:	0304                	addi	s1,sp,384
            ri_1[i] = ri[i];
     8ae:	0306                	slli	t1,t1,0x1
     8b0:	097e                	slli	s2,s2,0x1f
     8b2:	0004                	0x4
            ti_2[i] = ti_1[i];
     8b4:	0501                	addi	a0,a0,0
     8b6:	0014                	0x14
            ri_1[i] = ri[i];
     8b8:	0402                	c.slli64	s0
            ti_2[i] = ti_1[i];
     8ba:	0301                	addi	t1,t1,0
     8bc:	0900                	addi	s0,sp,144
     8be:	0004                	0x4
     8c0:	0501                	addi	a0,a0,0
            controlR += ri[i];
     8c2:	0009                	c.nop	2
            ti_2[i] = ti_1[i];
     8c4:	0402                	c.slli64	s0
     8c6:	0601                	addi	a2,a2,0
            ti_1[i] = ti[i];
     8c8:	00090003          	lb	zero,0(s2)
     8cc:	0100                	addi	s0,sp,128
     8ce:	1d05                	addi	s10,s10,-31
            qi_1[i] = 0;
     8d0:	0200                	addi	s0,sp,256
     8d2:	0204                	addi	s1,sp,256
     8d4:	0306                	slli	t1,t1,0x1
     8d6:	097f                	0x97f
        for (i = 0; i < N + 1; ++i) {
     8d8:	0004                	0x4
     8da:	0501                	addi	a0,a0,0
            if (((ri_2[0] * j) % mod) == 1)
     8dc:	0103060f          	0x103060f
     8e0:	0809                	addi	a6,a6,2
     8e2:	0100                	addi	s0,sp,128
     8e4:	0905                	addi	s2,s2,1
     8e6:	0200                	addi	s0,sp,256
     8e8:	0304                	addi	s1,sp,384
     8ea:	0306                	slli	t1,t1,0x1
        for (j = 0; j < mod; ++j) {
     8ec:	00040907          	0x40907
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8f0:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     8f2:	0011                	c.nop	4
     8f4:	0402                	c.slli64	s0
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8f6:	00030603          	lb	a2,0(t1)
     8fa:	0409                	addi	s0,s0,2
     8fc:	0100                	addi	s0,sp,128
     8fe:	1405                	addi	s0,s0,-31
     900:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     902:	0304                	addi	s1,sp,384
int* generate_keys(int N, int p, int q){
     904:	04090003          	lb	zero,64(s2)
     908:	0100                	addi	s0,sp,128
     90a:	1105                	addi	sp,sp,-31
     90c:	0200                	addi	s0,sp,256
     90e:	0304                	addi	s1,sp,384
     910:	02090003          	lb	zero,32(s2)
     914:	0100                	addi	s0,sp,128
     916:	1c05                	addi	s8,s8,-31
     918:	0200                	addi	s0,sp,256
     91a:	0304                	addi	s1,sp,384
     91c:	04097f03          	0x4097f03
     920:	0100                	addi	s0,sp,128
     922:	1105                	addi	sp,sp,-31
     924:	0200                	addi	s0,sp,256
     926:	0304                	addi	s1,sp,384
     928:	02090103          	lb	sp,32(s2)
     92c:	0100                	addi	s0,sp,128
     92e:	1c05                	addi	s8,s8,-31
     930:	0200                	addi	s0,sp,256
     932:	0304                	addi	s1,sp,384
     934:	0306                	slli	t1,t1,0x1
     936:	097f                	0x97f
     938:	0004                	0x4
     93a:	0501                	addi	a0,a0,0
     93c:	0009                	c.nop	2
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     93e:	0402                	c.slli64	s0
     940:	09060303          	lb	t1,144(a2)
     944:	0002                	c.slli64	zero
     946:	0501                	addi	a0,a0,0
     948:	0011                	c.nop	4
     94a:	0402                	c.slli64	s0
     94c:	00030603          	lb	a2,0(t1)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     950:	0409                	addi	s0,s0,2
     952:	0100                	addi	s0,sp,128
     954:	1405                	addi	s0,s0,-31
     956:	0200                	addi	s0,sp,256
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     958:	0304                	addi	s1,sp,384
     95a:	04090003          	lb	zero,64(s2)
     95e:	0100                	addi	s0,sp,128
     960:	1105                	addi	sp,sp,-31
     962:	0200                	addi	s0,sp,256
     964:	0304                	addi	s1,sp,384
     966:	02090003          	lb	zero,32(s2)
     96a:	0100                	addi	s0,sp,128
     96c:	1c05                	addi	s8,s8,-31
     96e:	0200                	addi	s0,sp,256
     970:	0304                	addi	s1,sp,384
     972:	04097f03          	0x4097f03
     976:	0100                	addi	s0,sp,128
     978:	1105                	addi	sp,sp,-31
     97a:	0200                	addi	s0,sp,256
     97c:	0304                	addi	s1,sp,384
     97e:	02090103          	lb	sp,32(s2)
     982:	0100                	addi	s0,sp,128
     984:	1c05                	addi	s8,s8,-31
     986:	0200                	addi	s0,sp,256
     988:	0304                	addi	s1,sp,384
     98a:	0306                	slli	t1,t1,0x1
     98c:	097f                	0x97f
     98e:	0004                	0x4
     990:	0501                	addi	a0,a0,0
     992:	0011                	c.nop	4
     994:	0402                	c.slli64	s0
     996:	09090303          	lb	t1,144(s2)
     99a:	0002                	c.slli64	zero
     99c:	0501                	addi	a0,a0,0
     99e:	0025                	c.nop	9
     9a0:	0402                	c.slli64	s0
     9a2:	00030603          	lb	a2,0(t1)
     9a6:	0409                	addi	s0,s0,2
     9a8:	0100                	addi	s0,sp,128
     9aa:	2b05                	jal	eda <memset+0x3e>
     9ac:	0200                	addi	s0,sp,256
     9ae:	0304                	addi	s1,sp,384
     9b0:	04090003          	lb	zero,64(s2)
     9b4:	0100                	addi	s0,sp,128
     9b6:	2e05                	jal	ce6 <ntru_deceypt+0x66>
     9b8:	0200                	addi	s0,sp,256
     9ba:	0304                	addi	s1,sp,384
     9bc:	02090003          	lb	zero,32(s2)
     9c0:	0100                	addi	s0,sp,128
     9c2:	2a05                	jal	af2 <generate_keys+0x1ee>
    int polyR[N+1];
     9c4:	0200                	addi	s0,sp,256
     9c6:	0304                	addi	s1,sp,384
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9c8:	06097f03          	0x6097f03
    int polyR[N+1];
     9cc:	0100                	addi	s0,sp,128
     9ce:	2e05                	jal	cfe <ntru_deceypt+0x7e>
     9d0:	0200                	addi	s0,sp,256
     9d2:	0304                	addi	s1,sp,384
     9d4:	02090103          	lb	sp,32(s2)
    polyR[N] = 1;
     9d8:	0100                	addi	s0,sp,128
     9da:	2505                	jal	ffa <main+0xb6>
     9dc:	0200                	addi	s0,sp,256
     9de:	0304                	addi	s1,sp,384
     9e0:	04090003          	lb	zero,64(s2)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9e4:	0100                	addi	s0,sp,128
     9e6:	2805                	jal	a16 <generate_keys+0x112>
     9e8:	0200                	addi	s0,sp,256
     9ea:	0304                	addi	s1,sp,384
     9ec:	0306                	slli	t1,t1,0x1
     9ee:	097f                	0x97f
     9f0:	0002                	c.slli64	zero
     9f2:	0501                	addi	a0,a0,0
     9f4:	0020                	addi	s0,sp,8
     9f6:	0402                	c.slli64	s0
     9f8:	0301                	addi	t1,t1,0
     9fa:	0900                	addi	s0,sp,144
     9fc:	0000                	unimp
     9fe:	0501                	addi	a0,a0,0
     a00:	000d                	c.nop	3
     a02:	0402                	c.slli64	s0
     a04:	0601                	addi	a2,a2,0
     a06:	00090003          	lb	zero,0(s2)
     a0a:	0100                	addi	s0,sp,128
     a0c:	2505                	jal	102c <main+0xe8>
     a0e:	0200                	addi	s0,sp,256
     a10:	0204                	addi	s1,sp,256
     a12:	0306                	slli	t1,t1,0x1
     a14:	097f                	0x97f
     a16:	0004                	0x4
     a18:	0501                	addi	a0,a0,0
     a1a:	04020027          	0x4020027
     a1e:	0602                	c.slli64	a2
     a20:	00090003          	lb	zero,0(s2)
     a24:	0100                	addi	s0,sp,128
     a26:	1d05                	addi	s10,s10,-31
     a28:	0200                	addi	s0,sp,256
     a2a:	0104                	addi	s1,sp,128
     a2c:	0306                	slli	t1,t1,0x1
     a2e:	0900                	addi	s0,sp,144
     a30:	0006                	c.slli	zero,0x1
     a32:	0501                	addi	a0,a0,0
     a34:	0009                	c.nop	2
     a36:	0402                	c.slli64	s0
     a38:	0601                	addi	a2,a2,0
     a3a:	00090003          	lb	zero,0(s2)
     a3e:	0100                	addi	s0,sp,128
     a40:	1405                	addi	s0,s0,-31
     a42:	04090803          	lb	a6,64(s2)
    polyR[0] = -1;
     a46:	0100                	addi	s0,sp,128
     a48:	0a05                	addi	s4,s4,1
    for(i = 1; i < N; ++i){
     a4a:	02090903          	lb	s2,32(s2)
     a4e:	0100                	addi	s0,sp,128
     a50:	1405                	addi	s0,s0,-31
    for (i = N; i < 55; ++i ){
     a52:	0200                	addi	s0,sp,256
     a54:	0104                	addi	s1,sp,128
     a56:	0306                	slli	t1,t1,0x1
     a58:	097f                	0x97f
    for(i = 0; i < N; ++i){
     a5a:	0008                	0x8
        random_keys[i] = f[i];
     a5c:	0501                	addi	a0,a0,0
     a5e:	0009                	c.nop	2
     a60:	0402                	c.slli64	s0
     a62:	0601                	addi	a2,a2,0
    for(i = 0; i < N; ++i){
     a64:	00090003          	lb	zero,0(s2)
     a68:	0100                	addi	s0,sp,128
     a6a:	0505                	addi	a0,a0,1
    for(i = N; i < (2*N); ++i){
     a6c:	0306                	slli	t1,t1,0x1
     a6e:	0906                	slli	s2,s2,0x1
     a70:	0004                	0x4
     a72:	0301                	addi	t1,t1,0
        random_keys[i] = g[i-N];
     a74:	0902                	c.slli64	s2
     a76:	0000                	unimp
     a78:	0501                	addi	a0,a0,0
     a7a:	0601                	addi	a2,a2,0
    for(i = N; i < (2*N); ++i){
     a7c:	00090103          	lb	sp,0(s2)
    for(i = (2*N); i < (3*N); ++i){
     a80:	0100                	addi	s0,sp,128
     a82:	1405                	addi	s0,s0,-31
     a84:	20096803          	0x20096803
    fp = ext_euclid(polyR, f, (N+1), p);
     a88:	0100                	addi	s0,sp,128
     a8a:	1105                	addi	sp,sp,-31
     a8c:	0200                	addi	s0,sp,256
     a8e:	0304                	addi	s1,sp,384
     a90:	0306                	slli	t1,t1,0x1
    for(i = (2*N); i < (3*N); ++i){
     a92:	0908                	addi	a0,sp,144
        random_keys[i] = fp[i-(2*N)];
     a94:	0004                	0x4
     a96:	0501                	addi	a0,a0,0
     a98:	0029                	c.nop	10
     a9a:	0402                	c.slli64	s0
    for(i = (2*N); i < (3*N); ++i){
     a9c:	00030603          	lb	a2,0(t1)
    fq = ext_euclid(polyR, f, (N+1), q);
     aa0:	0409                	addi	s0,s0,2
     aa2:	0100                	addi	s0,sp,128
     aa4:	2f05                	jal	11d4 <__DTOR_END__+0xe4>
     aa6:	0200                	addi	s0,sp,256
     aa8:	0304                	addi	s1,sp,384
     aaa:	04090003          	lb	zero,64(s2)
    for(i = (3*N); i < (4*N); ++i){
     aae:	0100                	addi	s0,sp,128
     ab0:	3205                	jal	3d0 <polymult2+0x152>
     ab2:	0200                	addi	s0,sp,256
        random_keys[i] = fq[i-(3*N)];
     ab4:	0304                	addi	s1,sp,384
     ab6:	02090003          	lb	zero,32(s2)
     aba:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     abc:	2a05                	jal	bec <generate_keys+0x2e8>
     abe:	0200                	addi	s0,sp,256
    fg = polymult2(fq, N, g, N, 0);
     ac0:	0304                	addi	s1,sp,384
     ac2:	06097f03          	0x6097f03
     ac6:	0100                	addi	s0,sp,128
     ac8:	3205                	jal	3e8 <polydiv+0x4>
     aca:	0200                	addi	s0,sp,256
    for(i = 0; i < (2*N-1); ++i){
     acc:	0304                	addi	s1,sp,384
     ace:	02090103          	lb	sp,32(s2)
     ad2:	0100                	addi	s0,sp,128
     ad4:	2905                	jal	f04 <memset+0x68>
     ad6:	0200                	addi	s0,sp,256
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ad8:	0304                	addi	s1,sp,384
     ada:	04090003          	lb	zero,64(s2)
     ade:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     ae0:	2805                	jal	b10 <generate_keys+0x20c>
     ae2:	0200                	addi	s0,sp,256
     ae4:	0304                	addi	s1,sp,384
     ae6:	0306                	slli	t1,t1,0x1
     ae8:	097f                	0x97f
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     aea:	0004                	0x4
     aec:	0501                	addi	a0,a0,0
     aee:	0020                	addi	s0,sp,8
     af0:	0402                	c.slli64	s0
    for(i = (4*N); i < (5*N); ++i){
     af2:	0301                	addi	t1,t1,0
     af4:	0900                	addi	s0,sp,144
     af6:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     af8:	0501                	addi	a0,a0,0
     afa:	000d                	c.nop	3
        random_keys[i] = polyR[i-(5*N)];
     afc:	0402                	c.slli64	s0
     afe:	0601                	addi	a2,a2,0
     b00:	00090003          	lb	zero,0(s2)
    for(i = (5*N); i < (6*N+1); ++i){
     b04:	0100                	addi	s0,sp,128
     b06:	2505                	jal	1126 <__DTOR_END__+0x36>
     b08:	0200                	addi	s0,sp,256
     b0a:	0204                	addi	s1,sp,256
     b0c:	0306                	slli	t1,t1,0x1
     b0e:	097f                	0x97f
}
     b10:	0004                	0x4
     b12:	0501                	addi	a0,a0,0
     b14:	04020027          	0x4020027
     b18:	0602                	c.slli64	a2
     b1a:	00090003          	lb	zero,0(s2)
     b1e:	0100                	addi	s0,sp,128
     b20:	0a05                	addi	s4,s4,1
     b22:	0200                	addi	s0,sp,256
     b24:	0304                	addi	s1,sp,384
     b26:	0306                	slli	t1,t1,0x1
     b28:	090a                	slli	s2,s2,0x2
     b2a:	0008                	0x8
     b2c:	0501                	addi	a0,a0,0
     b2e:	0020                	addi	s0,sp,8
     b30:	0402                	c.slli64	s0
     b32:	097f0303          	lb	t1,151(t5)
     b36:	0008                	0x8
     b38:	0501                	addi	a0,a0,0
     b3a:	090b0343          	fmadd.s	ft6,fs6,fa6,ft1,rne
     b3e:	0006                	c.slli	zero,0x1
     b40:	0501                	addi	a0,a0,0
     b42:	0305                	addi	t1,t1,1
     b44:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
     b48:	0301                	addi	t1,t1,0
     b4a:	0901                	addi	s2,s2,0
     b4c:	0000                	unimp
     b4e:	0301                	addi	t1,t1,0
        polyR[i] = 0;
     b50:	0902                	c.slli64	s2
     b52:	0000                	unimp
     b54:	0501                	addi	a0,a0,0
     b56:	0609                	addi	a2,a2,2
     b58:	00090003          	lb	zero,0(s2)
    for(i = 1; i < N; ++i){
     b5c:	0100                	addi	s0,sp,128
        f[i] = 0;
     b5e:	4305                	li	t1,1
     b60:	04097a03          	0x4097a03
     b64:	0100                	addi	s0,sp,128
     b66:	0905                	addi	s2,s2,1
     b68:	02090603          	lb	a2,32(s2)
        g[i] = 0;
     b6c:	0100                	addi	s0,sp,128
     b6e:	4305                	li	t1,1
     b70:	04097a03          	0x4097a03
     b74:	0100                	addi	s0,sp,128
    for (i = N; i < 55; ++i ){
     b76:	0905                	addi	s2,s2,1
     b78:	1c090603          	lb	a2,448(s2)
        random_keys[i] = f[i];
     b7c:	0100                	addi	s0,sp,128
     b7e:	06090103          	lb	sp,96(s2)
     b82:	0100                	addi	s0,sp,128
     b84:	06090203          	lb	tp,96(s2)
     b88:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     b8a:	04090103          	lb	sp,64(s2)
     b8e:	0100                	addi	s0,sp,128
        random_keys[i] = g[i-N];
     b90:	08097f03          	0x8097f03
     b94:	0100                	addi	s0,sp,128
     b96:	02090103          	lb	sp,32(s2)
    for(i = N; i < (2*N); ++i){
     b9a:	0100                	addi	s0,sp,128
     b9c:	4305                	li	t1,1
     b9e:	04097603          	0x4097603
        random_keys[i] = fp[i-(2*N)];
     ba2:	0100                	addi	s0,sp,128
     ba4:	0905                	addi	s2,s2,1
     ba6:	08090603          	lb	a2,128(s2)
    for(i = (2*N); i < (3*N); ++i){
     baa:	0100                	addi	s0,sp,128
     bac:	0505                	addi	a0,a0,1
     bae:	0306                	slli	t1,t1,0x1
        random_keys[i] = fq[i-(3*N)];
     bb0:	0901                	addi	s2,s2,0
     bb2:	0004                	0x4
     bb4:	0301                	addi	t1,t1,0
     bb6:	0901                	addi	s2,s2,0
     bb8:	0000                	unimp
     bba:	0301                	addi	t1,t1,0
     bbc:	0901                	addi	s2,s2,0
    for(i = (3*N); i < (4*N); ++i){
     bbe:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     bc0:	0301                	addi	t1,t1,0
    for(i = (3*N); i < (4*N); ++i){
     bc2:	0901                	addi	s2,s2,0
        fg[i] = fg[i]*p;
     bc4:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     bc6:	0501                	addi	a0,a0,0
     bc8:	0609                	addi	a2,a2,2
        fg[i] = fg[i]*p;
     bca:	00090003          	lb	zero,0(s2)
     bce:	0100                	addi	s0,sp,128
     bd0:	0505                	addi	a0,a0,1
    for(i = 0; i < (2*N-1); ++i){
     bd2:	0306                	slli	t1,t1,0x1
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bd4:	0904                	addi	s1,sp,144
     bd6:	0006                	c.slli	zero,0x1
     bd8:	0501                	addi	a0,a0,0
     bda:	060c                	addi	a1,sp,768
     bdc:	00090003          	lb	zero,0(s2)
    for(i = (4*N); i < (5*N); ++i){
     be0:	0100                	addi	s0,sp,128
     be2:	1105                	addi	sp,sp,-31
        random_keys[i] = polyR[i-(5*N)];
     be4:	0200                	addi	s0,sp,256
     be6:	0104                	addi	s1,sp,128
     be8:	0306                	slli	t1,t1,0x1
     bea:	0900                	addi	s0,sp,144
     bec:	0002                	c.slli64	zero
     bee:	0501                	addi	a0,a0,0
     bf0:	0005                	c.nop	1
    for(i = (5*N); i < (6*N+1); ++i){
     bf2:	0402                	c.slli64	s0
        random_keys[i] = polyR[i-(5*N)];
     bf4:	0601                	addi	a2,a2,0
    for(i = (5*N); i < (6*N+1); ++i){
     bf6:	00090003          	lb	zero,0(s2)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bfa:	0100                	addi	s0,sp,128
     bfc:	0306                	slli	t1,t1,0x1
     bfe:	0904                	addi	s1,sp,144
     c00:	0004                	0x4
     c02:	0501                	addi	a0,a0,0
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c04:	00030607          	0x30607
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c08:	0009                	c.nop	2
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c0a:	0100                	addi	s0,sp,128
     c0c:	0905                	addi	s2,s2,1
     c0e:	0306                	slli	t1,t1,0x1
     c10:	0901                	addi	s2,s2,0
     c12:	0008                	0x8
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c14:	0301                	addi	t1,t1,0
     c16:	0901                	addi	s2,s2,0
     c18:	000a                	c.slli	zero,0x2
     c1a:	0501                	addi	a0,a0,0
     c1c:	030e                	slli	t1,t1,0x3
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1e:	0900                	addi	s0,sp,144
    temp = polymult(public_key,N,random_val,48,q,0);
     c20:	0000                	unimp
     c22:	0501                	addi	a0,a0,0
     c24:	00030617          	auipc	a2,0x30
     c28:	0009                	c.nop	2
     c2a:	0100                	addi	s0,sp,128
     c2c:	0e05                	addi	t3,t3,1
     c2e:	04090003          	lb	zero,64(s2)
	array_add(temp,message,48);
     c32:	0100                	addi	s0,sp,128
     c34:	0905                	addi	s2,s2,1
     c36:	0306                	slli	t1,t1,0x1
    temp = polymult(public_key,N,random_val,48,q,0);
     c38:	00040903          	lb	s2,0(s0)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c3c:	0501                	addi	a0,a0,0
	array_add(temp,message,48);
     c3e:	0635                	addi	a2,a2,13
     c40:	00090003          	lb	zero,0(s2)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c44:	0100                	addi	s0,sp,128
     c46:	1e05                	addi	t3,t3,-31
     c48:	04090003          	lb	zero,64(s2)
     c4c:	0100                	addi	s0,sp,128
     c4e:	0c05                	addi	s8,s8,1
     c50:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     c52:	0104                	addi	s1,sp,128
     c54:	04097703          	0x4097703
     c58:	0100                	addi	s0,sp,128
     c5a:	1105                	addi	sp,sp,-31
     c5c:	0200                	addi	s0,sp,256
}
     c5e:	0104                	addi	s1,sp,128
     c60:	0306                	slli	t1,t1,0x1
     c62:	0911                	addi	s2,s2,4
     c64:	0002                	c.slli64	zero
     c66:	0501                	addi	a0,a0,0
     c68:	0005                	c.nop	1
     c6a:	0402                	c.slli64	s0
     c6c:	0601                	addi	a2,a2,0
        CT[i-(2*N)] = CT[i];
     c6e:	00090003          	lb	zero,0(s2)
     c72:	0100                	addi	s0,sp,128
     c74:	0205                	addi	tp,tp,1
    for(i = (2*N); i < (3*N); ++i){
     c76:	0306                	slli	t1,t1,0x1
     c78:	0904                	addi	s1,sp,144
        CT[i-(2*N)] = CT[i];
     c7a:	0004                	0x4
     c7c:	0501                	addi	a0,a0,0
    for(i = (2*N); i < (3*N); ++i){
     c7e:	0305                	addi	t1,t1,1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c80:	0902                	c.slli64	s2
     c82:	0008                	0x8
     c84:	0501                	addi	a0,a0,0
     c86:	060c                	addi	a1,sp,768
    for(i = (2*N); i < ((2*N)+N); ++i){
     c88:	00090003          	lb	zero,0(s2)
     c8c:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c8e:	1105                	addi	sp,sp,-31
     c90:	0200                	addi	s0,sp,256
     c92:	0104                	addi	s1,sp,128
     c94:	0306                	slli	t1,t1,0x1
     c96:	0900                	addi	s0,sp,144
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c98:	0002                	c.slli64	zero
     c9a:	0501                	addi	a0,a0,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c9c:	0005                	c.nop	1
     c9e:	0402                	c.slli64	s0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ca0:	0601                	addi	a2,a2,0
     ca2:	00090003          	lb	zero,0(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca6:	0100                	addi	s0,sp,128
     ca8:	1805                	addi	a6,a6,-31
     caa:	0200                	addi	s0,sp,256
     cac:	0104                	addi	s1,sp,128
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cae:	0306                	slli	t1,t1,0x1
     cb0:	0906                	slli	s2,s2,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cb2:	0004                	0x4
     cb4:	0501                	addi	a0,a0,0
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cb6:	0005                	c.nop	1
     cb8:	0402                	c.slli64	s0
     cba:	0601                	addi	a2,a2,0
     cbc:	08090003          	lb	zero,128(s2)
     cc0:	0100                	addi	s0,sp,128
     cc2:	0c05                	addi	s8,s8,1
     cc4:	0200                	addi	s0,sp,256
     cc6:	0104                	addi	s1,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     cc8:	04097a03          	0x4097a03
     ccc:	0100                	addi	s0,sp,128
     cce:	0200                	addi	s0,sp,256
     cd0:	0104                	addi	s1,sp,128
        if(a2[i] <= q/2)
     cd2:	04090f03          	lb	t5,64(s2)
     cd6:	0100                	addi	s0,sp,128
    for (i = 0; i < N; ++i){
     cd8:	1105                	addi	sp,sp,-31
     cda:	0200                	addi	s0,sp,256
     cdc:	0104                	addi	s1,sp,128
    c = polymult2(secret_key_fp,N,a2,N,0);
     cde:	0306                	slli	t1,t1,0x1
     ce0:	097f                	0x97f
     ce2:	0002                	c.slli64	zero
     ce4:	0501                	addi	a0,a0,0
     ce6:	0005                	c.nop	1
     ce8:	0402                	c.slli64	s0
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cea:	0601                	addi	a2,a2,0
     cec:	00090003          	lb	zero,0(s2)
     cf0:	0100                	addi	s0,sp,128
     cf2:	0905                	addi	s2,s2,1
     cf4:	0200                	addi	s0,sp,256
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf6:	0304                	addi	s1,sp,384
     cf8:	0306                	slli	t1,t1,0x1
     cfa:	095c                	addi	a5,sp,148
}
     cfc:	0008                	0x8
     cfe:	0501                	addi	a0,a0,0
     d00:	0015                	c.nop	5
     d02:	0402                	c.slli64	s0
     d04:	00030603          	lb	a2,0(t1)
     d08:	0409                	addi	s0,s0,2
     d0a:	0100                	addi	s0,sp,128
     d0c:	1a05                	addi	s4,s4,-31
     d0e:	0200                	addi	s0,sp,256
     d10:	0304                	addi	s1,sp,384
        a2[i-(2*N)] = a2[i];
     d12:	04090003          	lb	zero,64(s2)
     d16:	0100                	addi	s0,sp,128
     d18:	1505                	addi	a0,a0,-31
    for(i = (2*N); i < ((2*N)+N); ++i){
     d1a:	0200                	addi	s0,sp,256
     d1c:	0304                	addi	s1,sp,384
        a2[i-(2*N)] = a2[i];
     d1e:	02090003          	lb	zero,32(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d22:	0100                	addi	s0,sp,128
        if(a2[i] <= q/2)
     d24:	1d05                	addi	s10,s10,-31
     d26:	0200                	addi	s0,sp,256
     d28:	0304                	addi	s1,sp,384
            a2[i] = (-1)*(q-a2[i]);
     d2a:	02097f03          	0x2097f03
     d2e:	0100                	addi	s0,sp,128
    for (i = 0; i < N; ++i){
     d30:	1505                	addi	a0,a0,-31
     d32:	0200                	addi	s0,sp,256
     d34:	0304                	addi	s1,sp,384
        c2[i-(2*N)] = c2[i];
     d36:	02090103          	lb	sp,32(s2)
     d3a:	0100                	addi	s0,sp,128
     d3c:	1d05                	addi	s10,s10,-31
    for(i = (2*N); i < ((2*N)+N); ++i){
     d3e:	0200                	addi	s0,sp,256
     d40:	0304                	addi	s1,sp,384
        c2[i-(2*N)] = c2[i];
     d42:	0306                	slli	t1,t1,0x1
     d44:	097f                	0x97f
    for(i = (2*N); i < ((2*N)+N); ++i){
     d46:	0002                	c.slli64	zero
  jal x0, default_exc_handler
     d48:	0501                	addi	a0,a0,0
     d4a:	030d                	addi	t1,t1,3
  mv  x1, x0
     d4c:	00020907          	0x20907
  mv  x2, x1
     d50:	0501                	addi	a0,a0,0
  mv  x3, x1
     d52:	0638                	addi	a4,sp,776
  mv  x4, x1
     d54:	00090003          	lb	zero,0(s2)
  mv  x6, x1
     d58:	0100                	addi	s0,sp,128
  mv  x7, x1
     d5a:	2205                	jal	e7a <memcpy+0xbc>
  mv  x8, x1
     d5c:	02090003          	lb	zero,32(s2)
  mv x10, x1
     d60:	0100                	addi	s0,sp,128
  mv x11, x1
     d62:	0905                	addi	s2,s2,1
  mv x12, x1
     d64:	0306                	slli	t1,t1,0x1
  mv x13, x1
     d66:	0905                	addi	s2,s2,1
  mv x14, x1
     d68:	0006                	c.slli	zero,0x1
  mv x15, x1
     d6a:	0001                	nop
  mv x16, x1
     d6c:	0402                	c.slli64	s0
  mv x17, x1
     d6e:	09060303          	lb	t1,144(a2) # 30cb4 <_stack_start+0x20cb4>
  mv x19, x1
     d72:	000a                	c.slli	zero,0x2
  mv x20, x1
     d74:	0501                	addi	a0,a0,0
  mv x21, x1
     d76:	04020017          	auipc	zero,0x4020
  mv x23, x1
     d7a:	00030603          	lb	a2,0(t1)
  mv x25, x1
     d7e:	0409                	addi	s0,s0,2
  mv x26, x1
     d80:	0100                	addi	s0,sp,128
  mv x27, x1
     d82:	1e05                	addi	t3,t3,-31
  mv x28, x1
     d84:	0200                	addi	s0,sp,256
  mv x29, x1
     d86:	0304                	addi	s1,sp,384
  mv x30, x1
     d88:	04090003          	lb	zero,64(s2)
  la   x2, _stack_start
     d8c:	0100                	addi	s0,sp,128
     d8e:	1705                	addi	a4,a4,-31
     d90:	0200                	addi	s0,sp,256
     d92:	0304                	addi	s1,sp,384
  la x26, _bss_start
     d94:	02090003          	lb	zero,32(s2)
     d98:	0100                	addi	s0,sp,128
     d9a:	1d05                	addi	s10,s10,-31
  la x27, _bss_end
     d9c:	0200                	addi	s0,sp,256
     d9e:	0304                	addi	s1,sp,384
     da0:	02097f03          	0x2097f03
  bge x26, x27, zero_loop_end
     da4:	0100                	addi	s0,sp,128
     da6:	1705                	addi	a4,a4,-31
  sw x0, 0(x26)
     da8:	0200                	addi	s0,sp,256
     daa:	0304                	addi	s1,sp,384
  addi x26, x26, 4
     dac:	02090103          	lb	sp,32(s2)
  ble x26, x27, zero_loop
     db0:	0100                	addi	s0,sp,128
  addi x10, x0, 0
     db2:	1d05                	addi	s10,s10,-31
     db4:	0200                	addi	s0,sp,256
  addi x11, x0, 0
     db6:	0304                	addi	s1,sp,384
     db8:	0306                	slli	t1,t1,0x1
  jal x1, main
     dba:	097f                	0x97f
     dbc:	0002                	c.slli64	zero
     dbe:	0501                	addi	a0,a0,0
     dc0:	0009                	c.nop	2
     dc2:	0402                	c.slli64	s0
     dc4:	09070303          	lb	t1,144(a4)
     dc8:	0002                	c.slli64	zero
     dca:	0501                	addi	a0,a0,0
     dcc:	000e                	c.slli	zero,0x3
     dce:	0402                	c.slli64	s0
     dd0:	00030603          	lb	a2,0(t1)
     dd4:	0409                	addi	s0,s0,2
     dd6:	0100                	addi	s0,sp,128
     dd8:	0200                	addi	s0,sp,256
     dda:	0304                	addi	s1,sp,384
     ddc:	04090103          	lb	sp,64(s2)
     de0:	0100                	addi	s0,sp,128
     de2:	0200                	addi	s0,sp,256
     de4:	0304                	addi	s1,sp,384
     de6:	02097f03          	0x2097f03
     dea:	0100                	addi	s0,sp,128
     dec:	0905                	addi	s2,s2,1
     dee:	0200                	addi	s0,sp,256
     df0:	0304                	addi	s1,sp,384
     df2:	0306                	slli	t1,t1,0x1
     df4:	0901                	addi	s2,s2,0
     df6:	0004                	0x4
     df8:	0501                	addi	a0,a0,0
     dfa:	000e                	c.slli	zero,0x3
     dfc:	0402                	c.slli64	s0
     dfe:	00030603          	lb	a2,0(t1)
     e02:	0009                	c.nop	2
     e04:	0100                	addi	s0,sp,128
     e06:	1d05                	addi	s10,s10,-31
     e08:	0200                	addi	s0,sp,256
     e0a:	0304                	addi	s1,sp,384
     e0c:	0306                	slli	t1,t1,0x1
     e0e:	097e                	slli	s2,s2,0x1f
     e10:	0004                	0x4
     e12:	0501                	addi	a0,a0,0
     e14:	0309                	addi	t1,t1,2
     e16:	00040907          	0x40907
     e1a:	0501                	addi	a0,a0,0
     e1c:	0003060b          	0x3060b
     e20:	0009                	c.nop	2
     e22:	0100                	addi	s0,sp,128
     e24:	2005                	jal	e44 <memcpy+0x86>
     e26:	0200                	addi	s0,sp,256
     e28:	0204                	addi	s1,sp,256
     e2a:	0306                	slli	t1,t1,0x1
     e2c:	097f                	0x97f
     e2e:	0002                	c.slli64	zero
     e30:	0501                	addi	a0,a0,0
     e32:	0022                	c.slli	zero,0x8
     e34:	0402                	c.slli64	s0
     e36:	0602                	c.slli64	a2
     e38:	00090003          	lb	zero,0(s2)
     e3c:	0100                	addi	s0,sp,128
     e3e:	0905                	addi	s2,s2,1
     e40:	0306                	slli	t1,t1,0x1
     e42:	0909                	addi	s2,s2,2
     e44:	0004                	0x4
     e46:	0501                	addi	a0,a0,0
     e48:	0615                	addi	a2,a2,5
     e4a:	00090003          	lb	zero,0(s2)
     e4e:	0100                	addi	s0,sp,128
     e50:	0c05                	addi	s8,s8,1
     e52:	06090003          	lb	zero,96(s2)
     e56:	0100                	addi	s0,sp,128
     e58:	1a05                	addi	s4,s4,-31
     e5a:	0200                	addi	s0,sp,256
     e5c:	0204                	addi	s1,sp,256
     e5e:	0306                	slli	t1,t1,0x1
     e60:	097f                	0x97f
     e62:	0004                	0x4
     e64:	0501                	addi	a0,a0,0
     e66:	0309                	addi	t1,t1,2
     e68:	00040907          	0x40907
     e6c:	0501                	addi	a0,a0,0
     e6e:	0003060b          	0x3060b
     e72:	0009                	c.nop	2
     e74:	0100                	addi	s0,sp,128
     e76:	2005                	jal	e96 <memcpy+0xd8>
     e78:	0200                	addi	s0,sp,256
     e7a:	0204                	addi	s1,sp,256
     e7c:	0306                	slli	t1,t1,0x1
     e7e:	097f                	0x97f
     e80:	0002                	c.slli64	zero
     e82:	0501                	addi	a0,a0,0
     e84:	0022                	c.slli	zero,0x8
     e86:	0402                	c.slli64	s0
     e88:	0602                	c.slli64	a2
     e8a:	00090003          	lb	zero,0(s2)
     e8e:	0100                	addi	s0,sp,128
     e90:	1805                	addi	a6,a6,-31
     e92:	0200                	addi	s0,sp,256
     e94:	0104                	addi	s1,sp,128
     e96:	0306                	slli	t1,t1,0x1
     e98:	0900                	addi	s0,sp,144
     e9a:	0002                	c.slli64	zero
     e9c:	0501                	addi	a0,a0,0
     e9e:	0005                	c.nop	1
     ea0:	0402                	c.slli64	s0
     ea2:	0601                	addi	a2,a2,0
     ea4:	08090003          	lb	zero,128(s2)
     ea8:	0100                	addi	s0,sp,128
     eaa:	0c05                	addi	s8,s8,1
     eac:	04091103          	lh	sp,64(s2)
     eb0:	0100                	addi	s0,sp,128
     eb2:	0905                	addi	s2,s2,1
     eb4:	0306                	slli	t1,t1,0x1
     eb6:	097e                	slli	s2,s2,0x1f
     eb8:	0006                	c.slli	zero,0x1
     eba:	0501                	addi	a0,a0,0
     ebc:	0616                	slli	a2,a2,0x5
     ebe:	00090003          	lb	zero,0(s2)
     ec2:	0100                	addi	s0,sp,128
     ec4:	0d05                	addi	s10,s10,1
     ec6:	04090003          	lb	zero,64(s2)
     eca:	0100                	addi	s0,sp,128
     ecc:	1305                	addi	t1,t1,-31
     ece:	04090003          	lb	zero,64(s2)
     ed2:	0100                	addi	s0,sp,128
     ed4:	0a05                	addi	s4,s4,1
     ed6:	0306                	slli	t1,t1,0x1
     ed8:	0902                	c.slli64	s2
     eda:	0006                	c.slli	zero,0x1
     edc:	0501                	addi	a0,a0,0
     ede:	060c                	addi	a1,sp,768
     ee0:	00090003          	lb	zero,0(s2)
     ee4:	0100                	addi	s0,sp,128
     ee6:	0d05                	addi	s10,s10,1
     ee8:	0306                	slli	t1,t1,0x1
     eea:	0901                	addi	s2,s2,0
     eec:	0004                	0x4
     eee:	0301                	addi	t1,t1,0
     ef0:	0901                	addi	s2,s2,0
     ef2:	000a                	c.slli	zero,0x2
     ef4:	0501                	addi	a0,a0,0
     ef6:	0312                	slli	t1,t1,0x4
     ef8:	0900                	addi	s0,sp,144
     efa:	0000                	unimp
     efc:	0501                	addi	a0,a0,0
     efe:	0614                	addi	a3,sp,768
     f00:	00090003          	lb	zero,0(s2)
     f04:	0100                	addi	s0,sp,128
     f06:	1205                	addi	tp,tp,-31
     f08:	04090003          	lb	zero,64(s2)
     f0c:	0100                	addi	s0,sp,128
     f0e:	0d05                	addi	s10,s10,1
     f10:	0306                	slli	t1,t1,0x1
     f12:	00040903          	lb	s2,0(s0)
     f16:	0501                	addi	a0,a0,0
     f18:	0003062b          	0x3062b
     f1c:	0009                	c.nop	2
     f1e:	0100                	addi	s0,sp,128
     f20:	1b05                	addi	s6,s6,-31
     f22:	04090003          	lb	zero,64(s2)
     f26:	0100                	addi	s0,sp,128
     f28:	0905                	addi	s2,s2,1
     f2a:	0306                	slli	t1,t1,0x1
     f2c:	00040907          	0x40907
     f30:	0501                	addi	a0,a0,0
     f32:	00030613          	mv	a2,t1
     f36:	0009                	c.nop	2
     f38:	0100                	addi	s0,sp,128
     f3a:	0905                	addi	s2,s2,1
     f3c:	0306                	slli	t1,t1,0x1
     f3e:	0904                	addi	s1,sp,144
     f40:	000e                	c.slli	zero,0x3
     f42:	0501                	addi	a0,a0,0
int main(){
     f44:	0003060b          	0x3060b
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f48:	0409                	addi	s0,s0,2
     f4a:	0100                	addi	s0,sp,128
     f4c:	0d05                	addi	s10,s10,1
     f4e:	0306                	slli	t1,t1,0x1
     f50:	0901                	addi	s2,s2,0
     f52:	0004                	0x4
     f54:	0301                	addi	t1,t1,0
int main(){
     f56:	0901                	addi	s2,s2,0
     f58:	0008                	0x8
     f5a:	0501                	addi	a0,a0,0
     f5c:	0612                	slli	a2,a2,0x4
     f5e:	00090003          	lb	zero,0(s2)
     f62:	0100                	addi	s0,sp,128
     f64:	0306                	slli	t1,t1,0x1
	resultkon[0] = 0xAAAAAAA0;
     f66:	0900                	addi	s0,sp,144
     f68:	0004                	0x4
int main(){
     f6a:	0501                	addi	a0,a0,0
     f6c:	061a                	slli	a2,a2,0x6
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f6e:	00090003          	lb	zero,0(s2)
	resultkon[0] = 0xAAAAAAA0;
     f72:	0100                	addi	s0,sp,128
     f74:	1205                	addi	tp,tp,-31
     f76:	04090003          	lb	zero,64(s2)
     f7a:	0100                	addi	s0,sp,128
     f7c:	0d05                	addi	s10,s10,1
 	*var = resultkon[0];
     f7e:	0306                	slli	t1,t1,0x1
     f80:	00040903          	lb	s2,0(s0)
    keys = generate_keys(N, p, q);
     f84:	0501                	addi	a0,a0,0
 	*var = resultkon[0];
     f86:	00030637          	lui	a2,0x30
     f8a:	0009                	c.nop	2
     f8c:	0100                	addi	s0,sp,128
    keys = generate_keys(N, p, q);
     f8e:	2105                	jal	13ae <_bss_start+0x13a>
     f90:	04090003          	lb	zero,64(s2)
	resultkon[0] = 0xAAAAAAA1;
     f94:	0100                	addi	s0,sp,128
     f96:	1505                	addi	a0,a0,-31
    keys = generate_keys(N, p, q);
     f98:	0200                	addi	s0,sp,256
	resultkon[0] = 0xAAAAAAA1;
     f9a:	0104                	addi	s1,sp,128
 	*var = resultkon[0];
     f9c:	0306                	slli	t1,t1,0x1
    for(i = 0; i < N; ++i){
     f9e:	00080907          	0x80907
 	*var = resultkon[0];
     fa2:	0501                	addi	a0,a0,0
     fa4:	0009                	c.nop	2
     fa6:	0402                	c.slli64	s0
     fa8:	0601                	addi	a2,a2,0
     faa:	00090003          	lb	zero,0(s2)
        secret_key_f[i] = keys[i];
     fae:	0100                	addi	s0,sp,128
     fb0:	0305                	addi	t1,t1,1
     fb2:	0306                	slli	t1,t1,0x1
     fb4:	0905                	addi	s2,s2,1
     fb6:	0004                	0x4
    for(i = 0; i < N; ++i){
     fb8:	0501                	addi	a0,a0,0
     fba:	0605                	addi	a2,a2,1
     fbc:	00090003          	lb	zero,0(s2)
    for(i = N; i < (2*N); ++i){
     fc0:	0100                	addi	s0,sp,128
     fc2:	0d05                	addi	s10,s10,1
     fc4:	0306                	slli	t1,t1,0x1
     fc6:	0901                	addi	s2,s2,0
     fc8:	0004                	0x4
        secret_key_fp[i-(2*N)] = keys[i];
     fca:	0301                	addi	t1,t1,0
     fcc:	0901                	addi	s2,s2,0
     fce:	000a                	c.slli	zero,0x2
     fd0:	0501                	addi	a0,a0,0
     fd2:	0312                	slli	t1,t1,0x4
    for(i = (2*N); i < (3*N); ++i){
     fd4:	0900                	addi	s0,sp,144
     fd6:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     fd8:	0501                	addi	a0,a0,0
     fda:	0003061b          	0x3061b
     fde:	0009                	c.nop	2
     fe0:	0100                	addi	s0,sp,128
     fe2:	1205                	addi	tp,tp,-31
        public_key[i-(4*N)] = keys[i];
     fe4:	04090003          	lb	zero,64(s2)
     fe8:	0100                	addi	s0,sp,128
     fea:	0d05                	addi	s10,s10,1
     fec:	0306                	slli	t1,t1,0x1
    for(i = (4*N); i < (5*N); ++i){
     fee:	00040903          	lb	s2,0(s0)
     ff2:	0501                	addi	a0,a0,0
     ff4:	0639                	addi	a2,a2,14
     ff6:	00090003          	lb	zero,0(s2)
        ring_poly[i-(5*N)] = keys[i];
     ffa:	0100                	addi	s0,sp,128
     ffc:	0d05                	addi	s10,s10,1
     ffe:	04090703          	lb	a4,64(s2)
    1002:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
    1004:	2205                	jal	1124 <__DTOR_END__+0x34>
    1006:	08097903          	0x8097903
	resultkon[0] = 0xBBBBBBB0;
    100a:	0100                	addi	s0,sp,128
    100c:	0605                	addi	a2,a2,1
    100e:	0306                	slli	t1,t1,0x1
    1010:	0906                	slli	s2,s2,0x1
 	*var = resultkon[0];
    1012:	0004                	0x4
    1014:	0501                	addi	a0,a0,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1016:	030d                	addi	t1,t1,3
 	*var = resultkon[0];
    1018:	0901                	addi	s2,s2,0
    101a:	0000                	unimp
    101c:	0301                	addi	t1,t1,0
    101e:	0901                	addi	s2,s2,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1020:	0002                	c.slli64	zero
    1022:	0501                	addi	a0,a0,0
    1024:	0003062b          	0x3062b
	resultkon[0] = 0xBBBBBBB1;
    1028:	0009                	c.nop	2
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    102a:	0100                	addi	s0,sp,128
    102c:	0d05                	addi	s10,s10,1
    102e:	08090703          	lb	a4,128(s2)
	resultkon[0] = 0xBBBBBBB1;
    1032:	0100                	addi	s0,sp,128
 	*var = resultkon[0];
    1034:	2b05                	jal	1564 <product2+0x98>
	resultkon[0] = 0xCCCCCCC0;
    1036:	06097903          	0x6097903
    103a:	0100                	addi	s0,sp,128
    103c:	0d05                	addi	s10,s10,1
 	*var = resultkon[0];
    103e:	02090703          	lb	a4,32(s2)
    1042:	0100                	addi	s0,sp,128
    1044:	1b05                	addi	s6,s6,-31
	resultkon[0] = 0xCCCCCCC0;
    1046:	02097903          	0x2097903
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    104a:	0100                	addi	s0,sp,128
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    104c:	0305                	addi	t1,t1,1
    104e:	0306                	slli	t1,t1,0x1
 	*var = resultkon[0];
    1050:	0906                	slli	s2,s2,0x1
    1052:	0004                	0x4
    1054:	0501                	addi	a0,a0,0
    1056:	030d                	addi	t1,t1,3
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1058:	0901                	addi	s2,s2,0
    105a:	0000                	unimp
    105c:	0301                	addi	t1,t1,0
    105e:	0901                	addi	s2,s2,0
    1060:	0002                	c.slli64	zero
    1062:	0501                	addi	a0,a0,0
    1064:	0312                	slli	t1,t1,0x4
	resultkon[0] = 0xCCCCCCC1;
    1066:	0900                	addi	s0,sp,144
    1068:	0000                	unimp
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    106a:	0501                	addi	a0,a0,0
	resultkon[0] = 0xCCCCCCC1;
    106c:	0614                	addi	a3,sp,768
    106e:	00090003          	lb	zero,0(s2)
            resultkon[0] = 0xDEDEDEDE;
    1072:	0100                	addi	s0,sp,128
    1074:	1205                	addi	tp,tp,-31
    1076:	04090003          	lb	zero,64(s2)
 	*var = resultkon[0];
    107a:	0100                	addi	s0,sp,128
    107c:	0d05                	addi	s10,s10,1
    107e:	0306                	slli	t1,t1,0x1
    1080:	00040903          	lb	s2,0(s0)
    1084:	0501                	addi	a0,a0,0
    for(i = 0; i < 32; ++i){
    1086:	0003062b          	0x3062b
        if(!(message[i] == Dec_Message[i])){
    108a:	0009                	c.nop	2
    108c:	0100                	addi	s0,sp,128
    108e:	1b05                	addi	s6,s6,-31
    1090:	04090003          	lb	zero,64(s2)
    1094:	0100                	addi	s0,sp,128
    1096:	1105                	addi	sp,sp,-31
    1098:	0306                	slli	t1,t1,0x1
            resultkon[0] = 0xBABABABA;
    109a:	094a                	slli	s2,s2,0x12
    109c:	0006                	c.slli	zero,0x1
    109e:	0501                	addi	a0,a0,0
    10a0:	062e                	slli	a2,a2,0xb
    10a2:	00090003          	lb	zero,0(s2)
 	    *var = resultkon[0];
    10a6:	0100                	addi	s0,sp,128
    10a8:	1f05                	addi	t5,t5,-31
    10aa:	02090003          	lb	zero,32(s2)
    10ae:	0100                	addi	s0,sp,128
}
    10b0:	0d05                	addi	s10,s10,1
    10b2:	0306                	slli	t1,t1,0x1
    10b4:	0905                	addi	s2,s2,1
    10b6:	0006                	c.slli	zero,0x1
    10b8:	0501                	addi	a0,a0,0
    10ba:	0311                	addi	t1,t1,4
    10bc:	000a090b          	0xa090b
    10c0:	0501                	addi	a0,a0,0
    10c2:	063a                	slli	a2,a2,0xe
    10c4:	00090003          	lb	zero,0(s2)
    10c8:	0100                	addi	s0,sp,128
    10ca:	2505                	jal	16ea <product2+0x21e>
            resultkon[0] = 0xDEDEDEDE;
    10cc:	02090003          	lb	zero,32(s2)
	    *var = resultkon[0];
    10d0:	0100                	addi	s0,sp,128
    10d2:	0d05                	addi	s10,s10,1
    10d4:	0306                	slli	t1,t1,0x1
    10d6:	0905                	addi	s2,s2,1
    10d8:	0006                	c.slli	zero,0x1
    for(i = 0; i < 32; ++i){
    10da:	0001                	nop
    10dc:	0402                	c.slli64	s0
    10de:	09050303          	lb	t1,144(a0) # fffeb090 <_stack_start+0xfffdb090>
    10e2:	000c                	0xc
    10e4:	0501                	addi	a0,a0,0
    10e6:	0030                	addi	a2,sp,8
    10e8:	0402                	c.slli64	s0
    10ea:	00030603          	lb	a2,0(t1)
    10ee:	0009                	c.nop	2
    10f0:	0100                	addi	s0,sp,128
    10f2:	2705                	jal	1812 <result+0xee>
    10f4:	0200                	addi	s0,sp,256
    10f6:	0304                	addi	s1,sp,384
    10f8:	06090003          	lb	zero,96(s2)
    10fc:	0100                	addi	s0,sp,128
    10fe:	2105                	jal	151e <product2+0x52>
    1100:	0200                	addi	s0,sp,256
    1102:	0304                	addi	s1,sp,384
    1104:	04097f03          	0x4097f03
    1108:	0100                	addi	s0,sp,128
    110a:	2705                	jal	182a <result+0x106>
    110c:	0200                	addi	s0,sp,256
    110e:	0304                	addi	s1,sp,384
    1110:	04090103          	lb	sp,64(s2)
    1114:	0100                	addi	s0,sp,128
    1116:	1905                	addi	s2,s2,-31
    1118:	0200                	addi	s0,sp,256
    111a:	0304                	addi	s1,sp,384
    111c:	02090003          	lb	zero,32(s2)
    1120:	0100                	addi	s0,sp,128
    1122:	2105                	jal	1542 <product2+0x76>
    1124:	0200                	addi	s0,sp,256
    1126:	0304                	addi	s1,sp,384
    1128:	0306                	slli	t1,t1,0x1
    112a:	097f                	0x97f
    112c:	0004                	0x4
    112e:	0501                	addi	a0,a0,0
    1130:	0311                	addi	t1,t1,4
    1132:	0908                	addi	a0,sp,144
    1134:	0002                	c.slli64	zero
    1136:	0501                	addi	a0,a0,0
    1138:	063c                	addi	a5,sp,776
    113a:	00090003          	lb	zero,0(s2)
    113e:	0100                	addi	s0,sp,128
    1140:	2605                	jal	1460 <_bss_start+0x1ec>
    1142:	02090003          	lb	zero,32(s2)
    1146:	0100                	addi	s0,sp,128
    1148:	0d05                	addi	s10,s10,1
    114a:	0306                	slli	t1,t1,0x1
    114c:	0905                	addi	s2,s2,1
    114e:	0006                	c.slli	zero,0x1
    1150:	0501                	addi	a0,a0,0
    1152:	0306                	slli	t1,t1,0x1
    1154:	00080903          	lb	s2,0(a6)
    1158:	0501                	addi	a0,a0,0
    115a:	030d                	addi	t1,t1,3
    115c:	0905                	addi	s2,s2,1
    115e:	0000                	unimp
    1160:	0501                	addi	a0,a0,0
    1162:	09030303          	lb	t1,144(t1)
    1166:	0008                	0x8
    1168:	0501                	addi	a0,a0,0
    116a:	030d                	addi	t1,t1,3
    116c:	0908                	addi	a0,sp,144
    116e:	0000                	unimp
    1170:	0501                	addi	a0,a0,0
    1172:	0309                	addi	t1,t1,2
    1174:	0904                	addi	s1,sp,144
    1176:	0008                	0x8
    1178:	0601                	addi	a2,a2,0
    117a:	097efc03          	0x97efc03
    117e:	0000                	unimp
    1180:	0501                	addi	a0,a0,0
    1182:	001c                	0x1c
    1184:	0402                	c.slli64	s0
    1186:	0601                	addi	a2,a2,0
    1188:	09018403          	lb	s0,144(gp)
    118c:	0002                	c.slli64	zero
    118e:	0501                	addi	a0,a0,0
    1190:	0009                	c.nop	2
    1192:	0402                	c.slli64	s0
    1194:	0601                	addi	a2,a2,0
    1196:	08090003          	lb	zero,128(s2)
    119a:	0100                	addi	s0,sp,128
    119c:	1105                	addi	sp,sp,-31
    119e:	0306                	slli	t1,t1,0x1
    11a0:	00080977          	0x80977
    11a4:	0501                	addi	a0,a0,0
    11a6:	062e                	slli	a2,a2,0xb
    11a8:	00090003          	lb	zero,0(s2)
    11ac:	0100                	addi	s0,sp,128
    11ae:	1f05                	addi	t5,t5,-31
    11b0:	02090003          	lb	zero,32(s2)
    11b4:	0100                	addi	s0,sp,128
    11b6:	0d05                	addi	s10,s10,1
    11b8:	0306                	slli	t1,t1,0x1
    11ba:	090a                	slli	s2,s2,0x2
    11bc:	0006                	c.slli	zero,0x1
    11be:	0501                	addi	a0,a0,0
    11c0:	0003060f          	0x3060f
    11c4:	0009                	c.nop	2
    11c6:	0100                	addi	s0,sp,128
    11c8:	2405                	jal	13e8 <_bss_start+0x174>
    11ca:	0200                	addi	s0,sp,256
    11cc:	0204                	addi	s1,sp,256
    11ce:	0306                	slli	t1,t1,0x1
    11d0:	097f                	0x97f
    11d2:	0002                	c.slli64	zero
    11d4:	0501                	addi	a0,a0,0
    11d6:	0026                	c.slli	zero,0x9
    11d8:	0402                	c.slli64	s0
    11da:	0602                	c.slli64	a2
    11dc:	00090003          	lb	zero,0(s2)
    11e0:	0100                	addi	s0,sp,128
    11e2:	0d05                	addi	s10,s10,1
    11e4:	0200                	addi	s0,sp,256
    11e6:	0304                	addi	s1,sp,384
    11e8:	0306                	slli	t1,t1,0x1
    11ea:	0909                	addi	s2,s2,2
    11ec:	0004                	0x4
    11ee:	0501                	addi	a0,a0,0
    11f0:	0012                	c.slli	zero,0x4
    11f2:	0402                	c.slli64	s0
    11f4:	00030603          	lb	a2,0(t1)
    11f8:	0009                	c.nop	2
    11fa:	0100                	addi	s0,sp,128
    11fc:	2105                	jal	161c <product2+0x150>
    11fe:	0200                	addi	s0,sp,256
    1200:	0304                	addi	s1,sp,384
    1202:	0306                	slli	t1,t1,0x1
    1204:	097f                	0x97f
    1206:	000a                	c.slli	zero,0x2
    1208:	0501                	addi	a0,a0,0
    120a:	0015                	c.nop	5
    120c:	0402                	c.slli64	s0
    120e:	0301                	addi	t1,t1,0
    1210:	0900                	addi	s0,sp,144
    1212:	0002                	c.slli64	zero
    1214:	0501                	addi	a0,a0,0
    1216:	0009                	c.nop	2
    1218:	0402                	c.slli64	s0
    121a:	0601                	addi	a2,a2,0
    121c:	00090003          	lb	zero,0(s2)
    1220:	0100                	addi	s0,sp,128
    1222:	0b05                	addi	s6,s6,1
    1224:	0306                	slli	t1,t1,0x1
    1226:	04097fb3          	0x4097fb3
    122a:	0100                	addi	s0,sp,128
    122c:	0306                	slli	t1,t1,0x1
    122e:	00d4                	addi	a3,sp,68
    1230:	0409                	addi	s0,s0,2
    1232:	0100                	addi	s0,sp,128
    1234:	1305                	addi	t1,t1,-31
    1236:	02090103          	lb	sp,32(s2)
    123a:	0100                	addi	s0,sp,128
    123c:	1005                	c.nop	-31
    123e:	0200                	addi	s0,sp,256
    1240:	0104                	addi	s1,sp,128
    1242:	0306                	slli	t1,t1,0x1
    1244:	097f                	0x97f
    1246:	0008                	0x8
    1248:	0501                	addi	a0,a0,0
    124a:	0005                	c.nop	1
    124c:	0402                	c.slli64	s0
    124e:	0601                	addi	a2,a2,0
    1250:	00090003          	lb	zero,0(s2)
    1254:	0100                	addi	s0,sp,128
    1256:	1b05                	addi	s6,s6,-31
    1258:	04090303          	lb	t1,64(s2)
    125c:	0100                	addi	s0,sp,128
    125e:	1305                	addi	t1,t1,-31
    1260:	04090103          	lb	sp,64(s2)
    1264:	0100                	addi	s0,sp,128
    1266:	1505                	addi	a0,a0,-31
    1268:	0200                	addi	s0,sp,256
    126a:	0104                	addi	s1,sp,128
    126c:	0306                	slli	t1,t1,0x1
    126e:	097f                	0x97f
    1270:	0008                	0x8
    1272:	0501                	addi	a0,a0,0
    1274:	0005                	c.nop	1
    1276:	0402                	c.slli64	s0
    1278:	0601                	addi	a2,a2,0
    127a:	00090003          	lb	zero,0(s2)
    127e:	0100                	addi	s0,sp,128
    1280:	0306                	slli	t1,t1,0x1
    1282:	0904                	addi	s1,sp,144
    1284:	0004                	0x4
    1286:	0301                	addi	t1,t1,0
    1288:	0902                	c.slli64	s2
    128a:	0000                	unimp
    128c:	0501                	addi	a0,a0,0
    128e:	0601                	addi	a2,a2,0
    1290:	00090103          	lb	sp,0(s2)
    1294:	0100                	addi	s0,sp,128
    1296:	0905                	addi	s2,s2,1
    1298:	0200                	addi	s0,sp,256
    129a:	0304                	addi	s1,sp,384
    129c:	0306                	slli	t1,t1,0x1
    129e:	002a0977          	0x2a0977
    12a2:	0501                	addi	a0,a0,0
    12a4:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    12a8:	00030603          	lb	a2,0(t1)
    12ac:	0409                	addi	s0,s0,2
    12ae:	0100                	addi	s0,sp,128
    12b0:	1605                	addi	a2,a2,-31
    12b2:	0200                	addi	s0,sp,256
    12b4:	0304                	addi	s1,sp,384
    12b6:	04090003          	lb	zero,64(s2)
    12ba:	0100                	addi	s0,sp,128
    12bc:	1305                	addi	t1,t1,-31
    12be:	0200                	addi	s0,sp,256
    12c0:	0304                	addi	s1,sp,384
    12c2:	02090003          	lb	zero,32(s2)
    12c6:	0100                	addi	s0,sp,128
    12c8:	1c05                	addi	s8,s8,-31
    12ca:	0200                	addi	s0,sp,256
    12cc:	0304                	addi	s1,sp,384
    12ce:	02097f03          	0x2097f03
    12d2:	0100                	addi	s0,sp,128
    12d4:	1305                	addi	t1,t1,-31
    12d6:	0200                	addi	s0,sp,256
    12d8:	0304                	addi	s1,sp,384
    12da:	02090103          	lb	sp,32(s2)
    12de:	0100                	addi	s0,sp,128
    12e0:	1c05                	addi	s8,s8,-31
    12e2:	0200                	addi	s0,sp,256
    12e4:	0304                	addi	s1,sp,384
    12e6:	0306                	slli	t1,t1,0x1
    12e8:	097f                	0x97f
    12ea:	0002                	c.slli64	zero
    12ec:	0501                	addi	a0,a0,0
    12ee:	0009                	c.nop	2
    12f0:	0402                	c.slli64	s0
    12f2:	09040303          	lb	t1,144(s0)
    12f6:	0002                	c.slli64	zero
    12f8:	0501                	addi	a0,a0,0
    12fa:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    12fe:	00030603          	lb	a2,0(t1)
    1302:	0009                	c.nop	2
    1304:	0100                	addi	s0,sp,128
    1306:	2505                	jal	1926 <result+0x202>
    1308:	0200                	addi	s0,sp,256
    130a:	0304                	addi	s1,sp,384
    130c:	0306                	slli	t1,t1,0x1
    130e:	097f                	0x97f
    1310:	000c                	0xc
    1312:	0501                	addi	a0,a0,0
    1314:	033c                	addi	a5,sp,392
    1316:	090a                	slli	s2,s2,0x2
    1318:	0006                	c.slli	zero,0x1
    131a:	0501                	addi	a0,a0,0
    131c:	0305                	addi	t1,t1,1
    131e:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1322:	0301                	addi	t1,t1,0
    1324:	0901                	addi	s2,s2,0
    1326:	0000                	unimp
    1328:	0301                	addi	t1,t1,0
    132a:	0901                	addi	s2,s2,0
    132c:	0000                	unimp
    132e:	0501                	addi	a0,a0,0
    1330:	0609                	addi	a2,a2,2
    1332:	00090003          	lb	zero,0(s2)
    1336:	0100                	addi	s0,sp,128
    1338:	3c05                	jal	d68 <reset_handler+0x1c>
    133a:	04097b03          	0x4097b03
    133e:	0100                	addi	s0,sp,128
    1340:	0905                	addi	s2,s2,1
    1342:	02090503          	lb	a0,32(s2)
    1346:	0100                	addi	s0,sp,128
    1348:	3c05                	jal	d78 <reset_handler+0x2c>
    134a:	04097b03          	0x4097b03
    134e:	0100                	addi	s0,sp,128
    1350:	0905                	addi	s2,s2,1
    1352:	1c090503          	lb	a0,448(s2)
    1356:	0100                	addi	s0,sp,128
    1358:	06090103          	lb	sp,96(s2)
    135c:	0100                	addi	s0,sp,128
    135e:	06090103          	lb	sp,96(s2)
    1362:	0100                	addi	s0,sp,128
    1364:	06090203          	lb	tp,96(s2)
    1368:	0100                	addi	s0,sp,128
    136a:	06090103          	lb	sp,96(s2)
    136e:	0100                	addi	s0,sp,128
    1370:	06090103          	lb	sp,96(s2)
    1374:	0100                	addi	s0,sp,128
    1376:	06090103          	lb	sp,96(s2)
    137a:	0100                	addi	s0,sp,128
    137c:	3c05                	jal	dac <zero_loop+0x4>
    137e:	04097403          	0x4097403
    1382:	0100                	addi	s0,sp,128
    1384:	0905                	addi	s2,s2,1
    1386:	04090503          	lb	a0,64(s2)
    138a:	0100                	addi	s0,sp,128
    138c:	0505                	addi	a0,a0,1
    138e:	0306                	slli	t1,t1,0x1
    1390:	0901                	addi	s2,s2,0
    1392:	0004                	0x4
    1394:	0301                	addi	t1,t1,0
    1396:	0901                	addi	s2,s2,0
    1398:	0000                	unimp
    139a:	0301                	addi	t1,t1,0
    139c:	0902                	c.slli64	s2
    139e:	0000                	unimp
    13a0:	0301                	addi	t1,t1,0
    13a2:	0901                	addi	s2,s2,0
    13a4:	0000                	unimp
    13a6:	0301                	addi	t1,t1,0
    13a8:	0901                	addi	s2,s2,0
    13aa:	0000                	unimp
    13ac:	0301                	addi	t1,t1,0
    13ae:	0901                	addi	s2,s2,0
    13b0:	0000                	unimp
    13b2:	0501                	addi	a0,a0,0
    13b4:	0609                	addi	a2,a2,2
    13b6:	00090003          	lb	zero,0(s2)
    13ba:	0100                	addi	s0,sp,128
    13bc:	0505                	addi	a0,a0,1
    13be:	0306                	slli	t1,t1,0x1
    13c0:	0901                	addi	s2,s2,0
    13c2:	0002                	c.slli64	zero
    13c4:	0301                	addi	t1,t1,0
    13c6:	0901                	addi	s2,s2,0
    13c8:	0000                	unimp
    13ca:	0301                	addi	t1,t1,0
    13cc:	0901                	addi	s2,s2,0
    13ce:	0000                	unimp
    13d0:	0301                	addi	t1,t1,0
    13d2:	0901                	addi	s2,s2,0
    13d4:	0000                	unimp
    13d6:	0301                	addi	t1,t1,0
    13d8:	0902                	c.slli64	s2
    13da:	0000                	unimp
    13dc:	0301                	addi	t1,t1,0
    13de:	0901                	addi	s2,s2,0
    13e0:	0000                	unimp
    13e2:	0501                	addi	a0,a0,0
    13e4:	060c                	addi	a1,sp,768
    13e6:	02090003          	lb	zero,32(s2)
    13ea:	0100                	addi	s0,sp,128
    13ec:	1105                	addi	sp,sp,-31
    13ee:	02090303          	lb	t1,32(s2)
    13f2:	0100                	addi	s0,sp,128
    13f4:	0200                	addi	s0,sp,256
    13f6:	0104                	addi	s1,sp,128
    13f8:	0306                	slli	t1,t1,0x1
    13fa:	097d                	addi	s2,s2,31
    13fc:	0008                	0x8
    13fe:	0501                	addi	a0,a0,0
    1400:	0005                	c.nop	1
    1402:	0402                	c.slli64	s0
    1404:	0601                	addi	a2,a2,0
    1406:	00090003          	lb	zero,0(s2)
    140a:	0100                	addi	s0,sp,128
    140c:	0306                	slli	t1,t1,0x1
    140e:	090a                	slli	s2,s2,0x2
    1410:	0004                	0x4
    1412:	0501                	addi	a0,a0,0
    1414:	060d                	addi	a2,a2,3
    1416:	00090003          	lb	zero,0(s2)
    141a:	0100                	addi	s0,sp,128
    141c:	0505                	addi	a0,a0,1
    141e:	0306                	slli	t1,t1,0x1
    1420:	00060903          	lb	s2,0(a2) # 30000 <_stack_start+0x20000>
    1424:	0501                	addi	a0,a0,0
    1426:	0900030b          	0x900030b
    142a:	0000                	unimp
    142c:	0501                	addi	a0,a0,0
    142e:	0624                	addi	s1,sp,776
    1430:	00090b03          	lb	s6,0(s2)
    1434:	0100                	addi	s0,sp,128
    1436:	1905                	addi	s2,s2,-31
    1438:	08092303          	lw	t1,128(s2)
    143c:	0100                	addi	s0,sp,128
    143e:	0905                	addi	s2,s2,1
    1440:	0306                	slli	t1,t1,0x1
    1442:	0954                	addi	a3,sp,148
    1444:	0008                	0x8
    1446:	0501                	addi	a0,a0,0
    1448:	0302                	c.slli64	t1
    144a:	0902                	c.slli64	s2
    144c:	0000                	unimp
    144e:	0301                	addi	t1,t1,0
    1450:	00080903          	lb	s2,0(a6)
    1454:	0501                	addi	a0,a0,0
    1456:	0309                	addi	t1,t1,2
    1458:	00080903          	lb	s2,0(a6)
    145c:	0501                	addi	a0,a0,0
    145e:	0003060f          	0x3060f
    1462:	0009                	c.nop	2
    1464:	0100                	addi	s0,sp,128
    1466:	0905                	addi	s2,s2,1
    1468:	0306                	slli	t1,t1,0x1
    146a:	0901                	addi	s2,s2,0
    146c:	000c                	0xc
    146e:	0501                	addi	a0,a0,0
    1470:	0019                	c.nop	6
    1472:	0402                	c.slli64	s0
    1474:	0301                	addi	t1,t1,0
    1476:	0900                	addi	s0,sp,144
    1478:	0004                	0x4
    147a:	0501                	addi	a0,a0,0
    147c:	0009                	c.nop	2
    147e:	0402                	c.slli64	s0
    1480:	0601                	addi	a2,a2,0
    1482:	00090003          	lb	zero,0(s2)
    1486:	0100                	addi	s0,sp,128
    1488:	1005                	c.nop	-31
    148a:	0a090603          	lb	a2,160(s2)
    148e:	0100                	addi	s0,sp,128
    1490:	1505                	addi	a0,a0,-31
    1492:	0200                	addi	s0,sp,256
    1494:	0104                	addi	s1,sp,128
    1496:	0306                	slli	t1,t1,0x1
    1498:	0900                	addi	s0,sp,144
    149a:	0002                	c.slli64	zero
    149c:	0501                	addi	a0,a0,0
    149e:	0009                	c.nop	2
    14a0:	0402                	c.slli64	s0
    14a2:	0601                	addi	a2,a2,0
    14a4:	00090003          	lb	zero,0(s2)
    14a8:	0100                	addi	s0,sp,128
    14aa:	0306                	slli	t1,t1,0x1
    14ac:	0905                	addi	s2,s2,1
    14ae:	0004                	0x4
    14b0:	0301                	addi	t1,t1,0
    14b2:	0902                	c.slli64	s2
    14b4:	0008                	0x8
    14b6:	0501                	addi	a0,a0,0
    14b8:	0610                	addi	a2,sp,768
    14ba:	00090003          	lb	zero,0(s2)
    14be:	0100                	addi	s0,sp,128
    14c0:	0905                	addi	s2,s2,1
    14c2:	0306                	slli	t1,t1,0x1
    14c4:	0901                	addi	s2,s2,0
    14c6:	000c                	0xc
    14c8:	0501                	addi	a0,a0,0
    14ca:	0610                	addi	a2,sp,768
    14cc:	00090003          	lb	zero,0(s2)
    14d0:	0100                	addi	s0,sp,128
    14d2:	1505                	addi	a0,a0,-31
    14d4:	0200                	addi	s0,sp,256
    14d6:	0104                	addi	s1,sp,128
    14d8:	0306                	slli	t1,t1,0x1
    14da:	0900                	addi	s0,sp,144
    14dc:	0002                	c.slli64	zero
    14de:	0501                	addi	a0,a0,0
    14e0:	0009                	c.nop	2
    14e2:	0402                	c.slli64	s0
    14e4:	0601                	addi	a2,a2,0
    14e6:	00090003          	lb	zero,0(s2)
    14ea:	0100                	addi	s0,sp,128
    14ec:	0205                	addi	tp,tp,1
    14ee:	0306                	slli	t1,t1,0x1
    14f0:	0906                	slli	s2,s2,0x1
    14f2:	0004                	0x4
    14f4:	0501                	addi	a0,a0,0
    14f6:	0309                	addi	t1,t1,2
    14f8:	0905                	addi	s2,s2,1
    14fa:	0008                	0x8
    14fc:	0501                	addi	a0,a0,0
    14fe:	0610                	addi	a2,sp,768
    1500:	00090003          	lb	zero,0(s2)
    1504:	0100                	addi	s0,sp,128
    1506:	0905                	addi	s2,s2,1
    1508:	0306                	slli	t1,t1,0x1
    150a:	0901                	addi	s2,s2,0
    150c:	000e                	c.slli	zero,0x3
    150e:	0501                	addi	a0,a0,0
    1510:	0610                	addi	a2,sp,768
    1512:	00090003          	lb	zero,0(s2)
    1516:	0100                	addi	s0,sp,128
    1518:	1505                	addi	a0,a0,-31
    151a:	0200                	addi	s0,sp,256
    151c:	0104                	addi	s1,sp,128
    151e:	0306                	slli	t1,t1,0x1
    1520:	0900                	addi	s0,sp,144
    1522:	0002                	c.slli64	zero
    1524:	0501                	addi	a0,a0,0
    1526:	0009                	c.nop	2
    1528:	0402                	c.slli64	s0
    152a:	0601                	addi	a2,a2,0
    152c:	00090003          	lb	zero,0(s2)
    1530:	0100                	addi	s0,sp,128
    1532:	0205                	addi	tp,tp,1
    1534:	0306                	slli	t1,t1,0x1
    1536:	0905                	addi	s2,s2,1
    1538:	0004                	0x4
    153a:	0501                	addi	a0,a0,0
    153c:	0309                	addi	t1,t1,2
    153e:	00080903          	lb	s2,0(a6)
    1542:	0501                	addi	a0,a0,0
    1544:	0610                	addi	a2,sp,768
    1546:	02090003          	lb	zero,32(s2)
    154a:	0100                	addi	s0,sp,128
    154c:	1505                	addi	a0,a0,-31
    154e:	0200                	addi	s0,sp,256
    1550:	0104                	addi	s1,sp,128
    1552:	0306                	slli	t1,t1,0x1
    1554:	0900                	addi	s0,sp,144
    1556:	0002                	c.slli64	zero
    1558:	0501                	addi	a0,a0,0
    155a:	0009                	c.nop	2
    155c:	0402                	c.slli64	s0
    155e:	0601                	addi	a2,a2,0
    1560:	00090003          	lb	zero,0(s2)
    1564:	0100                	addi	s0,sp,128
    1566:	0306                	slli	t1,t1,0x1
    1568:	0904                	addi	s1,sp,144
    156a:	0004                	0x4
    156c:	0301                	addi	t1,t1,0
    156e:	0904                	addi	s1,sp,144
    1570:	0008                	0x8
    1572:	0501                	addi	a0,a0,0
    1574:	0612                	slli	a2,a2,0x4
    1576:	02094d03          	lbu	s10,32(s2)
    157a:	0100                	addi	s0,sp,128
    157c:	1005                	c.nop	-31
    157e:	02093303          	0x2093303
    1582:	0100                	addi	s0,sp,128
    1584:	1505                	addi	a0,a0,-31
    1586:	0200                	addi	s0,sp,256
    1588:	0104                	addi	s1,sp,128
    158a:	0306                	slli	t1,t1,0x1
    158c:	0900                	addi	s0,sp,144
    158e:	0002                	c.slli64	zero
    1590:	0501                	addi	a0,a0,0
    1592:	0009                	c.nop	2
    1594:	0402                	c.slli64	s0
    1596:	0601                	addi	a2,a2,0
    1598:	00090003          	lb	zero,0(s2)
    159c:	0100                	addi	s0,sp,128
    159e:	0b05                	addi	s6,s6,1
    15a0:	0306                	slli	t1,t1,0x1
    15a2:	0004094b          	fnmsub.s	fs2,fs0,ft0,ft0,rne
    15a6:	0501                	addi	a0,a0,0
    15a8:	0610                	addi	a2,sp,768
    15aa:	0900c003          	lbu	zero,144(ra)
    15ae:	0002                	c.slli64	zero
    15b0:	0301                	addi	t1,t1,0
    15b2:	0901                	addi	s2,s2,0
    15b4:	0002                	c.slli64	zero
    15b6:	0501                	addi	a0,a0,0
    15b8:	0015                	c.nop	5
    15ba:	0402                	c.slli64	s0
    15bc:	0601                	addi	a2,a2,0
    15be:	02097f03          	0x2097f03
    15c2:	0100                	addi	s0,sp,128
    15c4:	0905                	addi	s2,s2,1
    15c6:	0200                	addi	s0,sp,256
    15c8:	0104                	addi	s1,sp,128
    15ca:	0306                	slli	t1,t1,0x1
    15cc:	0900                	addi	s0,sp,144
    15ce:	0000                	unimp
    15d0:	0501                	addi	a0,a0,0
    15d2:	0015                	c.nop	5
    15d4:	0402                	c.slli64	s0
    15d6:	0601                	addi	a2,a2,0
    15d8:	0c090c03          	lb	s8,192(s2)
    15dc:	0100                	addi	s0,sp,128
    15de:	0905                	addi	s2,s2,1
    15e0:	0200                	addi	s0,sp,256
    15e2:	0104                	addi	s1,sp,128
    15e4:	0306                	slli	t1,t1,0x1
    15e6:	0900                	addi	s0,sp,144
    15e8:	0000                	unimp
    15ea:	0601                	addi	a2,a2,0
    15ec:	04090503          	lb	a0,64(s2)
    15f0:	0100                	addi	s0,sp,128
    15f2:	00090103          	lb	sp,0(s2)
    15f6:	0100                	addi	s0,sp,128
    15f8:	0505                	addi	a0,a0,1
    15fa:	0306                	slli	t1,t1,0x1
    15fc:	0901                	addi	s2,s2,0
    15fe:	0000                	unimp
    1600:	0501                	addi	a0,a0,0
    1602:	0009                	c.nop	2
    1604:	0402                	c.slli64	s0
    1606:	a1030603          	lb	a2,-1520(t1)
    160a:	097f                	0x97f
    160c:	002a                	c.slli	zero,0xa
    160e:	0501                	addi	a0,a0,0
    1610:	0018                	0x18
    1612:	0402                	c.slli64	s0
    1614:	00030603          	lb	a2,0(t1)
    1618:	0009                	c.nop	2
    161a:	0100                	addi	s0,sp,128
    161c:	1105                	addi	sp,sp,-31
    161e:	0200                	addi	s0,sp,256
    1620:	0304                	addi	s1,sp,384
    1622:	04090003          	lb	zero,64(s2)
    1626:	0100                	addi	s0,sp,128
    1628:	1b05                	addi	s6,s6,-31
    162a:	0200                	addi	s0,sp,256
    162c:	0304                	addi	s1,sp,384
    162e:	08097f03          	0x8097f03
    1632:	0100                	addi	s0,sp,128
    1634:	1105                	addi	sp,sp,-31
    1636:	0200                	addi	s0,sp,256
    1638:	0304                	addi	s1,sp,384
    163a:	02090103          	lb	sp,32(s2)
    163e:	0100                	addi	s0,sp,128
    1640:	0905                	addi	s2,s2,1
    1642:	0200                	addi	s0,sp,256
    1644:	0304                	addi	s1,sp,384
    1646:	0306                	slli	t1,t1,0x1
    1648:	0901                	addi	s2,s2,0
    164a:	0004                	0x4
    164c:	0501                	addi	a0,a0,0
    164e:	0018                	0x18
    1650:	0402                	c.slli64	s0
    1652:	00030603          	lb	a2,0(t1)
    1656:	0009                	c.nop	2
    1658:	0100                	addi	s0,sp,128
    165a:	1105                	addi	sp,sp,-31
    165c:	0200                	addi	s0,sp,256
    165e:	0304                	addi	s1,sp,384
    1660:	04090003          	lb	zero,64(s2)
    1664:	0100                	addi	s0,sp,128
    1666:	0905                	addi	s2,s2,1
    1668:	0200                	addi	s0,sp,256
    166a:	0304                	addi	s1,sp,384
    166c:	0306                	slli	t1,t1,0x1
    166e:	0901                	addi	s2,s2,0
    1670:	000c                	0xc
    1672:	0501                	addi	a0,a0,0
    1674:	0011                	c.nop	4
    1676:	0402                	c.slli64	s0
    1678:	00030603          	lb	a2,0(t1)
    167c:	0009                	c.nop	2
    167e:	0100                	addi	s0,sp,128
    1680:	0905                	addi	s2,s2,1
    1682:	0200                	addi	s0,sp,256
    1684:	0304                	addi	s1,sp,384
    1686:	0306                	slli	t1,t1,0x1
    1688:	0901                	addi	s2,s2,0
    168a:	0008                	0x8
    168c:	0501                	addi	a0,a0,0
    168e:	0011                	c.nop	4
    1690:	0402                	c.slli64	s0
    1692:	00030603          	lb	a2,0(t1)
    1696:	0009                	c.nop	2
    1698:	0100                	addi	s0,sp,128
    169a:	1b05                	addi	s6,s6,-31
    169c:	0200                	addi	s0,sp,256
    169e:	0304                	addi	s1,sp,384
    16a0:	0306                	slli	t1,t1,0x1
    16a2:	097c                	addi	a5,sp,156
    16a4:	0008                	0x8
    16a6:	0501                	addi	a0,a0,0
    16a8:	000d                	c.nop	3
    16aa:	0402                	c.slli64	s0
    16ac:	09190303          	lb	t1,145(s2)
    16b0:	0004                	0x4
    16b2:	0501                	addi	a0,a0,0
    16b4:	0022                	c.slli	zero,0x8
    16b6:	0402                	c.slli64	s0
    16b8:	00030603          	lb	a2,0(t1)
    16bc:	0009                	c.nop	2
    16be:	0100                	addi	s0,sp,128
    16c0:	1d05                	addi	s10,s10,-31
    16c2:	0200                	addi	s0,sp,256
    16c4:	0304                	addi	s1,sp,384
    16c6:	06090003          	lb	zero,96(s2)
    16ca:	0100                	addi	s0,sp,128
    16cc:	2a05                	jal	17fc <result+0xd8>
    16ce:	0200                	addi	s0,sp,256
    16d0:	0304                	addi	s1,sp,384
    16d2:	02097f03          	0x2097f03
    16d6:	0100                	addi	s0,sp,128
    16d8:	1d05                	addi	s10,s10,-31
    16da:	0200                	addi	s0,sp,256
    16dc:	0304                	addi	s1,sp,384
    16de:	04090103          	lb	sp,64(s2)
    16e2:	0100                	addi	s0,sp,128
    16e4:	2a05                	jal	1814 <result+0xf0>
    16e6:	0200                	addi	s0,sp,256
    16e8:	0304                	addi	s1,sp,384
    16ea:	0306                	slli	t1,t1,0x1
    16ec:	097f                	0x97f
    16ee:	0004                	0x4
    16f0:	0501                	addi	a0,a0,0
    16f2:	000d                	c.nop	3
    16f4:	0402                	c.slli64	s0
    16f6:	09070303          	lb	t1,144(a4)
    16fa:	0002                	c.slli64	zero
    16fc:	0501                	addi	a0,a0,0
    16fe:	0402001b          	0x402001b
    1702:	00030603          	lb	a2,0(t1)
    1706:	0009                	c.nop	2
    1708:	0100                	addi	s0,sp,128
    170a:	2305                	jal	1c2a <random_keys+0x11e>
    170c:	0200                	addi	s0,sp,256
    170e:	0304                	addi	s1,sp,384
    1710:	04090003          	lb	zero,64(s2)
    1714:	0100                	addi	s0,sp,128
    1716:	1f05                	addi	t5,t5,-31
    1718:	0200                	addi	s0,sp,256
    171a:	0304                	addi	s1,sp,384
    171c:	04090003          	lb	zero,64(s2)
    1720:	0100                	addi	s0,sp,128
    1722:	1505                	addi	a0,a0,-31
    1724:	0200                	addi	s0,sp,256
    1726:	0304                	addi	s1,sp,384
    1728:	04090003          	lb	zero,64(s2)
    172c:	0100                	addi	s0,sp,128
    172e:	2005                	jal	174e <result+0x2a>
    1730:	0200                	addi	s0,sp,256
    1732:	0304                	addi	s1,sp,384
    1734:	04097f03          	0x4097f03
    1738:	0100                	addi	s0,sp,128
    173a:	1f05                	addi	t5,t5,-31
    173c:	0200                	addi	s0,sp,256
    173e:	0304                	addi	s1,sp,384
    1740:	02090103          	lb	sp,32(s2)
    1744:	0100                	addi	s0,sp,128
    1746:	1505                	addi	a0,a0,-31
    1748:	0200                	addi	s0,sp,256
    174a:	0304                	addi	s1,sp,384
    174c:	02090003          	lb	zero,32(s2)
    1750:	0100                	addi	s0,sp,128
    1752:	2005                	jal	1772 <result+0x4e>
    1754:	0200                	addi	s0,sp,256
    1756:	0304                	addi	s1,sp,384
    1758:	0306                	slli	t1,t1,0x1
    175a:	097f                	0x97f
    175c:	0002                	c.slli64	zero
    175e:	0501                	addi	a0,a0,0
    1760:	000d                	c.nop	3
    1762:	0402                	c.slli64	s0
    1764:	09090303          	lb	t1,144(s2)
    1768:	0004                	0x4
    176a:	0501                	addi	a0,a0,0
    176c:	0402001b          	0x402001b
    1770:	00030603          	lb	a2,0(t1)
    1774:	0409                	addi	s0,s0,2
    1776:	0100                	addi	s0,sp,128
    1778:	1505                	addi	a0,a0,-31
    177a:	0200                	addi	s0,sp,256
    177c:	0304                	addi	s1,sp,384
    177e:	06090003          	lb	zero,96(s2)
    1782:	0100                	addi	s0,sp,128
    1784:	2005                	jal	17a4 <result+0x80>
    1786:	0200                	addi	s0,sp,256
    1788:	0304                	addi	s1,sp,384
    178a:	02097f03          	0x2097f03
    178e:	0100                	addi	s0,sp,128
    1790:	1505                	addi	a0,a0,-31
    1792:	0200                	addi	s0,sp,256
    1794:	0304                	addi	s1,sp,384
    1796:	02090103          	lb	sp,32(s2)
    179a:	0100                	addi	s0,sp,128
    179c:	2005                	jal	17bc <result+0x98>
    179e:	0200                	addi	s0,sp,256
    17a0:	0304                	addi	s1,sp,384
    17a2:	0306                	slli	t1,t1,0x1
    17a4:	097f                	0x97f
    17a6:	0002                	c.slli64	zero
    17a8:	0501                	addi	a0,a0,0
    17aa:	000d                	c.nop	3
    17ac:	0402                	c.slli64	s0
    17ae:	090d0303          	lb	t1,144(s10)
    17b2:	0002                	c.slli64	zero
    17b4:	0501                	addi	a0,a0,0
    17b6:	0402001b          	0x402001b
    17ba:	00030603          	lb	a2,0(t1)
    17be:	0409                	addi	s0,s0,2
    17c0:	0100                	addi	s0,sp,128
    17c2:	1505                	addi	a0,a0,-31
    17c4:	0200                	addi	s0,sp,256
    17c6:	0304                	addi	s1,sp,384
    17c8:	06090003          	lb	zero,96(s2)
    17cc:	0100                	addi	s0,sp,128
    17ce:	2005                	jal	17ee <result+0xca>
    17d0:	0200                	addi	s0,sp,256
    17d2:	0304                	addi	s1,sp,384
    17d4:	02097f03          	0x2097f03
    17d8:	0100                	addi	s0,sp,128
    17da:	1505                	addi	a0,a0,-31
    17dc:	0200                	addi	s0,sp,256
    17de:	0304                	addi	s1,sp,384
    17e0:	02090103          	lb	sp,32(s2)
    17e4:	0100                	addi	s0,sp,128
    17e6:	2005                	jal	1806 <result+0xe2>
    17e8:	0200                	addi	s0,sp,256
    17ea:	0304                	addi	s1,sp,384
    17ec:	0306                	slli	t1,t1,0x1
    17ee:	097f                	0x97f
    17f0:	0002                	c.slli64	zero
    17f2:	0501                	addi	a0,a0,0
    17f4:	000d                	c.nop	3
    17f6:	0402                	c.slli64	s0
    17f8:	09090303          	lb	t1,144(s2)
    17fc:	0002                	c.slli64	zero
    17fe:	0501                	addi	a0,a0,0
    1800:	0019                	c.nop	6
    1802:	0402                	c.slli64	s0
    1804:	00030603          	lb	a2,0(t1)
    1808:	0009                	c.nop	2
    180a:	0100                	addi	s0,sp,128
    180c:	2305                	jal	1d2c <random_keys+0x220>
    180e:	0200                	addi	s0,sp,256
    1810:	0304                	addi	s1,sp,384
    1812:	04090003          	lb	zero,64(s2)
    1816:	0100                	addi	s0,sp,128
    1818:	1d05                	addi	s10,s10,-31
    181a:	0200                	addi	s0,sp,256
    181c:	0304                	addi	s1,sp,384
    181e:	04090003          	lb	zero,64(s2)
    1822:	0100                	addi	s0,sp,128
    1824:	1305                	addi	t1,t1,-31
    1826:	0200                	addi	s0,sp,256
    1828:	0304                	addi	s1,sp,384
    182a:	04090003          	lb	zero,64(s2)
    182e:	0100                	addi	s0,sp,128
    1830:	2005                	jal	1850 <result+0x12c>
    1832:	0200                	addi	s0,sp,256
    1834:	0304                	addi	s1,sp,384
    1836:	04097f03          	0x4097f03
    183a:	0100                	addi	s0,sp,128
    183c:	1d05                	addi	s10,s10,-31
    183e:	0200                	addi	s0,sp,256
    1840:	0304                	addi	s1,sp,384
    1842:	02090103          	lb	sp,32(s2)
    1846:	0100                	addi	s0,sp,128
    1848:	1305                	addi	t1,t1,-31
    184a:	0200                	addi	s0,sp,256
    184c:	0304                	addi	s1,sp,384
    184e:	02090003          	lb	zero,32(s2)
    1852:	0100                	addi	s0,sp,128
    1854:	2005                	jal	1874 <result+0x150>
    1856:	0200                	addi	s0,sp,256
    1858:	0304                	addi	s1,sp,384
    185a:	0306                	slli	t1,t1,0x1
    185c:	097f                	0x97f
    185e:	0002                	c.slli64	zero
    1860:	0501                	addi	a0,a0,0
    1862:	000d                	c.nop	3
    1864:	0402                	c.slli64	s0
    1866:	09090303          	lb	t1,144(s2)
    186a:	0004                	0x4
    186c:	0501                	addi	a0,a0,0
    186e:	0015                	c.nop	5
    1870:	0402                	c.slli64	s0
    1872:	00030603          	lb	a2,0(t1)
    1876:	0409                	addi	s0,s0,2
    1878:	0100                	addi	s0,sp,128
    187a:	2005                	jal	189a <result+0x176>
    187c:	0200                	addi	s0,sp,256
    187e:	0304                	addi	s1,sp,384
    1880:	06097f03          	0x6097f03
    1884:	0100                	addi	s0,sp,128
    1886:	1505                	addi	a0,a0,-31
    1888:	0200                	addi	s0,sp,256
    188a:	0304                	addi	s1,sp,384
    188c:	02090103          	lb	sp,32(s2)
    1890:	0100                	addi	s0,sp,128
    1892:	0d05                	addi	s10,s10,1
    1894:	0200                	addi	s0,sp,256
    1896:	0304                	addi	s1,sp,384
    1898:	0306                	slli	t1,t1,0x1
    189a:	0901                	addi	s2,s2,0
    189c:	0002                	c.slli64	zero
    189e:	0501                	addi	a0,a0,0
    18a0:	0019                	c.nop	6
    18a2:	0402                	c.slli64	s0
    18a4:	00030603          	lb	a2,0(t1)
    18a8:	0009                	c.nop	2
    18aa:	0100                	addi	s0,sp,128
    18ac:	1505                	addi	a0,a0,-31
    18ae:	0200                	addi	s0,sp,256
    18b0:	0304                	addi	s1,sp,384
    18b2:	06090103          	lb	sp,96(s2)
    18b6:	0100                	addi	s0,sp,128
    18b8:	0200                	addi	s0,sp,256
    18ba:	0304                	addi	s1,sp,384
    18bc:	04097f03          	0x4097f03
    18c0:	0100                	addi	s0,sp,128
    18c2:	0d05                	addi	s10,s10,1
    18c4:	0200                	addi	s0,sp,256
    18c6:	0304                	addi	s1,sp,384
    18c8:	0306                	slli	t1,t1,0x1
    18ca:	0901                	addi	s2,s2,0
    18cc:	0002                	c.slli64	zero
    18ce:	0501                	addi	a0,a0,0
    18d0:	0015                	c.nop	5
    18d2:	0402                	c.slli64	s0
    18d4:	00030603          	lb	a2,0(t1)
    18d8:	0409                	addi	s0,s0,2
    18da:	0100                	addi	s0,sp,128
    18dc:	1605                	addi	a2,a2,-31
    18de:	0200                	addi	s0,sp,256
    18e0:	0304                	addi	s1,sp,384
    18e2:	04090303          	lb	t1,64(s2)
    18e6:	0100                	addi	s0,sp,128
    18e8:	1505                	addi	a0,a0,-31
    18ea:	0200                	addi	s0,sp,256
    18ec:	0304                	addi	s1,sp,384
    18ee:	02097d03          	0x2097d03
    18f2:	0100                	addi	s0,sp,128
    18f4:	0d05                	addi	s10,s10,1
    18f6:	0200                	addi	s0,sp,256
    18f8:	0304                	addi	s1,sp,384
    18fa:	0306                	slli	t1,t1,0x1
    18fc:	0901                	addi	s2,s2,0
    18fe:	0004                	0x4
    1900:	0501                	addi	a0,a0,0
    1902:	0019                	c.nop	6
    1904:	0402                	c.slli64	s0
    1906:	00030603          	lb	a2,0(t1)
    190a:	0009                	c.nop	2
    190c:	0100                	addi	s0,sp,128
    190e:	1505                	addi	a0,a0,-31
    1910:	0200                	addi	s0,sp,256
    1912:	0304                	addi	s1,sp,384
    1914:	04090003          	lb	zero,64(s2)
    1918:	0100                	addi	s0,sp,128
    191a:	0d05                	addi	s10,s10,1
    191c:	0200                	addi	s0,sp,256
    191e:	0304                	addi	s1,sp,384
    1920:	0306                	slli	t1,t1,0x1
    1922:	0901                	addi	s2,s2,0
    1924:	0004                	0x4
    1926:	0501                	addi	a0,a0,0
    1928:	0015                	c.nop	5
    192a:	0402                	c.slli64	s0
    192c:	00030603          	lb	a2,0(t1)
    1930:	0009                	c.nop	2
    1932:	0100                	addi	s0,sp,128
    1934:	0d05                	addi	s10,s10,1
    1936:	0200                	addi	s0,sp,256
    1938:	0304                	addi	s1,sp,384
    193a:	0306                	slli	t1,t1,0x1
    193c:	0901                	addi	s2,s2,0
    193e:	0008                	0x8
    1940:	0501                	addi	a0,a0,0
    1942:	0020                	addi	s0,sp,8
    1944:	0402                	c.slli64	s0
    1946:	097a0303          	lb	t1,151(s4)
    194a:	0000                	unimp
    194c:	0501                	addi	a0,a0,0
    194e:	030d                	addi	t1,t1,3
    1950:	090c                	addi	a1,sp,144
    1952:	0004                	0x4
    1954:	0501                	addi	a0,a0,0
    1956:	0003061b          	0x3061b
    195a:	0009                	c.nop	2
    195c:	0100                	addi	s0,sp,128
    195e:	2005                	jal	197e <ti_2+0x2>
    1960:	08090003          	lb	zero,128(s2)
    1964:	0100                	addi	s0,sp,128
    1966:	1005                	c.nop	-31
    1968:	04090003          	lb	zero,64(s2)
    196c:	0100                	addi	s0,sp,128
    196e:	1e05                	addi	t3,t3,-31
    1970:	0200                	addi	s0,sp,256
    1972:	0204                	addi	s1,sp,256
    1974:	0306                	slli	t1,t1,0x1
    1976:	097f                	0x97f
    1978:	0004                	0x4
    197a:	0501                	addi	a0,a0,0
    197c:	000d                	c.nop	3
    197e:	0402                	c.slli64	s0
    1980:	090d0303          	lb	t1,144(s10)
    1984:	0004                	0x4
    1986:	0501                	addi	a0,a0,0
    1988:	0020                	addi	s0,sp,8
    198a:	0402                	c.slli64	s0
    198c:	00030603          	lb	a2,0(t1)
    1990:	0009                	c.nop	2
    1992:	0100                	addi	s0,sp,128
    1994:	0200                	addi	s0,sp,256
    1996:	0304                	addi	s1,sp,384
    1998:	02097f03          	0x2097f03
    199c:	0100                	addi	s0,sp,128
    199e:	0200                	addi	s0,sp,256
    19a0:	0304                	addi	s1,sp,384
    19a2:	04090103          	lb	sp,64(s2)
    19a6:	0100                	addi	s0,sp,128
    19a8:	2505                	jal	1fc8 <random_keys+0x4bc>
    19aa:	0200                	addi	s0,sp,256
    19ac:	0304                	addi	s1,sp,384
    19ae:	04090003          	lb	zero,64(s2)
    19b2:	0100                	addi	s0,sp,128
    19b4:	1505                	addi	a0,a0,-31
    19b6:	0200                	addi	s0,sp,256
    19b8:	0304                	addi	s1,sp,384
    19ba:	04090003          	lb	zero,64(s2)
    19be:	0100                	addi	s0,sp,128
    19c0:	2005                	jal	19e0 <ti_2+0x64>
    19c2:	0200                	addi	s0,sp,256
    19c4:	0304                	addi	s1,sp,384
    19c6:	0306                	slli	t1,t1,0x1
    19c8:	097f                	0x97f
    19ca:	0004                	0x4
    19cc:	0501                	addi	a0,a0,0
    19ce:	0328                	addi	a0,sp,392
    19d0:	090c                	addi	a1,sp,144
    19d2:	0002                	c.slli64	zero
    19d4:	0501                	addi	a0,a0,0
    19d6:	0305                	addi	t1,t1,1
    19d8:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    19dc:	0501                	addi	a0,a0,0
    19de:	0628                	addi	a0,sp,776
    19e0:	00097d03          	0x97d03
    19e4:	0100                	addi	s0,sp,128
    19e6:	36090003          	lb	zero,864(s2)
    19ea:	0100                	addi	s0,sp,128
    19ec:	0905                	addi	s2,s2,1
    19ee:	04090303          	lb	t1,64(s2)
    19f2:	0100                	addi	s0,sp,128
    19f4:	10090103          	lb	sp,256(s2)
    19f8:	0100                	addi	s0,sp,128
    19fa:	0a097f03          	0xa097f03
    19fe:	0100                	addi	s0,sp,128
    1a00:	0505                	addi	a0,a0,1
    1a02:	0306                	slli	t1,t1,0x1
    1a04:	0901                	addi	s2,s2,0
    1a06:	006c                	addi	a1,sp,12
    1a08:	0501                	addi	a0,a0,0
    1a0a:	0610                	addi	a2,sp,768
    1a0c:	00090603          	lb	a2,0(s2)
    1a10:	0100                	addi	s0,sp,128
    1a12:	0905                	addi	s2,s2,1
    1a14:	04097a03          	0x4097a03
    1a18:	0100                	addi	s0,sp,128
    1a1a:	02090603          	lb	a2,32(s2)
    1a1e:	0100                	addi	s0,sp,128
    1a20:	0e05                	addi	t3,t3,1
    1a22:	0e090503          	lb	a0,224(s2)
    1a26:	0100                	addi	s0,sp,128
    1a28:	0905                	addi	s2,s2,1
    1a2a:	0a097503          	0xa097503
    1a2e:	0100                	addi	s0,sp,128
    1a30:	0505                	addi	a0,a0,1
    1a32:	0306                	slli	t1,t1,0x1
    1a34:	0902                	c.slli64	s2
    1a36:	0064                	addi	s1,sp,12
    1a38:	0301                	addi	t1,t1,0
    1a3a:	0901                	addi	s2,s2,0
    1a3c:	0000                	unimp
    1a3e:	0301                	addi	t1,t1,0
    1a40:	0901                	addi	s2,s2,0
    1a42:	0000                	unimp
    1a44:	0301                	addi	t1,t1,0
    1a46:	0901                	addi	s2,s2,0
    1a48:	0000                	unimp
    1a4a:	0301                	addi	t1,t1,0
    1a4c:	0901                	addi	s2,s2,0
    1a4e:	0000                	unimp
    1a50:	0301                	addi	t1,t1,0
    1a52:	0901                	addi	s2,s2,0
    1a54:	0000                	unimp
    1a56:	0301                	addi	t1,t1,0
    1a58:	0901                	addi	s2,s2,0
    1a5a:	0000                	unimp
    1a5c:	0301                	addi	t1,t1,0
    1a5e:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1a62:	0301                	addi	t1,t1,0
    1a64:	0901                	addi	s2,s2,0
    1a66:	0000                	unimp
    1a68:	0501                	addi	a0,a0,0
    1a6a:	060e                	slli	a2,a2,0x3
    1a6c:	00090003          	lb	zero,0(s2)
    1a70:	0100                	addi	s0,sp,128
    1a72:	0505                	addi	a0,a0,1
    1a74:	0306                	slli	t1,t1,0x1
    1a76:	0902                	c.slli64	s2
    1a78:	0004                	0x4
    1a7a:	0501                	addi	a0,a0,0
    1a7c:	0003060b          	0x3060b
    1a80:	0009                	c.nop	2
    1a82:	0100                	addi	s0,sp,128
    1a84:	1005                	c.nop	-31
    1a86:	0200                	addi	s0,sp,256
    1a88:	0104                	addi	s1,sp,128
    1a8a:	0306                	slli	t1,t1,0x1
    1a8c:	0900                	addi	s0,sp,144
    1a8e:	0002                	c.slli64	zero
    1a90:	0501                	addi	a0,a0,0
    1a92:	0005                	c.nop	1
    1a94:	0402                	c.slli64	s0
    1a96:	0601                	addi	a2,a2,0
    1a98:	00090003          	lb	zero,0(s2)
    1a9c:	0100                	addi	s0,sp,128
    1a9e:	06090603          	lb	a2,96(s2)
    1aa2:	0100                	addi	s0,sp,128
    1aa4:	1105                	addi	sp,sp,-31
    1aa6:	0200                	addi	s0,sp,256
    1aa8:	0104                	addi	s1,sp,128
    1aaa:	0306                	slli	t1,t1,0x1
    1aac:	0900                	addi	s0,sp,144
    1aae:	0004                	0x4
    1ab0:	0501                	addi	a0,a0,0
    1ab2:	0005                	c.nop	1
    1ab4:	0402                	c.slli64	s0
    1ab6:	0601                	addi	a2,a2,0
    1ab8:	00090003          	lb	zero,0(s2)
    1abc:	0100                	addi	s0,sp,128
    1abe:	0b05                	addi	s6,s6,1
    1ac0:	04090703          	lb	a4,64(s2)
    1ac4:	0100                	addi	s0,sp,128
    1ac6:	1805                	addi	a6,a6,-31
    1ac8:	02090103          	lb	sp,32(s2)
    1acc:	0100                	addi	s0,sp,128
    1ace:	1005                	c.nop	-31
    1ad0:	0200                	addi	s0,sp,256
    1ad2:	0104                	addi	s1,sp,128
    1ad4:	0306                	slli	t1,t1,0x1
    1ad6:	097f                	0x97f
    1ad8:	0008                	0x8
    1ada:	0501                	addi	a0,a0,0
    1adc:	0005                	c.nop	1
    1ade:	0402                	c.slli64	s0
    1ae0:	0601                	addi	a2,a2,0
    1ae2:	00090003          	lb	zero,0(s2)
    1ae6:	0100                	addi	s0,sp,128
    1ae8:	1605                	addi	a2,a2,-31
    1aea:	08090503          	lb	a0,128(s2)
    1aee:	0100                	addi	s0,sp,128
    1af0:	1805                	addi	a6,a6,-31
    1af2:	08090103          	lb	sp,128(s2)
    1af6:	0100                	addi	s0,sp,128
    1af8:	1005                	c.nop	-31
    1afa:	0200                	addi	s0,sp,256
    1afc:	0104                	addi	s1,sp,128
    1afe:	0306                	slli	t1,t1,0x1
    1b00:	097f                	0x97f
    1b02:	0008                	0x8
    1b04:	0501                	addi	a0,a0,0
    1b06:	0005                	c.nop	1
    1b08:	0402                	c.slli64	s0
    1b0a:	0601                	addi	a2,a2,0
    1b0c:	00090003          	lb	zero,0(s2)
    1b10:	0100                	addi	s0,sp,128
    1b12:	0306                	slli	t1,t1,0x1
    1b14:	0905                	addi	s2,s2,1
    1b16:	0004                	0x4
    1b18:	0501                	addi	a0,a0,0
    1b1a:	061a                	slli	a2,a2,0x6
    1b1c:	00090303          	lb	t1,0(s2)
    1b20:	0100                	addi	s0,sp,128
    1b22:	0a05                	addi	s4,s4,1
    1b24:	06097d03          	0x6097d03
    1b28:	0100                	addi	s0,sp,128
    1b2a:	0505                	addi	a0,a0,1
    1b2c:	0306                	slli	t1,t1,0x1
    1b2e:	000c0903          	lb	s2,0(s8) # 19000 <_stack_start+0x9000>
    1b32:	0501                	addi	a0,a0,0
    1b34:	0618                	addi	a4,sp,768
    1b36:	02090103          	lb	sp,32(s2)
    1b3a:	0100                	addi	s0,sp,128
    1b3c:	1405                	addi	s0,s0,-31
    1b3e:	0200                	addi	s0,sp,256
    1b40:	0104                	addi	s1,sp,128
    1b42:	0306                	slli	t1,t1,0x1
    1b44:	097f                	0x97f
    1b46:	0008                	0x8
    1b48:	0501                	addi	a0,a0,0
    1b4a:	0005                	c.nop	1
    1b4c:	0402                	c.slli64	s0
    1b4e:	0601                	addi	a2,a2,0
    1b50:	00090003          	lb	zero,0(s2)
    1b54:	0100                	addi	s0,sp,128
    1b56:	0306                	slli	t1,t1,0x1
    1b58:	0906                	slli	s2,s2,0x1
    1b5a:	0004                	0x4
    1b5c:	0501                	addi	a0,a0,0
    1b5e:	060a                	slli	a2,a2,0x2
    1b60:	00090003          	lb	zero,0(s2)
    1b64:	0100                	addi	s0,sp,128
    1b66:	0505                	addi	a0,a0,1
    1b68:	0306                	slli	t1,t1,0x1
    1b6a:	0904                	addi	s1,sp,144
    1b6c:	000c                	0xc
    1b6e:	0501                	addi	a0,a0,0
    1b70:	061a                	slli	a2,a2,0x6
    1b72:	06090003          	lb	zero,96(s2)
    1b76:	0100                	addi	s0,sp,128
    1b78:	1805                	addi	a6,a6,-31
    1b7a:	02090103          	lb	sp,32(s2)
    1b7e:	0100                	addi	s0,sp,128
    1b80:	1405                	addi	s0,s0,-31
    1b82:	0200                	addi	s0,sp,256
    1b84:	0104                	addi	s1,sp,128
    1b86:	0306                	slli	t1,t1,0x1
    1b88:	097f                	0x97f
    1b8a:	0008                	0x8
    1b8c:	0501                	addi	a0,a0,0
    1b8e:	0005                	c.nop	1
    1b90:	0402                	c.slli64	s0
    1b92:	0601                	addi	a2,a2,0
    1b94:	00090003          	lb	zero,0(s2)
    1b98:	0100                	addi	s0,sp,128
    1b9a:	0306                	slli	t1,t1,0x1
    1b9c:	0905                	addi	s2,s2,1
    1b9e:	0004                	0x4
    1ba0:	0501                	addi	a0,a0,0
    1ba2:	060a                	slli	a2,a2,0x2
    1ba4:	00090003          	lb	zero,0(s2)
    1ba8:	0100                	addi	s0,sp,128
    1baa:	0505                	addi	a0,a0,1
    1bac:	0306                	slli	t1,t1,0x1
    1bae:	000c0903          	lb	s2,0(s8)
    1bb2:	0501                	addi	a0,a0,0
    1bb4:	0003060b          	0x3060b
    1bb8:	0209                	addi	tp,tp,2
    1bba:	0100                	addi	s0,sp,128
    1bbc:	1805                	addi	a6,a6,-31
    1bbe:	02090003          	lb	zero,32(s2)
    1bc2:	0100                	addi	s0,sp,128
    1bc4:	1005                	c.nop	-31
    1bc6:	0200                	addi	s0,sp,256
    1bc8:	0104                	addi	s1,sp,128
    1bca:	0306                	slli	t1,t1,0x1
    1bcc:	0900                	addi	s0,sp,144
    1bce:	0004                	0x4
    1bd0:	0501                	addi	a0,a0,0
    1bd2:	0005                	c.nop	1
    1bd4:	0402                	c.slli64	s0
    1bd6:	0601                	addi	a2,a2,0
    1bd8:	00090003          	lb	zero,0(s2)
    1bdc:	0100                	addi	s0,sp,128
    1bde:	0306                	slli	t1,t1,0x1
    1be0:	0906                	slli	s2,s2,0x1
    1be2:	0004                	0x4
    1be4:	0501                	addi	a0,a0,0
    1be6:	060a                	slli	a2,a2,0x2
    1be8:	00090003          	lb	zero,0(s2)
    1bec:	0100                	addi	s0,sp,128
    1bee:	0505                	addi	a0,a0,1
    1bf0:	0306                	slli	t1,t1,0x1
    1bf2:	0904                	addi	s1,sp,144
    1bf4:	0008                	0x8
    1bf6:	0501                	addi	a0,a0,0
    1bf8:	061a                	slli	a2,a2,0x6
    1bfa:	00090003          	lb	zero,0(s2)
    1bfe:	0100                	addi	s0,sp,128
    1c00:	1805                	addi	a6,a6,-31
    1c02:	0a090103          	lb	sp,160(s2)
    1c06:	0100                	addi	s0,sp,128
    1c08:	1405                	addi	s0,s0,-31
    1c0a:	0200                	addi	s0,sp,256
    1c0c:	0104                	addi	s1,sp,128
    1c0e:	0306                	slli	t1,t1,0x1
    1c10:	097f                	0x97f
    1c12:	0008                	0x8
    1c14:	0501                	addi	a0,a0,0
    1c16:	0005                	c.nop	1
    1c18:	0402                	c.slli64	s0
    1c1a:	0601                	addi	a2,a2,0
    1c1c:	02090003          	lb	zero,32(s2)
    1c20:	0100                	addi	s0,sp,128
    1c22:	1a05                	addi	s4,s4,-31
    1c24:	04090503          	lb	a0,64(s2)
    1c28:	0100                	addi	s0,sp,128
    1c2a:	1805                	addi	a6,a6,-31
    1c2c:	04090103          	lb	sp,64(s2)
    1c30:	0100                	addi	s0,sp,128
    1c32:	1a05                	addi	s4,s4,-31
    1c34:	08097f03          	0x8097f03
    1c38:	0100                	addi	s0,sp,128
    1c3a:	1405                	addi	s0,s0,-31
    1c3c:	0200                	addi	s0,sp,256
    1c3e:	0104                	addi	s1,sp,128
    1c40:	0306                	slli	t1,t1,0x1
    1c42:	0900                	addi	s0,sp,144
    1c44:	0008                	0x8
    1c46:	0501                	addi	a0,a0,0
    1c48:	0005                	c.nop	1
    1c4a:	0402                	c.slli64	s0
    1c4c:	0601                	addi	a2,a2,0
    1c4e:	00090003          	lb	zero,0(s2)
    1c52:	0100                	addi	s0,sp,128
    1c54:	0306                	slli	t1,t1,0x1
    1c56:	0906                	slli	s2,s2,0x1
    1c58:	0004                	0x4
    1c5a:	0301                	addi	t1,t1,0
    1c5c:	0902                	c.slli64	s2
    1c5e:	0000                	unimp
    1c60:	0501                	addi	a0,a0,0
    1c62:	0601                	addi	a2,a2,0
    1c64:	00090103          	lb	sp,0(s2)
    1c68:	0100                	addi	s0,sp,128
    1c6a:	0905                	addi	s2,s2,1
    1c6c:	0200                	addi	s0,sp,256
    1c6e:	0304                	addi	s1,sp,384
    1c70:	0306                	slli	t1,t1,0x1
    1c72:	7fbd                	lui	t6,0xfffef
    1c74:	4009                	c.li	zero,2
    1c76:	0100                	addi	s0,sp,128
    1c78:	1205                	addi	tp,tp,-31
    1c7a:	0200                	addi	s0,sp,256
    1c7c:	0304                	addi	s1,sp,384
    1c7e:	0306                	slli	t1,t1,0x1
    1c80:	0900                	addi	s0,sp,144
    1c82:	0000                	unimp
    1c84:	0501                	addi	a0,a0,0
    1c86:	04020017          	auipc	zero,0x4020
    1c8a:	7f030603          	lb	a2,2032(t1)
    1c8e:	0a09                	addi	s4,s4,2
    1c90:	0100                	addi	s0,sp,128
    1c92:	0905                	addi	s2,s2,1
    1c94:	0200                	addi	s0,sp,256
    1c96:	0304                	addi	s1,sp,384
    1c98:	04090703          	lb	a4,64(s2)
    1c9c:	0100                	addi	s0,sp,128
    1c9e:	0e05                	addi	t3,t3,1
    1ca0:	0200                	addi	s0,sp,256
    1ca2:	0304                	addi	s1,sp,384
    1ca4:	0306                	slli	t1,t1,0x1
    1ca6:	0900                	addi	s0,sp,144
    1ca8:	0004                	0x4
    1caa:	0501                	addi	a0,a0,0
    1cac:	0009                	c.nop	2
    1cae:	0402                	c.slli64	s0
    1cb0:	01030603          	lb	a2,16(t1)
    1cb4:	0a09                	addi	s4,s4,2
    1cb6:	0100                	addi	s0,sp,128
    1cb8:	0e05                	addi	t3,t3,1
    1cba:	0200                	addi	s0,sp,256
    1cbc:	0304                	addi	s1,sp,384
    1cbe:	0306                	slli	t1,t1,0x1
    1cc0:	0900                	addi	s0,sp,144
    1cc2:	0000                	unimp
    1cc4:	0501                	addi	a0,a0,0
    1cc6:	0019                	c.nop	6
    1cc8:	0402                	c.slli64	s0
    1cca:	7e030603          	lb	a2,2016(t1)
    1cce:	0a09                	addi	s4,s4,2
    1cd0:	0100                	addi	s0,sp,128
    1cd2:	0905                	addi	s2,s2,1
    1cd4:	0200                	addi	s0,sp,256
    1cd6:	0304                	addi	s1,sp,384
    1cd8:	04090803          	lb	a6,64(s2)
    1cdc:	0100                	addi	s0,sp,128
    1cde:	1b05                	addi	s6,s6,-31
    1ce0:	0200                	addi	s0,sp,256
    1ce2:	0304                	addi	s1,sp,384
    1ce4:	0306                	slli	t1,t1,0x1
    1ce6:	0900                	addi	s0,sp,144
    1ce8:	0004                	0x4
    1cea:	0501                	addi	a0,a0,0
    1cec:	0018                	0x18
    1cee:	0402                	c.slli64	s0
    1cf0:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1cf4:	0004                	0x4
    1cf6:	0501                	addi	a0,a0,0
    1cf8:	0402001b          	0x402001b
    1cfc:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1d00:	0004                	0x4
    1d02:	0501                	addi	a0,a0,0
    1d04:	0018                	0x18
    1d06:	0402                	c.slli64	s0
    1d08:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1d0c:	0002                	c.slli64	zero
    1d0e:	0501                	addi	a0,a0,0
    1d10:	04020017          	auipc	zero,0x4020
    1d14:	097f0303          	lb	t1,151(t5)
    1d18:	0002                	c.slli64	zero
    1d1a:	0501                	addi	a0,a0,0
    1d1c:	0018                	0x18
    1d1e:	0402                	c.slli64	s0
    1d20:	09010303          	lb	t1,144(sp)
    1d24:	0002                	c.slli64	zero
    1d26:	0501                	addi	a0,a0,0
    1d28:	04020017          	auipc	zero,0x4020
    1d2c:	7f030603          	lb	a2,2032(t1)
    1d30:	0209                	addi	tp,tp,2
    1d32:	0100                	addi	s0,sp,128
    1d34:	0905                	addi	s2,s2,1
    1d36:	0200                	addi	s0,sp,256
    1d38:	0304                	addi	s1,sp,384
    1d3a:	02090603          	lb	a2,32(s2)
    1d3e:	0100                	addi	s0,sp,128
    1d40:	1805                	addi	a6,a6,-31
    1d42:	0200                	addi	s0,sp,256
    1d44:	0304                	addi	s1,sp,384
    1d46:	0306                	slli	t1,t1,0x1
    1d48:	0900                	addi	s0,sp,144
    1d4a:	0000                	unimp
    1d4c:	0501                	addi	a0,a0,0
    1d4e:	0402001b          	0x402001b
    1d52:	7f030603          	lb	a2,2032(t1)
    1d56:	0a09                	addi	s4,s4,2
    1d58:	0100                	addi	s0,sp,128
    1d5a:	0905                	addi	s2,s2,1
    1d5c:	0200                	addi	s0,sp,256
    1d5e:	0304                	addi	s1,sp,384
    1d60:	06090903          	lb	s2,96(s2)
    1d64:	0100                	addi	s0,sp,128
    1d66:	1c05                	addi	s8,s8,-31
    1d68:	0200                	addi	s0,sp,256
    1d6a:	0304                	addi	s1,sp,384
    1d6c:	0306                	slli	t1,t1,0x1
    1d6e:	0900                	addi	s0,sp,144
    1d70:	0000                	unimp
    1d72:	0501                	addi	a0,a0,0
    1d74:	0018                	0x18
    1d76:	0402                	c.slli64	s0
    1d78:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1d7c:	0002                	c.slli64	zero
    1d7e:	0501                	addi	a0,a0,0
    1d80:	001f 0402 0603      	0x6030402001f
    1d86:	08097f03          	0x8097f03
    1d8a:	0100                	addi	s0,sp,128
    1d8c:	0905                	addi	s2,s2,1
    1d8e:	0200                	addi	s0,sp,256
    1d90:	0304                	addi	s1,sp,384
    1d92:	06090b03          	lb	s6,96(s2)
    1d96:	0100                	addi	s0,sp,128
    1d98:	1c05                	addi	s8,s8,-31
    1d9a:	0200                	addi	s0,sp,256
    1d9c:	0304                	addi	s1,sp,384
    1d9e:	0306                	slli	t1,t1,0x1
    1da0:	0900                	addi	s0,sp,144
    1da2:	0004                	0x4
    1da4:	0501                	addi	a0,a0,0
    1da6:	0018                	0x18
    1da8:	0402                	c.slli64	s0
    1daa:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1dae:	0008                	0x8
    1db0:	0501                	addi	a0,a0,0
    1db2:	001f 0402 0303      	0x3030402001f
    1db8:	097f                	0x97f
    1dba:	0002                	c.slli64	zero
    1dbc:	0501                	addi	a0,a0,0
    1dbe:	0018                	0x18
    1dc0:	0402                	c.slli64	s0
    1dc2:	09010303          	lb	t1,144(sp)
    1dc6:	0002                	c.slli64	zero
    1dc8:	0501                	addi	a0,a0,0
    1dca:	001f 0402 0603      	0x6030402001f
    1dd0:	02097f03          	0x2097f03
    1dd4:	0100                	addi	s0,sp,128
    1dd6:	0905                	addi	s2,s2,1
    1dd8:	0200                	addi	s0,sp,256
    1dda:	0304                	addi	s1,sp,384
    1ddc:	02090903          	lb	s2,32(s2)
    1de0:	0100                	addi	s0,sp,128
    1de2:	1605                	addi	a2,a2,-31
    1de4:	0200                	addi	s0,sp,256
    1de6:	0304                	addi	s1,sp,384
    1de8:	0306                	slli	t1,t1,0x1
    1dea:	0900                	addi	s0,sp,144
    1dec:	0000                	unimp
    1dee:	0501                	addi	a0,a0,0
    1df0:	001d                	c.nop	7
    1df2:	0402                	c.slli64	s0
    1df4:	097f0303          	lb	t1,151(t5)
    1df8:	0002                	c.slli64	zero
    1dfa:	0501                	addi	a0,a0,0
    1dfc:	0016                	c.slli	zero,0x5
    1dfe:	0402                	c.slli64	s0
    1e00:	09010303          	lb	t1,144(sp)
    1e04:	0004                	0x4
    1e06:	0501                	addi	a0,a0,0
    1e08:	0402000f          	0x402000f
    1e0c:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1e10:	0004                	0x4
    1e12:	0501                	addi	a0,a0,0
    1e14:	001d                	c.nop	7
    1e16:	0402                	c.slli64	s0
    1e18:	7f030603          	lb	a2,2032(t1)
    1e1c:	0409                	addi	s0,s0,2
    1e1e:	0100                	addi	s0,sp,128
    1e20:	0905                	addi	s2,s2,1
    1e22:	0200                	addi	s0,sp,256
    1e24:	0304                	addi	s1,sp,384
    1e26:	02090b03          	lb	s6,32(s2)
    1e2a:	0100                	addi	s0,sp,128
    1e2c:	1c05                	addi	s8,s8,-31
    1e2e:	0200                	addi	s0,sp,256
    1e30:	0304                	addi	s1,sp,384
    1e32:	0306                	slli	t1,t1,0x1
    1e34:	0900                	addi	s0,sp,144
    1e36:	0000                	unimp
    1e38:	0501                	addi	a0,a0,0
    1e3a:	0018                	0x18
    1e3c:	0402                	c.slli64	s0
    1e3e:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1e42:	0004                	0x4
    1e44:	0501                	addi	a0,a0,0
    1e46:	001f 0402 0603      	0x6030402001f
    1e4c:	08097f03          	0x8097f03
    1e50:	0100                	addi	s0,sp,128
    1e52:	0905                	addi	s2,s2,1
    1e54:	0200                	addi	s0,sp,256
    1e56:	0304                	addi	s1,sp,384
    1e58:	04090603          	lb	a2,64(s2)
    1e5c:	0100                	addi	s0,sp,128
    1e5e:	1805                	addi	a6,a6,-31
    1e60:	0200                	addi	s0,sp,256
    1e62:	0304                	addi	s1,sp,384
    1e64:	0306                	slli	t1,t1,0x1
    1e66:	0900                	addi	s0,sp,144
    1e68:	0004                	0x4
    1e6a:	0501                	addi	a0,a0,0
    1e6c:	001f 0402 0303      	0x3030402001f
    1e72:	0900                	addi	s0,sp,144
    1e74:	0004                	0x4
    1e76:	0501                	addi	a0,a0,0
    1e78:	0018                	0x18
    1e7a:	0402                	c.slli64	s0
    1e7c:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1e80:	0004                	0x4
    1e82:	0501                	addi	a0,a0,0
    1e84:	0021                	c.nop	8
    1e86:	0402                	c.slli64	s0
    1e88:	097f0303          	lb	t1,151(t5)
    1e8c:	0002                	c.slli64	zero
    1e8e:	0501                	addi	a0,a0,0
    1e90:	0018                	0x18
    1e92:	0402                	c.slli64	s0
    1e94:	09010303          	lb	t1,144(sp)
    1e98:	0002                	c.slli64	zero
    1e9a:	0501                	addi	a0,a0,0
    1e9c:	0021                	c.nop	8
    1e9e:	0402                	c.slli64	s0
    1ea0:	7f030603          	lb	a2,2032(t1)
    1ea4:	0209                	addi	tp,tp,2
    1ea6:	0100                	addi	s0,sp,128
    1ea8:	4b05                	li	s6,1
    1eaa:	02090c03          	lb	s8,32(s2)
    1eae:	0100                	addi	s0,sp,128
    1eb0:	0505                	addi	a0,a0,1
    1eb2:	00090203          	lb	tp,0(s2)
    1eb6:	0100                	addi	s0,sp,128
    1eb8:	00090103          	lb	sp,0(s2)
    1ebc:	0100                	addi	s0,sp,128
    1ebe:	00090203          	lb	tp,0(s2)
    1ec2:	0100                	addi	s0,sp,128
    1ec4:	4b05                	li	s6,1
    1ec6:	0306                	slli	t1,t1,0x1
    1ec8:	0000097b          	0x97b
    1ecc:	0501                	addi	a0,a0,0
    1ece:	0309                	addi	t1,t1,2
    1ed0:	0905                	addi	s2,s2,1
    1ed2:	000c                	0xc
    1ed4:	0501                	addi	a0,a0,0
    1ed6:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    1eda:	0004                	0x4
    1edc:	0501                	addi	a0,a0,0
    1ede:	0309                	addi	t1,t1,2
    1ee0:	0905                	addi	s2,s2,1
    1ee2:	0002                	c.slli64	zero
    1ee4:	0501                	addi	a0,a0,0
    1ee6:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    1eea:	000a                	c.slli	zero,0x2
    1eec:	0301                	addi	t1,t1,0
    1eee:	0900                	addi	s0,sp,144
    1ef0:	0006                	c.slli	zero,0x1
    1ef2:	0501                	addi	a0,a0,0
    1ef4:	0309                	addi	t1,t1,2
    1ef6:	0905                	addi	s2,s2,1
    1ef8:	0004                	0x4
    1efa:	0501                	addi	a0,a0,0
    1efc:	0605                	addi	a2,a2,1
    1efe:	02090103          	lb	sp,32(s2)
    1f02:	0100                	addi	s0,sp,128
    1f04:	00090103          	lb	sp,0(s2)
    1f08:	0100                	addi	s0,sp,128
    1f0a:	00090303          	lb	t1,0(s2)
    1f0e:	0100                	addi	s0,sp,128
    1f10:	0c05                	addi	s8,s8,1
    1f12:	0306                	slli	t1,t1,0x1
    1f14:	0900                	addi	s0,sp,144
    1f16:	0000                	unimp
    1f18:	0501                	addi	a0,a0,0
    1f1a:	0302                	c.slli64	t1
    1f1c:	0905                	addi	s2,s2,1
    1f1e:	0012                	c.slli	zero,0x4
    1f20:	0501                	addi	a0,a0,0
    1f22:	030c                	addi	a1,sp,384
    1f24:	0006097b          	0x6097b
    1f28:	0501                	addi	a0,a0,0
    1f2a:	0602                	c.slli64	a2
    1f2c:	02090503          	lb	a0,32(s2)
    1f30:	0100                	addi	s0,sp,128
    1f32:	0a05                	addi	s4,s4,1
    1f34:	0306                	slli	t1,t1,0x1
    1f36:	0904                	addi	s1,sp,144
    1f38:	0000                	unimp
    1f3a:	0501                	addi	a0,a0,0
    1f3c:	0302                	c.slli64	t1
    1f3e:	097c                	addi	a5,sp,156
    1f40:	0004                	0x4
    1f42:	0501                	addi	a0,a0,0
    1f44:	0605                	addi	a2,a2,1
    1f46:	04090403          	lb	s0,64(s2)
    1f4a:	0100                	addi	s0,sp,128
    1f4c:	0a05                	addi	s4,s4,1
    1f4e:	0306                	slli	t1,t1,0x1
    1f50:	0900                	addi	s0,sp,144
    1f52:	0000                	unimp
    1f54:	0501                	addi	a0,a0,0
    1f56:	0605                	addi	a2,a2,1
    1f58:	10090203          	lb	tp,256(s2)
    1f5c:	0100                	addi	s0,sp,128
    1f5e:	1a05                	addi	s4,s4,-31
    1f60:	0306                	slli	t1,t1,0x1
    1f62:	0900                	addi	s0,sp,144
    1f64:	0000                	unimp
    1f66:	0501                	addi	a0,a0,0
    1f68:	0014                	0x14
    1f6a:	0402                	c.slli64	s0
    1f6c:	0601                	addi	a2,a2,0
    1f6e:	08090003          	lb	zero,128(s2)
    1f72:	0100                	addi	s0,sp,128
    1f74:	0505                	addi	a0,a0,1
    1f76:	0200                	addi	s0,sp,256
    1f78:	0104                	addi	s1,sp,128
    1f7a:	0306                	slli	t1,t1,0x1
    1f7c:	0900                	addi	s0,sp,144
    1f7e:	0000                	unimp
    1f80:	0501                	addi	a0,a0,0
    1f82:	0301                	addi	t1,t1,0
    1f84:	0909                	addi	s2,s2,2
    1f86:	0004                	0x4
    1f88:	0501                	addi	a0,a0,0
    1f8a:	0009                	c.nop	2
    1f8c:	0402                	c.slli64	s0
    1f8e:	78030603          	lb	a2,1920(t1)
    1f92:	1009                	c.nop	-30
    1f94:	0100                	addi	s0,sp,128
    1f96:	1905                	addi	s2,s2,-31
    1f98:	0200                	addi	s0,sp,256
    1f9a:	0304                	addi	s1,sp,384
    1f9c:	0306                	slli	t1,t1,0x1
    1f9e:	0900                	addi	s0,sp,144
    1fa0:	0000                	unimp
    1fa2:	0501                	addi	a0,a0,0
    1fa4:	001f 0402 0303      	0x3030402001f
    1faa:	097f                	0x97f
    1fac:	0008                	0x8
    1fae:	0501                	addi	a0,a0,0
    1fb0:	0015                	c.nop	5
    1fb2:	0402                	c.slli64	s0
    1fb4:	09010303          	lb	t1,144(sp)
    1fb8:	0004                	0x4
    1fba:	0501                	addi	a0,a0,0
    1fbc:	001f 0402 0603      	0x6030402001f
    1fc2:	04097f03          	0x4097f03
    1fc6:	0100                	addi	s0,sp,128
    1fc8:	6c05                	lui	s8,0x1
    1fca:	02090c03          	lb	s8,32(s2)
    1fce:	0100                	addi	s0,sp,128
    1fd0:	0505                	addi	a0,a0,1
    1fd2:	00090203          	lb	tp,0(s2)
    1fd6:	0100                	addi	s0,sp,128
    1fd8:	00090103          	lb	sp,0(s2)
    1fdc:	0100                	addi	s0,sp,128
    1fde:	00090103          	lb	sp,0(s2)
    1fe2:	0100                	addi	s0,sp,128
    1fe4:	00090103          	lb	sp,0(s2)
    1fe8:	0100                	addi	s0,sp,128
    1fea:	00090103          	lb	sp,0(s2)
    1fee:	0100                	addi	s0,sp,128
    1ff0:	00090103          	lb	sp,0(s2)
    1ff4:	0100                	addi	s0,sp,128
    1ff6:	00090303          	lb	t1,0(s2)
    1ffa:	0100                	addi	s0,sp,128
    1ffc:	6c05                	lui	s8,0x1
    1ffe:	0306                	slli	t1,t1,0x1
    2000:	0976                	slli	s2,s2,0x1d
    2002:	0000                	unimp
    2004:	0501                	addi	a0,a0,0
    2006:	031e                	slli	t1,t1,0x7
    2008:	0911                	addi	s2,s2,4
    200a:	0008                	0x8
    200c:	0501                	addi	a0,a0,0
    200e:	036c                	addi	a1,sp,396
    2010:	0006096f          	jal	s2,62010 <_stack_start+0x52010>
    2014:	0501                	addi	a0,a0,0
    2016:	0309                	addi	t1,t1,2
    2018:	090a                	slli	s2,s2,0x2
    201a:	000a                	c.slli	zero,0x2
    201c:	0501                	addi	a0,a0,0
    201e:	036c                	addi	a1,sp,396
    2020:	0976                	slli	s2,s2,0x1d
    2022:	0004                	0x4
    2024:	0501                	addi	a0,a0,0
    2026:	0309                	addi	t1,t1,2
    2028:	090a                	slli	s2,s2,0x2
    202a:	0004                	0x4
    202c:	0501                	addi	a0,a0,0
    202e:	036c                	addi	a1,sp,396
    2030:	0976                	slli	s2,s2,0x1d
    2032:	0004                	0x4
    2034:	0301                	addi	t1,t1,0
    2036:	0900                	addi	s0,sp,144
    2038:	0008                	0x8
    203a:	0501                	addi	a0,a0,0
    203c:	030a                	slli	t1,t1,0x2
    203e:	090e                	slli	s2,s2,0x3
    2040:	0002                	c.slli64	zero
    2042:	0501                	addi	a0,a0,0
    2044:	0309                	addi	t1,t1,2
    2046:	097c                	addi	a5,sp,156
    2048:	0004                	0x4
    204a:	0501                	addi	a0,a0,0
    204c:	0605                	addi	a2,a2,1
    204e:	04090403          	lb	s0,64(s2)
    2052:	0100                	addi	s0,sp,128
    2054:	0a05                	addi	s4,s4,1
    2056:	0306                	slli	t1,t1,0x1
    2058:	0900                	addi	s0,sp,144
    205a:	0000                	unimp
    205c:	0501                	addi	a0,a0,0
    205e:	0605                	addi	a2,a2,1
    2060:	12090303          	lb	t1,288(s2)
    2064:	0100                	addi	s0,sp,128
    2066:	0b05                	addi	s6,s6,1
    2068:	0306                	slli	t1,t1,0x1
    206a:	0900                	addi	s0,sp,144
    206c:	0004                	0x4
    206e:	0501                	addi	a0,a0,0
    2070:	0014                	0x14
    2072:	0402                	c.slli64	s0
    2074:	0601                	addi	a2,a2,0
    2076:	02090003          	lb	zero,32(s2)
    207a:	0100                	addi	s0,sp,128
    207c:	0505                	addi	a0,a0,1
    207e:	0200                	addi	s0,sp,256
    2080:	0104                	addi	s1,sp,128
    2082:	0306                	slli	t1,t1,0x1
    2084:	0900                	addi	s0,sp,144
    2086:	0000                	unimp
    2088:	0501                	addi	a0,a0,0
    208a:	0316                	slli	t1,t1,0x5
    208c:	0906                	slli	s2,s2,0x1
    208e:	0004                	0x4
    2090:	0501                	addi	a0,a0,0
    2092:	030c                	addi	a1,sp,384
    2094:	097f                	0x97f
    2096:	0006                	c.slli	zero,0x1
    2098:	0501                	addi	a0,a0,0
    209a:	0011                	c.nop	4
    209c:	0402                	c.slli64	s0
    209e:	0601                	addi	a2,a2,0
    20a0:	02090003          	lb	zero,32(s2)
    20a4:	0100                	addi	s0,sp,128
    20a6:	0505                	addi	a0,a0,1
    20a8:	0200                	addi	s0,sp,256
    20aa:	0104                	addi	s1,sp,128
    20ac:	0306                	slli	t1,t1,0x1
    20ae:	0900                	addi	s0,sp,144
    20b0:	0000                	unimp
    20b2:	0601                	addi	a2,a2,0
    20b4:	04090803          	lb	a6,64(s2)
    20b8:	0100                	addi	s0,sp,128
    20ba:	0905                	addi	s2,s2,1
    20bc:	0306                	slli	t1,t1,0x1
    20be:	0900                	addi	s0,sp,144
    20c0:	0000                	unimp
    20c2:	0501                	addi	a0,a0,0
    20c4:	0605                	addi	a2,a2,1
    20c6:	0c090403          	lb	s0,192(s2)
    20ca:	0100                	addi	s0,sp,128
    20cc:	0a05                	addi	s4,s4,1
    20ce:	0306                	slli	t1,t1,0x1
    20d0:	0900                	addi	s0,sp,144
    20d2:	0000                	unimp
    20d4:	0501                	addi	a0,a0,0
    20d6:	0605                	addi	a2,a2,1
    20d8:	0c090103          	lb	sp,192(s2)
    20dc:	0100                	addi	s0,sp,128
    20de:	1405                	addi	s0,s0,-31
    20e0:	0200                	addi	s0,sp,256
    20e2:	0104                	addi	s1,sp,128
    20e4:	02090003          	lb	zero,32(s2)
    20e8:	0100                	addi	s0,sp,128
    20ea:	0505                	addi	a0,a0,1
    20ec:	0200                	addi	s0,sp,256
    20ee:	0104                	addi	s1,sp,128
    20f0:	0306                	slli	t1,t1,0x1
    20f2:	0900                	addi	s0,sp,144
    20f4:	0000                	unimp
    20f6:	0501                	addi	a0,a0,0
    20f8:	0301                	addi	t1,t1,0
    20fa:	00040907          	0x40907
    20fe:	0501                	addi	a0,a0,0
    2100:	0009                	c.nop	2
    2102:	0402                	c.slli64	s0
    2104:	68030603          	lb	a2,1664(t1)
    2108:	1609                	addi	a2,a2,-30
    210a:	0100                	addi	s0,sp,128
    210c:	1905                	addi	s2,s2,-31
    210e:	0200                	addi	s0,sp,256
    2110:	0304                	addi	s1,sp,384
    2112:	0306                	slli	t1,t1,0x1
    2114:	0900                	addi	s0,sp,144
    2116:	0000                	unimp
    2118:	0501                	addi	a0,a0,0
    211a:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    211e:	097f0303          	lb	t1,151(t5)
    2122:	0008                	0x8
    2124:	0501                	addi	a0,a0,0
    2126:	0015                	c.nop	5
    2128:	0402                	c.slli64	s0
    212a:	09010303          	lb	t1,144(sp)
    212e:	0004                	0x4
    2130:	0501                	addi	a0,a0,0
    2132:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2136:	7f030603          	lb	a2,2032(t1)
    213a:	0409                	addi	s0,s0,2
    213c:	0100                	addi	s0,sp,128
    213e:	0905                	addi	s2,s2,1
    2140:	02090603          	lb	a2,32(s2)
    2144:	0100                	addi	s0,sp,128
    2146:	0e05                	addi	t3,t3,1
    2148:	0306                	slli	t1,t1,0x1
    214a:	0900                	addi	s0,sp,144
    214c:	0000                	unimp
    214e:	0501                	addi	a0,a0,0
    2150:	0900030b          	0x900030b
    2154:	0002                	c.slli64	zero
    2156:	0501                	addi	a0,a0,0
    2158:	060d                	addi	a2,a2,3
    215a:	04090303          	lb	t1,64(s2)
    215e:	0100                	addi	s0,sp,128
    2160:	1905                	addi	s2,s2,-31
    2162:	0306                	slli	t1,t1,0x1
    2164:	0900                	addi	s0,sp,144
    2166:	0000                	unimp
    2168:	0501                	addi	a0,a0,0
    216a:	09000313          	li	t1,144
    216e:	0004                	0x4
    2170:	0501                	addi	a0,a0,0
    2172:	0018                	0x18
    2174:	0402                	c.slli64	s0
    2176:	0602                	c.slli64	a2
    2178:	02097c03          	0x2097c03
    217c:	0100                	addi	s0,sp,128
    217e:	0905                	addi	s2,s2,1
    2180:	0200                	addi	s0,sp,256
    2182:	0304                	addi	s1,sp,384
    2184:	06090e03          	lb	t3,96(s2)
    2188:	0100                	addi	s0,sp,128
    218a:	1905                	addi	s2,s2,-31
    218c:	0200                	addi	s0,sp,256
    218e:	0304                	addi	s1,sp,384
    2190:	0306                	slli	t1,t1,0x1
    2192:	0900                	addi	s0,sp,144
    2194:	0000                	unimp
    2196:	0501                	addi	a0,a0,0
    2198:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    219c:	097f0303          	lb	t1,151(t5)
    21a0:	0008                	0x8
    21a2:	0501                	addi	a0,a0,0
    21a4:	0015                	c.nop	5
    21a6:	0402                	c.slli64	s0
    21a8:	09010303          	lb	t1,144(sp)
    21ac:	0004                	0x4
    21ae:	0501                	addi	a0,a0,0
    21b0:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    21b4:	7f030603          	lb	a2,2032(t1)
    21b8:	0409                	addi	s0,s0,2
    21ba:	0100                	addi	s0,sp,128
    21bc:	0209                	addi	tp,tp,2
    21be:	0000                	unimp
    21c0:	0101                	addi	sp,sp,0
    21c2:	0b05                	addi	s6,s6,1
    21c4:	0500                	addi	s0,sp,640
    21c6:	4402                	lw	s0,0(sp)
    21c8:	0300000f          	fence	rw,unknown
    21cc:	05010583          	lb	a1,80(sp)
    21d0:	0301                	addi	t1,t1,0
    21d2:	0901                	addi	s2,s2,0
    21d4:	0000                	unimp
    21d6:	0501                	addi	a0,a0,0
    21d8:	0305                	addi	t1,t1,1
    21da:	0901                	addi	s2,s2,0
    21dc:	0000                	unimp
    21de:	0301                	addi	t1,t1,0
    21e0:	0901                	addi	s2,s2,0
    21e2:	0000                	unimp
    21e4:	0301                	addi	t1,t1,0
    21e6:	0901                	addi	s2,s2,0
    21e8:	0000                	unimp
    21ea:	0301                	addi	t1,t1,0
    21ec:	0901                	addi	s2,s2,0
    21ee:	0000                	unimp
    21f0:	0301                	addi	t1,t1,0
    21f2:	0901                	addi	s2,s2,0
    21f4:	0000                	unimp
    21f6:	0301                	addi	t1,t1,0
    21f8:	0901                	addi	s2,s2,0
    21fa:	0000                	unimp
    21fc:	0301                	addi	t1,t1,0
    21fe:	0902                	c.slli64	s2
    2200:	0000                	unimp
    2202:	0501                	addi	a0,a0,0
    2204:	7703060b          	0x7703060b
    2208:	0009                	c.nop	2
    220a:	0100                	addi	s0,sp,128
    220c:	0905                	addi	s2,s2,1
    220e:	04090903          	lb	s2,64(s2)
    2212:	0100                	addi	s0,sp,128
    2214:	0b05                	addi	s6,s6,1
    2216:	0e097703          	0xe097703
    221a:	0100                	addi	s0,sp,128
    221c:	0f05                	addi	t5,t5,1
    221e:	10091903          	lh	s2,256(s2)
    2222:	0100                	addi	s0,sp,128
    2224:	0b05                	addi	s6,s6,1
    2226:	04096703          	0x4096703
    222a:	0100                	addi	s0,sp,128
    222c:	0905                	addi	s2,s2,1
    222e:	04090903          	lb	s2,64(s2)
    2232:	0100                	addi	s0,sp,128
    2234:	0505                	addi	a0,a0,1
    2236:	0306                	slli	t1,t1,0x1
    2238:	0901                	addi	s2,s2,0
    223a:	0002                	c.slli64	zero
    223c:	0301                	addi	t1,t1,0
    223e:	0901                	addi	s2,s2,0
    2240:	0000                	unimp
    2242:	0301                	addi	t1,t1,0
    2244:	0901                	addi	s2,s2,0
    2246:	0000                	unimp
    2248:	0301                	addi	t1,t1,0
    224a:	0901                	addi	s2,s2,0
    224c:	0000                	unimp
    224e:	0301                	addi	t1,t1,0
    2250:	0901                	addi	s2,s2,0
    2252:	0000                	unimp
    2254:	0301                	addi	t1,t1,0
    2256:	0901                	addi	s2,s2,0
    2258:	0000                	unimp
    225a:	0301                	addi	t1,t1,0
    225c:	0901                	addi	s2,s2,0
    225e:	0000                	unimp
    2260:	0501                	addi	a0,a0,0
    2262:	0302                	c.slli64	t1
    2264:	0909                	addi	s2,s2,2
    2266:	0000                	unimp
    2268:	0501                	addi	a0,a0,0
    226a:	0003060f          	0x3060f
    226e:	0009                	c.nop	2
    2270:	0100                	addi	s0,sp,128
    2272:	0305                	addi	t1,t1,1
    2274:	0306                	slli	t1,t1,0x1
    2276:	0901                	addi	s2,s2,0
    2278:	000e                	c.slli	zero,0x3
    227a:	0501                	addi	a0,a0,0
    227c:	00030613          	mv	a2,t1
    2280:	0009                	c.nop	2
    2282:	0100                	addi	s0,sp,128
    2284:	0805                	addi	a6,a6,1
    2286:	02090003          	lb	zero,32(s2)
    228a:	0100                	addi	s0,sp,128
    228c:	0c05                	addi	s8,s8,1
    228e:	02090203          	lb	tp,32(s2)
    2292:	0100                	addi	s0,sp,128
    2294:	0805                	addi	a6,a6,1
    2296:	04097e03          	0x4097e03
    229a:	0100                	addi	s0,sp,128
    229c:	0505                	addi	a0,a0,1
    229e:	0306                	slli	t1,t1,0x1
    22a0:	0902                	c.slli64	s2
    22a2:	0008                	0x8
    22a4:	0501                	addi	a0,a0,0
    22a6:	060c                	addi	a1,sp,768
    22a8:	00090003          	lb	zero,0(s2)
    22ac:	0100                	addi	s0,sp,128
    22ae:	0f05                	addi	t5,t5,1
    22b0:	06090103          	lb	sp,96(s2)
    22b4:	0100                	addi	s0,sp,128
    22b6:	0c05                	addi	s8,s8,1
    22b8:	04097f03          	0x4097f03
    22bc:	0100                	addi	s0,sp,128
    22be:	0205                	addi	tp,tp,1
    22c0:	0306                	slli	t1,t1,0x1
    22c2:	0901                	addi	s2,s2,0
    22c4:	0002                	c.slli64	zero
    22c6:	0501                	addi	a0,a0,0
    22c8:	0003060f          	0x3060f
    22cc:	0009                	c.nop	2
    22ce:	0100                	addi	s0,sp,128
    22d0:	0305                	addi	t1,t1,1
    22d2:	0306                	slli	t1,t1,0x1
    22d4:	0901                	addi	s2,s2,0
    22d6:	0002                	c.slli64	zero
    22d8:	0501                	addi	a0,a0,0
    22da:	00030613          	mv	a2,t1
    22de:	0009                	c.nop	2
    22e0:	0100                	addi	s0,sp,128
    22e2:	0505                	addi	a0,a0,1
    22e4:	02090303          	lb	t1,32(s2)
    22e8:	0100                	addi	s0,sp,128
    22ea:	0805                	addi	a6,a6,1
    22ec:	04097d03          	0x4097d03
    22f0:	0100                	addi	s0,sp,128
    22f2:	0505                	addi	a0,a0,1
    22f4:	0306                	slli	t1,t1,0x1
    22f6:	00080903          	lb	s2,0(a6)
    22fa:	0501                	addi	a0,a0,0
    22fc:	0310                	addi	a2,sp,384
    22fe:	0900                	addi	s0,sp,144
    2300:	0000                	unimp
    2302:	0501                	addi	a0,a0,0
    2304:	0608                	addi	a0,sp,768
    2306:	00097d03          	0x97d03
    230a:	0100                	addi	s0,sp,128
    230c:	0905                	addi	s2,s2,1
    230e:	0200                	addi	s0,sp,256
    2310:	0304                	addi	s1,sp,384
    2312:	0306                	slli	t1,t1,0x1
    2314:	0905                	addi	s2,s2,1
    2316:	0002                	c.slli64	zero
    2318:	0501                	addi	a0,a0,0
    231a:	001f 0402 0603      	0x6030402001f
    2320:	00090003          	lb	zero,0(s2)
    2324:	0100                	addi	s0,sp,128
    2326:	1905                	addi	s2,s2,-31
    2328:	0200                	addi	s0,sp,256
    232a:	0304                	addi	s1,sp,384
    232c:	06090003          	lb	zero,96(s2)
    2330:	0100                	addi	s0,sp,128
    2332:	1705                	addi	a4,a4,-31
    2334:	0200                	addi	s0,sp,256
    2336:	0304                	addi	s1,sp,384
    2338:	0306                	slli	t1,t1,0x1
    233a:	097e                	slli	s2,s2,0x1f
    233c:	0006                	c.slli	zero,0x1
    233e:	0501                	addi	a0,a0,0
    2340:	0010                	0x10
    2342:	0402                	c.slli64	s0
    2344:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2348:	0000                	unimp
    234a:	0501                	addi	a0,a0,0
    234c:	0005                	c.nop	1
    234e:	0402                	c.slli64	s0
    2350:	00030603          	lb	a2,0(t1)
    2354:	0209                	addi	tp,tp,2
    2356:	0100                	addi	s0,sp,128
    2358:	0905                	addi	s2,s2,1
    235a:	0200                	addi	s0,sp,256
    235c:	0304                	addi	s1,sp,384
    235e:	0306                	slli	t1,t1,0x1
    2360:	0909                	addi	s2,s2,2
    2362:	0004                	0x4
    2364:	0501                	addi	a0,a0,0
    2366:	0402001b          	0x402001b
    236a:	097e0303          	lb	t1,151(t3)
    236e:	0000                	unimp
    2370:	0501                	addi	a0,a0,0
    2372:	0010                	0x10
    2374:	0402                	c.slli64	s0
    2376:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    237a:	0000                	unimp
    237c:	0501                	addi	a0,a0,0
    237e:	0009                	c.nop	2
    2380:	0402                	c.slli64	s0
    2382:	09090303          	lb	t1,144(s2)
    2386:	000c                	0xc
    2388:	0501                	addi	a0,a0,0
    238a:	0026                	c.slli	zero,0x9
    238c:	0402                	c.slli64	s0
    238e:	00030603          	lb	a2,0(t1)
    2392:	0009                	c.nop	2
    2394:	0100                	addi	s0,sp,128
    2396:	2005                	jal	23b6 <_bss_end+0x3ae>
    2398:	0200                	addi	s0,sp,256
    239a:	0304                	addi	s1,sp,384
    239c:	06090003          	lb	zero,96(s2)
    23a0:	0100                	addi	s0,sp,128
    23a2:	1f05                	addi	t5,t5,-31
    23a4:	0200                	addi	s0,sp,256
    23a6:	0304                	addi	s1,sp,384
    23a8:	0306                	slli	t1,t1,0x1
    23aa:	097e                	slli	s2,s2,0x1f
    23ac:	0004                	0x4
    23ae:	0501                	addi	a0,a0,0
    23b0:	0014                	0x14
    23b2:	0402                	c.slli64	s0
    23b4:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    23b8:	0000                	unimp
    23ba:	0501                	addi	a0,a0,0
    23bc:	0005                	c.nop	1
    23be:	0402                	c.slli64	s0
    23c0:	00030603          	lb	a2,0(t1)
    23c4:	0009                	c.nop	2
    23c6:	0100                	addi	s0,sp,128
    23c8:	0905                	addi	s2,s2,1
    23ca:	0200                	addi	s0,sp,256
    23cc:	0304                	addi	s1,sp,384
    23ce:	0306                	slli	t1,t1,0x1
    23d0:	0909                	addi	s2,s2,2
    23d2:	0004                	0x4
    23d4:	0501                	addi	a0,a0,0
    23d6:	001f 0402 0303      	0x3030402001f
    23dc:	097e                	slli	s2,s2,0x1f
    23de:	0000                	unimp
    23e0:	0501                	addi	a0,a0,0
    23e2:	0014                	0x14
    23e4:	0402                	c.slli64	s0
    23e6:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    23ea:	0000                	unimp
    23ec:	0501                	addi	a0,a0,0
    23ee:	0009                	c.nop	2
    23f0:	0402                	c.slli64	s0
    23f2:	09090303          	lb	t1,144(s2)
    23f6:	000c                	0xc
    23f8:	0501                	addi	a0,a0,0
    23fa:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    23fe:	00030603          	lb	a2,0(t1)
    2402:	0009                	c.nop	2
    2404:	0100                	addi	s0,sp,128
    2406:	1d05                	addi	s10,s10,-31
    2408:	0200                	addi	s0,sp,256
    240a:	0304                	addi	s1,sp,384
    240c:	06090003          	lb	zero,96(s2)
    2410:	0100                	addi	s0,sp,128
    2412:	1f05                	addi	t5,t5,-31
    2414:	0200                	addi	s0,sp,256
    2416:	0304                	addi	s1,sp,384
    2418:	0306                	slli	t1,t1,0x1
    241a:	097e                	slli	s2,s2,0x1f
    241c:	0004                	0x4
    241e:	0501                	addi	a0,a0,0
    2420:	0014                	0x14
    2422:	0402                	c.slli64	s0
    2424:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2428:	0000                	unimp
    242a:	0501                	addi	a0,a0,0
    242c:	0005                	c.nop	1
    242e:	0402                	c.slli64	s0
    2430:	00030603          	lb	a2,0(t1)
    2434:	0009                	c.nop	2
    2436:	0100                	addi	s0,sp,128
    2438:	0905                	addi	s2,s2,1
    243a:	0200                	addi	s0,sp,256
    243c:	0304                	addi	s1,sp,384
    243e:	0306                	slli	t1,t1,0x1
    2440:	0909                	addi	s2,s2,2
    2442:	000c                	0xc
    2444:	0501                	addi	a0,a0,0
    2446:	0022                	c.slli	zero,0x8
    2448:	0402                	c.slli64	s0
    244a:	00030603          	lb	a2,0(t1)
    244e:	0009                	c.nop	2
    2450:	0100                	addi	s0,sp,128
    2452:	1c05                	addi	s8,s8,-31
    2454:	0200                	addi	s0,sp,256
    2456:	0304                	addi	s1,sp,384
    2458:	06090003          	lb	zero,96(s2)
    245c:	0100                	addi	s0,sp,128
    245e:	2105                	jal	287e <_bss_end+0x876>
    2460:	0200                	addi	s0,sp,256
    2462:	0304                	addi	s1,sp,384
    2464:	0306                	slli	t1,t1,0x1
    2466:	097e                	slli	s2,s2,0x1f
    2468:	0004                	0x4
    246a:	0501                	addi	a0,a0,0
    246c:	0014                	0x14
    246e:	0402                	c.slli64	s0
    2470:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2474:	0000                	unimp
    2476:	0501                	addi	a0,a0,0
    2478:	0005                	c.nop	1
    247a:	0402                	c.slli64	s0
    247c:	00030603          	lb	a2,0(t1)
    2480:	0009                	c.nop	2
    2482:	0100                	addi	s0,sp,128
    2484:	0205                	addi	tp,tp,1
    2486:	0306                	slli	t1,t1,0x1
    2488:	0908                	addi	a0,sp,144
    248a:	0004                	0x4
    248c:	0501                	addi	a0,a0,0
    248e:	0003060f          	0x3060f
    2492:	0009                	c.nop	2
    2494:	0100                	addi	s0,sp,128
    2496:	0305                	addi	t1,t1,1
    2498:	0306                	slli	t1,t1,0x1
    249a:	0901                	addi	s2,s2,0
    249c:	000a                	c.slli	zero,0x2
    249e:	0501                	addi	a0,a0,0
    24a0:	00030613          	mv	a2,t1
    24a4:	0009                	c.nop	2
    24a6:	0100                	addi	s0,sp,128
    24a8:	0805                	addi	a6,a6,1
    24aa:	02090003          	lb	zero,32(s2)
    24ae:	0100                	addi	s0,sp,128
    24b0:	1305                	addi	t1,t1,-31
    24b2:	02090103          	lb	sp,32(s2)
    24b6:	0100                	addi	s0,sp,128
    24b8:	0805                	addi	a6,a6,1
    24ba:	02097f03          	0x2097f03
    24be:	0100                	addi	s0,sp,128
    24c0:	0505                	addi	a0,a0,1
    24c2:	0306                	slli	t1,t1,0x1
    24c4:	0901                	addi	s2,s2,0
    24c6:	0008                	0x8
    24c8:	0501                	addi	a0,a0,0
    24ca:	00030613          	mv	a2,t1
    24ce:	0009                	c.nop	2
    24d0:	0100                	addi	s0,sp,128
    24d2:	0f05                	addi	t5,t5,1
    24d4:	06090103          	lb	sp,96(s2)
    24d8:	0100                	addi	s0,sp,128
    24da:	1305                	addi	t1,t1,-31
    24dc:	04097f03          	0x4097f03
    24e0:	0100                	addi	s0,sp,128
    24e2:	0f05                	addi	t5,t5,1
    24e4:	06090103          	lb	sp,96(s2)
    24e8:	0100                	addi	s0,sp,128
    24ea:	1305                	addi	t1,t1,-31
    24ec:	04090103          	lb	sp,64(s2)
    24f0:	0100                	addi	s0,sp,128
    24f2:	0f05                	addi	t5,t5,1
    24f4:	02090903          	lb	s2,32(s2)
    24f8:	0100                	addi	s0,sp,128
    24fa:	0805                	addi	a6,a6,1
    24fc:	08097703          	0x8097703
    2500:	0100                	addi	s0,sp,128
    2502:	0f05                	addi	t5,t5,1
    2504:	08090903          	lb	s2,128(s2)
    2508:	0100                	addi	s0,sp,128
    250a:	1305                	addi	t1,t1,-31
    250c:	02090103          	lb	sp,32(s2)
    2510:	0100                	addi	s0,sp,128
    2512:	02097403          	0x2097403
    2516:	0100                	addi	s0,sp,128
    2518:	0205                	addi	tp,tp,1
    251a:	0306                	slli	t1,t1,0x1
    251c:	0901                	addi	s2,s2,0
    251e:	0002                	c.slli64	zero
    2520:	0501                	addi	a0,a0,0
    2522:	09010303          	lb	t1,144(sp)
    2526:	0000                	unimp
    2528:	0501                	addi	a0,a0,0
    252a:	0302                	c.slli64	t1
    252c:	0909                	addi	s2,s2,2
    252e:	0000                	unimp
    2530:	0501                	addi	a0,a0,0
    2532:	09010303          	lb	t1,144(sp)
    2536:	0000                	unimp
    2538:	0501                	addi	a0,a0,0
    253a:	01030613          	addi	a2,t1,16
    253e:	0009                	c.nop	2
    2540:	0100                	addi	s0,sp,128
    2542:	0805                	addi	a6,a6,1
    2544:	04097f03          	0x4097f03
    2548:	0100                	addi	s0,sp,128
    254a:	0505                	addi	a0,a0,1
    254c:	0306                	slli	t1,t1,0x1
    254e:	0901                	addi	s2,s2,0
    2550:	0008                	0x8
    2552:	0501                	addi	a0,a0,0
    2554:	00030613          	mv	a2,t1
    2558:	0009                	c.nop	2
    255a:	0100                	addi	s0,sp,128
    255c:	0f05                	addi	t5,t5,1
    255e:	0e090103          	lb	sp,224(s2)
    2562:	0100                	addi	s0,sp,128
    2564:	1305                	addi	t1,t1,-31
    2566:	04097f03          	0x4097f03
    256a:	0100                	addi	s0,sp,128
    256c:	0205                	addi	tp,tp,1
    256e:	0306                	slli	t1,t1,0x1
    2570:	0901                	addi	s2,s2,0
    2572:	0002                	c.slli64	zero
    2574:	0501                	addi	a0,a0,0
    2576:	0003060f          	0x3060f
    257a:	0009                	c.nop	2
    257c:	0100                	addi	s0,sp,128
    257e:	0305                	addi	t1,t1,1
    2580:	0306                	slli	t1,t1,0x1
    2582:	0901                	addi	s2,s2,0
    2584:	0004                	0x4
    2586:	0501                	addi	a0,a0,0
    2588:	00030613          	mv	a2,t1
    258c:	0009                	c.nop	2
    258e:	0100                	addi	s0,sp,128
    2590:	1a05                	addi	s4,s4,-31
    2592:	02091b03          	lh	s6,32(s2)
    2596:	0100                	addi	s0,sp,128
    2598:	0805                	addi	a6,a6,1
    259a:	08096503          	0x8096503
    259e:	0100                	addi	s0,sp,128
    25a0:	0505                	addi	a0,a0,1
    25a2:	0306                	slli	t1,t1,0x1
    25a4:	00080913          	mv	s2,a6
    25a8:	0501                	addi	a0,a0,0
    25aa:	0310                	addi	a2,sp,384
    25ac:	0900                	addi	s0,sp,144
    25ae:	0000                	unimp
    25b0:	0501                	addi	a0,a0,0
    25b2:	0903060b          	0x903060b
    25b6:	0009                	c.nop	2
    25b8:	0100                	addi	s0,sp,128
    25ba:	0805                	addi	a6,a6,1
    25bc:	02096403          	0x2096403
    25c0:	0100                	addi	s0,sp,128
    25c2:	0505                	addi	a0,a0,1
    25c4:	02091303          	lh	t1,32(s2)
    25c8:	0100                	addi	s0,sp,128
    25ca:	0905                	addi	s2,s2,1
    25cc:	0306                	slli	t1,t1,0x1
    25ce:	0901                	addi	s2,s2,0
    25d0:	0004                	0x4
    25d2:	0501                	addi	a0,a0,0
    25d4:	0003060b          	0x3060b
    25d8:	0009                	c.nop	2
    25da:	0100                	addi	s0,sp,128
    25dc:	2705                	jal	2cfc <_bss_end+0xcf4>
    25de:	02090003          	lb	zero,32(s2)
    25e2:	0100                	addi	s0,sp,128
    25e4:	0b05                	addi	s6,s6,1
    25e6:	04090003          	lb	zero,64(s2)
    25ea:	0100                	addi	s0,sp,128
    25ec:	0d05                	addi	s10,s10,1
    25ee:	0306                	slli	t1,t1,0x1
    25f0:	0902                	c.slli64	s2
    25f2:	000a                	c.slli	zero,0x2
    25f4:	0501                	addi	a0,a0,0
    25f6:	061a                	slli	a2,a2,0x6
    25f8:	00090003          	lb	zero,0(s2)
    25fc:	0100                	addi	s0,sp,128
    25fe:	0705                	addi	a4,a4,1
    2600:	0306                	slli	t1,t1,0x1
    2602:	0901                	addi	s2,s2,0
    2604:	000a                	c.slli	zero,0x2
    2606:	0501                	addi	a0,a0,0
    2608:	00030617          	auipc	a2,0x30
    260c:	0009                	c.nop	2
    260e:	0100                	addi	s0,sp,128
    2610:	0c05                	addi	s8,s8,1
    2612:	02090003          	lb	zero,32(s2)
    2616:	0100                	addi	s0,sp,128
    2618:	0d05                	addi	s10,s10,1
    261a:	0306                	slli	t1,t1,0x1
    261c:	0901                	addi	s2,s2,0
    261e:	000a                	c.slli	zero,0x2
    2620:	0501                	addi	a0,a0,0
    2622:	0305                	addi	t1,t1,1
    2624:	090c                	addi	a1,sp,144
    2626:	0000                	unimp
    2628:	0501                	addi	a0,a0,0
    262a:	0601                	addi	a2,a2,0
    262c:	00090103          	lb	sp,0(s2)
    2630:	0100                	addi	s0,sp,128
    2632:	0d05                	addi	s10,s10,1
    2634:	0200                	addi	s0,sp,256
    2636:	0204                	addi	s1,sp,256
    2638:	0306                	slli	t1,t1,0x1
    263a:	0976                	slli	s2,s2,0x1d
    263c:	001c                	0x1c
    263e:	0501                	addi	a0,a0,0
    2640:	001a                	c.slli	zero,0x6
    2642:	0402                	c.slli64	s0
    2644:	0602                	c.slli64	a2
    2646:	00090003          	lb	zero,0(s2)
    264a:	0100                	addi	s0,sp,128
    264c:	0605                	addi	a2,a2,1
    264e:	0200                	addi	s0,sp,256
    2650:	0204                	addi	s1,sp,256
    2652:	0306                	slli	t1,t1,0x1
    2654:	0901                	addi	s2,s2,0
    2656:	0002                	c.slli64	zero
    2658:	0501                	addi	a0,a0,0
    265a:	0016                	c.slli	zero,0x5
    265c:	0402                	c.slli64	s0
    265e:	0602                	c.slli64	a2
    2660:	00090003          	lb	zero,0(s2)
    2664:	0100                	addi	s0,sp,128
    2666:	0b05                	addi	s6,s6,1
    2668:	0200                	addi	s0,sp,256
    266a:	0204                	addi	s1,sp,256
    266c:	04090003          	lb	zero,64(s2)
    2670:	0100                	addi	s0,sp,128
    2672:	1805                	addi	a6,a6,-31
    2674:	0200                	addi	s0,sp,256
    2676:	0204                	addi	s1,sp,256
    2678:	0306                	slli	t1,t1,0x1
    267a:	00080977          	0x80977
    267e:	0501                	addi	a0,a0,0
    2680:	0010                	0x10
    2682:	0402                	c.slli64	s0
    2684:	0302                	c.slli64	t1
    2686:	0900                	addi	s0,sp,144
    2688:	0000                	unimp
    268a:	0501                	addi	a0,a0,0
    268c:	0005                	c.nop	1
    268e:	0402                	c.slli64	s0
    2690:	0602                	c.slli64	a2
    2692:	00090003          	lb	zero,0(s2)
    2696:	0100                	addi	s0,sp,128
    2698:	0609                	addi	a2,a2,2
    269a:	0000                	unimp
    269c:	0101                	addi	sp,sp,0
    269e:	0150                	addi	a2,sp,132
    26a0:	0000                	unimp
    26a2:	001d0003          	lb	zero,1(s10)
    26a6:	0000                	unimp
    26a8:	0101                	addi	sp,sp,0
    26aa:	000d0efb          	0xd0efb
    26ae:	0101                	addi	sp,sp,0
    26b0:	0101                	addi	sp,sp,0
    26b2:	0000                	unimp
    26b4:	0100                	addi	s0,sp,128
    26b6:	0000                	unimp
    26b8:	0001                	nop
    26ba:	30747263          	bgeu	s0,t2,29be <_bss_end+0x9b6>
    26be:	532e                	lw	t1,232(sp)
    26c0:	0000                	unimp
    26c2:	0000                	unimp
    26c4:	0000                	unimp
    26c6:	0205                	addi	tp,tp,1
    26c8:	0d48                	addi	a0,sp,660
    26ca:	0000                	unimp
    26cc:	0315                	addi	t1,t1,5
    26ce:	0904                	addi	s1,sp,144
    26d0:	0004                	0x4
    26d2:	0301                	addi	t1,t1,0
    26d4:	0901                	addi	s2,s2,0
    26d6:	0004                	0x4
    26d8:	0301                	addi	t1,t1,0
    26da:	0901                	addi	s2,s2,0
    26dc:	0002                	c.slli64	zero
    26de:	0301                	addi	t1,t1,0
    26e0:	0901                	addi	s2,s2,0
    26e2:	0002                	c.slli64	zero
    26e4:	0301                	addi	t1,t1,0
    26e6:	0901                	addi	s2,s2,0
    26e8:	0002                	c.slli64	zero
    26ea:	0301                	addi	t1,t1,0
    26ec:	0901                	addi	s2,s2,0
    26ee:	0002                	c.slli64	zero
    26f0:	0301                	addi	t1,t1,0
    26f2:	0901                	addi	s2,s2,0
    26f4:	0002                	c.slli64	zero
    26f6:	0301                	addi	t1,t1,0
    26f8:	0901                	addi	s2,s2,0
    26fa:	0002                	c.slli64	zero
    26fc:	0301                	addi	t1,t1,0
    26fe:	0901                	addi	s2,s2,0
    2700:	0002                	c.slli64	zero
    2702:	0301                	addi	t1,t1,0
    2704:	0901                	addi	s2,s2,0
    2706:	0002                	c.slli64	zero
    2708:	0301                	addi	t1,t1,0
    270a:	0901                	addi	s2,s2,0
    270c:	0002                	c.slli64	zero
    270e:	0301                	addi	t1,t1,0
    2710:	0901                	addi	s2,s2,0
    2712:	0002                	c.slli64	zero
    2714:	0301                	addi	t1,t1,0
    2716:	0901                	addi	s2,s2,0
    2718:	0002                	c.slli64	zero
    271a:	0301                	addi	t1,t1,0
    271c:	0901                	addi	s2,s2,0
    271e:	0002                	c.slli64	zero
    2720:	0301                	addi	t1,t1,0
    2722:	0901                	addi	s2,s2,0
    2724:	0002                	c.slli64	zero
    2726:	0301                	addi	t1,t1,0
    2728:	0901                	addi	s2,s2,0
    272a:	0002                	c.slli64	zero
    272c:	0301                	addi	t1,t1,0
    272e:	0901                	addi	s2,s2,0
    2730:	0002                	c.slli64	zero
    2732:	0301                	addi	t1,t1,0
    2734:	0901                	addi	s2,s2,0
    2736:	0002                	c.slli64	zero
    2738:	0301                	addi	t1,t1,0
    273a:	0901                	addi	s2,s2,0
    273c:	0002                	c.slli64	zero
    273e:	0301                	addi	t1,t1,0
    2740:	0901                	addi	s2,s2,0
    2742:	0002                	c.slli64	zero
    2744:	0301                	addi	t1,t1,0
    2746:	0901                	addi	s2,s2,0
    2748:	0002                	c.slli64	zero
    274a:	0301                	addi	t1,t1,0
    274c:	0901                	addi	s2,s2,0
    274e:	0002                	c.slli64	zero
    2750:	0301                	addi	t1,t1,0
    2752:	0901                	addi	s2,s2,0
    2754:	0002                	c.slli64	zero
    2756:	0301                	addi	t1,t1,0
    2758:	0901                	addi	s2,s2,0
    275a:	0002                	c.slli64	zero
    275c:	0301                	addi	t1,t1,0
    275e:	0901                	addi	s2,s2,0
    2760:	0002                	c.slli64	zero
    2762:	0301                	addi	t1,t1,0
    2764:	0901                	addi	s2,s2,0
    2766:	0002                	c.slli64	zero
    2768:	0301                	addi	t1,t1,0
    276a:	0901                	addi	s2,s2,0
    276c:	0002                	c.slli64	zero
    276e:	0301                	addi	t1,t1,0
    2770:	0901                	addi	s2,s2,0
    2772:	0002                	c.slli64	zero
    2774:	0301                	addi	t1,t1,0
    2776:	0901                	addi	s2,s2,0
    2778:	0002                	c.slli64	zero
    277a:	0301                	addi	t1,t1,0
    277c:	0901                	addi	s2,s2,0
    277e:	0002                	c.slli64	zero
    2780:	0301                	addi	t1,t1,0
    2782:	0901                	addi	s2,s2,0
    2784:	0002                	c.slli64	zero
    2786:	0301                	addi	t1,t1,0
    2788:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    278c:	0301                	addi	t1,t1,0
    278e:	0906                	slli	s2,s2,0x1
    2790:	0008                	0x8
    2792:	0301                	addi	t1,t1,0
    2794:	0901                	addi	s2,s2,0
    2796:	0008                	0x8
    2798:	0301                	addi	t1,t1,0
    279a:	0902                	c.slli64	s2
    279c:	0008                	0x8
    279e:	0301                	addi	t1,t1,0
    27a0:	00040903          	lb	s2,0(s0)
    27a4:	0301                	addi	t1,t1,0
    27a6:	0901                	addi	s2,s2,0
    27a8:	0004                	0x4
    27aa:	0301                	addi	t1,t1,0
    27ac:	0901                	addi	s2,s2,0
    27ae:	0002                	c.slli64	zero
    27b0:	0301                	addi	t1,t1,0
    27b2:	0906                	slli	s2,s2,0x1
    27b4:	0004                	0x4
    27b6:	0301                	addi	t1,t1,0
    27b8:	0901                	addi	s2,s2,0
    27ba:	0004                	0x4
    27bc:	0301                	addi	t1,t1,0
    27be:	0901                	addi	s2,s2,0
    27c0:	0004                	0x4
    27c2:	0901                	addi	s2,s2,0
    27c4:	0004                	0x4
    27c6:	0100                	addi	s0,sp,128
    27c8:	0001                	nop
    27ca:	0205                	addi	tp,tp,1
    27cc:	0000                	unimp
    27ce:	0000                	unimp
    27d0:	0100cb03          	lbu	s6,16(ra)
    27d4:	7c090103          	lb	sp,1984(s2)
    27d8:	0100                	addi	s0,sp,128
    27da:	04090403          	lb	s0,64(s2)
    27de:	0100                	addi	s0,sp,128
    27e0:	04090403          	lb	s0,64(s2)
    27e4:	0100                	addi	s0,sp,128
    27e6:	04090403          	lb	s0,64(s2)
    27ea:	0100                	addi	s0,sp,128
    27ec:	0409                	addi	s0,s0,2
    27ee:	0000                	unimp
    27f0:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	5f5f 6975 746e      	0x746e69755f5f
  3a:	5f38                	lw	a4,120(a4)
  3c:	0074                	addi	a3,sp,12
  3e:	645f 7461 0061      	0x617461645f
  44:	6e69                	lui	t3,0x1a
  46:	5f727473          	csrrci	s0,0x5f7,4
  4a:	6461                	lui	s0,0x18
  4c:	0064                	addi	s1,sp,12
  4e:	775f 7263 6f74      	0x6f747263775f
  54:	626d                	lui	tp,0x1b
  56:	735f 6174 6574      	0x65746174735f
  5c:	5f00                	lw	s0,56(a4)
  5e:	72736377          	0x72736377
  62:	6f74                	flw	fa3,92(a4)
  64:	626d                	lui	tp,0x1b
  66:	74735f73          	csrrwi	t5,0x747,6
  6a:	7461                	lui	s0,0xffff8
  6c:	0065                	c.nop	25
  6e:	5f5f 7562 6c69      	0x6c6975625f5f
  74:	6974                	flw	fa3,84(a0)
  76:	5f6e                	lw	t5,248(sp)
  78:	656d                	lui	a0,0x1b
  7a:	736d                	lui	t1,0xffffb
  jal x0, default_exc_handler
  7c:	7465                	lui	s0,0xffff9
  7e:	6c00                	flw	fs0,24(s0)
  jal x0, reset_handler
  80:	20676e6f          	jal	t3,76286 <_stack_start+0x66286>
  jal x0, default_exc_handler
  84:	6f6c                	flw	fa1,92(a4)
  86:	676e                	flw	fa4,216(sp)
  jal x0, default_exc_handler
  88:	7520                	flw	fs0,104(a0)
  8a:	736e                	flw	ft6,248(sp)
    asm volatile(
  8c:	6769                	lui	a4,0x1a
  8e:	656e                	flw	fa0,216(sp)
}
  90:	2064                	fld	fs1,192(s0)
    for(i=0;i<(length/3);i++) {
  92:	6e69                	lui	t3,0x1a
  94:	0074                	addi	a3,sp,12
  96:	6544                	flw	fs1,12(a0)
  98:	654d5f63          	bge	s10,s4,6f6 <ext_euclid+0x3c>
  9c:	67617373          	csrrci	t1,0x676,2
}
  a0:	0065                	c.nop	25
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	6c5f 6662 6973      	0x697366626c5f
    asm volatile(
  a8:	657a                	flw	fa0,156(sp)
  aa:	7200                	flw	fs0,32(a2)
  ac:	6e61                	lui	t3,0x18
  ae:	6f64                	flw	fs1,92(a4)
    for(i=0;i<(length/3);i++) {
  b0:	5f6d                	li	t5,-5
  b2:	7379656b          	0x7379656b
    asm volatile(
  b6:	5f00                	lw	s0,56(a4)
}
  b8:	6c5f 636f 6c61      	0x6c61636f6c5f
    for(i=0;i<(length/3);i++) {
  be:	5f65                	li	t5,-7
    asm volatile(
  c0:	0074                	addi	a3,sp,12
    for(i=0;i<(length/3);i++) {
  c2:	72636573          	csrrsi	a0,0x726,6
  c6:	7465                	lui	s0,0xffff9
}
  c8:	6b5f 7965 665f      	0x665f79656b5f
    asm volatile(
  ce:	7300                	flw	fs0,32(a4)
  d0:	6365                	lui	t1,0x19
  d2:	6572                	flw	fa0,28(sp)
    for(i=0;i<(length/3);i++) {
  d4:	5f74                	lw	a3,124(a4)
  d6:	5f79656b          	0x5f79656b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  da:	6d5f0067          	jr	1749(t5)
  de:	7262                	flw	ft4,56(sp)
  e0:	6f74                	flw	fa3,92(a4)
  e2:	735f6377          	0x735f6377
    int line[size_b][size_a + size_b];
  e6:	6174                	flw	fa3,68(a0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  e8:	6574                	flw	fa3,76(a0)
  ea:	5f00                	lw	s0,56(a4)
    int line[size_b][size_a + size_b];
  ec:	6f746377          	0x6f746377
  f0:	626d                	lui	tp,0x1b
  f2:	735f 6174 6574      	0x65746174735f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  f8:	5f00                	lw	s0,56(a4)
  fa:	745f 5f6d 6573      	0x65735f6d745f
 100:	6f6c0063          	beq	s8,s6,7e0 <ext_euclid+0x126>
 104:	676e                	flw	fa4,216(sp)
 106:	6c20                	flw	fs0,88(s0)
 108:	20676e6f          	jal	t3,7630e <_stack_start+0x6630e>
 10c:	6e69                	lui	t3,0x1a
 10e:	0074                	addi	a3,sp,12
    int line[size_b][size_a + size_b];
 110:	657a6973          	csrrsi	s2,0x657,20
    int pola[size_a];
 114:	4e5f 6900 736e      	0x736e69004e5f
    int line[size_b][size_a + size_b];
 11a:	7274                	flw	fa3,100(a2)
 11c:	6d5f 646f 7000      	0x7000646f6d5f
    int polb[size_b];
 122:	6d796c6f          	jal	s8,96ff8 <_stack_start+0x86ff8>
 126:	6c75                	lui	s8,0x1d
    int pola[size_a];
 128:	0074                	addi	a3,sp,12
 12a:	755f 7562 0066      	0x667562755f
    int polb[size_b];
 130:	625f 7361 0065      	0x657361625f
    int line[size_b][size_a + size_b];
 136:	5f5f 6d74 685f      	0x685f6d745f5f
    int pola[size_a];
 13c:	0072756f          	jal	a0,27942 <_stack_start+0x17942>
    for (i = 0; i < size_b; ++i){
 140:	5f5f 6673 5f00      	0x5f0066735f5f
            product[j] = 0;
 146:	655f6e6f          	jal	t3,f6f9a <_stack_start+0xe6f9a>
 14a:	6978                	flw	fa4,84(a0)
 14c:	5f74                	lw	a3,124(a4)
    for (i = 0; i < size_b; ++i){
 14e:	7261                	lui	tp,0xffff8
 150:	5f007367          	0x5f007367
    for (i = 0; i < size_a; ++i){
 154:	6b6f6f63          	bltu	t5,s6,812 <ext_euclid+0x158>
	array_mod(pola,mod,size_a);
 158:	6569                	lui	a0,0x1a
 15a:	5f00                	lw	s0,56(a4)
 15c:	735f 6c67 6575      	0x65756c67735f
 162:	7200                	flw	fs0,32(a2)
    for (i = 0; i < size_b; ++i){
 164:	7365                	lui	t1,0xffff9
 166:	0031                	c.nop	12
 168:	6572                	flw	fa0,28(sp)
 16a:	5f003273          	csrrc	tp,0x5f0,zero
	array_mod(polb,mod,size_b);
 16e:	6c66                	flw	fs8,88(sp)
 170:	6761                	lui	a4,0x18
 172:	695f0073          	0x695f0073
    if(star_mult == 1){
 176:	78635f73          	csrrwi	t5,0x786,6
 17a:	0061                	c.nop	24
 17c:	735f 6474 6e69      	0x6e696474735f
 182:	5f00                	lw	s0,56(a4)
 184:	6c62                	flw	fs8,24(sp)
 186:	7a69736b          	0x7a69736b
        for (j = size_b -1; j >= 0; j = j-1){
 18a:	0065                	c.nop	25
 18c:	7270                	flw	fa2,100(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 18e:	6375646f          	jal	s0,56fc4 <_stack_start+0x46fc4>
            product[j] = 0;
 192:	0074                	addi	a3,sp,12
 194:	6f70                	flw	fa2,92(a4)
 196:	796c                	flw	fa1,116(a0)
            line[i][j] = 0;
 198:	6964                	flw	fs1,84(a0)
 19a:	0076                	c.slli	zero,0x1d
            product[j] = 0;
 19c:	6f70                	flw	fa2,92(a4)
 19e:	796c                	flw	fa1,116(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
 1a0:	0066                	c.slli	zero,0x19
 1a2:	635f 7476 7562      	0x75627476635f
    for (i = 0; i < size_b; ++i){
 1a8:	0066                	c.slli	zero,0x19
 1aa:	6f5f 6666 6573      	0x657366666f5f
        for(j = 0; j < size_a + size_b -1; ++j){
 1b0:	0074                	addi	a3,sp,12
 1b2:	6d5f 7362 7472      	0x747273626d5f
        pola[i] = a[i];
 1b8:	7363776f          	jal	a4,378ee <_stack_start+0x278ee>
 1bc:	735f 6174 6574      	0x65746174735f
 1c2:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_a; ++i){
 1c4:	626d                	lui	tp,0x1b
        polb[i] = b[i];
 1c6:	6c72                	flw	fs8,28(sp)
 1c8:	6e65                	lui	t3,0x19
 1ca:	735f 6174 6574      	0x65746174735f
 1d0:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_b; ++i){
 1d2:	6e66                	flw	ft8,88(sp)
        polb[i] = b[i];
 1d4:	7261                	lui	tp,0xffff8
    for (i = 0; i < size_b; ++i){
 1d6:	6e007367          	0x6e007367
                line[size_b-1-j][k] = pola[k]*polb[j];
 1da:	7274                	flw	fa3,100(a2)
 1dc:	5f75                	li	t5,-3
 1de:	6564                	flw	fs1,76(a0)
 1e0:	70796563          	bltu	s2,t2,8ea <ext_euclid+0x230>
 1e4:	0074                	addi	a3,sp,12
 1e6:	665f 736e 5f00      	0x5f00736e665f
 1ec:	6e676973          	csrrsi	s2,0x6e6,14
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f0:	5f00                	lw	s0,56(a4)
 1f2:	6c66                	flw	fs8,88(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 1f4:	5f6b636f          	jal	t1,b67ea <_stack_start+0xa67ea>
 1f8:	0074                	addi	a3,sp,12
 1fa:	735f 6474 7265      	0x72656474735f
	array_add(product, line[i], (size_a + size_b - 1));
 200:	0072                	c.slli	zero,0x1c
 202:	425f 6769 6e69      	0x6e696769425f
        array_mod(line[i],mod,(size_a+size_b-1));
 208:	0074                	addi	a3,sp,12
 20a:	675f 6d61 616d      	0x616d6d61675f
    array_mod(product,mod,size_a+size_b-1);
 210:	735f 6769 676e      	0x676e6769735f
 216:	6d61                	lui	s10,0x18
 218:	5f00                	lw	s0,56(a4)
}
 21a:	6572                	flw	fa0,28(sp)
 21c:	6461                	lui	s0,0x18
 21e:	5f00                	lw	s0,56(a4)
 220:	6572                	flw	fa0,28(sp)
 222:	746c7573          	csrrci	a0,0x746,24
 226:	6b5f 5f00 745f      	0x745f5f006b5f
 22c:	006d                	c.nop	27
 22e:	6564                	flw	fs1,76(a0)
 230:	756e                	flw	fa0,248(sp)
 232:	5f6d                	li	t5,-5
 234:	6574                	flw	fa3,76(a0)
 236:	706d                	c.lui	zero,0xffffb
 238:	5f00                	lw	s0,56(a4)
 23a:	775f 6863 0062      	0x626863775f
 240:	6572                	flw	fa0,28(sp)
 242:	746c7573          	csrrci	a0,0x746,24
            for (k = size_a-1; k >= 0; k = k-1 ){
 246:	006e6f6b          	0x6e6f6b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 24a:	735f 6474 756f      	0x756f6474735f
 250:	0074                	addi	a3,sp,12
 252:	635f 7476 656c      	0x656c7476635f
            for (k = size_a-1; k >= 0; k = k-1 ){
 258:	006e                	c.slli	zero,0x1b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 25a:	72636573          	csrrsi	a0,0x726,6
 25e:	7465                	lui	s0,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 260:	6b5f 7965 665f      	0x665f79656b5f
        for (j = size_b -1; j >= 0; j = j-1){
 266:	0071                	c.nop	28
 268:	665f 6c69 0065      	0x656c69665f
        array_mod(line[i],mod,(size_a+size_b-1));
 26e:	6572                	flw	fa0,28(sp)
	array_add(product, line[i], (size_a + size_b - 1));
 270:	7574                	flw	fa3,108(a0)
 272:	6e72                	flw	ft8,28(sp)
 274:	615f 6464 6572      	0x65726464615f
    for (i = 0; i < size_b; ++i){
 27a:	00317373          	csrrci	t1,fcsr,2
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 27e:	6572                	flw	fa0,28(sp)
 280:	7574                	flw	fa3,108(a0)
 282:	6e72                	flw	ft8,28(sp)
    int line[size_b][size_a + size_b];
 284:	615f 6464 6572      	0x65726464615f
 28a:	00327373          	csrrci	t1,fcsr,4
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 28e:	6572                	flw	fa0,28(sp)
    int line[size_b][size_a + size_b];
 290:	7574                	flw	fa3,108(a0)
 292:	6e72                	flw	ft8,28(sp)
 294:	615f 6464 6572      	0x65726464615f
 29a:	00337373          	csrrci	t1,fcsr,6
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 29e:	6572                	flw	fa0,28(sp)
 2a0:	7574                	flw	fa3,108(a0)
 2a2:	6e72                	flw	ft8,28(sp)
 2a4:	615f 6464 6572      	0x65726464615f
    int pola[size_a];
 2aa:	00347373          	csrrci	t1,fcsr,8
    int line[size_b][size_a + size_b];
 2ae:	6e5f 6f69 7362      	0x73626f696e5f
 2b4:	7200                	flw	fs0,32(a2)
    int pola[size_a];
 2b6:	7465                	lui	s0,0xffff9
 2b8:	7275                	lui	tp,0xffffd
 2ba:	5f6e                	lw	t5,248(sp)
 2bc:	6461                	lui	s0,0x18
    int line[size_b][size_a + size_b];
 2be:	7264                	flw	fs1,100(a2)
    int pola[size_a];
 2c0:	7365                	lui	t1,0xffff9
 2c2:	72003673          	csrrc	a2,0x720,zero
    int polb[size_b];
 2c6:	7465                	lui	s0,0xffff9
 2c8:	7275                	lui	tp,0xffffd
    int pola[size_a];
 2ca:	5f6e                	lw	t5,248(sp)
    int polb[size_b];
 2cc:	6461                	lui	s0,0x18
 2ce:	7264                	flw	fs1,100(a2)
    int line[size_b][size_a + size_b];
 2d0:	7365                	lui	t1,0xffff9
    int polb[size_b];
 2d2:	73003773          	csrrc	a4,0x730,zero
    for (i = 0; i < size_b; ++i){
 2d6:	6f68                	flw	fa0,92(a4)
 2d8:	7472                	flw	fs0,60(sp)
            product2[j] = 0;
 2da:	7520                	flw	fs0,104(a0)
 2dc:	736e                	flw	ft6,248(sp)
 2de:	6769                	lui	a4,0x1a
 2e0:	656e                	flw	fa0,216(sp)
    for (i = 0; i < size_b; ++i){
 2e2:	2064                	fld	fs1,192(s0)
 2e4:	6e69                	lui	t3,0x1a
    for(i = 0; i < size_a; ++i){
 2e6:	0074                	addi	a3,sp,12
 2e8:	615f 6574 6978      	0x69786574615f
    for(i = 0; i < size_b; ++i){
 2ee:	3074                	fld	fa3,224(s0)
 2f0:	5f00                	lw	s0,56(a4)
    if(star_mult == 1){
 2f2:	6e676973          	csrrsi	s2,0x6e6,14
 2f6:	6c61                	lui	s8,0x18
 2f8:	625f 6675 5f00      	0x5f006675625f
 2fe:	7361                	lui	t1,0xffff8
 300:	6d697463          	bgeu	s2,s6,9c8 <generate_keys+0xc4>
        for (j = size_b -1; j >= 0; j = j-1){
 304:	5f65                	li	t5,-7
            for (k = size_a-1; k >= 0; k = k-1 ){
 306:	7562                	flw	fa0,56(sp)
 308:	0066                	c.slli	zero,0x19
            product2[j] = 0;
 30a:	725f 7365 6c75      	0x6c757365725f
            line[i][j] = 0;
 310:	0074                	addi	a3,sp,12
 312:	5f5f 6377 0068      	0x6863775f5f
        for(j = 0; j < size_a + size_b -1; ++j){
 318:	746e6977          	0x746e6977
 31c:	745f 6700 6e65      	0x6e656700745f
    for (i = 0; i < size_b; ++i){
 322:	7265                	lui	tp,0xffff9
 324:	7461                	lui	s0,0xffff8
 326:	5f65                	li	t5,-7
        for(j = 0; j < size_a + size_b -1; ++j){
 328:	7379656b          	0x7379656b
        pola[i] = a[i];
 32c:	5f00                	lw	s0,56(a4)
 32e:	625f 6975 746c      	0x746c6975625f
 334:	6e69                	lui	t3,0x1a
 336:	6d5f 6d65 7063      	0x70636d656d5f
 33c:	0079                	c.nop	30
 33e:	6c5f 636f 006b      	0x6b636f6c5f
        polb[i] = b[i];
 344:	544e                	lw	s0,240(sp)
 346:	5552                	lw	a0,52(sp)
 348:	345f 5f38 6962      	0x69625f38345f
 34e:	4d74                	lw	a3,92(a0)
    for(i = 0; i < size_b; ++i){
 350:	632e                	flw	ft6,200(sp)
        polb[i] = b[i];
 352:	7300                	flw	fs0,32(a4)
 354:	7a69                	lui	s4,0xffffa
    for(i = 0; i < size_b; ++i){
 356:	5f65                	li	t5,-7
                line[size_b-1-j][k] = pola[k]*polb[j];
 358:	0061                	c.nop	24
 35a:	7270                	flw	fa2,100(a2)
 35c:	6375646f          	jal	s0,57192 <_stack_start+0x47192>
 360:	3274                	fld	fa3,224(a2)
 362:	6500                	flw	fs0,8(a0)
 364:	7478                	flw	fa4,108(s0)
 366:	655f 6375 696c      	0x696c6375655f
 36c:	0064                	addi	s1,sp,12
 36e:	775f 6972 6574      	0x65746972775f
        for (j = size_b -1; j >= 0; j = j-1){
 374:	5f00                	lw	s0,56(a4)
 376:	745f 5f6d 6579      	0x65795f6d745f
 37c:	7261                	lui	tp,0xffff8
            for (k = size_a-1; k >= 0; k = k-1 ){
 37e:	7000                	flw	fs0,32(s0)
         array_add(product2,line[i],size_a+size_b-1);
 380:	00626c6f          	jal	s8,26386 <_stack_start+0x16386>
 384:	6172                	flw	ft2,28(sp)
 386:	646e                	flw	fs0,216(sp)
        for(i = 0; i < size_b; ++i){
 388:	765f6d6f          	jal	s10,f72ec <_stack_start+0xe72ec>
}
 38c:	6c61                	lui	s8,0x18
 38e:	5f00                	lw	s0,56(a4)
 390:	6d6e                	flw	fs10,216(sp)
 392:	6c61                	lui	s8,0x18
 394:	6f6c                	flw	fa1,92(a4)
 396:	682f0063          	beq	t5,sp,a16 <generate_keys+0x112>
 39a:	2f656d6f          	jal	s10,56690 <_stack_start+0x46690>
 39e:	6c65                	lui	s8,0x19
 3a0:	6669                	lui	a2,0x1a
 3a2:	756e                	flw	fa0,248(sp)
 3a4:	2f72                	fld	ft10,280(sp)
 3a6:	6544                	flw	fs1,12(a0)
 3a8:	6f746b73          	csrrsi	s6,0x6f7,8
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ac:	2f70                	fld	fa2,216(a4)
 3ae:	6269                	lui	tp,0x1a
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3b0:	7865                	lui	a6,0xffff9
 3b2:	765f 2f32 6269      	0x62692f32765f
 3b8:	7865                	lui	a6,0xffff9
 3ba:	6d2d                	lui	s10,0xb
 3bc:	7361                	lui	t1,0xffff8
 3be:	6574                	flw	fa3,76(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3c0:	2f72                	fld	ft10,280(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3c2:	7865                	lui	a6,0xffff9
 3c4:	6d61                	lui	s10,0x18
 3c6:	6c70                	flw	fa2,92(s0)
 3c8:	7365                	lui	t1,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ca:	2f77732f          	0x2f77732f
        for (j = size_b -1; j >= 0; j = j-1){
 3ce:	746e                	flw	fs0,248(sp)
 3d0:	7572                	flw	fa0,60(sp)
 3d2:	6c5f 7461 6669      	0x666974616c5f
         array_add(product2,line[i],size_a+size_b-1);
 3d8:	6f68                	flw	fa0,92(a4)
 3da:	772f6163          	bltu	t5,s2,b3c <generate_keys+0x238>
        for(i = 0; i < size_b; ++i){
 3de:	7469                	lui	s0,0xffffa
 3e0:	5f68                	lw	a0,124(a4)
 3e2:	74737563          	bgeu	t1,t2,b2c <generate_keys+0x228>
    int v[size_N];
 3e6:	6d2f6d6f          	jal	s10,f6ab8 <_stack_start+0xe6ab8>
 3ea:	612b646f          	jal	s0,b69fc <_stack_start+0xa69fc>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 3ee:	6464                	flw	fs1,76(s0)
 3f0:	6c00                	flw	fs0,24(s0)
 3f2:	20676e6f          	jal	t3,765f8 <_stack_start+0x665f8>
 3f6:	6f64                	flw	fs1,92(a4)
 3f8:	6275                	lui	tp,0x1d
 3fa:	656c                	flw	fa1,76(a0)
 3fc:	5f00                	lw	s0,56(a4)
 3fe:	656e                	flw	fa0,216(sp)
 400:	7478                	flw	fa4,108(s0)
 402:	0066                	c.slli	zero,0x19
 404:	656d                	lui	a0,0x1b
 406:	67617373          	csrrci	t1,0x676,2
    int v[size_N];
 40a:	0065                	c.nop	25
 40c:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
    int q[size_N];
 412:	72006e6f          	jal	t3,6b32 <_stack_len+0x2b32>
    int num_temp[size_N];
 416:	7465                	lui	s0,0xffff9
 418:	7275                	lui	tp,0xffffd
    int denum_temp[size_D];
 41a:	5f6e                	lw	t5,248(sp)
 41c:	6461                	lui	s0,0x18
 41e:	7264                	flw	fs1,100(a2)
 420:	7365                	lui	t1,0xffff9
    int num_temp[size_N];
 422:	5f003573          	csrrc	a0,0x5f0,zero
    int denum_temp[size_D];
 426:	7461                	lui	s0,0xffff8
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 428:	7865                	lui	a6,0xffff9
 42a:	7469                	lui	s0,0xffffa
 42c:	7300                	flw	fs0,32(a4)
 42e:	6275                	lui	tp,0x1d
    int v[size_N];
 430:	6174706f          	j	48246 <_stack_start+0x38246>
    int denum_temp[size_D];
 434:	6772                	flw	fa4,28(sp)
 436:	5f00                	lw	s0,56(a4)
 438:	735f 6964 6964      	0x69646964735f
    for (i = 0; i < size_N; ++i){
 43e:	696e                	flw	fs2,216(sp)
    if(size_N == 106) {
 440:	0074                	addi	a3,sp,12
 442:	6f5f 6666 745f      	0x745f66666f5f
        array_mod(num_temp, mod, size_N - 1);
 448:	4500                	lw	s0,8(a0)
 44a:	636e                	flw	ft6,216(sp)
 44c:	4d5f 7365 6173      	0x617373654d5f
        while(num_temp[size_N - 1] < 0){
 452:	63006567          	0x63006567
 456:	72746e6f          	jal	t3,4737c <_stack_start+0x3737c>
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
 45a:	00526c6f          	jal	s8,26c5e <_stack_start+0x16c5e>
 45e:	665f 6572 6c65      	0x6c656572665f
    for (i = 0; i < size_D; ++i) {
 464:	7369                	lui	t1,0xffffa
 466:	0074                	addi	a3,sp,12
	array_mod(denum_temp,mod,size_D);
 468:	6972                	flw	fs2,28(sp)
 46a:	676e                	flw	fa4,216(sp)
 46c:	705f 6c6f 0079      	0x796c6f705f
    for (i = 0; i < size_N; ++i){
 472:	4c5f 434f 5f4b      	0x5f4b434f4c5f
    for (i = size_D-1; i >= 0; i = i-1){
 478:	4552                	lw	a0,20(sp)
 47a:	53525543          	fmadd.d	fa0,ft4,fs5,fa0,unknown
 47e:	5649                	li	a2,-14
 480:	5f45                	li	t5,-15
    for (i = 0; i < size_N; ++i){
 482:	0054                	addi	a3,sp,4
 484:	6974                	flw	fa3,84(a0)
        if ( (b_N*u)%mod == 1 )
 486:	315f 7400 5f69      	0x5f697400315f
    for (u = 0; u < mod; ++u){
 48c:	0032                	c.slli	zero,0xc
 48e:	6e75                	lui	t3,0x1d
        num_temp[i] = num[i];
 490:	6e676973          	csrrsi	s2,0x6e6,14
 494:	6465                	lui	s0,0x19
 496:	6320                	flw	fs0,64(a4)
 498:	6168                	flw	fa0,68(a0)
 49a:	0072                	c.slli	zero,0x1c
    for (i = 0; i < size_N; ++i){
 49c:	6971                	lui	s2,0x1c
        num_temp[i] = num[i];
 49e:	315f 5f00 656e      	0x656e5f00315f
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
 4a4:	685f0077          	0x685f0077
 4a8:	655f 7272 6f6e      	0x6f6e7272655f
        array_mod(num_temp, mod, size_N);
 4ae:	7300                	flw	fs0,32(a4)
 4b0:	6f68                	flw	fa0,92(a4)
 4b2:	7472                	flw	fs0,60(sp)
        denum_temp[i] = denum[i];
 4b4:	6920                	flw	fs0,80(a0)
 4b6:	746e                	flw	fs0,248(sp)
 4b8:	5f00                	lw	s0,56(a4)
 4ba:	745f 5f6d 6479      	0x64795f6d745f
    for (i = 0; i < size_D; ++i) {
 4c0:	7961                	lui	s2,0xffff8
        denum_temp[i] = denum[i];
 4c2:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_D; ++i) {
 4c4:	735f 7562 0066      	0x667562735f
        q[i] = 0;
 4ca:	665f 616c 7367      	0x7367616c665f
 4d0:	0032                	c.slli	zero,0xc
 4d2:	695f 626f 0073      	0x73626f695f
    for (i = 0; i < size_N; ++i){
 4d8:	5f5f 4946 454c      	0x454c49465f5f
    for (i = size_D-1; i >= 0; i = i-1){
 4de:	5f00                	lw	s0,56(a4)
 4e0:	626d                	lui	tp,0x1b
        if ( (b_N*u)%mod == 1 )
 4e2:	74617473          	csrrci	s0,0x746,2
 4e6:	5f65                	li	t5,-7
 4e8:	0074                	addi	a3,sp,12
 4ea:	5f5f 4673 4c49      	0x4c4946735f5f
        if( num_temp[i] != 0 )
 4f0:	0045                	c.nop	17
    for (i = size_N-1; i >= 0; i = i-1){
 4f2:	6d5f 7362 6174      	0x617473626d5f
 4f8:	6574                	flw	fa3,76(a0)
 4fa:	5f00                	lw	s0,56(a4)
 4fc:	6172                	flw	ft2,28(sp)
 4fe:	646e                	flw	fs0,216(sp)
         if(size_N == 106) {
 500:	6e5f 7865 0074      	0x7478656e5f
        v[(d-d2)] = u*r_d;
 506:	6d5f 6c62 6e65      	0x6e656c626d5f
 50c:	735f 6174 6574      	0x65746174735f
 512:	5f00                	lw	s0,56(a4)
         if(size_N == 106) {
 514:	6e69                	lui	t3,0x1a
 516:	695f0063          	beq	t5,s5,b96 <generate_keys+0x292>
            array_mod(v, mod, size_N - 1);
 51a:	646e                	flw	fs0,216(sp)
 51c:	5f00                	lw	s0,56(a4)
 51e:	6f6c                	flw	fa1,92(a4)
 520:	656c6163          	bltu	s8,s6,b62 <generate_keys+0x25e>
            while(v[size_N - 1] < 0){
 524:	5f00                	lw	s0,56(a4)
 526:	635f 656c 6e61      	0x6e61656c635f
            v[size_N - 1] = v[size_N - 1] % mod;
 52c:	7075                	c.lui	zero,0xffffd
 52e:	5f00                	lw	s0,56(a4)
 530:	6e75                	lui	t3,0x1d
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 532:	63657073          	csrci	0x636,10
 536:	6669                	lui	a2,0x1a
 538:	6569                	lui	a0,0x1a
 53a:	5f64                	lw	s1,124(a4)
 53c:	6f6c                	flw	fa1,92(a4)
 53e:	656c6163          	bltu	s8,s6,b80 <generate_keys+0x27c>
        if(size_N == 106) {
 542:	695f 666e 006f      	0x6f666e695f
            array_mod(product, mod, size_N - 1);
 548:	6d5f 7861 6477      	0x647778616d5f
 54e:	725f0073          	0x725f0073
            while(product[size_N - 1] < 0){
 552:	6565                	lui	a0,0x19
 554:	746e                	flw	fs0,248(sp)
 556:	7300                	flw	fs0,32(a4)
 558:	6174                	flw	fa3,68(a0)
 55a:	5f72                	lw	t5,60(sp)
            product[size_N - 1] = product[size_N - 1] % mod;
 55c:	756d                	lui	a0,0xffffb
 55e:	746c                	flw	fa1,108(s0)
 560:	5f00                	lw	s0,56(a4)
 562:	64656573          	csrrsi	a0,0x646,10
 566:	7200                	flw	fs0,32(a2)
        for (i = 0; i < size_N; ++i){
 568:	5f69                	li	t5,-6
 56a:	0032                	c.slli	zero,0xc
 	if(size_N == 106) {
 56c:	5f5f 6f63 6e75      	0x6e756f635f5f
            array_mod(num_temp, mod, size_N - 1);
 572:	0074                	addi	a3,sp,12
 574:	5f5f 6176 756c      	0x756c61765f5f
            while(num_temp[size_N - 1] < 0){
 57a:	0065                	c.nop	25
 57c:	735f 6565 006b      	0x6b6565735f
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
 582:	665f 6f70 5f73      	0x5f736f70665f
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
 588:	0074                	addi	a3,sp,12
 58a:	656c                	flw	fa1,76(a0)
 58c:	676e                	flw	fa4,216(sp)
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
 58e:	6874                	flw	fa3,84(s0)
 590:	5f00                	lw	s0,56(a4)
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
 592:	745f 5f6d 696d      	0x696d5f6d745f
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
 598:	006e                	c.slli	zero,0x1b
 59a:	7570                	flw	fa2,108(a0)
            array_mod(q, mod, size_N - 1);
 59c:	6c62                	flw	fs8,24(sp)
 59e:	6369                	lui	t1,0x1a
 5a0:	6b5f 7965 6100      	0x610079656b5f
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
 5a6:	7272                	flw	ft4,60(sp)
 5a8:	7961                	lui	s2,0xffff8
            array_mod(q, mod, size_N - 1);
 5aa:	615f 6464 6100      	0x61006464615f
            while(q[size_N - 1] < 0){
 5b0:	7272                	flw	ft4,60(sp)
 5b2:	7961                	lui	s2,0xffff8
            q[size_N - 1] = q[size_N - 1] % mod;
 5b4:	6d5f 646f 5f00      	0x5f00646f6d5f
 5ba:	74727473          	csrrci	s0,0x747,4
                v[size_N - 1] = v[size_N - 1]+mod;
 5be:	6c5f6b6f          	jal	s6,f7482 <_stack_start+0xe7482>
 5c2:	7361                	lui	t1,0xffff8
 5c4:	0074                	addi	a3,sp,12
            array_mod(v, mod, size_N);
 5c6:	665f 746e 7079      	0x7079746e665f
 5cc:	7365                	lui	t1,0xffff9
 5ce:	7300                	flw	fs0,32(a4)
                product[size_N - 1] = product[size_N - 1]+mod;
 5d0:	6365                	lui	t1,0x19
 5d2:	6572                	flw	fa0,28(sp)
 5d4:	5f74                	lw	a3,124(a4)
 5d6:	5f79656b          	0x5f79656b
            array_mod(product, mod, size_N);
 5da:	7066                	flw	ft0,120(sp)
 5dc:	5f00                	lw	s0,56(a4)
 5de:	555f 6f4c 676e      	0x676e6f4c555f
            num_temp[i] = num_temp[i] - product[i];
 5e4:	7200                	flw	fs0,32(a2)
 5e6:	5f69                	li	t5,-6
 5e8:	0031                	c.nop	12
 5ea:	675f 7465 6164      	0x61647465675f
        for (i = 0; i < size_N; ++i){
 5f0:	6574                	flw	fa3,76(a0)
            num_temp[i] = num_temp[i] - product[i];
 5f2:	655f 7272 5f00      	0x5f007272655f
        for (i = 0; i < size_N; ++i){
 5f8:	626f6c67          	0x626f6c67
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
 5fc:	6c61                	lui	s8,0x18
 5fe:	695f 706d 7275      	0x7275706d695f
            array_mod(num_temp, mod, size_N);
 604:	5f65                	li	t5,-7
 606:	7470                	flw	fa2,108(s0)
 608:	0072                	c.slli	zero,0x1c
            array_add(q, v, size_N );
 60a:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
 60e:	20373143          	fmadd.s	ft2,fa4,ft3,ft4,rup
            array_mod(q, mod, size_N);
 612:	2e39                	jal	930 <generate_keys+0x2c>
 614:	2e32                	fld	ft8,264(sp)
 616:	2030                	fld	fa2,64(s0)
 618:	6d2d                	lui	s10,0xb
    int v[size_N];
 61a:	7261                	lui	tp,0xffff8
        for (i = size_N-1; i >= 0; i = i-1){
 61c:	723d6863          	bltu	s10,gp,d4c <reset_handler>
 620:	3376                	fld	ft6,376(sp)
 622:	6932                	flw	fs2,12(sp)
 624:	636d                	lui	t1,0x1b
 626:	2d20                	fld	fs0,88(a0)
 628:	616d                	addi	sp,sp,240
 62a:	6962                	flw	fs2,24(sp)
                q[size_N - 1] = q[size_N - 1]+mod;
 62c:	693d                	lui	s2,0xf
 62e:	706c                	flw	fa1,100(s0)
 630:	2d203233          	0x2d203233
            if( num_temp[i] != 0 )
 634:	636d                	lui	t1,0x1b
        for (i = size_N-1; i >= 0; i = i-1){
 636:	6f6d                	lui	t5,0x1b
 638:	6564                	flw	fs1,76(a0)
            v[i] = 0;
 63a:	3d6c                	fld	fa1,248(a0)
 63c:	656d                	lui	a0,0x1b
 63e:	6164                	flw	fs1,68(a0)
 640:	796e                	flw	fs2,248(sp)
 642:	2d20                	fld	fs0,88(a0)
        for (i = 0; i < size_N; ++i){
 644:	746d                	lui	s0,0xffffb
 646:	6e75                	lui	t3,0x1d
 648:	3d65                	jal	500 <polydiv+0x11c>
    while (d >= d2){
 64a:	6f72                	flw	ft10,28(sp)
 64c:	74656b63          	bltu	a0,t1,da2 <_start+0xe>
        result[i] = q[i];
 650:	2d20                	fld	fs0,88(a0)
 652:	4f2d2067          	0x4f2d2067
 656:	662d2073          	csrs	0x662,s10
    for(i = 0; i < size_N; ++i){
 65a:	6976                	flw	fs2,92(sp)
    for(i = size_N; i < (2*size_N); ++i){
 65c:	69626973          	csrrsi	s2,0x696,4
        result[i] = num_temp[i-size_N];
 660:	696c                	flw	fa1,84(a0)
 662:	7974                	flw	fa3,116(a0)
 664:	683d                	lui	a6,0xf
 666:	6469                	lui	s0,0x1a
    for(i = size_N; i < (2*size_N); ++i){
 668:	6564                	flw	fs1,76(a0)
 66a:	006e                	c.slli	zero,0x1b
}
 66c:	755f 756e 6573      	0x6573756e755f
 672:	5f64                	lw	s1,124(a4)
 674:	6172                	flw	ft2,28(sp)
 676:	646e                	flw	fs0,216(sp)
 678:	6c00                	flw	fs0,24(s0)
 67a:	6e69                	lui	t3,0x1a
 67c:	0065                	c.nop	25
 67e:	775f 7364 5f00      	0x5f007364775f
 684:	745f 5f6d 6477      	0x64775f6d745f
 68a:	7961                	lui	s2,0xffff8
 68c:	5f00                	lw	s0,56(a4)
 68e:	65756c67          	0x65756c67
 692:	6e00                	flw	fs0,24(a2)
 694:	7274                	flw	fa3,100(a2)
        result[i] = q[i];
 696:	5f75                	li	t5,-3
 698:	6e65                	lui	t3,0x19
 69a:	70727963          	bgeu	tp,t2,dac <zero_loop+0x4>
 69e:	0074                	addi	a3,sp,12
 6a0:	735f 6973 657a      	0x657a6973735f
    for(i = 0; i < size_N; ++i){
 6a6:	745f 5f00 366c      	0x366c5f00745f
        result[i] = num_temp[i-size_N];
 6ac:	6134                	flw	fa3,64(a0)
 6ae:	625f 6675 6400      	0x64006675625f
    for(i = size_N; i < (2*size_N); ++i){
 6b4:	6e65                	lui	t3,0x19
 6b6:	6d75                	lui	s10,0x1d
 6b8:	5f00                	lw	s0,56(a4)
    int ri_2[size]; // MX-ring poly, a
 6ba:	5f676973          	csrrsi	s2,0x5f6,14
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6be:	7566                	flw	fa0,120(sp)
    int ri_2[size]; // MX-ring poly, a
 6c0:	636e                	flw	ft6,216(sp)
 6c2:	5f00                	lw	s0,56(a4)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6c4:	626e                	flw	ft4,216(sp)
 6c6:	6675                	lui	a2,0x1d
 6c8:	5f00                	lw	s0,56(a4)
 6ca:	6e75                	lui	t3,0x1d
 6cc:	7375                	lui	t1,0xffffd
 6ce:	6465                	lui	s0,0x19
 6d0:	7000                	flw	fs0,32(s0)
 6d2:	52796c6f          	jal	s8,973f8 <_stack_start+0x873f8>
 6d6:	7300                	flw	fs0,32(a4)
 6d8:	7a69                	lui	s4,0xffffa
 6da:	5f65                	li	t5,-7
 6dc:	0044                	addi	s1,sp,4
 6de:	5f5f 6d74 695f      	0x695f6d745f5f
    int ri_2[size]; // MX-ring poly, a
 6e4:	74736473          	csrrsi	s0,0x747,6
    int ri_1[size]; // f-random poly, f[N] = 0, b
 6e8:	5f00                	lw	s0,56(a4)
 6ea:	6f6c                	flw	fa1,92(a4)
    int ri[size];
 6ec:	746c6163          	bltu	s8,t1,e2e <memcpy+0x70>
 6f0:	6d69                	lui	s10,0x1a
    int ti_1[size]; // ti_1[0] = 1
 6f2:	5f65                	li	t5,-7
 6f4:	7562                	flw	fa0,56(sp)
 6f6:	0066                	c.slli	zero,0x19
    int ti[size];
 6f8:	635f 6f6c 6573      	0x65736f6c635f
    int qi_1[size];
 6fe:	5f00                	lw	s0,56(a4)
 700:	3472                	fld	fs0,312(sp)
 702:	0038                	addi	a4,sp,8
    int temp[size];
 704:	6d5f 7462 776f      	0x776f74626d5f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 70a:	74735f63          	bge	t1,t2,e68 <memcpy+0xaa>
    int ri_2[size]; // MX-ring poly, a
 70e:	7461                	lui	s0,0xffff8
    int temp[size];
 710:	0065                	c.nop	25
    for (i = 0; i < size; ++i) {
 712:	705f 7335 6d00      	0x6d007335705f
        ti_2[i] = 0;
 718:	6961                	lui	s2,0x18
 71a:	006e                	c.slli	zero,0x1b
 71c:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
    ti_1[0] = 1;
 722:	6164                	flw	fs1,68(a0)
 724:	0079                	c.nop	30
 726:	657a6973          	csrrsi	s2,0x657,20
        for (i = N + 1; i < (2 * N + 2); ++i) {
 72a:	625f 6300 7472      	0x74726300625f
            ti[i] = ti_2[i] - temp[i];
 730:	2e30                	fld	fa2,88(a2)
 732:	4e470053          	0x4e470053
 736:	2055                	jal	7da <ext_euclid+0x120>
	array_mod(ri_2,mod,N+1);
 738:	5341                	li	t1,-16
 73a:	3220                	fld	fs0,96(a2)
 73c:	332e                	fld	ft6,232(sp)
 73e:	0032                	c.slli	zero,0xc

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <polydiv+0x29c>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0022                	c.slli	zero,0x8
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	00b4                	addi	a3,sp,72
  3a:	0000                	unimp
  3c:	0006                	c.slli	zero,0x1
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	00ba                	slli	ra,ra,0xe
  4a:	0000                	unimp
  4c:	001e                	c.slli	zero,0x7
  4e:	0000                	unimp
  50:	0058                	addi	a4,sp,4
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	00d8                	addi	a4,sp,68
  5a:	0000                	unimp
  5c:	01a6                	slli	gp,gp,0x9
  5e:	0000                	unimp
  60:	0e42                	slli	t3,t3,0x10
  62:	4450                	lw	a2,12(s0)
  64:	0d9b0593          	addi	a1,s6,217
  68:	944e                	add	s0,s0,s3
  6a:	9506                	add	a0,a0,ra
  6c:	02885c07          	0x2885c07
  70:	0389                	addi	t2,t2,2
  72:	0492                	slli	s1,s1,0x4
  74:	0896                	slli	a7,a7,0x5
  76:	0a980997          	auipc	s3,0xa980
  7a:	0b99                	addi	s7,s7,6
  jal x0, default_exc_handler
  7c:	0c9a                	slli	s9,s9,0x6
  7e:	0c42                	slli	s8,s8,0x10
  jal x0, reset_handler
  80:	0008                	0x8
  82:	8142                	mv	sp,a6
  jal x0, default_exc_handler
  84:	0301                	addi	t1,t1,0
  86:	0112                	slli	sp,sp,0x4
  jal x0, default_exc_handler
  88:	0c0a                	slli	s8,s8,0x2
  8a:	5002                	0x5002
    asm volatile(
  8c:	c142                	sw	a6,128(sp)
  8e:	c842                	sw	a6,16(sp)
}
  90:	c942                	sw	a6,144(sp)
    for(i=0;i<(length/3);i++) {
  92:	d242                	sw	a6,36(sp)
  94:	d342                	sw	a6,164(sp)
  96:	d442                	sw	a6,40(sp)
  98:	d542                	sw	a6,168(sp)
  9a:	d642                	sw	a6,44(sp)
  9c:	d742                	sw	a6,172(sp)
  9e:	d842                	sw	a6,48(sp)
}
  a0:	d942                	sw	a6,176(sp)
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	da42                	sw	a6,52(sp)
  a4:	db42                	sw	a6,180(sp)
    asm volatile(
  a6:	0e4a                	slli	t3,t3,0x12
  a8:	4200                	lw	s0,0(a2)
  aa:	0044000b          	0x44000b
  ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  b0:	0000                	unimp
  b2:	0000                	unimp
    asm volatile(
  b4:	027e                	slli	tp,tp,0x1f
  b6:	0000                	unimp
}
  b8:	0166                	slli	sp,sp,0x19
    for(i=0;i<(length/3);i++) {
  ba:	0000                	unimp
  bc:	0e42                	slli	t3,t3,0x10
  be:	4220                	lw	s0,64(a2)
    asm volatile(
  c0:	0389                	addi	t2,t2,2
    for(i=0;i<(length/3);i++) {
  c2:	924e                	add	tp,tp,s3
  c4:	9304                	0x9304
  c6:	5605                	li	a2,-31
}
  c8:	0288                	addi	a0,sp,320
    asm volatile(
  ca:	0694                	addi	a3,sp,832
  cc:	0795                	addi	a5,a5,5
  ce:	0181                	addi	gp,gp,0
  d0:	0896                	slli	a7,a7,0x5
  d2:	0c42                	slli	s8,s8,0x10
    for(i=0;i<(length/3);i++) {
  d4:	0008                	0x8
  d6:	e802                	fsw	ft0,16(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d8:	0c0a                	slli	s8,s8,0x2
  da:	2002                	fld	ft0,0(sp)
  dc:	c142                	sw	a6,128(sp)
  de:	c842                	sw	a6,16(sp)
  e0:	c942                	sw	a6,144(sp)
  e2:	d242                	sw	a6,36(sp)
    int line[size_b][size_a + size_b];
  e4:	d342                	sw	a6,164(sp)
  e6:	d442                	sw	a6,40(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  e8:	d542                	sw	a6,168(sp)
  ea:	d642                	sw	a6,44(sp)
    int line[size_b][size_a + size_b];
  ec:	0e4a                	slli	t3,t3,0x12
  ee:	4200                	lw	s0,0(a2)
  f0:	0000000b          	0xb
  f4:	0054                	addi	a3,sp,4
  f6:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  f8:	0000                	unimp
  fa:	0000                	unimp
  fc:	03e4                	addi	s1,sp,460
  fe:	0000                	unimp
 100:	02d6                	slli	t0,t0,0x15
 102:	0000                	unimp
 104:	0e46                	slli	t3,t3,0x11
 106:	5e50                	lw	a2,60(a2)
 108:	0288                	addi	a0,sp,320
 10a:	0389                	addi	t2,t2,2
 10c:	0492                	slli	s1,s1,0x4
 10e:	06940593          	addi	a1,s0,105 # ffff8069 <_stack_start+0xfffe8069>
    int pola[size_a];
 112:	0795                	addi	a5,a5,5
 114:	0896                	slli	a7,a7,0x5
    int line[size_b][size_a + size_b];
 116:	0a980997          	auipc	s3,0xa980
 11a:	0b99                	addi	s7,s7,6
 11c:	0c9a                	slli	s9,s9,0x6
    int pola[size_a];
 11e:	0181                	addi	gp,gp,0
    int polb[size_b];
 120:	0c420d9b          	0xc420d9b
    int line[size_b][size_a + size_b];
 124:	0008                	0x8
    int polb[size_b];
 126:	0a026603          	0xa026603
    int pola[size_a];
 12a:	020c                	addi	a1,sp,256
 12c:	4250                	lw	a2,4(a2)
    int polb[size_b];
 12e:	42c1                	li	t0,16
 130:	42c8                	lw	a0,4(a3)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 132:	42c9                	li	t0,18
 134:	42d2                	lw	t0,20(sp)
    int line[size_b][size_a + size_b];
 136:	42d442d3          	0x42d442d3
    int pola[size_a];
 13a:	42d5                	li	t0,21
 13c:	42d6                	lw	t0,84(sp)
    int polb[size_b];
 13e:	42d842d7          	0x42d842d7
    for (i = 0; i < size_b; ++i){
 142:	42d9                	li	t0,22
 144:	42da                	lw	t0,148(sp)
            product[j] = 0;
 146:	000e4adb          	0xe4adb
 14a:	0b42                	slli	s6,s6,0x10
 14c:	0054                	addi	a3,sp,4
    for (i = 0; i < size_b; ++i){
 14e:	0000                	unimp
 150:	0000                	unimp
    for (i = 0; i < size_a; ++i){
 152:	0000                	unimp
 154:	06ba                	slli	a3,a3,0xe
 156:	0000                	unimp
	array_mod(pola,mod,size_a);
 158:	024a                	slli	tp,tp,0x12
 15a:	0000                	unimp
 15c:	0e46                	slli	t3,t3,0x11
 15e:	5e50                	lw	a2,60(a2)
 160:	0288                	addi	a0,sp,320
 162:	0389                	addi	t2,t2,2
    for (i = 0; i < size_b; ++i){
 164:	0492                	slli	s1,s1,0x4
 166:	06940593          	addi	a1,s0,105
 16a:	0795                	addi	a5,a5,5
 16c:	0896                	slli	a7,a7,0x5
	array_mod(polb,mod,size_b);
 16e:	0a980997          	auipc	s3,0xa980
 172:	0b99                	addi	s7,s7,6
 174:	01810d9b          	0x1810d9b
    if(star_mult == 1){
 178:	0c9a                	slli	s9,s9,0x6
 17a:	0c42                	slli	s8,s8,0x10
 17c:	0008                	0x8
 17e:	0a00fa03          	0xa00fa03
 182:	020c                	addi	a1,sp,256
 184:	4250                	lw	a2,4(a2)
 186:	42c1                	li	t0,16
 188:	42c8                	lw	a0,4(a3)
        for (j = size_b -1; j >= 0; j = j-1){
 18a:	42c9                	li	t0,18
 18c:	42d2                	lw	t0,20(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 18e:	42d442d3          	0x42d442d3
            product[j] = 0;
 192:	42d5                	li	t0,21
 194:	42d6                	lw	t0,84(sp)
 196:	42d842d7          	0x42d842d7
            line[i][j] = 0;
 19a:	42d9                	li	t0,22
            product[j] = 0;
 19c:	42da                	lw	t0,148(sp)
 19e:	000e4adb          	0xe4adb
        for(j = 0; j < size_a + size_b -1; ++j){
 1a2:	0b42                	slli	s6,s6,0x10
 1a4:	0054                	addi	a3,sp,4
 1a6:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 1a8:	0000                	unimp
 1aa:	0000                	unimp
 1ac:	0904                	addi	s1,sp,144
 1ae:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 1b0:	02f4                	addi	a3,sp,332
 1b2:	0000                	unimp
        pola[i] = a[i];
 1b4:	0e42                	slli	t3,t3,0x10
 1b6:	03f0                	addi	a2,sp,460
 1b8:	814c                	0x814c
 1ba:	8801                	andi	s0,s0,0
 1bc:	8902                	jr	s2
 1be:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
 1c2:	6400                	flw	fs0,8(s0)
    for (i = 0; i < size_a; ++i){
 1c4:	0492                	slli	s1,s1,0x4
        polb[i] = b[i];
 1c6:	06940593          	addi	a1,s0,105
 1ca:	0795                	addi	a5,a5,5
 1cc:	0896                	slli	a7,a7,0x5
 1ce:	0c9a0997          	auipc	s3,0xc9a0
    for (i = 0; i < size_b; ++i){
 1d2:	0a98                	addi	a4,sp,336
        polb[i] = b[i];
 1d4:	0b99                	addi	s7,s7,6
    for (i = 0; i < size_b; ++i){
 1d6:	0a01dc03          	lhu	s8,160(gp)
                line[size_b-1-j][k] = pola[k]*polb[j];
 1da:	020c                	addi	a1,sp,256
 1dc:	03f0                	addi	a2,sp,460
 1de:	c144                	sw	s1,4(a0)
 1e0:	c844                	sw	s1,20(s0)
 1e2:	c944                	sw	s1,20(a0)
 1e4:	d244                	sw	s1,36(a2)
 1e6:	d344                	sw	s1,36(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 1e8:	d444                	sw	s1,44(s0)
                line[size_b-1-j][k] = pola[k]*polb[j];
 1ea:	d544                	sw	s1,44(a0)
 1ec:	d644                	sw	s1,44(a2)
 1ee:	d744                	sw	s1,44(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f0:	d844                	sw	s1,52(s0)
 1f2:	d944                	sw	s1,52(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 1f4:	da44                	sw	s1,52(a2)
 1f6:	0e4a                	slli	t3,t3,0x12
 1f8:	4200                	lw	s0,0(a2)
 1fa:	0034000b          	0x34000b
            for (k = size_a-1; k >= 0; k = k-1 ){
 1fe:	0000                	unimp
	array_add(product, line[i], (size_a + size_b - 1));
 200:	0000                	unimp
 202:	0000                	unimp
 204:	0bf8                	addi	a4,sp,476
 206:	0000                	unimp
        array_mod(line[i],mod,(size_a+size_b-1));
 208:	0088                	addi	a0,sp,64
 20a:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 20c:	0e42                	slli	t3,t3,0x10
 20e:	01e0                	addi	s0,sp,204
    array_mod(product,mod,size_a+size_b-1);
 210:	8844                	0x8844
 212:	8902                	jr	s2
 214:	04924a03          	lbu	s4,73(tp) # fffe1049 <_stack_start+0xfffd1049>
 218:	8152                	mv	sp,s4
}
 21a:	9301                	srli	a4,a4,0x20
 21c:	9405                	srai	s0,s0,0x21
 21e:	0206                	slli	tp,tp,0x1
 220:	0a46                	slli	s4,s4,0x11
 222:	42c1                	li	t0,16
 224:	42c8                	lw	a0,4(a3)
 226:	42c9                	li	t0,18
 228:	42d2                	lw	t0,20(sp)
 22a:	42d442d3          	0x42d442d3
 22e:	000e                	c.slli	zero,0x3
 230:	0b42                	slli	s6,s6,0x10
 232:	0000                	unimp
 234:	0040                	addi	s0,sp,4
 236:	0000                	unimp
 238:	0000                	unimp
 23a:	0000                	unimp
 23c:	0c80                	addi	s0,sp,592
 23e:	0000                	unimp
 240:	00c8                	addi	a0,sp,68
 242:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 244:	0e42                	slli	t3,t3,0x10
 246:	4430                	lw	a2,72(s0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 248:	0288                	addi	a0,sp,320
 24a:	924e0593          	addi	a1,t3,-1756 # 1c924 <_stack_start+0xc924>
 24e:	9504                	0x9504
 250:	58099707          	0x58099707
 254:	0181                	addi	gp,gp,0
 256:	0389                	addi	t2,t2,2
            for (k = size_a-1; k >= 0; k = k-1 ){
 258:	0694                	addi	a3,sp,832
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 25a:	0896                	slli	a7,a7,0x5
 25c:	5202                	lw	tp,32(sp)
 25e:	c10a                	sw	sp,128(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 260:	c842                	sw	a6,16(sp)
 262:	c942                	sw	a6,144(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 264:	d242                	sw	a6,36(sp)
 266:	d342                	sw	a6,164(sp)
 268:	d442                	sw	a6,40(sp)
 26a:	d542                	sw	a6,168(sp)
        array_mod(line[i],mod,(size_a+size_b-1));
 26c:	d642                	sw	a6,44(sp)
 26e:	d742                	sw	a6,172(sp)
	array_add(product, line[i], (size_a + size_b - 1));
 270:	0e42                	slli	t3,t3,0x10
 272:	4200                	lw	s0,0(a2)
 274:	0000000b          	0xb
    for (i = 0; i < size_b; ++i){
 278:	0030                	addi	a2,sp,8
 27a:	0000                	unimp
 27c:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 27e:	0000                	unimp
 280:	0f44                	addi	s1,sp,916
 282:	0000                	unimp
    int line[size_b][size_a + size_b];
 284:	019c                	addi	a5,sp,192
 286:	0000                	unimp
 288:	0e44                	addi	s1,sp,788
 28a:	08c0                	addi	s0,sp,84
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 28c:	815e                	mv	sp,s7
 28e:	8801                	andi	s0,s0,0
    int line[size_b][size_a + size_b];
 290:	8902                	jr	s2
 292:	48049203          	lh	tp,1152(s1)
 296:	46030593          	addi	a1,t1,1120 # ffffa460 <_stack_start+0xfffea460>
 29a:	0a01                	addi	s4,s4,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 29c:	44c1                	li	s1,16
 29e:	44c8                	lw	a0,12(s1)
 2a0:	44c9                	li	s1,18
 2a2:	44d2                	lw	s1,20(sp)
 2a4:	000e46d3          	fadd.s	fa3,ft8,ft0,rmm
 2a8:	0b42                	slli	s6,s6,0x10
	...

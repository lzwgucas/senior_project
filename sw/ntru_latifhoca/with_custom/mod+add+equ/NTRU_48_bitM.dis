
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	4970006f          	j	d12 <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	4970006f          	j	d16 <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	48f0006f          	j	d12 <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	48b0006f          	j	d12 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      8c:	0ab5750b          	0xab5750b


    return;


}
      90:	8082                	ret

00000092 <array_equ>:
void array_equ(int *a1,int *a2,int length) {
int i = 0;
    for(i=0;i<(length/3);i++) {
      92:	478d                	li	a5,3
      94:	02f64633          	div	a2,a2,a5
      98:	4831                	li	a6,12
      9a:	4781                	li	a5,0
      9c:	00c7c363          	blt	a5,a2,a2 <array_equ+0x10>
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
    }
}
      a0:	8082                	ret
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      a2:	03078733          	mul	a4,a5,a6
    asm volatile(
      a6:	00e506b3          	add	a3,a0,a4
      aa:	972e                	add	a4,a4,a1
      ac:	0ae6f70b          	0xae6f70b
    for(i=0;i<(length/3);i++) {
      b0:	0785                	addi	a5,a5,1
      b2:	b7ed                	j	9c <array_equ+0xa>

000000b4 <instr_add>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      b4:	06b5750b          	0x6b5750b
    );

    return;


}
      b8:	8082                	ret

000000ba <array_add>:
void array_add(int *a1, int *a2, int length) {
int i =0;
    for(i=0;i<(length/3);i++) {
      ba:	478d                	li	a5,3
      bc:	02f64633          	div	a2,a2,a5
      c0:	4831                	li	a6,12
      c2:	4781                	li	a5,0
      c4:	00c7c363          	blt	a5,a2,ca <array_add+0x10>
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
    }
}
      c8:	8082                	ret
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      ca:	03078733          	mul	a4,a5,a6
    asm volatile(
      ce:	00e506b3          	add	a3,a0,a4
      d2:	972e                	add	a4,a4,a1
      d4:	06e6f70b          	0x6e6f70b
    for(i=0;i<(length/3);i++) {
      d8:	0785                	addi	a5,a5,1
      da:	b7ed                	j	c4 <array_add+0xa>

000000dc <instr_mod>:

void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
      dc:	0cb5750b          	0xcb5750b

    );
    return;


}
      e0:	8082                	ret

000000e2 <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    for(i=0;i<(length/3);i++) {
      e2:	478d                	li	a5,3
      e4:	02f64633          	div	a2,a2,a5
    asm volatile(
      e8:	46b1                	li	a3,12
    for(i=0;i<(length/3);i++) {
      ea:	4781                	li	a5,0
      ec:	00c7c363          	blt	a5,a2,f2 <array_mod+0x10>
        instr_mod((unsigned int*)&a1[3 * i], (unsigned int)mod);
    }

}
      f0:	8082                	ret
    asm volatile(
      f2:	02d78733          	mul	a4,a5,a3
      f6:	972a                	add	a4,a4,a0
      f8:	0cb7770b          	0xcb7770b
    for(i=0;i<(length/3);i++) {
      fc:	0785                	addi	a5,a5,1
      fe:	b7fd                	j	ec <array_mod+0xa>

00000100 <polymult>:

/////////////////////////////////////////////////


int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     100:	715d                	addi	sp,sp,-80
     102:	de4e                	sw	s3,60(sp)
     104:	89b6                	mv	s3,a3
     106:	d266                	sw	s9,36(sp)

    int line[size_b][size_a + size_b];
     108:	96ae                	add	a3,a3,a1
     10a:	00299c93          	slli	s9,s3,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     10e:	da56                	sw	s5,52(sp)
     110:	d06a                	sw	s10,32(sp)
    int line[size_b][size_a + size_b];
     112:	fff68a93          	addi	s5,a3,-1
     116:	00269d13          	slli	s10,a3,0x2
     11a:	039686b3          	mul	a3,a3,s9
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     11e:	dc52                	sw	s4,56(sp)
     120:	8a3a                	mv	s4,a4
    int i,j,k;
    int *return_address1;
    int pola[size_a];
     122:	00259713          	slli	a4,a1,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     126:	c4a2                	sw	s0,72(sp)
     128:	c2a6                	sw	s1,68(sp)
     12a:	c0ca                	sw	s2,64(sp)
     12c:	d85a                	sw	s6,48(sp)
     12e:	d65e                	sw	s7,44(sp)
     130:	d462                	sw	s8,40(sp)
    int line[size_b][size_a + size_b];
     132:	06bd                	addi	a3,a3,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     134:	ce6e                	sw	s11,28(sp)
     136:	c686                	sw	ra,76(sp)
     138:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
     13a:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
     13c:	073d                	addi	a4,a4,15
     13e:	9b41                	andi	a4,a4,-16
    int line[size_b][size_a + size_b];
     140:	40d10133          	sub	sp,sp,a3
     144:	890a                	mv	s2,sp
    int pola[size_a];
     146:	40e10133          	sub	sp,sp,a4
    int polb[size_b];
     14a:	00fc8713          	addi	a4,s9,15
     14e:	9b41                	andi	a4,a4,-16
    int pola[size_a];
     150:	8d8a                	mv	s11,sp
    int polb[size_b];
     152:	40e10133          	sub	sp,sp,a4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     156:	8bae                	mv	s7,a1
     158:	8832                	mv	a6,a2
    int pola[size_a];
     15a:	fff58693          	addi	a3,a1,-1
    int line[size_b][size_a + size_b];
     15e:	fff98c13          	addi	s8,s3,-1
    int polb[size_b];
     162:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     164:	8b4a                	mv	s6,s2
     166:	85ca                	mv	a1,s2
     168:	4601                	li	a2,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product[j] = 0;
     16a:	00001e17          	auipc	t3,0x1
     16e:	04ae0e13          	addi	t3,t3,74 # 11b4 <_bss_start>
    for (i = 0; i < size_b; ++i){
     172:	07364863          	blt	a2,s3,1e2 <polymult+0xe2>
        }
    }

    // make mod calculations
     	array_equ(pola,a,size_a);
     176:	85aa                	mv	a1,a0
     178:	865e                	mv	a2,s7
     17a:	856e                	mv	a0,s11
     17c:	faf42a23          	sw	a5,-76(s0)
     180:	fad42e23          	sw	a3,-68(s0)
     184:	fb042c23          	sw	a6,-72(s0)
     188:	3729                	jal	92 <array_equ>

	array_mod(pola,mod,size_a);
     18a:	865e                	mv	a2,s7
     18c:	85d2                	mv	a1,s4
     18e:	856e                	mv	a0,s11
     190:	3f89                	jal	e2 <array_mod>

    	array_equ(polb,b,size_b);
     192:	fb842803          	lw	a6,-72(s0)
     196:	8526                	mv	a0,s1
     198:	864e                	mv	a2,s3
     19a:	85c2                	mv	a1,a6
     19c:	3ddd                	jal	92 <array_equ>

	array_mod(polb,mod,size_b);
     19e:	8526                	mv	a0,s1
     1a0:	864e                	mv	a2,s3
     1a2:	85d2                	mv	a1,s4
     1a4:	3f3d                	jal	e2 <array_mod>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     1a6:	fb442783          	lw	a5,-76(s0)
     1aa:	4705                	li	a4,1
     1ac:	fbc42683          	lw	a3,-68(s0)
     1b0:	94e6                	add	s1,s1,s9
     1b2:	04e78c63          	beq	a5,a4,20a <polymult+0x10a>
     1b6:	1cf1                	addi	s9,s9,-4
     1b8:	ffcd0613          	addi	a2,s10,-4
     1bc:	9966                	add	s2,s2,s9
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     1be:	040c4863          	bltz	s8,20e <polymult+0x10e>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1c2:	87b6                	mv	a5,a3
     1c4:	a075                	j	270 <polymult+0x170>
            product[j] = 0;
     1c6:	00271313          	slli	t1,a4,0x2
     1ca:	9372                	add	t1,t1,t3
            line[i][j] = 0;
     1cc:	0008a023          	sw	zero,0(a7)
            product[j] = 0;
     1d0:	00032023          	sw	zero,0(t1)
        for(j = 0; j < size_a + size_b -1; ++j){
     1d4:	0705                	addi	a4,a4,1
     1d6:	0891                	addi	a7,a7,4
     1d8:	ff5747e3          	blt	a4,s5,1c6 <polymult+0xc6>
    for (i = 0; i < size_b; ++i){
     1dc:	0605                	addi	a2,a2,1
     1de:	95ea                	add	a1,a1,s10
     1e0:	bf49                	j	172 <polymult+0x72>
     1e2:	88ae                	mv	a7,a1
        for(j = 0; j < size_a + size_b -1; ++j){
     1e4:	4701                	li	a4,0
     1e6:	bfcd                	j	1d8 <polymult+0xd8>
                line[size_b-1-j][k] = pola[k]*polb[j];
     1e8:	00279713          	slli	a4,a5,0x2
     1ec:	00e90633          	add	a2,s2,a4
     1f0:	976e                	add	a4,a4,s11
     1f2:	4318                	lw	a4,0(a4)
     1f4:	ffc4a583          	lw	a1,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f8:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     1fa:	02b70733          	mul	a4,a4,a1
     1fe:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     200:	fe07d4e3          	bgez	a5,1e8 <polymult+0xe8>
        for (j = size_b -1; j >= 0; j = j-1){
     204:	1c7d                	addi	s8,s8,-1
     206:	14f1                	addi	s1,s1,-4
     208:	996a                	add	s2,s2,s10
     20a:	040c5563          	bgez	s8,254 <polymult+0x154>
            for (k = size_a-1; k >= 0; k = k-1 ){
     20e:	4481                	li	s1,0
    }

    //mod calculations & construct product
    for (i = 0; i < size_b; ++i){
        array_mod(line[i],mod,(size_a+size_b-1));
	array_add(product, line[i], (size_a + size_b - 1));
     210:	00001917          	auipc	s2,0x1
     214:	fa490913          	addi	s2,s2,-92 # 11b4 <_bss_start>
        array_mod(line[i],mod,(size_a+size_b-1));
     218:	8656                	mv	a2,s5
     21a:	85d2                	mv	a1,s4
    for (i = 0; i < size_b; ++i){
     21c:	0734c063          	blt	s1,s3,27c <polymult+0x17c>
    }


    //mod calculations
    array_mod(product,mod,size_a+size_b-1);
     220:	00001517          	auipc	a0,0x1
     224:	f9450513          	addi	a0,a0,-108 # 11b4 <_bss_start>
     228:	3d6d                	jal	e2 <array_mod>

    return_address1 = &product[0];

    return return_address1;
}
     22a:	fb040113          	addi	sp,s0,-80
     22e:	40b6                	lw	ra,76(sp)
     230:	4426                	lw	s0,72(sp)
     232:	4496                	lw	s1,68(sp)
     234:	4906                	lw	s2,64(sp)
     236:	59f2                	lw	s3,60(sp)
     238:	5a62                	lw	s4,56(sp)
     23a:	5ad2                	lw	s5,52(sp)
     23c:	5b42                	lw	s6,48(sp)
     23e:	5bb2                	lw	s7,44(sp)
     240:	5c22                	lw	s8,40(sp)
     242:	5c92                	lw	s9,36(sp)
     244:	5d02                	lw	s10,32(sp)
     246:	4df2                	lw	s11,28(sp)
     248:	00001517          	auipc	a0,0x1
     24c:	f6c50513          	addi	a0,a0,-148 # 11b4 <_bss_start>
     250:	6161                	addi	sp,sp,80
     252:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
     254:	87b6                	mv	a5,a3
     256:	b76d                	j	200 <polymult+0x100>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     258:	00279713          	slli	a4,a5,0x2
     25c:	00e905b3          	add	a1,s2,a4
     260:	976e                	add	a4,a4,s11
     262:	4318                	lw	a4,0(a4)
     264:	ffc4a503          	lw	a0,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     268:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     26a:	02a70733          	mul	a4,a4,a0
     26e:	c198                	sw	a4,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     270:	fe07d4e3          	bgez	a5,258 <polymult+0x158>
        for (j = size_b -1; j >= 0; j = j-1){
     274:	1c7d                	addi	s8,s8,-1
     276:	14f1                	addi	s1,s1,-4
     278:	9932                	add	s2,s2,a2
     27a:	b791                	j	1be <polymult+0xbe>
        array_mod(line[i],mod,(size_a+size_b-1));
     27c:	855a                	mv	a0,s6
     27e:	3595                	jal	e2 <array_mod>
	array_add(product, line[i], (size_a + size_b - 1));
     280:	85da                	mv	a1,s6
     282:	8656                	mv	a2,s5
     284:	854a                	mv	a0,s2
     286:	3d15                	jal	ba <array_add>
    for (i = 0; i < size_b; ++i){
     288:	0485                	addi	s1,s1,1
     28a:	9b6a                	add	s6,s6,s10
     28c:	b771                	j	218 <polymult+0x118>

0000028e <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     28e:	715d                	addi	sp,sp,-80
   

    int line[size_b][size_a + size_b];
     290:	00d587b3          	add	a5,a1,a3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     294:	d85a                	sw	s6,48(sp)
     296:	00269b13          	slli	s6,a3,0x2
     29a:	de4e                	sw	s3,60(sp)
     29c:	d65e                	sw	s7,44(sp)
    int line[size_b][size_a + size_b];
     29e:	fff78993          	addi	s3,a5,-1
     2a2:	00279b93          	slli	s7,a5,0x2
     2a6:	036787b3          	mul	a5,a5,s6
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2aa:	c4a2                	sw	s0,72(sp)
     2ac:	c2a6                	sw	s1,68(sp)
     2ae:	c0ca                	sw	s2,64(sp)
     2b0:	dc52                	sw	s4,56(sp)
     2b2:	da56                	sw	s5,52(sp)
     2b4:	d462                	sw	s8,40(sp)
     2b6:	d266                	sw	s9,36(sp)
     2b8:	d06a                	sw	s10,32(sp)
     2ba:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
     2bc:	07bd                	addi	a5,a5,15
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2be:	c686                	sw	ra,76(sp)
     2c0:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
     2c2:	9bc1                	andi	a5,a5,-16
     2c4:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     2c8:	00259793          	slli	a5,a1,0x2
     2cc:	07bd                	addi	a5,a5,15
     2ce:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     2d0:	890a                	mv	s2,sp
    int pola[size_a];
     2d2:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     2d6:	00fb0793          	addi	a5,s6,15
     2da:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     2dc:	8d0a                	mv	s10,sp
    int polb[size_b];
     2de:	40f10133          	sub	sp,sp,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2e2:	8a36                	mv	s4,a3
     2e4:	8dba                	mv	s11,a4
    int line[size_b][size_a + size_b];
     2e6:	fff68a93          	addi	s5,a3,-1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ea:	8832                	mv	a6,a2
    int pola[size_a];
     2ec:	fff58c13          	addi	s8,a1,-1
    int polb[size_b];
     2f0:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     2f2:	8cca                	mv	s9,s2
     2f4:	86ca                	mv	a3,s2
     2f6:	4701                	li	a4,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
     2f8:	00001317          	auipc	t1,0x1
     2fc:	11430313          	addi	t1,t1,276 # 140c <product2>
    for (i = 0; i < size_b; ++i){
     300:	05474963          	blt	a4,s4,352 <polymult2+0xc4>
        }
    }
    
    array_equ(pola,a,size_a);
     304:	862e                	mv	a2,a1
     306:	85aa                	mv	a1,a0
     308:	856a                	mv	a0,s10
     30a:	fb042e23          	sw	a6,-68(s0)
     30e:	3351                	jal	92 <array_equ>
    array_equ(polb,b,size_b);
     310:	fbc42803          	lw	a6,-68(s0)
     314:	8526                	mv	a0,s1
     316:	8652                	mv	a2,s4
     318:	85c2                	mv	a1,a6
     31a:	3ba5                	jal	92 <array_equ>


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     31c:	4785                	li	a5,1
     31e:	01648533          	add	a0,s1,s6
     322:	04fd8c63          	beq	s11,a5,37a <polymult2+0xec>
     326:	1b71                	addi	s6,s6,-4
     328:	ffcb8693          	addi	a3,s7,-4
     32c:	995a                	add	s2,s2,s6
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     32e:	040ac863          	bltz	s5,37e <polymult2+0xf0>
            for (k = size_a-1; k >= 0; k = k-1 ){
     332:	87e2                	mv	a5,s8
     334:	a879                	j	3d2 <polymult2+0x144>
            product2[j] = 0;
     336:	00279893          	slli	a7,a5,0x2
     33a:	989a                	add	a7,a7,t1
            line[i][j] = 0;
     33c:	00062023          	sw	zero,0(a2)
            product2[j] = 0;
     340:	0008a023          	sw	zero,0(a7)
        for(j = 0; j < size_a + size_b -1; ++j){
     344:	0785                	addi	a5,a5,1
     346:	0611                	addi	a2,a2,4
     348:	ff37c7e3          	blt	a5,s3,336 <polymult2+0xa8>
    for (i = 0; i < size_b; ++i){
     34c:	0705                	addi	a4,a4,1
     34e:	96de                	add	a3,a3,s7
     350:	bf45                	j	300 <polymult2+0x72>
     352:	8636                	mv	a2,a3
        for(j = 0; j < size_a + size_b -1; ++j){
     354:	4781                	li	a5,0
     356:	bfcd                	j	348 <polymult2+0xba>
                line[size_b-1-j][k] = pola[k]*polb[j];
     358:	00279713          	slli	a4,a5,0x2
     35c:	00e906b3          	add	a3,s2,a4
     360:	976a                	add	a4,a4,s10
     362:	4318                	lw	a4,0(a4)
     364:	ffc52603          	lw	a2,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     368:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     36a:	02c70733          	mul	a4,a4,a2
     36e:	c298                	sw	a4,0(a3)
            for (k = size_a-1; k >= 0; k = k-1 ){
     370:	fe07d4e3          	bgez	a5,358 <polymult2+0xca>
        for (j = size_b -1; j >= 0; j = j-1){
     374:	1afd                	addi	s5,s5,-1
     376:	1571                	addi	a0,a0,-4
     378:	995e                	add	s2,s2,s7
     37a:	020ade63          	bgez	s5,3b6 <polymult2+0x128>
            for (k = size_a-1; k >= 0; k = k-1 ){
     37e:	4481                	li	s1,0
    }

    // construct product
   
        for(i = 0; i < size_b; ++i){
         array_add(product2,line[i],size_a+size_b-1);
     380:	00001917          	auipc	s2,0x1
     384:	08c90913          	addi	s2,s2,140 # 140c <product2>
        for(i = 0; i < size_b; ++i){
     388:	0544cb63          	blt	s1,s4,3de <polymult2+0x150>


    return_address2 = &product2[0];

    return return_address2;
}
     38c:	fb040113          	addi	sp,s0,-80
     390:	40b6                	lw	ra,76(sp)
     392:	4426                	lw	s0,72(sp)
     394:	4496                	lw	s1,68(sp)
     396:	4906                	lw	s2,64(sp)
     398:	59f2                	lw	s3,60(sp)
     39a:	5a62                	lw	s4,56(sp)
     39c:	5ad2                	lw	s5,52(sp)
     39e:	5b42                	lw	s6,48(sp)
     3a0:	5bb2                	lw	s7,44(sp)
     3a2:	5c22                	lw	s8,40(sp)
     3a4:	5c92                	lw	s9,36(sp)
     3a6:	5d02                	lw	s10,32(sp)
     3a8:	4df2                	lw	s11,28(sp)
     3aa:	00001517          	auipc	a0,0x1
     3ae:	06250513          	addi	a0,a0,98 # 140c <product2>
     3b2:	6161                	addi	sp,sp,80
     3b4:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b6:	87e2                	mv	a5,s8
     3b8:	bf65                	j	370 <polymult2+0xe2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3ba:	00279713          	slli	a4,a5,0x2
     3be:	00e90633          	add	a2,s2,a4
     3c2:	976a                	add	a4,a4,s10
     3c4:	4318                	lw	a4,0(a4)
     3c6:	ffc52583          	lw	a1,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3cc:	02b70733          	mul	a4,a4,a1
     3d0:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d2:	fe07d4e3          	bgez	a5,3ba <polymult2+0x12c>
        for (j = size_b -1; j >= 0; j = j-1){
     3d6:	1afd                	addi	s5,s5,-1
     3d8:	1571                	addi	a0,a0,-4
     3da:	9936                	add	s2,s2,a3
     3dc:	bf89                	j	32e <polymult2+0xa0>
         array_add(product2,line[i],size_a+size_b-1);
     3de:	85e6                	mv	a1,s9
     3e0:	864e                	mv	a2,s3
     3e2:	854a                	mv	a0,s2
     3e4:	39d9                	jal	ba <array_add>
        for(i = 0; i < size_b; ++i){
     3e6:	0485                	addi	s1,s1,1
     3e8:	9cde                	add	s9,s9,s7
     3ea:	bf79                	j	388 <polymult2+0xfa>

000003ec <polydiv>:
 

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     3ec:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3f0:	715d                	addi	sp,sp,-80
    int v[size_N];
     3f2:	07bd                	addi	a5,a5,15
     3f4:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3f6:	c4a2                	sw	s0,72(sp)
     3f8:	c2a6                	sw	s1,68(sp)
     3fa:	c0ca                	sw	s2,64(sp)
     3fc:	de4e                	sw	s3,60(sp)
     3fe:	dc52                	sw	s4,56(sp)
     400:	da56                	sw	s5,52(sp)
     402:	d85a                	sw	s6,48(sp)
     404:	d65e                	sw	s7,44(sp)
     406:	d462                	sw	s8,40(sp)
     408:	d266                	sw	s9,36(sp)
     40a:	d06a                	sw	s10,32(sp)
     40c:	ce6e                	sw	s11,28(sp)
     40e:	c686                	sw	ra,76(sp)
     410:	0880                	addi	s0,sp,80
    int v[size_N];
     412:	40f10133          	sub	sp,sp,a5
     416:	8a8a                	mv	s5,sp
    int q[size_N];
     418:	40f10133          	sub	sp,sp,a5
     41c:	8a0a                	mv	s4,sp
    int *product;
    int num_temp[size_N];
     41e:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     422:	00269793          	slli	a5,a3,0x2
     426:	07bd                	addi	a5,a5,15
     428:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
     42a:	898a                	mv	s3,sp
    int denum_temp[size_D];
     42c:	40f10133          	sub	sp,sp,a5


    // make mod calculation for coefficents
   if(size_N == 106) {
     430:	06a00793          	li	a5,106
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     434:	8daa                	mv	s11,a0
     436:	892e                	mv	s2,a1
     438:	8c32                	mv	s8,a2
     43a:	8b36                	mv	s6,a3
     43c:	84ba                	mv	s1,a4
    int v[size_N];
     43e:	fff58d13          	addi	s10,a1,-1
    int denum_temp[size_D];
     442:	fff68b93          	addi	s7,a3,-1
     446:	8c8a                	mv	s9,sp
   if(size_N == 106) {
     448:	02f59963          	bne	a1,a5,47a <polydiv+0x8e>
     array_equ(num_temp, num, size_N - 1);   // 105 elemani ücer ücer yap...
     44c:	85aa                	mv	a1,a0
     44e:	06900613          	li	a2,105
     452:	854e                	mv	a0,s3
     454:	393d                	jal	92 <array_equ>
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     456:	1a4da783          	lw	a5,420(s11)
 else{
     array_equ(num_temp, num, size_N );

 }
    if(size_N == 106) {
        array_mod(num_temp, mod, size_N - 1);
     45a:	06900613          	li	a2,105
     45e:	85a6                	mv	a1,s1
     460:	854e                	mv	a0,s3
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     462:	1af9a223          	sw	a5,420(s3)
        array_mod(num_temp, mod, size_N - 1);
     466:	39b5                	jal	e2 <array_mod>
        while(num_temp[size_N - 1] < 0){
     468:	1a49a783          	lw	a5,420(s3)
     46c:	0407c763          	bltz	a5,4ba <polydiv+0xce>
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
        }
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     470:	0297e7b3          	rem	a5,a5,s1
     474:	1af9a223          	sw	a5,420(s3)
     478:	a809                	j	48a <polydiv+0x9e>
     array_equ(num_temp, num, size_N );
     47a:	862e                	mv	a2,a1
     47c:	85aa                	mv	a1,a0
     47e:	854e                	mv	a0,s3
     480:	3909                	jal	92 <array_equ>
    }
    else{
        array_mod(num_temp, mod, size_N);
     482:	864a                	mv	a2,s2
     484:	85a6                	mv	a1,s1
     486:	854e                	mv	a0,s3
     488:	39a9                	jal	e2 <array_mod>
    }


    // make mod calculation for coefficents
    array_equ(denum_temp,denum,size_D);
     48a:	865a                	mv	a2,s6
     48c:	85e2                	mv	a1,s8
     48e:	8566                	mv	a0,s9
     490:	3109                	jal	92 <array_equ>
	array_mod(denum_temp,mod,size_D);
     492:	865a                	mv	a2,s6
     494:	85a6                	mv	a1,s1
     496:	8566                	mv	a0,s9
     498:	31a9                	jal	e2 <array_mod>

    for (i = 0; i < size_N; ++i){
     49a:	4781                	li	a5,0
     49c:	0327c363          	blt	a5,s2,4c2 <polydiv+0xd6>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     4a0:	002b9793          	slli	a5,s7,0x2
     4a4:	97e6                	add	a5,a5,s9
     4a6:	4398                	lw	a4,0(a5)
     4a8:	020bd863          	bgez	s7,4d8 <polydiv+0xec>
    for (i = 0; i < size_N; ++i){
     4ac:	4781                	li	a5,0
     4ae:	4c01                	li	s8,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     4b0:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     4b2:	029c4663          	blt	s8,s1,4de <polydiv+0xf2>
     4b6:	87ea                	mv	a5,s10
     4b8:	a825                	j	4f0 <polydiv+0x104>
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4ba:	97a6                	add	a5,a5,s1
     4bc:	1af9a223          	sw	a5,420(s3)
     4c0:	b765                	j	468 <polydiv+0x7c>
        q[i] = 0;
     4c2:	00279713          	slli	a4,a5,0x2
     4c6:	00ea06b3          	add	a3,s4,a4
        v[i] = 0;
     4ca:	9756                	add	a4,a4,s5
        q[i] = 0;
     4cc:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     4d0:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     4d4:	0785                	addi	a5,a5,1
     4d6:	b7d9                	j	49c <polydiv+0xb0>
        if( denum_temp[i] != 0 )
     4d8:	fb71                	bnez	a4,4ac <polydiv+0xc0>
    for (i = size_D-1; i >= 0; i = i-1){
     4da:	1bfd                	addi	s7,s7,-1
     4dc:	b7d1                	j	4a0 <polydiv+0xb4>
        if ( (b_N*u)%mod == 1 )
     4de:	0297e633          	rem	a2,a5,s1
     4e2:	97ba                	add	a5,a5,a4
     4e4:	fcd609e3          	beq	a2,a3,4b6 <polydiv+0xca>
    for (u = 0; u < mod; ++u){
     4e8:	0c05                	addi	s8,s8,1
     4ea:	b7e1                	j	4b2 <polydiv+0xc6>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     4ec:	eb01                	bnez	a4,4fc <polydiv+0x110>
    for (i = size_N-1; i >= 0; i = i-1){
     4ee:	17fd                	addi	a5,a5,-1
     4f0:	00279713          	slli	a4,a5,0x2
     4f4:	974e                	add	a4,a4,s3
     4f6:	4318                	lw	a4,0(a4)
     4f8:	fe07dae3          	bgez	a5,4ec <polydiv+0x100>
    while (d >= d2){

        // Set v := u × r_d × X^(d–N)
        v[(d-d2)] = u*r_d;

         if(size_N == 106) {
     4fc:	06a00d93          	li	s11,106
     500:	a299                	j	646 <polydiv+0x25a>
        v[(d-d2)] = u*r_d;
     502:	03870733          	mul	a4,a4,s8
     506:	417787b3          	sub	a5,a5,s7
     50a:	078a                	slli	a5,a5,0x2
     50c:	97d6                	add	a5,a5,s5
     50e:	c398                	sw	a4,0(a5)
         if(size_N == 106) {
     510:	0bb91963          	bne	s2,s11,5c2 <polydiv+0x1d6>
            array_mod(v, mod, size_N - 1);
     514:	06900613          	li	a2,105
     518:	85a6                	mv	a1,s1
     51a:	8556                	mv	a0,s5
     51c:	36d9                	jal	e2 <array_mod>
            while(v[size_N - 1] < 0){
     51e:	1a4aa783          	lw	a5,420(s5)
     522:	0807cc63          	bltz	a5,5ba <polydiv+0x1ce>
                v[size_N - 1] = v[size_N - 1]+mod;
            }
            v[size_N - 1] = v[size_N - 1] % mod;
     526:	0297e7b3          	rem	a5,a5,s1
     52a:	1afaa223          	sw	a5,420(s5)
        else{
            array_mod(v, mod, size_N);
        }

        // v*b
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     52e:	4781                	li	a5,0
     530:	8726                	mv	a4,s1
     532:	86da                	mv	a3,s6
     534:	8656                	mv	a2,s5
     536:	85da                	mv	a1,s6
     538:	8566                	mv	a0,s9
     53a:	36d9                	jal	100 <polymult>

        // make mod calculation for coefficents
     
        if(size_N == 106) {
     53c:	faa42e23          	sw	a0,-68(s0)
     540:	09b91a63          	bne	s2,s11,5d4 <polydiv+0x1e8>
            array_mod(product, mod, size_N - 1);
     544:	06900613          	li	a2,105
     548:	85a6                	mv	a1,s1
     54a:	3e61                	jal	e2 <array_mod>
            while(product[size_N - 1] < 0){
     54c:	fbc42703          	lw	a4,-68(s0)
     550:	1a472783          	lw	a5,420(a4)
     554:	0607cc63          	bltz	a5,5cc <polydiv+0x1e0>
                product[size_N - 1] = product[size_N - 1]+mod;
            }
            product[size_N - 1] = product[size_N - 1] % mod;
     558:	0297e7b3          	rem	a5,a5,s1
     55c:	1af72223          	sw	a5,420(a4)
     560:	86ce                	mv	a3,s3
     562:	4781                	li	a5,0
        else{
            array_mod(product, mod, size_N);
        }
        
        //r = r- v*b
        for (i = 0; i < size_N; ++i){
     564:	0727ce63          	blt	a5,s2,5e0 <polydiv+0x1f4>
            num_temp[i] = num_temp[i] - product[i];
        }

        // make mod calculation for coefficents
 	if(size_N == 106) {
     568:	09b91b63          	bne	s2,s11,5fe <polydiv+0x212>
            array_mod(num_temp, mod, size_N - 1);
     56c:	06900613          	li	a2,105
     570:	85a6                	mv	a1,s1
     572:	854e                	mv	a0,s3
     574:	36bd                	jal	e2 <array_mod>
            while(num_temp[size_N - 1] < 0){
     576:	1a49a783          	lw	a5,420(s3)
     57a:	0607ce63          	bltz	a5,5f6 <polydiv+0x20a>
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
            }
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     57e:	0297e7b3          	rem	a5,a5,s1
        else{
            array_mod(num_temp, mod, size_N);
	}
        // q = q + v;
    	if(size_N == 106) {
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     582:	06900613          	li	a2,105
     586:	85d6                	mv	a1,s5
     588:	8552                	mv	a0,s4
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     58a:	1af9a223          	sw	a5,420(s3)
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     58e:	3635                	jal	ba <array_add>
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     590:	1a4a2783          	lw	a5,420(s4)
     594:	1a4aa703          	lw	a4,420(s5)
        else{
            array_add(q, v, size_N );

        }
 	if(size_N == 106) {
            array_mod(q, mod, size_N - 1);
     598:	06900613          	li	a2,105
     59c:	85a6                	mv	a1,s1
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     59e:	97ba                	add	a5,a5,a4
            array_mod(q, mod, size_N - 1);
     5a0:	8552                	mv	a0,s4
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     5a2:	1afa2223          	sw	a5,420(s4)
            array_mod(q, mod, size_N - 1);
     5a6:	3e35                	jal	e2 <array_mod>
            while(q[size_N - 1] < 0){
     5a8:	1a4a2783          	lw	a5,420(s4)
     5ac:	0607ce63          	bltz	a5,628 <polydiv+0x23c>
                q[size_N - 1] = q[size_N - 1]+mod;
            }
            q[size_N - 1] = q[size_N - 1] % mod;
     5b0:	0297e7b3          	rem	a5,a5,s1
     5b4:	1afa2223          	sw	a5,420(s4)
     5b8:	a8b9                	j	616 <polydiv+0x22a>
                v[size_N - 1] = v[size_N - 1]+mod;
     5ba:	97a6                	add	a5,a5,s1
     5bc:	1afaa223          	sw	a5,420(s5)
     5c0:	bfb9                	j	51e <polydiv+0x132>
            array_mod(v, mod, size_N);
     5c2:	864a                	mv	a2,s2
     5c4:	85a6                	mv	a1,s1
     5c6:	8556                	mv	a0,s5
     5c8:	3e29                	jal	e2 <array_mod>
     5ca:	b795                	j	52e <polydiv+0x142>
                product[size_N - 1] = product[size_N - 1]+mod;
     5cc:	97a6                	add	a5,a5,s1
     5ce:	1af72223          	sw	a5,420(a4)
     5d2:	bfbd                	j	550 <polydiv+0x164>
            array_mod(product, mod, size_N);
     5d4:	864a                	mv	a2,s2
     5d6:	85a6                	mv	a1,s1
     5d8:	3629                	jal	e2 <array_mod>
     5da:	fbc42703          	lw	a4,-68(s0)
     5de:	b749                	j	560 <polydiv+0x174>
            num_temp[i] = num_temp[i] - product[i];
     5e0:	00279593          	slli	a1,a5,0x2
     5e4:	95ba                	add	a1,a1,a4
     5e6:	4290                	lw	a2,0(a3)
     5e8:	418c                	lw	a1,0(a1)
        for (i = 0; i < size_N; ++i){
     5ea:	0785                	addi	a5,a5,1
     5ec:	0691                	addi	a3,a3,4
            num_temp[i] = num_temp[i] - product[i];
     5ee:	8e0d                	sub	a2,a2,a1
     5f0:	fec6ae23          	sw	a2,-4(a3)
        for (i = 0; i < size_N; ++i){
     5f4:	bf85                	j	564 <polydiv+0x178>
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     5f6:	97a6                	add	a5,a5,s1
     5f8:	1af9a223          	sw	a5,420(s3)
     5fc:	bfad                	j	576 <polydiv+0x18a>
            array_mod(num_temp, mod, size_N);
     5fe:	864a                	mv	a2,s2
     600:	85a6                	mv	a1,s1
     602:	854e                	mv	a0,s3
     604:	3cf9                	jal	e2 <array_mod>
            array_add(q, v, size_N );
     606:	864a                	mv	a2,s2
     608:	85d6                	mv	a1,s5
     60a:	8552                	mv	a0,s4
     60c:	347d                	jal	ba <array_add>
        }
        else{
            array_mod(q, mod, size_N);
     60e:	864a                	mv	a2,s2
     610:	85a6                	mv	a1,s1
     612:	8552                	mv	a0,s4
     614:	34f9                	jal	e2 <array_mod>
    int v[size_N];
     616:	87ea                	mv	a5,s10
        }

        // Set d := deg r(X) (num)
        for (i = size_N-1; i >= 0; i = i-1){
     618:	00279713          	slli	a4,a5,0x2
     61c:	974e                	add	a4,a4,s3
     61e:	4318                	lw	a4,0(a4)
     620:	0007d863          	bgez	a5,630 <polydiv+0x244>
     624:	4681                	li	a3,0
     626:	a831                	j	642 <polydiv+0x256>
                q[size_N - 1] = q[size_N - 1]+mod;
     628:	97a6                	add	a5,a5,s1
     62a:	1afa2223          	sw	a5,420(s4)
     62e:	bfad                	j	5a8 <polydiv+0x1bc>
            if( num_temp[i] != 0 )
     630:	fb75                	bnez	a4,624 <polydiv+0x238>
        for (i = size_N-1; i >= 0; i = i-1){
     632:	17fd                	addi	a5,a5,-1
     634:	b7d5                	j	618 <polydiv+0x22c>
        d = i;
        r_d = num_temp[d];

        // make zero for next calculations
        for (i = 0; i < size_N; ++i){
            v[i] = 0;
     636:	00269613          	slli	a2,a3,0x2
     63a:	9656                	add	a2,a2,s5
     63c:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     640:	0685                	addi	a3,a3,1
     642:	ff26cae3          	blt	a3,s2,636 <polydiv+0x24a>
    while (d >= d2){
     646:	eb77dee3          	bge	a5,s7,502 <polydiv+0x116>
        }


    } //End While-1

    if(size_N == 106) {
     64a:	06a00793          	li	a5,106
     64e:	02f91063          	bne	s2,a5,66e <polydiv+0x282>
     array_equ(result, q, size_N - 1);   // 105 elemani ücer ücer yap...
     652:	06900613          	li	a2,105
     656:	85d2                	mv	a1,s4
     658:	00001517          	auipc	a0,0x1
     65c:	00c50513          	addi	a0,a0,12 # 1664 <result>
     660:	3c0d                	jal	92 <array_equ>
     result[size_N - 1] = q[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     662:	1a4a2783          	lw	a5,420(s4)
     666:	00001717          	auipc	a4,0x1
     66a:	1af72123          	sw	a5,418(a4) # 1808 <result+0x1a4>
 }

    for(i = size_N; i < (2*size_N); ++i){
     66e:	00191713          	slli	a4,s2,0x1
        result[i] = num_temp[i-size_N];
     672:	00001697          	auipc	a3,0x1
     676:	ff268693          	addi	a3,a3,-14 # 1664 <result>
    for(i = size_N; i < (2*size_N); ++i){
     67a:	02e94763          	blt	s2,a4,6a8 <polydiv+0x2bc>
    }

    return_address3 = &result[0];

    return return_address3;
}
     67e:	fb040113          	addi	sp,s0,-80
     682:	40b6                	lw	ra,76(sp)
     684:	4426                	lw	s0,72(sp)
     686:	4496                	lw	s1,68(sp)
     688:	4906                	lw	s2,64(sp)
     68a:	59f2                	lw	s3,60(sp)
     68c:	5a62                	lw	s4,56(sp)
     68e:	5ad2                	lw	s5,52(sp)
     690:	5b42                	lw	s6,48(sp)
     692:	5bb2                	lw	s7,44(sp)
     694:	5c22                	lw	s8,40(sp)
     696:	5c92                	lw	s9,36(sp)
     698:	5d02                	lw	s10,32(sp)
     69a:	4df2                	lw	s11,28(sp)
     69c:	00001517          	auipc	a0,0x1
     6a0:	fc850513          	addi	a0,a0,-56 # 1664 <result>
     6a4:	6161                	addi	sp,sp,80
     6a6:	8082                	ret
        result[i] = num_temp[i-size_N];
     6a8:	0009a603          	lw	a2,0(s3)
     6ac:	00291793          	slli	a5,s2,0x2
     6b0:	97b6                	add	a5,a5,a3
     6b2:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     6b4:	0905                	addi	s2,s2,1
     6b6:	0991                	addi	s3,s3,4
     6b8:	b7c9                	j	67a <polydiv+0x28e>

000006ba <ext_euclid>:
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
   

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     6ba:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6be:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     6c0:	07bd                	addi	a5,a5,15
     6c2:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6c4:	c4a2                	sw	s0,72(sp)
     6c6:	c2a6                	sw	s1,68(sp)
     6c8:	c0ca                	sw	s2,64(sp)
     6ca:	de4e                	sw	s3,60(sp)
     6cc:	dc52                	sw	s4,56(sp)
     6ce:	da56                	sw	s5,52(sp)
     6d0:	d85a                	sw	s6,48(sp)
     6d2:	d65e                	sw	s7,44(sp)
     6d4:	d462                	sw	s8,40(sp)
     6d6:	d266                	sw	s9,36(sp)
     6d8:	d06a                	sw	s10,32(sp)
     6da:	ce6e                	sw	s11,28(sp)
     6dc:	c686                	sw	ra,76(sp)
     6de:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     6e0:	40f10133          	sub	sp,sp,a5
     6e4:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6e6:	40f10133          	sub	sp,sp,a5
     6ea:	8a0a                	mv	s4,sp
    int ri[size];
     6ec:	40f10133          	sub	sp,sp,a5
     6f0:	8c0a                	mv	s8,sp

    int ti_1[size]; // ti_1[0] = 1
     6f2:	40f10133          	sub	sp,sp,a5
     6f6:	8b0a                	mv	s6,sp
    int ti[size];
     6f8:	40f10133          	sub	sp,sp,a5
     6fc:	8d0a                	mv	s10,sp
    int qi_1[size];
     6fe:	40f10133          	sub	sp,sp,a5
     702:	8c8a                	mv	s9,sp
    int temp[size];
     704:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     708:	8936                	mv	s2,a3
     70a:	8dae                	mv	s11,a1
     70c:	84b2                	mv	s1,a2
    int ri_2[size]; // MX-ring poly, a
     70e:	fff60b93          	addi	s7,a2,-1
    int temp[size];
     712:	8a8a                	mv	s5,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     714:	4781                	li	a5,0
        ti_2[i] = 0;
     716:	00001697          	auipc	a3,0x1
     71a:	1a668693          	addi	a3,a3,422 # 18bc <ti_2>
    for (i = 0; i < size; ++i) {
     71e:	1097cb63          	blt	a5,s1,834 <ext_euclid+0x17a>
    }
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////
    
    array_equ(ri_2,polyR,size);
     722:	85aa                	mv	a1,a0
     724:	8626                	mv	a2,s1
     726:	854e                	mv	a0,s3
     728:	32ad                	jal	92 <array_equ>
    
    array_equ(ri_1,polyf,size);
     72a:	85ee                	mv	a1,s11
     72c:	8626                	mv	a2,s1
     72e:	8552                	mv	a0,s4
     730:	328d                	jal	92 <array_equ>

    ti_1[0] = 1;
     732:	4785                	li	a5,1
     734:	00fb2023          	sw	a5,0(s6)
        // make mod for ri_1
	array_mod(ri_1,mod,N+1);


        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     738:	00149793          	slli	a5,s1,0x1
     73c:	faf42e23          	sw	a5,-68(s0)
	
	array_mod(temp,mod,size);


        for (i = 0; i < N + 1; ++i) {
            ti[i] = ti_2[i] - temp[i];
     740:	00001d97          	auipc	s11,0x1
     744:	17cd8d93          	addi	s11,s11,380 # 18bc <ti_2>
	array_mod(ri_2,mod,N+1);
     748:	8626                	mv	a2,s1
     74a:	85ca                	mv	a1,s2
     74c:	854e                	mv	a0,s3
     74e:	3a51                	jal	e2 <array_mod>
	array_mod(ri_1,mod,N+1);
     750:	8626                	mv	a2,s1
     752:	85ca                	mv	a1,s2
     754:	8552                	mv	a0,s4
     756:	3271                	jal	e2 <array_mod>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     758:	874a                	mv	a4,s2
     75a:	86a6                	mv	a3,s1
     75c:	8652                	mv	a2,s4
     75e:	85a6                	mv	a1,s1
     760:	854e                	mv	a0,s3
     762:	3169                	jal	3ec <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     764:	8762                	mv	a4,s8
     766:	87a6                	mv	a5,s1
     768:	fbc42683          	lw	a3,-68(s0)
     76c:	0cd7cf63          	blt	a5,a3,84a <ext_euclid+0x190>
     770:	4781                	li	a5,0
        for (i = 0; i < N + 1; ++i) {
     772:	4701                	li	a4,0
     774:	0eebd463          	bge	s7,a4,85c <ext_euclid+0x1a2>
        array_mod(temp,mod,N+1);
     778:	8626                	mv	a2,s1
     77a:	85ca                	mv	a1,s2
     77c:	8556                	mv	a0,s5
     77e:	3295                	jal	e2 <array_mod>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     780:	874a                	mv	a4,s2
     782:	86a6                	mv	a3,s1
     784:	8652                	mv	a2,s4
     786:	85a6                	mv	a1,s1
     788:	8556                	mv	a0,s5
     78a:	318d                	jal	3ec <polydiv>
     78c:	85aa                	mv	a1,a0
        array_equ(qi_1,res1,size);
     78e:	8626                	mv	a2,s1
     790:	8566                	mv	a0,s9
     792:	3201                	jal	92 <array_equ>
	array_mod(qi_1,mod,size);
     794:	8626                	mv	a2,s1
     796:	85ca                	mv	a1,s2
     798:	8566                	mv	a0,s9
     79a:	32a1                	jal	e2 <array_mod>
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     79c:	4781                	li	a5,0
     79e:	874a                	mv	a4,s2
     7a0:	86a6                	mv	a3,s1
     7a2:	865a                	mv	a2,s6
     7a4:	85a6                	mv	a1,s1
     7a6:	8566                	mv	a0,s9
     7a8:	3aa1                	jal	100 <polymult>
     7aa:	85aa                	mv	a1,a0
         array_equ(temp,res2,size);
     7ac:	8626                	mv	a2,s1
     7ae:	8556                	mv	a0,s5
     7b0:	30cd                	jal	92 <array_equ>
	array_mod(temp,mod,size);
     7b2:	8626                	mv	a2,s1
     7b4:	85ca                	mv	a1,s2
     7b6:	8556                	mv	a0,s5
     7b8:	322d                	jal	e2 <array_mod>
        for (i = 0; i < N + 1; ++i) {
     7ba:	4781                	li	a5,0
     7bc:	4701                	li	a4,0
     7be:	0aebdc63          	bge	s7,a4,876 <ext_euclid+0x1bc>
        }

        array_mod(ti,mod,N+1);
     7c2:	8626                	mv	a2,s1
     7c4:	85ca                	mv	a1,s2
     7c6:	856a                	mv	a0,s10
     7c8:	3a29                	jal	e2 <array_mod>

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

	array_equ(ri_2,ri_1,size);
     7ca:	8626                	mv	a2,s1
     7cc:	85d2                	mv	a1,s4
     7ce:	854e                	mv	a0,s3
     7d0:	30c9                	jal	92 <array_equ>

	array_equ(ri_1,ri,size);
     7d2:	8626                	mv	a2,s1
     7d4:	85e2                	mv	a1,s8
     7d6:	8552                	mv	a0,s4
     7d8:	386d                	jal	92 <array_equ>

	array_equ(ti_2,ti_1,size);
     7da:	8626                	mv	a2,s1
     7dc:	85da                	mv	a1,s6
     7de:	856e                	mv	a0,s11
     7e0:	384d                	jal	92 <array_equ>

	array_equ(ti_1,ti,size);
     7e2:	8626                	mv	a2,s1
     7e4:	85ea                	mv	a1,s10
     7e6:	855a                	mv	a0,s6
     7e8:	306d                	jal	92 <array_equ>
        controlR = 0;
     7ea:	4781                	li	a5,0


        for (i = 0; i < N + 1; ++i) {
     7ec:	4701                	li	a4,0
     7ee:	0aebd163          	bge	s7,a4,890 <ext_euclid+0x1d6>
    while (controlR != 0) {
     7f2:	f4079be3          	bnez	a5,748 <ext_euclid+0x8e>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     7f6:	4701                	li	a4,0
            if (((ri_2[0] * j) % mod) == 1)
     7f8:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     7fa:	0b274663          	blt	a4,s2,8a6 <ext_euclid+0x1ec>
     7fe:	00001617          	auipc	a2,0x1
     802:	0be60613          	addi	a2,a2,190 # 18bc <ti_2>
            if (ri_2[i] != 0)
                //	printf("** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! ***\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     806:	0afbda63          	bge	s7,a5,8ba <ext_euclid+0x200>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     80a:	fb040113          	addi	sp,s0,-80
     80e:	40b6                	lw	ra,76(sp)
     810:	4426                	lw	s0,72(sp)
     812:	4496                	lw	s1,68(sp)
     814:	4906                	lw	s2,64(sp)
     816:	59f2                	lw	s3,60(sp)
     818:	5a62                	lw	s4,56(sp)
     81a:	5ad2                	lw	s5,52(sp)
     81c:	5b42                	lw	s6,48(sp)
     81e:	5bb2                	lw	s7,44(sp)
     820:	5c22                	lw	s8,40(sp)
     822:	5c92                	lw	s9,36(sp)
     824:	5d02                	lw	s10,32(sp)
     826:	4df2                	lw	s11,28(sp)
     828:	00001517          	auipc	a0,0x1
     82c:	09450513          	addi	a0,a0,148 # 18bc <ti_2>
     830:	6161                	addi	sp,sp,80
     832:	8082                	ret
        ti_2[i] = 0;
     834:	00279713          	slli	a4,a5,0x2
     838:	00e68633          	add	a2,a3,a4
        ti_1[i] = 0;
     83c:	975a                	add	a4,a4,s6
        ti_2[i] = 0;
     83e:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     842:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size; ++i) {
     846:	0785                	addi	a5,a5,1
     848:	bdd9                	j	71e <ext_euclid+0x64>
            ri[i - (N + 1)] = res[i];
     84a:	00279693          	slli	a3,a5,0x2
     84e:	96aa                	add	a3,a3,a0
     850:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     852:	0785                	addi	a5,a5,1
     854:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     856:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     85a:	b739                	j	768 <ext_euclid+0xae>
            temp[i] = ri_2[i] - ri[i];
     85c:	00f986b3          	add	a3,s3,a5
     860:	00fc05b3          	add	a1,s8,a5
     864:	4294                	lw	a3,0(a3)
     866:	418c                	lw	a1,0(a1)
     868:	00fa8633          	add	a2,s5,a5
        for (i = 0; i < N + 1; ++i) {
     86c:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     86e:	8e8d                	sub	a3,a3,a1
     870:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     872:	0791                	addi	a5,a5,4
     874:	b701                	j	774 <ext_euclid+0xba>
            ti[i] = ti_2[i] - temp[i];
     876:	00fd86b3          	add	a3,s11,a5
     87a:	00fa85b3          	add	a1,s5,a5
     87e:	4294                	lw	a3,0(a3)
     880:	418c                	lw	a1,0(a1)
     882:	00fd0633          	add	a2,s10,a5
        for (i = 0; i < N + 1; ++i) {
     886:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     888:	8e8d                	sub	a3,a3,a1
     88a:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     88c:	0791                	addi	a5,a5,4
     88e:	bf05                	j	7be <ext_euclid+0x104>
            qi_1[i] = 0;
     890:	00271693          	slli	a3,a4,0x2
     894:	00dc8633          	add	a2,s9,a3
            controlR += ri[i];
     898:	96e2                	add	a3,a3,s8
     89a:	4294                	lw	a3,0(a3)
            qi_1[i] = 0;
     89c:	00062023          	sw	zero,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8a0:	0705                	addi	a4,a4,1
            controlR += ri[i];
     8a2:	97b6                	add	a5,a5,a3
        for (i = 0; i < N + 1; ++i) {
     8a4:	b7a9                	j	7ee <ext_euclid+0x134>
            if (((ri_2[0] * j) % mod) == 1)
     8a6:	0009a683          	lw	a3,0(s3)
     8aa:	02d706b3          	mul	a3,a4,a3
     8ae:	0326e6b3          	rem	a3,a3,s2
     8b2:	f4c686e3          	beq	a3,a2,7fe <ext_euclid+0x144>
        for (j = 0; j < mod; ++j) {
     8b6:	0705                	addi	a4,a4,1
     8b8:	b789                	j	7fa <ext_euclid+0x140>
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8ba:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8bc:	0785                	addi	a5,a5,1
     8be:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8c0:	02d706b3          	mul	a3,a4,a3
     8c4:	0326e6b3          	rem	a3,a3,s2
     8c8:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     8cc:	bf2d                	j	806 <ext_euclid+0x14c>

000008ce <generate_keys>:




int* generate_keys(int N, int p, int q){
     8ce:	7141                	addi	sp,sp,-496
     8d0:	1e112623          	sw	ra,492(sp)
     8d4:	1e812423          	sw	s0,488(sp)
     8d8:	1e912223          	sw	s1,484(sp)
     8dc:	1b80                	addi	s0,sp,496
     8de:	1f212023          	sw	s2,480(sp)
     8e2:	1d312e23          	sw	s3,476(sp)
     8e6:	1d412c23          	sw	s4,472(sp)
     8ea:	1d512a23          	sw	s5,468(sp)
     8ee:	1d612823          	sw	s6,464(sp)
     8f2:	1d712623          	sw	s7,460(sp)
     8f6:	1da12023          	sw	s10,448(sp)
     8fa:	1d812423          	sw	s8,456(sp)
     8fe:	1d912223          	sw	s9,452(sp)
     902:	892a                	mv	s2,a0
     904:	8bae                	mv	s7,a1
     906:	8b32                	mv	s6,a2
  

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     908:	4581                	li	a1,0
     90a:	0d000613          	li	a2,208
     90e:	e2440513          	addi	a0,s0,-476
     912:	2b91                	jal	e66 <memset>
     914:	4485                	li	s1,1
     916:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     918:	0d800613          	li	a2,216
     91c:	4581                	li	a1,0
     91e:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     922:	e1342c23          	sw	s3,-488(s0)
     926:	e0942e23          	sw	s1,-484(s0)
     92a:	e2942023          	sw	s1,-480(s0)
     92e:	e3342423          	sw	s3,-472(s0)
     932:	e2942823          	sw	s1,-464(s0)
     936:	e2942e23          	sw	s1,-452(s0)
     93a:	e5342023          	sw	s3,-448(s0)
     93e:	e5342223          	sw	s3,-444(s0)
     942:	e4942623          	sw	s1,-436(s0)
     946:	e5342a23          	sw	s3,-428(s0)
     94a:	e4942e23          	sw	s1,-420(s0)
     94e:	e6942023          	sw	s1,-416(s0)
     952:	e7342623          	sw	s3,-404(s0)
     956:	e6942a23          	sw	s1,-396(s0)
     95a:	e8942023          	sw	s1,-384(s0)
     95e:	e8942223          	sw	s1,-380(s0)
     962:	e8942423          	sw	s1,-376(s0)
     966:	e9342623          	sw	s3,-372(s0)
     96a:	e8942a23          	sw	s1,-364(s0)
     96e:	ea942023          	sw	s1,-352(s0)
     972:	ea942223          	sw	s1,-348(s0)
     976:	ea942423          	sw	s1,-344(s0)
     97a:	eb342623          	sw	s3,-340(s0)
     97e:	ea942a23          	sw	s1,-332(s0)
     982:	ec942023          	sw	s1,-320(s0)
     986:	ec942223          	sw	s1,-316(s0)
     98a:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     98e:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     992:	29d1                	jal	e66 <memset>
    int polyR[N+1];
     994:	002a9793          	slli	a5,s5,0x2
     998:	07bd                	addi	a5,a5,15
     99a:	9bc1                	andi	a5,a5,-16
     99c:	40f10133          	sub	sp,sp,a5
     9a0:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     9a2:	00291d13          	slli	s10,s2,0x2
     9a6:	01aa07b3          	add	a5,s4,s10
     9aa:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9ac:	ef342a23          	sw	s3,-268(s0)
     9b0:	ee942e23          	sw	s1,-260(s0)
     9b4:	f0942023          	sw	s1,-256(s0)
     9b8:	f0942423          	sw	s1,-248(s0)
     9bc:	f1342a23          	sw	s3,-236(s0)
     9c0:	f1342e23          	sw	s3,-228(s0)
     9c4:	f3342023          	sw	s3,-224(s0)
     9c8:	f2942423          	sw	s1,-216(s0)
     9cc:	f3342823          	sw	s3,-208(s0)
     9d0:	f2942c23          	sw	s1,-200(s0)
     9d4:	f4942223          	sw	s1,-188(s0)
     9d8:	f5342423          	sw	s3,-184(s0)
     9dc:	f4942823          	sw	s1,-176(s0)
     9e0:	f4942e23          	sw	s1,-164(s0)
     9e4:	f7342023          	sw	s3,-160(s0)
     9e8:	f6942423          	sw	s1,-152(s0)
     9ec:	f6942a23          	sw	s1,-140(s0)
     9f0:	f7342c23          	sw	s3,-136(s0)
     9f4:	f8942023          	sw	s1,-128(s0)
     9f8:	f8942423          	sw	s1,-120(s0)
     9fc:	f8942623          	sw	s1,-116(s0)
     a00:	f8942c23          	sw	s1,-104(s0)
     a04:	f9342e23          	sw	s3,-100(s0)
     a08:	fa942223          	sw	s1,-92(s0)
     a0c:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
     a10:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     a14:	4785                	li	a5,1
     a16:	1127c263          	blt	a5,s2,b1a <generate_keys+0x24c>
     a1a:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     a1c:	03600693          	li	a3,54
     a20:	10f6d463          	bge	a3,a5,b28 <generate_keys+0x25a>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     a24:	4781                	li	a5,0
        random_keys[i] = f[i];
     a26:	00001697          	auipc	a3,0x1
     a2a:	02668693          	addi	a3,a3,38 # 1a4c <random_keys>
    for(i = 0; i < N; ++i){
     a2e:	1127cb63          	blt	a5,s2,b44 <generate_keys+0x276>
     a32:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     a36:	00191993          	slli	s3,s2,0x1
     a3a:	87ca                	mv	a5,s2
     a3c:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     a3e:	00001617          	auipc	a2,0x1
     a42:	00e60613          	addi	a2,a2,14 # 1a4c <random_keys>
    for(i = N; i < (2*N); ++i){
     a46:	1137ca63          	blt	a5,s3,b5a <generate_keys+0x28c>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     a4a:	448d                	li	s1,3
     a4c:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     a50:	86de                	mv	a3,s7
     a52:	8656                	mv	a2,s5
     a54:	e1840593          	addi	a1,s0,-488
     a58:	8552                	mv	a0,s4
     a5a:	3185                	jal	6ba <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     a5c:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     a5e:	00001697          	auipc	a3,0x1
     a62:	fee68693          	addi	a3,a3,-18 # 1a4c <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     a66:	1097c263          	blt	a5,s1,b6a <generate_keys+0x29c>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     a6a:	8656                	mv	a2,s5
     a6c:	86da                	mv	a3,s6
     a6e:	e1840593          	addi	a1,s0,-488
     a72:	8552                	mv	a0,s4
     a74:	3199                	jal	6ba <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     a76:	5751                	li	a4,-12
     a78:	02e90733          	mul	a4,s2,a4
     a7c:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
     a7e:	00001617          	auipc	a2,0x1
     a82:	fce60613          	addi	a2,a2,-50 # 1a4c <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     a86:	0fa4ca63          	blt	s1,s10,b7a <generate_keys+0x2ac>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     a8a:	4701                	li	a4,0
     a8c:	85ca                	mv	a1,s2
     a8e:	86ca                	mv	a3,s2
     a90:	8666                	mv	a2,s9
     a92:	ffcff0ef          	jal	ra,28e <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     a96:	87aa                	mv	a5,a0
     a98:	4701                	li	a4,0
     a9a:	fff98593          	addi	a1,s3,-1
     a9e:	0eb74863          	blt	a4,a1,b8e <generate_keys+0x2c0>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     aa2:	86d6                	mv	a3,s5
     aa4:	875a                	mv	a4,s6
     aa6:	8652                	mv	a2,s4
     aa8:	3291                	jal	3ec <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     aaa:	4795                	li	a5,5
     aac:	02f907b3          	mul	a5,s2,a5
     ab0:	098a                	slli	s3,s3,0x2
     ab2:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     ab4:	00001697          	auipc	a3,0x1
     ab8:	f9868693          	addi	a3,a3,-104 # 1a4c <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     abc:	0991                	addi	s3,s3,4
     abe:	0efc4063          	blt	s8,a5,b9e <generate_keys+0x2d0>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     ac2:	4699                	li	a3,6
     ac4:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     ac6:	00001617          	auipc	a2,0x1
     aca:	f8660613          	addi	a2,a2,-122 # 1a4c <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     ace:	02d906b3          	mul	a3,s2,a3
     ad2:	02a90933          	mul	s2,s2,a0
     ad6:	0cf6dc63          	bge	a3,a5,bae <generate_keys+0x2e0>


    return_address5 = &random_keys[0];

    return return_address5;
}
     ada:	e1040113          	addi	sp,s0,-496
     ade:	1ec12083          	lw	ra,492(sp)
     ae2:	1e812403          	lw	s0,488(sp)
     ae6:	1e412483          	lw	s1,484(sp)
     aea:	1e012903          	lw	s2,480(sp)
     aee:	1dc12983          	lw	s3,476(sp)
     af2:	1d812a03          	lw	s4,472(sp)
     af6:	1d412a83          	lw	s5,468(sp)
     afa:	1d012b03          	lw	s6,464(sp)
     afe:	1cc12b83          	lw	s7,460(sp)
     b02:	1c812c03          	lw	s8,456(sp)
     b06:	1c412c83          	lw	s9,452(sp)
     b0a:	1c012d03          	lw	s10,448(sp)
     b0e:	00001517          	auipc	a0,0x1
     b12:	f3e50513          	addi	a0,a0,-194 # 1a4c <random_keys>
     b16:	617d                	addi	sp,sp,496
     b18:	8082                	ret
        polyR[i] = 0;
     b1a:	00279713          	slli	a4,a5,0x2
     b1e:	9752                	add	a4,a4,s4
     b20:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     b24:	0785                	addi	a5,a5,1
     b26:	bdc5                	j	a16 <generate_keys+0x148>
        f[i] = 0;
     b28:	00279713          	slli	a4,a5,0x2
     b2c:	e1840613          	addi	a2,s0,-488
     b30:	963a                	add	a2,a2,a4
     b32:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     b36:	ef440613          	addi	a2,s0,-268
     b3a:	9732                	add	a4,a4,a2
     b3c:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     b40:	0785                	addi	a5,a5,1
     b42:	bdf9                	j	a20 <generate_keys+0x152>
        random_keys[i] = f[i];
     b44:	00279713          	slli	a4,a5,0x2
     b48:	e1840593          	addi	a1,s0,-488
     b4c:	00e68633          	add	a2,a3,a4
     b50:	972e                	add	a4,a4,a1
     b52:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     b54:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     b56:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     b58:	bdd9                	j	a2e <generate_keys+0x160>
        random_keys[i] = g[i-N];
     b5a:	430c                	lw	a1,0(a4)
     b5c:	00279693          	slli	a3,a5,0x2
     b60:	96b2                	add	a3,a3,a2
     b62:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     b64:	0785                	addi	a5,a5,1
     b66:	0711                	addi	a4,a4,4
     b68:	bdf9                	j	a46 <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
     b6a:	4110                	lw	a2,0(a0)
     b6c:	00279713          	slli	a4,a5,0x2
     b70:	9736                	add	a4,a4,a3
     b72:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     b74:	0785                	addi	a5,a5,1
     b76:	0511                	addi	a0,a0,4
     b78:	b5fd                	j	a66 <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
     b7a:	00249793          	slli	a5,s1,0x2
     b7e:	00f706b3          	add	a3,a4,a5
     b82:	96aa                	add	a3,a3,a0
     b84:	4294                	lw	a3,0(a3)
     b86:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     b88:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     b8a:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     b8c:	bded                	j	a86 <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
     b8e:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     b90:	0705                	addi	a4,a4,1
     b92:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     b94:	037686b3          	mul	a3,a3,s7
     b98:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     b9c:	b709                	j	a9e <generate_keys+0x1d0>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b9e:	ff89a603          	lw	a2,-8(s3)
     ba2:	002c1713          	slli	a4,s8,0x2
     ba6:	9736                	add	a4,a4,a3
     ba8:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     baa:	0c05                	addi	s8,s8,1
     bac:	bf01                	j	abc <generate_keys+0x1ee>
        random_keys[i] = polyR[i-(5*N)];
     bae:	00279713          	slli	a4,a5,0x2
     bb2:	00e605b3          	add	a1,a2,a4
     bb6:	974a                	add	a4,a4,s2
     bb8:	9752                	add	a4,a4,s4
     bba:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     bbc:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     bbe:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     bc0:	bf19                	j	ad6 <generate_keys+0x208>

00000bc2 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bc2:	7115                	addi	sp,sp,-224
     bc4:	cda2                	sw	s0,216(sp)
     bc6:	cba6                	sw	s1,212(sp)
     bc8:	842a                	mv	s0,a0
     bca:	84b2                	mv	s1,a2
     bcc:	c9ca                	sw	s2,208(sp)

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bce:	0c000613          	li	a2,192
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bd2:	892e                	mv	s2,a1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bd4:	850a                	mv	a0,sp
     bd6:	00000597          	auipc	a1,0x0
     bda:	45a58593          	addi	a1,a1,1114 # 1030 <_endtext>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bde:	cf86                	sw	ra,220(sp)
     be0:	c7ce                	sw	s3,204(sp)
     be2:	c5d2                	sw	s4,200(sp)
     be4:	89b6                	mv	s3,a3
     be6:	8a3a                	mv	s4,a4
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     be8:	2245                	jal	d88 <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     bea:	4781                	li	a5,0
     bec:	874a                	mv	a4,s2
     bee:	03000693          	li	a3,48
     bf2:	85a2                	mv	a1,s0
     bf4:	860a                	mv	a2,sp
     bf6:	854e                	mv	a0,s3
     bf8:	d08ff0ef          	jal	ra,100 <polymult>

    /////// PUBLIC_KEY*RANDOM_VALUE ///////


	array_add(temp,message,48);
     bfc:	85a6                	mv	a1,s1
     bfe:	03000613          	li	a2,48
    temp = polymult(public_key,N,random_val,48,q,0);
     c02:	89aa                	mv	s3,a0

    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c04:	00141493          	slli	s1,s0,0x1
	array_add(temp,message,48);
     c08:	cb2ff0ef          	jal	ra,ba <array_add>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c0c:	00140693          	addi	a3,s0,1
     c10:	874a                	mv	a4,s2
     c12:	8652                	mv	a2,s4
     c14:	85a6                	mv	a1,s1
     c16:	854e                	mv	a0,s3
     c18:	fd4ff0ef          	jal	ra,3ec <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     c1c:	478d                	li	a5,3
     c1e:	02f40433          	mul	s0,s0,a5
     c22:	87aa                	mv	a5,a0
     c24:	0084ca63          	blt	s1,s0,c38 <ntru_encyrpt+0x76>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
     c28:	40fe                	lw	ra,220(sp)
     c2a:	446e                	lw	s0,216(sp)
     c2c:	44de                	lw	s1,212(sp)
     c2e:	494e                	lw	s2,208(sp)
     c30:	49be                	lw	s3,204(sp)
     c32:	4a2e                	lw	s4,200(sp)
     c34:	612d                	addi	sp,sp,224
     c36:	8082                	ret
        CT[i-(2*N)] = CT[i];
     c38:	00249713          	slli	a4,s1,0x2
     c3c:	972a                	add	a4,a4,a0
     c3e:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     c40:	0485                	addi	s1,s1,1
     c42:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     c44:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     c48:	bff1                	j	c24 <ntru_encyrpt+0x62>

00000c4a <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c4a:	7179                	addi	sp,sp,-48
     c4c:	d422                	sw	s0,40(sp)
     c4e:	ce4e                	sw	s3,28(sp)
     c50:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     c52:	498d                	li	s3,3
     c54:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c58:	d04a                	sw	s2,32(sp)
     c5a:	ca56                	sw	s5,20(sp)
     c5c:	c65e                	sw	s7,12(sp)
     c5e:	8932                	mv	s2,a2
     c60:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c62:	863e                	mv	a2,a5
     c64:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c66:	8aae                	mv	s5,a1
     c68:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c6a:	85a2                	mv	a1,s0
     c6c:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c6e:	d606                	sw	ra,44(sp)
     c70:	d226                	sw	s1,36(sp)
     c72:	cc52                	sw	s4,24(sp)
     c74:	c85a                	sw	s6,16(sp)
     c76:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c78:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c7c:	e12ff0ef          	jal	ra,28e <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c80:	00140b13          	addi	s6,s0,1
     c84:	874a                	mv	a4,s2
     c86:	86da                	mv	a3,s6
     c88:	8652                	mv	a2,s4
     c8a:	85a6                	mv	a1,s1
     c8c:	f60ff0ef          	jal	ra,3ec <polydiv>
     c90:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     c92:	87aa                	mv	a5,a0
     c94:	872a                	mv	a4,a0
     c96:	86a6                	mv	a3,s1
     c98:	0536c263          	blt	a3,s3,cdc <ntru_deceypt+0x92>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     c9c:	4589                	li	a1,2
     c9e:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     ca2:	4701                	li	a4,0
     ca4:	04874563          	blt	a4,s0,cee <ntru_deceypt+0xa4>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     ca8:	4701                	li	a4,0
     caa:	86a2                	mv	a3,s0
     cac:	85a2                	mv	a1,s0
     cae:	855e                	mv	a0,s7
     cb0:	ddeff0ef          	jal	ra,28e <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cb4:	8756                	mv	a4,s5
     cb6:	86da                	mv	a3,s6
     cb8:	8652                	mv	a2,s4
     cba:	85a6                	mv	a1,s1
     cbc:	f30ff0ef          	jal	ra,3ec <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     cc0:	87aa                	mv	a5,a0
     cc2:	0334cf63          	blt	s1,s3,d00 <ntru_deceypt+0xb6>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
     cc6:	50b2                	lw	ra,44(sp)
     cc8:	5422                	lw	s0,40(sp)
     cca:	5492                	lw	s1,36(sp)
     ccc:	5902                	lw	s2,32(sp)
     cce:	49f2                	lw	s3,28(sp)
     cd0:	4a62                	lw	s4,24(sp)
     cd2:	4ad2                	lw	s5,20(sp)
     cd4:	4b42                	lw	s6,16(sp)
     cd6:	4bb2                	lw	s7,12(sp)
     cd8:	6145                	addi	sp,sp,48
     cda:	8082                	ret
        a2[i-(2*N)] = a2[i];
     cdc:	00269593          	slli	a1,a3,0x2
     ce0:	95b2                	add	a1,a1,a2
     ce2:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     ce4:	0685                	addi	a3,a3,1
     ce6:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     ce8:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     cec:	b775                	j	c98 <ntru_deceypt+0x4e>
        if(a2[i] <= q/2)
     cee:	4394                	lw	a3,0(a5)
     cf0:	00d5d563          	bge	a1,a3,cfa <ntru_deceypt+0xb0>
            a2[i] = (-1)*(q-a2[i]);
     cf4:	412686b3          	sub	a3,a3,s2
     cf8:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     cfa:	0705                	addi	a4,a4,1
     cfc:	0791                	addi	a5,a5,4
     cfe:	b75d                	j	ca4 <ntru_deceypt+0x5a>
        c2[i-(2*N)] = c2[i];
     d00:	00249713          	slli	a4,s1,0x2
     d04:	972a                	add	a4,a4,a0
     d06:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d08:	0485                	addi	s1,s1,1
     d0a:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     d0c:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d10:	bf4d                	j	cc2 <ntru_deceypt+0x78>

00000d12 <default_exc_handler>:
  jal x0, default_exc_handler
     d12:	0000006f          	j	d12 <default_exc_handler>

00000d16 <reset_handler>:
  mv  x1, x0
     d16:	00000093          	li	ra,0
  mv  x2, x1
     d1a:	8106                	mv	sp,ra
  mv  x3, x1
     d1c:	8186                	mv	gp,ra
  mv  x4, x1
     d1e:	8206                	mv	tp,ra
  mv  x5, x1
     d20:	8286                	mv	t0,ra
  mv  x6, x1
     d22:	8306                	mv	t1,ra
  mv  x7, x1
     d24:	8386                	mv	t2,ra
  mv  x8, x1
     d26:	8406                	mv	s0,ra
  mv  x9, x1
     d28:	8486                	mv	s1,ra
  mv x10, x1
     d2a:	8506                	mv	a0,ra
  mv x11, x1
     d2c:	8586                	mv	a1,ra
  mv x12, x1
     d2e:	8606                	mv	a2,ra
  mv x13, x1
     d30:	8686                	mv	a3,ra
  mv x14, x1
     d32:	8706                	mv	a4,ra
  mv x15, x1
     d34:	8786                	mv	a5,ra
  mv x16, x1
     d36:	8806                	mv	a6,ra
  mv x17, x1
     d38:	8886                	mv	a7,ra
  mv x18, x1
     d3a:	8906                	mv	s2,ra
  mv x19, x1
     d3c:	8986                	mv	s3,ra
  mv x20, x1
     d3e:	8a06                	mv	s4,ra
  mv x21, x1
     d40:	8a86                	mv	s5,ra
  mv x22, x1
     d42:	8b06                	mv	s6,ra
  mv x23, x1
     d44:	8b86                	mv	s7,ra
  mv x24, x1
     d46:	8c06                	mv	s8,ra
  mv x25, x1
     d48:	8c86                	mv	s9,ra
  mv x26, x1
     d4a:	8d06                	mv	s10,ra
  mv x27, x1
     d4c:	8d86                	mv	s11,ra
  mv x28, x1
     d4e:	8e06                	mv	t3,ra
  mv x29, x1
     d50:	8e86                	mv	t4,ra
  mv x30, x1
     d52:	8f06                	mv	t5,ra
  mv x31, x1
     d54:	8f86                	mv	t6,ra
  la   x2, _stack_start
     d56:	0000f117          	auipc	sp,0xf
     d5a:	2aa10113          	addi	sp,sp,682 # 10000 <_stack_start>

00000d5e <_start>:
  la x26, _bss_start
     d5e:	00000d17          	auipc	s10,0x0
     d62:	456d0d13          	addi	s10,s10,1110 # 11b4 <_bss_start>
  la x27, _bss_end
     d66:	00001d97          	auipc	s11,0x1
     d6a:	1e2d8d93          	addi	s11,s11,482 # 1f48 <_bss_end>
  bge x26, x27, zero_loop_end
     d6e:	01bd5763          	bge	s10,s11,d7c <main_entry>

00000d72 <zero_loop>:
  sw x0, 0(x26)
     d72:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
     d76:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
     d78:	ffaddde3          	bge	s11,s10,d72 <zero_loop>

00000d7c <main_entry>:
  addi x10, x0, 0
     d7c:	00000513          	li	a0,0
  addi x11, x0, 0
     d80:	00000593          	li	a1,0
  jal x1, main
     d84:	18a000ef          	jal	ra,f0e <main>

00000d88 <memcpy>:
     d88:	00a5c7b3          	xor	a5,a1,a0
     d8c:	8b8d                	andi	a5,a5,3
     d8e:	00c508b3          	add	a7,a0,a2
     d92:	e7a1                	bnez	a5,dda <memcpy+0x52>
     d94:	478d                	li	a5,3
     d96:	04c7f263          	bgeu	a5,a2,dda <memcpy+0x52>
     d9a:	00357793          	andi	a5,a0,3
     d9e:	872a                	mv	a4,a0
     da0:	eba9                	bnez	a5,df2 <memcpy+0x6a>
     da2:	ffc8f613          	andi	a2,a7,-4
     da6:	fe060793          	addi	a5,a2,-32
     daa:	06f76763          	bltu	a4,a5,e18 <memcpy+0x90>
     dae:	02c77363          	bgeu	a4,a2,dd4 <memcpy+0x4c>
     db2:	86ae                	mv	a3,a1
     db4:	87ba                	mv	a5,a4
     db6:	0006a803          	lw	a6,0(a3)
     dba:	0791                	addi	a5,a5,4
     dbc:	0691                	addi	a3,a3,4
     dbe:	ff07ae23          	sw	a6,-4(a5)
     dc2:	fec7eae3          	bltu	a5,a2,db6 <memcpy+0x2e>
     dc6:	fff60793          	addi	a5,a2,-1
     dca:	8f99                	sub	a5,a5,a4
     dcc:	9bf1                	andi	a5,a5,-4
     dce:	0791                	addi	a5,a5,4
     dd0:	973e                	add	a4,a4,a5
     dd2:	95be                	add	a1,a1,a5
     dd4:	01176663          	bltu	a4,a7,de0 <memcpy+0x58>
     dd8:	8082                	ret
     dda:	872a                	mv	a4,a0
     ddc:	ff157ee3          	bgeu	a0,a7,dd8 <memcpy+0x50>
     de0:	0005c783          	lbu	a5,0(a1)
     de4:	0705                	addi	a4,a4,1
     de6:	0585                	addi	a1,a1,1
     de8:	fef70fa3          	sb	a5,-1(a4)
     dec:	ff176ae3          	bltu	a4,a7,de0 <memcpy+0x58>
     df0:	8082                	ret
     df2:	0005c683          	lbu	a3,0(a1)
     df6:	0705                	addi	a4,a4,1
     df8:	00377793          	andi	a5,a4,3
     dfc:	fed70fa3          	sb	a3,-1(a4)
     e00:	0585                	addi	a1,a1,1
     e02:	d3c5                	beqz	a5,da2 <memcpy+0x1a>
     e04:	0005c683          	lbu	a3,0(a1)
     e08:	0705                	addi	a4,a4,1
     e0a:	00377793          	andi	a5,a4,3
     e0e:	fed70fa3          	sb	a3,-1(a4)
     e12:	0585                	addi	a1,a1,1
     e14:	fff9                	bnez	a5,df2 <memcpy+0x6a>
     e16:	b771                	j	da2 <memcpy+0x1a>
     e18:	41d4                	lw	a3,4(a1)
     e1a:	0005a283          	lw	t0,0(a1)
     e1e:	0085af83          	lw	t6,8(a1)
     e22:	00c5af03          	lw	t5,12(a1)
     e26:	0105ae83          	lw	t4,16(a1)
     e2a:	0145ae03          	lw	t3,20(a1)
     e2e:	0185a303          	lw	t1,24(a1)
     e32:	01c5a803          	lw	a6,28(a1)
     e36:	c354                	sw	a3,4(a4)
     e38:	5194                	lw	a3,32(a1)
     e3a:	00572023          	sw	t0,0(a4)
     e3e:	01f72423          	sw	t6,8(a4)
     e42:	01e72623          	sw	t5,12(a4)
     e46:	01d72823          	sw	t4,16(a4)
     e4a:	01c72a23          	sw	t3,20(a4)
     e4e:	00672c23          	sw	t1,24(a4)
     e52:	01072e23          	sw	a6,28(a4)
     e56:	d314                	sw	a3,32(a4)
     e58:	02470713          	addi	a4,a4,36
     e5c:	02458593          	addi	a1,a1,36
     e60:	faf76ce3          	bltu	a4,a5,e18 <memcpy+0x90>
     e64:	b7a9                	j	dae <memcpy+0x26>

00000e66 <memset>:
     e66:	433d                	li	t1,15
     e68:	872a                	mv	a4,a0
     e6a:	02c37363          	bgeu	t1,a2,e90 <memset+0x2a>
     e6e:	00f77793          	andi	a5,a4,15
     e72:	efbd                	bnez	a5,ef0 <memset+0x8a>
     e74:	e5ad                	bnez	a1,ede <memset+0x78>
     e76:	ff067693          	andi	a3,a2,-16
     e7a:	8a3d                	andi	a2,a2,15
     e7c:	96ba                	add	a3,a3,a4
     e7e:	c30c                	sw	a1,0(a4)
     e80:	c34c                	sw	a1,4(a4)
     e82:	c70c                	sw	a1,8(a4)
     e84:	c74c                	sw	a1,12(a4)
     e86:	0741                	addi	a4,a4,16
     e88:	fed76be3          	bltu	a4,a3,e7e <memset+0x18>
     e8c:	e211                	bnez	a2,e90 <memset+0x2a>
     e8e:	8082                	ret
     e90:	40c306b3          	sub	a3,t1,a2
     e94:	068a                	slli	a3,a3,0x2
     e96:	00000297          	auipc	t0,0x0
     e9a:	9696                	add	a3,a3,t0
     e9c:	00a68067          	jr	10(a3)
     ea0:	00b70723          	sb	a1,14(a4)
     ea4:	00b706a3          	sb	a1,13(a4)
     ea8:	00b70623          	sb	a1,12(a4)
     eac:	00b705a3          	sb	a1,11(a4)
     eb0:	00b70523          	sb	a1,10(a4)
     eb4:	00b704a3          	sb	a1,9(a4)
     eb8:	00b70423          	sb	a1,8(a4)
     ebc:	00b703a3          	sb	a1,7(a4)
     ec0:	00b70323          	sb	a1,6(a4)
     ec4:	00b702a3          	sb	a1,5(a4)
     ec8:	00b70223          	sb	a1,4(a4)
     ecc:	00b701a3          	sb	a1,3(a4)
     ed0:	00b70123          	sb	a1,2(a4)
     ed4:	00b700a3          	sb	a1,1(a4)
     ed8:	00b70023          	sb	a1,0(a4)
     edc:	8082                	ret
     ede:	0ff5f593          	andi	a1,a1,255
     ee2:	00859693          	slli	a3,a1,0x8
     ee6:	8dd5                	or	a1,a1,a3
     ee8:	01059693          	slli	a3,a1,0x10
     eec:	8dd5                	or	a1,a1,a3
     eee:	b761                	j	e76 <memset+0x10>
     ef0:	00279693          	slli	a3,a5,0x2
     ef4:	00000297          	auipc	t0,0x0
     ef8:	9696                	add	a3,a3,t0
     efa:	8286                	mv	t0,ra
     efc:	fa8680e7          	jalr	-88(a3)
     f00:	8096                	mv	ra,t0
     f02:	17c1                	addi	a5,a5,-16
     f04:	8f1d                	sub	a4,a4,a5
     f06:	963e                	add	a2,a2,a5
     f08:	f8c374e3          	bgeu	t1,a2,e90 <memset+0x2a>
     f0c:	b7a5                	j	e74 <memset+0xe>

00000f0e <main>:

int main(){
     f0e:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f12:	0c000613          	li	a2,192
     f16:	00000597          	auipc	a1,0x0
     f1a:	1da58593          	addi	a1,a1,474 # 10f0 <_endtext+0xc0>
     f1e:	0068                	addi	a0,sp,12
int main(){
     f20:	42112623          	sw	ra,1068(sp)
     f24:	42812423          	sw	s0,1064(sp)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f28:	3585                	jal	d88 <memcpy>

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    keys = generate_keys(N, p, q);
     f2a:	06500613          	li	a2,101
     f2e:	458d                	li	a1,3
     f30:	03500513          	li	a0,53
     f34:	3a69                	jal	8ce <generate_keys>
     f36:	4781                	li	a5,0


   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
     f38:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
     f3c:	00f506b3          	add	a3,a0,a5
     f40:	4290                	lw	a2,0(a3)
     f42:	1314                	addi	a3,sp,416
     f44:	96be                	add	a3,a3,a5
     f46:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
     f48:	0791                	addi	a5,a5,4
     f4a:	fee799e3          	bne	a5,a4,f3c <main+0x2e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
     f4e:	1cd8                	addi	a4,sp,628
     f50:	1a850793          	addi	a5,a0,424
     f54:	27c50693          	addi	a3,a0,636
     f58:	843a                	mv	s0,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
     f5a:	4390                	lw	a2,0(a5)
     f5c:	0791                	addi	a5,a5,4
     f5e:	0711                	addi	a4,a4,4
     f60:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
     f64:	fed79be3          	bne	a5,a3,f5a <main+0x4c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
     f68:	01f8                	addi	a4,sp,204
     f6a:	35050793          	addi	a5,a0,848
     f6e:	42450613          	addi	a2,a0,1060
     f72:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
     f74:	438c                	lw	a1,0(a5)
     f76:	0791                	addi	a5,a5,4
     f78:	0711                	addi	a4,a4,4
     f7a:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
     f7e:	fec79be3          	bne	a5,a2,f74 <main+0x66>
     f82:	06b0                	addi	a2,sp,840
     f84:	4fc50513          	addi	a0,a0,1276
     f88:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
     f8a:	4398                	lw	a4,0(a5)
     f8c:	0791                	addi	a5,a5,4
     f8e:	0611                	addi	a2,a2,4
     f90:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
     f94:	fea79be3          	bne	a5,a0,f8a <main+0x7c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f98:	8742                	mv	a4,a6
     f9a:	0070                	addi	a2,sp,12
     f9c:	06500593          	li	a1,101
     fa0:	03500513          	li	a0,53
     fa4:	3939                	jal	bc2 <ntru_encyrpt>
     fa6:	87aa                	mv	a5,a0
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fa8:	34810813          	addi	a6,sp,840
     fac:	8722                	mv	a4,s0
     fae:	06500613          	li	a2,101
     fb2:	1314                	addi	a3,sp,416
     fb4:	458d                	li	a1,3
     fb6:	03500513          	li	a0,53
     fba:	3941                	jal	c4a <ntru_deceypt>
            resultkon[0] = 0xBABABABA;
 	    *var = resultkon[0];
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
     fbc:	dedee637          	lui	a2,0xdedee
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fc0:	4781                	li	a5,0
     fc2:	00001717          	auipc	a4,0x1
     fc6:	f8270713          	addi	a4,a4,-126 # 1f44 <resultkon>
            resultkon[0] = 0xDEDEDEDE;
     fca:	ede60613          	addi	a2,a2,-290 # dededede <_stack_start+0xdedddede>
	    *var = resultkon[0];
     fce:	68c1                	lui	a7,0x10
    for(i = 0; i < 32; ++i){
     fd0:	08000813          	li	a6,128
        if(!(message[i] == Dec_Message[i])){
     fd4:	006c                	addi	a1,sp,12
     fd6:	00f506b3          	add	a3,a0,a5
     fda:	95be                	add	a1,a1,a5
     fdc:	418c                	lw	a1,0(a1)
     fde:	4294                	lw	a3,0(a3)
     fe0:	02d58563          	beq	a1,a3,100a <main+0xfc>
            resultkon[0] = 0xBABABABA;
     fe4:	babac7b7          	lui	a5,0xbabac
     fe8:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
     fec:	c31c                	sw	a5,0(a4)
 	    *var = resultkon[0];
     fee:	431c                	lw	a5,0(a4)
     ff0:	6741                	lui	a4,0x10
     ff2:	0ff7f793          	andi	a5,a5,255
     ff6:	fef70fa3          	sb	a5,-1(a4) # ffff <_stack+0x1fff>
    //printf("RESULT = %d\n",resultkon[0]);
   // printf("Time Result = %f clocks\n",cpu_time_used);


    return 0;
}
     ffa:	42c12083          	lw	ra,1068(sp)
     ffe:	42812403          	lw	s0,1064(sp)
    1002:	4501                	li	a0,0
    1004:	43010113          	addi	sp,sp,1072
    1008:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    100a:	c310                	sw	a2,0(a4)
	    *var = resultkon[0];
    100c:	4314                	lw	a3,0(a4)
    100e:	0791                	addi	a5,a5,4
    1010:	0ff6f693          	andi	a3,a3,255
    1014:	fed88fa3          	sb	a3,-1(a7) # ffff <_stack+0x1fff>
    for(i = 0; i < 32; ++i){
    1018:	fb079ee3          	bne	a5,a6,fd4 <main+0xc6>
    101c:	bff9                	j	ffa <main+0xec>

0000101e <__CTOR_LIST__>:
	...

00001026 <__CTOR_END__>:
	...

0000102e <__DTOR_END__>:
	...

Disassembly of section .rodata:

00001030 <.rodata>:
    1030:	0001                	nop
    1032:	0000                	unimp
    1034:	ffff                	0xffff
    1036:	ffff                	0xffff
    1038:	0000                	unimp
    103a:	0000                	unimp
    103c:	0001                	nop
    103e:	0000                	unimp
    1040:	ffff                	0xffff
    1042:	ffff                	0xffff
    1044:	0001                	nop
    1046:	0000                	unimp
    1048:	ffff                	0xffff
    104a:	ffff                	0xffff
    104c:	0000                	unimp
    104e:	0000                	unimp
    1050:	0001                	nop
    1052:	0000                	unimp
    1054:	0001                	nop
    1056:	0000                	unimp
    1058:	0000                	unimp
    105a:	0000                	unimp
    105c:	ffff                	0xffff
    105e:	ffff                	0xffff
    1060:	0001                	nop
    1062:	0000                	unimp
    1064:	ffff                	0xffff
    1066:	ffff                	0xffff
    1068:	0001                	nop
    106a:	0000                	unimp
    106c:	0000                	unimp
    106e:	0000                	unimp
    1070:	0001                	nop
    1072:	0000                	unimp
    1074:	0001                	nop
    1076:	0000                	unimp
    1078:	0000                	unimp
    107a:	0000                	unimp
    107c:	ffff                	0xffff
    107e:	ffff                	0xffff
    1080:	0001                	nop
    1082:	0000                	unimp
    1084:	ffff                	0xffff
    1086:	ffff                	0xffff
    1088:	0001                	nop
    108a:	0000                	unimp
    108c:	0000                	unimp
    108e:	0000                	unimp
    1090:	0001                	nop
    1092:	0000                	unimp
    1094:	0001                	nop
    1096:	0000                	unimp
    1098:	0000                	unimp
    109a:	0000                	unimp
    109c:	0001                	nop
    109e:	0000                	unimp
    10a0:	ffff                	0xffff
    10a2:	ffff                	0xffff
    10a4:	0001                	nop
    10a6:	0000                	unimp
    10a8:	ffff                	0xffff
    10aa:	ffff                	0xffff
    10ac:	0000                	unimp
    10ae:	0000                	unimp
    10b0:	0001                	nop
    10b2:	0000                	unimp
    10b4:	ffff                	0xffff
    10b6:	ffff                	0xffff
    10b8:	0000                	unimp
    10ba:	0000                	unimp
    10bc:	0001                	nop
    10be:	0000                	unimp
    10c0:	ffff                	0xffff
    10c2:	ffff                	0xffff
    10c4:	0001                	nop
    10c6:	0000                	unimp
    10c8:	ffff                	0xffff
    10ca:	ffff                	0xffff
    10cc:	0000                	unimp
    10ce:	0000                	unimp
    10d0:	0001                	nop
    10d2:	0000                	unimp
    10d4:	0001                	nop
    10d6:	0000                	unimp
    10d8:	0000                	unimp
    10da:	0000                	unimp
    10dc:	ffff                	0xffff
    10de:	ffff                	0xffff
    10e0:	0001                	nop
    10e2:	0000                	unimp
    10e4:	ffff                	0xffff
    10e6:	ffff                	0xffff
    10e8:	0001                	nop
    10ea:	0000                	unimp
    10ec:	0000                	unimp
    10ee:	0000                	unimp
    10f0:	0001                	nop
    10f2:	0000                	unimp
    10f4:	0001                	nop
    10f6:	0000                	unimp
    10f8:	0002                	c.slli64	zero
    10fa:	0000                	unimp
    10fc:	0001                	nop
    10fe:	0000                	unimp
    1100:	0001                	nop
    1102:	0000                	unimp
    1104:	0001                	nop
    1106:	0000                	unimp
    1108:	0001                	nop
    110a:	0000                	unimp
    110c:	0002                	c.slli64	zero
    110e:	0000                	unimp
    1110:	0001                	nop
    1112:	0000                	unimp
    1114:	0001                	nop
    1116:	0000                	unimp
    1118:	0000                	unimp
    111a:	0000                	unimp
    111c:	0001                	nop
    111e:	0000                	unimp
    1120:	0001                	nop
    1122:	0000                	unimp
    1124:	0002                	c.slli64	zero
    1126:	0000                	unimp
    1128:	0001                	nop
    112a:	0000                	unimp
    112c:	0000                	unimp
    112e:	0000                	unimp
    1130:	0001                	nop
    1132:	0000                	unimp
    1134:	0002                	c.slli64	zero
    1136:	0000                	unimp
    1138:	0000                	unimp
    113a:	0000                	unimp
    113c:	0001                	nop
    113e:	0000                	unimp
    1140:	0001                	nop
    1142:	0000                	unimp
    1144:	0001                	nop
    1146:	0000                	unimp
    1148:	0001                	nop
    114a:	0000                	unimp
    114c:	0000                	unimp
    114e:	0000                	unimp
    1150:	0001                	nop
    1152:	0000                	unimp
    1154:	0001                	nop
    1156:	0000                	unimp
    1158:	0000                	unimp
    115a:	0000                	unimp
    115c:	0002                	c.slli64	zero
    115e:	0000                	unimp
    1160:	0001                	nop
    1162:	0000                	unimp
    1164:	0002                	c.slli64	zero
    1166:	0000                	unimp
    1168:	0001                	nop
    116a:	0000                	unimp
    116c:	0000                	unimp
    116e:	0000                	unimp
    1170:	0001                	nop
    1172:	0000                	unimp
    1174:	0001                	nop
    1176:	0000                	unimp
    1178:	0002                	c.slli64	zero
    117a:	0000                	unimp
    117c:	0001                	nop
    117e:	0000                	unimp
    1180:	0001                	nop
    1182:	0000                	unimp
    1184:	0001                	nop
    1186:	0000                	unimp
    1188:	0001                	nop
    118a:	0000                	unimp
    118c:	0002                	c.slli64	zero
    118e:	0000                	unimp
    1190:	0001                	nop
    1192:	0000                	unimp
    1194:	0001                	nop
    1196:	0000                	unimp
    1198:	0002                	c.slli64	zero
    119a:	0000                	unimp
    119c:	0001                	nop
    119e:	0000                	unimp
    11a0:	0001                	nop
    11a2:	0000                	unimp
    11a4:	0001                	nop
    11a6:	0000                	unimp
    11a8:	0001                	nop
    11aa:	0000                	unimp
    11ac:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

000011b0 <var>:
volatile uint8_t *var = (volatile uint8_t *) 0x0000c010;
    11b0:	c010                	sw	a2,0(s0)
	...

Disassembly of section .bss:

000011b4 <_bss_start>:
	...

0000140c <product2>:
	...

00001664 <result>:
	...

000018bc <ti_2>:
	...

00001a4c <random_keys>:
	...

00001f44 <resultkon>:
volatile int resultkon[1];
    1f44:	0000                	unimp
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	1ef5                	addi	t4,t4,-3
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	0618                	addi	a4,sp,768
       e:	0000                	unimp
      10:	a10c                	fsd	fa1,0(a0)
      12:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
      16:	0001                	nop
      18:	1800                	addi	s0,sp,48
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	049e                	slli	s1,s1,0x7
      2a:	0000                	unimp
      2c:	00003403          	0x3403
      30:	0200                	addi	s0,sp,256
      32:	0038182b          	0x38182b
      36:	0000                	unimp
      38:	0102                	c.slli64	sp
      3a:	9c08                	0x9c08
      3c:	0004                	0x4
      3e:	0200                	addi	s0,sp,256
      40:	0502                	c.slli64	a0
      42:	04bd                	addi	s1,s1,15
      44:	0000                	unimp
      46:	0202                	c.slli64	tp
      48:	00033207          	fld	ft4,0(t1)
      4c:	0200                	addi	s0,sp,256
      4e:	0504                	addi	s1,sp,640
      50:	0164                	addi	s1,sp,140
      52:	0000                	unimp
      54:	0402                	c.slli64	s0
      56:	00008407          	0x8407
      5a:	0200                	addi	s0,sp,256
      5c:	0508                	addi	a0,sp,640
      5e:	015f 0000 0802      	0x8020000015f
      64:	00007f07          	0x7f07
      68:	0400                	addi	s0,sp,512
      6a:	0504                	addi	s1,sp,640
      6c:	6e69                	lui	t3,0x1a
      6e:	0074                	addi	a3,sp,12
      70:	6905                	lui	s2,0x1
      72:	0000                	unimp
      74:	0200                	addi	s0,sp,256
      76:	0704                	addi	s1,sp,896
      78:	0089                	addi	ra,ra,2
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	1002                	c.slli	zero,0x20
      7e:	f504                	fsw	fs1,40(a0)
  jal x0, reset_handler
      80:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
  jal x0, default_exc_handler
      84:	0375                	addi	t1,t1,29
      86:	0000                	unimp
  jal x0, default_exc_handler
      88:	17015e03          	lhu	t3,368(sp)
    asm volatile(
      8c:	0075                	c.nop	29
      8e:	0000                	unimp
}
      90:	00045003          	lhu	zero,0(s0)
    for(i=0;i<(length/3);i++) {
      94:	0400                	addi	s0,sp,512
      96:	0e2e                	slli	t3,t3,0xb
      98:	004d                	c.nop	19
      9a:	0000                	unimp
      9c:	00059003          	lh	zero,0(a1)
}
      a0:	0400                	addi	s0,sp,512
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      a2:	0e74                	addi	a3,sp,796
      a4:	004d                	c.nop	19
    asm volatile(
      a6:	0000                	unimp
      a8:	0006b803          	0x6b803
      ac:	0400                	addi	s0,sp,512
      ae:	00691793          	slli	a5,s2,0x6
    for(i=0;i<(length/3);i++) {
      b2:	0000                	unimp
    asm volatile(
      b4:	a5040407          	0xa5040407
}
      b8:	0000d603          	lhu	a2,0(ra)
    for(i=0;i<(length/3);i++) {
      bc:	0800                	addi	s0,sp,16
      be:	0000036f          	jal	t1,be <array_add+0x4>
      c2:	a704                	fsd	fs1,8(a4)
      c4:	830c                	0x830c
      c6:	0000                	unimp
}
      c8:	0800                	addi	s0,sp,16
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      ca:	0296                	slli	t0,t0,0x5
      cc:	0000                	unimp
    asm volatile(
      ce:	a804                	fsd	fs1,16(s0)
      d0:	0000d613          	srli	a2,ra,0x0
      d4:	0000                	unimp
      d6:	3809                	jal	fffff8e8 <_stack_start+0xfffef8e8>
    for(i=0;i<(length/3);i++) {
      d8:	0000                	unimp
      da:	e600                	fsw	fs0,8(a2)
    asm volatile(
      dc:	0000                	unimp
      de:	0a00                	addi	s0,sp,272
}
      e0:	0075                	c.nop	29
    for(i=0;i<(length/3);i++) {
      e2:	0000                	unimp
      e4:	080b0003          	lb	zero,128(s6)
    asm volatile(
      e8:	a204                	fsd	fs1,0(a2)
    for(i=0;i<(length/3);i++) {
      ea:	0a09                	addi	s4,s4,2
      ec:	0001                	nop
      ee:	0c00                	addi	s0,sp,528
}
      f0:	057a                	slli	a0,a0,0x1e
    asm volatile(
      f2:	0000                	unimp
      f4:	a404                	fsd	fs1,8(s0)
      f6:	00006907          	0x6907
      fa:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      fc:	820c                	0x820c
      fe:	0005                	c.nop	1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     100:	0400                	addi	s0,sp,512
     102:	05a9                	addi	a1,a1,10
     104:	00b4                	addi	a3,sp,72
     106:	0000                	unimp
    int line[size_b][size_a + size_b];
     108:	0004                	0x4
     10a:	0004ed03          	0x4ed03
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     10e:	0400                	addi	s0,sp,512
     110:	03aa                	slli	t2,t2,0xa
    int line[size_b][size_a + size_b];
     112:	00e6                	slli	ra,ra,0x19
     114:	0000                	unimp
     116:	040d                	addi	s0,s0,3
     118:	0005eb03          	0x5eb03
     11c:	0500                	addi	s0,sp,640
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     11e:	1916                	slli	s2,s2,0x25
     120:	0054                	addi	a3,sp,4
    int pola[size_a];
     122:	0000                	unimp
     124:	00048003          	lb	zero,0(s1)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	0600                	addi	s0,sp,768
     12a:	0d0c                	addi	a1,sp,656
     12c:	0069                	c.nop	26
     12e:	0000                	unimp
     130:	00024e03          	lbu	t3,0(tp) # 0 <__DYNAMIC>
     134:	0500                	addi	s0,sp,640
     136:	01241b23          	sh	s2,22(s0)
    int line[size_b][size_a + size_b];
     13a:	0000                	unimp
    int pola[size_a];
     13c:	5f0e                	lw	t5,224(sp)
     13e:	0002                	c.slli64	zero
    int line[size_b][size_a + size_b];
     140:	1800                	addi	s0,sp,48
     142:	3405                	jal	fffffb62 <_stack_start+0xfffefb62>
     144:	9608                	0x9608
    int pola[size_a];
     146:	0001                	nop
     148:	0c00                	addi	s0,sp,528
    int polb[size_b];
     14a:	050e                	slli	a0,a0,0x3
     14c:	0000                	unimp
     14e:	3605                	jal	fffffc6e <_stack_start+0xfffefc6e>
    int pola[size_a];
     150:	00019613          	slli	a2,gp,0x0
    int polb[size_b];
     154:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     156:	006b5f0f          	0x6b5f0f
    int pola[size_a];
     15a:	3705                	jal	7a <__DYNAMIC+0x7a>
     15c:	00006907          	0x6907
    int line[size_b][size_a + size_b];
     160:	0400                	addi	s0,sp,512
    int polb[size_b];
     162:	560c                	lw	a1,40(a2)
    for (i = 0; i < size_b; ++i){
     164:	0005                	c.nop	1
     166:	0500                	addi	s0,sp,640
     168:	00690b37          	lui	s6,0x690
            product[j] = 0;
     16c:	0000                	unimp
     16e:	0c08                	addi	a0,sp,528
     170:	0248                	addi	a0,sp,260
    for (i = 0; i < size_b; ++i){
     172:	0000                	unimp
     174:	3705                	jal	94 <array_equ+0x2>
     	array_equ(pola,a,size_a);
     176:	6914                	flw	fa3,16(a0)
     178:	0000                	unimp
     17a:	0c00                	addi	s0,sp,528
     17c:	8c0c                	0x8c0c
     17e:	0006                	c.slli	zero,0x1
     180:	0500                	addi	s0,sp,640
     182:	00691b37          	lui	s6,0x691
     186:	0000                	unimp
     188:	0f10                	addi	a2,sp,912
	array_mod(pola,mod,size_a);
     18a:	785f 0500 0b38      	0xb380500785f
     190:	019c                	addi	a5,sp,192
    	array_equ(polb,b,size_b);
     192:	0000                	unimp
     194:	0014                	0x14
     196:	0410                	addi	a2,sp,512
     198:	013c                	addi	a5,sp,136
     19a:	0000                	unimp
     19c:	1809                	addi	a6,a6,-30
	array_mod(polb,mod,size_b);
     19e:	0001                	nop
     1a0:	ac00                	fsd	fs0,24(s0)
     1a2:	0001                	nop
     1a4:	0a00                	addi	s0,sp,272
    if(star_mult == 1){
     1a6:	0075                	c.nop	29
     1a8:	0000                	unimp
     1aa:	0000                	unimp
     1ac:	860e                	mv	a2,gp
     1ae:	0002                	c.slli64	zero
     1b0:	2400                	fld	fs0,8(s0)
     1b2:	3c05                	jal	fffffbe2 <_stack_start+0xfffefbe2>
     1b4:	2f08                	fld	fa0,24(a4)
     1b6:	0002                	c.slli64	zero
     1b8:	0c00                	addi	s0,sp,528
     1ba:	00f9                	addi	ra,ra,30
     1bc:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     1be:	3e05                	jal	fffffcee <_stack_start+0xfffefcee>
     1c0:	6909                	lui	s2,0x2
            for (k = size_a-1; k >= 0; k = k-1 ){
     1c2:	0000                	unimp
     1c4:	0000                	unimp
            product[j] = 0;
     1c6:	9f0c                	0x9f0c
     1c8:	0005                	c.nop	1
     1ca:	0500                	addi	s0,sp,640
            line[i][j] = 0;
     1cc:	0069093f 0c040000 	0xc0400000069093f
        for(j = 0; j < size_a + size_b -1; ++j){
     1d4:	00000193          	li	gp,0
     1d8:	4005                	c.li	zero,1
     1da:	6909                	lui	s2,0x2
    for (i = 0; i < size_b; ++i){
     1dc:	0000                	unimp
     1de:	0800                	addi	s0,sp,16
     1e0:	340c                	fld	fa1,40(s0)
     1e2:	05000007          	0x5000007
        for(j = 0; j < size_a + size_b -1; ++j){
     1e6:	0941                	addi	s2,s2,16
                line[size_b-1-j][k] = pola[k]*polb[j];
     1e8:	0069                	c.nop	26
     1ea:	0000                	unimp
     1ec:	0c0c                	addi	a1,sp,528
     1ee:	041a                	slli	s0,s0,0x6
     1f0:	0000                	unimp
     1f2:	4205                	li	tp,1
     1f4:	6909                	lui	s2,0x2
     1f6:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f8:	1000                	addi	s0,sp,32
                line[size_b-1-j][k] = pola[k]*polb[j];
     1fa:	d20c                	sw	a1,32(a2)
     1fc:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
            for (k = size_a-1; k >= 0; k = k-1 ){
     200:	00690943          	fmadd.s	fs2,fs2,ft6,ft0,rne
        for (j = size_b -1; j >= 0; j = j-1){
     204:	0000                	unimp
     206:	0c14                	addi	a3,sp,528
     208:	0691                	addi	a3,a3,4
     20a:	0000                	unimp
     20c:	4405                	li	s0,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     20e:	6909                	lui	s2,0x2
	array_add(product, line[i], (size_a + size_b - 1));
     210:	0000                	unimp
     212:	1800                	addi	s0,sp,48
     214:	c70c                	sw	a1,8(a4)
     216:	0004                	0x4
        array_mod(line[i],mod,(size_a+size_b-1));
     218:	0500                	addi	s0,sp,640
     21a:	0945                	addi	s2,s2,17
    for (i = 0; i < size_b; ++i){
     21c:	0069                	c.nop	26
     21e:	0000                	unimp
    array_mod(product,mod,size_a+size_b-1);
     220:	0c1c                	addi	a5,sp,528
     222:	06f6                	slli	a3,a3,0x1d
     224:	0000                	unimp
     226:	4605                	li	a2,1
     228:	6909                	lui	s2,0x2
}
     22a:	0000                	unimp
     22c:	2000                	fld	fs0,0(s0)
     22e:	1100                	addi	s0,sp,160
     230:	01a2                	slli	gp,gp,0x8
     232:	0000                	unimp
     234:	0108                	addi	a0,sp,128
     236:	4f05                	li	t5,1
     238:	7408                	flw	fa0,40(s0)
     23a:	0002                	c.slli64	zero
     23c:	0c00                	addi	s0,sp,528
     23e:	022e                	slli	tp,tp,0xb
     240:	0000                	unimp
     242:	5005                	c.li	zero,-31
     244:	740a                	flw	fs0,160(sp)
     246:	0002                	c.slli64	zero
     248:	0000                	unimp
     24a:	000c                	0xc
     24c:	0000                	unimp
     24e:	0500                	addi	s0,sp,640
     250:	0951                	addi	s2,s2,20
     252:	0274                	addi	a3,sp,268
            for (k = size_a-1; k >= 0; k = k-1 ){
     254:	0000                	unimp
     256:	1280                	addi	s0,sp,352
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     258:	05d4                	addi	a3,sp,708
     25a:	0000                	unimp
     25c:	5305                	li	t1,-31
     25e:	180a                	slli	a6,a6,0x22
     260:	0001                	nop
     262:	0000                	unimp
     264:	1201                	addi	tp,tp,-32
     266:	01d1                	addi	gp,gp,20
            for (k = size_a-1; k >= 0; k = k-1 ){
     268:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     26a:	5605                	li	a2,-31
     26c:	180a                	slli	a6,a6,0x22
     26e:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     270:	0400                	addi	s0,sp,512
     272:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     274:	1609                	addi	a2,a2,-30
     276:	0001                	nop
     278:	8400                	0x8400
     27a:	0002                	c.slli64	zero
        array_mod(line[i],mod,(size_a+size_b-1));
     27c:	0a00                	addi	s0,sp,272
     27e:	0075                	c.nop	29
	array_add(product, line[i], (size_a + size_b - 1));
     280:	0000                	unimp
     282:	001f 3311 0004      	0x43311001f
    for (i = 0; i < size_b; ++i){
     288:	9000                	0x9000
     28a:	0501                	addi	a0,a0,0
     28c:	0862                	slli	a6,a6,0x18
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     28e:	000002c7          	fmsub.s	ft5,ft0,ft0,ft0,rne
    int line[size_b][size_a + size_b];
     292:	0e0c                	addi	a1,sp,784
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     294:	0005                	c.nop	1
     296:	0500                	addi	s0,sp,640
     298:	02c71263          	bne	a4,a2,2bc <polymult2+0x2e>
     29c:	0000                	unimp
    int line[size_b][size_a + size_b];
     29e:	0c00                	addi	s0,sp,528
     2a0:	0526                	slli	a0,a0,0x9
     2a2:	0000                	unimp
     2a4:	6405                	lui	s0,0x1
     2a6:	6906                	flw	fs2,64(sp)
     2a8:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2aa:	0400                	addi	s0,sp,512
     2ac:	430c                	lw	a1,0(a4)
     2ae:	0002                	c.slli64	zero
     2b0:	0500                	addi	s0,sp,640
     2b2:	0966                	slli	s2,s2,0x19
     2b4:	02cd                	addi	t0,t0,19
     2b6:	0000                	unimp
     2b8:	0c08                	addi	a0,sp,528
     2ba:	01a2                	slli	gp,gp,0x8
    int line[size_b][size_a + size_b];
     2bc:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2be:	6705                	lui	a4,0x1
     2c0:	2f1e                	fld	ft10,448(sp)
    int line[size_b][size_a + size_b];
     2c2:	0002                	c.slli64	zero
     2c4:	8800                	0x8800
     2c6:	1000                	addi	s0,sp,32
    int pola[size_a];
     2c8:	8404                	0x8404
     2ca:	0002                	c.slli64	zero
     2cc:	0900                	addi	s0,sp,144
     2ce:	02dd                	addi	t0,t0,23
    int line[size_b][size_a + size_b];
     2d0:	0000                	unimp
    int pola[size_a];
     2d2:	02dd                	addi	t0,t0,23
     2d4:	0000                	unimp
    int polb[size_b];
     2d6:	750a                	flw	fa0,160(sp)
     2d8:	0000                	unimp
     2da:	1f00                	addi	s0,sp,944
    int pola[size_a];
     2dc:	1000                	addi	s0,sp,32
    int polb[size_b];
     2de:	e304                	fsw	fs1,0(a4)
     2e0:	0002                	c.slli64	zero
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2e2:	1300                	addi	s0,sp,416
     2e4:	d10e                	sw	gp,160(sp)
    int line[size_b][size_a + size_b];
     2e6:	0004                	0x4
     2e8:	0800                	addi	s0,sp,16
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ea:	7a05                	lui	s4,0xfffe1
    int pola[size_a];
     2ec:	0c08                	addi	a0,sp,528
     2ee:	0c000003          	lb	zero,192(zero) # c0 <array_add+0x6>
    for (i = 0; i < size_b; ++i){
     2f2:	018d                	addi	gp,gp,3
     2f4:	0000                	unimp
     2f6:	7b05                	lui	s6,0xfffe1
            product2[j] = 0;
     2f8:	0c11                	addi	s8,s8,4
     2fa:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
     2fe:	110c                	addi	a1,sp,160
    for (i = 0; i < size_b; ++i){
     300:	0000                	unimp
     302:	0500                	addi	s0,sp,640
    array_equ(pola,a,size_a);
     304:	067c                	addi	a5,sp,780
     306:	0069                	c.nop	26
     308:	0000                	unimp
     30a:	0004                	0x4
     30c:	0410                	addi	a2,sp,512
     30e:	0038                	addi	a4,sp,8
    array_equ(polb,b,size_b);
     310:	0000                	unimp
     312:	f80e                	fsw	ft3,48(sp)
     314:	0004                	0x4
     316:	6800                	flw	fs0,16(s0)
     318:	ba05                	j	fffffc48 <_stack_start+0xfffefc48>
     31a:	5508                	lw	a0,40(a0)
    if(star_mult == 1){
     31c:	0004                	0x4
     31e:	0f00                	addi	s0,sp,912
     320:	705f 0500 12bb      	0x12bb0500705f
     326:	030c                	addi	a1,sp,384
     328:	0000                	unimp
     32a:	0f00                	addi	s0,sp,912
     32c:	725f 0500 07bc      	0x7bc0500725f
            for (k = size_a-1; k >= 0; k = k-1 ){
     332:	0069                	c.nop	26
     334:	0000                	unimp
            product2[j] = 0;
     336:	0f04                	addi	s1,sp,912
     338:	775f 0500 07bd      	0x7bd0500775f
            line[i][j] = 0;
     33e:	0069                	c.nop	26
            product2[j] = 0;
     340:	0000                	unimp
     342:	0c08                	addi	a0,sp,528
        for(j = 0; j < size_a + size_b -1; ++j){
     344:	01ca                	slli	gp,gp,0x12
     346:	0000                	unimp
     348:	be05                	j	fffffe78 <_stack_start+0xfffefe78>
     34a:	3f09                	jal	25c <polymult+0x15c>
    for (i = 0; i < size_b; ++i){
     34c:	0000                	unimp
     34e:	0c00                	addi	s0,sp,528
     350:	c50c                	sw	a1,8(a0)
     352:	0002                	c.slli64	zero
        for(j = 0; j < size_a + size_b -1; ++j){
     354:	0500                	addi	s0,sp,640
     356:	003f09bf 0f0e0000 	0xf0e0000003f09bf
                line[size_b-1-j][k] = pola[k]*polb[j];
     35e:	625f 0066 c005      	0xc0050066625f
     364:	e411                	bnez	s0,370 <polymult2+0xe2>
     366:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     368:	1000                	addi	s0,sp,32
                line[size_b-1-j][k] = pola[k]*polb[j];
     36a:	a20c                	fsd	fa1,0(a2)
     36c:	0000                	unimp
     36e:	0500                	addi	s0,sp,640
            for (k = size_a-1; k >= 0; k = k-1 ){
     370:	07c1                	addi	a5,a5,16
     372:	0069                	c.nop	26
        for (j = size_b -1; j >= 0; j = j-1){
     374:	0000                	unimp
     376:	0c18                	addi	a4,sp,528
     378:	01b0                	addi	a2,sp,200
     37a:	0000                	unimp
     37c:	c805                	beqz	s0,3ac <polymult2+0x11e>
            for (k = size_a-1; k >= 0; k = k-1 ){
     37e:	160a                	slli	a2,a2,0x22
         array_add(product2,line[i],size_a+size_b-1);
     380:	0001                	nop
     382:	1c00                	addi	s0,sp,560
     384:	760c                	flw	fa1,40(a2)
     386:	0002                	c.slli64	zero
        for(i = 0; i < size_b; ++i){
     388:	0500                	addi	s0,sp,640
     38a:	1dca                	slli	s11,s11,0x32
}
     38c:	05d9                	addi	a1,a1,22
     38e:	0000                	unimp
     390:	0c20                	addi	s0,sp,536
     392:	000003cb          	fnmsub.s	ft7,ft0,ft0,ft0,rne
     396:	cc05                	beqz	s0,3ce <polymult2+0x140>
     398:	031d                	addi	t1,t1,7
     39a:	0006                	c.slli	zero,0x1
     39c:	2400                	fld	fs0,8(s0)
     39e:	8a0c                	0x8a0c
     3a0:	0005                	c.nop	1
     3a2:	0500                	addi	s0,sp,640
     3a4:	06270dcf          	fnmadd.q	fs11,fa4,ft2,ft0,rne
     3a8:	0000                	unimp
     3aa:	0c28                	addi	a0,sp,536
     3ac:	0710                	addi	a2,sp,896
     3ae:	0000                	unimp
     3b0:	d005                	beqz	s0,2d0 <polymult2+0x42>
     3b2:	4109                	li	sp,2
     3b4:	0006                	c.slli	zero,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b6:	2c00                	fld	fs0,24(s0)
     3b8:	62755f0f          	0x62755f0f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3bc:	0500                	addi	s0,sp,640
     3be:	02e411d3          	fadd.d	ft3,fs0,fa4,rtz
     3c2:	0000                	unimp
     3c4:	0f30                	addi	a2,sp,920
     3c6:	755f 0070 d405      	0xd4050070755f
     3cc:	0c12                	slli	s8,s8,0x4
     3ce:	38000003          	lb	zero,896(zero) # 380 <polymult2+0xf2>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d2:	72755f0f          	0x72755f0f
        for (j = size_b -1; j >= 0; j = j-1){
     3d6:	0500                	addi	s0,sp,640
     3d8:	07d5                	addi	a5,a5,21
     3da:	0069                	c.nop	26
     3dc:	0000                	unimp
         array_add(product2,line[i],size_a+size_b-1);
     3de:	0c3c                	addi	a5,sp,536
     3e0:	00000187          	0x187
     3e4:	d805                	beqz	s0,314 <polymult2+0x86>
        for(i = 0; i < size_b; ++i){
     3e6:	4711                	li	a4,4
     3e8:	0006                	c.slli	zero,0x1
     3ea:	4000                	lw	s0,0(s0)
    int v[size_N];
     3ec:	db0c                	sw	a1,48(a4)
     3ee:	0006                	c.slli	zero,0x1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3f0:	0500                	addi	s0,sp,640
    int v[size_N];
     3f2:	11d9                	addi	gp,gp,-10
     3f4:	00000657          	0x657
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3f8:	6c5f0f43          	0x6c5f0f43
     3fc:	0062                	c.slli	zero,0x18
     3fe:	dc05                	beqz	s0,336 <polymult2+0xa8>
     400:	e411                	bnez	s0,40c <polydiv+0x20>
     402:	0002                	c.slli64	zero
     404:	4400                	lw	s0,8(s0)
     406:	e00c                	fsw	fa1,0(s0)
     408:	0001                	nop
     40a:	0500                	addi	s0,sp,640
     40c:	07df 0069 0000      	0x6907df
    int v[size_N];
     412:	0c4c                	addi	a1,sp,532
     414:	00000207          	0x207
    int q[size_N];
     418:	e005                	bnez	s0,438 <polydiv+0x4c>
     41a:	900a                	c.add	zero,sp
     41c:	0000                	unimp
    int num_temp[size_N];
     41e:	5000                	lw	s0,32(s0)
     420:	3e0c                	fld	fa1,56(a2)
    int denum_temp[size_D];
     422:	0000                	unimp
     424:	0500                	addi	s0,sp,640
     426:	047312e3          	bne	t1,t2,c6a <ntru_deceypt+0x20>
    int num_temp[size_N];
     42a:	0000                	unimp
    int denum_temp[size_D];
     42c:	0c54                	addi	a3,sp,532
     42e:	0000039b          	0x39b
   if(size_N == 106) {
     432:	e705                	bnez	a4,45a <polydiv+0x6e>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     434:	300c                	fld	fa1,32(s0)
     436:	0001                	nop
     438:	5800                	lw	s0,48(s0)
     43a:	000c                	0xc
     43c:	0005                	c.nop	1
    int v[size_N];
     43e:	0500                	addi	s0,sp,640
     440:	0ee9                	addi	t4,t4,26
    int denum_temp[size_D];
     442:	010a                	slli	sp,sp,0x2
     444:	0000                	unimp
     446:	0c5c                	addi	a5,sp,532
   if(size_N == 106) {
     448:	04d8                	addi	a4,sp,580
     44a:	0000                	unimp
     array_equ(num_temp, num, size_N - 1);   // 105 elemani ücer ücer yap...
     44c:	ea05                	bnez	a2,47c <polydiv+0x90>
     44e:	6909                	lui	s2,0x2
     450:	0000                	unimp
     452:	6400                	flw	fs0,8(s0)
     454:	1400                	addi	s0,sp,544
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     456:	00a8                	addi	a0,sp,72
     458:	0000                	unimp
        array_mod(num_temp, mod, size_N - 1);
     45a:	00000473          	0x473
     45e:	7315                	lui	t1,0xfffe5
     460:	0004                	0x4
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     462:	1500                	addi	s0,sp,672
     464:	0116                	slli	sp,sp,0x5
        array_mod(num_temp, mod, size_N - 1);
     466:	0000                	unimp
        while(num_temp[size_N - 1] < 0){
     468:	c715                	beqz	a4,494 <polydiv+0xa8>
     46a:	0005                	c.nop	1
     46c:	1500                	addi	s0,sp,672
     46e:	0069                	c.nop	26
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     470:	0000                	unimp
     472:	1000                	addi	s0,sp,32
     474:	7e04                	flw	fs1,56(a2)
     476:	0004                	0x4
     478:	1600                	addi	s0,sp,800
     array_equ(num_temp, num, size_N );
     47a:	00000473          	0x473
     47e:	00055e17          	auipc	t3,0x55
        array_mod(num_temp, mod, size_N);
     482:	2800                	fld	fs0,16(s0)
     484:	0504                	addi	s1,sp,640
     486:	0265                	addi	tp,tp,25
     488:	c708                	sw	a0,8(a4)
    array_equ(denum_temp,denum,size_D);
     48a:	0005                	c.nop	1
     48c:	1800                	addi	s0,sp,48
     48e:	04b6                	slli	s1,s1,0xd
     490:	0000                	unimp
	array_mod(denum_temp,mod,size_D);
     492:	6705                	lui	a4,0x1
     494:	0702                	c.slli64	a4
     496:	0069                	c.nop	26
     498:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     49a:	1800                	addi	s0,sp,48
     49c:	01d9                	addi	gp,gp,22
     49e:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     4a0:	6c05                	lui	s8,0x1
     4a2:	0b02                	c.slli64	s6
     4a4:	000006b3          	add	a3,zero,zero
     4a8:	1804                	addi	s1,sp,48
     4aa:	000002a7          	0x2a7
    for (i = 0; i < size_N; ++i){
     4ae:	6c05                	lui	s8,0x1
        if ( (b_N*u)%mod == 1 )
     4b0:	1402                	slli	s0,s0,0x20
    for (u = 0; u < mod; ++u){
     4b2:	000006b3          	add	a3,zero,zero
     4b6:	1808                	addi	a0,sp,48
     4b8:	00000257          	0x257
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4bc:	6c05                	lui	s8,0x1
     4be:	1e02                	slli	t3,t3,0x20
     4c0:	000006b3          	add	a3,zero,zero
        q[i] = 0;
     4c4:	180c                	addi	a1,sp,48
     4c6:	0521                	addi	a0,a0,8
     4c8:	0000                	unimp
        v[i] = 0;
     4ca:	6e05                	lui	t3,0x1
        q[i] = 0;
     4cc:	0802                	c.slli64	a6
     4ce:	0069                	c.nop	26
        v[i] = 0;
     4d0:	0000                	unimp
     4d2:	1810                	addi	a2,sp,48
    for (i = 0; i < size_N; ++i){
     4d4:	001f 0000 6f05      	0x6f050000001f
    for (i = size_D-1; i >= 0; i = i-1){
     4da:	0802                	c.slli64	a6
     4dc:	000008b3          	add	a7,zero,zero
        if ( (b_N*u)%mod == 1 )
     4e0:	1814                	addi	a3,sp,48
     4e2:	053d                	addi	a0,a0,15
     4e4:	0000                	unimp
     4e6:	7205                	lui	tp,0xfffe1
    for (u = 0; u < mod; ++u){
     4e8:	0702                	c.slli64	a4
     4ea:	0069                	c.nop	26
        if( num_temp[i] != 0 )
     4ec:	0000                	unimp
    for (i = size_N-1; i >= 0; i = i-1){
     4ee:	1830                	addi	a2,sp,56
     4f0:	0000052b          	0x52b
     4f4:	7305                	lui	t1,0xfffe1
     4f6:	1602                	slli	a2,a2,0x20
     4f8:	08c8                	addi	a0,sp,84
     4fa:	0000                	unimp
         if(size_N == 106) {
     4fc:	1834                	addi	a3,sp,56
     4fe:	0445                	addi	s0,s0,17
     500:	0000                	unimp
        v[(d-d2)] = u*r_d;
     502:	7505                	lui	a0,0xfffe1
     504:	0702                	c.slli64	a4
     506:	0069                	c.nop	26
     508:	0000                	unimp
     50a:	1838                	addi	a4,sp,56
     50c:	00000533          	add	a0,zero,zero
         if(size_N == 106) {
     510:	7705                	lui	a4,0xfffe1
     512:	0a02                	c.slli64	s4
            array_mod(v, mod, size_N - 1);
     514:	08d9                	addi	a7,a7,22
     516:	0000                	unimp
     518:	183c                	addi	a5,sp,56
     51a:	00000367          	jalr	t1,zero # 0 <__DYNAMIC>
            while(v[size_N - 1] < 0){
     51e:	7a05                	lui	s4,0xfffe1
     520:	1302                	slli	t1,t1,0x20
     522:	0196                	slli	gp,gp,0x5
     524:	0000                	unimp
            v[size_N - 1] = v[size_N - 1] % mod;
     526:	1840                	addi	s0,sp,52
     528:	027c                	addi	a5,sp,268
     52a:	0000                	unimp
     52c:	7b05                	lui	s6,0xfffe1
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     52e:	0702                	c.slli64	a4
     530:	0069                	c.nop	26
     532:	0000                	unimp
     534:	1844                	addi	s1,sp,52
     536:	072a                	slli	a4,a4,0xa
     538:	0000                	unimp
     53a:	7c05                	lui	s8,0xfffe1
        if(size_N == 106) {
     53c:	1302                	slli	t1,t1,0x20
     53e:	0196                	slli	gp,gp,0x5
     540:	0000                	unimp
     542:	1848                	addi	a0,sp,52
            array_mod(product, mod, size_N - 1);
     544:	046c                	addi	a1,sp,524
     546:	0000                	unimp
     548:	7d05                	lui	s10,0xfffe1
     54a:	1402                	slli	s0,s0,0x20
            while(product[size_N - 1] < 0){
     54c:	08df 0000 184c      	0x184c000008df
     552:	000002af          	0x2af
     556:	8005                	srli	s0,s0,0x1
            product[size_N - 1] = product[size_N - 1] % mod;
     558:	0702                	c.slli64	a4
     55a:	0069                	c.nop	26
     55c:	0000                	unimp
     55e:	1850                	addi	a2,sp,52
     560:	01ff                	0x1ff
     562:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     564:	8105                	srli	a0,a0,0x1
     566:	0902                	c.slli64	s2
 	if(size_N == 106) {
     568:	000005c7          	fmsub.s	fa1,ft0,ft0,ft0,rne
            array_mod(num_temp, mod, size_N - 1);
     56c:	1854                	addi	a3,sp,52
     56e:	000004af          	0x4af
     572:	a405                	j	792 <ext_euclid+0xd8>
     574:	0702                	c.slli64	a4
            while(num_temp[size_N - 1] < 0){
     576:	088e                	slli	a7,a7,0x3
     578:	0000                	unimp
     57a:	1958                	addi	a4,sp,180
     57c:	00000433          	add	s0,zero,zero
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     580:	a805                	j	5b0 <polydiv+0x1c4>
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     582:	1302                	slli	t1,t1,0x20
     584:	000002c7          	fmsub.s	ft5,ft0,ft0,ft0,rne
     588:	0148                	addi	a0,sp,132
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     58a:	4519                	li	a0,6
     58c:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     590:	02a9                	addi	t0,t0,10
     592:	8412                	mv	s0,tp
     594:	0002                	c.slli64	zero
     596:	4c00                	lw	s0,24(s0)
            array_mod(q, mod, size_N - 1);
     598:	1901                	addi	s2,s2,-32
     59a:	06d1                	addi	a3,a3,20
     59c:	0000                	unimp
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     59e:	ad05                	j	bce <ntru_encyrpt+0xc>
            array_mod(q, mod, size_N - 1);
     5a0:	0c02                	c.slli64	s8
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     5a2:	08f0                	addi	a2,sp,92
     5a4:	0000                	unimp
            array_mod(q, mod, size_N - 1);
     5a6:	02dc                	addi	a5,sp,324
            while(q[size_N - 1] < 0){
     5a8:	b819                	j	fffffdbe <_stack_start+0xfffefdbe>
     5aa:	0001                	nop
     5ac:	0500                	addi	s0,sp,640
     5ae:	02b2                	slli	t0,t0,0xc
            q[size_N - 1] = q[size_N - 1] % mod;
     5b0:	7410                	flw	fa2,40(s0)
     5b2:	0006                	c.slli	zero,0x1
     5b4:	e000                	fsw	fs0,0(s0)
     5b6:	1902                	slli	s2,s2,0x20
     5b8:	019d                	addi	gp,gp,7
                v[size_N - 1] = v[size_N - 1]+mod;
     5ba:	0000                	unimp
     5bc:	b405                	j	ffffffdc <_stack_start+0xfffeffdc>
     5be:	0a02                	c.slli64	s4
     5c0:	08fc                	addi	a5,sp,92
            array_mod(v, mod, size_N);
     5c2:	0000                	unimp
     5c4:	02ec                	addi	a1,sp,332
     5c6:	1000                	addi	s0,sp,32
     5c8:	cd04                	sw	s1,24(a0)
     5ca:	0005                	c.nop	1
                product[size_N - 1] = product[size_N - 1]+mod;
     5cc:	0200                	addi	s0,sp,256
     5ce:	0801                	addi	a6,a6,0
     5d0:	04a5                	addi	s1,s1,9
     5d2:	0000                	unimp
            array_mod(product, mod, size_N);
     5d4:	cd16                	sw	t0,152(sp)
     5d6:	0005                	c.nop	1
     5d8:	1000                	addi	s0,sp,32
     5da:	5504                	lw	s1,40(a0)
     5dc:	0004                	0x4
     5de:	1400                	addi	s0,sp,544
            num_temp[i] = num_temp[i] - product[i];
     5e0:	00a8                	addi	a0,sp,72
     5e2:	0000                	unimp
     5e4:	05fd                	addi	a1,a1,31
     5e6:	0000                	unimp
     5e8:	7315                	lui	t1,0xfffe5
        for (i = 0; i < size_N; ++i){
     5ea:	0004                	0x4
     5ec:	1500                	addi	s0,sp,672
            num_temp[i] = num_temp[i] - product[i];
     5ee:	0116                	slli	sp,sp,0x5
     5f0:	0000                	unimp
     5f2:	fd15                	bnez	a0,52e <polydiv+0x142>
        for (i = 0; i < size_N; ++i){
     5f4:	0005                	c.nop	1
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     5f6:	1500                	addi	s0,sp,672
     5f8:	0069                	c.nop	26
     5fa:	0000                	unimp
     5fc:	1000                	addi	s0,sp,32
            array_mod(num_temp, mod, size_N);
     5fe:	d404                	sw	s1,40(s0)
     600:	0005                	c.nop	1
     602:	1000                	addi	s0,sp,32
     604:	df04                	sw	s1,56(a4)
            array_add(q, v, size_N );
     606:	0005                	c.nop	1
     608:	1400                	addi	s0,sp,544
     60a:	009c                	addi	a5,sp,64
     60c:	0000                	unimp
            array_mod(q, mod, size_N);
     60e:	00000627          	0x627
     612:	7315                	lui	t1,0xfffe5
     614:	0004                	0x4
    int v[size_N];
     616:	1500                	addi	s0,sp,672
        for (i = size_N-1; i >= 0; i = i-1){
     618:	0116                	slli	sp,sp,0x5
     61a:	0000                	unimp
     61c:	9c15                	0x9c15
     61e:	0000                	unimp
     620:	1500                	addi	s0,sp,672
     622:	0069                	c.nop	26
     624:	0000                	unimp
     626:	1000                	addi	s0,sp,32
                q[size_N - 1] = q[size_N - 1]+mod;
     628:	0904                	addi	s1,sp,144
     62a:	0006                	c.slli	zero,0x1
     62c:	1400                	addi	s0,sp,544
     62e:	0069                	c.nop	26
            if( num_temp[i] != 0 )
     630:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     632:	0641                	addi	a2,a2,16
     634:	0000                	unimp
            v[i] = 0;
     636:	7315                	lui	t1,0xfffe5
     638:	0004                	0x4
     63a:	1500                	addi	s0,sp,672
     63c:	0116                	slli	sp,sp,0x5
     63e:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     640:	1000                	addi	s0,sp,32
     642:	2d04                	fld	fs1,24(a0)
     644:	0006                	c.slli	zero,0x1
    while (d >= d2){
     646:	0900                	addi	s0,sp,144
     648:	0038                	addi	a4,sp,8
    if(size_N == 106) {
     64a:	0000                	unimp
     64c:	00000657          	0x657
     650:	750a                	flw	fa0,160(sp)
     array_equ(result, q, size_N - 1);   // 105 elemani ücer ücer yap...
     652:	0000                	unimp
     654:	0200                	addi	s0,sp,256
     656:	0900                	addi	s0,sp,144
     658:	0038                	addi	a4,sp,8
     65a:	0000                	unimp
     65c:	00000667          	jalr	a2,zero # 0 <__DYNAMIC>
     660:	750a                	flw	fa0,160(sp)
     result[size_N - 1] = q[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     662:	0000                	unimp
     664:	0000                	unimp
     666:	0600                	addi	s0,sp,768
     668:	04e6                	slli	s1,s1,0x19
     66a:	0000                	unimp
     66c:	2405                	jal	88c <ext_euclid+0x1d2>
    for(i = size_N; i < (2*size_N); ++i){
     66e:	1a01                	addi	s4,s4,-32
     670:	0312                	slli	t1,t1,0x4
        result[i] = num_temp[i-size_N];
     672:	0000                	unimp
     674:	9b1a                	add	s6,s6,t1
     676:	0006                	c.slli	zero,0x1
     678:	0c00                	addi	s0,sp,528
    for(i = size_N; i < (2*size_N); ++i){
     67a:	2805                	jal	6aa <polydiv+0x2be>
     67c:	0801                	addi	a6,a6,0
}
     67e:	06ad                	addi	a3,a3,11
     680:	0000                	unimp
     682:	0e18                	addi	a4,sp,784
     684:	0005                	c.nop	1
     686:	0500                	addi	s0,sp,640
     688:	012a                	slli	sp,sp,0xa
     68a:	ad11                	j	c9e <ntru_deceypt+0x54>
     68c:	0006                	c.slli	zero,0x1
     68e:	0000                	unimp
     690:	0b18                	addi	a4,sp,400
     692:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
     696:	6907012b          	0x6907012b
     69a:	0000                	unimp
     69c:	0400                	addi	s0,sp,512
     69e:	e018                	fsw	fa4,0(s0)
     6a0:	0004                	0x4
     6a2:	0500                	addi	s0,sp,640
     6a4:	012c                	addi	a1,sp,136
     6a6:	0006b30b          	0x6b30b
        result[i] = num_temp[i-size_N];
     6aa:	0800                	addi	s0,sp,16
     6ac:	1000                	addi	s0,sp,32
     6ae:	7404                	flw	fs1,40(s0)
     6b0:	0006                	c.slli	zero,0x1
     6b2:	1000                	addi	s0,sp,32
    for(i = size_N; i < (2*size_N); ++i){
     6b4:	6704                	flw	fs1,8(a4)
     6b6:	0006                	c.slli	zero,0x1
     6b8:	1a00                	addi	s0,sp,304
    int ri_2[size]; // MX-ring poly, a
     6ba:	00000017          	auipc	zero,0x0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6be:	050e                	slli	a0,a0,0x3
    int ri_2[size]; // MX-ring poly, a
     6c0:	0144                	addi	s1,sp,132
     6c2:	f208                	fsw	fa0,32(a2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6c4:	0006                	c.slli	zero,0x1
     6c6:	1800                	addi	s0,sp,48
     6c8:	0000056f          	jal	a0,6c8 <ext_euclid+0xe>
     6cc:	4505                	li	a0,1
     6ce:	1201                	addi	tp,tp,-32
     6d0:	06f2                	slli	a3,a3,0x1c
     6d2:	0000                	unimp
     6d4:	1800                	addi	s0,sp,48
     6d6:	0569                	addi	a0,a0,26
     6d8:	0000                	unimp
     6da:	4605                	li	a2,1
     6dc:	1201                	addi	tp,tp,-32
     6de:	06f2                	slli	a3,a3,0x1c
    int ri_2[size]; // MX-ring poly, a
     6e0:	0000                	unimp
     6e2:	1806                	slli	a6,a6,0x21
     6e4:	0049                	c.nop	18
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6e6:	0000                	unimp
     6e8:	4705                	li	a4,1
     6ea:	1201                	addi	tp,tp,-32
    int ri[size];
     6ec:	0046                	c.slli	zero,0x11
     6ee:	0000                	unimp
     6f0:	000c                	0xc
    int ti_1[size]; // ti_1[0] = 1
     6f2:	4609                	li	a2,2
     6f4:	0000                	unimp
     6f6:	0200                	addi	s0,sp,256
    int ti[size];
     6f8:	0a000007          	0xa000007
     6fc:	0075                	c.nop	29
    int qi_1[size];
     6fe:	0000                	unimp
     700:	0002                	c.slli64	zero
     702:	8505d01b          	0x8505d01b
    int temp[size];
     706:	0702                	c.slli64	a4
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     708:	00000817          	auipc	a6,0x0
     70c:	7a18                	flw	fa4,48(a2)
    int ri_2[size]; // MX-ring poly, a
     70e:	0006                	c.slli	zero,0x1
     710:	0500                	addi	s0,sp,640
    int temp[size];
     712:	75180287          	0x75180287
        ti_2[i] = 0;
     716:	0000                	unimp
     718:	0000                	unimp
     71a:	c718                	sw	a4,8(a4)
     71c:	0005                	c.nop	1
    for (i = 0; i < size; ++i) {
     71e:	0500                	addi	s0,sp,640
     720:	0288                	addi	a0,sp,320
    array_equ(ri_2,polyR,size);
     722:	c712                	sw	tp,140(sp)
     724:	0005                	c.nop	1
     726:	0400                	addi	s0,sp,512
     728:	5a18                	lw	a4,48(a2)
    array_equ(ri_1,polyf,size);
     72a:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
     72e:	0289                	addi	t0,t0,2
     730:	1710                	addi	a2,sp,928
    ti_1[0] = 1;
     732:	0008                	0x8
     734:	0800                	addi	s0,sp,16
     736:	0118                	addi	a4,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     738:	05000007          	0x5000007
     73c:	028a                	slli	t0,t0,0x2
     73e:	0001ac17          	auipc	s8,0x1a
            ti[i] = ti_2[i] - temp[i];
     742:	2400                	fld	fs0,8(s0)
     744:	6718                	flw	fa4,8(a4)
     746:	0002                	c.slli64	zero
	array_mod(ri_2,mod,N+1);
     748:	0500                	addi	s0,sp,640
     74a:	690f028b          	0x690f028b
     74e:	0000                	unimp
	array_mod(ri_1,mod,N+1);
     750:	4800                	lw	s0,16(s0)
     752:	0918                	addi	a4,sp,144
     754:	0005                	c.nop	1
     756:	0500                	addi	s0,sp,640
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     758:	028c                	addi	a1,sp,320
     75a:	622c                	flw	fa1,64(a2)
     75c:	0000                	unimp
     75e:	5000                	lw	s0,32(s0)
     760:	1718                	addi	a4,sp,928
     762:	05000007          	0x5000007
        for (i = N + 1; i < (2 * N + 2); ++i) {
     766:	028d                	addi	t0,t0,3
     768:	b91a                	fsd	ft6,176(sp)
     76a:	0006                	c.slli	zero,0x1
     76c:	5800                	lw	s0,48(s0)
     76e:	1418                	addi	a4,sp,544
     770:	0005                	c.nop	1
        for (i = 0; i < N + 1; ++i) {
     772:	0500                	addi	s0,sp,640
     774:	028e                	slli	t0,t0,0x3
     776:	0a16                	slli	s4,s4,0x5
        array_mod(temp,mod,N+1);
     778:	0001                	nop
     77a:	6800                	flw	fs0,16(s0)
     77c:	1c18                	addi	a4,sp,560
     77e:	05000007          	0x5000007
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     782:	0a16028f          	0xa16028f
     786:	0001                	nop
     788:	7000                	flw	fs0,32(s0)
     78a:	eb18                	fsw	fa4,16(a4)
     78c:	0000                	unimp
        array_equ(qi_1,res1,size);
     78e:	0500                	addi	s0,sp,640
     790:	0290                	addi	a2,sp,320
     792:	0a16                	slli	s4,s4,0x5
	array_mod(qi_1,mod,size);
     794:	0001                	nop
     796:	7800                	flw	fs0,48(s0)
     798:	c118                	sw	a4,0(a0)
     79a:	0006                	c.slli	zero,0x1
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     79c:	0500                	addi	s0,sp,640
     79e:	0291                	addi	t0,t0,4
     7a0:	2710                	fld	fa2,8(a4)
     7a2:	0008                	0x8
     7a4:	8000                	0x8000
     7a6:	4e18                	lw	a4,24(a2)
     7a8:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
         array_equ(temp,res2,size);
     7ac:	0292                	slli	t0,t0,0x4
     7ae:	3710                	fld	fa2,40(a4)
     7b0:	0008                	0x8
	array_mod(temp,mod,size);
     7b2:	8800                	0x8800
     7b4:	f818                	fsw	fa4,48(s0)
     7b6:	0005                	c.nop	1
     7b8:	0500                	addi	s0,sp,640
        for (i = 0; i < N + 1; ++i) {
     7ba:	690f0293          	addi	t0,t5,1680
     7be:	0000                	unimp
     7c0:	a000                	fsd	fs0,0(s0)
        array_mod(ti,mod,N+1);
     7c2:	2018                	fld	fa4,0(s0)
     7c4:	0002                	c.slli64	zero
     7c6:	0500                	addi	s0,sp,640
     7c8:	0294                	addi	a3,sp,320
	array_equ(ri_2,ri_1,size);
     7ca:	0a16                	slli	s4,s4,0x5
     7cc:	0001                	nop
     7ce:	a400                	fsd	fs0,8(s0)
     7d0:	dc18                	sw	a4,56(s0)
	array_equ(ri_1,ri,size);
     7d2:	0000                	unimp
     7d4:	0500                	addi	s0,sp,640
     7d6:	0295                	addi	t0,t0,5
     7d8:	0a16                	slli	s4,s4,0x5
	array_equ(ti_2,ti_1,size);
     7da:	0001                	nop
     7dc:	ac00                	fsd	fs0,24(s0)
     7de:	0f18                	addi	a4,sp,912
     7e0:	0002                	c.slli64	zero
	array_equ(ti_1,ti,size);
     7e2:	0500                	addi	s0,sp,640
     7e4:	0296                	slli	t0,t0,0x5
     7e6:	0a16                	slli	s4,s4,0x5
     7e8:	0001                	nop
        controlR = 0;
     7ea:	b400                	fsd	fs0,40(s0)
        for (i = 0; i < N + 1; ++i) {
     7ec:	4e18                	lw	a4,24(a2)
     7ee:	0000                	unimp
     7f0:	0500                	addi	s0,sp,640
    while (controlR != 0) {
     7f2:	0a160297          	auipc	t0,0xa160
        for (j = 0; j < mod; ++j) {
     7f6:	0001                	nop
            if (((ri_2[0] * j) % mod) == 1)
     7f8:	bc00                	fsd	fs0,56(s0)
        for (j = 0; j < mod; ++j) {
     7fa:	5d18                	lw	a4,56(a0)
     7fc:	0000                	unimp
     7fe:	0500                	addi	s0,sp,640
     800:	0298                	addi	a4,sp,320
     802:	0a16                	slli	s4,s4,0x5
     804:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     806:	c400                	sw	s0,8(s0)
     808:	b418                	fsd	fa4,40(s0)
    }
     80a:	0004                	0x4
     80c:	0500                	addi	s0,sp,640
     80e:	0299                	addi	t0,t0,6
     810:	6908                	flw	fa0,16(a0)
     812:	0000                	unimp
     814:	cc00                	sw	s0,24(s0)
     816:	0900                	addi	s0,sp,144
     818:	05cd                	addi	a1,a1,19
     81a:	0000                	unimp
     81c:	00000827          	0x827
     820:	750a                	flw	fa0,160(sp)
     822:	0000                	unimp
     824:	1900                	addi	s0,sp,176
     826:	0900                	addi	s0,sp,144
     828:	05cd                	addi	a1,a1,19
     82a:	0000                	unimp
     82c:	00000837          	lui	a6,0x0
     830:	750a                	flw	fa0,160(sp)
     832:	0000                	unimp
        ti_2[i] = 0;
     834:	0700                	addi	s0,sp,896
     836:	0900                	addi	s0,sp,144
     838:	05cd                	addi	a1,a1,19
     83a:	0000                	unimp
        ti_1[i] = 0;
     83c:	00000847          	fmsub.s	fa6,ft0,ft0,ft0,rne
        ti_2[i] = 0;
     840:	750a                	flw	fa0,160(sp)
        ti_1[i] = 0;
     842:	0000                	unimp
     844:	1700                	addi	s0,sp,928
    for (i = 0; i < size; ++i) {
     846:	1b00                	addi	s0,sp,432
     848:	05f0                	addi	a2,sp,716
            ri[i - (N + 1)] = res[i];
     84a:	029e                	slli	t0,t0,0x7
     84c:	00086e07          	0x86e07
     850:	1800                	addi	s0,sp,48
        for (i = N + 1; i < (2 * N + 2); ++i) {
     852:	0401                	addi	s0,s0,0
     854:	0000                	unimp
            ri[i - (N + 1)] = res[i];
     856:	a105                	j	c76 <ntru_deceypt+0x2c>
     858:	1b02                	slli	s6,s6,0x20
        for (i = N + 1; i < (2 * N + 2); ++i) {
     85a:	086e                	slli	a6,a6,0x1b
            temp[i] = ri_2[i] - ri[i];
     85c:	0000                	unimp
     85e:	1800                	addi	s0,sp,48
     860:	03ec                	addi	a1,sp,460
     862:	0000                	unimp
     864:	a205                	j	984 <generate_keys+0xb6>
     866:	1802                	slli	a6,a6,0x20
     868:	087e                	slli	a6,a6,0x1f
     86a:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     86c:	0078                	addi	a4,sp,12
            temp[i] = ri_2[i] - ri[i];
     86e:	0c09                	addi	s8,s8,2
     870:	7e000003          	lb	zero,2016(zero) # 7e0 <ext_euclid+0x126>
        for (i = 0; i < N + 1; ++i) {
     874:	0008                	0x8
            ti[i] = ti_2[i] - temp[i];
     876:	0a00                	addi	s0,sp,272
     878:	0075                	c.nop	29
     87a:	0000                	unimp
     87c:	001d                	c.nop	7
     87e:	7509                	lui	a0,0xfffe2
     880:	0000                	unimp
     882:	8e00                	0x8e00
     884:	0008                	0x8
        for (i = 0; i < N + 1; ++i) {
     886:	0a00                	addi	s0,sp,272
            ti[i] = ti_2[i] - temp[i];
     888:	0075                	c.nop	29
     88a:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     88c:	001d                	c.nop	7
     88e:	f01c                	fsw	fa5,32(s0)
            qi_1[i] = 0;
     890:	8305                	srli	a4,a4,0x1
     892:	0302                	c.slli64	t1
     894:	000008b3          	add	a7,zero,zero
            controlR += ri[i];
     898:	5e1d                	li	t3,-25
     89a:	0005                	c.nop	1
            qi_1[i] = 0;
     89c:	0500                	addi	s0,sp,640
     89e:	029a                	slli	t0,t0,0x6
        for (i = 0; i < N + 1; ++i) {
     8a0:	0007020b          	0x7020b
     8a4:	1d00                	addi	s0,sp,688
            if (((ri_2[0] * j) % mod) == 1)
     8a6:	06e1                	addi	a3,a3,24
     8a8:	0000                	unimp
     8aa:	a305                	j	dca <memcpy+0x42>
     8ac:	0b02                	c.slli64	s6
     8ae:	00000847          	fmsub.s	fa6,ft0,ft0,ft0,rne
     8b2:	0900                	addi	s0,sp,144
     8b4:	05cd                	addi	a1,a1,19
        for (j = 0; j < mod; ++j) {
     8b6:	0000                	unimp
     8b8:	000008c3          	fmadd.s	fa7,ft0,ft0,ft0,rne
        for (i = 0; i < N + 1; ++i) {
     8bc:	750a                	flw	fa0,160(sp)
     8be:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8c0:	1800                	addi	s0,sp,48
     8c2:	1e00                	addi	s0,sp,816
     8c4:	000000b7          	lui	ra,0x0
     8c8:	0410                	addi	a2,sp,512
     8ca:	000008c3          	fmadd.s	fa7,ft0,ft0,ft0,rne
int* generate_keys(int N, int p, int q){
     8ce:	d91f 0008 1500      	0x15000008d91f
     8d4:	00000473          	0x473
     8d8:	1000                	addi	s0,sp,32
     8da:	ce04                	sw	s1,24(a2)
     8dc:	0008                	0x8
     8de:	1000                	addi	s0,sp,32
     8e0:	9604                	0x9604
     8e2:	0001                	nop
     8e4:	1f00                	addi	s0,sp,944
     8e6:	08f0                	addi	a2,sp,92
     8e8:	0000                	unimp
     8ea:	6915                	lui	s2,0x5
     8ec:	0000                	unimp
     8ee:	0000                	unimp
     8f0:	0410                	addi	a2,sp,512
     8f2:	08f6                	slli	a7,a7,0x1d
     8f4:	0000                	unimp
     8f6:	0410                	addi	a2,sp,512
     8f8:	08e5                	addi	a7,a7,25
     8fa:	0000                	unimp
     8fc:	6709                	lui	a4,0x2
     8fe:	0006                	c.slli	zero,0x1
     900:	0c00                	addi	s0,sp,528
     902:	0009                	c.nop	2
     904:	0a00                	addi	s0,sp,272
     906:	0075                	c.nop	29
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     908:	0000                	unimp
     90a:	0002                	c.slli64	zero
     90c:	0c20                	addi	s0,sp,536
     90e:	0006                	c.slli	zero,0x1
     910:	0500                	addi	s0,sp,640
     912:	73170333          	0x73170333
     916:	0004                	0x4
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     918:	2000                	fld	fs0,0(s0)
     91a:	0605                	addi	a2,a2,1
     91c:	0000                	unimp
     91e:	3405                	jal	33e <polymult2+0xb0>
     920:	04791d03          	lh	s10,71(s2) # 5047 <_stack_len+0x1047>
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     924:	0000                	unimp
     926:	00003603          	0x3603
     92a:	0700                	addi	s0,sp,896
     92c:	1318                	addi	a4,sp,416
     92e:	002c                	addi	a1,sp,8
     930:	0000                	unimp
     932:	2605                	jal	c52 <ntru_deceypt+0x8>
     934:	0009                	c.nop	2
     936:	2100                	fld	fs0,0(a0)
     938:	0000043b          	0x43b
     93c:	6708                	flw	fa0,8(a4)
     93e:	c70e                	sw	gp,140(sp)
     940:	0005                	c.nop	1
     942:	0900                	addi	s0,sp,144
     944:	0069                	c.nop	26
     946:	0000                	unimp
     948:	00000953          	fadd.s	fs2,ft0,ft0,rne
     94c:	750a                	flw	fa0,160(sp)
     94e:	0000                	unimp
     950:	9500                	0x9500
     952:	2200                	fld	fs0,0(a2)
     954:	01e9                	addi	gp,gp,26
     956:	0000                	unimp
     958:	0601                	addi	a2,a2,0
     95a:	430c                	lw	a1,0(a4)
     95c:	0009                	c.nop	2
     95e:	0500                	addi	s0,sp,640
     960:	0011b403          	0x11b403
     964:	2200                	fld	fs0,0(a2)
     966:	000003b7          	lui	t2,0x0
     96a:	0701                	addi	a4,a4,0
     96c:	430c                	lw	a1,0(a4)
     96e:	0009                	c.nop	2
     970:	0500                	addi	s0,sp,640
     972:	00140c03          	lb	s8,1(s0) # 1001 <main+0xf3>
     976:	2200                	fld	fs0,0(a2)
     978:	0368                	addi	a0,sp,396
     97a:	0000                	unimp
     97c:	0801                	addi	a6,a6,0
     97e:	430c                	lw	a1,0(a4)
     980:	0009                	c.nop	2
     982:	0500                	addi	s0,sp,640
     984:	00166403          	0x166403
     988:	0900                	addi	s0,sp,144
     98a:	0069                	c.nop	26
     98c:	0000                	unimp
    int polyR[N+1];
     98e:	0999                	addi	s3,s3,6
     990:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     992:	750a                	flw	fa0,160(sp)
    int polyR[N+1];
     994:	0000                	unimp
     996:	6300                	flw	fs0,0(a4)
     998:	2200                	fld	fs0,0(a2)
     99a:	00000497          	auipc	s1,0x0
     99e:	0901                	addi	s2,s2,0
     9a0:	890c                	0x890c
    polyR[N] = 1;
     9a2:	0009                	c.nop	2
     9a4:	0500                	addi	s0,sp,640
     9a6:	0018bc03          	0x18bc03
     9aa:	0900                	addi	s0,sp,144
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9ac:	0069                	c.nop	26
     9ae:	0000                	unimp
     9b0:	09bc                	addi	a5,sp,216
     9b2:	0000                	unimp
     9b4:	00007523          	0x7523
     9b8:	3d00                	fld	fs0,56(a0)
     9ba:	0001                	nop
     9bc:	ab22                	fsd	fs0,400(sp)
     9be:	0000                	unimp
     9c0:	0100                	addi	s0,sp,128
     9c2:	0c0a                	slli	s8,s8,0x2
     9c4:	000009ab          	0x9ab
     9c8:	0305                	addi	t1,t1,1
     9ca:	1a4c                	addi	a1,sp,308
     9cc:	0000                	unimp
     9ce:	7009                	c.lui	zero,0xfffe2
     9d0:	0000                	unimp
     9d2:	de00                	sw	s0,56(a2)
     9d4:	0009                	c.nop	2
     9d6:	0a00                	addi	s0,sp,272
     9d8:	0075                	c.nop	29
     9da:	0000                	unimp
     9dc:	0000                	unimp
     9de:	ce05                	beqz	a2,a16 <generate_keys+0x148>
     9e0:	0009                	c.nop	2
     9e2:	2400                	fld	fs0,8(s0)
     9e4:	029d                	addi	t0,t0,7
     9e6:	0000                	unimp
     9e8:	0b01                	addi	s6,s6,0
     9ea:	de0e                	sw	gp,60(sp)
     9ec:	0009                	c.nop	2
     9ee:	0500                	addi	s0,sp,640
     9f0:	001f4403          	lbu	s0,1(t5)
     9f4:	2500                	fld	fs0,8(a0)
     9f6:	6176                	flw	ft2,92(sp)
     9f8:	0072                	c.slli	zero,0x1c
     9fa:	0c01                	addi	s8,s8,0
     9fc:	000a0713          	mv	a4,s4
     a00:	0500                	addi	s0,sp,640
     a02:	0011b003          	0x11b003
     a06:	1000                	addi	s0,sp,32
     a08:	3204                	fld	fs1,32(a2)
     a0a:	0009                	c.nop	2
     a0c:	2600                	fld	fs0,8(a2)
     a0e:	0000072f          	0x72f
    polyR[0] = -1;
     a12:	9d01                	0x9d01
    for(i = 1; i < N; ++i){
     a14:	0502                	c.slli64	a0
     a16:	0069                	c.nop	26
     a18:	0000                	unimp
     a1a:	0f0e                	slli	t5,t5,0x3
    for (i = N; i < 55; ++i ){
     a1c:	0000                	unimp
     a1e:	0110                	addi	a2,sp,128
     a20:	0000                	unimp
     a22:	9c01                	0x9c01
    for(i = 0; i < N; ++i){
     a24:	00000ba7          	0xba7
        random_keys[i] = f[i];
     a28:	72617627          	0x72617627
     a2c:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     a2e:	029e                	slli	t0,t0,0x7
     a30:	000a0713          	mv	a4,s4
     a34:	ff00                	fsw	fs0,56(a4)
    for(i = N; i < (2*N); ++i){
     a36:	28ff                	0x28ff
     a38:	00000457          	0x457
     a3c:	9f01                	0x9f01
        random_keys[i] = g[i-N];
     a3e:	0a02                	c.slli64	s4
     a40:	00000ba7          	0xba7
     a44:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     a46:	0000                	unimp
     a48:	9628                	0x9628
    for(i = (2*N); i < (3*N); ++i){
     a4a:	0000                	unimp
     a4c:	0100                	addi	s0,sp,128
     a4e:	02a0                	addi	s0,sp,328
    fp = ext_euclid(polyR, f, (N+1), p);
     a50:	a70a                	fsd	ft2,392(sp)
     a52:	1e00000b          	0x1e00000b
     a56:	0000                	unimp
     a58:	2800                	fld	fs0,16(s0)
     a5a:	0385                	addi	t2,t2,1
    for(i = (2*N); i < (3*N); ++i){
     a5c:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     a5e:	a101                	j	e5e <memcpy+0xd6>
     a60:	0a02                	c.slli64	s4
     a62:	00000ba7          	0xba7
    for(i = (2*N); i < (3*N); ++i){
     a66:	003c                	addi	a5,sp,8
     a68:	0000                	unimp
    fq = ext_euclid(polyR, f, (N+1), q);
     a6a:	4e29                	li	t3,10
     a6c:	0100                	addi	s0,sp,128
     a6e:	02a2                	slli	t0,t0,0x8
     a70:	6909                	lui	s2,0x2
     a72:	0000                	unimp
     a74:	3500                	fld	fs0,40(a0)
    for(i = (3*N); i < (4*N); ++i){
     a76:	7029                	c.lui	zero,0xfffea
     a78:	0100                	addi	s0,sp,128
     a7a:	690902a3          	sb	a6,1669(s2) # 2685 <_min_stack+0x685>
        random_keys[i] = fq[i-(3*N)];
     a7e:	0000                	unimp
     a80:	0300                	addi	s0,sp,384
     a82:	7129                	addi	sp,sp,-320
     a84:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     a86:	02a4                	addi	s1,sp,328
     a88:	6909                	lui	s2,0x2
    fg = polymult2(fq, N, g, N, 0);
     a8a:	0000                	unimp
     a8c:	6500                	flw	fs0,8(a0)
     a8e:	122a                	slli	tp,tp,0x2a
     a90:	0004                	0x4
     a92:	0100                	addi	s0,sp,128
     a94:	02a6                	slli	t0,t0,0x9
    for(i = 0; i < (2*N-1); ++i){
     a96:	ad09                	j	10a8 <_endtext+0x78>
     a98:	0300000b          	0x300000b
     a9c:	dc91                	beqz	s1,9b8 <generate_keys+0xea>
     a9e:	05a82877          	0x5a82877
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     aa2:	0000                	unimp
     aa4:	a701                	j	11a4 <_endtext+0x174>
     aa6:	0902                	c.slli64	s2
     aa8:	0bbd                	addi	s7,s7,15
    for(i = (4*N); i < (5*N); ++i){
     aaa:	0000                	unimp
     aac:	005d                	c.nop	23
     aae:	0000                	unimp
     ab0:	c228                	sw	a0,64(a2)
     ab2:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     ab4:	0100                	addi	s0,sp,128
     ab6:	02a8                	addi	a0,sp,328
     ab8:	cf09                	beqz	a4,ad2 <generate_keys+0x204>
     aba:	b100000b          	0xb100000b
    for(i = (4*N); i < (5*N); ++i){
     abe:	0000                	unimp
     ac0:	2b00                	fld	fs0,16(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     ac2:	000000cf          	fnmadd.s	ft1,ft0,ft0,ft0,rne
        random_keys[i] = polyR[i-(5*N)];
     ac6:	a901                	j	ed6 <memset+0x70>
     ac8:	0902                	c.slli64	s2
     aca:	0be1                	addi	s7,s7,24
     acc:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     ace:	dd28                	sw	a0,120(a0)
     ad0:	0005                	c.nop	1
     ad2:	0100                	addi	s0,sp,128
     ad4:	02aa                	slli	t0,t0,0xa
     ad6:	f309                	bnez	a4,9d8 <generate_keys+0x10a>
     ad8:	1200000b          	0x1200000b
}
     adc:	0001                	nop
     ade:	2b00                	fld	fs0,16(a4)
     ae0:	000002b7          	lui	t0,0x0
     ae4:	ab01                	j	ff4 <main+0xe6>
     ae6:	0902                	c.slli64	s2
     ae8:	0c05                	addi	s8,s8,1
     aea:	0000                	unimp
     aec:	7628                	flw	fa0,104(a2)
     aee:	0004                	0x4
     af0:	0100                	addi	s0,sp,128
     af2:	02ac                	addi	a1,sp,328
     af4:	1709                	addi	a4,a4,-30
     af6:	000c                	0xc
     af8:	6500                	flw	fs0,8(a0)
     afa:	0001                	nop
     afc:	2c00                	fld	fs0,24(s0)
     afe:	0069                	c.nop	26
     b00:	ad01                	j	1110 <_endtext+0xe0>
     b02:	0902                	c.slli64	s2
     b04:	0069                	c.nop	26
     b06:	0000                	unimp
     b08:	01b9                	addi	gp,gp,14
     b0a:	0000                	unimp
     b0c:	2a2d                	jal	c46 <ntru_encyrpt+0x84>
     b0e:	e200000f          	0xe200000f
     b12:	001e                	c.slli	zero,0x7
     b14:	3000                	fld	fs0,32(s0)
     b16:	2e00000b          	0x2e00000b
        polyR[i] = 0;
     b1a:	5a01                	li	s4,-32
     b1c:	77dc9103          	lh	sp,1917(s9)
     b20:	012e                	slli	sp,sp,0xb
     b22:	f003055b          	0xf003055b
    for(i = 1; i < N; ++i){
     b26:	0010                	0x10
        f[i] = 0;
     b28:	2e00                	fld	fs0,24(a2)
     b2a:	5c01                	li	s8,-32
     b2c:	0802                	c.slli64	a6
     b2e:	00c0                	addi	s0,sp,68
     b30:	362d                	jal	65a <polydiv+0x26e>
     b32:	0000000f          	fence	unknown,unknown
        g[i] = 0;
     b36:	4f00000f          	0x4f00000f
     b3a:	2e00000b          	0x2e00000b
     b3e:	5a01                	li	s4,-32
    for (i = N; i < 55; ++i ){
     b40:	0802                	c.slli64	a6
     b42:	2e35                	jal	e7e <memset+0x18>
        random_keys[i] = f[i];
     b44:	5b01                	li	s6,-32
     b46:	3301                	jal	846 <ext_euclid+0x18c>
     b48:	012e                	slli	sp,sp,0xb
     b4a:	025c                	addi	a5,sp,260
     b4c:	6508                	flw	fa0,8(a0)
     b4e:	2d00                	fld	fs0,24(a0)
     b50:	0fa6                	slli	t6,t6,0x9
     b52:	0000                	unimp
    for(i = 0; i < N; ++i){
     b54:	0daa                	slli	s11,s11,0xa
        random_keys[i] = f[i];
     b56:	0000                	unimp
    for(i = 0; i < N; ++i){
     b58:	00000b77          	0xb77
        random_keys[i] = g[i-N];
     b5c:	012e                	slli	sp,sp,0xb
     b5e:	025a                	slli	tp,tp,0x16
     b60:	3508                	fld	fa0,40(a0)
     b62:	012e                	slli	sp,sp,0xb
    for(i = N; i < (2*N); ++i){
     b64:	6508025b          	0x6508025b
     b68:	012e                	slli	sp,sp,0xb
        random_keys[i] = fp[i-(2*N)];
     b6a:	035c                	addi	a5,sp,388
     b6c:	dc91                	beqz	s1,a88 <generate_keys+0x1ba>
     b6e:	5e012e77          	0x5e012e77
     b72:	7e989103          	lh	sp,2025(a7)
    for(i = (2*N); i < (3*N); ++i){
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0fbc                	addi	a5,sp,984
        random_keys[i] = fq[i-(3*N)];
     b7a:	0000                	unimp
     b7c:	0c29                	addi	s8,s8,10
     b7e:	0000                	unimp
     b80:	012e                	slli	sp,sp,0xb
     b82:	025a                	slli	tp,tp,0x16
     b84:	3508                	fld	fa0,40(a0)
     b86:	012e                	slli	sp,sp,0xb
    for(i = (3*N); i < (4*N); ++i){
     b88:	2e33015b          	0x2e33015b
     b8c:	5c01                	li	s8,-32
        fg[i] = fg[i]*p;
     b8e:	0802                	c.slli64	a6
    for(i = 0; i < (2*N-1); ++i){
     b90:	2e65                	jal	f48 <main+0x3a>
     b92:	5d01                	li	s10,-32
        fg[i] = fg[i]*p;
     b94:	7af09103          	lh	sp,1967(ra) # 7af <ext_euclid+0xf5>
     b98:	012e                	slli	sp,sp,0xb
     b9a:	025e                	slli	tp,tp,0x17
    for(i = 0; i < (2*N-1); ++i){
     b9c:	0078                	addi	a4,sp,12
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b9e:	012e                	slli	sp,sp,0xb
     ba0:	0360                	addi	s0,sp,396
     ba2:	9891                	andi	s1,s1,-28
     ba4:	007e                	c.slli	zero,0x1f
     ba6:	1000                	addi	s0,sp,32
     ba8:	6904                	flw	fs1,16(a0)
    for(i = (4*N); i < (5*N); ++i){
     baa:	0000                	unimp
     bac:	0900                	addi	s0,sp,144
        random_keys[i] = polyR[i-(5*N)];
     bae:	0069                	c.nop	26
     bb0:	0000                	unimp
     bb2:	0bbd                	addi	s7,s7,15
     bb4:	0000                	unimp
     bb6:	750a                	flw	fa0,160(sp)
     bb8:	0000                	unimp
     bba:	2f00                	fld	fs0,24(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     bbc:	0900                	addi	s0,sp,144
        random_keys[i] = polyR[i-(5*N)];
     bbe:	0069                	c.nop	26
    for(i = (5*N); i < (6*N+1); ++i){
     bc0:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bc2:	00000bcf          	fnmadd.s	fs7,ft0,ft0,ft0,rne
     bc6:	7530                	flw	fa2,104(a0)
     bc8:	0000                	unimp
     bca:	0200                	addi	s0,sp,256
     bcc:	3408                	fld	fa0,40(s0)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bce:	0900                	addi	s0,sp,144
     bd0:	0069                	c.nop	26
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bd2:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bd4:	0be1                	addi	s7,s7,24
     bd6:	0000                	unimp
     bd8:	7530                	flw	fa2,104(a0)
     bda:	0000                	unimp
     bdc:	0200                	addi	s0,sp,256
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bde:	3408                	fld	fa0,40(s0)
     be0:	0900                	addi	s0,sp,144
     be2:	0069                	c.nop	26
     be4:	0000                	unimp
     be6:	00000bf3          	0xbf3
    temp = polymult(public_key,N,random_val,48,q,0);
     bea:	7530                	flw	fa2,104(a0)
     bec:	0000                	unimp
     bee:	0200                	addi	s0,sp,256
     bf0:	3408                	fld	fa0,40(s0)
     bf2:	0900                	addi	s0,sp,144
     bf4:	0069                	c.nop	26
     bf6:	0000                	unimp
     bf8:	0c05                	addi	s8,s8,1
     bfa:	0000                	unimp
	array_add(temp,message,48);
     bfc:	7530                	flw	fa2,104(a0)
     bfe:	0000                	unimp
     c00:	0200                	addi	s0,sp,256
    temp = polymult(public_key,N,random_val,48,q,0);
     c02:	3408                	fld	fa0,40(s0)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c04:	0900                	addi	s0,sp,144
     c06:	0069                	c.nop	26
	array_add(temp,message,48);
     c08:	0000                	unimp
     c0a:	00000c17          	auipc	s8,0x0
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c0e:	7530                	flw	fa2,104(a0)
     c10:	0000                	unimp
     c12:	0200                	addi	s0,sp,256
     c14:	3408                	fld	fa0,40(s0)
     c16:	0900                	addi	s0,sp,144
     c18:	0069                	c.nop	26
     c1a:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     c1c:	0c29                	addi	s8,s8,10
     c1e:	0000                	unimp
     c20:	7530                	flw	fa2,104(a0)
     c22:	0000                	unimp
     c24:	0200                	addi	s0,sp,256
     c26:	3508                	fld	fa0,40(a0)
}
     c28:	3100                	fld	fs0,32(a0)
     c2a:	0236                	slli	tp,tp,0xd
     c2c:	0000                	unimp
     c2e:	7101                	addi	sp,sp,-512
     c30:	0602                	c.slli64	a2
     c32:	00000ba7          	0xba7
     c36:	0c4a                	slli	s8,s8,0x12
        CT[i-(2*N)] = CT[i];
     c38:	0000                	unimp
     c3a:	00c8                	addi	a0,sp,68
     c3c:	0000                	unimp
     c3e:	9c01                	0x9c01
    for(i = (2*N); i < (3*N); ++i){
     c40:	0daa                	slli	s11,s11,0xa
     c42:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     c44:	4e32                	lw	t3,12(sp)
     c46:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     c48:	0271                	addi	tp,tp,28
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c4a:	00006917          	auipc	s2,0x6
     c4e:	d900                	sw	s0,48(a0)
     c50:	0001                	nop
    for(i = (2*N); i < ((2*N)+N); ++i){
     c52:	3200                	fld	fs0,32(a2)
     c54:	0070                	addi	a2,sp,12
     c56:	7101                	addi	sp,sp,-512
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c58:	1e02                	slli	t3,t3,0x20
     c5a:	0069                	c.nop	26
     c5c:	0000                	unimp
     c5e:	021d                	addi	tp,tp,7
     c60:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c62:	7132                	flw	ft2,44(sp)
     c64:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c66:	0271                	addi	tp,tp,28
     c68:	6925                	lui	s2,0x9
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c6a:	0000                	unimp
     c6c:	5400                	lw	s0,40(s0)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c6e:	0002                	c.slli64	zero
     c70:	3300                	fld	fs0,32(a4)
     c72:	00c2                	slli	ra,ra,0x10
     c74:	0000                	unimp
     c76:	7101                	addi	sp,sp,-512
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c78:	2d02                	fld	fs10,0(sp)
     c7a:	00000ba7          	0xba7
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c7e:	0000028b          	0x28b
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c82:	0005dd33          	srl	s10,a1,zero
     c86:	0100                	addi	s0,sp,128
     c88:	0271                	addi	tp,tp,28
     c8a:	a740                	fsd	fs0,136(a4)
     c8c:	b700000b          	0xb700000b
     c90:	0002                	c.slli64	zero
    for(i = (2*N); i < ((2*N)+N); ++i){
     c92:	3300                	fld	fs0,32(a4)
     c94:	00000457          	0x457
     c98:	7101                	addi	sp,sp,-512
     c9a:	5402                	lw	s0,32(sp)
        if(a2[i] <= q/2)
     c9c:	00000ba7          	0xba7
     ca0:	02ee                	slli	t0,t0,0x1b
    for (i = 0; i < N; ++i){
     ca2:	0000                	unimp
     ca4:	0006e933          	or	s2,a3,zero
    c = polymult2(secret_key_fp,N,a2,N,0);
     ca8:	0100                	addi	s0,sp,128
     caa:	0271                	addi	tp,tp,28
     cac:	a766                	fsd	fs9,392(sp)
     cae:	0f00000b          	0xf00000b
     cb2:	2b000003          	lb	zero,688(zero) # 2b0 <polymult2+0x22>
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cb6:	0322                	slli	t1,t1,0x8
     cb8:	0000                	unimp
     cba:	7301                	lui	t1,0xfffe0
     cbc:	0a02                	c.slli64	s4
     cbe:	00000ba7          	0xba7
    for(i = (2*N); i < ((2*N)+N); ++i){
     cc2:	612c                	flw	fa1,64(a0)
     cc4:	0100                	addi	s0,sp,128
}
     cc6:	0274                	addi	a3,sp,268
     cc8:	a70a                	fsd	ft2,392(sp)
     cca:	4600000b          	0x4600000b
     cce:	2c000003          	lb	zero,704(zero) # 2c0 <polymult2+0x32>
     cd2:	3261                	jal	65a <polydiv+0x26e>
     cd4:	0100                	addi	s0,sp,128
     cd6:	0275                	addi	tp,tp,29
     cd8:	a70a                	fsd	ft2,392(sp)
     cda:	5900000b          	0x5900000b
        a2[i-(2*N)] = a2[i];
     cde:	2c000003          	lb	zero,704(zero) # 2c0 <polymult2+0x32>
     ce2:	76010063          	beqz	sp,1442 <product2+0x36>
    for(i = (2*N); i < ((2*N)+N); ++i){
     ce6:	0a02                	c.slli64	s4
        a2[i-(2*N)] = a2[i];
     ce8:	00000ba7          	0xba7
    for(i = (2*N); i < ((2*N)+N); ++i){
     cec:	0382                	c.slli64	t2
        if(a2[i] <= q/2)
     cee:	0000                	unimp
     cf0:	632c                	flw	fa1,64(a4)
     cf2:	0032                	c.slli	zero,0xc
            a2[i] = (-1)*(q-a2[i]);
     cf4:	7701                	lui	a4,0xfffe0
     cf6:	0a02                	c.slli64	s4
     cf8:	00000ba7          	0xba7
    for (i = 0; i < N; ++i){
     cfc:	0395                	addi	t2,t2,5
     cfe:	0000                	unimp
        c2[i-(2*N)] = c2[i];
     d00:	692c                	flw	fa1,80(a0)
     d02:	0100                	addi	s0,sp,128
     d04:	0278                	addi	a4,sp,268
     d06:	6909                	lui	s2,0x2
    for(i = (2*N); i < ((2*N)+N); ++i){
     d08:	0000                	unimp
     d0a:	b300                	fsd	fs0,32(a4)
        c2[i-(2*N)] = c2[i];
     d0c:	2d000003          	lb	zero,720(zero) # 2d0 <polymult2+0x42>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d10:	0c80                	addi	s0,sp,592
  jal x0, default_exc_handler
     d12:	0000                	unimp
     d14:	18fc                	addi	a5,sp,124
  mv  x1, x0
     d16:	0000                	unimp
     d18:	0d3c                	addi	a5,sp,664
  mv  x2, x1
     d1a:	0000                	unimp
  mv  x3, x1
     d1c:	012e                	slli	sp,sp,0xb
  mv  x4, x1
     d1e:	035a                	slli	t1,t1,0x16
  mv  x5, x1
     d20:	2e5d01f3          	0x2e5d01f3
  mv  x7, x1
     d24:	5b01                	li	s6,-32
  mv  x8, x1
     d26:	7802                	flw	fa6,32(sp)
  mv  x9, x1
     d28:	2e00                	fld	fs0,24(a2)
  mv x10, x1
     d2a:	5c01                	li	s8,-32
  mv x11, x1
     d2c:	5f01f303          	0x5f01f303
  mv x13, x1
     d30:	012e                	slli	sp,sp,0xb
  mv x14, x1
     d32:	025d                	addi	tp,tp,23
  mv x15, x1
     d34:	0078                	addi	a4,sp,12
  mv x16, x1
     d36:	012e                	slli	sp,sp,0xb
  mv x17, x1
     d38:	015e                	slli	sp,sp,0x17
  mv x18, x1
     d3a:	0030                	addi	a2,sp,8
  mv x19, x1
     d3c:	902d                	srli	s0,s0,0x2b
  mv x20, x1
     d3e:	000c                	0xc
  mv x21, x1
     d40:	2800                	fld	fs0,16(s0)
  mv x22, x1
     d42:	0015                	c.nop	5
  mv x23, x1
     d44:	6200                	flw	fs0,0(a2)
  mv x24, x1
     d46:	000d                	c.nop	3
  mv x25, x1
     d48:	2e00                	fld	fs0,24(a2)
  mv x26, x1
     d4a:	5b01                	li	s6,-32
  mv x27, x1
     d4c:	7902                	flw	fs2,32(sp)
  mv x28, x1
     d4e:	2e00                	fld	fs0,24(a2)
  mv x29, x1
     d50:	5c01                	li	s8,-32
  mv x30, x1
     d52:	8402                	jr	s0
  mv x31, x1
     d54:	2e00                	fld	fs0,24(a2)
  la   x2, _stack_start
     d56:	5d01                	li	s10,-32
     d58:	8602                	jr	a2
     d5a:	2e00                	fld	fs0,24(a2)
     d5c:	5e01                	li	t3,-32
  la x26, _bss_start
     d5e:	8202                	jr	tp
     d60:	0000                	unimp
     d62:	b42d                	j	78c <ext_euclid+0xd2>
     d64:	000c                	0xc
  la x27, _bss_end
     d66:	fc00                	fsw	fs0,56(s0)
     d68:	0018                	0x18
     d6a:	8700                	0x8700
     d6c:	000d                	c.nop	3
  bge x26, x27, zero_loop_end
     d6e:	2e00                	fld	fs0,24(a2)
     d70:	5a01                	li	s4,-32
  sw x0, 0(x26)
     d72:	8702                	jr	a4
     d74:	2e00                	fld	fs0,24(a2)
  addi x26, x26, 4
     d76:	5b01                	li	s6,-32
  ble x26, x27, zero_loop
     d78:	7802                	flw	fa6,32(sp)
     d7a:	2e00                	fld	fs0,24(a2)
  addi x10, x0, 0
     d7c:	5d01                	li	s10,-32
     d7e:	7802                	flw	fa6,32(sp)
  addi x11, x0, 0
     d80:	2e00                	fld	fs0,24(a2)
     d82:	5e01                	li	t3,-32
  jal x1, main
     d84:	3001                	jal	584 <polydiv+0x198>
     d86:	2f00                	fld	fs0,24(a4)
     d88:	0cc0                	addi	s0,sp,596
     d8a:	0000                	unimp
     d8c:	1528                	addi	a0,sp,680
     d8e:	0000                	unimp
     d90:	012e                	slli	sp,sp,0xb
     d92:	0079025b          	0x79025b
     d96:	012e                	slli	sp,sp,0xb
     d98:	025c                	addi	a5,sp,260
     d9a:	0084                	addi	s1,sp,64
     d9c:	012e                	slli	sp,sp,0xb
     d9e:	025d                	addi	tp,tp,23
     da0:	0086                	slli	ra,ra,0x1
     da2:	012e                	slli	sp,sp,0xb
     da4:	025e                	slli	tp,tp,0x17
     da6:	0085                	addi	ra,ra,1
     da8:	0000                	unimp
     daa:	ab31                	j	12c6 <_bss_start+0x112>
     dac:	0006                	c.slli	zero,0x1
     dae:	0100                	addi	s0,sp,128
     db0:	0250                	addi	a2,sp,260
     db2:	a706                	fsd	ft1,392(sp)
     db4:	c200000b          	0xc200000b
     db8:	8800000b          	0x8800000b
     dbc:	0000                	unimp
     dbe:	0100                	addi	s0,sp,128
     dc0:	009c                	addi	a5,sp,64
     dc2:	3200000f          	0x3200000f
     dc6:	004e                	c.slli	zero,0x13
     dc8:	5001                	c.li	zero,-32
     dca:	1702                	slli	a4,a4,0x20
     dcc:	0069                	c.nop	26
     dce:	0000                	unimp
     dd0:	0438                	addi	a4,sp,520
     dd2:	0000                	unimp
     dd4:	7132                	flw	ft2,44(sp)
     dd6:	0100                	addi	s0,sp,128
     dd8:	0250                	addi	a2,sp,260
     dda:	691e                	flw	fs2,196(sp)
     ddc:	0000                	unimp
     dde:	6400                	flw	fs0,8(s0)
     de0:	0004                	0x4
     de2:	3300                	fld	fs0,32(a4)
     de4:	0412                	slli	s0,s0,0x4
     de6:	0000                	unimp
     de8:	5001                	c.li	zero,-32
     dea:	2602                	fld	fa2,0(sp)
     dec:	00000ba7          	0xba7
     df0:	0000049b          	0x49b
     df4:	0005a833          	sltz	a6,a1
     df8:	0100                	addi	s0,sp,128
     dfa:	0250                	addi	a2,sp,260
     dfc:	a734                	fsd	fa3,72(a4)
     dfe:	d200000b          	0xd200000b
     e02:	0004                	0x4
     e04:	3300                	fld	fs0,32(a4)
     e06:	06e9                	addi	a3,a3,26
     e08:	0000                	unimp
     e0a:	5001                	c.li	zero,-32
     e0c:	4502                	lw	a0,0(sp)
     e0e:	00000ba7          	0xba7
     e12:	04fe                	slli	s1,s1,0x1f
     e14:	0000                	unimp
     e16:	0003122b          	0x3122b
     e1a:	0100                	addi	s0,sp,128
     e1c:	0252                	slli	tp,tp,0x14
     e1e:	a70a                	fsd	ft2,392(sp)
     e20:	3400000b          	0x3400000b
     e24:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     e28:	a70a0253          	fle.q	tp,fs4,fa6
     e2c:	0100000b          	0x100000b
     e30:	2a5a                	fld	fs4,400(sp)
     e32:	03e1                	addi	t2,t2,24
     e34:	0000                	unimp
     e36:	5501                	li	a0,-32
     e38:	0902                	c.slli64	s2
     e3a:	0bad                	addi	s7,s7,11
     e3c:	0000                	unimp
     e3e:	7ea09103          	lh	sp,2026(ra)
     e42:	9128                	0x9128
     e44:	0002                	c.slli64	zero
     e46:	0100                	addi	s0,sp,128
     e48:	0256                	slli	tp,tp,0x15
     e4a:	a70a                	fsd	ft2,392(sp)
     e4c:	3500000b          	0x3500000b
     e50:	0005                	c.nop	1
     e52:	2c00                	fld	fs0,24(s0)
     e54:	0069                	c.nop	26
     e56:	5701                	li	a4,-32
     e58:	0902                	c.slli64	s2
     e5a:	0069                	c.nop	26
     e5c:	0000                	unimp
     e5e:	055e                	slli	a0,a0,0x17
     e60:	0000                	unimp
     e62:	ea2d                	bnez	a2,ed4 <memset+0x6e>
     e64:	e200000b          	0xe200000b
     e68:	001e                	c.slli	zero,0x7
     e6a:	8500                	0x8500
     e6c:	000e                	c.slli	zero,0x3
     e6e:	2e00                	fld	fs0,24(a2)
     e70:	5a01                	li	s4,-32
     e72:	7202                	flw	ft4,32(sp)
     e74:	2e00                	fld	fs0,24(a2)
     e76:	5b01                	li	s6,-32
     e78:	0305                	addi	t1,t1,1
     e7a:	1030                	addi	a2,sp,40
     e7c:	0000                	unimp
     e7e:	012e                	slli	sp,sp,0xb
     e80:	025c                	addi	a5,sp,260
     e82:	c008                	sw	a0,0(s0)
     e84:	2d00                	fld	fs0,24(a0)
     e86:	0bfc                	addi	a5,sp,476
     e88:	0000                	unimp
     e8a:	1a92                	slli	s5,s5,0x24
     e8c:	0000                	unimp
     e8e:	0eb6                	slli	t4,t4,0xd
     e90:	0000                	unimp
     e92:	012e                	slli	sp,sp,0xb
     e94:	025a                	slli	tp,tp,0x16
     e96:	012e0083          	lb	ra,18(t3) # 1012 <main+0x104>
     e9a:	0078025b          	0x78025b
     e9e:	012e                	slli	sp,sp,0xb
     ea0:	025c                	addi	a5,sp,260
     ea2:	0072                	c.slli	zero,0x1c
     ea4:	012e                	slli	sp,sp,0xb
     ea6:	025d                	addi	tp,tp,23
     ea8:	3008                	fld	fa0,32(s0)
     eaa:	012e                	slli	sp,sp,0xb
     eac:	025e                	slli	tp,tp,0x17
     eae:	0082                	c.slli64	ra
     eb0:	012e                	slli	sp,sp,0xb
     eb2:	015f 0030 0c2d      	0xc2d0030015f
     eb8:	000c                	0xc
     eba:	4a00                	lw	s0,16(a2)
     ebc:	001d                	c.nop	7
     ebe:	d700                	sw	s0,40(a4)
     ec0:	000e                	c.slli	zero,0x3
     ec2:	2e00                	fld	fs0,24(a2)
     ec4:	5a01                	li	s4,-32
     ec6:	8302                	jr	t1
     ec8:	2e00                	fld	fs0,24(a2)
     eca:	5b01                	li	s6,-32
     ecc:	5c01f303          	0x5c01f303
     ed0:	012e                	slli	sp,sp,0xb
     ed2:	025c                	addi	a5,sp,260
     ed4:	3008                	fld	fa0,32(s0)
     ed6:	2f00                	fld	fs0,24(a4)
     ed8:	0c1c                	addi	a5,sp,528
     eda:	0000                	unimp
     edc:	1528                	addi	a0,sp,680
     ede:	0000                	unimp
     ee0:	012e                	slli	sp,sp,0xb
     ee2:	025a                	slli	tp,tp,0x16
     ee4:	012e0083          	lb	ra,18(t3)
     ee8:	0079025b          	0x79025b
     eec:	012e                	slli	sp,sp,0xb
     eee:	025c                	addi	a5,sp,260
     ef0:	0084                	addi	s1,sp,64
     ef2:	012e                	slli	sp,sp,0xb
     ef4:	025d                	addi	tp,tp,23
     ef6:	0178                	addi	a4,sp,140
     ef8:	012e                	slli	sp,sp,0xb
     efa:	025e                	slli	tp,tp,0x17
     efc:	0082                	c.slli64	ra
     efe:	0000                	unimp
     f00:	7c31                	lui	s8,0xfffec
     f02:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     f06:	a70601f7          	0xa70601f7
     f0a:	ce00000b          	0xce00000b
int main(){
     f0e:	0008                	0x8
     f10:	f400                	fsw	fs0,40(s0)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f12:	0002                	c.slli64	zero
     f14:	0100                	addi	s0,sp,128
     f16:	b09c                	fsd	fa5,32(s1)
     f18:	0010                	0x10
     f1a:	3200                	fld	fs0,32(a2)
     f1c:	004e                	c.slli	zero,0x13
     f1e:	f701                	bnez	a4,e26 <memcpy+0x9e>
int main(){
     f20:	1801                	addi	a6,a6,-32
     f22:	0069                	c.nop	26
     f24:	0000                	unimp
     f26:	0594                	addi	a3,sp,704
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f28:	0000                	unimp
    keys = generate_keys(N, p, q);
     f2a:	7032                	flw	ft0,44(sp)
     f2c:	0100                	addi	s0,sp,128
     f2e:	691f01f7          	0x691f01f7
     f32:	0000                	unimp
     f34:	e500                	fsw	fs0,8(a0)
     f36:	0005                	c.nop	1
    for(i = 0; i < N; ++i){
     f38:	3200                	fld	fs0,32(a2)
     f3a:	0071                	c.nop	28
        secret_key_f[i] = keys[i];
     f3c:	f701                	bnez	a4,e44 <memcpy+0xbc>
     f3e:	2601                	jal	123e <_bss_start+0x8a>
     f40:	0069                	c.nop	26
     f42:	0000                	unimp
     f44:	061c                	addi	a5,sp,768
     f46:	0000                	unimp
    for(i = 0; i < N; ++i){
     f48:	6634                	flw	fa3,72(a2)
     f4a:	0100                	addi	s0,sp,128
     f4c:	01fa                	slli	gp,gp,0x1e
    for(i = N; i < (2*N); ++i){
     f4e:	b009                	j	750 <ext_euclid+0x96>
     f50:	0010                	0x10
     f52:	0300                	addi	s0,sp,384
     f54:	9891                	andi	s1,s1,-28
     f56:	347c                	fld	fa5,232(s0)
     f58:	fb010067          	jr	-80(sp)
        secret_key_fp[i-(2*N)] = keys[i];
     f5c:	0901                	addi	s2,s2,0
     f5e:	10b0                	addi	a2,sp,104
     f60:	0000                	unimp
     f62:	7df49103          	lh	sp,2015(s1) # 1179 <_endtext+0x149>
    for(i = (2*N); i < (3*N); ++i){
     f66:	662c                	flw	fa1,72(a2)
    for(i = (3*N); i < (4*N); ++i){
     f68:	0070                	addi	a2,sp,12
     f6a:	fd01                	bnez	a0,e82 <memset+0x1c>
     f6c:	0a01                	addi	s4,s4,0
     f6e:	00000ba7          	0xba7
     f72:	00000653          	fadd.s	fa2,ft0,ft0,rne
        public_key[i-(4*N)] = keys[i];
     f76:	662c                	flw	fa1,72(a2)
     f78:	0071                	c.nop	28
     f7a:	fe01                	bnez	a2,e92 <memset+0x2c>
     f7c:	0a01                	addi	s4,s4,0
    for(i = (4*N); i < (5*N); ++i){
     f7e:	00000ba7          	0xba7
     f82:	0666                	slli	a2,a2,0x19
     f84:	0000                	unimp
     f86:	662c                	flw	fa1,72(a2)
     f88:	ff010067          	jr	-16(sp)
        ring_poly[i-(5*N)] = keys[i];
     f8c:	0a01                	addi	s4,s4,0
     f8e:	00000ba7          	0xba7
     f92:	0684                	addi	s1,sp,832
    for(i = (5*N); i < (6*N+1); ++i){
     f94:	0000                	unimp
     f96:	702c                	flw	fa1,96(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f98:	0001006b          	0x1006b
     f9c:	0a02                	c.slli64	s4
     f9e:	00000ba7          	0xba7
     fa2:	06a2                	slli	a3,a3,0x8
     fa4:	0000                	unimp
     fa6:	e928                	fsw	fa0,80(a0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fa8:	0006                	c.slli	zero,0x1
     faa:	0100                	addi	s0,sp,128
     fac:	0201                	addi	tp,tp,0
     fae:	c009                	beqz	s0,fb0 <main+0xa2>
     fb0:	0010                	0x10
     fb2:	c000                	sw	s0,0(s0)
     fb4:	0006                	c.slli	zero,0x1
     fb6:	2c00                	fld	fs0,24(s0)
     fb8:	0069                	c.nop	26
     fba:	0201                	addi	tp,tp,0
            resultkon[0] = 0xDEDEDEDE;
     fbc:	0902                	c.slli64	s2
     fbe:	0069                	c.nop	26
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fc0:	0000                	unimp
     fc2:	00000723          	sb	zero,14(zero) # e <__DYNAMIC+0xe>
     fc6:	2328                	fld	fa0,64(a4)
     fc8:	0004                	0x4
            resultkon[0] = 0xDEDEDEDE;
     fca:	0100                	addi	s0,sp,128
     fcc:	a70a0203          	lb	tp,-1424(s4) # fffe0a70 <_stack_start+0xfffd0a70>
    for(i = 0; i < 32; ++i){
     fd0:	5f00000b          	0x5f00000b
        if(!(message[i] == Dec_Message[i])){
     fd4:	0008                	0x8
     fd6:	3500                	fld	fs0,40(a0)
     fd8:	0075                	c.nop	29
     fda:	0000                	unimp
     fdc:	00000877          	0x877
     fe0:	142d                	addi	s0,s0,-21
     fe2:	0009                	c.nop	2
            resultkon[0] = 0xBABABABA;
     fe4:	ed00                	fsw	fs0,24(a0)
     fe6:	001e                	c.slli	zero,0x7
     fe8:	0000                	unimp
     fea:	0010                	0x10
     fec:	2e00                	fld	fs0,24(a2)
 	    *var = resultkon[0];
     fee:	5a01                	li	s4,-32
     ff0:	7ca47803          	0x7ca47803
     ff4:	012e                	slli	sp,sp,0xb
     ff6:	2e30015b          	0x2e30015b
}
     ffa:	5c01                	li	s8,-32
     ffc:	0802                	c.slli64	a6
     ffe:	00d0                	addi	a2,sp,68
    1000:	942d                	srai	s0,s0,0x2b
    1002:	0009                	c.nop	2
    1004:	ed00                	fsw	fs0,24(a0)
    1006:	001e                	c.slli	zero,0x7
    1008:	2000                	fld	fs0,0(s0)
            resultkon[0] = 0xDEDEDEDE;
    100a:	0010                	0x10
	    *var = resultkon[0];
    100c:	2e00                	fld	fs0,24(a2)
    100e:	5a01                	li	s4,-32
    1010:	7df87803          	0x7df87803
    1014:	012e                	slli	sp,sp,0xb
    1016:	2e30015b          	0x2e30015b
    for(i = 0; i < 32; ++i){
    101a:	5c01                	li	s8,-32
    101c:	0802                	c.slli64	a6
    101e:	00d8                	addi	a4,sp,68
    1020:	5c2d                	li	s8,-21
    1022:	000a                	c.slli	zero,0x2
    1024:	d300                	sw	s0,32(a4)
    1026:	0010                	0x10
    1028:	4700                	lw	s0,8(a4)
    102a:	0010                	0x10
    102c:	2e00                	fld	fs0,24(a2)
    102e:	5a01                	li	s4,-32
    1030:	7202                	flw	ft4,32(sp)
    1032:	2e00                	fld	fs0,24(a2)
    1034:	5b01                	li	s6,-32
    1036:	7c987803          	0x7c987803
    103a:	012e                	slli	sp,sp,0xb
    103c:	025c                	addi	a5,sp,260
    103e:	0085                	addi	ra,ra,1
    1040:	012e                	slli	sp,sp,0xb
    1042:	025d                	addi	tp,tp,23
    1044:	2d000087          	0x2d000087
    1048:	0a76                	slli	s4,s4,0x1d
    104a:	0000                	unimp
    104c:	000010d3          	fadd.s	ft1,ft0,ft0,rtz
    1050:	106e                	c.slli	zero,0x3b
    1052:	0000                	unimp
    1054:	012e                	slli	sp,sp,0xb
    1056:	025a                	slli	tp,tp,0x16
    1058:	0072                	c.slli	zero,0x1c
    105a:	012e                	slli	sp,sp,0xb
    105c:	9878035b          	0x9878035b
    1060:	2e7c                	fld	fa5,216(a2)
    1062:	5c01                	li	s8,-32
    1064:	8502                	jr	a0
    1066:	2e00                	fld	fs0,24(a2)
    1068:	5d01                	li	s10,-32
    106a:	8602                	jr	a2
    106c:	0000                	unimp
    106e:	962d                	srai	a2,a2,0x2b
    1070:	000a                	c.slli	zero,0x2
    1072:	fc00                	fsw	fs0,56(s0)
    1074:	0018                	0x18
    1076:	9300                	0x9300
    1078:	0010                	0x10
    107a:	2e00                	fld	fs0,24(a2)
    107c:	5b01                	li	s6,-32
    107e:	8202                	jr	tp
    1080:	2e00                	fld	fs0,24(a2)
    1082:	5c01                	li	s8,-32
    1084:	8902                	jr	s2
    1086:	2e00                	fld	fs0,24(a2)
    1088:	5d01                	li	s10,-32
    108a:	8202                	jr	tp
    108c:	2e00                	fld	fs0,24(a2)
    108e:	5e01                	li	t3,-32
    1090:	3001                	jal	890 <ext_euclid+0x1d6>
    1092:	2f00                	fld	fs0,24(a4)
    1094:	0aaa                	slli	s5,s5,0xa
    1096:	0000                	unimp
    1098:	1528                	addi	a0,sp,680
    109a:	0000                	unimp
    109c:	012e                	slli	sp,sp,0xb
    109e:	025c                	addi	a5,sp,260
    10a0:	0072                	c.slli	zero,0x1c
    10a2:	012e                	slli	sp,sp,0xb
    10a4:	025d                	addi	tp,tp,23
    10a6:	0085                	addi	ra,ra,1
    10a8:	012e                	slli	sp,sp,0xb
    10aa:	025e                	slli	tp,tp,0x17
    10ac:	0086                	slli	ra,ra,0x1
    10ae:	0000                	unimp
    10b0:	6909                	lui	s2,0x2
    10b2:	0000                	unimp
    10b4:	c000                	sw	s0,0(s0)
    10b6:	0010                	0x10
    10b8:	0a00                	addi	s0,sp,272
    10ba:	0075                	c.nop	29
    10bc:	0000                	unimp
    10be:	0036                	c.slli	zero,0xd
    10c0:	6909                	lui	s2,0x2
    10c2:	0000                	unimp
    10c4:	d300                	sw	s0,32(a4)
    10c6:	0010                	0x10
    10c8:	3600                	fld	fs0,40(a2)
    10ca:	0075                	c.nop	29
    10cc:	0000                	unimp
    10ce:	00000fd7          	0xfd7
    10d2:	3100                	fld	fs0,32(a0)
    10d4:	03c0                	addi	s0,sp,452
    10d6:	0000                	unimp
    10d8:	7c01                	lui	s8,0xfffe0
    10da:	0601                	addi	a2,a2,0
    10dc:	00000ba7          	0xba7
    10e0:	06ba                	slli	a3,a3,0xe
    10e2:	0000                	unimp
    10e4:	0214                	addi	a3,sp,256
    10e6:	0000                	unimp
    10e8:	9c01                	0x9c01
    10ea:	000014a3          	sh	zero,9(zero) # 9 <__DYNAMIC+0x9>
    10ee:	0006e933          	or	s2,a3,zero
    10f2:	0100                	addi	s0,sp,128
    10f4:	017c                	addi	a5,sp,140
    10f6:	a716                	fsd	ft5,392(sp)
    10f8:	bd00000b          	0xbd00000b
    10fc:	0008                	0x8
    10fe:	3300                	fld	fs0,32(a4)
    1100:	01f9                	addi	gp,gp,30
    1102:	0000                	unimp
    1104:	7c01                	lui	s8,0xfffe0
    1106:	2201                	jal	1206 <_bss_start+0x52>
    1108:	00000ba7          	0xba7
    110c:	0902                	c.slli64	s2
    110e:	0000                	unimp
    1110:	00001233          	sll	tp,zero,zero
    1114:	0100                	addi	s0,sp,128
    1116:	017c                	addi	a5,sp,140
    1118:	692d                	lui	s2,0xb
    111a:	0000                	unimp
    111c:	4700                	lw	s0,8(a4)
    111e:	0009                	c.nop	2
    1120:	3200                	fld	fs0,32(a2)
    1122:	6f6d                	lui	t5,0x1b
    1124:	0064                	addi	s1,sp,12
    1126:	7c01                	lui	s8,0xfffe0
    1128:	3701                	jal	1028 <__CTOR_END__+0x2>
    112a:	0069                	c.nop	26
    112c:	0000                	unimp
    112e:	0000098b          	0x98b
    1132:	fb28                	fsw	fa0,112(a4)
    1134:	0002                	c.slli64	zero
    1136:	0100                	addi	s0,sp,128
    1138:	017f                	0x17f
    113a:	a70a                	fsd	ft2,392(sp)
    113c:	c200000b          	0xc200000b
    1140:	0009                	c.nop	2
    1142:	2c00                	fld	fs0,24(s0)
    1144:	004e                	c.slli	zero,0x13
    1146:	8001                	c.srli64	s0
    1148:	0901                	addi	s2,s2,0
    114a:	0069                	c.nop	26
    114c:	0000                	unimp
    114e:	09da                	slli	s3,s3,0x16
    1150:	0000                	unimp
    1152:	692c                	flw	fa1,80(a0)
    1154:	0100                	addi	s0,sp,128
    1156:	0180                	addi	s0,sp,192
    1158:	690c                	flw	fa1,16(a0)
    115a:	0000                	unimp
    115c:	0800                	addi	s0,sp,16
    115e:	000a                	c.slli	zero,0x2
    1160:	2c00                	fld	fs0,24(s0)
    1162:	006a                	c.slli	zero,0x1a
    1164:	8001                	c.srli64	s0
    1166:	0f01                	addi	t5,t5,0
    1168:	0069                	c.nop	26
    116a:	0000                	unimp
    116c:	00000b0f          	0xb0f
    1170:	7528                	flw	fa0,104(a0)
    1172:	0005                	c.nop	1
    1174:	0100                	addi	s0,sp,128
    1176:	0181                	addi	gp,gp,0
    1178:	a309                	j	167a <result+0x16>
    117a:	0014                	0x14
    117c:	2d00                	fld	fs0,24(a0)
    117e:	2800000b          	0x2800000b
    1182:	000005f3          	0x5f3
    1186:	8201                	c.srli64	a2
    1188:	0901                	addi	s2,s2,0
    118a:	14b6                	slli	s1,s1,0x2d
    118c:	0000                	unimp
    118e:	0b4d                	addi	s6,s6,19
    1190:	0000                	unimp
    1192:	722c                	flw	fa1,96(a2)
    1194:	0069                	c.nop	26
    1196:	8301                	c.srli64	a4
    1198:	0901                	addi	s2,s2,0
    119a:	14c9                	addi	s1,s1,-14
    119c:	0000                	unimp
    119e:	0b6d                	addi	s6,s6,27
    11a0:	0000                	unimp
    11a2:	9228                	0x9228
    11a4:	0004                	0x4
    11a6:	0100                	addi	s0,sp,128
    11a8:	0185                	addi	gp,gp,1
    11aa:	dc09                	beqz	s0,10c4 <_endtext+0x94>
    11ac:	0014                	0x14
    11ae:	8d00                	0x8d00
    11b0:	2c00000b          	0x2c00000b
    11b4:	6974                	flw	fa3,84(a0)
    11b6:	0100                	addi	s0,sp,128
    11b8:	0186                	slli	gp,gp,0x1
    11ba:	ef09                	bnez	a4,11d4 <_bss_start+0x20>
    11bc:	0014                	0x14
    11be:	da00                	sw	s0,48(a2)
    11c0:	2800000b          	0x2800000b
    11c4:	04aa                	slli	s1,s1,0xa
    11c6:	0000                	unimp
    11c8:	8701                	c.srai64	a4
    11ca:	0901                	addi	s2,s2,0
    11cc:	1502                	slli	a0,a0,0x20
    11ce:	0000                	unimp
    11d0:	0bfa                	slli	s7,s7,0x1e
    11d2:	0000                	unimp
    11d4:	9128                	0x9128
    11d6:	0002                	c.slli64	zero
    11d8:	0100                	addi	s0,sp,128
    11da:	0188                	addi	a0,sp,192
    11dc:	1509                	addi	a0,a0,-30
    11de:	0015                	c.nop	5
    11e0:	3100                	fld	fs0,32(a0)
    11e2:	000c                	0xc
    11e4:	2c00                	fld	fs0,24(s0)
    11e6:	6572                	flw	fa0,28(sp)
    11e8:	89010073          	0x89010073
    11ec:	0a01                	addi	s4,s4,0
    11ee:	00000ba7          	0xba7
    11f2:	00000ca3          	sb	zero,25(zero) # 19 <__DYNAMIC+0x19>
    11f6:	c028                	sw	a0,64(s0)
    11f8:	0001                	nop
    11fa:	0100                	addi	s0,sp,128
    11fc:	018a                	slli	gp,gp,0x2
    11fe:	a70a                	fsd	ft2,392(sp)
    1200:	c100000b          	0xc100000b
    1204:	000c                	0xc
    1206:	2800                	fld	fs0,16(s0)
    1208:	01c5                	addi	gp,gp,17
    120a:	0000                	unimp
    120c:	8b01                	andi	a4,a4,0
    120e:	0a01                	addi	s4,s4,0
    1210:	00000ba7          	0xba7
    1214:	0cdf 0000 6328      	0x632800000cdf
    121a:	0004                	0x4
    121c:	0100                	addi	s0,sp,128
    121e:	018c                	addi	a1,sp,192
    1220:	6909                	lui	s2,0x2
    1222:	0000                	unimp
    1224:	fd00                	fsw	fs0,56(a0)
    1226:	000c                	0xc
    1228:	3500                	fld	fs0,40(a0)
    122a:	0075                	c.nop	29
    122c:	0000                	unimp
    122e:	00000d4b          	fnmsub.s	fs10,ft0,ft0,ft0,rne
    1232:	7535                	lui	a0,0xfffed
    1234:	0000                	unimp
    1236:	7900                	flw	fs0,48(a0)
    1238:	000d                	c.nop	3
    123a:	3500                	fld	fs0,40(a0)
    123c:	0075                	c.nop	29
    123e:	0000                	unimp
    1240:	00000da7          	0xda7
    1244:	7535                	lui	a0,0xfffed
    1246:	0000                	unimp
    1248:	d500                	sw	s0,40(a0)
    124a:	000d                	c.nop	3
    124c:	3500                	fld	fs0,40(a0)
    124e:	0075                	c.nop	29
    1250:	0000                	unimp
    1252:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
    1256:	7535                	lui	a0,0xfffed
    1258:	0000                	unimp
    125a:	3100                	fld	fs0,32(a0)
    125c:	000e                	c.slli	zero,0x3
    125e:	3500                	fld	fs0,40(a0)
    1260:	0075                	c.nop	29
    1262:	0000                	unimp
    1264:	0e5f 0000 2a2d      	0x2a2d00000e5f
    126a:	e0000007          	0xe0000007
    126e:	001d                	c.nop	7
    1270:	8900                	0x8900
    1272:	0012                	c.slli	zero,0x4
    1274:	2e00                	fld	fs0,24(a2)
    1276:	5a01                	li	s4,-32
    1278:	8302                	jr	t1
    127a:	2e00                	fld	fs0,24(a2)
    127c:	5b01                	li	s6,-32
    127e:	5a01f303          	0x5a01f303
    1282:	012e                	slli	sp,sp,0xb
    1284:	025c                	addi	a5,sp,260
    1286:	0079                	c.nop	30
    1288:	2d00                	fld	fs0,24(a0)
    128a:	0732                	slli	a4,a4,0xc
    128c:	0000                	unimp
    128e:	1de0                	addi	s0,sp,764
    1290:	0000                	unimp
    1292:	12a9                	addi	t0,t0,-22
    1294:	0000                	unimp
    1296:	012e                	slli	sp,sp,0xb
    1298:	025a                	slli	tp,tp,0x16
    129a:	0084                	addi	s1,sp,64
    129c:	012e                	slli	sp,sp,0xb
    129e:	008b025b          	0x8b025b
    12a2:	012e                	slli	sp,sp,0xb
    12a4:	025c                	addi	a5,sp,260
    12a6:	0079                	c.nop	30
    12a8:	2d00                	fld	fs0,24(a0)
    12aa:	0750                	addi	a2,sp,900
    12ac:	0000                	unimp
    12ae:	1cac                	addi	a1,sp,632
    12b0:	0000                	unimp
    12b2:	12c9                	addi	t0,t0,-14
    12b4:	0000                	unimp
    12b6:	012e                	slli	sp,sp,0xb
    12b8:	025a                	slli	tp,tp,0x16
    12ba:	012e0083          	lb	ra,18(t3)
    12be:	0082025b          	0x82025b
    12c2:	012e                	slli	sp,sp,0xb
    12c4:	025c                	addi	a5,sp,260
    12c6:	0079                	c.nop	30
    12c8:	2d00                	fld	fs0,24(a0)
    12ca:	0758                	addi	a4,sp,900
    12cc:	0000                	unimp
    12ce:	1cac                	addi	a1,sp,632
    12d0:	0000                	unimp
    12d2:	12e9                	addi	t0,t0,-6
    12d4:	0000                	unimp
    12d6:	012e                	slli	sp,sp,0xb
    12d8:	025a                	slli	tp,tp,0x16
    12da:	0084                	addi	s1,sp,64
    12dc:	012e                	slli	sp,sp,0xb
    12de:	0082025b          	0x82025b
    12e2:	012e                	slli	sp,sp,0xb
    12e4:	025c                	addi	a5,sp,260
    12e6:	0079                	c.nop	30
    12e8:	2d00                	fld	fs0,24(a0)
    12ea:	0764                	addi	s1,sp,908
    12ec:	0000                	unimp
    12ee:	1528                	addi	a0,sp,680
    12f0:	0000                	unimp
    12f2:	1315                	addi	t1,t1,-27
    12f4:	0000                	unimp
    12f6:	012e                	slli	sp,sp,0xb
    12f8:	025a                	slli	tp,tp,0x16
    12fa:	012e0083          	lb	ra,18(t3)
    12fe:	0079025b          	0x79025b
    1302:	012e                	slli	sp,sp,0xb
    1304:	025c                	addi	a5,sp,260
    1306:	0084                	addi	s1,sp,64
    1308:	012e                	slli	sp,sp,0xb
    130a:	025d                	addi	tp,tp,23
    130c:	0079                	c.nop	30
    130e:	012e                	slli	sp,sp,0xb
    1310:	025e                	slli	tp,tp,0x17
    1312:	0082                	c.slli64	ra
    1314:	2d00                	fld	fs0,24(a0)
    1316:	0780                	addi	s0,sp,960
    1318:	0000                	unimp
    131a:	1cac                	addi	a1,sp,632
    131c:	0000                	unimp
    131e:	1335                	addi	t1,t1,-19
    1320:	0000                	unimp
    1322:	012e                	slli	sp,sp,0xb
    1324:	025a                	slli	tp,tp,0x16
    1326:	0072                	c.slli	zero,0x1c
    1328:	012e                	slli	sp,sp,0xb
    132a:	0082025b          	0x82025b
    132e:	012e                	slli	sp,sp,0xb
    1330:	025c                	addi	a5,sp,260
    1332:	0079                	c.nop	30
    1334:	2d00                	fld	fs0,24(a0)
    1336:	078c                	addi	a1,sp,960
    1338:	0000                	unimp
    133a:	1528                	addi	a0,sp,680
    133c:	0000                	unimp
    133e:	1361                	addi	t1,t1,-8
    1340:	0000                	unimp
    1342:	012e                	slli	sp,sp,0xb
    1344:	025a                	slli	tp,tp,0x16
    1346:	0072                	c.slli	zero,0x1c
    1348:	012e                	slli	sp,sp,0xb
    134a:	0079025b          	0x79025b
    134e:	012e                	slli	sp,sp,0xb
    1350:	025c                	addi	a5,sp,260
    1352:	0084                	addi	s1,sp,64
    1354:	012e                	slli	sp,sp,0xb
    1356:	025d                	addi	tp,tp,23
    1358:	0079                	c.nop	30
    135a:	012e                	slli	sp,sp,0xb
    135c:	025e                	slli	tp,tp,0x17
    135e:	0082                	c.slli64	ra
    1360:	2d00                	fld	fs0,24(a0)
    1362:	0794                	addi	a3,sp,960
    1364:	0000                	unimp
    1366:	1de0                	addi	s0,sp,764
    1368:	0000                	unimp
    136a:	0000137b          	0x137b
    136e:	012e                	slli	sp,sp,0xb
    1370:	025a                	slli	tp,tp,0x16
    1372:	0089                	addi	ra,ra,2
    1374:	012e                	slli	sp,sp,0xb
    1376:	025c                	addi	a5,sp,260
    1378:	0079                	c.nop	30
    137a:	2d00                	fld	fs0,24(a0)
    137c:	079c                	addi	a5,sp,960
    137e:	0000                	unimp
    1380:	1cac                	addi	a1,sp,632
    1382:	0000                	unimp
    1384:	0000139b          	0x139b
    1388:	012e                	slli	sp,sp,0xb
    138a:	025a                	slli	tp,tp,0x16
    138c:	0089                	addi	ra,ra,2
    138e:	012e                	slli	sp,sp,0xb
    1390:	0082025b          	0x82025b
    1394:	012e                	slli	sp,sp,0xb
    1396:	025c                	addi	a5,sp,260
    1398:	0079                	c.nop	30
    139a:	2d00                	fld	fs0,24(a0)
    139c:	07aa                	slli	a5,a5,0xa
    139e:	0000                	unimp
    13a0:	1a92                	slli	s5,s5,0x24
    13a2:	0000                	unimp
    13a4:	13cc                	addi	a1,sp,484
    13a6:	0000                	unimp
    13a8:	012e                	slli	sp,sp,0xb
    13aa:	025a                	slli	tp,tp,0x16
    13ac:	0089                	addi	ra,ra,2
    13ae:	012e                	slli	sp,sp,0xb
    13b0:	0079025b          	0x79025b
    13b4:	012e                	slli	sp,sp,0xb
    13b6:	025c                	addi	a5,sp,260
    13b8:	0086                	slli	ra,ra,0x1
    13ba:	012e                	slli	sp,sp,0xb
    13bc:	025d                	addi	tp,tp,23
    13be:	0079                	c.nop	30
    13c0:	012e                	slli	sp,sp,0xb
    13c2:	025e                	slli	tp,tp,0x17
    13c4:	0082                	c.slli64	ra
    13c6:	012e                	slli	sp,sp,0xb
    13c8:	015f 0030 b22d      	0xb22d0030015f
    13ce:	e0000007          	0xe0000007
    13d2:	001d                	c.nop	7
    13d4:	e600                	fsw	fs0,8(a2)
    13d6:	2e000013          	li	zero,736
    13da:	5a01                	li	s4,-32
    13dc:	7202                	flw	ft4,32(sp)
    13de:	2e00                	fld	fs0,24(a2)
    13e0:	5c01                	li	s8,-32
    13e2:	7902                	flw	fs2,32(sp)
    13e4:	0000                	unimp
    13e6:	ba2d                	j	d20 <reset_handler+0xa>
    13e8:	ac000007          	0xac000007
    13ec:	001c                	0x1c
    13ee:	0600                	addi	s0,sp,768
    13f0:	0014                	0x14
    13f2:	2e00                	fld	fs0,24(a2)
    13f4:	5a01                	li	s4,-32
    13f6:	7202                	flw	ft4,32(sp)
    13f8:	2e00                	fld	fs0,24(a2)
    13fa:	5b01                	li	s6,-32
    13fc:	8202                	jr	tp
    13fe:	2e00                	fld	fs0,24(a2)
    1400:	5c01                	li	s8,-32
    1402:	7902                	flw	fs2,32(sp)
    1404:	0000                	unimp
    1406:	ca2d                	beqz	a2,1478 <product2+0x6c>
    1408:	ac000007          	0xac000007
    140c:	001c                	0x1c
    140e:	2600                	fld	fs0,8(a2)
    1410:	0014                	0x14
    1412:	2e00                	fld	fs0,24(a2)
    1414:	5a01                	li	s4,-32
    1416:	8a02                	jr	s4
    1418:	2e00                	fld	fs0,24(a2)
    141a:	5b01                	li	s6,-32
    141c:	8202                	jr	tp
    141e:	2e00                	fld	fs0,24(a2)
    1420:	5c01                	li	s8,-32
    1422:	7902                	flw	fs2,32(sp)
    1424:	0000                	unimp
    1426:	d22d                	beqz	a2,1388 <_bss_start+0x1d4>
    1428:	e0000007          	0xe0000007
    142c:	001d                	c.nop	7
    142e:	4600                	lw	s0,8(a2)
    1430:	0014                	0x14
    1432:	2e00                	fld	fs0,24(a2)
    1434:	5a01                	li	s4,-32
    1436:	8302                	jr	t1
    1438:	2e00                	fld	fs0,24(a2)
    143a:	5b01                	li	s6,-32
    143c:	8402                	jr	s0
    143e:	2e00                	fld	fs0,24(a2)
    1440:	5c01                	li	s8,-32
    1442:	7902                	flw	fs2,32(sp)
    1444:	0000                	unimp
    1446:	da2d                	beqz	a2,13b8 <_bss_start+0x204>
    1448:	e0000007          	0xe0000007
    144c:	001d                	c.nop	7
    144e:	6600                	flw	fs0,8(a2)
    1450:	0014                	0x14
    1452:	2e00                	fld	fs0,24(a2)
    1454:	5a01                	li	s4,-32
    1456:	8402                	jr	s0
    1458:	2e00                	fld	fs0,24(a2)
    145a:	5b01                	li	s6,-32
    145c:	8802                	jr	a6
    145e:	2e00                	fld	fs0,24(a2)
    1460:	5c01                	li	s8,-32
    1462:	7902                	flw	fs2,32(sp)
    1464:	0000                	unimp
    1466:	e22d                	bnez	a2,14c8 <product2+0xbc>
    1468:	e0000007          	0xe0000007
    146c:	001d                	c.nop	7
    146e:	8600                	0x8600
    1470:	0014                	0x14
    1472:	2e00                	fld	fs0,24(a2)
    1474:	5a01                	li	s4,-32
    1476:	8b02                	jr	s6
    1478:	2e00                	fld	fs0,24(a2)
    147a:	5b01                	li	s6,-32
    147c:	8602                	jr	a2
    147e:	2e00                	fld	fs0,24(a2)
    1480:	5c01                	li	s8,-32
    1482:	7902                	flw	fs2,32(sp)
    1484:	0000                	unimp
    1486:	0007ea2f          	0x7ea2f
    148a:	e000                	fsw	fs0,0(s0)
    148c:	001d                	c.nop	7
    148e:	2e00                	fld	fs0,24(a2)
    1490:	5a01                	li	s4,-32
    1492:	8602                	jr	a2
    1494:	2e00                	fld	fs0,24(a2)
    1496:	5b01                	li	s6,-32
    1498:	8a02                	jr	s4
    149a:	2e00                	fld	fs0,24(a2)
    149c:	5c01                	li	s8,-32
    149e:	7902                	flw	fs2,32(sp)
    14a0:	0000                	unimp
    14a2:	0900                	addi	s0,sp,144
    14a4:	0069                	c.nop	26
    14a6:	0000                	unimp
    14a8:	14b6                	slli	s1,s1,0x2d
    14aa:	0000                	unimp
    14ac:	7536                	flw	fa0,108(sp)
    14ae:	0000                	unimp
    14b0:	2900                	fld	fs0,16(a0)
    14b2:	0012                	c.slli	zero,0x4
    14b4:	0000                	unimp
    14b6:	6909                	lui	s2,0x2
    14b8:	0000                	unimp
    14ba:	c900                	sw	s0,16(a0)
    14bc:	0014                	0x14
    14be:	3600                	fld	fs0,40(a2)
    14c0:	0075                	c.nop	29
    14c2:	0000                	unimp
    14c4:	1232                	slli	tp,tp,0x2c
    14c6:	0000                	unimp
    14c8:	0900                	addi	s0,sp,144
    14ca:	0069                	c.nop	26
    14cc:	0000                	unimp
    14ce:	14dc                	addi	a5,sp,612
    14d0:	0000                	unimp
    14d2:	7536                	flw	fa0,108(sp)
    14d4:	0000                	unimp
    14d6:	3b00                	fld	fs0,48(a4)
    14d8:	0012                	c.slli	zero,0x4
    14da:	0000                	unimp
    14dc:	6909                	lui	s2,0x2
    14de:	0000                	unimp
    14e0:	ef00                	fsw	fs0,24(a4)
    14e2:	0014                	0x14
    14e4:	3600                	fld	fs0,40(a2)
    14e6:	0075                	c.nop	29
    14e8:	0000                	unimp
    14ea:	1244                	addi	s1,sp,292
    14ec:	0000                	unimp
    14ee:	0900                	addi	s0,sp,144
    14f0:	0069                	c.nop	26
    14f2:	0000                	unimp
    14f4:	1502                	slli	a0,a0,0x20
    14f6:	0000                	unimp
    14f8:	7536                	flw	fa0,108(sp)
    14fa:	0000                	unimp
    14fc:	4d00                	lw	s0,24(a0)
    14fe:	0012                	c.slli	zero,0x4
    1500:	0000                	unimp
    1502:	6909                	lui	s2,0x2
    1504:	0000                	unimp
    1506:	1500                	addi	s0,sp,672
    1508:	0015                	c.nop	5
    150a:	3600                	fld	fs0,40(a2)
    150c:	0075                	c.nop	29
    150e:	0000                	unimp
    1510:	1256                	slli	tp,tp,0x35
    1512:	0000                	unimp
    1514:	0900                	addi	s0,sp,144
    1516:	0069                	c.nop	26
    1518:	0000                	unimp
    151a:	1528                	addi	a0,sp,680
    151c:	0000                	unimp
    151e:	7536                	flw	fa0,108(sp)
    1520:	0000                	unimp
    1522:	5f00                	lw	s0,56(a4)
    1524:	0012                	c.slli	zero,0x4
    1526:	0000                	unimp
    1528:	0001f137          	lui	sp,0x1f
    152c:	0100                	addi	s0,sp,128
    152e:	0ba706d3          	fsub.d	fa3,fa4,fs10,rne
    1532:	0000                	unimp
    1534:	03ec                	addi	a1,sp,460
    1536:	0000                	unimp
    1538:	02ce                	slli	t0,t0,0x13
    153a:	0000                	unimp
    153c:	9c01                	0x9c01
    153e:	18b0                	addi	a2,sp,120
    1540:	0000                	unimp
    1542:	6e38                	flw	fa4,88(a2)
    1544:	6d75                	lui	s10,0x1d
    1546:	0100                	addi	s0,sp,128
    1548:	0ba713d3          	fsub.d	ft7,fa4,fs10,rtz
    154c:	0000                	unimp
    154e:	0e8d                	addi	t4,t4,3
    1550:	0000                	unimp
    1552:	6d39                	lui	s10,0xe
    1554:	0001                	nop
    1556:	0100                	addi	s0,sp,128
    1558:	00691cd3          	fadd.s	fs9,fs2,ft6,rtz
    155c:	0000                	unimp
    155e:	0eda                	slli	t4,t4,0x16
    1560:	0000                	unimp
    1562:	cb39                	beqz	a4,15b8 <product2+0x1ac>
    1564:	0006                	c.slli	zero,0x1
    1566:	0100                	addi	s0,sp,128
    1568:	0ba728d3          	fsub.d	fa7,fa4,fs10,rdn
    156c:	0000                	unimp
    156e:	0f29                	addi	t5,t5,10
    1570:	0000                	unimp
    1572:	ef39                	bnez	a4,15d0 <product2+0x1c4>
    1574:	0006                	c.slli	zero,0x1
    1576:	0100                	addi	s0,sp,128
    1578:	006933d3          	fadd.s	ft7,fs2,ft6,rup
    157c:	0000                	unimp
    157e:	0f84                	addi	s1,sp,976
    1580:	0000                	unimp
    1582:	6d38                	flw	fa4,88(a0)
    1584:	0100646f          	jal	s0,7594 <_stack_len+0x3594>
    1588:	00693fd3          	fadd.s	ft11,fs2,ft6,rup
    158c:	0000                	unimp
    158e:	0fd1                	addi	t6,t6,20
    1590:	0000                	unimp
    1592:	753a                	flw	fa0,172(sp)
    1594:	0100                	addi	s0,sp,128
    1596:	09d6                	slli	s3,s3,0x15
    1598:	0069                	c.nop	26
    159a:	0000                	unimp
    159c:	1008                	addi	a0,sp,32
    159e:	0000                	unimp
    15a0:	643a                	flw	fs0,140(sp)
    15a2:	0100                	addi	s0,sp,128
    15a4:	0bd6                	slli	s7,s7,0x15
    15a6:	0069                	c.nop	26
    15a8:	0000                	unimp
    15aa:	1031                	c.nop	-20
    15ac:	0000                	unimp
    15ae:	0032643b          	0x32643b
    15b2:	d601                	beqz	a2,14ba <product2+0xae>
    15b4:	690d                	lui	s2,0x3
    15b6:	0000                	unimp
    15b8:	3a00                	fld	fs0,48(a2)
    15ba:	0069                	c.nop	26
    15bc:	d601                	beqz	a2,14c4 <product2+0xb8>
    15be:	6910                	flw	fa2,16(a0)
    15c0:	0000                	unimp
    15c2:	4f00                	lw	s0,24(a4)
    15c4:	0010                	0x10
    15c6:	3b00                	fld	fs0,48(a4)
    15c8:	5f62                	lw	t5,56(sp)
    15ca:	004e                	c.slli	zero,0x13
    15cc:	d601                	beqz	a2,14d4 <product2+0xc8>
    15ce:	6912                	flw	fs2,4(sp)
    15d0:	0000                	unimp
    15d2:	3a00                	fld	fs0,48(a2)
    15d4:	5f72                	lw	t5,60(sp)
    15d6:	0064                	addi	s1,sp,12
    15d8:	d601                	beqz	a2,14e0 <product2+0xd4>
    15da:	6916                	flw	fs2,68(sp)
    15dc:	0000                	unimp
    15de:	1500                	addi	s0,sp,672
    15e0:	0011                	c.nop	4
    15e2:	3c00                	fld	fs0,56(s0)
    15e4:	000002eb          	0x2eb
    15e8:	d701                	beqz	a4,14f0 <product2+0xe4>
    15ea:	a70a                	fsd	ft2,392(sp)
    15ec:	3300000b          	0x3300000b
    15f0:	0011                	c.nop	4
    15f2:	3a00                	fld	fs0,48(a2)
    15f4:	0076                	c.slli	zero,0x1d
    15f6:	d901                	beqz	a0,1506 <product2+0xfa>
    15f8:	b009                	j	dfa <memcpy+0x72>
    15fa:	0018                	0x18
    15fc:	4b00                	lw	s0,16(a4)
    15fe:	0011                	c.nop	4
    1600:	3a00                	fld	fs0,48(a2)
    1602:	0071                	c.nop	28
    1604:	da01                	beqz	a2,1514 <product2+0x108>
    1606:	c309                	beqz	a4,1608 <product2+0x1fc>
    1608:	0018                	0x18
    160a:	6b00                	flw	fs0,16(a4)
    160c:	0011                	c.nop	4
    160e:	3c00                	fld	fs0,56(s0)
    1610:	01e9                	addi	gp,gp,26
    1612:	0000                	unimp
    1614:	db01                	beqz	a4,1524 <product2+0x118>
    1616:	a70a                	fsd	ft2,392(sp)
    1618:	a100000b          	0xa100000b
    161c:	0011                	c.nop	4
    161e:	3c00                	fld	fs0,56(s0)
    1620:	028d                	addi	t0,t0,3
    1622:	0000                	unimp
    1624:	dc01                	beqz	s0,153c <product2+0x130>
    1626:	d609                	beqz	a2,1530 <product2+0x124>
    1628:	0018                	0x18
    162a:	ce00                	sw	s0,24(a2)
    162c:	0011                	c.nop	4
    162e:	3c00                	fld	fs0,56(s0)
    1630:	0000028b          	0x28b
    1634:	dd01                	beqz	a0,154c <product2+0x140>
    1636:	e909                	bnez	a0,1648 <product2+0x23c>
    1638:	0018                	0x18
    163a:	2700                	fld	fs0,8(a4)
    163c:	0012                	c.slli	zero,0x4
    163e:	3500                	fld	fs0,40(a0)
    1640:	0075                	c.nop	29
    1642:	0000                	unimp
    1644:	00001253          	fadd.s	ft4,ft0,ft0,rtz
    1648:	7535                	lui	a0,0xfffed
    164a:	0000                	unimp
    164c:	8100                	0x8100
    164e:	0012                	c.slli	zero,0x4
    1650:	3500                	fld	fs0,40(a0)
    1652:	0075                	c.nop	29
    1654:	0000                	unimp
    1656:	000012af          	0x12af
    165a:	7535                	lui	a0,0xfffed
    165c:	0000                	unimp
    165e:	dd00                	sw	s0,56(a0)
    1660:	0012                	c.slli	zero,0x4
    1662:	2d00                	fld	fs0,24(a0)
    1664:	0456                	slli	s0,s0,0x15
    1666:	0000                	unimp
    1668:	1de0                	addi	s0,sp,764
    166a:	0000                	unimp
    166c:	00001683          	lh	a3,0(zero) # 0 <__DYNAMIC>
    1670:	012e                	slli	sp,sp,0xb
    1672:	025a                	slli	tp,tp,0x16
    1674:	012e0083          	lb	ra,18(t3)
    1678:	008b025b          	0x8b025b
    167c:	012e                	slli	sp,sp,0xb
    167e:	025c                	addi	a5,sp,260
    1680:	6908                	flw	fa0,16(a0)
    1682:	2d00                	fld	fs0,24(a0)
    1684:	0468                	addi	a0,sp,524
    1686:	0000                	unimp
    1688:	1cac                	addi	a1,sp,632
    168a:	0000                	unimp
    168c:	000016a3          	sh	zero,13(zero) # d <__DYNAMIC+0xd>
    1690:	012e                	slli	sp,sp,0xb
    1692:	025a                	slli	tp,tp,0x16
    1694:	012e0083          	lb	ra,18(t3)
    1698:	0079025b          	0x79025b
    169c:	012e                	slli	sp,sp,0xb
    169e:	025c                	addi	a5,sp,260
    16a0:	6908                	flw	fa0,16(a0)
    16a2:	2d00                	fld	fs0,24(a0)
    16a4:	0482                	c.slli64	s1
    16a6:	0000                	unimp
    16a8:	1de0                	addi	s0,sp,764
    16aa:	0000                	unimp
    16ac:	000016c3          	fmadd.s	fa3,ft0,ft0,ft0,rtz
    16b0:	012e                	slli	sp,sp,0xb
    16b2:	025a                	slli	tp,tp,0x16
    16b4:	012e0083          	lb	ra,18(t3)
    16b8:	008b025b          	0x8b025b
    16bc:	012e                	slli	sp,sp,0xb
    16be:	025c                	addi	a5,sp,260
    16c0:	0082                	c.slli64	ra
    16c2:	2d00                	fld	fs0,24(a0)
    16c4:	048a                	slli	s1,s1,0x2
    16c6:	0000                	unimp
    16c8:	1cac                	addi	a1,sp,632
    16ca:	0000                	unimp
    16cc:	000016e3          	bnez	zero,1ed8 <random_keys+0x48c>
    16d0:	012e                	slli	sp,sp,0xb
    16d2:	025a                	slli	tp,tp,0x16
    16d4:	012e0083          	lb	ra,18(t3)
    16d8:	0079025b          	0x79025b
    16dc:	012e                	slli	sp,sp,0xb
    16de:	025c                	addi	a5,sp,260
    16e0:	0082                	c.slli64	ra
    16e2:	2d00                	fld	fs0,24(a0)
    16e4:	0492                	slli	s1,s1,0x4
    16e6:	0000                	unimp
    16e8:	1de0                	addi	s0,sp,764
    16ea:	0000                	unimp
    16ec:	00001703          	lh	a4,0(zero) # 0 <__DYNAMIC>
    16f0:	012e                	slli	sp,sp,0xb
    16f2:	025a                	slli	tp,tp,0x16
    16f4:	0072                	c.slli	zero,0x1c
    16f6:	012e                	slli	sp,sp,0xb
    16f8:	0088025b          	0x88025b
    16fc:	012e                	slli	sp,sp,0xb
    16fe:	025c                	addi	a5,sp,260
    1700:	0086                	slli	ra,ra,0x1
    1702:	2d00                	fld	fs0,24(a0)
    1704:	049a                	slli	s1,s1,0x6
    1706:	0000                	unimp
    1708:	1cac                	addi	a1,sp,632
    170a:	0000                	unimp
    170c:	00001723          	sh	zero,14(zero) # e <__DYNAMIC+0xe>
    1710:	012e                	slli	sp,sp,0xb
    1712:	025a                	slli	tp,tp,0x16
    1714:	0072                	c.slli	zero,0x1c
    1716:	012e                	slli	sp,sp,0xb
    1718:	0079025b          	0x79025b
    171c:	012e                	slli	sp,sp,0xb
    171e:	025c                	addi	a5,sp,260
    1720:	0086                	slli	ra,ra,0x1
    1722:	2d00                	fld	fs0,24(a0)
    1724:	051e                	slli	a0,a0,0x7
    1726:	0000                	unimp
    1728:	1cac                	addi	a1,sp,632
    172a:	0000                	unimp
    172c:	00001743          	fmadd.s	fa4,ft0,ft0,ft0,rtz
    1730:	012e                	slli	sp,sp,0xb
    1732:	025a                	slli	tp,tp,0x16
    1734:	0085                	addi	ra,ra,1
    1736:	012e                	slli	sp,sp,0xb
    1738:	0079025b          	0x79025b
    173c:	012e                	slli	sp,sp,0xb
    173e:	025c                	addi	a5,sp,260
    1740:	6908                	flw	fa0,16(a0)
    1742:	2d00                	fld	fs0,24(a0)
    1744:	053c                	addi	a5,sp,648
    1746:	0000                	unimp
    1748:	1a92                	slli	s5,s5,0x24
    174a:	0000                	unimp
    174c:	1774                	addi	a3,sp,940
    174e:	0000                	unimp
    1750:	012e                	slli	sp,sp,0xb
    1752:	025a                	slli	tp,tp,0x16
    1754:	0072                	c.slli	zero,0x1c
    1756:	012e                	slli	sp,sp,0xb
    1758:	0086025b          	0x86025b
    175c:	012e                	slli	sp,sp,0xb
    175e:	025c                	addi	a5,sp,260
    1760:	0085                	addi	ra,ra,1
    1762:	012e                	slli	sp,sp,0xb
    1764:	025d                	addi	tp,tp,23
    1766:	0086                	slli	ra,ra,0x1
    1768:	012e                	slli	sp,sp,0xb
    176a:	025e                	slli	tp,tp,0x17
    176c:	0079                	c.nop	30
    176e:	012e                	slli	sp,sp,0xb
    1770:	015f 0030 4c2d      	0x4c2d0030015f
    1776:	0005                	c.nop	1
    1778:	ac00                	fsd	fs0,24(s0)
    177a:	001c                	0x1c
    177c:	9600                	0x9600
    177e:	2e000017          	auipc	zero,0x2e000
    1782:	5a01                	li	s4,-32
    1784:	7804                	flw	fs1,48(s0)
    1786:	7fbc                	flw	fa5,120(a5)
    1788:	2e06                	fld	ft8,64(sp)
    178a:	5b01                	li	s6,-32
    178c:	7902                	flw	fs2,32(sp)
    178e:	2e00                	fld	fs0,24(a2)
    1790:	5c01                	li	s8,-32
    1792:	0802                	c.slli64	a6
    1794:	0069                	c.nop	26
    1796:	762d                	lui	a2,0xfffeb
    1798:	0005                	c.nop	1
    179a:	ac00                	fsd	fs0,24(s0)
    179c:	001c                	0x1c
    179e:	b600                	fsd	fs0,40(a2)
    17a0:	2e000017          	auipc	zero,0x2e000
    17a4:	5a01                	li	s4,-32
    17a6:	8302                	jr	t1
    17a8:	2e00                	fld	fs0,24(a2)
    17aa:	5b01                	li	s6,-32
    17ac:	7902                	flw	fs2,32(sp)
    17ae:	2e00                	fld	fs0,24(a2)
    17b0:	5c01                	li	s8,-32
    17b2:	0802                	c.slli64	a6
    17b4:	0069                	c.nop	26
    17b6:	902d                	srli	s0,s0,0x2b
    17b8:	0005                	c.nop	1
    17ba:	4a00                	lw	s0,16(a2)
    17bc:	001d                	c.nop	7
    17be:	d600                	sw	s0,40(a2)
    17c0:	2e000017          	auipc	zero,0x2e000
    17c4:	5a01                	li	s4,-32
    17c6:	8402                	jr	s0
    17c8:	2e00                	fld	fs0,24(a2)
    17ca:	5b01                	li	s6,-32
    17cc:	8502                	jr	a0
    17ce:	2e00                	fld	fs0,24(a2)
    17d0:	5c01                	li	s8,-32
    17d2:	0802                	c.slli64	a6
    17d4:	0069                	c.nop	26
    17d6:	a82d                	j	1810 <result+0x1ac>
    17d8:	0005                	c.nop	1
    17da:	ac00                	fsd	fs0,24(s0)
    17dc:	001c                	0x1c
    17de:	f600                	fsw	fs0,40(a2)
    17e0:	2e000017          	auipc	zero,0x2e000
    17e4:	5a01                	li	s4,-32
    17e6:	8402                	jr	s0
    17e8:	2e00                	fld	fs0,24(a2)
    17ea:	5b01                	li	s6,-32
    17ec:	7902                	flw	fs2,32(sp)
    17ee:	2e00                	fld	fs0,24(a2)
    17f0:	5c01                	li	s8,-32
    17f2:	0802                	c.slli64	a6
    17f4:	0069                	c.nop	26
    17f6:	ca2d                	beqz	a2,1868 <result+0x204>
    17f8:	0005                	c.nop	1
    17fa:	ac00                	fsd	fs0,24(s0)
    17fc:	001c                	0x1c
    17fe:	1600                	addi	s0,sp,800
    1800:	0018                	0x18
    1802:	2e00                	fld	fs0,24(a2)
    1804:	5a01                	li	s4,-32
    1806:	8502                	jr	a0
    1808:	2e00                	fld	fs0,24(a2)
    180a:	5b01                	li	s6,-32
    180c:	7902                	flw	fs2,32(sp)
    180e:	2e00                	fld	fs0,24(a2)
    1810:	5c01                	li	s8,-32
    1812:	8202                	jr	tp
    1814:	0000                	unimp
    1816:	da2d                	beqz	a2,1788 <result+0x124>
    1818:	0005                	c.nop	1
    181a:	ac00                	fsd	fs0,24(s0)
    181c:	001c                	0x1c
    181e:	3000                	fld	fs0,32(s0)
    1820:	0018                	0x18
    1822:	2e00                	fld	fs0,24(a2)
    1824:	5b01                	li	s6,-32
    1826:	7902                	flw	fs2,32(sp)
    1828:	2e00                	fld	fs0,24(a2)
    182a:	5c01                	li	s8,-32
    182c:	8202                	jr	tp
    182e:	0000                	unimp
    1830:	062d                	addi	a2,a2,11
    1832:	0006                	c.slli	zero,0x1
    1834:	ac00                	fsd	fs0,24(s0)
    1836:	001c                	0x1c
    1838:	5000                	lw	s0,32(s0)
    183a:	0018                	0x18
    183c:	2e00                	fld	fs0,24(a2)
    183e:	5a01                	li	s4,-32
    1840:	8302                	jr	t1
    1842:	2e00                	fld	fs0,24(a2)
    1844:	5b01                	li	s6,-32
    1846:	7902                	flw	fs2,32(sp)
    1848:	2e00                	fld	fs0,24(a2)
    184a:	5c01                	li	s8,-32
    184c:	8202                	jr	tp
    184e:	0000                	unimp
    1850:	0e2d                	addi	t3,t3,11
    1852:	0006                	c.slli	zero,0x1
    1854:	4a00                	lw	s0,16(a2)
    1856:	001d                	c.nop	7
    1858:	7000                	flw	fs0,32(s0)
    185a:	0018                	0x18
    185c:	2e00                	fld	fs0,24(a2)
    185e:	5a01                	li	s4,-32
    1860:	8402                	jr	s0
    1862:	2e00                	fld	fs0,24(a2)
    1864:	5b01                	li	s6,-32
    1866:	8502                	jr	a0
    1868:	2e00                	fld	fs0,24(a2)
    186a:	5c01                	li	s8,-32
    186c:	8202                	jr	tp
    186e:	0000                	unimp
    1870:	162d                	addi	a2,a2,-21
    1872:	0006                	c.slli	zero,0x1
    1874:	ac00                	fsd	fs0,24(s0)
    1876:	001c                	0x1c
    1878:	9000                	0x9000
    187a:	0018                	0x18
    187c:	2e00                	fld	fs0,24(a2)
    187e:	5a01                	li	s4,-32
    1880:	8402                	jr	s0
    1882:	2e00                	fld	fs0,24(a2)
    1884:	5b01                	li	s6,-32
    1886:	7902                	flw	fs2,32(sp)
    1888:	2e00                	fld	fs0,24(a2)
    188a:	5c01                	li	s8,-32
    188c:	8202                	jr	tp
    188e:	0000                	unimp
    1890:	0006622f          	0x6622f
    1894:	e000                	fsw	fs0,0(s0)
    1896:	001d                	c.nop	7
    1898:	2e00                	fld	fs0,24(a2)
    189a:	5a01                	li	s4,-32
    189c:	0305                	addi	t1,t1,1
    189e:	1664                	addi	s1,sp,812
    18a0:	0000                	unimp
    18a2:	012e                	slli	sp,sp,0xb
    18a4:	0084025b          	0x84025b
    18a8:	012e                	slli	sp,sp,0xb
    18aa:	025c                	addi	a5,sp,260
    18ac:	6908                	flw	fa0,16(a0)
    18ae:	0000                	unimp
    18b0:	6909                	lui	s2,0x2
    18b2:	0000                	unimp
    18b4:	c300                	sw	s0,0(a4)
    18b6:	0018                	0x18
    18b8:	3600                	fld	fs0,40(a2)
    18ba:	0075                	c.nop	29
    18bc:	0000                	unimp
    18be:	0000163f 00690900 	0x6909000000163f
    18c6:	0000                	unimp
    18c8:	18d6                	slli	a7,a7,0x35
    18ca:	0000                	unimp
    18cc:	7536                	flw	fa0,108(sp)
    18ce:	0000                	unimp
    18d0:	4800                	lw	s0,16(s0)
    18d2:	0016                	c.slli	zero,0x5
    18d4:	0000                	unimp
    18d6:	6909                	lui	s2,0x2
    18d8:	0000                	unimp
    18da:	e900                	fsw	fs0,16(a0)
    18dc:	0018                	0x18
    18de:	3600                	fld	fs0,40(a2)
    18e0:	0075                	c.nop	29
    18e2:	0000                	unimp
    18e4:	1651                	addi	a2,a2,-12
    18e6:	0000                	unimp
    18e8:	0900                	addi	s0,sp,144
    18ea:	0069                	c.nop	26
    18ec:	0000                	unimp
    18ee:	18fc                	addi	a5,sp,124
    18f0:	0000                	unimp
    18f2:	7536                	flw	fa0,108(sp)
    18f4:	0000                	unimp
    18f6:	5a00                	lw	s0,48(a2)
    18f8:	0016                	c.slli	zero,0x5
    18fa:	0000                	unimp
    18fc:	00002a37          	lui	s4,0x2
    1900:	0100                	addi	s0,sp,128
    1902:	06a1                	addi	a3,a3,8
    1904:	00000ba7          	0xba7
    1908:	028e                	slli	t0,t0,0x3
    190a:	0000                	unimp
    190c:	015e                	slli	sp,sp,0x17
    190e:	0000                	unimp
    1910:	9c01                	0x9c01
    1912:	1a50                	addi	a2,sp,308
    1914:	0000                	unimp
    1916:	6138                	flw	fa4,64(a0)
    1918:	0100                	addi	s0,sp,128
    191a:	15a1                	addi	a1,a1,-24
    191c:	00000ba7          	0xba7
    1920:	1332                	slli	t1,t1,0x2c
    1922:	0000                	unimp
    1924:	b039                	j	1132 <_endtext+0x102>
    1926:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    192a:	1ca1                	addi	s9,s9,-24
    192c:	0069                	c.nop	26
    192e:	0000                	unimp
    1930:	00001377          	0x1377
    1934:	6238                	flw	fa4,64(a2)
    1936:	0100                	addi	s0,sp,128
    1938:	29a1                	jal	1d90 <random_keys+0x344>
    193a:	00000ba7          	0xba7
    193e:	13c8                	addi	a0,sp,484
    1940:	0000                	unimp
    1942:	3e39                	jal	1460 <product2+0x54>
    1944:	01000007          	0x1000007
    1948:	30a1                	jal	1190 <_endtext+0x160>
    194a:	0069                	c.nop	26
    194c:	0000                	unimp
    194e:	1418                	addi	a4,sp,544
    1950:	0000                	unimp
    1952:	6539                	lui	a0,0xe
    1954:	0005                	c.nop	1
    1956:	0100                	addi	s0,sp,128
    1958:	3ca1                	jal	13b0 <_bss_start+0x1fc>
    195a:	0069                	c.nop	26
    195c:	0000                	unimp
    195e:	0000144f          	fnmadd.s	fs0,ft0,ft0,ft0,rtz
    1962:	873c                	0x873c
    1964:	0006                	c.slli	zero,0x1
    1966:	0100                	addi	s0,sp,128
    1968:	09a4                	addi	s1,sp,216
    196a:	1a50                	addi	a2,sp,308
    196c:	0000                	unimp
    196e:	1486                	slli	s1,s1,0x21
    1970:	0000                	unimp
    1972:	693a                	flw	fs2,140(sp)
    1974:	0100                	addi	s0,sp,128
    1976:	09a5                	addi	s3,s3,9
    1978:	0069                	c.nop	26
    197a:	0000                	unimp
    197c:	14ca                	slli	s1,s1,0x32
    197e:	0000                	unimp
    1980:	6a3a                	flw	fs4,140(sp)
    1982:	0100                	addi	s0,sp,128
    1984:	0ba5                	addi	s7,s7,9
    1986:	0069                	c.nop	26
    1988:	0000                	unimp
    198a:	150a                	slli	a0,a0,0x22
    198c:	0000                	unimp
    198e:	6b3a                	flw	fs6,140(sp)
    1990:	0100                	addi	s0,sp,128
    1992:	0da5                	addi	s11,s11,9
    1994:	0069                	c.nop	26
    1996:	0000                	unimp
    1998:	153e                	slli	a0,a0,0x2f
    199a:	0000                	unimp
    199c:	db3c                	sw	a5,112(a4)
    199e:	0002                	c.slli64	zero
    19a0:	0100                	addi	s0,sp,128
    19a2:	0aa6                	slli	s5,s5,0x9
    19a4:	00000ba7          	0xba7
    19a8:	158c                	addi	a1,sp,736
    19aa:	0000                	unimp
    19ac:	0c3c                	addi	a5,sp,536
    19ae:	0000                	unimp
    19b0:	0100                	addi	s0,sp,128
    19b2:	1a6c09a7          	0x1a6c09a7
    19b6:	0000                	unimp
    19b8:	15a4                	addi	s1,sp,744
    19ba:	0000                	unimp
    19bc:	dc3c                	sw	a5,120(s0)
    19be:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    19c2:	09a8                	addi	a0,sp,216
    19c4:	1a7f                	0x1a7f
    19c6:	0000                	unimp
    19c8:	15c4                	addi	s1,sp,740
    19ca:	0000                	unimp
    19cc:	7535                	lui	a0,0xfffed
    19ce:	0000                	unimp
    19d0:	1100                	addi	s0,sp,160
    19d2:	0016                	c.slli	zero,0x5
    19d4:	3500                	fld	fs0,40(a0)
    19d6:	0075                	c.nop	29
    19d8:	0000                	unimp
    19da:	1666                	slli	a2,a2,0x39
    19dc:	0000                	unimp
    19de:	7535                	lui	a0,0xfffed
    19e0:	0000                	unimp
    19e2:	b900                	fsd	fs0,48(a0)
    19e4:	0016                	c.slli	zero,0x5
    19e6:	3500                	fld	fs0,40(a0)
    19e8:	0075                	c.nop	29
    19ea:	0000                	unimp
    19ec:	000016e7          	0x16e7
    19f0:	102d                	c.nop	-21
    19f2:	e0000003          	lb	zero,-512(zero) # fffffe00 <_stack_start+0xfffefe00>
    19f6:	001d                	c.nop	7
    19f8:	1100                	addi	s0,sp,160
    19fa:	001a                	c.slli	zero,0x6
    19fc:	2e00                	fld	fs0,24(a2)
    19fe:	5a01                	li	s4,-32
    1a00:	8a02                	jr	s4
    1a02:	2e00                	fld	fs0,24(a2)
    1a04:	5b01                	li	s6,-32
    1a06:	5a01f303          	0x5a01f303
    1a0a:	012e                	slli	sp,sp,0xb
    1a0c:	025c                	addi	a5,sp,260
    1a0e:	0188                	addi	a0,sp,192
    1a10:	2d00                	fld	fs0,24(a0)
    1a12:	031c                	addi	a5,sp,384
    1a14:	0000                	unimp
    1a16:	1de0                	addi	s0,sp,764
    1a18:	0000                	unimp
    1a1a:	00001a33          	sll	s4,zero,zero
    1a1e:	012e                	slli	sp,sp,0xb
    1a20:	025a                	slli	tp,tp,0x16
    1a22:	0072                	c.slli	zero,0x1c
    1a24:	012e                	slli	sp,sp,0xb
    1a26:	bc78045b          	0xbc78045b
    1a2a:	067f                	0x67f
    1a2c:	012e                	slli	sp,sp,0xb
    1a2e:	025c                	addi	a5,sp,260
    1a30:	0084                	addi	s1,sp,64
    1a32:	2f00                	fld	fs0,24(a4)
    1a34:	03e6                	slli	t2,t2,0x19
    1a36:	0000                	unimp
    1a38:	1d4a                	slli	s10,s10,0x32
    1a3a:	0000                	unimp
    1a3c:	012e                	slli	sp,sp,0xb
    1a3e:	025a                	slli	tp,tp,0x16
    1a40:	0082                	c.slli64	ra
    1a42:	012e                	slli	sp,sp,0xb
    1a44:	0089025b          	0x89025b
    1a48:	012e                	slli	sp,sp,0xb
    1a4a:	025c                	addi	a5,sp,260
    1a4c:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
    1a50:	6909                	lui	s2,0x2
    1a52:	0000                	unimp
    1a54:	6c00                	flw	fs0,24(s0)
    1a56:	001a                	c.slli	zero,0x6
    1a58:	3600                	fld	fs0,40(a2)
    1a5a:	0075                	c.nop	29
    1a5c:	0000                	unimp
    1a5e:	19cc                	addi	a1,sp,244
    1a60:	0000                	unimp
    1a62:	7536                	flw	fa0,108(sp)
    1a64:	0000                	unimp
    1a66:	d500                	sw	s0,40(a0)
    1a68:	0019                	c.nop	6
    1a6a:	0000                	unimp
    1a6c:	6909                	lui	s2,0x2
    1a6e:	0000                	unimp
    1a70:	7f00                	flw	fs0,56(a4)
    1a72:	001a                	c.slli	zero,0x6
    1a74:	3600                	fld	fs0,40(a2)
    1a76:	0075                	c.nop	29
    1a78:	0000                	unimp
    1a7a:	19de                	slli	s3,s3,0x37
    1a7c:	0000                	unimp
    1a7e:	0900                	addi	s0,sp,144
    1a80:	0069                	c.nop	26
    1a82:	0000                	unimp
    1a84:	1a92                	slli	s5,s5,0x24
    1a86:	0000                	unimp
    1a88:	7536                	flw	fa0,108(sp)
    1a8a:	0000                	unimp
    1a8c:	e700                	fsw	fs0,8(a4)
    1a8e:	0019                	c.nop	6
    1a90:	0000                	unimp
    1a92:	00017e37          	lui	t3,0x17
    1a96:	0100                	addi	s0,sp,128
    1a98:	0669                	addi	a2,a2,26
    1a9a:	00000ba7          	0xba7
    1a9e:	0100                	addi	s0,sp,128
    1aa0:	0000                	unimp
    1aa2:	018e                	slli	gp,gp,0x3
    1aa4:	0000                	unimp
    1aa6:	9c01                	0x9c01
    1aa8:	1c6a                	slli	s8,s8,0x3a
    1aaa:	0000                	unimp
    1aac:	6138                	flw	fa4,64(a0)
    1aae:	0100                	addi	s0,sp,128
    1ab0:	1469                	addi	s0,s0,-6
    1ab2:	00000ba7          	0xba7
    1ab6:	173c                	addi	a5,sp,936
    1ab8:	0000                	unimp
    1aba:	b039                	j	12c8 <_bss_start+0x114>
    1abc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1ac0:	1b69                	addi	s6,s6,-6
    1ac2:	0069                	c.nop	26
    1ac4:	0000                	unimp
    1ac6:	1781                	addi	a5,a5,-32
    1ac8:	0000                	unimp
    1aca:	6238                	flw	fa4,64(a2)
    1acc:	0100                	addi	s0,sp,128
    1ace:	2869                	jal	1b68 <random_keys+0x11c>
    1ad0:	00000ba7          	0xba7
    1ad4:	000017bb          	0x17bb
    1ad8:	3e39                	jal	15f6 <product2+0x1ea>
    1ada:	01000007          	0x1000007
    1ade:	2f69                	jal	2278 <_min_stack+0x278>
    1ae0:	0069                	c.nop	26
    1ae2:	0000                	unimp
    1ae4:	0000180b          	0x180b
    1ae8:	6d38                	flw	fa4,88(a0)
    1aea:	0100646f          	jal	s0,7afa <_stack_len+0x3afa>
    1aee:	3b69                	jal	1888 <result+0x224>
    1af0:	0069                	c.nop	26
    1af2:	0000                	unimp
    1af4:	1842                	slli	a6,a6,0x30
    1af6:	0000                	unimp
    1af8:	6539                	lui	a0,0xe
    1afa:	0005                	c.nop	1
    1afc:	0100                	addi	s0,sp,128
    1afe:	4469                	li	s0,26
    1b00:	0069                	c.nop	26
    1b02:	0000                	unimp
    1b04:	18a5                	addi	a7,a7,-23
    1b06:	0000                	unimp
    1b08:	873c                	0x873c
    1b0a:	0006                	c.slli	zero,0x1
    1b0c:	0100                	addi	s0,sp,128
    1b0e:	1c6a096b          	0x1c6a096b
    1b12:	0000                	unimp
    1b14:	18ea                	slli	a7,a7,0x3a
    1b16:	0000                	unimp
    1b18:	693a                	flw	fs2,140(sp)
    1b1a:	0100                	addi	s0,sp,128
    1b1c:	096c                	addi	a1,sp,156
    1b1e:	0069                	c.nop	26
    1b20:	0000                	unimp
    1b22:	192e                	slli	s2,s2,0x2b
    1b24:	0000                	unimp
    1b26:	6a3a                	flw	fs4,140(sp)
    1b28:	0100                	addi	s0,sp,128
    1b2a:	0b6c                	addi	a1,sp,412
    1b2c:	0069                	c.nop	26
    1b2e:	0000                	unimp
    1b30:	196e                	slli	s2,s2,0x3b
    1b32:	0000                	unimp
    1b34:	6b3a                	flw	fs6,140(sp)
    1b36:	0100                	addi	s0,sp,128
    1b38:	0d6c                	addi	a1,sp,668
    1b3a:	0069                	c.nop	26
    1b3c:	0000                	unimp
    1b3e:	19a2                	slli	s3,s3,0x28
    1b40:	0000                	unimp
    1b42:	cb3c                	sw	a5,80(a4)
    1b44:	0002                	c.slli64	zero
    1b46:	0100                	addi	s0,sp,128
    1b48:	0a6d                	addi	s4,s4,27
    1b4a:	00000ba7          	0xba7
    1b4e:	19f0                	addi	a2,sp,252
    1b50:	0000                	unimp
    1b52:	0c3c                	addi	a5,sp,536
    1b54:	0000                	unimp
    1b56:	0100                	addi	s0,sp,128
    1b58:	096e                	slli	s2,s2,0x1b
    1b5a:	1c86                	slli	s9,s9,0x21
    1b5c:	0000                	unimp
    1b5e:	1a08                	addi	a0,sp,304
    1b60:	0000                	unimp
    1b62:	dc3c                	sw	a5,120(s0)
    1b64:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1b68:	1c99096f          	jal	s2,92530 <_stack_start+0x82530>
    1b6c:	0000                	unimp
    1b6e:	1a28                	addi	a0,sp,312
    1b70:	0000                	unimp
    1b72:	7535                	lui	a0,0xfffed
    1b74:	0000                	unimp
    1b76:	7500                	flw	fs0,40(a0)
    1b78:	001a                	c.slli	zero,0x6
    1b7a:	3500                	fld	fs0,40(a0)
    1b7c:	0075                	c.nop	29
    1b7e:	0000                	unimp
    1b80:	1aca                	slli	s5,s5,0x32
    1b82:	0000                	unimp
    1b84:	7535                	lui	a0,0xfffed
    1b86:	0000                	unimp
    1b88:	3a00                	fld	fs0,48(a2)
    1b8a:	3500001b          	0x3500001b
    1b8e:	0075                	c.nop	29
    1b90:	0000                	unimp
    1b92:	1b7f                	0x1b7f
    1b94:	0000                	unimp
    1b96:	8a2d                	andi	a2,a2,11
    1b98:	0001                	nop
    1b9a:	e000                	fsw	fs0,0(s0)
    1b9c:	001d                	c.nop	7
    1b9e:	b700                	fsd	fs0,40(a4)
    1ba0:	2e00001b          	0x2e00001b
    1ba4:	5a01                	li	s4,-32
    1ba6:	8b02                	jr	s6
    1ba8:	2e00                	fld	fs0,24(a2)
    1baa:	5b01                	li	s6,-32
    1bac:	5a01f303          	0x5a01f303
    1bb0:	012e                	slli	sp,sp,0xb
    1bb2:	025c                	addi	a5,sp,260
    1bb4:	2d000087          	0x2d000087
    1bb8:	0192                	slli	gp,gp,0x4
    1bba:	0000                	unimp
    1bbc:	1cac                	addi	a1,sp,632
    1bbe:	0000                	unimp
    1bc0:	00001bd7          	0x1bd7
    1bc4:	012e                	slli	sp,sp,0xb
    1bc6:	025a                	slli	tp,tp,0x16
    1bc8:	012e008b          	0x12e008b
    1bcc:	0084025b          	0x84025b
    1bd0:	012e                	slli	sp,sp,0xb
    1bd2:	025c                	addi	a5,sp,260
    1bd4:	2d000087          	0x2d000087
    1bd8:	019e                	slli	gp,gp,0x7
    1bda:	0000                	unimp
    1bdc:	1de0                	addi	s0,sp,764
    1bde:	0000                	unimp
    1be0:	1bf9                	addi	s7,s7,-2
    1be2:	0000                	unimp
    1be4:	012e                	slli	sp,sp,0xb
    1be6:	025a                	slli	tp,tp,0x16
    1be8:	0072                	c.slli	zero,0x1c
    1bea:	012e                	slli	sp,sp,0xb
    1bec:	b878045b          	0xb878045b
    1bf0:	067f                	0x67f
    1bf2:	012e                	slli	sp,sp,0xb
    1bf4:	025c                	addi	a5,sp,260
    1bf6:	2d000083          	lb	ra,720(zero) # 2d0 <polymult2+0x42>
    1bfa:	01a6                	slli	gp,gp,0x9
    1bfc:	0000                	unimp
    1bfe:	1cac                	addi	a1,sp,632
    1c00:	0000                	unimp
    1c02:	1c19                	addi	s8,s8,-26
    1c04:	0000                	unimp
    1c06:	012e                	slli	sp,sp,0xb
    1c08:	025a                	slli	tp,tp,0x16
    1c0a:	0072                	c.slli	zero,0x1c
    1c0c:	012e                	slli	sp,sp,0xb
    1c0e:	0084025b          	0x84025b
    1c12:	012e                	slli	sp,sp,0xb
    1c14:	025c                	addi	a5,sp,260
    1c16:	2d000083          	lb	ra,720(zero) # 2d0 <polymult2+0x42>
    1c1a:	022a                	slli	tp,tp,0xa
    1c1c:	0000                	unimp
    1c1e:	1cac                	addi	a1,sp,632
    1c20:	0000                	unimp
    1c22:	1c39                	addi	s8,s8,-18
    1c24:	0000                	unimp
    1c26:	012e                	slli	sp,sp,0xb
    1c28:	025a                	slli	tp,tp,0x16
    1c2a:	0082                	c.slli64	ra
    1c2c:	012e                	slli	sp,sp,0xb
    1c2e:	0084025b          	0x84025b
    1c32:	012e                	slli	sp,sp,0xb
    1c34:	025c                	addi	a5,sp,260
    1c36:	0085                	addi	ra,ra,1
    1c38:	2d00                	fld	fs0,24(a0)
    1c3a:	0280                	addi	s0,sp,320
    1c3c:	0000                	unimp
    1c3e:	1cac                	addi	a1,sp,632
    1c40:	0000                	unimp
    1c42:	1c4d                	addi	s8,s8,-13
    1c44:	0000                	unimp
    1c46:	012e                	slli	sp,sp,0xb
    1c48:	025a                	slli	tp,tp,0x16
    1c4a:	0086                	slli	ra,ra,0x1
    1c4c:	2f00                	fld	fs0,24(a4)
    1c4e:	0288                	addi	a0,sp,320
    1c50:	0000                	unimp
    1c52:	1d4a                	slli	s10,s10,0x32
    1c54:	0000                	unimp
    1c56:	012e                	slli	sp,sp,0xb
    1c58:	025a                	slli	tp,tp,0x16
    1c5a:	0082                	c.slli64	ra
    1c5c:	012e                	slli	sp,sp,0xb
    1c5e:	0086025b          	0x86025b
    1c62:	012e                	slli	sp,sp,0xb
    1c64:	025c                	addi	a5,sp,260
    1c66:	0085                	addi	ra,ra,1
    1c68:	0000                	unimp
    1c6a:	6909                	lui	s2,0x2
    1c6c:	0000                	unimp
    1c6e:	8600                	0x8600
    1c70:	001c                	0x1c
    1c72:	3600                	fld	fs0,40(a2)
    1c74:	0075                	c.nop	29
    1c76:	0000                	unimp
    1c78:	1b72                	slli	s6,s6,0x3c
    1c7a:	0000                	unimp
    1c7c:	7536                	flw	fa0,108(sp)
    1c7e:	0000                	unimp
    1c80:	7b00                	flw	fs0,48(a4)
    1c82:	0000001b          	0x1b
    1c86:	6909                	lui	s2,0x2
    1c88:	0000                	unimp
    1c8a:	9900                	0x9900
    1c8c:	001c                	0x1c
    1c8e:	3600                	fld	fs0,40(a2)
    1c90:	0075                	c.nop	29
    1c92:	0000                	unimp
    1c94:	1b84                	addi	s1,sp,496
    1c96:	0000                	unimp
    1c98:	0900                	addi	s0,sp,144
    1c9a:	0069                	c.nop	26
    1c9c:	0000                	unimp
    1c9e:	1cac                	addi	a1,sp,632
    1ca0:	0000                	unimp
    1ca2:	7536                	flw	fa0,108(sp)
    1ca4:	0000                	unimp
    1ca6:	8d00                	0x8d00
    1ca8:	0000001b          	0x1b
    1cac:	bd3d                	j	1aea <random_keys+0x9e>
    1cae:	0005                	c.nop	1
    1cb0:	0100                	addi	s0,sp,128
    1cb2:	0659                	addi	a2,a2,22
    1cb4:	00e2                	slli	ra,ra,0x18
    1cb6:	0000                	unimp
    1cb8:	001e                	c.slli	zero,0x7
    1cba:	0000                	unimp
    1cbc:	9c01                	0x9c01
    1cbe:	1d1f 0000 613e      	0x613e00001d1f
    1cc4:	0031                	c.nop	12
    1cc6:	5901                	li	s2,-32
    1cc8:	a715                	j	23ec <_min_stack+0x3ec>
    1cca:	0100000b          	0x100000b
    1cce:	3e5a                	fld	ft8,432(sp)
    1cd0:	6f6d                	lui	t5,0x1b
    1cd2:	0064                	addi	s1,sp,12
    1cd4:	5901                	li	s2,-32
    1cd6:	691d                	lui	s2,0x7
    1cd8:	0000                	unimp
    1cda:	0100                	addi	s0,sp,128
    1cdc:	0598395b          	0x598395b
    1ce0:	0000                	unimp
    1ce2:	5901                	li	s2,-32
    1ce4:	6925                	lui	s2,0x9
    1ce6:	0000                	unimp
    1ce8:	d400                	sw	s0,40(s0)
    1cea:	3a00001b          	0x3a00001b
    1cee:	0069                	c.nop	26
    1cf0:	5e01                	li	t3,-32
    1cf2:	6905                	lui	s2,0x1
    1cf4:	0000                	unimp
    1cf6:	f500                	fsw	fs0,40(a0)
    1cf8:	3f00001b          	0x3f00001b
    1cfc:	1d1f 0000 00e8      	0xe800001d1f
    1d02:	0000                	unimp
    1d04:	0000                	unimp
    1d06:	0000                	unimp
    1d08:	6101                	0x6101
    1d0a:	4009                	c.li	zero,2
    1d0c:	00001d37          	lui	s10,0x1
    1d10:	1c14                	addi	a3,sp,560
    1d12:	0000                	unimp
    1d14:	2c40                	fld	fs0,152(s0)
    1d16:	001d                	c.nop	7
    1d18:	2700                	fld	fs0,8(a4)
    1d1a:	001c                	0x1c
    1d1c:	0000                	unimp
    1d1e:	4100                	lw	s0,0(a0)
    1d20:	0174                	addi	a3,sp,140
    1d22:	0000                	unimp
    1d24:	4a01                	li	s4,0
    1d26:	0106                	slli	sp,sp,0x1
    1d28:	1d44                	addi	s1,sp,692
    1d2a:	0000                	unimp
    1d2c:	6142                	flw	ft2,16(sp)
    1d2e:	0031                	c.nop	12
    1d30:	4a01                	li	s4,0
    1d32:	441e                	lw	s0,196(sp)
    1d34:	001d                	c.nop	7
    1d36:	4200                	lw	s0,0(a2)
    1d38:	6f6d                	lui	t5,0x1b
    1d3a:	0064                	addi	s1,sp,12
    1d3c:	4a01                	li	s4,0
    1d3e:	0000752f          	0x752f
    1d42:	0000                	unimp
    1d44:	0410                	addi	a2,sp,512
    1d46:	0075                	c.nop	29
    1d48:	0000                	unimp
    1d4a:	b33d                	j	1a78 <random_keys+0x2c>
    1d4c:	0005                	c.nop	1
    1d4e:	0100                	addi	s0,sp,128
    1d50:	00ba0643          	fmadd.s	fa2,fs4,fa1,ft0,rne
    1d54:	0000                	unimp
    1d56:	0022                	c.slli	zero,0x8
    1d58:	0000                	unimp
    1d5a:	9c01                	0x9c01
    1d5c:	1dbc                	addi	a5,sp,760
    1d5e:	0000                	unimp
    1d60:	613e                	flw	ft2,204(sp)
    1d62:	0031                	c.nop	12
    1d64:	4301                	li	t1,0
    1d66:	a715                	j	248a <_min_stack+0x48a>
    1d68:	0100000b          	0x100000b
    1d6c:	3e5a                	fld	ft8,432(sp)
    1d6e:	3261                	jal	16f6 <result+0x92>
    1d70:	0100                	addi	s0,sp,128
    1d72:	0ba71e43          	fmadd.d	ft8,fa4,fs10,ft1,rtz
    1d76:	0000                	unimp
    1d78:	5b01                	li	s6,-32
    1d7a:	9839                	andi	s0,s0,-18
    1d7c:	0005                	c.nop	1
    1d7e:	0100                	addi	s0,sp,128
    1d80:	00692643          	fmadd.s	fa2,fs2,ft6,ft0,rdn
    1d84:	0000                	unimp
    1d86:	1c41                	addi	s8,s8,-16
    1d88:	0000                	unimp
    1d8a:	693a                	flw	fs2,140(sp)
    1d8c:	0100                	addi	s0,sp,128
    1d8e:	0544                	addi	s1,sp,644
    1d90:	0069                	c.nop	26
    1d92:	0000                	unimp
    1d94:	1c62                	slli	s8,s8,0x38
    1d96:	0000                	unimp
    1d98:	001dbc43          	fmadd.s	fs8,fs11,ft1,ft0,rup
    1d9c:	ce00                	sw	s0,24(a2)
    1d9e:	0000                	unimp
    1da0:	0a00                	addi	s0,sp,272
    1da2:	0000                	unimp
    1da4:	0100                	addi	s0,sp,128
    1da6:	0746                	slli	a4,a4,0x11
    1da8:	d440                	sw	s0,44(s0)
    1daa:	001d                	c.nop	7
    1dac:	8100                	0x8100
    1dae:	001c                	0x1c
    1db0:	4000                	lw	s0,0(s0)
    1db2:	1dc9                	addi	s11,s11,-14
    1db4:	0000                	unimp
    1db6:	1ca4                	addi	s1,sp,632
    1db8:	0000                	unimp
    1dba:	0000                	unimp
    1dbc:	4441                	li	s0,16
    1dbe:	0000                	unimp
    1dc0:	0100                	addi	s0,sp,128
    1dc2:	062e                	slli	a2,a2,0xb
    1dc4:	e001                	bnez	s0,1dc4 <random_keys+0x378>
    1dc6:	001d                	c.nop	7
    1dc8:	4200                	lw	s0,0(a2)
    1dca:	3161                	jal	1a52 <random_keys+0x6>
    1dcc:	0100                	addi	s0,sp,128
    1dce:	1e2e                	slli	t3,t3,0x2b
    1dd0:	1d44                	addi	s1,sp,692
    1dd2:	0000                	unimp
    1dd4:	6142                	flw	ft2,16(sp)
    1dd6:	0032                	c.slli	zero,0xc
    1dd8:	2e01                	jal	20e8 <_min_stack+0xe8>
    1dda:	4430                	lw	a2,72(s0)
    1ddc:	001d                	c.nop	7
    1dde:	0000                	unimp
    1de0:	083d                	addi	a6,a6,15
    1de2:	0004                	0x4
    1de4:	0100                	addi	s0,sp,128
    1de6:	0626                	slli	a2,a2,0x9
    1de8:	0092                	slli	ra,ra,0x4
    1dea:	0000                	unimp
    1dec:	0022                	c.slli	zero,0x8
    1dee:	0000                	unimp
    1df0:	9c01                	0x9c01
    1df2:	1e52                	slli	t3,t3,0x34
    1df4:	0000                	unimp
    1df6:	613e                	flw	ft2,204(sp)
    1df8:	0031                	c.nop	12
    1dfa:	2601                	jal	20fa <_min_stack+0xfa>
    1dfc:	a715                	j	2520 <_min_stack+0x520>
    1dfe:	0100000b          	0x100000b
    1e02:	3e5a                	fld	ft8,432(sp)
    1e04:	3261                	jal	178c <result+0x128>
    1e06:	0100                	addi	s0,sp,128
    1e08:	1d26                	slli	s10,s10,0x29
    1e0a:	00000ba7          	0xba7
    1e0e:	5b01                	li	s6,-32
    1e10:	9839                	andi	s0,s0,-18
    1e12:	0005                	c.nop	1
    1e14:	0100                	addi	s0,sp,128
    1e16:	2426                	fld	fs0,72(sp)
    1e18:	0069                	c.nop	26
    1e1a:	0000                	unimp
    1e1c:	00001cc7          	fmsub.s	fs9,ft0,ft0,ft0,rtz
    1e20:	693a                	flw	fs2,140(sp)
    1e22:	0100                	addi	s0,sp,128
    1e24:	00690527          	0x690527
    1e28:	0000                	unimp
    1e2a:	1ce8                	addi	a0,sp,636
    1e2c:	0000                	unimp
    1e2e:	001e5243          	fmadd.s	ft4,ft8,ft1,ft0,unknown
    1e32:	a600                	fsd	fs0,8(a2)
    1e34:	0000                	unimp
    1e36:	0a00                	addi	s0,sp,272
    1e38:	0000                	unimp
    1e3a:	0100                	addi	s0,sp,128
    1e3c:	0929                	addi	s2,s2,10
    1e3e:	6a40                	flw	fs0,20(a2)
    1e40:	001e                	c.slli	zero,0x7
    1e42:	0700                	addi	s0,sp,896
    1e44:	001d                	c.nop	7
    1e46:	4000                	lw	s0,0(s0)
    1e48:	1e5f 0000 1d2a      	0x1d2a00001e5f
    1e4e:	0000                	unimp
    1e50:	0000                	unimp
    1e52:	a141                	j	22d2 <_min_stack+0x2d2>
    1e54:	0006                	c.slli	zero,0x1
    1e56:	0100                	addi	s0,sp,128
    1e58:	0611                	addi	a2,a2,4
    1e5a:	7601                	lui	a2,0xfffe0
    1e5c:	001e                	c.slli	zero,0x7
    1e5e:	4200                	lw	s0,0(a2)
    1e60:	3161                	jal	1ae8 <random_keys+0x9c>
    1e62:	0100                	addi	s0,sp,128
    1e64:	1e11                	addi	t3,t3,-28
    1e66:	1d44                	addi	s1,sp,692
    1e68:	0000                	unimp
    1e6a:	6142                	flw	ft2,16(sp)
    1e6c:	0032                	c.slli	zero,0xc
    1e6e:	1101                	addi	sp,sp,-32
    1e70:	4430                	lw	a2,72(s0)
    1e72:	001d                	c.nop	7
    1e74:	0000                	unimp
    1e76:	5244                	lw	s1,36(a2)
    1e78:	001e                	c.slli	zero,0x7
    1e7a:	8c00                	0x8c00
    1e7c:	0000                	unimp
    1e7e:	0600                	addi	s0,sp,768
    1e80:	0000                	unimp
    1e82:	0100                	addi	s0,sp,128
    1e84:	9a9c                	0x9a9c
    1e86:	001e                	c.slli	zero,0x7
    1e88:	4000                	lw	s0,0(s0)
    1e8a:	1e5f 0000 1d4d      	0x1d4d00001e5f
    1e90:	0000                	unimp
    1e92:	6a45                	lui	s4,0x11
    1e94:	001e                	c.slli	zero,0x7
    1e96:	0100                	addi	s0,sp,128
    1e98:	bc44005b          	0xbc44005b
    1e9c:	001d                	c.nop	7
    1e9e:	b400                	fsd	fs0,40(s0)
    1ea0:	0000                	unimp
    1ea2:	0600                	addi	s0,sp,768
    1ea4:	0000                	unimp
    1ea6:	0100                	addi	s0,sp,128
    1ea8:	be9c                	fsd	fa5,56(a3)
    1eaa:	001e                	c.slli	zero,0x7
    1eac:	4000                	lw	s0,0(s0)
    1eae:	1dc9                	addi	s11,s11,-14
    1eb0:	0000                	unimp
    1eb2:	1d60                	addi	s0,sp,700
    1eb4:	0000                	unimp
    1eb6:	d445                	beqz	s0,1e5e <random_keys+0x412>
    1eb8:	001d                	c.nop	7
    1eba:	0100                	addi	s0,sp,128
    1ebc:	1f44005b          	0x1f44005b
    1ec0:	001d                	c.nop	7
    1ec2:	dc00                	sw	s0,56(s0)
    1ec4:	0000                	unimp
    1ec6:	0600                	addi	s0,sp,768
    1ec8:	0000                	unimp
    1eca:	0100                	addi	s0,sp,128
    1ecc:	e29c                	fsw	fa5,0(a3)
    1ece:	001e                	c.slli	zero,0x7
    1ed0:	4000                	lw	s0,0(s0)
    1ed2:	1d2c                	addi	a1,sp,696
    1ed4:	0000                	unimp
    1ed6:	00001d73          	csrrw	s10,ustatus,zero
    1eda:	3745                	jal	1e7a <random_keys+0x42e>
    1edc:	001d                	c.nop	7
    1ede:	0100                	addi	s0,sp,128
    1ee0:	9446005b          	0x9446005b
    1ee4:	8a000003          	lb	zero,-1888(zero) # fffff8a0 <_stack_start+0xfffef8a0>
    1ee8:	09000003          	lb	zero,144(zero) # 90 <instr_equ+0x4>
    1eec:	4600                	lw	s0,8(a2)
    1eee:	0078                	addi	a4,sp,12
    1ef0:	0000                	unimp
    1ef2:	006e                	c.slli	zero,0x1b
    1ef4:	0000                	unimp
    1ef6:	0009                	c.nop	2
    1ef8:	1e00                	addi	s0,sp,816
    1efa:	0000                	unimp
    1efc:	0200                	addi	s0,sp,256
    1efe:	2700                	fld	fs0,8(a4)
    1f00:	0004                	0x4
    1f02:	0400                	addi	s0,sp,512
    1f04:	bc01                	j	1914 <ti_2+0x58>
    1f06:	0021                	c.nop	8
    1f08:	3000                	fld	fs0,32(s0)
    1f0a:	0000                	unimp
    1f0c:	4500                	lw	s0,8(a0)
    1f0e:	4c000007          	0x4c000007
    1f12:	a5000007          	0xa5000007
    1f16:	01000007          	0x1000007
    1f1a:	80              	Address 0x0000000000001f1a is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x216>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	03001603          	lh	a2,48(zero) # 30 <__DYNAMIC+0x30>
  22:	3a0e                	fld	fs4,224(sp)
  24:	390b3b0b          	0x390b3b0b
  28:	0013490b          	0x13490b
  2c:	0400                	addi	s0,sp,512
  2e:	0024                	addi	s1,sp,8
  30:	0b3e0b0b          	0xb3e0b0b
  34:	00000803          	lb	a6,0(zero) # 0 <__DYNAMIC>
  38:	3505                	jal	fffffe58 <_stack_start+0xfffefe58>
  3a:	4900                	lw	s0,16(a0)
  3c:	06000013          	li	zero,96
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # 110b3 <_stack_start+0x10b3>
  46:	0b39053b          	0xb39053b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1 # fffe0001 <_stack_start+0xfffd0001>
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    for(i=0;i<(length/3);i++) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
}
  a0:	0b00                	addi	s0,sp,400
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  a2:	0e00000b          	0xe00000b
    asm volatile(
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
    for(i=0;i<(length/3);i++) {
  b2:	1301                	addi	t1,t1,-32
    asm volatile(
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
    for(i=0;i<(length/3);i++) {
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
  c4:	1000000b          	0x1000000b
}
  c8:	0b0b000f          	0xb0b000f
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  cc:	1349                	addi	t1,t1,-14
    asm volatile(
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
    for(i=0;i<(length/3);i++) {
  d8:	390b3b0b          	0x390b3b0b
    asm volatile(
  dc:	0013010b          	0x13010b
}
  e0:	1200                	addi	s0,sp,288
    for(i=0;i<(length/3);i++) {
  e2:	000d                	c.nop	3
  e4:	0b3a0e03          	lb	t3,179(s4)
    asm volatile(
  e8:	0b390b3b          	0xb390b3b
    for(i=0;i<(length/3);i++) {
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
}
  f0:	0000                	unimp
    asm volatile(
  f2:	27001513          	0x27001513
  f6:	0019                	c.nop	6
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
    for(i=0;i<(length/3);i++) {
  fc:	13491927          	0x13491927
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
    int line[size_b][size_a + size_b];
 108:	16000013          	li	zero,352
 10c:	0026                	c.slli	zero,0x9
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 10e:	1349                	addi	t1,t1,-14
 110:	0000                	unimp
    int line[size_b][size_a + size_b];
 112:	03011317          	auipc	t1,0x3011
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
 11a:	39053b0b          	0x39053b0b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 11e:	0013010b          	0x13010b
    int pola[size_a];
 122:	1800                	addi	s0,sp,48
 124:	000d                	c.nop	3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 126:	0b3a0e03          	lb	t3,179(s4)
 12a:	0b39053b          	0xb39053b
 12e:	1349                	addi	t1,t1,-14
 130:	0b38                	addi	a4,sp,408
    int line[size_b][size_a + size_b];
 132:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 134:	0d19                	addi	s10,s10,6
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
    int line[size_b][size_a + size_b];
 13a:	39053b0b          	0x39053b0b
    int pola[size_a];
 13e:	3813490b          	0x3813490b
    int line[size_b][size_a + size_b];
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
    int pola[size_a];
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
    int polb[size_b];
 14a:	0b3a0b0b          	0xb3a0b0b
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 156:	0b01131b          	0xb01131b
    int pola[size_a];
 15a:	3b0b3a0b          	0x3b0b3a0b
    int line[size_b][size_a + size_b];
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
    for (i = 0; i < size_b; ++i){
 164:	1c00                	addi	s0,sp,560
 166:	0b0b0117          	auipc	sp,0xb0b0
            product[j] = 0;
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
 170:	1301                	addi	t1,t1,-32
    for (i = 0; i < size_b; ++i){
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
     	array_equ(pola,a,size_a);
 176:	0300                	addi	s0,sp,384
 178:	3a0e                	fld	fs4,224(sp)
 17a:	39053b0b          	0x39053b0b
 17e:	0013490b          	0x13490b
 182:	1e00                	addi	s0,sp,816
 184:	0e030013          	addi	zero,t1,224
 188:	193c                	addi	a5,sp,184
	array_mod(pola,mod,size_a);
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
    	array_equ(polb,b,size_b);
 192:	20000013          	li	zero,512
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
 19c:	0b39053b          	0xb39053b
	array_mod(polb,mod,size_b);
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
    if(star_mult == 1){
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
 1b2:	3f13490b          	0x3f13490b
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
        for (j = size_b -1; j >= 0; j = j-1){
 1be:	0b3a0e03          	lb	t3,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 1c2:	0b390b3b          	0xb390b3b
            product[j] = 0;
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
            line[i][j] = 0;
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0x96>
            product[j] = 0;
 1d0:	00052f13          	slti	t5,a0,0
        for(j = 0; j < size_a + size_b -1; ++j){
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < size_b; ++i){
 1dc:	0b390b3b          	0xb390b3b
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 34250000 	0x342500001802193f
                line[size_b-1-j][k] = pola[k]*polb[j];
 1ea:	0300                	addi	s0,sp,384
 1ec:	3a08                	fld	fa0,48(a2)
 1ee:	390b3b0b          	0x390b3b0b
 1f2:	3f13490b          	0x3f13490b
 1f6:	0219                	addi	tp,tp,6
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f8:	0018                	0x18
                line[size_b-1-j][k] = pola[k]*polb[j];
 1fa:	2600                	fld	fs0,8(a2)
 1fc:	012e                	slli	sp,sp,0xb
 1fe:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
        for (j = size_b -1; j >= 0; j = j-1){
 206:	0b39                	addi	s6,s6,14
 208:	1349                	addi	t1,t1,-14
 20a:	0111                	addi	sp,sp,4
 20c:	0612                	slli	a2,a2,0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
 20e:	1840                	addi	s0,sp,52
	array_add(product, line[i], (size_a + size_b - 1));
 210:	01194297          	auipc	t0,0x1194
 214:	27000013          	li	zero,624
        array_mod(line[i],mod,(size_a+size_b-1));
 218:	0034                	addi	a3,sp,8
 21a:	0b3a0803          	lb	a6,179(s4)
    for (i = 0; i < size_b; ++i){
 21e:	0b39053b          	0xb39053b
    array_mod(product,mod,size_a+size_b-1);
 222:	1349                	addi	t1,t1,-14
 224:	051c                	addi	a5,sp,640
 226:	0000                	unimp
 228:	3428                	fld	fa0,104(s0)
}
 22a:	0300                	addi	s0,sp,384
 22c:	3a0e                	fld	fs4,224(sp)
 22e:	39053b0b          	0x39053b0b
 232:	0213490b          	0x213490b
 236:	29000017          	auipc	zero,0x29000
 23a:	0034                	addi	a3,sp,8
 23c:	0b3a0803          	lb	a6,179(s4)
 240:	0b39053b          	0xb39053b
 244:	1349                	addi	t1,t1,-14
 246:	0b1c                	addi	a5,sp,400
 248:	0000                	unimp
 24a:	342a                	fld	fs0,168(sp)
 24c:	0300                	addi	s0,sp,384
 24e:	3a0e                	fld	fs4,224(sp)
 250:	39053b0b          	0x39053b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 254:	0213490b          	0x213490b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 258:	0018                	0x18
 25a:	2b00                	fld	fs0,16(a4)
 25c:	0034                	addi	a3,sp,8
 25e:	0b3a0e03          	lb	t3,179(s4)
 262:	0b39053b          	0xb39053b
 266:	1349                	addi	t1,t1,-14
            for (k = size_a-1; k >= 0; k = k-1 ){
 268:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 26a:	342c                	fld	fa1,104(s0)
 26c:	0300                	addi	s0,sp,384
 26e:	3a08                	fld	fa0,48(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 270:	39053b0b          	0x39053b0b
        for (j = size_b -1; j >= 0; j = j-1){
 274:	0213490b          	0x213490b
 278:	2d000017          	auipc	zero,0x2d000
        array_mod(line[i],mod,(size_a+size_b-1));
 27c:	8289                	srli	a3,a3,0x2
 27e:	0101                	addi	sp,sp,0
	array_add(product, line[i], (size_a + size_b - 1));
 280:	0111                	addi	sp,sp,4
 282:	1331                	addi	t1,t1,-20
 284:	1301                	addi	t1,t1,-32
 286:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 288:	8a2e                	mv	s4,a1
 28a:	0182                	c.slli64	gp
 28c:	0200                	addi	s0,sp,256
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 28e:	9118                	0x9118
    int line[size_b][size_a + size_b];
 290:	1842                	slli	a6,a6,0x30
 292:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 294:	0182892f          	0x182892f
 298:	1101                	addi	sp,sp,-32
 29a:	3101                	jal	fffffe9a <_stack_start+0xfffefe9a>
 29c:	30000013          	li	zero,768
    int line[size_b][size_a + size_b];
 2a0:	0021                	c.nop	8
 2a2:	1349                	addi	t1,t1,-14
 2a4:	0000182f          	0x182f
 2a8:	2e31                	jal	5c4 <polydiv+0x1d8>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2aa:	3f01                	jal	1ba <polymult+0xba>
 2ac:	0319                	addi	t1,t1,6
 2ae:	3a0e                	fld	fs4,224(sp)
 2b0:	39053b0b          	0x39053b0b
 2b4:	4919270b          	0x4919270b
 2b8:	12011113          	0x12011113
    int line[size_b][size_a + size_b];
 2bc:	4006                	0x4006
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2be:	9718                	0x9718
 2c0:	1942                	slli	s2,s2,0x30
    int line[size_b][size_a + size_b];
 2c2:	1301                	addi	t1,t1,-32
 2c4:	0000                	unimp
 2c6:	0532                	slli	a0,a0,0xc
    int pola[size_a];
 2c8:	0300                	addi	s0,sp,384
 2ca:	3a08                	fld	fa0,48(a2)
 2cc:	39053b0b          	0x39053b0b
    int line[size_b][size_a + size_b];
 2d0:	0213490b          	0x213490b
    int pola[size_a];
 2d4:	33000017          	auipc	zero,0x33000
    int polb[size_b];
 2d8:	0005                	c.nop	1
 2da:	0b3a0e03          	lb	t3,179(s4)
 2de:	0b39053b          	0xb39053b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2e2:	1349                	addi	t1,t1,-14
 2e4:	1702                	slli	a4,a4,0x20
    int line[size_b][size_a + size_b];
 2e6:	0000                	unimp
 2e8:	3434                	fld	fa3,104(s0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2ea:	0300                	addi	s0,sp,384
    int pola[size_a];
 2ec:	3a08                	fld	fa0,48(a2)
 2ee:	39053b0b          	0x39053b0b
    for (i = 0; i < size_b; ++i){
 2f2:	0213490b          	0x213490b
 2f6:	0018                	0x18
            product2[j] = 0;
 2f8:	3500                	fld	fs0,40(a0)
 2fa:	0034                	addi	a3,sp,8
 2fc:	1349                	addi	t1,t1,-14
 2fe:	1934                	addi	a3,sp,184
    for (i = 0; i < size_b; ++i){
 300:	1702                	slli	a4,a4,0x20
 302:	0000                	unimp
    array_equ(pola,a,size_a);
 304:	2136                	fld	ft2,328(sp)
 306:	4900                	lw	s0,16(a0)
 308:	00132f13          	slti	t5,t1,1
 30c:	3700                	fld	fs0,40(a4)
 30e:	012e                	slli	sp,sp,0xb
    array_equ(polb,b,size_b);
 310:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 318:	0b39                	addi	s6,s6,14
 31a:	13491927          	0x13491927
    if(star_mult == 1){
 31e:	0111                	addi	sp,sp,4
 320:	0612                	slli	a2,a2,0x4
 322:	1840                	addi	s0,sp,52
 324:	01194297          	auipc	t0,0x1194
 328:	38000013          	li	zero,896
 32c:	0005                	c.nop	1
        for (j = size_b -1; j >= 0; j = j-1){
 32e:	0b3a0803          	lb	a6,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 332:	0b390b3b          	0xb390b3b
            product2[j] = 0;
 336:	1349                	addi	t1,t1,-14
 338:	1702                	slli	a4,a4,0x20
 33a:	0000                	unimp
            line[i][j] = 0;
 33c:	0539                	addi	a0,a0,14
 33e:	0300                	addi	s0,sp,384
            product2[j] = 0;
 340:	3a0e                	fld	fs4,224(sp)
 342:	390b3b0b          	0x390b3b0b
        for(j = 0; j < size_a + size_b -1; ++j){
 346:	0213490b          	0x213490b
 34a:	3a000017          	auipc	zero,0x3a000
    for (i = 0; i < size_b; ++i){
 34e:	0034                	addi	a3,sp,8
 350:	0b3a0803          	lb	a6,179(s4)
        for(j = 0; j < size_a + size_b -1; ++j){
 354:	0b390b3b          	0xb390b3b
                line[size_b-1-j][k] = pola[k]*polb[j];
 358:	1349                	addi	t1,t1,-14
 35a:	1702                	slli	a4,a4,0x20
 35c:	0000                	unimp
 35e:	0300343b          	0x300343b
 362:	3a08                	fld	fa0,48(a2)
 364:	390b3b0b          	0x390b3b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 368:	0013490b          	0x13490b
                line[size_b-1-j][k] = pola[k]*polb[j];
 36c:	3c00                	fld	fs0,56(s0)
 36e:	0034                	addi	a3,sp,8
            for (k = size_a-1; k >= 0; k = k-1 ){
 370:	0b3a0e03          	lb	t3,179(s4)
        for (j = size_b -1; j >= 0; j = j-1){
 374:	0b390b3b          	0xb390b3b
 378:	1349                	addi	t1,t1,-14
 37a:	1702                	slli	a4,a4,0x20
 37c:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 37e:	2e3d                	jal	6bc <ext_euclid+0x2>
         array_add(product2,line[i],size_a+size_b-1);
 380:	3f01                	jal	290 <polymult2+0x2>
 382:	0319                	addi	t1,t1,6
 384:	3a0e                	fld	fs4,224(sp)
 386:	390b3b0b          	0x390b3b0b
        for(i = 0; i < size_b; ++i){
 38a:	1119270b          	0x1119270b
}
 38e:	1201                	addi	tp,tp,-32
 390:	4006                	0x4006
 392:	9718                	0x9718
 394:	1942                	slli	s2,s2,0x30
 396:	1301                	addi	t1,t1,-32
 398:	0000                	unimp
 39a:	053e                	slli	a0,a0,0xf
 39c:	0300                	addi	s0,sp,384
 39e:	3a08                	fld	fa0,48(a2)
 3a0:	390b3b0b          	0x390b3b0b
 3a4:	0213490b          	0x213490b
 3a8:	0018                	0x18
 3aa:	3f00                	fld	fs0,56(a4)
 3ac:	011d                	addi	sp,sp,7
 3ae:	1331                	addi	t1,t1,-20
 3b0:	0152                	slli	sp,sp,0x14
 3b2:	1755                	addi	a4,a4,-11
 3b4:	0b58                	addi	a4,sp,404
            for (k = size_a-1; k >= 0; k = k-1 ){
 3b6:	0b59                	addi	s6,s6,22
 3b8:	00000b57          	0xb57
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3bc:	0540                	addi	s0,sp,644
 3be:	3100                	fld	fs0,32(a0)
 3c0:	00170213          	addi	tp,a4,1 # fffe0001 <_stack_start+0xfffd0001>
 3c4:	4100                	lw	s0,0(a0)
 3c6:	012e                	slli	sp,sp,0xb
 3c8:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 3d0:	0b39                	addi	s6,s6,14
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d2:	0b201927          	0xb201927
        for (j = size_b -1; j >= 0; j = j-1){
 3d6:	1301                	addi	t1,t1,-32
 3d8:	0000                	unimp
 3da:	0542                	slli	a0,a0,0x10
 3dc:	0300                	addi	s0,sp,384
         array_add(product2,line[i],size_a+size_b-1);
 3de:	3a08                	fld	fa0,48(a2)
 3e0:	390b3b0b          	0x390b3b0b
 3e4:	0013490b          	0x13490b
        for(i = 0; i < size_b; ++i){
 3e8:	4300                	lw	s0,0(a4)
 3ea:	011d                	addi	sp,sp,7
    int v[size_N];
 3ec:	1331                	addi	t1,t1,-20
 3ee:	0111                	addi	sp,sp,4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 3f0:	0612                	slli	a2,a2,0x4
    int v[size_N];
 3f2:	0b58                	addi	a4,sp,404
 3f4:	0b59                	addi	s6,s6,22
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 3f6:	00000b57          	0xb57
 3fa:	2e44                	fld	fs1,152(a2)
 3fc:	3101                	jal	fffffffc <_stack_start+0xfffefffc>
 3fe:	12011113          	0x12011113
 402:	4006                	0x4006
 404:	9718                	0x9718
 406:	1942                	slli	s2,s2,0x30
 408:	1301                	addi	t1,t1,-32
 40a:	0000                	unimp
 40c:	0545                	addi	a0,a0,17
 40e:	3100                	fld	fs0,32(a0)
 410:	00180213          	addi	tp,a6,1 # 1 <__DYNAMIC+0x1>
    int v[size_N];
 414:	4600                	lw	s0,8(a2)
 416:	002e                	c.slli	zero,0xb
    int q[size_N];
 418:	193c193f 0e030e6e 	0xe030e6e193c193f
    int num_temp[size_N];
 420:	0b3a                	slli	s6,s6,0xe
    int denum_temp[size_D];
 422:	00000b3b          	0xb3b
 426:	0100                	addi	s0,sp,128
 428:	0011                	c.nop	4
    int num_temp[size_N];
 42a:	0610                	addi	a2,sp,768
    int denum_temp[size_D];
 42c:	0655                	addi	a2,a2,21
 42e:	0e1b0e03          	lb	t3,225(s6) # fffe10e1 <_stack_start+0xfffd10e1>
   if(size_N == 106) {
 432:	0e25                	addi	t3,t3,9
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 434:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	0fa8                	addi	a0,sp,984
       2:	0000                	unimp
       4:	0fba                	slli	t6,t6,0xe
       6:	0000                	unimp
       8:	0001                	nop
       a:	ba5a                	fsd	fs6,304(sp)
       c:	bb00000f          	0xbb00000f
      10:	0100000f          	fence	w,unknown
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	0fbc                	addi	a5,sp,984
      20:	0000                	unimp
      22:	1004                	addi	s1,sp,32
      24:	0000                	unimp
      26:	0001                	nop
      28:	0a5a                	slli	s4,s4,0x16
      2a:	0010                	0x10
      2c:	1e00                	addi	s0,sp,816
      2e:	0010                	0x10
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0f36                	slli	t5,t5,0xd
      3e:	0000                	unimp
      40:	0f88                	addi	a0,sp,976
      42:	0000                	unimp
      44:	0001                	nop
      46:	885a                	mv	a6,s6
      48:	a400000f          	0xa400000f
      4c:	0400000f          	fence	o,unknown
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	2a00                	fld	fs0,16(a2)
      5e:	6a00000f          	0x6a00000f
      62:	0300000f          	fence	rw,unknown
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0f6a                	slli	t5,t5,0x1a
      6c:	0000                	unimp
      6e:	0f74                	addi	a3,sp,924
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0f74                	addi	a3,sp,924
      78:	0000                	unimp
      7a:	0fa5                	addi	t6,t6,9
  jal x0, default_exc_handler
      7c:	0000                	unimp
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	0fa5                	addi	t6,t6,9
  jal x0, default_exc_handler
      84:	0000                	unimp
      86:	1008                	addi	a0,sp,32
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	0879                	addi	a6,a6,30
}
      90:	0010                	0x10
    for(i=0;i<(length/3);i++) {
      92:	0a00                	addi	s0,sp,272
      94:	0010                	0x10
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	100a                	c.slli	zero,0x22
      9e:	0000                	unimp
}
      a0:	101e                	c.slli	zero,0x27
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
    asm volatile(
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      b0:	2a00                	fld	fs0,16(a2)
      b2:	4400000f          	0x4400000f
    asm volatile(
      b6:	0300000f          	fence	rw,unknown
    for(i=0;i<(length/3);i++) {
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	0f44                	addi	s1,sp,916
      c0:	0000                	unimp
      c2:	0f46                	slli	t5,t5,0x11
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
}
      c8:	007d                	c.nop	31
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      ca:	0f46                	slli	t5,t5,0x11
      cc:	0000                	unimp
    asm volatile(
      ce:	0fb4                	addi	a3,sp,984
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
      d6:	b47a                	fsd	ft10,40(sp)
    for(i=0;i<(length/3);i++) {
      d8:	bb00000f          	0xbb00000f
    asm volatile(
      dc:	0200000f          	fence	r,unknown
}
      e0:	7d00                	flw	fs0,56(a0)
    for(i=0;i<(length/3);i++) {
      e2:	bb00                	fsd	fs0,48(a4)
      e4:	0800000f          	fence	i,unknown
    asm volatile(
      e8:	0010                	0x10
    for(i=0;i<(length/3);i++) {
      ea:	0300                	addi	s0,sp,384
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
}
      f0:	1008                	addi	a0,sp,32
    asm volatile(
      f2:	0000                	unimp
      f4:	100a                	c.slli	zero,0x22
      f6:	0000                	unimp
      f8:	f0720003          	lb	zero,-249(tp) # fffe0f07 <_stack_start+0xfffd0f07>
    for(i=0;i<(length/3);i++) {
      fc:	0a7a                	slli	s4,s4,0x1e
      fe:	0010                	0x10
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     100:	1e00                	addi	s0,sp,816
     102:	0010                	0x10
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
    int line[size_b][size_a + size_b];
     108:	7af0                	flw	fa2,116(a3)
	...
     112:	0f2a                	slli	t5,t5,0xa
     114:	0000                	unimp
     116:	0f50                	addi	a2,sp,916
     118:	0000                	unimp
     11a:	c4910003          	lb	zero,-951(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     11e:	507c                	lw	a5,100(s0)
     120:	5a00000f          	0x5a00000f
    int pola[size_a];
     124:	0200000f          	fence	r,unknown
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	7e00                	flw	fs0,56(a2)
     12a:	5a00                	lw	s0,48(a2)
     12c:	0200000f          	fence	r,unknown
     130:	0010                	0x10
    int line[size_b][size_a + size_b];
     132:	0200                	addi	s0,sp,256
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     134:	7800                	flw	fs0,48(s0)
     136:	0200                	addi	s0,sp,256
     138:	0010                	0x10
    int line[size_b][size_a + size_b];
     13a:	0800                	addi	s0,sp,16
    int pola[size_a];
     13c:	0010                	0x10
     13e:	0300                	addi	s0,sp,384
    int line[size_b][size_a + size_b];
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
     144:	1008                	addi	a0,sp,32
    int pola[size_a];
     146:	0000                	unimp
     148:	100a                	c.slli	zero,0x22
    int polb[size_b];
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
    int pola[size_a];
     150:	0a7c                	addi	a5,sp,284
    int polb[size_b];
     152:	0010                	0x10
     154:	1e00                	addi	s0,sp,816
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     156:	0010                	0x10
     158:	0200                	addi	s0,sp,256
    int pola[size_a];
     15a:	7800                	flw	fs0,48(s0)
	...
    for (i = 0; i < size_b; ++i){
     164:	2a00                	fld	fs0,16(a2)
     166:	8400000f          	0x8400000f
            product[j] = 0;
     16a:	0300000f          	fence	rw,unknown
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
    for (i = 0; i < size_b; ++i){
     172:	0f84                	addi	s1,sp,976
     174:	0000                	unimp
     	array_equ(pola,a,size_a);
     176:	0f8a                	slli	t6,t6,0x2
     178:	0000                	unimp
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
     17e:	0f8a                	slli	t6,t6,0x2
     180:	0000                	unimp
     182:	0fa5                	addi	t6,t6,9
     184:	0000                	unimp
     186:	0002                	c.slli64	zero
     188:	0080                	addi	s0,sp,64
	array_mod(pola,mod,size_a);
     18a:	0fa5                	addi	t6,t6,9
     18c:	0000                	unimp
     18e:	1008                	addi	a0,sp,32
     190:	0000                	unimp
    	array_equ(polb,b,size_b);
     192:	98910003          	lb	zero,-1655(sp)
     196:	087e                	slli	a6,a6,0x1f
     198:	0010                	0x10
     19a:	0a00                	addi	s0,sp,272
     19c:	0010                	0x10
	array_mod(polb,mod,size_b);
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	100a                	c.slli	zero,0x22
    if(star_mult == 1){
     1a6:	0000                	unimp
     1a8:	101e                	c.slli	zero,0x27
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
     1b4:	0000                	unimp
     1b6:	0000                	unimp
     1b8:	3600                	fld	fs0,40(a2)
     1ba:	3c00000f          	0x3c00000f
        for (j = size_b -1; j >= 0; j = j-1){
     1be:	0200000f          	fence	r,unknown
            for (k = size_a-1; k >= 0; k = k-1 ){
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	bc9f 000f d400      	0xd400000fbc9f
            product[j] = 0;
     1ca:	0200000f          	fence	r,unknown
            line[i][j] = 0;
     1ce:	3000                	fld	fs0,32(s0)
            product[j] = 0;
     1d0:	009f 0000 0000      	0x9f
        for(j = 0; j < size_a + size_b -1; ++j){
     1d6:	0000                	unimp
     1d8:	4a00                	lw	s0,16(a2)
     1da:	000c                	0xc
    for (i = 0; i < size_b; ++i){
     1dc:	6200                	flw	fs0,0(a2)
     1de:	000c                	0xc
     1e0:	0100                	addi	s0,sp,128
     1e2:	5a00                	lw	s0,48(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
     1e4:	0c62                	slli	s8,s8,0x18
     1e6:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     1e8:	0cca                	slli	s9,s9,0x12
     1ea:	0000                	unimp
     1ec:	0001                	nop
     1ee:	ca58                	sw	a4,20(a2)
     1f0:	000c                	0xc
     1f2:	d600                	sw	s0,40(a2)
     1f4:	000c                	0xc
     1f6:	0300                	addi	s0,sp,384
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f8:	8600                	0x8600
                line[size_b-1-j][k] = pola[k]*polb[j];
     1fa:	9f7f                	0x9f7f
     1fc:	0cd6                	slli	s9,s9,0x15
     1fe:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     200:	0cdc                	addi	a5,sp,596
     202:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
     20a:	0cdc                	addi	a5,sp,596
     20c:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     20e:	0d12                	slli	s10,s10,0x4
	array_add(product, line[i], (size_a + size_b - 1));
     210:	0000                	unimp
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
        array_mod(line[i],mod,(size_a+size_b-1));
     218:	0000                	unimp
     21a:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     21c:	4a00                	lw	s0,16(a2)
     21e:	000c                	0xc
    array_mod(product,mod,size_a+size_b-1);
     220:	6c00                	flw	fs0,24(s0)
     222:	000c                	0xc
     224:	0100                	addi	s0,sp,128
     226:	5b00                	lw	s0,48(a4)
     228:	0c6c                	addi	a1,sp,540
}
     22a:	0000                	unimp
     22c:	0cd4                	addi	a3,sp,596
     22e:	0000                	unimp
     230:	0001                	nop
     232:	d465                	beqz	s0,21a <polymult+0x11a>
     234:	000c                	0xc
     236:	dc00                	sw	s0,56(s0)
     238:	000c                	0xc
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	dc9f 000c 1200      	0x1200000cdc9f
     246:	000d                	c.nop	3
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
            for (k = size_a-1; k >= 0; k = k-1 ){
     254:	0c4a                	slli	s8,s8,0x12
     256:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     258:	0c64                	addi	s1,sp,540
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	645c                	flw	fa5,12(s0)
     260:	000c                	0xc
     262:	ce00                	sw	s0,24(a2)
     264:	000c                	0xc
     266:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     268:	6200                	flw	fs0,0(a2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     26a:	0cce                	slli	s9,s9,0x13
     26c:	0000                	unimp
     26e:	0cdc                	addi	a5,sp,596
            for (k = size_a-1; k >= 0; k = k-1 ){
     270:	0000                	unimp
     272:	0004                	0x4
        for (j = size_b -1; j >= 0; j = j-1){
     274:	9f5c01f3          	0x9f5c01f3
     278:	0cdc                	addi	a5,sp,596
     27a:	0000                	unimp
        array_mod(line[i],mod,(size_a+size_b-1));
     27c:	0d12                	slli	s10,s10,0x4
     27e:	0000                	unimp
	array_add(product, line[i], (size_a + size_b - 1));
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
     286:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     288:	0000                	unimp
     28a:	4a00                	lw	s0,16(a2)
     28c:	000c                	0xc
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     28e:	6600                	flw	fs0,8(a2)
    int line[size_b][size_a + size_b];
     290:	000c                	0xc
     292:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     294:	5d00                	lw	s0,56(a0)
     296:	0c66                	slli	s8,s8,0x19
     298:	0000                	unimp
     29a:	0c7f                	0xc7f
     29c:	0000                	unimp
    int line[size_b][size_a + size_b];
     29e:	0001                	nop
     2a0:	7f5a                	flw	ft10,180(sp)
     2a2:	000c                	0xc
     2a4:	1200                	addi	s0,sp,288
     2a6:	000d                	c.nop	3
     2a8:	0400                	addi	s0,sp,512
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
     2ae:	009f 0000 0000      	0x9f
     2b4:	0000                	unimp
     2b6:	4a00                	lw	s0,16(a2)
     2b8:	000c                	0xc
     2ba:	6e00                	flw	fs0,24(a2)
    int line[size_b][size_a + size_b];
     2bc:	000c                	0xc
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
    int line[size_b][size_a + size_b];
     2c2:	0c6e                	slli	s8,s8,0x1b
     2c4:	0000                	unimp
     2c6:	0cd8                	addi	a4,sp,596
    int pola[size_a];
     2c8:	0000                	unimp
     2ca:	0001                	nop
     2cc:	000cd867          	0xcd867
    int line[size_b][size_a + size_b];
     2d0:	dc00                	sw	s0,56(s0)
    int pola[size_a];
     2d2:	000c                	0xc
     2d4:	0400                	addi	s0,sp,512
    int polb[size_b];
     2d6:	f300                	fsw	fs0,32(a4)
     2d8:	5e01                	li	t3,-32
     2da:	dc9f 000c 1200      	0x1200000cdc9f
     2e0:	000d                	c.nop	3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
    int pola[size_a];
     2ee:	0c4a                	slli	s8,s8,0x12
    int polb[size_b];
     2f0:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     2f2:	0c7f                	0xc7f
     2f4:	0000                	unimp
     2f6:	0001                	nop
            product2[j] = 0;
     2f8:	7f5f 000c 1200      	0x1200000c7f5f
     2fe:	000d                	c.nop	3
    for (i = 0; i < size_b; ++i){
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
    array_equ(pola,a,size_a);
     304:	5f01                	li	t5,-32
     306:	009f 0000 0000      	0x9f
     30c:	0000                	unimp
     30e:	4a00                	lw	s0,16(a2)
    array_equ(polb,b,size_b);
     310:	000c                	0xc
     312:	7f00                	flw	fs0,56(a4)
     314:	000c                	0xc
     316:	0100                	addi	s0,sp,128
     318:	6000                	flw	fs0,0(s0)
     31a:	0c7f                	0xc7f
    if(star_mult == 1){
     31c:	0000                	unimp
     31e:	0cd2                	slli	s9,s9,0x14
     320:	0000                	unimp
     322:	0001                	nop
     324:	d264                	sw	s1,100(a2)
     326:	000c                	0xc
     328:	dc00                	sw	s0,56(s0)
     32a:	000c                	0xc
     32c:	0400                	addi	s0,sp,512
        for (j = size_b -1; j >= 0; j = j-1){
     32e:	f300                	fsw	fs0,32(a4)
     330:	6001                	0x6001
            for (k = size_a-1; k >= 0; k = k-1 ){
     332:	dc9f 000c 1200      	0x1200000cdc9f
            product2[j] = 0;
     338:	000d                	c.nop	3
     33a:	0100                	addi	s0,sp,128
            line[i][j] = 0;
     33c:	6400                	flw	fs0,8(s0)
	...
        for(j = 0; j < size_a + size_b -1; ++j){
     346:	0c80                	addi	s0,sp,592
     348:	0000                	unimp
     34a:	00000c8f          	0xc8f
    for (i = 0; i < size_b; ++i){
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
     352:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     354:	0000                	unimp
     356:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     358:	9200                	0x9200
     35a:	000c                	0xc
     35c:	b000                	fsd	fs0,32(s0)
     35e:	000c                	0xc
     360:	0100                	addi	s0,sp,128
     362:	5a00                	lw	s0,48(a2)
     364:	0cb0                	addi	a2,sp,600
     366:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     368:	00000cb3          	add	s9,zero,zero
                line[size_b-1-j][k] = pola[k]*polb[j];
     36c:	0001                	nop
     36e:	dc5c                	sw	a5,60(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     370:	000c                	0xc
     372:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     374:	000d                	c.nop	3
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
         array_add(product2,line[i],size_a+size_b-1);
     382:	0cb4                	addi	a3,sp,600
     384:	0000                	unimp
     386:	00000cbf 005a0001 	0x5a000100000cbf
}
     38e:	0000                	unimp
     390:	0000                	unimp
     392:	0000                	unimp
     394:	c000                	sw	s0,0(s0)
     396:	000c                	0xc
     398:	dc00                	sw	s0,56(s0)
     39a:	000c                	0xc
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0d00                	addi	s0,sp,656
     3a2:	0000                	unimp
     3a4:	0d12                	slli	s10,s10,0x4
     3a6:	0000                	unimp
     3a8:	0001                	nop
     3aa:	005a                	c.slli	zero,0x16
     3ac:	0000                	unimp
     3ae:	0000                	unimp
     3b0:	0000                	unimp
     3b2:	9200                	0x9200
     3b4:	000c                	0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b6:	9800                	0x9800
     3b8:	000c                	0xc
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3ba:	0100                	addi	s0,sp,128
     3bc:	5900                	lw	s0,48(a0)
     3be:	0c98                	addi	a4,sp,592
     3c0:	0000                	unimp
     3c2:	0ca4                	addi	s1,sp,600
     3c4:	0000                	unimp
     3c6:	0001                	nop
     3c8:	a45d                	j	66e <polydiv+0x282>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	000c                	0xc
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3cc:	aa00                	fsd	fs0,16(a2)
     3ce:	000c                	0xc
     3d0:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d2:	5e00                	lw	s0,56(a2)
     3d4:	0cc0                	addi	s0,sp,596
        for (j = size_b -1; j >= 0; j = j-1){
     3d6:	0000                	unimp
     3d8:	0ccc                	addi	a1,sp,596
     3da:	0000                	unimp
     3dc:	0001                	nop
         array_add(product2,line[i],size_a+size_b-1);
     3de:	dc59                	beqz	s0,37c <polymult2+0xee>
     3e0:	000c                	0xc
     3e2:	e600                	fsw	fs0,8(a2)
     3e4:	000c                	0xc
        for(i = 0; i < size_b; ++i){
     3e6:	0100                	addi	s0,sp,128
     3e8:	5d00                	lw	s0,56(a0)
     3ea:	0ce6                	slli	s9,s9,0x19
    int v[size_N];
     3ec:	0000                	unimp
     3ee:	0cec                	addi	a1,sp,604
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3f0:	0000                	unimp
    int v[size_N];
     3f2:	7f7d0003          	lb	zero,2039(s10) # 17f7 <result+0x193>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3f6:	ec9f 000c ee00      	0xee00000cec9f
     3fc:	000c                	0xc
     3fe:	0100                	addi	s0,sp,128
     400:	5d00                	lw	s0,56(a0)
     402:	0cee                	slli	s9,s9,0x1b
     404:	0000                	unimp
     406:	0d00                	addi	s0,sp,656
     408:	0000                	unimp
     40a:	0001                	nop
     40c:	005e                	c.slli	zero,0x17
     40e:	000d                	c.nop	3
     410:	0a00                	addi	s0,sp,272
    int v[size_N];
     412:	000d                	c.nop	3
     414:	0100                	addi	s0,sp,128
     416:	5900                	lw	s0,48(a0)
    int q[size_N];
     418:	0d0a                	slli	s10,s10,0x2
     41a:	0000                	unimp
     41c:	0d10                	addi	a2,sp,656
    int num_temp[size_N];
     41e:	0000                	unimp
     420:	7f790003          	lb	zero,2039(s2) # 17f7 <result+0x193>
    int denum_temp[size_D];
     424:	109f 000d 1200      	0x1200000d109f
    int num_temp[size_N];
     42a:	000d                	c.nop	3
    int denum_temp[size_D];
     42c:	0100                	addi	s0,sp,128
     42e:	5900                	lw	s0,48(a0)
	...
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     438:	0bc2                	slli	s7,s7,0x10
     43a:	0000                	unimp
     43c:	0bd6                	slli	s7,s7,0x15
    int v[size_N];
     43e:	0000                	unimp
     440:	0001                	nop
    int denum_temp[size_D];
     442:	d65a                	sw	s6,44(sp)
     444:	2200000b          	0x2200000b
   if(size_N == 106) {
     448:	000c                	0xc
     44a:	0100                	addi	s0,sp,128
     array_equ(num_temp, num, size_N - 1);   // 105 elemani ücer ücer yap...
     44c:	5800                	lw	s0,48(s0)
     44e:	0c22                	slli	s8,s8,0x8
     450:	0000                	unimp
     452:	0c4a                	slli	s8,s8,0x12
     454:	0000                	unimp
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     456:	0004                	0x4
     458:	9f5a01f3          	0x9f5a01f3
	...
     464:	0bc2                	slli	s7,s7,0x10
        array_mod(num_temp, mod, size_N - 1);
     466:	0000                	unimp
        while(num_temp[size_N - 1] < 0){
     468:	0bde                	slli	s7,s7,0x17
     46a:	0000                	unimp
     46c:	0001                	nop
     46e:	000bde5b          	0xbde5b
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     472:	3000                	fld	fs0,32(s0)
     474:	000c                	0xc
     476:	0100                	addi	s0,sp,128
     478:	6200                	flw	fs0,0(a2)
     array_equ(num_temp, num, size_N );
     47a:	0c30                	addi	a2,sp,536
     47c:	0000                	unimp
     47e:	0c38                	addi	a4,sp,536
     480:	0000                	unimp
        array_mod(num_temp, mod, size_N);
     482:	0004                	0x4
     484:	9f5b01f3          	0x9f5b01f3
     488:	0c38                	addi	a4,sp,536
    array_equ(denum_temp,denum,size_D);
     48a:	0000                	unimp
     48c:	0c4a                	slli	s8,s8,0x12
     48e:	0000                	unimp
     490:	0001                	nop
	array_mod(denum_temp,mod,size_D);
     492:	0062                	c.slli	zero,0x18
     494:	0000                	unimp
     496:	0000                	unimp
     498:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     49a:	c200                	sw	s0,0(a2)
     49c:	d200000b          	0xd200000b
    for (i = size_D-1; i >= 0; i = i-1){
     4a0:	0100000b          	0x100000b
     4a4:	5c00                	lw	s0,56(s0)
     4a6:	0bd2                	slli	s7,s7,0x14
     4a8:	0000                	unimp
     4aa:	0c08                	addi	a0,sp,528
    for (i = 0; i < size_N; ++i){
     4ac:	0000                	unimp
     4ae:	0001                	nop
        if ( (b_N*u)%mod == 1 )
     4b0:	0859                	addi	a6,a6,22
    for (u = 0; u < mod; ++u){
     4b2:	000c                	0xc
     4b4:	0b00                	addi	s0,sp,400
     4b6:	000c                	0xc
     4b8:	0100                	addi	s0,sp,128
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4ba:	5b00                	lw	s0,48(a4)
     4bc:	00000c0b          	0xc0b
     4c0:	0c4a                	slli	s8,s8,0x12
        q[i] = 0;
     4c2:	0000                	unimp
     4c4:	0004                	0x4
     4c6:	9f5c01f3          	0x9f5c01f3
	...
        v[i] = 0;
     4d2:	0bc2                	slli	s7,s7,0x10
    for (i = 0; i < size_N; ++i){
     4d4:	0000                	unimp
     4d6:	0be9                	addi	s7,s7,26
        if( denum_temp[i] != 0 )
     4d8:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     4da:	0001                	nop
     4dc:	e95d                	bnez	a0,592 <polydiv+0x1a6>
        if ( (b_N*u)%mod == 1 )
     4de:	0400000b          	0x400000b
     4e2:	000c                	0xc
     4e4:	0100                	addi	s0,sp,128
     4e6:	6300                	flw	fs0,0(a4)
    for (u = 0; u < mod; ++u){
     4e8:	0c04                	addi	s1,sp,528
     4ea:	0000                	unimp
        if( num_temp[i] != 0 )
     4ec:	0c4a                	slli	s8,s8,0x12
    for (i = size_N-1; i >= 0; i = i-1){
     4ee:	0000                	unimp
     4f0:	0004                	0x4
     4f2:	9f5d01f3          	0x9f5d01f3
	...
         if(size_N == 106) {
     4fe:	0bc2                	slli	s7,s7,0x10
     500:	0000                	unimp
        v[(d-d2)] = u*r_d;
     502:	0be9                	addi	s7,s7,26
     504:	0000                	unimp
     506:	0001                	nop
     508:	e95e                	fsw	fs7,144(sp)
     50a:	3400000b          	0x3400000b
     50e:	000c                	0xc
         if(size_N == 106) {
     510:	0100                	addi	s0,sp,128
     512:	6400                	flw	fs0,8(s0)
            array_mod(v, mod, size_N - 1);
     514:	0c34                	addi	a3,sp,536
     516:	0000                	unimp
     518:	0c38                	addi	a4,sp,536
     51a:	0000                	unimp
     51c:	0004                	0x4
            while(v[size_N - 1] < 0){
     51e:	9f5e01f3          	0x9f5e01f3
     522:	0c38                	addi	a4,sp,536
     524:	0000                	unimp
            v[size_N - 1] = v[size_N - 1] % mod;
     526:	0c4a                	slli	s8,s8,0x12
     528:	0000                	unimp
     52a:	0001                	nop
     52c:	0064                	addi	s1,sp,12
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     52e:	0000                	unimp
     530:	0000                	unimp
     532:	0000                	unimp
     534:	0400                	addi	s0,sp,512
     536:	000c                	0xc
     538:	0b00                	addi	s0,sp,400
     53a:	000c                	0xc
        if(size_N == 106) {
     53c:	0100                	addi	s0,sp,128
     53e:	5a00                	lw	s0,48(a2)
     540:	00000c0b          	0xc0b
            array_mod(product, mod, size_N - 1);
     544:	0c32                	slli	s8,s8,0xc
     546:	0000                	unimp
     548:	0001                	nop
     54a:	000c3863          	0xc3863
            while(product[size_N - 1] < 0){
     54e:	4a00                	lw	s0,16(a2)
     550:	000c                	0xc
     552:	0100                	addi	s0,sp,128
     554:	6300                	flw	fs0,0(a4)
	...
            product[size_N - 1] = product[size_N - 1] % mod;
     55e:	0c1c                	addi	a5,sp,528
     560:	0000                	unimp
     562:	0c2e                	slli	s8,s8,0xb
        for (i = 0; i < size_N; ++i){
     564:	0000                	unimp
     566:	0001                	nop
 	if(size_N == 106) {
     568:	3859                	jal	fffffdfe <_stack_start+0xfffefdfe>
     56a:	000c                	0xc
            array_mod(num_temp, mod, size_N - 1);
     56c:	4200                	lw	s0,0(a2)
     56e:	000c                	0xc
     570:	0100                	addi	s0,sp,128
     572:	5900                	lw	s0,48(a0)
     574:	0c42                	slli	s8,s8,0x10
            while(num_temp[size_N - 1] < 0){
     576:	0000                	unimp
     578:	0c48                	addi	a0,sp,532
     57a:	0000                	unimp
     57c:	7f790003          	lb	zero,2039(s2)
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     580:	489f 000c 4a00      	0x4a00000c489f
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     586:	000c                	0xc
     588:	0100                	addi	s0,sp,128
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     58a:	5900                	lw	s0,48(a0)
	...
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     594:	08ce                	slli	a7,a7,0x13
     596:	0000                	unimp
            array_mod(q, mod, size_N - 1);
     598:	0912                	slli	s2,s2,0x4
     59a:	0000                	unimp
     59c:	0001                	nop
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     59e:	125a                	slli	tp,tp,0x36
            array_mod(q, mod, size_N - 1);
     5a0:	0009                	c.nop	2
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     5a2:	d600                	sw	s0,40(a2)
     5a4:	000a                	c.slli	zero,0x2
            array_mod(q, mod, size_N - 1);
     5a6:	0100                	addi	s0,sp,128
            while(q[size_N - 1] < 0){
     5a8:	6200                	flw	fs0,0(a2)
     5aa:	0ad6                	slli	s5,s5,0x15
     5ac:	0000                	unimp
     5ae:	0afa                	slli	s5,s5,0x1e
            q[size_N - 1] = q[size_N - 1] % mod;
     5b0:	0000                	unimp
     5b2:	7f850003          	lb	zero,2040(a0) # fffed7f8 <_stack_start+0xfffdd7f8>
     5b6:	fa9f 000a 1a00      	0x1a00000afa9f
                v[size_N - 1] = v[size_N - 1]+mod;
     5bc:	0400000b          	0x400000b
     5c0:	f300                	fsw	fs0,32(a4)
            array_mod(v, mod, size_N);
     5c2:	5a01                	li	s4,-32
     5c4:	1a9f 000b ae00      	0xae00000b1a9f
     5ca:	0100000b          	0x100000b
                product[size_N - 1] = product[size_N - 1]+mod;
     5ce:	6200                	flw	fs0,0(a2)
     5d0:	0bae                	slli	s7,s7,0xb
     5d2:	0000                	unimp
            array_mod(product, mod, size_N);
     5d4:	0bc2                	slli	s7,s7,0x10
     5d6:	0000                	unimp
     5d8:	7f850003          	lb	zero,2040(a0)
     5dc:	009f 0000 0000      	0x9f
            num_temp[i] = num_temp[i] - product[i];
     5e2:	0000                	unimp
     5e4:	ce00                	sw	s0,24(a2)
     5e6:	0008                	0x8
     5e8:	0a00                	addi	s0,sp,272
        for (i = 0; i < size_N; ++i){
     5ea:	0009                	c.nop	2
     5ec:	0100                	addi	s0,sp,128
            num_temp[i] = num_temp[i] - product[i];
     5ee:	5b00                	lw	s0,48(a4)
     5f0:	090a                	slli	s2,s2,0x2
     5f2:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     5f4:	0b02                	c.slli64	s6
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     5f6:	0000                	unimp
     5f8:	0001                	nop
     5fa:	000b0267          	jalr	tp,s6
            array_mod(num_temp, mod, size_N);
     5fe:	1a00                	addi	s0,sp,304
     600:	0400000b          	0x400000b
     604:	f300                	fsw	fs0,32(a4)
            array_add(q, v, size_N );
     606:	5b01                	li	s6,-32
     608:	1a9f 000b c200      	0xc200000b1a9f
            array_mod(q, mod, size_N);
     60e:	0100000b          	0x100000b
     612:	6700                	flw	fs0,8(a4)
	...
        for (i = size_N-1; i >= 0; i = i-1){
     61c:	08ce                	slli	a7,a7,0x13
     61e:	0000                	unimp
     620:	090e                	slli	s2,s2,0x3
     622:	0000                	unimp
     624:	0001                	nop
     626:	0e5c                	addi	a5,sp,788
                q[size_N - 1] = q[size_N - 1]+mod;
     628:	0009                	c.nop	2
     62a:	fe00                	fsw	fs0,56(a2)
     62c:	000a                	c.slli	zero,0x2
     62e:	0100                	addi	s0,sp,128
            if( num_temp[i] != 0 )
     630:	6600                	flw	fs0,8(a2)
        for (i = size_N-1; i >= 0; i = i-1){
     632:	0afe                	slli	s5,s5,0x1f
     634:	0000                	unimp
            v[i] = 0;
     636:	0b1a                	slli	s6,s6,0x6
     638:	0000                	unimp
     63a:	0004                	0x4
     63c:	9f5c01f3          	0x9f5c01f3
        for (i = 0; i < size_N; ++i){
     640:	0b1a                	slli	s6,s6,0x6
     642:	0000                	unimp
     644:	0bc2                	slli	s7,s7,0x10
    while (d >= d2){
     646:	0000                	unimp
     648:	0001                	nop
    if(size_N == 106) {
     64a:	0066                	c.slli	zero,0x19
     64c:	0000                	unimp
     64e:	0000                	unimp
     650:	0000                	unimp
     array_equ(result, q, size_N - 1);   // 105 elemani ücer ücer yap...
     652:	5c00                	lw	s0,56(s0)
     654:	000a                	c.slli	zero,0x2
     656:	6600                	flw	fs0,8(a2)
     658:	000a                	c.slli	zero,0x2
     65a:	0100                	addi	s0,sp,128
     65c:	5a00                	lw	s0,48(a2)
	...
     result[size_N - 1] = q[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     666:	0a76                	slli	s4,s4,0x1d
     668:	0000                	unimp
     66a:	0a95                	addi	s5,s5,5
     66c:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     66e:	0001                	nop
     670:	7a5a                	flw	fs4,180(sp)
        result[i] = num_temp[i-size_N];
     672:	8e00000b          	0x8e00000b
     676:	0100000b          	0x100000b
    for(i = size_N; i < (2*size_N); ++i){
     67a:	5a00                	lw	s0,48(a2)
	...
}
     684:	0a96                	slli	s5,s5,0x5
     686:	0000                	unimp
     688:	0aa9                	addi	s5,s5,10
     68a:	0000                	unimp
     68c:	0001                	nop
     68e:	8e5a                	mv	t3,s6
     690:	9e00000b          	0x9e00000b
     694:	0100000b          	0x100000b
     698:	5a00                	lw	s0,48(a2)
	...
     6a2:	0aaa                	slli	s5,s5,0xa
     6a4:	0000                	unimp
     6a6:	0ac6                	slli	s5,s5,0x11
        result[i] = num_temp[i-size_N];
     6a8:	0000                	unimp
     6aa:	0001                	nop
     6ac:	9e5a                	add	t3,t3,s6
     6ae:	ae00000b          	0xae00000b
     6b2:	0100000b          	0x100000b
    for(i = size_N; i < (2*size_N); ++i){
     6b6:	5a00                	lw	s0,48(a2)
	...
    int ri_2[size]; // MX-ring poly, a
     6c0:	0a10                	addi	a2,sp,272
     6c2:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6c4:	0ade                	slli	s5,s5,0x17
     6c6:	0000                	unimp
     6c8:	0002                	c.slli64	zero
     6ca:	0072                	c.slli	zero,0x1c
     6cc:	0ade                	slli	s5,s5,0x17
     6ce:	0000                	unimp
     6d0:	0af6                	slli	s5,s5,0x1d
     6d2:	0000                	unimp
     6d4:	0002                	c.slli64	zero
     6d6:	0084                	addi	s1,sp,64
     6d8:	0af6                	slli	s5,s5,0x1d
     6da:	0000                	unimp
     6dc:	0afa                	slli	s5,s5,0x1e
     6de:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     6e0:	0010                	0x10
     6e2:	0091                	addi	ra,ra,4
     6e4:	0085                	addi	ra,ra,1
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6e6:	2432                	fld	fs0,264(sp)
     6e8:	f0090f23          	sb	zero,-226(s2)
    int ri[size];
     6ec:	1c1a                	slli	s8,s8,0x26
     6ee:	f00a                	fsw	ft2,32(sp)
     6f0:	1c01                	addi	s8,s8,-32
    int ti_1[size]; // ti_1[0] = 1
     6f2:	0afa                	slli	s5,s5,0x1e
     6f4:	0000                	unimp
     6f6:	0b1a                	slli	s6,s6,0x6
    int ti[size];
     6f8:	0000                	unimp
     6fa:	00910013          	addi	zero,sp,9
    int qi_1[size];
     6fe:	235a01f3          	0x235a01f3
     702:	3201                	jal	2 <__DYNAMIC+0x2>
    int temp[size];
     704:	2324                	fld	fs1,64(a4)
     706:	1af0090f          	0x1af0090f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     70a:	0a1c                	addi	a5,sp,272
     70c:	01f0                	addi	a2,sp,204
    int ri_2[size]; // MX-ring poly, a
     70e:	1a1c                	addi	a5,sp,304
     710:	c200000b          	0xc200000b
    for (i = 0; i < size; ++i) {
     714:	0200000b          	0x200000b
        ti_2[i] = 0;
     718:	7200                	flw	fs0,32(a2)
	...
    array_equ(ri_2,polyR,size);
     722:	1400                	addi	s0,sp,544
     724:	000a                	c.slli	zero,0x2
     726:	1600                	addi	s0,sp,800
     728:	000a                	c.slli	zero,0x2
    array_equ(ri_1,polyf,size);
     72a:	0200                	addi	s0,sp,256
     72c:	3100                	fld	fs0,32(a0)
     72e:	169f 000a 1c00      	0x1c00000a169f
    ti_1[0] = 1;
     734:	000a                	c.slli	zero,0x2
     736:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     738:	5f00                	lw	s0,56(a4)
     73a:	0a20                	addi	s0,sp,280
     73c:	0000                	unimp
     73e:	0a26                	slli	s4,s4,0x9
            ti[i] = ti_2[i] - temp[i];
     740:	0000                	unimp
     742:	0001                	nop
     744:	2e5f 000a 3c00      	0x3c00000a2e5f
	array_mod(ri_2,mod,N+1);
     74a:	000a                	c.slli	zero,0x2
     74c:	0100                	addi	s0,sp,128
     74e:	5f00                	lw	s0,56(a4)
	array_mod(ri_1,mod,N+1);
     750:	0a46                	slli	s4,s4,0x11
     752:	0000                	unimp
     754:	00000a5b          	0xa5b
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     758:	0001                	nop
     75a:	5c5f 000a 6600      	0x6600000a5c5f
     760:	000a                	c.slli	zero,0x2
     762:	0500                	addi	s0,sp,640
        for (i = N + 1; i < (2 * N + 2); ++i) {
     764:	8200                	0x8200
     766:	3100                	fld	fs0,32(a0)
     768:	9f24                	0x9f24
     76a:	0a66                	slli	s4,s4,0x19
     76c:	0000                	unimp
     76e:	0a75                	addi	s4,s4,29
     770:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     772:	0001                	nop
     774:	765f 000a 8600      	0x8600000a765f
        array_mod(temp,mod,N+1);
     77a:	000a                	c.slli	zero,0x2
     77c:	0500                	addi	s0,sp,640
     77e:	8200                	0x8200
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     780:	3300                	fld	fs0,32(a4)
     782:	9f1e                	add	t5,t5,t2
     784:	0a86                	slli	s5,s5,0x1
     786:	0000                	unimp
     788:	0a96                	slli	s5,s5,0x5
     78a:	0000                	unimp
     78c:	0001                	nop
        array_equ(qi_1,res1,size);
     78e:	9659                	srai	a2,a2,0x36
     790:	000a                	c.slli	zero,0x2
     792:	9e00                	0x9e00
	array_mod(qi_1,mod,size);
     794:	000a                	c.slli	zero,0x2
     796:	0200                	addi	s0,sp,256
     798:	3000                	fld	fs0,32(s0)
     79a:	9e9f 000a a600      	0xa600000a9e9f
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7a0:	000a                	c.slli	zero,0x2
     7a2:	0100                	addi	s0,sp,128
     7a4:	5e00                	lw	s0,56(a2)
     7a6:	0aaa                	slli	s5,s5,0xa
     7a8:	0000                	unimp
     7aa:	0abc                	addi	a5,sp,344
         array_equ(temp,res2,size);
     7ac:	0000                	unimp
     7ae:	0005                	c.nop	1
     7b0:	0082                	c.slli64	ra
	array_mod(temp,mod,size);
     7b2:	2432                	fld	fs0,264(sp)
     7b4:	bc9f 000a d600      	0xd600000abc9f
        for (i = 0; i < N + 1; ++i) {
     7ba:	000a                	c.slli	zero,0x2
     7bc:	0100                	addi	s0,sp,128
     7be:	6800                	flw	fs0,16(s0)
     7c0:	0ad6                	slli	s5,s5,0x15
        array_mod(ti,mod,N+1);
     7c2:	0000                	unimp
     7c4:	0b56                	slli	s6,s6,0x15
     7c6:	0000                	unimp
     7c8:	0001                	nop
	array_equ(ri_2,ri_1,size);
     7ca:	565f 000b 5800      	0x5800000b565f
     7d0:	0300000b          	0x300000b
	array_equ(ri_1,ri,size);
     7d4:	7f00                	flw	fs0,56(a4)
     7d6:	9f7f                	0x9f7f
     7d8:	0b58                	addi	a4,sp,404
	array_equ(ti_2,ti_1,size);
     7da:	0000                	unimp
     7dc:	0b7a                	slli	s6,s6,0x1e
     7de:	0000                	unimp
     7e0:	0001                	nop
	array_equ(ti_1,ti,size);
     7e2:	7a5f 000b 8a00      	0x8a00000b7a5f
     7e8:	0100000b          	0x100000b
        for (i = 0; i < N + 1; ++i) {
     7ec:	5900                	lw	s0,48(a0)
     7ee:	0b8a                	slli	s7,s7,0x2
     7f0:	0000                	unimp
    while (controlR != 0) {
     7f2:	0b8c                	addi	a1,sp,464
     7f4:	0000                	unimp
        for (j = 0; j < mod; ++j) {
     7f6:	7f790003          	lb	zero,2039(s2)
     7fa:	8c9f 000b 8e00      	0x8e00000b8c9f
     800:	0100000b          	0x100000b
     804:	5900                	lw	s0,48(a0)
        for (i = 0; i < N + 1; ++i) {
     806:	0b8e                	slli	s7,s7,0x3
     808:	0000                	unimp
    }
     80a:	0b92                	slli	s7,s7,0x4
     80c:	0000                	unimp
     80e:	0001                	nop
     810:	925e                	add	tp,tp,s7
     812:	9c00000b          	0x9c00000b
     816:	0300000b          	0x300000b
     81a:	7e00                	flw	fs0,56(a2)
     81c:	9f7f                	0x9f7f
     81e:	0b9c                	addi	a5,sp,464
     820:	0000                	unimp
     822:	0b9e                	slli	s7,s7,0x7
     824:	0000                	unimp
     826:	0001                	nop
     828:	9e5e                	add	t3,t3,s7
     82a:	ae00000b          	0xae00000b
     82e:	0100000b          	0x100000b
     832:	6800                	flw	fs0,16(s0)
        ti_2[i] = 0;
     834:	0bae                	slli	s7,s7,0xb
     836:	0000                	unimp
     838:	0bbe                	slli	s7,s7,0xf
     83a:	0000                	unimp
        ti_1[i] = 0;
     83c:	0001                	nop
        ti_2[i] = 0;
     83e:	be5f 000b c000      	0xc000000bbe5f
        ti_1[i] = 0;
     844:	0300000b          	0x300000b
    for (i = 0; i < size; ++i) {
     848:	7f00                	flw	fs0,56(a4)
            ri[i - (N + 1)] = res[i];
     84a:	9f7f                	0x9f7f
     84c:	0bc0                	addi	s0,sp,468
     84e:	0000                	unimp
     850:	0bc2                	slli	s7,s7,0x10
        for (i = N + 1; i < (2 * N + 2); ++i) {
     852:	0000                	unimp
     854:	0001                	nop
            ri[i - (N + 1)] = res[i];
     856:	005f 0000 0000      	0x5f
            temp[i] = ri_2[i] - ri[i];
     85c:	0000                	unimp
     85e:	da00                	sw	s0,48(a2)
     860:	000a                	c.slli	zero,0x2
     862:	1a00                	addi	s0,sp,304
     864:	0600000b          	0x600000b
     868:	0300                	addi	s0,sp,384
     86a:	1a4c                	addi	a1,sp,308
        for (i = 0; i < N + 1; ++i) {
     86c:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     86e:	009f 0000 0000      	0x9f
        for (i = 0; i < N + 1; ++i) {
     874:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     876:	1000                	addi	s0,sp,32
     878:	000a                	c.slli	zero,0x2
     87a:	d600                	sw	s0,40(a2)
     87c:	000a                	c.slli	zero,0x2
     87e:	0100                	addi	s0,sp,128
     880:	6200                	flw	fs0,0(a2)
     882:	0ad6                	slli	s5,s5,0x15
     884:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     886:	0afa                	slli	s5,s5,0x1e
            ti[i] = ti_2[i] - temp[i];
     888:	0000                	unimp
     88a:	7f850003          	lb	zero,2040(a0)
        for (i = 0; i < N + 1; ++i) {
     88e:	fa9f 000a 1a00      	0x1a00000afa9f
            qi_1[i] = 0;
     894:	0400000b          	0x400000b
            controlR += ri[i];
     898:	f300                	fsw	fs0,32(a4)
     89a:	5a01                	li	s4,-32
            qi_1[i] = 0;
     89c:	1a9f 000b ae00      	0xae00000b1a9f
            controlR += ri[i];
     8a2:	0100000b          	0x100000b
            if (((ri_2[0] * j) % mod) == 1)
     8a6:	6200                	flw	fs0,0(a2)
     8a8:	0bae                	slli	s7,s7,0xb
     8aa:	0000                	unimp
     8ac:	0bc2                	slli	s7,s7,0x10
     8ae:	0000                	unimp
     8b0:	7f850003          	lb	zero,2040(a0)
     8b4:	009f 0000 0000      	0x9f
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8ba:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8bc:	ba00                	fsd	fs0,48(a2)
     8be:	0006                	c.slli	zero,0x1
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8c0:	2800                	fld	fs0,16(s0)
     8c2:	01000007          	0x1000007
     8c6:	5a00                	lw	s0,48(a2)
     8c8:	0728                	addi	a0,sp,904
     8ca:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8cc:	0729                	addi	a4,a4,10
int* generate_keys(int N, int p, int q){
     8ce:	0000                	unimp
     8d0:	0001                	nop
     8d2:	0007295b          	0x7295b
     8d6:	3400                	fld	fs0,40(s0)
     8d8:	0008                	0x8
     8da:	0400                	addi	s0,sp,512
     8dc:	f300                	fsw	fs0,32(a4)
     8de:	5a01                	li	s4,-32
     8e0:	349f 0008 4a00      	0x4a000008349f
     8e6:	0008                	0x8
     8e8:	0100                	addi	s0,sp,128
     8ea:	5a00                	lw	s0,48(a2)
     8ec:	084a                	slli	a6,a6,0x12
     8ee:	0000                	unimp
     8f0:	08ce                	slli	a7,a7,0x13
     8f2:	0000                	unimp
     8f4:	0004                	0x4
     8f6:	9f5a01f3          	0x9f5a01f3
	...
     902:	06ba                	slli	a3,a3,0xe
     904:	0000                	unimp
     906:	0724                	addi	s1,sp,904
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     908:	0000                	unimp
     90a:	0001                	nop
     90c:	0007245b          	0x7245b
     910:	4800                	lw	s0,16(s0)
     912:	01000007          	0x1000007
     916:	6b00                	flw	fs0,16(a4)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     918:	0748                	addi	a0,sp,900
     91a:	0000                	unimp
     91c:	0834                	addi	a3,sp,24
     91e:	0000                	unimp
     920:	0004                	0x4
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     922:	9f5b01f3          	0x9f5b01f3
     926:	0834                	addi	a3,sp,24
     928:	0000                	unimp
     92a:	084a                	slli	a6,a6,0x12
     92c:	0000                	unimp
     92e:	0001                	nop
     930:	00084a5b          	0x84a5b
     934:	ce00                	sw	s0,24(a2)
     936:	0008                	0x8
     938:	0400                	addi	s0,sp,512
     93a:	f300                	fsw	fs0,32(a4)
     93c:	5b01                	li	s6,-32
     93e:	009f 0000 0000      	0x9f
     944:	0000                	unimp
     946:	ba00                	fsd	fs0,48(a2)
     948:	0006                	c.slli	zero,0x1
     94a:	1e00                	addi	s0,sp,816
     94c:	01000007          	0x1000007
     950:	5c00                	lw	s0,56(s0)
     952:	071e                	slli	a4,a4,0x7
     954:	0000                	unimp
     956:	0814                	addi	a3,sp,16
     958:	0000                	unimp
     95a:	0001                	nop
     95c:	1459                	addi	s0,s0,-10
     95e:	0008                	0x8
     960:	2000                	fld	fs0,0(s0)
     962:	0008                	0x8
     964:	0300                	addi	s0,sp,384
     966:	8700                	0x8700
     968:	9f01                	0x9f01
     96a:	0820                	addi	s0,sp,24
     96c:	0000                	unimp
     96e:	0834                	addi	a3,sp,24
     970:	0000                	unimp
     972:	0004                	0x4
     974:	9f5c01f3          	0x9f5c01f3
     978:	0834                	addi	a3,sp,24
     97a:	0000                	unimp
     97c:	08ce                	slli	a7,a7,0x13
     97e:	0000                	unimp
     980:	0001                	nop
     982:	0059                	c.nop	22
     984:	0000                	unimp
     986:	0000                	unimp
     988:	0000                	unimp
     98a:	ba00                	fsd	fs0,48(a2)
     98c:	0006                	c.slli	zero,0x1
    int polyR[N+1];
     98e:	1e00                	addi	s0,sp,816
     990:	01000007          	0x1000007
     994:	5d00                	lw	s0,56(a0)
     996:	071e                	slli	a4,a4,0x7
     998:	0000                	unimp
     99a:	0816                	slli	a6,a6,0x5
     99c:	0000                	unimp
     99e:	0001                	nop
     9a0:	1662                	slli	a2,a2,0x38
    polyR[N] = 1;
     9a2:	0008                	0x8
     9a4:	3400                	fld	fs0,40(s0)
     9a6:	0008                	0x8
     9a8:	0400                	addi	s0,sp,512
     9aa:	f300                	fsw	fs0,32(a4)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9ac:	5d01                	li	s10,-32
     9ae:	349f 0008 ce00      	0xce000008349f
     9b4:	0008                	0x8
     9b6:	0100                	addi	s0,sp,128
     9b8:	6200                	flw	fs0,0(a2)
	...
     9c2:	080a                	slli	a6,a6,0x2
     9c4:	0000                	unimp
     9c6:	0834                	addi	a3,sp,24
     9c8:	0000                	unimp
     9ca:	0006                	c.slli	zero,0x1
     9cc:	0018bc03          	0x18bc03
     9d0:	9f00                	0x9f00
	...
     9da:	0714                	addi	a3,sp,896
     9dc:	0000                	unimp
     9de:	0820                	addi	s0,sp,24
     9e0:	0000                	unimp
     9e2:	0001                	nop
     9e4:	00082067          	0x82067
     9e8:	3400                	fld	fs0,40(s0)
     9ea:	0008                	0x8
     9ec:	0600                	addi	s0,sp,768
     9ee:	f300                	fsw	fs0,32(a4)
     9f0:	5c01                	li	s8,-32
     9f2:	1c31                	addi	s8,s8,-20
     9f4:	349f 0008 ce00      	0xce000008349f
     9fa:	0008                	0x8
     9fc:	0100                	addi	s0,sp,128
     9fe:	6700                	flw	fs0,8(a4)
	...
     a08:	0714                	addi	a3,sp,896
     a0a:	0000                	unimp
     a0c:	071e                	slli	a4,a4,0x7
     a0e:	0000                	unimp
    polyR[0] = -1;
     a10:	0002                	c.slli64	zero
     a12:	9f30                	0x9f30
    for(i = 1; i < N; ++i){
     a14:	071e                	slli	a4,a4,0x7
     a16:	0000                	unimp
     a18:	0729                	addi	a4,a4,10
     a1a:	0000                	unimp
    for (i = N; i < 55; ++i ){
     a1c:	0001                	nop
     a1e:	645f 0007 6800      	0x68000007645f
    for(i = 0; i < N; ++i){
     a24:	01000007          	0x1000007
        random_keys[i] = f[i];
     a28:	5900                	lw	s0,48(a0)
     a2a:	0768                	addi	a0,sp,908
     a2c:	0000                	unimp
    for(i = 0; i < N; ++i){
     a2e:	0772                	slli	a4,a4,0x1c
     a30:	0000                	unimp
     a32:	0001                	nop
     a34:	745f 0007 7f00      	0x7f000007745f
    for(i = N; i < (2*N); ++i){
     a3a:	01000007          	0x1000007
        random_keys[i] = g[i-N];
     a3e:	5e00                	lw	s0,56(a2)
     a40:	07ba                	slli	a5,a5,0xe
     a42:	0000                	unimp
     a44:	07be                	slli	a5,a5,0xf
    for(i = N; i < (2*N); ++i){
     a46:	0000                	unimp
     a48:	0002                	c.slli64	zero
    for(i = (2*N); i < (3*N); ++i){
     a4a:	9f30                	0x9f30
     a4c:	07be                	slli	a5,a5,0xf
     a4e:	0000                	unimp
    fp = ext_euclid(polyR, f, (N+1), p);
     a50:	07c9                	addi	a5,a5,18
     a52:	0000                	unimp
     a54:	0001                	nop
     a56:	ea5e                	fsw	fs7,20(sp)
     a58:	ee000007          	0xee000007
    for(i = (2*N); i < (3*N); ++i){
     a5c:	02000007          	0x2000007
        random_keys[i] = fp[i-(2*N)];
     a60:	3000                	fld	fs0,32(s0)
     a62:	ee9f 0007 f800      	0xf8000007ee9f
    for(i = (2*N); i < (3*N); ++i){
     a68:	01000007          	0x1000007
    fq = ext_euclid(polyR, f, (N+1), q);
     a6c:	5e00                	lw	s0,56(a2)
     a6e:	0806                	slli	a6,a6,0x1
     a70:	0000                	unimp
     a72:	0854                	addi	a3,sp,20
     a74:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     a76:	0001                	nop
     a78:	545f 0008 5a00      	0x5a000008545f
        random_keys[i] = fq[i-(3*N)];
     a7e:	0008                	0x8
     a80:	0300                	addi	s0,sp,384
     a82:	7f00                	flw	fs0,56(a4)
     a84:	9f7f                	0x9f7f
    for(i = (3*N); i < (4*N); ++i){
     a86:	085a                	slli	a6,a6,0x16
     a88:	0000                	unimp
    fg = polymult2(fq, N, g, N, 0);
     a8a:	085c                	addi	a5,sp,20
     a8c:	0000                	unimp
     a8e:	0001                	nop
     a90:	5c5f 0008 6e00      	0x6e0000085c5f
    for(i = 0; i < (2*N-1); ++i){
     a96:	0008                	0x8
     a98:	0100                	addi	s0,sp,128
     a9a:	5e00                	lw	s0,56(a2)
     a9c:	086e                	slli	a6,a6,0x1b
     a9e:	0000                	unimp
     aa0:	0872                	slli	a6,a6,0x1c
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     aa2:	0000                	unimp
     aa4:	7f7e0003          	lb	zero,2039(t3) # 177f7 <_stack_start+0x77f7>
     aa8:	729f 0008 8800      	0x88000008729f
    for(i = (4*N); i < (5*N); ++i){
     aae:	0008                	0x8
     ab0:	0100                	addi	s0,sp,128
     ab2:	5e00                	lw	s0,56(a2)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     ab4:	0888                	addi	a0,sp,80
     ab6:	0000                	unimp
     ab8:	088c                	addi	a1,sp,80
     aba:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     abc:	7f7e0003          	lb	zero,2039(t3)
     ac0:	8c9f 0008 a200      	0xa20000088c9f
        random_keys[i] = polyR[i-(5*N)];
     ac6:	0008                	0x8
     ac8:	0100                	addi	s0,sp,128
     aca:	5e00                	lw	s0,56(a2)
     acc:	08a2                	slli	a7,a7,0x8
    for(i = (5*N); i < (6*N+1); ++i){
     ace:	0000                	unimp
     ad0:	08a4                	addi	s1,sp,88
     ad2:	0000                	unimp
     ad4:	7f7e0003          	lb	zero,2039(t3)
     ad8:	a49f 0008 a600      	0xa6000008a49f
}
     ade:	0008                	0x8
     ae0:	0100                	addi	s0,sp,128
     ae2:	5e00                	lw	s0,56(a2)
     ae4:	08ba                	slli	a7,a7,0xe
     ae6:	0000                	unimp
     ae8:	08be                	slli	a7,a7,0xf
     aea:	0000                	unimp
     aec:	0001                	nop
     aee:	be5f 0008 cc00      	0xcc000008be5f
     af4:	0008                	0x8
     af6:	0300                	addi	s0,sp,384
     af8:	7f00                	flw	fs0,56(a4)
     afa:	9f7f                	0x9f7f
     afc:	08cc                	addi	a1,sp,84
     afe:	0000                	unimp
     b00:	08ce                	slli	a7,a7,0x13
     b02:	0000                	unimp
     b04:	0001                	nop
     b06:	005f 0000 0000      	0x5f
     b0c:	0000                	unimp
     b0e:	fa00                	fsw	fs0,48(a2)
     b10:	34000007          	0x34000007
     b14:	0008                	0x8
     b16:	0100                	addi	s0,sp,128
     b18:	5e00                	lw	s0,56(a2)
        polyR[i] = 0;
     b1a:	08a6                	slli	a7,a7,0x9
     b1c:	0000                	unimp
     b1e:	08ce                	slli	a7,a7,0x13
     b20:	0000                	unimp
     b22:	0001                	nop
    for(i = 1; i < N; ++i){
     b24:	005e                	c.slli	zero,0x17
     b26:	0000                	unimp
        f[i] = 0;
     b28:	0000                	unimp
     b2a:	0000                	unimp
     b2c:	1200                	addi	s0,sp,288
     b2e:	18000007          	0x18000007
     b32:	0008                	0x8
     b34:	0200                	addi	s0,sp,256
        g[i] = 0;
     b36:	8300                	0x8300
     b38:	3400                	fld	fs0,40(s0)
     b3a:	0008                	0x8
     b3c:	ce00                	sw	s0,24(a2)
     b3e:	0008                	0x8
    for (i = N; i < 55; ++i ){
     b40:	0200                	addi	s0,sp,256
     b42:	8300                	0x8300
	...
        random_keys[i] = f[i];
     b4c:	1200                	addi	s0,sp,288
     b4e:	1a000007          	0x1a000007
     b52:	0008                	0x8
    for(i = 0; i < N; ++i){
     b54:	0200                	addi	s0,sp,256
        random_keys[i] = f[i];
     b56:	8400                	0x8400
    for(i = 0; i < N; ++i){
     b58:	3400                	fld	fs0,40(s0)
        random_keys[i] = g[i-N];
     b5a:	0008                	0x8
     b5c:	ce00                	sw	s0,24(a2)
     b5e:	0008                	0x8
     b60:	0200                	addi	s0,sp,256
     b62:	8400                	0x8400
	...
        random_keys[i] = fp[i-(2*N)];
     b6c:	1200                	addi	s0,sp,288
     b6e:	22000007          	0x22000007
     b72:	0008                	0x8
    for(i = (2*N); i < (3*N); ++i){
     b74:	0200                	addi	s0,sp,256
     b76:	8800                	0x8800
     b78:	3400                	fld	fs0,40(s0)
        random_keys[i] = fq[i-(3*N)];
     b7a:	0008                	0x8
     b7c:	ce00                	sw	s0,24(a2)
     b7e:	0008                	0x8
     b80:	0200                	addi	s0,sp,256
     b82:	8800                	0x8800
	...
    for(i = (3*N); i < (4*N); ++i){
     b8c:	1200                	addi	s0,sp,288
        fg[i] = fg[i]*p;
     b8e:	1e000007          	0x1e000007
    for(i = 0; i < (2*N-1); ++i){
     b92:	0008                	0x8
        fg[i] = fg[i]*p;
     b94:	0200                	addi	s0,sp,256
     b96:	8600                	0x8600
     b98:	1e00                	addi	s0,sp,816
     b9a:	0008                	0x8
    for(i = 0; i < (2*N-1); ++i){
     b9c:	2000                	fld	fs0,0(s0)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b9e:	0008                	0x8
     ba0:	0c00                	addi	s0,sp,528
     ba2:	8800                	0x8800
     ba4:	8700                	0x8700
     ba6:	3201                	jal	4a6 <polydiv+0xba>
     ba8:	2324                	fld	fs1,64(a4)
    for(i = (4*N); i < (5*N); ++i){
     baa:	1af0090f          	0x1af0090f
        random_keys[i] = polyR[i-(5*N)];
     bae:	201c                	fld	fa5,0(s0)
     bb0:	0008                	0x8
     bb2:	2200                	fld	fs0,0(a2)
     bb4:	0008                	0x8
     bb6:	0d00                	addi	s0,sp,656
     bb8:	8800                	0x8800
     bba:	f300                	fsw	fs0,32(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     bbc:	5c01                	li	s8,-32
        random_keys[i] = polyR[i-(5*N)];
     bbe:	2432                	fld	fs0,264(sp)
    for(i = (5*N); i < (6*N+1); ++i){
     bc0:	f0090f23          	sb	zero,-226(s2)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bc4:	1c1a                	slli	s8,s8,0x26
     bc6:	0834                	addi	a3,sp,24
     bc8:	0000                	unimp
     bca:	08ce                	slli	a7,a7,0x13
     bcc:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bce:	0002                	c.slli64	zero
     bd0:	0086                	slli	ra,ra,0x1
	...
     bda:	0712                	slli	a4,a4,0x4
     bdc:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bde:	0826                	slli	a6,a6,0x9
     be0:	0000                	unimp
     be2:	0002                	c.slli64	zero
     be4:	008a                	slli	ra,ra,0x2
     be6:	0834                	addi	a3,sp,24
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     be8:	0000                	unimp
    temp = polymult(public_key,N,random_val,48,q,0);
     bea:	08ce                	slli	a7,a7,0x13
     bec:	0000                	unimp
     bee:	0002                	c.slli64	zero
     bf0:	008a                	slli	ra,ra,0x2
	...
     bfa:	0712                	slli	a4,a4,0x4
	array_add(temp,message,48);
     bfc:	0000                	unimp
     bfe:	0824                	addi	s1,sp,24
     c00:	0000                	unimp
    temp = polymult(public_key,N,random_val,48,q,0);
     c02:	0002                	c.slli64	zero
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c04:	0089                	addi	ra,ra,2
     c06:	0824                	addi	s1,sp,24
	array_add(temp,message,48);
     c08:	0000                	unimp
     c0a:	0826                	slli	a6,a6,0x9
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c0c:	0000                	unimp
     c0e:	000d                	c.nop	3
     c10:	008a                	slli	ra,ra,0x2
     c12:	325c01f3          	0x325c01f3
     c16:	2324                	fld	fs1,64(a4)
     c18:	1af0090f          	0x1af0090f
    for(i = (2*N); i < (3*N); ++i){
     c1c:	341c                	fld	fa5,40(s0)
     c1e:	0008                	0x8
     c20:	ce00                	sw	s0,24(a2)
     c22:	0008                	0x8
     c24:	0200                	addi	s0,sp,256
     c26:	8900                	0x8900
	...
}
     c30:	1400                	addi	s0,sp,544
     c32:	0e000007          	0xe000007
     c36:	0008                	0x8
        CT[i-(2*N)] = CT[i];
     c38:	0200                	addi	s0,sp,256
     c3a:	7200                	flw	fs0,32(a2)
     c3c:	0e00                	addi	s0,sp,784
     c3e:	0008                	0x8
    for(i = (2*N); i < (3*N); ++i){
     c40:	1c00                	addi	s0,sp,560
     c42:	0008                	0x8
        CT[i-(2*N)] = CT[i];
     c44:	0200                	addi	s0,sp,256
     c46:	8500                	0x8500
    for(i = (2*N); i < (3*N); ++i){
     c48:	1c00                	addi	s0,sp,560
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c4a:	0008                	0x8
     c4c:	2000                	fld	fs0,0(s0)
     c4e:	0008                	0x8
     c50:	0c00                	addi	s0,sp,528
    for(i = (2*N); i < ((2*N)+N); ++i){
     c52:	8900                	0x8900
     c54:	8700                	0x8700
     c56:	3201                	jal	556 <polydiv+0x16a>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c58:	2324                	fld	fs1,64(a4)
     c5a:	1af0090f          	0x1af0090f
     c5e:	201c                	fld	fa5,0(s0)
     c60:	0008                	0x8
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c62:	2400                	fld	fs0,8(s0)
     c64:	0008                	0x8
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c66:	0d00                	addi	s0,sp,656
     c68:	8900                	0x8900
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c6a:	f300                	fsw	fs0,32(a4)
     c6c:	5c01                	li	s8,-32
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c6e:	2432                	fld	fs0,264(sp)
     c70:	f0090f23          	sb	zero,-226(s2)
     c74:	1c1a                	slli	s8,s8,0x26
     c76:	0824                	addi	s1,sp,24
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c78:	0000                	unimp
     c7a:	0826                	slli	a6,a6,0x9
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c7c:	0000                	unimp
     c7e:	008a000f          	0x8a000f
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c82:	325c01f3          	0x325c01f3
     c86:	2324                	fld	fs1,64(a4)
     c88:	1af0090f          	0x1af0090f
     c8c:	2431                	jal	e98 <memset+0x32>
     c8e:	341c                	fld	fa5,40(s0)
     c90:	0008                	0x8
    for(i = (2*N); i < ((2*N)+N); ++i){
     c92:	ce00                	sw	s0,24(a2)
     c94:	0008                	0x8
     c96:	0200                	addi	s0,sp,256
     c98:	7200                	flw	fs0,32(a2)
	...
    for (i = 0; i < N; ++i){
     ca2:	6400                	flw	fs0,8(s0)
     ca4:	7e000007          	0x7e000007
    c = polymult2(secret_key_fp,N,a2,N,0);
     ca8:	01000007          	0x1000007
     cac:	5a00                	lw	s0,48(a2)
     cae:	084a                	slli	a6,a6,0x12
     cb0:	0000                	unimp
     cb2:	0876                	slli	a6,a6,0x1d
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cb4:	0000                	unimp
     cb6:	0001                	nop
     cb8:	005a                	c.slli	zero,0x16
     cba:	0000                	unimp
     cbc:	0000                	unimp
     cbe:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     cc0:	8e00                	0x8e00
     cc2:	92000007          	0x92000007
}
     cc6:	01000007          	0x1000007
     cca:	5a00                	lw	s0,48(a2)
     ccc:	0792                	slli	a5,a5,0x4
     cce:	0000                	unimp
     cd0:	00000793          	li	a5,0
     cd4:	0001                	nop
     cd6:	0000005b          	0x5b
     cda:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     cdc:	0000                	unimp
     cde:	ac00                	fsd	fs0,24(s0)
     ce0:	b0000007          	0xb0000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     ce4:	01000007          	0x1000007
        a2[i-(2*N)] = a2[i];
     ce8:	5a00                	lw	s0,48(a2)
     cea:	07b0                	addi	a2,sp,968
    for(i = (2*N); i < ((2*N)+N); ++i){
     cec:	0000                	unimp
        if(a2[i] <= q/2)
     cee:	07b1                	addi	a5,a5,12
     cf0:	0000                	unimp
     cf2:	0001                	nop
            a2[i] = (-1)*(q-a2[i]);
     cf4:	0000005b          	0x5b
     cf8:	0000                	unimp
    for (i = 0; i < N; ++i){
     cfa:	0000                	unimp
     cfc:	1400                	addi	s0,sp,544
     cfe:	48000007          	0x48000007
        c2[i-(2*N)] = c2[i];
     d02:	02000007          	0x2000007
     d06:	3100                	fld	fs0,32(a0)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d08:	489f 0007 ee00      	0xee000007489f
        c2[i-(2*N)] = c2[i];
     d0e:	02000007          	0x2000007
  jal x0, default_exc_handler
     d12:	3000                	fld	fs0,32(s0)
     d14:	ee9f 0007 0600      	0x6000007ee9f
  mv  x2, x1
     d1a:	0008                	0x8
  mv  x3, x1
     d1c:	0100                	addi	s0,sp,128
  mv  x4, x1
     d1e:	5f00                	lw	s0,56(a4)
  mv  x5, x1
     d20:	0834                	addi	a3,sp,24
  mv  x6, x1
     d22:	0000                	unimp
  mv  x7, x1
     d24:	084a                	slli	a6,a6,0x12
  mv  x8, x1
     d26:	0000                	unimp
  mv  x9, x1
     d28:	0002                	c.slli64	zero
  mv x10, x1
     d2a:	9f31                	0x9f31
  mv x11, x1
     d2c:	084a                	slli	a6,a6,0x12
  mv x12, x1
     d2e:	0000                	unimp
  mv x13, x1
     d30:	0890                	addi	a2,sp,80
  mv x14, x1
     d32:	0000                	unimp
  mv x15, x1
     d34:	0002                	c.slli64	zero
  mv x16, x1
     d36:	9f30                	0x9f30
  mv x17, x1
     d38:	0890                	addi	a2,sp,80
  mv x18, x1
     d3a:	0000                	unimp
  mv x19, x1
     d3c:	08ba                	slli	a7,a7,0xe
  mv x20, x1
     d3e:	0000                	unimp
  mv x21, x1
     d40:	0001                	nop
  mv x22, x1
     d42:	005f 0000 0000      	0x5f
  mv x25, x1
     d48:	0000                	unimp
  mv x26, x1
     d4a:	1200                	addi	s0,sp,288
  mv x27, x1
     d4c:	20000007          	0x20000007
  mv x29, x1
     d50:	0008                	0x8
  mv x30, x1
     d52:	0100                	addi	s0,sp,128
  mv x31, x1
     d54:	6700                	flw	fs0,8(a4)
  la   x2, _stack_start
     d56:	0820                	addi	s0,sp,24
     d58:	0000                	unimp
     d5a:	0834                	addi	a3,sp,24
     d5c:	0000                	unimp
  la x26, _bss_start
     d5e:	0006                	c.slli	zero,0x1
     d60:	315c01f3          	0x315c01f3
     d64:	9f1c                	0x9f1c
  la x27, _bss_end
     d66:	0834                	addi	a3,sp,24
     d68:	0000                	unimp
     d6a:	08ce                	slli	a7,a7,0x13
     d6c:	0000                	unimp
  bge x26, x27, zero_loop_end
     d6e:	0001                	nop
     d70:	00000067          	jr	zero # 0 <__DYNAMIC>
  sw x0, 0(x26)
     d74:	0000                	unimp
  addi x26, x26, 4
     d76:	0000                	unimp
  ble x26, x27, zero_loop
     d78:	1200                	addi	s0,sp,288
     d7a:	20000007          	0x20000007
  addi x10, x0, 0
     d7e:	0008                	0x8
  addi x11, x0, 0
     d80:	0100                	addi	s0,sp,128
     d82:	6700                	flw	fs0,8(a4)
  jal x1, main
     d84:	0820                	addi	s0,sp,24
     d86:	0000                	unimp
     d88:	0834                	addi	a3,sp,24
     d8a:	0000                	unimp
     d8c:	0006                	c.slli	zero,0x1
     d8e:	315c01f3          	0x315c01f3
     d92:	9f1c                	0x9f1c
     d94:	0834                	addi	a3,sp,24
     d96:	0000                	unimp
     d98:	08ce                	slli	a7,a7,0x13
     d9a:	0000                	unimp
     d9c:	0001                	nop
     d9e:	00000067          	jr	zero # 0 <__DYNAMIC>
     da2:	0000                	unimp
     da4:	0000                	unimp
     da6:	1200                	addi	s0,sp,288
     da8:	20000007          	0x20000007
     dac:	0008                	0x8
     dae:	0100                	addi	s0,sp,128
     db0:	6700                	flw	fs0,8(a4)
     db2:	0820                	addi	s0,sp,24
     db4:	0000                	unimp
     db6:	0834                	addi	a3,sp,24
     db8:	0000                	unimp
     dba:	0006                	c.slli	zero,0x1
     dbc:	315c01f3          	0x315c01f3
     dc0:	9f1c                	0x9f1c
     dc2:	0834                	addi	a3,sp,24
     dc4:	0000                	unimp
     dc6:	08ce                	slli	a7,a7,0x13
     dc8:	0000                	unimp
     dca:	0001                	nop
     dcc:	00000067          	jr	zero # 0 <__DYNAMIC>
     dd0:	0000                	unimp
     dd2:	0000                	unimp
     dd4:	1200                	addi	s0,sp,288
     dd6:	20000007          	0x20000007
     dda:	0008                	0x8
     ddc:	0100                	addi	s0,sp,128
     dde:	6700                	flw	fs0,8(a4)
     de0:	0820                	addi	s0,sp,24
     de2:	0000                	unimp
     de4:	0834                	addi	a3,sp,24
     de6:	0000                	unimp
     de8:	0006                	c.slli	zero,0x1
     dea:	315c01f3          	0x315c01f3
     dee:	9f1c                	0x9f1c
     df0:	0834                	addi	a3,sp,24
     df2:	0000                	unimp
     df4:	08ce                	slli	a7,a7,0x13
     df6:	0000                	unimp
     df8:	0001                	nop
     dfa:	00000067          	jr	zero # 0 <__DYNAMIC>
     dfe:	0000                	unimp
     e00:	0000                	unimp
     e02:	1200                	addi	s0,sp,288
     e04:	20000007          	0x20000007
     e08:	0008                	0x8
     e0a:	0100                	addi	s0,sp,128
     e0c:	6700                	flw	fs0,8(a4)
     e0e:	0820                	addi	s0,sp,24
     e10:	0000                	unimp
     e12:	0834                	addi	a3,sp,24
     e14:	0000                	unimp
     e16:	0006                	c.slli	zero,0x1
     e18:	315c01f3          	0x315c01f3
     e1c:	9f1c                	0x9f1c
     e1e:	0834                	addi	a3,sp,24
     e20:	0000                	unimp
     e22:	08ce                	slli	a7,a7,0x13
     e24:	0000                	unimp
     e26:	0001                	nop
     e28:	00000067          	jr	zero # 0 <__DYNAMIC>
     e2c:	0000                	unimp
     e2e:	0000                	unimp
     e30:	1200                	addi	s0,sp,288
     e32:	20000007          	0x20000007
     e36:	0008                	0x8
     e38:	0100                	addi	s0,sp,128
     e3a:	6700                	flw	fs0,8(a4)
     e3c:	0820                	addi	s0,sp,24
     e3e:	0000                	unimp
     e40:	0834                	addi	a3,sp,24
     e42:	0000                	unimp
     e44:	0006                	c.slli	zero,0x1
     e46:	315c01f3          	0x315c01f3
     e4a:	9f1c                	0x9f1c
     e4c:	0834                	addi	a3,sp,24
     e4e:	0000                	unimp
     e50:	08ce                	slli	a7,a7,0x13
     e52:	0000                	unimp
     e54:	0001                	nop
     e56:	00000067          	jr	zero # 0 <__DYNAMIC>
     e5a:	0000                	unimp
     e5c:	0000                	unimp
     e5e:	1200                	addi	s0,sp,288
     e60:	20000007          	0x20000007
     e64:	0008                	0x8
     e66:	0100                	addi	s0,sp,128
     e68:	6700                	flw	fs0,8(a4)
     e6a:	0820                	addi	s0,sp,24
     e6c:	0000                	unimp
     e6e:	0834                	addi	a3,sp,24
     e70:	0000                	unimp
     e72:	0006                	c.slli	zero,0x1
     e74:	315c01f3          	0x315c01f3
     e78:	9f1c                	0x9f1c
     e7a:	0834                	addi	a3,sp,24
     e7c:	0000                	unimp
     e7e:	08ce                	slli	a7,a7,0x13
     e80:	0000                	unimp
     e82:	0001                	nop
     e84:	00000067          	jr	zero # 0 <__DYNAMIC>
     e88:	0000                	unimp
     e8a:	0000                	unimp
     e8c:	ec00                	fsw	fs0,24(s0)
     e8e:	54000003          	lb	zero,1344(zero) # 540 <polydiv+0x154>
     e92:	0004                	0x4
     e94:	0100                	addi	s0,sp,128
     e96:	5a00                	lw	s0,48(a2)
     e98:	0454                	addi	a3,sp,516
     e9a:	0000                	unimp
     e9c:	0455                	addi	s0,s0,21
     e9e:	0000                	unimp
     ea0:	0001                	nop
     ea2:	0004555b          	0x4555b
     ea6:	7a00                	flw	fs0,48(a2)
     ea8:	0004                	0x4
     eaa:	0100                	addi	s0,sp,128
     eac:	6b00                	flw	fs0,16(a4)
     eae:	047a                	slli	s0,s0,0x1e
     eb0:	0000                	unimp
     eb2:	0480                	addi	s0,sp,576
     eb4:	0000                	unimp
     eb6:	0001                	nop
     eb8:	805a                	c.mv	zero,s6
     eba:	0004                	0x4
     ebc:	0000                	unimp
     ebe:	0005                	c.nop	1
     ec0:	0100                	addi	s0,sp,128
     ec2:	6b00                	flw	fs0,16(a4)
     ec4:	0500                	addi	s0,sp,640
     ec6:	0000                	unimp
     ec8:	06ba                	slli	a3,a3,0xe
     eca:	0000                	unimp
     ecc:	0004                	0x4
     ece:	9f5a01f3          	0x9f5a01f3
	...
     eda:	03ec                	addi	a1,sp,460
     edc:	0000                	unimp
     ede:	044e                	slli	s0,s0,0x13
     ee0:	0000                	unimp
     ee2:	0001                	nop
     ee4:	00044e5b          	0x44e5b
     ee8:	7a00                	flw	fs0,48(a2)
     eea:	0004                	0x4
     eec:	0100                	addi	s0,sp,128
     eee:	6200                	flw	fs0,0(a2)
     ef0:	047a                	slli	s0,s0,0x1e
     ef2:	0000                	unimp
     ef4:	047e                	slli	s0,s0,0x1f
     ef6:	0000                	unimp
     ef8:	0001                	nop
     efa:	00047e5b          	0x47e5b
     efe:	7a00                	flw	fs0,48(a2)
     f00:	0006                	c.slli	zero,0x1
     f02:	0100                	addi	s0,sp,128
     f04:	6200                	flw	fs0,0(a2)
     f06:	067a                	slli	a2,a2,0x1e
     f08:	0000                	unimp
     f0a:	069a                	slli	a3,a3,0x6
     f0c:	0000                	unimp
int main(){
     f0e:	018a0003          	lb	zero,24(s4)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f12:	9a9f 0006 ba00      	0xba0000069a9f
     f18:	0006                	c.slli	zero,0x1
     f1a:	0400                	addi	s0,sp,512
     f1c:	f300                	fsw	fs0,32(a4)
     f1e:	5b01                	li	s6,-32
int main(){
     f20:	009f 0000 0000      	0x9f
     f26:	0000                	unimp
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f28:	ec00                	fsw	fs0,24(s0)
    keys = generate_keys(N, p, q);
     f2a:	52000003          	lb	zero,1312(zero) # 520 <polydiv+0x134>
     f2e:	0004                	0x4
     f30:	0100                	addi	s0,sp,128
     f32:	5c00                	lw	s0,56(s0)
     f34:	0452                	slli	s0,s0,0x14
     f36:	0000                	unimp
    for(i = 0; i < N; ++i){
     f38:	047a                	slli	s0,s0,0x1e
     f3a:	0000                	unimp
        secret_key_f[i] = keys[i];
     f3c:	0001                	nop
     f3e:	7a68                	flw	fa0,116(a2)
     f40:	0004                	0x4
     f42:	7c00                	flw	fs0,56(s0)
     f44:	0004                	0x4
     f46:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     f48:	5c00                	lw	s0,56(s0)
     f4a:	047c                	addi	a5,sp,524
     f4c:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     f4e:	04b0                	addi	a2,sp,584
     f50:	0000                	unimp
     f52:	0001                	nop
     f54:	b068                	fsd	fa0,224(s0)
     f56:	0004                	0x4
     f58:	ba00                	fsd	fs0,48(a2)
        secret_key_fp[i-(2*N)] = keys[i];
     f5a:	0004                	0x4
     f5c:	0400                	addi	s0,sp,512
     f5e:	f300                	fsw	fs0,32(a4)
     f60:	5c01                	li	s8,-32
     f62:	ba9f 0004 de00      	0xde000004ba9f
    for(i = (3*N); i < (4*N); ++i){
     f68:	0004                	0x4
     f6a:	0100                	addi	s0,sp,128
     f6c:	6800                	flw	fs0,16(s0)
     f6e:	04de                	slli	s1,s1,0x17
     f70:	0000                	unimp
     f72:	06ba                	slli	a3,a3,0xe
        public_key[i-(4*N)] = keys[i];
     f74:	0000                	unimp
     f76:	0004                	0x4
     f78:	9f5c01f3          	0x9f5c01f3
	...
    for(i = (4*N); i < (5*N); ++i){
     f84:	03ec                	addi	a1,sp,460
     f86:	0000                	unimp
     f88:	0455                	addi	s0,s0,21
        ring_poly[i-(5*N)] = keys[i];
     f8a:	0000                	unimp
     f8c:	0001                	nop
     f8e:	555d                	li	a0,-9
     f90:	0004                	0x4
     f92:	7a00                	flw	fs0,48(a2)
    for(i = (5*N); i < (6*N+1); ++i){
     f94:	0004                	0x4
     f96:	0100                	addi	s0,sp,128
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f98:	6600                	flw	fs0,8(a2)
     f9a:	047a                	slli	s0,s0,0x1e
     f9c:	0000                	unimp
     f9e:	0481                	addi	s1,s1,0
     fa0:	0000                	unimp
     fa2:	0001                	nop
     fa4:	815d                	srli	a0,a0,0x17
     fa6:	0004                	0x4
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fa8:	9200                	0x9200
     faa:	0006                	c.slli	zero,0x1
     fac:	0100                	addi	s0,sp,128
     fae:	6600                	flw	fs0,8(a2)
     fb0:	0692                	slli	a3,a3,0x4
     fb2:	0000                	unimp
     fb4:	06a8                	addi	a0,sp,840
     fb6:	0000                	unimp
     fb8:	0004                	0x4
     fba:	9f5d01f3          	0x9f5d01f3
            resultkon[0] = 0xDEDEDEDE;
     fbe:	06a8                	addi	a0,sp,840
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fc0:	0000                	unimp
     fc2:	06ba                	slli	a3,a3,0xe
     fc4:	0000                	unimp
     fc6:	0001                	nop
     fc8:	0066                	c.slli	zero,0x19
            resultkon[0] = 0xDEDEDEDE;
     fca:	0000                	unimp
     fcc:	0000                	unimp
	    *var = resultkon[0];
     fce:	0000                	unimp
    for(i = 0; i < 32; ++i){
     fd0:	ec00                	fsw	fs0,24(s0)
     fd2:	55000003          	lb	zero,1360(zero) # 550 <polydiv+0x164>
        if(!(message[i] == Dec_Message[i])){
     fd6:	0004                	0x4
     fd8:	0100                	addi	s0,sp,128
     fda:	5e00                	lw	s0,56(a2)
     fdc:	0455                	addi	s0,s0,21
     fde:	0000                	unimp
     fe0:	0688                	addi	a0,sp,832
     fe2:	0000                	unimp
            resultkon[0] = 0xBABABABA;
     fe4:	0001                	nop
     fe6:	8859                	andi	s0,s0,22
     fe8:	0006                	c.slli	zero,0x1
     fea:	a800                	fsd	fs0,16(s0)
     fec:	0006                	c.slli	zero,0x1
 	    *var = resultkon[0];
     fee:	0400                	addi	s0,sp,512
     ff0:	f300                	fsw	fs0,32(a4)
     ff2:	5e01                	li	t3,-32
     ff4:	a89f 0006 ba00      	0xba000006a89f
}
     ffa:	0006                	c.slli	zero,0x1
     ffc:	0100                	addi	s0,sp,128
     ffe:	5900                	lw	s0,48(a0)
	...
    1008:	04b2                	slli	s1,s1,0xc
            resultkon[0] = 0xDEDEDEDE;
    100a:	0000                	unimp
	    *var = resultkon[0];
    100c:	04ba                	slli	s1,s1,0xe
    100e:	0000                	unimp
    1010:	0001                	nop
    1012:	de68                	sw	a0,124(a2)
    1014:	0004                	0x4
    1016:	9600                	0x9600
    for(i = 0; i < 32; ++i){
    1018:	0006                	c.slli	zero,0x1
    101a:	0100                	addi	s0,sp,128
    101c:	6800                	flw	fs0,16(s0)
    101e:	06a8                	addi	a0,sp,840
    1020:	0000                	unimp
    1022:	06ba                	slli	a3,a3,0xe
    1024:	0000                	unimp
    1026:	0001                	nop
    1028:	0068                	addi	a0,sp,12
    102a:	0000                	unimp
    102c:	0000                	unimp
    102e:	0000                	unimp
    1030:	0200                	addi	s0,sp,256
    1032:	0005                	c.nop	1
    1034:	0a00                	addi	s0,sp,272
    1036:	0005                	c.nop	1
    1038:	0100                	addi	s0,sp,128
    103a:	5f00                	lw	s0,56(a4)
    103c:	0646                	slli	a2,a2,0x11
    103e:	0000                	unimp
    1040:	064e                	slli	a2,a2,0x13
    1042:	0000                	unimp
    1044:	0001                	nop
    1046:	005f 0000 0000      	0x5f
    104c:	0000                	unimp
    104e:	9a00                	0x9a00
    1050:	0004                	0x4
    1052:	9c00                	0x9c00
    1054:	0004                	0x4
    1056:	0200                	addi	s0,sp,256
    1058:	3000                	fld	fs0,32(s0)
    105a:	9c9f 0004 a000      	0xa00000049c9f
    1060:	0004                	0x4
    1062:	0100                	addi	s0,sp,128
    1064:	5f00                	lw	s0,56(a4)
    1066:	04a0                	addi	s0,sp,584
    1068:	0000                	unimp
    106a:	04ba                	slli	s1,s1,0xe
    106c:	0000                	unimp
    106e:	0001                	nop
    1070:	0004c267          	0x4c267
    1074:	d800                	sw	s0,48(s0)
    1076:	0004                	0x4
    1078:	0100                	addi	s0,sp,128
    107a:	5f00                	lw	s0,56(a4)
    107c:	04d8                	addi	a4,sp,580
    107e:	0000                	unimp
    1080:	04ec                	addi	a1,sp,588
    1082:	0000                	unimp
    1084:	0001                	nop
    1086:	0004ec67          	0x4ec67
    108a:	0200                	addi	s0,sp,256
    108c:	0005                	c.nop	1
    108e:	0100                	addi	s0,sp,128
    1090:	5f00                	lw	s0,56(a4)
    1092:	0564                	addi	s1,sp,652
    1094:	0000                	unimp
    1096:	0575                	addi	a0,a0,29
    1098:	0000                	unimp
    109a:	0001                	nop
    109c:	e05f 0005 ec00      	0xec000005e05f
    10a2:	0005                	c.nop	1
    10a4:	0100                	addi	s0,sp,128
    10a6:	5f00                	lw	s0,56(a4)
    10a8:	05ec                	addi	a1,sp,716
    10aa:	0000                	unimp
    10ac:	05f4                	addi	a3,sp,716
    10ae:	0000                	unimp
    10b0:	7f7f0003          	lb	zero,2039(t5) # 1b7f7 <_stack_start+0xb7f7>
    10b4:	f49f 0005 f600      	0xf6000005f49f
    10ba:	0005                	c.nop	1
    10bc:	0100                	addi	s0,sp,128
    10be:	5f00                	lw	s0,56(a4)
    10c0:	05fe                	slli	a1,a1,0x1f
    10c2:	0000                	unimp
    10c4:	0605                	addi	a2,a2,1
    10c6:	0000                	unimp
    10c8:	0001                	nop
    10ca:	165f 0006 1800      	0x18000006165f
    10d0:	0006                	c.slli	zero,0x1
    10d2:	0100                	addi	s0,sp,128
    10d4:	6a00                	flw	fs0,16(a2)
    10d6:	0618                	addi	a4,sp,768
    10d8:	0000                	unimp
    10da:	0628                	addi	a0,sp,776
    10dc:	0000                	unimp
    10de:	0001                	nop
    10e0:	305f 0006 3600      	0x36000006305f
    10e6:	0006                	c.slli	zero,0x1
    10e8:	0100                	addi	s0,sp,128
    10ea:	5f00                	lw	s0,56(a4)
    10ec:	0636                	slli	a2,a2,0xd
    10ee:	0000                	unimp
    10f0:	0646                	slli	a2,a2,0x11
    10f2:	0000                	unimp
    10f4:	0001                	nop
    10f6:	7a5d                	lui	s4,0xffff7
    10f8:	0006                	c.slli	zero,0x1
    10fa:	8a00                	0x8a00
    10fc:	0006                	c.slli	zero,0x1
    10fe:	0100                	addi	s0,sp,128
    1100:	6200                	flw	fs0,0(a2)
    1102:	06a8                	addi	a0,sp,840
    1104:	0000                	unimp
    1106:	06ba                	slli	a3,a3,0xe
    1108:	0000                	unimp
    110a:	0001                	nop
    110c:	0062                	c.slli	zero,0x18
    110e:	0000                	unimp
    1110:	0000                	unimp
    1112:	0000                	unimp
    1114:	0200                	addi	s0,sp,256
    1116:	0005                	c.nop	1
    1118:	0600                	addi	s0,sp,768
    111a:	0005                	c.nop	1
    111c:	0100                	addi	s0,sp,128
    111e:	5e00                	lw	s0,56(a2)
    1120:	0646                	slli	a2,a2,0x11
    1122:	0000                	unimp
    1124:	0661                	addi	a2,a2,24
    1126:	0000                	unimp
    1128:	0001                	nop
    112a:	005e                	c.slli	zero,0x17
    112c:	0000                	unimp
    112e:	0000                	unimp
    1130:	0000                	unimp
    1132:	7e00                	flw	fs0,56(a2)
    1134:	0006                	c.slli	zero,0x1
    1136:	a800                	fsd	fs0,16(s0)
    1138:	0006                	c.slli	zero,0x1
    113a:	0600                	addi	s0,sp,768
    113c:	0300                	addi	s0,sp,384
    113e:	1664                	addi	s1,sp,812
    1140:	0000                	unimp
    1142:	009f 0000 0000      	0x9f
    1148:	0000                	unimp
    114a:	4200                	lw	s0,0(a2)
    114c:	0004                	0x4
    114e:	9000                	0x9000
    1150:	0006                	c.slli	zero,0x1
    1152:	0200                	addi	s0,sp,256
    1154:	8500                	0x8500
    1156:	a800                	fsd	fs0,16(s0)
    1158:	0006                	c.slli	zero,0x1
    115a:	ba00                	fsd	fs0,48(a2)
    115c:	0006                	c.slli	zero,0x1
    115e:	0200                	addi	s0,sp,256
    1160:	8500                	0x8500
	...
    116a:	4200                	lw	s0,0(a2)
    116c:	0004                	0x4
    116e:	8e00                	0x8e00
    1170:	0006                	c.slli	zero,0x1
    1172:	0200                	addi	s0,sp,256
    1174:	8400                	0x8400
    1176:	8e00                	0x8e00
    1178:	0006                	c.slli	zero,0x1
    117a:	9000                	0x9000
    117c:	0006                	c.slli	zero,0x1
    117e:	0c00                	addi	s0,sp,528
    1180:	8500                	0x8500
    1182:	8a00                	0x8a00
    1184:	3201                	jal	a84 <generate_keys+0x1b6>
    1186:	2324                	fld	fs1,64(a4)
    1188:	1af0090f          	0x1af0090f
    118c:	a81c                	fsd	fa5,16(s0)
    118e:	0006                	c.slli	zero,0x1
    1190:	ba00                	fsd	fs0,48(a2)
    1192:	0006                	c.slli	zero,0x1
    1194:	0200                	addi	s0,sp,256
    1196:	8400                	0x8400
	...
    11a0:	3c00                	fld	fs0,56(s0)
    11a2:	0005                	c.nop	1
    11a4:	4b00                	lw	s0,16(a4)
    11a6:	0005                	c.nop	1
    11a8:	0100                	addi	s0,sp,128
    11aa:	5a00                	lw	s0,48(a2)
    11ac:	0000054b          	fnmsub.s	fa0,ft0,ft0,ft0,rne
    11b0:	05ba                	slli	a1,a1,0xe
    11b2:	0000                	unimp
    11b4:	bc780003          	lb	zero,-1081(a6)
    11b8:	cc7f                	0xcc7f
    11ba:	0005                	c.nop	1
    11bc:	4600                	lw	s0,8(a2)
    11be:	0006                	c.slli	zero,0x1
    11c0:	0300                	addi	s0,sp,384
    11c2:	7800                	flw	fs0,48(s0)
    11c4:	7fbc                	flw	fa5,120(a5)
	...
    11ce:	0442                	slli	s0,s0,0x10
    11d0:	0000                	unimp
    11d2:	067a                	slli	a2,a2,0x1e
    11d4:	0000                	unimp
    11d6:	0002                	c.slli64	zero
    11d8:	067a0083          	lb	ra,103(s4) # ffff7067 <_stack_start+0xfffe7067>
    11dc:	0000                	unimp
    11de:	068e                	slli	a3,a3,0x3
    11e0:	0000                	unimp
    11e2:	000c                	0xc
    11e4:	0084                	addi	s1,sp,64
    11e6:	018a                	slli	gp,gp,0x2
    11e8:	2432                	fld	fs0,264(sp)
    11ea:	f0090f23          	sb	zero,-226(s2)
    11ee:	1c1a                	slli	s8,s8,0x26
    11f0:	068e                	slli	a3,a3,0x3
    11f2:	0000                	unimp
    11f4:	0690                	addi	a2,sp,832
    11f6:	0000                	unimp
    11f8:	000e                	c.slli	zero,0x3
    11fa:	0085                	addi	ra,ra,1
    11fc:	018a                	slli	gp,gp,0x2
    11fe:	2432                	fld	fs0,264(sp)
    1200:	f0090f23          	sb	zero,-226(s2)
    1204:	311a                	fld	ft2,416(sp)
    1206:	1c24                	addi	s1,sp,568
    1208:	06a8                	addi	a0,sp,840
    120a:	0000                	unimp
    120c:	06ba                	slli	a3,a3,0xe
    120e:	0000                	unimp
    1210:	000d                	c.nop	3
    1212:	0084                	addi	s1,sp,64
    1214:	325b01f3          	0x325b01f3
    1218:	2324                	fld	fs1,64(a4)
    121a:	1af0090f          	0x1af0090f
    121e:	001c                	0x1c
    1220:	0000                	unimp
    1222:	0000                	unimp
    1224:	0000                	unimp
    1226:	4800                	lw	s0,16(s0)
    1228:	0004                	0x4
    122a:	8200                	0x8200
    122c:	0006                	c.slli	zero,0x1
    122e:	0200                	addi	s0,sp,256
    1230:	7200                	flw	fs0,32(a2)
    1232:	8200                	0x8200
    1234:	0006                	c.slli	zero,0x1
    1236:	9800                	0x9800
    1238:	0006                	c.slli	zero,0x1
    123a:	0200                	addi	s0,sp,256
    123c:	8900                	0x8900
    123e:	a800                	fsd	fs0,16(s0)
    1240:	0006                	c.slli	zero,0x1
    1242:	ba00                	fsd	fs0,48(a2)
    1244:	0006                	c.slli	zero,0x1
    1246:	0200                	addi	s0,sp,256
    1248:	7200                	flw	fs0,32(a2)
	...
    1252:	4200                	lw	s0,0(a2)
    1254:	0004                	0x4
    1256:	9a00                	0x9a00
    1258:	0006                	c.slli	zero,0x1
    125a:	0100                	addi	s0,sp,128
    125c:	6a00                	flw	fs0,16(a2)
    125e:	069a                	slli	a3,a3,0x6
    1260:	0000                	unimp
    1262:	06a8                	addi	a0,sp,840
    1264:	0000                	unimp
    1266:	0006                	c.slli	zero,0x1
    1268:	315b01f3          	0x315b01f3
    126c:	9f1c                	0x9f1c
    126e:	06a8                	addi	a0,sp,840
    1270:	0000                	unimp
    1272:	06ba                	slli	a3,a3,0xe
    1274:	0000                	unimp
    1276:	0001                	nop
    1278:	006a                	c.slli	zero,0x1a
    127a:	0000                	unimp
    127c:	0000                	unimp
    127e:	0000                	unimp
    1280:	4200                	lw	s0,0(a2)
    1282:	0004                	0x4
    1284:	9a00                	0x9a00
    1286:	0006                	c.slli	zero,0x1
    1288:	0100                	addi	s0,sp,128
    128a:	6a00                	flw	fs0,16(a2)
    128c:	069a                	slli	a3,a3,0x6
    128e:	0000                	unimp
    1290:	06a8                	addi	a0,sp,840
    1292:	0000                	unimp
    1294:	0006                	c.slli	zero,0x1
    1296:	315b01f3          	0x315b01f3
    129a:	9f1c                	0x9f1c
    129c:	06a8                	addi	a0,sp,840
    129e:	0000                	unimp
    12a0:	06ba                	slli	a3,a3,0xe
    12a2:	0000                	unimp
    12a4:	0001                	nop
    12a6:	006a                	c.slli	zero,0x1a
    12a8:	0000                	unimp
    12aa:	0000                	unimp
    12ac:	0000                	unimp
    12ae:	4200                	lw	s0,0(a2)
    12b0:	0004                	0x4
    12b2:	9a00                	0x9a00
    12b4:	0006                	c.slli	zero,0x1
    12b6:	0100                	addi	s0,sp,128
    12b8:	6a00                	flw	fs0,16(a2)
    12ba:	069a                	slli	a3,a3,0x6
    12bc:	0000                	unimp
    12be:	06a8                	addi	a0,sp,840
    12c0:	0000                	unimp
    12c2:	0006                	c.slli	zero,0x1
    12c4:	315b01f3          	0x315b01f3
    12c8:	9f1c                	0x9f1c
    12ca:	06a8                	addi	a0,sp,840
    12cc:	0000                	unimp
    12ce:	06ba                	slli	a3,a3,0xe
    12d0:	0000                	unimp
    12d2:	0001                	nop
    12d4:	006a                	c.slli	zero,0x1a
    12d6:	0000                	unimp
    12d8:	0000                	unimp
    12da:	0000                	unimp
    12dc:	4600                	lw	s0,8(a2)
    12de:	0004                	0x4
    12e0:	a000                	fsd	fs0,0(s0)
    12e2:	0004                	0x4
    12e4:	0100                	addi	s0,sp,128
    12e6:	6700                	flw	fs0,8(a4)
    12e8:	04a0                	addi	s0,sp,584
    12ea:	0000                	unimp
    12ec:	04ba                	slli	s1,s1,0xe
    12ee:	0000                	unimp
    12f0:	7f860003          	lb	zero,2040(a2) # fffe07f8 <_stack_start+0xfffd07f8>
    12f4:	ba9f 0004 d800      	0xd8000004ba9f
    12fa:	0004                	0x4
    12fc:	0100                	addi	s0,sp,128
    12fe:	6700                	flw	fs0,8(a4)
    1300:	04d8                	addi	a4,sp,580
    1302:	0000                	unimp
    1304:	0692                	slli	a3,a3,0x4
    1306:	0000                	unimp
    1308:	7f860003          	lb	zero,2040(a2)
    130c:	929f 0006 a800      	0xa8000006929f
    1312:	0006                	c.slli	zero,0x1
    1314:	0600                	addi	s0,sp,768
    1316:	f300                	fsw	fs0,32(a4)
    1318:	5d01                	li	s10,-32
    131a:	1c31                	addi	s8,s8,-20
    131c:	a89f 0006 ba00      	0xba000006a89f
    1322:	0006                	c.slli	zero,0x1
    1324:	0300                	addi	s0,sp,384
    1326:	8600                	0x8600
    1328:	9f7f                	0x9f7f
	...
    1332:	028e                	slli	t0,t0,0x3
    1334:	0000                	unimp
    1336:	030a                	slli	t1,t1,0x2
    1338:	0000                	unimp
    133a:	0001                	nop
    133c:	0a5a                	slli	s4,s4,0x16
    133e:	0f000003          	lb	zero,240(zero) # f0 <array_mod+0xe>
    1342:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1346:	5b00                	lw	s0,48(a4)
    1348:	0000030f          	0x30f
    134c:	0336                	slli	t1,t1,0xd
    134e:	0000                	unimp
    1350:	0004                	0x4
    1352:	9f5a01f3          	0x9f5a01f3
    1356:	0336                	slli	t1,t1,0xd
    1358:	0000                	unimp
    135a:	0358                	addi	a4,sp,388
    135c:	0000                	unimp
    135e:	0001                	nop
    1360:	585a                	lw	a6,180(sp)
    1362:	ec000003          	lb	zero,-320(zero) # fffffec0 <_stack_start+0xfffefec0>
    1366:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    136a:	f300                	fsw	fs0,32(a4)
    136c:	5a01                	li	s4,-32
    136e:	009f 0000 0000      	0x9f
    1374:	0000                	unimp
    1376:	8e00                	0x8e00
    1378:	0002                	c.slli64	zero
    137a:	0800                	addi	s0,sp,16
    137c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1380:	5b00                	lw	s0,48(a4)
    1382:	0308                	addi	a0,sp,384
    1384:	0000                	unimp
    1386:	0000030f          	0x30f
    138a:	0001                	nop
    138c:	0f5c                	addi	a5,sp,916
    138e:	36000003          	lb	zero,864(zero) # 360 <polymult2+0xd2>
    1392:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1396:	8800                	0x8800
    1398:	9f01                	0x9f01
    139a:	0336                	slli	t1,t1,0xd
    139c:	0000                	unimp
    139e:	0358                	addi	a4,sp,388
    13a0:	0000                	unimp
    13a2:	0001                	nop
    13a4:	0003585b          	0x3585b
    13a8:	a400                	fsd	fs0,8(s0)
    13aa:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    13ae:	8800                	0x8800
    13b0:	9f01                	0x9f01
    13b2:	03a4                	addi	s1,sp,456
    13b4:	0000                	unimp
    13b6:	03ec                	addi	a1,sp,460
    13b8:	0000                	unimp
    13ba:	0004                	0x4
    13bc:	9f5b01f3          	0x9f5b01f3
	...
    13c8:	028e                	slli	t0,t0,0x3
    13ca:	0000                	unimp
    13cc:	0300                	addi	s0,sp,384
    13ce:	0000                	unimp
    13d0:	0001                	nop
    13d2:	005c                	addi	a5,sp,4
    13d4:	0f000003          	lb	zero,240(zero) # f0 <array_mod+0xe>
    13d8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    13dc:	6000                	flw	fs0,0(s0)
    13de:	0000030f          	0x30f
    13e2:	0336                	slli	t1,t1,0xd
    13e4:	0000                	unimp
    13e6:	bc780003          	lb	zero,-1081(a6)
    13ea:	367f                	0x367f
    13ec:	58000003          	lb	zero,1408(zero) # 580 <polydiv+0x194>
    13f0:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    13f4:	6000                	flw	fs0,0(s0)
    13f6:	0358                	addi	a4,sp,388
    13f8:	0000                	unimp
    13fa:	0394                	addi	a3,sp,448
    13fc:	0000                	unimp
    13fe:	bc780003          	lb	zero,-1081(a6)
    1402:	947f                	0x947f
    1404:	ec000003          	lb	zero,-320(zero) # fffffec0 <_stack_start+0xfffefec0>
    1408:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    140c:	9100                	0x9100
    140e:	7fbc                	flw	fa5,120(a5)
	...
    1418:	028e                	slli	t0,t0,0x3
    141a:	0000                	unimp
    141c:	02f6                	slli	t0,t0,0x1d
    141e:	0000                	unimp
    1420:	0001                	nop
    1422:	f65d                	bnez	a2,13d0 <_bss_start+0x21c>
    1424:	0002                	c.slli64	zero
    1426:	9c00                	0x9c00
    1428:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    142c:	6400                	flw	fs0,8(s0)
    142e:	039c                	addi	a5,sp,448
    1430:	0000                	unimp
    1432:	03b6                	slli	t2,t2,0xd
    1434:	0000                	unimp
    1436:	0004                	0x4
    1438:	9f5d01f3          	0x9f5d01f3
    143c:	03b6                	slli	t2,t2,0xd
    143e:	0000                	unimp
    1440:	03ec                	addi	a1,sp,460
    1442:	0000                	unimp
    1444:	0001                	nop
    1446:	0064                	addi	s1,sp,12
    1448:	0000                	unimp
    144a:	0000                	unimp
    144c:	0000                	unimp
    144e:	8e00                	0x8e00
    1450:	0002                	c.slli64	zero
    1452:	f800                	fsw	fs0,48(s0)
    1454:	0002                	c.slli64	zero
    1456:	0100                	addi	s0,sp,128
    1458:	5e00                	lw	s0,56(a2)
    145a:	02f8                	addi	a4,sp,332
    145c:	0000                	unimp
    145e:	03aa                	slli	t2,t2,0xa
    1460:	0000                	unimp
    1462:	0001                	nop
    1464:	0003aa6b          	0x3aa6b
    1468:	b600                	fsd	fs0,40(a2)
    146a:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    146e:	f300                	fsw	fs0,32(a4)
    1470:	5e01                	li	t3,-32
    1472:	b69f 0003 ec00      	0xec000003b69f
    1478:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    147c:	6b00                	flw	fs0,16(a4)
	...
    1486:	02ea                	slli	t0,t0,0x1a
    1488:	0000                	unimp
    148a:	032e                	slli	t1,t1,0xb
    148c:	0000                	unimp
    148e:	0002                	c.slli64	zero
    1490:	0082                	c.slli64	ra
    1492:	032e                	slli	t1,t1,0xb
    1494:	0000                	unimp
    1496:	0336                	slli	t1,t1,0xd
    1498:	0000                	unimp
    149a:	0002                	c.slli64	zero
    149c:	0089                	addi	ra,ra,2
    149e:	0336                	slli	t1,t1,0xd
    14a0:	0000                	unimp
    14a2:	0358                	addi	a4,sp,388
    14a4:	0000                	unimp
    14a6:	0002                	c.slli64	zero
    14a8:	0082                	c.slli64	ra
    14aa:	0358                	addi	a4,sp,388
    14ac:	0000                	unimp
    14ae:	0388                	addi	a0,sp,448
    14b0:	0000                	unimp
    14b2:	0002                	c.slli64	zero
    14b4:	0089                	addi	ra,ra,2
    14b6:	03b6                	slli	t2,t2,0xd
    14b8:	0000                	unimp
    14ba:	03de                	slli	t2,t2,0x17
    14bc:	0000                	unimp
    14be:	0002                	c.slli64	zero
    14c0:	0089                	addi	ra,ra,2
	...
    14ca:	02f2                	slli	t0,t0,0x1c
    14cc:	0000                	unimp
    14ce:	0300                	addi	s0,sp,384
    14d0:	0000                	unimp
    14d2:	0002                	c.slli64	zero
    14d4:	9f30                	0x9f30
    14d6:	0300                	addi	s0,sp,384
    14d8:	0000                	unimp
    14da:	0000030f          	0x30f
    14de:	0001                	nop
    14e0:	365e                	fld	fa2,496(sp)
    14e2:	58000003          	lb	zero,1408(zero) # 580 <polydiv+0x194>
    14e6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    14ea:	5e00                	lw	s0,56(a2)
    14ec:	0388                	addi	a0,sp,448
    14ee:	0000                	unimp
    14f0:	0396                	slli	t2,t2,0x5
    14f2:	0000                	unimp
    14f4:	0001                	nop
    14f6:	de59                	beqz	a2,1494 <product2+0x88>
    14f8:	ec000003          	lb	zero,-320(zero) # fffffec0 <_stack_start+0xfffefec0>
    14fc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1500:	5900                	lw	s0,48(a0)
	...
    150a:	032e                	slli	t1,t1,0xb
    150c:	0000                	unimp
    150e:	0336                	slli	t1,t1,0xd
    1510:	0000                	unimp
    1512:	0001                	nop
    1514:	3665                	jal	10bc <_endtext+0x8c>
    1516:	52000003          	lb	zero,1312(zero) # 520 <polydiv+0x134>
    151a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    151e:	5f00                	lw	s0,56(a4)
    1520:	0358                	addi	a4,sp,388
    1522:	0000                	unimp
    1524:	039e                	slli	t2,t2,0x7
    1526:	0000                	unimp
    1528:	0001                	nop
    152a:	b665                	j	10d2 <_endtext+0xa2>
    152c:	ec000003          	lb	zero,-320(zero) # fffffec0 <_stack_start+0xfffefec0>
    1530:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1534:	6500                	flw	fs0,8(a0)
	...
    153e:	0358                	addi	a4,sp,388
    1540:	0000                	unimp
    1542:	036a                	slli	t1,t1,0x1a
    1544:	0000                	unimp
    1546:	0001                	nop
    1548:	6a5f 0003 7000      	0x700000036a5f
    154e:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1552:	7f00                	flw	fs0,56(a4)
    1554:	9f01                	0x9f01
    1556:	0370                	addi	a2,sp,396
    1558:	0000                	unimp
    155a:	037a                	slli	t1,t1,0x1e
    155c:	0000                	unimp
    155e:	0001                	nop
    1560:	ba5f 0003 cc00      	0xcc000003ba5f
    1566:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    156a:	5f00                	lw	s0,56(a4)
    156c:	03cc                	addi	a1,sp,452
    156e:	0000                	unimp
    1570:	03d2                	slli	t2,t2,0x14
    1572:	0000                	unimp
    1574:	017f0003          	lb	zero,23(t5)
    1578:	d29f 0003 de00      	0xde000003d29f
    157e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1582:	5f00                	lw	s0,56(a4)
	...
    158c:	038c                	addi	a1,sp,448
    158e:	0000                	unimp
    1590:	03b6                	slli	t2,t2,0xd
    1592:	0000                	unimp
    1594:	0006                	c.slli	zero,0x1
    1596:	00140c03          	lb	s8,1(s0)
    159a:	9f00                	0x9f00
	...
    15a4:	02f0                	addi	a2,sp,332
    15a6:	0000                	unimp
    15a8:	03a8                	addi	a0,sp,456
    15aa:	0000                	unimp
    15ac:	0002                	c.slli64	zero
    15ae:	008a                	slli	ra,ra,0x2
    15b0:	03b6                	slli	t2,t2,0xd
    15b2:	0000                	unimp
    15b4:	03ec                	addi	a1,sp,460
    15b6:	0000                	unimp
    15b8:	0002                	c.slli64	zero
    15ba:	008a                	slli	ra,ra,0x2
	...
    15c4:	02f2                	slli	t0,t0,0x1c
    15c6:	0000                	unimp
    15c8:	0390                	addi	a2,sp,448
    15ca:	0000                	unimp
    15cc:	0002                	c.slli64	zero
    15ce:	0072                	c.slli	zero,0x1c
    15d0:	0390                	addi	a2,sp,448
    15d2:	0000                	unimp
    15d4:	039c                	addi	a5,sp,448
    15d6:	0000                	unimp
    15d8:	000c                	0xc
    15da:	008a                	slli	ra,ra,0x2
    15dc:	0084                	addi	s1,sp,64
    15de:	2432                	fld	fs0,264(sp)
    15e0:	f0090f23          	sb	zero,-226(s2)
    15e4:	1c1a                	slli	s8,s8,0x26
    15e6:	039c                	addi	a5,sp,448
    15e8:	0000                	unimp
    15ea:	03a8                	addi	a0,sp,456
    15ec:	0000                	unimp
    15ee:	000d                	c.nop	3
    15f0:	008a                	slli	ra,ra,0x2
    15f2:	325d01f3          	0x325d01f3
    15f6:	2324                	fld	fs1,64(a4)
    15f8:	1af0090f          	0x1af0090f
    15fc:	b61c                	fsd	fa5,40(a2)
    15fe:	ec000003          	lb	zero,-320(zero) # fffffec0 <_stack_start+0xfffefec0>
    1602:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1606:	7200                	flw	fs0,32(a2)
	...
    1610:	ea00                	fsw	fs0,16(a2)
    1612:	0002                	c.slli64	zero
    1614:	2e00                	fld	fs0,24(a2)
    1616:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    161a:	6500                	flw	fs0,8(a0)
    161c:	032e                	slli	t1,t1,0xb
    161e:	0000                	unimp
    1620:	0336                	slli	t1,t1,0xd
    1622:	0000                	unimp
    1624:	7f840003          	lb	zero,2040(s0)
    1628:	369f 0003 5800      	0x58000003369f
    162e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1632:	6500                	flw	fs0,8(a0)
    1634:	0358                	addi	a4,sp,388
    1636:	0000                	unimp
    1638:	039c                	addi	a5,sp,448
    163a:	0000                	unimp
    163c:	7f840003          	lb	zero,2040(s0)
    1640:	9c9f 0003 b600      	0xb60000039c9f
    1646:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    164a:	f300                	fsw	fs0,32(a4)
    164c:	5d01                	li	s10,-32
    164e:	1c31                	addi	s8,s8,-20
    1650:	b69f 0003 ec00      	0xec000003b69f
    1656:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    165a:	8400                	0x8400
    165c:	9f7f                	0x9f7f
	...
    1666:	02a2                	slli	t0,t0,0x8
    1668:	0000                	unimp
    166a:	039a                	slli	t2,t2,0x6
    166c:	0000                	unimp
    166e:	0001                	nop
    1670:	00039a63          	bnez	t2,1684 <result+0x20>
    1674:	9c00                	0x9c00
    1676:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    167a:	8400                	0x8400
    167c:	8800                	0x8800
    167e:	2200                	fld	fs0,0(a2)
    1680:	9c9f 0003 a400      	0xa40000039c9f
    1686:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    168a:	8800                	0x8800
    168c:	f300                	fsw	fs0,32(a4)
    168e:	5d01                	li	s10,-32
    1690:	9f22                	add	t5,t5,s0
    1692:	03a4                	addi	s1,sp,456
    1694:	0000                	unimp
    1696:	03b6                	slli	t2,t2,0xd
    1698:	0000                	unimp
    169a:	000a                	c.slli	zero,0x2
    169c:	f35b01f3          	0xf35b01f3
    16a0:	5d01                	li	s10,-32
    16a2:	3122                	fld	ft2,40(sp)
    16a4:	9f1c                	0x9f1c
    16a6:	03b6                	slli	t2,t2,0xd
    16a8:	0000                	unimp
    16aa:	03ec                	addi	a1,sp,460
    16ac:	0000                	unimp
    16ae:	0001                	nop
    16b0:	00000063          	beqz	zero,16b0 <result+0x4c>
    16b4:	0000                	unimp
    16b6:	0000                	unimp
    16b8:	f000                	fsw	fs0,32(s0)
    16ba:	0002                	c.slli64	zero
    16bc:	a400                	fsd	fs0,8(s0)
    16be:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16c2:	6800                	flw	fs0,16(s0)
    16c4:	03a4                	addi	s1,sp,456
    16c6:	0000                	unimp
    16c8:	03b6                	slli	t2,t2,0xd
    16ca:	0000                	unimp
    16cc:	0006                	c.slli	zero,0x1
    16ce:	315b01f3          	0x315b01f3
    16d2:	9f1c                	0x9f1c
    16d4:	03b6                	slli	t2,t2,0xd
    16d6:	0000                	unimp
    16d8:	03ec                	addi	a1,sp,460
    16da:	0000                	unimp
    16dc:	0001                	nop
    16de:	0068                	addi	a0,sp,12
    16e0:	0000                	unimp
    16e2:	0000                	unimp
    16e4:	0000                	unimp
    16e6:	f000                	fsw	fs0,32(s0)
    16e8:	0002                	c.slli64	zero
    16ea:	2e00                	fld	fs0,24(a2)
    16ec:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16f0:	6500                	flw	fs0,8(a0)
    16f2:	032e                	slli	t1,t1,0xb
    16f4:	0000                	unimp
    16f6:	0336                	slli	t1,t1,0xd
    16f8:	0000                	unimp
    16fa:	7f840003          	lb	zero,2040(s0)
    16fe:	369f 0003 5800      	0x58000003369f
    1704:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1708:	6500                	flw	fs0,8(a0)
    170a:	0358                	addi	a4,sp,388
    170c:	0000                	unimp
    170e:	039c                	addi	a5,sp,448
    1710:	0000                	unimp
    1712:	7f840003          	lb	zero,2040(s0)
    1716:	9c9f 0003 b600      	0xb60000039c9f
    171c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1720:	f300                	fsw	fs0,32(a4)
    1722:	5d01                	li	s10,-32
    1724:	1c31                	addi	s8,s8,-20
    1726:	b69f 0003 ec00      	0xec000003b69f
    172c:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1730:	8400                	0x8400
    1732:	9f7f                	0x9f7f
	...
    173c:	0100                	addi	s0,sp,128
    173e:	0000                	unimp
    1740:	017c                	addi	a5,sp,140
    1742:	0000                	unimp
    1744:	0001                	nop
    1746:	7c5a                	flw	fs8,180(sp)
    1748:	0001                	nop
    174a:	8900                	0x8900
    174c:	0001                	nop
    174e:	0100                	addi	s0,sp,128
    1750:	5b00                	lw	s0,48(a4)
    1752:	0189                	addi	gp,gp,2
    1754:	0000                	unimp
    1756:	01c6                	slli	gp,gp,0x11
    1758:	0000                	unimp
    175a:	0004                	0x4
    175c:	9f5a01f3          	0x9f5a01f3
    1760:	01c6                	slli	gp,gp,0x11
    1762:	0000                	unimp
    1764:	01e8                	addi	a0,sp,204
    1766:	0000                	unimp
    1768:	0001                	nop
    176a:	e85a                	fsw	fs6,16(sp)
    176c:	0001                	nop
    176e:	8e00                	0x8e00
    1770:	0002                	c.slli64	zero
    1772:	0400                	addi	s0,sp,512
    1774:	f300                	fsw	fs0,32(a4)
    1776:	5a01                	li	s4,-32
    1778:	009f 0000 0000      	0x9f
    177e:	0000                	unimp
    1780:	0000                	unimp
    1782:	0001                	nop
    1784:	6800                	flw	fs0,16(s0)
    1786:	0001                	nop
    1788:	0100                	addi	s0,sp,128
    178a:	5b00                	lw	s0,48(a4)
    178c:	0168                	addi	a0,sp,140
    178e:	0000                	unimp
    1790:	0240                	addi	s0,sp,260
    1792:	0000                	unimp
    1794:	0001                	nop
    1796:	00024067          	0x24067
    179a:	5400                	lw	s0,40(s0)
    179c:	0002                	c.slli64	zero
    179e:	0700                	addi	s0,sp,896
    17a0:	9100                	0x9100
    17a2:	7fbc                	flw	fa5,120(a5)
    17a4:	2306                	fld	ft6,64(sp)
    17a6:	9f01                	0x9f01
    17a8:	0254                	addi	a3,sp,260
    17aa:	0000                	unimp
    17ac:	028e                	slli	t0,t0,0x3
    17ae:	0000                	unimp
    17b0:	0001                	nop
    17b2:	00000067          	jr	zero # 0 <__DYNAMIC>
    17b6:	0000                	unimp
    17b8:	0000                	unimp
    17ba:	0000                	unimp
    17bc:	0001                	nop
    17be:	6a00                	flw	fs0,16(a2)
    17c0:	0001                	nop
    17c2:	0100                	addi	s0,sp,128
    17c4:	5c00                	lw	s0,56(s0)
    17c6:	016a                	slli	sp,sp,0x1a
    17c8:	0000                	unimp
    17ca:	0189                	addi	gp,gp,2
    17cc:	0000                	unimp
    17ce:	0001                	nop
    17d0:	8960                	0x8960
    17d2:	0001                	nop
    17d4:	c600                	sw	s0,8(a2)
    17d6:	0001                	nop
    17d8:	0300                	addi	s0,sp,384
    17da:	7800                	flw	fs0,48(s0)
    17dc:	7fb8                	flw	fa4,120(a5)
    17de:	01c6                	slli	gp,gp,0x11
    17e0:	0000                	unimp
    17e2:	01e8                	addi	a0,sp,204
    17e4:	0000                	unimp
    17e6:	0001                	nop
    17e8:	e860                	fsw	fs0,84(s0)
    17ea:	0001                	nop
    17ec:	3200                	fld	fs0,32(a2)
    17ee:	0002                	c.slli64	zero
    17f0:	0300                	addi	s0,sp,384
    17f2:	7800                	flw	fs0,48(s0)
    17f4:	7fb8                	flw	fa4,120(a5)
    17f6:	0232                	slli	tp,tp,0xc
    17f8:	0000                	unimp
    17fa:	028e                	slli	t0,t0,0x3
    17fc:	0000                	unimp
    17fe:	b8910003          	lb	zero,-1143(sp)
    1802:	007f                	0x7f
	...
    180c:	0001                	nop
    180e:	0a00                	addi	s0,sp,272
    1810:	0001                	nop
    1812:	0100                	addi	s0,sp,128
    1814:	5d00                	lw	s0,56(a0)
    1816:	010a                	slli	sp,sp,0x2
    1818:	0000                	unimp
    181a:	0238                	addi	a4,sp,264
    181c:	0000                	unimp
    181e:	0001                	nop
    1820:	00023863          	0x23863
    1824:	5400                	lw	s0,40(s0)
    1826:	0002                	c.slli64	zero
    1828:	0400                	addi	s0,sp,512
    182a:	f300                	fsw	fs0,32(a4)
    182c:	5d01                	li	s10,-32
    182e:	549f 0002 8e00      	0x8e000002549f
    1834:	0002                	c.slli64	zero
    1836:	0100                	addi	s0,sp,128
    1838:	6300                	flw	fs0,0(a4)
	...
    1842:	0100                	addi	s0,sp,128
    1844:	0000                	unimp
    1846:	0126                	slli	sp,sp,0x9
    1848:	0000                	unimp
    184a:	0001                	nop
    184c:	265e                	fld	fa2,464(sp)
    184e:	0001                	nop
    1850:	2000                	fld	fs0,0(s0)
    1852:	0002                	c.slli64	zero
    1854:	0100                	addi	s0,sp,128
    1856:	6400                	flw	fs0,8(s0)
    1858:	0220                	addi	s0,sp,264
    185a:	0000                	unimp
    185c:	0229                	addi	tp,tp,10
    185e:	0000                	unimp
    1860:	0001                	nop
    1862:	0002295b          	0x2295b
    1866:	3a00                	fld	fs0,48(a2)
    1868:	0002                	c.slli64	zero
    186a:	0100                	addi	s0,sp,128
    186c:	6400                	flw	fs0,8(s0)
    186e:	023a                	slli	tp,tp,0xe
    1870:	0000                	unimp
    1872:	0254                	addi	a3,sp,260
    1874:	0000                	unimp
    1876:	0004                	0x4
    1878:	9f5e01f3          	0x9f5e01f3
    187c:	0254                	addi	a3,sp,260
    187e:	0000                	unimp
    1880:	027c                	addi	a5,sp,268
    1882:	0000                	unimp
    1884:	0001                	nop
    1886:	7c64                	flw	fs1,124(s0)
    1888:	0002                	c.slli64	zero
    188a:	7f00                	flw	fs0,56(a4)
    188c:	0002                	c.slli64	zero
    188e:	0100                	addi	s0,sp,128
    1890:	5b00                	lw	s0,48(a4)
    1892:	027f                	0x27f
    1894:	0000                	unimp
    1896:	028e                	slli	t0,t0,0x3
    1898:	0000                	unimp
    189a:	0001                	nop
    189c:	0064                	addi	s1,sp,12
	...
    18a6:	0001                	nop
    18a8:	8900                	0x8900
    18aa:	0001                	nop
    18ac:	0100                	addi	s0,sp,128
    18ae:	5f00                	lw	s0,56(a4)
    18b0:	0189                	addi	gp,gp,2
    18b2:	0000                	unimp
    18b4:	01c6                	slli	gp,gp,0x11
    18b6:	0000                	unimp
    18b8:	b4780003          	lb	zero,-1209(a6)
    18bc:	c67f                	0xc67f
    18be:	0001                	nop
    18c0:	e800                	fsw	fs0,16(s0)
    18c2:	0001                	nop
    18c4:	0100                	addi	s0,sp,128
    18c6:	5f00                	lw	s0,56(a4)
    18c8:	01e8                	addi	a0,sp,204
    18ca:	0000                	unimp
    18cc:	0232                	slli	tp,tp,0xc
    18ce:	0000                	unimp
    18d0:	b4780003          	lb	zero,-1209(a6)
    18d4:	327f                	0x327f
    18d6:	0002                	c.slli64	zero
    18d8:	8e00                	0x8e00
    18da:	0002                	c.slli64	zero
    18dc:	0300                	addi	s0,sp,384
    18de:	9100                	0x9100
    18e0:	7fb4                	flw	fa3,120(a5)
	...
    18ea:	0162                	slli	sp,sp,0x18
    18ec:	0000                	unimp
    18ee:	01be                	slli	gp,gp,0xf
    18f0:	0000                	unimp
    18f2:	0002                	c.slli64	zero
    18f4:	0082                	c.slli64	ra
    18f6:	01be                	slli	gp,gp,0xf
    18f8:	0000                	unimp
    18fa:	01c6                	slli	gp,gp,0x11
    18fc:	0000                	unimp
    18fe:	0002                	c.slli64	zero
    1900:	0086                	slli	ra,ra,0x1
    1902:	01c6                	slli	gp,gp,0x11
    1904:	0000                	unimp
    1906:	01e8                	addi	a0,sp,204
    1908:	0000                	unimp
    190a:	0002                	c.slli64	zero
    190c:	0082                	c.slli64	ra
    190e:	01e8                	addi	a0,sp,204
    1910:	0000                	unimp
    1912:	0218                	addi	a4,sp,256
    1914:	0000                	unimp
    1916:	0002                	c.slli64	zero
    1918:	0086                	slli	ra,ra,0x1
    191a:	0254                	addi	a3,sp,260
    191c:	0000                	unimp
    191e:	027c                	addi	a5,sp,268
    1920:	0000                	unimp
    1922:	0002                	c.slli64	zero
    1924:	0086                	slli	ra,ra,0x1
	...
    192e:	0164                	addi	s1,sp,140
    1930:	0000                	unimp
    1932:	0172                	slli	sp,sp,0x1c
    1934:	0000                	unimp
    1936:	0002                	c.slli64	zero
    1938:	9f30                	0x9f30
    193a:	0172                	slli	sp,sp,0x1c
    193c:	0000                	unimp
    193e:	017a                	slli	sp,sp,0x1e
    1940:	0000                	unimp
    1942:	0001                	nop
    1944:	c65c                	sw	a5,12(a2)
    1946:	0001                	nop
    1948:	e800                	fsw	fs0,16(s0)
    194a:	0001                	nop
    194c:	0100                	addi	s0,sp,128
    194e:	5c00                	lw	s0,56(s0)
    1950:	0218                	addi	a4,sp,256
    1952:	0000                	unimp
    1954:	0234                	addi	a3,sp,264
    1956:	0000                	unimp
    1958:	0001                	nop
    195a:	7c59                	lui	s8,0xffff6
    195c:	0002                	c.slli64	zero
    195e:	8e00                	0x8e00
    1960:	0002                	c.slli64	zero
    1962:	0100                	addi	s0,sp,128
    1964:	5900                	lw	s0,48(a0)
	...
    196e:	01be                	slli	gp,gp,0xf
    1970:	0000                	unimp
    1972:	01c6                	slli	gp,gp,0x11
    1974:	0000                	unimp
    1976:	0001                	nop
    1978:	c668                	sw	a0,76(a2)
    197a:	0001                	nop
    197c:	e200                	fsw	fs0,0(a2)
    197e:	0001                	nop
    1980:	0100                	addi	s0,sp,128
    1982:	5e00                	lw	s0,56(a2)
    1984:	01e8                	addi	a0,sp,204
    1986:	0000                	unimp
    1988:	0242                	slli	tp,tp,0x10
    198a:	0000                	unimp
    198c:	0001                	nop
    198e:	5468                	lw	a0,108(s0)
    1990:	0002                	c.slli64	zero
    1992:	8e00                	0x8e00
    1994:	0002                	c.slli64	zero
    1996:	0100                	addi	s0,sp,128
    1998:	6800                	flw	fs0,16(s0)
	...
    19a2:	01e8                	addi	a0,sp,204
    19a4:	0000                	unimp
    19a6:	01fa                	slli	gp,gp,0x1e
    19a8:	0000                	unimp
    19aa:	0001                	nop
    19ac:	fa5f 0001 0000      	0x1fa5f
    19b2:	0002                	c.slli64	zero
    19b4:	0300                	addi	s0,sp,384
    19b6:	7f00                	flw	fs0,56(a4)
    19b8:	9f01                	0x9f01
    19ba:	0200                	addi	s0,sp,256
    19bc:	0000                	unimp
    19be:	020a                	slli	tp,tp,0x2
    19c0:	0000                	unimp
    19c2:	0001                	nop
    19c4:	585f 0002 6a00      	0x6a000002585f
    19ca:	0002                	c.slli64	zero
    19cc:	0100                	addi	s0,sp,128
    19ce:	5f00                	lw	s0,56(a4)
    19d0:	026a                	slli	tp,tp,0x1a
    19d2:	0000                	unimp
    19d4:	0270                	addi	a2,sp,268
    19d6:	0000                	unimp
    19d8:	017f0003          	lb	zero,23(t5)
    19dc:	709f 0002 7c00      	0x7c000002709f
    19e2:	0002                	c.slli64	zero
    19e4:	0100                	addi	s0,sp,128
    19e6:	5f00                	lw	s0,56(a4)
	...
    19f0:	022a                	slli	tp,tp,0xa
    19f2:	0000                	unimp
    19f4:	0254                	addi	a3,sp,260
    19f6:	0000                	unimp
    19f8:	0006                	c.slli	zero,0x1
    19fa:	0011b403          	0x11b403
    19fe:	9f00                	0x9f00
	...
    1a08:	0162                	slli	sp,sp,0x18
    1a0a:	0000                	unimp
    1a0c:	0248                	addi	a0,sp,260
    1a0e:	0000                	unimp
    1a10:	0002                	c.slli64	zero
    1a12:	0254008b          	0x254008b
    1a16:	0000                	unimp
    1a18:	028e                	slli	t0,t0,0x3
    1a1a:	0000                	unimp
    1a1c:	0002                	c.slli64	zero
    1a1e:	0000008b          	0x8b
    1a22:	0000                	unimp
    1a24:	0000                	unimp
    1a26:	0000                	unimp
    1a28:	0164                	addi	s1,sp,140
    1a2a:	0000                	unimp
    1a2c:	022e                	slli	tp,tp,0xb
    1a2e:	0000                	unimp
    1a30:	0002                	c.slli64	zero
    1a32:	0072                	c.slli	zero,0x1c
    1a34:	022e                	slli	tp,tp,0xb
    1a36:	0000                	unimp
    1a38:	0238                	addi	a4,sp,264
    1a3a:	0000                	unimp
    1a3c:	000c                	0xc
    1a3e:	0083008b          	0x83008b
    1a42:	2432                	fld	fs0,264(sp)
    1a44:	f0090f23          	sb	zero,-226(s2)
    1a48:	1c1a                	slli	s8,s8,0x26
    1a4a:	0238                	addi	a4,sp,264
    1a4c:	0000                	unimp
    1a4e:	0248                	addi	a0,sp,260
    1a50:	0000                	unimp
    1a52:	000d                	c.nop	3
    1a54:	01f3008b          	0x1f3008b
    1a58:	325d                	jal	13fe <_bss_start+0x24a>
    1a5a:	2324                	fld	fs1,64(a4)
    1a5c:	1af0090f          	0x1af0090f
    1a60:	541c                	lw	a5,40(s0)
    1a62:	0002                	c.slli64	zero
    1a64:	8e00                	0x8e00
    1a66:	0002                	c.slli64	zero
    1a68:	0200                	addi	s0,sp,256
    1a6a:	7200                	flw	fs0,32(a2)
	...
    1a74:	6200                	flw	fs0,0(a2)
    1a76:	0001                	nop
    1a78:	be00                	fsd	fs0,56(a2)
    1a7a:	0001                	nop
    1a7c:	0100                	addi	s0,sp,128
    1a7e:	6800                	flw	fs0,16(s0)
    1a80:	01be                	slli	gp,gp,0xf
    1a82:	0000                	unimp
    1a84:	01c6                	slli	gp,gp,0x11
    1a86:	0000                	unimp
    1a88:	7f830003          	lb	zero,2040(t1)
    1a8c:	c69f 0001 e800      	0xe8000001c69f
    1a92:	0001                	nop
    1a94:	0100                	addi	s0,sp,128
    1a96:	6800                	flw	fs0,16(s0)
    1a98:	01e8                	addi	a0,sp,204
    1a9a:	0000                	unimp
    1a9c:	0238                	addi	a4,sp,264
    1a9e:	0000                	unimp
    1aa0:	7f830003          	lb	zero,2040(t1)
    1aa4:	389f 0002 5400      	0x54000002389f
    1aaa:	0002                	c.slli64	zero
    1aac:	0600                	addi	s0,sp,768
    1aae:	f300                	fsw	fs0,32(a4)
    1ab0:	5d01                	li	s10,-32
    1ab2:	1c31                	addi	s8,s8,-20
    1ab4:	549f 0002 8e00      	0x8e000002549f
    1aba:	0002                	c.slli64	zero
    1abc:	0300                	addi	s0,sp,384
    1abe:	8300                	0x8300
    1ac0:	9f7f                	0x9f7f
	...
    1aca:	0116                	slli	sp,sp,0x5
    1acc:	0000                	unimp
    1ace:	0220                	addi	s0,sp,264
    1ad0:	0000                	unimp
    1ad2:	0001                	nop
    1ad4:	2065                	jal	1b7c <random_keys+0x130>
    1ad6:	0002                	c.slli64	zero
    1ad8:	2900                	fld	fs0,16(a0)
    1ada:	0002                	c.slli64	zero
    1adc:	0100                	addi	s0,sp,128
    1ade:	5c00                	lw	s0,56(s0)
    1ae0:	0229                	addi	tp,tp,10
    1ae2:	0000                	unimp
    1ae4:	023c                	addi	a5,sp,264
    1ae6:	0000                	unimp
    1ae8:	0001                	nop
    1aea:	3c65                	jal	15a2 <product2+0x196>
    1aec:	0002                	c.slli64	zero
    1aee:	4000                	lw	s0,0(s0)
    1af0:	0002                	c.slli64	zero
    1af2:	0900                	addi	s0,sp,144
    1af4:	8700                	0x8700
    1af6:	f300                	fsw	fs0,32(a4)
    1af8:	5d01                	li	s10,-32
    1afa:	3122                	fld	ft2,40(sp)
    1afc:	9f1c                	0x9f1c
    1afe:	0240                	addi	s0,sp,260
    1b00:	0000                	unimp
    1b02:	0254                	addi	a3,sp,260
    1b04:	0000                	unimp
    1b06:	0009                	c.nop	2
    1b08:	bc91                	j	155c <product2+0x150>
    1b0a:	067f                	0x67f
    1b0c:	225d01f3          	0x225d01f3
    1b10:	549f 0002 7c00      	0x7c000002549f
    1b16:	0002                	c.slli64	zero
    1b18:	0100                	addi	s0,sp,128
    1b1a:	6500                	flw	fs0,8(a0)
    1b1c:	027c                	addi	a5,sp,268
    1b1e:	0000                	unimp
    1b20:	027f                	0x27f
    1b22:	0000                	unimp
    1b24:	0001                	nop
    1b26:	7f5c                	flw	fa5,60(a4)
    1b28:	0002                	c.slli64	zero
    1b2a:	8e00                	0x8e00
    1b2c:	0002                	c.slli64	zero
    1b2e:	0100                	addi	s0,sp,128
    1b30:	6500                	flw	fs0,8(a0)
	...
    1b3a:	0162                	slli	sp,sp,0x18
    1b3c:	0000                	unimp
    1b3e:	0189                	addi	gp,gp,2
    1b40:	0000                	unimp
    1b42:	0001                	nop
    1b44:	895d                	andi	a0,a0,23
    1b46:	0001                	nop
    1b48:	c600                	sw	s0,8(a2)
    1b4a:	0001                	nop
    1b4c:	0300                	addi	s0,sp,384
    1b4e:	7800                	flw	fs0,48(s0)
    1b50:	7fbc                	flw	fa5,120(a5)
    1b52:	01c6                	slli	gp,gp,0x11
    1b54:	0000                	unimp
    1b56:	01e8                	addi	a0,sp,204
    1b58:	0000                	unimp
    1b5a:	0001                	nop
    1b5c:	e85d                	bnez	s0,1c12 <random_keys+0x1c6>
    1b5e:	0001                	nop
    1b60:	3200                	fld	fs0,32(a2)
    1b62:	0002                	c.slli64	zero
    1b64:	0300                	addi	s0,sp,384
    1b66:	7800                	flw	fs0,48(s0)
    1b68:	7fbc                	flw	fa5,120(a5)
    1b6a:	0232                	slli	tp,tp,0xc
    1b6c:	0000                	unimp
    1b6e:	028e                	slli	t0,t0,0x3
    1b70:	0000                	unimp
    1b72:	bc910003          	lb	zero,-1079(sp)
    1b76:	007f                	0x7f
    1b78:	0000                	unimp
    1b7a:	0000                	unimp
    1b7c:	0000                	unimp
    1b7e:	6200                	flw	fs0,0(a2)
    1b80:	0001                	nop
    1b82:	be00                	fsd	fs0,56(a2)
    1b84:	0001                	nop
    1b86:	0100                	addi	s0,sp,128
    1b88:	6800                	flw	fs0,16(s0)
    1b8a:	01be                	slli	gp,gp,0xf
    1b8c:	0000                	unimp
    1b8e:	01c6                	slli	gp,gp,0x11
    1b90:	0000                	unimp
    1b92:	7f830003          	lb	zero,2040(t1)
    1b96:	c69f 0001 e800      	0xe8000001c69f
    1b9c:	0001                	nop
    1b9e:	0100                	addi	s0,sp,128
    1ba0:	6800                	flw	fs0,16(s0)
    1ba2:	01e8                	addi	a0,sp,204
    1ba4:	0000                	unimp
    1ba6:	0238                	addi	a4,sp,264
    1ba8:	0000                	unimp
    1baa:	7f830003          	lb	zero,2040(t1)
    1bae:	389f 0002 5400      	0x54000002389f
    1bb4:	0002                	c.slli64	zero
    1bb6:	0600                	addi	s0,sp,768
    1bb8:	f300                	fsw	fs0,32(a4)
    1bba:	5d01                	li	s10,-32
    1bbc:	1c31                	addi	s8,s8,-20
    1bbe:	549f 0002 8e00      	0x8e000002549f
    1bc4:	0002                	c.slli64	zero
    1bc6:	0300                	addi	s0,sp,384
    1bc8:	8300                	0x8300
    1bca:	9f7f                	0x9f7f
	...
    1bd4:	00e2                	slli	ra,ra,0x18
    1bd6:	0000                	unimp
    1bd8:	00e8                	addi	a0,sp,76
    1bda:	0000                	unimp
    1bdc:	0001                	nop
    1bde:	e85c                	fsw	fa5,20(s0)
    1be0:	0000                	unimp
    1be2:	0000                	unimp
    1be4:	0001                	nop
    1be6:	0400                	addi	s0,sp,512
    1be8:	f300                	fsw	fs0,32(a4)
    1bea:	5c01                	li	s8,-32
    1bec:	009f 0000 0000      	0x9f
    1bf2:	0000                	unimp
    1bf4:	e200                	fsw	fs0,0(a2)
    1bf6:	0000                	unimp
    1bf8:	ec00                	fsw	fs0,24(s0)
    1bfa:	0000                	unimp
    1bfc:	0200                	addi	s0,sp,256
    1bfe:	3000                	fld	fs0,32(s0)
    1c00:	ec9f 0000 0000      	0xec9f
    1c06:	0001                	nop
    1c08:	0100                	addi	s0,sp,128
    1c0a:	5f00                	lw	s0,56(a4)
	...
    1c14:	00f2                	slli	ra,ra,0x1c
    1c16:	0000                	unimp
    1c18:	00fc                	addi	a5,sp,76
    1c1a:	0000                	unimp
    1c1c:	0001                	nop
    1c1e:	0000005b          	0x5b
    1c22:	0000                	unimp
    1c24:	0000                	unimp
    1c26:	f200                	fsw	fs0,32(a2)
    1c28:	0000                	unimp
    1c2a:	fc00                	fsw	fs0,56(s0)
    1c2c:	0000                	unimp
    1c2e:	0800                	addi	s0,sp,16
    1c30:	7f00                	flw	fs0,56(a4)
    1c32:	3c00                	fld	fs0,56(s0)
    1c34:	7a1e                	flw	fs4,228(sp)
    1c36:	2200                	fld	fs0,0(a2)
    1c38:	009f 0000 0000      	0x9f
    1c3e:	0000                	unimp
    1c40:	ba00                	fsd	fs0,48(a2)
    1c42:	0000                	unimp
    1c44:	c000                	sw	s0,0(s0)
    1c46:	0000                	unimp
    1c48:	0100                	addi	s0,sp,128
    1c4a:	5c00                	lw	s0,56(s0)
    1c4c:	00c0                	addi	s0,sp,68
    1c4e:	0000                	unimp
    1c50:	00dc                	addi	a5,sp,68
    1c52:	0000                	unimp
    1c54:	0004                	0x4
    1c56:	9f5c01f3          	0x9f5c01f3
	...
    1c62:	00ba                	slli	ra,ra,0xe
    1c64:	0000                	unimp
    1c66:	00c4                	addi	s1,sp,68
    1c68:	0000                	unimp
    1c6a:	0002                	c.slli64	zero
    1c6c:	9f30                	0x9f30
    1c6e:	00c4                	addi	s1,sp,68
    1c70:	0000                	unimp
    1c72:	00dc                	addi	a5,sp,68
    1c74:	0000                	unimp
    1c76:	0001                	nop
    1c78:	005f 0000 0000      	0x5f
    1c7e:	0000                	unimp
    1c80:	ce00                	sw	s0,24(a2)
    1c82:	0000                	unimp
    1c84:	d400                	sw	s0,40(s0)
    1c86:	0000                	unimp
    1c88:	0600                	addi	s0,sp,768
    1c8a:	7b00                	flw	fs0,48(a4)
    1c8c:	7e00                	flw	fs0,56(a2)
    1c8e:	2200                	fld	fs0,0(a2)
    1c90:	d49f 0000 d800      	0xd8000000d49f
    1c96:	0000                	unimp
    1c98:	0100                	addi	s0,sp,128
    1c9a:	5e00                	lw	s0,56(a2)
	...
    1ca4:	00ce                	slli	ra,ra,0x13
    1ca6:	0000                	unimp
    1ca8:	00d2                	slli	ra,ra,0x14
    1caa:	0000                	unimp
    1cac:	0006                	c.slli	zero,0x1
    1cae:	007a                	c.slli	zero,0x1e
    1cb0:	007e                	c.slli	zero,0x1f
    1cb2:	9f22                	add	t5,t5,s0
    1cb4:	00d2                	slli	ra,ra,0x14
    1cb6:	0000                	unimp
    1cb8:	00d8                	addi	a4,sp,68
    1cba:	0000                	unimp
    1cbc:	0001                	nop
    1cbe:	005d                	c.nop	23
    1cc0:	0000                	unimp
    1cc2:	0000                	unimp
    1cc4:	0000                	unimp
    1cc6:	9200                	0x9200
    1cc8:	0000                	unimp
    1cca:	9800                	0x9800
    1ccc:	0000                	unimp
    1cce:	0100                	addi	s0,sp,128
    1cd0:	5c00                	lw	s0,56(s0)
    1cd2:	0098                	addi	a4,sp,64
    1cd4:	0000                	unimp
    1cd6:	00b4                	addi	a3,sp,72
    1cd8:	0000                	unimp
    1cda:	0004                	0x4
    1cdc:	9f5c01f3          	0x9f5c01f3
	...
    1ce8:	0092                	slli	ra,ra,0x4
    1cea:	0000                	unimp
    1cec:	009c                	addi	a5,sp,64
    1cee:	0000                	unimp
    1cf0:	0002                	c.slli64	zero
    1cf2:	9f30                	0x9f30
    1cf4:	009c                	addi	a5,sp,64
    1cf6:	0000                	unimp
    1cf8:	00b4                	addi	a3,sp,72
    1cfa:	0000                	unimp
    1cfc:	0001                	nop
    1cfe:	005f 0000 0000      	0x5f
    1d04:	0000                	unimp
    1d06:	a600                	fsd	fs0,8(a2)
    1d08:	0000                	unimp
    1d0a:	ac00                	fsd	fs0,24(s0)
    1d0c:	0000                	unimp
    1d0e:	0600                	addi	s0,sp,768
    1d10:	7b00                	flw	fs0,48(a4)
    1d12:	7e00                	flw	fs0,56(a2)
    1d14:	2200                	fld	fs0,0(a2)
    1d16:	ac9f 0000 b000      	0xb0000000ac9f
    1d1c:	0000                	unimp
    1d1e:	0100                	addi	s0,sp,128
    1d20:	5e00                	lw	s0,56(a2)
	...
    1d2a:	00a6                	slli	ra,ra,0x9
    1d2c:	0000                	unimp
    1d2e:	00aa                	slli	ra,ra,0xa
    1d30:	0000                	unimp
    1d32:	0006                	c.slli	zero,0x1
    1d34:	007a                	c.slli	zero,0x1e
    1d36:	007e                	c.slli	zero,0x1f
    1d38:	9f22                	add	t5,t5,s0
    1d3a:	00aa                	slli	ra,ra,0xa
    1d3c:	0000                	unimp
    1d3e:	00b0                	addi	a2,sp,72
    1d40:	0000                	unimp
    1d42:	0001                	nop
    1d44:	005d                	c.nop	23
    1d46:	0000                	unimp
    1d48:	0000                	unimp
    1d4a:	0000                	unimp
    1d4c:	8c00                	0x8c00
    1d4e:	0000                	unimp
    1d50:	9000                	0x9000
    1d52:	0000                	unimp
    1d54:	0100                	addi	s0,sp,128
    1d56:	5a00                	lw	s0,48(a2)
	...
    1d60:	00b4                	addi	a3,sp,72
    1d62:	0000                	unimp
    1d64:	00b8                	addi	a4,sp,72
    1d66:	0000                	unimp
    1d68:	0001                	nop
    1d6a:	005a                	c.slli	zero,0x16
    1d6c:	0000                	unimp
    1d6e:	0000                	unimp
    1d70:	0000                	unimp
    1d72:	dc00                	sw	s0,56(s0)
    1d74:	0000                	unimp
    1d76:	e000                	fsw	fs0,0(s0)
    1d78:	0000                	unimp
    1d7a:	0100                	addi	s0,sp,128
    1d7c:	5a00                	lw	s0,48(a2)
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0c86                	slli	s9,s9,0x1
  16:	0000                	unimp
  18:	0f0e                	slli	t5,t5,0x3
  1a:	0000                	unimp
  1c:	0110                	addi	a2,sp,128
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1ef9                	addi	t4,t4,-2
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d12                	slli	s10,s10,0x4
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00e8                	addi	a0,sp,76
   2:	0000                	unimp
   4:	00ea                	slli	ra,ra,0x1a
   6:	0000                	unimp
   8:	00f2                	slli	ra,ra,0x1c
   a:	0000                	unimp
   c:	00fc                	addi	a5,sp,76
	...
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0d12                	slli	s10,s10,0x4
  1e:	0000                	unimp
  20:	0f0e                	slli	t5,t5,0x3
  22:	0000                	unimp
  24:	101e                	c.slli	zero,0x27
	...
  2e:	0000                	unimp
  30:	ffff                	0xffff
  32:	ffff                	0xffff
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d12                	slli	s10,s10,0x4
  3a:	0000                	unimp
  3c:	0d88                	addi	a0,sp,720
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	21b8                	fld	fa4,64(a1)
       2:	0000                	unimp
       4:	01430003          	lb	zero,20(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x70>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	6972                	flw	fs2,28(sp)
      28:	33766373          	csrrsi	t1,mhpmevent23,12
      2c:	2d32                	fld	fs10,264(sp)
      2e:	6e75                	lui	t3,0x1d
      30:	776f6e6b          	0x776f6e6b
      34:	2d6e                	fld	fs10,216(sp)
      36:	6c65                	lui	s8,0x19
      38:	2f66                	fld	ft10,88(sp)
      3a:	6e69                	lui	t3,0x1a
      3c:	64756c63          	bltu	a0,t2,694 <polydiv+0x2a8>
      40:	2f65                	jal	7f8 <ext_euclid+0x13e>
      42:	616d                	addi	sp,sp,240
      44:	6e696863          	bltu	s2,t1,734 <ext_euclid+0x7a>
      48:	0065                	c.nop	25
      4a:	74706f2f          	0x74706f2f
      4e:	7369722f          	0x7369722f
      52:	6c2f7663          	bgeu	t5,sp,71e <ext_euclid+0x64>
      56:	6269                	lui	tp,0x1a
      58:	6363672f          	0x6363672f
      5c:	7369722f          	0x7369722f
      60:	32337663          	bgeu	t1,gp,38c <polymult2+0xfe>
      64:	752d                	lui	a0,0xfffeb
      66:	6b6e                	flw	fs6,216(sp)
      68:	6f6e                	flw	ft10,216(sp)
      6a:	652d6e77          	0x652d6e77
      6e:	666c                	flw	fa1,76(a2)
      70:	322e392f          	0x322e392f
      74:	302e                	fld	ft0,232(sp)
      76:	636e692f          	0x636e692f
      7a:	756c                	flw	fa1,108(a0)
  jal x0, default_exc_handler
      7c:	6564                	flw	fs1,76(a0)
      7e:	2f00                	fld	fs0,24(a4)
  jal x0, reset_handler
      80:	2f74706f          	j	47b76 <_stack_start+0x37b76>
  jal x0, default_exc_handler
      84:	6972                	flw	fs2,28(sp)
      86:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      8a:	6972                	flw	fs2,28(sp)
    asm volatile(
      8c:	33766373          	csrrsi	t1,mhpmevent23,12
}
      90:	2d32                	fld	fs10,264(sp)
    for(i=0;i<(length/3);i++) {
      92:	6e75                	lui	t3,0x1d
      94:	776f6e6b          	0x776f6e6b
      98:	2d6e                	fld	fs10,216(sp)
      9a:	6c65                	lui	s8,0x19
      9c:	2f66                	fld	ft10,88(sp)
      9e:	6e69                	lui	t3,0x1a
}
      a0:	64756c63          	bltu	a0,t2,6f8 <ext_euclid+0x3e>
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      a4:	2f65                	jal	85c <ext_euclid+0x1a2>
    asm volatile(
      a6:	00737973          	csrrci	s2,0x7,6
      aa:	74706f2f          	0x74706f2f
      ae:	7369722f          	0x7369722f
    for(i=0;i<(length/3);i++) {
      b2:	722f7663          	bgeu	t5,sp,7de <ext_euclid+0x124>
    asm volatile(
      b6:	7369                	lui	t1,0xffffa
}
      b8:	32337663          	bgeu	t1,gp,3e4 <polymult2+0x156>
    for(i=0;i<(length/3);i++) {
      bc:	752d                	lui	a0,0xfffeb
      be:	6b6e                	flw	fs6,216(sp)
      c0:	6f6e                	flw	ft10,216(sp)
      c2:	652d6e77          	0x652d6e77
      c6:	666c                	flw	fa1,76(a2)
}
      c8:	636e692f          	0x636e692f
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      cc:	756c                	flw	fa1,108(a0)
    asm volatile(
      ce:	6564                	flw	fs1,76(a0)
      d0:	0000                	unimp
      d2:	544e                	lw	s0,240(sp)
      d4:	5552                	lw	a0,52(sp)
      d6:	345f 5f38 6962      	0x69625f38345f
    asm volatile(
      dc:	4d74                	lw	a3,92(a0)
      de:	632e                	flw	ft6,200(sp)
}
      e0:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      e2:	0000                	unimp
      e4:	645f 6665 7561      	0x75616665645f
      ea:	746c                	flw	fa1,108(s0)
      ec:	745f 7079 7365      	0x73657079745f
    asm volatile(
      f2:	682e                	flw	fa6,200(sp)
      f4:	0100                	addi	s0,sp,128
      f6:	0000                	unimp
      f8:	64647473          	csrrci	s0,0x646,8
    for(i=0;i<(length/3);i++) {
      fc:	6665                	lui	a2,0x19
      fe:	682e                	flw	fa6,200(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     100:	0200                	addi	s0,sp,256
     102:	0000                	unimp
     104:	745f 7079 7365      	0x73657079745f
    int line[size_b][size_a + size_b];
     10a:	682e                	flw	fa6,200(sp)
     10c:	0300                	addi	s0,sp,384
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     10e:	0000                	unimp
     110:	6572                	flw	fa0,28(sp)
    int line[size_b][size_a + size_b];
     112:	6e65                	lui	t3,0x19
     114:	2e74                	fld	fa3,216(a2)
     116:	0068                	addi	a0,sp,12
     118:	6c000003          	lb	zero,1728(zero) # 6c0 <ext_euclid+0x6>
     11c:	2e6b636f          	jal	t1,b6402 <_stack_start+0xa6402>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     120:	0068                	addi	a0,sp,12
    int pola[size_a];
     122:	5f000003          	lb	zero,1520(zero) # 5f0 <polydiv+0x204>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     126:	69647473          	csrrci	s0,0x696,8
     12a:	746e                	flw	fs0,248(sp)
     12c:	682e                	flw	fa6,200(sp)
     12e:	0300                	addi	s0,sp,384
     130:	0000                	unimp
    int line[size_b][size_a + size_b];
     132:	6c647473          	csrrci	s0,0x6c6,8
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     136:	6269                	lui	tp,0x1a
     138:	682e                	flw	fa6,200(sp)
    int line[size_b][size_a + size_b];
     13a:	0400                	addi	s0,sp,512
    int pola[size_a];
     13c:	0000                	unimp
     13e:	623c                	flw	fa5,64(a2)
    int line[size_b][size_a + size_b];
     140:	6975                	lui	s2,0x1d
     142:	746c                	flw	fa1,108(s0)
     144:	692d                	lui	s2,0xb
    int pola[size_a];
     146:	3e6e                	fld	ft8,248(sp)
     148:	0000                	unimp
    int polb[size_b];
     14a:	0000                	unimp
     14c:	0500                	addi	s0,sp,640
     14e:	02050033          	mul	zero,a0,zero
     152:	008c                	addi	a1,sp,64
     154:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     156:	05011003          	lh	zero,80(sp)
    int pola[size_a];
     15a:	0305                	addi	t1,t1,1
     15c:	0906                	slli	s2,s2,0x1
    int line[size_b][size_a + size_b];
     15e:	0000                	unimp
     160:	0301                	addi	t1,t1,0
    int polb[size_b];
     162:	0004090b          	0x4090b
    for (i = 0; i < size_b; ++i){
     166:	0501                	addi	a0,a0,0
     168:	0601                	addi	a2,a2,0
            product[j] = 0;
     16a:	00090303          	lb	t1,0(s2) # b000 <_stack_len+0x7000>
     16e:	0100                	addi	s0,sp,128
     170:	2c05                	jal	3a0 <polymult2+0x112>
    for (i = 0; i < size_b; ++i){
     172:	0306                	slli	t1,t1,0x1
     174:	0901                	addi	s2,s2,0
     	array_equ(pola,a,size_a);
     176:	0002                	c.slli64	zero
     178:	0501                	addi	a0,a0,0
     17a:	0301                	addi	t1,t1,0
     17c:	0901                	addi	s2,s2,0
     17e:	0000                	unimp
     180:	0501                	addi	a0,a0,0
     182:	0305                	addi	t1,t1,1
     184:	0901                	addi	s2,s2,0
     186:	0000                	unimp
     188:	0501                	addi	a0,a0,0
	array_mod(pola,mod,size_a);
     18a:	0616                	slli	a2,a2,0x5
     18c:	00090003          	lb	zero,0(s2)
     190:	0100                	addi	s0,sp,128
    	array_equ(polb,b,size_b);
     192:	0a05                	addi	s4,s4,1
     194:	08090003          	lb	zero,128(s2)
     198:	0100                	addi	s0,sp,128
     19a:	0d05                	addi	s10,s10,1
     19c:	0200                	addi	s0,sp,256
	array_mod(polb,mod,size_b);
     19e:	0104                	addi	s1,sp,128
     1a0:	0306                	slli	t1,t1,0x1
     1a2:	0900                	addi	s0,sp,144
     1a4:	0002                	c.slli64	zero
    if(star_mult == 1){
     1a6:	0501                	addi	a0,a0,0
     1a8:	0005                	c.nop	1
     1aa:	0402                	c.slli64	s0
     1ac:	0601                	addi	a2,a2,0
     1ae:	00090003          	lb	zero,0(s2)
     1b2:	0100                	addi	s0,sp,128
     1b4:	0105                	addi	sp,sp,1
     1b6:	04090303          	lb	t1,64(s2)
     1ba:	0100                	addi	s0,sp,128
     1bc:	0905                	addi	s2,s2,1
        for (j = size_b -1; j >= 0; j = j-1){
     1be:	0200                	addi	s0,sp,256
     1c0:	0304                	addi	s1,sp,384
            for (k = size_a-1; k >= 0; k = k-1 ){
     1c2:	0306                	slli	t1,t1,0x1
     1c4:	097e                	slli	s2,s2,0x1f
            product[j] = 0;
     1c6:	0002                	c.slli64	zero
     1c8:	0501                	addi	a0,a0,0
     1ca:	0005                	c.nop	1
            line[i][j] = 0;
     1cc:	0402                	c.slli64	s0
     1ce:	096e0303          	lb	t1,150(t3) # 19096 <_stack_start+0x9096>
            product[j] = 0;
     1d2:	0004                	0x4
        for(j = 0; j < size_a + size_b -1; ++j){
     1d4:	0001                	nop
     1d6:	0402                	c.slli64	s0
     1d8:	090b0303          	lb	t1,144(s6)
    for (i = 0; i < size_b; ++i){
     1dc:	000a                	c.slli	zero,0x2
     1de:	0501                	addi	a0,a0,0
     1e0:	001a                	c.slli	zero,0x6
     1e2:	0402                	c.slli64	s0
        for(j = 0; j < size_a + size_b -1; ++j){
     1e4:	09060303          	lb	t1,144(a2) # 19090 <_stack_start+0x9090>
                line[size_b-1-j][k] = pola[k]*polb[j];
     1e8:	0000                	unimp
     1ea:	0501                	addi	a0,a0,0
     1ec:	0402001b          	0x402001b
     1f0:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
     1f4:	0009                	c.nop	2
     1f6:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f8:	3305                	jal	ffffff18 <_stack_start+0xfffeff18>
                line[size_b-1-j][k] = pola[k]*polb[j];
     1fa:	0306                	slli	t1,t1,0x1
     1fc:	0906                	slli	s2,s2,0x1
     1fe:	0004                	0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     200:	0501                	addi	a0,a0,0
     202:	0305                	addi	t1,t1,1
        for (j = size_b -1; j >= 0; j = j-1){
     204:	00000907          	0x907
     208:	0301                	addi	t1,t1,0
     20a:	090a                	slli	s2,s2,0x2
     20c:	0004                	0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     20e:	0501                	addi	a0,a0,0
	array_add(product, line[i], (size_a + size_b - 1));
     210:	0601                	addi	a2,a2,0
     212:	00090303          	lb	t1,0(s2)
     216:	0100                	addi	s0,sp,128
        array_mod(line[i],mod,(size_a+size_b-1));
     218:	2e05                	jal	548 <polydiv+0x15c>
     21a:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_b; ++i){
     21c:	0901                	addi	s2,s2,0
     21e:	0002                	c.slli64	zero
    array_mod(product,mod,size_a+size_b-1);
     220:	0501                	addi	a0,a0,0
     222:	0301                	addi	t1,t1,0
     224:	0901                	addi	s2,s2,0
     226:	0000                	unimp
     228:	0501                	addi	a0,a0,0
}
     22a:	0305                	addi	t1,t1,1
     22c:	0901                	addi	s2,s2,0
     22e:	0000                	unimp
     230:	0501                	addi	a0,a0,0
     232:	0616                	slli	a2,a2,0x5
     234:	00090003          	lb	zero,0(s2)
     238:	0100                	addi	s0,sp,128
     23a:	0a05                	addi	s4,s4,1
     23c:	08090003          	lb	zero,128(s2)
     240:	0100                	addi	s0,sp,128
     242:	0d05                	addi	s10,s10,1
     244:	0200                	addi	s0,sp,256
     246:	0104                	addi	s1,sp,128
     248:	0306                	slli	t1,t1,0x1
     24a:	0900                	addi	s0,sp,144
     24c:	0002                	c.slli64	zero
     24e:	0501                	addi	a0,a0,0
     250:	0005                	c.nop	1
     252:	0402                	c.slli64	s0
            for (k = size_a-1; k >= 0; k = k-1 ){
     254:	0601                	addi	a2,a2,0
     256:	00090003          	lb	zero,0(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     25a:	0100                	addi	s0,sp,128
     25c:	0105                	addi	sp,sp,1
     25e:	04090303          	lb	t1,64(s2)
     262:	0100                	addi	s0,sp,128
     264:	0705                	addi	a4,a4,1
     266:	0200                	addi	s0,sp,256
            for (k = size_a-1; k >= 0; k = k-1 ){
     268:	0304                	addi	s1,sp,384
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     26a:	0306                	slli	t1,t1,0x1
     26c:	097e                	slli	s2,s2,0x1f
     26e:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     270:	0501                	addi	a0,a0,0
     272:	0005                	c.nop	1
        for (j = size_b -1; j >= 0; j = j-1){
     274:	0402                	c.slli64	s0
     276:	096f0303          	lb	t1,150(t5)
     27a:	0004                	0x4
        array_mod(line[i],mod,(size_a+size_b-1));
     27c:	0001                	nop
     27e:	0402                	c.slli64	s0
	array_add(product, line[i], (size_a + size_b - 1));
     280:	090a0303          	lb	t1,144(s4)
     284:	000a                	c.slli	zero,0x2
     286:	0501                	addi	a0,a0,0
    for (i = 0; i < size_b; ++i){
     288:	001a                	c.slli	zero,0x6
     28a:	0402                	c.slli64	s0
     28c:	09060303          	lb	t1,144(a2)
    int line[size_b][size_a + size_b];
     290:	0000                	unimp
     292:	0501                	addi	a0,a0,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     294:	0402001b          	0x402001b
     298:	00030603          	lb	a2,0(t1)
     29c:	0009                	c.nop	2
    int line[size_b][size_a + size_b];
     29e:	0100                	addi	s0,sp,128
     2a0:	3405                	jal	fffffcc0 <_stack_start+0xfffefcc0>
     2a2:	0306                	slli	t1,t1,0x1
     2a4:	0905                	addi	s2,s2,1
     2a6:	0004                	0x4
     2a8:	0501                	addi	a0,a0,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2aa:	0305                	addi	t1,t1,1
     2ac:	0902                	c.slli64	s2
     2ae:	0000                	unimp
     2b0:	0301                	addi	t1,t1,0
     2b2:	0909                	addi	s2,s2,2
     2b4:	0004                	0x4
     2b6:	0501                	addi	a0,a0,0
     2b8:	0601                	addi	a2,a2,0
     2ba:	00090303          	lb	t1,0(s2)
     2be:	0100                	addi	s0,sp,128
     2c0:	2c05                	jal	4f0 <polydiv+0x104>
    int line[size_b][size_a + size_b];
     2c2:	0306                	slli	t1,t1,0x1
     2c4:	0901                	addi	s2,s2,0
     2c6:	0002                	c.slli64	zero
    int pola[size_a];
     2c8:	0501                	addi	a0,a0,0
     2ca:	0301                	addi	t1,t1,0
     2cc:	0905                	addi	s2,s2,1
     2ce:	0000                	unimp
    int line[size_b][size_a + size_b];
     2d0:	0501                	addi	a0,a0,0
    int pola[size_a];
     2d2:	0305                	addi	t1,t1,1
     2d4:	0902                	c.slli64	s2
    int polb[size_b];
     2d6:	0000                	unimp
     2d8:	0501                	addi	a0,a0,0
     2da:	0616                	slli	a2,a2,0x5
    int pola[size_a];
     2dc:	00090003          	lb	zero,0(s2)
    int polb[size_b];
     2e0:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2e2:	0505                	addi	a0,a0,1
     2e4:	06096c03          	0x6096c03
    int line[size_b][size_a + size_b];
     2e8:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ea:	0a05                	addi	s4,s4,1
    int pola[size_a];
     2ec:	02091403          	lh	s0,32(s2)
    int polb[size_b];
     2f0:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     2f2:	0d05                	addi	s10,s10,1
     2f4:	0200                	addi	s0,sp,256
     2f6:	0104                	addi	s1,sp,128
            product2[j] = 0;
     2f8:	0306                	slli	t1,t1,0x1
     2fa:	0900                	addi	s0,sp,144
     2fc:	0002                	c.slli64	zero
     2fe:	0501                	addi	a0,a0,0
    for (i = 0; i < size_b; ++i){
     300:	0005                	c.nop	1
     302:	0402                	c.slli64	s0
    array_equ(pola,a,size_a);
     304:	0601                	addi	a2,a2,0
     306:	00090003          	lb	zero,0(s2)
     30a:	0100                	addi	s0,sp,128
     30c:	0105                	addi	sp,sp,1
     30e:	04090403          	lb	s0,64(s2)
    array_equ(polb,b,size_b);
     312:	0100                	addi	s0,sp,128
     314:	0905                	addi	s2,s2,1
     316:	0200                	addi	s0,sp,256
     318:	0304                	addi	s1,sp,384
     31a:	0306                	slli	t1,t1,0x1
    if(star_mult == 1){
     31c:	097d                	addi	s2,s2,31
     31e:	0002                	c.slli64	zero
     320:	0501                	addi	a0,a0,0
     322:	0005                	c.nop	1
     324:	0402                	c.slli64	s0
     326:	096b0303          	lb	t1,150(s6)
     32a:	0000                	unimp
     32c:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     32e:	0402                	c.slli64	s0
     330:	09090303          	lb	t1,144(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     334:	000a                	c.slli	zero,0x2
            product2[j] = 0;
     336:	0501                	addi	a0,a0,0
     338:	001a                	c.slli	zero,0x6
     33a:	0402                	c.slli64	s0
            line[i][j] = 0;
     33c:	090b0303          	lb	t1,144(s6)
            product2[j] = 0;
     340:	0000                	unimp
     342:	0501                	addi	a0,a0,0
        for(j = 0; j < size_a + size_b -1; ++j){
     344:	0402001b          	0x402001b
     348:	00030603          	lb	a2,0(t1)
    for (i = 0; i < size_b; ++i){
     34c:	0009                	c.nop	2
     34e:	0100                	addi	s0,sp,128
     350:	4e05                	li	t3,1
     352:	0306                	slli	t1,t1,0x1
        for(j = 0; j < size_a + size_b -1; ++j){
     354:	0909                	addi	s2,s2,2
     356:	0004                	0x4
                line[size_b-1-j][k] = pola[k]*polb[j];
     358:	0501                	addi	a0,a0,0
     35a:	0305                	addi	t1,t1,1
     35c:	0902                	c.slli64	s2
     35e:	0000                	unimp
     360:	0501                	addi	a0,a0,0
     362:	064e                	slli	a2,a2,0x13
     364:	00097e03          	0x97e03
            for (k = size_a-1; k >= 0; k = k-1 ){
     368:	0100                	addi	s0,sp,128
                line[size_b-1-j][k] = pola[k]*polb[j];
     36a:	1d05                	addi	s10,s10,-31
     36c:	08090203          	lb	tp,128(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     370:	0100                	addi	s0,sp,128
     372:	4e05                	li	t3,1
        for (j = size_b -1; j >= 0; j = j-1){
     374:	06097e03          	0x6097e03
     378:	0100                	addi	s0,sp,128
     37a:	0905                	addi	s2,s2,1
     37c:	04090203          	lb	tp,64(s2)
         array_add(product2,line[i],size_a+size_b-1);
     380:	0100                	addi	s0,sp,128
     382:	4e05                	li	t3,1
     384:	0c097e03          	0xc097e03
        for(i = 0; i < size_b; ++i){
     388:	0100                	addi	s0,sp,128
     38a:	0905                	addi	s2,s2,1
}
     38c:	04090503          	lb	a0,64(s2)
     390:	0100                	addi	s0,sp,128
     392:	4e05                	li	t3,1
     394:	04097b03          	0x4097b03
     398:	0100                	addi	s0,sp,128
     39a:	0905                	addi	s2,s2,1
     39c:	0c090203          	lb	tp,192(s2)
     3a0:	0100                	addi	s0,sp,128
     3a2:	4e05                	li	t3,1
     3a4:	02097e03          	0x2097e03
     3a8:	0100                	addi	s0,sp,128
     3aa:	0905                	addi	s2,s2,1
     3ac:	06090203          	lb	tp,96(s2)
     3b0:	0100                	addi	s0,sp,128
     3b2:	02090303          	lb	t1,32(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b6:	0100                	addi	s0,sp,128
     3b8:	4e05                	li	t3,1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3ba:	04097b03          	0x4097b03
     3be:	0100                	addi	s0,sp,128
     3c0:	0905                	addi	s2,s2,1
     3c2:	00090203          	lb	tp,0(s2)
     3c6:	0100                	addi	s0,sp,128
     3c8:	06090303          	lb	t1,96(s2)
     3cc:	0100                	addi	s0,sp,128
     3ce:	04090103          	lb	sp,64(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d2:	0100                	addi	s0,sp,128
     3d4:	06097f03          	0x6097f03
        for (j = size_b -1; j >= 0; j = j-1){
     3d8:	0100                	addi	s0,sp,128
     3da:	02090103          	lb	sp,32(s2)
         array_add(product2,line[i],size_a+size_b-1);
     3de:	0100                	addi	s0,sp,128
     3e0:	4e05                	li	t3,1
     3e2:	04097a03          	0x4097a03
        for(i = 0; i < size_b; ++i){
     3e6:	0100                	addi	s0,sp,128
     3e8:	0905                	addi	s2,s2,1
     3ea:	04090503          	lb	a0,64(s2)
    int v[size_N];
     3ee:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3f0:	04097d03          	0x4097d03
    int v[size_N];
     3f4:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3f6:	0505                	addi	a0,a0,1
     3f8:	0306                	slli	t1,t1,0x1
     3fa:	0901                	addi	s2,s2,0
     3fc:	0004                	0x4
     3fe:	0301                	addi	t1,t1,0
     400:	0901                	addi	s2,s2,0
     402:	0000                	unimp
     404:	0301                	addi	t1,t1,0
     406:	0901                	addi	s2,s2,0
     408:	0000                	unimp
     40a:	0301                	addi	t1,t1,0
     40c:	0901                	addi	s2,s2,0
     40e:	0000                	unimp
     410:	0501                	addi	a0,a0,0
    int v[size_N];
     412:	0609                	addi	a2,a2,2
     414:	00090003          	lb	zero,0(s2)
    int q[size_N];
     418:	0100                	addi	s0,sp,128
     41a:	0505                	addi	a0,a0,1
     41c:	0306                	slli	t1,t1,0x1
    int num_temp[size_N];
     41e:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
    int denum_temp[size_D];
     422:	0501                	addi	a0,a0,0
     424:	060c                	addi	a1,sp,768
     426:	04090003          	lb	zero,64(s2)
    int num_temp[size_N];
     42a:	0100                	addi	s0,sp,128
    int denum_temp[size_D];
     42c:	1805                	addi	a6,a6,-31
     42e:	02090303          	lb	t1,32(s2)
   if(size_N == 106) {
     432:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     434:	1105                	addi	sp,sp,-31
     436:	0200                	addi	s0,sp,256
     438:	0104                	addi	s1,sp,128
     43a:	0306                	slli	t1,t1,0x1
     43c:	097d                	addi	s2,s2,31
    int v[size_N];
     43e:	0008                	0x8
     440:	0501                	addi	a0,a0,0
    int denum_temp[size_D];
     442:	0005                	c.nop	1
     444:	0402                	c.slli64	s0
     446:	0601                	addi	a2,a2,0
   if(size_N == 106) {
     448:	00090003          	lb	zero,0(s2)
     array_equ(num_temp, num, size_N - 1);   // 105 elemani ücer ücer yap...
     44c:	0100                	addi	s0,sp,128
     44e:	0705                	addi	a4,a4,1
     450:	04090803          	lb	a6,64(s2)
     454:	0100                	addi	s0,sp,128
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     456:	0306                	slli	t1,t1,0x1
     458:	0900                	addi	s0,sp,144
        array_mod(num_temp, mod, size_N - 1);
     45a:	000e                	c.slli	zero,0x3
     45c:	0501                	addi	a0,a0,0
     45e:	0302                	c.slli64	t1
     460:	0902                	c.slli64	s2
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     462:	0006                	c.slli	zero,0x1
     464:	0501                	addi	a0,a0,0
        array_mod(num_temp, mod, size_N - 1);
     466:	0306                	slli	t1,t1,0x1
        while(num_temp[size_N - 1] < 0){
     468:	0902                	c.slli64	s2
     46a:	0008                	0x8
     46c:	0501                	addi	a0,a0,0
     46e:	0302                	c.slli64	t1
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     470:	0902                	c.slli64	s2
     472:	000c                	0xc
     474:	0501                	addi	a0,a0,0
     476:	0305                	addi	t1,t1,1
     478:	00080903          	lb	s2,0(a6)
     array_equ(num_temp, num, size_N );
     47c:	0501                	addi	a0,a0,0
     47e:	00030607          	0x30607
        array_mod(num_temp, mod, size_N);
     482:	0009                	c.nop	2
     484:	0100                	addi	s0,sp,128
     486:	1d05                	addi	s10,s10,-31
     488:	0200                	addi	s0,sp,256
    array_equ(denum_temp,denum,size_D);
     48a:	0104                	addi	s1,sp,128
     48c:	0306                	slli	t1,t1,0x1
     48e:	0908                	addi	a0,sp,144
     490:	0018                	0x18
	array_mod(denum_temp,mod,size_D);
     492:	0501                	addi	a0,a0,0
     494:	0009                	c.nop	2
     496:	0402                	c.slli64	s0
     498:	0601                	addi	a2,a2,0
    for (i = 0; i < size_N; ++i){
     49a:	00090003          	lb	zero,0(s2)
     49e:	0100                	addi	s0,sp,128
    for (i = size_D-1; i >= 0; i = i-1){
     4a0:	1405                	addi	s0,s0,-31
     4a2:	04090103          	lb	sp,64(s2)
     4a6:	0100                	addi	s0,sp,128
     4a8:	0d05                	addi	s10,s10,1
     4aa:	0200                	addi	s0,sp,256
    for (i = 0; i < size_N; ++i){
     4ac:	0304                	addi	s1,sp,384
     4ae:	0306                	slli	t1,t1,0x1
        if ( (b_N*u)%mod == 1 )
     4b0:	0968                	addi	a0,sp,156
    for (u = 0; u < mod; ++u){
     4b2:	0004                	0x4
     4b4:	0501                	addi	a0,a0,0
     4b6:	0018                	0x18
     4b8:	0402                	c.slli64	s0
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4ba:	01030603          	lb	a2,16(t1)
     4be:	0009                	c.nop	2
     4c0:	0100                	addi	s0,sp,128
        q[i] = 0;
     4c2:	0200                	addi	s0,sp,256
     4c4:	0304                	addi	s1,sp,384
     4c6:	06097f03          	0x6097f03
        v[i] = 0;
     4ca:	0100                	addi	s0,sp,128
        q[i] = 0;
     4cc:	0d05                	addi	s10,s10,1
     4ce:	0200                	addi	s0,sp,256
        v[i] = 0;
     4d0:	0304                	addi	s1,sp,384
     4d2:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_N; ++i){
     4d4:	0901                	addi	s2,s2,0
     4d6:	0004                	0x4
        if( denum_temp[i] != 0 )
     4d8:	0501                	addi	a0,a0,0
    for (i = size_D-1; i >= 0; i = i-1){
     4da:	0018                	0x18
     4dc:	0402                	c.slli64	s0
        if ( (b_N*u)%mod == 1 )
     4de:	00030603          	lb	a2,0(t1)
     4e2:	0009                	c.nop	2
     4e4:	0100                	addi	s0,sp,128
     4e6:	2c05                	jal	716 <ext_euclid+0x5c>
    for (u = 0; u < mod; ++u){
     4e8:	0200                	addi	s0,sp,256
     4ea:	0304                	addi	s1,sp,384
        if( num_temp[i] != 0 )
     4ec:	0306                	slli	t1,t1,0x1
    for (i = size_N-1; i >= 0; i = i-1){
     4ee:	097e                	slli	s2,s2,0x1f
     4f0:	0004                	0x4
     4f2:	0501                	addi	a0,a0,0
     4f4:	0014                	0x14
     4f6:	0402                	c.slli64	s0
     4f8:	0301                	addi	t1,t1,0
     4fa:	0900                	addi	s0,sp,144
         if(size_N == 106) {
     4fc:	0004                	0x4
     4fe:	0501                	addi	a0,a0,0
     500:	0009                	c.nop	2
        v[(d-d2)] = u*r_d;
     502:	0402                	c.slli64	s0
     504:	0601                	addi	a2,a2,0
     506:	00090003          	lb	zero,0(s2)
     50a:	0100                	addi	s0,sp,128
     50c:	1d05                	addi	s10,s10,-31
     50e:	0200                	addi	s0,sp,256
         if(size_N == 106) {
     510:	0204                	addi	s1,sp,256
     512:	0306                	slli	t1,t1,0x1
            array_mod(v, mod, size_N - 1);
     514:	097f                	0x97f
     516:	0004                	0x4
     518:	0501                	addi	a0,a0,0
     51a:	0103060f          	0x103060f
            while(v[size_N - 1] < 0){
     51e:	0809                	addi	a6,a6,2
     520:	0100                	addi	s0,sp,128
     522:	1105                	addi	sp,sp,-31
     524:	0200                	addi	s0,sp,256
            v[size_N - 1] = v[size_N - 1] % mod;
     526:	0304                	addi	s1,sp,384
     528:	0306                	slli	t1,t1,0x1
     52a:	00040913          	mv	s2,s0
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     52e:	0501                	addi	a0,a0,0
     530:	0025                	c.nop	9
     532:	0402                	c.slli64	s0
     534:	00030603          	lb	a2,0(t1)
     538:	0409                	addi	s0,s0,2
     53a:	0100                	addi	s0,sp,128
        if(size_N == 106) {
     53c:	2b05                	jal	a6c <generate_keys+0x19e>
     53e:	0200                	addi	s0,sp,256
     540:	0304                	addi	s1,sp,384
     542:	04090003          	lb	zero,64(s2)
            array_mod(product, mod, size_N - 1);
     546:	0100                	addi	s0,sp,128
     548:	2e05                	jal	878 <ext_euclid+0x1be>
     54a:	0200                	addi	s0,sp,256
            while(product[size_N - 1] < 0){
     54c:	0304                	addi	s1,sp,384
     54e:	02090003          	lb	zero,32(s2)
     552:	0100                	addi	s0,sp,128
     554:	2a05                	jal	684 <polydiv+0x298>
     556:	0200                	addi	s0,sp,256
            product[size_N - 1] = product[size_N - 1] % mod;
     558:	0304                	addi	s1,sp,384
     55a:	06097f03          	0x6097f03
     55e:	0100                	addi	s0,sp,128
     560:	2e05                	jal	890 <ext_euclid+0x1d6>
     562:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     564:	0304                	addi	s1,sp,384
     566:	02090103          	lb	sp,32(s2)
 	if(size_N == 106) {
     56a:	0100                	addi	s0,sp,128
            array_mod(num_temp, mod, size_N - 1);
     56c:	2505                	jal	b8c <generate_keys+0x2be>
     56e:	0200                	addi	s0,sp,256
     570:	0304                	addi	s1,sp,384
     572:	04090003          	lb	zero,64(s2)
            while(num_temp[size_N - 1] < 0){
     576:	0100                	addi	s0,sp,128
     578:	2805                	jal	5a8 <polydiv+0x1bc>
     57a:	0200                	addi	s0,sp,256
     57c:	0304                	addi	s1,sp,384
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     57e:	0306                	slli	t1,t1,0x1
     580:	097f                	0x97f
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     582:	0002                	c.slli64	zero
     584:	0501                	addi	a0,a0,0
     586:	0020                	addi	s0,sp,8
     588:	0402                	c.slli64	s0
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     58a:	0301                	addi	t1,t1,0
     58c:	0900                	addi	s0,sp,144
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     58e:	0000                	unimp
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     590:	0501                	addi	a0,a0,0
     592:	000d                	c.nop	3
     594:	0402                	c.slli64	s0
     596:	0601                	addi	a2,a2,0
            array_mod(q, mod, size_N - 1);
     598:	00090003          	lb	zero,0(s2)
     59c:	0100                	addi	s0,sp,128
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     59e:	2505                	jal	bbe <generate_keys+0x2f0>
            array_mod(q, mod, size_N - 1);
     5a0:	0200                	addi	s0,sp,256
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     5a2:	0204                	addi	s1,sp,256
     5a4:	0306                	slli	t1,t1,0x1
            array_mod(q, mod, size_N - 1);
     5a6:	097f                	0x97f
            while(q[size_N - 1] < 0){
     5a8:	0004                	0x4
     5aa:	0501                	addi	a0,a0,0
     5ac:	04020027          	0x4020027
            q[size_N - 1] = q[size_N - 1] % mod;
     5b0:	0602                	c.slli64	a2
     5b2:	00090003          	lb	zero,0(s2)
     5b6:	0100                	addi	s0,sp,128
     5b8:	1d05                	addi	s10,s10,-31
                v[size_N - 1] = v[size_N - 1]+mod;
     5ba:	0200                	addi	s0,sp,256
     5bc:	0104                	addi	s1,sp,128
     5be:	0306                	slli	t1,t1,0x1
     5c0:	0900                	addi	s0,sp,144
            array_mod(v, mod, size_N);
     5c2:	0006                	c.slli	zero,0x1
     5c4:	0501                	addi	a0,a0,0
     5c6:	0009                	c.nop	2
     5c8:	0402                	c.slli64	s0
     5ca:	0601                	addi	a2,a2,0
                product[size_N - 1] = product[size_N - 1]+mod;
     5cc:	00090003          	lb	zero,0(s2)
     5d0:	0100                	addi	s0,sp,128
     5d2:	1405                	addi	s0,s0,-31
            array_mod(product, mod, size_N);
     5d4:	04090803          	lb	a6,64(s2)
     5d8:	0100                	addi	s0,sp,128
     5da:	0205                	addi	tp,tp,1
     5dc:	02090903          	lb	s2,32(s2)
            num_temp[i] = num_temp[i] - product[i];
     5e0:	0100                	addi	s0,sp,128
     5e2:	1105                	addi	sp,sp,-31
     5e4:	0200                	addi	s0,sp,256
     5e6:	0104                	addi	s1,sp,128
     5e8:	0306                	slli	t1,t1,0x1
        for (i = 0; i < size_N; ++i){
     5ea:	097e                	slli	s2,s2,0x1f
     5ec:	0008                	0x8
            num_temp[i] = num_temp[i] - product[i];
     5ee:	0501                	addi	a0,a0,0
     5f0:	0009                	c.nop	2
     5f2:	0402                	c.slli64	s0
        for (i = 0; i < size_N; ++i){
     5f4:	0601                	addi	a2,a2,0
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     5f6:	00090103          	lb	sp,0(s2)
     5fa:	0100                	addi	s0,sp,128
     5fc:	0505                	addi	a0,a0,1
            array_mod(num_temp, mod, size_N);
     5fe:	0200                	addi	s0,sp,256
     600:	0104                	addi	s1,sp,128
     602:	04097f03          	0x4097f03
            array_add(q, v, size_N );
     606:	0100                	addi	s0,sp,128
     608:	0306                	slli	t1,t1,0x1
     60a:	00040907          	0x40907
            array_mod(q, mod, size_N);
     60e:	0301                	addi	t1,t1,0
     610:	0902                	c.slli64	s2
     612:	000a                	c.slli	zero,0x2
     614:	0301                	addi	t1,t1,0
    int v[size_N];
     616:	0902                	c.slli64	s2
        for (i = size_N-1; i >= 0; i = i-1){
     618:	0000                	unimp
     61a:	0501                	addi	a0,a0,0
     61c:	0601                	addi	a2,a2,0
     61e:	00090103          	lb	sp,0(s2)
     622:	0100                	addi	s0,sp,128
     624:	1405                	addi	s0,s0,-31
     626:	2a096603          	0x2a096603
                q[size_N - 1] = q[size_N - 1]+mod;
     62a:	0100                	addi	s0,sp,128
     62c:	1105                	addi	sp,sp,-31
     62e:	0200                	addi	s0,sp,256
            if( num_temp[i] != 0 )
     630:	0304                	addi	s1,sp,384
        for (i = size_N-1; i >= 0; i = i-1){
     632:	0306                	slli	t1,t1,0x1
     634:	0908                	addi	a0,sp,144
            v[i] = 0;
     636:	0004                	0x4
     638:	0501                	addi	a0,a0,0
     63a:	0029                	c.nop	10
     63c:	0402                	c.slli64	s0
     63e:	00030603          	lb	a2,0(t1)
        for (i = 0; i < size_N; ++i){
     642:	0409                	addi	s0,s0,2
     644:	0100                	addi	s0,sp,128
    while (d >= d2){
     646:	2f05                	jal	d76 <zero_loop+0x4>
     648:	0200                	addi	s0,sp,256
    if(size_N == 106) {
     64a:	0304                	addi	s1,sp,384
     64c:	04090003          	lb	zero,64(s2)
     650:	0100                	addi	s0,sp,128
     array_equ(result, q, size_N - 1);   // 105 elemani ücer ücer yap...
     652:	3205                	jal	ffffff72 <_stack_start+0xfffeff72>
     654:	0200                	addi	s0,sp,256
     656:	0304                	addi	s1,sp,384
     658:	02090003          	lb	zero,32(s2)
     65c:	0100                	addi	s0,sp,128
     65e:	2a05                	jal	78e <ext_euclid+0xd4>
     660:	0200                	addi	s0,sp,256
     result[size_N - 1] = q[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     662:	0304                	addi	s1,sp,384
     664:	06097f03          	0x6097f03
     668:	0100                	addi	s0,sp,128
     66a:	3205                	jal	ffffff8a <_stack_start+0xfffeff8a>
     66c:	0200                	addi	s0,sp,256
    for(i = size_N; i < (2*size_N); ++i){
     66e:	0304                	addi	s1,sp,384
     670:	02090103          	lb	sp,32(s2)
        result[i] = num_temp[i-size_N];
     674:	0100                	addi	s0,sp,128
     676:	2905                	jal	aa6 <generate_keys+0x1d8>
     678:	0200                	addi	s0,sp,256
    for(i = size_N; i < (2*size_N); ++i){
     67a:	0304                	addi	s1,sp,384
     67c:	04090003          	lb	zero,64(s2)
}
     680:	0100                	addi	s0,sp,128
     682:	2805                	jal	6b2 <polydiv+0x2c6>
     684:	0200                	addi	s0,sp,256
     686:	0304                	addi	s1,sp,384
     688:	0306                	slli	t1,t1,0x1
     68a:	097f                	0x97f
     68c:	0002                	c.slli64	zero
     68e:	0501                	addi	a0,a0,0
     690:	0020                	addi	s0,sp,8
     692:	0402                	c.slli64	s0
     694:	0301                	addi	t1,t1,0
     696:	0900                	addi	s0,sp,144
     698:	0000                	unimp
     69a:	0501                	addi	a0,a0,0
     69c:	000d                	c.nop	3
     69e:	0402                	c.slli64	s0
     6a0:	0601                	addi	a2,a2,0
     6a2:	00090003          	lb	zero,0(s2)
     6a6:	0100                	addi	s0,sp,128
        result[i] = num_temp[i-size_N];
     6a8:	2505                	jal	cc8 <ntru_deceypt+0x7e>
     6aa:	0200                	addi	s0,sp,256
     6ac:	0204                	addi	s1,sp,256
     6ae:	0306                	slli	t1,t1,0x1
     6b0:	097f                	0x97f
     6b2:	0004                	0x4
    for(i = size_N; i < (2*size_N); ++i){
     6b4:	0501                	addi	a0,a0,0
     6b6:	04020027          	0x4020027
    int ri_2[size]; // MX-ring poly, a
     6ba:	0602                	c.slli64	a2
     6bc:	00090003          	lb	zero,0(s2)
     6c0:	0100                	addi	s0,sp,128
     6c2:	0905                	addi	s2,s2,1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6c4:	0200                	addi	s0,sp,256
     6c6:	0304                	addi	s1,sp,384
     6c8:	0306                	slli	t1,t1,0x1
     6ca:	0909                	addi	s2,s2,2
     6cc:	0008                	0x8
     6ce:	0501                	addi	a0,a0,0
     6d0:	0002                	c.slli64	zero
     6d2:	0402                	c.slli64	s0
     6d4:	09010303          	lb	t1,144(sp)
     6d8:	0004                	0x4
     6da:	0501                	addi	a0,a0,0
     6dc:	001d                	c.nop	7
     6de:	0402                	c.slli64	s0
    int ri_2[size]; // MX-ring poly, a
     6e0:	097e0303          	lb	t1,151(t3)
     6e4:	0008                	0x8
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6e6:	0501                	addi	a0,a0,0
     6e8:	0346                	slli	t1,t1,0x11
     6ea:	090e                	slli	s2,s2,0x3
    int ri[size];
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0501                	addi	a0,a0,0
     6f0:	0305                	addi	t1,t1,1
    int ti_1[size]; // ti_1[0] = 1
     6f2:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
     6f6:	0501                	addi	a0,a0,0
    int ti[size];
     6f8:	0646                	slli	a2,a2,0x11
     6fa:	00097d03          	0x97d03
    int qi_1[size];
     6fe:	0100                	addi	s0,sp,128
     700:	1d05                	addi	s10,s10,-31
     702:	02090303          	lb	t1,32(s2)
    int temp[size];
     706:	0100                	addi	s0,sp,128
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     708:	4605                	li	a2,1
     70a:	04097d03          	0x4097d03
    int ri_2[size]; // MX-ring poly, a
     70e:	0100                	addi	s0,sp,128
     710:	0905                	addi	s2,s2,1
    int temp[size];
     712:	0a090303          	lb	t1,160(s2)
        ti_2[i] = 0;
     716:	0100                	addi	s0,sp,128
     718:	4605                	li	a2,1
     71a:	0c097d03          	0xc097d03
    for (i = 0; i < size; ++i) {
     71e:	0100                	addi	s0,sp,128
     720:	0905                	addi	s2,s2,1
    array_equ(ri_2,polyR,size);
     722:	12090303          	lb	t1,288(s2)
     726:	0100                	addi	s0,sp,128
     728:	4605                	li	a2,1
    array_equ(ri_1,polyf,size);
     72a:	02097d03          	0x2097d03
     72e:	0100                	addi	s0,sp,128
     730:	0905                	addi	s2,s2,1
    ti_1[0] = 1;
     732:	04090303          	lb	t1,64(s2)
     736:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     738:	4605                	li	a2,1
     73a:	02097d03          	0x2097d03
     73e:	0100                	addi	s0,sp,128
            ti[i] = ti_2[i] - temp[i];
     740:	0905                	addi	s2,s2,1
     742:	00090303          	lb	t1,0(s2)
     746:	0100                	addi	s0,sp,128
	array_mod(ri_2,mod,N+1);
     748:	04090303          	lb	t1,64(s2)
     74c:	0100                	addi	s0,sp,128
     74e:	08097d03          	0x8097d03
	array_mod(ri_1,mod,N+1);
     752:	0100                	addi	s0,sp,128
     754:	02090303          	lb	t1,32(s2)
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     758:	0100                	addi	s0,sp,128
     75a:	04090103          	lb	sp,64(s2)
     75e:	0100                	addi	s0,sp,128
     760:	06097f03          	0x6097f03
        for (i = N + 1; i < (2 * N + 2); ++i) {
     764:	0100                	addi	s0,sp,128
     766:	02090103          	lb	sp,32(s2)
     76a:	0100                	addi	s0,sp,128
     76c:	4605                	li	a2,1
     76e:	04097903          	0x4097903
        for (i = 0; i < N + 1; ++i) {
     772:	0100                	addi	s0,sp,128
     774:	0905                	addi	s2,s2,1
     776:	04090303          	lb	t1,64(s2)
        array_mod(temp,mod,N+1);
     77a:	0100                	addi	s0,sp,128
     77c:	0505                	addi	a0,a0,1
     77e:	0306                	slli	t1,t1,0x1
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     780:	0901                	addi	s2,s2,0
     782:	0004                	0x4
     784:	0301                	addi	t1,t1,0
     786:	0901                	addi	s2,s2,0
     788:	0000                	unimp
     78a:	0301                	addi	t1,t1,0
     78c:	0901                	addi	s2,s2,0
        array_equ(qi_1,res1,size);
     78e:	0000                	unimp
     790:	0501                	addi	a0,a0,0
     792:	0646                	slli	a2,a2,0x11
	array_mod(qi_1,mod,size);
     794:	00097a03          	0x97a03
     798:	0100                	addi	s0,sp,128
     79a:	0905                	addi	s2,s2,1
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     79c:	02090603          	lb	a2,32(s2)
     7a0:	0100                	addi	s0,sp,128
     7a2:	0505                	addi	a0,a0,1
     7a4:	0306                	slli	t1,t1,0x1
     7a6:	0901                	addi	s2,s2,0
     7a8:	0004                	0x4
     7aa:	0501                	addi	a0,a0,0
         array_equ(temp,res2,size);
     7ac:	0609                	addi	a2,a2,2
     7ae:	00090003          	lb	zero,0(s2)
	array_mod(temp,mod,size);
     7b2:	0100                	addi	s0,sp,128
     7b4:	0505                	addi	a0,a0,1
     7b6:	0306                	slli	t1,t1,0x1
     7b8:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
        for (i = 0; i < N + 1; ++i) {
     7bc:	0501                	addi	a0,a0,0
     7be:	060c                	addi	a1,sp,768
     7c0:	04090003          	lb	zero,64(s2)
        array_mod(ti,mod,N+1);
     7c4:	0100                	addi	s0,sp,128
     7c6:	1905                	addi	s2,s2,-31
     7c8:	02090303          	lb	t1,32(s2)
	array_equ(ri_2,ri_1,size);
     7cc:	0100                	addi	s0,sp,128
     7ce:	1105                	addi	sp,sp,-31
     7d0:	0200                	addi	s0,sp,256
	array_equ(ri_1,ri,size);
     7d2:	0104                	addi	s1,sp,128
     7d4:	0306                	slli	t1,t1,0x1
     7d6:	097d                	addi	s2,s2,31
     7d8:	0008                	0x8
	array_equ(ti_2,ti_1,size);
     7da:	0501                	addi	a0,a0,0
     7dc:	0005                	c.nop	1
     7de:	0402                	c.slli64	s0
     7e0:	0601                	addi	a2,a2,0
	array_equ(ti_1,ti,size);
     7e2:	00090003          	lb	zero,0(s2)
     7e6:	0100                	addi	s0,sp,128
     7e8:	04090703          	lb	a4,64(s2)
        for (i = 0; i < N + 1; ++i) {
     7ec:	0100                	addi	s0,sp,128
     7ee:	0306                	slli	t1,t1,0x1
     7f0:	0900                	addi	s0,sp,144
    while (controlR != 0) {
     7f2:	000a                	c.slli	zero,0x2
     7f4:	0301                	addi	t1,t1,0
        for (j = 0; j < mod; ++j) {
     7f6:	0901                	addi	s2,s2,0
            if (((ri_2[0] * j) % mod) == 1)
     7f8:	0002                	c.slli64	zero
        for (j = 0; j < mod; ++j) {
     7fa:	0301                	addi	t1,t1,0
     7fc:	0904                	addi	s1,sp,144
     7fe:	000c                	0xc
     800:	0501                	addi	a0,a0,0
     802:	00030607          	0x30607
        for (i = 0; i < N + 1; ++i) {
     806:	0009                	c.nop	2
     808:	0100                	addi	s0,sp,128
    }
     80a:	1d05                	addi	s10,s10,-31
     80c:	0200                	addi	s0,sp,256
     80e:	0104                	addi	s1,sp,128
     810:	0306                	slli	t1,t1,0x1
     812:	0908                	addi	a0,sp,144
     814:	0012                	c.slli	zero,0x4
     816:	0501                	addi	a0,a0,0
     818:	0009                	c.nop	2
     81a:	0402                	c.slli64	s0
     81c:	0601                	addi	a2,a2,0
     81e:	00090003          	lb	zero,0(s2)
     822:	0100                	addi	s0,sp,128
     824:	1405                	addi	s0,s0,-31
     826:	04090103          	lb	sp,64(s2)
     82a:	0100                	addi	s0,sp,128
     82c:	0d05                	addi	s10,s10,1
     82e:	0200                	addi	s0,sp,256
     830:	0304                	addi	s1,sp,384
     832:	0306                	slli	t1,t1,0x1
        ti_2[i] = 0;
     834:	096d                	addi	s2,s2,27
     836:	0004                	0x4
     838:	0501                	addi	a0,a0,0
     83a:	0019                	c.nop	6
        ti_1[i] = 0;
     83c:	0402                	c.slli64	s0
        ti_2[i] = 0;
     83e:	01030603          	lb	a2,16(t1)
        ti_1[i] = 0;
     842:	0009                	c.nop	2
     844:	0100                	addi	s0,sp,128
    for (i = 0; i < size; ++i) {
     846:	1805                	addi	a6,a6,-31
     848:	0200                	addi	s0,sp,256
            ri[i - (N + 1)] = res[i];
     84a:	0304                	addi	s1,sp,384
     84c:	06097f03          	0x6097f03
     850:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     852:	0d05                	addi	s10,s10,1
     854:	0200                	addi	s0,sp,256
            ri[i - (N + 1)] = res[i];
     856:	0304                	addi	s1,sp,384
     858:	0306                	slli	t1,t1,0x1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     85a:	0901                	addi	s2,s2,0
            temp[i] = ri_2[i] - ri[i];
     85c:	0004                	0x4
     85e:	0501                	addi	a0,a0,0
     860:	0019                	c.nop	6
     862:	0402                	c.slli64	s0
     864:	00030603          	lb	a2,0(t1)
     868:	0009                	c.nop	2
     86a:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     86c:	2c05                	jal	a9c <generate_keys+0x1ce>
            temp[i] = ri_2[i] - ri[i];
     86e:	0200                	addi	s0,sp,256
     870:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     872:	0306                	slli	t1,t1,0x1
     874:	097e                	slli	s2,s2,0x1f
            ti[i] = ti_2[i] - temp[i];
     876:	0004                	0x4
     878:	0501                	addi	a0,a0,0
     87a:	0014                	0x14
     87c:	0402                	c.slli64	s0
     87e:	0301                	addi	t1,t1,0
     880:	0900                	addi	s0,sp,144
     882:	0004                	0x4
     884:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     886:	0009                	c.nop	2
            ti[i] = ti_2[i] - temp[i];
     888:	0402                	c.slli64	s0
     88a:	0601                	addi	a2,a2,0
        for (i = 0; i < N + 1; ++i) {
     88c:	00090003          	lb	zero,0(s2)
            qi_1[i] = 0;
     890:	0100                	addi	s0,sp,128
     892:	1d05                	addi	s10,s10,-31
     894:	0200                	addi	s0,sp,256
     896:	0204                	addi	s1,sp,256
            controlR += ri[i];
     898:	0306                	slli	t1,t1,0x1
     89a:	097f                	0x97f
            qi_1[i] = 0;
     89c:	0004                	0x4
     89e:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     8a0:	0103060f          	0x103060f
     8a4:	0809                	addi	a6,a6,2
            if (((ri_2[0] * j) % mod) == 1)
     8a6:	0100                	addi	s0,sp,128
     8a8:	1105                	addi	sp,sp,-31
     8aa:	0200                	addi	s0,sp,256
     8ac:	0304                	addi	s1,sp,384
     8ae:	0306                	slli	t1,t1,0x1
     8b0:	090e                	slli	s2,s2,0x3
     8b2:	0004                	0x4
     8b4:	0501                	addi	a0,a0,0
        for (j = 0; j < mod; ++j) {
     8b6:	0025                	c.nop	9
     8b8:	0402                	c.slli64	s0
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8ba:	00030603          	lb	a2,0(t1)
        for (i = 0; i < N + 1; ++i) {
     8be:	0409                	addi	s0,s0,2
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8c0:	0100                	addi	s0,sp,128
     8c2:	2b05                	jal	df2 <memcpy+0x6a>
     8c4:	0200                	addi	s0,sp,256
     8c6:	0304                	addi	s1,sp,384
     8c8:	04090003          	lb	zero,64(s2)
        for (i = 0; i < N + 1; ++i) {
     8cc:	0100                	addi	s0,sp,128
int* generate_keys(int N, int p, int q){
     8ce:	2e05                	jal	bfe <ntru_encyrpt+0x3c>
     8d0:	0200                	addi	s0,sp,256
     8d2:	0304                	addi	s1,sp,384
     8d4:	02090003          	lb	zero,32(s2)
     8d8:	0100                	addi	s0,sp,128
     8da:	2a05                	jal	a0a <generate_keys+0x13c>
     8dc:	0200                	addi	s0,sp,256
     8de:	0304                	addi	s1,sp,384
     8e0:	06097f03          	0x6097f03
     8e4:	0100                	addi	s0,sp,128
     8e6:	2e05                	jal	c16 <ntru_encyrpt+0x54>
     8e8:	0200                	addi	s0,sp,256
     8ea:	0304                	addi	s1,sp,384
     8ec:	02090103          	lb	sp,32(s2)
     8f0:	0100                	addi	s0,sp,128
     8f2:	2505                	jal	f12 <main+0x4>
     8f4:	0200                	addi	s0,sp,256
     8f6:	0304                	addi	s1,sp,384
     8f8:	04090003          	lb	zero,64(s2)
     8fc:	0100                	addi	s0,sp,128
     8fe:	2805                	jal	92e <generate_keys+0x60>
     900:	0200                	addi	s0,sp,256
     902:	0304                	addi	s1,sp,384
     904:	0306                	slli	t1,t1,0x1
     906:	097f                	0x97f
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     908:	0002                	c.slli64	zero
     90a:	0501                	addi	a0,a0,0
     90c:	0020                	addi	s0,sp,8
     90e:	0402                	c.slli64	s0
     910:	0301                	addi	t1,t1,0
     912:	0900                	addi	s0,sp,144
     914:	0000                	unimp
     916:	0501                	addi	a0,a0,0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     918:	000d                	c.nop	3
     91a:	0402                	c.slli64	s0
     91c:	0601                	addi	a2,a2,0
     91e:	00090003          	lb	zero,0(s2)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     922:	0100                	addi	s0,sp,128
     924:	2505                	jal	f44 <main+0x36>
     926:	0200                	addi	s0,sp,256
     928:	0204                	addi	s1,sp,256
     92a:	0306                	slli	t1,t1,0x1
     92c:	097f                	0x97f
     92e:	0004                	0x4
     930:	0501                	addi	a0,a0,0
     932:	04020027          	0x4020027
     936:	0602                	c.slli64	a2
     938:	00090003          	lb	zero,0(s2)
     93c:	0100                	addi	s0,sp,128
     93e:	1d05                	addi	s10,s10,-31
     940:	0200                	addi	s0,sp,256
     942:	0104                	addi	s1,sp,128
     944:	0306                	slli	t1,t1,0x1
     946:	0900                	addi	s0,sp,144
     948:	0006                	c.slli	zero,0x1
     94a:	0501                	addi	a0,a0,0
     94c:	0009                	c.nop	2
     94e:	0402                	c.slli64	s0
     950:	0601                	addi	a2,a2,0
     952:	00090003          	lb	zero,0(s2)
     956:	0100                	addi	s0,sp,128
     958:	1405                	addi	s0,s0,-31
     95a:	04090803          	lb	a6,64(s2)
     95e:	0100                	addi	s0,sp,128
     960:	0a05                	addi	s4,s4,1
     962:	02090903          	lb	s2,32(s2)
     966:	0100                	addi	s0,sp,128
     968:	1405                	addi	s0,s0,-31
     96a:	0200                	addi	s0,sp,256
     96c:	0104                	addi	s1,sp,128
     96e:	0306                	slli	t1,t1,0x1
     970:	097f                	0x97f
     972:	0008                	0x8
     974:	0501                	addi	a0,a0,0
     976:	0009                	c.nop	2
     978:	0402                	c.slli64	s0
     97a:	0601                	addi	a2,a2,0
     97c:	00090003          	lb	zero,0(s2)
     980:	0100                	addi	s0,sp,128
     982:	0505                	addi	a0,a0,1
     984:	0306                	slli	t1,t1,0x1
     986:	0906                	slli	s2,s2,0x1
     988:	0004                	0x4
     98a:	0301                	addi	t1,t1,0
     98c:	0902                	c.slli64	s2
    int polyR[N+1];
     98e:	0000                	unimp
     990:	0501                	addi	a0,a0,0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     992:	0601                	addi	a2,a2,0
    int polyR[N+1];
     994:	00090103          	lb	sp,0(s2)
     998:	0100                	addi	s0,sp,128
     99a:	1405                	addi	s0,s0,-31
     99c:	2a096803          	0x2a096803
     9a0:	0100                	addi	s0,sp,128
    polyR[N] = 1;
     9a2:	1105                	addi	sp,sp,-31
     9a4:	0200                	addi	s0,sp,256
     9a6:	0304                	addi	s1,sp,384
     9a8:	0306                	slli	t1,t1,0x1
     9aa:	0908                	addi	a0,sp,144
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9ac:	0004                	0x4
     9ae:	0501                	addi	a0,a0,0
     9b0:	0029                	c.nop	10
     9b2:	0402                	c.slli64	s0
     9b4:	00030603          	lb	a2,0(t1)
     9b8:	0409                	addi	s0,s0,2
     9ba:	0100                	addi	s0,sp,128
     9bc:	2f05                	jal	10ec <_endtext+0xbc>
     9be:	0200                	addi	s0,sp,256
     9c0:	0304                	addi	s1,sp,384
     9c2:	04090003          	lb	zero,64(s2)
     9c6:	0100                	addi	s0,sp,128
     9c8:	3205                	jal	2e8 <polymult2+0x5a>
     9ca:	0200                	addi	s0,sp,256
     9cc:	0304                	addi	s1,sp,384
     9ce:	02090003          	lb	zero,32(s2)
     9d2:	0100                	addi	s0,sp,128
     9d4:	2a05                	jal	b04 <generate_keys+0x236>
     9d6:	0200                	addi	s0,sp,256
     9d8:	0304                	addi	s1,sp,384
     9da:	06097f03          	0x6097f03
     9de:	0100                	addi	s0,sp,128
     9e0:	3205                	jal	300 <polymult2+0x72>
     9e2:	0200                	addi	s0,sp,256
     9e4:	0304                	addi	s1,sp,384
     9e6:	02090103          	lb	sp,32(s2)
     9ea:	0100                	addi	s0,sp,128
     9ec:	2905                	jal	e1c <memcpy+0x94>
     9ee:	0200                	addi	s0,sp,256
     9f0:	0304                	addi	s1,sp,384
     9f2:	04090003          	lb	zero,64(s2)
     9f6:	0100                	addi	s0,sp,128
     9f8:	2805                	jal	a28 <generate_keys+0x15a>
     9fa:	0200                	addi	s0,sp,256
     9fc:	0304                	addi	s1,sp,384
     9fe:	0306                	slli	t1,t1,0x1
     a00:	097f                	0x97f
     a02:	0002                	c.slli64	zero
     a04:	0501                	addi	a0,a0,0
     a06:	0020                	addi	s0,sp,8
     a08:	0402                	c.slli64	s0
     a0a:	0301                	addi	t1,t1,0
     a0c:	0900                	addi	s0,sp,144
     a0e:	0000                	unimp
    polyR[0] = -1;
     a10:	0501                	addi	a0,a0,0
     a12:	000d                	c.nop	3
    for(i = 1; i < N; ++i){
     a14:	0402                	c.slli64	s0
     a16:	0601                	addi	a2,a2,0
     a18:	00090003          	lb	zero,0(s2)
    for (i = N; i < 55; ++i ){
     a1c:	0100                	addi	s0,sp,128
     a1e:	2505                	jal	103e <_endtext+0xe>
     a20:	0200                	addi	s0,sp,256
     a22:	0204                	addi	s1,sp,256
    for(i = 0; i < N; ++i){
     a24:	0306                	slli	t1,t1,0x1
        random_keys[i] = f[i];
     a26:	097f                	0x97f
     a28:	0004                	0x4
     a2a:	0501                	addi	a0,a0,0
     a2c:	04020027          	0x4020027
    for(i = 0; i < N; ++i){
     a30:	0602                	c.slli64	a2
     a32:	00090003          	lb	zero,0(s2)
    for(i = N; i < (2*N); ++i){
     a36:	0100                	addi	s0,sp,128
     a38:	0a05                	addi	s4,s4,1
     a3a:	0200                	addi	s0,sp,256
     a3c:	0304                	addi	s1,sp,384
        random_keys[i] = g[i-N];
     a3e:	0306                	slli	t1,t1,0x1
     a40:	090a                	slli	s2,s2,0x2
     a42:	0008                	0x8
     a44:	0501                	addi	a0,a0,0
    for(i = N; i < (2*N); ++i){
     a46:	0020                	addi	s0,sp,8
     a48:	0402                	c.slli64	s0
    for(i = (2*N); i < (3*N); ++i){
     a4a:	097f0303          	lb	t1,151(t5)
     a4e:	0008                	0x8
    fp = ext_euclid(polyR, f, (N+1), p);
     a50:	0501                	addi	a0,a0,0
     a52:	090b0343          	fmadd.s	ft6,fs6,fa6,ft1,rne
     a56:	0006                	c.slli	zero,0x1
     a58:	0501                	addi	a0,a0,0
     a5a:	0305                	addi	t1,t1,1
    for(i = (2*N); i < (3*N); ++i){
     a5c:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
        random_keys[i] = fp[i-(2*N)];
     a60:	0301                	addi	t1,t1,0
     a62:	0901                	addi	s2,s2,0
     a64:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     a66:	0301                	addi	t1,t1,0
     a68:	0902                	c.slli64	s2
    fq = ext_euclid(polyR, f, (N+1), q);
     a6a:	0000                	unimp
     a6c:	0501                	addi	a0,a0,0
     a6e:	0609                	addi	a2,a2,2
     a70:	00090003          	lb	zero,0(s2)
     a74:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     a76:	4305                	li	t1,1
     a78:	04097a03          	0x4097a03
     a7c:	0100                	addi	s0,sp,128
        random_keys[i] = fq[i-(3*N)];
     a7e:	0905                	addi	s2,s2,1
     a80:	02090603          	lb	a2,32(s2)
     a84:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     a86:	4305                	li	t1,1
     a88:	04097a03          	0x4097a03
    fg = polymult2(fq, N, g, N, 0);
     a8c:	0100                	addi	s0,sp,128
     a8e:	0905                	addi	s2,s2,1
     a90:	1c090603          	lb	a2,448(s2)
     a94:	0100                	addi	s0,sp,128
    for(i = 0; i < (2*N-1); ++i){
     a96:	06090103          	lb	sp,96(s2)
     a9a:	0100                	addi	s0,sp,128
     a9c:	06090203          	lb	tp,96(s2)
     aa0:	0100                	addi	s0,sp,128
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     aa2:	04090103          	lb	sp,64(s2)
     aa6:	0100                	addi	s0,sp,128
     aa8:	08097f03          	0x8097f03
    for(i = (4*N); i < (5*N); ++i){
     aac:	0100                	addi	s0,sp,128
     aae:	02090103          	lb	sp,32(s2)
     ab2:	0100                	addi	s0,sp,128
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     ab4:	0605                	addi	a2,a2,1
     ab6:	04090403          	lb	s0,64(s2)
     aba:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     abc:	4305                	li	t1,1
     abe:	04097203          	0x4097203
    for(i = (5*N); i < (6*N+1); ++i){
     ac2:	0100                	addi	s0,sp,128
     ac4:	0905                	addi	s2,s2,1
        random_keys[i] = polyR[i-(5*N)];
     ac6:	0a090603          	lb	a2,160(s2)
     aca:	0100                	addi	s0,sp,128
     acc:	0505                	addi	a0,a0,1
    for(i = (5*N); i < (6*N+1); ++i){
     ace:	0306                	slli	t1,t1,0x1
     ad0:	0901                	addi	s2,s2,0
     ad2:	0004                	0x4
     ad4:	0301                	addi	t1,t1,0
     ad6:	0901                	addi	s2,s2,0
     ad8:	0000                	unimp
}
     ada:	0301                	addi	t1,t1,0
     adc:	0901                	addi	s2,s2,0
     ade:	0000                	unimp
     ae0:	0301                	addi	t1,t1,0
     ae2:	0901                	addi	s2,s2,0
     ae4:	0000                	unimp
     ae6:	0501                	addi	a0,a0,0
     ae8:	0609                	addi	a2,a2,2
     aea:	00090003          	lb	zero,0(s2)
     aee:	0100                	addi	s0,sp,128
     af0:	0405                	addi	s0,s0,1
     af2:	0306                	slli	t1,t1,0x1
     af4:	0904                	addi	s1,sp,144
     af6:	0006                	c.slli	zero,0x1
     af8:	0501                	addi	a0,a0,0
     afa:	0606                	slli	a2,a2,0x1
     afc:	00090003          	lb	zero,0(s2)
     b00:	0100                	addi	s0,sp,128
     b02:	0306                	slli	t1,t1,0x1
     b04:	0901                	addi	s2,s2,0
     b06:	0004                	0x4
     b08:	0301                	addi	t1,t1,0
     b0a:	0901                	addi	s2,s2,0
     b0c:	000a                	c.slli	zero,0x2
     b0e:	0501                	addi	a0,a0,0
     b10:	0003061b          	0x3061b
     b14:	0009                	c.nop	2
     b16:	0100                	addi	s0,sp,128
     b18:	0905                	addi	s2,s2,1
        polyR[i] = 0;
     b1a:	04090703          	lb	a4,64(s2)
     b1e:	0100                	addi	s0,sp,128
     b20:	1b05                	addi	s6,s6,-31
     b22:	08097903          	0x8097903
    for(i = 1; i < N; ++i){
     b26:	0100                	addi	s0,sp,128
        f[i] = 0;
     b28:	0505                	addi	a0,a0,1
     b2a:	0306                	slli	t1,t1,0x1
     b2c:	0906                	slli	s2,s2,0x1
     b2e:	0004                	0x4
     b30:	0501                	addi	a0,a0,0
     b32:	0309                	addi	t1,t1,2
     b34:	0901                	addi	s2,s2,0
        g[i] = 0;
     b36:	0000                	unimp
     b38:	0301                	addi	t1,t1,0
     b3a:	0901                	addi	s2,s2,0
     b3c:	0002                	c.slli64	zero
     b3e:	0501                	addi	a0,a0,0
    for (i = N; i < 55; ++i ){
     b40:	030e                	slli	t1,t1,0x3
     b42:	0900                	addi	s0,sp,144
        random_keys[i] = f[i];
     b44:	0000                	unimp
     b46:	0501                	addi	a0,a0,0
     b48:	00030617          	auipc	a2,0x30
     b4c:	0009                	c.nop	2
     b4e:	0100                	addi	s0,sp,128
     b50:	0e05                	addi	t3,t3,1
     b52:	04090003          	lb	zero,64(s2)
     b56:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     b58:	0905                	addi	s2,s2,1
        random_keys[i] = g[i-N];
     b5a:	0306                	slli	t1,t1,0x1
     b5c:	00040903          	lb	s2,0(s0)
     b60:	0501                	addi	a0,a0,0
     b62:	0635                	addi	a2,a2,13
    for(i = N; i < (2*N); ++i){
     b64:	00090003          	lb	zero,0(s2)
     b68:	0100                	addi	s0,sp,128
        random_keys[i] = fp[i-(2*N)];
     b6a:	1e05                	addi	t3,t3,-31
     b6c:	04090003          	lb	zero,64(s2)
     b70:	0100                	addi	s0,sp,128
     b72:	0605                	addi	a2,a2,1
    for(i = (2*N); i < (3*N); ++i){
     b74:	0306                	slli	t1,t1,0x1
     b76:	0978                	addi	a4,sp,156
     b78:	0006                	c.slli	zero,0x1
        random_keys[i] = fq[i-(3*N)];
     b7a:	0501                	addi	a0,a0,0
     b7c:	0305                	addi	t1,t1,1
     b7e:	00080903          	lb	s2,0(a6)
     b82:	0501                	addi	a0,a0,0
     b84:	0309                	addi	t1,t1,2
     b86:	0908                	addi	a0,sp,144
    for(i = (3*N); i < (4*N); ++i){
     b88:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     b8a:	0501                	addi	a0,a0,0
    for(i = (3*N); i < (4*N); ++i){
     b8c:	0305                	addi	t1,t1,1
        fg[i] = fg[i]*p;
     b8e:	0905                	addi	s2,s2,1
    for(i = 0; i < (2*N-1); ++i){
     b90:	0008                	0x8
     b92:	0501                	addi	a0,a0,0
        fg[i] = fg[i]*p;
     b94:	0302                	c.slli64	t1
     b96:	0901                	addi	s2,s2,0
     b98:	0008                	0x8
     b9a:	0501                	addi	a0,a0,0
    for(i = 0; i < (2*N-1); ++i){
     b9c:	0305                	addi	t1,t1,1
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b9e:	0902                	c.slli64	s2
     ba0:	0008                	0x8
     ba2:	0501                	addi	a0,a0,0
     ba4:	060c                	addi	a1,sp,768
     ba6:	00090003          	lb	zero,0(s2)
    for(i = (4*N); i < (5*N); ++i){
     baa:	0100                	addi	s0,sp,128
     bac:	1105                	addi	sp,sp,-31
        random_keys[i] = polyR[i-(5*N)];
     bae:	0200                	addi	s0,sp,256
     bb0:	0104                	addi	s1,sp,128
     bb2:	0306                	slli	t1,t1,0x1
     bb4:	0900                	addi	s0,sp,144
     bb6:	0002                	c.slli64	zero
     bb8:	0501                	addi	a0,a0,0
     bba:	0005                	c.nop	1
    for(i = (5*N); i < (6*N+1); ++i){
     bbc:	0402                	c.slli64	s0
        random_keys[i] = polyR[i-(5*N)];
     bbe:	0601                	addi	a2,a2,0
    for(i = (5*N); i < (6*N+1); ++i){
     bc0:	00090003          	lb	zero,0(s2)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bc4:	0100                	addi	s0,sp,128
     bc6:	1805                	addi	a6,a6,-31
     bc8:	0200                	addi	s0,sp,256
     bca:	0104                	addi	s1,sp,128
     bcc:	0306                	slli	t1,t1,0x1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bce:	0906                	slli	s2,s2,0x1
     bd0:	0004                	0x4
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bd2:	0501                	addi	a0,a0,0
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bd4:	0005                	c.nop	1
     bd6:	0402                	c.slli64	s0
     bd8:	0601                	addi	a2,a2,0
     bda:	08090003          	lb	zero,128(s2)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bde:	0100                	addi	s0,sp,128
     be0:	0c05                	addi	s8,s8,1
     be2:	0200                	addi	s0,sp,256
     be4:	0104                	addi	s1,sp,128
     be6:	04097a03          	0x4097a03
    temp = polymult(public_key,N,random_val,48,q,0);
     bea:	0100                	addi	s0,sp,128
     bec:	0200                	addi	s0,sp,256
     bee:	0104                	addi	s1,sp,128
     bf0:	04090f03          	lb	t5,64(s2)
     bf4:	0100                	addi	s0,sp,128
     bf6:	1105                	addi	sp,sp,-31
     bf8:	0200                	addi	s0,sp,256
     bfa:	0104                	addi	s1,sp,128
	array_add(temp,message,48);
     bfc:	0306                	slli	t1,t1,0x1
     bfe:	097f                	0x97f
     c00:	0002                	c.slli64	zero
    temp = polymult(public_key,N,random_val,48,q,0);
     c02:	0501                	addi	a0,a0,0
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c04:	0005                	c.nop	1
     c06:	0402                	c.slli64	s0
	array_add(temp,message,48);
     c08:	0601                	addi	a2,a2,0
     c0a:	00090003          	lb	zero,0(s2)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c0e:	0100                	addi	s0,sp,128
     c10:	0d05                	addi	s10,s10,1
     c12:	0306                	slli	t1,t1,0x1
     c14:	0965                	addi	s2,s2,25
     c16:	0008                	0x8
     c18:	0501                	addi	a0,a0,0
     c1a:	0638                	addi	a4,sp,776
    for(i = (2*N); i < (3*N); ++i){
     c1c:	00090003          	lb	zero,0(s2)
     c20:	0100                	addi	s0,sp,128
     c22:	2205                	jal	d42 <reset_handler+0x2c>
     c24:	02090003          	lb	zero,32(s2)
}
     c28:	0100                	addi	s0,sp,128
     c2a:	0905                	addi	s2,s2,1
     c2c:	0200                	addi	s0,sp,256
     c2e:	0304                	addi	s1,sp,384
     c30:	0306                	slli	t1,t1,0x1
     c32:	090e                	slli	s2,s2,0x3
     c34:	0006                	c.slli	zero,0x1
     c36:	0501                	addi	a0,a0,0
        CT[i-(2*N)] = CT[i];
     c38:	000e                	c.slli	zero,0x3
     c3a:	0402                	c.slli64	s0
     c3c:	00030603          	lb	a2,0(t1)
    for(i = (2*N); i < (3*N); ++i){
     c40:	0409                	addi	s0,s0,2
     c42:	0100                	addi	s0,sp,128
        CT[i-(2*N)] = CT[i];
     c44:	0200                	addi	s0,sp,256
     c46:	0304                	addi	s1,sp,384
    for(i = (2*N); i < (3*N); ++i){
     c48:	04090103          	lb	sp,64(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c4c:	0100                	addi	s0,sp,128
     c4e:	0200                	addi	s0,sp,256
     c50:	0304                	addi	s1,sp,384
    for(i = (2*N); i < ((2*N)+N); ++i){
     c52:	02097f03          	0x2097f03
     c56:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c58:	0905                	addi	s2,s2,1
     c5a:	0200                	addi	s0,sp,256
     c5c:	0304                	addi	s1,sp,384
     c5e:	0306                	slli	t1,t1,0x1
     c60:	0901                	addi	s2,s2,0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c62:	0004                	0x4
     c64:	0501                	addi	a0,a0,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c66:	000e                	c.slli	zero,0x3
     c68:	0402                	c.slli64	s0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c6a:	00030603          	lb	a2,0(t1)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c6e:	0009                	c.nop	2
     c70:	0100                	addi	s0,sp,128
     c72:	1d05                	addi	s10,s10,-31
     c74:	0200                	addi	s0,sp,256
     c76:	0304                	addi	s1,sp,384
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c78:	0306                	slli	t1,t1,0x1
     c7a:	097e                	slli	s2,s2,0x1f
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c7c:	0004                	0x4
     c7e:	0501                	addi	a0,a0,0
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c80:	0309                	addi	t1,t1,2
     c82:	00040907          	0x40907
     c86:	0501                	addi	a0,a0,0
     c88:	0003060b          	0x3060b
     c8c:	0009                	c.nop	2
     c8e:	0100                	addi	s0,sp,128
     c90:	2005                	jal	cb0 <ntru_deceypt+0x66>
    for(i = (2*N); i < ((2*N)+N); ++i){
     c92:	0200                	addi	s0,sp,256
     c94:	0204                	addi	s1,sp,256
     c96:	0306                	slli	t1,t1,0x1
     c98:	097f                	0x97f
     c9a:	0002                	c.slli64	zero
        if(a2[i] <= q/2)
     c9c:	0501                	addi	a0,a0,0
     c9e:	0022                	c.slli	zero,0x8
     ca0:	0402                	c.slli64	s0
    for (i = 0; i < N; ++i){
     ca2:	0602                	c.slli64	a2
     ca4:	00090003          	lb	zero,0(s2)
    c = polymult2(secret_key_fp,N,a2,N,0);
     ca8:	0100                	addi	s0,sp,128
     caa:	0905                	addi	s2,s2,1
     cac:	0306                	slli	t1,t1,0x1
     cae:	0909                	addi	s2,s2,2
     cb0:	0004                	0x4
     cb2:	0501                	addi	a0,a0,0
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cb4:	0615                	addi	a2,a2,5
     cb6:	00090003          	lb	zero,0(s2)
     cba:	0100                	addi	s0,sp,128
     cbc:	0c05                	addi	s8,s8,1
     cbe:	06090003          	lb	zero,96(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     cc2:	0100                	addi	s0,sp,128
     cc4:	1a05                	addi	s4,s4,-31
}
     cc6:	0200                	addi	s0,sp,256
     cc8:	0204                	addi	s1,sp,256
     cca:	0306                	slli	t1,t1,0x1
     ccc:	097f                	0x97f
     cce:	0004                	0x4
     cd0:	0501                	addi	a0,a0,0
     cd2:	0309                	addi	t1,t1,2
     cd4:	00040907          	0x40907
     cd8:	0501                	addi	a0,a0,0
     cda:	0003060b          	0x3060b
        a2[i-(2*N)] = a2[i];
     cde:	0009                	c.nop	2
     ce0:	0100                	addi	s0,sp,128
     ce2:	2005                	jal	d02 <ntru_deceypt+0xb8>
    for(i = (2*N); i < ((2*N)+N); ++i){
     ce4:	0200                	addi	s0,sp,256
     ce6:	0204                	addi	s1,sp,256
        a2[i-(2*N)] = a2[i];
     ce8:	0306                	slli	t1,t1,0x1
     cea:	097f                	0x97f
    for(i = (2*N); i < ((2*N)+N); ++i){
     cec:	0002                	c.slli64	zero
        if(a2[i] <= q/2)
     cee:	0501                	addi	a0,a0,0
     cf0:	0022                	c.slli	zero,0x8
     cf2:	0402                	c.slli64	s0
            a2[i] = (-1)*(q-a2[i]);
     cf4:	0602                	c.slli64	a2
     cf6:	00090003          	lb	zero,0(s2)
    for (i = 0; i < N; ++i){
     cfa:	0100                	addi	s0,sp,128
     cfc:	1805                	addi	a6,a6,-31
     cfe:	0200                	addi	s0,sp,256
        c2[i-(2*N)] = c2[i];
     d00:	0104                	addi	s1,sp,128
     d02:	0306                	slli	t1,t1,0x1
     d04:	0900                	addi	s0,sp,144
     d06:	0002                	c.slli64	zero
    for(i = (2*N); i < ((2*N)+N); ++i){
     d08:	0501                	addi	a0,a0,0
     d0a:	0005                	c.nop	1
        c2[i-(2*N)] = c2[i];
     d0c:	0402                	c.slli64	s0
     d0e:	0601                	addi	a2,a2,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     d10:	08090003          	lb	zero,128(s2)
  jal x0, default_exc_handler
     d14:	0100                	addi	s0,sp,128
  mv  x1, x0
     d16:	0c05                	addi	s8,s8,1
     d18:	04091103          	lh	sp,64(s2)
  mv  x3, x1
     d1c:	0100                	addi	s0,sp,128
  mv  x4, x1
     d1e:	0905                	addi	s2,s2,1
  mv  x5, x1
     d20:	0306                	slli	t1,t1,0x1
  mv  x6, x1
     d22:	097e                	slli	s2,s2,0x1f
  mv  x7, x1
     d24:	0006                	c.slli	zero,0x1
  mv  x8, x1
     d26:	0501                	addi	a0,a0,0
  mv  x9, x1
     d28:	0616                	slli	a2,a2,0x5
  mv x10, x1
     d2a:	00090003          	lb	zero,0(s2)
  mv x12, x1
     d2e:	0100                	addi	s0,sp,128
  mv x13, x1
     d30:	0d05                	addi	s10,s10,1
  mv x14, x1
     d32:	04090003          	lb	zero,64(s2)
  mv x16, x1
     d36:	0100                	addi	s0,sp,128
  mv x17, x1
     d38:	1305                	addi	t1,t1,-31
  mv x18, x1
     d3a:	04090003          	lb	zero,64(s2)
  mv x20, x1
     d3e:	0100                	addi	s0,sp,128
  mv x21, x1
     d40:	0a05                	addi	s4,s4,1
  mv x22, x1
     d42:	0306                	slli	t1,t1,0x1
  mv x23, x1
     d44:	0902                	c.slli64	s2
  mv x24, x1
     d46:	0006                	c.slli	zero,0x1
  mv x25, x1
     d48:	0501                	addi	a0,a0,0
  mv x26, x1
     d4a:	060c                	addi	a1,sp,768
  mv x27, x1
     d4c:	00090003          	lb	zero,0(s2)
  mv x29, x1
     d50:	0100                	addi	s0,sp,128
  mv x30, x1
     d52:	0d05                	addi	s10,s10,1
  mv x31, x1
     d54:	0306                	slli	t1,t1,0x1
  la   x2, _stack_start
     d56:	0901                	addi	s2,s2,0
     d58:	0004                	0x4
     d5a:	0301                	addi	t1,t1,0
     d5c:	0901                	addi	s2,s2,0
  la x26, _bss_start
     d5e:	000a                	c.slli	zero,0x2
     d60:	0501                	addi	a0,a0,0
     d62:	0312                	slli	t1,t1,0x4
     d64:	0900                	addi	s0,sp,144
  la x27, _bss_end
     d66:	0000                	unimp
     d68:	0501                	addi	a0,a0,0
     d6a:	0614                	addi	a3,sp,768
     d6c:	00090003          	lb	zero,0(s2)
  bge x26, x27, zero_loop_end
     d70:	0100                	addi	s0,sp,128
  sw x0, 0(x26)
     d72:	1205                	addi	tp,tp,-31
     d74:	04090003          	lb	zero,64(s2)
  ble x26, x27, zero_loop
     d78:	0100                	addi	s0,sp,128
     d7a:	0d05                	addi	s10,s10,1
  addi x10, x0, 0
     d7c:	0306                	slli	t1,t1,0x1
     d7e:	00040903          	lb	s2,0(s0)
  addi x11, x0, 0
     d82:	0501                	addi	a0,a0,0
  jal x1, main
     d84:	0003062b          	0x3062b
     d88:	0009                	c.nop	2
     d8a:	0100                	addi	s0,sp,128
     d8c:	1b05                	addi	s6,s6,-31
     d8e:	04090003          	lb	zero,64(s2)
     d92:	0100                	addi	s0,sp,128
     d94:	0905                	addi	s2,s2,1
     d96:	0306                	slli	t1,t1,0x1
     d98:	00040907          	0x40907
     d9c:	0501                	addi	a0,a0,0
     d9e:	00030613          	mv	a2,t1
     da2:	0009                	c.nop	2
     da4:	0100                	addi	s0,sp,128
     da6:	0905                	addi	s2,s2,1
     da8:	0306                	slli	t1,t1,0x1
     daa:	0904                	addi	s1,sp,144
     dac:	000e                	c.slli	zero,0x3
     dae:	0501                	addi	a0,a0,0
     db0:	0003060b          	0x3060b
     db4:	0409                	addi	s0,s0,2
     db6:	0100                	addi	s0,sp,128
     db8:	0d05                	addi	s10,s10,1
     dba:	0306                	slli	t1,t1,0x1
     dbc:	0901                	addi	s2,s2,0
     dbe:	0004                	0x4
     dc0:	0301                	addi	t1,t1,0
     dc2:	0901                	addi	s2,s2,0
     dc4:	0008                	0x8
     dc6:	0501                	addi	a0,a0,0
     dc8:	0612                	slli	a2,a2,0x4
     dca:	00090003          	lb	zero,0(s2)
     dce:	0100                	addi	s0,sp,128
     dd0:	0306                	slli	t1,t1,0x1
     dd2:	0900                	addi	s0,sp,144
     dd4:	0004                	0x4
     dd6:	0501                	addi	a0,a0,0
     dd8:	061a                	slli	a2,a2,0x6
     dda:	00090003          	lb	zero,0(s2)
     dde:	0100                	addi	s0,sp,128
     de0:	1205                	addi	tp,tp,-31
     de2:	04090003          	lb	zero,64(s2)
     de6:	0100                	addi	s0,sp,128
     de8:	0d05                	addi	s10,s10,1
     dea:	0306                	slli	t1,t1,0x1
     dec:	00040903          	lb	s2,0(s0)
     df0:	0501                	addi	a0,a0,0
     df2:	00030637          	lui	a2,0x30
     df6:	0009                	c.nop	2
     df8:	0100                	addi	s0,sp,128
     dfa:	2105                	jal	121a <_bss_start+0x66>
     dfc:	04090003          	lb	zero,64(s2)
     e00:	0100                	addi	s0,sp,128
     e02:	1505                	addi	a0,a0,-31
     e04:	0200                	addi	s0,sp,256
     e06:	0104                	addi	s1,sp,128
     e08:	0306                	slli	t1,t1,0x1
     e0a:	00080907          	0x80907
     e0e:	0501                	addi	a0,a0,0
     e10:	0009                	c.nop	2
     e12:	0402                	c.slli64	s0
     e14:	0601                	addi	a2,a2,0
     e16:	00090003          	lb	zero,0(s2)
     e1a:	0100                	addi	s0,sp,128
     e1c:	0305                	addi	t1,t1,1
     e1e:	0306                	slli	t1,t1,0x1
     e20:	0905                	addi	s2,s2,1
     e22:	0004                	0x4
     e24:	0501                	addi	a0,a0,0
     e26:	0605                	addi	a2,a2,1
     e28:	00090003          	lb	zero,0(s2)
     e2c:	0100                	addi	s0,sp,128
     e2e:	0d05                	addi	s10,s10,1
     e30:	0306                	slli	t1,t1,0x1
     e32:	0901                	addi	s2,s2,0
     e34:	0004                	0x4
     e36:	0301                	addi	t1,t1,0
     e38:	0901                	addi	s2,s2,0
     e3a:	000a                	c.slli	zero,0x2
     e3c:	0501                	addi	a0,a0,0
     e3e:	0312                	slli	t1,t1,0x4
     e40:	0900                	addi	s0,sp,144
     e42:	0000                	unimp
     e44:	0501                	addi	a0,a0,0
     e46:	0003061b          	0x3061b
     e4a:	0009                	c.nop	2
     e4c:	0100                	addi	s0,sp,128
     e4e:	1205                	addi	tp,tp,-31
     e50:	04090003          	lb	zero,64(s2)
     e54:	0100                	addi	s0,sp,128
     e56:	0d05                	addi	s10,s10,1
     e58:	0306                	slli	t1,t1,0x1
     e5a:	00040903          	lb	s2,0(s0)
     e5e:	0501                	addi	a0,a0,0
     e60:	0639                	addi	a2,a2,14
     e62:	00090003          	lb	zero,0(s2)
     e66:	0100                	addi	s0,sp,128
     e68:	0d05                	addi	s10,s10,1
     e6a:	04090703          	lb	a4,64(s2)
     e6e:	0100                	addi	s0,sp,128
     e70:	2205                	jal	f90 <main+0x82>
     e72:	08097903          	0x8097903
     e76:	0100                	addi	s0,sp,128
     e78:	0605                	addi	a2,a2,1
     e7a:	0306                	slli	t1,t1,0x1
     e7c:	0906                	slli	s2,s2,0x1
     e7e:	0004                	0x4
     e80:	0501                	addi	a0,a0,0
     e82:	030d                	addi	t1,t1,3
     e84:	0901                	addi	s2,s2,0
     e86:	0000                	unimp
     e88:	0301                	addi	t1,t1,0
     e8a:	0901                	addi	s2,s2,0
     e8c:	0002                	c.slli64	zero
     e8e:	0501                	addi	a0,a0,0
     e90:	0003062b          	0x3062b
     e94:	0009                	c.nop	2
     e96:	0100                	addi	s0,sp,128
     e98:	0d05                	addi	s10,s10,1
     e9a:	08090703          	lb	a4,128(s2)
     e9e:	0100                	addi	s0,sp,128
     ea0:	2b05                	jal	13d0 <_bss_start+0x21c>
     ea2:	06097903          	0x6097903
     ea6:	0100                	addi	s0,sp,128
     ea8:	0d05                	addi	s10,s10,1
     eaa:	02090703          	lb	a4,32(s2)
     eae:	0100                	addi	s0,sp,128
     eb0:	1b05                	addi	s6,s6,-31
     eb2:	02097903          	0x2097903
     eb6:	0100                	addi	s0,sp,128
     eb8:	0305                	addi	t1,t1,1
     eba:	0306                	slli	t1,t1,0x1
     ebc:	0906                	slli	s2,s2,0x1
     ebe:	0004                	0x4
     ec0:	0501                	addi	a0,a0,0
     ec2:	030d                	addi	t1,t1,3
     ec4:	0901                	addi	s2,s2,0
     ec6:	0000                	unimp
     ec8:	0301                	addi	t1,t1,0
     eca:	0901                	addi	s2,s2,0
     ecc:	0002                	c.slli64	zero
     ece:	0501                	addi	a0,a0,0
     ed0:	0312                	slli	t1,t1,0x4
     ed2:	0900                	addi	s0,sp,144
     ed4:	0000                	unimp
     ed6:	0501                	addi	a0,a0,0
     ed8:	0614                	addi	a3,sp,768
     eda:	00090003          	lb	zero,0(s2)
     ede:	0100                	addi	s0,sp,128
     ee0:	1205                	addi	tp,tp,-31
     ee2:	04090003          	lb	zero,64(s2)
     ee6:	0100                	addi	s0,sp,128
     ee8:	0d05                	addi	s10,s10,1
     eea:	0306                	slli	t1,t1,0x1
     eec:	00040903          	lb	s2,0(s0)
     ef0:	0501                	addi	a0,a0,0
     ef2:	0003062b          	0x3062b
     ef6:	0009                	c.nop	2
     ef8:	0100                	addi	s0,sp,128
     efa:	1b05                	addi	s6,s6,-31
     efc:	04090003          	lb	zero,64(s2)
     f00:	0100                	addi	s0,sp,128
     f02:	1105                	addi	sp,sp,-31
     f04:	0306                	slli	t1,t1,0x1
     f06:	094a                	slli	s2,s2,0x12
     f08:	0006                	c.slli	zero,0x1
     f0a:	0501                	addi	a0,a0,0
     f0c:	062e                	slli	a2,a2,0xb
int main(){
     f0e:	00090003          	lb	zero,0(s2)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f12:	0100                	addi	s0,sp,128
     f14:	1f05                	addi	t5,t5,-31
     f16:	02090003          	lb	zero,32(s2)
     f1a:	0100                	addi	s0,sp,128
     f1c:	0d05                	addi	s10,s10,1
     f1e:	0306                	slli	t1,t1,0x1
int main(){
     f20:	0905                	addi	s2,s2,1
     f22:	0006                	c.slli	zero,0x1
     f24:	0501                	addi	a0,a0,0
     f26:	0311                	addi	t1,t1,4
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f28:	000a090b          	0xa090b
    keys = generate_keys(N, p, q);
     f2c:	0501                	addi	a0,a0,0
     f2e:	063a                	slli	a2,a2,0xe
     f30:	00090003          	lb	zero,0(s2)
     f34:	0100                	addi	s0,sp,128
     f36:	2505                	jal	1556 <product2+0x14a>
    for(i = 0; i < N; ++i){
     f38:	02090003          	lb	zero,32(s2)
        secret_key_f[i] = keys[i];
     f3c:	0100                	addi	s0,sp,128
     f3e:	0d05                	addi	s10,s10,1
     f40:	0306                	slli	t1,t1,0x1
     f42:	0905                	addi	s2,s2,1
     f44:	0006                	c.slli	zero,0x1
     f46:	0001                	nop
    for(i = 0; i < N; ++i){
     f48:	0402                	c.slli64	s0
     f4a:	09050303          	lb	t1,144(a0) # fffeb090 <_stack_start+0xfffdb090>
    for(i = N; i < (2*N); ++i){
     f4e:	000c                	0xc
     f50:	0501                	addi	a0,a0,0
     f52:	0030                	addi	a2,sp,8
     f54:	0402                	c.slli64	s0
     f56:	00030603          	lb	a2,0(t1)
        secret_key_fp[i-(2*N)] = keys[i];
     f5a:	0009                	c.nop	2
     f5c:	0100                	addi	s0,sp,128
     f5e:	2705                	jal	167e <result+0x1a>
     f60:	0200                	addi	s0,sp,256
     f62:	0304                	addi	s1,sp,384
    for(i = (2*N); i < (3*N); ++i){
     f64:	06090003          	lb	zero,96(s2)
    for(i = (3*N); i < (4*N); ++i){
     f68:	0100                	addi	s0,sp,128
     f6a:	2105                	jal	138a <_bss_start+0x1d6>
     f6c:	0200                	addi	s0,sp,256
     f6e:	0304                	addi	s1,sp,384
     f70:	04097f03          	0x4097f03
        public_key[i-(4*N)] = keys[i];
     f74:	0100                	addi	s0,sp,128
     f76:	2705                	jal	1696 <result+0x32>
     f78:	0200                	addi	s0,sp,256
     f7a:	0304                	addi	s1,sp,384
     f7c:	04090103          	lb	sp,64(s2)
    for(i = (4*N); i < (5*N); ++i){
     f80:	0100                	addi	s0,sp,128
     f82:	1905                	addi	s2,s2,-31
     f84:	0200                	addi	s0,sp,256
     f86:	0304                	addi	s1,sp,384
     f88:	02090003          	lb	zero,32(s2)
        ring_poly[i-(5*N)] = keys[i];
     f8c:	0100                	addi	s0,sp,128
     f8e:	2105                	jal	13ae <_bss_start+0x1fa>
     f90:	0200                	addi	s0,sp,256
     f92:	0304                	addi	s1,sp,384
    for(i = (5*N); i < (6*N+1); ++i){
     f94:	0306                	slli	t1,t1,0x1
     f96:	097f                	0x97f
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f98:	0004                	0x4
     f9a:	0501                	addi	a0,a0,0
     f9c:	0311                	addi	t1,t1,4
     f9e:	0908                	addi	a0,sp,144
     fa0:	0002                	c.slli64	zero
     fa2:	0501                	addi	a0,a0,0
     fa4:	063c                	addi	a5,sp,776
     fa6:	00090003          	lb	zero,0(s2)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     faa:	0100                	addi	s0,sp,128
     fac:	2605                	jal	12cc <_bss_start+0x118>
     fae:	02090003          	lb	zero,32(s2)
     fb2:	0100                	addi	s0,sp,128
     fb4:	0d05                	addi	s10,s10,1
     fb6:	0306                	slli	t1,t1,0x1
     fb8:	0905                	addi	s2,s2,1
     fba:	0006                	c.slli	zero,0x1
            resultkon[0] = 0xDEDEDEDE;
     fbc:	0501                	addi	a0,a0,0
     fbe:	0306                	slli	t1,t1,0x1
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fc0:	00080903          	lb	s2,0(a6)
     fc4:	0501                	addi	a0,a0,0
     fc6:	030d                	addi	t1,t1,3
     fc8:	0905                	addi	s2,s2,1
            resultkon[0] = 0xDEDEDEDE;
     fca:	0000                	unimp
     fcc:	0501                	addi	a0,a0,0
	    *var = resultkon[0];
     fce:	09030303          	lb	t1,144(t1)
    for(i = 0; i < 32; ++i){
     fd2:	0008                	0x8
        if(!(message[i] == Dec_Message[i])){
     fd4:	0501                	addi	a0,a0,0
     fd6:	030d                	addi	t1,t1,3
     fd8:	0908                	addi	a0,sp,144
     fda:	0000                	unimp
     fdc:	0501                	addi	a0,a0,0
     fde:	0309                	addi	t1,t1,2
     fe0:	0904                	addi	s1,sp,144
     fe2:	0008                	0x8
            resultkon[0] = 0xBABABABA;
     fe4:	0601                	addi	a2,a2,0
     fe6:	097efb03          	0x97efb03
     fea:	0000                	unimp
     fec:	0501                	addi	a0,a0,0
 	    *var = resultkon[0];
     fee:	001c                	0x1c
     ff0:	0402                	c.slli64	s0
     ff2:	0601                	addi	a2,a2,0
     ff4:	09018503          	lb	a0,144(gp)
     ff8:	0002                	c.slli64	zero
}
     ffa:	0501                	addi	a0,a0,0
     ffc:	0009                	c.nop	2
     ffe:	0402                	c.slli64	s0
    1000:	0601                	addi	a2,a2,0
    1002:	08090003          	lb	zero,128(s2)
    1006:	0100                	addi	s0,sp,128
    1008:	1105                	addi	sp,sp,-31
            resultkon[0] = 0xDEDEDEDE;
    100a:	0306                	slli	t1,t1,0x1
	    *var = resultkon[0];
    100c:	00080977          	0x80977
    1010:	0501                	addi	a0,a0,0
    1012:	062e                	slli	a2,a2,0xb
    1014:	00090003          	lb	zero,0(s2)
    for(i = 0; i < 32; ++i){
    1018:	0100                	addi	s0,sp,128
    101a:	1f05                	addi	t5,t5,-31
    101c:	02090003          	lb	zero,32(s2)
    1020:	0100                	addi	s0,sp,128
    1022:	0d05                	addi	s10,s10,1
    1024:	0306                	slli	t1,t1,0x1
    1026:	090a                	slli	s2,s2,0x2
    1028:	0006                	c.slli	zero,0x1
    102a:	0501                	addi	a0,a0,0
    102c:	0003060f          	0x3060f
    1030:	0009                	c.nop	2
    1032:	0100                	addi	s0,sp,128
    1034:	2405                	jal	1254 <_bss_start+0xa0>
    1036:	0200                	addi	s0,sp,256
    1038:	0204                	addi	s1,sp,256
    103a:	0306                	slli	t1,t1,0x1
    103c:	097f                	0x97f
    103e:	0002                	c.slli64	zero
    1040:	0501                	addi	a0,a0,0
    1042:	0026                	c.slli	zero,0x9
    1044:	0402                	c.slli64	s0
    1046:	0602                	c.slli64	a2
    1048:	00090003          	lb	zero,0(s2)
    104c:	0100                	addi	s0,sp,128
    104e:	0d05                	addi	s10,s10,1
    1050:	0200                	addi	s0,sp,256
    1052:	0304                	addi	s1,sp,384
    1054:	0306                	slli	t1,t1,0x1
    1056:	0909                	addi	s2,s2,2
    1058:	0004                	0x4
    105a:	0501                	addi	a0,a0,0
    105c:	0012                	c.slli	zero,0x4
    105e:	0402                	c.slli64	s0
    1060:	00030603          	lb	a2,0(t1)
    1064:	0009                	c.nop	2
    1066:	0100                	addi	s0,sp,128
    1068:	2105                	jal	1488 <product2+0x7c>
    106a:	0200                	addi	s0,sp,256
    106c:	0304                	addi	s1,sp,384
    106e:	0306                	slli	t1,t1,0x1
    1070:	097f                	0x97f
    1072:	000a                	c.slli	zero,0x2
    1074:	0501                	addi	a0,a0,0
    1076:	0015                	c.nop	5
    1078:	0402                	c.slli64	s0
    107a:	0301                	addi	t1,t1,0
    107c:	0900                	addi	s0,sp,144
    107e:	0002                	c.slli64	zero
    1080:	0501                	addi	a0,a0,0
    1082:	0009                	c.nop	2
    1084:	0402                	c.slli64	s0
    1086:	0601                	addi	a2,a2,0
    1088:	00090003          	lb	zero,0(s2)
    108c:	0100                	addi	s0,sp,128
    108e:	0b05                	addi	s6,s6,1
    1090:	0306                	slli	t1,t1,0x1
    1092:	04097fb3          	0x4097fb3
    1096:	0100                	addi	s0,sp,128
    1098:	0505                	addi	a0,a0,1
    109a:	0900d403          	lhu	s0,144(ra)
    109e:	0004                	0x4
    10a0:	0501                	addi	a0,a0,0
    10a2:	00030607          	0x30607
    10a6:	0009                	c.nop	2
    10a8:	0100                	addi	s0,sp,128
    10aa:	0605                	addi	a2,a2,1
    10ac:	0306                	slli	t1,t1,0x1
    10ae:	0901                	addi	s2,s2,0
    10b0:	0008                	0x8
    10b2:	0301                	addi	t1,t1,0
    10b4:	0901                	addi	s2,s2,0
    10b6:	0010                	0x10
    10b8:	0501                	addi	a0,a0,0
    10ba:	0619                	addi	a2,a2,6
    10bc:	00090003          	lb	zero,0(s2)
    10c0:	0100                	addi	s0,sp,128
    10c2:	1b05                	addi	s6,s6,-31
    10c4:	0200                	addi	s0,sp,256
    10c6:	0104                	addi	s1,sp,128
    10c8:	0c090303          	lb	t1,192(s2)
    10cc:	0100                	addi	s0,sp,128
    10ce:	1305                	addi	t1,t1,-31
    10d0:	0200                	addi	s0,sp,256
    10d2:	0104                	addi	s1,sp,128
    10d4:	04090103          	lb	sp,64(s2)
    10d8:	0100                	addi	s0,sp,128
    10da:	1505                	addi	a0,a0,-31
    10dc:	0200                	addi	s0,sp,256
    10de:	0104                	addi	s1,sp,128
    10e0:	0306                	slli	t1,t1,0x1
    10e2:	097f                	0x97f
    10e4:	0008                	0x8
    10e6:	0501                	addi	a0,a0,0
    10e8:	0005                	c.nop	1
    10ea:	0402                	c.slli64	s0
    10ec:	0601                	addi	a2,a2,0
    10ee:	00090003          	lb	zero,0(s2)
    10f2:	0100                	addi	s0,sp,128
    10f4:	0306                	slli	t1,t1,0x1
    10f6:	0904                	addi	s1,sp,144
    10f8:	0004                	0x4
    10fa:	0301                	addi	t1,t1,0
    10fc:	0902                	c.slli64	s2
    10fe:	0000                	unimp
    1100:	0501                	addi	a0,a0,0
    1102:	0601                	addi	a2,a2,0
    1104:	00090103          	lb	sp,0(s2)
    1108:	0100                	addi	s0,sp,128
    110a:	0905                	addi	s2,s2,1
    110c:	0200                	addi	s0,sp,256
    110e:	0304                	addi	s1,sp,384
    1110:	0306                	slli	t1,t1,0x1
    1112:	097a                	slli	s2,s2,0x1e
    1114:	002a                	c.slli	zero,0xa
    1116:	0501                	addi	a0,a0,0
    1118:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    111c:	00030603          	lb	a2,0(t1)
    1120:	0009                	c.nop	2
    1122:	0100                	addi	s0,sp,128
    1124:	2505                	jal	1744 <result+0xe0>
    1126:	0200                	addi	s0,sp,256
    1128:	0304                	addi	s1,sp,384
    112a:	0306                	slli	t1,t1,0x1
    112c:	097f                	0x97f
    112e:	000c                	0xc
    1130:	0501                	addi	a0,a0,0
    1132:	033c                	addi	a5,sp,392
    1134:	090a                	slli	s2,s2,0x2
    1136:	0006                	c.slli	zero,0x1
    1138:	0501                	addi	a0,a0,0
    113a:	0305                	addi	t1,t1,1
    113c:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1140:	0301                	addi	t1,t1,0
    1142:	0901                	addi	s2,s2,0
    1144:	0000                	unimp
    1146:	0301                	addi	t1,t1,0
    1148:	0901                	addi	s2,s2,0
    114a:	0000                	unimp
    114c:	0501                	addi	a0,a0,0
    114e:	0609                	addi	a2,a2,2
    1150:	00090003          	lb	zero,0(s2)
    1154:	0100                	addi	s0,sp,128
    1156:	3c05                	jal	b86 <generate_keys+0x2b8>
    1158:	04097b03          	0x4097b03
    115c:	0100                	addi	s0,sp,128
    115e:	0905                	addi	s2,s2,1
    1160:	02090503          	lb	a0,32(s2)
    1164:	0100                	addi	s0,sp,128
    1166:	3c05                	jal	b96 <generate_keys+0x2c8>
    1168:	04097b03          	0x4097b03
    116c:	0100                	addi	s0,sp,128
    116e:	0905                	addi	s2,s2,1
    1170:	1c090503          	lb	a0,448(s2)
    1174:	0100                	addi	s0,sp,128
    1176:	06090103          	lb	sp,96(s2)
    117a:	0100                	addi	s0,sp,128
    117c:	06090103          	lb	sp,96(s2)
    1180:	0100                	addi	s0,sp,128
    1182:	06090203          	lb	tp,96(s2)
    1186:	0100                	addi	s0,sp,128
    1188:	06090103          	lb	sp,96(s2)
    118c:	0100                	addi	s0,sp,128
    118e:	06090103          	lb	sp,96(s2)
    1192:	0100                	addi	s0,sp,128
    1194:	06090103          	lb	sp,96(s2)
    1198:	0100                	addi	s0,sp,128
    119a:	3c05                	jal	bca <ntru_encyrpt+0x8>
    119c:	04097403          	0x4097403
    11a0:	0100                	addi	s0,sp,128
    11a2:	0905                	addi	s2,s2,1
    11a4:	06090503          	lb	a0,96(s2)
    11a8:	0100                	addi	s0,sp,128
    11aa:	0505                	addi	a0,a0,1
    11ac:	0306                	slli	t1,t1,0x1
    11ae:	0901                	addi	s2,s2,0
    11b0:	0004                	0x4
    11b2:	0301                	addi	t1,t1,0
    11b4:	0901                	addi	s2,s2,0
    11b6:	0000                	unimp
    11b8:	0301                	addi	t1,t1,0
    11ba:	0902                	c.slli64	s2
    11bc:	0000                	unimp
    11be:	0301                	addi	t1,t1,0
    11c0:	0901                	addi	s2,s2,0
    11c2:	0000                	unimp
    11c4:	0301                	addi	t1,t1,0
    11c6:	0901                	addi	s2,s2,0
    11c8:	0000                	unimp
    11ca:	0301                	addi	t1,t1,0
    11cc:	0901                	addi	s2,s2,0
    11ce:	0000                	unimp
    11d0:	0501                	addi	a0,a0,0
    11d2:	0609                	addi	a2,a2,2
    11d4:	00090003          	lb	zero,0(s2)
    11d8:	0100                	addi	s0,sp,128
    11da:	0505                	addi	a0,a0,1
    11dc:	0306                	slli	t1,t1,0x1
    11de:	0901                	addi	s2,s2,0
    11e0:	0002                	c.slli64	zero
    11e2:	0301                	addi	t1,t1,0
    11e4:	0901                	addi	s2,s2,0
    11e6:	0000                	unimp
    11e8:	0301                	addi	t1,t1,0
    11ea:	0901                	addi	s2,s2,0
    11ec:	0000                	unimp
    11ee:	0301                	addi	t1,t1,0
    11f0:	0901                	addi	s2,s2,0
    11f2:	0000                	unimp
    11f4:	0301                	addi	t1,t1,0
    11f6:	0902                	c.slli64	s2
    11f8:	0000                	unimp
    11fa:	0301                	addi	t1,t1,0
    11fc:	0901                	addi	s2,s2,0
    11fe:	0000                	unimp
    1200:	0501                	addi	a0,a0,0
    1202:	060c                	addi	a1,sp,768
    1204:	00090003          	lb	zero,0(s2)
    1208:	0100                	addi	s0,sp,128
    120a:	1105                	addi	sp,sp,-31
    120c:	02090103          	lb	sp,32(s2)
    1210:	0100                	addi	s0,sp,128
    1212:	0200                	addi	s0,sp,256
    1214:	0104                	addi	s1,sp,128
    1216:	0306                	slli	t1,t1,0x1
    1218:	097f                	0x97f
    121a:	0008                	0x8
    121c:	0501                	addi	a0,a0,0
    121e:	0005                	c.nop	1
    1220:	0402                	c.slli64	s0
    1222:	0601                	addi	a2,a2,0
    1224:	00090003          	lb	zero,0(s2)
    1228:	0100                	addi	s0,sp,128
    122a:	0306                	slli	t1,t1,0x1
    122c:	0908                	addi	a0,sp,144
    122e:	0004                	0x4
    1230:	0301                	addi	t1,t1,0
    1232:	0902                	c.slli64	s2
    1234:	0008                	0x8
    1236:	0301                	addi	t1,t1,0
    1238:	0902                	c.slli64	s2
    123a:	0008                	0x8
    123c:	0501                	addi	a0,a0,0
    123e:	060d                	addi	a2,a2,3
    1240:	00090003          	lb	zero,0(s2)
    1244:	0100                	addi	s0,sp,128
    1246:	0505                	addi	a0,a0,1
    1248:	0306                	slli	t1,t1,0x1
    124a:	00060903          	lb	s2,0(a2) # 30000 <_stack_start+0x20000>
    124e:	0501                	addi	a0,a0,0
    1250:	0900030b          	0x900030b
    1254:	0000                	unimp
    1256:	0501                	addi	a0,a0,0
    1258:	0624                	addi	s1,sp,776
    125a:	00090b03          	lb	s6,0(s2)
    125e:	0100                	addi	s0,sp,128
    1260:	1905                	addi	s2,s2,-31
    1262:	08091f03          	lh	t5,128(s2)
    1266:	0100                	addi	s0,sp,128
    1268:	0905                	addi	s2,s2,1
    126a:	0306                	slli	t1,t1,0x1
    126c:	0958                	addi	a4,sp,148
    126e:	0008                	0x8
    1270:	0501                	addi	a0,a0,0
    1272:	0302                	c.slli64	t1
    1274:	0902                	c.slli64	s2
    1276:	0000                	unimp
    1278:	0301                	addi	t1,t1,0
    127a:	00080903          	lb	s2,0(a6)
    127e:	0501                	addi	a0,a0,0
    1280:	0309                	addi	t1,t1,2
    1282:	00080903          	lb	s2,0(a6)
    1286:	0501                	addi	a0,a0,0
    1288:	0003060f          	0x3060f
    128c:	0009                	c.nop	2
    128e:	0100                	addi	s0,sp,128
    1290:	0905                	addi	s2,s2,1
    1292:	0306                	slli	t1,t1,0x1
    1294:	0901                	addi	s2,s2,0
    1296:	000c                	0xc
    1298:	0501                	addi	a0,a0,0
    129a:	0019                	c.nop	6
    129c:	0402                	c.slli64	s0
    129e:	0301                	addi	t1,t1,0
    12a0:	0900                	addi	s0,sp,144
    12a2:	0004                	0x4
    12a4:	0501                	addi	a0,a0,0
    12a6:	0009                	c.nop	2
    12a8:	0402                	c.slli64	s0
    12aa:	0601                	addi	a2,a2,0
    12ac:	00090003          	lb	zero,0(s2)
    12b0:	0100                	addi	s0,sp,128
    12b2:	1005                	c.nop	-31
    12b4:	0a090603          	lb	a2,160(s2)
    12b8:	0100                	addi	s0,sp,128
    12ba:	1505                	addi	a0,a0,-31
    12bc:	0200                	addi	s0,sp,256
    12be:	0104                	addi	s1,sp,128
    12c0:	0306                	slli	t1,t1,0x1
    12c2:	0900                	addi	s0,sp,144
    12c4:	0002                	c.slli64	zero
    12c6:	0501                	addi	a0,a0,0
    12c8:	0009                	c.nop	2
    12ca:	0402                	c.slli64	s0
    12cc:	0601                	addi	a2,a2,0
    12ce:	00090003          	lb	zero,0(s2)
    12d2:	0100                	addi	s0,sp,128
    12d4:	0306                	slli	t1,t1,0x1
    12d6:	0905                	addi	s2,s2,1
    12d8:	0004                	0x4
    12da:	0301                	addi	t1,t1,0
    12dc:	0902                	c.slli64	s2
    12de:	0008                	0x8
    12e0:	0501                	addi	a0,a0,0
    12e2:	0610                	addi	a2,sp,768
    12e4:	00090003          	lb	zero,0(s2)
    12e8:	0100                	addi	s0,sp,128
    12ea:	0905                	addi	s2,s2,1
    12ec:	0306                	slli	t1,t1,0x1
    12ee:	0901                	addi	s2,s2,0
    12f0:	000e                	c.slli	zero,0x3
    12f2:	0501                	addi	a0,a0,0
    12f4:	0302                	c.slli64	t1
    12f6:	0904                	addi	s1,sp,144
    12f8:	0006                	c.slli	zero,0x1
    12fa:	0501                	addi	a0,a0,0
    12fc:	0309                	addi	t1,t1,2
    12fe:	0905                	addi	s2,s2,1
    1300:	0008                	0x8
    1302:	0501                	addi	a0,a0,0
    1304:	0610                	addi	a2,sp,768
    1306:	00090003          	lb	zero,0(s2)
    130a:	0100                	addi	s0,sp,128
    130c:	0a05                	addi	s4,s4,1
    130e:	0306                	slli	t1,t1,0x1
    1310:	0901                	addi	s2,s2,0
    1312:	0010                	0x10
    1314:	0501                	addi	a0,a0,0
    1316:	0302                	c.slli64	t1
    1318:	00060903          	lb	s2,0(a2)
    131c:	0501                	addi	a0,a0,0
    131e:	0309                	addi	t1,t1,2
    1320:	00080903          	lb	s2,0(a6)
    1324:	0501                	addi	a0,a0,0
    1326:	0610                	addi	a2,sp,768
    1328:	02090003          	lb	zero,32(s2)
    132c:	0100                	addi	s0,sp,128
    132e:	1505                	addi	a0,a0,-31
    1330:	0200                	addi	s0,sp,256
    1332:	0104                	addi	s1,sp,128
    1334:	0306                	slli	t1,t1,0x1
    1336:	0900                	addi	s0,sp,144
    1338:	0002                	c.slli64	zero
    133a:	0501                	addi	a0,a0,0
    133c:	0009                	c.nop	2
    133e:	0402                	c.slli64	s0
    1340:	0601                	addi	a2,a2,0
    1342:	00090003          	lb	zero,0(s2)
    1346:	0100                	addi	s0,sp,128
    1348:	0306                	slli	t1,t1,0x1
    134a:	0904                	addi	s1,sp,144
    134c:	0004                	0x4
    134e:	0501                	addi	a0,a0,0
    1350:	0302                	c.slli64	t1
    1352:	0904                	addi	s1,sp,144
    1354:	0008                	0x8
    1356:	0301                	addi	t1,t1,0
    1358:	0902                	c.slli64	s2
    135a:	0008                	0x8
    135c:	0301                	addi	t1,t1,0
    135e:	0902                	c.slli64	s2
    1360:	0008                	0x8
    1362:	0301                	addi	t1,t1,0
    1364:	0902                	c.slli64	s2
    1366:	0008                	0x8
    1368:	0501                	addi	a0,a0,0
    136a:	0309                	addi	t1,t1,2
    136c:	00080903          	lb	s2,0(a6)
    1370:	0501                	addi	a0,a0,0
    1372:	0612                	slli	a2,a2,0x4
    1374:	00094803          	lbu	a6,0(s2)
    1378:	0100                	addi	s0,sp,128
    137a:	1005                	c.nop	-31
    137c:	02093803          	0x2093803
    1380:	0100                	addi	s0,sp,128
    1382:	1505                	addi	a0,a0,-31
    1384:	0200                	addi	s0,sp,256
    1386:	0104                	addi	s1,sp,128
    1388:	0306                	slli	t1,t1,0x1
    138a:	0900                	addi	s0,sp,144
    138c:	0002                	c.slli64	zero
    138e:	0501                	addi	a0,a0,0
    1390:	0009                	c.nop	2
    1392:	0402                	c.slli64	s0
    1394:	0601                	addi	a2,a2,0
    1396:	00090003          	lb	zero,0(s2)
    139a:	0100                	addi	s0,sp,128
    139c:	0b05                	addi	s6,s6,1
    139e:	0306                	slli	t1,t1,0x1
    13a0:	0946                	slli	s2,s2,0x11
    13a2:	0004                	0x4
    13a4:	0501                	addi	a0,a0,0
    13a6:	0610                	addi	a2,sp,768
    13a8:	0900c103          	lbu	sp,144(ra)
    13ac:	0004                	0x4
    13ae:	0301                	addi	t1,t1,0
    13b0:	0901                	addi	s2,s2,0
    13b2:	0002                	c.slli64	zero
    13b4:	0501                	addi	a0,a0,0
    13b6:	0015                	c.nop	5
    13b8:	0402                	c.slli64	s0
    13ba:	0601                	addi	a2,a2,0
    13bc:	02097f03          	0x2097f03
    13c0:	0100                	addi	s0,sp,128
    13c2:	0905                	addi	s2,s2,1
    13c4:	0200                	addi	s0,sp,256
    13c6:	0104                	addi	s1,sp,128
    13c8:	0306                	slli	t1,t1,0x1
    13ca:	0900                	addi	s0,sp,144
    13cc:	0000                	unimp
    13ce:	0501                	addi	a0,a0,0
    13d0:	0015                	c.nop	5
    13d2:	0402                	c.slli64	s0
    13d4:	0601                	addi	a2,a2,0
    13d6:	0c090c03          	lb	s8,192(s2)
    13da:	0100                	addi	s0,sp,128
    13dc:	0905                	addi	s2,s2,1
    13de:	0200                	addi	s0,sp,256
    13e0:	0104                	addi	s1,sp,128
    13e2:	0306                	slli	t1,t1,0x1
    13e4:	0900                	addi	s0,sp,144
    13e6:	0000                	unimp
    13e8:	0601                	addi	a2,a2,0
    13ea:	04090503          	lb	a0,64(s2)
    13ee:	0100                	addi	s0,sp,128
    13f0:	00090103          	lb	sp,0(s2)
    13f4:	0100                	addi	s0,sp,128
    13f6:	0505                	addi	a0,a0,1
    13f8:	0306                	slli	t1,t1,0x1
    13fa:	0901                	addi	s2,s2,0
    13fc:	0000                	unimp
    13fe:	0501                	addi	a0,a0,0
    1400:	0009                	c.nop	2
    1402:	0402                	c.slli64	s0
    1404:	9e030603          	lb	a2,-1568(t1)
    1408:	097f                	0x97f
    140a:	002a                	c.slli	zero,0xa
    140c:	0501                	addi	a0,a0,0
    140e:	0011                	c.nop	4
    1410:	0402                	c.slli64	s0
    1412:	00030603          	lb	a2,0(t1)
    1416:	0409                	addi	s0,s0,2
    1418:	0100                	addi	s0,sp,128
    141a:	0200                	addi	s0,sp,256
    141c:	0304                	addi	s1,sp,384
    141e:	04090103          	lb	sp,64(s2)
    1422:	0100                	addi	s0,sp,128
    1424:	0200                	addi	s0,sp,256
    1426:	0304                	addi	s1,sp,384
    1428:	02097f03          	0x2097f03
    142c:	0100                	addi	s0,sp,128
    142e:	0905                	addi	s2,s2,1
    1430:	0200                	addi	s0,sp,256
    1432:	0304                	addi	s1,sp,384
    1434:	0306                	slli	t1,t1,0x1
    1436:	0901                	addi	s2,s2,0
    1438:	0004                	0x4
    143a:	0501                	addi	a0,a0,0
    143c:	0011                	c.nop	4
    143e:	0402                	c.slli64	s0
    1440:	00030603          	lb	a2,0(t1)
    1444:	0009                	c.nop	2
    1446:	0100                	addi	s0,sp,128
    1448:	1b05                	addi	s6,s6,-31
    144a:	0200                	addi	s0,sp,256
    144c:	0304                	addi	s1,sp,384
    144e:	0306                	slli	t1,t1,0x1
    1450:	097e                	slli	s2,s2,0x1f
    1452:	0004                	0x4
    1454:	0501                	addi	a0,a0,0
    1456:	000d                	c.nop	3
    1458:	0402                	c.slli64	s0
    145a:	091b0303          	lb	t1,145(s6)
    145e:	0004                	0x4
    1460:	0501                	addi	a0,a0,0
    1462:	0022                	c.slli	zero,0x8
    1464:	0402                	c.slli64	s0
    1466:	00030603          	lb	a2,0(t1)
    146a:	0009                	c.nop	2
    146c:	0100                	addi	s0,sp,128
    146e:	2a05                	jal	159e <product2+0x192>
    1470:	0200                	addi	s0,sp,256
    1472:	0304                	addi	s1,sp,384
    1474:	08097f03          	0x8097f03
    1478:	0100                	addi	s0,sp,128
    147a:	1d05                	addi	s10,s10,-31
    147c:	0200                	addi	s0,sp,256
    147e:	0304                	addi	s1,sp,384
    1480:	04090103          	lb	sp,64(s2)
    1484:	0100                	addi	s0,sp,128
    1486:	2a05                	jal	15b6 <product2+0x1aa>
    1488:	0200                	addi	s0,sp,256
    148a:	0304                	addi	s1,sp,384
    148c:	0306                	slli	t1,t1,0x1
    148e:	097f                	0x97f
    1490:	0004                	0x4
    1492:	0501                	addi	a0,a0,0
    1494:	000d                	c.nop	3
    1496:	0402                	c.slli64	s0
    1498:	09070303          	lb	t1,144(a4)
    149c:	0002                	c.slli64	zero
    149e:	0501                	addi	a0,a0,0
    14a0:	0402001b          	0x402001b
    14a4:	00030603          	lb	a2,0(t1)
    14a8:	0009                	c.nop	2
    14aa:	0100                	addi	s0,sp,128
    14ac:	2305                	jal	19cc <ti_2+0x110>
    14ae:	0200                	addi	s0,sp,256
    14b0:	0304                	addi	s1,sp,384
    14b2:	04090003          	lb	zero,64(s2)
    14b6:	0100                	addi	s0,sp,128
    14b8:	1f05                	addi	t5,t5,-31
    14ba:	0200                	addi	s0,sp,256
    14bc:	0304                	addi	s1,sp,384
    14be:	04090003          	lb	zero,64(s2)
    14c2:	0100                	addi	s0,sp,128
    14c4:	1505                	addi	a0,a0,-31
    14c6:	0200                	addi	s0,sp,256
    14c8:	0304                	addi	s1,sp,384
    14ca:	04090003          	lb	zero,64(s2)
    14ce:	0100                	addi	s0,sp,128
    14d0:	2005                	jal	14f0 <product2+0xe4>
    14d2:	0200                	addi	s0,sp,256
    14d4:	0304                	addi	s1,sp,384
    14d6:	04097f03          	0x4097f03
    14da:	0100                	addi	s0,sp,128
    14dc:	1f05                	addi	t5,t5,-31
    14de:	0200                	addi	s0,sp,256
    14e0:	0304                	addi	s1,sp,384
    14e2:	02090103          	lb	sp,32(s2)
    14e6:	0100                	addi	s0,sp,128
    14e8:	1505                	addi	a0,a0,-31
    14ea:	0200                	addi	s0,sp,256
    14ec:	0304                	addi	s1,sp,384
    14ee:	02090003          	lb	zero,32(s2)
    14f2:	0100                	addi	s0,sp,128
    14f4:	2005                	jal	1514 <product2+0x108>
    14f6:	0200                	addi	s0,sp,256
    14f8:	0304                	addi	s1,sp,384
    14fa:	0306                	slli	t1,t1,0x1
    14fc:	097f                	0x97f
    14fe:	0002                	c.slli64	zero
    1500:	0501                	addi	a0,a0,0
    1502:	000d                	c.nop	3
    1504:	0402                	c.slli64	s0
    1506:	09190303          	lb	t1,145(s2)
    150a:	0004                	0x4
    150c:	0501                	addi	a0,a0,0
    150e:	0019                	c.nop	6
    1510:	0402                	c.slli64	s0
    1512:	00030603          	lb	a2,0(t1)
    1516:	0009                	c.nop	2
    1518:	0100                	addi	s0,sp,128
    151a:	2305                	jal	1a3a <ti_2+0x17e>
    151c:	0200                	addi	s0,sp,256
    151e:	0304                	addi	s1,sp,384
    1520:	04090003          	lb	zero,64(s2)
    1524:	0100                	addi	s0,sp,128
    1526:	1d05                	addi	s10,s10,-31
    1528:	0200                	addi	s0,sp,256
    152a:	0304                	addi	s1,sp,384
    152c:	04090003          	lb	zero,64(s2)
    1530:	0100                	addi	s0,sp,128
    1532:	1305                	addi	t1,t1,-31
    1534:	0200                	addi	s0,sp,256
    1536:	0304                	addi	s1,sp,384
    1538:	04090003          	lb	zero,64(s2)
    153c:	0100                	addi	s0,sp,128
    153e:	2005                	jal	155e <product2+0x152>
    1540:	0200                	addi	s0,sp,256
    1542:	0304                	addi	s1,sp,384
    1544:	04097f03          	0x4097f03
    1548:	0100                	addi	s0,sp,128
    154a:	1d05                	addi	s10,s10,-31
    154c:	0200                	addi	s0,sp,256
    154e:	0304                	addi	s1,sp,384
    1550:	02090103          	lb	sp,32(s2)
    1554:	0100                	addi	s0,sp,128
    1556:	1305                	addi	t1,t1,-31
    1558:	0200                	addi	s0,sp,256
    155a:	0304                	addi	s1,sp,384
    155c:	02090003          	lb	zero,32(s2)
    1560:	0100                	addi	s0,sp,128
    1562:	2005                	jal	1582 <product2+0x176>
    1564:	0200                	addi	s0,sp,256
    1566:	0304                	addi	s1,sp,384
    1568:	0306                	slli	t1,t1,0x1
    156a:	097f                	0x97f
    156c:	0002                	c.slli64	zero
    156e:	0501                	addi	a0,a0,0
    1570:	000d                	c.nop	3
    1572:	0402                	c.slli64	s0
    1574:	09120303          	lb	t1,145(tp) # 91 <instr_equ+0x5>
    1578:	0004                	0x4
    157a:	0501                	addi	a0,a0,0
    157c:	0015                	c.nop	5
    157e:	0402                	c.slli64	s0
    1580:	00030603          	lb	a2,0(t1)
    1584:	0409                	addi	s0,s0,2
    1586:	0100                	addi	s0,sp,128
    1588:	1b05                	addi	s6,s6,-31
    158a:	0200                	addi	s0,sp,256
    158c:	0304                	addi	s1,sp,384
    158e:	04090103          	lb	sp,64(s2)
    1592:	0100                	addi	s0,sp,128
    1594:	1605                	addi	a2,a2,-31
    1596:	0200                	addi	s0,sp,256
    1598:	0304                	addi	s1,sp,384
    159a:	02090003          	lb	zero,32(s2)
    159e:	0100                	addi	s0,sp,128
    15a0:	1505                	addi	a0,a0,-31
    15a2:	0200                	addi	s0,sp,256
    15a4:	0304                	addi	s1,sp,384
    15a6:	02097f03          	0x2097f03
    15aa:	0100                	addi	s0,sp,128
    15ac:	0d05                	addi	s10,s10,1
    15ae:	0200                	addi	s0,sp,256
    15b0:	0304                	addi	s1,sp,384
    15b2:	0306                	slli	t1,t1,0x1
    15b4:	0901                	addi	s2,s2,0
    15b6:	0004                	0x4
    15b8:	0501                	addi	a0,a0,0
    15ba:	0020                	addi	s0,sp,8
    15bc:	0402                	c.slli64	s0
    15be:	7e030603          	lb	a2,2016(t1)
    15c2:	0009                	c.nop	2
    15c4:	0100                	addi	s0,sp,128
    15c6:	1605                	addi	a2,a2,-31
    15c8:	0200                	addi	s0,sp,256
    15ca:	0304                	addi	s1,sp,384
    15cc:	02090203          	lb	tp,32(s2)
    15d0:	0100                	addi	s0,sp,128
    15d2:	2005                	jal	15f2 <product2+0x1e6>
    15d4:	0200                	addi	s0,sp,256
    15d6:	0304                	addi	s1,sp,384
    15d8:	0306                	slli	t1,t1,0x1
    15da:	097e                	slli	s2,s2,0x1f
    15dc:	0002                	c.slli64	zero
    15de:	0501                	addi	a0,a0,0
    15e0:	030d                	addi	t1,t1,3
    15e2:	0908                	addi	a0,sp,144
    15e4:	0002                	c.slli64	zero
    15e6:	0501                	addi	a0,a0,0
    15e8:	0003061b          	0x3061b
    15ec:	0009                	c.nop	2
    15ee:	0100                	addi	s0,sp,128
    15f0:	2005                	jal	1610 <product2+0x204>
    15f2:	08090003          	lb	zero,128(s2)
    15f6:	0100                	addi	s0,sp,128
    15f8:	1005                	c.nop	-31
    15fa:	04090003          	lb	zero,64(s2)
    15fe:	0100                	addi	s0,sp,128
    1600:	1e05                	addi	t3,t3,-31
    1602:	0200                	addi	s0,sp,256
    1604:	0204                	addi	s1,sp,256
    1606:	0306                	slli	t1,t1,0x1
    1608:	097f                	0x97f
    160a:	0004                	0x4
    160c:	0501                	addi	a0,a0,0
    160e:	000d                	c.nop	3
    1610:	0402                	c.slli64	s0
    1612:	090d0303          	lb	t1,144(s10)
    1616:	0004                	0x4
    1618:	0501                	addi	a0,a0,0
    161a:	0020                	addi	s0,sp,8
    161c:	0402                	c.slli64	s0
    161e:	00030603          	lb	a2,0(t1)
    1622:	0009                	c.nop	2
    1624:	0100                	addi	s0,sp,128
    1626:	0200                	addi	s0,sp,256
    1628:	0304                	addi	s1,sp,384
    162a:	02097f03          	0x2097f03
    162e:	0100                	addi	s0,sp,128
    1630:	0200                	addi	s0,sp,256
    1632:	0304                	addi	s1,sp,384
    1634:	04090103          	lb	sp,64(s2)
    1638:	0100                	addi	s0,sp,128
    163a:	2505                	jal	1c5a <random_keys+0x20e>
    163c:	0200                	addi	s0,sp,256
    163e:	0304                	addi	s1,sp,384
    1640:	04090003          	lb	zero,64(s2)
    1644:	0100                	addi	s0,sp,128
    1646:	1505                	addi	a0,a0,-31
    1648:	0200                	addi	s0,sp,256
    164a:	0304                	addi	s1,sp,384
    164c:	04090003          	lb	zero,64(s2)
    1650:	0100                	addi	s0,sp,128
    1652:	2005                	jal	1672 <result+0xe>
    1654:	0200                	addi	s0,sp,256
    1656:	0304                	addi	s1,sp,384
    1658:	0306                	slli	t1,t1,0x1
    165a:	097f                	0x97f
    165c:	0004                	0x4
    165e:	0501                	addi	a0,a0,0
    1660:	0328                	addi	a0,sp,392
    1662:	090c                	addi	a1,sp,144
    1664:	0002                	c.slli64	zero
    1666:	0501                	addi	a0,a0,0
    1668:	0305                	addi	t1,t1,1
    166a:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    166e:	0501                	addi	a0,a0,0
    1670:	0628                	addi	a0,sp,776
    1672:	00097d03          	0x97d03
    1676:	0100                	addi	s0,sp,128
    1678:	36090003          	lb	zero,864(s2)
    167c:	0100                	addi	s0,sp,128
    167e:	0905                	addi	s2,s2,1
    1680:	04090303          	lb	t1,64(s2)
    1684:	0100                	addi	s0,sp,128
    1686:	10090103          	lb	sp,256(s2)
    168a:	0100                	addi	s0,sp,128
    168c:	0a097f03          	0xa097f03
    1690:	0100                	addi	s0,sp,128
    1692:	0505                	addi	a0,a0,1
    1694:	0306                	slli	t1,t1,0x1
    1696:	0901                	addi	s2,s2,0
    1698:	006c                	addi	a1,sp,12
    169a:	0501                	addi	a0,a0,0
    169c:	0610                	addi	a2,sp,768
    169e:	00090603          	lb	a2,0(s2)
    16a2:	0100                	addi	s0,sp,128
    16a4:	0905                	addi	s2,s2,1
    16a6:	04097a03          	0x4097a03
    16aa:	0100                	addi	s0,sp,128
    16ac:	02090603          	lb	a2,32(s2)
    16b0:	0100                	addi	s0,sp,128
    16b2:	0e05                	addi	t3,t3,1
    16b4:	0e090503          	lb	a0,224(s2)
    16b8:	0100                	addi	s0,sp,128
    16ba:	0905                	addi	s2,s2,1
    16bc:	0a097503          	0xa097503
    16c0:	0100                	addi	s0,sp,128
    16c2:	0505                	addi	a0,a0,1
    16c4:	0306                	slli	t1,t1,0x1
    16c6:	0902                	c.slli64	s2
    16c8:	0064                	addi	s1,sp,12
    16ca:	0301                	addi	t1,t1,0
    16cc:	0901                	addi	s2,s2,0
    16ce:	0000                	unimp
    16d0:	0301                	addi	t1,t1,0
    16d2:	0901                	addi	s2,s2,0
    16d4:	0000                	unimp
    16d6:	0301                	addi	t1,t1,0
    16d8:	0901                	addi	s2,s2,0
    16da:	0000                	unimp
    16dc:	0301                	addi	t1,t1,0
    16de:	0901                	addi	s2,s2,0
    16e0:	0000                	unimp
    16e2:	0301                	addi	t1,t1,0
    16e4:	0901                	addi	s2,s2,0
    16e6:	0000                	unimp
    16e8:	0301                	addi	t1,t1,0
    16ea:	0901                	addi	s2,s2,0
    16ec:	0000                	unimp
    16ee:	0301                	addi	t1,t1,0
    16f0:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    16f4:	0301                	addi	t1,t1,0
    16f6:	0901                	addi	s2,s2,0
    16f8:	0000                	unimp
    16fa:	0501                	addi	a0,a0,0
    16fc:	060e                	slli	a2,a2,0x3
    16fe:	00090003          	lb	zero,0(s2)
    1702:	0100                	addi	s0,sp,128
    1704:	0505                	addi	a0,a0,1
    1706:	0306                	slli	t1,t1,0x1
    1708:	0902                	c.slli64	s2
    170a:	0004                	0x4
    170c:	0501                	addi	a0,a0,0
    170e:	0003060b          	0x3060b
    1712:	0009                	c.nop	2
    1714:	0100                	addi	s0,sp,128
    1716:	1005                	c.nop	-31
    1718:	0200                	addi	s0,sp,256
    171a:	0104                	addi	s1,sp,128
    171c:	0306                	slli	t1,t1,0x1
    171e:	0900                	addi	s0,sp,144
    1720:	0002                	c.slli64	zero
    1722:	0501                	addi	a0,a0,0
    1724:	0005                	c.nop	1
    1726:	0402                	c.slli64	s0
    1728:	0601                	addi	a2,a2,0
    172a:	00090003          	lb	zero,0(s2)
    172e:	0100                	addi	s0,sp,128
    1730:	06090603          	lb	a2,96(s2)
    1734:	0100                	addi	s0,sp,128
    1736:	1105                	addi	sp,sp,-31
    1738:	0200                	addi	s0,sp,256
    173a:	0104                	addi	s1,sp,128
    173c:	0306                	slli	t1,t1,0x1
    173e:	0900                	addi	s0,sp,144
    1740:	0004                	0x4
    1742:	0501                	addi	a0,a0,0
    1744:	0005                	c.nop	1
    1746:	0402                	c.slli64	s0
    1748:	0601                	addi	a2,a2,0
    174a:	00090003          	lb	zero,0(s2)
    174e:	0100                	addi	s0,sp,128
    1750:	0b05                	addi	s6,s6,1
    1752:	04090703          	lb	a4,64(s2)
    1756:	0100                	addi	s0,sp,128
    1758:	1805                	addi	a6,a6,-31
    175a:	02090103          	lb	sp,32(s2)
    175e:	0100                	addi	s0,sp,128
    1760:	1005                	c.nop	-31
    1762:	0200                	addi	s0,sp,256
    1764:	0104                	addi	s1,sp,128
    1766:	0306                	slli	t1,t1,0x1
    1768:	097f                	0x97f
    176a:	0008                	0x8
    176c:	0501                	addi	a0,a0,0
    176e:	0005                	c.nop	1
    1770:	0402                	c.slli64	s0
    1772:	0601                	addi	a2,a2,0
    1774:	00090003          	lb	zero,0(s2)
    1778:	0100                	addi	s0,sp,128
    177a:	1605                	addi	a2,a2,-31
    177c:	08090503          	lb	a0,128(s2)
    1780:	0100                	addi	s0,sp,128
    1782:	1805                	addi	a6,a6,-31
    1784:	08090103          	lb	sp,128(s2)
    1788:	0100                	addi	s0,sp,128
    178a:	1005                	c.nop	-31
    178c:	0200                	addi	s0,sp,256
    178e:	0104                	addi	s1,sp,128
    1790:	0306                	slli	t1,t1,0x1
    1792:	097f                	0x97f
    1794:	0008                	0x8
    1796:	0501                	addi	a0,a0,0
    1798:	0005                	c.nop	1
    179a:	0402                	c.slli64	s0
    179c:	0601                	addi	a2,a2,0
    179e:	00090003          	lb	zero,0(s2)
    17a2:	0100                	addi	s0,sp,128
    17a4:	0306                	slli	t1,t1,0x1
    17a6:	0905                	addi	s2,s2,1
    17a8:	0004                	0x4
    17aa:	0501                	addi	a0,a0,0
    17ac:	061a                	slli	a2,a2,0x6
    17ae:	00090303          	lb	t1,0(s2)
    17b2:	0100                	addi	s0,sp,128
    17b4:	0a05                	addi	s4,s4,1
    17b6:	06097d03          	0x6097d03
    17ba:	0100                	addi	s0,sp,128
    17bc:	0505                	addi	a0,a0,1
    17be:	0306                	slli	t1,t1,0x1
    17c0:	000c0903          	lb	s2,0(s8) # 19000 <_stack_start+0x9000>
    17c4:	0501                	addi	a0,a0,0
    17c6:	0618                	addi	a4,sp,768
    17c8:	02090103          	lb	sp,32(s2)
    17cc:	0100                	addi	s0,sp,128
    17ce:	1405                	addi	s0,s0,-31
    17d0:	0200                	addi	s0,sp,256
    17d2:	0104                	addi	s1,sp,128
    17d4:	0306                	slli	t1,t1,0x1
    17d6:	097f                	0x97f
    17d8:	0008                	0x8
    17da:	0501                	addi	a0,a0,0
    17dc:	0005                	c.nop	1
    17de:	0402                	c.slli64	s0
    17e0:	0601                	addi	a2,a2,0
    17e2:	00090003          	lb	zero,0(s2)
    17e6:	0100                	addi	s0,sp,128
    17e8:	0306                	slli	t1,t1,0x1
    17ea:	0906                	slli	s2,s2,0x1
    17ec:	0004                	0x4
    17ee:	0501                	addi	a0,a0,0
    17f0:	060a                	slli	a2,a2,0x2
    17f2:	00090003          	lb	zero,0(s2)
    17f6:	0100                	addi	s0,sp,128
    17f8:	0505                	addi	a0,a0,1
    17fa:	0306                	slli	t1,t1,0x1
    17fc:	0904                	addi	s1,sp,144
    17fe:	000c                	0xc
    1800:	0501                	addi	a0,a0,0
    1802:	061a                	slli	a2,a2,0x6
    1804:	06090003          	lb	zero,96(s2)
    1808:	0100                	addi	s0,sp,128
    180a:	1805                	addi	a6,a6,-31
    180c:	02090103          	lb	sp,32(s2)
    1810:	0100                	addi	s0,sp,128
    1812:	1405                	addi	s0,s0,-31
    1814:	0200                	addi	s0,sp,256
    1816:	0104                	addi	s1,sp,128
    1818:	0306                	slli	t1,t1,0x1
    181a:	097f                	0x97f
    181c:	0008                	0x8
    181e:	0501                	addi	a0,a0,0
    1820:	0005                	c.nop	1
    1822:	0402                	c.slli64	s0
    1824:	0601                	addi	a2,a2,0
    1826:	00090003          	lb	zero,0(s2)
    182a:	0100                	addi	s0,sp,128
    182c:	0306                	slli	t1,t1,0x1
    182e:	0905                	addi	s2,s2,1
    1830:	0004                	0x4
    1832:	0501                	addi	a0,a0,0
    1834:	060a                	slli	a2,a2,0x2
    1836:	00090003          	lb	zero,0(s2)
    183a:	0100                	addi	s0,sp,128
    183c:	0505                	addi	a0,a0,1
    183e:	0306                	slli	t1,t1,0x1
    1840:	000c0903          	lb	s2,0(s8)
    1844:	0501                	addi	a0,a0,0
    1846:	0003060b          	0x3060b
    184a:	0209                	addi	tp,tp,2
    184c:	0100                	addi	s0,sp,128
    184e:	1805                	addi	a6,a6,-31
    1850:	02090003          	lb	zero,32(s2)
    1854:	0100                	addi	s0,sp,128
    1856:	1005                	c.nop	-31
    1858:	0200                	addi	s0,sp,256
    185a:	0104                	addi	s1,sp,128
    185c:	0306                	slli	t1,t1,0x1
    185e:	0900                	addi	s0,sp,144
    1860:	0004                	0x4
    1862:	0501                	addi	a0,a0,0
    1864:	0005                	c.nop	1
    1866:	0402                	c.slli64	s0
    1868:	0601                	addi	a2,a2,0
    186a:	00090003          	lb	zero,0(s2)
    186e:	0100                	addi	s0,sp,128
    1870:	0306                	slli	t1,t1,0x1
    1872:	0906                	slli	s2,s2,0x1
    1874:	0004                	0x4
    1876:	0501                	addi	a0,a0,0
    1878:	060a                	slli	a2,a2,0x2
    187a:	00090003          	lb	zero,0(s2)
    187e:	0100                	addi	s0,sp,128
    1880:	0505                	addi	a0,a0,1
    1882:	0306                	slli	t1,t1,0x1
    1884:	0904                	addi	s1,sp,144
    1886:	0008                	0x8
    1888:	0501                	addi	a0,a0,0
    188a:	061a                	slli	a2,a2,0x6
    188c:	00090003          	lb	zero,0(s2)
    1890:	0100                	addi	s0,sp,128
    1892:	1805                	addi	a6,a6,-31
    1894:	0a090103          	lb	sp,160(s2)
    1898:	0100                	addi	s0,sp,128
    189a:	1405                	addi	s0,s0,-31
    189c:	0200                	addi	s0,sp,256
    189e:	0104                	addi	s1,sp,128
    18a0:	0306                	slli	t1,t1,0x1
    18a2:	097f                	0x97f
    18a4:	0008                	0x8
    18a6:	0501                	addi	a0,a0,0
    18a8:	0005                	c.nop	1
    18aa:	0402                	c.slli64	s0
    18ac:	0601                	addi	a2,a2,0
    18ae:	02090003          	lb	zero,32(s2)
    18b2:	0100                	addi	s0,sp,128
    18b4:	1a05                	addi	s4,s4,-31
    18b6:	04090503          	lb	a0,64(s2)
    18ba:	0100                	addi	s0,sp,128
    18bc:	1805                	addi	a6,a6,-31
    18be:	04090103          	lb	sp,64(s2)
    18c2:	0100                	addi	s0,sp,128
    18c4:	1a05                	addi	s4,s4,-31
    18c6:	08097f03          	0x8097f03
    18ca:	0100                	addi	s0,sp,128
    18cc:	1405                	addi	s0,s0,-31
    18ce:	0200                	addi	s0,sp,256
    18d0:	0104                	addi	s1,sp,128
    18d2:	0306                	slli	t1,t1,0x1
    18d4:	0900                	addi	s0,sp,144
    18d6:	0008                	0x8
    18d8:	0501                	addi	a0,a0,0
    18da:	0005                	c.nop	1
    18dc:	0402                	c.slli64	s0
    18de:	0601                	addi	a2,a2,0
    18e0:	00090003          	lb	zero,0(s2)
    18e4:	0100                	addi	s0,sp,128
    18e6:	0306                	slli	t1,t1,0x1
    18e8:	0906                	slli	s2,s2,0x1
    18ea:	0004                	0x4
    18ec:	0301                	addi	t1,t1,0
    18ee:	0902                	c.slli64	s2
    18f0:	0000                	unimp
    18f2:	0501                	addi	a0,a0,0
    18f4:	0601                	addi	a2,a2,0
    18f6:	00090103          	lb	sp,0(s2)
    18fa:	0100                	addi	s0,sp,128
    18fc:	0905                	addi	s2,s2,1
    18fe:	0200                	addi	s0,sp,256
    1900:	0304                	addi	s1,sp,384
    1902:	0306                	slli	t1,t1,0x1
    1904:	7fbd                	lui	t6,0xfffef
    1906:	4009                	c.li	zero,2
    1908:	0100                	addi	s0,sp,128
    190a:	1205                	addi	tp,tp,-31
    190c:	0200                	addi	s0,sp,256
    190e:	0304                	addi	s1,sp,384
    1910:	0306                	slli	t1,t1,0x1
    1912:	0900                	addi	s0,sp,144
    1914:	0000                	unimp
    1916:	0501                	addi	a0,a0,0
    1918:	04020017          	auipc	zero,0x4020
    191c:	7f030603          	lb	a2,2032(t1)
    1920:	0a09                	addi	s4,s4,2
    1922:	0100                	addi	s0,sp,128
    1924:	0905                	addi	s2,s2,1
    1926:	0200                	addi	s0,sp,256
    1928:	0304                	addi	s1,sp,384
    192a:	04090703          	lb	a4,64(s2)
    192e:	0100                	addi	s0,sp,128
    1930:	0e05                	addi	t3,t3,1
    1932:	0200                	addi	s0,sp,256
    1934:	0304                	addi	s1,sp,384
    1936:	0306                	slli	t1,t1,0x1
    1938:	0900                	addi	s0,sp,144
    193a:	0004                	0x4
    193c:	0501                	addi	a0,a0,0
    193e:	0009                	c.nop	2
    1940:	0402                	c.slli64	s0
    1942:	01030603          	lb	a2,16(t1)
    1946:	0a09                	addi	s4,s4,2
    1948:	0100                	addi	s0,sp,128
    194a:	0e05                	addi	t3,t3,1
    194c:	0200                	addi	s0,sp,256
    194e:	0304                	addi	s1,sp,384
    1950:	0306                	slli	t1,t1,0x1
    1952:	0900                	addi	s0,sp,144
    1954:	0000                	unimp
    1956:	0501                	addi	a0,a0,0
    1958:	0019                	c.nop	6
    195a:	0402                	c.slli64	s0
    195c:	7e030603          	lb	a2,2016(t1)
    1960:	0a09                	addi	s4,s4,2
    1962:	0100                	addi	s0,sp,128
    1964:	0905                	addi	s2,s2,1
    1966:	0200                	addi	s0,sp,256
    1968:	0304                	addi	s1,sp,384
    196a:	04090803          	lb	a6,64(s2)
    196e:	0100                	addi	s0,sp,128
    1970:	1b05                	addi	s6,s6,-31
    1972:	0200                	addi	s0,sp,256
    1974:	0304                	addi	s1,sp,384
    1976:	0306                	slli	t1,t1,0x1
    1978:	0900                	addi	s0,sp,144
    197a:	0004                	0x4
    197c:	0501                	addi	a0,a0,0
    197e:	0018                	0x18
    1980:	0402                	c.slli64	s0
    1982:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1986:	0004                	0x4
    1988:	0501                	addi	a0,a0,0
    198a:	0402001b          	0x402001b
    198e:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1992:	0004                	0x4
    1994:	0501                	addi	a0,a0,0
    1996:	0018                	0x18
    1998:	0402                	c.slli64	s0
    199a:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    199e:	0002                	c.slli64	zero
    19a0:	0501                	addi	a0,a0,0
    19a2:	04020017          	auipc	zero,0x4020
    19a6:	097f0303          	lb	t1,151(t5)
    19aa:	0002                	c.slli64	zero
    19ac:	0501                	addi	a0,a0,0
    19ae:	0018                	0x18
    19b0:	0402                	c.slli64	s0
    19b2:	09010303          	lb	t1,144(sp)
    19b6:	0002                	c.slli64	zero
    19b8:	0501                	addi	a0,a0,0
    19ba:	04020017          	auipc	zero,0x4020
    19be:	7f030603          	lb	a2,2032(t1)
    19c2:	0209                	addi	tp,tp,2
    19c4:	0100                	addi	s0,sp,128
    19c6:	0905                	addi	s2,s2,1
    19c8:	0200                	addi	s0,sp,256
    19ca:	0304                	addi	s1,sp,384
    19cc:	02090603          	lb	a2,32(s2)
    19d0:	0100                	addi	s0,sp,128
    19d2:	1805                	addi	a6,a6,-31
    19d4:	0200                	addi	s0,sp,256
    19d6:	0304                	addi	s1,sp,384
    19d8:	0306                	slli	t1,t1,0x1
    19da:	0900                	addi	s0,sp,144
    19dc:	0000                	unimp
    19de:	0501                	addi	a0,a0,0
    19e0:	0402001b          	0x402001b
    19e4:	7f030603          	lb	a2,2032(t1)
    19e8:	0a09                	addi	s4,s4,2
    19ea:	0100                	addi	s0,sp,128
    19ec:	0905                	addi	s2,s2,1
    19ee:	0200                	addi	s0,sp,256
    19f0:	0304                	addi	s1,sp,384
    19f2:	06090903          	lb	s2,96(s2)
    19f6:	0100                	addi	s0,sp,128
    19f8:	1c05                	addi	s8,s8,-31
    19fa:	0200                	addi	s0,sp,256
    19fc:	0304                	addi	s1,sp,384
    19fe:	0306                	slli	t1,t1,0x1
    1a00:	0900                	addi	s0,sp,144
    1a02:	0000                	unimp
    1a04:	0501                	addi	a0,a0,0
    1a06:	0018                	0x18
    1a08:	0402                	c.slli64	s0
    1a0a:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1a0e:	0002                	c.slli64	zero
    1a10:	0501                	addi	a0,a0,0
    1a12:	001f 0402 0603      	0x6030402001f
    1a18:	08097f03          	0x8097f03
    1a1c:	0100                	addi	s0,sp,128
    1a1e:	0905                	addi	s2,s2,1
    1a20:	0200                	addi	s0,sp,256
    1a22:	0304                	addi	s1,sp,384
    1a24:	06090b03          	lb	s6,96(s2)
    1a28:	0100                	addi	s0,sp,128
    1a2a:	1c05                	addi	s8,s8,-31
    1a2c:	0200                	addi	s0,sp,256
    1a2e:	0304                	addi	s1,sp,384
    1a30:	0306                	slli	t1,t1,0x1
    1a32:	0900                	addi	s0,sp,144
    1a34:	0004                	0x4
    1a36:	0501                	addi	a0,a0,0
    1a38:	0018                	0x18
    1a3a:	0402                	c.slli64	s0
    1a3c:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1a40:	0008                	0x8
    1a42:	0501                	addi	a0,a0,0
    1a44:	001f 0402 0303      	0x3030402001f
    1a4a:	097f                	0x97f
    1a4c:	0002                	c.slli64	zero
    1a4e:	0501                	addi	a0,a0,0
    1a50:	0018                	0x18
    1a52:	0402                	c.slli64	s0
    1a54:	09010303          	lb	t1,144(sp)
    1a58:	0002                	c.slli64	zero
    1a5a:	0501                	addi	a0,a0,0
    1a5c:	001f 0402 0603      	0x6030402001f
    1a62:	02097f03          	0x2097f03
    1a66:	0100                	addi	s0,sp,128
    1a68:	0905                	addi	s2,s2,1
    1a6a:	0200                	addi	s0,sp,256
    1a6c:	0304                	addi	s1,sp,384
    1a6e:	02090903          	lb	s2,32(s2)
    1a72:	0100                	addi	s0,sp,128
    1a74:	1605                	addi	a2,a2,-31
    1a76:	0200                	addi	s0,sp,256
    1a78:	0304                	addi	s1,sp,384
    1a7a:	0306                	slli	t1,t1,0x1
    1a7c:	0900                	addi	s0,sp,144
    1a7e:	0000                	unimp
    1a80:	0501                	addi	a0,a0,0
    1a82:	001d                	c.nop	7
    1a84:	0402                	c.slli64	s0
    1a86:	097f0303          	lb	t1,151(t5)
    1a8a:	0002                	c.slli64	zero
    1a8c:	0501                	addi	a0,a0,0
    1a8e:	0016                	c.slli	zero,0x5
    1a90:	0402                	c.slli64	s0
    1a92:	09010303          	lb	t1,144(sp)
    1a96:	0004                	0x4
    1a98:	0501                	addi	a0,a0,0
    1a9a:	0402000f          	0x402000f
    1a9e:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1aa2:	0004                	0x4
    1aa4:	0501                	addi	a0,a0,0
    1aa6:	001d                	c.nop	7
    1aa8:	0402                	c.slli64	s0
    1aaa:	7f030603          	lb	a2,2032(t1)
    1aae:	0409                	addi	s0,s0,2
    1ab0:	0100                	addi	s0,sp,128
    1ab2:	0905                	addi	s2,s2,1
    1ab4:	0200                	addi	s0,sp,256
    1ab6:	0304                	addi	s1,sp,384
    1ab8:	02090b03          	lb	s6,32(s2)
    1abc:	0100                	addi	s0,sp,128
    1abe:	1c05                	addi	s8,s8,-31
    1ac0:	0200                	addi	s0,sp,256
    1ac2:	0304                	addi	s1,sp,384
    1ac4:	0306                	slli	t1,t1,0x1
    1ac6:	0900                	addi	s0,sp,144
    1ac8:	0000                	unimp
    1aca:	0501                	addi	a0,a0,0
    1acc:	0018                	0x18
    1ace:	0402                	c.slli64	s0
    1ad0:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1ad4:	0004                	0x4
    1ad6:	0501                	addi	a0,a0,0
    1ad8:	001f 0402 0603      	0x6030402001f
    1ade:	08097f03          	0x8097f03
    1ae2:	0100                	addi	s0,sp,128
    1ae4:	0905                	addi	s2,s2,1
    1ae6:	0200                	addi	s0,sp,256
    1ae8:	0304                	addi	s1,sp,384
    1aea:	04090603          	lb	a2,64(s2)
    1aee:	0100                	addi	s0,sp,128
    1af0:	1805                	addi	a6,a6,-31
    1af2:	0200                	addi	s0,sp,256
    1af4:	0304                	addi	s1,sp,384
    1af6:	0306                	slli	t1,t1,0x1
    1af8:	0900                	addi	s0,sp,144
    1afa:	0004                	0x4
    1afc:	0501                	addi	a0,a0,0
    1afe:	001f 0402 0303      	0x3030402001f
    1b04:	0900                	addi	s0,sp,144
    1b06:	0004                	0x4
    1b08:	0501                	addi	a0,a0,0
    1b0a:	0018                	0x18
    1b0c:	0402                	c.slli64	s0
    1b0e:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1b12:	0004                	0x4
    1b14:	0501                	addi	a0,a0,0
    1b16:	0021                	c.nop	8
    1b18:	0402                	c.slli64	s0
    1b1a:	097f0303          	lb	t1,151(t5)
    1b1e:	0002                	c.slli64	zero
    1b20:	0501                	addi	a0,a0,0
    1b22:	0018                	0x18
    1b24:	0402                	c.slli64	s0
    1b26:	09010303          	lb	t1,144(sp)
    1b2a:	0002                	c.slli64	zero
    1b2c:	0501                	addi	a0,a0,0
    1b2e:	0021                	c.nop	8
    1b30:	0402                	c.slli64	s0
    1b32:	7f030603          	lb	a2,2032(t1)
    1b36:	0209                	addi	tp,tp,2
    1b38:	0100                	addi	s0,sp,128
    1b3a:	4b05                	li	s6,1
    1b3c:	02090c03          	lb	s8,32(s2)
    1b40:	0100                	addi	s0,sp,128
    1b42:	0505                	addi	a0,a0,1
    1b44:	00090203          	lb	tp,0(s2)
    1b48:	0100                	addi	s0,sp,128
    1b4a:	00090103          	lb	sp,0(s2)
    1b4e:	0100                	addi	s0,sp,128
    1b50:	00090203          	lb	tp,0(s2)
    1b54:	0100                	addi	s0,sp,128
    1b56:	4b05                	li	s6,1
    1b58:	0306                	slli	t1,t1,0x1
    1b5a:	0000097b          	0x97b
    1b5e:	0501                	addi	a0,a0,0
    1b60:	0309                	addi	t1,t1,2
    1b62:	0905                	addi	s2,s2,1
    1b64:	000c                	0xc
    1b66:	0501                	addi	a0,a0,0
    1b68:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    1b6c:	0004                	0x4
    1b6e:	0501                	addi	a0,a0,0
    1b70:	0309                	addi	t1,t1,2
    1b72:	0905                	addi	s2,s2,1
    1b74:	0002                	c.slli64	zero
    1b76:	0501                	addi	a0,a0,0
    1b78:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    1b7c:	000a                	c.slli	zero,0x2
    1b7e:	0301                	addi	t1,t1,0
    1b80:	0900                	addi	s0,sp,144
    1b82:	0006                	c.slli	zero,0x1
    1b84:	0501                	addi	a0,a0,0
    1b86:	0309                	addi	t1,t1,2
    1b88:	0905                	addi	s2,s2,1
    1b8a:	0004                	0x4
    1b8c:	0501                	addi	a0,a0,0
    1b8e:	0605                	addi	a2,a2,1
    1b90:	02090103          	lb	sp,32(s2)
    1b94:	0100                	addi	s0,sp,128
    1b96:	00090103          	lb	sp,0(s2)
    1b9a:	0100                	addi	s0,sp,128
    1b9c:	00090303          	lb	t1,0(s2)
    1ba0:	0100                	addi	s0,sp,128
    1ba2:	0c05                	addi	s8,s8,1
    1ba4:	0306                	slli	t1,t1,0x1
    1ba6:	0900                	addi	s0,sp,144
    1ba8:	0000                	unimp
    1baa:	0501                	addi	a0,a0,0
    1bac:	0302                	c.slli64	t1
    1bae:	0905                	addi	s2,s2,1
    1bb0:	0012                	c.slli	zero,0x4
    1bb2:	0501                	addi	a0,a0,0
    1bb4:	030c                	addi	a1,sp,384
    1bb6:	0006097b          	0x6097b
    1bba:	0501                	addi	a0,a0,0
    1bbc:	0602                	c.slli64	a2
    1bbe:	02090503          	lb	a0,32(s2)
    1bc2:	0100                	addi	s0,sp,128
    1bc4:	0a05                	addi	s4,s4,1
    1bc6:	0306                	slli	t1,t1,0x1
    1bc8:	0904                	addi	s1,sp,144
    1bca:	0000                	unimp
    1bcc:	0501                	addi	a0,a0,0
    1bce:	0302                	c.slli64	t1
    1bd0:	097c                	addi	a5,sp,156
    1bd2:	0004                	0x4
    1bd4:	0501                	addi	a0,a0,0
    1bd6:	0605                	addi	a2,a2,1
    1bd8:	04090403          	lb	s0,64(s2)
    1bdc:	0100                	addi	s0,sp,128
    1bde:	0a05                	addi	s4,s4,1
    1be0:	0306                	slli	t1,t1,0x1
    1be2:	0900                	addi	s0,sp,144
    1be4:	0000                	unimp
    1be6:	0501                	addi	a0,a0,0
    1be8:	0605                	addi	a2,a2,1
    1bea:	10090203          	lb	tp,256(s2)
    1bee:	0100                	addi	s0,sp,128
    1bf0:	1a05                	addi	s4,s4,-31
    1bf2:	0306                	slli	t1,t1,0x1
    1bf4:	0900                	addi	s0,sp,144
    1bf6:	0000                	unimp
    1bf8:	0501                	addi	a0,a0,0
    1bfa:	0014                	0x14
    1bfc:	0402                	c.slli64	s0
    1bfe:	0601                	addi	a2,a2,0
    1c00:	08090003          	lb	zero,128(s2)
    1c04:	0100                	addi	s0,sp,128
    1c06:	0505                	addi	a0,a0,1
    1c08:	0200                	addi	s0,sp,256
    1c0a:	0104                	addi	s1,sp,128
    1c0c:	0306                	slli	t1,t1,0x1
    1c0e:	0900                	addi	s0,sp,144
    1c10:	0000                	unimp
    1c12:	0501                	addi	a0,a0,0
    1c14:	0301                	addi	t1,t1,0
    1c16:	0909                	addi	s2,s2,2
    1c18:	0004                	0x4
    1c1a:	0501                	addi	a0,a0,0
    1c1c:	0009                	c.nop	2
    1c1e:	0402                	c.slli64	s0
    1c20:	78030603          	lb	a2,1920(t1)
    1c24:	1009                	c.nop	-30
    1c26:	0100                	addi	s0,sp,128
    1c28:	1905                	addi	s2,s2,-31
    1c2a:	0200                	addi	s0,sp,256
    1c2c:	0304                	addi	s1,sp,384
    1c2e:	0306                	slli	t1,t1,0x1
    1c30:	0900                	addi	s0,sp,144
    1c32:	0000                	unimp
    1c34:	0501                	addi	a0,a0,0
    1c36:	001f 0402 0303      	0x3030402001f
    1c3c:	097f                	0x97f
    1c3e:	0008                	0x8
    1c40:	0501                	addi	a0,a0,0
    1c42:	0015                	c.nop	5
    1c44:	0402                	c.slli64	s0
    1c46:	09010303          	lb	t1,144(sp)
    1c4a:	0004                	0x4
    1c4c:	0501                	addi	a0,a0,0
    1c4e:	001f 0402 0603      	0x6030402001f
    1c54:	04097f03          	0x4097f03
    1c58:	0100                	addi	s0,sp,128
    1c5a:	6c05                	lui	s8,0x1
    1c5c:	02090c03          	lb	s8,32(s2)
    1c60:	0100                	addi	s0,sp,128
    1c62:	0505                	addi	a0,a0,1
    1c64:	00090203          	lb	tp,0(s2)
    1c68:	0100                	addi	s0,sp,128
    1c6a:	00090103          	lb	sp,0(s2)
    1c6e:	0100                	addi	s0,sp,128
    1c70:	00090103          	lb	sp,0(s2)
    1c74:	0100                	addi	s0,sp,128
    1c76:	00090103          	lb	sp,0(s2)
    1c7a:	0100                	addi	s0,sp,128
    1c7c:	00090103          	lb	sp,0(s2)
    1c80:	0100                	addi	s0,sp,128
    1c82:	00090103          	lb	sp,0(s2)
    1c86:	0100                	addi	s0,sp,128
    1c88:	00090303          	lb	t1,0(s2)
    1c8c:	0100                	addi	s0,sp,128
    1c8e:	6c05                	lui	s8,0x1
    1c90:	0306                	slli	t1,t1,0x1
    1c92:	0976                	slli	s2,s2,0x1d
    1c94:	0000                	unimp
    1c96:	0501                	addi	a0,a0,0
    1c98:	031e                	slli	t1,t1,0x7
    1c9a:	0911                	addi	s2,s2,4
    1c9c:	0008                	0x8
    1c9e:	0501                	addi	a0,a0,0
    1ca0:	036c                	addi	a1,sp,396
    1ca2:	0006096f          	jal	s2,61ca2 <_stack_start+0x51ca2>
    1ca6:	0501                	addi	a0,a0,0
    1ca8:	0309                	addi	t1,t1,2
    1caa:	090a                	slli	s2,s2,0x2
    1cac:	000a                	c.slli	zero,0x2
    1cae:	0501                	addi	a0,a0,0
    1cb0:	036c                	addi	a1,sp,396
    1cb2:	0976                	slli	s2,s2,0x1d
    1cb4:	0004                	0x4
    1cb6:	0501                	addi	a0,a0,0
    1cb8:	0309                	addi	t1,t1,2
    1cba:	090a                	slli	s2,s2,0x2
    1cbc:	0004                	0x4
    1cbe:	0501                	addi	a0,a0,0
    1cc0:	036c                	addi	a1,sp,396
    1cc2:	0976                	slli	s2,s2,0x1d
    1cc4:	0004                	0x4
    1cc6:	0301                	addi	t1,t1,0
    1cc8:	0900                	addi	s0,sp,144
    1cca:	0008                	0x8
    1ccc:	0501                	addi	a0,a0,0
    1cce:	030a                	slli	t1,t1,0x2
    1cd0:	090e                	slli	s2,s2,0x3
    1cd2:	0002                	c.slli64	zero
    1cd4:	0501                	addi	a0,a0,0
    1cd6:	0309                	addi	t1,t1,2
    1cd8:	097c                	addi	a5,sp,156
    1cda:	0004                	0x4
    1cdc:	0501                	addi	a0,a0,0
    1cde:	0605                	addi	a2,a2,1
    1ce0:	04090403          	lb	s0,64(s2)
    1ce4:	0100                	addi	s0,sp,128
    1ce6:	0a05                	addi	s4,s4,1
    1ce8:	0306                	slli	t1,t1,0x1
    1cea:	0900                	addi	s0,sp,144
    1cec:	0000                	unimp
    1cee:	0501                	addi	a0,a0,0
    1cf0:	0605                	addi	a2,a2,1
    1cf2:	12090303          	lb	t1,288(s2)
    1cf6:	0100                	addi	s0,sp,128
    1cf8:	0b05                	addi	s6,s6,1
    1cfa:	0306                	slli	t1,t1,0x1
    1cfc:	0900                	addi	s0,sp,144
    1cfe:	0004                	0x4
    1d00:	0501                	addi	a0,a0,0
    1d02:	0014                	0x14
    1d04:	0402                	c.slli64	s0
    1d06:	0601                	addi	a2,a2,0
    1d08:	02090003          	lb	zero,32(s2)
    1d0c:	0100                	addi	s0,sp,128
    1d0e:	0505                	addi	a0,a0,1
    1d10:	0200                	addi	s0,sp,256
    1d12:	0104                	addi	s1,sp,128
    1d14:	0306                	slli	t1,t1,0x1
    1d16:	0900                	addi	s0,sp,144
    1d18:	0000                	unimp
    1d1a:	0501                	addi	a0,a0,0
    1d1c:	0316                	slli	t1,t1,0x5
    1d1e:	0906                	slli	s2,s2,0x1
    1d20:	0004                	0x4
    1d22:	0501                	addi	a0,a0,0
    1d24:	030c                	addi	a1,sp,384
    1d26:	097f                	0x97f
    1d28:	0006                	c.slli	zero,0x1
    1d2a:	0501                	addi	a0,a0,0
    1d2c:	0011                	c.nop	4
    1d2e:	0402                	c.slli64	s0
    1d30:	0601                	addi	a2,a2,0
    1d32:	02090003          	lb	zero,32(s2)
    1d36:	0100                	addi	s0,sp,128
    1d38:	0505                	addi	a0,a0,1
    1d3a:	0200                	addi	s0,sp,256
    1d3c:	0104                	addi	s1,sp,128
    1d3e:	0306                	slli	t1,t1,0x1
    1d40:	0900                	addi	s0,sp,144
    1d42:	0000                	unimp
    1d44:	0601                	addi	a2,a2,0
    1d46:	04090803          	lb	a6,64(s2)
    1d4a:	0100                	addi	s0,sp,128
    1d4c:	0905                	addi	s2,s2,1
    1d4e:	0306                	slli	t1,t1,0x1
    1d50:	0900                	addi	s0,sp,144
    1d52:	0000                	unimp
    1d54:	0501                	addi	a0,a0,0
    1d56:	0605                	addi	a2,a2,1
    1d58:	0c090403          	lb	s0,192(s2)
    1d5c:	0100                	addi	s0,sp,128
    1d5e:	0a05                	addi	s4,s4,1
    1d60:	0306                	slli	t1,t1,0x1
    1d62:	0900                	addi	s0,sp,144
    1d64:	0000                	unimp
    1d66:	0501                	addi	a0,a0,0
    1d68:	0605                	addi	a2,a2,1
    1d6a:	0c090103          	lb	sp,192(s2)
    1d6e:	0100                	addi	s0,sp,128
    1d70:	1405                	addi	s0,s0,-31
    1d72:	0200                	addi	s0,sp,256
    1d74:	0104                	addi	s1,sp,128
    1d76:	02090003          	lb	zero,32(s2)
    1d7a:	0100                	addi	s0,sp,128
    1d7c:	0505                	addi	a0,a0,1
    1d7e:	0200                	addi	s0,sp,256
    1d80:	0104                	addi	s1,sp,128
    1d82:	0306                	slli	t1,t1,0x1
    1d84:	0900                	addi	s0,sp,144
    1d86:	0000                	unimp
    1d88:	0501                	addi	a0,a0,0
    1d8a:	0301                	addi	t1,t1,0
    1d8c:	00040907          	0x40907
    1d90:	0501                	addi	a0,a0,0
    1d92:	0009                	c.nop	2
    1d94:	0402                	c.slli64	s0
    1d96:	68030603          	lb	a2,1664(t1)
    1d9a:	1609                	addi	a2,a2,-30
    1d9c:	0100                	addi	s0,sp,128
    1d9e:	1905                	addi	s2,s2,-31
    1da0:	0200                	addi	s0,sp,256
    1da2:	0304                	addi	s1,sp,384
    1da4:	0306                	slli	t1,t1,0x1
    1da6:	0900                	addi	s0,sp,144
    1da8:	0000                	unimp
    1daa:	0501                	addi	a0,a0,0
    1dac:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1db0:	097f0303          	lb	t1,151(t5)
    1db4:	0008                	0x8
    1db6:	0501                	addi	a0,a0,0
    1db8:	0015                	c.nop	5
    1dba:	0402                	c.slli64	s0
    1dbc:	09010303          	lb	t1,144(sp)
    1dc0:	0004                	0x4
    1dc2:	0501                	addi	a0,a0,0
    1dc4:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1dc8:	7f030603          	lb	a2,2032(t1)
    1dcc:	0409                	addi	s0,s0,2
    1dce:	0100                	addi	s0,sp,128
    1dd0:	0905                	addi	s2,s2,1
    1dd2:	02090603          	lb	a2,32(s2)
    1dd6:	0100                	addi	s0,sp,128
    1dd8:	0e05                	addi	t3,t3,1
    1dda:	0306                	slli	t1,t1,0x1
    1ddc:	0900                	addi	s0,sp,144
    1dde:	0000                	unimp
    1de0:	0501                	addi	a0,a0,0
    1de2:	0900030b          	0x900030b
    1de6:	0002                	c.slli64	zero
    1de8:	0501                	addi	a0,a0,0
    1dea:	060d                	addi	a2,a2,3
    1dec:	04090303          	lb	t1,64(s2)
    1df0:	0100                	addi	s0,sp,128
    1df2:	1905                	addi	s2,s2,-31
    1df4:	0306                	slli	t1,t1,0x1
    1df6:	0900                	addi	s0,sp,144
    1df8:	0000                	unimp
    1dfa:	0501                	addi	a0,a0,0
    1dfc:	09000313          	li	t1,144
    1e00:	0004                	0x4
    1e02:	0501                	addi	a0,a0,0
    1e04:	0018                	0x18
    1e06:	0402                	c.slli64	s0
    1e08:	0602                	c.slli64	a2
    1e0a:	02097c03          	0x2097c03
    1e0e:	0100                	addi	s0,sp,128
    1e10:	0905                	addi	s2,s2,1
    1e12:	0200                	addi	s0,sp,256
    1e14:	0304                	addi	s1,sp,384
    1e16:	06090e03          	lb	t3,96(s2)
    1e1a:	0100                	addi	s0,sp,128
    1e1c:	1905                	addi	s2,s2,-31
    1e1e:	0200                	addi	s0,sp,256
    1e20:	0304                	addi	s1,sp,384
    1e22:	0306                	slli	t1,t1,0x1
    1e24:	0900                	addi	s0,sp,144
    1e26:	0000                	unimp
    1e28:	0501                	addi	a0,a0,0
    1e2a:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1e2e:	097f0303          	lb	t1,151(t5)
    1e32:	0008                	0x8
    1e34:	0501                	addi	a0,a0,0
    1e36:	0015                	c.nop	5
    1e38:	0402                	c.slli64	s0
    1e3a:	09010303          	lb	t1,144(sp)
    1e3e:	0004                	0x4
    1e40:	0501                	addi	a0,a0,0
    1e42:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1e46:	7f030603          	lb	a2,2032(t1)
    1e4a:	0409                	addi	s0,s0,2
    1e4c:	0100                	addi	s0,sp,128
    1e4e:	0209                	addi	tp,tp,2
    1e50:	0000                	unimp
    1e52:	0101                	addi	sp,sp,0
    1e54:	0b05                	addi	s6,s6,1
    1e56:	0500                	addi	s0,sp,640
    1e58:	0e02                	c.slli64	t3
    1e5a:	0300000f          	fence	rw,unknown
    1e5e:	059c                	addi	a5,sp,704
    1e60:	0501                	addi	a0,a0,0
    1e62:	0301                	addi	t1,t1,0
    1e64:	0901                	addi	s2,s2,0
    1e66:	0000                	unimp
    1e68:	0501                	addi	a0,a0,0
    1e6a:	0305                	addi	t1,t1,1
    1e6c:	0901                	addi	s2,s2,0
    1e6e:	0000                	unimp
    1e70:	0301                	addi	t1,t1,0
    1e72:	0901                	addi	s2,s2,0
    1e74:	0000                	unimp
    1e76:	0301                	addi	t1,t1,0
    1e78:	0901                	addi	s2,s2,0
    1e7a:	0000                	unimp
    1e7c:	0301                	addi	t1,t1,0
    1e7e:	0901                	addi	s2,s2,0
    1e80:	0000                	unimp
    1e82:	0301                	addi	t1,t1,0
    1e84:	0901                	addi	s2,s2,0
    1e86:	0000                	unimp
    1e88:	0301                	addi	t1,t1,0
    1e8a:	0901                	addi	s2,s2,0
    1e8c:	0000                	unimp
    1e8e:	0301                	addi	t1,t1,0
    1e90:	0902                	c.slli64	s2
    1e92:	0000                	unimp
    1e94:	0501                	addi	a0,a0,0
    1e96:	7703060b          	0x7703060b
    1e9a:	0009                	c.nop	2
    1e9c:	0100                	addi	s0,sp,128
    1e9e:	0905                	addi	s2,s2,1
    1ea0:	04090903          	lb	s2,64(s2)
    1ea4:	0100                	addi	s0,sp,128
    1ea6:	0b05                	addi	s6,s6,1
    1ea8:	0e097703          	0xe097703
    1eac:	0100                	addi	s0,sp,128
    1eae:	0905                	addi	s2,s2,1
    1eb0:	08090903          	lb	s2,128(s2)
    1eb4:	0100                	addi	s0,sp,128
    1eb6:	0505                	addi	a0,a0,1
    1eb8:	0306                	slli	t1,t1,0x1
    1eba:	0901                	addi	s2,s2,0
    1ebc:	0002                	c.slli64	zero
    1ebe:	0301                	addi	t1,t1,0
    1ec0:	0901                	addi	s2,s2,0
    1ec2:	0000                	unimp
    1ec4:	0301                	addi	t1,t1,0
    1ec6:	0901                	addi	s2,s2,0
    1ec8:	0000                	unimp
    1eca:	0301                	addi	t1,t1,0
    1ecc:	0901                	addi	s2,s2,0
    1ece:	0000                	unimp
    1ed0:	0301                	addi	t1,t1,0
    1ed2:	0901                	addi	s2,s2,0
    1ed4:	0000                	unimp
    1ed6:	0301                	addi	t1,t1,0
    1ed8:	0901                	addi	s2,s2,0
    1eda:	0000                	unimp
    1edc:	0301                	addi	t1,t1,0
    1ede:	0901                	addi	s2,s2,0
    1ee0:	0000                	unimp
    1ee2:	0301                	addi	t1,t1,0
    1ee4:	0909                	addi	s2,s2,2
    1ee6:	0000                	unimp
    1ee8:	0501                	addi	a0,a0,0
    1eea:	060c                	addi	a1,sp,768
    1eec:	00090003          	lb	zero,0(s2)
    1ef0:	0100                	addi	s0,sp,128
    1ef2:	0505                	addi	a0,a0,1
    1ef4:	0306                	slli	t1,t1,0x1
    1ef6:	0904                	addi	s1,sp,144
    1ef8:	000c                	0xc
    1efa:	0501                	addi	a0,a0,0
    1efc:	0310                	addi	a2,sp,384
    1efe:	0900                	addi	s0,sp,144
    1f00:	0000                	unimp
    1f02:	0501                	addi	a0,a0,0
    1f04:	060c                	addi	a1,sp,768
    1f06:	00097c03          	0x97c03
    1f0a:	0100                	addi	s0,sp,128
    1f0c:	0505                	addi	a0,a0,1
    1f0e:	02090403          	lb	s0,32(s2)
    1f12:	0100                	addi	s0,sp,128
    1f14:	0905                	addi	s2,s2,1
    1f16:	0200                	addi	s0,sp,256
    1f18:	0304                	addi	s1,sp,384
    1f1a:	0306                	slli	t1,t1,0x1
    1f1c:	0902                	c.slli64	s2
    1f1e:	0004                	0x4
    1f20:	0501                	addi	a0,a0,0
    1f22:	001f 0402 0603      	0x6030402001f
    1f28:	00090003          	lb	zero,0(s2)
    1f2c:	0100                	addi	s0,sp,128
    1f2e:	1905                	addi	s2,s2,-31
    1f30:	0200                	addi	s0,sp,256
    1f32:	0304                	addi	s1,sp,384
    1f34:	06090003          	lb	zero,96(s2)
    1f38:	0100                	addi	s0,sp,128
    1f3a:	1705                	addi	a4,a4,-31
    1f3c:	0200                	addi	s0,sp,256
    1f3e:	0304                	addi	s1,sp,384
    1f40:	0306                	slli	t1,t1,0x1
    1f42:	097e                	slli	s2,s2,0x1f
    1f44:	0006                	c.slli	zero,0x1
    1f46:	0501                	addi	a0,a0,0
    1f48:	0010                	0x10
    1f4a:	0402                	c.slli64	s0
    1f4c:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1f50:	0000                	unimp
    1f52:	0501                	addi	a0,a0,0
    1f54:	0005                	c.nop	1
    1f56:	0402                	c.slli64	s0
    1f58:	00030603          	lb	a2,0(t1)
    1f5c:	0209                	addi	tp,tp,2
    1f5e:	0100                	addi	s0,sp,128
    1f60:	0905                	addi	s2,s2,1
    1f62:	0200                	addi	s0,sp,256
    1f64:	0304                	addi	s1,sp,384
    1f66:	0306                	slli	t1,t1,0x1
    1f68:	0909                	addi	s2,s2,2
    1f6a:	0004                	0x4
    1f6c:	0501                	addi	a0,a0,0
    1f6e:	0402001b          	0x402001b
    1f72:	097e0303          	lb	t1,151(t3)
    1f76:	0000                	unimp
    1f78:	0501                	addi	a0,a0,0
    1f7a:	0010                	0x10
    1f7c:	0402                	c.slli64	s0
    1f7e:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1f82:	0000                	unimp
    1f84:	0501                	addi	a0,a0,0
    1f86:	0009                	c.nop	2
    1f88:	0402                	c.slli64	s0
    1f8a:	09090303          	lb	t1,144(s2)
    1f8e:	000c                	0xc
    1f90:	0501                	addi	a0,a0,0
    1f92:	0026                	c.slli	zero,0x9
    1f94:	0402                	c.slli64	s0
    1f96:	00030603          	lb	a2,0(t1)
    1f9a:	0009                	c.nop	2
    1f9c:	0100                	addi	s0,sp,128
    1f9e:	2005                	jal	1fbe <_bss_end+0x76>
    1fa0:	0200                	addi	s0,sp,256
    1fa2:	0304                	addi	s1,sp,384
    1fa4:	06090003          	lb	zero,96(s2)
    1fa8:	0100                	addi	s0,sp,128
    1faa:	1f05                	addi	t5,t5,-31
    1fac:	0200                	addi	s0,sp,256
    1fae:	0304                	addi	s1,sp,384
    1fb0:	0306                	slli	t1,t1,0x1
    1fb2:	097e                	slli	s2,s2,0x1f
    1fb4:	0004                	0x4
    1fb6:	0501                	addi	a0,a0,0
    1fb8:	0014                	0x14
    1fba:	0402                	c.slli64	s0
    1fbc:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1fc0:	0000                	unimp
    1fc2:	0501                	addi	a0,a0,0
    1fc4:	0005                	c.nop	1
    1fc6:	0402                	c.slli64	s0
    1fc8:	00030603          	lb	a2,0(t1)
    1fcc:	0009                	c.nop	2
    1fce:	0100                	addi	s0,sp,128
    1fd0:	0905                	addi	s2,s2,1
    1fd2:	0200                	addi	s0,sp,256
    1fd4:	0304                	addi	s1,sp,384
    1fd6:	0306                	slli	t1,t1,0x1
    1fd8:	0909                	addi	s2,s2,2
    1fda:	0004                	0x4
    1fdc:	0501                	addi	a0,a0,0
    1fde:	001f 0402 0303      	0x3030402001f
    1fe4:	097e                	slli	s2,s2,0x1f
    1fe6:	0000                	unimp
    1fe8:	0501                	addi	a0,a0,0
    1fea:	0014                	0x14
    1fec:	0402                	c.slli64	s0
    1fee:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1ff2:	0000                	unimp
    1ff4:	0501                	addi	a0,a0,0
    1ff6:	0009                	c.nop	2
    1ff8:	0402                	c.slli64	s0
    1ffa:	09090303          	lb	t1,144(s2)
    1ffe:	000c                	0xc
    2000:	0501                	addi	a0,a0,0
    2002:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2006:	00030603          	lb	a2,0(t1)
    200a:	0009                	c.nop	2
    200c:	0100                	addi	s0,sp,128
    200e:	1d05                	addi	s10,s10,-31
    2010:	0200                	addi	s0,sp,256
    2012:	0304                	addi	s1,sp,384
    2014:	06090003          	lb	zero,96(s2)
    2018:	0100                	addi	s0,sp,128
    201a:	1f05                	addi	t5,t5,-31
    201c:	0200                	addi	s0,sp,256
    201e:	0304                	addi	s1,sp,384
    2020:	0306                	slli	t1,t1,0x1
    2022:	097e                	slli	s2,s2,0x1f
    2024:	0004                	0x4
    2026:	0501                	addi	a0,a0,0
    2028:	0014                	0x14
    202a:	0402                	c.slli64	s0
    202c:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    2030:	0000                	unimp
    2032:	0501                	addi	a0,a0,0
    2034:	0005                	c.nop	1
    2036:	0402                	c.slli64	s0
    2038:	00030603          	lb	a2,0(t1)
    203c:	0009                	c.nop	2
    203e:	0100                	addi	s0,sp,128
    2040:	0905                	addi	s2,s2,1
    2042:	0200                	addi	s0,sp,256
    2044:	0304                	addi	s1,sp,384
    2046:	0306                	slli	t1,t1,0x1
    2048:	0909                	addi	s2,s2,2
    204a:	000c                	0xc
    204c:	0501                	addi	a0,a0,0
    204e:	0022                	c.slli	zero,0x8
    2050:	0402                	c.slli64	s0
    2052:	00030603          	lb	a2,0(t1)
    2056:	0009                	c.nop	2
    2058:	0100                	addi	s0,sp,128
    205a:	1c05                	addi	s8,s8,-31
    205c:	0200                	addi	s0,sp,256
    205e:	0304                	addi	s1,sp,384
    2060:	06090003          	lb	zero,96(s2)
    2064:	0100                	addi	s0,sp,128
    2066:	2105                	jal	2486 <_min_stack+0x486>
    2068:	0200                	addi	s0,sp,256
    206a:	0304                	addi	s1,sp,384
    206c:	0306                	slli	t1,t1,0x1
    206e:	097e                	slli	s2,s2,0x1f
    2070:	0004                	0x4
    2072:	0501                	addi	a0,a0,0
    2074:	0014                	0x14
    2076:	0402                	c.slli64	s0
    2078:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    207c:	0000                	unimp
    207e:	0501                	addi	a0,a0,0
    2080:	0005                	c.nop	1
    2082:	0402                	c.slli64	s0
    2084:	00030603          	lb	a2,0(t1)
    2088:	0009                	c.nop	2
    208a:	0100                	addi	s0,sp,128
    208c:	0306                	slli	t1,t1,0x1
    208e:	0908                	addi	a0,sp,144
    2090:	0004                	0x4
    2092:	0501                	addi	a0,a0,0
    2094:	00030613          	mv	a2,t1
    2098:	0009                	c.nop	2
    209a:	0100                	addi	s0,sp,128
    209c:	0505                	addi	a0,a0,1
    209e:	0306                	slli	t1,t1,0x1
    20a0:	0909                	addi	s2,s2,2
    20a2:	0010                	0x10
    20a4:	0501                	addi	a0,a0,0
    20a6:	00030613          	mv	a2,t1
    20aa:	0009                	c.nop	2
    20ac:	0100                	addi	s0,sp,128
    20ae:	0505                	addi	a0,a0,1
    20b0:	0306                	slli	t1,t1,0x1
    20b2:	00140913          	addi	s2,s0,1
    20b6:	0501                	addi	a0,a0,0
    20b8:	0310                	addi	a2,sp,384
    20ba:	0900                	addi	s0,sp,144
    20bc:	0000                	unimp
    20be:	0501                	addi	a0,a0,0
    20c0:	061a                	slli	a2,a2,0x6
    20c2:	00090803          	lb	a6,0(s2)
    20c6:	0100                	addi	s0,sp,128
    20c8:	1305                	addi	t1,t1,-31
    20ca:	04096503          	0x4096503
    20ce:	0100                	addi	s0,sp,128
    20d0:	1a05                	addi	s4,s4,-31
    20d2:	0a091b03          	lh	s6,160(s2)
    20d6:	0100                	addi	s0,sp,128
    20d8:	0b05                	addi	s6,s6,1
    20da:	04090103          	lb	sp,64(s2)
    20de:	0100                	addi	s0,sp,128
    20e0:	0505                	addi	a0,a0,1
    20e2:	02097703          	0x2097703
    20e6:	0100                	addi	s0,sp,128
    20e8:	0905                	addi	s2,s2,1
    20ea:	0306                	slli	t1,t1,0x1
    20ec:	0901                	addi	s2,s2,0
    20ee:	0004                	0x4
    20f0:	0501                	addi	a0,a0,0
    20f2:	0003060b          	0x3060b
    20f6:	0009                	c.nop	2
    20f8:	0100                	addi	s0,sp,128
    20fa:	2705                	jal	281a <_min_stack+0x81a>
    20fc:	02090003          	lb	zero,32(s2)
    2100:	0100                	addi	s0,sp,128
    2102:	0b05                	addi	s6,s6,1
    2104:	04090003          	lb	zero,64(s2)
    2108:	0100                	addi	s0,sp,128
    210a:	0d05                	addi	s10,s10,1
    210c:	0306                	slli	t1,t1,0x1
    210e:	0902                	c.slli64	s2
    2110:	000a                	c.slli	zero,0x2
    2112:	0501                	addi	a0,a0,0
    2114:	061a                	slli	a2,a2,0x6
    2116:	00090003          	lb	zero,0(s2)
    211a:	0100                	addi	s0,sp,128
    211c:	0705                	addi	a4,a4,1
    211e:	0306                	slli	t1,t1,0x1
    2120:	0901                	addi	s2,s2,0
    2122:	000a                	c.slli	zero,0x2
    2124:	0501                	addi	a0,a0,0
    2126:	00030617          	auipc	a2,0x30
    212a:	0009                	c.nop	2
    212c:	0100                	addi	s0,sp,128
    212e:	0c05                	addi	s8,s8,1
    2130:	02090003          	lb	zero,32(s2)
    2134:	0100                	addi	s0,sp,128
    2136:	0d05                	addi	s10,s10,1
    2138:	0306                	slli	t1,t1,0x1
    213a:	0901                	addi	s2,s2,0
    213c:	000a                	c.slli	zero,0x2
    213e:	0501                	addi	a0,a0,0
    2140:	0305                	addi	t1,t1,1
    2142:	090c                	addi	a1,sp,144
    2144:	0000                	unimp
    2146:	0501                	addi	a0,a0,0
    2148:	0601                	addi	a2,a2,0
    214a:	00090103          	lb	sp,0(s2)
    214e:	0100                	addi	s0,sp,128
    2150:	0d05                	addi	s10,s10,1
    2152:	0200                	addi	s0,sp,256
    2154:	0204                	addi	s1,sp,256
    2156:	0306                	slli	t1,t1,0x1
    2158:	0976                	slli	s2,s2,0x1d
    215a:	0010                	0x10
    215c:	0501                	addi	a0,a0,0
    215e:	001a                	c.slli	zero,0x6
    2160:	0402                	c.slli64	s0
    2162:	0602                	c.slli64	a2
    2164:	00090003          	lb	zero,0(s2)
    2168:	0100                	addi	s0,sp,128
    216a:	0605                	addi	a2,a2,1
    216c:	0200                	addi	s0,sp,256
    216e:	0204                	addi	s1,sp,256
    2170:	0306                	slli	t1,t1,0x1
    2172:	0901                	addi	s2,s2,0
    2174:	0002                	c.slli64	zero
    2176:	0501                	addi	a0,a0,0
    2178:	0016                	c.slli	zero,0x5
    217a:	0402                	c.slli64	s0
    217c:	0602                	c.slli64	a2
    217e:	00090003          	lb	zero,0(s2)
    2182:	0100                	addi	s0,sp,128
    2184:	0b05                	addi	s6,s6,1
    2186:	0200                	addi	s0,sp,256
    2188:	0204                	addi	s1,sp,256
    218a:	04090003          	lb	zero,64(s2)
    218e:	0100                	addi	s0,sp,128
    2190:	1805                	addi	a6,a6,-31
    2192:	0200                	addi	s0,sp,256
    2194:	0204                	addi	s1,sp,256
    2196:	0306                	slli	t1,t1,0x1
    2198:	00080977          	0x80977
    219c:	0501                	addi	a0,a0,0
    219e:	0010                	0x10
    21a0:	0402                	c.slli64	s0
    21a2:	0302                	c.slli64	t1
    21a4:	0900                	addi	s0,sp,144
    21a6:	0000                	unimp
    21a8:	0501                	addi	a0,a0,0
    21aa:	0005                	c.nop	1
    21ac:	0402                	c.slli64	s0
    21ae:	0602                	c.slli64	a2
    21b0:	00090003          	lb	zero,0(s2)
    21b4:	0100                	addi	s0,sp,128
    21b6:	0609                	addi	a2,a2,2
    21b8:	0000                	unimp
    21ba:	0101                	addi	sp,sp,0
    21bc:	0150                	addi	a2,sp,132
    21be:	0000                	unimp
    21c0:	001d0003          	lb	zero,1(s10)
    21c4:	0000                	unimp
    21c6:	0101                	addi	sp,sp,0
    21c8:	000d0efb          	0xd0efb
    21cc:	0101                	addi	sp,sp,0
    21ce:	0101                	addi	sp,sp,0
    21d0:	0000                	unimp
    21d2:	0100                	addi	s0,sp,128
    21d4:	0000                	unimp
    21d6:	0001                	nop
    21d8:	30747263          	bgeu	s0,t2,24dc <_min_stack+0x4dc>
    21dc:	532e                	lw	t1,232(sp)
    21de:	0000                	unimp
    21e0:	0000                	unimp
    21e2:	0000                	unimp
    21e4:	0205                	addi	tp,tp,1
    21e6:	0d12                	slli	s10,s10,0x4
    21e8:	0000                	unimp
    21ea:	0315                	addi	t1,t1,5
    21ec:	0904                	addi	s1,sp,144
    21ee:	0004                	0x4
    21f0:	0301                	addi	t1,t1,0
    21f2:	0901                	addi	s2,s2,0
    21f4:	0004                	0x4
    21f6:	0301                	addi	t1,t1,0
    21f8:	0901                	addi	s2,s2,0
    21fa:	0002                	c.slli64	zero
    21fc:	0301                	addi	t1,t1,0
    21fe:	0901                	addi	s2,s2,0
    2200:	0002                	c.slli64	zero
    2202:	0301                	addi	t1,t1,0
    2204:	0901                	addi	s2,s2,0
    2206:	0002                	c.slli64	zero
    2208:	0301                	addi	t1,t1,0
    220a:	0901                	addi	s2,s2,0
    220c:	0002                	c.slli64	zero
    220e:	0301                	addi	t1,t1,0
    2210:	0901                	addi	s2,s2,0
    2212:	0002                	c.slli64	zero
    2214:	0301                	addi	t1,t1,0
    2216:	0901                	addi	s2,s2,0
    2218:	0002                	c.slli64	zero
    221a:	0301                	addi	t1,t1,0
    221c:	0901                	addi	s2,s2,0
    221e:	0002                	c.slli64	zero
    2220:	0301                	addi	t1,t1,0
    2222:	0901                	addi	s2,s2,0
    2224:	0002                	c.slli64	zero
    2226:	0301                	addi	t1,t1,0
    2228:	0901                	addi	s2,s2,0
    222a:	0002                	c.slli64	zero
    222c:	0301                	addi	t1,t1,0
    222e:	0901                	addi	s2,s2,0
    2230:	0002                	c.slli64	zero
    2232:	0301                	addi	t1,t1,0
    2234:	0901                	addi	s2,s2,0
    2236:	0002                	c.slli64	zero
    2238:	0301                	addi	t1,t1,0
    223a:	0901                	addi	s2,s2,0
    223c:	0002                	c.slli64	zero
    223e:	0301                	addi	t1,t1,0
    2240:	0901                	addi	s2,s2,0
    2242:	0002                	c.slli64	zero
    2244:	0301                	addi	t1,t1,0
    2246:	0901                	addi	s2,s2,0
    2248:	0002                	c.slli64	zero
    224a:	0301                	addi	t1,t1,0
    224c:	0901                	addi	s2,s2,0
    224e:	0002                	c.slli64	zero
    2250:	0301                	addi	t1,t1,0
    2252:	0901                	addi	s2,s2,0
    2254:	0002                	c.slli64	zero
    2256:	0301                	addi	t1,t1,0
    2258:	0901                	addi	s2,s2,0
    225a:	0002                	c.slli64	zero
    225c:	0301                	addi	t1,t1,0
    225e:	0901                	addi	s2,s2,0
    2260:	0002                	c.slli64	zero
    2262:	0301                	addi	t1,t1,0
    2264:	0901                	addi	s2,s2,0
    2266:	0002                	c.slli64	zero
    2268:	0301                	addi	t1,t1,0
    226a:	0901                	addi	s2,s2,0
    226c:	0002                	c.slli64	zero
    226e:	0301                	addi	t1,t1,0
    2270:	0901                	addi	s2,s2,0
    2272:	0002                	c.slli64	zero
    2274:	0301                	addi	t1,t1,0
    2276:	0901                	addi	s2,s2,0
    2278:	0002                	c.slli64	zero
    227a:	0301                	addi	t1,t1,0
    227c:	0901                	addi	s2,s2,0
    227e:	0002                	c.slli64	zero
    2280:	0301                	addi	t1,t1,0
    2282:	0901                	addi	s2,s2,0
    2284:	0002                	c.slli64	zero
    2286:	0301                	addi	t1,t1,0
    2288:	0901                	addi	s2,s2,0
    228a:	0002                	c.slli64	zero
    228c:	0301                	addi	t1,t1,0
    228e:	0901                	addi	s2,s2,0
    2290:	0002                	c.slli64	zero
    2292:	0301                	addi	t1,t1,0
    2294:	0901                	addi	s2,s2,0
    2296:	0002                	c.slli64	zero
    2298:	0301                	addi	t1,t1,0
    229a:	0901                	addi	s2,s2,0
    229c:	0002                	c.slli64	zero
    229e:	0301                	addi	t1,t1,0
    22a0:	0901                	addi	s2,s2,0
    22a2:	0002                	c.slli64	zero
    22a4:	0301                	addi	t1,t1,0
    22a6:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    22aa:	0301                	addi	t1,t1,0
    22ac:	0906                	slli	s2,s2,0x1
    22ae:	0008                	0x8
    22b0:	0301                	addi	t1,t1,0
    22b2:	0901                	addi	s2,s2,0
    22b4:	0008                	0x8
    22b6:	0301                	addi	t1,t1,0
    22b8:	0902                	c.slli64	s2
    22ba:	0008                	0x8
    22bc:	0301                	addi	t1,t1,0
    22be:	00040903          	lb	s2,0(s0)
    22c2:	0301                	addi	t1,t1,0
    22c4:	0901                	addi	s2,s2,0
    22c6:	0004                	0x4
    22c8:	0301                	addi	t1,t1,0
    22ca:	0901                	addi	s2,s2,0
    22cc:	0002                	c.slli64	zero
    22ce:	0301                	addi	t1,t1,0
    22d0:	0906                	slli	s2,s2,0x1
    22d2:	0004                	0x4
    22d4:	0301                	addi	t1,t1,0
    22d6:	0901                	addi	s2,s2,0
    22d8:	0004                	0x4
    22da:	0301                	addi	t1,t1,0
    22dc:	0901                	addi	s2,s2,0
    22de:	0004                	0x4
    22e0:	0901                	addi	s2,s2,0
    22e2:	0004                	0x4
    22e4:	0100                	addi	s0,sp,128
    22e6:	0001                	nop
    22e8:	0205                	addi	tp,tp,1
    22ea:	0000                	unimp
    22ec:	0000                	unimp
    22ee:	0100cb03          	lbu	s6,16(ra)
    22f2:	7c090103          	lb	sp,1984(s2)
    22f6:	0100                	addi	s0,sp,128
    22f8:	04090403          	lb	s0,64(s2)
    22fc:	0100                	addi	s0,sp,128
    22fe:	04090403          	lb	s0,64(s2)
    2302:	0100                	addi	s0,sp,128
    2304:	04090403          	lb	s0,64(s2)
    2308:	0100                	addi	s0,sp,128
    230a:	0409                	addi	s0,s0,2
    230c:	0000                	unimp
    230e:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	5f5f 6975 746e      	0x746e69755f5f
  3a:	5f38                	lw	a4,120(a4)
  3c:	0074                	addi	a3,sp,12
  3e:	645f 7461 0061      	0x617461645f
  44:	6e69                	lui	t3,0x1a
  46:	5f727473          	csrrci	s0,0x5f7,4
  4a:	6461                	lui	s0,0x18
  4c:	0064                	addi	s1,sp,12
  4e:	775f 7263 6f74      	0x6f747263775f
  54:	626d                	lui	tp,0x1b
  56:	735f 6174 6574      	0x65746174735f
  5c:	5f00                	lw	s0,56(a4)
  5e:	72736377          	0x72736377
  62:	6f74                	flw	fa3,92(a4)
  64:	626d                	lui	tp,0x1b
  66:	74735f73          	csrrwi	t5,0x747,6
  6a:	7461                	lui	s0,0xffff8
  6c:	0065                	c.nop	25
  6e:	5f5f 7562 6c69      	0x6c6975625f5f
  74:	6974                	flw	fa3,84(a0)
  76:	5f6e                	lw	t5,248(sp)
  78:	656d                	lui	a0,0x1b
  7a:	736d                	lui	t1,0xffffb
  jal x0, default_exc_handler
  7c:	7465                	lui	s0,0xffff9
  7e:	6c00                	flw	fs0,24(s0)
  jal x0, reset_handler
  80:	20676e6f          	jal	t3,76286 <_stack_start+0x66286>
  jal x0, default_exc_handler
  84:	6f6c                	flw	fa1,92(a4)
  86:	676e                	flw	fa4,216(sp)
  jal x0, default_exc_handler
  88:	7520                	flw	fs0,104(a0)
  8a:	736e                	flw	ft6,248(sp)
    asm volatile(
  8c:	6769                	lui	a4,0x1a
  8e:	656e                	flw	fa0,216(sp)
}
  90:	2064                	fld	fs1,192(s0)
    for(i=0;i<(length/3);i++) {
  92:	6e69                	lui	t3,0x1a
  94:	0074                	addi	a3,sp,12
  96:	6544                	flw	fs1,12(a0)
  98:	654d5f63          	bge	s10,s4,6f6 <ext_euclid+0x3c>
  9c:	67617373          	csrrci	t1,0x676,2
}
  a0:	0065                	c.nop	25
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  a2:	6c5f 6662 6973      	0x697366626c5f
    asm volatile(
  a8:	657a                	flw	fa0,156(sp)
  aa:	7200                	flw	fs0,32(a2)
  ac:	6e61                	lui	t3,0x18
  ae:	6f64                	flw	fs1,92(a4)
    for(i=0;i<(length/3);i++) {
  b0:	5f6d                	li	t5,-5
  b2:	7379656b          	0x7379656b
    asm volatile(
  b6:	5f00                	lw	s0,56(a4)
}
  b8:	6c5f 636f 6c61      	0x6c61636f6c5f
    for(i=0;i<(length/3);i++) {
  be:	5f65                	li	t5,-7
  c0:	0074                	addi	a3,sp,12
  c2:	72636573          	csrrsi	a0,0x726,6
  c6:	7465                	lui	s0,0xffff9
}
  c8:	6b5f 7965 665f      	0x665f79656b5f
    asm volatile(
  ce:	7300                	flw	fs0,32(a4)
  d0:	6365                	lui	t1,0x19
  d2:	6572                	flw	fa0,28(sp)
  d4:	5f74                	lw	a3,124(a4)
  d6:	5f79656b          	0x5f79656b
    for(i=0;i<(length/3);i++) {
  da:	6d5f0067          	jr	1749(t5)
    asm volatile(
  de:	7262                	flw	ft4,56(sp)
}
  e0:	6f74                	flw	fa3,92(a4)
    for(i=0;i<(length/3);i++) {
  e2:	735f6377          	0x735f6377
  e6:	6174                	flw	fa3,68(a0)
    asm volatile(
  e8:	6574                	flw	fa3,76(a0)
    for(i=0;i<(length/3);i++) {
  ea:	5f00                	lw	s0,56(a4)
  ec:	6f746377          	0x6f746377
}
  f0:	626d                	lui	tp,0x1b
    asm volatile(
  f2:	735f 6174 6574      	0x65746174735f
  f8:	5f00                	lw	s0,56(a4)
  fa:	745f 5f6d 6573      	0x65735f6d745f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 100:	682f0063          	beq	t5,sp,780 <ext_euclid+0xc6>
 104:	2f656d6f          	jal	s10,563fa <_stack_start+0x463fa>
    int line[size_b][size_a + size_b];
 108:	6c65                	lui	s8,0x19
 10a:	6669                	lui	a2,0x1a
 10c:	756e                	flw	fa0,248(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 10e:	2f72                	fld	ft10,280(sp)
 110:	6544                	flw	fs1,12(a0)
    int line[size_b][size_a + size_b];
 112:	6f746b73          	csrrsi	s6,0x6f7,8
 116:	2f70                	fld	fa2,216(a4)
 118:	6269                	lui	tp,0x1a
 11a:	7865                	lui	a6,0xffff9
 11c:	765f 2f32 6269      	0x62692f32765f
    int pola[size_a];
 122:	7865                	lui	a6,0xffff9
 124:	6d2d                	lui	s10,0xb
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 126:	7361                	lui	t1,0xffff8
 128:	6574                	flw	fa3,76(a0)
 12a:	2f72                	fld	ft10,280(sp)
 12c:	7865                	lui	a6,0xffff9
 12e:	6d61                	lui	s10,0x18
 130:	6c70                	flw	fa2,92(s0)
    int line[size_b][size_a + size_b];
 132:	7365                	lui	t1,0xffff9
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 134:	2f77732f          	0x2f77732f
 138:	746e                	flw	fs0,248(sp)
    int line[size_b][size_a + size_b];
 13a:	7572                	flw	fa0,60(sp)
    int pola[size_a];
 13c:	6c5f 7461 6669      	0x666974616c5f
    int line[size_b][size_a + size_b];
 142:	6f68                	flw	fa0,92(a4)
 144:	772f6163          	bltu	t5,s2,8a6 <ext_euclid+0x1ec>
    int pola[size_a];
 148:	7469                	lui	s0,0xffffa
    int polb[size_b];
 14a:	5f68                	lw	a0,124(a4)
 14c:	74737563          	bgeu	t1,t2,896 <ext_euclid+0x1dc>
    int pola[size_a];
 150:	6d2f6d6f          	jal	s10,f6822 <_stack_start+0xe6822>
    int polb[size_b];
 154:	612b646f          	jal	s0,b6766 <_stack_start+0xa6766>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 158:	6464                	flw	fs1,76(s0)
    int pola[size_a];
 15a:	7571652b          	0x7571652b
    int line[size_b][size_a + size_b];
 15e:	6c00                	flw	fs0,24(s0)
 160:	20676e6f          	jal	t3,76366 <_stack_start+0x66366>
    for (i = 0; i < size_b; ++i){
 164:	6f6c                	flw	fa1,92(a4)
 166:	676e                	flw	fa4,216(sp)
 168:	6920                	flw	fs0,80(a0)
            product[j] = 0;
 16a:	746e                	flw	fs0,248(sp)
 16c:	7300                	flw	fs0,32(a4)
 16e:	7a69                	lui	s4,0xffffa
 170:	5f65                	li	t5,-7
    for (i = 0; i < size_b; ++i){
 172:	004e                	c.slli	zero,0x13
 174:	6e69                	lui	t3,0x1a
     	array_equ(pola,a,size_a);
 176:	5f727473          	csrrci	s0,0x5f7,4
 17a:	6f6d                	lui	t5,0x1b
 17c:	0064                	addi	s1,sp,12
 17e:	6f70                	flw	fa2,92(a4)
 180:	796c                	flw	fa1,116(a0)
 182:	756d                	lui	a0,0xffffb
 184:	746c                	flw	fa1,108(s0)
 186:	5f00                	lw	s0,56(a4)
 188:	6275                	lui	tp,0x1d
	array_mod(pola,mod,size_a);
 18a:	6675                	lui	a2,0x1d
 18c:	5f00                	lw	s0,56(a4)
 18e:	6162                	flw	ft2,24(sp)
 190:	5f006573          	csrrsi	a0,0x5f0,0
    	array_equ(polb,b,size_b);
 194:	745f 5f6d 6f68      	0x6f685f6d745f
 19a:	7275                	lui	tp,0xffffd
 19c:	5f00                	lw	s0,56(a4)
	array_mod(polb,mod,size_b);
 19e:	735f 0066 6f5f      	0x6f5f0066735f
 1a4:	5f6e                	lw	t5,248(sp)
    if(star_mult == 1){
 1a6:	7865                	lui	a6,0xffff9
 1a8:	7469                	lui	s0,0xffffa
 1aa:	615f 6772 0073      	0x736772615f
 1b0:	635f 6f6f 696b      	0x696b6f6f635f
 1b6:	0065                	c.nop	25
 1b8:	5f5f 6773 756c      	0x756c67735f5f
        for (j = size_b -1; j >= 0; j = j-1){
 1be:	0065                	c.nop	25
 1c0:	6572                	flw	fa0,28(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 1c2:	72003173          	csrrc	sp,0x720,zero
            product[j] = 0;
 1c6:	7365                	lui	t1,0xffff9
 1c8:	0032                	c.slli	zero,0xc
 1ca:	665f 616c 7367      	0x7367616c665f
 1d0:	5f00                	lw	s0,56(a4)
 1d2:	7369                	lui	t1,0xffffa
        for(j = 0; j < size_a + size_b -1; ++j){
 1d4:	635f 6178 5f00      	0x5f006178635f
 1da:	69647473          	csrrci	s0,0x696,8
    for (i = 0; i < size_b; ++i){
 1de:	006e                	c.slli	zero,0x1b
 1e0:	625f 6b6c 6973      	0x69736b6c625f
        for(j = 0; j < size_a + size_b -1; ++j){
 1e6:	657a                	flw	fa0,156(sp)
                line[size_b-1-j][k] = pola[k]*polb[j];
 1e8:	7000                	flw	fs0,32(s0)
 1ea:	6f72                	flw	ft10,28(sp)
 1ec:	7564                	flw	fs1,108(a0)
 1ee:	70007463          	bgeu	zero,zero,8f6 <generate_keys+0x28>
 1f2:	64796c6f          	jal	s8,97038 <_stack_start+0x87038>
 1f6:	7669                	lui	a2,0xffffa
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f8:	7000                	flw	fs0,32(s0)
                line[size_b-1-j][k] = pola[k]*polb[j];
 1fa:	66796c6f          	jal	s8,97060 <_stack_start+0x87060>
 1fe:	5f00                	lw	s0,56(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 200:	62747663          	bgeu	s0,t2,82c <ext_euclid+0x172>
        for (j = size_b -1; j >= 0; j = j-1){
 204:	6675                	lui	a2,0x1d
 206:	5f00                	lw	s0,56(a4)
 208:	7366666f          	jal	a2,6693e <_stack_start+0x5693e>
 20c:	7465                	lui	s0,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 20e:	5f00                	lw	s0,56(a4)
	array_add(product, line[i], (size_a + size_b - 1));
 210:	626d                	lui	tp,0x1b
 212:	6f747273          	csrrci	tp,0x6f7,8
 216:	5f736377          	0x5f736377
        array_mod(line[i],mod,(size_a+size_b-1));
 21a:	74617473          	csrrci	s0,0x746,2
    for (i = 0; i < size_b; ++i){
 21e:	0065                	c.nop	25
    array_mod(product,mod,size_a+size_b-1);
 220:	6d5f 7262 656c      	0x656c72626d5f
 226:	5f6e                	lw	t5,248(sp)
 228:	74617473          	csrrci	s0,0x746,2
}
 22c:	0065                	c.nop	25
 22e:	665f 616e 6772      	0x6772616e665f
 234:	746e0073          	0x746e0073
 238:	7572                	flw	fa0,60(sp)
 23a:	645f 6365 7965      	0x79656365645f
 240:	7470                	flw	fa2,108(s0)
 242:	5f00                	lw	s0,56(a4)
 244:	6e66                	flw	ft8,88(sp)
 246:	735f0073          	0x735f0073
 24a:	6769                	lui	a4,0x1a
 24c:	006e                	c.slli	zero,0x1b
 24e:	665f 6f6c 6b63      	0x6b636f6c665f
            for (k = size_a-1; k >= 0; k = k-1 ){
 254:	745f 5f00 7473      	0x74735f00745f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 25a:	6564                	flw	fs1,76(a0)
 25c:	7272                	flw	ft4,60(sp)
 25e:	5f00                	lw	s0,56(a4)
 260:	6942                	flw	fs2,16(sp)
 262:	746e6967          	0x746e6967
 266:	5f00                	lw	s0,56(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 268:	6d6d6167          	0x6d6d6167
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 26c:	5f61                	li	t5,-8
 26e:	6e676973          	csrrsi	s2,0x6e6,14
            for (k = size_a-1; k >= 0; k = k-1 ){
 272:	006d6167          	0x6d6167
        for (j = size_b -1; j >= 0; j = j-1){
 276:	725f 6165 0064      	0x646165725f
        array_mod(line[i],mod,(size_a+size_b-1));
 27c:	725f 7365 6c75      	0x6c757365725f
	array_add(product, line[i], (size_a + size_b - 1));
 282:	5f74                	lw	a3,124(a4)
 284:	5f5f006b          	0x5f5f006b
    for (i = 0; i < size_b; ++i){
 288:	6d74                	flw	fa3,92(a0)
 28a:	6400                	flw	fs0,8(s0)
 28c:	6e65                	lui	t3,0x19
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 28e:	6d75                	lui	s10,0x1d
    int line[size_b][size_a + size_b];
 290:	745f 6d65 0070      	0x706d65745f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 296:	5f5f 6377 6268      	0x626863775f5f
 29c:	7200                	flw	fs0,32(a2)
    int line[size_b][size_a + size_b];
 29e:	7365                	lui	t1,0xffff9
 2a0:	6c75                	lui	s8,0x1d
 2a2:	6b74                	flw	fa3,84(a4)
 2a4:	5f006e6f          	jal	t3,6894 <_stack_len+0x2894>
 2a8:	6f647473          	csrrci	s0,0x6f6,8
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2ac:	7475                	lui	s0,0xffffd
 2ae:	5f00                	lw	s0,56(a4)
 2b0:	6c747663          	bgeu	s0,t2,97c <generate_keys+0xae>
 2b4:	6e65                	lui	t3,0x19
 2b6:	7300                	flw	fs0,32(a4)
 2b8:	6365                	lui	t1,0x19
 2ba:	6572                	flw	fa0,28(sp)
    int line[size_b][size_a + size_b];
 2bc:	5f74                	lw	a3,124(a4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2be:	5f79656b          	0x5f79656b
    int line[size_b][size_a + size_b];
 2c2:	7166                	flw	ft2,120(sp)
 2c4:	5f00                	lw	s0,56(a4)
 2c6:	6966                	flw	fs2,88(sp)
    int pola[size_a];
 2c8:	656c                	flw	fa1,76(a0)
 2ca:	7200                	flw	fs0,32(a2)
 2cc:	7465                	lui	s0,0xffff9
 2ce:	7275                	lui	tp,0xffffd
    int line[size_b][size_a + size_b];
 2d0:	5f6e                	lw	t5,248(sp)
    int pola[size_a];
 2d2:	6461                	lui	s0,0x18
 2d4:	7264                	flw	fs1,100(a2)
    int polb[size_b];
 2d6:	7365                	lui	t1,0xffff9
 2d8:	72003173          	csrrc	sp,0x720,zero
    int pola[size_a];
 2dc:	7465                	lui	s0,0xffff9
    int polb[size_b];
 2de:	7275                	lui	tp,0xffffd
 2e0:	5f6e                	lw	t5,248(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2e2:	6461                	lui	s0,0x18
 2e4:	7264                	flw	fs1,100(a2)
    int line[size_b][size_a + size_b];
 2e6:	7365                	lui	t1,0xffff9
 2e8:	72003273          	csrrc	tp,0x720,zero
    int pola[size_a];
 2ec:	7465                	lui	s0,0xffff9
 2ee:	7275                	lui	tp,0xffffd
    int polb[size_b];
 2f0:	5f6e                	lw	t5,248(sp)
    for (i = 0; i < size_b; ++i){
 2f2:	6461                	lui	s0,0x18
 2f4:	7264                	flw	fs1,100(a2)
 2f6:	7365                	lui	t1,0xffff9
            product2[j] = 0;
 2f8:	72003373          	csrrc	t1,0x720,zero
 2fc:	7465                	lui	s0,0xffff9
 2fe:	7275                	lui	tp,0xffffd
    for (i = 0; i < size_b; ++i){
 300:	5f6e                	lw	t5,248(sp)
 302:	6461                	lui	s0,0x18
    array_equ(pola,a,size_a);
 304:	7264                	flw	fs1,100(a2)
 306:	7365                	lui	t1,0xffff9
 308:	5f003473          	csrrc	s0,0x5f0,zero
 30c:	696e                	flw	fs2,216(sp)
 30e:	0073626f          	jal	tp,36b14 <_stack_start+0x26b14>
    array_equ(polb,b,size_b);
 312:	6572                	flw	fa0,28(sp)
 314:	7574                	flw	fa3,108(a0)
 316:	6e72                	flw	ft8,28(sp)
 318:	615f 6464 6572      	0x65726464615f
    if(star_mult == 1){
 31e:	00367373          	csrrci	t1,fcsr,12
 322:	6572                	flw	fa0,28(sp)
 324:	7574                	flw	fa3,108(a0)
 326:	6e72                	flw	ft8,28(sp)
 328:	615f 6464 6572      	0x65726464615f
        for (j = size_b -1; j >= 0; j = j-1){
 32e:	00377373          	csrrci	t1,fcsr,14
            for (k = size_a-1; k >= 0; k = k-1 ){
 332:	726f6873          	csrrsi	a6,0x726,30
            product2[j] = 0;
 336:	2074                	fld	fa3,192(s0)
 338:	6e75                	lui	t3,0x1d
 33a:	6e676973          	csrrsi	s2,0x6e6,14
            line[i][j] = 0;
 33e:	6465                	lui	s0,0x19
            product2[j] = 0;
 340:	6920                	flw	fs0,80(a0)
 342:	746e                	flw	fs0,248(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 344:	5f00                	lw	s0,56(a4)
 346:	7461                	lui	s0,0xffff8
 348:	7865                	lui	a6,0xffff9
 34a:	7469                	lui	s0,0xffffa
    for (i = 0; i < size_b; ++i){
 34c:	0030                	addi	a2,sp,8
 34e:	735f 6769 616e      	0x616e6769735f
        for(j = 0; j < size_a + size_b -1; ++j){
 354:	5f6c                	lw	a1,124(a4)
 356:	7562                	flw	fa0,56(sp)
                line[size_b-1-j][k] = pola[k]*polb[j];
 358:	0066                	c.slli	zero,0x19
 35a:	615f 6373 6974      	0x69746373615f
 360:	656d                	lui	a0,0x1b
 362:	625f 6675 5f00      	0x5f006675625f
            for (k = size_a-1; k >= 0; k = k-1 ){
 368:	6572                	flw	fa0,28(sp)
                line[size_b-1-j][k] = pola[k]*polb[j];
 36a:	746c7573          	csrrci	a0,0x746,24
 36e:	5f00                	lw	s0,56(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 370:	775f 6863 7700      	0x77006863775f
        for (j = size_b -1; j >= 0; j = j-1){
 376:	6e69                	lui	t3,0x1a
 378:	5f74                	lw	a3,124(a4)
 37a:	0074                	addi	a3,sp,12
 37c:	656e6567          	0x656e6567
         array_add(product2,line[i],size_a+size_b-1);
 380:	6172                	flw	ft2,28(sp)
 382:	6574                	flw	fa3,76(a0)
 384:	6b5f 7965 0073      	0x7379656b5f
        for(i = 0; i < size_b; ++i){
 38a:	5f5f 7562 6c69      	0x6c6975625f5f
}
 390:	6974                	flw	fa3,84(a0)
 392:	5f6e                	lw	t5,248(sp)
 394:	656d                	lui	a0,0x1b
 396:	636d                	lui	t1,0x1b
 398:	7970                	flw	fa2,116(a0)
 39a:	5f00                	lw	s0,56(a4)
 39c:	6f6c                	flw	fa1,92(a4)
 39e:	4e006b63          	bltu	zero,zero,894 <ext_euclid+0x1da>
 3a2:	5254                	lw	a3,36(a2)
 3a4:	5f55                	li	t5,-11
 3a6:	3834                	fld	fa3,112(s0)
 3a8:	625f 7469 2e4d      	0x2e4d7469625f
 3ae:	69730063          	beq	t1,s7,a2e <generate_keys+0x160>
 3b2:	657a                	flw	fa0,156(sp)
 3b4:	615f 7000 6f72      	0x6f727000615f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3ba:	7564                	flw	fs1,108(a0)
 3bc:	00327463          	bgeu	tp,gp,3c4 <polymult2+0x136>
 3c0:	7865                	lui	a6,0xffff9
 3c2:	5f74                	lw	a3,124(a4)
 3c4:	7565                	lui	a0,0xffff9
 3c6:	64696c63          	bltu	s2,t1,a1e <generate_keys+0x150>
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ca:	5f00                	lw	s0,56(a4)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3cc:	74697277          	0x74697277
 3d0:	0065                	c.nop	25
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d2:	5f5f 6d74 795f      	0x795f6d745f5f
        for (j = size_b -1; j >= 0; j = j-1){
 3d8:	6165                	addi	sp,sp,112
 3da:	0072                	c.slli	zero,0x1c
 3dc:	6f70                	flw	fa2,92(a4)
         array_add(product2,line[i],size_a+size_b-1);
 3de:	626c                	flw	fa1,68(a2)
 3e0:	7200                	flw	fs0,32(a2)
 3e2:	6e61                	lui	t3,0x18
 3e4:	6f64                	flw	fs1,92(a4)
        for(i = 0; i < size_b; ++i){
 3e6:	5f6d                	li	t5,-5
 3e8:	6176                	flw	ft2,92(sp)
 3ea:	006c                	addi	a1,sp,12
    int v[size_N];
 3ec:	6e5f 616d 6c6c      	0x6c6c616d6e5f
 3f2:	6c00636f          	jal	t1,6ab2 <_stack_len+0x2ab2>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 3f6:	20676e6f          	jal	t3,765fc <_stack_start+0x665fc>
 3fa:	6f64                	flw	fs1,92(a4)
 3fc:	6275                	lui	tp,0x1d
 3fe:	656c                	flw	fa1,76(a0)
 400:	5f00                	lw	s0,56(a4)
 402:	656e                	flw	fa0,216(sp)
 404:	7478                	flw	fa4,108(s0)
 406:	0066                	c.slli	zero,0x19
 408:	7261                	lui	tp,0xffff8
 40a:	6172                	flw	ft2,28(sp)
 40c:	5f79                	li	t5,-2
 40e:	7165                	addi	sp,sp,-400
 410:	0075                	c.nop	29
    int v[size_N];
 412:	656d                	lui	a0,0x1b
 414:	67617373          	csrrci	t1,0x676,2
    int q[size_N];
 418:	0065                	c.nop	25
 41a:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
    int num_temp[size_N];
 420:	72006e6f          	jal	t3,6b40 <_stack_len+0x2b40>
    int denum_temp[size_D];
 424:	7465                	lui	s0,0xffff9
 426:	7275                	lui	tp,0xffffd
 428:	5f6e                	lw	t5,248(sp)
    int num_temp[size_N];
 42a:	6461                	lui	s0,0x18
    int denum_temp[size_D];
 42c:	7264                	flw	fs1,100(a2)
 42e:	7365                	lui	t1,0xffff9
   if(size_N == 106) {
 430:	5f003573          	csrrc	a0,0x5f0,zero
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 434:	7461                	lui	s0,0xffff8
 436:	7865                	lui	a6,0xffff9
 438:	7469                	lui	s0,0xffffa
 43a:	7300                	flw	fs0,32(a4)
 43c:	6275                	lui	tp,0x1d
    int v[size_N];
 43e:	6174706f          	j	48254 <_stack_start+0x38254>
    int denum_temp[size_D];
 442:	6772                	flw	fa4,28(sp)
 444:	5f00                	lw	s0,56(a4)
 446:	735f 6964 6964      	0x69646964735f
     array_equ(num_temp, num, size_N - 1);   // 105 elemani ücer ücer yap...
 44c:	696e                	flw	fs2,216(sp)
 44e:	0074                	addi	a3,sp,12
 450:	6f5f 6666 745f      	0x745f66666f5f
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
 456:	4500                	lw	s0,8(a0)
 458:	636e                	flw	ft6,216(sp)
        array_mod(num_temp, mod, size_N - 1);
 45a:	4d5f 7365 6173      	0x617373654d5f
 460:	63006567          	0x63006567
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
 464:	72746e6f          	jal	t3,4738a <_stack_start+0x3738a>
        while(num_temp[size_N - 1] < 0){
 468:	00526c6f          	jal	s8,26c6c <_stack_start+0x16c6c>
 46c:	665f 6572 6c65      	0x6c656572665f
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
 472:	7369                	lui	t1,0xffffa
 474:	0074                	addi	a3,sp,12
 476:	6972                	flw	fs2,28(sp)
 478:	676e                	flw	fa4,216(sp)
     array_equ(num_temp, num, size_N );
 47a:	705f 6c6f 0079      	0x796c6f705f
 480:	4c5f 434f 5f4b      	0x5f4b434f4c5f
        array_mod(num_temp, mod, size_N);
 486:	4552                	lw	a0,20(sp)
 488:	53525543          	fmadd.d	fa0,ft4,fs5,fa0,unknown
    array_equ(denum_temp,denum,size_D);
 48c:	5649                	li	a2,-14
 48e:	5f45                	li	t5,-15
 490:	0054                	addi	a3,sp,4
	array_mod(denum_temp,mod,size_D);
 492:	6974                	flw	fa3,84(a0)
 494:	315f 7400 5f69      	0x5f697400315f
    for (i = 0; i < size_N; ++i){
 49a:	0032                	c.slli	zero,0xc
 49c:	6e75                	lui	t3,0x1d
 49e:	6e676973          	csrrsi	s2,0x6e6,14
    for (i = size_D-1; i >= 0; i = i-1){
 4a2:	6465                	lui	s0,0x19
 4a4:	6320                	flw	fs0,64(a4)
 4a6:	6168                	flw	fa0,68(a0)
 4a8:	0072                	c.slli	zero,0x1c
 4aa:	6971                	lui	s2,0x1c
    for (i = 0; i < size_N; ++i){
 4ac:	315f 5f00 656e      	0x656e5f00315f
    for (u = 0; u < mod; ++u){
 4b2:	685f0077          	0x685f0077
 4b6:	655f 7272 6f6e      	0x6f6e7272655f
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
 4bc:	7300                	flw	fs0,32(a4)
 4be:	6f68                	flw	fa0,92(a4)
 4c0:	7472                	flw	fs0,60(sp)
        q[i] = 0;
 4c2:	6920                	flw	fs0,80(a0)
 4c4:	746e                	flw	fs0,248(sp)
 4c6:	5f00                	lw	s0,56(a4)
 4c8:	745f 5f6d 6479      	0x64795f6d745f
 4ce:	7961                	lui	s2,0xffff8
        v[i] = 0;
 4d0:	5f00                	lw	s0,56(a4)
 4d2:	735f 7562 0066      	0x667562735f
        if( denum_temp[i] != 0 )
 4d8:	665f 616c 7367      	0x7367616c665f
        if ( (b_N*u)%mod == 1 )
 4de:	0032                	c.slli	zero,0xc
 4e0:	695f 626f 0073      	0x73626f695f
 4e6:	5f5f 4946 454c      	0x454c49465f5f
        if( num_temp[i] != 0 )
 4ec:	5f00                	lw	s0,56(a4)
    for (i = size_N-1; i >= 0; i = i-1){
 4ee:	626d                	lui	tp,0x1b
 4f0:	74617473          	csrrci	s0,0x746,2
 4f4:	5f65                	li	t5,-7
 4f6:	0074                	addi	a3,sp,12
 4f8:	5f5f 4673 4c49      	0x4c4946735f5f
         if(size_N == 106) {
 4fe:	0045                	c.nop	17
 500:	6d5f 7362 6174      	0x617473626d5f
        v[(d-d2)] = u*r_d;
 506:	6574                	flw	fa3,76(a0)
 508:	5f00                	lw	s0,56(a4)
 50a:	6172                	flw	ft2,28(sp)
 50c:	646e                	flw	fs0,216(sp)
 50e:	6e5f 7865 0074      	0x7478656e5f
            array_mod(v, mod, size_N - 1);
 514:	6d5f 6c62 6e65      	0x6e656c626d5f
 51a:	735f 6174 6574      	0x65746174735f
            while(v[size_N - 1] < 0){
 520:	5f00                	lw	s0,56(a4)
 522:	6e69                	lui	t3,0x1a
 524:	695f0063          	beq	t5,s5,ba4 <generate_keys+0x2d6>
            v[size_N - 1] = v[size_N - 1] % mod;
 528:	646e                	flw	fs0,216(sp)
 52a:	5f00                	lw	s0,56(a4)
 52c:	6f6c                	flw	fa1,92(a4)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 52e:	656c6163          	bltu	s8,s6,b70 <generate_keys+0x2a2>
 532:	5f00                	lw	s0,56(a4)
 534:	635f 656c 6e61      	0x6e61656c635f
 53a:	7075                	c.lui	zero,0xffffd
        if(size_N == 106) {
 53c:	5f00                	lw	s0,56(a4)
 53e:	6e75                	lui	t3,0x1d
 540:	63657073          	csrci	0x636,10
            array_mod(product, mod, size_N - 1);
 544:	6669                	lui	a2,0x1a
 546:	6569                	lui	a0,0x1a
 548:	5f64                	lw	s1,124(a4)
 54a:	6f6c                	flw	fa1,92(a4)
            while(product[size_N - 1] < 0){
 54c:	656c6163          	bltu	s8,s6,b8e <generate_keys+0x2c0>
 550:	695f 666e 006f      	0x6f666e695f
 556:	6d5f 7861 6477      	0x647778616d5f
            product[size_N - 1] = product[size_N - 1] % mod;
 55c:	725f0073          	0x725f0073
 560:	6565                	lui	a0,0x19
 562:	746e                	flw	fs0,248(sp)
        for (i = 0; i < size_N; ++i){
 564:	7300                	flw	fs0,32(a4)
 566:	6174                	flw	fa3,68(a0)
 	if(size_N == 106) {
 568:	5f72                	lw	t5,60(sp)
 56a:	756d                	lui	a0,0xffffb
            array_mod(num_temp, mod, size_N - 1);
 56c:	746c                	flw	fa1,108(s0)
 56e:	5f00                	lw	s0,56(a4)
 570:	64656573          	csrrsi	a0,0x646,10
 574:	7200                	flw	fs0,32(a2)
            while(num_temp[size_N - 1] < 0){
 576:	5f69                	li	t5,-6
 578:	0032                	c.slli	zero,0xc
 57a:	5f5f 6f63 6e75      	0x6e756f635f5f
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
 580:	0074                	addi	a3,sp,12
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
 582:	5f5f 6176 756c      	0x756c61765f5f
 588:	0065                	c.nop	25
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
 58a:	735f 6565 006b      	0x6b6565735f
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
 590:	665f 6f70 5f73      	0x5f736f70665f
 596:	0074                	addi	a3,sp,12
            array_mod(q, mod, size_N - 1);
 598:	656c                	flw	fa1,76(a0)
 59a:	676e                	flw	fa4,216(sp)
 59c:	6874                	flw	fa3,84(s0)
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
 59e:	5f00                	lw	s0,56(a4)
            array_mod(q, mod, size_N - 1);
 5a0:	745f 5f6d 696d      	0x696d5f6d745f
 5a6:	006e                	c.slli	zero,0x1b
            while(q[size_N - 1] < 0){
 5a8:	7570                	flw	fa2,108(a0)
 5aa:	6c62                	flw	fs8,24(sp)
 5ac:	6369                	lui	t1,0x1a
 5ae:	6b5f 7965 6100      	0x610079656b5f
            q[size_N - 1] = q[size_N - 1] % mod;
 5b4:	7272                	flw	ft4,60(sp)
 5b6:	7961                	lui	s2,0xffff8
 5b8:	615f 6464 6100      	0x61006464615f
                v[size_N - 1] = v[size_N - 1]+mod;
 5be:	7272                	flw	ft4,60(sp)
 5c0:	7961                	lui	s2,0xffff8
            array_mod(v, mod, size_N);
 5c2:	6d5f 646f 5f00      	0x5f00646f6d5f
 5c8:	74727473          	csrrci	s0,0x747,4
                product[size_N - 1] = product[size_N - 1]+mod;
 5cc:	6c5f6b6f          	jal	s6,f7490 <_stack_start+0xe7490>
 5d0:	7361                	lui	t1,0xffff8
 5d2:	0074                	addi	a3,sp,12
            array_mod(product, mod, size_N);
 5d4:	665f 746e 7079      	0x7079746e665f
 5da:	7365                	lui	t1,0xffff9
 5dc:	7300                	flw	fs0,32(a4)
 5de:	6365                	lui	t1,0x19
            num_temp[i] = num_temp[i] - product[i];
 5e0:	6572                	flw	fa0,28(sp)
 5e2:	5f74                	lw	a3,124(a4)
 5e4:	5f79656b          	0x5f79656b
 5e8:	7066                	flw	ft0,120(sp)
        for (i = 0; i < size_N; ++i){
 5ea:	5f00                	lw	s0,56(a4)
 5ec:	555f 6f4c 676e      	0x676e6f4c555f
            num_temp[i] = num_temp[i] - product[i];
 5f2:	7200                	flw	fs0,32(a2)
        for (i = 0; i < size_N; ++i){
 5f4:	5f69                	li	t5,-6
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
 5f6:	0031                	c.nop	12
 5f8:	675f 7465 6164      	0x61647465675f
            array_mod(num_temp, mod, size_N);
 5fe:	6574                	flw	fa3,76(a0)
 600:	655f 7272 5f00      	0x5f007272655f
            array_add(q, v, size_N );
 606:	626f6c67          	0x626f6c67
 60a:	6c61                	lui	s8,0x18
 60c:	695f 706d 7275      	0x7275706d695f
            array_mod(q, mod, size_N);
 612:	5f65                	li	t5,-7
 614:	7470                	flw	fa2,108(s0)
    int v[size_N];
 616:	0072                	c.slli	zero,0x1c
        for (i = size_N-1; i >= 0; i = i-1){
 618:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
 61c:	20373143          	fmadd.s	ft2,fa4,ft3,ft4,rup
 620:	2e39                	jal	93e <generate_keys+0x70>
 622:	2e32                	fld	ft8,264(sp)
 624:	2030                	fld	fa2,64(s0)
 626:	6d2d                	lui	s10,0xb
                q[size_N - 1] = q[size_N - 1]+mod;
 628:	7261                	lui	tp,0xffff8
 62a:	723d6863          	bltu	s10,gp,d5a <reset_handler+0x44>
 62e:	3376                	fld	ft6,376(sp)
            if( num_temp[i] != 0 )
 630:	6932                	flw	fs2,12(sp)
        for (i = size_N-1; i >= 0; i = i-1){
 632:	636d                	lui	t1,0x1b
 634:	2d20                	fld	fs0,88(a0)
            v[i] = 0;
 636:	616d                	addi	sp,sp,240
 638:	6962                	flw	fs2,24(sp)
 63a:	693d                	lui	s2,0xf
 63c:	706c                	flw	fa1,100(s0)
 63e:	2d203233          	0x2d203233
        for (i = 0; i < size_N; ++i){
 642:	636d                	lui	t1,0x1b
 644:	6f6d                	lui	t5,0x1b
    while (d >= d2){
 646:	6564                	flw	fs1,76(a0)
 648:	3d6c                	fld	fa1,248(a0)
    if(size_N == 106) {
 64a:	656d                	lui	a0,0x1b
 64c:	6164                	flw	fs1,68(a0)
 64e:	796e                	flw	fs2,248(sp)
 650:	2d20                	fld	fs0,88(a0)
     array_equ(result, q, size_N - 1);   // 105 elemani ücer ücer yap...
 652:	746d                	lui	s0,0xffffb
 654:	6e75                	lui	t3,0x1d
 656:	3d65                	jal	50e <polydiv+0x122>
 658:	6f72                	flw	ft10,28(sp)
 65a:	74656b63          	bltu	a0,t1,db0 <memcpy+0x28>
 65e:	2d20                	fld	fs0,88(a0)
 660:	4f2d2067          	0x4f2d2067
     result[size_N - 1] = q[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
 664:	662d2073          	csrs	0x662,s10
 668:	6976                	flw	fs2,92(sp)
 66a:	69626973          	csrrsi	s2,0x696,4
    for(i = size_N; i < (2*size_N); ++i){
 66e:	696c                	flw	fa1,84(a0)
 670:	7974                	flw	fa3,116(a0)
        result[i] = num_temp[i-size_N];
 672:	683d                	lui	a6,0xf
 674:	6469                	lui	s0,0x1a
 676:	6564                	flw	fs1,76(a0)
 678:	006e                	c.slli	zero,0x1b
    for(i = size_N; i < (2*size_N); ++i){
 67a:	755f 756e 6573      	0x6573756e755f
}
 680:	5f64                	lw	s1,124(a4)
 682:	6172                	flw	ft2,28(sp)
 684:	646e                	flw	fs0,216(sp)
 686:	6c00                	flw	fs0,24(s0)
 688:	6e69                	lui	t3,0x1a
 68a:	0065                	c.nop	25
 68c:	775f 7364 5f00      	0x5f007364775f
 692:	745f 5f6d 6477      	0x64775f6d745f
 698:	7961                	lui	s2,0xffff8
 69a:	5f00                	lw	s0,56(a4)
 69c:	65756c67          	0x65756c67
 6a0:	6900                	flw	fs0,16(a0)
 6a2:	736e                	flw	ft6,248(sp)
 6a4:	7274                	flw	fa3,100(a2)
 6a6:	655f 7571 6e00      	0x6e007571655f
        result[i] = num_temp[i-size_N];
 6ac:	7274                	flw	fa3,100(a2)
 6ae:	5f75                	li	t5,-3
 6b0:	6e65                	lui	t3,0x19
 6b2:	70727963          	bgeu	tp,t2,dc4 <memcpy+0x3c>
    for(i = size_N; i < (2*size_N); ++i){
 6b6:	0074                	addi	a3,sp,12
 6b8:	735f 6973 657a      	0x657a6973735f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6be:	745f 5f00 366c      	0x366c5f00745f
 6c4:	6134                	flw	fa3,64(a0)
 6c6:	625f 6675 6400      	0x64006675625f
 6cc:	6e65                	lui	t3,0x19
 6ce:	6d75                	lui	s10,0x1d
 6d0:	5f00                	lw	s0,56(a4)
 6d2:	5f676973          	csrrsi	s2,0x5f6,14
 6d6:	7566                	flw	fa0,120(sp)
 6d8:	636e                	flw	ft6,216(sp)
 6da:	5f00                	lw	s0,56(a4)
 6dc:	626e                	flw	ft4,216(sp)
 6de:	6675                	lui	a2,0x1d
    int ri_2[size]; // MX-ring poly, a
 6e0:	5f00                	lw	s0,56(a4)
 6e2:	6e75                	lui	t3,0x1d
 6e4:	7375                	lui	t1,0xffffd
    int ri_1[size]; // f-random poly, f[N] = 0, b
 6e6:	6465                	lui	s0,0x19
 6e8:	7000                	flw	fs0,32(s0)
 6ea:	52796c6f          	jal	s8,97410 <_stack_start+0x87410>
    int ri[size];
 6ee:	7300                	flw	fs0,32(a4)
 6f0:	7a69                	lui	s4,0xffffa
    int ti_1[size]; // ti_1[0] = 1
 6f2:	5f65                	li	t5,-7
 6f4:	0044                	addi	s1,sp,4
 6f6:	5f5f 6d74 695f      	0x695f6d745f5f
    int ti[size];
 6fc:	74736473          	csrrsi	s0,0x747,6
    int qi_1[size];
 700:	5f00                	lw	s0,56(a4)
 702:	6f6c                	flw	fa1,92(a4)
    int temp[size];
 704:	746c6163          	bltu	s8,t1,e46 <memcpy+0xbe>
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 708:	6d69                	lui	s10,0x1a
 70a:	5f65                	li	t5,-7
 70c:	7562                	flw	fa0,56(sp)
    int ri_2[size]; // MX-ring poly, a
 70e:	0066                	c.slli	zero,0x19
 710:	635f 6f6c 6573      	0x65736f6c635f
        ti_2[i] = 0;
 716:	5f00                	lw	s0,56(a4)
 718:	3472                	fld	fs0,312(sp)
 71a:	0038                	addi	a4,sp,8
 71c:	6d5f 7462 776f      	0x776f74626d5f
    array_equ(ri_2,polyR,size);
 722:	74735f63          	bge	t1,t2,e80 <memset+0x1a>
 726:	7461                	lui	s0,0xffff8
 728:	0065                	c.nop	25
    array_equ(ri_1,polyf,size);
 72a:	705f 7335 6d00      	0x6d007335705f
 730:	6961                	lui	s2,0x18
    ti_1[0] = 1;
 732:	006e                	c.slli	zero,0x1b
 734:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
        for (i = N + 1; i < (2 * N + 2); ++i) {
 73a:	6164                	flw	fs1,68(a0)
 73c:	0079                	c.nop	30
 73e:	657a6973          	csrrsi	s2,0x657,20
            ti[i] = ti_2[i] - temp[i];
 742:	625f 6300 7472      	0x74726300625f
	array_mod(ri_2,mod,N+1);
 748:	2e30                	fld	fa2,88(a2)
 74a:	682f0053          	0x682f0053
 74e:	2f656d6f          	jal	s10,56a44 <_stack_start+0x46a44>
	array_mod(ri_1,mod,N+1);
 752:	6c65                	lui	s8,0x19
 754:	6669                	lui	a2,0x1a
 756:	756e                	flw	fa0,248(sp)
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
 758:	2f72                	fld	ft10,280(sp)
 75a:	6544                	flw	fs1,12(a0)
 75c:	6f746b73          	csrrsi	s6,0x6f7,8
 760:	2f70                	fld	fa2,216(a4)
 762:	6269                	lui	tp,0x1a
        for (i = N + 1; i < (2 * N + 2); ++i) {
 764:	7865                	lui	a6,0xffff9
 766:	765f 2f32 6269      	0x62692f32765f
 76c:	7865                	lui	a6,0xffff9
 76e:	6d2d                	lui	s10,0xb
 770:	7361                	lui	t1,0xffff8
        for (i = 0; i < N + 1; ++i) {
 772:	6574                	flw	fa3,76(a0)
 774:	2f72                	fld	ft10,280(sp)
 776:	7865                	lui	a6,0xffff9
        array_mod(temp,mod,N+1);
 778:	6d61                	lui	s10,0x18
 77a:	6c70                	flw	fa2,92(s0)
 77c:	7365                	lui	t1,0xffff9
 77e:	2f77732f          	0x2f77732f
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
 782:	746e                	flw	fs0,248(sp)
 784:	7572                	flw	fa0,60(sp)
 786:	6c5f 7461 6669      	0x666974616c5f
 78c:	6f68                	flw	fa0,92(a4)
        array_equ(qi_1,res1,size);
 78e:	772f6163          	bltu	t5,s2,ef0 <memset+0x8a>
 792:	7469                	lui	s0,0xffffa
	array_mod(qi_1,mod,size);
 794:	5f68                	lw	a0,124(a4)
 796:	74737563          	bgeu	t1,t2,ee0 <memset+0x7a>
 79a:	6d2f6d6f          	jal	s10,f6e6c <_stack_start+0xe6e6c>
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
 79e:	612b646f          	jal	s0,b6db0 <_stack_start+0xa6db0>
 7a2:	6464                	flw	fs1,76(s0)
 7a4:	4700                	lw	s0,8(a4)
 7a6:	554e                	lw	a0,240(sp)
 7a8:	4120                	lw	s0,64(a0)
 7aa:	2e322053          	0x2e322053
         array_equ(temp,res2,size);
 7ae:	          	snez	tp,zero

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <polydiv+0x294>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0022                	c.slli	zero,0x8
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	00b4                	addi	a3,sp,72
  3a:	0000                	unimp
  3c:	0006                	c.slli	zero,0x1
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	00ba                	slli	ra,ra,0xe
  4a:	0000                	unimp
  4c:	0022                	c.slli	zero,0x8
  4e:	0000                	unimp
  50:	000c                	0xc
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	00dc                	addi	a5,sp,68
  5a:	0000                	unimp
  5c:	0006                	c.slli	zero,0x1
  5e:	0000                	unimp
  60:	000c                	0xc
  62:	0000                	unimp
  64:	0000                	unimp
  66:	0000                	unimp
  68:	00e2                	slli	ra,ra,0x18
  6a:	0000                	unimp
  6c:	001e                	c.slli	zero,0x7
  6e:	0000                	unimp
  70:	0058                	addi	a4,sp,4
  72:	0000                	unimp
  74:	0000                	unimp
  76:	0000                	unimp
  78:	0100                	addi	s0,sp,128
  7a:	0000                	unimp
  jal x0, default_exc_handler
  7c:	018e                	slli	gp,gp,0x3
  7e:	0000                	unimp
  jal x0, reset_handler
  80:	0e42                	slli	t3,t3,0x10
  82:	4250                	lw	a2,4(a2)
  jal x0, default_exc_handler
  84:	99460593          	addi	a1,a2,-1644 # 19994 <_stack_start+0x9994>
  jal x0, default_exc_handler
  88:	0795480b          	0x795480b
    asm volatile(
  8c:	0c9a                	slli	s9,s9,0x6
  8e:	944e                	add	s0,s0,s3
}
  90:	5806                	lw	a6,96(sp)
    for(i=0;i<(length/3);i++) {
  92:	0288                	addi	a0,sp,320
  94:	0389                	addi	t2,t2,2
  96:	0492                	slli	s1,s1,0x4
  98:	0896                	slli	a7,a7,0x5
  9a:	0a980997          	auipc	s3,0xa980
  9e:	01810d9b          	0x1810d9b
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  a2:	0c42                	slli	s8,s8,0x10
  a4:	0008                	0x8
    asm volatile(
  a6:	0a00f403          	0xa00f403
  aa:	020c                	addi	a1,sp,256
  ac:	4250                	lw	a2,4(a2)
  ae:	42c1                	li	t0,16
    for(i=0;i<(length/3);i++) {
  b0:	42c8                	lw	a0,4(a3)
  b2:	42c9                	li	t0,18
    asm volatile(
  b4:	42d2                	lw	t0,20(sp)
  b6:	42d442d3          	0x42d442d3
    for(i=0;i<(length/3);i++) {
  ba:	42d5                	li	t0,21
  bc:	42d6                	lw	t0,84(sp)
  be:	42d842d7          	0x42d842d7
  c2:	42d9                	li	t0,22
  c4:	42da                	lw	t0,148(sp)
  c6:	000e4adb          	0xe4adb
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  ca:	0b42                	slli	s6,s6,0x10
  cc:	0058                	addi	a4,sp,4
    asm volatile(
  ce:	0000                	unimp
  d0:	0000                	unimp
  d2:	0000                	unimp
  d4:	028e                	slli	t0,t0,0x3
  d6:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  d8:	015e                	slli	sp,sp,0x17
  da:	0000                	unimp
    asm volatile(
  dc:	0e42                	slli	t3,t3,0x10
  de:	4650                	lw	a2,12(a2)
}
  e0:	0896                	slli	a7,a7,0x5
    for(i=0;i<(length/3);i++) {
  e2:	9348                	0x9348
  e4:	9705                	srai	a4,a4,0x21
  e6:	6209                	lui	tp,0x2
    asm volatile(
  e8:	0288                	addi	a0,sp,320
    for(i=0;i<(length/3);i++) {
  ea:	0389                	addi	t2,t2,2
  ec:	0492                	slli	s1,s1,0x4
  ee:	0694                	addi	a3,sp,832
}
  f0:	0795                	addi	a5,a5,5
    asm volatile(
  f2:	0a98                	addi	a4,sp,336
  f4:	0b99                	addi	s7,s7,6
  f6:	0c9a                	slli	s9,s9,0x6
  f8:	01810d9b          	0x1810d9b
    for(i=0;i<(length/3);i++) {
  fc:	0c42                	slli	s8,s8,0x10
  fe:	0008                	0x8
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 100:	ce02                	sw	zero,28(sp)
 102:	0c0a                	slli	s8,s8,0x2
 104:	5002                	0x5002
 106:	c142                	sw	a6,128(sp)
    int line[size_b][size_a + size_b];
 108:	c842                	sw	a6,16(sp)
 10a:	c942                	sw	a6,144(sp)
 10c:	d242                	sw	a6,36(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 10e:	d342                	sw	a6,164(sp)
 110:	d442                	sw	a6,40(sp)
    int line[size_b][size_a + size_b];
 112:	d542                	sw	a6,168(sp)
 114:	d642                	sw	a6,44(sp)
 116:	d742                	sw	a6,172(sp)
 118:	d842                	sw	a6,48(sp)
 11a:	d942                	sw	a6,176(sp)
 11c:	da42                	sw	a6,52(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 11e:	db42                	sw	a6,180(sp)
 120:	0e4a                	slli	t3,t3,0x12
    int pola[size_a];
 122:	4200                	lw	s0,0(a2)
 124:	0000000b          	0xb
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 128:	0054                	addi	a3,sp,4
 12a:	0000                	unimp
 12c:	0000                	unimp
 12e:	0000                	unimp
 130:	03ec                	addi	a1,sp,460
    int line[size_b][size_a + size_b];
 132:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 134:	02ce                	slli	t0,t0,0x13
 136:	0000                	unimp
 138:	0e46                	slli	t3,t3,0x11
    int line[size_b][size_a + size_b];
 13a:	5e50                	lw	a2,60(a2)
    int pola[size_a];
 13c:	0288                	addi	a0,sp,320
 13e:	0389                	addi	t2,t2,2
    int line[size_b][size_a + size_b];
 140:	0492                	slli	s1,s1,0x4
 142:	06940593          	addi	a1,s0,105 # ffffa069 <_stack_start+0xfffea069>
    int pola[size_a];
 146:	0795                	addi	a5,a5,5
 148:	0896                	slli	a7,a7,0x5
    int polb[size_b];
 14a:	0a980997          	auipc	s3,0xa980
 14e:	0b99                	addi	s7,s7,6
    int pola[size_a];
 150:	0c9a                	slli	s9,s9,0x6
    int polb[size_b];
 152:	01810d9b          	0x1810d9b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 156:	0c42                	slli	s8,s8,0x10
 158:	0008                	0x8
    int pola[size_a];
 15a:	0a027003          	0xa027003
    int line[size_b][size_a + size_b];
 15e:	020c                	addi	a1,sp,256
 160:	4250                	lw	a2,4(a2)
    int polb[size_b];
 162:	42c1                	li	t0,16
    for (i = 0; i < size_b; ++i){
 164:	42c8                	lw	a0,4(a3)
 166:	42c9                	li	t0,18
 168:	42d2                	lw	t0,20(sp)
            product[j] = 0;
 16a:	42d442d3          	0x42d442d3
 16e:	42d5                	li	t0,21
 170:	42d6                	lw	t0,84(sp)
    for (i = 0; i < size_b; ++i){
 172:	42d842d7          	0x42d842d7
     	array_equ(pola,a,size_a);
 176:	42d9                	li	t0,22
 178:	42da                	lw	t0,148(sp)
 17a:	000e4adb          	0xe4adb
 17e:	0b42                	slli	s6,s6,0x10
 180:	0054                	addi	a3,sp,4
 182:	0000                	unimp
 184:	0000                	unimp
 186:	0000                	unimp
 188:	06ba                	slli	a3,a3,0xe
	array_mod(pola,mod,size_a);
 18a:	0000                	unimp
 18c:	0214                	addi	a3,sp,256
 18e:	0000                	unimp
 190:	0e46                	slli	t3,t3,0x11
    	array_equ(polb,b,size_b);
 192:	5e50                	lw	a2,60(a2)
 194:	0288                	addi	a0,sp,320
 196:	0389                	addi	t2,t2,2
 198:	0492                	slli	s1,s1,0x4
 19a:	06940593          	addi	a1,s0,105
	array_mod(polb,mod,size_b);
 19e:	0795                	addi	a5,a5,5
 1a0:	0896                	slli	a7,a7,0x5
 1a2:	0a980997          	auipc	s3,0xa980
    if(star_mult == 1){
 1a6:	0b99                	addi	s7,s7,6
 1a8:	0c9a                	slli	s9,s9,0x6
 1aa:	01810d9b          	0x1810d9b
 1ae:	0c42                	slli	s8,s8,0x10
 1b0:	0008                	0x8
 1b2:	0a012e03          	lw	t3,160(sp)
 1b6:	020c                	addi	a1,sp,256
 1b8:	4250                	lw	a2,4(a2)
 1ba:	42c1                	li	t0,16
 1bc:	42c8                	lw	a0,4(a3)
        for (j = size_b -1; j >= 0; j = j-1){
 1be:	42c9                	li	t0,18
 1c0:	42d2                	lw	t0,20(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 1c2:	42d442d3          	0x42d442d3
            product[j] = 0;
 1c6:	42d5                	li	t0,21
 1c8:	42d6                	lw	t0,84(sp)
 1ca:	42d842d7          	0x42d842d7
            line[i][j] = 0;
 1ce:	42d9                	li	t0,22
            product[j] = 0;
 1d0:	42da                	lw	t0,148(sp)
 1d2:	000e4adb          	0xe4adb
        for(j = 0; j < size_a + size_b -1; ++j){
 1d6:	0b42                	slli	s6,s6,0x10
 1d8:	0054                	addi	a3,sp,4
 1da:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 1dc:	0000                	unimp
 1de:	0000                	unimp
 1e0:	08ce                	slli	a7,a7,0x13
 1e2:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 1e4:	02f4                	addi	a3,sp,332
 1e6:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
 1e8:	0e42                	slli	t3,t3,0x10
 1ea:	03f0                	addi	a2,sp,460
 1ec:	814c                	0x814c
 1ee:	8801                	andi	s0,s0,0
 1f0:	8902                	jr	s2
 1f2:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
 1f6:	6400                	flw	fs0,8(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f8:	0492                	slli	s1,s1,0x4
                line[size_b-1-j][k] = pola[k]*polb[j];
 1fa:	06940593          	addi	a1,s0,105
 1fe:	0795                	addi	a5,a5,5
            for (k = size_a-1; k >= 0; k = k-1 ){
 200:	0896                	slli	a7,a7,0x5
 202:	0c9a0997          	auipc	s3,0xc9a0
        for (j = size_b -1; j >= 0; j = j-1){
 206:	0a98                	addi	a4,sp,336
 208:	0b99                	addi	s7,s7,6
 20a:	0a01dc03          	lhu	s8,160(gp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 20e:	020c                	addi	a1,sp,256
	array_add(product, line[i], (size_a + size_b - 1));
 210:	03f0                	addi	a2,sp,460
 212:	c144                	sw	s1,4(a0)
 214:	c844                	sw	s1,20(s0)
 216:	c944                	sw	s1,20(a0)
        array_mod(line[i],mod,(size_a+size_b-1));
 218:	d244                	sw	s1,36(a2)
 21a:	d344                	sw	s1,36(a4)
    for (i = 0; i < size_b; ++i){
 21c:	d444                	sw	s1,44(s0)
 21e:	d544                	sw	s1,44(a0)
    array_mod(product,mod,size_a+size_b-1);
 220:	d644                	sw	s1,44(a2)
 222:	d744                	sw	s1,44(a4)
 224:	d844                	sw	s1,52(s0)
 226:	d944                	sw	s1,52(a0)
 228:	da44                	sw	s1,52(a2)
}
 22a:	0e4a                	slli	t3,t3,0x12
 22c:	4200                	lw	s0,0(a2)
 22e:	0034000b          	0x34000b
 232:	0000                	unimp
 234:	0000                	unimp
 236:	0000                	unimp
 238:	0bc2                	slli	s7,s7,0x10
 23a:	0000                	unimp
 23c:	0088                	addi	a0,sp,64
 23e:	0000                	unimp
 240:	0e42                	slli	t3,t3,0x10
 242:	01e0                	addi	s0,sp,204
 244:	8844                	0x8844
 246:	8902                	jr	s2
 248:	04924a03          	lbu	s4,73(tp) # 2049 <_min_stack+0x49>
 24c:	8152                	mv	sp,s4
 24e:	9301                	srli	a4,a4,0x20
 250:	9405                	srai	s0,s0,0x21
 252:	0206                	slli	tp,tp,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
 254:	0a46                	slli	s4,s4,0x11
 256:	42c1                	li	t0,16
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 258:	42c8                	lw	a0,4(a3)
 25a:	42c9                	li	t0,18
 25c:	42d2                	lw	t0,20(sp)
 25e:	42d442d3          	0x42d442d3
 262:	000e                	c.slli	zero,0x3
 264:	0b42                	slli	s6,s6,0x10
 266:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 268:	0040                	addi	s0,sp,4
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 26a:	0000                	unimp
 26c:	0000                	unimp
 26e:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 270:	0c4a                	slli	s8,s8,0x12
 272:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
 274:	00c8                	addi	a0,sp,68
 276:	0000                	unimp
 278:	0e42                	slli	t3,t3,0x10
 27a:	4430                	lw	a2,72(s0)
        array_mod(line[i],mod,(size_a+size_b-1));
 27c:	0288                	addi	a0,sp,320
 27e:	924e0593          	addi	a1,t3,-1756 # 1c924 <_stack_start+0xc924>
	array_add(product, line[i], (size_a + size_b - 1));
 282:	9504                	0x9504
 284:	58099707          	0x58099707
    for (i = 0; i < size_b; ++i){
 288:	0181                	addi	gp,gp,0
 28a:	0389                	addi	t2,t2,2
 28c:	0694                	addi	a3,sp,832
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 28e:	0896                	slli	a7,a7,0x5
    int line[size_b][size_a + size_b];
 290:	5202                	lw	tp,32(sp)
 292:	c10a                	sw	sp,128(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 294:	c842                	sw	a6,16(sp)
 296:	c942                	sw	a6,144(sp)
 298:	d242                	sw	a6,36(sp)
 29a:	d342                	sw	a6,164(sp)
 29c:	d442                	sw	a6,40(sp)
    int line[size_b][size_a + size_b];
 29e:	d542                	sw	a6,168(sp)
 2a0:	d642                	sw	a6,44(sp)
 2a2:	d742                	sw	a6,172(sp)
 2a4:	0e42                	slli	t3,t3,0x10
 2a6:	4200                	lw	s0,0(a2)
 2a8:	0000000b          	0xb
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2ac:	0020                	addi	s0,sp,8
 2ae:	0000                	unimp
 2b0:	0000                	unimp
 2b2:	0000                	unimp
 2b4:	0f0e                	slli	t5,t5,0x3
 2b6:	0000                	unimp
 2b8:	0110                	addi	a2,sp,128
 2ba:	0000                	unimp
    int line[size_b][size_a + size_b];
 2bc:	0e44                	addi	s1,sp,788
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2be:	08b0                	addi	a2,sp,88
 2c0:	8156                	mv	sp,s5
    int line[size_b][size_a + size_b];
 2c2:	8801                	andi	s0,s0,0
 2c4:	0202                	c.slli64	tp
 2c6:	0ad6                	slli	s5,s5,0x15
    int pola[size_a];
 2c8:	44c1                	li	s1,16
 2ca:	46c8                	lw	a0,12(a3)
 2cc:	000e                	c.slli	zero,0x3
 2ce:	0b42                	slli	s6,s6,0x10


NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	4b50006f          	j	d30 <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	4b50006f          	j	d34 <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	4ad0006f          	j	d30 <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	4a90006f          	j	d30 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_add>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      8c:	06b5750b          	0x6b5750b
    );

    return;


}
      90:	8082                	ret

00000092 <array_add>:
void array_add(int *a1, int *a2, int length) {
int i =0;
    for(i=0;i<(length/3);i++) {
      92:	478d                	li	a5,3
      94:	02f64633          	div	a2,a2,a5
      98:	4831                	li	a6,12
      9a:	4781                	li	a5,0
      9c:	00c7c363          	blt	a5,a2,a2 <array_add+0x10>
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
    }
}
      a0:	8082                	ret
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	03078733          	mul	a4,a5,a6
    asm volatile(
      a6:	00e506b3          	add	a3,a0,a4
      aa:	972e                	add	a4,a4,a1
      ac:	06e6f70b          	0x6e6f70b
    for(i=0;i<(length/3);i++) {
      b0:	0785                	addi	a5,a5,1
      b2:	b7ed                	j	9c <array_add+0xa>

000000b4 <instr_sub>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      b4:	08b5750b          	0x8b5750b
    );


    return;

}
      b8:	8082                	ret

000000ba <array_sub>:
void array_sub(int *a1, int *a2, int length){
int i =0;
    for(i=0;i<(length/3);i++) {
      ba:	478d                	li	a5,3
      bc:	02f64633          	div	a2,a2,a5
      c0:	4831                	li	a6,12
      c2:	4781                	li	a5,0
      c4:	00c7c363          	blt	a5,a2,ca <array_sub+0x10>
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
    }
}
      c8:	8082                	ret
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      ca:	03078733          	mul	a4,a5,a6
    asm volatile(
      ce:	00e506b3          	add	a3,a0,a4
      d2:	972e                	add	a4,a4,a1
      d4:	08e6f70b          	0x8e6f70b
    for(i=0;i<(length/3);i++) {
      d8:	0785                	addi	a5,a5,1
      da:	b7ed                	j	c4 <array_sub+0xa>

000000dc <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      dc:	0ab5750b          	0xab5750b


    return;


}
      e0:	8082                	ret

000000e2 <array_equ>:
void array_equ(int *a1,int *a2,int length) {
int i = 0;
    for(i=0;i<(length/3);i++) {
      e2:	478d                	li	a5,3
      e4:	02f64633          	div	a2,a2,a5
      e8:	4831                	li	a6,12
      ea:	4781                	li	a5,0
      ec:	00c7c363          	blt	a5,a2,f2 <array_equ+0x10>
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
    }
}
      f0:	8082                	ret
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	03078733          	mul	a4,a5,a6
    asm volatile(
      f6:	00e506b3          	add	a3,a0,a4
      fa:	972e                	add	a4,a4,a1
      fc:	0ae6f70b          	0xae6f70b
    for(i=0;i<(length/3);i++) {
     100:	0785                	addi	a5,a5,1
     102:	b7ed                	j	ec <array_equ+0xa>

00000104 <instr_mod>:

void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
     104:	0cb5750b          	0xcb5750b

    );
    return;


}
     108:	8082                	ret

0000010a <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    for(i=0;i<(length/3);i++) {
     10a:	478d                	li	a5,3
     10c:	02f64633          	div	a2,a2,a5
    asm volatile(
     110:	46b1                	li	a3,12
    for(i=0;i<(length/3);i++) {
     112:	4781                	li	a5,0
     114:	00c7c363          	blt	a5,a2,11a <array_mod+0x10>
        instr_mod((unsigned int*)&a1[3 * i], (unsigned int)mod);
    }

}
     118:	8082                	ret
    asm volatile(
     11a:	02d78733          	mul	a4,a5,a3
     11e:	972a                	add	a4,a4,a0
     120:	0cb7770b          	0xcb7770b
    for(i=0;i<(length/3);i++) {
     124:	0785                	addi	a5,a5,1
     126:	b7fd                	j	114 <array_mod+0xa>

00000128 <polymult>:

/////////////////////////////////////////////////



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	715d                	addi	sp,sp,-80
     12a:	c0ca                	sw	s2,64(sp)
     12c:	dc52                	sw	s4,56(sp)
     12e:	00269913          	slli	s2,a3,0x2
     132:	8a3a                	mv	s4,a4


    int line[size_b][size_a + size_b];
     134:	00d58733          	add	a4,a1,a3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     138:	da56                	sw	s5,52(sp)
     13a:	d266                	sw	s9,36(sp)
    int line[size_b][size_a + size_b];
     13c:	fff70a93          	addi	s5,a4,-1
     140:	00271c93          	slli	s9,a4,0x2
     144:	03270733          	mul	a4,a4,s2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     148:	c4a2                	sw	s0,72(sp)
     14a:	c2a6                	sw	s1,68(sp)
     14c:	de4e                	sw	s3,60(sp)
     14e:	d85a                	sw	s6,48(sp)
     150:	d65e                	sw	s7,44(sp)
     152:	d462                	sw	s8,40(sp)
     154:	d06a                	sw	s10,32(sp)
     156:	ce6e                	sw	s11,28(sp)
     158:	c686                	sw	ra,76(sp)
    int line[size_b][size_a + size_b];
     15a:	073d                	addi	a4,a4,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     15c:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
     15e:	9b41                	andi	a4,a4,-16
     160:	40e10133          	sub	sp,sp,a4
    int i,j,k;
    int *return_address1;
    int pola[size_a];
     164:	00259713          	slli	a4,a1,0x2
     168:	073d                	addi	a4,a4,15
     16a:	9b41                	andi	a4,a4,-16
    int line[size_b][size_a + size_b];
     16c:	8b0a                	mv	s6,sp
    int pola[size_a];
     16e:	40e10133          	sub	sp,sp,a4
    int polb[size_b];
     172:	00f90713          	addi	a4,s2,15
     176:	9b41                	andi	a4,a4,-16
    int pola[size_a];
     178:	8d0a                	mv	s10,sp
    int polb[size_b];
     17a:	40e10133          	sub	sp,sp,a4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     17e:	8bae                	mv	s7,a1
     180:	89b6                	mv	s3,a3
     182:	8dbe                	mv	s11,a5
    int line[size_b][size_a + size_b];
     184:	fff68c13          	addi	s8,a3,-1
    int pola[size_a];
     188:	fff58793          	addi	a5,a1,-1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     18c:	8832                	mv	a6,a2
    int polb[size_b];
     18e:	848a                	mv	s1,sp

    //make all line vectors zero
  for(j = 0; j < size_a + size_b -1; ++j) {
         for (i = 0; i < size_b; ++i){
            line[i][j] = 0;   
     190:	002cd593          	srli	a1,s9,0x2
  for(j = 0; j < size_a + size_b -1; ++j) {
     194:	4681                	li	a3,0
        	}
	product[j] = 0;
     196:	00001897          	auipc	a7,0x1
     19a:	04288893          	addi	a7,a7,66 # 11d8 <_bss_start>
  for(j = 0; j < size_a + size_b -1; ++j) {
     19e:	0756c763          	blt	a3,s5,20c <polymult+0xe4>
//        }
//        pola[i] = pola[i] % mod;
//    }


    array_equ(pola,a,size_a);
     1a2:	85aa                	mv	a1,a0
     1a4:	865e                	mv	a2,s7
     1a6:	856a                	mv	a0,s10
     1a8:	faf42e23          	sw	a5,-68(s0)
     1ac:	fb042c23          	sw	a6,-72(s0)
     1b0:	3f0d                	jal	e2 <array_equ>
    array_mod(pola,mod,size_a);
     1b2:	865e                	mv	a2,s7
     1b4:	85d2                	mv	a1,s4
     1b6:	856a                	mv	a0,s10
     1b8:	3f89                	jal	10a <array_mod>
//        while (polb[i] < 0){
//            polb[i] = polb[i] + mod;
//        }
//        polb[i] = polb[i] % mod;
//    }
    array_equ(polb,b,size_b);
     1ba:	fb842803          	lw	a6,-72(s0)
     1be:	8526                	mv	a0,s1
     1c0:	864e                	mv	a2,s3
     1c2:	85c2                	mv	a1,a6
     1c4:	3f39                	jal	e2 <array_equ>
    array_mod(polb,mod,size_b);
     1c6:	8526                	mv	a0,s1
     1c8:	864e                	mv	a2,s3
     1ca:	85d2                	mv	a1,s4
     1cc:	3f3d                	jal	10a <array_mod>


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     1ce:	4705                	li	a4,1
     1d0:	fbc42783          	lw	a5,-68(s0)
     1d4:	94ca                	add	s1,s1,s2
     1d6:	02ed8d63          	beq	s11,a4,210 <polymult+0xe8>
     1da:	1971                	addi	s2,s2,-4
     1dc:	ffcc8613          	addi	a2,s9,-4
     1e0:	995a                	add	s2,s2,s6
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     1e2:	020c4a63          	bltz	s8,216 <polymult+0xee>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e6:	873e                	mv	a4,a5
     1e8:	a85d                	j	29e <polymult+0x176>
            line[i][j] = 0;   
     1ea:	02b60733          	mul	a4,a2,a1
         for (i = 0; i < size_b; ++i){
     1ee:	0605                	addi	a2,a2,1
            line[i][j] = 0;   
     1f0:	9736                	add	a4,a4,a3
     1f2:	070a                	slli	a4,a4,0x2
     1f4:	975a                	add	a4,a4,s6
     1f6:	00072023          	sw	zero,0(a4)
         for (i = 0; i < size_b; ++i){
     1fa:	ff3648e3          	blt	a2,s3,1ea <polymult+0xc2>
	product[j] = 0;
     1fe:	00269713          	slli	a4,a3,0x2
     202:	9746                	add	a4,a4,a7
     204:	00072023          	sw	zero,0(a4)
  for(j = 0; j < size_a + size_b -1; ++j) {
     208:	0685                	addi	a3,a3,1
     20a:	bf51                	j	19e <polymult+0x76>
         for (i = 0; i < size_b; ++i){
     20c:	4601                	li	a2,0
     20e:	b7f5                	j	1fa <polymult+0xd2>
     210:	865a                	mv	a2,s6
        for (j = size_b -1; j >= 0; j = j-1){
     212:	060c5863          	bgez	s8,282 <polymult+0x15a>
     216:	84da                	mv	s1,s6
            for (k = size_a-1; k >= 0; k = k-1 ){
     218:	4901                	li	s2,0
//        array_add(product, line[i], (size_a + size_b - 1));
//    }
//
    for (i = 0; i < size_b; ++i){
        array_mod(line[i],mod,(size_a+size_b-1));
        array_add(product, line[i], (size_a + size_b - 1));
     21a:	00001b17          	auipc	s6,0x1
     21e:	fbeb0b13          	addi	s6,s6,-66 # 11d8 <_bss_start>
        array_mod(line[i],mod,(size_a+size_b-1));
     222:	8656                	mv	a2,s5
     224:	85d2                	mv	a1,s4
    for (i = 0; i < size_b; ++i){
     226:	09394263          	blt	s2,s3,2aa <polymult+0x182>
//    //mod calculations
//    for(j = 0; j < size_a + size_b -1; ++j){
//        product[j] = product[j] % mod;
//    }

    array_mod(product,mod,(size_a+size_b-1));
     22a:	00001517          	auipc	a0,0x1
     22e:	fae50513          	addi	a0,a0,-82 # 11d8 <_bss_start>
     232:	3de1                	jal	10a <array_mod>

    return_address1 = &product[0];

    return return_address1;
}
     234:	fb040113          	addi	sp,s0,-80
     238:	40b6                	lw	ra,76(sp)
     23a:	4426                	lw	s0,72(sp)
     23c:	4496                	lw	s1,68(sp)
     23e:	4906                	lw	s2,64(sp)
     240:	59f2                	lw	s3,60(sp)
     242:	5a62                	lw	s4,56(sp)
     244:	5ad2                	lw	s5,52(sp)
     246:	5b42                	lw	s6,48(sp)
     248:	5bb2                	lw	s7,44(sp)
     24a:	5c22                	lw	s8,40(sp)
     24c:	5c92                	lw	s9,36(sp)
     24e:	5d02                	lw	s10,32(sp)
     250:	4df2                	lw	s11,28(sp)
     252:	00001517          	auipc	a0,0x1
     256:	f8650513          	addi	a0,a0,-122 # 11d8 <_bss_start>
     25a:	6161                	addi	sp,sp,80
     25c:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     25e:	00271693          	slli	a3,a4,0x2
     262:	00d605b3          	add	a1,a2,a3
     266:	96ea                	add	a3,a3,s10
     268:	4294                	lw	a3,0(a3)
     26a:	ffc4a503          	lw	a0,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     26e:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     270:	02a686b3          	mul	a3,a3,a0
     274:	c194                	sw	a3,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     276:	fe0754e3          	bgez	a4,25e <polymult+0x136>
        for (j = size_b -1; j >= 0; j = j-1){
     27a:	1c7d                	addi	s8,s8,-1
     27c:	14f1                	addi	s1,s1,-4
     27e:	9666                	add	a2,a2,s9
     280:	bf49                	j	212 <polymult+0xea>
            for (k = size_a-1; k >= 0; k = k-1 ){
     282:	873e                	mv	a4,a5
     284:	bfcd                	j	276 <polymult+0x14e>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     286:	00271693          	slli	a3,a4,0x2
     28a:	00d905b3          	add	a1,s2,a3
     28e:	96ea                	add	a3,a3,s10
     290:	4294                	lw	a3,0(a3)
     292:	ffc4a503          	lw	a0,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     296:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     298:	02a686b3          	mul	a3,a3,a0
     29c:	c194                	sw	a3,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     29e:	fe0754e3          	bgez	a4,286 <polymult+0x15e>
        for (j = size_b -1; j >= 0; j = j-1){
     2a2:	1c7d                	addi	s8,s8,-1
     2a4:	14f1                	addi	s1,s1,-4
     2a6:	9932                	add	s2,s2,a2
     2a8:	bf2d                	j	1e2 <polymult+0xba>
        array_mod(line[i],mod,(size_a+size_b-1));
     2aa:	8526                	mv	a0,s1
     2ac:	3db9                	jal	10a <array_mod>
        array_add(product, line[i], (size_a + size_b - 1));
     2ae:	85a6                	mv	a1,s1
     2b0:	8656                	mv	a2,s5
     2b2:	855a                	mv	a0,s6
     2b4:	3bf9                	jal	92 <array_add>
    for (i = 0; i < size_b; ++i){
     2b6:	0905                	addi	s2,s2,1
     2b8:	94e6                	add	s1,s1,s9
     2ba:	b7a5                	j	222 <polymult+0xfa>

000002bc <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2bc:	7139                	addi	sp,sp,-64

    int line[size_b][size_a + size_b];
     2be:	00d587b3          	add	a5,a1,a3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c2:	d84a                	sw	s2,48(sp)
     2c4:	00269913          	slli	s2,a3,0x2
     2c8:	d64e                	sw	s3,44(sp)
     2ca:	ce5e                	sw	s7,28(sp)
    int line[size_b][size_a + size_b];
     2cc:	fff78993          	addi	s3,a5,-1
     2d0:	00279b93          	slli	s7,a5,0x2
     2d4:	032787b3          	mul	a5,a5,s2
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2d8:	dc22                	sw	s0,56(sp)
     2da:	da26                	sw	s1,52(sp)
     2dc:	d452                	sw	s4,40(sp)
     2de:	d256                	sw	s5,36(sp)
     2e0:	d05a                	sw	s6,32(sp)
     2e2:	cc62                	sw	s8,24(sp)
     2e4:	ca66                	sw	s9,20(sp)
     2e6:	c86a                	sw	s10,16(sp)
     2e8:	c66e                	sw	s11,12(sp)
    int line[size_b][size_a + size_b];
     2ea:	07bd                	addi	a5,a5,15
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ec:	de06                	sw	ra,60(sp)
     2ee:	0080                	addi	s0,sp,64
    int line[size_b][size_a + size_b];
     2f0:	9bc1                	andi	a5,a5,-16
     2f2:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     2f6:	00259793          	slli	a5,a1,0x2
     2fa:	07bd                	addi	a5,a5,15
     2fc:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     2fe:	8a8a                	mv	s5,sp
    int pola[size_a];
     300:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     304:	00f90793          	addi	a5,s2,15
     308:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     30a:	8d8a                	mv	s11,sp
    int polb[size_b];
     30c:	40f10133          	sub	sp,sp,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     310:	8cb2                	mv	s9,a2
     312:	8a36                	mv	s4,a3
    int line[size_b][size_a + size_b];
     314:	fff68b13          	addi	s6,a3,-1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     318:	8c3a                	mv	s8,a4
    int pola[size_a];
     31a:	fff58d13          	addi	s10,a1,-1
    int polb[size_b];
     31e:	848a                	mv	s1,sp

    //make all line vectors zero
    for(j = 0; j < size_a + size_b -1; ++j){
        for (i = 0; i < size_b; ++i){
            line[i][j] = 0;
     320:	002bd613          	srli	a2,s7,0x2
    for(j = 0; j < size_a + size_b -1; ++j){
     324:	4681                	li	a3,0
           
        }
 	product2[j] = 0;
     326:	00001817          	auipc	a6,0x1
     32a:	10a80813          	addi	a6,a6,266 # 1430 <product2>
    for(j = 0; j < size_a + size_b -1; ++j){
     32e:	0536c863          	blt	a3,s3,37e <polymult2+0xc2>
//    for(i = 0; i < size_a; ++i){
//        pola[i] = a[i];
//    }

    
    array_equ(pola,a,size_a);
     332:	862e                	mv	a2,a1
     334:	85aa                	mv	a1,a0
     336:	856e                	mv	a0,s11
     338:	336d                	jal	e2 <array_equ>

//    for(i = 0; i < size_b; ++i){
//        polb[i] = b[i];
//    }
   
    array_equ(polb,b,size_b);
     33a:	8526                	mv	a0,s1
     33c:	8652                	mv	a2,s4
     33e:	85e6                	mv	a1,s9
     340:	334d                	jal	e2 <array_equ>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     342:	4785                	li	a5,1
     344:	01248533          	add	a0,s1,s2
     348:	02fc0d63          	beq	s8,a5,382 <polymult2+0xc6>
     34c:	1971                	addi	s2,s2,-4
     34e:	ffcb8693          	addi	a3,s7,-4
     352:	9956                	add	s2,s2,s5
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     354:	020b4a63          	bltz	s6,388 <polymult2+0xcc>
            for (k = size_a-1; k >= 0; k = k-1 ){
     358:	87ea                	mv	a5,s10
     35a:	a05d                	j	400 <polymult2+0x144>
            line[i][j] = 0;
     35c:	02c707b3          	mul	a5,a4,a2
        for (i = 0; i < size_b; ++i){
     360:	0705                	addi	a4,a4,1
            line[i][j] = 0;
     362:	97b6                	add	a5,a5,a3
     364:	078a                	slli	a5,a5,0x2
     366:	97d6                	add	a5,a5,s5
     368:	0007a023          	sw	zero,0(a5)
        for (i = 0; i < size_b; ++i){
     36c:	ff4748e3          	blt	a4,s4,35c <polymult2+0xa0>
 	product2[j] = 0;
     370:	00269793          	slli	a5,a3,0x2
     374:	97c2                	add	a5,a5,a6
     376:	0007a023          	sw	zero,0(a5)
    for(j = 0; j < size_a + size_b -1; ++j){
     37a:	0685                	addi	a3,a3,1
     37c:	bf4d                	j	32e <polymult2+0x72>
        for (i = 0; i < size_b; ++i){
     37e:	4701                	li	a4,0
     380:	b7f5                	j	36c <polymult2+0xb0>
     382:	86d6                	mv	a3,s5
        for (j = size_b -1; j >= 0; j = j-1){
     384:	060b5063          	bgez	s6,3e4 <polymult2+0x128>
            for (k = size_a-1; k >= 0; k = k-1 ){
     388:	4481                	li	s1,0
    // construct product
    for(i=0;i<size_b;++i){
        //for(j=0;j<size_a+size_b-1;++j){
         //   product2[j] += line[i][j];
        
        array_add(product2,line[i],size_a+size_b-1);
     38a:	00001917          	auipc	s2,0x1
     38e:	0a690913          	addi	s2,s2,166 # 1430 <product2>
    for(i=0;i<size_b;++i){
     392:	0744cd63          	blt	s1,s4,40c <polymult2+0x150>
    }

    return_address2 = &product2[0];

    return return_address2;
}
     396:	fc040113          	addi	sp,s0,-64
     39a:	50f2                	lw	ra,60(sp)
     39c:	5462                	lw	s0,56(sp)
     39e:	54d2                	lw	s1,52(sp)
     3a0:	5942                	lw	s2,48(sp)
     3a2:	59b2                	lw	s3,44(sp)
     3a4:	5a22                	lw	s4,40(sp)
     3a6:	5a92                	lw	s5,36(sp)
     3a8:	5b02                	lw	s6,32(sp)
     3aa:	4bf2                	lw	s7,28(sp)
     3ac:	4c62                	lw	s8,24(sp)
     3ae:	4cd2                	lw	s9,20(sp)
     3b0:	4d42                	lw	s10,16(sp)
     3b2:	4db2                	lw	s11,12(sp)
     3b4:	00001517          	auipc	a0,0x1
     3b8:	07c50513          	addi	a0,a0,124 # 1430 <product2>
     3bc:	6121                	addi	sp,sp,64
     3be:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     3c0:	00279713          	slli	a4,a5,0x2
     3c4:	00e68633          	add	a2,a3,a4
     3c8:	976e                	add	a4,a4,s11
     3ca:	4318                	lw	a4,0(a4)
     3cc:	ffc52583          	lw	a1,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d0:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     3d2:	02b70733          	mul	a4,a4,a1
     3d6:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	fe07d4e3          	bgez	a5,3c0 <polymult2+0x104>
        for (j = size_b -1; j >= 0; j = j-1){
     3dc:	1b7d                	addi	s6,s6,-1
     3de:	1571                	addi	a0,a0,-4
     3e0:	96de                	add	a3,a3,s7
     3e2:	b74d                	j	384 <polymult2+0xc8>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e4:	87ea                	mv	a5,s10
     3e6:	bfcd                	j	3d8 <polymult2+0x11c>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3e8:	00279713          	slli	a4,a5,0x2
     3ec:	00e90633          	add	a2,s2,a4
     3f0:	976e                	add	a4,a4,s11
     3f2:	4318                	lw	a4,0(a4)
     3f4:	ffc52583          	lw	a1,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3f8:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3fa:	02b70733          	mul	a4,a4,a1
     3fe:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     400:	fe07d4e3          	bgez	a5,3e8 <polymult2+0x12c>
        for (j = size_b -1; j >= 0; j = j-1){
     404:	1b7d                	addi	s6,s6,-1
     406:	1571                	addi	a0,a0,-4
     408:	9936                	add	s2,s2,a3
     40a:	b7a9                	j	354 <polymult2+0x98>
        array_add(product2,line[i],size_a+size_b-1);
     40c:	85d6                	mv	a1,s5
     40e:	864e                	mv	a2,s3
     410:	854a                	mv	a0,s2
     412:	3141                	jal	92 <array_add>
    for(i=0;i<size_b;++i){
     414:	0485                	addi	s1,s1,1
     416:	9ade                	add	s5,s5,s7
     418:	bfad                	j	392 <polymult2+0xd6>

0000041a <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     41a:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     41e:	7139                	addi	sp,sp,-64
    int v[size_N];
     420:	07bd                	addi	a5,a5,15
     422:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     424:	dc22                	sw	s0,56(sp)
     426:	da26                	sw	s1,52(sp)
     428:	d84a                	sw	s2,48(sp)
     42a:	d64e                	sw	s3,44(sp)
     42c:	d452                	sw	s4,40(sp)
     42e:	d256                	sw	s5,36(sp)
     430:	d05a                	sw	s6,32(sp)
     432:	ce5e                	sw	s7,28(sp)
     434:	cc62                	sw	s8,24(sp)
     436:	ca66                	sw	s9,20(sp)
     438:	c86a                	sw	s10,16(sp)
     43a:	c66e                	sw	s11,12(sp)
     43c:	de06                	sw	ra,60(sp)
     43e:	0080                	addi	s0,sp,64
    int v[size_N];
     440:	40f10133          	sub	sp,sp,a5
     444:	8a8a                	mv	s5,sp
    int q[size_N];
     446:	40f10133          	sub	sp,sp,a5
     44a:	8a0a                	mv	s4,sp
    int *product;
    int num_temp[size_N];
     44c:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     450:	00269793          	slli	a5,a3,0x2
     454:	07bd                	addi	a5,a5,15
     456:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
     458:	898a                	mv	s3,sp
    int denum_temp[size_D];
     45a:	40f10133          	sub	sp,sp,a5
//        while (num_temp[i] < 0) {
//            num_temp[i] = num_temp[i] + mod;
//        }
//        num_temp[i] = num_temp[i] % mod;
//    }
 if(size_N == 106) {
     45e:	06a00793          	li	a5,106
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     462:	8daa                	mv	s11,a0
     464:	892e                	mv	s2,a1
     466:	8c32                	mv	s8,a2
     468:	8b36                	mv	s6,a3
     46a:	84ba                	mv	s1,a4
    int v[size_N];
     46c:	fff58d13          	addi	s10,a1,-1
    int denum_temp[size_D];
     470:	fff68b93          	addi	s7,a3,-1
     474:	8c8a                	mv	s9,sp
 if(size_N == 106) {
     476:	02f59963          	bne	a1,a5,4a8 <polydiv+0x8e>
     array_equ(num_temp, num, size_N - 1);   // 105 elemani ücer ücer yap...
     47a:	85aa                	mv	a1,a0
     47c:	06900613          	li	a2,105
     480:	854e                	mv	a0,s3
     482:	3185                	jal	e2 <array_equ>
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     484:	1a4da783          	lw	a5,420(s11)
     array_equ(num_temp, num, size_N );

 }

    if(size_N == 106) {
        array_mod(num_temp, mod, size_N - 1);
     488:	06900613          	li	a2,105
     48c:	85a6                	mv	a1,s1
     48e:	854e                	mv	a0,s3
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     490:	1af9a223          	sw	a5,420(s3)
        array_mod(num_temp, mod, size_N - 1);
     494:	399d                	jal	10a <array_mod>
        while(num_temp[size_N - 1] < 0){
     496:	1a49a783          	lw	a5,420(s3)
     49a:	0407c763          	bltz	a5,4e8 <polydiv+0xce>
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
        }
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     49e:	0297e7b3          	rem	a5,a5,s1
     4a2:	1af9a223          	sw	a5,420(s3)
     4a6:	a809                	j	4b8 <polydiv+0x9e>
     array_equ(num_temp, num, size_N );
     4a8:	862e                	mv	a2,a1
     4aa:	85aa                	mv	a1,a0
     4ac:	854e                	mv	a0,s3
     4ae:	3915                	jal	e2 <array_equ>
    }
    else{
        array_mod(num_temp, mod, size_N);
     4b0:	864a                	mv	a2,s2
     4b2:	85a6                	mv	a1,s1
     4b4:	854e                	mv	a0,s3
     4b6:	3991                	jal	10a <array_mod>
//            denum_temp[i] = denum_temp[i] + mod;
//        }
//        denum_temp[i] = denum_temp[i] % mod;
//    }

    array_equ(denum_temp,denum,size_D);
     4b8:	865a                	mv	a2,s6
     4ba:	85e2                	mv	a1,s8
     4bc:	8566                	mv	a0,s9
     4be:	3115                	jal	e2 <array_equ>
    array_mod(denum_temp,mod,size_D);
     4c0:	865a                	mv	a2,s6
     4c2:	85a6                	mv	a1,s1
     4c4:	8566                	mv	a0,s9
     4c6:	3191                	jal	10a <array_mod>

    for (i = 0; i < size_N; ++i){
     4c8:	4781                	li	a5,0
     4ca:	0327c363          	blt	a5,s2,4f0 <polydiv+0xd6>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     4ce:	002b9793          	slli	a5,s7,0x2
     4d2:	97e6                	add	a5,a5,s9
     4d4:	4398                	lw	a4,0(a5)
     4d6:	020bd863          	bgez	s7,506 <polydiv+0xec>
    for (i = 0; i < size_N; ++i){
     4da:	4781                	li	a5,0
     4dc:	4c01                	li	s8,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     4de:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     4e0:	029c4663          	blt	s8,s1,50c <polydiv+0xf2>
     4e4:	87ea                	mv	a5,s10
     4e6:	a825                	j	51e <polydiv+0x104>
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4e8:	97a6                	add	a5,a5,s1
     4ea:	1af9a223          	sw	a5,420(s3)
     4ee:	b765                	j	496 <polydiv+0x7c>
        q[i] = 0;
     4f0:	00279713          	slli	a4,a5,0x2
     4f4:	00ea06b3          	add	a3,s4,a4
        v[i] = 0;
     4f8:	9756                	add	a4,a4,s5
        q[i] = 0;
     4fa:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     4fe:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     502:	0785                	addi	a5,a5,1
     504:	b7d9                	j	4ca <polydiv+0xb0>
        if( denum_temp[i] != 0 )
     506:	fb71                	bnez	a4,4da <polydiv+0xc0>
    for (i = size_D-1; i >= 0; i = i-1){
     508:	1bfd                	addi	s7,s7,-1
     50a:	b7d1                	j	4ce <polydiv+0xb4>
        if ( (b_N*u)%mod == 1 )
     50c:	0297e633          	rem	a2,a5,s1
     510:	97ba                	add	a5,a5,a4
     512:	fcd609e3          	beq	a2,a3,4e4 <polydiv+0xca>
    for (u = 0; u < mod; ++u){
     516:	0c05                	addi	s8,s8,1
     518:	b7e1                	j	4e0 <polydiv+0xc6>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     51a:	eb01                	bnez	a4,52a <polydiv+0x110>
    for (i = size_N-1; i >= 0; i = i-1){
     51c:	17fd                	addi	a5,a5,-1
     51e:	00279713          	slli	a4,a5,0x2
     522:	974e                	add	a4,a4,s3
     524:	4318                	lw	a4,0(a4)
     526:	fe07dae3          	bgez	a5,51a <polydiv+0x100>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     52a:	0777d663          	bge	a5,s7,596 <polydiv+0x17c>
    } //End While-1

//    for(i = 0; i < size_N; ++i){
//        result[i] = q[i];
//    }
 if(size_N == 106) {
     52e:	06a00793          	li	a5,106
     532:	1af91363          	bne	s2,a5,6d8 <polydiv+0x2be>
     array_equ(result, q, size_N - 1);   // 105 elemani ücer ücer yap...
     536:	06900613          	li	a2,105
     53a:	85d2                	mv	a1,s4
     53c:	00001517          	auipc	a0,0x1
     540:	14c50513          	addi	a0,a0,332 # 1688 <result>
     544:	3e79                	jal	e2 <array_equ>
     result[size_N - 1] = q[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     546:	1a4a2783          	lw	a5,420(s4)
     54a:	00001717          	auipc	a4,0x1
     54e:	2ef72123          	sw	a5,738(a4) # 182c <result+0x1a4>
     552:	06a00713          	li	a4,106
     556:	55f1                	li	a1,-4
     array_equ(result, q, size_N );

 }
   

    for(i = size_N; i < (2*size_N); ++i){
     558:	00191693          	slli	a3,s2,0x1
     55c:	02b90933          	mul	s2,s2,a1
        result[i] = num_temp[i-size_N];
     560:	00001617          	auipc	a2,0x1
     564:	12860613          	addi	a2,a2,296 # 1688 <result>
    for(i = size_N; i < (2*size_N); ++i){
     568:	18d74163          	blt	a4,a3,6ea <polydiv+0x2d0>
    }

    return_address3 = &result[0];

    return return_address3;
}
     56c:	fc040113          	addi	sp,s0,-64
     570:	50f2                	lw	ra,60(sp)
     572:	5462                	lw	s0,56(sp)
     574:	54d2                	lw	s1,52(sp)
     576:	5942                	lw	s2,48(sp)
     578:	59b2                	lw	s3,44(sp)
     57a:	5a22                	lw	s4,40(sp)
     57c:	5a92                	lw	s5,36(sp)
     57e:	5b02                	lw	s6,32(sp)
     580:	4bf2                	lw	s7,28(sp)
     582:	4c62                	lw	s8,24(sp)
     584:	4cd2                	lw	s9,20(sp)
     586:	4d42                	lw	s10,16(sp)
     588:	4db2                	lw	s11,12(sp)
     58a:	00001517          	auipc	a0,0x1
     58e:	0fe50513          	addi	a0,a0,254 # 1688 <result>
     592:	6121                	addi	sp,sp,64
     594:	8082                	ret
        v[(d-d2)] = u*r_d;
     596:	03870733          	mul	a4,a4,s8
     59a:	417787b3          	sub	a5,a5,s7
     59e:	078a                	slli	a5,a5,0x2
     5a0:	97d6                	add	a5,a5,s5
     5a2:	c398                	sw	a4,0(a5)
        if(size_N == 106) {
     5a4:	06a00793          	li	a5,106
     5a8:	0af91f63          	bne	s2,a5,666 <polydiv+0x24c>
            array_mod(v, mod, size_N - 1);
     5ac:	06900613          	li	a2,105
     5b0:	85a6                	mv	a1,s1
     5b2:	8556                	mv	a0,s5
     5b4:	3e99                	jal	10a <array_mod>
            while(v[size_N - 1] < 0){
     5b6:	1a4aa783          	lw	a5,420(s5)
     5ba:	0a07c263          	bltz	a5,65e <polydiv+0x244>
            v[size_N - 1] = v[size_N - 1] % mod;
     5be:	0297e7b3          	rem	a5,a5,s1
     5c2:	1afaa223          	sw	a5,420(s5)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5c6:	4781                	li	a5,0
     5c8:	8726                	mv	a4,s1
     5ca:	86da                	mv	a3,s6
     5cc:	8656                	mv	a2,s5
     5ce:	85da                	mv	a1,s6
     5d0:	8566                	mv	a0,s9
     5d2:	3e99                	jal	128 <polymult>
        if(size_N == 106) {
     5d4:	06a00793          	li	a5,106
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5d8:	8daa                	mv	s11,a0
        if(size_N == 106) {
     5da:	08f91f63          	bne	s2,a5,678 <polydiv+0x25e>
            array_mod(product, mod, size_N - 1);
     5de:	06900613          	li	a2,105
     5e2:	85a6                	mv	a1,s1
     5e4:	361d                	jal	10a <array_mod>
            while(product[size_N - 1] < 0){
     5e6:	1a4da703          	lw	a4,420(s11)
     5ea:	08074363          	bltz	a4,670 <polydiv+0x256>
            product[size_N - 1] = product[size_N - 1] % mod;
     5ee:	02976733          	rem	a4,a4,s1
            array_sub(num_temp, product, size_N - 1);   // 105 elemani ücer ücer yap...
     5f2:	06900613          	li	a2,105
     5f6:	85ee                	mv	a1,s11
     5f8:	854e                	mv	a0,s3
            product[size_N - 1] = product[size_N - 1] % mod;
     5fa:	1aeda223          	sw	a4,420(s11)
            array_sub(num_temp, product, size_N - 1);   // 105 elemani ücer ücer yap...
     5fe:	3c75                	jal	ba <array_sub>
            num_temp[size_N - 1] = num_temp[size_N - 1] - product[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     600:	1a49a703          	lw	a4,420(s3)
     604:	1a4da783          	lw	a5,420(s11)
            array_mod(num_temp, mod, size_N - 1);
     608:	06900613          	li	a2,105
     60c:	85a6                	mv	a1,s1
            num_temp[size_N - 1] = num_temp[size_N - 1] - product[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     60e:	40f707b3          	sub	a5,a4,a5
            array_mod(num_temp, mod, size_N - 1);
     612:	854e                	mv	a0,s3
            num_temp[size_N - 1] = num_temp[size_N - 1] - product[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     614:	1af9a223          	sw	a5,420(s3)
            array_mod(num_temp, mod, size_N - 1);
     618:	3ccd                	jal	10a <array_mod>
            while(num_temp[size_N - 1] < 0){
     61a:	1a49a783          	lw	a5,420(s3)
     61e:	0807c963          	bltz	a5,6b0 <polydiv+0x296>
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     622:	0297e7b3          	rem	a5,a5,s1
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     626:	06900613          	li	a2,105
     62a:	85d6                	mv	a1,s5
     62c:	8552                	mv	a0,s4
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     62e:	1af9a223          	sw	a5,420(s3)
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     632:	3485                	jal	92 <array_add>
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     634:	1a4a2783          	lw	a5,420(s4)
     638:	1a4aa703          	lw	a4,420(s5)
            array_mod(q, mod, size_N - 1);
     63c:	06900613          	li	a2,105
     640:	85a6                	mv	a1,s1
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     642:	97ba                	add	a5,a5,a4
            array_mod(q, mod, size_N - 1);
     644:	8552                	mv	a0,s4
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     646:	1afa2223          	sw	a5,420(s4)
            array_mod(q, mod, size_N - 1);
     64a:	34c1                	jal	10a <array_mod>
            while(q[size_N - 1] < 0){
     64c:	1a4a2783          	lw	a5,420(s4)
     650:	0607c463          	bltz	a5,6b8 <polydiv+0x29e>
            q[size_N - 1] = q[size_N - 1] % mod;
     654:	0297e7b3          	rem	a5,a5,s1
     658:	1afa2223          	sw	a5,420(s4)
     65c:	a089                	j	69e <polydiv+0x284>
                v[size_N - 1] = v[size_N - 1]+mod;
     65e:	97a6                	add	a5,a5,s1
     660:	1afaa223          	sw	a5,420(s5)
     664:	bf89                	j	5b6 <polydiv+0x19c>
            array_mod(v, mod, size_N);
     666:	864a                	mv	a2,s2
     668:	85a6                	mv	a1,s1
     66a:	8556                	mv	a0,s5
     66c:	3c79                	jal	10a <array_mod>
     66e:	bfa1                	j	5c6 <polydiv+0x1ac>
                product[size_N - 1] = product[size_N - 1]+mod;
     670:	9726                	add	a4,a4,s1
     672:	1aeda223          	sw	a4,420(s11)
     676:	bf85                	j	5e6 <polydiv+0x1cc>
            array_mod(product, mod, size_N);
     678:	864a                	mv	a2,s2
     67a:	85a6                	mv	a1,s1
     67c:	3479                	jal	10a <array_mod>
            array_sub(num_temp, product, size_N );
     67e:	864a                	mv	a2,s2
     680:	85ee                	mv	a1,s11
     682:	854e                	mv	a0,s3
     684:	3c1d                	jal	ba <array_sub>
            array_mod(num_temp, mod, size_N);
     686:	864a                	mv	a2,s2
     688:	85a6                	mv	a1,s1
     68a:	854e                	mv	a0,s3
     68c:	3cbd                	jal	10a <array_mod>
            array_add(q, v, size_N );
     68e:	864a                	mv	a2,s2
     690:	85d6                	mv	a1,s5
     692:	8552                	mv	a0,s4
     694:	3afd                	jal	92 <array_add>
            array_mod(q, mod, size_N);
     696:	864a                	mv	a2,s2
     698:	85a6                	mv	a1,s1
     69a:	8552                	mv	a0,s4
     69c:	34bd                	jal	10a <array_mod>
    int v[size_N];
     69e:	87ea                	mv	a5,s10
        for (i = size_N-1; i >= 0; i = i-1){
     6a0:	00279713          	slli	a4,a5,0x2
     6a4:	974e                	add	a4,a4,s3
     6a6:	4318                	lw	a4,0(a4)
     6a8:	0007dc63          	bgez	a5,6c0 <polydiv+0x2a6>
     6ac:	4681                	li	a3,0
     6ae:	a015                	j	6d2 <polydiv+0x2b8>
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     6b0:	97a6                	add	a5,a5,s1
     6b2:	1af9a223          	sw	a5,420(s3)
     6b6:	b795                	j	61a <polydiv+0x200>
                q[size_N - 1] = q[size_N - 1]+mod;
     6b8:	97a6                	add	a5,a5,s1
     6ba:	1afa2223          	sw	a5,420(s4)
     6be:	b779                	j	64c <polydiv+0x232>
            if( num_temp[i] != 0 )
     6c0:	f775                	bnez	a4,6ac <polydiv+0x292>
        for (i = size_N-1; i >= 0; i = i-1){
     6c2:	17fd                	addi	a5,a5,-1
     6c4:	bff1                	j	6a0 <polydiv+0x286>
            v[i] = 0;
     6c6:	00269613          	slli	a2,a3,0x2
     6ca:	9656                	add	a2,a2,s5
     6cc:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     6d0:	0685                	addi	a3,a3,1
     6d2:	ff26cae3          	blt	a3,s2,6c6 <polydiv+0x2ac>
     6d6:	bd91                	j	52a <polydiv+0x110>
     array_equ(result, q, size_N );
     6d8:	864a                	mv	a2,s2
     6da:	85d2                	mv	a1,s4
     6dc:	00001517          	auipc	a0,0x1
     6e0:	fac50513          	addi	a0,a0,-84 # 1688 <result>
     6e4:	3afd                	jal	e2 <array_equ>
     6e6:	874a                	mv	a4,s2
     6e8:	b5bd                	j	556 <polydiv+0x13c>
        result[i] = num_temp[i-size_N];
     6ea:	00271793          	slli	a5,a4,0x2
     6ee:	00f605b3          	add	a1,a2,a5
     6f2:	97ca                	add	a5,a5,s2
     6f4:	97ce                	add	a5,a5,s3
     6f6:	439c                	lw	a5,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     6f8:	0705                	addi	a4,a4,1
        result[i] = num_temp[i-size_N];
     6fa:	c19c                	sw	a5,0(a1)
    for(i = size_N; i < (2*size_N); ++i){
     6fc:	b5b5                	j	568 <polydiv+0x14e>

000006fe <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     6fe:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     702:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     704:	07bd                	addi	a5,a5,15
     706:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     708:	c4a2                	sw	s0,72(sp)
     70a:	c2a6                	sw	s1,68(sp)
     70c:	c0ca                	sw	s2,64(sp)
     70e:	de4e                	sw	s3,60(sp)
     710:	dc52                	sw	s4,56(sp)
     712:	da56                	sw	s5,52(sp)
     714:	d85a                	sw	s6,48(sp)
     716:	d65e                	sw	s7,44(sp)
     718:	d462                	sw	s8,40(sp)
     71a:	d266                	sw	s9,36(sp)
     71c:	d06a                	sw	s10,32(sp)
     71e:	ce6e                	sw	s11,28(sp)
     720:	c686                	sw	ra,76(sp)
     722:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     724:	40f10133          	sub	sp,sp,a5
     728:	8a0a                	mv	s4,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     72a:	40f10133          	sub	sp,sp,a5
     72e:	8a8a                	mv	s5,sp
    int ri[size];
     730:	40f10133          	sub	sp,sp,a5
     734:	8b8a                	mv	s7,sp

    int ti_1[size]; // ti_1[0] = 1
     736:	40f10133          	sub	sp,sp,a5
     73a:	8b0a                	mv	s6,sp
    int ti[size];
     73c:	40f10133          	sub	sp,sp,a5
     740:	8c0a                	mv	s8,sp
    int qi_1[size];
     742:	40f10133          	sub	sp,sp,a5
     746:	8c8a                	mv	s9,sp
    int temp[size];
     748:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     74c:	8936                	mv	s2,a3
     74e:	8dae                	mv	s11,a1
     750:	84b2                	mv	s1,a2
    int ri_2[size]; // MX-ring poly, a
     752:	fff60d13          	addi	s10,a2,-1
    int temp[size];
     756:	898a                	mv	s3,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     758:	4781                	li	a5,0
//        ri_2[i] = polyR[i];
//        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     75a:	00001697          	auipc	a3,0x1
     75e:	18668693          	addi	a3,a3,390 # 18e0 <ti_2>
    for (i = 0; i < size; ++i) {
     762:	1297c363          	blt	a5,s1,888 <ext_euclid+0x18a>
        ti_1[i] = 0;
    }
    
    array_equ(ri_2,polyR,size);
     766:	85aa                	mv	a1,a0
     768:	8626                	mv	a2,s1
     76a:	8552                	mv	a0,s4
     76c:	3a9d                	jal	e2 <array_equ>
    
    array_equ(ri_1,polyf,size);
     76e:	85ee                	mv	a1,s11
     770:	8626                	mv	a2,s1
     772:	8556                	mv	a0,s5
     774:	32bd                	jal	e2 <array_equ>
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     776:	4785                	li	a5,1
     778:	00fb2023          	sw	a5,0(s6)
    array_mod(ri_1,mod,N+1);

        
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
       
        for (i = N + 1; i < (2 * N + 2); ++i) {
     77c:	00149793          	slli	a5,s1,0x1
     780:	faf42e23          	sw	a5,-68(s0)
        
//        for (i = 0; i < N + 1; ++i) {
//            ti[i] = ti_2[i] - temp[i];
//        }

    array_equ(ti,ti_2,size);
     784:	00001d97          	auipc	s11,0x1
     788:	15cd8d93          	addi	s11,s11,348 # 18e0 <ti_2>
    array_mod(ri_2,mod,N+1);
     78c:	8626                	mv	a2,s1
     78e:	85ca                	mv	a1,s2
     790:	8552                	mv	a0,s4
     792:	3aa5                	jal	10a <array_mod>
    array_mod(ri_1,mod,N+1);
     794:	8626                	mv	a2,s1
     796:	85ca                	mv	a1,s2
     798:	8556                	mv	a0,s5
     79a:	3a85                	jal	10a <array_mod>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     79c:	874a                	mv	a4,s2
     79e:	86a6                	mv	a3,s1
     7a0:	8656                	mv	a2,s5
     7a2:	85a6                	mv	a1,s1
     7a4:	8552                	mv	a0,s4
     7a6:	3995                	jal	41a <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7a8:	875e                	mv	a4,s7
     7aa:	87a6                	mv	a5,s1
     7ac:	fbc42683          	lw	a3,-68(s0)
     7b0:	0ed7c763          	blt	a5,a3,89e <ext_euclid+0x1a0>
    array_equ(temp,ri_2,size);
     7b4:	8626                	mv	a2,s1
     7b6:	85d2                	mv	a1,s4
     7b8:	854e                	mv	a0,s3
     7ba:	3225                	jal	e2 <array_equ>
    array_sub(temp,ri,size);
     7bc:	8626                	mv	a2,s1
     7be:	85de                	mv	a1,s7
     7c0:	854e                	mv	a0,s3
     7c2:	38e5                	jal	ba <array_sub>
    array_mod(temp,mod,size);
     7c4:	8626                	mv	a2,s1
     7c6:	85ca                	mv	a1,s2
     7c8:	854e                	mv	a0,s3
     7ca:	3281                	jal	10a <array_mod>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7cc:	874a                	mv	a4,s2
     7ce:	86a6                	mv	a3,s1
     7d0:	8656                	mv	a2,s5
     7d2:	85a6                	mv	a1,s1
     7d4:	854e                	mv	a0,s3
     7d6:	3191                	jal	41a <polydiv>
     7d8:	85aa                	mv	a1,a0
    array_equ(qi_1,res1,size);
     7da:	8626                	mv	a2,s1
     7dc:	8566                	mv	a0,s9
     7de:	3211                	jal	e2 <array_equ>
    array_mod(qi_1,mod,size);
     7e0:	8626                	mv	a2,s1
     7e2:	85ca                	mv	a1,s2
     7e4:	8566                	mv	a0,s9
     7e6:	3215                	jal	10a <array_mod>
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7e8:	4781                	li	a5,0
     7ea:	874a                	mv	a4,s2
     7ec:	86a6                	mv	a3,s1
     7ee:	865a                	mv	a2,s6
     7f0:	85a6                	mv	a1,s1
     7f2:	8566                	mv	a0,s9
     7f4:	3a15                	jal	128 <polymult>
     7f6:	85aa                	mv	a1,a0
    array_equ(temp,res2,size);
     7f8:	8626                	mv	a2,s1
     7fa:	854e                	mv	a0,s3
     7fc:	30dd                	jal	e2 <array_equ>
    array_mod(temp,mod,size);
     7fe:	8626                	mv	a2,s1
     800:	85ca                	mv	a1,s2
     802:	854e                	mv	a0,s3
     804:	3219                	jal	10a <array_mod>
    array_equ(ti,ti_2,size);
     806:	8626                	mv	a2,s1
     808:	85ee                	mv	a1,s11
     80a:	8562                	mv	a0,s8
     80c:	38d9                	jal	e2 <array_equ>
       
    array_sub(ti,temp,size);
     80e:	8626                	mv	a2,s1
     810:	85ce                	mv	a1,s3
     812:	8562                	mv	a0,s8
     814:	305d                	jal	ba <array_sub>
//            while (ti[i] < 0) {
//                ti[i] = ti[i] + mod;
//            }
//            ti[i] = ti[i] % mod;
//        }
    array_mod(ti,mod,size);
     816:	8626                	mv	a2,s1
     818:	85ca                	mv	a1,s2
     81a:	8562                	mv	a0,s8
     81c:	30fd                	jal	10a <array_mod>
      
/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

array_equ(ri_2,ri_1,size);
     81e:	8626                	mv	a2,s1
     820:	85d6                	mv	a1,s5
     822:	8552                	mv	a0,s4
     824:	387d                	jal	e2 <array_equ>
        
array_equ(ri_1,ri,size);
     826:	8626                	mv	a2,s1
     828:	85de                	mv	a1,s7
     82a:	8556                	mv	a0,s5
     82c:	385d                	jal	e2 <array_equ>
   
array_equ(ti_2,ti_1,size);
     82e:	8626                	mv	a2,s1
     830:	85da                	mv	a1,s6
     832:	856e                	mv	a0,s11
     834:	307d                	jal	e2 <array_equ>
      
array_equ(ti_1,ti,size);
     836:	8626                	mv	a2,s1
     838:	85e2                	mv	a1,s8
     83a:	855a                	mv	a0,s6
     83c:	305d                	jal	e2 <array_equ>
        controlR = 0;
     83e:	4781                	li	a5,0

        for (i = 0; i < N + 1; ++i) {
     840:	4701                	li	a4,0
     842:	06ed5763          	bge	s10,a4,8b0 <ext_euclid+0x1b2>
    while (controlR != 0) {
     846:	f40793e3          	bnez	a5,78c <ext_euclid+0x8e>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     84a:	4701                	li	a4,0
            if (((ri_2[0] * j) % mod) == 1)
     84c:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     84e:	07274c63          	blt	a4,s2,8c6 <ext_euclid+0x1c8>
     852:	00001617          	auipc	a2,0x1
     856:	08e60613          	addi	a2,a2,142 # 18e0 <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     85a:	08fd5063          	bge	s10,a5,8da <ext_euclid+0x1dc>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     85e:	fb040113          	addi	sp,s0,-80
     862:	40b6                	lw	ra,76(sp)
     864:	4426                	lw	s0,72(sp)
     866:	4496                	lw	s1,68(sp)
     868:	4906                	lw	s2,64(sp)
     86a:	59f2                	lw	s3,60(sp)
     86c:	5a62                	lw	s4,56(sp)
     86e:	5ad2                	lw	s5,52(sp)
     870:	5b42                	lw	s6,48(sp)
     872:	5bb2                	lw	s7,44(sp)
     874:	5c22                	lw	s8,40(sp)
     876:	5c92                	lw	s9,36(sp)
     878:	5d02                	lw	s10,32(sp)
     87a:	4df2                	lw	s11,28(sp)
     87c:	00001517          	auipc	a0,0x1
     880:	06450513          	addi	a0,a0,100 # 18e0 <ti_2>
     884:	6161                	addi	sp,sp,80
     886:	8082                	ret
        ti_2[i] = 0;
     888:	00279713          	slli	a4,a5,0x2
     88c:	00e68633          	add	a2,a3,a4
        ti_1[i] = 0;
     890:	975a                	add	a4,a4,s6
        ti_2[i] = 0;
     892:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     896:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size; ++i) {
     89a:	0785                	addi	a5,a5,1
     89c:	b5d9                	j	762 <ext_euclid+0x64>
            ri[i - (N + 1)] = res[i];
     89e:	00279693          	slli	a3,a5,0x2
     8a2:	96aa                	add	a3,a3,a0
     8a4:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8a6:	0785                	addi	a5,a5,1
     8a8:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     8aa:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8ae:	bdfd                	j	7ac <ext_euclid+0xae>
              qi_1[i] = 0;
     8b0:	00271693          	slli	a3,a4,0x2
     8b4:	00dc8633          	add	a2,s9,a3
            controlR += ri[i];
     8b8:	96de                	add	a3,a3,s7
     8ba:	4294                	lw	a3,0(a3)
              qi_1[i] = 0;
     8bc:	00062023          	sw	zero,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8c0:	0705                	addi	a4,a4,1
            controlR += ri[i];
     8c2:	97b6                	add	a5,a5,a3
        for (i = 0; i < N + 1; ++i) {
     8c4:	bfbd                	j	842 <ext_euclid+0x144>
            if (((ri_2[0] * j) % mod) == 1)
     8c6:	000a2683          	lw	a3,0(s4)
     8ca:	02d706b3          	mul	a3,a4,a3
     8ce:	0326e6b3          	rem	a3,a3,s2
     8d2:	f8c680e3          	beq	a3,a2,852 <ext_euclid+0x154>
        for (j = 0; j < mod; ++j) {
     8d6:	0705                	addi	a4,a4,1
     8d8:	bf9d                	j	84e <ext_euclid+0x150>
            ti_2[i] = (ti_2[i] * j) % mod;
     8da:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8dc:	0785                	addi	a5,a5,1
     8de:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
     8e0:	02d706b3          	mul	a3,a4,a3
     8e4:	0326e6b3          	rem	a3,a3,s2
     8e8:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     8ec:	b7bd                	j	85a <ext_euclid+0x15c>

000008ee <generate_keys>:




int* generate_keys(int N, int p, int q){
     8ee:	7141                	addi	sp,sp,-496
     8f0:	1e112623          	sw	ra,492(sp)
     8f4:	1e812423          	sw	s0,488(sp)
     8f8:	1e912223          	sw	s1,484(sp)
     8fc:	1b80                	addi	s0,sp,496
     8fe:	1f212023          	sw	s2,480(sp)
     902:	1d312e23          	sw	s3,476(sp)
     906:	1d412c23          	sw	s4,472(sp)
     90a:	1d512a23          	sw	s5,468(sp)
     90e:	1d612823          	sw	s6,464(sp)
     912:	1d712623          	sw	s7,460(sp)
     916:	1da12023          	sw	s10,448(sp)
     91a:	1d812423          	sw	s8,456(sp)
     91e:	1d912223          	sw	s9,452(sp)
     922:	892a                	mv	s2,a0
     924:	8bae                	mv	s7,a1
     926:	8b32                	mv	s6,a2

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     928:	4581                	li	a1,0
     92a:	0d000613          	li	a2,208
     92e:	e2440513          	addi	a0,s0,-476
     932:	2b89                	jal	e84 <memset>
     934:	4485                	li	s1,1
     936:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     938:	0d800613          	li	a2,216
     93c:	4581                	li	a1,0
     93e:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     942:	e1342c23          	sw	s3,-488(s0)
     946:	e0942e23          	sw	s1,-484(s0)
     94a:	e2942023          	sw	s1,-480(s0)
     94e:	e3342423          	sw	s3,-472(s0)
     952:	e2942823          	sw	s1,-464(s0)
     956:	e2942e23          	sw	s1,-452(s0)
     95a:	e5342023          	sw	s3,-448(s0)
     95e:	e5342223          	sw	s3,-444(s0)
     962:	e4942623          	sw	s1,-436(s0)
     966:	e5342a23          	sw	s3,-428(s0)
     96a:	e4942e23          	sw	s1,-420(s0)
     96e:	e6942023          	sw	s1,-416(s0)
     972:	e7342623          	sw	s3,-404(s0)
     976:	e6942a23          	sw	s1,-396(s0)
     97a:	e8942023          	sw	s1,-384(s0)
     97e:	e8942223          	sw	s1,-380(s0)
     982:	e8942423          	sw	s1,-376(s0)
     986:	e9342623          	sw	s3,-372(s0)
     98a:	e8942a23          	sw	s1,-364(s0)
     98e:	ea942023          	sw	s1,-352(s0)
     992:	ea942223          	sw	s1,-348(s0)
     996:	ea942423          	sw	s1,-344(s0)
     99a:	eb342623          	sw	s3,-340(s0)
     99e:	ea942a23          	sw	s1,-332(s0)
     9a2:	ec942023          	sw	s1,-320(s0)
     9a6:	ec942223          	sw	s1,-316(s0)
     9aa:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     9ae:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9b2:	29c9                	jal	e84 <memset>
    int polyR[N+1];
     9b4:	002a9793          	slli	a5,s5,0x2
     9b8:	07bd                	addi	a5,a5,15
     9ba:	9bc1                	andi	a5,a5,-16
     9bc:	40f10133          	sub	sp,sp,a5
     9c0:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     9c2:	00291d13          	slli	s10,s2,0x2
     9c6:	01aa07b3          	add	a5,s4,s10
     9ca:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9cc:	ef342a23          	sw	s3,-268(s0)
     9d0:	ee942e23          	sw	s1,-260(s0)
     9d4:	f0942023          	sw	s1,-256(s0)
     9d8:	f0942423          	sw	s1,-248(s0)
     9dc:	f1342a23          	sw	s3,-236(s0)
     9e0:	f1342e23          	sw	s3,-228(s0)
     9e4:	f3342023          	sw	s3,-224(s0)
     9e8:	f2942423          	sw	s1,-216(s0)
     9ec:	f3342823          	sw	s3,-208(s0)
     9f0:	f2942c23          	sw	s1,-200(s0)
     9f4:	f4942223          	sw	s1,-188(s0)
     9f8:	f5342423          	sw	s3,-184(s0)
     9fc:	f4942823          	sw	s1,-176(s0)
     a00:	f4942e23          	sw	s1,-164(s0)
     a04:	f7342023          	sw	s3,-160(s0)
     a08:	f6942423          	sw	s1,-152(s0)
     a0c:	f6942a23          	sw	s1,-140(s0)
     a10:	f7342c23          	sw	s3,-136(s0)
     a14:	f8942023          	sw	s1,-128(s0)
     a18:	f8942423          	sw	s1,-120(s0)
     a1c:	f8942623          	sw	s1,-116(s0)
     a20:	f8942c23          	sw	s1,-104(s0)
     a24:	f9342e23          	sw	s3,-100(s0)
     a28:	fa942223          	sw	s1,-92(s0)
     a2c:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
     a30:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     a34:	4785                	li	a5,1
     a36:	1127c163          	blt	a5,s2,b38 <generate_keys+0x24a>
     a3a:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     a3c:	03600693          	li	a3,54
     a40:	10f6d363          	bge	a3,a5,b46 <generate_keys+0x258>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     a44:	4781                	li	a5,0
        random_keys[i] = f[i];
     a46:	00001697          	auipc	a3,0x1
     a4a:	02a68693          	addi	a3,a3,42 # 1a70 <random_keys>
    for(i = 0; i < N; ++i){
     a4e:	1127ca63          	blt	a5,s2,b62 <generate_keys+0x274>
     a52:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     a56:	00191993          	slli	s3,s2,0x1
     a5a:	87ca                	mv	a5,s2
     a5c:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     a5e:	00001617          	auipc	a2,0x1
     a62:	01260613          	addi	a2,a2,18 # 1a70 <random_keys>
    for(i = N; i < (2*N); ++i){
     a66:	1137c963          	blt	a5,s3,b78 <generate_keys+0x28a>
    }
    ////RANDOM_KEYS 53-105 ARASI G////
    
    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////
    for(i = (2*N); i < (3*N); ++i){
     a6a:	448d                	li	s1,3
     a6c:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     a70:	86de                	mv	a3,s7
     a72:	8656                	mv	a2,s5
     a74:	e1840593          	addi	a1,s0,-488
     a78:	8552                	mv	a0,s4
     a7a:	3151                	jal	6fe <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     a7c:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     a7e:	00001697          	auipc	a3,0x1
     a82:	ff268693          	addi	a3,a3,-14 # 1a70 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     a86:	1097c163          	blt	a5,s1,b88 <generate_keys+0x29a>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     a8a:	8656                	mv	a2,s5
     a8c:	86da                	mv	a3,s6
     a8e:	e1840593          	addi	a1,s0,-488
     a92:	8552                	mv	a0,s4
     a94:	31ad                	jal	6fe <ext_euclid>
    ////FQ HESAPLANDI ////

    
    for(i = (3*N); i < (4*N); ++i){
     a96:	5751                	li	a4,-12
     a98:	02e90733          	mul	a4,s2,a4
     a9c:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
     a9e:	00001617          	auipc	a2,0x1
     aa2:	fd260613          	addi	a2,a2,-46 # 1a70 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     aa6:	0fa4c963          	blt	s1,s10,b98 <generate_keys+0x2aa>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     aaa:	4701                	li	a4,0
     aac:	85ca                	mv	a1,s2
     aae:	86ca                	mv	a3,s2
     ab0:	8666                	mv	a2,s9
     ab2:	3029                	jal	2bc <polymult2>
    //// FG HESAPLANDI ////

   
    for(i = 0; i < (2*N-1); ++i){
     ab4:	87aa                	mv	a5,a0
     ab6:	4701                	li	a4,0
     ab8:	fff98593          	addi	a1,s3,-1
     abc:	0eb74863          	blt	a4,a1,bac <generate_keys+0x2be>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////
    
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ac0:	86d6                	mv	a3,s5
     ac2:	875a                	mv	a4,s6
     ac4:	8652                	mv	a2,s4
     ac6:	3a91                	jal	41a <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     ac8:	4795                	li	a5,5
     aca:	02f907b3          	mul	a5,s2,a5
     ace:	098a                	slli	s3,s3,0x2
     ad0:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     ad2:	00001697          	auipc	a3,0x1
     ad6:	f9e68693          	addi	a3,a3,-98 # 1a70 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     ada:	0991                	addi	s3,s3,4
     adc:	0efc4063          	blt	s8,a5,bbc <generate_keys+0x2ce>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     ae0:	4699                	li	a3,6
     ae2:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     ae4:	00001617          	auipc	a2,0x1
     ae8:	f8c60613          	addi	a2,a2,-116 # 1a70 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     aec:	02d906b3          	mul	a3,s2,a3
     af0:	02a90933          	mul	s2,s2,a0
     af4:	0cf6dc63          	bge	a3,a5,bcc <generate_keys+0x2de>


    return_address5 = &random_keys[0];

    return return_address5;
}
     af8:	e1040113          	addi	sp,s0,-496
     afc:	1ec12083          	lw	ra,492(sp)
     b00:	1e812403          	lw	s0,488(sp)
     b04:	1e412483          	lw	s1,484(sp)
     b08:	1e012903          	lw	s2,480(sp)
     b0c:	1dc12983          	lw	s3,476(sp)
     b10:	1d812a03          	lw	s4,472(sp)
     b14:	1d412a83          	lw	s5,468(sp)
     b18:	1d012b03          	lw	s6,464(sp)
     b1c:	1cc12b83          	lw	s7,460(sp)
     b20:	1c812c03          	lw	s8,456(sp)
     b24:	1c412c83          	lw	s9,452(sp)
     b28:	1c012d03          	lw	s10,448(sp)
     b2c:	00001517          	auipc	a0,0x1
     b30:	f4450513          	addi	a0,a0,-188 # 1a70 <random_keys>
     b34:	617d                	addi	sp,sp,496
     b36:	8082                	ret
        polyR[i] = 0;
     b38:	00279713          	slli	a4,a5,0x2
     b3c:	9752                	add	a4,a4,s4
     b3e:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     b42:	0785                	addi	a5,a5,1
     b44:	bdcd                	j	a36 <generate_keys+0x148>
        f[i] = 0;
     b46:	00279713          	slli	a4,a5,0x2
     b4a:	e1840613          	addi	a2,s0,-488
     b4e:	963a                	add	a2,a2,a4
     b50:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     b54:	ef440613          	addi	a2,s0,-268
     b58:	9732                	add	a4,a4,a2
     b5a:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     b5e:	0785                	addi	a5,a5,1
     b60:	b5c5                	j	a40 <generate_keys+0x152>
        random_keys[i] = f[i];
     b62:	00279713          	slli	a4,a5,0x2
     b66:	e1840593          	addi	a1,s0,-488
     b6a:	00e68633          	add	a2,a3,a4
     b6e:	972e                	add	a4,a4,a1
     b70:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     b72:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     b74:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     b76:	bde1                	j	a4e <generate_keys+0x160>
        random_keys[i] = g[i-N];
     b78:	430c                	lw	a1,0(a4)
     b7a:	00279693          	slli	a3,a5,0x2
     b7e:	96b2                	add	a3,a3,a2
     b80:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     b82:	0785                	addi	a5,a5,1
     b84:	0711                	addi	a4,a4,4
     b86:	b5c5                	j	a66 <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
     b88:	4110                	lw	a2,0(a0)
     b8a:	00279713          	slli	a4,a5,0x2
     b8e:	9736                	add	a4,a4,a3
     b90:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     b92:	0785                	addi	a5,a5,1
     b94:	0511                	addi	a0,a0,4
     b96:	bdc5                	j	a86 <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
     b98:	00249793          	slli	a5,s1,0x2
     b9c:	00f706b3          	add	a3,a4,a5
     ba0:	96aa                	add	a3,a3,a0
     ba2:	4294                	lw	a3,0(a3)
     ba4:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     ba6:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     ba8:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     baa:	bdf5                	j	aa6 <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
     bac:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     bae:	0705                	addi	a4,a4,1
     bb0:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     bb2:	037686b3          	mul	a3,a3,s7
     bb6:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     bba:	b709                	j	abc <generate_keys+0x1ce>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bbc:	ff89a603          	lw	a2,-8(s3)
     bc0:	002c1713          	slli	a4,s8,0x2
     bc4:	9736                	add	a4,a4,a3
     bc6:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     bc8:	0c05                	addi	s8,s8,1
     bca:	bf01                	j	ada <generate_keys+0x1ec>
        random_keys[i] = polyR[i-(5*N)];
     bcc:	00279713          	slli	a4,a5,0x2
     bd0:	00e605b3          	add	a1,a2,a4
     bd4:	974a                	add	a4,a4,s2
     bd6:	9752                	add	a4,a4,s4
     bd8:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     bda:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     bdc:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     bde:	bf19                	j	af4 <generate_keys+0x206>

00000be0 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     be0:	7115                	addi	sp,sp,-224
     be2:	cda2                	sw	s0,216(sp)
     be4:	cba6                	sw	s1,212(sp)
     be6:	842a                	mv	s0,a0
     be8:	84b2                	mv	s1,a2
     bea:	c9ca                	sw	s2,208(sp)

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bec:	0c000613          	li	a2,192
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bf0:	892e                	mv	s2,a1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bf2:	850a                	mv	a0,sp
     bf4:	00000597          	auipc	a1,0x0
     bf8:	46058593          	addi	a1,a1,1120 # 1054 <__DTOR_END__>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bfc:	cf86                	sw	ra,220(sp)
     bfe:	c7ce                	sw	s3,204(sp)
     c00:	c5d2                	sw	s4,200(sp)
     c02:	89b6                	mv	s3,a3
     c04:	8a3a                	mv	s4,a4
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c06:	2245                	jal	da6 <memcpy>
    int *temp;
    int i;

   
    temp = polymult(public_key,N,random_val,48,q,0);
     c08:	4781                	li	a5,0
     c0a:	874a                	mv	a4,s2
     c0c:	03000693          	li	a3,48
     c10:	85a2                	mv	a1,s0
     c12:	860a                	mv	a2,sp
     c14:	854e                	mv	a0,s3
     c16:	d12ff0ef          	jal	ra,128 <polymult>
//
//    for(i = 0; i < 48; ++i){
//        temp[i] = temp[i] + message[i];
//    }
   
array_add(temp,message,48);
     c1a:	85a6                	mv	a1,s1
     c1c:	03000613          	li	a2,48
    temp = polymult(public_key,N,random_val,48,q,0);
     c20:	89aa                	mv	s3,a0

    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c22:	00141493          	slli	s1,s0,0x1
array_add(temp,message,48);
     c26:	c6cff0ef          	jal	ra,92 <array_add>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c2a:	00140693          	addi	a3,s0,1
     c2e:	874a                	mv	a4,s2
     c30:	8652                	mv	a2,s4
     c32:	85a6                	mv	a1,s1
     c34:	854e                	mv	a0,s3
     c36:	fe4ff0ef          	jal	ra,41a <polydiv>
   
    for(i = (2*N); i < (3*N); ++i){
     c3a:	478d                	li	a5,3
     c3c:	02f40433          	mul	s0,s0,a5
     c40:	87aa                	mv	a5,a0
     c42:	0084ca63          	blt	s1,s0,c56 <ntru_encyrpt+0x76>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
     c46:	40fe                	lw	ra,220(sp)
     c48:	446e                	lw	s0,216(sp)
     c4a:	44de                	lw	s1,212(sp)
     c4c:	494e                	lw	s2,208(sp)
     c4e:	49be                	lw	s3,204(sp)
     c50:	4a2e                	lw	s4,200(sp)
     c52:	612d                	addi	sp,sp,224
     c54:	8082                	ret
        CT[i-(2*N)] = CT[i];
     c56:	00249713          	slli	a4,s1,0x2
     c5a:	972a                	add	a4,a4,a0
     c5c:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     c5e:	0485                	addi	s1,s1,1
     c60:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     c62:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     c66:	bff1                	j	c42 <ntru_encyrpt+0x62>

00000c68 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c68:	7179                	addi	sp,sp,-48
     c6a:	d422                	sw	s0,40(sp)
     c6c:	ce4e                	sw	s3,28(sp)
     c6e:	842a                	mv	s0,a0

    a2 = polydiv(a,(2*N),polyR,(N+1),q);

/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     c70:	498d                	li	s3,3
     c72:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c76:	d04a                	sw	s2,32(sp)
     c78:	ca56                	sw	s5,20(sp)
     c7a:	c65e                	sw	s7,12(sp)
     c7c:	8932                	mv	s2,a2
     c7e:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c80:	863e                	mv	a2,a5
     c82:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c84:	8aae                	mv	s5,a1
     c86:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c88:	85a2                	mv	a1,s0
     c8a:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c8c:	d606                	sw	ra,44(sp)
     c8e:	d226                	sw	s1,36(sp)
     c90:	cc52                	sw	s4,24(sp)
     c92:	c85a                	sw	s6,16(sp)
     c94:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c96:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c9a:	e22ff0ef          	jal	ra,2bc <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c9e:	00140b13          	addi	s6,s0,1
     ca2:	874a                	mv	a4,s2
     ca4:	86da                	mv	a3,s6
     ca6:	8652                	mv	a2,s4
     ca8:	85a6                	mv	a1,s1
     caa:	f70ff0ef          	jal	ra,41a <polydiv>
     cae:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb0:	87aa                	mv	a5,a0
     cb2:	872a                	mv	a4,a0
     cb4:	86a6                	mv	a3,s1
     cb6:	0536c263          	blt	a3,s3,cfa <ntru_deceypt+0x92>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     cba:	4589                	li	a1,2
     cbc:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     cc0:	4701                	li	a4,0
     cc2:	04874563          	blt	a4,s0,d0c <ntru_deceypt+0xa4>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     cc6:	4701                	li	a4,0
     cc8:	86a2                	mv	a3,s0
     cca:	85a2                	mv	a1,s0
     ccc:	855e                	mv	a0,s7
     cce:	deeff0ef          	jal	ra,2bc <polymult2>

/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cd2:	8756                	mv	a4,s5
     cd4:	86da                	mv	a3,s6
     cd6:	8652                	mv	a2,s4
     cd8:	85a6                	mv	a1,s1
     cda:	f40ff0ef          	jal	ra,41a <polydiv>

    for(i = (2*N); i < ((2*N)+N); ++i){
     cde:	87aa                	mv	a5,a0
     ce0:	0334cf63          	blt	s1,s3,d1e <ntru_deceypt+0xb6>
    }
    ////////"Vector c2 (decrypted message)/////////
  
    return_address7 = &c2[0];
    return return_address7;
}
     ce4:	50b2                	lw	ra,44(sp)
     ce6:	5422                	lw	s0,40(sp)
     ce8:	5492                	lw	s1,36(sp)
     cea:	5902                	lw	s2,32(sp)
     cec:	49f2                	lw	s3,28(sp)
     cee:	4a62                	lw	s4,24(sp)
     cf0:	4ad2                	lw	s5,20(sp)
     cf2:	4b42                	lw	s6,16(sp)
     cf4:	4bb2                	lw	s7,12(sp)
     cf6:	6145                	addi	sp,sp,48
     cf8:	8082                	ret
        a2[i-(2*N)] = a2[i];
     cfa:	00269593          	slli	a1,a3,0x2
     cfe:	95b2                	add	a1,a1,a2
     d00:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d02:	0685                	addi	a3,a3,1
     d04:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     d06:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d0a:	b775                	j	cb6 <ntru_deceypt+0x4e>
        if(a2[i] <= q/2)
     d0c:	4394                	lw	a3,0(a5)
     d0e:	00d5d563          	bge	a1,a3,d18 <ntru_deceypt+0xb0>
            a2[i] = (-1)*(q-a2[i]);
     d12:	412686b3          	sub	a3,a3,s2
     d16:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     d18:	0705                	addi	a4,a4,1
     d1a:	0791                	addi	a5,a5,4
     d1c:	b75d                	j	cc2 <ntru_deceypt+0x5a>
        c2[i-(2*N)] = c2[i];
     d1e:	00249713          	slli	a4,s1,0x2
     d22:	972a                	add	a4,a4,a0
     d24:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d26:	0485                	addi	s1,s1,1
     d28:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     d2a:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d2e:	bf4d                	j	ce0 <ntru_deceypt+0x78>

00000d30 <default_exc_handler>:
  jal x0, default_exc_handler
     d30:	0000006f          	j	d30 <default_exc_handler>

00000d34 <reset_handler>:
  mv  x1, x0
     d34:	00000093          	li	ra,0
  mv  x2, x1
     d38:	8106                	mv	sp,ra
  mv  x3, x1
     d3a:	8186                	mv	gp,ra
  mv  x4, x1
     d3c:	8206                	mv	tp,ra
  mv  x5, x1
     d3e:	8286                	mv	t0,ra
  mv  x6, x1
     d40:	8306                	mv	t1,ra
  mv  x7, x1
     d42:	8386                	mv	t2,ra
  mv  x8, x1
     d44:	8406                	mv	s0,ra
  mv  x9, x1
     d46:	8486                	mv	s1,ra
  mv x10, x1
     d48:	8506                	mv	a0,ra
  mv x11, x1
     d4a:	8586                	mv	a1,ra
  mv x12, x1
     d4c:	8606                	mv	a2,ra
  mv x13, x1
     d4e:	8686                	mv	a3,ra
  mv x14, x1
     d50:	8706                	mv	a4,ra
  mv x15, x1
     d52:	8786                	mv	a5,ra
  mv x16, x1
     d54:	8806                	mv	a6,ra
  mv x17, x1
     d56:	8886                	mv	a7,ra
  mv x18, x1
     d58:	8906                	mv	s2,ra
  mv x19, x1
     d5a:	8986                	mv	s3,ra
  mv x20, x1
     d5c:	8a06                	mv	s4,ra
  mv x21, x1
     d5e:	8a86                	mv	s5,ra
  mv x22, x1
     d60:	8b06                	mv	s6,ra
  mv x23, x1
     d62:	8b86                	mv	s7,ra
  mv x24, x1
     d64:	8c06                	mv	s8,ra
  mv x25, x1
     d66:	8c86                	mv	s9,ra
  mv x26, x1
     d68:	8d06                	mv	s10,ra
  mv x27, x1
     d6a:	8d86                	mv	s11,ra
  mv x28, x1
     d6c:	8e06                	mv	t3,ra
  mv x29, x1
     d6e:	8e86                	mv	t4,ra
  mv x30, x1
     d70:	8f06                	mv	t5,ra
  mv x31, x1
     d72:	8f86                	mv	t6,ra
  la   x2, _stack_start
     d74:	0000f117          	auipc	sp,0xf
     d78:	28c10113          	addi	sp,sp,652 # 10000 <_stack_start>

00000d7c <_start>:
  la x26, _bss_start
     d7c:	00000d17          	auipc	s10,0x0
     d80:	45cd0d13          	addi	s10,s10,1116 # 11d8 <_bss_start>
  la x27, _bss_end
     d84:	00001d97          	auipc	s11,0x1
     d88:	1e8d8d93          	addi	s11,s11,488 # 1f6c <_bss_end>
  bge x26, x27, zero_loop_end
     d8c:	01bd5763          	bge	s10,s11,d9a <main_entry>

00000d90 <zero_loop>:
  sw x0, 0(x26)
     d90:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
     d94:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
     d96:	ffaddde3          	bge	s11,s10,d90 <zero_loop>

00000d9a <main_entry>:
  addi x10, x0, 0
     d9a:	00000513          	li	a0,0
  addi x11, x0, 0
     d9e:	00000593          	li	a1,0
  jal x1, main
     da2:	18a000ef          	jal	ra,f2c <main>

00000da6 <memcpy>:
     da6:	00a5c7b3          	xor	a5,a1,a0
     daa:	8b8d                	andi	a5,a5,3
     dac:	00c508b3          	add	a7,a0,a2
     db0:	e7a1                	bnez	a5,df8 <memcpy+0x52>
     db2:	478d                	li	a5,3
     db4:	04c7f263          	bgeu	a5,a2,df8 <memcpy+0x52>
     db8:	00357793          	andi	a5,a0,3
     dbc:	872a                	mv	a4,a0
     dbe:	eba9                	bnez	a5,e10 <memcpy+0x6a>
     dc0:	ffc8f613          	andi	a2,a7,-4
     dc4:	fe060793          	addi	a5,a2,-32
     dc8:	06f76763          	bltu	a4,a5,e36 <memcpy+0x90>
     dcc:	02c77363          	bgeu	a4,a2,df2 <memcpy+0x4c>
     dd0:	86ae                	mv	a3,a1
     dd2:	87ba                	mv	a5,a4
     dd4:	0006a803          	lw	a6,0(a3)
     dd8:	0791                	addi	a5,a5,4
     dda:	0691                	addi	a3,a3,4
     ddc:	ff07ae23          	sw	a6,-4(a5)
     de0:	fec7eae3          	bltu	a5,a2,dd4 <memcpy+0x2e>
     de4:	fff60793          	addi	a5,a2,-1
     de8:	8f99                	sub	a5,a5,a4
     dea:	9bf1                	andi	a5,a5,-4
     dec:	0791                	addi	a5,a5,4
     dee:	973e                	add	a4,a4,a5
     df0:	95be                	add	a1,a1,a5
     df2:	01176663          	bltu	a4,a7,dfe <memcpy+0x58>
     df6:	8082                	ret
     df8:	872a                	mv	a4,a0
     dfa:	ff157ee3          	bgeu	a0,a7,df6 <memcpy+0x50>
     dfe:	0005c783          	lbu	a5,0(a1)
     e02:	0705                	addi	a4,a4,1
     e04:	0585                	addi	a1,a1,1
     e06:	fef70fa3          	sb	a5,-1(a4)
     e0a:	ff176ae3          	bltu	a4,a7,dfe <memcpy+0x58>
     e0e:	8082                	ret
     e10:	0005c683          	lbu	a3,0(a1)
     e14:	0705                	addi	a4,a4,1
     e16:	00377793          	andi	a5,a4,3
     e1a:	fed70fa3          	sb	a3,-1(a4)
     e1e:	0585                	addi	a1,a1,1
     e20:	d3c5                	beqz	a5,dc0 <memcpy+0x1a>
     e22:	0005c683          	lbu	a3,0(a1)
     e26:	0705                	addi	a4,a4,1
     e28:	00377793          	andi	a5,a4,3
     e2c:	fed70fa3          	sb	a3,-1(a4)
     e30:	0585                	addi	a1,a1,1
     e32:	fff9                	bnez	a5,e10 <memcpy+0x6a>
     e34:	b771                	j	dc0 <memcpy+0x1a>
     e36:	41d4                	lw	a3,4(a1)
     e38:	0005a283          	lw	t0,0(a1)
     e3c:	0085af83          	lw	t6,8(a1)
     e40:	00c5af03          	lw	t5,12(a1)
     e44:	0105ae83          	lw	t4,16(a1)
     e48:	0145ae03          	lw	t3,20(a1)
     e4c:	0185a303          	lw	t1,24(a1)
     e50:	01c5a803          	lw	a6,28(a1)
     e54:	c354                	sw	a3,4(a4)
     e56:	5194                	lw	a3,32(a1)
     e58:	00572023          	sw	t0,0(a4)
     e5c:	01f72423          	sw	t6,8(a4)
     e60:	01e72623          	sw	t5,12(a4)
     e64:	01d72823          	sw	t4,16(a4)
     e68:	01c72a23          	sw	t3,20(a4)
     e6c:	00672c23          	sw	t1,24(a4)
     e70:	01072e23          	sw	a6,28(a4)
     e74:	d314                	sw	a3,32(a4)
     e76:	02470713          	addi	a4,a4,36
     e7a:	02458593          	addi	a1,a1,36
     e7e:	faf76ce3          	bltu	a4,a5,e36 <memcpy+0x90>
     e82:	b7a9                	j	dcc <memcpy+0x26>

00000e84 <memset>:
     e84:	433d                	li	t1,15
     e86:	872a                	mv	a4,a0
     e88:	02c37363          	bgeu	t1,a2,eae <memset+0x2a>
     e8c:	00f77793          	andi	a5,a4,15
     e90:	efbd                	bnez	a5,f0e <memset+0x8a>
     e92:	e5ad                	bnez	a1,efc <memset+0x78>
     e94:	ff067693          	andi	a3,a2,-16
     e98:	8a3d                	andi	a2,a2,15
     e9a:	96ba                	add	a3,a3,a4
     e9c:	c30c                	sw	a1,0(a4)
     e9e:	c34c                	sw	a1,4(a4)
     ea0:	c70c                	sw	a1,8(a4)
     ea2:	c74c                	sw	a1,12(a4)
     ea4:	0741                	addi	a4,a4,16
     ea6:	fed76be3          	bltu	a4,a3,e9c <memset+0x18>
     eaa:	e211                	bnez	a2,eae <memset+0x2a>
     eac:	8082                	ret
     eae:	40c306b3          	sub	a3,t1,a2
     eb2:	068a                	slli	a3,a3,0x2
     eb4:	00000297          	auipc	t0,0x0
     eb8:	9696                	add	a3,a3,t0
     eba:	00a68067          	jr	10(a3)
     ebe:	00b70723          	sb	a1,14(a4)
     ec2:	00b706a3          	sb	a1,13(a4)
     ec6:	00b70623          	sb	a1,12(a4)
     eca:	00b705a3          	sb	a1,11(a4)
     ece:	00b70523          	sb	a1,10(a4)
     ed2:	00b704a3          	sb	a1,9(a4)
     ed6:	00b70423          	sb	a1,8(a4)
     eda:	00b703a3          	sb	a1,7(a4)
     ede:	00b70323          	sb	a1,6(a4)
     ee2:	00b702a3          	sb	a1,5(a4)
     ee6:	00b70223          	sb	a1,4(a4)
     eea:	00b701a3          	sb	a1,3(a4)
     eee:	00b70123          	sb	a1,2(a4)
     ef2:	00b700a3          	sb	a1,1(a4)
     ef6:	00b70023          	sb	a1,0(a4)
     efa:	8082                	ret
     efc:	0ff5f593          	andi	a1,a1,255
     f00:	00859693          	slli	a3,a1,0x8
     f04:	8dd5                	or	a1,a1,a3
     f06:	01059693          	slli	a3,a1,0x10
     f0a:	8dd5                	or	a1,a1,a3
     f0c:	b761                	j	e94 <memset+0x10>
     f0e:	00279693          	slli	a3,a5,0x2
     f12:	00000297          	auipc	t0,0x0
     f16:	9696                	add	a3,a3,t0
     f18:	8286                	mv	t0,ra
     f1a:	fa8680e7          	jalr	-88(a3)
     f1e:	8096                	mv	ra,t0
     f20:	17c1                	addi	a5,a5,-16
     f22:	8f1d                	sub	a4,a4,a5
     f24:	963e                	add	a2,a2,a5
     f26:	f8c374e3          	bgeu	t1,a2,eae <memset+0x2a>
     f2a:	b7a5                	j	e92 <memset+0xe>

00000f2c <main>:

int main(){
     f2c:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f30:	0c000613          	li	a2,192
     f34:	00000597          	auipc	a1,0x0
     f38:	1e058593          	addi	a1,a1,480 # 1114 <__DTOR_END__+0xc0>
     f3c:	0068                	addi	a0,sp,12
int main(){
     f3e:	42112623          	sw	ra,1068(sp)
     f42:	42812423          	sw	s0,1064(sp)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f46:	3585                	jal	da6 <memcpy>

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    keys = generate_keys(N, p, q);
     f48:	06500613          	li	a2,101
     f4c:	458d                	li	a1,3
     f4e:	03500513          	li	a0,53
     f52:	3a71                	jal	8ee <generate_keys>
     f54:	4781                	li	a5,0


   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
     f56:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
     f5a:	00f506b3          	add	a3,a0,a5
     f5e:	4290                	lw	a2,0(a3)
     f60:	1314                	addi	a3,sp,416
     f62:	96be                	add	a3,a3,a5
     f64:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
     f66:	0791                	addi	a5,a5,4
     f68:	fee799e3          	bne	a5,a4,f5a <main+0x2e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
     f6c:	1cd8                	addi	a4,sp,628
     f6e:	1a850793          	addi	a5,a0,424
     f72:	27c50693          	addi	a3,a0,636
     f76:	843a                	mv	s0,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
     f78:	4390                	lw	a2,0(a5)
     f7a:	0791                	addi	a5,a5,4
     f7c:	0711                	addi	a4,a4,4
     f7e:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
     f82:	fed79be3          	bne	a5,a3,f78 <main+0x4c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
     f86:	01f8                	addi	a4,sp,204
     f88:	35050793          	addi	a5,a0,848
     f8c:	42450613          	addi	a2,a0,1060
     f90:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
     f92:	438c                	lw	a1,0(a5)
     f94:	0791                	addi	a5,a5,4
     f96:	0711                	addi	a4,a4,4
     f98:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
     f9c:	fec79be3          	bne	a5,a2,f92 <main+0x66>
     fa0:	06b0                	addi	a2,sp,840
     fa2:	4fc50513          	addi	a0,a0,1276
     fa6:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
     fa8:	4398                	lw	a4,0(a5)
     faa:	0791                	addi	a5,a5,4
     fac:	0611                	addi	a2,a2,4
     fae:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
     fb2:	fea79be3          	bne	a5,a0,fa8 <main+0x7c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fb6:	8742                	mv	a4,a6
     fb8:	0070                	addi	a2,sp,12
     fba:	06500593          	li	a1,101
     fbe:	03500513          	li	a0,53
     fc2:	3939                	jal	be0 <ntru_encyrpt>
     fc4:	87aa                	mv	a5,a0


    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fc6:	8722                	mv	a4,s0
     fc8:	06500613          	li	a2,101
     fcc:	34810813          	addi	a6,sp,840
     fd0:	1314                	addi	a3,sp,416
     fd2:	458d                	li	a1,3
     fd4:	03500513          	li	a0,53
     fd8:	3941                	jal	c68 <ntru_deceypt>
            resultkon[0] = 0xBABABABA;
 	    *var = resultkon[0];
            break;	}
        else{
  //          printf("**OPERATION SUCCCESSFUL**\n");
            resultkon[0] = 0xDEDEDEDE;
     fda:	dedee637          	lui	a2,0xdedee
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fde:	4781                	li	a5,0
     fe0:	00000317          	auipc	t1,0x0
     fe4:	1f430313          	addi	t1,t1,500 # 11d4 <_edata>
     fe8:	00001717          	auipc	a4,0x1
     fec:	f8070713          	addi	a4,a4,-128 # 1f68 <resultkon>
            resultkon[0] = 0xDEDEDEDE;
     ff0:	ede60613          	addi	a2,a2,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
     ff4:	08000893          	li	a7,128
        if(!(message[i] == Dec_Message[i])){
     ff8:	006c                	addi	a1,sp,12
     ffa:	00f506b3          	add	a3,a0,a5
     ffe:	95be                	add	a1,a1,a5
    1000:	418c                	lw	a1,0(a1)
    1002:	4294                	lw	a3,0(a3)
    1004:	00032803          	lw	a6,0(t1)
    1008:	02d58463          	beq	a1,a3,1030 <main+0x104>
            resultkon[0] = 0xBABABABA;
    100c:	babac7b7          	lui	a5,0xbabac
    1010:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    1014:	c31c                	sw	a5,0(a4)
 	    *var = resultkon[0];
    1016:	431c                	lw	a5,0(a4)
    1018:	0ff7f793          	andi	a5,a5,255
    101c:	00f80023          	sb	a5,0(a6)
 //   printf("RESULT = %d\n",resultkon);
  //  printf("Time Result = %f clocks\n",cpu_time_used);


    return 0;
}
    1020:	42c12083          	lw	ra,1068(sp)
    1024:	42812403          	lw	s0,1064(sp)
    1028:	4501                	li	a0,0
    102a:	43010113          	addi	sp,sp,1072
    102e:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    1030:	c310                	sw	a2,0(a4)
	    *var = resultkon[0];}
    1032:	4314                	lw	a3,0(a4)
    1034:	0791                	addi	a5,a5,4
    1036:	0ff6f693          	andi	a3,a3,255
    103a:	00d80023          	sb	a3,0(a6)
    for(i = 0; i < 32; ++i){
    103e:	fb179de3          	bne	a5,a7,ff8 <main+0xcc>
    1042:	bff9                	j	1020 <main+0xf4>

00001044 <__CTOR_LIST__>:
	...

0000104c <__CTOR_END__>:
	...

Disassembly of section .rodata:

00001054 <.rodata>:
    1054:	0001                	nop
    1056:	0000                	unimp
    1058:	ffff                	0xffff
    105a:	ffff                	0xffff
    105c:	0000                	unimp
    105e:	0000                	unimp
    1060:	0001                	nop
    1062:	0000                	unimp
    1064:	ffff                	0xffff
    1066:	ffff                	0xffff
    1068:	0001                	nop
    106a:	0000                	unimp
    106c:	ffff                	0xffff
    106e:	ffff                	0xffff
    1070:	0000                	unimp
    1072:	0000                	unimp
    1074:	0001                	nop
    1076:	0000                	unimp
    1078:	0001                	nop
    107a:	0000                	unimp
    107c:	0000                	unimp
    107e:	0000                	unimp
    1080:	ffff                	0xffff
    1082:	ffff                	0xffff
    1084:	0001                	nop
    1086:	0000                	unimp
    1088:	ffff                	0xffff
    108a:	ffff                	0xffff
    108c:	0001                	nop
    108e:	0000                	unimp
    1090:	0000                	unimp
    1092:	0000                	unimp
    1094:	0001                	nop
    1096:	0000                	unimp
    1098:	0001                	nop
    109a:	0000                	unimp
    109c:	0000                	unimp
    109e:	0000                	unimp
    10a0:	ffff                	0xffff
    10a2:	ffff                	0xffff
    10a4:	0001                	nop
    10a6:	0000                	unimp
    10a8:	ffff                	0xffff
    10aa:	ffff                	0xffff
    10ac:	0001                	nop
    10ae:	0000                	unimp
    10b0:	0000                	unimp
    10b2:	0000                	unimp
    10b4:	0001                	nop
    10b6:	0000                	unimp
    10b8:	0001                	nop
    10ba:	0000                	unimp
    10bc:	0000                	unimp
    10be:	0000                	unimp
    10c0:	0001                	nop
    10c2:	0000                	unimp
    10c4:	ffff                	0xffff
    10c6:	ffff                	0xffff
    10c8:	0001                	nop
    10ca:	0000                	unimp
    10cc:	ffff                	0xffff
    10ce:	ffff                	0xffff
    10d0:	0000                	unimp
    10d2:	0000                	unimp
    10d4:	0001                	nop
    10d6:	0000                	unimp
    10d8:	ffff                	0xffff
    10da:	ffff                	0xffff
    10dc:	0000                	unimp
    10de:	0000                	unimp
    10e0:	0001                	nop
    10e2:	0000                	unimp
    10e4:	ffff                	0xffff
    10e6:	ffff                	0xffff
    10e8:	0001                	nop
    10ea:	0000                	unimp
    10ec:	ffff                	0xffff
    10ee:	ffff                	0xffff
    10f0:	0000                	unimp
    10f2:	0000                	unimp
    10f4:	0001                	nop
    10f6:	0000                	unimp
    10f8:	0001                	nop
    10fa:	0000                	unimp
    10fc:	0000                	unimp
    10fe:	0000                	unimp
    1100:	ffff                	0xffff
    1102:	ffff                	0xffff
    1104:	0001                	nop
    1106:	0000                	unimp
    1108:	ffff                	0xffff
    110a:	ffff                	0xffff
    110c:	0001                	nop
    110e:	0000                	unimp
    1110:	0000                	unimp
    1112:	0000                	unimp
    1114:	0001                	nop
    1116:	0000                	unimp
    1118:	0001                	nop
    111a:	0000                	unimp
    111c:	0002                	c.slli64	zero
    111e:	0000                	unimp
    1120:	0001                	nop
    1122:	0000                	unimp
    1124:	0001                	nop
    1126:	0000                	unimp
    1128:	0001                	nop
    112a:	0000                	unimp
    112c:	0001                	nop
    112e:	0000                	unimp
    1130:	0002                	c.slli64	zero
    1132:	0000                	unimp
    1134:	0001                	nop
    1136:	0000                	unimp
    1138:	0001                	nop
    113a:	0000                	unimp
    113c:	0000                	unimp
    113e:	0000                	unimp
    1140:	0001                	nop
    1142:	0000                	unimp
    1144:	0001                	nop
    1146:	0000                	unimp
    1148:	0002                	c.slli64	zero
    114a:	0000                	unimp
    114c:	0001                	nop
    114e:	0000                	unimp
    1150:	0000                	unimp
    1152:	0000                	unimp
    1154:	0001                	nop
    1156:	0000                	unimp
    1158:	0002                	c.slli64	zero
    115a:	0000                	unimp
    115c:	0000                	unimp
    115e:	0000                	unimp
    1160:	0001                	nop
    1162:	0000                	unimp
    1164:	0001                	nop
    1166:	0000                	unimp
    1168:	0001                	nop
    116a:	0000                	unimp
    116c:	0001                	nop
    116e:	0000                	unimp
    1170:	0000                	unimp
    1172:	0000                	unimp
    1174:	0001                	nop
    1176:	0000                	unimp
    1178:	0001                	nop
    117a:	0000                	unimp
    117c:	0000                	unimp
    117e:	0000                	unimp
    1180:	0002                	c.slli64	zero
    1182:	0000                	unimp
    1184:	0001                	nop
    1186:	0000                	unimp
    1188:	0002                	c.slli64	zero
    118a:	0000                	unimp
    118c:	0001                	nop
    118e:	0000                	unimp
    1190:	0000                	unimp
    1192:	0000                	unimp
    1194:	0001                	nop
    1196:	0000                	unimp
    1198:	0001                	nop
    119a:	0000                	unimp
    119c:	0002                	c.slli64	zero
    119e:	0000                	unimp
    11a0:	0001                	nop
    11a2:	0000                	unimp
    11a4:	0001                	nop
    11a6:	0000                	unimp
    11a8:	0001                	nop
    11aa:	0000                	unimp
    11ac:	0001                	nop
    11ae:	0000                	unimp
    11b0:	0002                	c.slli64	zero
    11b2:	0000                	unimp
    11b4:	0001                	nop
    11b6:	0000                	unimp
    11b8:	0001                	nop
    11ba:	0000                	unimp
    11bc:	0002                	c.slli64	zero
    11be:	0000                	unimp
    11c0:	0001                	nop
    11c2:	0000                	unimp
    11c4:	0001                	nop
    11c6:	0000                	unimp
    11c8:	0001                	nop
    11ca:	0000                	unimp
    11cc:	0001                	nop
    11ce:	0000                	unimp
    11d0:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

000011d4 <var>:
volatile uint8_t *var = (volatile uint8_t *) 0x0000c010;
    11d4:	c010                	sw	a2,0(s0)
	...

Disassembly of section .bss:

000011d8 <_bss_start>:
	...

00001430 <product2>:
	...

00001688 <result>:
	...

000018e0 <ti_2>:
	...

00001a70 <random_keys>:
	...

00001f68 <resultkon>:
volatile int resultkon[1];
    1f68:	0000                	unimp
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	2091                	jal	44 <__DYNAMIC+0x44>
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	06ca                	slli	a3,a3,0x12
       e:	0000                	unimp
      10:	da0c                	sw	a1,48(a2)
      12:	b4000003          	lb	zero,-1216(zero) # fffffb40 <_stack_start+0xfffefb40>
      16:	0000                	unimp
      18:	1800                	addi	s0,sp,48
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	05b0                	addi	a2,sp,712
      2a:	0000                	unimp
      2c:	00052d03          	lw	s10,0(a0)
      30:	0200                	addi	s0,sp,256
      32:	0038182b          	0x38182b
      36:	0000                	unimp
      38:	0102                	c.slli64	sp
      3a:	ae08                	fsd	fa0,24(a2)
      3c:	0005                	c.nop	1
      3e:	0200                	addi	s0,sp,256
      40:	0502                	c.slli64	a0
      42:	0431                	addi	s0,s0,12
      44:	0000                	unimp
      46:	0202                	c.slli64	tp
      48:	00062607          	flw	fa2,0(a2)
      4c:	0200                	addi	s0,sp,256
      4e:	0504                	addi	s1,sp,640
      50:	034c                	addi	a1,sp,388
      52:	0000                	unimp
      54:	0402                	c.slli64	s0
      56:	00018f07          	0x18f07
      5a:	0200                	addi	s0,sp,256
      5c:	0508                	addi	a0,sp,640
      5e:	00000347          	fmsub.s	ft6,ft0,ft0,ft0,rne
      62:	0802                	c.slli64	a6
      64:	00018a07          	0x18a07
      68:	0400                	addi	s0,sp,512
      6a:	0504                	addi	s1,sp,640
      6c:	6e69                	lui	t3,0x1a
      6e:	0074                	addi	a3,sp,12
      70:	6905                	lui	s2,0x1
      72:	0000                	unimp
      74:	0200                	addi	s0,sp,256
      76:	0704                	addi	s1,sp,896
      78:	0194                	addi	a3,sp,192
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	1002                	c.slli	zero,0x20
      7e:	f204                	fsw	fs1,32(a2)
  jal x0, reset_handler
      80:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
  jal x0, default_exc_handler
      84:	0588                	addi	a0,sp,704
      86:	0000                	unimp
  jal x0, default_exc_handler
      88:	17015e03          	lhu	t3,368(sp)
    asm volatile(
      8c:	0075                	c.nop	29
      8e:	0000                	unimp
}
      90:	00066503          	0x66503
    for(i=0;i<(length/3);i++) {
      94:	0400                	addi	s0,sp,512
      96:	0e2e                	slli	t3,t3,0xb
      98:	004d                	c.nop	19
      9a:	0000                	unimp
      9c:	00010d03          	lb	s10,0(sp)
}
      a0:	0400                	addi	s0,sp,512
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	0e74                	addi	a3,sp,796
      a4:	004d                	c.nop	19
    asm volatile(
      a6:	0000                	unimp
      a8:	00061603          	lh	a2,0(a2)
      ac:	0400                	addi	s0,sp,512
      ae:	00691793          	slli	a5,s2,0x6
    for(i=0;i<(length/3);i++) {
      b2:	0000                	unimp
    asm volatile(
      b4:	a5040407          	0xa5040407
}
      b8:	0000d603          	lhu	a2,0(ra)
    for(i=0;i<(length/3);i++) {
      bc:	0800                	addi	s0,sp,16
      be:	00000313          	li	t1,0
      c2:	a704                	fsd	fs1,8(a4)
      c4:	830c                	0x830c
      c6:	0000                	unimp
}
      c8:	0800                	addi	s0,sp,16
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      ca:	0478                	addi	a4,sp,524
      cc:	0000                	unimp
    asm volatile(
      ce:	a804                	fsd	fs1,16(s0)
      d0:	0000d613          	srli	a2,ra,0x0
      d4:	0000                	unimp
      d6:	3809                	jal	fffff8e8 <_stack_start+0xfffef8e8>
    for(i=0;i<(length/3);i++) {
      d8:	0000                	unimp
      da:	e600                	fsw	fs0,8(a2)
    asm volatile(
      dc:	0000                	unimp
      de:	0a00                	addi	s0,sp,272
}
      e0:	0075                	c.nop	29
    for(i=0;i<(length/3);i++) {
      e2:	0000                	unimp
      e4:	080b0003          	lb	zero,128(s6)
      e8:	a204                	fsd	fs1,0(a2)
      ea:	0a09                	addi	s4,s4,2
      ec:	0001                	nop
      ee:	0c00                	addi	s0,sp,528
}
      f0:	0155                	addi	sp,sp,21
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	0000                	unimp
      f4:	a404                	fsd	fs1,8(s0)
    asm volatile(
      f6:	00006907          	0x6907
      fa:	0000                	unimp
      fc:	970c                	0x970c
      fe:	0002                	c.slli64	zero
    for(i=0;i<(length/3);i++) {
     100:	0400                	addi	s0,sp,512
     102:	05a9                	addi	a1,a1,10
    asm volatile(
     104:	00b4                	addi	a3,sp,72
     106:	0000                	unimp
}
     108:	0004                	0x4
    for(i=0;i<(length/3);i++) {
     10a:	0003a003          	lw	zero,0(t2)
     10e:	0400                	addi	s0,sp,512
    asm volatile(
     110:	03aa                	slli	t2,t2,0xa
    for(i=0;i<(length/3);i++) {
     112:	00e6                	slli	ra,ra,0x19
     114:	0000                	unimp
     116:	040d                	addi	s0,s0,3
}
     118:	00036503          	0x36503
    asm volatile(
     11c:	0500                	addi	s0,sp,640
     11e:	1916                	slli	s2,s2,0x25
     120:	0054                	addi	a3,sp,4
     122:	0000                	unimp
    for(i=0;i<(length/3);i++) {
     124:	00006903          	0x6903
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	0600                	addi	s0,sp,768
     12a:	0d0c                	addi	a1,sp,656
     12c:	0069                	c.nop	26
     12e:	0000                	unimp
     130:	00030a03          	lb	s4,0(t1)
    int line[size_b][size_a + size_b];
     134:	0500                	addi	s0,sp,640
     136:	01241b23          	sh	s2,22(s0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     13a:	0000                	unimp
    int line[size_b][size_a + size_b];
     13c:	270e                	fld	fa4,192(sp)
     13e:	0001                	nop
     140:	1800                	addi	s0,sp,48
     142:	3405                	jal	fffffb62 <_stack_start+0xfffefb62>
     144:	9608                	0x9608
     146:	0001                	nop
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     148:	0c00                	addi	s0,sp,528
     14a:	000006b3          	add	a3,zero,zero
     14e:	3605                	jal	fffffc6e <_stack_start+0xfffefc6e>
     150:	00019613          	slli	a2,gp,0x0
     154:	0000                	unimp
     156:	006b5f0f          	0x6b5f0f
    int line[size_b][size_a + size_b];
     15a:	3705                	jal	7a <__DYNAMIC+0x7a>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     15c:	00006907          	0x6907
    int line[size_b][size_a + size_b];
     160:	0400                	addi	s0,sp,512
     162:	440c                	lw	a1,8(s0)
    int pola[size_a];
     164:	0005                	c.nop	1
     166:	0500                	addi	s0,sp,640
     168:	00690b37          	lui	s6,0x690
    int line[size_b][size_a + size_b];
     16c:	0000                	unimp
    int pola[size_a];
     16e:	0c08                	addi	a0,sp,528
     170:	046c                	addi	a1,sp,524
    int polb[size_b];
     172:	0000                	unimp
     174:	3705                	jal	94 <array_add+0x2>
     176:	6914                	flw	fa3,16(a0)
    int pola[size_a];
     178:	0000                	unimp
    int polb[size_b];
     17a:	0c00                	addi	s0,sp,528
     17c:	b60c                	fsd	fa1,40(a2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     17e:	0001                	nop
     180:	0500                	addi	s0,sp,640
     182:	00691b37          	lui	s6,0x691
    int line[size_b][size_a + size_b];
     186:	0000                	unimp
    int pola[size_a];
     188:	0f10                	addi	a2,sp,912
     18a:	785f 0500 0b38      	0xb380500785f
            line[i][j] = 0;   
     190:	019c                	addi	a5,sp,192
     192:	0000                	unimp
  for(j = 0; j < size_a + size_b -1; ++j) {
     194:	0014                	0x14
	product[j] = 0;
     196:	0410                	addi	a2,sp,512
     198:	013c                	addi	a5,sp,136
     19a:	0000                	unimp
     19c:	1809                	addi	a6,a6,-30
  for(j = 0; j < size_a + size_b -1; ++j) {
     19e:	0001                	nop
     1a0:	ac00                	fsd	fs0,24(s0)
    array_equ(pola,a,size_a);
     1a2:	0001                	nop
     1a4:	0a00                	addi	s0,sp,272
     1a6:	0075                	c.nop	29
     1a8:	0000                	unimp
     1aa:	0000                	unimp
     1ac:	700e                	flw	ft0,224(sp)
     1ae:	0005                	c.nop	1
     1b0:	2400                	fld	fs0,8(s0)
    array_mod(pola,mod,size_a);
     1b2:	3c05                	jal	fffffbe2 <_stack_start+0xfffefbe2>
     1b4:	2f08                	fld	fa0,24(a4)
     1b6:	0002                	c.slli64	zero
     1b8:	0c00                	addi	s0,sp,528
    array_equ(polb,b,size_b);
     1ba:	021f 0000 3e05      	0x3e050000021f
     1c0:	6909                	lui	s2,0x2
     1c2:	0000                	unimp
     1c4:	0000                	unimp
    array_mod(polb,mod,size_b);
     1c6:	5d0c                	lw	a1,56(a0)
     1c8:	0001                	nop
     1ca:	0500                	addi	s0,sp,640
     1cc:	0069093f 0c040000 	0xc0400000069093f
    if(star_mult == 1){
     1d4:	0000014b          	fnmsub.s	ft2,ft0,ft0,ft0,rne
     1d8:	4005                	c.li	zero,1
     1da:	6909                	lui	s2,0x2
     1dc:	0000                	unimp
     1de:	0800                	addi	s0,sp,16
     1e0:	d50c                	sw	a1,40(a0)
        for (j = size_b -1; j >= 0; j = j-1){
     1e2:	0002                	c.slli64	zero
     1e4:	0500                	addi	s0,sp,640
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e6:	0941                	addi	s2,s2,16
     1e8:	0069                	c.nop	26
            line[i][j] = 0;   
     1ea:	0000                	unimp
     1ec:	0c0c                	addi	a1,sp,528
         for (i = 0; i < size_b; ++i){
     1ee:	03e9                	addi	t2,t2,26
            line[i][j] = 0;   
     1f0:	0000                	unimp
     1f2:	4205                	li	tp,1
     1f4:	6909                	lui	s2,0x2
     1f6:	0000                	unimp
     1f8:	1000                	addi	s0,sp,32
         for (i = 0; i < size_b; ++i){
     1fa:	920c                	0x920c
     1fc:	0004                	0x4
	product[j] = 0;
     1fe:	0500                	addi	s0,sp,640
     200:	00690943          	fmadd.s	fs2,fs2,ft6,ft0,rne
     204:	0000                	unimp
     206:	0c14                	addi	a3,sp,528
  for(j = 0; j < size_a + size_b -1; ++j) {
     208:	0000012f          	0x12f
         for (i = 0; i < size_b; ++i){
     20c:	4405                	li	s0,1
     20e:	6909                	lui	s2,0x2
     210:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     212:	1800                	addi	s0,sp,48
     214:	320c                	fld	fa1,32(a2)
     216:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     218:	0500                	addi	s0,sp,640
        array_add(product, line[i], (size_a + size_b - 1));
     21a:	0945                	addi	s2,s2,17
     21c:	0069                	c.nop	26
     21e:	0000                	unimp
     220:	0c1c                	addi	a5,sp,528
        array_mod(line[i],mod,(size_a+size_b-1));
     222:	03ba                	slli	t2,t2,0xe
     224:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     226:	4605                	li	a2,1
     228:	6909                	lui	s2,0x2
    array_mod(product,mod,(size_a+size_b-1));
     22a:	0000                	unimp
     22c:	2000                	fld	fs0,0(s0)
     22e:	1100                	addi	s0,sp,160
     230:	0000000b          	0xb
}
     234:	0108                	addi	a0,sp,128
     236:	4f05                	li	t5,1
     238:	7408                	flw	fa0,40(s0)
     23a:	0002                	c.slli64	zero
     23c:	0c00                	addi	s0,sp,528
     23e:	000003ab          	0x3ab
     242:	5005                	c.li	zero,-31
     244:	740a                	flw	fs0,160(sp)
     246:	0002                	c.slli64	zero
     248:	0000                	unimp
     24a:	8f0c                	0x8f0c
     24c:	0005                	c.nop	1
     24e:	0500                	addi	s0,sp,640
     250:	0951                	addi	s2,s2,20
     252:	0274                	addi	a3,sp,268
     254:	0000                	unimp
     256:	1280                	addi	s0,sp,352
     258:	0646                	slli	a2,a2,0x11
     25a:	0000                	unimp
     25c:	5305                	li	t1,-31
                line[size_b-1-j][k] = pola[k]*polb[j];
     25e:	180a                	slli	a6,a6,0x22
     260:	0001                	nop
     262:	0000                	unimp
     264:	1201                	addi	tp,tp,-32
     266:	06a0                	addi	s0,sp,840
     268:	0000                	unimp
     26a:	5605                	li	a2,-31
     26c:	180a                	slli	a6,a6,0x22
            for (k = size_a-1; k >= 0; k = k-1 ){
     26e:	0001                	nop
                line[size_b-1-j][k] = pola[k]*polb[j];
     270:	0400                	addi	s0,sp,512
     272:	0001                	nop
     274:	1609                	addi	a2,a2,-30
            for (k = size_a-1; k >= 0; k = k-1 ){
     276:	0001                	nop
     278:	8400                	0x8400
        for (j = size_b -1; j >= 0; j = j-1){
     27a:	0002                	c.slli64	zero
     27c:	0a00                	addi	s0,sp,272
     27e:	0075                	c.nop	29
     280:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     282:	001f 2011 0004      	0x42011001f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     288:	9000                	0x9000
     28a:	0501                	addi	a0,a0,0
     28c:	0862                	slli	a6,a6,0x18
     28e:	000002c7          	fmsub.s	ft5,ft0,ft0,ft0,rne
     292:	b30c                	fsd	fa1,32(a4)
     294:	0006                	c.slli	zero,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     296:	0500                	addi	s0,sp,640
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     298:	02c71263          	bne	a4,a2,2bc <polymult2>
     29c:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     29e:	0c00                	addi	s0,sp,528
     2a0:	0241                	addi	tp,tp,16
        for (j = size_b -1; j >= 0; j = j-1){
     2a2:	0000                	unimp
     2a4:	6405                	lui	s0,0x1
     2a6:	6906                	flw	fs2,64(sp)
     2a8:	0000                	unimp
        array_mod(line[i],mod,(size_a+size_b-1));
     2aa:	0400                	addi	s0,sp,512
     2ac:	1a0c                	addi	a1,sp,304
        array_add(product, line[i], (size_a + size_b - 1));
     2ae:	0001                	nop
     2b0:	0500                	addi	s0,sp,640
     2b2:	0966                	slli	s2,s2,0x19
     2b4:	02cd                	addi	t0,t0,19
    for (i = 0; i < size_b; ++i){
     2b6:	0000                	unimp
     2b8:	0c08                	addi	a0,sp,528
     2ba:	0000000b          	0xb
    int line[size_b][size_a + size_b];
     2be:	6705                	lui	a4,0x1
     2c0:	2f1e                	fld	ft10,448(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c2:	0002                	c.slli64	zero
     2c4:	8800                	0x8800
     2c6:	1000                	addi	s0,sp,32
     2c8:	8404                	0x8404
     2ca:	0002                	c.slli64	zero
    int line[size_b][size_a + size_b];
     2cc:	0900                	addi	s0,sp,144
     2ce:	02dd                	addi	t0,t0,23
     2d0:	0000                	unimp
     2d2:	02dd                	addi	t0,t0,23
     2d4:	0000                	unimp
     2d6:	750a                	flw	fa0,160(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2d8:	0000                	unimp
     2da:	1f00                	addi	s0,sp,944
     2dc:	1000                	addi	s0,sp,32
     2de:	e304                	fsw	fs1,0(a4)
     2e0:	0002                	c.slli64	zero
     2e2:	1300                	addi	s0,sp,416
     2e4:	d40e                	sw	gp,40(sp)
     2e6:	0005                	c.nop	1
     2e8:	0800                	addi	s0,sp,16
    int line[size_b][size_a + size_b];
     2ea:	7a05                	lui	s4,0xfffe1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ec:	0c08                	addi	a0,sp,528
     2ee:	0c000003          	lb	zero,192(zero) # c0 <array_sub+0x6>
    int line[size_b][size_a + size_b];
     2f2:	0355                	addi	t1,t1,21
     2f4:	0000                	unimp
    int pola[size_a];
     2f6:	7b05                	lui	s6,0xfffe1
     2f8:	0c11                	addi	s8,s8,4
     2fa:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    int line[size_b][size_a + size_b];
     2fe:	4f0c                	lw	a1,24(a4)
    int pola[size_a];
     300:	0006                	c.slli	zero,0x1
     302:	0500                	addi	s0,sp,640
    int polb[size_b];
     304:	067c                	addi	a5,sp,780
     306:	0069                	c.nop	26
     308:	0000                	unimp
    int pola[size_a];
     30a:	0004                	0x4
    int polb[size_b];
     30c:	0410                	addi	a2,sp,512
     30e:	0038                	addi	a4,sp,8
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     310:	0000                	unimp
     312:	ae0e                	fsd	ft3,280(sp)
    int line[size_b][size_a + size_b];
     314:	0001                	nop
     316:	6800                	flw	fs0,16(s0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     318:	ba05                	j	fffffc48 <_stack_start+0xfffefc48>
    int pola[size_a];
     31a:	5508                	lw	a0,40(a0)
     31c:	0004                	0x4
    int polb[size_b];
     31e:	0f00                	addi	s0,sp,912
            line[i][j] = 0;
     320:	705f 0500 12bb      	0x12bb0500705f
 	product2[j] = 0;
     326:	030c                	addi	a1,sp,384
     328:	0000                	unimp
     32a:	0f00                	addi	s0,sp,912
     32c:	725f 0500 07bc      	0x7bc0500725f
    array_equ(pola,a,size_a);
     332:	0069                	c.nop	26
     334:	0000                	unimp
     336:	0f04                	addi	s1,sp,912
     338:	775f 0500 07bd      	0x7bd0500775f
    array_equ(polb,b,size_b);
     33e:	0069                	c.nop	26
     340:	0000                	unimp
    if(star_mult == 1){
     342:	0c08                	addi	a0,sp,528
     344:	0062                	c.slli	zero,0x18
     346:	0000                	unimp
     348:	be05                	j	fffffe78 <_stack_start+0xfffefe78>
     34a:	3f09                	jal	25c <polymult+0x134>
     34c:	0000                	unimp
     34e:	0c00                	addi	s0,sp,528
     350:	7c0c                	flw	fa1,56(s0)
     352:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
        for (j = size_b -1; j >= 0; j = j-1){
     356:	003f09bf 0f0e0000 	0xf0e0000003f09bf
            line[i][j] = 0;
     35e:	625f 0066 c005      	0xc0050066625f
     364:	e411                	bnez	s0,370 <polymult2+0xb4>
     366:	0002                	c.slli64	zero
     368:	1000                	addi	s0,sp,32
     36a:	590c                	lw	a1,48(a0)
        for (i = 0; i < size_b; ++i){
     36c:	0000                	unimp
     36e:	0500                	addi	s0,sp,640
 	product2[j] = 0;
     370:	07c1                	addi	a5,a5,16
     372:	0069                	c.nop	26
     374:	0000                	unimp
     376:	0c18                	addi	a4,sp,528
     378:	011f 0000 c805      	0xc8050000011f
        for (i = 0; i < size_b; ++i){
     37e:	160a                	slli	a2,a2,0x22
     380:	0001                	nop
     382:	1c00                	addi	s0,sp,560
        for (j = size_b -1; j >= 0; j = j-1){
     384:	850c                	0x850c
     386:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     388:	0500                	addi	s0,sp,640
        array_add(product2,line[i],size_a+size_b-1);
     38a:	1dca                	slli	s11,s11,0x32
     38c:	05d9                	addi	a1,a1,22
     38e:	0000                	unimp
     390:	0c20                	addi	s0,sp,536
    for(i=0;i<size_b;++i){
     392:	00000403          	lb	s0,0(zero) # 0 <__DYNAMIC>
}
     396:	cc05                	beqz	s0,3ce <polymult2+0x112>
     398:	031d                	addi	t1,t1,7
     39a:	0006                	c.slli	zero,0x1
     39c:	2400                	fld	fs0,8(s0)
     39e:	c40c                	sw	a1,8(s0)
     3a0:	0006                	c.slli	zero,0x1
     3a2:	0500                	addi	s0,sp,640
     3a4:	06270dcf          	fnmadd.q	fs11,fa4,ft2,ft0,rne
     3a8:	0000                	unimp
     3aa:	0c28                	addi	a0,sp,536
     3ac:	031f 0000 d005      	0xd0050000031f
     3b2:	4109                	li	sp,2
     3b4:	0006                	c.slli	zero,0x1
     3b6:	2c00                	fld	fs0,24(s0)
     3b8:	62755f0f          	0x62755f0f
     3bc:	0500                	addi	s0,sp,640
     3be:	02e411d3          	fadd.d	ft3,fs0,fa4,rtz
                line[size_b-1-j][k] = pola[k]*polb[j];
     3c2:	0000                	unimp
     3c4:	0f30                	addi	a2,sp,920
     3c6:	755f 0070 d405      	0xd4050070755f
     3cc:	0c12                	slli	s8,s8,0x4
     3ce:	38000003          	lb	zero,896(zero) # 380 <polymult2+0xc4>
     3d2:	72755f0f          	0x72755f0f
     3d6:	0500                	addi	s0,sp,640
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	07d5                	addi	a5,a5,21
     3da:	0069                	c.nop	26
        for (j = size_b -1; j >= 0; j = j-1){
     3dc:	0000                	unimp
     3de:	0c3c                	addi	a5,sp,536
     3e0:	073d                	addi	a4,a4,15
     3e2:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e4:	d805                	beqz	s0,314 <polymult2+0x58>
     3e6:	4711                	li	a4,4
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3e8:	0006                	c.slli	zero,0x1
     3ea:	4000                	lw	s0,0(s0)
     3ec:	6c0c                	flw	fa1,24(s0)
     3ee:	0006                	c.slli	zero,0x1
     3f0:	0500                	addi	s0,sp,640
     3f2:	11d9                	addi	gp,gp,-10
     3f4:	00000657          	0x657
            for (k = size_a-1; k >= 0; k = k-1 ){
     3f8:	6c5f0f43          	0x6c5f0f43
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3fc:	0062                	c.slli	zero,0x18
     3fe:	dc05                	beqz	s0,336 <polymult2+0x7a>
            for (k = size_a-1; k >= 0; k = k-1 ){
     400:	e411                	bnez	s0,40c <polymult2+0x150>
     402:	0002                	c.slli64	zero
        for (j = size_b -1; j >= 0; j = j-1){
     404:	4400                	lw	s0,8(s0)
     406:	670c                	flw	fa1,8(a4)
     408:	0005                	c.nop	1
     40a:	0500                	addi	s0,sp,640
        array_add(product2,line[i],size_a+size_b-1);
     40c:	07df 0069 0000      	0x6907df
     412:	0c4c                	addi	a1,sp,532
    for(i=0;i<size_b;++i){
     414:	01de                	slli	gp,gp,0x17
     416:	0000                	unimp
     418:	e005                	bnez	s0,438 <polydiv+0x1e>
    int v[size_N];
     41a:	900a                	c.add	zero,sp
     41c:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     41e:	5000                	lw	s0,32(s0)
    int v[size_N];
     420:	720c                	flw	fa1,32(a2)
     422:	0004                	0x4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     424:	0500                	addi	s0,sp,640
     426:	047312e3          	bne	t1,t2,c6a <ntru_deceypt+0x2>
     42a:	0000                	unimp
     42c:	0c54                	addi	a3,sp,532
     42e:	0575                	addi	a0,a0,29
     430:	0000                	unimp
     432:	e705                	bnez	a4,45a <polydiv+0x40>
     434:	300c                	fld	fa1,32(s0)
     436:	0001                	nop
     438:	5800                	lw	s0,48(s0)
     43a:	280c                	fld	fa1,16(s0)
     43c:	0004                	0x4
     43e:	0500                	addi	s0,sp,640
    int v[size_N];
     440:	0ee9                	addi	t4,t4,26
     442:	010a                	slli	sp,sp,0x2
     444:	0000                	unimp
    int q[size_N];
     446:	0c5c                	addi	a5,sp,532
     448:	0698                	addi	a4,sp,832
     44a:	0000                	unimp
    int num_temp[size_N];
     44c:	ea05                	bnez	a2,47c <polydiv+0x62>
     44e:	6909                	lui	s2,0x2
    int denum_temp[size_D];
     450:	0000                	unimp
     452:	6400                	flw	fs0,8(s0)
     454:	1400                	addi	s0,sp,544
     456:	00a8                	addi	a0,sp,72
    int num_temp[size_N];
     458:	0000                	unimp
    int denum_temp[size_D];
     45a:	00000473          	0x473
 if(size_N == 106) {
     45e:	7315                	lui	t1,0xfffe5
     460:	0004                	0x4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     462:	1500                	addi	s0,sp,672
     464:	0116                	slli	sp,sp,0x5
     466:	0000                	unimp
     468:	c715                	beqz	a4,494 <polydiv+0x7a>
     46a:	0005                	c.nop	1
    int v[size_N];
     46c:	1500                	addi	s0,sp,672
     46e:	0069                	c.nop	26
    int denum_temp[size_D];
     470:	0000                	unimp
     472:	1000                	addi	s0,sp,32
     474:	7e04                	flw	fs1,56(a2)
 if(size_N == 106) {
     476:	0004                	0x4
     478:	1600                	addi	s0,sp,800
     array_equ(num_temp, num, size_N - 1);   // 105 elemani ücer ücer yap...
     47a:	00000473          	0x473
     47e:	00061f17          	auipc	t5,0x61
     482:	2800                	fld	fs0,16(s0)
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     484:	0504                	addi	s1,sp,640
     486:	0265                	addi	tp,tp,25
        array_mod(num_temp, mod, size_N - 1);
     488:	c708                	sw	a0,8(a4)
     48a:	0005                	c.nop	1
     48c:	1800                	addi	s0,sp,48
     48e:	000003c7          	fmsub.s	ft7,ft0,ft0,ft0,rne
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     492:	6705                	lui	a4,0x1
        array_mod(num_temp, mod, size_N - 1);
     494:	0702                	c.slli64	a4
        while(num_temp[size_N - 1] < 0){
     496:	0069                	c.nop	26
     498:	0000                	unimp
     49a:	1800                	addi	s0,sp,48
     49c:	0331                	addi	t1,t1,12
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     49e:	0000                	unimp
     4a0:	6c05                	lui	s8,0x1
     4a2:	0b02                	c.slli64	s6
     4a4:	000006b3          	add	a3,zero,zero
     array_equ(num_temp, num, size_N );
     4a8:	1804                	addi	s1,sp,48
     4aa:	0105                	addi	sp,sp,1
     4ac:	0000                	unimp
     4ae:	6c05                	lui	s8,0x1
        array_mod(num_temp, mod, size_N);
     4b0:	1402                	slli	s0,s0,0x20
     4b2:	000006b3          	add	a3,zero,zero
     4b6:	1808                	addi	a0,sp,48
    array_equ(denum_temp,denum,size_D);
     4b8:	072c                	addi	a1,sp,904
     4ba:	0000                	unimp
     4bc:	6c05                	lui	s8,0x1
     4be:	1e02                	slli	t3,t3,0x20
    array_mod(denum_temp,mod,size_D);
     4c0:	000006b3          	add	a3,zero,zero
     4c4:	180c                	addi	a1,sp,48
     4c6:	023c                	addi	a5,sp,264
    for (i = 0; i < size_N; ++i){
     4c8:	0000                	unimp
     4ca:	6e05                	lui	t3,0x1
     4cc:	0802                	c.slli64	a6
    for (i = size_D-1; i >= 0; i = i-1){
     4ce:	0069                	c.nop	26
     4d0:	0000                	unimp
     4d2:	1810                	addi	a2,sp,48
     4d4:	01f2                	slli	gp,gp,0x1c
     4d6:	0000                	unimp
     4d8:	6f05                	lui	t5,0x1
    for (i = 0; i < size_N; ++i){
     4da:	0802                	c.slli64	a6
     4dc:	000008b3          	add	a7,zero,zero
    for (u = 0; u < mod; ++u){
     4e0:	1814                	addi	a3,sp,48
     4e2:	067f                	0x67f
     4e4:	0000                	unimp
     4e6:	7205                	lui	tp,0xfffe1
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4e8:	0702                	c.slli64	a4
     4ea:	0069                	c.nop	26
     4ec:	0000                	unimp
     4ee:	1830                	addi	a2,sp,56
        q[i] = 0;
     4f0:	060e                	slli	a2,a2,0x3
     4f2:	0000                	unimp
     4f4:	7305                	lui	t1,0xfffe1
     4f6:	1602                	slli	a2,a2,0x20
        v[i] = 0;
     4f8:	08c8                	addi	a0,sp,84
        q[i] = 0;
     4fa:	0000                	unimp
     4fc:	1834                	addi	a3,sp,56
        v[i] = 0;
     4fe:	0326                	slli	t1,t1,0x9
     500:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     502:	7505                	lui	a0,0xfffe1
     504:	0702                	c.slli64	a4
        if( denum_temp[i] != 0 )
     506:	0069                	c.nop	26
    for (i = size_D-1; i >= 0; i = i-1){
     508:	0000                	unimp
     50a:	1838                	addi	a4,sp,56
        if ( (b_N*u)%mod == 1 )
     50c:	0396                	slli	t2,t2,0x5
     50e:	0000                	unimp
     510:	7705                	lui	a4,0xfffe1
     512:	0a02                	c.slli64	s4
     514:	08d9                	addi	a7,a7,22
    for (u = 0; u < mod; ++u){
     516:	0000                	unimp
     518:	183c                	addi	a5,sp,56
        if( num_temp[i] != 0 )
     51a:	00000143          	fmadd.s	ft2,ft0,ft0,ft0,rne
    for (i = size_N-1; i >= 0; i = i-1){
     51e:	7a05                	lui	s4,0xfffe1
     520:	1302                	slli	t1,t1,0x20
     522:	0196                	slli	gp,gp,0x5
     524:	0000                	unimp
     526:	1840                	addi	s0,sp,52
     528:	0180                	addi	s0,sp,192
    while (d >= d2){
     52a:	0000                	unimp
     52c:	7b05                	lui	s6,0xfffe1
 if(size_N == 106) {
     52e:	0702                	c.slli64	a4
     530:	0069                	c.nop	26
     532:	0000                	unimp
     534:	1844                	addi	s1,sp,52
     array_equ(result, q, size_N - 1);   // 105 elemani ücer ücer yap...
     536:	029f 0000 7c05      	0x7c050000029f
     53c:	1302                	slli	t1,t1,0x20
     53e:	0196                	slli	gp,gp,0x5
     540:	0000                	unimp
     542:	1848                	addi	a0,sp,52
     544:	0000035b          	0x35b
     result[size_N - 1] = q[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     548:	7d05                	lui	s10,0xfffe1
     54a:	1402                	slli	s0,s0,0x20
     54c:	08df 0000 184c      	0x184c000008df
     552:	053c                	addi	a5,sp,648
     554:	0000                	unimp
     556:	8005                	srli	s0,s0,0x1
    for(i = size_N; i < (2*size_N); ++i){
     558:	0702                	c.slli64	a4
     55a:	0069                	c.nop	26
     55c:	0000                	unimp
     55e:	1850                	addi	a2,sp,52
        result[i] = num_temp[i-size_N];
     560:	05a6                	slli	a1,a1,0x9
     562:	0000                	unimp
     564:	8105                	srli	a0,a0,0x1
     566:	0902                	c.slli64	s2
    for(i = size_N; i < (2*size_N); ++i){
     568:	000005c7          	fmsub.s	fa1,ft0,ft0,ft0,rne
}
     56c:	1854                	addi	a3,sp,52
     56e:	00000537          	lui	a0,0x0
     572:	a405                	j	792 <ext_euclid+0x94>
     574:	0702                	c.slli64	a4
     576:	088e                	slli	a7,a7,0x3
     578:	0000                	unimp
     57a:	1958                	addi	a4,sp,180
     57c:	0420                	addi	s0,sp,520
     57e:	0000                	unimp
     580:	a805                	j	5b0 <polydiv+0x196>
     582:	1302                	slli	t1,t1,0x20
     584:	000002c7          	fmsub.s	ft5,ft0,ft0,ft0,rne
     588:	0148                	addi	a0,sp,132
     58a:	f819                	bnez	s0,4a0 <polydiv+0x86>
     58c:	0002                	c.slli64	zero
     58e:	0500                	addi	s0,sp,640
     590:	02a9                	addi	t0,t0,10
     592:	8412                	mv	s0,tp
     594:	0002                	c.slli64	zero
        v[(d-d2)] = u*r_d;
     596:	4c00                	lw	s0,24(s0)
     598:	1901                	addi	s2,s2,-32
     59a:	02df 0000 ad05      	0xad05000002df
     5a0:	0c02                	c.slli64	s8
     5a2:	08f0                	addi	a2,sp,92
        if(size_N == 106) {
     5a4:	0000                	unimp
     5a6:	02dc                	addi	a5,sp,324
     5a8:	eb19                	bnez	a4,5be <polydiv+0x1a4>
     5aa:	0005                	c.nop	1
            array_mod(v, mod, size_N - 1);
     5ac:	0500                	addi	s0,sp,640
     5ae:	02b2                	slli	t0,t0,0xc
     5b0:	7410                	flw	fa2,40(s0)
     5b2:	0006                	c.slli	zero,0x1
     5b4:	e000                	fsw	fs0,0(s0)
            while(v[size_N - 1] < 0){
     5b6:	1902                	slli	s2,s2,0x20
     5b8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     5bc:	b405                	j	ffffffdc <_stack_start+0xfffeffdc>
            v[size_N - 1] = v[size_N - 1] % mod;
     5be:	0a02                	c.slli64	s4
     5c0:	08fc                	addi	a5,sp,92
     5c2:	0000                	unimp
     5c4:	02ec                	addi	a1,sp,332
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5c6:	1000                	addi	s0,sp,32
     5c8:	cd04                	sw	s1,24(a0)
     5ca:	0005                	c.nop	1
     5cc:	0200                	addi	s0,sp,256
     5ce:	0801                	addi	a6,a6,0
     5d0:	000005b7          	lui	a1,0x0
        if(size_N == 106) {
     5d4:	cd16                	sw	t0,152(sp)
     5d6:	0005                	c.nop	1
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5d8:	1000                	addi	s0,sp,32
        if(size_N == 106) {
     5da:	5504                	lw	s1,40(a0)
     5dc:	0004                	0x4
            array_mod(product, mod, size_N - 1);
     5de:	1400                	addi	s0,sp,544
     5e0:	00a8                	addi	a0,sp,72
     5e2:	0000                	unimp
     5e4:	05fd                	addi	a1,a1,31
            while(product[size_N - 1] < 0){
     5e6:	0000                	unimp
     5e8:	7315                	lui	t1,0xfffe5
     5ea:	0004                	0x4
     5ec:	1500                	addi	s0,sp,672
            product[size_N - 1] = product[size_N - 1] % mod;
     5ee:	0116                	slli	sp,sp,0x5
     5f0:	0000                	unimp
            array_sub(num_temp, product, size_N - 1);   // 105 elemani ücer ücer yap...
     5f2:	fd15                	bnez	a0,52e <polydiv+0x114>
     5f4:	0005                	c.nop	1
     5f6:	1500                	addi	s0,sp,672
     5f8:	0069                	c.nop	26
            product[size_N - 1] = product[size_N - 1] % mod;
     5fa:	0000                	unimp
     5fc:	1000                	addi	s0,sp,32
            array_sub(num_temp, product, size_N - 1);   // 105 elemani ücer ücer yap...
     5fe:	d404                	sw	s1,40(s0)
            num_temp[size_N - 1] = num_temp[size_N - 1] - product[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     600:	0005                	c.nop	1
     602:	1000                	addi	s0,sp,32
     604:	df04                	sw	s1,56(a4)
     606:	0005                	c.nop	1
            array_mod(num_temp, mod, size_N - 1);
     608:	1400                	addi	s0,sp,544
     60a:	009c                	addi	a5,sp,64
     60c:	0000                	unimp
            num_temp[size_N - 1] = num_temp[size_N - 1] - product[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     60e:	00000627          	0x627
            array_mod(num_temp, mod, size_N - 1);
     612:	7315                	lui	t1,0xfffe5
            num_temp[size_N - 1] = num_temp[size_N - 1] - product[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     614:	0004                	0x4
     616:	1500                	addi	s0,sp,672
            array_mod(num_temp, mod, size_N - 1);
     618:	0116                	slli	sp,sp,0x5
            while(num_temp[size_N - 1] < 0){
     61a:	0000                	unimp
     61c:	9c15                	0x9c15
     61e:	0000                	unimp
     620:	1500                	addi	s0,sp,672
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     622:	0069                	c.nop	26
     624:	0000                	unimp
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     626:	1000                	addi	s0,sp,32
     628:	0904                	addi	s1,sp,144
     62a:	0006                	c.slli	zero,0x1
     62c:	1400                	addi	s0,sp,544
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     62e:	0069                	c.nop	26
     630:	0000                	unimp
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     632:	0641                	addi	a2,a2,16
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     634:	0000                	unimp
     636:	7315                	lui	t1,0xfffe5
     638:	0004                	0x4
     63a:	1500                	addi	s0,sp,672
            array_mod(q, mod, size_N - 1);
     63c:	0116                	slli	sp,sp,0x5
     63e:	0000                	unimp
     640:	1000                	addi	s0,sp,32
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     642:	2d04                	fld	fs1,24(a0)
            array_mod(q, mod, size_N - 1);
     644:	0006                	c.slli	zero,0x1
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     646:	0900                	addi	s0,sp,144
     648:	0038                	addi	a4,sp,8
            array_mod(q, mod, size_N - 1);
     64a:	0000                	unimp
            while(q[size_N - 1] < 0){
     64c:	00000657          	0x657
     650:	750a                	flw	fa0,160(sp)
     652:	0000                	unimp
            q[size_N - 1] = q[size_N - 1] % mod;
     654:	0200                	addi	s0,sp,256
     656:	0900                	addi	s0,sp,144
     658:	0038                	addi	a4,sp,8
     65a:	0000                	unimp
     65c:	00000667          	jalr	a2,zero # 0 <__DYNAMIC>
                v[size_N - 1] = v[size_N - 1]+mod;
     660:	750a                	flw	fa0,160(sp)
     662:	0000                	unimp
     664:	0000                	unimp
            array_mod(v, mod, size_N);
     666:	0600                	addi	s0,sp,768
     668:	01d0                	addi	a2,sp,196
     66a:	0000                	unimp
     66c:	2405                	jal	88c <ext_euclid+0x18e>
     66e:	1a01                	addi	s4,s4,-32
                product[size_N - 1] = product[size_N - 1]+mod;
     670:	0312                	slli	t1,t1,0x4
     672:	0000                	unimp
     674:	db1a                	sw	t1,180(sp)
     676:	0005                	c.nop	1
            array_mod(product, mod, size_N);
     678:	0c00                	addi	s0,sp,528
     67a:	2805                	jal	6aa <polydiv+0x290>
     67c:	0801                	addi	a6,a6,0
            array_sub(num_temp, product, size_N );
     67e:	06ad                	addi	a3,a3,11
     680:	0000                	unimp
     682:	b318                	fsd	fa4,32(a4)
     684:	0006                	c.slli	zero,0x1
            array_mod(num_temp, mod, size_N);
     686:	0500                	addi	s0,sp,640
     688:	012a                	slli	sp,sp,0xa
     68a:	ad11                	j	c9e <ntru_deceypt+0x36>
     68c:	0006                	c.slli	zero,0x1
            array_add(q, v, size_N );
     68e:	0000                	unimp
     690:	8118                	0x8118
     692:	0005                	c.nop	1
     694:	0500                	addi	s0,sp,640
            array_mod(q, mod, size_N);
     696:	6907012b          	0x6907012b
     69a:	0000                	unimp
     69c:	0400                	addi	s0,sp,512
    int v[size_N];
     69e:	1918                	addi	a4,sp,176
        for (i = size_N-1; i >= 0; i = i-1){
     6a0:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
     6a4:	012c                	addi	a1,sp,136
     6a6:	0006b30b          	0x6b30b
     6aa:	0800                	addi	s0,sp,16
     6ac:	1000                	addi	s0,sp,32
     6ae:	7404                	flw	fs1,40(s0)
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     6b0:	0006                	c.slli	zero,0x1
     6b2:	1000                	addi	s0,sp,32
     6b4:	6704                	flw	fs1,8(a4)
     6b6:	0006                	c.slli	zero,0x1
                q[size_N - 1] = q[size_N - 1]+mod;
     6b8:	1a00                	addi	s0,sp,304
     6ba:	0178                	addi	a4,sp,140
     6bc:	0000                	unimp
     6be:	050e                	slli	a0,a0,0x3
            if( num_temp[i] != 0 )
     6c0:	0144                	addi	s1,sp,132
        for (i = size_N-1; i >= 0; i = i-1){
     6c2:	f208                	fsw	fa0,32(a2)
     6c4:	0006                	c.slli	zero,0x1
            v[i] = 0;
     6c6:	1800                	addi	s0,sp,48
     6c8:	06a8                	addi	a0,sp,840
     6ca:	0000                	unimp
     6cc:	4505                	li	a0,1
     6ce:	1201                	addi	tp,tp,-32
        for (i = 0; i < size_N; ++i){
     6d0:	06f2                	slli	a3,a3,0x1c
     6d2:	0000                	unimp
     6d4:	1800                	addi	s0,sp,48
     6d6:	041a                	slli	s0,s0,0x6
     array_equ(result, q, size_N );
     6d8:	0000                	unimp
     6da:	4605                	li	a2,1
     6dc:	1201                	addi	tp,tp,-32
     6de:	06f2                	slli	a3,a3,0x1c
     6e0:	0000                	unimp
     6e2:	1806                	slli	a6,a6,0x21
     6e4:	044d                	addi	s0,s0,19
     6e6:	0000                	unimp
     6e8:	4705                	li	a4,1
        result[i] = num_temp[i-size_N];
     6ea:	1201                	addi	tp,tp,-32
     6ec:	0046                	c.slli	zero,0x11
     6ee:	0000                	unimp
     6f0:	000c                	0xc
     6f2:	4609                	li	a2,2
     6f4:	0000                	unimp
     6f6:	0200                	addi	s0,sp,256
    for(i = size_N; i < (2*size_N); ++i){
     6f8:	0a000007          	0xa000007
     6fc:	0075                	c.nop	29
    int ri_2[size]; // MX-ring poly, a
     6fe:	0000                	unimp
     700:	0002                	c.slli64	zero
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     702:	8505d01b          	0x8505d01b
    int ri_2[size]; // MX-ring poly, a
     706:	0702                	c.slli64	a4
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     708:	00000817          	auipc	a6,0x0
     70c:	7218                	flw	fa4,32(a2)
     70e:	0006                	c.slli	zero,0x1
     710:	0500                	addi	s0,sp,640
     712:	75180287          	0x75180287
     716:	0000                	unimp
     718:	0000                	unimp
     71a:	f318                	fsw	fa4,32(a4)
     71c:	0005                	c.nop	1
     71e:	0500                	addi	s0,sp,640
     720:	0288                	addi	a0,sp,320
     722:	c712                	sw	tp,140(sp)
    int ri_2[size]; // MX-ring poly, a
     724:	0005                	c.nop	1
     726:	0400                	addi	s0,sp,512
     728:	a118                	fsd	fa4,0(a0)
    int ri_1[size]; // f-random poly, f[N] = 0, b
     72a:	0001                	nop
     72c:	0500                	addi	s0,sp,640
     72e:	0289                	addi	t0,t0,2
    int ri[size];
     730:	1710                	addi	a2,sp,928
     732:	0008                	0x8
     734:	0800                	addi	s0,sp,16
    int ti_1[size]; // ti_1[0] = 1
     736:	0c18                	addi	a4,sp,528
     738:	0005                	c.nop	1
     73a:	0500                	addi	s0,sp,640
    int ti[size];
     73c:	028a                	slli	t0,t0,0x2
     73e:	0001ac17          	auipc	s8,0x1a
    int qi_1[size];
     742:	2400                	fld	fs0,8(s0)
     744:	3818                	fld	fa4,48(s0)
     746:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
    int temp[size];
     74a:	690f028b          	0x690f028b
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     74e:	0000                	unimp
     750:	4800                	lw	s0,16(s0)
    int ri_2[size]; // MX-ring poly, a
     752:	ae18                	fsd	fa4,24(a2)
     754:	0006                	c.slli	zero,0x1
    int temp[size];
     756:	0500                	addi	s0,sp,640
    for (i = 0; i < size; ++i) {
     758:	028c                	addi	a1,sp,320
        ti_2[i] = 0;
     75a:	622c                	flw	fa1,64(a2)
     75c:	0000                	unimp
     75e:	5000                	lw	s0,32(s0)
     760:	3a18                	fld	fa4,48(a2)
    for (i = 0; i < size; ++i) {
     762:	0000                	unimp
     764:	0500                	addi	s0,sp,640
    array_equ(ri_2,polyR,size);
     766:	028d                	addi	t0,t0,3
     768:	b91a                	fsd	ft6,176(sp)
     76a:	0006                	c.slli	zero,0x1
     76c:	5800                	lw	s0,48(s0)
    array_equ(ri_1,polyf,size);
     76e:	c818                	sw	a4,16(s0)
     770:	0002                	c.slli64	zero
     772:	0500                	addi	s0,sp,640
     774:	028e                	slli	t0,t0,0x3
    ti_1[0] = 1;
     776:	0a16                	slli	s4,s4,0x5
     778:	0001                	nop
     77a:	6800                	flw	fs0,16(s0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     77c:	0018                	0x18
     77e:	0006                	c.slli	zero,0x1
     780:	0500                	addi	s0,sp,640
     782:	0a16028f          	0xa16028f
    array_equ(ti,ti_2,size);
     786:	0001                	nop
     788:	7000                	flw	fs0,32(s0)
     78a:	1918                	addi	a4,sp,176
    array_mod(ri_2,mod,N+1);
     78c:	0000                	unimp
     78e:	0500                	addi	s0,sp,640
     790:	0290                	addi	a2,sp,320
     792:	0a16                	slli	s4,s4,0x5
    array_mod(ri_1,mod,N+1);
     794:	0001                	nop
     796:	7800                	flw	fs0,48(s0)
     798:	4c18                	lw	a4,24(s0)
     79a:	0005                	c.nop	1
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     79c:	0500                	addi	s0,sp,640
     79e:	0291                	addi	t0,t0,4
     7a0:	2710                	fld	fa2,8(a4)
     7a2:	0008                	0x8
     7a4:	8000                	0x8000
     7a6:	3f18                	fld	fa4,56(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7a8:	0000                	unimp
     7aa:	0500                	addi	s0,sp,640
     7ac:	0292                	slli	t0,t0,0x4
     7ae:	3710                	fld	fa2,40(a4)
     7b0:	0008                	0x8
     7b2:	8800                	0x8800
    array_equ(temp,ri_2,size);
     7b4:	c718                	sw	a4,8(a4)
     7b6:	0005                	c.nop	1
     7b8:	0500                	addi	s0,sp,640
     7ba:	690f0293          	addi	t0,t5,1680 # 1690 <result+0x8>
    array_sub(temp,ri,size);
     7be:	0000                	unimp
     7c0:	a000                	fsd	fs0,0(s0)
     7c2:	9518                	0x9518
    array_mod(temp,mod,size);
     7c4:	0000                	unimp
     7c6:	0500                	addi	s0,sp,640
     7c8:	0294                	addi	a3,sp,320
     7ca:	0a16                	slli	s4,s4,0x5
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7cc:	0001                	nop
     7ce:	a400                	fsd	fs0,8(s0)
     7d0:	e918                	fsw	fa4,16(a0)
     7d2:	0002                	c.slli64	zero
     7d4:	0500                	addi	s0,sp,640
     7d6:	0295                	addi	t0,t0,5
     7d8:	0a16                	slli	s4,s4,0x5
    array_equ(qi_1,res1,size);
     7da:	0001                	nop
     7dc:	ac00                	fsd	fs0,24(s0)
     7de:	5018                	lw	a4,32(s0)
    array_mod(qi_1,mod,size);
     7e0:	0002                	c.slli64	zero
     7e2:	0500                	addi	s0,sp,640
     7e4:	0296                	slli	t0,t0,0x5
     7e6:	0a16                	slli	s4,s4,0x5
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7e8:	0001                	nop
     7ea:	b400                	fsd	fs0,40(s0)
     7ec:	6d18                	flw	fa4,24(a0)
     7ee:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
     7f2:	0a160297          	auipc	t0,0xa160
     7f6:	0001                	nop
    array_equ(temp,res2,size);
     7f8:	bc00                	fsd	fs0,56(s0)
     7fa:	b718                	fsd	fa4,40(a4)
     7fc:	0002                	c.slli64	zero
    array_mod(temp,mod,size);
     7fe:	0500                	addi	s0,sp,640
     800:	0298                	addi	a4,sp,320
     802:	0a16                	slli	s4,s4,0x5
     804:	0001                	nop
    array_equ(ti,ti_2,size);
     806:	c400                	sw	s0,8(s0)
     808:	c518                	sw	a4,8(a0)
     80a:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
    array_sub(ti,temp,size);
     80e:	0299                	addi	t0,t0,6
     810:	6908                	flw	fa0,16(a0)
     812:	0000                	unimp
     814:	cc00                	sw	s0,24(s0)
    array_mod(ti,mod,size);
     816:	0900                	addi	s0,sp,144
     818:	05cd                	addi	a1,a1,19
     81a:	0000                	unimp
     81c:	00000827          	0x827
array_equ(ri_2,ri_1,size);
     820:	750a                	flw	fa0,160(sp)
     822:	0000                	unimp
     824:	1900                	addi	s0,sp,176
array_equ(ri_1,ri,size);
     826:	0900                	addi	s0,sp,144
     828:	05cd                	addi	a1,a1,19
     82a:	0000                	unimp
     82c:	00000837          	lui	a6,0x0
array_equ(ti_2,ti_1,size);
     830:	750a                	flw	fa0,160(sp)
     832:	0000                	unimp
     834:	0700                	addi	s0,sp,896
array_equ(ti_1,ti,size);
     836:	0900                	addi	s0,sp,144
     838:	05cd                	addi	a1,a1,19
     83a:	0000                	unimp
     83c:	00000847          	fmsub.s	fa6,ft0,ft0,ft0,rne
        for (i = 0; i < N + 1; ++i) {
     840:	750a                	flw	fa0,160(sp)
     842:	0000                	unimp
     844:	1700                	addi	s0,sp,928
    while (controlR != 0) {
     846:	1b00                	addi	s0,sp,432
     848:	05f0                	addi	a2,sp,716
        for (j = 0; j < mod; ++j) {
     84a:	029e                	slli	t0,t0,0x7
            if (((ri_2[0] * j) % mod) == 1)
     84c:	00086e07          	0x86e07
        for (j = 0; j < mod; ++j) {
     850:	1800                	addi	s0,sp,48
     852:	0166                	slli	sp,sp,0x19
     854:	0000                	unimp
     856:	a105                	j	c76 <ntru_deceypt+0xe>
     858:	1b02                	slli	s6,s6,0x20
        for (i = 0; i < N + 1; ++i) {
     85a:	086e                	slli	a6,a6,0x1b
     85c:	0000                	unimp
    }
     85e:	1800                	addi	s0,sp,48
     860:	0734                	addi	a3,sp,904
     862:	0000                	unimp
     864:	a205                	j	984 <generate_keys+0x96>
     866:	1802                	slli	a6,a6,0x20
     868:	087e                	slli	a6,a6,0x1f
     86a:	0000                	unimp
     86c:	0078                	addi	a4,sp,12
     86e:	0c09                	addi	s8,s8,2
     870:	7e000003          	lb	zero,2016(zero) # 7e0 <ext_euclid+0xe2>
     874:	0008                	0x8
     876:	0a00                	addi	s0,sp,272
     878:	0075                	c.nop	29
     87a:	0000                	unimp
     87c:	001d                	c.nop	7
     87e:	7509                	lui	a0,0xfffe2
     880:	0000                	unimp
     882:	8e00                	0x8e00
     884:	0008                	0x8
     886:	0a00                	addi	s0,sp,272
        ti_2[i] = 0;
     888:	0075                	c.nop	29
     88a:	0000                	unimp
     88c:	001d                	c.nop	7
     88e:	f01c                	fsw	fa5,32(s0)
        ti_1[i] = 0;
     890:	8305                	srli	a4,a4,0x1
        ti_2[i] = 0;
     892:	0302                	c.slli64	t1
     894:	000008b3          	add	a7,zero,zero
        ti_1[i] = 0;
     898:	1f1d                	addi	t5,t5,-25
    for (i = 0; i < size; ++i) {
     89a:	0006                	c.slli	zero,0x1
     89c:	0500                	addi	s0,sp,640
            ri[i - (N + 1)] = res[i];
     89e:	029a                	slli	t0,t0,0x6
     8a0:	0007020b          	0x7020b
     8a4:	1d00                	addi	s0,sp,688
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8a6:	0525                	addi	a0,a0,9
     8a8:	0000                	unimp
            ri[i - (N + 1)] = res[i];
     8aa:	a305                	j	dca <memcpy+0x24>
     8ac:	0b02                	c.slli64	s6
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8ae:	00000847          	fmsub.s	fa6,ft0,ft0,ft0,rne
              qi_1[i] = 0;
     8b2:	0900                	addi	s0,sp,144
     8b4:	05cd                	addi	a1,a1,19
     8b6:	0000                	unimp
            controlR += ri[i];
     8b8:	000008c3          	fmadd.s	fa7,ft0,ft0,ft0,rne
              qi_1[i] = 0;
     8bc:	750a                	flw	fa0,160(sp)
     8be:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8c0:	1800                	addi	s0,sp,48
            controlR += ri[i];
     8c2:	1e00                	addi	s0,sp,816
        for (i = 0; i < N + 1; ++i) {
     8c4:	06b9                	addi	a3,a3,14
            if (((ri_2[0] * j) % mod) == 1)
     8c6:	0000                	unimp
     8c8:	0410                	addi	a2,sp,512
     8ca:	000008c3          	fmadd.s	fa7,ft0,ft0,ft0,rne
     8ce:	d91f 0008 1500      	0x15000008d91f
     8d4:	00000473          	0x473
        for (j = 0; j < mod; ++j) {
     8d8:	1000                	addi	s0,sp,32
            ti_2[i] = (ti_2[i] * j) % mod;
     8da:	ce04                	sw	s1,24(a2)
        for (i = 0; i < N + 1; ++i) {
     8dc:	0008                	0x8
     8de:	1000                	addi	s0,sp,32
            ti_2[i] = (ti_2[i] * j) % mod;
     8e0:	9604                	0x9604
     8e2:	0001                	nop
     8e4:	1f00                	addi	s0,sp,944
     8e6:	08f0                	addi	a2,sp,92
     8e8:	0000                	unimp
     8ea:	6915                	lui	s2,0x5
        for (i = 0; i < N + 1; ++i) {
     8ec:	0000                	unimp
int* generate_keys(int N, int p, int q){
     8ee:	0000                	unimp
     8f0:	0410                	addi	a2,sp,512
     8f2:	08f6                	slli	a7,a7,0x1d
     8f4:	0000                	unimp
     8f6:	0410                	addi	a2,sp,512
     8f8:	08e5                	addi	a7,a7,25
     8fa:	0000                	unimp
     8fc:	6709                	lui	a4,0x2
     8fe:	0006                	c.slli	zero,0x1
     900:	0c00                	addi	s0,sp,528
     902:	0009                	c.nop	2
     904:	0a00                	addi	s0,sp,272
     906:	0075                	c.nop	29
     908:	0000                	unimp
     90a:	0002                	c.slli64	zero
     90c:	8620                	0x8620
     90e:	0004                	0x4
     910:	0500                	addi	s0,sp,640
     912:	73170333          	0x73170333
     916:	0004                	0x4
     918:	2000                	fld	fs0,0(s0)
     91a:	047f                	0x47f
     91c:	0000                	unimp
     91e:	3405                	jal	33e <polymult2+0x82>
     920:	04791d03          	lh	s10,71(s2) # 5047 <_stack_len+0x1047>
     924:	0000                	unimp
     926:	00052f03          	lw	t5,0(a0) # fffe2000 <_stack_start+0xfffd2000>
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     92a:	0700                	addi	s0,sp,896
     92c:	1318                	addi	a4,sp,416
     92e:	002c                	addi	a1,sp,8
     930:	0000                	unimp
     932:	2605                	jal	c52 <ntru_encyrpt+0x72>
     934:	0009                	c.nop	2
     936:	2100                	fld	fs0,0(a0)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     938:	0228                	addi	a0,sp,264
     93a:	0000                	unimp
     93c:	6708                	flw	fa0,8(a4)
     93e:	c70e                	sw	gp,140(sp)
     940:	0005                	c.nop	1
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     942:	0900                	addi	s0,sp,144
     944:	0069                	c.nop	26
     946:	0000                	unimp
     948:	00000953          	fadd.s	fs2,ft0,ft0,rne
     94c:	750a                	flw	fa0,160(sp)
     94e:	0000                	unimp
     950:	9500                	0x9500
     952:	2200                	fld	fs0,0(a2)
     954:	0655                	addi	a2,a2,21
     956:	0000                	unimp
     958:	0601                	addi	a2,a2,0
     95a:	430c                	lw	a1,0(a4)
     95c:	0009                	c.nop	2
     95e:	0500                	addi	s0,sp,640
     960:	0011d803          	lhu	a6,1(gp)
     964:	2200                	fld	fs0,0(a2)
     966:	0301                	addi	t1,t1,0
     968:	0000                	unimp
     96a:	0701                	addi	a4,a4,0
     96c:	430c                	lw	a1,0(a4)
     96e:	0009                	c.nop	2
     970:	0500                	addi	s0,sp,640
     972:	00143003          	0x143003
     976:	2200                	fld	fs0,0(a2)
     978:	0144                	addi	s1,sp,132
     97a:	0000                	unimp
     97c:	0801                	addi	a6,a6,0
     97e:	430c                	lw	a1,0(a4)
     980:	0009                	c.nop	2
     982:	0500                	addi	s0,sp,640
     984:	00168803          	lb	a6,1(a3)
     988:	0900                	addi	s0,sp,144
     98a:	0069                	c.nop	26
     98c:	0000                	unimp
     98e:	0999                	addi	s3,s3,6
     990:	0000                	unimp
     992:	750a                	flw	fa0,160(sp)
     994:	0000                	unimp
     996:	6300                	flw	fs0,0(a4)
     998:	2200                	fld	fs0,0(a2)
     99a:	0210                	addi	a2,sp,256
     99c:	0000                	unimp
     99e:	0901                	addi	s2,s2,0
     9a0:	890c                	0x890c
     9a2:	0009                	c.nop	2
     9a4:	0500                	addi	s0,sp,640
     9a6:	0018e003          	0x18e003
     9aa:	0900                	addi	s0,sp,144
     9ac:	0069                	c.nop	26
    int polyR[N+1];
     9ae:	0000                	unimp
     9b0:	09bc                	addi	a5,sp,216
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9b2:	0000                	unimp
    int polyR[N+1];
     9b4:	00007523          	0x7523
     9b8:	3d00                	fld	fs0,56(a0)
     9ba:	0001                	nop
     9bc:	ce22                	sw	s0,28(sp)
     9be:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    polyR[N] = 1;
     9c2:	0c0a                	slli	s8,s8,0x2
     9c4:	000009ab          	0x9ab
     9c8:	0305                	addi	t1,t1,1
     9ca:	1a70                	addi	a2,sp,316
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9cc:	0000                	unimp
     9ce:	7009                	c.lui	zero,0xfffe2
     9d0:	0000                	unimp
     9d2:	de00                	sw	s0,56(a2)
     9d4:	0009                	c.nop	2
     9d6:	0a00                	addi	s0,sp,272
     9d8:	0075                	c.nop	29
     9da:	0000                	unimp
     9dc:	0000                	unimp
     9de:	ce05                	beqz	a2,a16 <generate_keys+0x128>
     9e0:	0009                	c.nop	2
     9e2:	2400                	fld	fs0,8(s0)
     9e4:	038c                	addi	a1,sp,448
     9e6:	0000                	unimp
     9e8:	0b01                	addi	s6,s6,0
     9ea:	de0e                	sw	gp,60(sp)
     9ec:	0009                	c.nop	2
     9ee:	0500                	addi	s0,sp,640
     9f0:	001f6803          	0x1f6803
     9f4:	2500                	fld	fs0,8(a0)
     9f6:	6176                	flw	ft2,92(sp)
     9f8:	0072                	c.slli	zero,0x1c
     9fa:	0c01                	addi	s8,s8,0
     9fc:	000a0713          	mv	a4,s4
     a00:	0500                	addi	s0,sp,640
     a02:	0011d403          	lhu	s0,1(gp)
     a06:	1000                	addi	s0,sp,32
     a08:	3204                	fld	fs1,32(a2)
     a0a:	0009                	c.nop	2
     a0c:	2600                	fld	fs0,8(a2)
     a0e:	03fe                	slli	t2,t2,0x1f
     a10:	0000                	unimp
     a12:	5c01                	li	s8,-32
     a14:	00690503          	lb	a0,6(s2)
     a18:	0000                	unimp
     a1a:	0f2c                	addi	a1,sp,920
     a1c:	0000                	unimp
     a1e:	0118                	addi	a4,sp,128
     a20:	0000                	unimp
     a22:	9c01                	0x9c01
     a24:	0b98                	addi	a4,sp,464
     a26:	0000                	unimp
     a28:	0001e627          	0x1e627
     a2c:	0100                	addi	s0,sp,128
     a2e:	035e                	slli	t1,t1,0x17
    polyR[0] = -1;
     a30:	980a                	add	a6,a6,sp
     a32:	0000000b          	0xb
    for(i = 1; i < N; ++i){
     a36:	0000                	unimp
     a38:	2700                	fld	fs0,8(a4)
     a3a:	040a                	slli	s0,s0,0x2
    for (i = N; i < 55; ++i ){
     a3c:	0000                	unimp
     a3e:	5f01                	li	t5,-32
     a40:	0b980a03          	lb	s4,185(a6) # b9 <instr_sub+0x5>
    for(i = 0; i < N; ++i){
     a44:	0000                	unimp
        random_keys[i] = f[i];
     a46:	001e                	c.slli	zero,0x7
     a48:	0000                	unimp
     a4a:	00005427          	0x5427
    for(i = 0; i < N; ++i){
     a4e:	0100                	addi	s0,sp,128
     a50:	0360                	addi	s0,sp,396
     a52:	980a                	add	a6,a6,sp
     a54:	3c00000b          	0x3c00000b
    for(i = N; i < (2*N); ++i){
     a58:	0000                	unimp
     a5a:	2800                	fld	fs0,16(s0)
     a5c:	004e                	c.slli	zero,0x13
        random_keys[i] = g[i-N];
     a5e:	6101                	0x6101
     a60:	00690903          	lb	s2,6(s2)
     a64:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     a66:	2835                	jal	aa2 <generate_keys+0x1b4>
     a68:	0070                	addi	a2,sp,12
    for(i = (2*N); i < (3*N); ++i){
     a6a:	6201                	0x6201
     a6c:	00690903          	lb	s2,6(s2)
    fp = ext_euclid(polyR, f, (N+1), p);
     a70:	0000                	unimp
     a72:	00712803          	lw	a6,7(sp)
     a76:	6301                	0x6301
     a78:	00690903          	lb	s2,6(s2)
    for(i = (2*N); i < (3*N); ++i){
     a7c:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     a7e:	2965                	jal	f36 <main+0xa>
     a80:	0032                	c.slli	zero,0xc
     a82:	0000                	unimp
     a84:	6501                	0x6501
    for(i = (2*N); i < (3*N); ++i){
     a86:	0b9e0903          	lb	s2,185(t3) # 10b9 <__DTOR_END__+0x65>
    fq = ext_euclid(polyR, f, (N+1), q);
     a8a:	0000                	unimp
     a8c:	77dc9103          	lh	sp,1917(s9)
     a90:	00016d27          	0x16d27
     a94:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     a96:	0366                	slli	t1,t1,0x19
     a98:	ae09                	j	daa <memcpy+0x4>
     a9a:	5d00000b          	0x5d00000b
        random_keys[i] = fq[i-(3*N)];
     a9e:	0000                	unimp
     aa0:	2700                	fld	fs0,8(a4)
     aa2:	0261                	addi	tp,tp,24
     aa4:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     aa6:	6701                	0x6701
     aa8:	0bc00903          	lb	s2,188(zero) # bc <array_sub+0x2>
    fg = polymult2(fq, N, g, N, 0);
     aac:	0000                	unimp
     aae:	00b1                	addi	ra,ra,12
     ab0:	0000                	unimp
     ab2:	6e2a                	flw	ft8,136(sp)
    for(i = 0; i < (2*N-1); ++i){
     ab4:	0002                	c.slli64	zero
     ab6:	0100                	addi	s0,sp,128
     ab8:	0368                	addi	a0,sp,396
     aba:	d209                	beqz	a2,9bc <generate_keys+0xce>
     abc:	2700000b          	0x2700000b
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ac0:	0000027b          	0x27b
     ac4:	6901                	0x6901
     ac6:	0be40903          	lb	s2,190(s0) # 10be <__DTOR_END__+0x6a>
    for(i = (4*N); i < (5*N); ++i){
     aca:	0000                	unimp
     acc:	0112                	slli	sp,sp,0x4
     ace:	0000                	unimp
     ad0:	892a                	mv	s2,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     ad2:	0002                	c.slli64	zero
     ad4:	0100                	addi	s0,sp,128
     ad6:	036a                	slli	t1,t1,0x1a
     ad8:	f609                	bnez	a2,9e2 <generate_keys+0xf4>
    for(i = (4*N); i < (5*N); ++i){
     ada:	2700000b          	0x2700000b
     ade:	0215                	addi	tp,tp,5
    for(i = (5*N); i < (6*N+1); ++i){
     ae0:	0000                	unimp
     ae2:	6b01                	0x6b01
        random_keys[i] = polyR[i-(5*N)];
     ae4:	0c080903          	lb	s2,192(a6)
     ae8:	0000                	unimp
     aea:	0165                	addi	sp,sp,25
    for(i = (5*N); i < (6*N+1); ++i){
     aec:	0000                	unimp
     aee:	0100692b          	0x100692b
     af2:	036c                	addi	a1,sp,396
     af4:	6909                	lui	s2,0x2
     af6:	0000                	unimp
}
     af8:	b900                	fsd	fs0,48(a0)
     afa:	0001                	nop
     afc:	2c00                	fld	fs0,24(s0)
     afe:	0f48                	addi	a0,sp,916
     b00:	0000                	unimp
     b02:	207e                	fld	ft0,472(sp)
     b04:	0000                	unimp
     b06:	0b21                	addi	s6,s6,8
     b08:	0000                	unimp
     b0a:	012d                	addi	sp,sp,11
     b0c:	035a                	slli	t1,t1,0x16
     b0e:	dc91                	beqz	s1,a2a <generate_keys+0x13c>
     b10:	5b012d77          	0x5b012d77
     b14:	0305                	addi	t1,t1,1
     b16:	1114                	addi	a3,sp,160
     b18:	0000                	unimp
     b1a:	012d                	addi	sp,sp,11
     b1c:	025c                	addi	a5,sp,260
     b1e:	c008                	sw	a0,0(s0)
     b20:	2c00                	fld	fs0,24(s0)
     b22:	0f54                	addi	a3,sp,916
     b24:	0000                	unimp
     b26:	0ef1                	addi	t4,t4,28
     b28:	0000                	unimp
     b2a:	0b40                	addi	s0,sp,404
     b2c:	0000                	unimp
     b2e:	012d                	addi	sp,sp,11
     b30:	025a                	slli	tp,tp,0x16
     b32:	3508                	fld	fa0,40(a0)
     b34:	012d                	addi	sp,sp,11
     b36:	2d33015b          	0x2d33015b
        polyR[i] = 0;
     b3a:	5c01                	li	s8,-32
     b3c:	0802                	c.slli64	a6
     b3e:	0065                	c.nop	25
     b40:	c42c                	sw	a1,72(s0)
    for(i = 1; i < N; ++i){
     b42:	9b00000f          	0x9b00000f
        f[i] = 0;
     b46:	000d                	c.nop	3
     b48:	6800                	flw	fs0,16(s0)
     b4a:	2d00000b          	0x2d00000b
     b4e:	5a01                	li	s4,-32
     b50:	0802                	c.slli64	a6
     b52:	2d35                	jal	118e <__DTOR_END__+0x13a>
        g[i] = 0;
     b54:	5b01                	li	s6,-32
     b56:	0802                	c.slli64	a6
     b58:	2d65                	jal	1210 <_bss_start+0x38>
     b5a:	5c01                	li	s8,-32
     b5c:	77dc9103          	lh	sp,1917(s9)
    for (i = N; i < 55; ++i ){
     b60:	012d                	addi	sp,sp,11
        random_keys[i] = f[i];
     b62:	035e                	slli	t1,t1,0x17
     b64:	9891                	andi	s1,s1,-28
     b66:	007e                	c.slli	zero,0x1f
     b68:	da2e                	sw	a1,52(sp)
     b6a:	1a00000f          	0x1a00000f
     b6e:	000c                	0xc
     b70:	2d00                	fld	fs0,24(a0)
    for(i = 0; i < N; ++i){
     b72:	5a01                	li	s4,-32
        random_keys[i] = f[i];
     b74:	0802                	c.slli64	a6
    for(i = 0; i < N; ++i){
     b76:	2d35                	jal	11b2 <__DTOR_END__+0x15e>
        random_keys[i] = g[i-N];
     b78:	5b01                	li	s6,-32
     b7a:	3301                	jal	87a <ext_euclid+0x17c>
     b7c:	012d                	addi	sp,sp,11
     b7e:	025c                	addi	a5,sp,260
     b80:	6508                	flw	fa0,8(a0)
    for(i = N; i < (2*N); ++i){
     b82:	012d                	addi	sp,sp,11
     b84:	035d                	addi	t1,t1,23
     b86:	f091                	bnez	s1,a8a <generate_keys+0x19c>
        random_keys[i] = fp[i-(2*N)];
     b88:	2d7a                	fld	fs10,408(sp)
     b8a:	5e01                	li	t3,-32
     b8c:	7802                	flw	fa6,32(sp)
     b8e:	2d00                	fld	fs0,24(a0)
     b90:	6001                	0x6001
    for(i = (2*N); i < (3*N); ++i){
     b92:	7e989103          	lh	sp,2025(a7)
     b96:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     b98:	0410                	addi	a2,sp,512
     b9a:	0069                	c.nop	26
     b9c:	0000                	unimp
     b9e:	6909                	lui	s2,0x2
     ba0:	0000                	unimp
     ba2:	ae00                	fsd	fs0,24(a2)
     ba4:	0a00000b          	0xa00000b
     ba8:	0075                	c.nop	29
    for(i = (3*N); i < (4*N); ++i){
     baa:	0000                	unimp
        fg[i] = fg[i]*p;
     bac:	6909002f          	0x6909002f
    for(i = 0; i < (2*N-1); ++i){
     bb0:	0000                	unimp
        fg[i] = fg[i]*p;
     bb2:	c000                	sw	s0,0(s0)
     bb4:	2f00000b          	0x2f00000b
     bb8:	0075                	c.nop	29
    for(i = 0; i < (2*N-1); ++i){
     bba:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bbc:	0802                	c.slli64	a6
     bbe:	0034                	addi	a3,sp,8
     bc0:	6909                	lui	s2,0x2
     bc2:	0000                	unimp
     bc4:	d200                	sw	s0,32(a2)
     bc6:	2f00000b          	0x2f00000b
    for(i = (4*N); i < (5*N); ++i){
     bca:	0075                	c.nop	29
        random_keys[i] = polyR[i-(5*N)];
     bcc:	0000                	unimp
     bce:	0802                	c.slli64	a6
     bd0:	0034                	addi	a3,sp,8
     bd2:	6909                	lui	s2,0x2
     bd4:	0000                	unimp
     bd6:	e400                	fsw	fs0,8(s0)
     bd8:	2f00000b          	0x2f00000b
     bdc:	0075                	c.nop	29
    for(i = (5*N); i < (6*N+1); ++i){
     bde:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     be0:	0802                	c.slli64	a6
     be2:	0034                	addi	a3,sp,8
     be4:	6909                	lui	s2,0x2
     be6:	0000                	unimp
     be8:	f600                	fsw	fs0,40(a2)
     bea:	2f00000b          	0x2f00000b
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bee:	0075                	c.nop	29
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bf0:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bf2:	0802                	c.slli64	a6
     bf4:	0034                	addi	a3,sp,8
     bf6:	6909                	lui	s2,0x2
     bf8:	0000                	unimp
     bfa:	0800                	addi	s0,sp,16
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bfc:	000c                	0xc
     bfe:	2f00                	fld	fs0,24(a4)
     c00:	0075                	c.nop	29
     c02:	0000                	unimp
     c04:	0802                	c.slli64	a6
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c06:	0034                	addi	a3,sp,8
    temp = polymult(public_key,N,random_val,48,q,0);
     c08:	6909                	lui	s2,0x2
     c0a:	0000                	unimp
     c0c:	1a00                	addi	s0,sp,304
     c0e:	000c                	0xc
     c10:	2f00                	fld	fs0,24(a4)
     c12:	0075                	c.nop	29
     c14:	0000                	unimp
     c16:	0802                	c.slli64	a6
     c18:	0035                	c.nop	13
array_add(temp,message,48);
     c1a:	3930                	fld	fa2,112(a0)
     c1c:	0006                	c.slli	zero,0x1
     c1e:	0100                	addi	s0,sp,128
    temp = polymult(public_key,N,random_val,48,q,0);
     c20:	032a                	slli	t1,t1,0xa
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c22:	9806                	add	a6,a6,ra
     c24:	6800000b          	0x6800000b
array_add(temp,message,48);
     c28:	000c                	0xc
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c2a:	c800                	sw	s0,16(s0)
     c2c:	0000                	unimp
     c2e:	0100                	addi	s0,sp,128
     c30:	9b9c                	0x9b9c
     c32:	000d                	c.nop	3
     c34:	3100                	fld	fs0,32(a0)
     c36:	004e                	c.slli	zero,0x13
     c38:	2a01                	jal	d48 <reset_handler+0x14>
    for(i = (2*N); i < (3*N); ++i){
     c3a:	00691703          	lh	a4,6(s2) # 2006 <_min_stack+0x6>
     c3e:	0000                	unimp
     c40:	01d9                	addi	gp,gp,22
     c42:	0000                	unimp
     c44:	7031                	c.lui	zero,0xfffec
}
     c46:	0100                	addi	s0,sp,128
     c48:	032a                	slli	t1,t1,0xa
     c4a:	691e                	flw	fs2,196(sp)
     c4c:	0000                	unimp
     c4e:	1d00                	addi	s0,sp,688
     c50:	0002                	c.slli64	zero
     c52:	3100                	fld	fs0,32(a0)
     c54:	0071                	c.nop	28
        CT[i-(2*N)] = CT[i];
     c56:	2a01                	jal	d66 <reset_handler+0x32>
     c58:	00692503          	lw	a0,6(s2)
     c5c:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     c5e:	0254                	addi	a3,sp,260
     c60:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     c62:	6132                	flw	ft2,12(sp)
     c64:	0002                	c.slli64	zero
    for(i = (2*N); i < (3*N); ++i){
     c66:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c68:	032a                	slli	t1,t1,0xa
     c6a:	982d                	andi	s0,s0,-21
     c6c:	8b00000b          	0x8b00000b
    for(i = (2*N); i < ((2*N)+N); ++i){
     c70:	0002                	c.slli64	zero
     c72:	3200                	fld	fs0,32(a2)
     c74:	0000027b          	0x27b
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c78:	2a01                	jal	d88 <_start+0xc>
     c7a:	0b984003          	lbu	zero,185(a6)
     c7e:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c80:	000002b7          	lui	t0,0x0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c84:	e632                	fsw	fa2,12(sp)
     c86:	0001                	nop
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c88:	0100                	addi	s0,sp,128
     c8a:	032a                	slli	t1,t1,0xa
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c8c:	9854                	0x9854
     c8e:	ee00000b          	0xee00000b
     c92:	0002                	c.slli64	zero
     c94:	3200                	fld	fs0,32(a2)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c96:	0000059b          	0x59b
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c9a:	2a01                	jal	daa <memcpy+0x4>
     c9c:	0b986603          	0xb986603
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ca0:	0000                	unimp
     ca2:	0000030f          	0x30f
     ca6:	fc2a                	fsw	fa0,56(sp)
     ca8:	0004                	0x4
     caa:	0100                	addi	s0,sp,128
     cac:	032c                	addi	a1,sp,392
     cae:	980a                	add	a6,a6,sp
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb0:	2b00000b          	0x2b00000b
     cb4:	0061                	c.nop	24
     cb6:	2d01                	jal	12c6 <_bss_start+0xee>
     cb8:	0b980a03          	lb	s4,185(a6)
        if(a2[i] <= q/2)
     cbc:	0000                	unimp
     cbe:	0346                	slli	t1,t1,0x11
    for (i = 0; i < N; ++i){
     cc0:	0000                	unimp
     cc2:	0032612b          	0x32612b
    c = polymult2(secret_key_fp,N,a2,N,0);
     cc6:	2e01                	jal	fd6 <main+0xaa>
     cc8:	0b980a03          	lb	s4,185(a6)
     ccc:	0000                	unimp
     cce:	0359                	addi	t1,t1,22
     cd0:	0000                	unimp
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cd2:	0100632b          	0x100632b
     cd6:	980a032f          	0x980a032f
     cda:	8200000b          	0x8200000b
    for(i = (2*N); i < ((2*N)+N); ++i){
     cde:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0x188>
     ce2:	01003263          	0x1003263
}
     ce6:	0330                	addi	a2,sp,392
     ce8:	980a                	add	a6,a6,sp
     cea:	9500000b          	0x9500000b
     cee:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0x188>
     cf2:	0069                	c.nop	26
     cf4:	3101                	jal	8f4 <generate_keys+0x6>
     cf6:	00690903          	lb	s2,6(s2)
        a2[i-(2*N)] = a2[i];
     cfa:	0000                	unimp
     cfc:	000003b3          	add	t2,zero,zero
     d00:	9e2c                	0x9e2c
    for(i = (2*N); i < ((2*N)+N); ++i){
     d02:	000c                	0xc
     d04:	e000                	fsw	fs0,0(s0)
        a2[i-(2*N)] = a2[i];
     d06:	0019                	c.nop	6
     d08:	2d00                	fld	fs0,24(a0)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d0a:	000d                	c.nop	3
        if(a2[i] <= q/2)
     d0c:	2d00                	fld	fs0,24(a0)
     d0e:	5a01                	li	s4,-32
     d10:	5d01f303          	0x5d01f303
            a2[i] = (-1)*(q-a2[i]);
     d14:	012d                	addi	sp,sp,11
     d16:	0078025b          	0x78025b
    for (i = 0; i < N; ++i){
     d1a:	012d                	addi	sp,sp,11
     d1c:	035c                	addi	a5,sp,388
        c2[i-(2*N)] = c2[i];
     d1e:	2d5f01f3          	0x2d5f01f3
     d22:	5d01                	li	s10,-32
     d24:	7802                	flw	fa6,32(sp)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d26:	2d00                	fld	fs0,24(a0)
     d28:	5e01                	li	t3,-32
        c2[i-(2*N)] = c2[i];
     d2a:	3001                	jal	52a <polydiv+0x110>
     d2c:	2c00                	fld	fs0,24(s0)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d2e:	0cae                	slli	s9,s9,0xb
  jal x0, default_exc_handler
     d30:	0000                	unimp
     d32:	1599                	addi	a1,a1,-26
  mv  x1, x0
     d34:	0000                	unimp
     d36:	00000d53          	fadd.s	fs10,ft0,ft0,rne
  mv  x3, x1
     d3a:	012d                	addi	sp,sp,11
  mv  x4, x1
     d3c:	0079025b          	0x79025b
  mv  x6, x1
     d40:	012d                	addi	sp,sp,11
  mv  x7, x1
     d42:	025c                	addi	a5,sp,260
  mv  x8, x1
     d44:	0084                	addi	s1,sp,64
  mv  x9, x1
     d46:	012d                	addi	sp,sp,11
  mv x10, x1
     d48:	025d                	addi	tp,tp,23
  mv x11, x1
     d4a:	0086                	slli	ra,ra,0x1
  mv x12, x1
     d4c:	012d                	addi	sp,sp,11
  mv x13, x1
     d4e:	025e                	slli	tp,tp,0x17
  mv x14, x1
     d50:	0082                	c.slli64	ra
  mv x15, x1
     d52:	2c00                	fld	fs0,24(s0)
  mv x16, x1
     d54:	0cd2                	slli	s9,s9,0x14
  mv x17, x1
     d56:	0000                	unimp
  mv x18, x1
     d58:	19e0                	addi	s0,sp,252
  mv x19, x1
     d5a:	0000                	unimp
  mv x20, x1
     d5c:	0d78                	addi	a4,sp,668
  mv x21, x1
     d5e:	0000                	unimp
  mv x22, x1
     d60:	012d                	addi	sp,sp,11
  mv x23, x1
     d62:	025a                	slli	tp,tp,0x16
  mv x24, x1
     d64:	012d0087          	0x12d0087
  mv x26, x1
     d68:	0078025b          	0x78025b
  mv x28, x1
     d6c:	012d                	addi	sp,sp,11
  mv x29, x1
     d6e:	025d                	addi	tp,tp,23
  mv x30, x1
     d70:	0078                	addi	a4,sp,12
  mv x31, x1
     d72:	012d                	addi	sp,sp,11
  la   x2, _stack_start
     d74:	015e                	slli	sp,sp,0x17
     d76:	0030                	addi	a2,sp,8
     d78:	de2e                	sw	a1,60(sp)
     d7a:	000c                	0xc
  la x26, _bss_start
     d7c:	9900                	0x9900
     d7e:	0015                	c.nop	5
     d80:	2d00                	fld	fs0,24(a0)
     d82:	5b01                	li	s6,-32
  la x27, _bss_end
     d84:	7902                	flw	fs2,32(sp)
     d86:	2d00                	fld	fs0,24(a0)
     d88:	5c01                	li	s8,-32
     d8a:	8402                	jr	s0
  bge x26, x27, zero_loop_end
     d8c:	2d00                	fld	fs0,24(a0)
     d8e:	5d01                	li	s10,-32
  sw x0, 0(x26)
     d90:	8602                	jr	a2
     d92:	2d00                	fld	fs0,24(a0)
  addi x26, x26, 4
     d94:	5e01                	li	t3,-32
  ble x26, x27, zero_loop
     d96:	8502                	jr	a0
     d98:	0000                	unimp
  addi x10, x0, 0
     d9a:	3000                	fld	fs0,32(s0)
     d9c:	0000043b          	0x43b
  addi x11, x0, 0
     da0:	0601                	addi	a2,a2,0
  jal x1, main
     da2:	0b980603          	lb	a2,185(a6)
     da6:	0000                	unimp
     da8:	0be0                	addi	s0,sp,476
     daa:	0000                	unimp
     dac:	0088                	addi	a0,sp,64
     dae:	0000                	unimp
     db0:	9c01                	0x9c01
     db2:	0ef1                	addi	t4,t4,28
     db4:	0000                	unimp
     db6:	4e31                	li	t3,12
     db8:	0100                	addi	s0,sp,128
     dba:	0306                	slli	t1,t1,0x1
     dbc:	00006917          	auipc	s2,0x6
     dc0:	3800                	fld	fs0,48(s0)
     dc2:	0004                	0x4
     dc4:	3100                	fld	fs0,32(a0)
     dc6:	0071                	c.nop	28
     dc8:	0601                	addi	a2,a2,0
     dca:	00691e03          	lh	t3,6(s2) # 6dc2 <_stack_len+0x2dc2>
     dce:	0000                	unimp
     dd0:	0464                	addi	s1,sp,524
     dd2:	0000                	unimp
     dd4:	3232                	fld	ft4,296(sp)
     dd6:	0000                	unimp
     dd8:	0100                	addi	s0,sp,128
     dda:	0306                	slli	t1,t1,0x1
     ddc:	9826                	add	a6,a6,s1
     dde:	9b00000b          	0x9b00000b
     de2:	0004                	0x4
     de4:	3200                	fld	fs0,32(a2)
     de6:	016d                	addi	sp,sp,27
     de8:	0000                	unimp
     dea:	0601                	addi	a2,a2,0
     dec:	0b983403          	0xb983403
     df0:	0000                	unimp
     df2:	04d2                	slli	s1,s1,0x14
     df4:	0000                	unimp
     df6:	9b32                	add	s6,s6,a2
     df8:	0005                	c.nop	1
     dfa:	0100                	addi	s0,sp,128
     dfc:	0306                	slli	t1,t1,0x1
     dfe:	9845                	andi	s0,s0,-15
     e00:	fe00000b          	0xfe00000b
     e04:	0004                	0x4
     e06:	2a00                	fld	fs0,16(a2)
     e08:	04ec                	addi	a1,sp,588
     e0a:	0000                	unimp
     e0c:	0801                	addi	a6,a6,0
     e0e:	0b980a03          	lb	s4,185(a6)
     e12:	0000                	unimp
     e14:	00544333          	xor	t1,s0,t0
     e18:	0901                	addi	s2,s2,0
     e1a:	0b980a03          	lb	s4,185(a6)
     e1e:	0000                	unimp
     e20:	5a01                	li	s4,-32
     e22:	2729                	jal	152c <product2+0xfc>
     e24:	0000                	unimp
     e26:	0100                	addi	s0,sp,128
     e28:	9e09030b          	0x9e09030b
     e2c:	0300000b          	0x300000b
     e30:	a091                	j	e74 <memcpy+0xce>
     e32:	277e                	fld	fa4,472(sp)
     e34:	000001cb          	fnmsub.s	ft3,ft0,ft0,ft0,rne
     e38:	0c01                	addi	s8,s8,0
     e3a:	0b980a03          	lb	s4,185(a6)
     e3e:	0000                	unimp
     e40:	0535                	addi	a0,a0,13
     e42:	0000                	unimp
     e44:	0100692b          	0x100692b
     e48:	030d                	addi	t1,t1,3
     e4a:	6909                	lui	s2,0x2
     e4c:	0000                	unimp
     e4e:	5e00                	lw	s0,56(a2)
     e50:	0005                	c.nop	1
     e52:	2c00                	fld	fs0,24(s0)
     e54:	0c08                	addi	a0,sp,528
     e56:	0000                	unimp
     e58:	207e                	fld	ft0,472(sp)
     e5a:	0000                	unimp
     e5c:	0e76                	slli	t3,t3,0x1d
     e5e:	0000                	unimp
     e60:	012d                	addi	sp,sp,11
     e62:	025a                	slli	tp,tp,0x16
     e64:	0072                	c.slli	zero,0x1c
     e66:	012d                	addi	sp,sp,11
     e68:	5403055b          	0x5403055b
     e6c:	0010                	0x10
     e6e:	2d00                	fld	fs0,24(a0)
     e70:	5c01                	li	s8,-32
     e72:	0802                	c.slli64	a6
     e74:	00c0                	addi	s0,sp,68
     e76:	1a2c                	addi	a1,sp,312
     e78:	000c                	0xc
     e7a:	7400                	flw	fs0,40(s0)
     e7c:	a700001b          	0xa700001b
     e80:	000e                	c.slli	zero,0x3
     e82:	2d00                	fld	fs0,24(a0)
     e84:	5a01                	li	s4,-32
     e86:	8302                	jr	t1
     e88:	2d00                	fld	fs0,24(a0)
     e8a:	5b01                	li	s6,-32
     e8c:	7802                	flw	fa6,32(sp)
     e8e:	2d00                	fld	fs0,24(a0)
     e90:	5c01                	li	s8,-32
     e92:	7202                	flw	ft4,32(sp)
     e94:	2d00                	fld	fs0,24(a0)
     e96:	5d01                	li	s10,-32
     e98:	0802                	c.slli64	a6
     e9a:	2d30                	fld	fa2,88(a0)
     e9c:	5e01                	li	t3,-32
     e9e:	8202                	jr	tp
     ea0:	2d00                	fld	fs0,24(a0)
     ea2:	5f01                	li	t5,-32
     ea4:	3001                	jal	6a4 <polydiv+0x28a>
     ea6:	2c00                	fld	fs0,24(s0)
     ea8:	0c2a                	slli	s8,s8,0xa
     eaa:	0000                	unimp
     eac:	1f58                	addi	a4,sp,948
     eae:	0000                	unimp
     eb0:	0ec8                	addi	a0,sp,852
     eb2:	0000                	unimp
     eb4:	012d                	addi	sp,sp,11
     eb6:	025a                	slli	tp,tp,0x16
     eb8:	012d0083          	lb	ra,18(s10) # fffe1012 <_stack_start+0xfffd1012>
     ebc:	01f3035b          	0x1f3035b
     ec0:	2d5c                	fld	fa5,152(a0)
     ec2:	5c01                	li	s8,-32
     ec4:	0802                	c.slli64	a6
     ec6:	0030                	addi	a2,sp,8
     ec8:	3a2e                	fld	fs4,232(sp)
     eca:	000c                	0xc
     ecc:	9900                	0x9900
     ece:	0015                	c.nop	5
     ed0:	2d00                	fld	fs0,24(a0)
     ed2:	5a01                	li	s4,-32
     ed4:	8302                	jr	t1
     ed6:	2d00                	fld	fs0,24(a0)
     ed8:	5b01                	li	s6,-32
     eda:	7902                	flw	fs2,32(sp)
     edc:	2d00                	fld	fs0,24(a0)
     ede:	5c01                	li	s8,-32
     ee0:	8402                	jr	s0
     ee2:	2d00                	fld	fs0,24(a0)
     ee4:	5d01                	li	s10,-32
     ee6:	7802                	flw	fa6,32(sp)
     ee8:	2d01                	jal	14f8 <product2+0xc8>
     eea:	5e01                	li	t3,-32
     eec:	8202                	jr	tp
     eee:	0000                	unimp
     ef0:	3000                	fld	fs0,32(s0)
     ef2:	0000004b          	fnmsub.s	ft0,ft0,ft0,ft0,rne
     ef6:	ae01                	j	1206 <_bss_start+0x2e>
     ef8:	0602                	c.slli64	a2
     efa:	0b98                	addi	a4,sp,464
     efc:	0000                	unimp
     efe:	08ee                	slli	a7,a7,0x1b
     f00:	0000                	unimp
     f02:	02f2                	slli	t0,t0,0x1c
     f04:	0000                	unimp
     f06:	9c01                	0x9c01
     f08:	10a1                	addi	ra,ra,-24
     f0a:	0000                	unimp
     f0c:	4e31                	li	t3,12
     f0e:	0100                	addi	s0,sp,128
     f10:	02ae                	slli	t0,t0,0xb
     f12:	6918                	flw	fa4,16(a0)
     f14:	0000                	unimp
     f16:	9400                	0x9400
     f18:	0005                	c.nop	1
     f1a:	3100                	fld	fs0,32(a0)
     f1c:	0070                	addi	a2,sp,12
     f1e:	ae01                	j	122e <_bss_start+0x56>
     f20:	1f02                	slli	t5,t5,0x20
     f22:	0069                	c.nop	26
     f24:	0000                	unimp
     f26:	05e5                	addi	a1,a1,25
     f28:	0000                	unimp
     f2a:	7131                	addi	sp,sp,-192
int main(){
     f2c:	0100                	addi	s0,sp,128
     f2e:	02ae                	slli	t0,t0,0xb
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f30:	6926                	flw	fs2,72(sp)
     f32:	0000                	unimp
     f34:	1c00                	addi	s0,sp,560
     f36:	0006                	c.slli	zero,0x1
     f38:	3300                	fld	fs0,32(a4)
     f3a:	0066                	c.slli	zero,0x19
     f3c:	b001                	j	73c <ext_euclid+0x3e>
int main(){
     f3e:	0902                	c.slli64	s2
     f40:	10a1                	addi	ra,ra,-24
     f42:	0000                	unimp
     f44:	7c989103          	lh	sp,1993(a7)
    keys = generate_keys(N, p, q);
     f48:	01006733          	or	a4,zero,a6
     f4c:	02b1                	addi	t0,t0,12
     f4e:	a109                	j	1350 <_bss_start+0x178>
     f50:	0010                	0x10
     f52:	0300                	addi	s0,sp,384
     f54:	f491                	bnez	s1,e60 <memcpy+0xba>
    for(i = 0; i < N; ++i){
     f56:	2b7d                	jal	1514 <product2+0xe4>
     f58:	7066                	flw	ft0,120(sp)
        secret_key_f[i] = keys[i];
     f5a:	0100                	addi	s0,sp,128
     f5c:	980a02b3          	0x980a02b3
     f60:	5300000b          	0x5300000b
     f64:	0006                	c.slli	zero,0x1
    for(i = 0; i < N; ++i){
     f66:	2b00                	fld	fs0,16(a4)
     f68:	7166                	flw	ft2,120(sp)
     f6a:	0100                	addi	s0,sp,128
    for(i = N; i < (2*N); ++i){
     f6c:	02b4                	addi	a3,sp,328
     f6e:	980a                	add	a6,a6,sp
     f70:	6600000b          	0x6600000b
     f74:	0006                	c.slli	zero,0x1
     f76:	2b00                	fld	fs0,16(a4)
        secret_key_fp[i-(2*N)] = keys[i];
     f78:	6766                	flw	fa4,88(sp)
     f7a:	0100                	addi	s0,sp,128
     f7c:	02b5                	addi	t0,t0,13
     f7e:	980a                	add	a6,a6,sp
     f80:	8400000b          	0x8400000b
    for(i = (2*N); i < (3*N); ++i){
     f84:	0006                	c.slli	zero,0x1
    for(i = (3*N); i < (4*N); ++i){
     f86:	2b00                	fld	fs0,16(a4)
     f88:	6b70                	flw	fa2,84(a4)
     f8a:	0100                	addi	s0,sp,128
     f8c:	02b6                	slli	t0,t0,0xd
     f8e:	980a                	add	a6,a6,sp
     f90:	a200000b          	0xa200000b
        public_key[i-(4*N)] = keys[i];
     f94:	0006                	c.slli	zero,0x1
     f96:	2700                	fld	fs0,8(a4)
     f98:	0000059b          	0x59b
    for(i = (4*N); i < (5*N); ++i){
     f9c:	b701                	j	e9c <memset+0x18>
     f9e:	0902                	c.slli64	s2
     fa0:	10b1                	addi	ra,ra,-20
     fa2:	0000                	unimp
     fa4:	06c0                	addi	s0,sp,836
     fa6:	0000                	unimp
        ring_poly[i-(5*N)] = keys[i];
     fa8:	0100692b          	0x100692b
     fac:	02b8                	addi	a4,sp,328
     fae:	6909                	lui	s2,0x2
     fb0:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     fb2:	2300                	fld	fs0,0(a4)
     fb4:	27000007          	0x27000007
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fb8:	04dc                	addi	a5,sp,580
     fba:	0000                	unimp
     fbc:	b901                	j	bcc <generate_keys+0x2de>
     fbe:	0a02                	c.slli64	s4
     fc0:	0b98                	addi	a4,sp,464
     fc2:	0000                	unimp
     fc4:	085f 0000 7534      	0x75340000085f
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fca:	0000                	unimp
     fcc:	7700                	flw	fs0,40(a4)
     fce:	0008                	0x8
     fd0:	2c00                	fld	fs0,24(s0)
     fd2:	0934                	addi	a3,sp,152
     fd4:	0000                	unimp
     fd6:	2089                	jal	1018 <main+0xec>
     fd8:	0000                	unimp
            resultkon[0] = 0xDEDEDEDE;
     fda:	0ff1                	addi	t6,t6,28
     fdc:	0000                	unimp
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fde:	012d                	addi	sp,sp,11
     fe0:	035a                	slli	t1,t1,0x16
     fe2:	a478                	fsd	fa4,200(s0)
     fe4:	2d7c                	fld	fa5,216(a0)
     fe6:	5b01                	li	s6,-32
     fe8:	3001                	jal	7e8 <ext_euclid+0xea>
     fea:	012d                	addi	sp,sp,11
     fec:	025c                	addi	a5,sp,260
     fee:	d008                	sw	a0,32(s0)
            resultkon[0] = 0xDEDEDEDE;
     ff0:	2c00                	fld	fs0,24(s0)
     ff2:	09b4                	addi	a3,sp,216
    for(i = 0; i < 32; ++i){
     ff4:	0000                	unimp
     ff6:	2089                	jal	1038 <main+0x10c>
        if(!(message[i] == Dec_Message[i])){
     ff8:	0000                	unimp
     ffa:	1011                	c.nop	-28
     ffc:	0000                	unimp
     ffe:	012d                	addi	sp,sp,11
    1000:	035a                	slli	t1,t1,0x16
    1002:	f878                	fsw	fa4,116(s0)
    1004:	2d7d                	jal	16c2 <result+0x3a>
    1006:	5b01                	li	s6,-32
    1008:	3001                	jal	808 <ext_euclid+0x10a>
    100a:	012d                	addi	sp,sp,11
            resultkon[0] = 0xBABABABA;
    100c:	025c                	addi	a5,sp,260
    100e:	d808                	sw	a0,48(s0)
    1010:	2c00                	fld	fs0,24(s0)
    1012:	0a7c                	addi	a5,sp,284
    1014:	0000                	unimp
 	    *var = resultkon[0];
    1016:	10c4                	addi	s1,sp,100
    1018:	0000                	unimp
    101a:	1038                	addi	a4,sp,40
    101c:	0000                	unimp
    101e:	012d                	addi	sp,sp,11
}
    1020:	025a                	slli	tp,tp,0x16
    1022:	0072                	c.slli	zero,0x1c
    1024:	012d                	addi	sp,sp,11
    1026:	9878035b          	0x9878035b
    102a:	2d7c                	fld	fa5,216(a0)
    102c:	5c01                	li	s8,-32
    102e:	8502                	jr	a0
            resultkon[0] = 0xDEDEDEDE;
    1030:	2d00                	fld	fs0,24(a0)
	    *var = resultkon[0];}
    1032:	5d01                	li	s10,-32
    1034:	8702                	jr	a4
    1036:	0000                	unimp
    1038:	962c                	0x962c
    103a:	000a                	c.slli	zero,0x2
    103c:	c400                	sw	s0,8(s0)
    for(i = 0; i < 32; ++i){
    103e:	0010                	0x10
    1040:	5f00                	lw	s0,56(a4)
    1042:	0010                	0x10
    1044:	2d00                	fld	fs0,24(a0)
    1046:	5a01                	li	s4,-32
    1048:	7202                	flw	ft4,32(sp)
    104a:	2d00                	fld	fs0,24(a0)
    104c:	5b01                	li	s6,-32
    104e:	7c987803          	0x7c987803
    1052:	012d                	addi	sp,sp,11
    1054:	025c                	addi	a5,sp,260
    1056:	0085                	addi	ra,ra,1
    1058:	012d                	addi	sp,sp,11
    105a:	025d                	addi	tp,tp,23
    105c:	0086                	slli	ra,ra,0x1
    105e:	2c00                	fld	fs0,24(s0)
    1060:	0ab4                	addi	a3,sp,344
    1062:	0000                	unimp
    1064:	19e0                	addi	s0,sp,252
    1066:	0000                	unimp
    1068:	1084                	addi	s1,sp,96
    106a:	0000                	unimp
    106c:	012d                	addi	sp,sp,11
    106e:	0082025b          	0x82025b
    1072:	012d                	addi	sp,sp,11
    1074:	025c                	addi	a5,sp,260
    1076:	0089                	addi	ra,ra,2
    1078:	012d                	addi	sp,sp,11
    107a:	025d                	addi	tp,tp,23
    107c:	0082                	c.slli64	ra
    107e:	012d                	addi	sp,sp,11
    1080:	015e                	slli	sp,sp,0x17
    1082:	0030                	addi	a2,sp,8
    1084:	c82e                	sw	a1,16(sp)
    1086:	000a                	c.slli	zero,0x2
    1088:	9900                	0x9900
    108a:	0015                	c.nop	5
    108c:	2d00                	fld	fs0,24(a0)
    108e:	5c01                	li	s8,-32
    1090:	7202                	flw	ft4,32(sp)
    1092:	2d00                	fld	fs0,24(a0)
    1094:	5d01                	li	s10,-32
    1096:	8502                	jr	a0
    1098:	2d00                	fld	fs0,24(a0)
    109a:	5e01                	li	t3,-32
    109c:	8602                	jr	a2
    109e:	0000                	unimp
    10a0:	0900                	addi	s0,sp,144
    10a2:	0069                	c.nop	26
    10a4:	0000                	unimp
    10a6:	10b1                	addi	ra,ra,-20
    10a8:	0000                	unimp
    10aa:	750a                	flw	fa0,160(sp)
    10ac:	0000                	unimp
    10ae:	3600                	fld	fs0,40(a2)
    10b0:	0900                	addi	s0,sp,144
    10b2:	0069                	c.nop	26
    10b4:	0000                	unimp
    10b6:	10c4                	addi	s1,sp,100
    10b8:	0000                	unimp
    10ba:	7535                	lui	a0,0xfffed
    10bc:	0000                	unimp
    10be:	c800                	sw	s0,16(s0)
    10c0:	0000000f          	fence	unknown,unknown
    10c4:	0030                	addi	a2,sp,8
    10c6:	0000                	unimp
    10c8:	0100                	addi	s0,sp,128
    10ca:	980601fb          	0x980601fb
    10ce:	fe00000b          	0xfe00000b
    10d2:	0006                	c.slli	zero,0x1
    10d4:	f000                	fsw	fs0,32(s0)
    10d6:	0001                	nop
    10d8:	0100                	addi	s0,sp,128
    10da:	149c                	addi	a5,sp,608
    10dc:	0015                	c.nop	5
    10de:	3200                	fld	fs0,32(a2)
    10e0:	0000059b          	0x59b
    10e4:	fb01                	bnez	a4,ff4 <main+0xc8>
    10e6:	1601                	addi	a2,a2,-32
    10e8:	0b98                	addi	a4,sp,464
    10ea:	0000                	unimp
    10ec:	08bd                	addi	a7,a7,15
    10ee:	0000                	unimp
    10f0:	bc32                	fsd	fa2,56(sp)
    10f2:	0005                	c.nop	1
    10f4:	0100                	addi	s0,sp,128
    10f6:	982201fb          	0x982201fb
    10fa:	0200000b          	0x200000b
    10fe:	0009                	c.nop	2
    1100:	3200                	fld	fs0,32(a2)
    1102:	0650                	addi	a2,sp,772
    1104:	0000                	unimp
    1106:	fb01                	bnez	a4,1016 <main+0xea>
    1108:	2d01                	jal	1718 <result+0x90>
    110a:	0069                	c.nop	26
    110c:	0000                	unimp
    110e:	00000947          	fmsub.s	fs2,ft0,ft0,ft0,rne
    1112:	6d31                	lui	s10,0xc
    1114:	0100646f          	jal	s0,7124 <_stack_len+0x3124>
    1118:	693701fb          	0x693701fb
    111c:	0000                	unimp
    111e:	8b00                	0x8b00
    1120:	0009                	c.nop	2
    1122:	2700                	fld	fs0,8(a4)
    1124:	04cc                	addi	a1,sp,580
    1126:	0000                	unimp
    1128:	fd01                	bnez	a0,1040 <main+0x114>
    112a:	0a01                	addi	s4,s4,0
    112c:	0b98                	addi	a4,sp,464
    112e:	0000                	unimp
    1130:	09c2                	slli	s3,s3,0x10
    1132:	0000                	unimp
    1134:	01004e2b          	0x1004e2b
    1138:	01fe                	slli	gp,gp,0x1f
    113a:	6909                	lui	s2,0x2
    113c:	0000                	unimp
    113e:	da00                	sw	s0,48(a2)
    1140:	0009                	c.nop	2
    1142:	2b00                	fld	fs0,16(a4)
    1144:	0069                	c.nop	26
    1146:	fe01                	bnez	a2,105e <__DTOR_END__+0xa>
    1148:	0c01                	addi	s8,s8,0
    114a:	0069                	c.nop	26
    114c:	0000                	unimp
    114e:	0a08                	addi	a0,sp,272
    1150:	0000                	unimp
    1152:	01006a2b          	0x1006a2b
    1156:	01fe                	slli	gp,gp,0x1f
    1158:	0000690f          	0x690f
    115c:	bd00                	fsd	fs0,56(a0)
    115e:	000a                	c.slli	zero,0x2
    1160:	2700                	fld	fs0,8(a4)
    1162:	0115                	addi	sp,sp,5
    1164:	0000                	unimp
    1166:	ff01                	bnez	a4,107e <__DTOR_END__+0x2a>
    1168:	0901                	addi	s2,s2,0
    116a:	1514                	addi	a3,sp,672
    116c:	0000                	unimp
    116e:	00000adb          	0xadb
    1172:	0005a127          	fsw	ft0,2(a1) # 2 <__DYNAMIC+0x2>
    1176:	0100                	addi	s0,sp,128
    1178:	0200                	addi	s0,sp,256
    117a:	2709                	jal	187c <result+0x1f4>
    117c:	0015                	c.nop	5
    117e:	fb00                	fsw	fs0,48(a4)
    1180:	000a                	c.slli	zero,0x2
    1182:	2b00                	fld	fs0,16(a4)
    1184:	6972                	flw	fs2,28(sp)
    1186:	0100                	addi	s0,sp,128
    1188:	0201                	addi	tp,tp,0
    118a:	3a09                	jal	a9c <generate_keys+0x1ae>
    118c:	0015                	c.nop	5
    118e:	1b00                	addi	s0,sp,432
    1190:	2700000b          	0x2700000b
    1194:	0000020b          	0x20b
    1198:	0301                	addi	t1,t1,0
    119a:	0902                	c.slli64	s2
    119c:	154d                	addi	a0,a0,-13
    119e:	0000                	unimp
    11a0:	00000b3b          	0xb3b
    11a4:	0069742b          	0x69742b
    11a8:	0401                	addi	s0,s0,0
    11aa:	0902                	c.slli64	s2
    11ac:	1560                	addi	s0,sp,684
    11ae:	0000                	unimp
    11b0:	0b71                	addi	s6,s6,28
    11b2:	0000                	unimp
    11b4:	00045b27          	0x45b27
    11b8:	0100                	addi	s0,sp,128
    11ba:	0205                	addi	tp,tp,1
    11bc:	7309                	lui	t1,0xfffe2
    11be:	0015                	c.nop	5
    11c0:	9100                	0x9100
    11c2:	2700000b          	0x2700000b
    11c6:	000001cb          	fnmsub.s	ft3,ft0,ft0,ft0,rne
    11ca:	0601                	addi	a2,a2,0
    11cc:	0902                	c.slli64	s2
    11ce:	1586                	slli	a1,a1,0x21
    11d0:	0000                	unimp
    11d2:	0bb1                	addi	s7,s7,12
    11d4:	0000                	unimp
    11d6:	7365722b          	0x7365722b
    11da:	0100                	addi	s0,sp,128
    11dc:	980a0207          	0x980a0207
    11e0:	f300000b          	0xf300000b
    11e4:	2700000b          	0x2700000b
    11e8:	05e1                	addi	a1,a1,24
    11ea:	0000                	unimp
    11ec:	0801                	addi	a6,a6,0
    11ee:	0a02                	c.slli64	s4
    11f0:	0b98                	addi	a4,sp,464
    11f2:	0000                	unimp
    11f4:	0c11                	addi	s8,s8,4
    11f6:	0000                	unimp
    11f8:	0005e627          	0x5e627
    11fc:	0100                	addi	s0,sp,128
    11fe:	0209                	addi	tp,tp,2
    1200:	980a                	add	a6,a6,sp
    1202:	2f00000b          	0x2f00000b
    1206:	000c                	0xc
    1208:	2700                	fld	fs0,8(a4)
    120a:	02ae                	slli	t0,t0,0xb
    120c:	0000                	unimp
    120e:	0a01                	addi	s4,s4,0
    1210:	0902                	c.slli64	s2
    1212:	0069                	c.nop	26
    1214:	0000                	unimp
    1216:	0c4d                	addi	s8,s8,19
    1218:	0000                	unimp
    121a:	7534                	flw	fa3,104(a0)
    121c:	0000                	unimp
    121e:	9b00                	0x9b00
    1220:	000c                	0xc
    1222:	3400                	fld	fs0,40(s0)
    1224:	0075                	c.nop	29
    1226:	0000                	unimp
    1228:	0cc9                	addi	s9,s9,18
    122a:	0000                	unimp
    122c:	7534                	flw	fa3,104(a0)
    122e:	0000                	unimp
    1230:	f700                	fsw	fs0,40(a4)
    1232:	000c                	0xc
    1234:	3400                	fld	fs0,40(s0)
    1236:	0075                	c.nop	29
    1238:	0000                	unimp
    123a:	0d25                	addi	s10,s10,9
    123c:	0000                	unimp
    123e:	7534                	flw	fa3,104(a0)
    1240:	0000                	unimp
    1242:	5300                	lw	s0,32(a4)
    1244:	000d                	c.nop	3
    1246:	3400                	fld	fs0,40(s0)
    1248:	0075                	c.nop	29
    124a:	0000                	unimp
    124c:	0d81                	addi	s11,s11,0
    124e:	0000                	unimp
    1250:	7534                	flw	fa3,104(a0)
    1252:	0000                	unimp
    1254:	af00                	fsd	fs0,24(a4)
    1256:	000d                	c.nop	3
    1258:	2c00                	fld	fs0,24(s0)
    125a:	076e                	slli	a4,a4,0x1b
    125c:	0000                	unimp
    125e:	1e2c                	addi	a1,sp,824
    1260:	0000                	unimp
    1262:	127a                	slli	tp,tp,0x3e
    1264:	0000                	unimp
    1266:	012d                	addi	sp,sp,11
    1268:	025a                	slli	tp,tp,0x16
    126a:	0084                	addi	s1,sp,64
    126c:	012d                	addi	sp,sp,11
    126e:	01f3035b          	0x1f3035b
    1272:	2d5a                	fld	fs10,400(sp)
    1274:	5c01                	li	s8,-32
    1276:	7902                	flw	fs2,32(sp)
    1278:	0000                	unimp
    127a:	762c                	flw	fa1,104(a2)
    127c:	2c000007          	0x2c000007
    1280:	001e                	c.slli	zero,0x7
    1282:	9a00                	0x9a00
    1284:	0012                	c.slli	zero,0x4
    1286:	2d00                	fld	fs0,24(a0)
    1288:	5a01                	li	s4,-32
    128a:	8502                	jr	a0
    128c:	2d00                	fld	fs0,24(a0)
    128e:	5b01                	li	s6,-32
    1290:	8b02                	jr	s6
    1292:	2d00                	fld	fs0,24(a0)
    1294:	5c01                	li	s8,-32
    1296:	7902                	flw	fs2,32(sp)
    1298:	0000                	unimp
    129a:	942c                	0x942c
    129c:	8e000007          	0x8e000007
    12a0:	001d                	c.nop	7
    12a2:	ba00                	fsd	fs0,48(a2)
    12a4:	0012                	c.slli	zero,0x4
    12a6:	2d00                	fld	fs0,24(a0)
    12a8:	5a01                	li	s4,-32
    12aa:	8402                	jr	s0
    12ac:	2d00                	fld	fs0,24(a0)
    12ae:	5b01                	li	s6,-32
    12b0:	8202                	jr	tp
    12b2:	2d00                	fld	fs0,24(a0)
    12b4:	5c01                	li	s8,-32
    12b6:	7902                	flw	fs2,32(sp)
    12b8:	0000                	unimp
    12ba:	9c2c                	0x9c2c
    12bc:	8e000007          	0x8e000007
    12c0:	001d                	c.nop	7
    12c2:	da00                	sw	s0,48(a2)
    12c4:	0012                	c.slli	zero,0x4
    12c6:	2d00                	fld	fs0,24(a0)
    12c8:	5a01                	li	s4,-32
    12ca:	8502                	jr	a0
    12cc:	2d00                	fld	fs0,24(a0)
    12ce:	5b01                	li	s6,-32
    12d0:	8202                	jr	tp
    12d2:	2d00                	fld	fs0,24(a0)
    12d4:	5c01                	li	s8,-32
    12d6:	7902                	flw	fs2,32(sp)
    12d8:	0000                	unimp
    12da:	a82c                	fsd	fa1,80(s0)
    12dc:	99000007          	0x99000007
    12e0:	0015                	c.nop	5
    12e2:	0600                	addi	s0,sp,768
    12e4:	2d000013          	li	zero,720
    12e8:	5a01                	li	s4,-32
    12ea:	8402                	jr	s0
    12ec:	2d00                	fld	fs0,24(a0)
    12ee:	5b01                	li	s6,-32
    12f0:	7902                	flw	fs2,32(sp)
    12f2:	2d00                	fld	fs0,24(a0)
    12f4:	5c01                	li	s8,-32
    12f6:	8502                	jr	a0
    12f8:	2d00                	fld	fs0,24(a0)
    12fa:	5d01                	li	s10,-32
    12fc:	7902                	flw	fs2,32(sp)
    12fe:	2d00                	fld	fs0,24(a0)
    1300:	5e01                	li	t3,-32
    1302:	8202                	jr	tp
    1304:	0000                	unimp
    1306:	bc2c                	fsd	fa1,120(s0)
    1308:	2c000007          	0x2c000007
    130c:	001e                	c.slli	zero,0x7
    130e:	2600                	fld	fs0,8(a2)
    1310:	2d000013          	li	zero,720
    1314:	5a01                	li	s4,-32
    1316:	7202                	flw	ft4,32(sp)
    1318:	2d00                	fld	fs0,24(a0)
    131a:	5b01                	li	s6,-32
    131c:	8402                	jr	s0
    131e:	2d00                	fld	fs0,24(a0)
    1320:	5c01                	li	s8,-32
    1322:	7902                	flw	fs2,32(sp)
    1324:	0000                	unimp
    1326:	c42c                	sw	a1,72(s0)
    1328:	c2000007          	0xc2000007
    132c:	001e                	c.slli	zero,0x7
    132e:	4600                	lw	s0,8(a2)
    1330:	2d000013          	li	zero,720
    1334:	5a01                	li	s4,-32
    1336:	7202                	flw	ft4,32(sp)
    1338:	2d00                	fld	fs0,24(a0)
    133a:	5b01                	li	s6,-32
    133c:	8702                	jr	a4
    133e:	2d00                	fld	fs0,24(a0)
    1340:	5c01                	li	s8,-32
    1342:	7902                	flw	fs2,32(sp)
    1344:	0000                	unimp
    1346:	cc2c                	sw	a1,88(s0)
    1348:	8e000007          	0x8e000007
    134c:	001d                	c.nop	7
    134e:	6600                	flw	fs0,8(a2)
    1350:	2d000013          	li	zero,720
    1354:	5a01                	li	s4,-32
    1356:	7202                	flw	ft4,32(sp)
    1358:	2d00                	fld	fs0,24(a0)
    135a:	5b01                	li	s6,-32
    135c:	8202                	jr	tp
    135e:	2d00                	fld	fs0,24(a0)
    1360:	5c01                	li	s8,-32
    1362:	7902                	flw	fs2,32(sp)
    1364:	0000                	unimp
    1366:	d82c                	sw	a1,112(s0)
    1368:	99000007          	0x99000007
    136c:	0015                	c.nop	5
    136e:	9200                	0x9200
    1370:	2d000013          	li	zero,720
    1374:	5a01                	li	s4,-32
    1376:	7202                	flw	ft4,32(sp)
    1378:	2d00                	fld	fs0,24(a0)
    137a:	5b01                	li	s6,-32
    137c:	7902                	flw	fs2,32(sp)
    137e:	2d00                	fld	fs0,24(a0)
    1380:	5c01                	li	s8,-32
    1382:	8502                	jr	a0
    1384:	2d00                	fld	fs0,24(a0)
    1386:	5d01                	li	s10,-32
    1388:	7902                	flw	fs2,32(sp)
    138a:	2d00                	fld	fs0,24(a0)
    138c:	5e01                	li	t3,-32
    138e:	8202                	jr	tp
    1390:	0000                	unimp
    1392:	e02c                	fsw	fa1,64(s0)
    1394:	2c000007          	0x2c000007
    1398:	001e                	c.slli	zero,0x7
    139a:	ac00                	fsd	fs0,24(s0)
    139c:	2d000013          	li	zero,720
    13a0:	5a01                	li	s4,-32
    13a2:	8902                	jr	s2
    13a4:	2d00                	fld	fs0,24(a0)
    13a6:	5c01                	li	s8,-32
    13a8:	7902                	flw	fs2,32(sp)
    13aa:	0000                	unimp
    13ac:	e82c                	fsw	fa1,80(s0)
    13ae:	8e000007          	0x8e000007
    13b2:	001d                	c.nop	7
    13b4:	cc00                	sw	s0,24(s0)
    13b6:	2d000013          	li	zero,720
    13ba:	5a01                	li	s4,-32
    13bc:	8902                	jr	s2
    13be:	2d00                	fld	fs0,24(a0)
    13c0:	5b01                	li	s6,-32
    13c2:	8202                	jr	tp
    13c4:	2d00                	fld	fs0,24(a0)
    13c6:	5c01                	li	s8,-32
    13c8:	7902                	flw	fs2,32(sp)
    13ca:	0000                	unimp
    13cc:	f62c                	fsw	fa1,104(a2)
    13ce:	74000007          	0x74000007
    13d2:	fd00001b          	0xfd00001b
    13d6:	2d000013          	li	zero,720
    13da:	5a01                	li	s4,-32
    13dc:	8902                	jr	s2
    13de:	2d00                	fld	fs0,24(a0)
    13e0:	5b01                	li	s6,-32
    13e2:	7902                	flw	fs2,32(sp)
    13e4:	2d00                	fld	fs0,24(a0)
    13e6:	5c01                	li	s8,-32
    13e8:	8602                	jr	a2
    13ea:	2d00                	fld	fs0,24(a0)
    13ec:	5d01                	li	s10,-32
    13ee:	7902                	flw	fs2,32(sp)
    13f0:	2d00                	fld	fs0,24(a0)
    13f2:	5e01                	li	t3,-32
    13f4:	8202                	jr	tp
    13f6:	2d00                	fld	fs0,24(a0)
    13f8:	5f01                	li	t5,-32
    13fa:	3001                	jal	bfa <ntru_encyrpt+0x1a>
    13fc:	2c00                	fld	fs0,24(s0)
    13fe:	07fe                	slli	a5,a5,0x1f
    1400:	0000                	unimp
    1402:	1e2c                	addi	a1,sp,824
    1404:	0000                	unimp
    1406:	00001417          	auipc	s0,0x1
    140a:	012d                	addi	sp,sp,11
    140c:	025a                	slli	tp,tp,0x16
    140e:	0072                	c.slli	zero,0x1c
    1410:	012d                	addi	sp,sp,11
    1412:	025c                	addi	a5,sp,260
    1414:	0079                	c.nop	30
    1416:	2c00                	fld	fs0,24(s0)
    1418:	0806                	slli	a6,a6,0x1
    141a:	0000                	unimp
    141c:	1d8e                	slli	s11,s11,0x23
    141e:	0000                	unimp
    1420:	00001437          	lui	s0,0x1
    1424:	012d                	addi	sp,sp,11
    1426:	025a                	slli	tp,tp,0x16
    1428:	0072                	c.slli	zero,0x1c
    142a:	012d                	addi	sp,sp,11
    142c:	0082025b          	0x82025b
    1430:	012d                	addi	sp,sp,11
    1432:	025c                	addi	a5,sp,260
    1434:	0079                	c.nop	30
    1436:	2c00                	fld	fs0,24(s0)
    1438:	080e                	slli	a6,a6,0x3
    143a:	0000                	unimp
    143c:	1e2c                	addi	a1,sp,824
    143e:	0000                	unimp
    1440:	00001457          	0x1457
    1444:	012d                	addi	sp,sp,11
    1446:	025a                	slli	tp,tp,0x16
    1448:	0088                	addi	a0,sp,64
    144a:	012d                	addi	sp,sp,11
    144c:	008b025b          	0x8b025b
    1450:	012d                	addi	sp,sp,11
    1452:	025c                	addi	a5,sp,260
    1454:	0079                	c.nop	30
    1456:	2c00                	fld	fs0,24(s0)
    1458:	0816                	slli	a6,a6,0x5
    145a:	0000                	unimp
    145c:	1ec2                	slli	t4,t4,0x30
    145e:	0000                	unimp
    1460:	00001477          	0x1477
    1464:	012d                	addi	sp,sp,11
    1466:	025a                	slli	tp,tp,0x16
    1468:	0088                	addi	a0,sp,64
    146a:	012d                	addi	sp,sp,11
    146c:	0072025b          	0x72025b
    1470:	012d                	addi	sp,sp,11
    1472:	025c                	addi	a5,sp,260
    1474:	0079                	c.nop	30
    1476:	2c00                	fld	fs0,24(s0)
    1478:	081e                	slli	a6,a6,0x7
    147a:	0000                	unimp
    147c:	1d8e                	slli	s11,s11,0x23
    147e:	0000                	unimp
    1480:	00001497          	auipc	s1,0x1
    1484:	012d                	addi	sp,sp,11
    1486:	025a                	slli	tp,tp,0x16
    1488:	0088                	addi	a0,sp,64
    148a:	012d                	addi	sp,sp,11
    148c:	0082025b          	0x82025b
    1490:	012d                	addi	sp,sp,11
    1492:	025c                	addi	a5,sp,260
    1494:	0079                	c.nop	30
    1496:	2c00                	fld	fs0,24(s0)
    1498:	0826                	slli	a6,a6,0x9
    149a:	0000                	unimp
    149c:	1e2c                	addi	a1,sp,824
    149e:	0000                	unimp
    14a0:	000014b7          	lui	s1,0x1
    14a4:	012d                	addi	sp,sp,11
    14a6:	025a                	slli	tp,tp,0x16
    14a8:	0084                	addi	s1,sp,64
    14aa:	012d                	addi	sp,sp,11
    14ac:	0085025b          	0x85025b
    14b0:	012d                	addi	sp,sp,11
    14b2:	025c                	addi	a5,sp,260
    14b4:	0079                	c.nop	30
    14b6:	2c00                	fld	fs0,24(s0)
    14b8:	082e                	slli	a6,a6,0xb
    14ba:	0000                	unimp
    14bc:	1e2c                	addi	a1,sp,824
    14be:	0000                	unimp
    14c0:	000014d7          	0x14d7
    14c4:	012d                	addi	sp,sp,11
    14c6:	025a                	slli	tp,tp,0x16
    14c8:	0085                	addi	ra,ra,1
    14ca:	012d                	addi	sp,sp,11
    14cc:	0087025b          	0x87025b
    14d0:	012d                	addi	sp,sp,11
    14d2:	025c                	addi	a5,sp,260
    14d4:	0079                	c.nop	30
    14d6:	2c00                	fld	fs0,24(s0)
    14d8:	0836                	slli	a6,a6,0xd
    14da:	0000                	unimp
    14dc:	1e2c                	addi	a1,sp,824
    14de:	0000                	unimp
    14e0:	000014f7          	0x14f7
    14e4:	012d                	addi	sp,sp,11
    14e6:	025a                	slli	tp,tp,0x16
    14e8:	012d008b          	0x12d008b
    14ec:	0086025b          	0x86025b
    14f0:	012d                	addi	sp,sp,11
    14f2:	025c                	addi	a5,sp,260
    14f4:	0079                	c.nop	30
    14f6:	2e00                	fld	fs0,24(a2)
    14f8:	083e                	slli	a6,a6,0xf
    14fa:	0000                	unimp
    14fc:	1e2c                	addi	a1,sp,824
    14fe:	0000                	unimp
    1500:	012d                	addi	sp,sp,11
    1502:	025a                	slli	tp,tp,0x16
    1504:	0086                	slli	ra,ra,0x1
    1506:	012d                	addi	sp,sp,11
    1508:	0088025b          	0x88025b
    150c:	012d                	addi	sp,sp,11
    150e:	025c                	addi	a5,sp,260
    1510:	0079                	c.nop	30
    1512:	0000                	unimp
    1514:	6909                	lui	s2,0x2
    1516:	0000                	unimp
    1518:	2700                	fld	fs0,8(a4)
    151a:	0015                	c.nop	5
    151c:	3500                	fld	fs0,40(a0)
    151e:	0075                	c.nop	29
    1520:	0000                	unimp
    1522:	121a                	slli	tp,tp,0x26
    1524:	0000                	unimp
    1526:	0900                	addi	s0,sp,144
    1528:	0069                	c.nop	26
    152a:	0000                	unimp
    152c:	153a                	slli	a0,a0,0x2e
    152e:	0000                	unimp
    1530:	7535                	lui	a0,0xfffed
    1532:	0000                	unimp
    1534:	2300                	fld	fs0,0(a4)
    1536:	0012                	c.slli	zero,0x4
    1538:	0000                	unimp
    153a:	6909                	lui	s2,0x2
    153c:	0000                	unimp
    153e:	4d00                	lw	s0,24(a0)
    1540:	0015                	c.nop	5
    1542:	3500                	fld	fs0,40(a0)
    1544:	0075                	c.nop	29
    1546:	0000                	unimp
    1548:	122c                	addi	a1,sp,296
    154a:	0000                	unimp
    154c:	0900                	addi	s0,sp,144
    154e:	0069                	c.nop	26
    1550:	0000                	unimp
    1552:	1560                	addi	s0,sp,684
    1554:	0000                	unimp
    1556:	7535                	lui	a0,0xfffed
    1558:	0000                	unimp
    155a:	3500                	fld	fs0,40(a0)
    155c:	0012                	c.slli	zero,0x4
    155e:	0000                	unimp
    1560:	6909                	lui	s2,0x2
    1562:	0000                	unimp
    1564:	7300                	flw	fs0,32(a4)
    1566:	0015                	c.nop	5
    1568:	3500                	fld	fs0,40(a0)
    156a:	0075                	c.nop	29
    156c:	0000                	unimp
    156e:	123e                	slli	tp,tp,0x2f
    1570:	0000                	unimp
    1572:	0900                	addi	s0,sp,144
    1574:	0069                	c.nop	26
    1576:	0000                	unimp
    1578:	1586                	slli	a1,a1,0x21
    157a:	0000                	unimp
    157c:	7535                	lui	a0,0xfffed
    157e:	0000                	unimp
    1580:	4700                	lw	s0,8(a4)
    1582:	0012                	c.slli	zero,0x4
    1584:	0000                	unimp
    1586:	6909                	lui	s2,0x2
    1588:	0000                	unimp
    158a:	9900                	0x9900
    158c:	0015                	c.nop	5
    158e:	3500                	fld	fs0,40(a0)
    1590:	0075                	c.nop	29
    1592:	0000                	unimp
    1594:	1250                	addi	a2,sp,292
    1596:	0000                	unimp
    1598:	3000                	fld	fs0,32(s0)
    159a:	065d                	addi	a2,a2,23
    159c:	0000                	unimp
    159e:	1c01                	addi	s8,s8,-32
    15a0:	0601                	addi	a2,a2,0
    15a2:	0b98                	addi	a4,sp,464
    15a4:	0000                	unimp
    15a6:	041a                	slli	s0,s0,0x6
    15a8:	0000                	unimp
    15aa:	02e4                	addi	s1,sp,332
    15ac:	0000                	unimp
    15ae:	9c01                	0x9c01
    15b0:	1994                	addi	a3,sp,240
    15b2:	0000                	unimp
    15b4:	6e31                	lui	t3,0xc
    15b6:	6d75                	lui	s10,0x1d
    15b8:	0100                	addi	s0,sp,128
    15ba:	011c                	addi	a5,sp,128
    15bc:	000b9813          	slli	a6,s7,0x0
    15c0:	dd00                	sw	s0,56(a0)
    15c2:	000d                	c.nop	3
    15c4:	3200                	fld	fs0,32(a2)
    15c6:	000003b3          	add	t2,zero,zero
    15ca:	1c01                	addi	s8,s8,-32
    15cc:	1c01                	addi	s8,s8,-32
    15ce:	0069                	c.nop	26
    15d0:	0000                	unimp
    15d2:	0e2a                	slli	t3,t3,0xa
    15d4:	0000                	unimp
    15d6:	7b32                	flw	fs6,44(sp)
    15d8:	0005                	c.nop	1
    15da:	0100                	addi	s0,sp,128
    15dc:	011c                	addi	a5,sp,128
    15de:	9828                	0x9828
    15e0:	9100000b          	0x9100000b
    15e4:	000e                	c.slli	zero,0x3
    15e6:	3200                	fld	fs0,32(a2)
    15e8:	000001d7          	0x1d7
    15ec:	1c01                	addi	s8,s8,-32
    15ee:	3301                	jal	12ee <_bss_start+0x116>
    15f0:	0069                	c.nop	26
    15f2:	0000                	unimp
    15f4:	0eec                	addi	a1,sp,860
    15f6:	0000                	unimp
    15f8:	6d31                	lui	s10,0xc
    15fa:	0100646f          	jal	s0,760a <_stack_len+0x360a>
    15fe:	011c                	addi	a5,sp,128
    1600:	0000693f 000f3900 	0xf39000000693f
    1608:	2b00                	fld	fs0,16(a4)
    160a:	0075                	c.nop	29
    160c:	1e01                	addi	t3,t3,-32
    160e:	0901                	addi	s2,s2,0
    1610:	0069                	c.nop	26
    1612:	0000                	unimp
    1614:	0f70                	addi	a2,sp,924
    1616:	0000                	unimp
    1618:	0100642b          	0x100642b
    161c:	011e                	slli	sp,sp,0x7
    161e:	0000690b          	0x690b
    1622:	9900                	0x9900
    1624:	3600000f          	0x3600000f
    1628:	3264                	fld	fs1,224(a2)
    162a:	0100                	addi	s0,sp,128
    162c:	011e                	slli	sp,sp,0x7
    162e:	690d                	lui	s2,0x3
    1630:	0000                	unimp
    1632:	2b00                	fld	fs0,16(a4)
    1634:	0069                	c.nop	26
    1636:	1e01                	addi	t3,t3,-32
    1638:	1001                	c.nop	-32
    163a:	0069                	c.nop	26
    163c:	0000                	unimp
    163e:	00000fb7          	lui	t6,0x0
    1642:	6236                	flw	ft4,76(sp)
    1644:	4e5f 0100 011e      	0x11e01004e5f
    164a:	6912                	flw	fs2,4(sp)
    164c:	0000                	unimp
    164e:	2b00                	fld	fs0,16(a4)
    1650:	5f72                	lw	t5,60(sp)
    1652:	0064                	addi	s1,sp,12
    1654:	1e01                	addi	t3,t3,-32
    1656:	1601                	addi	a2,a2,-32
    1658:	0069                	c.nop	26
    165a:	0000                	unimp
    165c:	105c                	addi	a5,sp,36
    165e:	0000                	unimp
    1660:	0004bc27          	fsd	ft0,24(s1) # 1018 <main+0xec>
    1664:	0100                	addi	s0,sp,128
    1666:	011f 980a 000b      	0xb980a011f
    166c:	8500                	0x8500
    166e:	0010                	0x10
    1670:	2b00                	fld	fs0,16(a4)
    1672:	0076                	c.slli	zero,0x1d
    1674:	2101                	jal	1a74 <random_keys+0x4>
    1676:	0901                	addi	s2,s2,0
    1678:	1994                	addi	a3,sp,240
    167a:	0000                	unimp
    167c:	109d                	addi	ra,ra,-25
    167e:	0000                	unimp
    1680:	0100712b          	0x100712b
    1684:	0122                	slli	sp,sp,0x8
    1686:	a709                	j	1d88 <random_keys+0x318>
    1688:	0019                	c.nop	6
    168a:	bd00                	fsd	fs0,56(a0)
    168c:	0010                	0x10
    168e:	2700                	fld	fs0,8(a4)
    1690:	0655                	addi	a2,a2,21
    1692:	0000                	unimp
    1694:	2301                	jal	1b94 <random_keys+0x124>
    1696:	0a01                	addi	s4,s4,0
    1698:	0b98                	addi	a4,sp,464
    169a:	0000                	unimp
    169c:	000010f3          	csrrw	ra,ustatus,zero
    16a0:	0001c727          	fsq	ft0,14(gp)
    16a4:	0100                	addi	s0,sp,128
    16a6:	0124                	addi	s1,sp,136
    16a8:	ba09                	j	fba <main+0x8e>
    16aa:	0019                	c.nop	6
    16ac:	3200                	fld	fs0,32(a2)
    16ae:	0011                	c.nop	4
    16b0:	2700                	fld	fs0,8(a4)
    16b2:	01c5                	addi	gp,gp,17
    16b4:	0000                	unimp
    16b6:	2501                	jal	1cb6 <random_keys+0x246>
    16b8:	0901                	addi	s2,s2,0
    16ba:	19cd                	addi	s3,s3,-13
    16bc:	0000                	unimp
    16be:	1180                	addi	s0,sp,224
    16c0:	0000                	unimp
    16c2:	7534                	flw	fa3,104(a0)
    16c4:	0000                	unimp
    16c6:	ac00                	fsd	fs0,24(s0)
    16c8:	0011                	c.nop	4
    16ca:	3400                	fld	fs0,40(s0)
    16cc:	0075                	c.nop	29
    16ce:	0000                	unimp
    16d0:	11da                	slli	gp,gp,0x36
    16d2:	0000                	unimp
    16d4:	7534                	flw	fa3,104(a0)
    16d6:	0000                	unimp
    16d8:	0800                	addi	s0,sp,16
    16da:	0012                	c.slli	zero,0x4
    16dc:	3400                	fld	fs0,40(s0)
    16de:	0075                	c.nop	29
    16e0:	0000                	unimp
    16e2:	1236                	slli	tp,tp,0x2d
    16e4:	0000                	unimp
    16e6:	842c                	0x842c
    16e8:	0004                	0x4
    16ea:	2c00                	fld	fs0,24(s0)
    16ec:	001e                	c.slli	zero,0x7
    16ee:	0600                	addi	s0,sp,768
    16f0:	2d000017          	auipc	zero,0x2d000
    16f4:	5a01                	li	s4,-32
    16f6:	8302                	jr	t1
    16f8:	2d00                	fld	fs0,24(a0)
    16fa:	5b01                	li	s6,-32
    16fc:	8b02                	jr	s6
    16fe:	2d00                	fld	fs0,24(a0)
    1700:	5c01                	li	s8,-32
    1702:	0802                	c.slli64	a6
    1704:	0069                	c.nop	26
    1706:	962c                	0x962c
    1708:	0004                	0x4
    170a:	8e00                	0x8e00
    170c:	001d                	c.nop	7
    170e:	2600                	fld	fs0,8(a2)
    1710:	2d000017          	auipc	zero,0x2d000
    1714:	5a01                	li	s4,-32
    1716:	8302                	jr	t1
    1718:	2d00                	fld	fs0,24(a0)
    171a:	5b01                	li	s6,-32
    171c:	7902                	flw	fs2,32(sp)
    171e:	2d00                	fld	fs0,24(a0)
    1720:	5c01                	li	s8,-32
    1722:	0802                	c.slli64	a6
    1724:	0069                	c.nop	26
    1726:	b02c                	fsd	fa1,96(s0)
    1728:	0004                	0x4
    172a:	2c00                	fld	fs0,24(s0)
    172c:	001e                	c.slli	zero,0x7
    172e:	4600                	lw	s0,8(a2)
    1730:	2d000017          	auipc	zero,0x2d000
    1734:	5a01                	li	s4,-32
    1736:	8302                	jr	t1
    1738:	2d00                	fld	fs0,24(a0)
    173a:	5b01                	li	s6,-32
    173c:	8b02                	jr	s6
    173e:	2d00                	fld	fs0,24(a0)
    1740:	5c01                	li	s8,-32
    1742:	8202                	jr	tp
    1744:	0000                	unimp
    1746:	b82c                	fsd	fa1,112(s0)
    1748:	0004                	0x4
    174a:	8e00                	0x8e00
    174c:	001d                	c.nop	7
    174e:	6600                	flw	fs0,8(a2)
    1750:	2d000017          	auipc	zero,0x2d000
    1754:	5a01                	li	s4,-32
    1756:	8302                	jr	t1
    1758:	2d00                	fld	fs0,24(a0)
    175a:	5b01                	li	s6,-32
    175c:	7902                	flw	fs2,32(sp)
    175e:	2d00                	fld	fs0,24(a0)
    1760:	5c01                	li	s8,-32
    1762:	8202                	jr	tp
    1764:	0000                	unimp
    1766:	c02c                	sw	a1,64(s0)
    1768:	0004                	0x4
    176a:	2c00                	fld	fs0,24(s0)
    176c:	001e                	c.slli	zero,0x7
    176e:	8600                	0x8600
    1770:	2d000017          	auipc	zero,0x2d000
    1774:	5a01                	li	s4,-32
    1776:	7202                	flw	ft4,32(sp)
    1778:	2d00                	fld	fs0,24(a0)
    177a:	5b01                	li	s6,-32
    177c:	8802                	jr	a6
    177e:	2d00                	fld	fs0,24(a0)
    1780:	5c01                	li	s8,-32
    1782:	8602                	jr	a2
    1784:	0000                	unimp
    1786:	c82c                	sw	a1,80(s0)
    1788:	0004                	0x4
    178a:	8e00                	0x8e00
    178c:	001d                	c.nop	7
    178e:	a600                	fsd	fs0,8(a2)
    1790:	2d000017          	auipc	zero,0x2d000
    1794:	5a01                	li	s4,-32
    1796:	7202                	flw	ft4,32(sp)
    1798:	2d00                	fld	fs0,24(a0)
    179a:	5b01                	li	s6,-32
    179c:	7902                	flw	fs2,32(sp)
    179e:	2d00                	fld	fs0,24(a0)
    17a0:	5c01                	li	s8,-32
    17a2:	8602                	jr	a2
    17a4:	0000                	unimp
    17a6:	462c                	lw	a1,72(a2)
    17a8:	0005                	c.nop	1
    17aa:	2c00                	fld	fs0,24(s0)
    17ac:	001e                	c.slli	zero,0x7
    17ae:	c900                	sw	s0,16(a0)
    17b0:	2d000017          	auipc	zero,0x2d000
    17b4:	5a01                	li	s4,-32
    17b6:	0305                	addi	t1,t1,1
    17b8:	1688                	addi	a0,sp,864
    17ba:	0000                	unimp
    17bc:	012d                	addi	sp,sp,11
    17be:	0084025b          	0x84025b
    17c2:	012d                	addi	sp,sp,11
    17c4:	025c                	addi	a5,sp,260
    17c6:	6908                	flw	fa0,16(a0)
    17c8:	2c00                	fld	fs0,24(s0)
    17ca:	05b6                	slli	a1,a1,0xd
    17cc:	0000                	unimp
    17ce:	1d8e                	slli	s11,s11,0x23
    17d0:	0000                	unimp
    17d2:	17e9                	addi	a5,a5,-6
    17d4:	0000                	unimp
    17d6:	012d                	addi	sp,sp,11
    17d8:	025a                	slli	tp,tp,0x16
    17da:	0085                	addi	ra,ra,1
    17dc:	012d                	addi	sp,sp,11
    17de:	0079025b          	0x79025b
    17e2:	012d                	addi	sp,sp,11
    17e4:	025c                	addi	a5,sp,260
    17e6:	6908                	flw	fa0,16(a0)
    17e8:	2c00                	fld	fs0,24(s0)
    17ea:	05d4                	addi	a3,sp,708
    17ec:	0000                	unimp
    17ee:	1b74                	addi	a3,sp,444
    17f0:	0000                	unimp
    17f2:	181a                	slli	a6,a6,0x26
    17f4:	0000                	unimp
    17f6:	012d                	addi	sp,sp,11
    17f8:	025a                	slli	tp,tp,0x16
    17fa:	0072                	c.slli	zero,0x1c
    17fc:	012d                	addi	sp,sp,11
    17fe:	0086025b          	0x86025b
    1802:	012d                	addi	sp,sp,11
    1804:	025c                	addi	a5,sp,260
    1806:	0085                	addi	ra,ra,1
    1808:	012d                	addi	sp,sp,11
    180a:	025d                	addi	tp,tp,23
    180c:	0086                	slli	ra,ra,0x1
    180e:	012d                	addi	sp,sp,11
    1810:	025e                	slli	tp,tp,0x17
    1812:	0079                	c.nop	30
    1814:	012d                	addi	sp,sp,11
    1816:	015f 0030 e62c      	0xe62c0030015f
    181c:	0005                	c.nop	1
    181e:	8e00                	0x8e00
    1820:	001d                	c.nop	7
    1822:	3a00                	fld	fs0,48(a2)
    1824:	0018                	0x18
    1826:	2d00                	fld	fs0,24(a0)
    1828:	5a01                	li	s4,-32
    182a:	8b02                	jr	s6
    182c:	2d00                	fld	fs0,24(a0)
    182e:	5b01                	li	s6,-32
    1830:	7902                	flw	fs2,32(sp)
    1832:	2d00                	fld	fs0,24(a0)
    1834:	5c01                	li	s8,-32
    1836:	0802                	c.slli64	a6
    1838:	0069                	c.nop	26
    183a:	002c                	addi	a1,sp,8
    183c:	0006                	c.slli	zero,0x1
    183e:	c200                	sw	s0,0(a2)
    1840:	001e                	c.slli	zero,0x7
    1842:	5a00                	lw	s0,48(a2)
    1844:	0018                	0x18
    1846:	2d00                	fld	fs0,24(a0)
    1848:	5a01                	li	s4,-32
    184a:	8302                	jr	t1
    184c:	2d00                	fld	fs0,24(a0)
    184e:	5b01                	li	s6,-32
    1850:	8b02                	jr	s6
    1852:	2d00                	fld	fs0,24(a0)
    1854:	5c01                	li	s8,-32
    1856:	0802                	c.slli64	a6
    1858:	0069                	c.nop	26
    185a:	1a2c                	addi	a1,sp,312
    185c:	0006                	c.slli	zero,0x1
    185e:	8e00                	0x8e00
    1860:	001d                	c.nop	7
    1862:	7a00                	flw	fs0,48(a2)
    1864:	0018                	0x18
    1866:	2d00                	fld	fs0,24(a0)
    1868:	5a01                	li	s4,-32
    186a:	8302                	jr	t1
    186c:	2d00                	fld	fs0,24(a0)
    186e:	5b01                	li	s6,-32
    1870:	7902                	flw	fs2,32(sp)
    1872:	2d00                	fld	fs0,24(a0)
    1874:	5c01                	li	s8,-32
    1876:	0802                	c.slli64	a6
    1878:	0069                	c.nop	26
    187a:	342c                	fld	fa1,104(s0)
    187c:	0006                	c.slli	zero,0x1
    187e:	5800                	lw	s0,48(s0)
    1880:	001f 9a00 0018      	0x189a00001f
    1886:	2d00                	fld	fs0,24(a0)
    1888:	5a01                	li	s4,-32
    188a:	8402                	jr	s0
    188c:	2d00                	fld	fs0,24(a0)
    188e:	5b01                	li	s6,-32
    1890:	8502                	jr	a0
    1892:	2d00                	fld	fs0,24(a0)
    1894:	5c01                	li	s8,-32
    1896:	0802                	c.slli64	a6
    1898:	0069                	c.nop	26
    189a:	4c2c                	lw	a1,88(s0)
    189c:	0006                	c.slli	zero,0x1
    189e:	8e00                	0x8e00
    18a0:	001d                	c.nop	7
    18a2:	ba00                	fsd	fs0,48(a2)
    18a4:	0018                	0x18
    18a6:	2d00                	fld	fs0,24(a0)
    18a8:	5a01                	li	s4,-32
    18aa:	8402                	jr	s0
    18ac:	2d00                	fld	fs0,24(a0)
    18ae:	5b01                	li	s6,-32
    18b0:	7902                	flw	fs2,32(sp)
    18b2:	2d00                	fld	fs0,24(a0)
    18b4:	5c01                	li	s8,-32
    18b6:	0802                	c.slli64	a6
    18b8:	0069                	c.nop	26
    18ba:	6e2c                	flw	fa1,88(a2)
    18bc:	0006                	c.slli	zero,0x1
    18be:	8e00                	0x8e00
    18c0:	001d                	c.nop	7
    18c2:	da00                	sw	s0,48(a2)
    18c4:	0018                	0x18
    18c6:	2d00                	fld	fs0,24(a0)
    18c8:	5a01                	li	s4,-32
    18ca:	8502                	jr	a0
    18cc:	2d00                	fld	fs0,24(a0)
    18ce:	5b01                	li	s6,-32
    18d0:	7902                	flw	fs2,32(sp)
    18d2:	2d00                	fld	fs0,24(a0)
    18d4:	5c01                	li	s8,-32
    18d6:	8202                	jr	tp
    18d8:	0000                	unimp
    18da:	7e2c                	flw	fa1,120(a2)
    18dc:	0006                	c.slli	zero,0x1
    18de:	8e00                	0x8e00
    18e0:	001d                	c.nop	7
    18e2:	f400                	fsw	fs0,40(s0)
    18e4:	0018                	0x18
    18e6:	2d00                	fld	fs0,24(a0)
    18e8:	5b01                	li	s6,-32
    18ea:	7902                	flw	fs2,32(sp)
    18ec:	2d00                	fld	fs0,24(a0)
    18ee:	5c01                	li	s8,-32
    18f0:	8202                	jr	tp
    18f2:	0000                	unimp
    18f4:	862c                	0x862c
    18f6:	0006                	c.slli	zero,0x1
    18f8:	c200                	sw	s0,0(a2)
    18fa:	001e                	c.slli	zero,0x7
    18fc:	1400                	addi	s0,sp,544
    18fe:	0019                	c.nop	6
    1900:	2d00                	fld	fs0,24(a0)
    1902:	5a01                	li	s4,-32
    1904:	8302                	jr	t1
    1906:	2d00                	fld	fs0,24(a0)
    1908:	5b01                	li	s6,-32
    190a:	8b02                	jr	s6
    190c:	2d00                	fld	fs0,24(a0)
    190e:	5c01                	li	s8,-32
    1910:	8202                	jr	tp
    1912:	0000                	unimp
    1914:	8e2c                	0x8e2c
    1916:	0006                	c.slli	zero,0x1
    1918:	8e00                	0x8e00
    191a:	001d                	c.nop	7
    191c:	3400                	fld	fs0,40(s0)
    191e:	0019                	c.nop	6
    1920:	2d00                	fld	fs0,24(a0)
    1922:	5a01                	li	s4,-32
    1924:	8302                	jr	t1
    1926:	2d00                	fld	fs0,24(a0)
    1928:	5b01                	li	s6,-32
    192a:	7902                	flw	fs2,32(sp)
    192c:	2d00                	fld	fs0,24(a0)
    192e:	5c01                	li	s8,-32
    1930:	8202                	jr	tp
    1932:	0000                	unimp
    1934:	962c                	0x962c
    1936:	0006                	c.slli	zero,0x1
    1938:	5800                	lw	s0,48(s0)
    193a:	001f 5400 0019      	0x195400001f
    1940:	2d00                	fld	fs0,24(a0)
    1942:	5a01                	li	s4,-32
    1944:	8402                	jr	s0
    1946:	2d00                	fld	fs0,24(a0)
    1948:	5b01                	li	s6,-32
    194a:	8502                	jr	a0
    194c:	2d00                	fld	fs0,24(a0)
    194e:	5c01                	li	s8,-32
    1950:	8202                	jr	tp
    1952:	0000                	unimp
    1954:	9e2c                	0x9e2c
    1956:	0006                	c.slli	zero,0x1
    1958:	8e00                	0x8e00
    195a:	001d                	c.nop	7
    195c:	7400                	flw	fs0,40(s0)
    195e:	0019                	c.nop	6
    1960:	2d00                	fld	fs0,24(a0)
    1962:	5a01                	li	s4,-32
    1964:	8402                	jr	s0
    1966:	2d00                	fld	fs0,24(a0)
    1968:	5b01                	li	s6,-32
    196a:	7902                	flw	fs2,32(sp)
    196c:	2d00                	fld	fs0,24(a0)
    196e:	5c01                	li	s8,-32
    1970:	8202                	jr	tp
    1972:	0000                	unimp
    1974:	e62e                	fsw	fa1,12(sp)
    1976:	0006                	c.slli	zero,0x1
    1978:	2c00                	fld	fs0,24(s0)
    197a:	001e                	c.slli	zero,0x7
    197c:	2d00                	fld	fs0,24(a0)
    197e:	5a01                	li	s4,-32
    1980:	0305                	addi	t1,t1,1
    1982:	1688                	addi	a0,sp,864
    1984:	0000                	unimp
    1986:	012d                	addi	sp,sp,11
    1988:	0084025b          	0x84025b
    198c:	012d                	addi	sp,sp,11
    198e:	025c                	addi	a5,sp,260
    1990:	0082                	c.slli64	ra
    1992:	0000                	unimp
    1994:	6909                	lui	s2,0x2
    1996:	0000                	unimp
    1998:	a700                	fsd	fs0,8(a4)
    199a:	0019                	c.nop	6
    199c:	3500                	fld	fs0,40(a0)
    199e:	0075                	c.nop	29
    19a0:	0000                	unimp
    19a2:	16c2                	slli	a3,a3,0x30
    19a4:	0000                	unimp
    19a6:	0900                	addi	s0,sp,144
    19a8:	0069                	c.nop	26
    19aa:	0000                	unimp
    19ac:	19ba                	slli	s3,s3,0x2e
    19ae:	0000                	unimp
    19b0:	7535                	lui	a0,0xfffed
    19b2:	0000                	unimp
    19b4:	cb00                	sw	s0,16(a4)
    19b6:	0016                	c.slli	zero,0x5
    19b8:	0000                	unimp
    19ba:	6909                	lui	s2,0x2
    19bc:	0000                	unimp
    19be:	cd00                	sw	s0,24(a0)
    19c0:	0019                	c.nop	6
    19c2:	3500                	fld	fs0,40(a0)
    19c4:	0075                	c.nop	29
    19c6:	0000                	unimp
    19c8:	16d4                	addi	a3,sp,868
    19ca:	0000                	unimp
    19cc:	0900                	addi	s0,sp,144
    19ce:	0069                	c.nop	26
    19d0:	0000                	unimp
    19d2:	19e0                	addi	s0,sp,252
    19d4:	0000                	unimp
    19d6:	7535                	lui	a0,0xfffed
    19d8:	0000                	unimp
    19da:	dd00                	sw	s0,56(a0)
    19dc:	0016                	c.slli	zero,0x5
    19de:	0000                	unimp
    19e0:	00074337          	lui	t1,0x74
    19e4:	0100                	addi	s0,sp,128
    19e6:	06e0                	addi	s0,sp,844
    19e8:	0b98                	addi	a4,sp,464
    19ea:	0000                	unimp
    19ec:	02bc                	addi	a5,sp,328
    19ee:	0000                	unimp
    19f0:	015e                	slli	sp,sp,0x17
    19f2:	0000                	unimp
    19f4:	9c01                	0x9c01
    19f6:	1b32                	slli	s6,s6,0x2c
    19f8:	0000                	unimp
    19fa:	6138                	flw	fa4,64(a0)
    19fc:	0100                	addi	s0,sp,128
    19fe:	15e0                	addi	s0,sp,748
    1a00:	0b98                	addi	a4,sp,464
    1a02:	0000                	unimp
    1a04:	0000128b          	0x128b
    1a08:	fd39                	bnez	a0,1966 <ti_2+0x86>
    1a0a:	0001                	nop
    1a0c:	0100                	addi	s0,sp,128
    1a0e:	1ce0                	addi	s0,sp,636
    1a10:	0069                	c.nop	26
    1a12:	0000                	unimp
    1a14:	12d0                	addi	a2,sp,356
    1a16:	0000                	unimp
    1a18:	6238                	flw	fa4,64(a2)
    1a1a:	0100                	addi	s0,sp,128
    1a1c:	29e0                	fld	fs0,208(a1)
    1a1e:	0b98                	addi	a4,sp,464
    1a20:	0000                	unimp
    1a22:	1321                	addi	t1,t1,-24
    1a24:	0000                	unimp
    1a26:	0439                	addi	s0,s0,14
    1a28:	0002                	c.slli64	zero
    1a2a:	0100                	addi	s0,sp,128
    1a2c:	30e0                	fld	fs0,224(s1)
    1a2e:	0069                	c.nop	26
    1a30:	0000                	unimp
    1a32:	1358                	addi	a4,sp,420
    1a34:	0000                	unimp
    1a36:	1639                	addi	a2,a2,-18
    1a38:	0004                	0x4
    1a3a:	0100                	addi	s0,sp,128
    1a3c:	3ce0                	fld	fs0,248(s1)
    1a3e:	0069                	c.nop	26
    1a40:	0000                	unimp
    1a42:	0000138f          	0x138f
    1a46:	c23a                	sw	a4,4(sp)
    1a48:	0005                	c.nop	1
    1a4a:	0100                	addi	s0,sp,128
    1a4c:	09e2                	slli	s3,s3,0x18
    1a4e:	1b32                	slli	s6,s6,0x2c
    1a50:	0000                	unimp
    1a52:	13c6                	slli	t2,t2,0x31
    1a54:	0000                	unimp
    1a56:	0100693b          	0x100693b
    1a5a:	006909e3          	beq	s2,t1,226c <_min_stack+0x26c>
    1a5e:	0000                	unimp
    1a60:	13e6                	slli	t2,t2,0x39
    1a62:	0000                	unimp
    1a64:	01006a3b          	0x1006a3b
    1a68:	00690be3          	beq	s2,t1,227e <_min_stack+0x27e>
    1a6c:	0000                	unimp
    1a6e:	00001427          	0x1427
    1a72:	01006b3b          	0x1006b3b
    1a76:	00690de3          	beq	s2,t1,2290 <_min_stack+0x290>
    1a7a:	0000                	unimp
    1a7c:	1472                	slli	s0,s0,0x3c
    1a7e:	0000                	unimp
    1a80:	ac3a                	fsd	fa4,24(sp)
    1a82:	0004                	0x4
    1a84:	0100                	addi	s0,sp,128
    1a86:	0ae4                	addi	s1,sp,348
    1a88:	0b98                	addi	a4,sp,464
    1a8a:	0000                	unimp
    1a8c:	14c0                	addi	s0,sp,612
    1a8e:	0000                	unimp
    1a90:	a43a                	fsd	fa4,8(sp)
    1a92:	0002                	c.slli64	zero
    1a94:	0100                	addi	s0,sp,128
    1a96:	09e5                	addi	s3,s3,25
    1a98:	1b4e                	slli	s6,s6,0x33
    1a9a:	0000                	unimp
    1a9c:	14d8                	addi	a4,sp,612
    1a9e:	0000                	unimp
    1aa0:	a93a                	fsd	fa4,144(sp)
    1aa2:	0002                	c.slli64	zero
    1aa4:	0100                	addi	s0,sp,128
    1aa6:	09e6                	slli	s3,s3,0x19
    1aa8:	1b61                	addi	s6,s6,-8
    1aaa:	0000                	unimp
    1aac:	14f8                	addi	a4,sp,620
    1aae:	0000                	unimp
    1ab0:	7534                	flw	fa3,104(a0)
    1ab2:	0000                	unimp
    1ab4:	4500                	lw	s0,8(a0)
    1ab6:	0015                	c.nop	5
    1ab8:	3400                	fld	fs0,40(s0)
    1aba:	0075                	c.nop	29
    1abc:	0000                	unimp
    1abe:	159a                	slli	a1,a1,0x26
    1ac0:	0000                	unimp
    1ac2:	7534                	flw	fa3,104(a0)
    1ac4:	0000                	unimp
    1ac6:	ed00                	fsw	fs0,24(a0)
    1ac8:	0015                	c.nop	5
    1aca:	3400                	fld	fs0,40(s0)
    1acc:	0075                	c.nop	29
    1ace:	0000                	unimp
    1ad0:	0000161b          	0x161b
    1ad4:	3a2c                	fld	fa1,112(a2)
    1ad6:	2c000003          	lb	zero,704(zero) # 2c0 <polymult2+0x4>
    1ada:	001e                	c.slli	zero,0x7
    1adc:	f500                	fsw	fs0,40(a0)
    1ade:	001a                	c.slli	zero,0x6
    1ae0:	2d00                	fld	fs0,24(a0)
    1ae2:	5a01                	li	s4,-32
    1ae4:	8b02                	jr	s6
    1ae6:	2d00                	fld	fs0,24(a0)
    1ae8:	5b01                	li	s6,-32
    1aea:	5a01f303          	0x5a01f303
    1aee:	012d                	addi	sp,sp,11
    1af0:	025c                	addi	a5,sp,260
    1af2:	018a                	slli	gp,gp,0x2
    1af4:	2c00                	fld	fs0,24(s0)
    1af6:	0342                	slli	t1,t1,0x10
    1af8:	0000                	unimp
    1afa:	1e2c                	addi	a1,sp,824
    1afc:	0000                	unimp
    1afe:	1b15                	addi	s6,s6,-27
    1b00:	0000                	unimp
    1b02:	012d                	addi	sp,sp,11
    1b04:	025a                	slli	tp,tp,0x16
    1b06:	0072                	c.slli	zero,0x1c
    1b08:	012d                	addi	sp,sp,11
    1b0a:	0089025b          	0x89025b
    1b0e:	012d                	addi	sp,sp,11
    1b10:	025c                	addi	a5,sp,260
    1b12:	0084                	addi	s1,sp,64
    1b14:	2e00                	fld	fs0,24(a2)
    1b16:	0414                	addi	a3,sp,512
    1b18:	0000                	unimp
    1b1a:	1f58                	addi	a4,sp,948
    1b1c:	0000                	unimp
    1b1e:	012d                	addi	sp,sp,11
    1b20:	025a                	slli	tp,tp,0x16
    1b22:	0082                	c.slli64	ra
    1b24:	012d                	addi	sp,sp,11
    1b26:	0085025b          	0x85025b
    1b2a:	012d                	addi	sp,sp,11
    1b2c:	025c                	addi	a5,sp,260
    1b2e:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
    1b32:	6909                	lui	s2,0x2
    1b34:	0000                	unimp
    1b36:	4e00                	lw	s0,24(a2)
    1b38:	3500001b          	0x3500001b
    1b3c:	0075                	c.nop	29
    1b3e:	0000                	unimp
    1b40:	1ab0                	addi	a2,sp,376
    1b42:	0000                	unimp
    1b44:	7535                	lui	a0,0xfffed
    1b46:	0000                	unimp
    1b48:	b900                	fsd	fs0,48(a0)
    1b4a:	001a                	c.slli	zero,0x6
    1b4c:	0000                	unimp
    1b4e:	6909                	lui	s2,0x2
    1b50:	0000                	unimp
    1b52:	6100                	flw	fs0,0(a0)
    1b54:	3500001b          	0x3500001b
    1b58:	0075                	c.nop	29
    1b5a:	0000                	unimp
    1b5c:	1ac2                	slli	s5,s5,0x30
    1b5e:	0000                	unimp
    1b60:	0900                	addi	s0,sp,144
    1b62:	0069                	c.nop	26
    1b64:	0000                	unimp
    1b66:	1b74                	addi	a3,sp,444
    1b68:	0000                	unimp
    1b6a:	7535                	lui	a0,0xfffed
    1b6c:	0000                	unimp
    1b6e:	cb00                	sw	s0,16(a4)
    1b70:	001a                	c.slli	zero,0x6
    1b72:	0000                	unimp
    1b74:	00045237          	lui	tp,0x45
    1b78:	0100                	addi	s0,sp,128
    1b7a:	0b980683          	lb	a3,185(a6)
    1b7e:	0000                	unimp
    1b80:	0128                	addi	a0,sp,136
    1b82:	0000                	unimp
    1b84:	0194                	addi	a3,sp,192
    1b86:	0000                	unimp
    1b88:	9c01                	0x9c01
    1b8a:	1d4c                	addi	a1,sp,692
    1b8c:	0000                	unimp
    1b8e:	6138                	flw	fa4,64(a0)
    1b90:	0100                	addi	s0,sp,128
    1b92:	0b981483          	lh	s1,185(a6)
    1b96:	0000                	unimp
    1b98:	1670                	addi	a2,sp,812
    1b9a:	0000                	unimp
    1b9c:	fd39                	bnez	a0,1afa <random_keys+0x8a>
    1b9e:	0001                	nop
    1ba0:	0100                	addi	s0,sp,128
    1ba2:	00691b83          	lh	s7,6(s2) # 2006 <_min_stack+0x6>
    1ba6:	0000                	unimp
    1ba8:	16b5                	addi	a3,a3,-19
    1baa:	0000                	unimp
    1bac:	6238                	flw	fa4,64(a2)
    1bae:	0100                	addi	s0,sp,128
    1bb0:	0b982883          	lw	a7,185(a6)
    1bb4:	0000                	unimp
    1bb6:	000016ef          	jal	a3,2bb6 <_min_stack+0xbb6>
    1bba:	0439                	addi	s0,s0,14
    1bbc:	0002                	c.slli64	zero
    1bbe:	0100                	addi	s0,sp,128
    1bc0:	00692f83          	lw	t6,6(s2)
    1bc4:	0000                	unimp
    1bc6:	0000173f 646f6d38 	0x646f6d380000173f
    1bce:	0100                	addi	s0,sp,128
    1bd0:	00693b83          	0x693b83
    1bd4:	0000                	unimp
    1bd6:	1776                	slli	a4,a4,0x3d
    1bd8:	0000                	unimp
    1bda:	1639                	addi	a2,a2,-18
    1bdc:	0004                	0x4
    1bde:	0100                	addi	s0,sp,128
    1be0:	00694483          	lbu	s1,6(s2)
    1be4:	0000                	unimp
    1be6:	17d9                	addi	a5,a5,-10
    1be8:	0000                	unimp
    1bea:	c23a                	sw	a4,4(sp)
    1bec:	0005                	c.nop	1
    1bee:	0100                	addi	s0,sp,128
    1bf0:	0986                	slli	s3,s3,0x1
    1bf2:	1d4c                	addi	a1,sp,692
    1bf4:	0000                	unimp
    1bf6:	1810                	addi	a2,sp,48
    1bf8:	0000                	unimp
    1bfa:	0100693b          	0x100693b
    1bfe:	00690987          	0x690987
    1c02:	0000                	unimp
    1c04:	1830                	addi	a2,sp,56
    1c06:	0000                	unimp
    1c08:	01006a3b          	0x1006a3b
    1c0c:	00690b87          	0x690b87
    1c10:	0000                	unimp
    1c12:	1871                	addi	a6,a6,-4
    1c14:	0000                	unimp
    1c16:	01006b3b          	0x1006b3b
    1c1a:	00690d87          	0x690d87
    1c1e:	0000                	unimp
    1c20:	18bc                	addi	a5,sp,120
    1c22:	0000                	unimp
    1c24:	9c3a                	add	s8,s8,a4
    1c26:	0004                	0x4
    1c28:	0100                	addi	s0,sp,128
    1c2a:	0a88                	addi	a0,sp,336
    1c2c:	0b98                	addi	a4,sp,464
    1c2e:	0000                	unimp
    1c30:	190a                	slli	s2,s2,0x22
    1c32:	0000                	unimp
    1c34:	a43a                	fsd	fa4,8(sp)
    1c36:	0002                	c.slli64	zero
    1c38:	0100                	addi	s0,sp,128
    1c3a:	0989                	addi	s3,s3,2
    1c3c:	1d68                	addi	a0,sp,700
    1c3e:	0000                	unimp
    1c40:	1922                	slli	s2,s2,0x28
    1c42:	0000                	unimp
    1c44:	a93a                	fsd	fa4,144(sp)
    1c46:	0002                	c.slli64	zero
    1c48:	0100                	addi	s0,sp,128
    1c4a:	098a                	slli	s3,s3,0x2
    1c4c:	00001d7b          	0x1d7b
    1c50:	1942                	slli	s2,s2,0x30
    1c52:	0000                	unimp
    1c54:	7534                	flw	fa3,104(a0)
    1c56:	0000                	unimp
    1c58:	8f00                	0x8f00
    1c5a:	0019                	c.nop	6
    1c5c:	3400                	fld	fs0,40(s0)
    1c5e:	0075                	c.nop	29
    1c60:	0000                	unimp
    1c62:	19e4                	addi	s1,sp,252
    1c64:	0000                	unimp
    1c66:	7534                	flw	fa3,104(a0)
    1c68:	0000                	unimp
    1c6a:	5400                	lw	s0,40(s0)
    1c6c:	001a                	c.slli	zero,0x6
    1c6e:	3400                	fld	fs0,40(s0)
    1c70:	0075                	c.nop	29
    1c72:	0000                	unimp
    1c74:	1a99                	addi	s5,s5,-26
    1c76:	0000                	unimp
    1c78:	b22c                	fsd	fa1,96(a2)
    1c7a:	0001                	nop
    1c7c:	2c00                	fld	fs0,24(s0)
    1c7e:	001e                	c.slli	zero,0x7
    1c80:	9900                	0x9900
    1c82:	001c                	0x1c
    1c84:	2d00                	fld	fs0,24(a0)
    1c86:	5a01                	li	s4,-32
    1c88:	8a02                	jr	s4
    1c8a:	2d00                	fld	fs0,24(a0)
    1c8c:	5b01                	li	s6,-32
    1c8e:	5a01f303          	0x5a01f303
    1c92:	012d                	addi	sp,sp,11
    1c94:	025c                	addi	a5,sp,260
    1c96:	2c000087          	0x2c000087
    1c9a:	01ba                	slli	gp,gp,0xe
    1c9c:	0000                	unimp
    1c9e:	1d8e                	slli	s11,s11,0x23
    1ca0:	0000                	unimp
    1ca2:	1cb9                	addi	s9,s9,-18
    1ca4:	0000                	unimp
    1ca6:	012d                	addi	sp,sp,11
    1ca8:	025a                	slli	tp,tp,0x16
    1caa:	008a                	slli	ra,ra,0x2
    1cac:	012d                	addi	sp,sp,11
    1cae:	0084025b          	0x84025b
    1cb2:	012d                	addi	sp,sp,11
    1cb4:	025c                	addi	a5,sp,260
    1cb6:	2c000087          	0x2c000087
    1cba:	01c6                	slli	gp,gp,0x11
    1cbc:	0000                	unimp
    1cbe:	1e2c                	addi	a1,sp,824
    1cc0:	0000                	unimp
    1cc2:	00001cdb          	0x1cdb
    1cc6:	012d                	addi	sp,sp,11
    1cc8:	025a                	slli	tp,tp,0x16
    1cca:	0072                	c.slli	zero,0x1c
    1ccc:	012d                	addi	sp,sp,11
    1cce:	b878045b          	0xb878045b
    1cd2:	067f                	0x67f
    1cd4:	012d                	addi	sp,sp,11
    1cd6:	025c                	addi	a5,sp,260
    1cd8:	2c000083          	lb	ra,704(zero) # 2c0 <polymult2+0x4>
    1cdc:	01ce                	slli	gp,gp,0x13
    1cde:	0000                	unimp
    1ce0:	1d8e                	slli	s11,s11,0x23
    1ce2:	0000                	unimp
    1ce4:	00001cfb          	0x1cfb
    1ce8:	012d                	addi	sp,sp,11
    1cea:	025a                	slli	tp,tp,0x16
    1cec:	0072                	c.slli	zero,0x1c
    1cee:	012d                	addi	sp,sp,11
    1cf0:	0084025b          	0x84025b
    1cf4:	012d                	addi	sp,sp,11
    1cf6:	025c                	addi	a5,sp,260
    1cf8:	2c000083          	lb	ra,704(zero) # 2c0 <polymult2+0x4>
    1cfc:	0234                	addi	a3,sp,264
    1cfe:	0000                	unimp
    1d00:	1d8e                	slli	s11,s11,0x23
    1d02:	0000                	unimp
    1d04:	00001d1b          	0x1d1b
    1d08:	012d                	addi	sp,sp,11
    1d0a:	025a                	slli	tp,tp,0x16
    1d0c:	0086                	slli	ra,ra,0x1
    1d0e:	012d                	addi	sp,sp,11
    1d10:	0084025b          	0x84025b
    1d14:	012d                	addi	sp,sp,11
    1d16:	025c                	addi	a5,sp,260
    1d18:	0085                	addi	ra,ra,1
    1d1a:	2c00                	fld	fs0,24(s0)
    1d1c:	02ae                	slli	t0,t0,0xb
    1d1e:	0000                	unimp
    1d20:	1d8e                	slli	s11,s11,0x23
    1d22:	0000                	unimp
    1d24:	00001d2f          	0x1d2f
    1d28:	012d                	addi	sp,sp,11
    1d2a:	025a                	slli	tp,tp,0x16
    1d2c:	0079                	c.nop	30
    1d2e:	2e00                	fld	fs0,24(a2)
    1d30:	02b6                	slli	t0,t0,0xd
    1d32:	0000                	unimp
    1d34:	1f58                	addi	a4,sp,948
    1d36:	0000                	unimp
    1d38:	012d                	addi	sp,sp,11
    1d3a:	025a                	slli	tp,tp,0x16
    1d3c:	0086                	slli	ra,ra,0x1
    1d3e:	012d                	addi	sp,sp,11
    1d40:	0079025b          	0x79025b
    1d44:	012d                	addi	sp,sp,11
    1d46:	025c                	addi	a5,sp,260
    1d48:	0085                	addi	ra,ra,1
    1d4a:	0000                	unimp
    1d4c:	6909                	lui	s2,0x2
    1d4e:	0000                	unimp
    1d50:	6800                	flw	fs0,16(s0)
    1d52:	001d                	c.nop	7
    1d54:	3500                	fld	fs0,40(a0)
    1d56:	0075                	c.nop	29
    1d58:	0000                	unimp
    1d5a:	1c54                	addi	a3,sp,564
    1d5c:	0000                	unimp
    1d5e:	7535                	lui	a0,0xfffed
    1d60:	0000                	unimp
    1d62:	5d00                	lw	s0,56(a0)
    1d64:	001c                	0x1c
    1d66:	0000                	unimp
    1d68:	6909                	lui	s2,0x2
    1d6a:	0000                	unimp
    1d6c:	7b00                	flw	fs0,48(a4)
    1d6e:	001d                	c.nop	7
    1d70:	3500                	fld	fs0,40(a0)
    1d72:	0075                	c.nop	29
    1d74:	0000                	unimp
    1d76:	1c66                	slli	s8,s8,0x39
    1d78:	0000                	unimp
    1d7a:	0900                	addi	s0,sp,144
    1d7c:	0069                	c.nop	26
    1d7e:	0000                	unimp
    1d80:	1d8e                	slli	s11,s11,0x23
    1d82:	0000                	unimp
    1d84:	7535                	lui	a0,0xfffed
    1d86:	0000                	unimp
    1d88:	6f00                	flw	fs0,24(a4)
    1d8a:	001c                	0x1c
    1d8c:	0000                	unimp
    1d8e:	bb3c                	fsd	fa5,112(a4)
    1d90:	0001                	nop
    1d92:	0100                	addi	s0,sp,128
    1d94:	0672                	slli	a2,a2,0x1c
    1d96:	010a                	slli	sp,sp,0x2
    1d98:	0000                	unimp
    1d9a:	001e                	c.slli	zero,0x7
    1d9c:	0000                	unimp
    1d9e:	9c01                	0x9c01
    1da0:	1e01                	addi	t3,t3,-32
    1da2:	0000                	unimp
    1da4:	613d                	addi	sp,sp,480
    1da6:	0031                	c.nop	12
    1da8:	7201                	lui	tp,0xfffe0
    1daa:	9815                	andi	s0,s0,-27
    1dac:	0100000b          	0x100000b
    1db0:	3d5a                	fld	fs10,432(sp)
    1db2:	6f6d                	lui	t5,0x1b
    1db4:	0064                	addi	s1,sp,12
    1db6:	7201                	lui	tp,0xfffe0
    1db8:	691d                	lui	s2,0x7
    1dba:	0000                	unimp
    1dbc:	0100                	addi	s0,sp,128
    1dbe:	0460395b          	0x460395b
    1dc2:	0000                	unimp
    1dc4:	7201                	lui	tp,0xfffe0
    1dc6:	6925                	lui	s2,0x9
    1dc8:	0000                	unimp
    1dca:	ee00                	fsw	fs0,24(a2)
    1dcc:	001a                	c.slli	zero,0x6
    1dce:	3b00                	fld	fs0,48(a4)
    1dd0:	0069                	c.nop	26
    1dd2:	7701                	lui	a4,0xfffe0
    1dd4:	6905                	lui	s2,0x1
    1dd6:	0000                	unimp
    1dd8:	0f00                	addi	s0,sp,912
    1dda:	3e00001b          	0x3e00001b
    1dde:	1e01                	addi	t3,t3,-32
    1de0:	0000                	unimp
    1de2:	0110                	addi	a2,sp,128
    1de4:	0000                	unimp
    1de6:	0000                	unimp
    1de8:	0000                	unimp
    1dea:	7a01                	lui	s4,0xfffe0
    1dec:	3f09                	jal	1cfe <random_keys+0x28e>
    1dee:	1e19                	addi	t3,t3,-26
    1df0:	0000                	unimp
    1df2:	1b2e                	slli	s6,s6,0x2b
    1df4:	0000                	unimp
    1df6:	001e0e3f 001b4100 	0x1b4100001e0e3f
    1dfe:	0000                	unimp
    1e00:	4000                	lw	s0,0(s0)
    1e02:	0000051b          	0x51b
    1e06:	6301                	0x6301
    1e08:	0106                	slli	sp,sp,0x1
    1e0a:	1e26                	slli	t3,t3,0x29
    1e0c:	0000                	unimp
    1e0e:	6141                	addi	sp,sp,16
    1e10:	0031                	c.nop	12
    1e12:	6301                	0x6301
    1e14:	261e                	fld	fa2,448(sp)
    1e16:	001e                	c.slli	zero,0x7
    1e18:	4100                	lw	s0,0(a0)
    1e1a:	6f6d                	lui	t5,0x1b
    1e1c:	0064                	addi	s1,sp,12
    1e1e:	6301                	0x6301
    1e20:	0000752f          	0x752f
    1e24:	0000                	unimp
    1e26:	0410                	addi	a2,sp,512
    1e28:	0075                	c.nop	29
    1e2a:	0000                	unimp
    1e2c:	8b3c                	0x8b3c
    1e2e:	0000                	unimp
    1e30:	0100                	addi	s0,sp,128
    1e32:	065c                	addi	a5,sp,772
    1e34:	00e2                	slli	ra,ra,0x18
    1e36:	0000                	unimp
    1e38:	0022                	c.slli	zero,0x8
    1e3a:	0000                	unimp
    1e3c:	9c01                	0x9c01
    1e3e:	1e9e                	slli	t4,t4,0x27
    1e40:	0000                	unimp
    1e42:	613d                	addi	sp,sp,480
    1e44:	0031                	c.nop	12
    1e46:	5c01                	li	s8,-32
    1e48:	9815                	andi	s0,s0,-27
    1e4a:	0100000b          	0x100000b
    1e4e:	3d5a                	fld	fs10,432(sp)
    1e50:	3261                	jal	17d8 <result+0x150>
    1e52:	0100                	addi	s0,sp,128
    1e54:	1d5c                	addi	a5,sp,692
    1e56:	0b98                	addi	a4,sp,464
    1e58:	0000                	unimp
    1e5a:	5b01                	li	s6,-32
    1e5c:	6039                	c.lui	zero,0xe
    1e5e:	0004                	0x4
    1e60:	0100                	addi	s0,sp,128
    1e62:	245c                	fld	fa5,136(s0)
    1e64:	0069                	c.nop	26
    1e66:	0000                	unimp
    1e68:	00001b5b          	0x1b5b
    1e6c:	0100693b          	0x100693b
    1e70:	055d                	addi	a0,a0,23
    1e72:	0069                	c.nop	26
    1e74:	0000                	unimp
    1e76:	1b7c                	addi	a5,sp,444
    1e78:	0000                	unimp
    1e7a:	9e42                	add	t3,t3,a6
    1e7c:	001e                	c.slli	zero,0x7
    1e7e:	f600                	fsw	fs0,40(a2)
    1e80:	0000                	unimp
    1e82:	0a00                	addi	s0,sp,272
    1e84:	0000                	unimp
    1e86:	0100                	addi	s0,sp,128
    1e88:	095f b63f 001e      	0x1eb63f095f
    1e8e:	9b00                	0x9b00
    1e90:	3f00001b          	0x3f00001b
    1e94:	00001eab          	0x1eab
    1e98:	1bbe                	slli	s7,s7,0x2f
    1e9a:	0000                	unimp
    1e9c:	0000                	unimp
    1e9e:	7b40                	flw	fs0,52(a4)
    1ea0:	0000                	unimp
    1ea2:	0100                	addi	s0,sp,128
    1ea4:	c2010647          	fmsub.d	fa2,ft2,ft0,fs8,rne
    1ea8:	001e                	c.slli	zero,0x7
    1eaa:	4100                	lw	s0,0(a0)
    1eac:	3161                	jal	1b34 <random_keys+0xc4>
    1eae:	0100                	addi	s0,sp,128
    1eb0:	1e261e47          	fmsub.q	ft8,fa2,ft2,ft3,rtz
    1eb4:	0000                	unimp
    1eb6:	6141                	addi	sp,sp,16
    1eb8:	0032                	c.slli	zero,0xc
    1eba:	4701                	li	a4,0
    1ebc:	2630                	fld	fa2,72(a2)
    1ebe:	001e                	c.slli	zero,0x7
    1ec0:	0000                	unimp
    1ec2:	823c                	0x823c
    1ec4:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1ec8:	0640                	addi	s0,sp,772
    1eca:	00ba                	slli	ra,ra,0xe
    1ecc:	0000                	unimp
    1ece:	0022                	c.slli	zero,0x8
    1ed0:	0000                	unimp
    1ed2:	9c01                	0x9c01
    1ed4:	1f34                	addi	a3,sp,952
    1ed6:	0000                	unimp
    1ed8:	613d                	addi	sp,sp,480
    1eda:	0031                	c.nop	12
    1edc:	4001                	c.li	zero,0
    1ede:	9815                	andi	s0,s0,-27
    1ee0:	0100000b          	0x100000b
    1ee4:	3d5a                	fld	fs10,432(sp)
    1ee6:	3261                	jal	186e <result+0x1e6>
    1ee8:	0100                	addi	s0,sp,128
    1eea:	1e40                	addi	s0,sp,820
    1eec:	0b98                	addi	a4,sp,464
    1eee:	0000                	unimp
    1ef0:	5b01                	li	s6,-32
    1ef2:	6039                	c.lui	zero,0xe
    1ef4:	0004                	0x4
    1ef6:	0100                	addi	s0,sp,128
    1ef8:	2640                	fld	fs0,136(a2)
    1efa:	0069                	c.nop	26
    1efc:	0000                	unimp
    1efe:	1be1                	addi	s7,s7,-8
    1f00:	0000                	unimp
    1f02:	0100693b          	0x100693b
    1f06:	0541                	addi	a0,a0,16
    1f08:	0069                	c.nop	26
    1f0a:	0000                	unimp
    1f0c:	1c02                	slli	s8,s8,0x20
    1f0e:	0000                	unimp
    1f10:	3442                	fld	fs0,48(sp)
    1f12:	001f ce00 0000      	0xce00001f
    1f18:	0a00                	addi	s0,sp,272
    1f1a:	0000                	unimp
    1f1c:	0100                	addi	s0,sp,128
    1f1e:	4c3f0943          	0x4c3f0943
    1f22:	001f 2100 001c      	0x1c2100001f
    1f28:	3f00                	fld	fs0,56(a4)
    1f2a:	1f41                	addi	t5,t5,-16
    1f2c:	0000                	unimp
    1f2e:	1c44                	addi	s1,sp,564
    1f30:	0000                	unimp
    1f32:	0000                	unimp
    1f34:	4640                	lw	s0,12(a2)
    1f36:	0002                	c.slli64	zero
    1f38:	0100                	addi	s0,sp,128
    1f3a:	062c                	addi	a1,sp,776
    1f3c:	5801                	li	a6,-32
    1f3e:	001f 4100 3161      	0x31614100001f
    1f44:	0100                	addi	s0,sp,128
    1f46:	1e2c                	addi	a1,sp,824
    1f48:	1e26                	slli	t3,t3,0x29
    1f4a:	0000                	unimp
    1f4c:	6141                	addi	sp,sp,16
    1f4e:	0032                	c.slli	zero,0xc
    1f50:	2c01                	jal	2160 <_min_stack+0x160>
    1f52:	2630                	fld	fa2,72(a2)
    1f54:	001e                	c.slli	zero,0x7
    1f56:	0000                	unimp
    1f58:	393c                	fld	fa5,112(a0)
    1f5a:	0001                	nop
    1f5c:	0100                	addi	s0,sp,128
    1f5e:	0625                	addi	a2,a2,9
    1f60:	0092                	slli	ra,ra,0x4
    1f62:	0000                	unimp
    1f64:	0022                	c.slli	zero,0x8
    1f66:	0000                	unimp
    1f68:	9c01                	0x9c01
    1f6a:	1fca                	slli	t6,t6,0x32
    1f6c:	0000                	unimp
    1f6e:	613d                	addi	sp,sp,480
    1f70:	0031                	c.nop	12
    1f72:	2501                	jal	2572 <_min_stack+0x572>
    1f74:	9815                	andi	s0,s0,-27
    1f76:	0100000b          	0x100000b
    1f7a:	3d5a                	fld	fs10,432(sp)
    1f7c:	3261                	jal	1904 <ti_2+0x24>
    1f7e:	0100                	addi	s0,sp,128
    1f80:	1e25                	addi	t3,t3,-23
    1f82:	0b98                	addi	a4,sp,464
    1f84:	0000                	unimp
    1f86:	5b01                	li	s6,-32
    1f88:	6039                	c.lui	zero,0xe
    1f8a:	0004                	0x4
    1f8c:	0100                	addi	s0,sp,128
    1f8e:	2625                	jal	22b6 <_min_stack+0x2b6>
    1f90:	0069                	c.nop	26
    1f92:	0000                	unimp
    1f94:	00001c67          	0x1c67
    1f98:	0100693b          	0x100693b
    1f9c:	0526                	slli	a0,a0,0x9
    1f9e:	0069                	c.nop	26
    1fa0:	0000                	unimp
    1fa2:	1c88                	addi	a0,sp,624
    1fa4:	0000                	unimp
    1fa6:	ca42                	sw	a6,20(sp)
    1fa8:	001f a600 0000      	0xa600001f
    1fae:	0a00                	addi	s0,sp,272
    1fb0:	0000                	unimp
    1fb2:	0100                	addi	s0,sp,128
    1fb4:	0728                	addi	a0,sp,904
    1fb6:	001fe23f 001ca700 	0x1ca700001fe23f
    1fbe:	3f00                	fld	fs0,56(a4)
    1fc0:	00001fd7          	0x1fd7
    1fc4:	1cca                	slli	s9,s9,0x32
    1fc6:	0000                	unimp
    1fc8:	0000                	unimp
    1fca:	4840                	lw	s0,20(s0)
    1fcc:	0004                	0x4
    1fce:	0100                	addi	s0,sp,128
    1fd0:	0610                	addi	a2,sp,768
    1fd2:	ee01                	bnez	a2,1fea <_bss_end+0x7e>
    1fd4:	001f 4100 3161      	0x31614100001f
    1fda:	0100                	addi	s0,sp,128
    1fdc:	1e10                	addi	a2,sp,816
    1fde:	1e26                	slli	t3,t3,0x29
    1fe0:	0000                	unimp
    1fe2:	6141                	addi	sp,sp,16
    1fe4:	0032                	c.slli	zero,0xc
    1fe6:	1001                	c.nop	-32
    1fe8:	2630                	fld	fa2,72(a2)
    1fea:	001e                	c.slli	zero,0x7
    1fec:	0000                	unimp
    1fee:	001fca43          	fmadd.s	fs4,ft11,ft1,ft0,rmm
    1ff2:	8c00                	0x8c00
    1ff4:	0000                	unimp
    1ff6:	0600                	addi	s0,sp,768
    1ff8:	0000                	unimp
    1ffa:	0100                	addi	s0,sp,128
    1ffc:	129c                	addi	a5,sp,352
    1ffe:	0020                	addi	s0,sp,8
    2000:	3f00                	fld	fs0,56(a4)
    2002:	00001fd7          	0x1fd7
    2006:	1ced                	addi	s9,s9,-5
    2008:	0000                	unimp
    200a:	e244                	fsw	fs1,4(a2)
    200c:	001f 0100 005b      	0x5b0100001f
    2012:	001f3443          	fmadd.s	fs0,ft10,ft1,ft0,rup
    2016:	b400                	fsd	fs0,40(s0)
    2018:	0000                	unimp
    201a:	0600                	addi	s0,sp,768
    201c:	0000                	unimp
    201e:	0100                	addi	s0,sp,128
    2020:	369c                	fld	fa5,40(a3)
    2022:	0020                	addi	s0,sp,8
    2024:	3f00                	fld	fs0,56(a4)
    2026:	1f41                	addi	t5,t5,-16
    2028:	0000                	unimp
    202a:	1d00                	addi	s0,sp,688
    202c:	0000                	unimp
    202e:	4c44                	lw	s1,28(s0)
    2030:	001f 0100 005b      	0x5b0100001f
    2036:	001e9e43          	fmadd.s	ft8,ft9,ft1,ft0,rtz
    203a:	dc00                	sw	s0,56(s0)
    203c:	0000                	unimp
    203e:	0600                	addi	s0,sp,768
    2040:	0000                	unimp
    2042:	0100                	addi	s0,sp,128
    2044:	5a9c                	lw	a5,48(a3)
    2046:	0020                	addi	s0,sp,8
    2048:	3f00                	fld	fs0,56(a4)
    204a:	00001eab          	0x1eab
    204e:	00001d13          	slli	s10,zero,0x0
    2052:	b644                	fsd	fs1,168(a2)
    2054:	001e                	c.slli	zero,0x7
    2056:	0100                	addi	s0,sp,128
    2058:	0143005b          	0x143005b
    205c:	001e                	c.slli	zero,0x7
    205e:	0400                	addi	s0,sp,512
    2060:	0001                	nop
    2062:	0600                	addi	s0,sp,768
    2064:	0000                	unimp
    2066:	0100                	addi	s0,sp,128
    2068:	7e9c                	flw	fa5,56(a3)
    206a:	0020                	addi	s0,sp,8
    206c:	3f00                	fld	fs0,56(a4)
    206e:	1e0e                	slli	t3,t3,0x23
    2070:	0000                	unimp
    2072:	1d26                	slli	s10,s10,0x29
    2074:	0000                	unimp
    2076:	1944                	addi	s1,sp,180
    2078:	001e                	c.slli	zero,0x7
    207a:	0100                	addi	s0,sp,128
    207c:	ad45005b          	0xad45005b
    2080:	0000                	unimp
    2082:	a300                	fsd	fs0,0(a4)
    2084:	0000                	unimp
    2086:	0900                	addi	s0,sp,144
    2088:	4500                	lw	s0,8(a0)
    208a:	0560                	addi	s0,sp,652
    208c:	0000                	unimp
    208e:	0556                	slli	a0,a0,0x15
    2090:	0000                	unimp
    2092:	0009                	c.nop	2
    2094:	1e00                	addi	s0,sp,816
    2096:	0000                	unimp
    2098:	0200                	addi	s0,sp,256
    209a:	1600                	addi	s0,sp,800
    209c:	0004                	0x4
    209e:	0400                	addi	s0,sp,512
    20a0:	8201                	c.srli64	a2
    20a2:	0021                	c.nop	8
    20a4:	3000                	fld	fs0,32(s0)
    20a6:	0000                	unimp
    20a8:	4d00                	lw	s0,24(a0)
    20aa:	b4000007          	0xb4000007
    20ae:	0000                	unimp
    20b0:	5400                	lw	s0,40(s0)
    20b2:	01000007          	0x1000007
    20b6:	80              	Address 0x00000000000020b6 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x1e8>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	03001603          	lh	a2,48(zero) # 30 <__DYNAMIC+0x30>
  22:	3a0e                	fld	fs4,224(sp)
  24:	390b3b0b          	0x390b3b0b
  28:	0013490b          	0x13490b
  2c:	0400                	addi	s0,sp,512
  2e:	0024                	addi	s1,sp,8
  30:	0b3e0b0b          	0xb3e0b0b
  34:	00000803          	lb	a6,0(zero) # 0 <__DYNAMIC>
  38:	3505                	jal	fffffe58 <_stack_start+0xfffefe58>
  3a:	4900                	lw	s0,16(a0)
  3c:	06000013          	li	zero,96
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # fffe00b3 <_stack_start+0xfffd00b3>
  46:	0b39053b          	0xb39053b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1 # 74001 <_stack_start+0x64001>
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    for(i=0;i<(length/3);i++) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
}
  a0:	0b00                	addi	s0,sp,400
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	0e00000b          	0xe00000b
    asm volatile(
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
    for(i=0;i<(length/3);i++) {
  b2:	1301                	addi	t1,t1,-32
    asm volatile(
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
    for(i=0;i<(length/3);i++) {
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
  c4:	1000000b          	0x1000000b
}
  c8:	0b0b000f          	0xb0b000f
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  cc:	1349                	addi	t1,t1,-14
    asm volatile(
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
    for(i=0;i<(length/3);i++) {
  d8:	390b3b0b          	0x390b3b0b
    asm volatile(
  dc:	0013010b          	0x13010b
}
  e0:	1200                	addi	s0,sp,288
    for(i=0;i<(length/3);i++) {
  e2:	000d                	c.nop	3
  e4:	0b3a0e03          	lb	t3,179(s4)
  e8:	0b390b3b          	0xb390b3b
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
}
  f0:	0000                	unimp
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	27001513          	0x27001513
    asm volatile(
  f6:	0019                	c.nop	6
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
    for(i=0;i<(length/3);i++) {
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
    asm volatile(
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
}
 108:	16000013          	li	zero,352
    for(i=0;i<(length/3);i++) {
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
    asm volatile(
 110:	0000                	unimp
    for(i=0;i<(length/3);i++) {
 112:	03011317          	auipc	t1,0x3011
 116:	0b0e                	slli	s6,s6,0x3
}
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
    asm volatile(
 11a:	39053b0b          	0x39053b0b
 11e:	0013010b          	0x13010b
 122:	1800                	addi	s0,sp,48
    for(i=0;i<(length/3);i++) {
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 12a:	0b39053b          	0xb39053b
 12e:	1349                	addi	t1,t1,-14
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
    int line[size_b][size_a + size_b];
 134:	0d19                	addi	s10,s10,6
 136:	0300                	addi	s0,sp,384
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 138:	3a0e                	fld	fs4,224(sp)
 13a:	39053b0b          	0x39053b0b
    int line[size_b][size_a + size_b];
 13e:	3813490b          	0x3813490b
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 14a:	0b3a0b0b          	0xb3a0b0b
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
 156:	0b01131b          	0xb01131b
    int line[size_b][size_a + size_b];
 15a:	3b0b3a0b          	0x3b0b3a0b
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
    int pola[size_a];
 164:	1c00                	addi	s0,sp,560
 166:	0b0b0117          	auipc	sp,0xb0b0
 16a:	0b3a                	slli	s6,s6,0xe
    int line[size_b][size_a + size_b];
 16c:	0b39053b          	0xb39053b
    int pola[size_a];
 170:	1301                	addi	t1,t1,-32
    int polb[size_b];
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
    int pola[size_a];
 178:	3a0e                	fld	fs4,224(sp)
    int polb[size_b];
 17a:	39053b0b          	0x39053b0b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 17e:	0013490b          	0x13490b
 182:	1e00                	addi	s0,sp,816
    int line[size_b][size_a + size_b];
 184:	0e030013          	addi	zero,t1,224
    int pola[size_a];
 188:	193c                	addi	a5,sp,184
 18a:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 18c:	151f 2701 0119      	0x1192701151f
            line[i][j] = 0;   
 192:	20000013          	li	zero,512
	product[j] = 0;
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
 19c:	0b39053b          	0xb39053b
  for(j = 0; j < size_a + size_b -1; ++j) {
 1a0:	1349                	addi	t1,t1,-14
    array_equ(pola,a,size_a);
 1a2:	193c193f 34210000 	0x34210000193c193f
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
    array_mod(pola,mod,size_a);
 1b2:	3f13490b          	0x3f13490b
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
    array_equ(polb,b,size_b);
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
 1c2:	0b390b3b          	0xb390b3b
    array_mod(polb,mod,size_b);
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0x68>
    if(star_mult == 1){
 1d0:	00052f13          	slti	t5,a0,0
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
 1dc:	0b390b3b          	0xb390b3b
 1e0:	1349                	addi	t1,t1,-14
        for (j = size_b -1; j >= 0; j = j-1){
 1e2:	1802193f 34250000 	0x342500001802193f
            line[i][j] = 0;   
 1ea:	0300                	addi	s0,sp,384
 1ec:	3a08                	fld	fa0,48(a2)
         for (i = 0; i < size_b; ++i){
 1ee:	390b3b0b          	0x390b3b0b
            line[i][j] = 0;   
 1f2:	3f13490b          	0x3f13490b
 1f6:	0219                	addi	tp,tp,6
 1f8:	0018                	0x18
         for (i = 0; i < size_b; ++i){
 1fa:	2600                	fld	fs0,8(a2)
 1fc:	012e                	slli	sp,sp,0xb
	product[j] = 0;
 1fe:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
 206:	0b39                	addi	s6,s6,14
  for(j = 0; j < size_a + size_b -1; ++j) {
 208:	1349                	addi	t1,t1,-14
 20a:	0111                	addi	sp,sp,4
         for (i = 0; i < size_b; ++i){
 20c:	0612                	slli	a2,a2,0x4
 20e:	1840                	addi	s0,sp,52
 210:	01194297          	auipc	t0,0x1194
        for (j = size_b -1; j >= 0; j = j-1){
 214:	27000013          	li	zero,624
            for (k = size_a-1; k >= 0; k = k-1 ){
 218:	0034                	addi	a3,sp,8
        array_add(product, line[i], (size_a + size_b - 1));
 21a:	0b3a0e03          	lb	t3,179(s4)
 21e:	0b39053b          	0xb39053b
        array_mod(line[i],mod,(size_a+size_b-1));
 222:	1349                	addi	t1,t1,-14
 224:	1702                	slli	a4,a4,0x20
    for (i = 0; i < size_b; ++i){
 226:	0000                	unimp
 228:	3428                	fld	fa0,104(s0)
    array_mod(product,mod,(size_a+size_b-1));
 22a:	0300                	addi	s0,sp,384
 22c:	3a08                	fld	fa0,48(a2)
 22e:	39053b0b          	0x39053b0b
 232:	1c13490b          	0x1c13490b
}
 236:	2900000b          	0x2900000b
 23a:	0034                	addi	a3,sp,8
 23c:	0b3a0e03          	lb	t3,179(s4)
 240:	0b39053b          	0xb39053b
 244:	1349                	addi	t1,t1,-14
 246:	1802                	slli	a6,a6,0x20
 248:	0000                	unimp
 24a:	342a                	fld	fs0,168(sp)
 24c:	0300                	addi	s0,sp,384
 24e:	3a0e                	fld	fs4,224(sp)
 250:	39053b0b          	0x39053b0b
 254:	0013490b          	0x13490b
 258:	2b00                	fld	fs0,16(a4)
 25a:	0034                	addi	a3,sp,8
 25c:	0b3a0803          	lb	a6,179(s4)
                line[size_b-1-j][k] = pola[k]*polb[j];
 260:	0b39053b          	0xb39053b
 264:	1349                	addi	t1,t1,-14
 266:	1702                	slli	a4,a4,0x20
 268:	0000                	unimp
 26a:	892c                	0x892c
 26c:	0182                	c.slli64	gp
            for (k = size_a-1; k >= 0; k = k-1 ){
 26e:	1101                	addi	sp,sp,-32
                line[size_b-1-j][k] = pola[k]*polb[j];
 270:	3101                	jal	fffffe70 <_stack_start+0xfffefe70>
 272:	00130113          	addi	sp,t1,1
            for (k = size_a-1; k >= 0; k = k-1 ){
 276:	2d00                	fld	fs0,24(a0)
 278:	828a                	mv	t0,sp
        for (j = size_b -1; j >= 0; j = j-1){
 27a:	0001                	nop
 27c:	1802                	slli	a6,a6,0x20
 27e:	4291                	li	t0,4
 280:	0018                	0x18
            for (k = size_a-1; k >= 0; k = k-1 ){
 282:	2e00                	fld	fs0,24(a2)
 284:	8289                	srli	a3,a3,0x2
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 286:	0101                	addi	sp,sp,0
 288:	0111                	addi	sp,sp,4
 28a:	1331                	addi	t1,t1,-20
 28c:	0000                	unimp
 28e:	4900212f          	0x4900212f
 292:	00182f13          	slti	t5,a6,1
            for (k = size_a-1; k >= 0; k = k-1 ){
 296:	3000                	fld	fs0,32(s0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 298:	012e                	slli	sp,sp,0xb
 29a:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
        for (j = size_b -1; j >= 0; j = j-1){
 2a2:	0b39                	addi	s6,s6,14
 2a4:	13491927          	0x13491927
 2a8:	0111                	addi	sp,sp,4
        array_mod(line[i],mod,(size_a+size_b-1));
 2aa:	0612                	slli	a2,a2,0x4
 2ac:	1840                	addi	s0,sp,52
        array_add(product, line[i], (size_a + size_b - 1));
 2ae:	01194297          	auipc	t0,0x1194
 2b2:	31000013          	li	zero,784
    for (i = 0; i < size_b; ++i){
 2b6:	0005                	c.nop	1
 2b8:	0b3a0803          	lb	a6,179(s4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2bc:	0b39053b          	0xb39053b
    int line[size_b][size_a + size_b];
 2c0:	1349                	addi	t1,t1,-14
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2c2:	1702                	slli	a4,a4,0x20
 2c4:	0000                	unimp
 2c6:	0532                	slli	a0,a0,0xc
 2c8:	0300                	addi	s0,sp,384
 2ca:	3a0e                	fld	fs4,224(sp)
    int line[size_b][size_a + size_b];
 2cc:	39053b0b          	0x39053b0b
 2d0:	0213490b          	0x213490b
 2d4:	33000017          	auipc	zero,0x33000
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2d8:	0034                	addi	a3,sp,8
 2da:	0b3a0803          	lb	a6,179(s4)
 2de:	0b39053b          	0xb39053b
 2e2:	1349                	addi	t1,t1,-14
 2e4:	1802                	slli	a6,a6,0x20
 2e6:	0000                	unimp
 2e8:	3434                	fld	fa3,104(s0)
    int line[size_b][size_a + size_b];
 2ea:	4900                	lw	s0,16(a0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2ec:	02193413          	sltiu	s0,s2,33
    int line[size_b][size_a + size_b];
 2f0:	35000017          	auipc	zero,0x35000
 2f4:	0021                	c.nop	8
    int pola[size_a];
 2f6:	1349                	addi	t1,t1,-14
 2f8:	0000132f          	0x132f
 2fc:	3436                	fld	fs0,360(sp)
    int line[size_b][size_a + size_b];
 2fe:	0300                	addi	s0,sp,384
    int pola[size_a];
 300:	3a08                	fld	fa0,48(a2)
 302:	39053b0b          	0x39053b0b
    int polb[size_b];
 306:	0013490b          	0x13490b
    int pola[size_a];
 30a:	3700                	fld	fs0,40(a4)
    int polb[size_b];
 30c:	012e                	slli	sp,sp,0xb
 30e:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    int line[size_b][size_a + size_b];
 316:	0b39                	addi	s6,s6,14
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 318:	13491927          	0x13491927
    int pola[size_a];
 31c:	0111                	addi	sp,sp,4
    int polb[size_b];
 31e:	0612                	slli	a2,a2,0x4
            line[i][j] = 0;
 320:	1840                	addi	s0,sp,52
 322:	01194297          	auipc	t0,0x1194
 	product2[j] = 0;
 326:	38000013          	li	zero,896
 32a:	0005                	c.nop	1
 32c:	0b3a0803          	lb	a6,179(s4)
    for(j = 0; j < size_a + size_b -1; ++j){
 330:	0b390b3b          	0xb390b3b
    array_equ(pola,a,size_a);
 334:	1349                	addi	t1,t1,-14
 336:	1702                	slli	a4,a4,0x20
 338:	0000                	unimp
    array_equ(polb,b,size_b);
 33a:	0539                	addi	a0,a0,14
 33c:	0300                	addi	s0,sp,384
 33e:	3a0e                	fld	fs4,224(sp)
 340:	390b3b0b          	0x390b3b0b
    if(star_mult == 1){
 344:	0213490b          	0x213490b
 348:	3a000017          	auipc	zero,0x3a000
 34c:	0034                	addi	a3,sp,8
 34e:	0b3a0e03          	lb	t3,179(s4)
 352:	0b390b3b          	0xb390b3b
        for (j = size_b -1; j >= 0; j = j-1){
 356:	1349                	addi	t1,t1,-14
            for (k = size_a-1; k >= 0; k = k-1 ){
 358:	1702                	slli	a4,a4,0x20
 35a:	0000                	unimp
            line[i][j] = 0;
 35c:	0300343b          	0x300343b
        for (i = 0; i < size_b; ++i){
 360:	3a08                	fld	fa0,48(a2)
            line[i][j] = 0;
 362:	390b3b0b          	0x390b3b0b
 366:	0213490b          	0x213490b
 36a:	3c000017          	auipc	zero,0x3c000
        for (i = 0; i < size_b; ++i){
 36e:	012e                	slli	sp,sp,0xb
 	product2[j] = 0;
 370:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 378:	0b39                	addi	s6,s6,14
    for(j = 0; j < size_a + size_b -1; ++j){
 37a:	01111927          	0x1111927
        for (i = 0; i < size_b; ++i){
 37e:	0612                	slli	a2,a2,0x4
 380:	1840                	addi	s0,sp,52
 382:	01194297          	auipc	t0,0x1194
        for (j = size_b -1; j >= 0; j = j-1){
 386:	3d000013          	li	zero,976
        array_add(product2,line[i],size_a+size_b-1);
 38a:	0005                	c.nop	1
 38c:	0b3a0803          	lb	a6,179(s4)
 390:	0b390b3b          	0xb390b3b
    for(i=0;i<size_b;++i){
 394:	1349                	addi	t1,t1,-14
}
 396:	1802                	slli	a6,a6,0x20
 398:	0000                	unimp
 39a:	1d3e                	slli	s10,s10,0x2f
 39c:	3101                	jal	ffffff9c <_stack_start+0xfffeff9c>
 39e:	55015213          	0x55015213
 3a2:	590b5817          	auipc	a6,0x590b5
 3a6:	000b570b          	0xb570b
 3aa:	3f00                	fld	fs0,56(a4)
 3ac:	0005                	c.nop	1
 3ae:	1331                	addi	t1,t1,-20
 3b0:	1702                	slli	a4,a4,0x20
 3b2:	0000                	unimp
 3b4:	2e40                	fld	fs0,152(a2)
 3b6:	3f01                	jal	2c6 <polymult2+0xa>
 3b8:	0319                	addi	t1,t1,6
 3ba:	3a0e                	fld	fs4,224(sp)
 3bc:	390b3b0b          	0x390b3b0b
                line[size_b-1-j][k] = pola[k]*polb[j];
 3c0:	2019270b          	0x2019270b
 3c4:	0013010b          	0x13010b
 3c8:	4100                	lw	s0,0(a0)
 3ca:	0005                	c.nop	1
 3cc:	0b3a0803          	lb	a6,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d0:	0b390b3b          	0xb390b3b
                line[size_b-1-j][k] = pola[k]*polb[j];
 3d4:	1349                	addi	t1,t1,-14
 3d6:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d8:	1d42                	slli	s10,s10,0x30
 3da:	3101                	jal	ffffffda <_stack_start+0xfffeffda>
        for (j = size_b -1; j >= 0; j = j-1){
 3dc:	12011113          	0x12011113
 3e0:	5806                	lw	a6,96(sp)
 3e2:	570b590b          	0x570b590b
            for (k = size_a-1; k >= 0; k = k-1 ){
 3e6:	4300000b          	0x4300000b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3ea:	012e                	slli	sp,sp,0xb
 3ec:	1331                	addi	t1,t1,-20
 3ee:	0111                	addi	sp,sp,4
 3f0:	0612                	slli	a2,a2,0x4
 3f2:	1840                	addi	s0,sp,52
 3f4:	01194297          	auipc	t0,0x1194
            for (k = size_a-1; k >= 0; k = k-1 ){
 3f8:	44000013          	li	zero,1088
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3fc:	0005                	c.nop	1
 3fe:	1331                	addi	t1,t1,-20
            for (k = size_a-1; k >= 0; k = k-1 ){
 400:	1802                	slli	a6,a6,0x20
 402:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
 404:	2e45                	jal	7b4 <ext_euclid+0xb6>
 406:	3f00                	fld	fs0,56(a4)
 408:	3c19                	jal	fffffe1e <_stack_start+0xfffefe1e>
 40a:	6e19                	lui	t3,0x6
        array_add(product2,line[i],size_a+size_b-1);
 40c:	030e                	slli	t1,t1,0x3
 40e:	3a0e                	fld	fs4,224(sp)
 410:	000b3b0b          	0xb3b0b
    for(i=0;i<size_b;++i){
 414:	0000                	unimp
 416:	1101                	addi	sp,sp,-32
 418:	1000                	addi	s0,sp,32
    int v[size_N];
 41a:	5506                	lw	a0,96(sp)
 41c:	0306                	slli	t1,t1,0x1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 41e:	1b0e                	slli	s6,s6,0x23
    int v[size_N];
 420:	250e                	fld	fa0,192(sp)
 422:	130e                	slli	t1,t1,0x23
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 424:	0005                	c.nop	1
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	0fc6                	slli	t6,t6,0x11
       2:	0000                	unimp
       4:	0fd8                	addi	a4,sp,980
       6:	0000                	unimp
       8:	0001                	nop
       a:	d85a                	sw	s6,48(sp)
       c:	d900000f          	0xd900000f
      10:	0100000f          	fence	w,unknown
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	0fda                	slli	t6,t6,0x16
      20:	0000                	unimp
      22:	102a                	c.slli	zero,0x2a
      24:	0000                	unimp
      26:	0001                	nop
      28:	305a                	fld	ft0,432(sp)
      2a:	0010                	0x10
      2c:	4400                	lw	s0,8(s0)
      2e:	0010                	0x10
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0f54                	addi	a3,sp,916
      3e:	0000                	unimp
      40:	0fa6                	slli	t6,t6,0x9
      42:	0000                	unimp
      44:	0001                	nop
      46:	a65a                	fsd	fs6,264(sp)
      48:	c200000f          	0xc200000f
      4c:	0400000f          	fence	o,unknown
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	4800                	lw	s0,16(s0)
      5e:	8800000f          	0x8800000f
      62:	0300000f          	fence	rw,unknown
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0f88                	addi	a0,sp,976
      6c:	0000                	unimp
      6e:	0f92                	slli	t6,t6,0x4
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0f92                	slli	t6,t6,0x4
      78:	0000                	unimp
      7a:	00000fc3          	fmadd.s	ft11,ft0,ft0,ft0,rne
  jal x0, default_exc_handler
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	00000fc3          	fmadd.s	ft11,ft0,ft0,ft0,rne
  jal x0, default_exc_handler
      86:	102e                	c.slli	zero,0x2b
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	2e79                	jal	42c <polydiv+0x12>
}
      90:	0010                	0x10
    for(i=0;i<(length/3);i++) {
      92:	3000                	fld	fs0,32(s0)
      94:	0010                	0x10
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	1030                	addi	a2,sp,40
      9e:	0000                	unimp
}
      a0:	1044                	addi	s1,sp,36
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
    asm volatile(
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      b0:	4800                	lw	s0,16(s0)
      b2:	6200000f          	0x6200000f
    asm volatile(
      b6:	0300000f          	fence	rw,unknown
    for(i=0;i<(length/3);i++) {
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	0f62                	slli	t5,t5,0x18
      c0:	0000                	unimp
      c2:	0f64                	addi	s1,sp,924
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
}
      c8:	007d                	c.nop	31
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      ca:	0f64                	addi	s1,sp,924
      cc:	0000                	unimp
    asm volatile(
      ce:	0fd2                	slli	t6,t6,0x14
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
      d6:	d27a                	sw	t5,36(sp)
    for(i=0;i<(length/3);i++) {
      d8:	d900000f          	0xd900000f
    asm volatile(
      dc:	0200000f          	fence	r,unknown
}
      e0:	7d00                	flw	fs0,56(a0)
    for(i=0;i<(length/3);i++) {
      e2:	d900                	sw	s0,48(a0)
      e4:	2e00000f          	0x2e00000f
      e8:	0010                	0x10
      ea:	0300                	addi	s0,sp,384
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
}
      f0:	102e                	c.slli	zero,0x2b
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	0000                	unimp
      f4:	1030                	addi	a2,sp,40
    asm volatile(
      f6:	0000                	unimp
      f8:	f0720003          	lb	zero,-249(tp) # fffdff07 <_stack_start+0xfffcff07>
      fc:	307a                	fld	ft0,440(sp)
      fe:	0010                	0x10
    for(i=0;i<(length/3);i++) {
     100:	4400                	lw	s0,8(s0)
     102:	0010                	0x10
    asm volatile(
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
}
     108:	7af0                	flw	fa2,116(a3)
	...
    for(i=0;i<(length/3);i++) {
     112:	0f48                	addi	a0,sp,916
     114:	0000                	unimp
     116:	0f6e                	slli	t5,t5,0x1b
}
     118:	0000                	unimp
    asm volatile(
     11a:	c4910003          	lb	zero,-951(sp)
     11e:	6e7c                	flw	fa5,92(a2)
     120:	7800000f          	0x7800000f
    for(i=0;i<(length/3);i++) {
     124:	0200000f          	fence	r,unknown
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	7e00                	flw	fs0,56(a2)
     12a:	7800                	flw	fs0,48(s0)
     12c:	2800000f          	0x2800000f
     130:	0010                	0x10
     132:	0200                	addi	s0,sp,256
    int line[size_b][size_a + size_b];
     134:	7800                	flw	fs0,48(s0)
     136:	2800                	fld	fs0,16(s0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     138:	0010                	0x10
     13a:	2e00                	fld	fs0,24(a2)
    int line[size_b][size_a + size_b];
     13c:	0010                	0x10
     13e:	0300                	addi	s0,sp,384
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
     144:	102e                	c.slli	zero,0x2b
     146:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     148:	1030                	addi	a2,sp,40
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
     150:	307c                	fld	fa5,224(s0)
     152:	0010                	0x10
     154:	4400                	lw	s0,8(s0)
     156:	0010                	0x10
     158:	0200                	addi	s0,sp,256
    int line[size_b][size_a + size_b];
     15a:	7800                	flw	fs0,48(s0)
	...
    int pola[size_a];
     164:	4800                	lw	s0,16(s0)
     166:	a200000f          	0xa200000f
     16a:	0300000f          	fence	rw,unknown
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
    int polb[size_b];
     172:	0fa2                	slli	t6,t6,0x8
     174:	0000                	unimp
     176:	0fa8                	addi	a0,sp,984
    int pola[size_a];
     178:	0000                	unimp
    int polb[size_b];
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     17e:	0fa8                	addi	a0,sp,984
     180:	0000                	unimp
     182:	00000fc3          	fmadd.s	ft11,ft0,ft0,ft0,rne
    int line[size_b][size_a + size_b];
     186:	0002                	c.slli64	zero
    int pola[size_a];
     188:	0080                	addi	s0,sp,64
     18a:	00000fc3          	fmadd.s	ft11,ft0,ft0,ft0,rne
    int polb[size_b];
     18e:	102e                	c.slli	zero,0x2b
            line[i][j] = 0;   
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
	product[j] = 0;
     196:	2e7e                	fld	ft8,472(sp)
     198:	0010                	0x10
     19a:	3000                	fld	fs0,32(s0)
     19c:	0010                	0x10
  for(j = 0; j < size_a + size_b -1; ++j) {
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
    array_equ(pola,a,size_a);
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	1030                	addi	a2,sp,40
     1a6:	0000                	unimp
     1a8:	1044                	addi	s1,sp,36
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
     1b0:	007e                	c.slli	zero,0x1f
    array_mod(pola,mod,size_a);
     1b2:	0000                	unimp
     1b4:	0000                	unimp
     1b6:	0000                	unimp
     1b8:	5400                	lw	s0,40(s0)
    array_equ(polb,b,size_b);
     1ba:	5a00000f          	0x5a00000f
     1be:	0200000f          	fence	r,unknown
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	da9f 000f f800      	0xf800000fda9f
    array_mod(polb,mod,size_b);
     1ca:	0200000f          	fence	r,unknown
    if(star_mult == 1){
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
     1d6:	0000                	unimp
     1d8:	6800                	flw	fs0,16(s0)
     1da:	000c                	0xc
     1dc:	8000                	0x8000
     1de:	000c                	0xc
     1e0:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0c80                	addi	s0,sp,592
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e6:	0000                	unimp
     1e8:	0ce8                	addi	a0,sp,604
            line[i][j] = 0;   
     1ea:	0000                	unimp
     1ec:	0001                	nop
         for (i = 0; i < size_b; ++i){
     1ee:	e858                	fsw	fa4,20(s0)
            line[i][j] = 0;   
     1f0:	000c                	0xc
     1f2:	f400                	fsw	fs0,40(s0)
     1f4:	000c                	0xc
     1f6:	0300                	addi	s0,sp,384
     1f8:	8600                	0x8600
         for (i = 0; i < size_b; ++i){
     1fa:	9f7f                	0x9f7f
     1fc:	0cf4                	addi	a3,sp,604
	product[j] = 0;
     1fe:	0000                	unimp
     200:	0cfa                	slli	s9,s9,0x1e
     202:	0000                	unimp
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
  for(j = 0; j < size_a + size_b -1; ++j) {
     20a:	0cfa                	slli	s9,s9,0x1e
         for (i = 0; i < size_b; ++i){
     20c:	0000                	unimp
     20e:	0d30                	addi	a2,sp,664
     210:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     218:	0000                	unimp
        array_add(product, line[i], (size_a + size_b - 1));
     21a:	0000                	unimp
     21c:	6800                	flw	fs0,16(s0)
     21e:	000c                	0xc
     220:	8a00                	0x8a00
        array_mod(line[i],mod,(size_a+size_b-1));
     222:	000c                	0xc
     224:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     226:	5b00                	lw	s0,48(a4)
     228:	0c8a                	slli	s9,s9,0x2
    array_mod(product,mod,(size_a+size_b-1));
     22a:	0000                	unimp
     22c:	0cf2                	slli	s9,s9,0x1c
     22e:	0000                	unimp
     230:	0001                	nop
     232:	f265                	bnez	a2,212 <polymult+0xea>
}
     234:	000c                	0xc
     236:	fa00                	fsw	fs0,48(a2)
     238:	000c                	0xc
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	fa9f 000c 3000      	0x3000000cfa9f
     246:	000d                	c.nop	3
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
     254:	0c68                	addi	a0,sp,540
     256:	0000                	unimp
     258:	0c82                	c.slli64	s9
     25a:	0000                	unimp
     25c:	0001                	nop
                line[size_b-1-j][k] = pola[k]*polb[j];
     25e:	825c                	0x825c
     260:	000c                	0xc
     262:	ec00                	fsw	fs0,24(s0)
     264:	000c                	0xc
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
     26a:	0cec                	addi	a1,sp,604
     26c:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     26e:	0cfa                	slli	s9,s9,0x1e
                line[size_b-1-j][k] = pola[k]*polb[j];
     270:	0000                	unimp
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
            for (k = size_a-1; k >= 0; k = k-1 ){
     278:	0cfa                	slli	s9,s9,0x1e
        for (j = size_b -1; j >= 0; j = j-1){
     27a:	0000                	unimp
     27c:	0d30                	addi	a2,sp,664
     27e:	0000                	unimp
     280:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     286:	0000                	unimp
     288:	0000                	unimp
     28a:	6800                	flw	fs0,16(s0)
     28c:	000c                	0xc
     28e:	8400                	0x8400
     290:	000c                	0xc
     292:	0100                	addi	s0,sp,128
     294:	5d00                	lw	s0,56(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     296:	0c84                	addi	s1,sp,592
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     298:	0000                	unimp
     29a:	0c9d                	addi	s9,s9,7
     29c:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     29e:	0001                	nop
     2a0:	9d5a                	add	s10,s10,s6
        for (j = size_b -1; j >= 0; j = j-1){
     2a2:	000c                	0xc
     2a4:	3000                	fld	fs0,32(s0)
     2a6:	000d                	c.nop	3
     2a8:	0400                	addi	s0,sp,512
        array_mod(line[i],mod,(size_a+size_b-1));
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
        array_add(product, line[i], (size_a + size_b - 1));
     2ae:	009f 0000 0000      	0x9f
     2b4:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     2b6:	6800                	flw	fs0,16(s0)
     2b8:	000c                	0xc
     2ba:	8c00                	0x8c00
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2bc:	000c                	0xc
    int line[size_b][size_a + size_b];
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c2:	0c8c                	addi	a1,sp,592
     2c4:	0000                	unimp
     2c6:	0cf6                	slli	s9,s9,0x1d
     2c8:	0000                	unimp
     2ca:	0001                	nop
    int line[size_b][size_a + size_b];
     2cc:	000cf667          	0xcf667
     2d0:	fa00                	fsw	fs0,48(a2)
     2d2:	000c                	0xc
     2d4:	0400                	addi	s0,sp,512
     2d6:	f300                	fsw	fs0,32(a4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2d8:	5e01                	li	t3,-32
     2da:	fa9f 000c 3000      	0x3000000cfa9f
     2e0:	000d                	c.nop	3
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
     2ee:	0c68                	addi	a0,sp,540
    int line[size_b][size_a + size_b];
     2f0:	0000                	unimp
     2f2:	0c9d                	addi	s9,s9,7
     2f4:	0000                	unimp
    int pola[size_a];
     2f6:	0001                	nop
     2f8:	9d5f 000c 3000      	0x3000000c9d5f
    int line[size_b][size_a + size_b];
     2fe:	000d                	c.nop	3
    int pola[size_a];
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
    int polb[size_b];
     304:	5f01                	li	t5,-32
     306:	009f 0000 0000      	0x9f
     30c:	0000                	unimp
     30e:	6800                	flw	fs0,16(s0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     310:	000c                	0xc
     312:	9d00                	0x9d00
    int line[size_b][size_a + size_b];
     314:	000c                	0xc
     316:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     318:	6000                	flw	fs0,0(s0)
    int pola[size_a];
     31a:	0c9d                	addi	s9,s9,7
     31c:	0000                	unimp
    int polb[size_b];
     31e:	0cf0                	addi	a2,sp,604
            line[i][j] = 0;
     320:	0000                	unimp
     322:	0001                	nop
    for(j = 0; j < size_a + size_b -1; ++j){
     324:	f064                	fsw	fs1,100(s0)
 	product2[j] = 0;
     326:	000c                	0xc
     328:	fa00                	fsw	fs0,48(a2)
     32a:	000c                	0xc
     32c:	0400                	addi	s0,sp,512
    for(j = 0; j < size_a + size_b -1; ++j){
     32e:	f300                	fsw	fs0,32(a4)
     330:	6001                	0x6001
    array_equ(pola,a,size_a);
     332:	fa9f 000c 3000      	0x3000000cfa9f
     338:	000d                	c.nop	3
    array_equ(polb,b,size_b);
     33a:	0100                	addi	s0,sp,128
     33c:	6400                	flw	fs0,8(s0)
	...
    if(star_mult == 1){
     346:	0c9e                	slli	s9,s9,0x7
     348:	0000                	unimp
     34a:	0cad                	addi	s9,s9,11
     34c:	0000                	unimp
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
     352:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     354:	0000                	unimp
     356:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     358:	b000                	fsd	fs0,32(s0)
     35a:	000c                	0xc
            line[i][j] = 0;
     35c:	ce00                	sw	s0,24(a2)
     35e:	000c                	0xc
        for (i = 0; i < size_b; ++i){
     360:	0100                	addi	s0,sp,128
            line[i][j] = 0;
     362:	5a00                	lw	s0,48(a2)
     364:	0cce                	slli	s9,s9,0x13
     366:	0000                	unimp
     368:	0cd1                	addi	s9,s9,20
     36a:	0000                	unimp
        for (i = 0; i < size_b; ++i){
     36c:	0001                	nop
     36e:	fa5c                	fsw	fa5,52(a2)
 	product2[j] = 0;
     370:	000c                	0xc
     372:	1e00                	addi	s0,sp,816
     374:	000d                	c.nop	3
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
        for (i = 0; i < size_b; ++i){
     382:	0cd2                	slli	s9,s9,0x14
        for (j = size_b -1; j >= 0; j = j-1){
     384:	0000                	unimp
     386:	0cdd                	addi	s9,s9,23
            for (k = size_a-1; k >= 0; k = k-1 ){
     388:	0000                	unimp
        array_add(product2,line[i],size_a+size_b-1);
     38a:	0001                	nop
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
     390:	0000                	unimp
    for(i=0;i<size_b;++i){
     392:	0000                	unimp
     394:	de00                	sw	s0,56(a2)
}
     396:	000c                	0xc
     398:	fa00                	fsw	fs0,48(a2)
     39a:	000c                	0xc
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0d1e                	slli	s10,s10,0x7
     3a2:	0000                	unimp
     3a4:	0d30                	addi	a2,sp,664
     3a6:	0000                	unimp
     3a8:	0001                	nop
     3aa:	005a                	c.slli	zero,0x16
     3ac:	0000                	unimp
     3ae:	0000                	unimp
     3b0:	0000                	unimp
     3b2:	b000                	fsd	fs0,32(s0)
     3b4:	000c                	0xc
     3b6:	b600                	fsd	fs0,40(a2)
     3b8:	000c                	0xc
     3ba:	0100                	addi	s0,sp,128
     3bc:	5900                	lw	s0,48(a0)
     3be:	0cb6                	slli	s9,s9,0xd
                line[size_b-1-j][k] = pola[k]*polb[j];
     3c0:	0000                	unimp
     3c2:	0cc2                	slli	s9,s9,0x10
     3c4:	0000                	unimp
     3c6:	0001                	nop
     3c8:	c25d                	beqz	a2,46e <polydiv+0x54>
     3ca:	000c                	0xc
     3cc:	c800                	sw	s0,16(s0)
     3ce:	000c                	0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d0:	0100                	addi	s0,sp,128
                line[size_b-1-j][k] = pola[k]*polb[j];
     3d2:	5e00                	lw	s0,56(a2)
     3d4:	0cde                	slli	s9,s9,0x17
     3d6:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	0cea                	slli	s9,s9,0x1a
     3da:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     3dc:	0001                	nop
     3de:	fa59                	bnez	a2,374 <polymult2+0xb8>
     3e0:	000c                	0xc
     3e2:	0400                	addi	s0,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e4:	000d                	c.nop	3
     3e6:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3e8:	5d00                	lw	s0,56(a0)
     3ea:	0d04                	addi	s1,sp,656
     3ec:	0000                	unimp
     3ee:	0d0a                	slli	s10,s10,0x2
     3f0:	0000                	unimp
     3f2:	7f7d0003          	lb	zero,2039(s10) # c7f7 <_stack_len+0x87f7>
     3f6:	0a9f 000d 0c00      	0xc00000d0a9f
     3fc:	000d                	c.nop	3
     3fe:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     400:	5d00                	lw	s0,56(a0)
     402:	0d0c                	addi	a1,sp,656
        for (j = size_b -1; j >= 0; j = j-1){
     404:	0000                	unimp
     406:	0d1e                	slli	s10,s10,0x7
     408:	0000                	unimp
     40a:	0001                	nop
        array_add(product2,line[i],size_a+size_b-1);
     40c:	1e5e                	slli	t3,t3,0x37
     40e:	000d                	c.nop	3
     410:	2800                	fld	fs0,16(s0)
     412:	000d                	c.nop	3
    for(i=0;i<size_b;++i){
     414:	0100                	addi	s0,sp,128
     416:	5900                	lw	s0,48(a0)
     418:	0d28                	addi	a0,sp,664
    int v[size_N];
     41a:	0000                	unimp
     41c:	0d2e                	slli	s10,s10,0xb
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     41e:	0000                	unimp
    int v[size_N];
     420:	7f790003          	lb	zero,2039(s2) # 17f7 <result+0x16f>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     424:	2e9f 000d 3000      	0x3000000d2e9f
     42a:	000d                	c.nop	3
     42c:	0100                	addi	s0,sp,128
     42e:	5900                	lw	s0,48(a0)
	...
     438:	0be0                	addi	s0,sp,476
     43a:	0000                	unimp
     43c:	0bf4                	addi	a3,sp,476
     43e:	0000                	unimp
    int v[size_N];
     440:	0001                	nop
     442:	f45a                	fsw	fs6,40(sp)
     444:	4000000b          	0x4000000b
    int q[size_N];
     448:	000c                	0xc
     44a:	0100                	addi	s0,sp,128
    int num_temp[size_N];
     44c:	5800                	lw	s0,48(s0)
     44e:	0c40                	addi	s0,sp,532
    int denum_temp[size_D];
     450:	0000                	unimp
     452:	0c68                	addi	a0,sp,540
     454:	0000                	unimp
     456:	0004                	0x4
    int num_temp[size_N];
     458:	9f5a01f3          	0x9f5a01f3
	...
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     464:	0be0                	addi	s0,sp,476
     466:	0000                	unimp
     468:	0bfc                	addi	a5,sp,476
     46a:	0000                	unimp
    int v[size_N];
     46c:	0001                	nop
     46e:	000bfc5b          	0xbfc5b
    int denum_temp[size_D];
     472:	4e00                	lw	s0,24(a2)
     474:	000c                	0xc
 if(size_N == 106) {
     476:	0100                	addi	s0,sp,128
     478:	6200                	flw	fs0,0(a2)
     array_equ(num_temp, num, size_N - 1);   // 105 elemani ücer ücer yap...
     47a:	0c4e                	slli	s8,s8,0x13
     47c:	0000                	unimp
     47e:	0c56                	slli	s8,s8,0x15
     480:	0000                	unimp
     482:	0004                	0x4
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     484:	9f5b01f3          	0x9f5b01f3
        array_mod(num_temp, mod, size_N - 1);
     488:	0c56                	slli	s8,s8,0x15
     48a:	0000                	unimp
     48c:	0c68                	addi	a0,sp,540
     48e:	0000                	unimp
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
        array_mod(num_temp, mod, size_N - 1);
     494:	0000                	unimp
        while(num_temp[size_N - 1] < 0){
     496:	0000                	unimp
     498:	0000                	unimp
     49a:	e000                	fsw	fs0,0(s0)
     49c:	f000000b          	0xf000000b
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     4a0:	0100000b          	0x100000b
     4a4:	5c00                	lw	s0,56(s0)
     4a6:	0bf0                	addi	a2,sp,476
     array_equ(num_temp, num, size_N );
     4a8:	0000                	unimp
     4aa:	0c26                	slli	s8,s8,0x9
     4ac:	0000                	unimp
     4ae:	0001                	nop
        array_mod(num_temp, mod, size_N);
     4b0:	2659                	jal	836 <ext_euclid+0x138>
     4b2:	000c                	0xc
     4b4:	2900                	fld	fs0,16(a0)
     4b6:	000c                	0xc
    array_equ(denum_temp,denum,size_D);
     4b8:	0100                	addi	s0,sp,128
     4ba:	5b00                	lw	s0,48(a4)
     4bc:	0c29                	addi	s8,s8,10
     4be:	0000                	unimp
    array_mod(denum_temp,mod,size_D);
     4c0:	0c68                	addi	a0,sp,540
     4c2:	0000                	unimp
     4c4:	0004                	0x4
     4c6:	9f5c01f3          	0x9f5c01f3
	...
    for (i = size_D-1; i >= 0; i = i-1){
     4d2:	0be0                	addi	s0,sp,476
     4d4:	0000                	unimp
     4d6:	00000c07          	0xc07
    for (i = 0; i < size_N; ++i){
     4da:	0001                	nop
     4dc:	075d                	addi	a4,a4,23
        if ( (b_N*u)%mod == 1 )
     4de:	000c                	0xc
    for (u = 0; u < mod; ++u){
     4e0:	2200                	fld	fs0,0(a2)
     4e2:	000c                	0xc
     4e4:	0100                	addi	s0,sp,128
     4e6:	6300                	flw	fs0,0(a4)
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4e8:	0c22                	slli	s8,s8,0x8
     4ea:	0000                	unimp
     4ec:	0c68                	addi	a0,sp,540
     4ee:	0000                	unimp
        q[i] = 0;
     4f0:	0004                	0x4
     4f2:	9f5d01f3          	0x9f5d01f3
	...
        v[i] = 0;
     4fe:	0be0                	addi	s0,sp,476
     500:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     502:	00000c07          	0xc07
        if( denum_temp[i] != 0 )
     506:	0001                	nop
    for (i = size_D-1; i >= 0; i = i-1){
     508:	075e                	slli	a4,a4,0x17
     50a:	000c                	0xc
        if ( (b_N*u)%mod == 1 )
     50c:	5200                	lw	s0,32(a2)
     50e:	000c                	0xc
     510:	0100                	addi	s0,sp,128
     512:	6400                	flw	fs0,8(s0)
     514:	0c52                	slli	s8,s8,0x14
    for (u = 0; u < mod; ++u){
     516:	0000                	unimp
     518:	0c56                	slli	s8,s8,0x15
        if( num_temp[i] != 0 )
     51a:	0000                	unimp
    for (i = size_N-1; i >= 0; i = i-1){
     51c:	0004                	0x4
     51e:	9f5e01f3          	0x9f5e01f3
     522:	0c56                	slli	s8,s8,0x15
     524:	0000                	unimp
     526:	0c68                	addi	a0,sp,540
     528:	0000                	unimp
    while (d >= d2){
     52a:	0001                	nop
     52c:	0064                	addi	s1,sp,12
 if(size_N == 106) {
     52e:	0000                	unimp
     530:	0000                	unimp
     532:	0000                	unimp
     534:	2200                	fld	fs0,0(a2)
     array_equ(result, q, size_N - 1);   // 105 elemani ücer ücer yap...
     536:	000c                	0xc
     538:	2900                	fld	fs0,16(a0)
     53a:	000c                	0xc
     53c:	0100                	addi	s0,sp,128
     53e:	5a00                	lw	s0,48(a2)
     540:	0c29                	addi	s8,s8,10
     542:	0000                	unimp
     544:	0c50                	addi	a2,sp,532
     result[size_N - 1] = q[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     546:	0000                	unimp
     548:	0001                	nop
     54a:	000c5663          	bgez	s8,556 <polydiv+0x13c>
     54e:	6800                	flw	fs0,16(s0)
     550:	000c                	0xc
     552:	0100                	addi	s0,sp,128
     554:	6300                	flw	fs0,0(a4)
	...
    for(i = size_N; i < (2*size_N); ++i){
     55e:	0c3a                	slli	s8,s8,0xe
        result[i] = num_temp[i-size_N];
     560:	0000                	unimp
     562:	0c4c                	addi	a1,sp,532
     564:	0000                	unimp
     566:	0001                	nop
    for(i = size_N; i < (2*size_N); ++i){
     568:	5659                	li	a2,-10
     56a:	000c                	0xc
}
     56c:	6000                	flw	fs0,0(s0)
     56e:	000c                	0xc
     570:	0100                	addi	s0,sp,128
     572:	5900                	lw	s0,48(a0)
     574:	0c60                	addi	s0,sp,540
     576:	0000                	unimp
     578:	0c66                	slli	s8,s8,0x19
     57a:	0000                	unimp
     57c:	7f790003          	lb	zero,2039(s2)
     580:	669f 000c 6800      	0x6800000c669f
     586:	000c                	0xc
     588:	0100                	addi	s0,sp,128
     58a:	5900                	lw	s0,48(a0)
	...
     594:	08ee                	slli	a7,a7,0x1b
        v[(d-d2)] = u*r_d;
     596:	0000                	unimp
     598:	0932                	slli	s2,s2,0xc
     59a:	0000                	unimp
     59c:	0001                	nop
     59e:	325a                	fld	ft4,432(sp)
     5a0:	0009                	c.nop	2
     5a2:	f400                	fsw	fs0,40(s0)
        if(size_N == 106) {
     5a4:	000a                	c.slli	zero,0x2
     5a6:	0100                	addi	s0,sp,128
     5a8:	6200                	flw	fs0,0(a2)
     5aa:	0af4                	addi	a3,sp,348
            array_mod(v, mod, size_N - 1);
     5ac:	0000                	unimp
     5ae:	0b18                	addi	a4,sp,400
     5b0:	0000                	unimp
     5b2:	7f850003          	lb	zero,2040(a0) # fffed7f8 <_stack_start+0xfffdd7f8>
            while(v[size_N - 1] < 0){
     5b6:	189f 000b 3800      	0x3800000b189f
     5bc:	0400000b          	0x400000b
            v[size_N - 1] = v[size_N - 1] % mod;
     5c0:	f300                	fsw	fs0,32(a4)
     5c2:	5a01                	li	s4,-32
     5c4:	389f 000b cc00      	0xcc00000b389f
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5ca:	0100000b          	0x100000b
     5ce:	6200                	flw	fs0,0(a2)
     5d0:	0bcc                	addi	a1,sp,468
     5d2:	0000                	unimp
        if(size_N == 106) {
     5d4:	0be0                	addi	s0,sp,476
     5d6:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5d8:	7f850003          	lb	zero,2040(a0)
        if(size_N == 106) {
     5dc:	009f 0000 0000      	0x9f
            array_mod(product, mod, size_N - 1);
     5e2:	0000                	unimp
     5e4:	ee00                	fsw	fs0,24(a2)
            while(product[size_N - 1] < 0){
     5e6:	0008                	0x8
     5e8:	2a00                	fld	fs0,16(a2)
     5ea:	0009                	c.nop	2
     5ec:	0100                	addi	s0,sp,128
            product[size_N - 1] = product[size_N - 1] % mod;
     5ee:	5b00                	lw	s0,48(a4)
     5f0:	092a                	slli	s2,s2,0xa
            array_sub(num_temp, product, size_N - 1);   // 105 elemani ücer ücer yap...
     5f2:	0000                	unimp
     5f4:	0b20                	addi	s0,sp,408
     5f6:	0000                	unimp
     5f8:	0001                	nop
            product[size_N - 1] = product[size_N - 1] % mod;
     5fa:	000b2067          	0xb2067
            array_sub(num_temp, product, size_N - 1);   // 105 elemani ücer ücer yap...
     5fe:	3800                	fld	fs0,48(s0)
            num_temp[size_N - 1] = num_temp[size_N - 1] - product[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     600:	0400000b          	0x400000b
     604:	f300                	fsw	fs0,32(a4)
     606:	5b01                	li	s6,-32
            array_mod(num_temp, mod, size_N - 1);
     608:	389f 000b e000      	0xe000000b389f
            num_temp[size_N - 1] = num_temp[size_N - 1] - product[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     60e:	0100000b          	0x100000b
            array_mod(num_temp, mod, size_N - 1);
     612:	6700                	flw	fs0,8(a4)
	...
            while(num_temp[size_N - 1] < 0){
     61c:	08ee                	slli	a7,a7,0x1b
     61e:	0000                	unimp
     620:	092e                	slli	s2,s2,0xb
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     622:	0000                	unimp
     624:	0001                	nop
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     626:	2e5c                	fld	fa5,152(a2)
     628:	0009                	c.nop	2
     62a:	1c00                	addi	s0,sp,560
     62c:	0100000b          	0x100000b
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     630:	6600                	flw	fs0,8(a2)
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     632:	0b1c                	addi	a5,sp,400
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     634:	0000                	unimp
     636:	0b38                	addi	a4,sp,408
     638:	0000                	unimp
     63a:	0004                	0x4
            array_mod(q, mod, size_N - 1);
     63c:	9f5c01f3          	0x9f5c01f3
     640:	0b38                	addi	a4,sp,408
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     642:	0000                	unimp
            array_mod(q, mod, size_N - 1);
     644:	0be0                	addi	s0,sp,476
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     646:	0000                	unimp
     648:	0001                	nop
            array_mod(q, mod, size_N - 1);
     64a:	0066                	c.slli	zero,0x19
            while(q[size_N - 1] < 0){
     64c:	0000                	unimp
     64e:	0000                	unimp
     650:	0000                	unimp
     652:	7c00                	flw	fs0,56(s0)
            q[size_N - 1] = q[size_N - 1] % mod;
     654:	000a                	c.slli	zero,0x2
     656:	8600                	0x8600
     658:	000a                	c.slli	zero,0x2
     65a:	0100                	addi	s0,sp,128
     65c:	5a00                	lw	s0,48(a2)
	...
            array_mod(v, mod, size_N);
     666:	0a96                	slli	s5,s5,0x5
     668:	0000                	unimp
     66a:	00000ab3          	add	s5,zero,zero
     66e:	0001                	nop
                product[size_N - 1] = product[size_N - 1]+mod;
     670:	985a                	add	a6,a6,s6
     672:	ac00000b          	0xac00000b
     676:	0100000b          	0x100000b
            array_mod(product, mod, size_N);
     67a:	5a00                	lw	s0,48(a2)
	...
            array_sub(num_temp, product, size_N );
     684:	0ab4                	addi	a3,sp,344
            array_mod(num_temp, mod, size_N);
     686:	0000                	unimp
     688:	00000ac7          	fmsub.s	fs5,ft0,ft0,ft0,rne
     68c:	0001                	nop
            array_add(q, v, size_N );
     68e:	ac5a                	fsd	fs6,24(sp)
     690:	bc00000b          	0xbc00000b
     694:	0100000b          	0x100000b
            array_mod(q, mod, size_N);
     698:	5a00                	lw	s0,48(a2)
	...
        for (i = size_N-1; i >= 0; i = i-1){
     6a2:	0ac8                	addi	a0,sp,340
     6a4:	0000                	unimp
     6a6:	0ae4                	addi	s1,sp,348
     6a8:	0000                	unimp
     6aa:	0001                	nop
     6ac:	bc5a                	fsd	fs6,56(sp)
     6ae:	cc00000b          	0xcc00000b
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     6b2:	0100000b          	0x100000b
     6b6:	5a00                	lw	s0,48(a2)
	...
            if( num_temp[i] != 0 )
     6c0:	0a30                	addi	a2,sp,280
        for (i = size_N-1; i >= 0; i = i-1){
     6c2:	0000                	unimp
     6c4:	0afc                	addi	a5,sp,348
            v[i] = 0;
     6c6:	0000                	unimp
     6c8:	0002                	c.slli64	zero
     6ca:	0072                	c.slli	zero,0x1c
     6cc:	0afc                	addi	a5,sp,348
     6ce:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     6d0:	0b14                	addi	a3,sp,400
     6d2:	0000                	unimp
     6d4:	0002                	c.slli64	zero
     6d6:	0084                	addi	s1,sp,64
     array_equ(result, q, size_N );
     6d8:	0b14                	addi	a3,sp,400
     6da:	0000                	unimp
     6dc:	0b18                	addi	a4,sp,400
     6de:	0000                	unimp
     6e0:	0010                	0x10
     6e2:	0091                	addi	ra,ra,4
     6e4:	0085                	addi	ra,ra,1
     6e6:	2432                	fld	fs0,264(sp)
     6e8:	f0090f23          	sb	zero,-226(s2)
        result[i] = num_temp[i-size_N];
     6ec:	1c1a                	slli	s8,s8,0x26
     6ee:	f00a                	fsw	ft2,32(sp)
     6f0:	1c01                	addi	s8,s8,-32
     6f2:	0b18                	addi	a4,sp,400
     6f4:	0000                	unimp
     6f6:	0b38                	addi	a4,sp,408
    for(i = size_N; i < (2*size_N); ++i){
     6f8:	0000                	unimp
        result[i] = num_temp[i-size_N];
     6fa:	00910013          	addi	zero,sp,9
    int ri_2[size]; // MX-ring poly, a
     6fe:	235a01f3          	0x235a01f3
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     702:	3201                	jal	2 <__DYNAMIC+0x2>
    int ri_2[size]; // MX-ring poly, a
     704:	2324                	fld	fs1,64(a4)
     706:	1af0090f          	0x1af0090f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     70a:	0a1c                	addi	a5,sp,272
     70c:	01f0                	addi	a2,sp,204
     70e:	381c                	fld	fa5,48(s0)
     710:	e000000b          	0xe000000b
     714:	0200000b          	0x200000b
     718:	7200                	flw	fs0,32(a2)
	...
     722:	3400                	fld	fs0,40(s0)
    int ri_2[size]; // MX-ring poly, a
     724:	000a                	c.slli	zero,0x2
     726:	3600                	fld	fs0,40(a2)
     728:	000a                	c.slli	zero,0x2
    int ri_1[size]; // f-random poly, f[N] = 0, b
     72a:	0200                	addi	s0,sp,256
     72c:	3100                	fld	fs0,32(a0)
     72e:	369f 000a 3c00      	0x3c00000a369f
    int ri[size];
     734:	000a                	c.slli	zero,0x2
    int ti_1[size]; // ti_1[0] = 1
     736:	0100                	addi	s0,sp,128
     738:	5f00                	lw	s0,56(a4)
     73a:	0a40                	addi	s0,sp,276
    int ti[size];
     73c:	0000                	unimp
     73e:	0a46                	slli	s4,s4,0x11
     740:	0000                	unimp
    int qi_1[size];
     742:	0001                	nop
     744:	4e5f 000a 5c00      	0x5c00000a4e5f
    int temp[size];
     74a:	000a                	c.slli	zero,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     74c:	0100                	addi	s0,sp,128
     74e:	5f00                	lw	s0,56(a4)
     750:	0a66                	slli	s4,s4,0x19
    int ri_2[size]; // MX-ring poly, a
     752:	0000                	unimp
     754:	00000a7b          	0xa7b
    for (i = 0; i < size; ++i) {
     758:	0001                	nop
        ti_2[i] = 0;
     75a:	7c5f 000a 8600      	0x8600000a7c5f
     760:	000a                	c.slli	zero,0x2
    for (i = 0; i < size; ++i) {
     762:	0500                	addi	s0,sp,640
     764:	8200                	0x8200
    array_equ(ri_2,polyR,size);
     766:	3100                	fld	fs0,32(a0)
     768:	9f24                	0x9f24
     76a:	0a86                	slli	s5,s5,0x1
     76c:	0000                	unimp
    array_equ(ri_1,polyf,size);
     76e:	0a95                	addi	s5,s5,5
     770:	0000                	unimp
     772:	0001                	nop
     774:	965f 000a a600      	0xa600000a965f
    ti_1[0] = 1;
     77a:	000a                	c.slli	zero,0x2
        for (i = N + 1; i < (2 * N + 2); ++i) {
     77c:	0500                	addi	s0,sp,640
     77e:	8200                	0x8200
     780:	3300                	fld	fs0,32(a4)
     782:	9f1e                	add	t5,t5,t2
    array_equ(ti,ti_2,size);
     784:	0aa6                	slli	s5,s5,0x9
     786:	0000                	unimp
     788:	0ab4                	addi	a3,sp,344
     78a:	0000                	unimp
    array_mod(ri_2,mod,N+1);
     78c:	0001                	nop
     78e:	b459                	j	214 <polymult+0xec>
     790:	000a                	c.slli	zero,0x2
     792:	bc00                	fsd	fs0,56(s0)
    array_mod(ri_1,mod,N+1);
     794:	000a                	c.slli	zero,0x2
     796:	0200                	addi	s0,sp,256
     798:	3000                	fld	fs0,32(s0)
     79a:	bc9f 000a c400      	0xc400000abc9f
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     7a0:	000a                	c.slli	zero,0x2
     7a2:	0100                	addi	s0,sp,128
     7a4:	5e00                	lw	s0,56(a2)
     7a6:	0ac8                	addi	a0,sp,340
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7a8:	0000                	unimp
     7aa:	0ada                	slli	s5,s5,0x16
     7ac:	0000                	unimp
     7ae:	0005                	c.nop	1
     7b0:	0082                	c.slli64	ra
     7b2:	2432                	fld	fs0,264(sp)
    array_equ(temp,ri_2,size);
     7b4:	da9f 000a f400      	0xf400000ada9f
     7ba:	000a                	c.slli	zero,0x2
    array_sub(temp,ri,size);
     7bc:	0100                	addi	s0,sp,128
     7be:	6800                	flw	fs0,16(s0)
     7c0:	0af4                	addi	a3,sp,348
     7c2:	0000                	unimp
    array_mod(temp,mod,size);
     7c4:	0b74                	addi	a3,sp,412
     7c6:	0000                	unimp
     7c8:	0001                	nop
     7ca:	745f 000b 7600      	0x7600000b745f
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7d0:	0300000b          	0x300000b
     7d4:	7f00                	flw	fs0,56(a4)
     7d6:	9f7f                	0x9f7f
     7d8:	0b76                	slli	s6,s6,0x1d
    array_equ(qi_1,res1,size);
     7da:	0000                	unimp
     7dc:	0b98                	addi	a4,sp,464
     7de:	0000                	unimp
    array_mod(qi_1,mod,size);
     7e0:	0001                	nop
     7e2:	985f 000b a800      	0xa800000b985f
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7e8:	0100000b          	0x100000b
     7ec:	5900                	lw	s0,48(a0)
     7ee:	0ba8                	addi	a0,sp,472
     7f0:	0000                	unimp
     7f2:	0baa                	slli	s7,s7,0xa
     7f4:	0000                	unimp
     7f6:	7f790003          	lb	zero,2039(s2)
    array_equ(temp,res2,size);
     7fa:	aa9f 000b ac00      	0xac00000baa9f
    array_mod(temp,mod,size);
     800:	0100000b          	0x100000b
     804:	5900                	lw	s0,48(a0)
    array_equ(ti,ti_2,size);
     806:	0bac                	addi	a1,sp,472
     808:	0000                	unimp
     80a:	0bb0                	addi	a2,sp,472
     80c:	0000                	unimp
    array_sub(ti,temp,size);
     80e:	0001                	nop
     810:	b05e                	fsd	fs7,32(sp)
     812:	ba00000b          	0xba00000b
    array_mod(ti,mod,size);
     816:	0300000b          	0x300000b
     81a:	7e00                	flw	fs0,56(a2)
     81c:	9f7f                	0x9f7f
array_equ(ri_2,ri_1,size);
     81e:	0bba                	slli	s7,s7,0xe
     820:	0000                	unimp
     822:	0bbc                	addi	a5,sp,472
     824:	0000                	unimp
array_equ(ri_1,ri,size);
     826:	0001                	nop
     828:	bc5e                	fsd	fs7,56(sp)
     82a:	cc00000b          	0xcc00000b
array_equ(ti_2,ti_1,size);
     82e:	0100000b          	0x100000b
     832:	6800                	flw	fs0,16(s0)
     834:	0bcc                	addi	a1,sp,468
array_equ(ti_1,ti,size);
     836:	0000                	unimp
     838:	0bdc                	addi	a5,sp,468
     83a:	0000                	unimp
     83c:	0001                	nop
        controlR = 0;
     83e:	dc5f 000b de00      	0xde00000bdc5f
        for (i = 0; i < N + 1; ++i) {
     844:	0300000b          	0x300000b
    while (controlR != 0) {
     848:	7f00                	flw	fs0,56(a4)
        for (j = 0; j < mod; ++j) {
     84a:	9f7f                	0x9f7f
            if (((ri_2[0] * j) % mod) == 1)
     84c:	0bde                	slli	s7,s7,0x17
        for (j = 0; j < mod; ++j) {
     84e:	0000                	unimp
     850:	0be0                	addi	s0,sp,476
     852:	0000                	unimp
     854:	0001                	nop
     856:	005f 0000 0000      	0x5f
        for (i = 0; i < N + 1; ++i) {
     85c:	0000                	unimp
    }
     85e:	f800                	fsw	fs0,48(s0)
     860:	000a                	c.slli	zero,0x2
     862:	3800                	fld	fs0,48(s0)
     864:	0600000b          	0x600000b
     868:	0300                	addi	s0,sp,384
     86a:	1a70                	addi	a2,sp,316
     86c:	0000                	unimp
     86e:	009f 0000 0000      	0x9f
     874:	0000                	unimp
     876:	3000                	fld	fs0,32(s0)
     878:	000a                	c.slli	zero,0x2
     87a:	f400                	fsw	fs0,40(s0)
     87c:	000a                	c.slli	zero,0x2
     87e:	0100                	addi	s0,sp,128
     880:	6200                	flw	fs0,0(a2)
     882:	0af4                	addi	a3,sp,348
     884:	0000                	unimp
     886:	0b18                	addi	a4,sp,400
        ti_2[i] = 0;
     888:	0000                	unimp
     88a:	7f850003          	lb	zero,2040(a0)
     88e:	189f 000b 3800      	0x3800000b189f
     894:	0400000b          	0x400000b
        ti_1[i] = 0;
     898:	f300                	fsw	fs0,32(a4)
    for (i = 0; i < size; ++i) {
     89a:	5a01                	li	s4,-32
     89c:	389f 000b cc00      	0xcc00000b389f
            ri[i - (N + 1)] = res[i];
     8a2:	0100000b          	0x100000b
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8a6:	6200                	flw	fs0,0(a2)
     8a8:	0bcc                	addi	a1,sp,468
            ri[i - (N + 1)] = res[i];
     8aa:	0000                	unimp
     8ac:	0be0                	addi	s0,sp,476
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8ae:	0000                	unimp
              qi_1[i] = 0;
     8b0:	7f850003          	lb	zero,2040(a0)
     8b4:	009f 0000 0000      	0x9f
            controlR += ri[i];
     8ba:	0000                	unimp
              qi_1[i] = 0;
     8bc:	fe00                	fsw	fs0,56(a2)
     8be:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     8c0:	6c00                	flw	fs0,24(s0)
            controlR += ri[i];
     8c2:	01000007          	0x1000007
            if (((ri_2[0] * j) % mod) == 1)
     8c6:	5a00                	lw	s0,48(a2)
     8c8:	076c                	addi	a1,sp,908
     8ca:	0000                	unimp
     8cc:	076d                	addi	a4,a4,27
     8ce:	0000                	unimp
     8d0:	0001                	nop
     8d2:	00076d5b          	0x76d5b
        for (j = 0; j < mod; ++j) {
     8d6:	8800                	0x8800
     8d8:	0008                	0x8
            ti_2[i] = (ti_2[i] * j) % mod;
     8da:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     8dc:	f300                	fsw	fs0,32(a4)
     8de:	5a01                	li	s4,-32
            ti_2[i] = (ti_2[i] * j) % mod;
     8e0:	889f 0008 9e00      	0x9e000008889f
     8e6:	0008                	0x8
     8e8:	0100                	addi	s0,sp,128
     8ea:	5a00                	lw	s0,48(a2)
        for (i = 0; i < N + 1; ++i) {
     8ec:	089e                	slli	a7,a7,0x7
int* generate_keys(int N, int p, int q){
     8ee:	0000                	unimp
     8f0:	08ee                	slli	a7,a7,0x1b
     8f2:	0000                	unimp
     8f4:	0004                	0x4
     8f6:	9f5a01f3          	0x9f5a01f3
	...
     902:	06fe                	slli	a3,a3,0x1f
     904:	0000                	unimp
     906:	0768                	addi	a0,sp,908
     908:	0000                	unimp
     90a:	0001                	nop
     90c:	0007685b          	0x7685b
     910:	8c00                	0x8c00
     912:	01000007          	0x1000007
     916:	6b00                	flw	fs0,16(a4)
     918:	078c                	addi	a1,sp,960
     91a:	0000                	unimp
     91c:	0888                	addi	a0,sp,80
     91e:	0000                	unimp
     920:	0004                	0x4
     922:	9f5b01f3          	0x9f5b01f3
     926:	0888                	addi	a0,sp,80
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     928:	0000                	unimp
     92a:	089e                	slli	a7,a7,0x7
     92c:	0000                	unimp
     92e:	0001                	nop
     930:	00089e5b          	0x89e5b
     934:	ee00                	fsw	fs0,24(a2)
     936:	0008                	0x8
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     938:	0400                	addi	s0,sp,512
     93a:	f300                	fsw	fs0,32(a4)
     93c:	5b01                	li	s6,-32
     93e:	009f 0000 0000      	0x9f
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     944:	0000                	unimp
     946:	fe00                	fsw	fs0,56(a2)
     948:	0006                	c.slli	zero,0x1
     94a:	6200                	flw	fs0,0(a2)
     94c:	01000007          	0x1000007
     950:	5c00                	lw	s0,56(s0)
     952:	0762                	slli	a4,a4,0x18
     954:	0000                	unimp
     956:	0868                	addi	a0,sp,28
     958:	0000                	unimp
     95a:	0001                	nop
     95c:	6859                	lui	a6,0x16
     95e:	0008                	0x8
     960:	7a00                	flw	fs0,48(a2)
     962:	0008                	0x8
     964:	0300                	addi	s0,sp,384
     966:	8a00                	0x8a00
     968:	9f01                	0x9f01
     96a:	087a                	slli	a6,a6,0x1e
     96c:	0000                	unimp
     96e:	0888                	addi	a0,sp,80
     970:	0000                	unimp
     972:	0004                	0x4
     974:	9f5c01f3          	0x9f5c01f3
     978:	0888                	addi	a0,sp,80
     97a:	0000                	unimp
     97c:	08ee                	slli	a7,a7,0x1b
     97e:	0000                	unimp
     980:	0001                	nop
     982:	0059                	c.nop	22
     984:	0000                	unimp
     986:	0000                	unimp
     988:	0000                	unimp
     98a:	fe00                	fsw	fs0,56(a2)
     98c:	0006                	c.slli	zero,0x1
     98e:	6200                	flw	fs0,0(a2)
     990:	01000007          	0x1000007
     994:	5d00                	lw	s0,56(a0)
     996:	0762                	slli	a4,a4,0x18
     998:	0000                	unimp
     99a:	086a                	slli	a6,a6,0x1a
     99c:	0000                	unimp
     99e:	0001                	nop
     9a0:	6a62                	flw	fs4,24(sp)
     9a2:	0008                	0x8
     9a4:	8800                	0x8800
     9a6:	0008                	0x8
     9a8:	0400                	addi	s0,sp,512
     9aa:	f300                	fsw	fs0,32(a4)
     9ac:	5d01                	li	s10,-32
    int polyR[N+1];
     9ae:	889f 0008 ee00      	0xee000008889f
     9b4:	0008                	0x8
     9b6:	0100                	addi	s0,sp,128
     9b8:	6200                	flw	fs0,0(a2)
	...
    polyR[N] = 1;
     9c2:	085e                	slli	a6,a6,0x17
     9c4:	0000                	unimp
     9c6:	0888                	addi	a0,sp,80
     9c8:	0000                	unimp
     9ca:	0006                	c.slli	zero,0x1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9cc:	0018e003          	0x18e003
     9d0:	9f00                	0x9f00
	...
     9da:	0758                	addi	a4,sp,900
     9dc:	0000                	unimp
     9de:	087a                	slli	a6,a6,0x1e
     9e0:	0000                	unimp
     9e2:	0001                	nop
     9e4:	7a6a                	flw	fs4,184(sp)
     9e6:	0008                	0x8
     9e8:	8800                	0x8800
     9ea:	0008                	0x8
     9ec:	0600                	addi	s0,sp,768
     9ee:	f300                	fsw	fs0,32(a4)
     9f0:	5c01                	li	s8,-32
     9f2:	1c31                	addi	s8,s8,-20
     9f4:	889f 0008 ee00      	0xee000008889f
     9fa:	0008                	0x8
     9fc:	0100                	addi	s0,sp,128
     9fe:	6a00                	flw	fs0,16(a2)
	...
     a08:	0758                	addi	a4,sp,900
     a0a:	0000                	unimp
     a0c:	0762                	slli	a4,a4,0x18
     a0e:	0000                	unimp
     a10:	0002                	c.slli64	zero
     a12:	9f30                	0x9f30
     a14:	0762                	slli	a4,a4,0x18
     a16:	0000                	unimp
     a18:	076d                	addi	a4,a4,27
     a1a:	0000                	unimp
     a1c:	0001                	nop
     a1e:	a85f 0007 ac00      	0xac000007a85f
     a24:	01000007          	0x1000007
     a28:	5900                	lw	s0,48(a0)
     a2a:	07ac                	addi	a1,sp,968
     a2c:	0000                	unimp
     a2e:	000007bb          	0x7bb
    polyR[0] = -1;
     a32:	0001                	nop
    for(i = 1; i < N; ++i){
     a34:	3e5f 0008 4200      	0x420000083e5f
     a3a:	0008                	0x8
    for (i = N; i < 55; ++i ){
     a3c:	0200                	addi	s0,sp,256
     a3e:	3000                	fld	fs0,32(s0)
     a40:	429f 0008 4c00      	0x4c000008429f
        random_keys[i] = f[i];
     a46:	0008                	0x8
     a48:	0100                	addi	s0,sp,128
     a4a:	5e00                	lw	s0,56(a2)
     a4c:	085a                	slli	a6,a6,0x16
    for(i = 0; i < N; ++i){
     a4e:	0000                	unimp
     a50:	08a8                	addi	a0,sp,88
     a52:	0000                	unimp
     a54:	0001                	nop
    for(i = N; i < (2*N); ++i){
     a56:	a85f 0008 ae00      	0xae000008a85f
     a5c:	0008                	0x8
        random_keys[i] = g[i-N];
     a5e:	0300                	addi	s0,sp,384
     a60:	7f00                	flw	fs0,56(a4)
     a62:	9f7f                	0x9f7f
     a64:	08ae                	slli	a7,a7,0xb
    for(i = N; i < (2*N); ++i){
     a66:	0000                	unimp
     a68:	08b0                	addi	a2,sp,88
    for(i = (2*N); i < (3*N); ++i){
     a6a:	0000                	unimp
     a6c:	0001                	nop
     a6e:	b05f 0008 c200      	0xc2000008b05f
    fp = ext_euclid(polyR, f, (N+1), p);
     a74:	0008                	0x8
     a76:	0100                	addi	s0,sp,128
     a78:	5e00                	lw	s0,56(a2)
     a7a:	08c2                	slli	a7,a7,0x10
    for(i = (2*N); i < (3*N); ++i){
     a7c:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     a7e:	08c4                	addi	s1,sp,84
     a80:	0000                	unimp
     a82:	7f7e0003          	lb	zero,2039(t3) # 67f7 <_stack_len+0x27f7>
    for(i = (2*N); i < (3*N); ++i){
     a86:	c49f 0008 c600      	0xc6000008c49f
    fq = ext_euclid(polyR, f, (N+1), q);
     a8c:	0008                	0x8
     a8e:	0100                	addi	s0,sp,128
     a90:	5e00                	lw	s0,56(a2)
     a92:	08da                	slli	a7,a7,0x16
     a94:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     a96:	08de                	slli	a7,a7,0x17
     a98:	0000                	unimp
     a9a:	0001                	nop
     a9c:	de5f 0008 ec00      	0xec000008de5f
        random_keys[i] = fq[i-(3*N)];
     aa2:	0008                	0x8
     aa4:	0300                	addi	s0,sp,384
    for(i = (3*N); i < (4*N); ++i){
     aa6:	7f00                	flw	fs0,56(a4)
     aa8:	9f7f                	0x9f7f
    fg = polymult2(fq, N, g, N, 0);
     aaa:	08ec                	addi	a1,sp,92
     aac:	0000                	unimp
     aae:	08ee                	slli	a7,a7,0x1b
     ab0:	0000                	unimp
     ab2:	0001                	nop
    for(i = 0; i < (2*N-1); ++i){
     ab4:	005f 0000 0000      	0x5f
     aba:	0000                	unimp
     abc:	4e00                	lw	s0,24(a2)
     abe:	0008                	0x8
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ac0:	8800                	0x8800
     ac2:	0008                	0x8
     ac4:	0100                	addi	s0,sp,128
     ac6:	5e00                	lw	s0,56(a2)
    for(i = (4*N); i < (5*N); ++i){
     ac8:	08c6                	slli	a7,a7,0x11
     aca:	0000                	unimp
     acc:	08ee                	slli	a7,a7,0x1b
     ace:	0000                	unimp
     ad0:	0001                	nop
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     ad2:	005e                	c.slli	zero,0x17
     ad4:	0000                	unimp
     ad6:	0000                	unimp
     ad8:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     ada:	5600                	lw	s0,40(a2)
     adc:	6e000007          	0x6e000007
    for(i = (5*N); i < (6*N+1); ++i){
     ae0:	0008                	0x8
     ae2:	0200                	addi	s0,sp,256
        random_keys[i] = polyR[i-(5*N)];
     ae4:	8400                	0x8400
     ae6:	8800                	0x8800
     ae8:	0008                	0x8
     aea:	ee00                	fsw	fs0,24(a2)
    for(i = (5*N); i < (6*N+1); ++i){
     aec:	0008                	0x8
     aee:	0200                	addi	s0,sp,256
     af0:	8400                	0x8400
	...
}
     afa:	5600                	lw	s0,40(a2)
     afc:	70000007          	0x70000007
     b00:	0008                	0x8
     b02:	0200                	addi	s0,sp,256
     b04:	8500                	0x8500
     b06:	8800                	0x8800
     b08:	0008                	0x8
     b0a:	ee00                	fsw	fs0,24(a2)
     b0c:	0008                	0x8
     b0e:	0200                	addi	s0,sp,256
     b10:	8500                	0x8500
	...
     b1a:	5600                	lw	s0,40(a2)
     b1c:	74000007          	0x74000007
     b20:	0008                	0x8
     b22:	0200                	addi	s0,sp,256
     b24:	8700                	0x8700
     b26:	8800                	0x8800
     b28:	0008                	0x8
     b2a:	ee00                	fsw	fs0,24(a2)
     b2c:	0008                	0x8
     b2e:	0200                	addi	s0,sp,256
     b30:	8700                	0x8700
	...
        polyR[i] = 0;
     b3a:	5600                	lw	s0,40(a2)
     b3c:	72000007          	0x72000007
     b40:	0008                	0x8
    for(i = 1; i < N; ++i){
     b42:	0200                	addi	s0,sp,256
     b44:	8600                	0x8600
        f[i] = 0;
     b46:	7200                	flw	fs0,32(a2)
     b48:	0008                	0x8
     b4a:	7400                	flw	fs0,40(s0)
     b4c:	0008                	0x8
     b4e:	0c00                	addi	s0,sp,528
     b50:	8700                	0x8700
     b52:	8a00                	0x8a00
        g[i] = 0;
     b54:	3201                	jal	454 <polydiv+0x3a>
     b56:	2324                	fld	fs1,64(a4)
     b58:	1af0090f          	0x1af0090f
     b5c:	881c                	0x881c
    for (i = N; i < 55; ++i ){
     b5e:	0008                	0x8
     b60:	ee00                	fsw	fs0,24(a2)
        random_keys[i] = f[i];
     b62:	0008                	0x8
     b64:	0200                	addi	s0,sp,256
     b66:	8600                	0x8600
	...
     b70:	5600                	lw	s0,40(a2)
    for(i = 0; i < N; ++i){
     b72:	76000007          	0x76000007
     b76:	0008                	0x8
        random_keys[i] = g[i-N];
     b78:	0200                	addi	s0,sp,256
     b7a:	8800                	0x8800
     b7c:	8800                	0x8800
     b7e:	0008                	0x8
     b80:	ee00                	fsw	fs0,24(a2)
    for(i = N; i < (2*N); ++i){
     b82:	0008                	0x8
     b84:	0200                	addi	s0,sp,256
     b86:	8800                	0x8800
	...
        random_keys[i] = fp[i-(2*N)];
     b90:	5600                	lw	s0,40(a2)
    for(i = (2*N); i < (3*N); ++i){
     b92:	78000007          	0x78000007
     b96:	0008                	0x8
        random_keys[i] = fq[i-(3*N)];
     b98:	0200                	addi	s0,sp,256
     b9a:	8900                	0x8900
     b9c:	8800                	0x8800
     b9e:	0008                	0x8
     ba0:	ee00                	fsw	fs0,24(a2)
     ba2:	0008                	0x8
     ba4:	0200                	addi	s0,sp,256
    for(i = (3*N); i < (4*N); ++i){
     ba6:	8900                	0x8900
	...
    for(i = 0; i < (2*N-1); ++i){
     bb0:	5800                	lw	s0,48(s0)
        fg[i] = fg[i]*p;
     bb2:	62000007          	0x62000007
     bb6:	0008                	0x8
     bb8:	0200                	addi	s0,sp,256
    for(i = 0; i < (2*N-1); ++i){
     bba:	7200                	flw	fs0,32(a2)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bbc:	6200                	flw	fs0,0(a2)
     bbe:	0008                	0x8
     bc0:	6c00                	flw	fs0,24(s0)
     bc2:	0008                	0x8
     bc4:	0200                	addi	s0,sp,256
     bc6:	8300                	0x8300
    for(i = (4*N); i < (5*N); ++i){
     bc8:	6c00                	flw	fs0,24(s0)
     bca:	0008                	0x8
        random_keys[i] = polyR[i-(5*N)];
     bcc:	7800                	flw	fs0,48(s0)
     bce:	0008                	0x8
     bd0:	0c00                	addi	s0,sp,528
     bd2:	8900                	0x8900
     bd4:	8a00                	0x8a00
     bd6:	3201                	jal	4d6 <polydiv+0xbc>
     bd8:	2324                	fld	fs1,64(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     bda:	1af0090f          	0x1af0090f
     bde:	881c                	0x881c
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     be0:	0008                	0x8
     be2:	ee00                	fsw	fs0,24(a2)
     be4:	0008                	0x8
     be6:	0200                	addi	s0,sp,256
     be8:	7200                	flw	fs0,32(a2)
	...
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bf2:	a800                	fsd	fs0,16(s0)
     bf4:	ba000007          	0xba000007
     bf8:	01000007          	0x1000007
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bfc:	5a00                	lw	s0,48(a2)
     bfe:	089e                	slli	a7,a7,0x7
     c00:	0000                	unimp
     c02:	08b0                	addi	a2,sp,88
     c04:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c06:	0001                	nop
    temp = polymult(public_key,N,random_val,48,q,0);
     c08:	005a                	c.slli	zero,0x16
     c0a:	0000                	unimp
     c0c:	0000                	unimp
     c0e:	0000                	unimp
     c10:	da00                	sw	s0,48(a2)
     c12:	de000007          	0xde000007
     c16:	01000007          	0x1000007
array_add(temp,message,48);
     c1a:	5a00                	lw	s0,48(a2)
     c1c:	07de                	slli	a5,a5,0x17
     c1e:	0000                	unimp
    temp = polymult(public_key,N,random_val,48,q,0);
     c20:	07df 0000 0001      	0x1000007df
array_add(temp,message,48);
     c26:	0000005b          	0x5b
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c2a:	0000                	unimp
     c2c:	0000                	unimp
     c2e:	f800                	fsw	fs0,48(s0)
     c30:	fc000007          	0xfc000007
     c34:	01000007          	0x1000007
     c38:	5a00                	lw	s0,48(a2)
    for(i = (2*N); i < (3*N); ++i){
     c3a:	07fc                	addi	a5,sp,972
     c3c:	0000                	unimp
     c3e:	07fd                	addi	a5,a5,31
     c40:	0000                	unimp
     c42:	0001                	nop
     c44:	0000005b          	0x5b
}
     c48:	0000                	unimp
     c4a:	0000                	unimp
     c4c:	5800                	lw	s0,48(s0)
     c4e:	8c000007          	0x8c000007
     c52:	02000007          	0x2000007
        CT[i-(2*N)] = CT[i];
     c56:	3100                	fld	fs0,32(a0)
     c58:	8c9f 0007 4200      	0x420000078c9f
    for(i = (2*N); i < (3*N); ++i){
     c5e:	0008                	0x8
     c60:	0200                	addi	s0,sp,256
        CT[i-(2*N)] = CT[i];
     c62:	3000                	fld	fs0,32(s0)
     c64:	429f 0008 5a00      	0x5a000008429f
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c6a:	0008                	0x8
     c6c:	0100                	addi	s0,sp,128
     c6e:	5f00                	lw	s0,56(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     c70:	0888                	addi	a0,sp,80
     c72:	0000                	unimp
     c74:	089e                	slli	a7,a7,0x7
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c76:	0000                	unimp
     c78:	0002                	c.slli64	zero
     c7a:	9f31                	0x9f31
     c7c:	089e                	slli	a7,a7,0x7
     c7e:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c80:	08b0                	addi	a2,sp,88
     c82:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c84:	0002                	c.slli64	zero
     c86:	9f30                	0x9f30
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c88:	08b0                	addi	a2,sp,88
     c8a:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c8c:	08da                	slli	a7,a7,0x16
     c8e:	0000                	unimp
     c90:	0001                	nop
     c92:	005f 0000 0000      	0x5f
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c98:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c9a:	5600                	lw	s0,40(a2)
     c9c:	7a000007          	0x7a000007
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ca0:	0008                	0x8
     ca2:	0100                	addi	s0,sp,128
     ca4:	6a00                	flw	fs0,16(a2)
     ca6:	087a                	slli	a6,a6,0x1e
     ca8:	0000                	unimp
     caa:	0888                	addi	a0,sp,80
     cac:	0000                	unimp
     cae:	0006                	c.slli	zero,0x1
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb0:	315c01f3          	0x315c01f3
     cb4:	9f1c                	0x9f1c
     cb6:	0888                	addi	a0,sp,80
     cb8:	0000                	unimp
        if(a2[i] <= q/2)
     cba:	08ee                	slli	a7,a7,0x1b
     cbc:	0000                	unimp
     cbe:	0001                	nop
    for (i = 0; i < N; ++i){
     cc0:	006a                	c.slli	zero,0x1a
     cc2:	0000                	unimp
     cc4:	0000                	unimp
    c = polymult2(secret_key_fp,N,a2,N,0);
     cc6:	0000                	unimp
     cc8:	5600                	lw	s0,40(a2)
     cca:	7a000007          	0x7a000007
     cce:	0008                	0x8
     cd0:	0100                	addi	s0,sp,128
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cd2:	6a00                	flw	fs0,16(a2)
     cd4:	087a                	slli	a6,a6,0x1e
     cd6:	0000                	unimp
     cd8:	0888                	addi	a0,sp,80
     cda:	0000                	unimp
     cdc:	0006                	c.slli	zero,0x1
    for(i = (2*N); i < ((2*N)+N); ++i){
     cde:	315c01f3          	0x315c01f3
     ce2:	9f1c                	0x9f1c
}
     ce4:	0888                	addi	a0,sp,80
     ce6:	0000                	unimp
     ce8:	08ee                	slli	a7,a7,0x1b
     cea:	0000                	unimp
     cec:	0001                	nop
     cee:	006a                	c.slli	zero,0x1a
     cf0:	0000                	unimp
     cf2:	0000                	unimp
     cf4:	0000                	unimp
     cf6:	5600                	lw	s0,40(a2)
     cf8:	7a000007          	0x7a000007
        a2[i-(2*N)] = a2[i];
     cfc:	0008                	0x8
     cfe:	0100                	addi	s0,sp,128
     d00:	6a00                	flw	fs0,16(a2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d02:	087a                	slli	a6,a6,0x1e
     d04:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     d06:	0888                	addi	a0,sp,80
     d08:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d0a:	0006                	c.slli	zero,0x1
        if(a2[i] <= q/2)
     d0c:	315c01f3          	0x315c01f3
     d10:	9f1c                	0x9f1c
            a2[i] = (-1)*(q-a2[i]);
     d12:	0888                	addi	a0,sp,80
     d14:	0000                	unimp
     d16:	08ee                	slli	a7,a7,0x1b
    for (i = 0; i < N; ++i){
     d18:	0000                	unimp
     d1a:	0001                	nop
     d1c:	006a                	c.slli	zero,0x1a
        c2[i-(2*N)] = c2[i];
     d1e:	0000                	unimp
     d20:	0000                	unimp
     d22:	0000                	unimp
     d24:	5600                	lw	s0,40(a2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d26:	7a000007          	0x7a000007
        c2[i-(2*N)] = c2[i];
     d2a:	0008                	0x8
     d2c:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d2e:	6a00                	flw	fs0,16(a2)
  jal x0, default_exc_handler
     d30:	087a                	slli	a6,a6,0x1e
     d32:	0000                	unimp
  mv  x1, x0
     d34:	0888                	addi	a0,sp,80
     d36:	0000                	unimp
  mv  x2, x1
     d38:	0006                	c.slli	zero,0x1
  mv  x3, x1
     d3a:	315c01f3          	0x315c01f3
  mv  x5, x1
     d3e:	9f1c                	0x9f1c
  mv  x6, x1
     d40:	0888                	addi	a0,sp,80
  mv  x7, x1
     d42:	0000                	unimp
  mv  x8, x1
     d44:	08ee                	slli	a7,a7,0x1b
  mv  x9, x1
     d46:	0000                	unimp
  mv x10, x1
     d48:	0001                	nop
  mv x11, x1
     d4a:	006a                	c.slli	zero,0x1a
  mv x12, x1
     d4c:	0000                	unimp
  mv x13, x1
     d4e:	0000                	unimp
  mv x14, x1
     d50:	0000                	unimp
  mv x15, x1
     d52:	5600                	lw	s0,40(a2)
  mv x16, x1
     d54:	7a000007          	0x7a000007
  mv x18, x1
     d58:	0008                	0x8
  mv x19, x1
     d5a:	0100                	addi	s0,sp,128
  mv x20, x1
     d5c:	6a00                	flw	fs0,16(a2)
  mv x21, x1
     d5e:	087a                	slli	a6,a6,0x1e
  mv x22, x1
     d60:	0000                	unimp
  mv x23, x1
     d62:	0888                	addi	a0,sp,80
  mv x24, x1
     d64:	0000                	unimp
  mv x25, x1
     d66:	0006                	c.slli	zero,0x1
  mv x26, x1
     d68:	315c01f3          	0x315c01f3
  mv x28, x1
     d6c:	9f1c                	0x9f1c
  mv x29, x1
     d6e:	0888                	addi	a0,sp,80
  mv x30, x1
     d70:	0000                	unimp
  mv x31, x1
     d72:	08ee                	slli	a7,a7,0x1b
  la   x2, _stack_start
     d74:	0000                	unimp
     d76:	0001                	nop
     d78:	006a                	c.slli	zero,0x1a
     d7a:	0000                	unimp
  la x26, _bss_start
     d7c:	0000                	unimp
     d7e:	0000                	unimp
     d80:	5600                	lw	s0,40(a2)
     d82:	7a000007          	0x7a000007
  la x27, _bss_end
     d86:	0008                	0x8
     d88:	0100                	addi	s0,sp,128
     d8a:	6a00                	flw	fs0,16(a2)
  bge x26, x27, zero_loop_end
     d8c:	087a                	slli	a6,a6,0x1e
     d8e:	0000                	unimp
  sw x0, 0(x26)
     d90:	0888                	addi	a0,sp,80
     d92:	0000                	unimp
  addi x26, x26, 4
     d94:	0006                	c.slli	zero,0x1
  ble x26, x27, zero_loop
     d96:	315c01f3          	0x315c01f3
  addi x10, x0, 0
     d9a:	9f1c                	0x9f1c
     d9c:	0888                	addi	a0,sp,80
  addi x11, x0, 0
     d9e:	0000                	unimp
     da0:	08ee                	slli	a7,a7,0x1b
  jal x1, main
     da2:	0000                	unimp
     da4:	0001                	nop
     da6:	006a                	c.slli	zero,0x1a
     da8:	0000                	unimp
     daa:	0000                	unimp
     dac:	0000                	unimp
     dae:	5600                	lw	s0,40(a2)
     db0:	7a000007          	0x7a000007
     db4:	0008                	0x8
     db6:	0100                	addi	s0,sp,128
     db8:	6a00                	flw	fs0,16(a2)
     dba:	087a                	slli	a6,a6,0x1e
     dbc:	0000                	unimp
     dbe:	0888                	addi	a0,sp,80
     dc0:	0000                	unimp
     dc2:	0006                	c.slli	zero,0x1
     dc4:	315c01f3          	0x315c01f3
     dc8:	9f1c                	0x9f1c
     dca:	0888                	addi	a0,sp,80
     dcc:	0000                	unimp
     dce:	08ee                	slli	a7,a7,0x1b
     dd0:	0000                	unimp
     dd2:	0001                	nop
     dd4:	006a                	c.slli	zero,0x1a
     dd6:	0000                	unimp
     dd8:	0000                	unimp
     dda:	0000                	unimp
     ddc:	1a00                	addi	s0,sp,304
     dde:	0004                	0x4
     de0:	8200                	0x8200
     de2:	0004                	0x4
     de4:	0100                	addi	s0,sp,128
     de6:	5a00                	lw	s0,48(a2)
     de8:	0482                	c.slli64	s1
     dea:	0000                	unimp
     dec:	00000483          	lb	s1,0(zero) # 0 <__DYNAMIC>
     df0:	0001                	nop
     df2:	0004835b          	0x4835b
     df6:	a800                	fsd	fs0,16(s0)
     df8:	0004                	0x4
     dfa:	0100                	addi	s0,sp,128
     dfc:	6b00                	flw	fs0,16(a4)
     dfe:	04a8                	addi	a0,sp,584
     e00:	0000                	unimp
     e02:	04ae                	slli	s1,s1,0xb
     e04:	0000                	unimp
     e06:	0001                	nop
     e08:	ae5a                	fsd	fs6,280(sp)
     e0a:	0004                	0x4
     e0c:	2a00                	fld	fs0,16(a2)
     e0e:	0005                	c.nop	1
     e10:	0100                	addi	s0,sp,128
     e12:	6b00                	flw	fs0,16(a4)
     e14:	052a                	slli	a0,a0,0xa
     e16:	0000                	unimp
     e18:	06fe                	slli	a3,a3,0x1f
     e1a:	0000                	unimp
     e1c:	0004                	0x4
     e1e:	9f5a01f3          	0x9f5a01f3
	...
     e2a:	041a                	slli	s0,s0,0x6
     e2c:	0000                	unimp
     e2e:	047c                	addi	a5,sp,524
     e30:	0000                	unimp
     e32:	0001                	nop
     e34:	00047c5b          	0x47c5b
     e38:	a800                	fsd	fs0,16(s0)
     e3a:	0004                	0x4
     e3c:	0100                	addi	s0,sp,128
     e3e:	6200                	flw	fs0,0(a2)
     e40:	04a8                	addi	a0,sp,584
     e42:	0000                	unimp
     e44:	04ac                	addi	a1,sp,584
     e46:	0000                	unimp
     e48:	0001                	nop
     e4a:	0004ac5b          	0x4ac5b
     e4e:	6000                	flw	fs0,0(s0)
     e50:	0005                	c.nop	1
     e52:	0100                	addi	s0,sp,128
     e54:	6200                	flw	fs0,0(a2)
     e56:	0560                	addi	s0,sp,652
     e58:	0000                	unimp
     e5a:	0588                	addi	a0,sp,704
     e5c:	0000                	unimp
     e5e:	018a0003          	lb	zero,24(s4)
     e62:	889f 0005 9600      	0x96000005889f
     e68:	0005                	c.nop	1
     e6a:	0400                	addi	s0,sp,512
     e6c:	f300                	fsw	fs0,32(a4)
     e6e:	5b01                	li	s6,-32
     e70:	969f 0005 ea00      	0xea000005969f
     e76:	0006                	c.slli	zero,0x1
     e78:	0100                	addi	s0,sp,128
     e7a:	6200                	flw	fs0,0(a2)
     e7c:	06ea                	slli	a3,a3,0x1a
     e7e:	0000                	unimp
     e80:	06fe                	slli	a3,a3,0x1f
     e82:	0000                	unimp
     e84:	018a0003          	lb	zero,24(s4)
     e88:	009f 0000 0000      	0x9f
     e8e:	0000                	unimp
     e90:	1a00                	addi	s0,sp,304
     e92:	0004                	0x4
     e94:	8000                	0x8000
     e96:	0004                	0x4
     e98:	0100                	addi	s0,sp,128
     e9a:	5c00                	lw	s0,56(s0)
     e9c:	0480                	addi	s0,sp,576
     e9e:	0000                	unimp
     ea0:	04a8                	addi	a0,sp,584
     ea2:	0000                	unimp
     ea4:	0001                	nop
     ea6:	a868                	fsd	fa0,208(s0)
     ea8:	0004                	0x4
     eaa:	aa00                	fsd	fs0,16(a2)
     eac:	0004                	0x4
     eae:	0100                	addi	s0,sp,128
     eb0:	5c00                	lw	s0,56(s0)
     eb2:	04aa                	slli	s1,s1,0xa
     eb4:	0000                	unimp
     eb6:	04de                	slli	s1,s1,0x17
     eb8:	0000                	unimp
     eba:	0001                	nop
     ebc:	de68                	sw	a0,124(a2)
     ebe:	0004                	0x4
     ec0:	e800                	fsw	fs0,16(s0)
     ec2:	0004                	0x4
     ec4:	0400                	addi	s0,sp,512
     ec6:	f300                	fsw	fs0,32(a4)
     ec8:	5c01                	li	s8,-32
     eca:	e89f 0004 0c00      	0xc000004e89f
     ed0:	0005                	c.nop	1
     ed2:	0100                	addi	s0,sp,128
     ed4:	6800                	flw	fs0,16(s0)
     ed6:	050c                	addi	a1,sp,640
     ed8:	0000                	unimp
     eda:	06fe                	slli	a3,a3,0x1f
     edc:	0000                	unimp
     ede:	0004                	0x4
     ee0:	9f5c01f3          	0x9f5c01f3
	...
     eec:	041a                	slli	s0,s0,0x6
     eee:	0000                	unimp
     ef0:	00000483          	lb	s1,0(zero) # 0 <__DYNAMIC>
     ef4:	0001                	nop
     ef6:	835d                	srli	a4,a4,0x17
     ef8:	0004                	0x4
     efa:	a800                	fsd	fs0,16(s0)
     efc:	0004                	0x4
     efe:	0100                	addi	s0,sp,128
     f00:	6600                	flw	fs0,8(a2)
     f02:	04a8                	addi	a0,sp,584
     f04:	0000                	unimp
     f06:	000004af          	0x4af
     f0a:	0001                	nop
     f0c:	af5d                	j	16c2 <result+0x3a>
     f0e:	0004                	0x4
     f10:	8000                	0x8000
     f12:	0005                	c.nop	1
     f14:	0100                	addi	s0,sp,128
     f16:	6600                	flw	fs0,8(a2)
     f18:	0580                	addi	s0,sp,704
     f1a:	0000                	unimp
     f1c:	0596                	slli	a1,a1,0x5
     f1e:	0000                	unimp
     f20:	0004                	0x4
     f22:	9f5d01f3          	0x9f5d01f3
     f26:	0596                	slli	a1,a1,0x5
     f28:	0000                	unimp
     f2a:	06fe                	slli	a3,a3,0x1f
int main(){
     f2c:	0000                	unimp
     f2e:	0001                	nop
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f30:	0066                	c.slli	zero,0x19
     f32:	0000                	unimp
     f34:	0000                	unimp
     f36:	0000                	unimp
     f38:	1a00                	addi	s0,sp,304
     f3a:	0004                	0x4
     f3c:	8300                	0x8300
int main(){
     f3e:	0004                	0x4
     f40:	0100                	addi	s0,sp,128
     f42:	5e00                	lw	s0,56(a2)
     f44:	00000483          	lb	s1,0(zero) # 0 <__DYNAMIC>
    keys = generate_keys(N, p, q);
     f48:	0576                	slli	a0,a0,0x1d
     f4a:	0000                	unimp
     f4c:	0001                	nop
     f4e:	7659                	lui	a2,0xffff6
     f50:	0005                	c.nop	1
     f52:	9600                	0x9600
     f54:	0005                	c.nop	1
    for(i = 0; i < N; ++i){
     f56:	0400                	addi	s0,sp,512
     f58:	f300                	fsw	fs0,32(a4)
        secret_key_f[i] = keys[i];
     f5a:	5e01                	li	t3,-32
     f5c:	969f 0005 fe00      	0xfe000005969f
     f62:	0006                	c.slli	zero,0x1
     f64:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     f66:	5900                	lw	s0,48(a0)
	...
    for(i = N; i < (2*N); ++i){
     f70:	04e0                	addi	s0,sp,588
     f72:	0000                	unimp
     f74:	04e8                	addi	a0,sp,588
     f76:	0000                	unimp
        secret_key_fp[i-(2*N)] = keys[i];
     f78:	0001                	nop
     f7a:	0c68                	addi	a0,sp,540
     f7c:	0005                	c.nop	1
     f7e:	8400                	0x8400
     f80:	0005                	c.nop	1
    for(i = (2*N); i < (3*N); ++i){
     f82:	0100                	addi	s0,sp,128
     f84:	6800                	flw	fs0,16(s0)
    for(i = (3*N); i < (4*N); ++i){
     f86:	0596                	slli	a1,a1,0x5
     f88:	0000                	unimp
     f8a:	06fe                	slli	a3,a3,0x1f
     f8c:	0000                	unimp
     f8e:	0001                	nop
     f90:	0068                	addi	a0,sp,12
        public_key[i-(4*N)] = keys[i];
     f92:	0000                	unimp
     f94:	0000                	unimp
     f96:	0000                	unimp
     f98:	2a00                	fld	fs0,16(a2)
     f9a:	0005                	c.nop	1
    for(i = (4*N); i < (5*N); ++i){
     f9c:	3200                	fld	fs0,32(a2)
     f9e:	0005                	c.nop	1
     fa0:	0100                	addi	s0,sp,128
     fa2:	5f00                	lw	s0,56(a4)
     fa4:	0596                	slli	a1,a1,0x5
     fa6:	0000                	unimp
        ring_poly[i-(5*N)] = keys[i];
     fa8:	059e                	slli	a1,a1,0x7
     faa:	0000                	unimp
     fac:	0001                	nop
     fae:	005f 0000 0000      	0x5f
    for(i = (5*N); i < (6*N+1); ++i){
     fb4:	0000                	unimp
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fb6:	c800                	sw	s0,16(s0)
     fb8:	0004                	0x4
     fba:	ca00                	sw	s0,16(a2)
     fbc:	0004                	0x4
     fbe:	0200                	addi	s0,sp,256
     fc0:	3000                	fld	fs0,32(s0)
     fc2:	ca9f 0004 ce00      	0xce000004ca9f
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fc8:	0004                	0x4
     fca:	0100                	addi	s0,sp,128
     fcc:	5f00                	lw	s0,56(a4)
     fce:	04ce                	slli	s1,s1,0x13
     fd0:	0000                	unimp
     fd2:	04e8                	addi	a0,sp,588
     fd4:	0000                	unimp
     fd6:	0001                	nop
     fd8:	0004f067          	0x4f067
            resultkon[0] = 0xDEDEDEDE;
     fdc:	0600                	addi	s0,sp,768
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fde:	0005                	c.nop	1
     fe0:	0100                	addi	s0,sp,128
     fe2:	5f00                	lw	s0,56(a4)
     fe4:	0506                	slli	a0,a0,0x1
     fe6:	0000                	unimp
     fe8:	051a                	slli	a0,a0,0x6
     fea:	0000                	unimp
     fec:	0001                	nop
     fee:	00051a67          	0x51a67
            resultkon[0] = 0xDEDEDEDE;
     ff2:	2a00                	fld	fs0,16(a2)
    for(i = 0; i < 32; ++i){
     ff4:	0005                	c.nop	1
     ff6:	0100                	addi	s0,sp,128
        if(!(message[i] == Dec_Message[i])){
     ff8:	5f00                	lw	s0,56(a4)
     ffa:	0568                	addi	a0,sp,652
     ffc:	0000                	unimp
     ffe:	0596                	slli	a1,a1,0x5
    1000:	0000                	unimp
    1002:	0001                	nop
    1004:	9e5e                	add	t3,t3,s7
    1006:	0006                	c.slli	zero,0x1
    1008:	a000                	fsd	fs0,0(s0)
    100a:	0006                	c.slli	zero,0x1
            resultkon[0] = 0xBABABABA;
    100c:	0100                	addi	s0,sp,128
    100e:	6a00                	flw	fs0,16(a2)
    1010:	06a0                	addi	s0,sp,840
    1012:	0000                	unimp
    1014:	06b0                	addi	a2,sp,840
 	    *var = resultkon[0];
    1016:	0000                	unimp
    1018:	0001                	nop
    101a:	c05f 0006 c600      	0xc6000006c05f
}
    1020:	0006                	c.slli	zero,0x1
    1022:	0100                	addi	s0,sp,128
    1024:	5f00                	lw	s0,56(a4)
    1026:	06c6                	slli	a3,a3,0x11
    1028:	0000                	unimp
    102a:	06d8                	addi	a4,sp,836
    102c:	0000                	unimp
    102e:	0001                	nop
            resultkon[0] = 0xDEDEDEDE;
    1030:	ea5d                	bnez	a2,10e6 <__DTOR_END__+0x92>
	    *var = resultkon[0];}
    1032:	0006                	c.slli	zero,0x1
    1034:	fa00                	fsw	fs0,48(a2)
    1036:	0006                	c.slli	zero,0x1
    1038:	0100                	addi	s0,sp,128
    103a:	5e00                	lw	s0,56(a2)
    103c:	06fa                	slli	a3,a3,0x1e
    for(i = 0; i < 32; ++i){
    103e:	0000                	unimp
    1040:	06fc                	addi	a5,sp,844
    1042:	0000                	unimp
    1044:	7f7e0003          	lb	zero,2039(t3)
    1048:	fc9f 0006 fe00      	0xfe000006fc9f
    104e:	0006                	c.slli	zero,0x1
    1050:	0100                	addi	s0,sp,128
    1052:	5e00                	lw	s0,56(a2)
	...
    105c:	052a                	slli	a0,a0,0xa
    105e:	0000                	unimp
    1060:	0545                	addi	a0,a0,17
    1062:	0000                	unimp
    1064:	0001                	nop
    1066:	965e                	add	a2,a2,s7
    1068:	0005                	c.nop	1
    106a:	9a00                	0x9a00
    106c:	0005                	c.nop	1
    106e:	0100                	addi	s0,sp,128
    1070:	5e00                	lw	s0,56(a2)
    1072:	06d8                	addi	a4,sp,836
    1074:	0000                	unimp
    1076:	06e5                	addi	a3,a3,25
    1078:	0000                	unimp
    107a:	0001                	nop
    107c:	005e                	c.slli	zero,0x17
    107e:	0000                	unimp
    1080:	0000                	unimp
    1082:	0000                	unimp
    1084:	6c00                	flw	fs0,24(s0)
    1086:	0005                	c.nop	1
    1088:	9600                	0x9600
    108a:	0005                	c.nop	1
    108c:	0600                	addi	s0,sp,768
    108e:	0300                	addi	s0,sp,384
    1090:	1688                	addi	a0,sp,864
    1092:	0000                	unimp
    1094:	009f 0000 0000      	0x9f
    109a:	0000                	unimp
    109c:	7000                	flw	fs0,32(s0)
    109e:	0004                	0x4
    10a0:	7e00                	flw	fs0,56(a2)
    10a2:	0005                	c.nop	1
    10a4:	0200                	addi	s0,sp,256
    10a6:	8500                	0x8500
    10a8:	9600                	0x9600
    10aa:	0005                	c.nop	1
    10ac:	fe00                	fsw	fs0,56(a2)
    10ae:	0006                	c.slli	zero,0x1
    10b0:	0200                	addi	s0,sp,256
    10b2:	8500                	0x8500
	...
    10bc:	7000                	flw	fs0,32(s0)
    10be:	0004                	0x4
    10c0:	7c00                	flw	fs0,56(s0)
    10c2:	0005                	c.nop	1
    10c4:	0200                	addi	s0,sp,256
    10c6:	8400                	0x8400
    10c8:	7c00                	flw	fs0,56(s0)
    10ca:	0005                	c.nop	1
    10cc:	7e00                	flw	fs0,56(a2)
    10ce:	0005                	c.nop	1
    10d0:	0c00                	addi	s0,sp,528
    10d2:	8500                	0x8500
    10d4:	8a00                	0x8a00
    10d6:	3201                	jal	9d6 <generate_keys+0xe8>
    10d8:	2324                	fld	fs1,64(a4)
    10da:	1af0090f          	0x1af0090f
    10de:	961c                	0x961c
    10e0:	0005                	c.nop	1
    10e2:	fe00                	fsw	fs0,56(a2)
    10e4:	0006                	c.slli	zero,0x1
    10e6:	0200                	addi	s0,sp,256
    10e8:	8400                	0x8400
	...
    10f2:	da00                	sw	s0,48(a2)
    10f4:	0005                	c.nop	1
    10f6:	e500                	fsw	fs0,8(a0)
    10f8:	0005                	c.nop	1
    10fa:	0100                	addi	s0,sp,128
    10fc:	5a00                	lw	s0,48(a2)
    10fe:	05e5                	addi	a1,a1,25
    1100:	0000                	unimp
    1102:	065e                	slli	a2,a2,0x17
    1104:	0000                	unimp
    1106:	0001                	nop
    1108:	0006706b          	0x6706b
    110c:	7800                	flw	fs0,48(s0)
    110e:	0006                	c.slli	zero,0x1
    1110:	0100                	addi	s0,sp,128
    1112:	6b00                	flw	fs0,16(a4)
    1114:	0678                	addi	a4,sp,780
    1116:	0000                	unimp
    1118:	067d                	addi	a2,a2,31
    111a:	0000                	unimp
    111c:	0001                	nop
    111e:	7d5a                	flw	fs10,180(sp)
    1120:	0006                	c.slli	zero,0x1
    1122:	d800                	sw	s0,48(s0)
    1124:	0006                	c.slli	zero,0x1
    1126:	0100                	addi	s0,sp,128
    1128:	6b00                	flw	fs0,16(a4)
	...
    1132:	0470                	addi	a2,sp,524
    1134:	0000                	unimp
    1136:	057a                	slli	a0,a0,0x1e
    1138:	0000                	unimp
    113a:	0002                	c.slli64	zero
    113c:	057a0083          	lb	ra,87(s4)
    1140:	0000                	unimp
    1142:	057c                	addi	a5,sp,652
    1144:	0000                	unimp
    1146:	000c                	0xc
    1148:	0084                	addi	s1,sp,64
    114a:	018a                	slli	gp,gp,0x2
    114c:	2432                	fld	fs0,264(sp)
    114e:	f0090f23          	sb	zero,-226(s2)
    1152:	1c1a                	slli	s8,s8,0x26
    1154:	057c                	addi	a5,sp,652
    1156:	0000                	unimp
    1158:	057e                	slli	a0,a0,0x1f
    115a:	0000                	unimp
    115c:	000e                	c.slli	zero,0x3
    115e:	0085                	addi	ra,ra,1
    1160:	018a                	slli	gp,gp,0x2
    1162:	2432                	fld	fs0,264(sp)
    1164:	f0090f23          	sb	zero,-226(s2)
    1168:	311a                	fld	ft2,416(sp)
    116a:	1c24                	addi	s1,sp,568
    116c:	0596                	slli	a1,a1,0x5
    116e:	0000                	unimp
    1170:	06fe                	slli	a3,a3,0x1f
    1172:	0000                	unimp
    1174:	0002                	c.slli64	zero
    1176:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
    117a:	0000                	unimp
    117c:	0000                	unimp
    117e:	0000                	unimp
    1180:	0476                	slli	s0,s0,0x1d
    1182:	0000                	unimp
    1184:	0570                	addi	a2,sp,652
    1186:	0000                	unimp
    1188:	0002                	c.slli64	zero
    118a:	0072                	c.slli	zero,0x1c
    118c:	0570                	addi	a2,sp,652
    118e:	0000                	unimp
    1190:	0586                	slli	a1,a1,0x1
    1192:	0000                	unimp
    1194:	0002                	c.slli64	zero
    1196:	0089                	addi	ra,ra,2
    1198:	0596                	slli	a1,a1,0x5
    119a:	0000                	unimp
    119c:	06fe                	slli	a3,a3,0x1f
    119e:	0000                	unimp
    11a0:	0002                	c.slli64	zero
    11a2:	0072                	c.slli	zero,0x1c
	...
    11ac:	0470                	addi	a2,sp,524
    11ae:	0000                	unimp
    11b0:	0588                	addi	a0,sp,704
    11b2:	0000                	unimp
    11b4:	0001                	nop
    11b6:	886a                	mv	a6,s10
    11b8:	0005                	c.nop	1
    11ba:	9600                	0x9600
    11bc:	0005                	c.nop	1
    11be:	0600                	addi	s0,sp,768
    11c0:	f300                	fsw	fs0,32(a4)
    11c2:	5b01                	li	s6,-32
    11c4:	1c31                	addi	s8,s8,-20
    11c6:	969f 0005 fe00      	0xfe000005969f
    11cc:	0006                	c.slli	zero,0x1
    11ce:	0100                	addi	s0,sp,128
    11d0:	6a00                	flw	fs0,16(a2)
	...
    11da:	0470                	addi	a2,sp,524
    11dc:	0000                	unimp
    11de:	0588                	addi	a0,sp,704
    11e0:	0000                	unimp
    11e2:	0001                	nop
    11e4:	886a                	mv	a6,s10
    11e6:	0005                	c.nop	1
    11e8:	9600                	0x9600
    11ea:	0005                	c.nop	1
    11ec:	0600                	addi	s0,sp,768
    11ee:	f300                	fsw	fs0,32(a4)
    11f0:	5b01                	li	s6,-32
    11f2:	1c31                	addi	s8,s8,-20
    11f4:	969f 0005 fe00      	0xfe000005969f
    11fa:	0006                	c.slli	zero,0x1
    11fc:	0100                	addi	s0,sp,128
    11fe:	6a00                	flw	fs0,16(a2)
	...
    1208:	0470                	addi	a2,sp,524
    120a:	0000                	unimp
    120c:	0588                	addi	a0,sp,704
    120e:	0000                	unimp
    1210:	0001                	nop
    1212:	886a                	mv	a6,s10
    1214:	0005                	c.nop	1
    1216:	9600                	0x9600
    1218:	0005                	c.nop	1
    121a:	0600                	addi	s0,sp,768
    121c:	f300                	fsw	fs0,32(a4)
    121e:	5b01                	li	s6,-32
    1220:	1c31                	addi	s8,s8,-20
    1222:	969f 0005 fe00      	0xfe000005969f
    1228:	0006                	c.slli	zero,0x1
    122a:	0100                	addi	s0,sp,128
    122c:	6a00                	flw	fs0,16(a2)
	...
    1236:	0474                	addi	a3,sp,524
    1238:	0000                	unimp
    123a:	04ce                	slli	s1,s1,0x13
    123c:	0000                	unimp
    123e:	0001                	nop
    1240:	0004ce67          	0x4ce67
    1244:	e800                	fsw	fs0,16(s0)
    1246:	0004                	0x4
    1248:	0300                	addi	s0,sp,384
    124a:	8600                	0x8600
    124c:	9f7f                	0x9f7f
    124e:	04e8                	addi	a0,sp,588
    1250:	0000                	unimp
    1252:	0506                	slli	a0,a0,0x1
    1254:	0000                	unimp
    1256:	0001                	nop
    1258:	00050667          	jalr	a2,a0
    125c:	8000                	0x8000
    125e:	0005                	c.nop	1
    1260:	0300                	addi	s0,sp,384
    1262:	8600                	0x8600
    1264:	9f7f                	0x9f7f
    1266:	0580                	addi	s0,sp,704
    1268:	0000                	unimp
    126a:	0596                	slli	a1,a1,0x5
    126c:	0000                	unimp
    126e:	0006                	c.slli	zero,0x1
    1270:	315d01f3          	0x315d01f3
    1274:	9f1c                	0x9f1c
    1276:	0596                	slli	a1,a1,0x5
    1278:	0000                	unimp
    127a:	06fe                	slli	a3,a3,0x1f
    127c:	0000                	unimp
    127e:	7f860003          	lb	zero,2040(a2) # ffff67f8 <_stack_start+0xfffe67f8>
    1282:	009f 0000 0000      	0x9f
    1288:	0000                	unimp
    128a:	bc00                	fsd	fs0,56(s0)
    128c:	0002                	c.slli64	zero
    128e:	3800                	fld	fs0,48(s0)
    1290:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1294:	5a00                	lw	s0,48(a2)
    1296:	0338                	addi	a4,sp,392
    1298:	0000                	unimp
    129a:	0339                	addi	t1,t1,14
    129c:	0000                	unimp
    129e:	0001                	nop
    12a0:	0003395b          	0x3395b
    12a4:	5c00                	lw	s0,56(s0)
    12a6:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    12aa:	f300                	fsw	fs0,32(a4)
    12ac:	5a01                	li	s4,-32
    12ae:	5c9f 0003 8200      	0x820000035c9f
    12b4:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    12b8:	5a00                	lw	s0,48(a2)
    12ba:	0382                	c.slli64	t2
    12bc:	0000                	unimp
    12be:	041a                	slli	s0,s0,0x6
    12c0:	0000                	unimp
    12c2:	0004                	0x4
    12c4:	9f5a01f3          	0x9f5a01f3
	...
    12d0:	02bc                	addi	a5,sp,328
    12d2:	0000                	unimp
    12d4:	0336                	slli	t1,t1,0xd
    12d6:	0000                	unimp
    12d8:	0001                	nop
    12da:	0003365b          	0x3365b
    12de:	3900                	fld	fs0,48(a0)
    12e0:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    12e4:	5c00                	lw	s0,56(s0)
    12e6:	0339                	addi	t1,t1,14
    12e8:	0000                	unimp
    12ea:	035c                	addi	a5,sp,388
    12ec:	0000                	unimp
    12ee:	018a0003          	lb	zero,24(s4)
    12f2:	5c9f 0003 8200      	0x820000035c9f
    12f8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    12fc:	5b00                	lw	s0,48(a4)
    12fe:	0382                	c.slli64	t2
    1300:	0000                	unimp
    1302:	03b2                	slli	t2,t2,0xc
    1304:	0000                	unimp
    1306:	018a0003          	lb	zero,24(s4)
    130a:	b29f 0003 1a00      	0x1a000003b29f
    1310:	0004                	0x4
    1312:	0400                	addi	s0,sp,512
    1314:	f300                	fsw	fs0,32(a4)
    1316:	5b01                	li	s6,-32
    1318:	009f 0000 0000      	0x9f
    131e:	0000                	unimp
    1320:	bc00                	fsd	fs0,56(s0)
    1322:	0002                	c.slli64	zero
    1324:	2400                	fld	fs0,8(s0)
    1326:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    132a:	5c00                	lw	s0,56(s0)
    132c:	0324                	addi	s1,sp,392
    132e:	0000                	unimp
    1330:	03b0                	addi	a2,sp,456
    1332:	0000                	unimp
    1334:	0001                	nop
    1336:	b069                	j	bc0 <generate_keys+0x2d2>
    1338:	c0000003          	lb	zero,-1024(zero) # fffffc00 <_stack_start+0xfffefc00>
    133c:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1340:	f300                	fsw	fs0,32(a4)
    1342:	5c01                	li	s8,-32
    1344:	c09f 0003 1a00      	0x1a000003c09f
    134a:	0004                	0x4
    134c:	0100                	addi	s0,sp,128
    134e:	6900                	flw	fs0,16(a0)
	...
    1358:	02bc                	addi	a5,sp,328
    135a:	0000                	unimp
    135c:	0326                	slli	t1,t1,0x9
    135e:	0000                	unimp
    1360:	0001                	nop
    1362:	265d                	jal	1708 <result+0x80>
    1364:	a6000003          	lb	zero,-1440(zero) # fffffa60 <_stack_start+0xfffefa60>
    1368:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    136c:	6400                	flw	fs0,8(s0)
    136e:	03a6                	slli	t2,t2,0x9
    1370:	0000                	unimp
    1372:	03c0                	addi	s0,sp,452
    1374:	0000                	unimp
    1376:	0004                	0x4
    1378:	9f5d01f3          	0x9f5d01f3
    137c:	03c0                	addi	s0,sp,452
    137e:	0000                	unimp
    1380:	041a                	slli	s0,s0,0x6
    1382:	0000                	unimp
    1384:	0001                	nop
    1386:	0064                	addi	s1,sp,12
    1388:	0000                	unimp
    138a:	0000                	unimp
    138c:	0000                	unimp
    138e:	bc00                	fsd	fs0,56(s0)
    1390:	0002                	c.slli64	zero
    1392:	2e00                	fld	fs0,24(a2)
    1394:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1398:	5e00                	lw	s0,56(a2)
    139a:	032e                	slli	t1,t1,0xb
    139c:	0000                	unimp
    139e:	03ae                	slli	t2,t2,0xb
    13a0:	0000                	unimp
    13a2:	0001                	nop
    13a4:	ae68                	fsd	fa0,216(a2)
    13a6:	c0000003          	lb	zero,-1024(zero) # fffffc00 <_stack_start+0xfffefc00>
    13aa:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    13ae:	f300                	fsw	fs0,32(a4)
    13b0:	5e01                	li	t3,-32
    13b2:	c09f 0003 1a00      	0x1a000003c09f
    13b8:	0004                	0x4
    13ba:	0100                	addi	s0,sp,128
    13bc:	6800                	flw	fs0,16(s0)
	...
    13c6:	0318                	addi	a4,sp,384
    13c8:	0000                	unimp
    13ca:	0392                	slli	t2,t2,0x4
    13cc:	0000                	unimp
    13ce:	0002                	c.slli64	zero
    13d0:	0085                	addi	ra,ra,1
    13d2:	03c0                	addi	s0,sp,452
    13d4:	0000                	unimp
    13d6:	040c                	addi	a1,sp,512
    13d8:	0000                	unimp
    13da:	0002                	c.slli64	zero
    13dc:	0085                	addi	ra,ra,1
	...
    13e6:	035c                	addi	a5,sp,388
    13e8:	0000                	unimp
    13ea:	0362                	slli	t1,t1,0x18
    13ec:	0000                	unimp
    13ee:	0001                	nop
    13f0:	625e                	flw	ft4,212(sp)
    13f2:	6c000003          	lb	zero,1728(zero) # 6c0 <polydiv+0x2a6>
    13f6:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    13fa:	7e00                	flw	fs0,56(a2)
    13fc:	9f7f                	0x9f7f
    13fe:	036c                	addi	a1,sp,396
    1400:	0000                	unimp
    1402:	037e                	slli	t1,t1,0x1f
    1404:	0000                	unimp
    1406:	0001                	nop
    1408:	925e                	add	tp,tp,s7
    140a:	a0000003          	lb	zero,-1536(zero) # fffffa00 <_stack_start+0xfffefa00>
    140e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1412:	5900                	lw	s0,48(a0)
    1414:	040c                	addi	a1,sp,512
    1416:	0000                	unimp
    1418:	041a                	slli	s0,s0,0x6
    141a:	0000                	unimp
    141c:	0001                	nop
    141e:	0059                	c.nop	22
    1420:	0000                	unimp
    1422:	0000                	unimp
    1424:	0000                	unimp
    1426:	2000                	fld	fs0,0(s0)
    1428:	2e000003          	lb	zero,736(zero) # 2e0 <polymult2+0x24>
    142c:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1430:	3000                	fld	fs0,32(s0)
    1432:	2e9f 0003 3900      	0x390000032e9f
    1438:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    143c:	5d00                	lw	s0,56(a0)
    143e:	0354                	addi	a3,sp,388
    1440:	0000                	unimp
    1442:	035c                	addi	a5,sp,388
    1444:	0000                	unimp
    1446:	0001                	nop
    1448:	5c66                	lw	s8,120(sp)
    144a:	82000003          	lb	zero,-2016(zero) # fffff820 <_stack_start+0xfffef820>
    144e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1452:	5d00                	lw	s0,56(a0)
    1454:	0384                	addi	s1,sp,448
    1456:	0000                	unimp
    1458:	03aa                	slli	t2,t2,0xa
    145a:	0000                	unimp
    145c:	0001                	nop
    145e:	c066                	sw	s9,0(sp)
    1460:	1a000003          	lb	zero,416(zero) # 1a0 <polymult+0x78>
    1464:	0004                	0x4
    1466:	0100                	addi	s0,sp,128
    1468:	6600                	flw	fs0,8(a2)
	...
    1472:	03c0                	addi	s0,sp,452
    1474:	0000                	unimp
    1476:	03d2                	slli	t2,t2,0x14
    1478:	0000                	unimp
    147a:	0001                	nop
    147c:	d25f 0003 d800      	0xd8000003d25f
    1482:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1486:	7f00                	flw	fs0,56(a4)
    1488:	9f01                	0x9f01
    148a:	03d8                	addi	a4,sp,452
    148c:	0000                	unimp
    148e:	03e4                	addi	s1,sp,460
    1490:	0000                	unimp
    1492:	0001                	nop
    1494:	e85f 0003 fa00      	0xfa000003e85f
    149a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    149e:	5f00                	lw	s0,56(a4)
    14a0:	03fa                	slli	t2,t2,0x1e
    14a2:	0000                	unimp
    14a4:	0400                	addi	s0,sp,512
    14a6:	0000                	unimp
    14a8:	017f0003          	lb	zero,23(t5) # 1b017 <_stack_start+0xb017>
    14ac:	009f 0004 0c00      	0xc000004009f
    14b2:	0004                	0x4
    14b4:	0100                	addi	s0,sp,128
    14b6:	5f00                	lw	s0,56(a4)
	...
    14c0:	0396                	slli	t2,t2,0x5
    14c2:	0000                	unimp
    14c4:	03c0                	addi	s0,sp,452
    14c6:	0000                	unimp
    14c8:	0006                	c.slli	zero,0x1
    14ca:	00143003          	0x143003
    14ce:	9f00                	0x9f00
	...
    14d8:	031e                	slli	t1,t1,0x7
    14da:	0000                	unimp
    14dc:	03b4                	addi	a3,sp,456
    14de:	0000                	unimp
    14e0:	0002                	c.slli64	zero
    14e2:	03c0008b          	0x3c0008b
    14e6:	0000                	unimp
    14e8:	041a                	slli	s0,s0,0x6
    14ea:	0000                	unimp
    14ec:	0002                	c.slli64	zero
    14ee:	0000008b          	0x8b
    14f2:	0000                	unimp
    14f4:	0000                	unimp
    14f6:	0000                	unimp
    14f8:	0320                	addi	s0,sp,392
    14fa:	0000                	unimp
    14fc:	039a                	slli	t2,t2,0x6
    14fe:	0000                	unimp
    1500:	0002                	c.slli64	zero
    1502:	0072                	c.slli	zero,0x1c
    1504:	039a                	slli	t2,t2,0x6
    1506:	0000                	unimp
    1508:	03a6                	slli	t2,t2,0x9
    150a:	0000                	unimp
    150c:	000c                	0xc
    150e:	0084008b          	0x84008b
    1512:	2432                	fld	fs0,264(sp)
    1514:	f0090f23          	sb	zero,-226(s2)
    1518:	1c1a                	slli	s8,s8,0x26
    151a:	03a6                	slli	t2,t2,0x9
    151c:	0000                	unimp
    151e:	03b4                	addi	a3,sp,456
    1520:	0000                	unimp
    1522:	000d                	c.nop	3
    1524:	01f3008b          	0x1f3008b
    1528:	325d                	jal	ece <memset+0x4a>
    152a:	2324                	fld	fs1,64(a4)
    152c:	1af0090f          	0x1af0090f
    1530:	c01c                	sw	a5,0(s0)
    1532:	1a000003          	lb	zero,416(zero) # 1a0 <polymult+0x78>
    1536:	0004                	0x4
    1538:	0200                	addi	s0,sp,256
    153a:	7200                	flw	fs0,32(a2)
	...
    1544:	1800                	addi	s0,sp,48
    1546:	54000003          	lb	zero,1344(zero) # 540 <polydiv+0x126>
    154a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    154e:	6600                	flw	fs0,8(a2)
    1550:	0354                	addi	a3,sp,388
    1552:	0000                	unimp
    1554:	035c                	addi	a5,sp,388
    1556:	0000                	unimp
    1558:	7f840003          	lb	zero,2040(s0) # 17f8 <result+0x170>
    155c:	5c9f 0003 8400      	0x840000035c9f
    1562:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1566:	6600                	flw	fs0,8(a2)
    1568:	0384                	addi	s1,sp,448
    156a:	0000                	unimp
    156c:	03a6                	slli	t2,t2,0x9
    156e:	0000                	unimp
    1570:	7f840003          	lb	zero,2040(s0)
    1574:	a69f 0003 c000      	0xc0000003a69f
    157a:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    157e:	f300                	fsw	fs0,32(a4)
    1580:	5d01                	li	s10,-32
    1582:	1c31                	addi	s8,s8,-20
    1584:	c09f 0003 1a00      	0x1a000003c09f
    158a:	0004                	0x4
    158c:	0300                	addi	s0,sp,384
    158e:	8400                	0x8400
    1590:	9f7f                	0x9f7f
	...
    159a:	02d0                	addi	a2,sp,324
    159c:	0000                	unimp
    159e:	03a4                	addi	s1,sp,456
    15a0:	0000                	unimp
    15a2:	0001                	nop
    15a4:	0003a463          	0x3a463
    15a8:	a600                	fsd	fs0,8(a2)
    15aa:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    15ae:	8400                	0x8400
    15b0:	8a00                	0x8a00
    15b2:	2200                	fld	fs0,0(a2)
    15b4:	a69f 0003 b200      	0xb2000003a69f
    15ba:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    15be:	8a00                	0x8a00
    15c0:	f300                	fsw	fs0,32(a4)
    15c2:	5d01                	li	s10,-32
    15c4:	9f22                	add	t5,t5,s0
    15c6:	03b2                	slli	t2,t2,0xc
    15c8:	0000                	unimp
    15ca:	03c0                	addi	s0,sp,452
    15cc:	0000                	unimp
    15ce:	000a                	c.slli	zero,0x2
    15d0:	f35b01f3          	0xf35b01f3
    15d4:	5d01                	li	s10,-32
    15d6:	3122                	fld	ft2,40(sp)
    15d8:	9f1c                	0x9f1c
    15da:	03c0                	addi	s0,sp,452
    15dc:	0000                	unimp
    15de:	041a                	slli	s0,s0,0x6
    15e0:	0000                	unimp
    15e2:	0001                	nop
    15e4:	00000063          	beqz	zero,15e4 <product2+0x1b4>
    15e8:	0000                	unimp
    15ea:	0000                	unimp
    15ec:	1e00                	addi	s0,sp,816
    15ee:	b2000003          	lb	zero,-1248(zero) # fffffb20 <_stack_start+0xfffefb20>
    15f2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15f6:	6a00                	flw	fs0,16(a2)
    15f8:	03b2                	slli	t2,t2,0xc
    15fa:	0000                	unimp
    15fc:	03c0                	addi	s0,sp,452
    15fe:	0000                	unimp
    1600:	0006                	c.slli	zero,0x1
    1602:	315b01f3          	0x315b01f3
    1606:	9f1c                	0x9f1c
    1608:	03c0                	addi	s0,sp,452
    160a:	0000                	unimp
    160c:	041a                	slli	s0,s0,0x6
    160e:	0000                	unimp
    1610:	0001                	nop
    1612:	006a                	c.slli	zero,0x1a
    1614:	0000                	unimp
    1616:	0000                	unimp
    1618:	0000                	unimp
    161a:	1e00                	addi	s0,sp,816
    161c:	54000003          	lb	zero,1344(zero) # 540 <polydiv+0x126>
    1620:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1624:	6600                	flw	fs0,8(a2)
    1626:	0354                	addi	a3,sp,388
    1628:	0000                	unimp
    162a:	035c                	addi	a5,sp,388
    162c:	0000                	unimp
    162e:	7f840003          	lb	zero,2040(s0)
    1632:	5c9f 0003 8400      	0x840000035c9f
    1638:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    163c:	6600                	flw	fs0,8(a2)
    163e:	0384                	addi	s1,sp,448
    1640:	0000                	unimp
    1642:	03a6                	slli	t2,t2,0x9
    1644:	0000                	unimp
    1646:	7f840003          	lb	zero,2040(s0)
    164a:	a69f 0003 c000      	0xc0000003a69f
    1650:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1654:	f300                	fsw	fs0,32(a4)
    1656:	5d01                	li	s10,-32
    1658:	1c31                	addi	s8,s8,-20
    165a:	c09f 0003 1a00      	0x1a000003c09f
    1660:	0004                	0x4
    1662:	0300                	addi	s0,sp,384
    1664:	8400                	0x8400
    1666:	9f7f                	0x9f7f
	...
    1670:	0128                	addi	a0,sp,136
    1672:	0000                	unimp
    1674:	01a8                	addi	a0,sp,200
    1676:	0000                	unimp
    1678:	0001                	nop
    167a:	a85a                	fsd	fs6,16(sp)
    167c:	0001                	nop
    167e:	b100                	fsd	fs0,32(a0)
    1680:	0001                	nop
    1682:	0100                	addi	s0,sp,128
    1684:	5b00                	lw	s0,48(a4)
    1686:	01b1                	addi	gp,gp,12
    1688:	0000                	unimp
    168a:	01ea                	slli	gp,gp,0x1a
    168c:	0000                	unimp
    168e:	0004                	0x4
    1690:	9f5a01f3          	0x9f5a01f3
    1694:	01ea                	slli	gp,gp,0x1a
    1696:	0000                	unimp
    1698:	0210                	addi	a2,sp,256
    169a:	0000                	unimp
    169c:	0001                	nop
    169e:	105a                	c.slli	zero,0x36
    16a0:	0002                	c.slli64	zero
    16a2:	bc00                	fsd	fs0,56(s0)
    16a4:	0002                	c.slli64	zero
    16a6:	0400                	addi	s0,sp,512
    16a8:	f300                	fsw	fs0,32(a4)
    16aa:	5a01                	li	s4,-32
    16ac:	009f 0000 0000      	0x9f
    16b2:	0000                	unimp
    16b4:	2800                	fld	fs0,16(s0)
    16b6:	0001                	nop
    16b8:	9400                	0x9400
    16ba:	0001                	nop
    16bc:	0100                	addi	s0,sp,128
    16be:	5b00                	lw	s0,48(a4)
    16c0:	0194                	addi	a3,sp,192
    16c2:	0000                	unimp
    16c4:	024a                	slli	tp,tp,0x12
    16c6:	0000                	unimp
    16c8:	0001                	nop
    16ca:	00024a67          	0x24a67
    16ce:	5e00                	lw	s0,56(a2)
    16d0:	0002                	c.slli64	zero
    16d2:	0700                	addi	s0,sp,896
    16d4:	9100                	0x9100
    16d6:	7fbc                	flw	fa5,120(a5)
    16d8:	2306                	fld	ft6,64(sp)
    16da:	9f01                	0x9f01
    16dc:	025e                	slli	tp,tp,0x17
    16de:	0000                	unimp
    16e0:	02bc                	addi	a5,sp,328
    16e2:	0000                	unimp
    16e4:	0001                	nop
    16e6:	00000067          	jr	zero # 0 <__DYNAMIC>
    16ea:	0000                	unimp
    16ec:	0000                	unimp
    16ee:	2800                	fld	fs0,16(s0)
    16f0:	0001                	nop
    16f2:	9e00                	0x9e00
    16f4:	0001                	nop
    16f6:	0100                	addi	s0,sp,128
    16f8:	5c00                	lw	s0,56(s0)
    16fa:	019e                	slli	gp,gp,0x7
    16fc:	0000                	unimp
    16fe:	01b1                	addi	gp,gp,12
    1700:	0000                	unimp
    1702:	0001                	nop
    1704:	b160                	fsd	fs0,224(a0)
    1706:	0001                	nop
    1708:	ea00                	fsw	fs0,16(a2)
    170a:	0001                	nop
    170c:	0300                	addi	s0,sp,384
    170e:	7800                	flw	fs0,48(s0)
    1710:	7fb8                	flw	fa4,120(a5)
    1712:	01ea                	slli	gp,gp,0x1a
    1714:	0000                	unimp
    1716:	0210                	addi	a2,sp,256
    1718:	0000                	unimp
    171a:	0001                	nop
    171c:	1060                	addi	s0,sp,44
    171e:	0002                	c.slli64	zero
    1720:	3c00                	fld	fs0,56(s0)
    1722:	0002                	c.slli64	zero
    1724:	0300                	addi	s0,sp,384
    1726:	7800                	flw	fs0,48(s0)
    1728:	7fb8                	flw	fa4,120(a5)
    172a:	023c                	addi	a5,sp,264
    172c:	0000                	unimp
    172e:	02bc                	addi	a5,sp,328
    1730:	0000                	unimp
    1732:	b8910003          	lb	zero,-1143(sp)
    1736:	007f                	0x7f
    1738:	0000                	unimp
    173a:	0000                	unimp
    173c:	0000                	unimp
    173e:	2800                	fld	fs0,16(s0)
    1740:	0001                	nop
    1742:	9600                	0x9600
    1744:	0001                	nop
    1746:	0100                	addi	s0,sp,128
    1748:	5d00                	lw	s0,56(a0)
    174a:	0196                	slli	gp,gp,0x5
    174c:	0000                	unimp
    174e:	0242                	slli	tp,tp,0x10
    1750:	0000                	unimp
    1752:	0001                	nop
    1754:	00024263          	bltz	tp,1758 <result+0xd0>
    1758:	5e00                	lw	s0,56(a2)
    175a:	0002                	c.slli64	zero
    175c:	0400                	addi	s0,sp,512
    175e:	f300                	fsw	fs0,32(a4)
    1760:	5d01                	li	s10,-32
    1762:	5e9f 0002 bc00      	0xbc0000025e9f
    1768:	0002                	c.slli64	zero
    176a:	0100                	addi	s0,sp,128
    176c:	6300                	flw	fs0,0(a4)
	...
    1776:	0128                	addi	a0,sp,136
    1778:	0000                	unimp
    177a:	0138                	addi	a4,sp,136
    177c:	0000                	unimp
    177e:	0001                	nop
    1780:	385e                	fld	fa6,496(sp)
    1782:	0001                	nop
    1784:	2a00                	fld	fs0,16(a2)
    1786:	0002                	c.slli64	zero
    1788:	0100                	addi	s0,sp,128
    178a:	6400                	flw	fs0,8(s0)
    178c:	022a                	slli	tp,tp,0xa
    178e:	0000                	unimp
    1790:	00000233          	add	tp,zero,zero
    1794:	0001                	nop
    1796:	0002335b          	0x2335b
    179a:	4400                	lw	s0,8(s0)
    179c:	0002                	c.slli64	zero
    179e:	0100                	addi	s0,sp,128
    17a0:	6400                	flw	fs0,8(s0)
    17a2:	0244                	addi	s1,sp,260
    17a4:	0000                	unimp
    17a6:	025e                	slli	tp,tp,0x17
    17a8:	0000                	unimp
    17aa:	0004                	0x4
    17ac:	9f5e01f3          	0x9f5e01f3
    17b0:	025e                	slli	tp,tp,0x17
    17b2:	0000                	unimp
    17b4:	02aa                	slli	t0,t0,0xa
    17b6:	0000                	unimp
    17b8:	0001                	nop
    17ba:	aa64                	fsd	fs1,208(a2)
    17bc:	0002                	c.slli64	zero
    17be:	ad00                	fsd	fs0,24(a0)
    17c0:	0002                	c.slli64	zero
    17c2:	0100                	addi	s0,sp,128
    17c4:	5b00                	lw	s0,48(a4)
    17c6:	02ad                	addi	t0,t0,11
    17c8:	0000                	unimp
    17ca:	02bc                	addi	a5,sp,328
    17cc:	0000                	unimp
    17ce:	0001                	nop
    17d0:	0064                	addi	s1,sp,12
    17d2:	0000                	unimp
    17d4:	0000                	unimp
    17d6:	0000                	unimp
    17d8:	2800                	fld	fs0,16(s0)
    17da:	0001                	nop
    17dc:	8c00                	0x8c00
    17de:	0001                	nop
    17e0:	0100                	addi	s0,sp,128
    17e2:	5f00                	lw	s0,56(a4)
    17e4:	018c                	addi	a1,sp,192
    17e6:	0000                	unimp
    17e8:	0252                	slli	tp,tp,0x14
    17ea:	0000                	unimp
    17ec:	0001                	nop
    17ee:	0002526b          	0x2526b
    17f2:	5e00                	lw	s0,56(a2)
    17f4:	0002                	c.slli64	zero
    17f6:	0400                	addi	s0,sp,512
    17f8:	f300                	fsw	fs0,32(a4)
    17fa:	5f01                	li	t5,-32
    17fc:	5e9f 0002 bc00      	0xbc0000025e9f
    1802:	0002                	c.slli64	zero
    1804:	0100                	addi	s0,sp,128
    1806:	6b00                	flw	fs0,16(a4)
	...
    1810:	0188                	addi	a0,sp,192
    1812:	0000                	unimp
    1814:	0222                	slli	tp,tp,0x8
    1816:	0000                	unimp
    1818:	0002                	c.slli64	zero
    181a:	0086                	slli	ra,ra,0x1
    181c:	025e                	slli	tp,tp,0x17
    181e:	0000                	unimp
    1820:	02aa                	slli	t0,t0,0xa
    1822:	0000                	unimp
    1824:	0002                	c.slli64	zero
    1826:	0086                	slli	ra,ra,0x1
	...
    1830:	01ea                	slli	gp,gp,0x1a
    1832:	0000                	unimp
    1834:	01f0                	addi	a2,sp,204
    1836:	0000                	unimp
    1838:	0001                	nop
    183a:	f05c                	fsw	fa5,36(s0)
    183c:	0001                	nop
    183e:	fa00                	fsw	fs0,48(a2)
    1840:	0001                	nop
    1842:	0300                	addi	s0,sp,384
    1844:	7c00                	flw	fs0,56(s0)
    1846:	9f7f                	0x9f7f
    1848:	01fa                	slli	gp,gp,0x1e
    184a:	0000                	unimp
    184c:	020c                	addi	a1,sp,256
    184e:	0000                	unimp
    1850:	0001                	nop
    1852:	225c                	fld	fa5,128(a2)
    1854:	0002                	c.slli64	zero
    1856:	4000                	lw	s0,0(s0)
    1858:	0002                	c.slli64	zero
    185a:	0100                	addi	s0,sp,128
    185c:	6200                	flw	fs0,0(a2)
    185e:	02aa                	slli	t0,t0,0xa
    1860:	0000                	unimp
    1862:	02bc                	addi	a5,sp,328
    1864:	0000                	unimp
    1866:	0001                	nop
    1868:	0062                	c.slli	zero,0x18
    186a:	0000                	unimp
    186c:	0000                	unimp
    186e:	0000                	unimp
    1870:	9000                	0x9000
    1872:	0001                	nop
    1874:	9e00                	0x9e00
    1876:	0001                	nop
    1878:	0200                	addi	s0,sp,256
    187a:	3000                	fld	fs0,32(s0)
    187c:	9e9f 0001 b100      	0xb10000019e9f
    1882:	0001                	nop
    1884:	0100                	addi	s0,sp,128
    1886:	5d00                	lw	s0,56(a0)
    1888:	01e2                	slli	gp,gp,0x18
    188a:	0000                	unimp
    188c:	01ea                	slli	gp,gp,0x1a
    188e:	0000                	unimp
    1890:	0001                	nop
    1892:	ea68                	fsw	fa0,84(a2)
    1894:	0001                	nop
    1896:	1000                	addi	s0,sp,32
    1898:	0002                	c.slli64	zero
    189a:	0100                	addi	s0,sp,128
    189c:	5d00                	lw	s0,56(a0)
    189e:	0212                	slli	tp,tp,0x4
    18a0:	0000                	unimp
    18a2:	024c                	addi	a1,sp,260
    18a4:	0000                	unimp
    18a6:	0001                	nop
    18a8:	5e68                	lw	a0,124(a2)
    18aa:	0002                	c.slli64	zero
    18ac:	bc00                	fsd	fs0,56(s0)
    18ae:	0002                	c.slli64	zero
    18b0:	0100                	addi	s0,sp,128
    18b2:	6800                	flw	fs0,16(s0)
	...
    18bc:	025e                	slli	tp,tp,0x17
    18be:	0000                	unimp
    18c0:	0270                	addi	a2,sp,268
    18c2:	0000                	unimp
    18c4:	0001                	nop
    18c6:	705e                	flw	ft0,244(sp)
    18c8:	0002                	c.slli64	zero
    18ca:	7600                	flw	fs0,40(a2)
    18cc:	0002                	c.slli64	zero
    18ce:	0300                	addi	s0,sp,384
    18d0:	7e00                	flw	fs0,56(a2)
    18d2:	9f01                	0x9f01
    18d4:	0276                	slli	tp,tp,0x1d
    18d6:	0000                	unimp
    18d8:	0282                	c.slli64	t0
    18da:	0000                	unimp
    18dc:	0001                	nop
    18de:	865e                	mv	a2,s7
    18e0:	0002                	c.slli64	zero
    18e2:	9800                	0x9800
    18e4:	0002                	c.slli64	zero
    18e6:	0100                	addi	s0,sp,128
    18e8:	5e00                	lw	s0,56(a2)
    18ea:	0298                	addi	a4,sp,320
    18ec:	0000                	unimp
    18ee:	029e                	slli	t0,t0,0x7
    18f0:	0000                	unimp
    18f2:	017e0003          	lb	zero,23(t3)
    18f6:	9e9f 0002 aa00      	0xaa0000029e9f
    18fc:	0002                	c.slli64	zero
    18fe:	0100                	addi	s0,sp,128
    1900:	5e00                	lw	s0,56(a2)
	...
    190a:	0234                	addi	a3,sp,264
    190c:	0000                	unimp
    190e:	025e                	slli	tp,tp,0x17
    1910:	0000                	unimp
    1912:	0006                	c.slli	zero,0x1
    1914:	0011d803          	lhu	a6,1(gp)
    1918:	9f00                	0x9f00
	...
    1922:	018c                	addi	a1,sp,192
    1924:	0000                	unimp
    1926:	0250                	addi	a2,sp,260
    1928:	0000                	unimp
    192a:	0002                	c.slli64	zero
    192c:	008a                	slli	ra,ra,0x2
    192e:	025e                	slli	tp,tp,0x17
    1930:	0000                	unimp
    1932:	02bc                	addi	a5,sp,328
    1934:	0000                	unimp
    1936:	0002                	c.slli64	zero
    1938:	008a                	slli	ra,ra,0x2
	...
    1942:	0190                	addi	a2,sp,192
    1944:	0000                	unimp
    1946:	0238                	addi	a4,sp,264
    1948:	0000                	unimp
    194a:	0002                	c.slli64	zero
    194c:	0072                	c.slli	zero,0x1c
    194e:	0238                	addi	a4,sp,264
    1950:	0000                	unimp
    1952:	0242                	slli	tp,tp,0x10
    1954:	0000                	unimp
    1956:	000c                	0xc
    1958:	008a                	slli	ra,ra,0x2
    195a:	24320083          	lb	ra,579(tp) # 243 <polymult+0x11b>
    195e:	f0090f23          	sb	zero,-226(s2)
    1962:	1c1a                	slli	s8,s8,0x26
    1964:	0242                	slli	tp,tp,0x10
    1966:	0000                	unimp
    1968:	0250                	addi	a2,sp,260
    196a:	0000                	unimp
    196c:	000d                	c.nop	3
    196e:	008a                	slli	ra,ra,0x2
    1970:	325d01f3          	0x325d01f3
    1974:	2324                	fld	fs1,64(a4)
    1976:	1af0090f          	0x1af0090f
    197a:	5e1c                	lw	a5,56(a2)
    197c:	0002                	c.slli64	zero
    197e:	bc00                	fsd	fs0,56(s0)
    1980:	0002                	c.slli64	zero
    1982:	0200                	addi	s0,sp,256
    1984:	7200                	flw	fs0,32(a2)
	...
    198e:	8800                	0x8800
    1990:	0001                	nop
    1992:	e200                	fsw	fs0,0(a2)
    1994:	0001                	nop
    1996:	0100                	addi	s0,sp,128
    1998:	6800                	flw	fs0,16(s0)
    199a:	01e2                	slli	gp,gp,0x18
    199c:	0000                	unimp
    199e:	01ea                	slli	gp,gp,0x1a
    19a0:	0000                	unimp
    19a2:	7f830003          	lb	zero,2040(t1)
    19a6:	ea9f 0001 1200      	0x12000001ea9f
    19ac:	0002                	c.slli64	zero
    19ae:	0100                	addi	s0,sp,128
    19b0:	6800                	flw	fs0,16(s0)
    19b2:	0212                	slli	tp,tp,0x4
    19b4:	0000                	unimp
    19b6:	0242                	slli	tp,tp,0x10
    19b8:	0000                	unimp
    19ba:	7f830003          	lb	zero,2040(t1)
    19be:	429f 0002 5e00      	0x5e000002429f
    19c4:	0002                	c.slli64	zero
    19c6:	0600                	addi	s0,sp,768
    19c8:	f300                	fsw	fs0,32(a4)
    19ca:	5d01                	li	s10,-32
    19cc:	1c31                	addi	s8,s8,-20
    19ce:	5e9f 0002 bc00      	0xbc0000025e9f
    19d4:	0002                	c.slli64	zero
    19d6:	0300                	addi	s0,sp,384
    19d8:	8300                	0x8300
    19da:	9f7f                	0x9f7f
	...
    19e4:	0140                	addi	s0,sp,132
    19e6:	0000                	unimp
    19e8:	022a                	slli	tp,tp,0xa
    19ea:	0000                	unimp
    19ec:	0001                	nop
    19ee:	2a65                	jal	1ba6 <random_keys+0x136>
    19f0:	0002                	c.slli64	zero
    19f2:	3300                	fld	fs0,32(a4)
    19f4:	0002                	c.slli64	zero
    19f6:	0100                	addi	s0,sp,128
    19f8:	5c00                	lw	s0,56(s0)
    19fa:	00000233          	add	tp,zero,zero
    19fe:	0246                	slli	tp,tp,0x11
    1a00:	0000                	unimp
    1a02:	0001                	nop
    1a04:	4665                	li	a2,25
    1a06:	0002                	c.slli64	zero
    1a08:	4a00                	lw	s0,16(a2)
    1a0a:	0002                	c.slli64	zero
    1a0c:	0900                	addi	s0,sp,144
    1a0e:	8700                	0x8700
    1a10:	f300                	fsw	fs0,32(a4)
    1a12:	5d01                	li	s10,-32
    1a14:	3122                	fld	ft2,40(sp)
    1a16:	9f1c                	0x9f1c
    1a18:	024a                	slli	tp,tp,0x12
    1a1a:	0000                	unimp
    1a1c:	025e                	slli	tp,tp,0x17
    1a1e:	0000                	unimp
    1a20:	0009                	c.nop	2
    1a22:	bc91                	j	1476 <product2+0x46>
    1a24:	067f                	0x67f
    1a26:	225d01f3          	0x225d01f3
    1a2a:	5e9f 0002 aa00      	0xaa0000025e9f
    1a30:	0002                	c.slli64	zero
    1a32:	0100                	addi	s0,sp,128
    1a34:	6500                	flw	fs0,8(a0)
    1a36:	02aa                	slli	t0,t0,0xa
    1a38:	0000                	unimp
    1a3a:	02ad                	addi	t0,t0,11
    1a3c:	0000                	unimp
    1a3e:	0001                	nop
    1a40:	ad5c                	fsd	fa5,152(a0)
    1a42:	0002                	c.slli64	zero
    1a44:	bc00                	fsd	fs0,56(s0)
    1a46:	0002                	c.slli64	zero
    1a48:	0100                	addi	s0,sp,128
    1a4a:	6500                	flw	fs0,8(a0)
	...
    1a54:	018c                	addi	a1,sp,192
    1a56:	0000                	unimp
    1a58:	01b1                	addi	gp,gp,12
    1a5a:	0000                	unimp
    1a5c:	0001                	nop
    1a5e:	b15f 0001 ea00      	0xea000001b15f
    1a64:	0001                	nop
    1a66:	0300                	addi	s0,sp,384
    1a68:	7800                	flw	fs0,48(s0)
    1a6a:	7fbc                	flw	fa5,120(a5)
    1a6c:	01ea                	slli	gp,gp,0x1a
    1a6e:	0000                	unimp
    1a70:	0210                	addi	a2,sp,256
    1a72:	0000                	unimp
    1a74:	0001                	nop
    1a76:	105f 0002 3c00      	0x3c000002105f
    1a7c:	0002                	c.slli64	zero
    1a7e:	0300                	addi	s0,sp,384
    1a80:	7800                	flw	fs0,48(s0)
    1a82:	7fbc                	flw	fa5,120(a5)
    1a84:	023c                	addi	a5,sp,264
    1a86:	0000                	unimp
    1a88:	02bc                	addi	a5,sp,328
    1a8a:	0000                	unimp
    1a8c:	bc910003          	lb	zero,-1079(sp)
    1a90:	007f                	0x7f
    1a92:	0000                	unimp
    1a94:	0000                	unimp
    1a96:	0000                	unimp
    1a98:	8c00                	0x8c00
    1a9a:	0001                	nop
    1a9c:	e200                	fsw	fs0,0(a2)
    1a9e:	0001                	nop
    1aa0:	0100                	addi	s0,sp,128
    1aa2:	6800                	flw	fs0,16(s0)
    1aa4:	01e2                	slli	gp,gp,0x18
    1aa6:	0000                	unimp
    1aa8:	01ea                	slli	gp,gp,0x1a
    1aaa:	0000                	unimp
    1aac:	7f830003          	lb	zero,2040(t1)
    1ab0:	ea9f 0001 1200      	0x12000001ea9f
    1ab6:	0002                	c.slli64	zero
    1ab8:	0100                	addi	s0,sp,128
    1aba:	6800                	flw	fs0,16(s0)
    1abc:	0212                	slli	tp,tp,0x4
    1abe:	0000                	unimp
    1ac0:	0242                	slli	tp,tp,0x10
    1ac2:	0000                	unimp
    1ac4:	7f830003          	lb	zero,2040(t1)
    1ac8:	429f 0002 5e00      	0x5e000002429f
    1ace:	0002                	c.slli64	zero
    1ad0:	0600                	addi	s0,sp,768
    1ad2:	f300                	fsw	fs0,32(a4)
    1ad4:	5d01                	li	s10,-32
    1ad6:	1c31                	addi	s8,s8,-20
    1ad8:	5e9f 0002 bc00      	0xbc0000025e9f
    1ade:	0002                	c.slli64	zero
    1ae0:	0300                	addi	s0,sp,384
    1ae2:	8300                	0x8300
    1ae4:	9f7f                	0x9f7f
	...
    1aee:	010a                	slli	sp,sp,0x2
    1af0:	0000                	unimp
    1af2:	0110                	addi	a2,sp,128
    1af4:	0000                	unimp
    1af6:	0001                	nop
    1af8:	105c                	addi	a5,sp,36
    1afa:	0001                	nop
    1afc:	2800                	fld	fs0,16(s0)
    1afe:	0001                	nop
    1b00:	0400                	addi	s0,sp,512
    1b02:	f300                	fsw	fs0,32(a4)
    1b04:	5c01                	li	s8,-32
    1b06:	009f 0000 0000      	0x9f
    1b0c:	0000                	unimp
    1b0e:	0a00                	addi	s0,sp,272
    1b10:	0001                	nop
    1b12:	1400                	addi	s0,sp,544
    1b14:	0001                	nop
    1b16:	0200                	addi	s0,sp,256
    1b18:	3000                	fld	fs0,32(s0)
    1b1a:	149f 0001 2800      	0x28000001149f
    1b20:	0001                	nop
    1b22:	0100                	addi	s0,sp,128
    1b24:	5f00                	lw	s0,56(a4)
	...
    1b2e:	011a                	slli	sp,sp,0x6
    1b30:	0000                	unimp
    1b32:	0124                	addi	s1,sp,136
    1b34:	0000                	unimp
    1b36:	0001                	nop
    1b38:	0000005b          	0x5b
    1b3c:	0000                	unimp
    1b3e:	0000                	unimp
    1b40:	1a00                	addi	s0,sp,304
    1b42:	0001                	nop
    1b44:	2400                	fld	fs0,8(s0)
    1b46:	0001                	nop
    1b48:	0800                	addi	s0,sp,16
    1b4a:	7f00                	flw	fs0,56(a4)
    1b4c:	3c00                	fld	fs0,56(s0)
    1b4e:	7a1e                	flw	fs4,228(sp)
    1b50:	2200                	fld	fs0,0(a2)
    1b52:	009f 0000 0000      	0x9f
    1b58:	0000                	unimp
    1b5a:	e200                	fsw	fs0,0(a2)
    1b5c:	0000                	unimp
    1b5e:	e800                	fsw	fs0,16(s0)
    1b60:	0000                	unimp
    1b62:	0100                	addi	s0,sp,128
    1b64:	5c00                	lw	s0,56(s0)
    1b66:	00e8                	addi	a0,sp,76
    1b68:	0000                	unimp
    1b6a:	0104                	addi	s1,sp,128
    1b6c:	0000                	unimp
    1b6e:	0004                	0x4
    1b70:	9f5c01f3          	0x9f5c01f3
	...
    1b7c:	00e2                	slli	ra,ra,0x18
    1b7e:	0000                	unimp
    1b80:	00ec                	addi	a1,sp,76
    1b82:	0000                	unimp
    1b84:	0002                	c.slli64	zero
    1b86:	9f30                	0x9f30
    1b88:	00ec                	addi	a1,sp,76
    1b8a:	0000                	unimp
    1b8c:	0104                	addi	s1,sp,128
    1b8e:	0000                	unimp
    1b90:	0001                	nop
    1b92:	005f 0000 0000      	0x5f
    1b98:	0000                	unimp
    1b9a:	f600                	fsw	fs0,40(a2)
    1b9c:	0000                	unimp
    1b9e:	fc00                	fsw	fs0,56(s0)
    1ba0:	0000                	unimp
    1ba2:	0600                	addi	s0,sp,768
    1ba4:	7b00                	flw	fs0,48(a4)
    1ba6:	7e00                	flw	fs0,56(a2)
    1ba8:	2200                	fld	fs0,0(a2)
    1baa:	fc9f 0000 0000      	0xfc9f
    1bb0:	0001                	nop
    1bb2:	0100                	addi	s0,sp,128
    1bb4:	5e00                	lw	s0,56(a2)
	...
    1bbe:	00f6                	slli	ra,ra,0x1d
    1bc0:	0000                	unimp
    1bc2:	00fa                	slli	ra,ra,0x1e
    1bc4:	0000                	unimp
    1bc6:	0006                	c.slli	zero,0x1
    1bc8:	007a                	c.slli	zero,0x1e
    1bca:	007e                	c.slli	zero,0x1f
    1bcc:	9f22                	add	t5,t5,s0
    1bce:	00fa                	slli	ra,ra,0x1e
    1bd0:	0000                	unimp
    1bd2:	0100                	addi	s0,sp,128
    1bd4:	0000                	unimp
    1bd6:	0001                	nop
    1bd8:	005d                	c.nop	23
    1bda:	0000                	unimp
    1bdc:	0000                	unimp
    1bde:	0000                	unimp
    1be0:	ba00                	fsd	fs0,48(a2)
    1be2:	0000                	unimp
    1be4:	c000                	sw	s0,0(s0)
    1be6:	0000                	unimp
    1be8:	0100                	addi	s0,sp,128
    1bea:	5c00                	lw	s0,56(s0)
    1bec:	00c0                	addi	s0,sp,68
    1bee:	0000                	unimp
    1bf0:	00dc                	addi	a5,sp,68
    1bf2:	0000                	unimp
    1bf4:	0004                	0x4
    1bf6:	9f5c01f3          	0x9f5c01f3
	...
    1c02:	00ba                	slli	ra,ra,0xe
    1c04:	0000                	unimp
    1c06:	00c4                	addi	s1,sp,68
    1c08:	0000                	unimp
    1c0a:	0002                	c.slli64	zero
    1c0c:	9f30                	0x9f30
    1c0e:	00c4                	addi	s1,sp,68
    1c10:	0000                	unimp
    1c12:	00dc                	addi	a5,sp,68
    1c14:	0000                	unimp
    1c16:	0001                	nop
    1c18:	005f 0000 0000      	0x5f
    1c1e:	0000                	unimp
    1c20:	ce00                	sw	s0,24(a2)
    1c22:	0000                	unimp
    1c24:	d400                	sw	s0,40(s0)
    1c26:	0000                	unimp
    1c28:	0600                	addi	s0,sp,768
    1c2a:	7b00                	flw	fs0,48(a4)
    1c2c:	7e00                	flw	fs0,56(a2)
    1c2e:	2200                	fld	fs0,0(a2)
    1c30:	d49f 0000 d800      	0xd8000000d49f
    1c36:	0000                	unimp
    1c38:	0100                	addi	s0,sp,128
    1c3a:	5e00                	lw	s0,56(a2)
	...
    1c44:	00ce                	slli	ra,ra,0x13
    1c46:	0000                	unimp
    1c48:	00d2                	slli	ra,ra,0x14
    1c4a:	0000                	unimp
    1c4c:	0006                	c.slli	zero,0x1
    1c4e:	007a                	c.slli	zero,0x1e
    1c50:	007e                	c.slli	zero,0x1f
    1c52:	9f22                	add	t5,t5,s0
    1c54:	00d2                	slli	ra,ra,0x14
    1c56:	0000                	unimp
    1c58:	00d8                	addi	a4,sp,68
    1c5a:	0000                	unimp
    1c5c:	0001                	nop
    1c5e:	005d                	c.nop	23
    1c60:	0000                	unimp
    1c62:	0000                	unimp
    1c64:	0000                	unimp
    1c66:	9200                	0x9200
    1c68:	0000                	unimp
    1c6a:	9800                	0x9800
    1c6c:	0000                	unimp
    1c6e:	0100                	addi	s0,sp,128
    1c70:	5c00                	lw	s0,56(s0)
    1c72:	0098                	addi	a4,sp,64
    1c74:	0000                	unimp
    1c76:	00b4                	addi	a3,sp,72
    1c78:	0000                	unimp
    1c7a:	0004                	0x4
    1c7c:	9f5c01f3          	0x9f5c01f3
	...
    1c88:	0092                	slli	ra,ra,0x4
    1c8a:	0000                	unimp
    1c8c:	009c                	addi	a5,sp,64
    1c8e:	0000                	unimp
    1c90:	0002                	c.slli64	zero
    1c92:	9f30                	0x9f30
    1c94:	009c                	addi	a5,sp,64
    1c96:	0000                	unimp
    1c98:	00b4                	addi	a3,sp,72
    1c9a:	0000                	unimp
    1c9c:	0001                	nop
    1c9e:	005f 0000 0000      	0x5f
    1ca4:	0000                	unimp
    1ca6:	a600                	fsd	fs0,8(a2)
    1ca8:	0000                	unimp
    1caa:	ac00                	fsd	fs0,24(s0)
    1cac:	0000                	unimp
    1cae:	0600                	addi	s0,sp,768
    1cb0:	7b00                	flw	fs0,48(a4)
    1cb2:	7e00                	flw	fs0,56(a2)
    1cb4:	2200                	fld	fs0,0(a2)
    1cb6:	ac9f 0000 b000      	0xb0000000ac9f
    1cbc:	0000                	unimp
    1cbe:	0100                	addi	s0,sp,128
    1cc0:	5e00                	lw	s0,56(a2)
	...
    1cca:	00a6                	slli	ra,ra,0x9
    1ccc:	0000                	unimp
    1cce:	00aa                	slli	ra,ra,0xa
    1cd0:	0000                	unimp
    1cd2:	0006                	c.slli	zero,0x1
    1cd4:	007a                	c.slli	zero,0x1e
    1cd6:	007e                	c.slli	zero,0x1f
    1cd8:	9f22                	add	t5,t5,s0
    1cda:	00aa                	slli	ra,ra,0xa
    1cdc:	0000                	unimp
    1cde:	00b0                	addi	a2,sp,72
    1ce0:	0000                	unimp
    1ce2:	0001                	nop
    1ce4:	005d                	c.nop	23
    1ce6:	0000                	unimp
    1ce8:	0000                	unimp
    1cea:	0000                	unimp
    1cec:	8c00                	0x8c00
    1cee:	0000                	unimp
    1cf0:	9000                	0x9000
    1cf2:	0000                	unimp
    1cf4:	0100                	addi	s0,sp,128
    1cf6:	5a00                	lw	s0,48(a2)
	...
    1d00:	00b4                	addi	a3,sp,72
    1d02:	0000                	unimp
    1d04:	00b8                	addi	a4,sp,72
    1d06:	0000                	unimp
    1d08:	0001                	nop
    1d0a:	005a                	c.slli	zero,0x16
    1d0c:	0000                	unimp
    1d0e:	0000                	unimp
    1d10:	0000                	unimp
    1d12:	dc00                	sw	s0,56(s0)
    1d14:	0000                	unimp
    1d16:	e000                	fsw	fs0,0(s0)
    1d18:	0000                	unimp
    1d1a:	0100                	addi	s0,sp,128
    1d1c:	5a00                	lw	s0,48(a2)
	...
    1d26:	0104                	addi	s1,sp,128
    1d28:	0000                	unimp
    1d2a:	0108                	addi	a0,sp,128
    1d2c:	0000                	unimp
    1d2e:	0001                	nop
    1d30:	005a                	c.slli	zero,0x16
    1d32:	0000                	unimp
    1d34:	0000                	unimp
    1d36:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0ca4                	addi	s1,sp,600
  16:	0000                	unimp
  18:	0f2c                	addi	a1,sp,920
  1a:	0000                	unimp
  1c:	0118                	addi	a4,sp,128
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	2095                	jal	92 <array_add>
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d30                	addi	a2,sp,664
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	0110                	addi	a2,sp,128
   2:	0000                	unimp
   4:	0112                	slli	sp,sp,0x4
   6:	0000                	unimp
   8:	011a                	slli	sp,sp,0x6
   a:	0000                	unimp
   c:	0124                	addi	s1,sp,136
	...
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0d30                	addi	a2,sp,664
  1e:	0000                	unimp
  20:	0f2c                	addi	a1,sp,920
  22:	0000                	unimp
  24:	1044                	addi	s1,sp,36
	...
  2e:	0000                	unimp
  30:	ffff                	0xffff
  32:	ffff                	0xffff
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d30                	addi	a2,sp,664
  3a:	0000                	unimp
  3c:	0da6                	slli	s11,s11,0x9
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	217e                	fld	ft2,472(sp)
       2:	0000                	unimp
       4:	01430003          	lb	zero,20(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x2c>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	6972                	flw	fs2,28(sp)
      28:	33766373          	csrrsi	t1,mhpmevent23,12
      2c:	2d32                	fld	fs10,264(sp)
      2e:	6e75                	lui	t3,0x1d
      30:	776f6e6b          	0x776f6e6b
      34:	2d6e                	fld	fs10,216(sp)
      36:	6c65                	lui	s8,0x19
      38:	2f66                	fld	ft10,88(sp)
      3a:	6e69                	lui	t3,0x1a
      3c:	64756c63          	bltu	a0,t2,694 <polydiv+0x27a>
      40:	2f65                	jal	7f8 <ext_euclid+0xfa>
      42:	616d                	addi	sp,sp,240
      44:	6e696863          	bltu	s2,t1,734 <ext_euclid+0x36>
      48:	0065                	c.nop	25
      4a:	74706f2f          	0x74706f2f
      4e:	7369722f          	0x7369722f
      52:	6c2f7663          	bgeu	t5,sp,71e <ext_euclid+0x20>
      56:	6269                	lui	tp,0x1a
      58:	6363672f          	0x6363672f
      5c:	7369722f          	0x7369722f
      60:	32337663          	bgeu	t1,gp,38c <polymult2+0xd0>
      64:	752d                	lui	a0,0xfffeb
      66:	6b6e                	flw	fs6,216(sp)
      68:	6f6e                	flw	ft10,216(sp)
      6a:	652d6e77          	0x652d6e77
      6e:	666c                	flw	fa1,76(a2)
      70:	322e392f          	0x322e392f
      74:	302e                	fld	ft0,232(sp)
      76:	636e692f          	0x636e692f
      7a:	756c                	flw	fa1,108(a0)
  jal x0, default_exc_handler
      7c:	6564                	flw	fs1,76(a0)
      7e:	2f00                	fld	fs0,24(a4)
  jal x0, reset_handler
      80:	2f74706f          	j	47b76 <_stack_start+0x37b76>
  jal x0, default_exc_handler
      84:	6972                	flw	fs2,28(sp)
      86:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      8a:	6972                	flw	fs2,28(sp)
    asm volatile(
      8c:	33766373          	csrrsi	t1,mhpmevent23,12
}
      90:	2d32                	fld	fs10,264(sp)
    for(i=0;i<(length/3);i++) {
      92:	6e75                	lui	t3,0x1d
      94:	776f6e6b          	0x776f6e6b
      98:	2d6e                	fld	fs10,216(sp)
      9a:	6c65                	lui	s8,0x19
      9c:	2f66                	fld	ft10,88(sp)
      9e:	6e69                	lui	t3,0x1a
}
      a0:	64756c63          	bltu	a0,t2,6f8 <polydiv+0x2de>
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a4:	2f65                	jal	85c <ext_euclid+0x15e>
    asm volatile(
      a6:	00737973          	csrrci	s2,0x7,6
      aa:	74706f2f          	0x74706f2f
      ae:	7369722f          	0x7369722f
    for(i=0;i<(length/3);i++) {
      b2:	722f7663          	bgeu	t5,sp,7de <ext_euclid+0xe0>
    asm volatile(
      b6:	7369                	lui	t1,0xffffa
}
      b8:	32337663          	bgeu	t1,gp,3e4 <polymult2+0x128>
    for(i=0;i<(length/3);i++) {
      bc:	752d                	lui	a0,0xfffeb
      be:	6b6e                	flw	fs6,216(sp)
      c0:	6f6e                	flw	ft10,216(sp)
      c2:	652d6e77          	0x652d6e77
      c6:	666c                	flw	fa1,76(a2)
}
      c8:	636e692f          	0x636e692f
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      cc:	756c                	flw	fa1,108(a0)
    asm volatile(
      ce:	6564                	flw	fs1,76(a0)
      d0:	0000                	unimp
      d2:	544e                	lw	s0,240(sp)
      d4:	5552                	lw	a0,52(sp)
      d6:	345f 5f38 6962      	0x69625f38345f
    asm volatile(
      dc:	4d74                	lw	a3,92(a0)
      de:	632e                	flw	ft6,200(sp)
}
      e0:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      e2:	0000                	unimp
      e4:	645f 6665 7561      	0x75616665645f
      ea:	746c                	flw	fa1,108(s0)
      ec:	745f 7079 7365      	0x73657079745f
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	682e                	flw	fa6,200(sp)
      f4:	0100                	addi	s0,sp,128
    asm volatile(
      f6:	0000                	unimp
      f8:	64647473          	csrrci	s0,0x646,8
      fc:	6665                	lui	a2,0x19
      fe:	682e                	flw	fa6,200(sp)
    for(i=0;i<(length/3);i++) {
     100:	0200                	addi	s0,sp,256
     102:	0000                	unimp
    asm volatile(
     104:	745f 7079 7365      	0x73657079745f
    for(i=0;i<(length/3);i++) {
     10a:	682e                	flw	fa6,200(sp)
     10c:	0300                	addi	s0,sp,384
     10e:	0000                	unimp
    asm volatile(
     110:	6572                	flw	fa0,28(sp)
    for(i=0;i<(length/3);i++) {
     112:	6e65                	lui	t3,0x19
     114:	2e74                	fld	fa3,216(a2)
     116:	0068                	addi	a0,sp,12
}
     118:	6c000003          	lb	zero,1728(zero) # 6c0 <polydiv+0x2a6>
    asm volatile(
     11c:	2e6b636f          	jal	t1,b6402 <_stack_start+0xa6402>
     120:	0068                	addi	a0,sp,12
     122:	5f000003          	lb	zero,1520(zero) # 5f0 <polydiv+0x1d6>
    for(i=0;i<(length/3);i++) {
     126:	69647473          	csrrci	s0,0x696,8
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     12a:	746e                	flw	fs0,248(sp)
     12c:	682e                	flw	fa6,200(sp)
     12e:	0300                	addi	s0,sp,384
     130:	0000                	unimp
     132:	6c647473          	csrrci	s0,0x6c6,8
    int line[size_b][size_a + size_b];
     136:	6269                	lui	tp,0x1a
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     138:	682e                	flw	fa6,200(sp)
     13a:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     13c:	0000                	unimp
     13e:	623c                	flw	fa5,64(a2)
     140:	6975                	lui	s2,0x1d
     142:	746c                	flw	fa1,108(s0)
     144:	692d                	lui	s2,0xb
     146:	3e6e                	fld	ft8,248(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     148:	0000                	unimp
     14a:	0000                	unimp
     14c:	0500                	addi	s0,sp,640
     14e:	02050033          	mul	zero,a0,zero
     152:	008c                	addi	a1,sp,64
     154:	0000                	unimp
     156:	05010f03          	lb	t5,80(sp)
    int line[size_b][size_a + size_b];
     15a:	0305                	addi	t1,t1,1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     15c:	00000907          	0x907
    int line[size_b][size_a + size_b];
     160:	0301                	addi	t1,t1,0
     162:	090a                	slli	s2,s2,0x2
    int pola[size_a];
     164:	0004                	0x4
     166:	0501                	addi	a0,a0,0
     168:	0601                	addi	a2,a2,0
     16a:	00090303          	lb	t1,0(s2) # b000 <_stack_len+0x7000>
     16e:	0100                	addi	s0,sp,128
     170:	2e05                	jal	4a0 <polydiv+0x86>
    int polb[size_b];
     172:	0306                	slli	t1,t1,0x1
     174:	0901                	addi	s2,s2,0
     176:	0002                	c.slli64	zero
    int pola[size_a];
     178:	0501                	addi	a0,a0,0
    int polb[size_b];
     17a:	0301                	addi	t1,t1,0
     17c:	0901                	addi	s2,s2,0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     17e:	0000                	unimp
     180:	0501                	addi	a0,a0,0
     182:	0305                	addi	t1,t1,1
    int line[size_b][size_a + size_b];
     184:	0901                	addi	s2,s2,0
     186:	0000                	unimp
    int pola[size_a];
     188:	0501                	addi	a0,a0,0
     18a:	0616                	slli	a2,a2,0x5
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     18c:	00090003          	lb	zero,0(s2)
            line[i][j] = 0;   
     190:	0100                	addi	s0,sp,128
     192:	0a05                	addi	s4,s4,1
  for(j = 0; j < size_a + size_b -1; ++j) {
     194:	08090003          	lb	zero,128(s2)
	product[j] = 0;
     198:	0100                	addi	s0,sp,128
     19a:	0d05                	addi	s10,s10,1
     19c:	0200                	addi	s0,sp,256
  for(j = 0; j < size_a + size_b -1; ++j) {
     19e:	0104                	addi	s1,sp,128
     1a0:	0306                	slli	t1,t1,0x1
    array_equ(pola,a,size_a);
     1a2:	0900                	addi	s0,sp,144
     1a4:	0002                	c.slli64	zero
     1a6:	0501                	addi	a0,a0,0
     1a8:	0005                	c.nop	1
     1aa:	0402                	c.slli64	s0
     1ac:	0601                	addi	a2,a2,0
     1ae:	00090003          	lb	zero,0(s2)
    array_mod(pola,mod,size_a);
     1b2:	0100                	addi	s0,sp,128
     1b4:	0105                	addi	sp,sp,1
     1b6:	04090303          	lb	t1,64(s2)
    array_equ(polb,b,size_b);
     1ba:	0100                	addi	s0,sp,128
     1bc:	0705                	addi	a4,a4,1
     1be:	0200                	addi	s0,sp,256
     1c0:	0304                	addi	s1,sp,384
     1c2:	0306                	slli	t1,t1,0x1
     1c4:	097e                	slli	s2,s2,0x1f
    array_mod(polb,mod,size_b);
     1c6:	0002                	c.slli64	zero
     1c8:	0501                	addi	a0,a0,0
     1ca:	0005                	c.nop	1
     1cc:	0402                	c.slli64	s0
    if(star_mult == 1){
     1ce:	096f0303          	lb	t1,150(t5)
     1d2:	0004                	0x4
     1d4:	0001                	nop
     1d6:	0402                	c.slli64	s0
     1d8:	090a0303          	lb	t1,144(s4)
     1dc:	000a                	c.slli	zero,0x2
     1de:	0501                	addi	a0,a0,0
     1e0:	001a                	c.slli	zero,0x6
        for (j = size_b -1; j >= 0; j = j-1){
     1e2:	0402                	c.slli64	s0
     1e4:	09060303          	lb	t1,144(a2) # 19090 <_stack_start+0x9090>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e8:	0000                	unimp
            line[i][j] = 0;   
     1ea:	0501                	addi	a0,a0,0
     1ec:	0402001b          	0x402001b
     1f0:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
     1f4:	0009                	c.nop	2
     1f6:	0100                	addi	s0,sp,128
     1f8:	3405                	jal	fffffc18 <_stack_start+0xfffefc18>
         for (i = 0; i < size_b; ++i){
     1fa:	0306                	slli	t1,t1,0x1
     1fc:	0905                	addi	s2,s2,1
	product[j] = 0;
     1fe:	0004                	0x4
     200:	0501                	addi	a0,a0,0
     202:	0305                	addi	t1,t1,1
     204:	0906                	slli	s2,s2,0x1
     206:	0000                	unimp
  for(j = 0; j < size_a + size_b -1; ++j) {
     208:	0301                	addi	t1,t1,0
     20a:	0004090b          	0x4090b
         for (i = 0; i < size_b; ++i){
     20e:	0501                	addi	a0,a0,0
     210:	0601                	addi	a2,a2,0
        for (j = size_b -1; j >= 0; j = j-1){
     212:	00090203          	lb	tp,0(s2)
     216:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     218:	2d05                	jal	848 <ext_euclid+0x14a>
        array_add(product, line[i], (size_a + size_b - 1));
     21a:	0306                	slli	t1,t1,0x1
     21c:	0901                	addi	s2,s2,0
     21e:	0002                	c.slli64	zero
     220:	0501                	addi	a0,a0,0
        array_mod(line[i],mod,(size_a+size_b-1));
     222:	0301                	addi	t1,t1,0
     224:	0901                	addi	s2,s2,0
    for (i = 0; i < size_b; ++i){
     226:	0000                	unimp
     228:	0501                	addi	a0,a0,0
    array_mod(product,mod,(size_a+size_b-1));
     22a:	0305                	addi	t1,t1,1
     22c:	0901                	addi	s2,s2,0
     22e:	0000                	unimp
     230:	0501                	addi	a0,a0,0
     232:	0616                	slli	a2,a2,0x5
}
     234:	00090003          	lb	zero,0(s2)
     238:	0100                	addi	s0,sp,128
     23a:	0a05                	addi	s4,s4,1
     23c:	08090003          	lb	zero,128(s2)
     240:	0100                	addi	s0,sp,128
     242:	0d05                	addi	s10,s10,1
     244:	0200                	addi	s0,sp,256
     246:	0104                	addi	s1,sp,128
     248:	0306                	slli	t1,t1,0x1
     24a:	0900                	addi	s0,sp,144
     24c:	0002                	c.slli64	zero
     24e:	0501                	addi	a0,a0,0
     250:	0005                	c.nop	1
     252:	0402                	c.slli64	s0
     254:	0601                	addi	a2,a2,0
     256:	00090003          	lb	zero,0(s2)
     25a:	0100                	addi	s0,sp,128
     25c:	0105                	addi	sp,sp,1
                line[size_b-1-j][k] = pola[k]*polb[j];
     25e:	04090303          	lb	t1,64(s2)
     262:	0100                	addi	s0,sp,128
     264:	0905                	addi	s2,s2,1
     266:	0200                	addi	s0,sp,256
     268:	0304                	addi	s1,sp,384
     26a:	0306                	slli	t1,t1,0x1
     26c:	097e                	slli	s2,s2,0x1f
            for (k = size_a-1; k >= 0; k = k-1 ){
     26e:	0002                	c.slli64	zero
                line[size_b-1-j][k] = pola[k]*polb[j];
     270:	0501                	addi	a0,a0,0
     272:	0005                	c.nop	1
     274:	0402                	c.slli64	s0
            for (k = size_a-1; k >= 0; k = k-1 ){
     276:	096f0303          	lb	t1,150(t5)
        for (j = size_b -1; j >= 0; j = j-1){
     27a:	0004                	0x4
     27c:	0001                	nop
     27e:	0402                	c.slli64	s0
     280:	090b0303          	lb	t1,144(s6) # fffe1090 <_stack_start+0xfffd1090>
            for (k = size_a-1; k >= 0; k = k-1 ){
     284:	000a                	c.slli	zero,0x2
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     286:	0501                	addi	a0,a0,0
     288:	001a                	c.slli	zero,0x6
     28a:	0402                	c.slli64	s0
     28c:	09050303          	lb	t1,144(a0) # fffeb090 <_stack_start+0xfffdb090>
     290:	0000                	unimp
     292:	0501                	addi	a0,a0,0
     294:	0402001b          	0x402001b
     298:	00030603          	lb	a2,0(t1)
     29c:	0009                	c.nop	2
            for (k = size_a-1; k >= 0; k = k-1 ){
     29e:	0100                	addi	s0,sp,128
     2a0:	3305                	jal	ffffffc0 <_stack_start+0xfffeffc0>
        for (j = size_b -1; j >= 0; j = j-1){
     2a2:	0306                	slli	t1,t1,0x1
     2a4:	0905                	addi	s2,s2,1
     2a6:	0004                	0x4
     2a8:	0501                	addi	a0,a0,0
        array_mod(line[i],mod,(size_a+size_b-1));
     2aa:	0305                	addi	t1,t1,1
     2ac:	0906                	slli	s2,s2,0x1
        array_add(product, line[i], (size_a + size_b - 1));
     2ae:	0000                	unimp
     2b0:	0301                	addi	t1,t1,0
     2b2:	0004090b          	0x4090b
    for (i = 0; i < size_b; ++i){
     2b6:	0501                	addi	a0,a0,0
     2b8:	0601                	addi	a2,a2,0
     2ba:	00090303          	lb	t1,0(s2)
    int line[size_b][size_a + size_b];
     2be:	0100                	addi	s0,sp,128
     2c0:	2c05                	jal	4f0 <polydiv+0xd6>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c2:	0306                	slli	t1,t1,0x1
     2c4:	0901                	addi	s2,s2,0
     2c6:	0002                	c.slli64	zero
     2c8:	0501                	addi	a0,a0,0
     2ca:	0301                	addi	t1,t1,0
    int line[size_b][size_a + size_b];
     2cc:	0901                	addi	s2,s2,0
     2ce:	0000                	unimp
     2d0:	0501                	addi	a0,a0,0
     2d2:	0305                	addi	t1,t1,1
     2d4:	0901                	addi	s2,s2,0
     2d6:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2d8:	0501                	addi	a0,a0,0
     2da:	0616                	slli	a2,a2,0x5
     2dc:	00090003          	lb	zero,0(s2)
     2e0:	0100                	addi	s0,sp,128
     2e2:	0a05                	addi	s4,s4,1
     2e4:	08090003          	lb	zero,128(s2)
     2e8:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     2ea:	0d05                	addi	s10,s10,1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ec:	0200                	addi	s0,sp,256
     2ee:	0104                	addi	s1,sp,128
    int line[size_b][size_a + size_b];
     2f0:	0306                	slli	t1,t1,0x1
     2f2:	0900                	addi	s0,sp,144
     2f4:	0002                	c.slli64	zero
    int pola[size_a];
     2f6:	0501                	addi	a0,a0,0
     2f8:	0005                	c.nop	1
     2fa:	0402                	c.slli64	s0
     2fc:	0601                	addi	a2,a2,0
    int line[size_b][size_a + size_b];
     2fe:	00090003          	lb	zero,0(s2)
    int pola[size_a];
     302:	0100                	addi	s0,sp,128
    int polb[size_b];
     304:	0105                	addi	sp,sp,1
     306:	04090303          	lb	t1,64(s2)
    int pola[size_a];
     30a:	0100                	addi	s0,sp,128
    int polb[size_b];
     30c:	0905                	addi	s2,s2,1
     30e:	0200                	addi	s0,sp,256
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     310:	0304                	addi	s1,sp,384
     312:	0306                	slli	t1,t1,0x1
    int line[size_b][size_a + size_b];
     314:	097e                	slli	s2,s2,0x1f
     316:	0002                	c.slli64	zero
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     318:	0501                	addi	a0,a0,0
    int pola[size_a];
     31a:	0005                	c.nop	1
     31c:	0402                	c.slli64	s0
    int polb[size_b];
     31e:	096e0303          	lb	t1,150(t3) # 19096 <_stack_start+0x9096>
            line[i][j] = 0;
     322:	0004                	0x4
    for(j = 0; j < size_a + size_b -1; ++j){
     324:	0001                	nop
 	product2[j] = 0;
     326:	0402                	c.slli64	s0
     328:	090b0303          	lb	t1,144(s6)
     32c:	000a                	c.slli	zero,0x2
    for(j = 0; j < size_a + size_b -1; ++j){
     32e:	0501                	addi	a0,a0,0
     330:	001a                	c.slli	zero,0x6
    array_equ(pola,a,size_a);
     332:	0402                	c.slli64	s0
     334:	09060303          	lb	t1,144(a2)
     338:	0000                	unimp
    array_equ(polb,b,size_b);
     33a:	0501                	addi	a0,a0,0
     33c:	0402001b          	0x402001b
     340:	00030603          	lb	a2,0(t1)
    if(star_mult == 1){
     344:	0009                	c.nop	2
     346:	0100                	addi	s0,sp,128
     348:	3405                	jal	fffffd68 <_stack_start+0xfffefd68>
     34a:	0306                	slli	t1,t1,0x1
     34c:	0905                	addi	s2,s2,1
     34e:	0004                	0x4
     350:	0501                	addi	a0,a0,0
     352:	0305                	addi	t1,t1,1
        for (j = size_b -1; j >= 0; j = j-1){
     354:	0902                	c.slli64	s2
     356:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     358:	0301                	addi	t1,t1,0
     35a:	0909                	addi	s2,s2,2
            line[i][j] = 0;
     35c:	0004                	0x4
     35e:	0501                	addi	a0,a0,0
        for (i = 0; i < size_b; ++i){
     360:	0601                	addi	a2,a2,0
            line[i][j] = 0;
     362:	00090303          	lb	t1,0(s2)
     366:	0100                	addi	s0,sp,128
     368:	2c05                	jal	598 <polydiv+0x17e>
     36a:	0306                	slli	t1,t1,0x1
        for (i = 0; i < size_b; ++i){
     36c:	0901                	addi	s2,s2,0
     36e:	0002                	c.slli64	zero
 	product2[j] = 0;
     370:	0501                	addi	a0,a0,0
     372:	0301                	addi	t1,t1,0
     374:	0905                	addi	s2,s2,1
     376:	0000                	unimp
     378:	0501                	addi	a0,a0,0
    for(j = 0; j < size_a + size_b -1; ++j){
     37a:	0305                	addi	t1,t1,1
     37c:	0902                	c.slli64	s2
        for (i = 0; i < size_b; ++i){
     37e:	0000                	unimp
     380:	0501                	addi	a0,a0,0
     382:	0616                	slli	a2,a2,0x5
        for (j = size_b -1; j >= 0; j = j-1){
     384:	00090003          	lb	zero,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     388:	0100                	addi	s0,sp,128
        array_add(product2,line[i],size_a+size_b-1);
     38a:	0505                	addi	a0,a0,1
     38c:	06096c03          	0x6096c03
     390:	0100                	addi	s0,sp,128
    for(i=0;i<size_b;++i){
     392:	0a05                	addi	s4,s4,1
     394:	02091403          	lh	s0,32(s2)
}
     398:	0100                	addi	s0,sp,128
     39a:	0d05                	addi	s10,s10,1
     39c:	0200                	addi	s0,sp,256
     39e:	0104                	addi	s1,sp,128
     3a0:	0306                	slli	t1,t1,0x1
     3a2:	0900                	addi	s0,sp,144
     3a4:	0002                	c.slli64	zero
     3a6:	0501                	addi	a0,a0,0
     3a8:	0005                	c.nop	1
     3aa:	0402                	c.slli64	s0
     3ac:	0601                	addi	a2,a2,0
     3ae:	00090003          	lb	zero,0(s2)
     3b2:	0100                	addi	s0,sp,128
     3b4:	0105                	addi	sp,sp,1
     3b6:	04090403          	lb	s0,64(s2)
     3ba:	0100                	addi	s0,sp,128
     3bc:	0905                	addi	s2,s2,1
     3be:	0200                	addi	s0,sp,256
                line[size_b-1-j][k] = pola[k]*polb[j];
     3c0:	0304                	addi	s1,sp,384
     3c2:	0306                	slli	t1,t1,0x1
     3c4:	097d                	addi	s2,s2,31
     3c6:	0002                	c.slli64	zero
     3c8:	0501                	addi	a0,a0,0
     3ca:	0005                	c.nop	1
     3cc:	0402                	c.slli64	s0
     3ce:	096b0303          	lb	t1,150(s6)
     3d2:	0000                	unimp
     3d4:	0001                	nop
     3d6:	0402                	c.slli64	s0
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	09090303          	lb	t1,144(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     3dc:	000a                	c.slli	zero,0x2
     3de:	0501                	addi	a0,a0,0
     3e0:	001a                	c.slli	zero,0x6
     3e2:	0402                	c.slli64	s0
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e4:	090b0303          	lb	t1,144(s6)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3e8:	0000                	unimp
     3ea:	0501                	addi	a0,a0,0
     3ec:	0402001b          	0x402001b
     3f0:	00030603          	lb	a2,0(t1)
     3f4:	0009                	c.nop	2
     3f6:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     3f8:	4e05                	li	t3,1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3fa:	0306                	slli	t1,t1,0x1
     3fc:	090a                	slli	s2,s2,0x2
     3fe:	0004                	0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     400:	0501                	addi	a0,a0,0
     402:	0305                	addi	t1,t1,1
        for (j = size_b -1; j >= 0; j = j-1){
     404:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
     408:	0501                	addi	a0,a0,0
     40a:	064e                	slli	a2,a2,0x13
        array_add(product2,line[i],size_a+size_b-1);
     40c:	00097d03          	0x97d03
     410:	0100                	addi	s0,sp,128
     412:	1d05                	addi	s10,s10,-31
    for(i=0;i<size_b;++i){
     414:	0c090303          	lb	t1,192(s2)
     418:	0100                	addi	s0,sp,128
    int v[size_N];
     41a:	4e05                	li	t3,1
     41c:	04097d03          	0x4097d03
     420:	0100                	addi	s0,sp,128
     422:	0905                	addi	s2,s2,1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     424:	04090303          	lb	t1,64(s2)
     428:	0100                	addi	s0,sp,128
     42a:	4e05                	li	t3,1
     42c:	0c097d03          	0xc097d03
     430:	0100                	addi	s0,sp,128
     432:	0905                	addi	s2,s2,1
     434:	12090303          	lb	t1,288(s2)
     438:	0100                	addi	s0,sp,128
     43a:	4e05                	li	t3,1
     43c:	02097d03          	0x2097d03
    int v[size_N];
     440:	0100                	addi	s0,sp,128
     442:	0905                	addi	s2,s2,1
     444:	02090303          	lb	t1,32(s2)
    int q[size_N];
     448:	0100                	addi	s0,sp,128
     44a:	4e05                	li	t3,1
    int num_temp[size_N];
     44c:	02097d03          	0x2097d03
    int denum_temp[size_D];
     450:	0100                	addi	s0,sp,128
     452:	0905                	addi	s2,s2,1
     454:	00090303          	lb	t1,0(s2)
    int num_temp[size_N];
     458:	0100                	addi	s0,sp,128
    int denum_temp[size_D];
     45a:	04090303          	lb	t1,64(s2)
 if(size_N == 106) {
     45e:	0100                	addi	s0,sp,128
     460:	08097d03          	0x8097d03
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     464:	0100                	addi	s0,sp,128
     466:	02090303          	lb	t1,32(s2)
     46a:	0100                	addi	s0,sp,128
    int v[size_N];
     46c:	04090103          	lb	sp,64(s2)
    int denum_temp[size_D];
     470:	0100                	addi	s0,sp,128
     472:	06097f03          	0x6097f03
 if(size_N == 106) {
     476:	0100                	addi	s0,sp,128
     478:	02090103          	lb	sp,32(s2)
     array_equ(num_temp, num, size_N - 1);   // 105 elemani ücer ücer yap...
     47c:	0100                	addi	s0,sp,128
     47e:	4e05                	li	t3,1
     480:	04097903          	0x4097903
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     484:	0100                	addi	s0,sp,128
     486:	0905                	addi	s2,s2,1
        array_mod(num_temp, mod, size_N - 1);
     488:	06090303          	lb	t1,96(s2)
     48c:	0100                	addi	s0,sp,128
     48e:	0505                	addi	a0,a0,1
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     490:	0306                	slli	t1,t1,0x1
     492:	0901                	addi	s2,s2,0
        array_mod(num_temp, mod, size_N - 1);
     494:	0004                	0x4
        while(num_temp[size_N - 1] < 0){
     496:	0301                	addi	t1,t1,0
     498:	0901                	addi	s2,s2,0
     49a:	0000                	unimp
     49c:	0301                	addi	t1,t1,0
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     49e:	0901                	addi	s2,s2,0
     4a0:	0000                	unimp
     4a2:	0501                	addi	a0,a0,0
     4a4:	0609                	addi	a2,a2,2
     4a6:	00090003          	lb	zero,0(s2)
     array_equ(num_temp, num, size_N );
     4aa:	0100                	addi	s0,sp,128
     4ac:	0505                	addi	a0,a0,1
     4ae:	0306                	slli	t1,t1,0x1
        array_mod(num_temp, mod, size_N);
     4b0:	0901                	addi	s2,s2,0
     4b2:	0004                	0x4
     4b4:	0501                	addi	a0,a0,0
     4b6:	064e                	slli	a2,a2,0x13
    array_equ(denum_temp,denum,size_D);
     4b8:	00097903          	0x97903
     4bc:	0100                	addi	s0,sp,128
     4be:	0905                	addi	s2,s2,1
    array_mod(denum_temp,mod,size_D);
     4c0:	02090703          	lb	a4,32(s2)
     4c4:	0100                	addi	s0,sp,128
     4c6:	0305                	addi	t1,t1,1
    for (i = 0; i < size_N; ++i){
     4c8:	0306                	slli	t1,t1,0x1
     4ca:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
    for (i = size_D-1; i >= 0; i = i-1){
     4ce:	0501                	addi	a0,a0,0
     4d0:	0614                	addi	a3,sp,768
     4d2:	00090203          	lb	tp,0(s2)
     4d6:	0100                	addi	s0,sp,128
     4d8:	0905                	addi	s2,s2,1
    for (i = 0; i < size_N; ++i){
     4da:	04097e03          	0x4097e03
        if ( (b_N*u)%mod == 1 )
     4de:	0100                	addi	s0,sp,128
    for (u = 0; u < mod; ++u){
     4e0:	0d05                	addi	s10,s10,1
     4e2:	02090403          	lb	s0,32(s2)
     4e6:	0100                	addi	s0,sp,128
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     4e8:	0e05                	addi	t3,t3,1
     4ea:	0200                	addi	s0,sp,256
     4ec:	0104                	addi	s1,sp,128
     4ee:	0306                	slli	t1,t1,0x1
        q[i] = 0;
     4f0:	097c                	addi	a5,sp,156
     4f2:	0008                	0x8
     4f4:	0501                	addi	a0,a0,0
     4f6:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     4fa:	0601                	addi	a2,a2,0
     4fc:	00090003          	lb	zero,0(s2)
        v[i] = 0;
     500:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     502:	0505                	addi	a0,a0,1
     504:	04091103          	lh	sp,64(s2)
    for (i = size_D-1; i >= 0; i = i-1){
     508:	0100                	addi	s0,sp,128
     50a:	0306                	slli	t1,t1,0x1
        if ( (b_N*u)%mod == 1 )
     50c:	0900                	addi	s0,sp,144
     50e:	000a                	c.slli	zero,0x2
     510:	0301                	addi	t1,t1,0
     512:	0901                	addi	s2,s2,0
     514:	0006                	c.slli	zero,0x1
    for (u = 0; u < mod; ++u){
     516:	0301                	addi	t1,t1,0
     518:	0909                	addi	s2,s2,2
        if( num_temp[i] != 0 )
     51a:	0008                	0x8
    for (i = size_N-1; i >= 0; i = i-1){
     51c:	0301                	addi	t1,t1,0
     51e:	0901                	addi	s2,s2,0
     520:	000c                	0xc
     522:	0301                	addi	t1,t1,0
     524:	0904                	addi	s1,sp,144
     526:	0008                	0x8
     528:	0501                	addi	a0,a0,0
    while (d >= d2){
     52a:	00030607          	0x30607
 if(size_N == 106) {
     52e:	0009                	c.nop	2
     530:	0100                	addi	s0,sp,128
     532:	1d05                	addi	s10,s10,-31
     534:	0200                	addi	s0,sp,256
     array_equ(result, q, size_N - 1);   // 105 elemani ücer ücer yap...
     536:	0104                	addi	s1,sp,128
     538:	0306                	slli	t1,t1,0x1
     53a:	0908                	addi	a0,sp,144
     53c:	0014                	0x14
     53e:	0501                	addi	a0,a0,0
     540:	0009                	c.nop	2
     542:	0402                	c.slli64	s0
     544:	0601                	addi	a2,a2,0
     result[size_N - 1] = q[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     546:	00090003          	lb	zero,0(s2)
     54a:	0100                	addi	s0,sp,128
     54c:	1405                	addi	s0,s0,-31
     54e:	04090103          	lb	sp,64(s2)
     552:	0100                	addi	s0,sp,128
     554:	0d05                	addi	s10,s10,1
     556:	0200                	addi	s0,sp,256
    for(i = size_N; i < (2*size_N); ++i){
     558:	0304                	addi	s1,sp,384
     55a:	0306                	slli	t1,t1,0x1
     55c:	0959                	addi	s2,s2,22
     55e:	0004                	0x4
        result[i] = num_temp[i-size_N];
     560:	0501                	addi	a0,a0,0
     562:	0018                	0x18
     564:	0402                	c.slli64	s0
     566:	00030603          	lb	a2,0(t1)
    for(i = size_N; i < (2*size_N); ++i){
     56a:	0009                	c.nop	2
}
     56c:	0100                	addi	s0,sp,128
     56e:	2205                	jal	68e <polydiv+0x274>
     570:	0200                	addi	s0,sp,256
     572:	0304                	addi	s1,sp,384
     574:	04097f03          	0x4097f03
     578:	0100                	addi	s0,sp,128
     57a:	1805                	addi	a6,a6,-31
     57c:	0200                	addi	s0,sp,256
     57e:	0304                	addi	s1,sp,384
     580:	02090103          	lb	sp,32(s2)
     584:	0100                	addi	s0,sp,128
     586:	2205                	jal	6a6 <polydiv+0x28c>
     588:	0200                	addi	s0,sp,256
     58a:	0304                	addi	s1,sp,384
     58c:	0306                	slli	t1,t1,0x1
     58e:	097f                	0x97f
     590:	000a                	c.slli	zero,0x2
     592:	0501                	addi	a0,a0,0
     594:	0016                	c.slli	zero,0x5
        v[(d-d2)] = u*r_d;
     596:	0402                	c.slli64	s0
     598:	0301                	addi	t1,t1,0
     59a:	0900                	addi	s0,sp,144
     59c:	0000                	unimp
     59e:	0501                	addi	a0,a0,0
     5a0:	000a                	c.slli	zero,0x2
     5a2:	0402                	c.slli64	s0
        if(size_N == 106) {
     5a4:	0601                	addi	a2,a2,0
     5a6:	00090003          	lb	zero,0(s2)
     5aa:	0100                	addi	s0,sp,128
            array_mod(v, mod, size_N - 1);
     5ac:	0205                	addi	tp,tp,1
     5ae:	0200                	addi	s0,sp,256
     5b0:	0204                	addi	s1,sp,256
     5b2:	0306                	slli	t1,t1,0x1
     5b4:	00040903          	lb	s2,0(s0)
            while(v[size_N - 1] < 0){
     5b8:	0501                	addi	a0,a0,0
     5ba:	000d                	c.nop	3
     5bc:	0402                	c.slli64	s0
            v[size_N - 1] = v[size_N - 1] % mod;
     5be:	0602                	c.slli64	a2
     5c0:	00090003          	lb	zero,0(s2)
     5c4:	0100                	addi	s0,sp,128
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5c6:	2605                	jal	8e6 <ext_euclid+0x1e8>
     5c8:	0200                	addi	s0,sp,256
     5ca:	0204                	addi	s1,sp,256
     5cc:	0306                	slli	t1,t1,0x1
     5ce:	097c                	addi	a5,sp,156
     5d0:	000a                	c.slli	zero,0x2
     5d2:	0501                	addi	a0,a0,0
        if(size_N == 106) {
     5d4:	0611                	addi	a2,a2,4
     5d6:	04090103          	lb	sp,64(s2)
     5da:	0100                	addi	s0,sp,128
     5dc:	1d05                	addi	s10,s10,-31
            array_mod(product, mod, size_N - 1);
     5de:	0200                	addi	s0,sp,256
     5e0:	0104                	addi	s1,sp,128
     5e2:	0306                	slli	t1,t1,0x1
     5e4:	0920                	addi	s0,sp,152
            while(product[size_N - 1] < 0){
     5e6:	0006                	c.slli	zero,0x1
     5e8:	0501                	addi	a0,a0,0
     5ea:	0009                	c.nop	2
     5ec:	0402                	c.slli64	s0
            product[size_N - 1] = product[size_N - 1] % mod;
     5ee:	0601                	addi	a2,a2,0
     5f0:	00090003          	lb	zero,0(s2)
            array_sub(num_temp, product, size_N - 1);   // 105 elemani ücer ücer yap...
     5f4:	0100                	addi	s0,sp,128
     5f6:	1405                	addi	s0,s0,-31
     5f8:	06090803          	lb	a6,96(s2)
            product[size_N - 1] = product[size_N - 1] % mod;
     5fc:	0100                	addi	s0,sp,128
            array_sub(num_temp, product, size_N - 1);   // 105 elemani ücer ücer yap...
     5fe:	0905                	addi	s2,s2,1
            num_temp[size_N - 1] = num_temp[size_N - 1] - product[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     600:	02091a03          	lh	s4,32(s2)
     604:	0100                	addi	s0,sp,128
     606:	1105                	addi	sp,sp,-31
            array_mod(num_temp, mod, size_N - 1);
     608:	0200                	addi	s0,sp,256
     60a:	0104                	addi	s1,sp,128
     60c:	0306                	slli	t1,t1,0x1
            num_temp[size_N - 1] = num_temp[size_N - 1] - product[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     60e:	097e                	slli	s2,s2,0x1f
     610:	0008                	0x8
            array_mod(num_temp, mod, size_N - 1);
     612:	0501                	addi	a0,a0,0
            num_temp[size_N - 1] = num_temp[size_N - 1] - product[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     614:	0009                	c.nop	2
     616:	0402                	c.slli64	s0
            array_mod(num_temp, mod, size_N - 1);
     618:	0601                	addi	a2,a2,0
            while(num_temp[size_N - 1] < 0){
     61a:	00090103          	lb	sp,0(s2)
     61e:	0100                	addi	s0,sp,128
     620:	0505                	addi	a0,a0,1
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     622:	0200                	addi	s0,sp,256
     624:	0104                	addi	s1,sp,128
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     626:	04097f03          	0x4097f03
     62a:	0100                	addi	s0,sp,128
     62c:	0306                	slli	t1,t1,0x1
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
     62e:	0004090b          	0x4090b
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
     632:	0301                	addi	t1,t1,0
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     634:	0902                	c.slli64	s2
     636:	000a                	c.slli	zero,0x2
     638:	0301                	addi	t1,t1,0
     63a:	0902                	c.slli64	s2
            array_mod(q, mod, size_N - 1);
     63c:	0000                	unimp
     63e:	0501                	addi	a0,a0,0
     640:	0601                	addi	a2,a2,0
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
     642:	00090103          	lb	sp,0(s2)
     646:	0100                	addi	s0,sp,128
     648:	1105                	addi	sp,sp,-31
            array_mod(q, mod, size_N - 1);
     64a:	0200                	addi	s0,sp,256
            while(q[size_N - 1] < 0){
     64c:	0304                	addi	s1,sp,384
     64e:	0306                	slli	t1,t1,0x1
     650:	0952                	slli	s2,s2,0x14
     652:	002a                	c.slli	zero,0xa
            q[size_N - 1] = q[size_N - 1] % mod;
     654:	0501                	addi	a0,a0,0
     656:	0025                	c.nop	9
     658:	0402                	c.slli64	s0
     65a:	00030603          	lb	a2,0(t1)
                v[size_N - 1] = v[size_N - 1]+mod;
     65e:	0409                	addi	s0,s0,2
     660:	0100                	addi	s0,sp,128
     662:	2b05                	jal	b92 <generate_keys+0x2a4>
     664:	0200                	addi	s0,sp,256
            array_mod(v, mod, size_N);
     666:	0304                	addi	s1,sp,384
     668:	04090003          	lb	zero,64(s2)
     66c:	0100                	addi	s0,sp,128
     66e:	2e05                	jal	99e <generate_keys+0xb0>
                product[size_N - 1] = product[size_N - 1]+mod;
     670:	0200                	addi	s0,sp,256
     672:	0304                	addi	s1,sp,384
     674:	02090003          	lb	zero,32(s2)
            array_mod(product, mod, size_N);
     678:	0100                	addi	s0,sp,128
     67a:	2a05                	jal	7aa <ext_euclid+0xac>
     67c:	0200                	addi	s0,sp,256
            array_sub(num_temp, product, size_N );
     67e:	0304                	addi	s1,sp,384
     680:	06097f03          	0x6097f03
     684:	0100                	addi	s0,sp,128
            array_mod(num_temp, mod, size_N);
     686:	2e05                	jal	9b6 <generate_keys+0xc8>
     688:	0200                	addi	s0,sp,256
     68a:	0304                	addi	s1,sp,384
     68c:	02090103          	lb	sp,32(s2)
            array_add(q, v, size_N );
     690:	0100                	addi	s0,sp,128
     692:	2505                	jal	cb2 <ntru_deceypt+0x4a>
     694:	0200                	addi	s0,sp,256
            array_mod(q, mod, size_N);
     696:	0304                	addi	s1,sp,384
     698:	04090003          	lb	zero,64(s2)
     69c:	0100                	addi	s0,sp,128
    int v[size_N];
     69e:	2805                	jal	6ce <polydiv+0x2b4>
        for (i = size_N-1; i >= 0; i = i-1){
     6a0:	0200                	addi	s0,sp,256
     6a2:	0304                	addi	s1,sp,384
     6a4:	0306                	slli	t1,t1,0x1
     6a6:	097f                	0x97f
     6a8:	0002                	c.slli64	zero
     6aa:	0501                	addi	a0,a0,0
     6ac:	0020                	addi	s0,sp,8
     6ae:	0402                	c.slli64	s0
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
     6b0:	0301                	addi	t1,t1,0
     6b2:	0900                	addi	s0,sp,144
     6b4:	0000                	unimp
     6b6:	0501                	addi	a0,a0,0
                q[size_N - 1] = q[size_N - 1]+mod;
     6b8:	000d                	c.nop	3
     6ba:	0402                	c.slli64	s0
     6bc:	0601                	addi	a2,a2,0
     6be:	00090003          	lb	zero,0(s2)
        for (i = size_N-1; i >= 0; i = i-1){
     6c2:	0100                	addi	s0,sp,128
     6c4:	2505                	jal	ce4 <ntru_deceypt+0x7c>
            v[i] = 0;
     6c6:	0200                	addi	s0,sp,256
     6c8:	0204                	addi	s1,sp,256
     6ca:	0306                	slli	t1,t1,0x1
     6cc:	097f                	0x97f
     6ce:	0004                	0x4
        for (i = 0; i < size_N; ++i){
     6d0:	0501                	addi	a0,a0,0
     6d2:	04020027          	0x4020027
     6d6:	0602                	c.slli64	a2
     array_equ(result, q, size_N );
     6d8:	00090003          	lb	zero,0(s2)
     6dc:	0100                	addi	s0,sp,128
     6de:	1405                	addi	s0,s0,-31
     6e0:	08090103          	lb	sp,128(s2)
     6e4:	0100                	addi	s0,sp,128
     6e6:	1105                	addi	sp,sp,-31
     6e8:	0200                	addi	s0,sp,256
        result[i] = num_temp[i-size_N];
     6ea:	0304                	addi	s1,sp,384
     6ec:	0306                	slli	t1,t1,0x1
     6ee:	0908                	addi	a0,sp,144
     6f0:	0004                	0x4
     6f2:	0501                	addi	a0,a0,0
     6f4:	0029                	c.nop	10
     6f6:	0402                	c.slli64	s0
    for(i = size_N; i < (2*size_N); ++i){
     6f8:	00030603          	lb	a2,0(t1)
     6fc:	0409                	addi	s0,s0,2
    int ri_2[size]; // MX-ring poly, a
     6fe:	0100                	addi	s0,sp,128
     700:	2f05                	jal	e30 <memcpy+0x8a>
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     702:	0200                	addi	s0,sp,256
    int ri_2[size]; // MX-ring poly, a
     704:	0304                	addi	s1,sp,384
     706:	04090003          	lb	zero,64(s2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     70a:	0100                	addi	s0,sp,128
     70c:	3205                	jal	2c <__DYNAMIC+0x2c>
     70e:	0200                	addi	s0,sp,256
     710:	0304                	addi	s1,sp,384
     712:	02090003          	lb	zero,32(s2)
     716:	0100                	addi	s0,sp,128
     718:	2a05                	jal	848 <ext_euclid+0x14a>
     71a:	0200                	addi	s0,sp,256
     71c:	0304                	addi	s1,sp,384
     71e:	06097f03          	0x6097f03
     722:	0100                	addi	s0,sp,128
    int ri_2[size]; // MX-ring poly, a
     724:	3205                	jal	44 <__DYNAMIC+0x44>
     726:	0200                	addi	s0,sp,256
     728:	0304                	addi	s1,sp,384
    int ri_1[size]; // f-random poly, f[N] = 0, b
     72a:	02090103          	lb	sp,32(s2)
     72e:	0100                	addi	s0,sp,128
    int ri[size];
     730:	2905                	jal	b60 <generate_keys+0x272>
     732:	0200                	addi	s0,sp,256
     734:	0304                	addi	s1,sp,384
    int ti_1[size]; // ti_1[0] = 1
     736:	04090003          	lb	zero,64(s2)
     73a:	0100                	addi	s0,sp,128
    int ti[size];
     73c:	2805                	jal	76c <ext_euclid+0x6e>
     73e:	0200                	addi	s0,sp,256
     740:	0304                	addi	s1,sp,384
    int qi_1[size];
     742:	0306                	slli	t1,t1,0x1
     744:	097f                	0x97f
     746:	0002                	c.slli64	zero
    int temp[size];
     748:	0501                	addi	a0,a0,0
     74a:	0020                	addi	s0,sp,8
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     74c:	0402                	c.slli64	s0
     74e:	0301                	addi	t1,t1,0
     750:	0900                	addi	s0,sp,144
    int ri_2[size]; // MX-ring poly, a
     752:	0000                	unimp
     754:	0501                	addi	a0,a0,0
    int temp[size];
     756:	000d                	c.nop	3
    for (i = 0; i < size; ++i) {
     758:	0402                	c.slli64	s0
        ti_2[i] = 0;
     75a:	0601                	addi	a2,a2,0
     75c:	00090003          	lb	zero,0(s2)
     760:	0100                	addi	s0,sp,128
    for (i = 0; i < size; ++i) {
     762:	2505                	jal	d82 <_start+0x6>
     764:	0200                	addi	s0,sp,256
    array_equ(ri_2,polyR,size);
     766:	0204                	addi	s1,sp,256
     768:	0306                	slli	t1,t1,0x1
     76a:	097f                	0x97f
     76c:	0004                	0x4
    array_equ(ri_1,polyf,size);
     76e:	0501                	addi	a0,a0,0
     770:	04020027          	0x4020027
     774:	0602                	c.slli64	a2
    ti_1[0] = 1;
     776:	00090003          	lb	zero,0(s2)
     77a:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     77c:	0905                	addi	s2,s2,1
     77e:	0200                	addi	s0,sp,256
     780:	0304                	addi	s1,sp,384
     782:	0306                	slli	t1,t1,0x1
    array_equ(ti,ti_2,size);
     784:	091a                	slli	s2,s2,0x6
     786:	0008                	0x8
     788:	0001                	nop
     78a:	0402                	c.slli64	s0
    array_mod(ri_2,mod,N+1);
     78c:	09010303          	lb	t1,144(sp)
     790:	0004                	0x4
     792:	0501                	addi	a0,a0,0
    array_mod(ri_1,mod,N+1);
     794:	001d                	c.nop	7
     796:	0402                	c.slli64	s0
     798:	097e0303          	lb	t1,151(t3)
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     79c:	0008                	0x8
     79e:	0501                	addi	a0,a0,0
     7a0:	0346                	slli	t1,t1,0x11
     7a2:	0912                	slli	s2,s2,0x4
     7a4:	0006                	c.slli	zero,0x1
     7a6:	0501                	addi	a0,a0,0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7a8:	0305                	addi	t1,t1,1
     7aa:	0902                	c.slli64	s2
     7ac:	0000                	unimp
     7ae:	0501                	addi	a0,a0,0
     7b0:	0646                	slli	a2,a2,0x11
     7b2:	00097e03          	0x97e03
    array_equ(temp,ri_2,size);
     7b6:	0100                	addi	s0,sp,128
     7b8:	1d05                	addi	s10,s10,-31
     7ba:	02090203          	lb	tp,32(s2)
    array_sub(temp,ri,size);
     7be:	0100                	addi	s0,sp,128
     7c0:	4605                	li	a2,1
     7c2:	04097e03          	0x4097e03
    array_mod(temp,mod,size);
     7c6:	0100                	addi	s0,sp,128
     7c8:	0905                	addi	s2,s2,1
     7ca:	0a090203          	lb	tp,160(s2)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7ce:	0100                	addi	s0,sp,128
     7d0:	4605                	li	a2,1
     7d2:	0c097e03          	0xc097e03
     7d6:	0100                	addi	s0,sp,128
     7d8:	0905                	addi	s2,s2,1
    array_equ(qi_1,res1,size);
     7da:	12090203          	lb	tp,288(s2)
     7de:	0100                	addi	s0,sp,128
    array_mod(qi_1,mod,size);
     7e0:	4605                	li	a2,1
     7e2:	02097e03          	0x2097e03
     7e6:	0100                	addi	s0,sp,128
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7e8:	0905                	addi	s2,s2,1
     7ea:	04090203          	lb	tp,64(s2)
     7ee:	0100                	addi	s0,sp,128
     7f0:	4605                	li	a2,1
     7f2:	02097e03          	0x2097e03
     7f6:	0100                	addi	s0,sp,128
    array_equ(temp,res2,size);
     7f8:	0905                	addi	s2,s2,1
     7fa:	00090203          	lb	tp,0(s2)
    array_mod(temp,mod,size);
     7fe:	0100                	addi	s0,sp,128
     800:	04090303          	lb	t1,64(s2)
     804:	0100                	addi	s0,sp,128
    array_equ(ti,ti_2,size);
     806:	08097d03          	0x8097d03
     80a:	0100                	addi	s0,sp,128
     80c:	02090303          	lb	t1,32(s2)
    array_sub(ti,temp,size);
     810:	0100                	addi	s0,sp,128
     812:	04090103          	lb	sp,64(s2)
    array_mod(ti,mod,size);
     816:	0100                	addi	s0,sp,128
     818:	06097f03          	0x6097f03
     81c:	0100                	addi	s0,sp,128
array_equ(ri_2,ri_1,size);
     81e:	02090103          	lb	sp,32(s2)
     822:	0100                	addi	s0,sp,128
     824:	4605                	li	a2,1
array_equ(ri_1,ri,size);
     826:	04097a03          	0x4097a03
     82a:	0100                	addi	s0,sp,128
     82c:	0905                	addi	s2,s2,1
array_equ(ti_2,ti_1,size);
     82e:	04090203          	lb	tp,64(s2)
     832:	0100                	addi	s0,sp,128
     834:	0505                	addi	a0,a0,1
array_equ(ti_1,ti,size);
     836:	0306                	slli	t1,t1,0x1
     838:	0901                	addi	s2,s2,0
     83a:	0004                	0x4
     83c:	0301                	addi	t1,t1,0
        controlR = 0;
     83e:	0901                	addi	s2,s2,0
        for (i = 0; i < N + 1; ++i) {
     840:	0000                	unimp
     842:	0301                	addi	t1,t1,0
     844:	0901                	addi	s2,s2,0
    while (controlR != 0) {
     846:	0000                	unimp
     848:	0501                	addi	a0,a0,0
        for (j = 0; j < mod; ++j) {
     84a:	0646                	slli	a2,a2,0x11
            if (((ri_2[0] * j) % mod) == 1)
     84c:	00097b03          	0x97b03
        for (j = 0; j < mod; ++j) {
     850:	0100                	addi	s0,sp,128
     852:	0905                	addi	s2,s2,1
     854:	02090503          	lb	a0,32(s2)
     858:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     85a:	0505                	addi	a0,a0,1
     85c:	0306                	slli	t1,t1,0x1
    }
     85e:	0901                	addi	s2,s2,0
     860:	0004                	0x4
     862:	0501                	addi	a0,a0,0
     864:	0609                	addi	a2,a2,2
     866:	00090003          	lb	zero,0(s2)
     86a:	0100                	addi	s0,sp,128
     86c:	0505                	addi	a0,a0,1
     86e:	0306                	slli	t1,t1,0x1
     870:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     874:	0501                	addi	a0,a0,0
     876:	0614                	addi	a3,sp,768
     878:	00090203          	lb	tp,0(s2)
     87c:	0100                	addi	s0,sp,128
     87e:	0b05                	addi	s6,s6,1
     880:	04097e03          	0x4097e03
     884:	0100                	addi	s0,sp,128
     886:	0f05                	addi	t5,t5,1
        ti_2[i] = 0;
     888:	02090503          	lb	a0,32(s2)
     88c:	0100                	addi	s0,sp,128
     88e:	1005                	c.nop	-31
        ti_1[i] = 0;
     890:	0200                	addi	s0,sp,256
        ti_2[i] = 0;
     892:	0104                	addi	s1,sp,128
     894:	0306                	slli	t1,t1,0x1
        ti_1[i] = 0;
     896:	0008097b          	0x8097b
    for (i = 0; i < size; ++i) {
     89a:	0501                	addi	a0,a0,0
     89c:	0005                	c.nop	1
            ri[i - (N + 1)] = res[i];
     89e:	0402                	c.slli64	s0
     8a0:	0601                	addi	a2,a2,0
     8a2:	00090003          	lb	zero,0(s2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8a6:	0100                	addi	s0,sp,128
     8a8:	0306                	slli	t1,t1,0x1
            ri[i - (N + 1)] = res[i];
     8aa:	090d                	addi	s2,s2,3
     8ac:	0004                	0x4
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8ae:	0301                	addi	t1,t1,0
              qi_1[i] = 0;
     8b0:	0906                	slli	s2,s2,0x1
     8b2:	0008                	0x8
     8b4:	0301                	addi	t1,t1,0
     8b6:	00080903          	lb	s2,0(a6) # 16000 <_stack_start+0x6000>
            controlR += ri[i];
     8ba:	0501                	addi	a0,a0,0
              qi_1[i] = 0;
     8bc:	00030607          	0x30607
        for (i = 0; i < N + 1; ++i) {
     8c0:	0009                	c.nop	2
            controlR += ri[i];
     8c2:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     8c4:	1d05                	addi	s10,s10,-31
            if (((ri_2[0] * j) % mod) == 1)
     8c6:	0200                	addi	s0,sp,256
     8c8:	0104                	addi	s1,sp,128
     8ca:	0306                	slli	t1,t1,0x1
     8cc:	0908                	addi	a0,sp,144
     8ce:	0012                	c.slli	zero,0x4
     8d0:	0501                	addi	a0,a0,0
     8d2:	0009                	c.nop	2
     8d4:	0402                	c.slli64	s0
        for (j = 0; j < mod; ++j) {
     8d6:	0601                	addi	a2,a2,0
     8d8:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     8dc:	0100                	addi	s0,sp,128
     8de:	1405                	addi	s0,s0,-31
            ti_2[i] = (ti_2[i] * j) % mod;
     8e0:	04090103          	lb	sp,64(s2)
     8e4:	0100                	addi	s0,sp,128
     8e6:	0d05                	addi	s10,s10,1
     8e8:	0200                	addi	s0,sp,256
     8ea:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     8ec:	0306                	slli	t1,t1,0x1
int* generate_keys(int N, int p, int q){
     8ee:	00040963          	beqz	s0,900 <generate_keys+0x12>
     8f2:	0501                	addi	a0,a0,0
     8f4:	0018                	0x18
     8f6:	0402                	c.slli64	s0
     8f8:	00030603          	lb	a2,0(t1)
     8fc:	0009                	c.nop	2
     8fe:	0100                	addi	s0,sp,128
     900:	2105                	jal	d20 <ntru_deceypt+0xb8>
     902:	0200                	addi	s0,sp,256
     904:	0304                	addi	s1,sp,384
     906:	04097f03          	0x4097f03
     90a:	0100                	addi	s0,sp,128
     90c:	1805                	addi	a6,a6,-31
     90e:	0200                	addi	s0,sp,256
     910:	0304                	addi	s1,sp,384
     912:	02090103          	lb	sp,32(s2)
     916:	0100                	addi	s0,sp,128
     918:	2105                	jal	d38 <reset_handler+0x4>
     91a:	0200                	addi	s0,sp,256
     91c:	0304                	addi	s1,sp,384
     91e:	0306                	slli	t1,t1,0x1
     920:	097f                	0x97f
     922:	000a                	c.slli	zero,0x2
     924:	0501                	addi	a0,a0,0
     926:	0015                	c.nop	5
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     928:	0402                	c.slli64	s0
     92a:	0301                	addi	t1,t1,0
     92c:	0900                	addi	s0,sp,144
     92e:	0000                	unimp
     930:	0501                	addi	a0,a0,0
     932:	0009                	c.nop	2
     934:	0402                	c.slli64	s0
     936:	0601                	addi	a2,a2,0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     938:	00090003          	lb	zero,0(s2)
     93c:	0100                	addi	s0,sp,128
     93e:	0305                	addi	t1,t1,1
     940:	0200                	addi	s0,sp,256
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     942:	0204                	addi	s1,sp,256
     944:	0306                	slli	t1,t1,0x1
     946:	0904                	addi	s1,sp,144
     948:	0004                	0x4
     94a:	0501                	addi	a0,a0,0
     94c:	0402000f          	0x402000f
     950:	0602                	c.slli64	a2
     952:	00090003          	lb	zero,0(s2)
     956:	0100                	addi	s0,sp,128
     958:	2805                	jal	988 <generate_keys+0x9a>
     95a:	0200                	addi	s0,sp,256
     95c:	0204                	addi	s1,sp,256
     95e:	0306                	slli	t1,t1,0x1
     960:	000a097b          	0xa097b
     964:	0501                	addi	a0,a0,0
     966:	0610                	addi	a2,sp,768
     968:	04090103          	lb	sp,64(s2)
     96c:	0100                	addi	s0,sp,128
     96e:	1d05                	addi	s10,s10,-31
     970:	0200                	addi	s0,sp,256
     972:	0104                	addi	s1,sp,128
     974:	0306                	slli	t1,t1,0x1
     976:	0916                	slli	s2,s2,0x5
     978:	0006                	c.slli	zero,0x1
     97a:	0501                	addi	a0,a0,0
     97c:	0009                	c.nop	2
     97e:	0402                	c.slli64	s0
     980:	0601                	addi	a2,a2,0
     982:	00090003          	lb	zero,0(s2)
     986:	0100                	addi	s0,sp,128
     988:	1405                	addi	s0,s0,-31
     98a:	04090803          	lb	a6,64(s2)
     98e:	0100                	addi	s0,sp,128
     990:	0905                	addi	s2,s2,1
     992:	02090b03          	lb	s6,32(s2)
     996:	0100                	addi	s0,sp,128
     998:	0d05                	addi	s10,s10,1
     99a:	0200                	addi	s0,sp,256
     99c:	0104                	addi	s1,sp,128
     99e:	0306                	slli	t1,t1,0x1
     9a0:	097c                	addi	a5,sp,156
     9a2:	0008                	0x8
     9a4:	0501                	addi	a0,a0,0
     9a6:	0005                	c.nop	1
     9a8:	0402                	c.slli64	s0
     9aa:	0601                	addi	a2,a2,0
     9ac:	00090003          	lb	zero,0(s2)
    int polyR[N+1];
     9b0:	0100                	addi	s0,sp,128
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9b2:	0306                	slli	t1,t1,0x1
    int polyR[N+1];
     9b4:	0908                	addi	a0,sp,144
     9b6:	0004                	0x4
     9b8:	0301                	addi	t1,t1,0
     9ba:	0902                	c.slli64	s2
     9bc:	0000                	unimp
     9be:	0501                	addi	a0,a0,0
     9c0:	0601                	addi	a2,a2,0
    polyR[N] = 1;
     9c2:	00090103          	lb	sp,0(s2)
     9c6:	0100                	addi	s0,sp,128
     9c8:	1105                	addi	sp,sp,-31
     9ca:	0200                	addi	s0,sp,256
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9cc:	0304                	addi	s1,sp,384
     9ce:	0306                	slli	t1,t1,0x1
     9d0:	0968                	addi	a0,sp,156
     9d2:	002a                	c.slli	zero,0xa
     9d4:	0501                	addi	a0,a0,0
     9d6:	0025                	c.nop	9
     9d8:	0402                	c.slli64	s0
     9da:	00030603          	lb	a2,0(t1)
     9de:	0409                	addi	s0,s0,2
     9e0:	0100                	addi	s0,sp,128
     9e2:	2b05                	jal	f12 <memset+0x8e>
     9e4:	0200                	addi	s0,sp,256
     9e6:	0304                	addi	s1,sp,384
     9e8:	04090003          	lb	zero,64(s2)
     9ec:	0100                	addi	s0,sp,128
     9ee:	2e05                	jal	d1e <ntru_deceypt+0xb6>
     9f0:	0200                	addi	s0,sp,256
     9f2:	0304                	addi	s1,sp,384
     9f4:	02090003          	lb	zero,32(s2)
     9f8:	0100                	addi	s0,sp,128
     9fa:	2a05                	jal	b2a <generate_keys+0x23c>
     9fc:	0200                	addi	s0,sp,256
     9fe:	0304                	addi	s1,sp,384
     a00:	06097f03          	0x6097f03
     a04:	0100                	addi	s0,sp,128
     a06:	2e05                	jal	d36 <reset_handler+0x2>
     a08:	0200                	addi	s0,sp,256
     a0a:	0304                	addi	s1,sp,384
     a0c:	02090103          	lb	sp,32(s2)
     a10:	0100                	addi	s0,sp,128
     a12:	2505                	jal	1032 <main+0x106>
     a14:	0200                	addi	s0,sp,256
     a16:	0304                	addi	s1,sp,384
     a18:	04090003          	lb	zero,64(s2)
     a1c:	0100                	addi	s0,sp,128
     a1e:	2805                	jal	a4e <generate_keys+0x160>
     a20:	0200                	addi	s0,sp,256
     a22:	0304                	addi	s1,sp,384
     a24:	0306                	slli	t1,t1,0x1
     a26:	097f                	0x97f
     a28:	0002                	c.slli64	zero
     a2a:	0501                	addi	a0,a0,0
     a2c:	0020                	addi	s0,sp,8
     a2e:	0402                	c.slli64	s0
    polyR[0] = -1;
     a30:	0301                	addi	t1,t1,0
     a32:	0900                	addi	s0,sp,144
    for(i = 1; i < N; ++i){
     a34:	0000                	unimp
     a36:	0501                	addi	a0,a0,0
     a38:	000d                	c.nop	3
     a3a:	0402                	c.slli64	s0
    for (i = N; i < 55; ++i ){
     a3c:	0601                	addi	a2,a2,0
     a3e:	00090003          	lb	zero,0(s2)
     a42:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     a44:	2505                	jal	1064 <__DTOR_END__+0x10>
        random_keys[i] = f[i];
     a46:	0200                	addi	s0,sp,256
     a48:	0204                	addi	s1,sp,256
     a4a:	0306                	slli	t1,t1,0x1
     a4c:	097f                	0x97f
    for(i = 0; i < N; ++i){
     a4e:	0004                	0x4
     a50:	0501                	addi	a0,a0,0
     a52:	04020027          	0x4020027
    for(i = N; i < (2*N); ++i){
     a56:	0602                	c.slli64	a2
     a58:	00090003          	lb	zero,0(s2)
     a5c:	0100                	addi	s0,sp,128
        random_keys[i] = g[i-N];
     a5e:	1405                	addi	s0,s0,-31
     a60:	08090103          	lb	sp,128(s2)
     a64:	0100                	addi	s0,sp,128
    for(i = N; i < (2*N); ++i){
     a66:	1105                	addi	sp,sp,-31
     a68:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     a6a:	0304                	addi	s1,sp,384
     a6c:	0306                	slli	t1,t1,0x1
     a6e:	0908                	addi	a0,sp,144
    fp = ext_euclid(polyR, f, (N+1), p);
     a70:	0004                	0x4
     a72:	0501                	addi	a0,a0,0
     a74:	0029                	c.nop	10
     a76:	0402                	c.slli64	s0
     a78:	00030603          	lb	a2,0(t1)
    for(i = (2*N); i < (3*N); ++i){
     a7c:	0409                	addi	s0,s0,2
        random_keys[i] = fp[i-(2*N)];
     a7e:	0100                	addi	s0,sp,128
     a80:	2f05                	jal	11b0 <__DTOR_END__+0x15c>
     a82:	0200                	addi	s0,sp,256
     a84:	0304                	addi	s1,sp,384
    for(i = (2*N); i < (3*N); ++i){
     a86:	04090003          	lb	zero,64(s2)
    fq = ext_euclid(polyR, f, (N+1), q);
     a8a:	0100                	addi	s0,sp,128
     a8c:	3205                	jal	3ac <polymult2+0xf0>
     a8e:	0200                	addi	s0,sp,256
     a90:	0304                	addi	s1,sp,384
     a92:	02090003          	lb	zero,32(s2)
    for(i = (3*N); i < (4*N); ++i){
     a96:	0100                	addi	s0,sp,128
     a98:	2a05                	jal	bc8 <generate_keys+0x2da>
     a9a:	0200                	addi	s0,sp,256
     a9c:	0304                	addi	s1,sp,384
        random_keys[i] = fq[i-(3*N)];
     a9e:	06097f03          	0x6097f03
     aa2:	0100                	addi	s0,sp,128
     aa4:	3205                	jal	3c4 <polymult2+0x108>
    for(i = (3*N); i < (4*N); ++i){
     aa6:	0200                	addi	s0,sp,256
     aa8:	0304                	addi	s1,sp,384
    fg = polymult2(fq, N, g, N, 0);
     aaa:	02090103          	lb	sp,32(s2)
     aae:	0100                	addi	s0,sp,128
     ab0:	2905                	jal	ee0 <memset+0x5c>
     ab2:	0200                	addi	s0,sp,256
    for(i = 0; i < (2*N-1); ++i){
     ab4:	0304                	addi	s1,sp,384
     ab6:	04090003          	lb	zero,64(s2)
     aba:	0100                	addi	s0,sp,128
     abc:	2805                	jal	aec <generate_keys+0x1fe>
     abe:	0200                	addi	s0,sp,256
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ac0:	0304                	addi	s1,sp,384
     ac2:	0306                	slli	t1,t1,0x1
     ac4:	097f                	0x97f
     ac6:	0002                	c.slli64	zero
    for(i = (4*N); i < (5*N); ++i){
     ac8:	0501                	addi	a0,a0,0
     aca:	0020                	addi	s0,sp,8
     acc:	0402                	c.slli64	s0
     ace:	0301                	addi	t1,t1,0
     ad0:	0900                	addi	s0,sp,144
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     ad2:	0000                	unimp
     ad4:	0501                	addi	a0,a0,0
     ad6:	000d                	c.nop	3
     ad8:	0402                	c.slli64	s0
    for(i = (4*N); i < (5*N); ++i){
     ada:	0601                	addi	a2,a2,0
     adc:	00090003          	lb	zero,0(s2)
    for(i = (5*N); i < (6*N+1); ++i){
     ae0:	0100                	addi	s0,sp,128
     ae2:	2505                	jal	1102 <__DTOR_END__+0xae>
        random_keys[i] = polyR[i-(5*N)];
     ae4:	0200                	addi	s0,sp,256
     ae6:	0204                	addi	s1,sp,256
     ae8:	0306                	slli	t1,t1,0x1
     aea:	097f                	0x97f
    for(i = (5*N); i < (6*N+1); ++i){
     aec:	0004                	0x4
     aee:	0501                	addi	a0,a0,0
     af0:	04020027          	0x4020027
     af4:	0602                	c.slli64	a2
     af6:	00090003          	lb	zero,0(s2)
}
     afa:	0100                	addi	s0,sp,128
     afc:	0905                	addi	s2,s2,1
     afe:	0200                	addi	s0,sp,256
     b00:	0304                	addi	s1,sp,384
     b02:	0306                	slli	t1,t1,0x1
     b04:	090c                	addi	a1,sp,144
     b06:	0008                	0x8
     b08:	0501                	addi	a0,a0,0
     b0a:	0016                	c.slli	zero,0x5
     b0c:	0402                	c.slli64	s0
     b0e:	097c0303          	lb	t1,151(s8) # 19097 <_stack_start+0x9097>
     b12:	0008                	0x8
     b14:	0501                	addi	a0,a0,0
     b16:	090d0343          	fmadd.s	ft6,fs10,fa6,ft1,rne
     b1a:	0006                	c.slli	zero,0x1
     b1c:	0501                	addi	a0,a0,0
     b1e:	0305                	addi	t1,t1,1
     b20:	0902                	c.slli64	s2
     b22:	0000                	unimp
     b24:	0301                	addi	t1,t1,0
     b26:	0901                	addi	s2,s2,0
     b28:	0000                	unimp
     b2a:	0301                	addi	t1,t1,0
     b2c:	0902                	c.slli64	s2
     b2e:	0000                	unimp
     b30:	0501                	addi	a0,a0,0
     b32:	0609                	addi	a2,a2,2
     b34:	00090003          	lb	zero,0(s2)
        polyR[i] = 0;
     b38:	0100                	addi	s0,sp,128
     b3a:	4305                	li	t1,1
     b3c:	04097b03          	0x4097b03
     b40:	0100                	addi	s0,sp,128
    for(i = 1; i < N; ++i){
     b42:	0905                	addi	s2,s2,1
     b44:	02090503          	lb	a0,32(s2)
        f[i] = 0;
     b48:	0100                	addi	s0,sp,128
     b4a:	4305                	li	t1,1
     b4c:	04097b03          	0x4097b03
     b50:	0100                	addi	s0,sp,128
     b52:	0905                	addi	s2,s2,1
        g[i] = 0;
     b54:	1c090503          	lb	a0,448(s2)
     b58:	0100                	addi	s0,sp,128
     b5a:	06090103          	lb	sp,96(s2)
    for (i = N; i < 55; ++i ){
     b5e:	0100                	addi	s0,sp,128
     b60:	06090203          	lb	tp,96(s2)
        random_keys[i] = f[i];
     b64:	0100                	addi	s0,sp,128
     b66:	04090103          	lb	sp,64(s2)
     b6a:	0100                	addi	s0,sp,128
     b6c:	08097f03          	0x8097f03
     b70:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     b72:	02090103          	lb	sp,32(s2)
     b76:	0100                	addi	s0,sp,128
        random_keys[i] = g[i-N];
     b78:	0405                	addi	s0,s0,1
     b7a:	04090b03          	lb	s6,64(s2)
     b7e:	0100                	addi	s0,sp,128
     b80:	4305                	li	t1,1
    for(i = N; i < (2*N); ++i){
     b82:	04096c03          	0x4096c03
     b86:	0100                	addi	s0,sp,128
        random_keys[i] = fp[i-(2*N)];
     b88:	0905                	addi	s2,s2,1
     b8a:	0a090503          	lb	a0,160(s2)
     b8e:	0100                	addi	s0,sp,128
     b90:	0505                	addi	a0,a0,1
    for(i = (2*N); i < (3*N); ++i){
     b92:	0306                	slli	t1,t1,0x1
     b94:	0901                	addi	s2,s2,0
     b96:	0004                	0x4
        random_keys[i] = fq[i-(3*N)];
     b98:	0301                	addi	t1,t1,0
     b9a:	0901                	addi	s2,s2,0
     b9c:	0000                	unimp
     b9e:	0301                	addi	t1,t1,0
     ba0:	0901                	addi	s2,s2,0
     ba2:	0000                	unimp
     ba4:	0301                	addi	t1,t1,0
    for(i = (3*N); i < (4*N); ++i){
     ba6:	0901                	addi	s2,s2,0
        random_keys[i] = fq[i-(3*N)];
     ba8:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     baa:	0501                	addi	a0,a0,0
        fg[i] = fg[i]*p;
     bac:	0609                	addi	a2,a2,2
    for(i = 0; i < (2*N-1); ++i){
     bae:	00090003          	lb	zero,0(s2)
        fg[i] = fg[i]*p;
     bb2:	0100                	addi	s0,sp,128
     bb4:	0205                	addi	tp,tp,1
     bb6:	0306                	slli	t1,t1,0x1
     bb8:	0006090b          	0x6090b
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bbc:	0501                	addi	a0,a0,0
     bbe:	0604                	addi	s1,sp,768
     bc0:	00090003          	lb	zero,0(s2)
     bc4:	0100                	addi	s0,sp,128
     bc6:	0605                	addi	a2,a2,1
    for(i = (4*N); i < (5*N); ++i){
     bc8:	0306                	slli	t1,t1,0x1
     bca:	0901                	addi	s2,s2,0
        random_keys[i] = polyR[i-(5*N)];
     bcc:	0004                	0x4
     bce:	0301                	addi	t1,t1,0
     bd0:	0901                	addi	s2,s2,0
     bd2:	000a                	c.slli	zero,0x2
     bd4:	0501                	addi	a0,a0,0
     bd6:	0003061b          	0x3061b
    for(i = (5*N); i < (6*N+1); ++i){
     bda:	0009                	c.nop	2
        random_keys[i] = polyR[i-(5*N)];
     bdc:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     bde:	0905                	addi	s2,s2,1
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     be0:	04090803          	lb	a6,64(s2)
     be4:	0100                	addi	s0,sp,128
     be6:	1b05                	addi	s6,s6,-31
     be8:	08097803          	0x8097803
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bec:	0100                	addi	s0,sp,128
     bee:	0505                	addi	a0,a0,1
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bf0:	0306                	slli	t1,t1,0x1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bf2:	00040907          	0x40907
     bf6:	0501                	addi	a0,a0,0
     bf8:	0309                	addi	t1,t1,2
     bfa:	0901                	addi	s2,s2,0
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bfc:	0000                	unimp
     bfe:	0301                	addi	t1,t1,0
     c00:	0901                	addi	s2,s2,0
     c02:	0002                	c.slli64	zero
     c04:	0501                	addi	a0,a0,0
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c06:	030e                	slli	t1,t1,0x3
    temp = polymult(public_key,N,random_val,48,q,0);
     c08:	0900                	addi	s0,sp,144
     c0a:	0000                	unimp
     c0c:	0501                	addi	a0,a0,0
     c0e:	00030617          	auipc	a2,0x30
     c12:	0009                	c.nop	2
     c14:	0100                	addi	s0,sp,128
     c16:	0e05                	addi	t3,t3,1
     c18:	04090003          	lb	zero,64(s2)
array_add(temp,message,48);
     c1c:	0100                	addi	s0,sp,128
     c1e:	0905                	addi	s2,s2,1
    temp = polymult(public_key,N,random_val,48,q,0);
     c20:	0306                	slli	t1,t1,0x1
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c22:	00040903          	lb	s2,0(s0)
array_add(temp,message,48);
     c26:	0501                	addi	a0,a0,0
     c28:	0635                	addi	a2,a2,13
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c2a:	00090003          	lb	zero,0(s2)
     c2e:	0100                	addi	s0,sp,128
     c30:	1e05                	addi	t3,t3,-31
     c32:	04090003          	lb	zero,64(s2)
     c36:	0100                	addi	s0,sp,128
     c38:	0605                	addi	a2,a2,1
    for(i = (2*N); i < (3*N); ++i){
     c3a:	0306                	slli	t1,t1,0x1
     c3c:	00060977          	0x60977
     c40:	0501                	addi	a0,a0,0
     c42:	0305                	addi	t1,t1,1
     c44:	0904                	addi	s1,sp,144
}
     c46:	0008                	0x8
     c48:	0501                	addi	a0,a0,0
     c4a:	0309                	addi	t1,t1,2
     c4c:	0908                	addi	a0,sp,144
     c4e:	0000                	unimp
     c50:	0501                	addi	a0,a0,0
     c52:	0305                	addi	t1,t1,1
     c54:	0008090b          	0x8090b
        CT[i-(2*N)] = CT[i];
     c58:	0301                	addi	t1,t1,0
     c5a:	0901                	addi	s2,s2,0
     c5c:	0008                	0x8
    for(i = (2*N); i < (3*N); ++i){
     c5e:	0301                	addi	t1,t1,0
     c60:	0902                	c.slli64	s2
        CT[i-(2*N)] = CT[i];
     c62:	0008                	0x8
     c64:	0501                	addi	a0,a0,0
    for(i = (2*N); i < (3*N); ++i){
     c66:	060c                	addi	a1,sp,768
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c68:	00090003          	lb	zero,0(s2)
     c6c:	0100                	addi	s0,sp,128
     c6e:	1105                	addi	sp,sp,-31
    for(i = (2*N); i < ((2*N)+N); ++i){
     c70:	0200                	addi	s0,sp,256
     c72:	0104                	addi	s1,sp,128
     c74:	0306                	slli	t1,t1,0x1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c76:	0900                	addi	s0,sp,144
     c78:	0002                	c.slli64	zero
     c7a:	0501                	addi	a0,a0,0
     c7c:	0005                	c.nop	1
     c7e:	0402                	c.slli64	s0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c80:	0601                	addi	a2,a2,0
     c82:	00090003          	lb	zero,0(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c86:	0100                	addi	s0,sp,128
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c88:	1805                	addi	a6,a6,-31
     c8a:	0200                	addi	s0,sp,256
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c8c:	0104                	addi	s1,sp,128
     c8e:	0306                	slli	t1,t1,0x1
     c90:	0906                	slli	s2,s2,0x1
     c92:	0004                	0x4
     c94:	0501                	addi	a0,a0,0
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c96:	0005                	c.nop	1
     c98:	0402                	c.slli64	s0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c9a:	0601                	addi	a2,a2,0
     c9c:	08090003          	lb	zero,128(s2)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ca0:	0100                	addi	s0,sp,128
     ca2:	0c05                	addi	s8,s8,1
     ca4:	0200                	addi	s0,sp,256
     ca6:	0104                	addi	s1,sp,128
     ca8:	04097a03          	0x4097a03
     cac:	0100                	addi	s0,sp,128
     cae:	0200                	addi	s0,sp,256
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb0:	0104                	addi	s1,sp,128
     cb2:	04090f03          	lb	t5,64(s2)
     cb6:	0100                	addi	s0,sp,128
     cb8:	1105                	addi	sp,sp,-31
        if(a2[i] <= q/2)
     cba:	0200                	addi	s0,sp,256
     cbc:	0104                	addi	s1,sp,128
     cbe:	0306                	slli	t1,t1,0x1
    for (i = 0; i < N; ++i){
     cc0:	097f                	0x97f
     cc2:	0002                	c.slli64	zero
     cc4:	0501                	addi	a0,a0,0
    c = polymult2(secret_key_fp,N,a2,N,0);
     cc6:	0005                	c.nop	1
     cc8:	0402                	c.slli64	s0
     cca:	0601                	addi	a2,a2,0
     ccc:	00090003          	lb	zero,0(s2)
     cd0:	0100                	addi	s0,sp,128
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cd2:	0d05                	addi	s10,s10,1
     cd4:	0306                	slli	t1,t1,0x1
     cd6:	095f 0008 0501      	0x5010008095f
     cdc:	0638                	addi	a4,sp,776
    for(i = (2*N); i < ((2*N)+N); ++i){
     cde:	00090003          	lb	zero,0(s2)
     ce2:	0100                	addi	s0,sp,128
}
     ce4:	2205                	jal	e04 <memcpy+0x5e>
     ce6:	02090003          	lb	zero,32(s2)
     cea:	0100                	addi	s0,sp,128
     cec:	0905                	addi	s2,s2,1
     cee:	0200                	addi	s0,sp,256
     cf0:	0304                	addi	s1,sp,384
     cf2:	0306                	slli	t1,t1,0x1
     cf4:	0914                	addi	a3,sp,144
     cf6:	0006                	c.slli	zero,0x1
     cf8:	0501                	addi	a0,a0,0
        a2[i-(2*N)] = a2[i];
     cfa:	000e                	c.slli	zero,0x3
     cfc:	0402                	c.slli64	s0
     cfe:	00030603          	lb	a2,0(t1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d02:	0409                	addi	s0,s0,2
     d04:	0100                	addi	s0,sp,128
        a2[i-(2*N)] = a2[i];
     d06:	0200                	addi	s0,sp,256
     d08:	0304                	addi	s1,sp,384
    for(i = (2*N); i < ((2*N)+N); ++i){
     d0a:	04090103          	lb	sp,64(s2)
        if(a2[i] <= q/2)
     d0e:	0100                	addi	s0,sp,128
     d10:	0200                	addi	s0,sp,256
            a2[i] = (-1)*(q-a2[i]);
     d12:	0304                	addi	s1,sp,384
     d14:	02097f03          	0x2097f03
    for (i = 0; i < N; ++i){
     d18:	0100                	addi	s0,sp,128
     d1a:	0905                	addi	s2,s2,1
     d1c:	0200                	addi	s0,sp,256
        c2[i-(2*N)] = c2[i];
     d1e:	0304                	addi	s1,sp,384
     d20:	0306                	slli	t1,t1,0x1
     d22:	0901                	addi	s2,s2,0
     d24:	0004                	0x4
    for(i = (2*N); i < ((2*N)+N); ++i){
     d26:	0501                	addi	a0,a0,0
     d28:	000e                	c.slli	zero,0x3
        c2[i-(2*N)] = c2[i];
     d2a:	0402                	c.slli64	s0
     d2c:	00030603          	lb	a2,0(t1)
  jal x0, default_exc_handler
     d30:	0009                	c.nop	2
     d32:	0100                	addi	s0,sp,128
  mv  x1, x0
     d34:	1d05                	addi	s10,s10,-31
     d36:	0200                	addi	s0,sp,256
  mv  x2, x1
     d38:	0304                	addi	s1,sp,384
  mv  x3, x1
     d3a:	0306                	slli	t1,t1,0x1
  mv  x4, x1
     d3c:	097e                	slli	s2,s2,0x1f
  mv  x5, x1
     d3e:	0004                	0x4
  mv  x6, x1
     d40:	0501                	addi	a0,a0,0
  mv  x7, x1
     d42:	0309                	addi	t1,t1,2
  mv  x8, x1
     d44:	00040907          	0x40907
  mv x10, x1
     d48:	0501                	addi	a0,a0,0
  mv x11, x1
     d4a:	0003060b          	0x3060b
  mv x13, x1
     d4e:	0009                	c.nop	2
  mv x14, x1
     d50:	0100                	addi	s0,sp,128
  mv x15, x1
     d52:	2005                	jal	d72 <reset_handler+0x3e>
  mv x16, x1
     d54:	0200                	addi	s0,sp,256
  mv x17, x1
     d56:	0204                	addi	s1,sp,256
  mv x18, x1
     d58:	0306                	slli	t1,t1,0x1
  mv x19, x1
     d5a:	097f                	0x97f
  mv x20, x1
     d5c:	0002                	c.slli64	zero
  mv x21, x1
     d5e:	0501                	addi	a0,a0,0
  mv x22, x1
     d60:	0022                	c.slli	zero,0x8
  mv x23, x1
     d62:	0402                	c.slli64	s0
  mv x24, x1
     d64:	0602                	c.slli64	a2
  mv x25, x1
     d66:	00090003          	lb	zero,0(s2)
  mv x27, x1
     d6a:	0100                	addi	s0,sp,128
  mv x28, x1
     d6c:	0905                	addi	s2,s2,1
  mv x29, x1
     d6e:	0306                	slli	t1,t1,0x1
  mv x30, x1
     d70:	0909                	addi	s2,s2,2
  mv x31, x1
     d72:	0004                	0x4
  la   x2, _stack_start
     d74:	0501                	addi	a0,a0,0
     d76:	0615                	addi	a2,a2,5
     d78:	00090003          	lb	zero,0(s2)
  la x26, _bss_start
     d7c:	0100                	addi	s0,sp,128
     d7e:	0c05                	addi	s8,s8,1
     d80:	06090003          	lb	zero,96(s2)
  la x27, _bss_end
     d84:	0100                	addi	s0,sp,128
     d86:	1a05                	addi	s4,s4,-31
     d88:	0200                	addi	s0,sp,256
     d8a:	0204                	addi	s1,sp,256
  bge x26, x27, zero_loop_end
     d8c:	0306                	slli	t1,t1,0x1
     d8e:	097f                	0x97f
  sw x0, 0(x26)
     d90:	0004                	0x4
     d92:	0501                	addi	a0,a0,0
  addi x26, x26, 4
     d94:	0309                	addi	t1,t1,2
  ble x26, x27, zero_loop
     d96:	00040907          	0x40907
  addi x10, x0, 0
     d9a:	0501                	addi	a0,a0,0
     d9c:	0003060b          	0x3060b
  addi x11, x0, 0
     da0:	0009                	c.nop	2
  jal x1, main
     da2:	0100                	addi	s0,sp,128
     da4:	2005                	jal	dc4 <memcpy+0x1e>
     da6:	0200                	addi	s0,sp,256
     da8:	0204                	addi	s1,sp,256
     daa:	0306                	slli	t1,t1,0x1
     dac:	097f                	0x97f
     dae:	0002                	c.slli64	zero
     db0:	0501                	addi	a0,a0,0
     db2:	0022                	c.slli	zero,0x8
     db4:	0402                	c.slli64	s0
     db6:	0602                	c.slli64	a2
     db8:	00090003          	lb	zero,0(s2)
     dbc:	0100                	addi	s0,sp,128
     dbe:	1805                	addi	a6,a6,-31
     dc0:	0200                	addi	s0,sp,256
     dc2:	0104                	addi	s1,sp,128
     dc4:	0306                	slli	t1,t1,0x1
     dc6:	0900                	addi	s0,sp,144
     dc8:	0002                	c.slli64	zero
     dca:	0501                	addi	a0,a0,0
     dcc:	0005                	c.nop	1
     dce:	0402                	c.slli64	s0
     dd0:	0601                	addi	a2,a2,0
     dd2:	08090003          	lb	zero,128(s2)
     dd6:	0100                	addi	s0,sp,128
     dd8:	0b05                	addi	s6,s6,1
     dda:	0306                	slli	t1,t1,0x1
     ddc:	090c                	addi	a1,sp,144
     dde:	0004                	0x4
     de0:	0501                	addi	a0,a0,0
     de2:	0302                	c.slli64	t1
     de4:	00f8                	addi	a4,sp,76
     de6:	0409                	addi	s0,s0,2
     de8:	0100                	addi	s0,sp,128
     dea:	0405                	addi	s0,s0,1
     dec:	0306                	slli	t1,t1,0x1
     dee:	0900                	addi	s0,sp,144
     df0:	0000                	unimp
     df2:	0501                	addi	a0,a0,0
     df4:	0606                	slli	a2,a2,0x1
     df6:	08090103          	lb	sp,128(s2)
     dfa:	0100                	addi	s0,sp,128
     dfc:	10090103          	lb	sp,256(s2)
     e00:	0100                	addi	s0,sp,128
     e02:	1905                	addi	s2,s2,-31
     e04:	0306                	slli	t1,t1,0x1
     e06:	0900                	addi	s0,sp,144
     e08:	0000                	unimp
     e0a:	0501                	addi	a0,a0,0
     e0c:	0402001b          	0x402001b
     e10:	0301                	addi	t1,t1,0
     e12:	0908                	addi	a0,sp,144
     e14:	0012                	c.slli	zero,0x4
     e16:	0501                	addi	a0,a0,0
     e18:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
     e1c:	0301                	addi	t1,t1,0
     e1e:	0901                	addi	s2,s2,0
     e20:	0008                	0x8
     e22:	0501                	addi	a0,a0,0
     e24:	0015                	c.nop	5
     e26:	0402                	c.slli64	s0
     e28:	0601                	addi	a2,a2,0
     e2a:	08097f03          	0x8097f03
     e2e:	0100                	addi	s0,sp,128
     e30:	0505                	addi	a0,a0,1
     e32:	0200                	addi	s0,sp,256
     e34:	0104                	addi	s1,sp,128
     e36:	0306                	slli	t1,t1,0x1
     e38:	0900                	addi	s0,sp,144
     e3a:	0000                	unimp
     e3c:	0601                	addi	a2,a2,0
     e3e:	04090403          	lb	s0,64(s2)
     e42:	0100                	addi	s0,sp,128
     e44:	00090203          	lb	tp,0(s2)
     e48:	0100                	addi	s0,sp,128
     e4a:	0105                	addi	sp,sp,1
     e4c:	0306                	slli	t1,t1,0x1
     e4e:	0901                	addi	s2,s2,0
     e50:	0000                	unimp
     e52:	0501                	addi	a0,a0,0
     e54:	0609                	addi	a2,a2,2
     e56:	097efa03          	0x97efa03
     e5a:	002a                	c.slli	zero,0xa
     e5c:	0501                	addi	a0,a0,0
     e5e:	0616                	slli	a2,a2,0x5
     e60:	00090003          	lb	zero,0(s2)
     e64:	0100                	addi	s0,sp,128
     e66:	0d05                	addi	s10,s10,1
     e68:	04090003          	lb	zero,64(s2)
     e6c:	0100                	addi	s0,sp,128
     e6e:	1305                	addi	t1,t1,-31
     e70:	04090003          	lb	zero,64(s2)
     e74:	0100                	addi	s0,sp,128
     e76:	0905                	addi	s2,s2,1
     e78:	0306                	slli	t1,t1,0x1
     e7a:	0906                	slli	s2,s2,0x1
     e7c:	0006                	c.slli	zero,0x1
     e7e:	0501                	addi	a0,a0,0
     e80:	0003060b          	0x3060b
     e84:	0009                	c.nop	2
     e86:	0100                	addi	s0,sp,128
     e88:	0d05                	addi	s10,s10,1
     e8a:	0306                	slli	t1,t1,0x1
     e8c:	0901                	addi	s2,s2,0
     e8e:	0008                	0x8
     e90:	0301                	addi	t1,t1,0
     e92:	0901                	addi	s2,s2,0
     e94:	000a                	c.slli	zero,0x2
     e96:	0501                	addi	a0,a0,0
     e98:	0312                	slli	t1,t1,0x4
     e9a:	0900                	addi	s0,sp,144
     e9c:	0000                	unimp
     e9e:	0501                	addi	a0,a0,0
     ea0:	0614                	addi	a3,sp,768
     ea2:	00090003          	lb	zero,0(s2)
     ea6:	0100                	addi	s0,sp,128
     ea8:	1205                	addi	tp,tp,-31
     eaa:	04090003          	lb	zero,64(s2)
     eae:	0100                	addi	s0,sp,128
     eb0:	0d05                	addi	s10,s10,1
     eb2:	0306                	slli	t1,t1,0x1
     eb4:	00040903          	lb	s2,0(s0)
     eb8:	0501                	addi	a0,a0,0
     eba:	0003062b          	0x3062b
     ebe:	0009                	c.nop	2
     ec0:	0100                	addi	s0,sp,128
     ec2:	1b05                	addi	s6,s6,-31
     ec4:	04090003          	lb	zero,64(s2)
     ec8:	0100                	addi	s0,sp,128
     eca:	0905                	addi	s2,s2,1
     ecc:	0306                	slli	t1,t1,0x1
     ece:	00040907          	0x40907
     ed2:	0501                	addi	a0,a0,0
     ed4:	00030613          	mv	a2,t1
     ed8:	0009                	c.nop	2
     eda:	0100                	addi	s0,sp,128
     edc:	0b05                	addi	s6,s6,1
     ede:	0e090a03          	lb	s4,224(s2)
     ee2:	0100                	addi	s0,sp,128
     ee4:	1305                	addi	t1,t1,-31
     ee6:	04097603          	0x4097603
     eea:	0100                	addi	s0,sp,128
     eec:	0905                	addi	s2,s2,1
     eee:	0306                	slli	t1,t1,0x1
     ef0:	090a                	slli	s2,s2,0x2
     ef2:	0002                	c.slli64	zero
     ef4:	0501                	addi	a0,a0,0
     ef6:	0003060b          	0x3060b
     efa:	0009                	c.nop	2
     efc:	0100                	addi	s0,sp,128
     efe:	0d05                	addi	s10,s10,1
     f00:	0306                	slli	t1,t1,0x1
     f02:	0901                	addi	s2,s2,0
     f04:	0004                	0x4
     f06:	0301                	addi	t1,t1,0
     f08:	0901                	addi	s2,s2,0
     f0a:	0008                	0x8
     f0c:	0501                	addi	a0,a0,0
     f0e:	0312                	slli	t1,t1,0x4
     f10:	0900                	addi	s0,sp,144
     f12:	0000                	unimp
     f14:	0501                	addi	a0,a0,0
     f16:	061a                	slli	a2,a2,0x6
     f18:	00090003          	lb	zero,0(s2)
     f1c:	0100                	addi	s0,sp,128
     f1e:	1205                	addi	tp,tp,-31
     f20:	04090003          	lb	zero,64(s2)
     f24:	0100                	addi	s0,sp,128
     f26:	0d05                	addi	s10,s10,1
     f28:	0306                	slli	t1,t1,0x1
     f2a:	00040903          	lb	s2,0(s0)
int main(){
     f2e:	0501                	addi	a0,a0,0
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f30:	00030637          	lui	a2,0x30
     f34:	0009                	c.nop	2
     f36:	0100                	addi	s0,sp,128
     f38:	0d05                	addi	s10,s10,1
     f3a:	04090c03          	lb	s8,64(s2)
int main(){
     f3e:	0100                	addi	s0,sp,128
     f40:	2105                	jal	1360 <_bss_start+0x188>
     f42:	08097403          	0x8097403
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f46:	0100                	addi	s0,sp,128
    keys = generate_keys(N, p, q);
     f48:	0905                	addi	s2,s2,1
     f4a:	0306                	slli	t1,t1,0x1
     f4c:	0004090b          	0x4090b
     f50:	0501                	addi	a0,a0,0
     f52:	030d                	addi	t1,t1,3
     f54:	0901                	addi	s2,s2,0
    for(i = 0; i < N; ++i){
     f56:	0000                	unimp
     f58:	0301                	addi	t1,t1,0
        secret_key_f[i] = keys[i];
     f5a:	0901                	addi	s2,s2,0
     f5c:	0002                	c.slli64	zero
     f5e:	0501                	addi	a0,a0,0
     f60:	0639                	addi	a2,a2,14
     f62:	00090003          	lb	zero,0(s2)
    for(i = 0; i < N; ++i){
     f66:	0100                	addi	s0,sp,128
     f68:	0d05                	addi	s10,s10,1
     f6a:	08090f03          	lb	t5,128(s2)
    for(i = N; i < (2*N); ++i){
     f6e:	0100                	addi	s0,sp,128
     f70:	3905                	jal	ba0 <generate_keys+0x2b2>
     f72:	06097103          	0x6097103
     f76:	0100                	addi	s0,sp,128
        secret_key_fp[i-(2*N)] = keys[i];
     f78:	0d05                	addi	s10,s10,1
     f7a:	04090f03          	lb	t5,64(s2)
     f7e:	0100                	addi	s0,sp,128
     f80:	2205                	jal	10a0 <__DTOR_END__+0x4c>
    for(i = (2*N); i < (3*N); ++i){
     f82:	02097103          	0x2097103
    for(i = (3*N); i < (4*N); ++i){
     f86:	0100                	addi	s0,sp,128
     f88:	0905                	addi	s2,s2,1
     f8a:	0306                	slli	t1,t1,0x1
     f8c:	090e                	slli	s2,s2,0x3
     f8e:	0004                	0x4
     f90:	0501                	addi	a0,a0,0
        public_key[i-(4*N)] = keys[i];
     f92:	030d                	addi	t1,t1,3
     f94:	0901                	addi	s2,s2,0
     f96:	0000                	unimp
     f98:	0301                	addi	t1,t1,0
     f9a:	0901                	addi	s2,s2,0
    for(i = (4*N); i < (5*N); ++i){
     f9c:	0002                	c.slli64	zero
     f9e:	0501                	addi	a0,a0,0
     fa0:	0312                	slli	t1,t1,0x4
     fa2:	0900                	addi	s0,sp,144
     fa4:	0000                	unimp
     fa6:	0501                	addi	a0,a0,0
        ring_poly[i-(5*N)] = keys[i];
     fa8:	0003061b          	0x3061b
     fac:	0009                	c.nop	2
     fae:	0100                	addi	s0,sp,128
     fb0:	1205                	addi	tp,tp,-31
    for(i = (5*N); i < (6*N+1); ++i){
     fb2:	04090003          	lb	zero,64(s2)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fb6:	0100                	addi	s0,sp,128
     fb8:	0d05                	addi	s10,s10,1
     fba:	0306                	slli	t1,t1,0x1
     fbc:	00040903          	lb	s2,0(s0)
     fc0:	0501                	addi	a0,a0,0
     fc2:	0639                	addi	a2,a2,14
     fc4:	00090003          	lb	zero,0(s2)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fc8:	0100                	addi	s0,sp,128
     fca:	0d05                	addi	s10,s10,1
     fcc:	04090c03          	lb	s8,64(s2)
     fd0:	0100                	addi	s0,sp,128
     fd2:	2205                	jal	10f2 <__DTOR_END__+0x9e>
     fd4:	08097403          	0x8097403
     fd8:	0100                	addi	s0,sp,128
            resultkon[0] = 0xDEDEDEDE;
     fda:	0905                	addi	s2,s2,1
     fdc:	0306                	slli	t1,t1,0x1
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fde:	0004090b          	0x4090b
     fe2:	0501                	addi	a0,a0,0
     fe4:	030d                	addi	t1,t1,3
     fe6:	0901                	addi	s2,s2,0
     fe8:	0000                	unimp
     fea:	0301                	addi	t1,t1,0
     fec:	0901                	addi	s2,s2,0
     fee:	0002                	c.slli64	zero
            resultkon[0] = 0xDEDEDEDE;
     ff0:	0501                	addi	a0,a0,0
     ff2:	0003062b          	0x3062b
    for(i = 0; i < 32; ++i){
     ff6:	0009                	c.nop	2
        if(!(message[i] == Dec_Message[i])){
     ff8:	0100                	addi	s0,sp,128
     ffa:	0d05                	addi	s10,s10,1
     ffc:	08090803          	lb	a6,128(s2)
    1000:	0100                	addi	s0,sp,128
    1002:	2b05                	jal	1532 <product2+0x102>
    1004:	06097803          	0x6097803
    1008:	0100                	addi	s0,sp,128
    100a:	0d05                	addi	s10,s10,1
            resultkon[0] = 0xBABABABA;
    100c:	02090803          	lb	a6,32(s2)
    1010:	0100                	addi	s0,sp,128
    1012:	1b05                	addi	s6,s6,-31
    1014:	02097803          	0x2097803
 	    *var = resultkon[0];
    1018:	0100                	addi	s0,sp,128
    101a:	0905                	addi	s2,s2,1
    101c:	0306                	slli	t1,t1,0x1
    101e:	00040907          	0x40907
}
    1022:	0501                	addi	a0,a0,0
    1024:	030d                	addi	t1,t1,3
    1026:	0901                	addi	s2,s2,0
    1028:	0000                	unimp
    102a:	0301                	addi	t1,t1,0
    102c:	0901                	addi	s2,s2,0
    102e:	0002                	c.slli64	zero
            resultkon[0] = 0xDEDEDEDE;
    1030:	0501                	addi	a0,a0,0
	    *var = resultkon[0];}
    1032:	0312                	slli	t1,t1,0x4
    1034:	0900                	addi	s0,sp,144
    1036:	0000                	unimp
    1038:	0501                	addi	a0,a0,0
    103a:	0614                	addi	a3,sp,768
    103c:	00090003          	lb	zero,0(s2)
    for(i = 0; i < 32; ++i){
    1040:	0100                	addi	s0,sp,128
    1042:	1205                	addi	tp,tp,-31
    1044:	04090003          	lb	zero,64(s2)
    1048:	0100                	addi	s0,sp,128
    104a:	0d05                	addi	s10,s10,1
    104c:	0306                	slli	t1,t1,0x1
    104e:	00040903          	lb	s2,0(s0)
    1052:	0501                	addi	a0,a0,0
    1054:	0003062b          	0x3062b
    1058:	0009                	c.nop	2
    105a:	0100                	addi	s0,sp,128
    105c:	1b05                	addi	s6,s6,-31
    105e:	04090003          	lb	zero,64(s2)
    1062:	0100                	addi	s0,sp,128
    1064:	1105                	addi	sp,sp,-31
    1066:	0306                	slli	t1,t1,0x1
    1068:	06097faf          	0x6097faf
    106c:	0100                	addi	s0,sp,128
    106e:	2e05                	jal	139e <_bss_start+0x1c6>
    1070:	0306                	slli	t1,t1,0x1
    1072:	0900                	addi	s0,sp,144
    1074:	0000                	unimp
    1076:	0501                	addi	a0,a0,0
    1078:	031f 0900 0002      	0x20900031f
    107e:	0501                	addi	a0,a0,0
    1080:	060d                	addi	a2,a2,3
    1082:	06090503          	lb	a0,96(s2)
    1086:	0100                	addi	s0,sp,128
    1088:	1105                	addi	sp,sp,-31
    108a:	0a091103          	lh	sp,160(s2)
    108e:	0100                	addi	s0,sp,128
    1090:	3a05                	jal	9c0 <generate_keys+0xd2>
    1092:	0306                	slli	t1,t1,0x1
    1094:	0900                	addi	s0,sp,144
    1096:	0000                	unimp
    1098:	0501                	addi	a0,a0,0
    109a:	0325                	addi	t1,t1,9
    109c:	0900                	addi	s0,sp,144
    109e:	0002                	c.slli64	zero
    10a0:	0501                	addi	a0,a0,0
    10a2:	060d                	addi	a2,a2,3
    10a4:	06090503          	lb	a0,96(s2)
    10a8:	0100                	addi	s0,sp,128
    10aa:	0905                	addi	s2,s2,1
    10ac:	06090803          	lb	a6,96(s2)
    10b0:	0100                	addi	s0,sp,128
    10b2:	0d05                	addi	s10,s10,1
    10b4:	00090503          	lb	a0,0(s2)
    10b8:	0100                	addi	s0,sp,128
    10ba:	0905                	addi	s2,s2,1
    10bc:	08090b03          	lb	s6,128(s2)
    10c0:	0100                	addi	s0,sp,128
    10c2:	0d05                	addi	s10,s10,1
    10c4:	00090803          	lb	a6,0(s2)
    10c8:	0100                	addi	s0,sp,128
    10ca:	0905                	addi	s2,s2,1
    10cc:	08090803          	lb	a6,128(s2)
    10d0:	0100                	addi	s0,sp,128
    10d2:	0d05                	addi	s10,s10,1
    10d4:	00090503          	lb	a0,0(s2)
    10d8:	0100                	addi	s0,sp,128
    10da:	0905                	addi	s2,s2,1
    10dc:	08090403          	lb	s0,128(s2)
    10e0:	0100                	addi	s0,sp,128
    10e2:	0d05                	addi	s10,s10,1
    10e4:	00090803          	lb	a6,0(s2)
    10e8:	0100                	addi	s0,sp,128
    10ea:	0905                	addi	s2,s2,1
    10ec:	08090603          	lb	a2,128(s2)
    10f0:	0100                	addi	s0,sp,128
    10f2:	0306                	slli	t1,t1,0x1
    10f4:	7ecc                	flw	fa1,60(a3)
    10f6:	0009                	c.nop	2
    10f8:	0100                	addi	s0,sp,128
    10fa:	1c05                	addi	s8,s8,-31
    10fc:	0200                	addi	s0,sp,256
    10fe:	0104                	addi	s1,sp,128
    1100:	0306                	slli	t1,t1,0x1
    1102:	01b4                	addi	a3,sp,200
    1104:	0209                	addi	tp,tp,2
    1106:	0100                	addi	s0,sp,128
    1108:	0905                	addi	s2,s2,1
    110a:	0200                	addi	s0,sp,256
    110c:	0104                	addi	s1,sp,128
    110e:	0306                	slli	t1,t1,0x1
    1110:	0900                	addi	s0,sp,144
    1112:	0008                	0x8
    1114:	0501                	addi	a0,a0,0
    1116:	0611                	addi	a2,a2,4
    1118:	08095c03          	lhu	s8,128(s2)
    111c:	0100                	addi	s0,sp,128
    111e:	3c05                	jal	b4e <generate_keys+0x260>
    1120:	0306                	slli	t1,t1,0x1
    1122:	0900                	addi	s0,sp,144
    1124:	0000                	unimp
    1126:	0501                	addi	a0,a0,0
    1128:	0326                	slli	t1,t1,0x9
    112a:	0900                	addi	s0,sp,144
    112c:	0002                	c.slli64	zero
    112e:	0501                	addi	a0,a0,0
    1130:	0611                	addi	a2,a2,4
    1132:	06091903          	lh	s2,96(s2)
    1136:	0100                	addi	s0,sp,128
    1138:	2e05                	jal	1468 <product2+0x38>
    113a:	0306                	slli	t1,t1,0x1
    113c:	0900                	addi	s0,sp,144
    113e:	0000                	unimp
    1140:	0501                	addi	a0,a0,0
    1142:	031f 0900 0002      	0x20900031f
    1148:	0501                	addi	a0,a0,0
    114a:	060d                	addi	a2,a2,3
    114c:	06090c03          	lb	s8,96(s2)
    1150:	0100                	addi	s0,sp,128
    1152:	0f05                	addi	t5,t5,1
    1154:	0306                	slli	t1,t1,0x1
    1156:	0900                	addi	s0,sp,144
    1158:	0000                	unimp
    115a:	0501                	addi	a0,a0,0
    115c:	0024                	addi	s1,sp,8
    115e:	0402                	c.slli64	s0
    1160:	0602                	c.slli64	a2
    1162:	02097f03          	0x2097f03
    1166:	0100                	addi	s0,sp,128
    1168:	2605                	jal	1488 <product2+0x58>
    116a:	0200                	addi	s0,sp,256
    116c:	0204                	addi	s1,sp,256
    116e:	0306                	slli	t1,t1,0x1
    1170:	0900                	addi	s0,sp,144
    1172:	0000                	unimp
    1174:	0501                	addi	a0,a0,0
    1176:	000d                	c.nop	3
    1178:	0402                	c.slli64	s0
    117a:	09030603          	lb	a2,144(t1)
    117e:	0409                	addi	s0,s0,2
    1180:	0100                	addi	s0,sp,128
    1182:	1205                	addi	tp,tp,-31
    1184:	0200                	addi	s0,sp,256
    1186:	0304                	addi	s1,sp,384
    1188:	0306                	slli	t1,t1,0x1
    118a:	0900                	addi	s0,sp,144
    118c:	0000                	unimp
    118e:	0501                	addi	a0,a0,0
    1190:	0021                	c.nop	8
    1192:	0402                	c.slli64	s0
    1194:	7f030603          	lb	a2,2032(t1)
    1198:	0a09                	addi	s4,s4,2
    119a:	0100                	addi	s0,sp,128
    119c:	1505                	addi	a0,a0,-31
    119e:	0200                	addi	s0,sp,256
    11a0:	0104                	addi	s1,sp,128
    11a2:	02090003          	lb	zero,32(s2)
    11a6:	0100                	addi	s0,sp,128
    11a8:	0905                	addi	s2,s2,1
    11aa:	0200                	addi	s0,sp,256
    11ac:	0104                	addi	s1,sp,128
    11ae:	0306                	slli	t1,t1,0x1
    11b0:	0900                	addi	s0,sp,144
    11b2:	0000                	unimp
    11b4:	0501                	addi	a0,a0,0
    11b6:	0606                	slli	a2,a2,0x1
    11b8:	06090f03          	lb	t5,96(s2)
    11bc:	0100                	addi	s0,sp,128
    11be:	0905                	addi	s2,s2,1
    11c0:	0200                	addi	s0,sp,256
    11c2:	0304                	addi	s1,sp,384
    11c4:	12090603          	lb	a2,288(s2)
    11c8:	0100                	addi	s0,sp,128
    11ca:	1305                	addi	t1,t1,-31
    11cc:	0200                	addi	s0,sp,256
    11ce:	0304                	addi	s1,sp,384
    11d0:	0306                	slli	t1,t1,0x1
    11d2:	0900                	addi	s0,sp,144
    11d4:	0004                	0x4
    11d6:	0501                	addi	a0,a0,0
    11d8:	001d                	c.nop	7
    11da:	0402                	c.slli64	s0
    11dc:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    11e0:	0004                	0x4
    11e2:	0501                	addi	a0,a0,0
    11e4:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    11e8:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    11ec:	0004                	0x4
    11ee:	0501                	addi	a0,a0,0
    11f0:	0025                	c.nop	9
    11f2:	0402                	c.slli64	s0
    11f4:	097f0303          	lb	t1,151(t5)
    11f8:	0002                	c.slli64	zero
    11fa:	0501                	addi	a0,a0,0
    11fc:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1200:	09010303          	lb	t1,144(sp)
    1204:	0002                	c.slli64	zero
    1206:	0501                	addi	a0,a0,0
    1208:	0025                	c.nop	9
    120a:	0402                	c.slli64	s0
    120c:	7f030603          	lb	a2,2032(t1)
    1210:	0209                	addi	tp,tp,2
    1212:	0100                	addi	s0,sp,128
    1214:	3c05                	jal	c44 <ntru_encyrpt+0x64>
    1216:	02090a03          	lb	s4,32(s2)
    121a:	0100                	addi	s0,sp,128
    121c:	0505                	addi	a0,a0,1
    121e:	00090203          	lb	tp,0(s2)
    1222:	0100                	addi	s0,sp,128
    1224:	00090103          	lb	sp,0(s2)
    1228:	0100                	addi	s0,sp,128
    122a:	00090103          	lb	sp,0(s2)
    122e:	0100                	addi	s0,sp,128
    1230:	0905                	addi	s2,s2,1
    1232:	0306                	slli	t1,t1,0x1
    1234:	0900                	addi	s0,sp,144
    1236:	0000                	unimp
    1238:	0501                	addi	a0,a0,0
    123a:	033c                	addi	a5,sp,392
    123c:	097c                	addi	a5,sp,156
    123e:	0004                	0x4
    1240:	0501                	addi	a0,a0,0
    1242:	0309                	addi	t1,t1,2
    1244:	0904                	addi	s1,sp,144
    1246:	0002                	c.slli64	zero
    1248:	0501                	addi	a0,a0,0
    124a:	033c                	addi	a5,sp,392
    124c:	097c                	addi	a5,sp,156
    124e:	0004                	0x4
    1250:	0501                	addi	a0,a0,0
    1252:	0309                	addi	t1,t1,2
    1254:	0904                	addi	s1,sp,144
    1256:	001c                	0x1c
    1258:	0301                	addi	t1,t1,0
    125a:	0901                	addi	s2,s2,0
    125c:	0006                	c.slli	zero,0x1
    125e:	0301                	addi	t1,t1,0
    1260:	0901                	addi	s2,s2,0
    1262:	0006                	c.slli	zero,0x1
    1264:	0301                	addi	t1,t1,0
    1266:	0902                	c.slli64	s2
    1268:	0006                	c.slli	zero,0x1
    126a:	0301                	addi	t1,t1,0
    126c:	0901                	addi	s2,s2,0
    126e:	0006                	c.slli	zero,0x1
    1270:	0301                	addi	t1,t1,0
    1272:	0901                	addi	s2,s2,0
    1274:	0006                	c.slli	zero,0x1
    1276:	0301                	addi	t1,t1,0
    1278:	0901                	addi	s2,s2,0
    127a:	0006                	c.slli	zero,0x1
    127c:	0501                	addi	a0,a0,0
    127e:	033c                	addi	a5,sp,392
    1280:	0975                	addi	s2,s2,29
    1282:	0004                	0x4
    1284:	0501                	addi	a0,a0,0
    1286:	0309                	addi	t1,t1,2
    1288:	0904                	addi	s1,sp,144
    128a:	0006                	c.slli	zero,0x1
    128c:	0501                	addi	a0,a0,0
    128e:	0605                	addi	a2,a2,1
    1290:	04090103          	lb	sp,64(s2)
    1294:	0100                	addi	s0,sp,128
    1296:	00090103          	lb	sp,0(s2)
    129a:	0100                	addi	s0,sp,128
    129c:	00090203          	lb	tp,0(s2)
    12a0:	0100                	addi	s0,sp,128
    12a2:	00090103          	lb	sp,0(s2)
    12a6:	0100                	addi	s0,sp,128
    12a8:	00090103          	lb	sp,0(s2)
    12ac:	0100                	addi	s0,sp,128
    12ae:	00090103          	lb	sp,0(s2)
    12b2:	0100                	addi	s0,sp,128
    12b4:	0905                	addi	s2,s2,1
    12b6:	0306                	slli	t1,t1,0x1
    12b8:	0900                	addi	s0,sp,144
    12ba:	0000                	unimp
    12bc:	0501                	addi	a0,a0,0
    12be:	0605                	addi	a2,a2,1
    12c0:	02090103          	lb	sp,32(s2)
    12c4:	0100                	addi	s0,sp,128
    12c6:	00090103          	lb	sp,0(s2)
    12ca:	0100                	addi	s0,sp,128
    12cc:	00090103          	lb	sp,0(s2)
    12d0:	0100                	addi	s0,sp,128
    12d2:	00090103          	lb	sp,0(s2)
    12d6:	0100                	addi	s0,sp,128
    12d8:	00090203          	lb	tp,0(s2)
    12dc:	0100                	addi	s0,sp,128
    12de:	00090103          	lb	sp,0(s2)
    12e2:	0100                	addi	s0,sp,128
    12e4:	0c05                	addi	s8,s8,1
    12e6:	0306                	slli	t1,t1,0x1
    12e8:	0900                	addi	s0,sp,144
    12ea:	0000                	unimp
    12ec:	0501                	addi	a0,a0,0
    12ee:	0311                	addi	t1,t1,4
    12f0:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    12f4:	0001                	nop
    12f6:	0402                	c.slli64	s0
    12f8:	0601                	addi	a2,a2,0
    12fa:	08097d03          	0x8097d03
    12fe:	0100                	addi	s0,sp,128
    1300:	0505                	addi	a0,a0,1
    1302:	0200                	addi	s0,sp,256
    1304:	0104                	addi	s1,sp,128
    1306:	0306                	slli	t1,t1,0x1
    1308:	0900                	addi	s0,sp,144
    130a:	0000                	unimp
    130c:	0601                	addi	a2,a2,0
    130e:	04090703          	lb	a4,64(s2)
    1312:	0100                	addi	s0,sp,128
    1314:	08090203          	lb	tp,128(s2)
    1318:	0100                	addi	s0,sp,128
    131a:	08090503          	lb	a0,128(s2)
    131e:	0100                	addi	s0,sp,128
    1320:	0d05                	addi	s10,s10,1
    1322:	0306                	slli	t1,t1,0x1
    1324:	0900                	addi	s0,sp,144
    1326:	0000                	unimp
    1328:	0501                	addi	a0,a0,0
    132a:	0605                	addi	a2,a2,1
    132c:	06090303          	lb	t1,96(s2)
    1330:	0100                	addi	s0,sp,128
    1332:	0b05                	addi	s6,s6,1
    1334:	00090003          	lb	zero,0(s2)
    1338:	0100                	addi	s0,sp,128
    133a:	2405                	jal	155a <product2+0x12a>
    133c:	0306                	slli	t1,t1,0x1
    133e:	091a                	slli	s2,s2,0x6
    1340:	0000                	unimp
    1342:	0501                	addi	a0,a0,0
    1344:	0305                	addi	t1,t1,1
    1346:	093d                	addi	s2,s2,15
    1348:	0008                	0x8
    134a:	0501                	addi	a0,a0,0
    134c:	0609                	addi	a2,a2,2
    134e:	097fab03          	lw	s6,151(t6) # 97 <array_add+0x5>
    1352:	0008                	0x8
    1354:	0501                	addi	a0,a0,0
    1356:	0305                	addi	t1,t1,1
    1358:	0909                	addi	s2,s2,2
    135a:	0000                	unimp
    135c:	0301                	addi	t1,t1,0
    135e:	090a                	slli	s2,s2,0x2
    1360:	0008                	0x8
    1362:	0501                	addi	a0,a0,0
    1364:	0309                	addi	t1,t1,2
    1366:	00080903          	lb	s2,0(a6)
    136a:	0501                	addi	a0,a0,0
    136c:	0003060f          	0x3060f
    1370:	0009                	c.nop	2
    1372:	0100                	addi	s0,sp,128
    1374:	0905                	addi	s2,s2,1
    1376:	0306                	slli	t1,t1,0x1
    1378:	0902                	c.slli64	s2
    137a:	000c                	0xc
    137c:	0501                	addi	a0,a0,0
    137e:	0019                	c.nop	6
    1380:	0402                	c.slli64	s0
    1382:	0301                	addi	t1,t1,0
    1384:	0900                	addi	s0,sp,144
    1386:	0004                	0x4
    1388:	0501                	addi	a0,a0,0
    138a:	0009                	c.nop	2
    138c:	0402                	c.slli64	s0
    138e:	0601                	addi	a2,a2,0
    1390:	00090003          	lb	zero,0(s2)
    1394:	0100                	addi	s0,sp,128
    1396:	0505                	addi	a0,a0,1
    1398:	0306                	slli	t1,t1,0x1
    139a:	0909                	addi	s2,s2,2
    139c:	0008                	0x8
    139e:	0301                	addi	t1,t1,0
    13a0:	0902                	c.slli64	s2
    13a2:	0008                	0x8
    13a4:	0301                	addi	t1,t1,0
    13a6:	0909                	addi	s2,s2,2
    13a8:	0008                	0x8
    13aa:	0501                	addi	a0,a0,0
    13ac:	0309                	addi	t1,t1,2
    13ae:	0902                	c.slli64	s2
    13b0:	0008                	0x8
    13b2:	0501                	addi	a0,a0,0
    13b4:	0610                	addi	a2,sp,768
    13b6:	00090003          	lb	zero,0(s2)
    13ba:	0100                	addi	s0,sp,128
    13bc:	0505                	addi	a0,a0,1
    13be:	0306                	slli	t1,t1,0x1
    13c0:	0905                	addi	s2,s2,1
    13c2:	000e                	c.slli	zero,0x3
    13c4:	0301                	addi	t1,t1,0
    13c6:	0909                	addi	s2,s2,2
    13c8:	0006                	c.slli	zero,0x1
    13ca:	0501                	addi	a0,a0,0
    13cc:	0309                	addi	t1,t1,2
    13ce:	0904                	addi	s1,sp,144
    13d0:	0008                	0x8
    13d2:	0501                	addi	a0,a0,0
    13d4:	0610                	addi	a2,sp,768
    13d6:	00090003          	lb	zero,0(s2)
    13da:	0100                	addi	s0,sp,128
    13dc:	0505                	addi	a0,a0,1
    13de:	0306                	slli	t1,t1,0x1
    13e0:	0905                	addi	s2,s2,1
    13e2:	0010                	0x10
    13e4:	0301                	addi	t1,t1,0
    13e6:	090a                	slli	s2,s2,0x2
    13e8:	0006                	c.slli	zero,0x1
    13ea:	0301                	addi	t1,t1,0
    13ec:	0906                	slli	s2,s2,0x1
    13ee:	0008                	0x8
    13f0:	0301                	addi	t1,t1,0
    13f2:	0902                	c.slli64	s2
    13f4:	0008                	0x8
    13f6:	0301                	addi	t1,t1,0
    13f8:	0908                	addi	a0,sp,144
    13fa:	0008                	0x8
    13fc:	0501                	addi	a0,a0,0
    13fe:	0301                	addi	t1,t1,0
    1400:	0904                	addi	s1,sp,144
    1402:	0008                	0x8
    1404:	0301                	addi	t1,t1,0
    1406:	0902                	c.slli64	s2
    1408:	0008                	0x8
    140a:	0301                	addi	t1,t1,0
    140c:	0902                	c.slli64	s2
    140e:	0008                	0x8
    1410:	0301                	addi	t1,t1,0
    1412:	0902                	c.slli64	s2
    1414:	0008                	0x8
    1416:	0501                	addi	a0,a0,0
    1418:	0309                	addi	t1,t1,2
    141a:	0902                	c.slli64	s2
    141c:	0008                	0x8
    141e:	0501                	addi	a0,a0,0
    1420:	0612                	slli	a2,a2,0x4
    1422:	097f9503          	lh	a0,151(t6)
    1426:	0000                	unimp
    1428:	0501                	addi	a0,a0,0
    142a:	0310                	addi	a2,sp,384
    142c:	020900eb          	0x20900eb
    1430:	0100                	addi	s0,sp,128
    1432:	1505                	addi	a0,a0,-31
    1434:	0200                	addi	s0,sp,256
    1436:	0104                	addi	s1,sp,128
    1438:	0306                	slli	t1,t1,0x1
    143a:	0900                	addi	s0,sp,144
    143c:	0002                	c.slli64	zero
    143e:	0501                	addi	a0,a0,0
    1440:	0009                	c.nop	2
    1442:	0402                	c.slli64	s0
    1444:	0601                	addi	a2,a2,0
    1446:	00090003          	lb	zero,0(s2)
    144a:	0100                	addi	s0,sp,128
    144c:	0b05                	addi	s6,s6,1
    144e:	0306                	slli	t1,t1,0x1
    1450:	04097f93          	andi	t6,s2,64
    1454:	0100                	addi	s0,sp,128
    1456:	1005                	c.nop	-31
    1458:	0306                	slli	t1,t1,0x1
    145a:	00f8                	addi	a4,sp,76
    145c:	0409                	addi	s0,s0,2
    145e:	0100                	addi	s0,sp,128
    1460:	02090103          	lb	sp,32(s2)
    1464:	0100                	addi	s0,sp,128
    1466:	1505                	addi	a0,a0,-31
    1468:	0200                	addi	s0,sp,256
    146a:	0104                	addi	s1,sp,128
    146c:	0306                	slli	t1,t1,0x1
    146e:	097f                	0x97f
    1470:	0002                	c.slli64	zero
    1472:	0501                	addi	a0,a0,0
    1474:	0009                	c.nop	2
    1476:	0402                	c.slli64	s0
    1478:	0601                	addi	a2,a2,0
    147a:	00090003          	lb	zero,0(s2)
    147e:	0100                	addi	s0,sp,128
    1480:	1505                	addi	a0,a0,-31
    1482:	0200                	addi	s0,sp,256
    1484:	0104                	addi	s1,sp,128
    1486:	0306                	slli	t1,t1,0x1
    1488:	090c                	addi	a1,sp,144
    148a:	000c                	0xc
    148c:	0501                	addi	a0,a0,0
    148e:	0009                	c.nop	2
    1490:	0402                	c.slli64	s0
    1492:	0601                	addi	a2,a2,0
    1494:	00090003          	lb	zero,0(s2)
    1498:	0100                	addi	s0,sp,128
    149a:	0306                	slli	t1,t1,0x1
    149c:	0905                	addi	s2,s2,1
    149e:	0004                	0x4
    14a0:	0301                	addi	t1,t1,0
    14a2:	0901                	addi	s2,s2,0
    14a4:	0000                	unimp
    14a6:	0501                	addi	a0,a0,0
    14a8:	0605                	addi	a2,a2,1
    14aa:	00090103          	lb	sp,0(s2)
    14ae:	0100                	addi	s0,sp,128
    14b0:	0905                	addi	s2,s2,1
    14b2:	0200                	addi	s0,sp,256
    14b4:	0304                	addi	s1,sp,384
    14b6:	0306                	slli	t1,t1,0x1
    14b8:	2a097ee7          	0x2a097ee7
    14bc:	0100                	addi	s0,sp,128
    14be:	1105                	addi	sp,sp,-31
    14c0:	0200                	addi	s0,sp,256
    14c2:	0304                	addi	s1,sp,384
    14c4:	0306                	slli	t1,t1,0x1
    14c6:	0900                	addi	s0,sp,144
    14c8:	0004                	0x4
    14ca:	0001                	nop
    14cc:	0402                	c.slli64	s0
    14ce:	09010303          	lb	t1,144(sp)
    14d2:	0004                	0x4
    14d4:	0001                	nop
    14d6:	0402                	c.slli64	s0
    14d8:	097f0303          	lb	t1,151(t5)
    14dc:	0002                	c.slli64	zero
    14de:	0501                	addi	a0,a0,0
    14e0:	0009                	c.nop	2
    14e2:	0402                	c.slli64	s0
    14e4:	01030603          	lb	a2,16(t1)
    14e8:	0409                	addi	s0,s0,2
    14ea:	0100                	addi	s0,sp,128
    14ec:	1105                	addi	sp,sp,-31
    14ee:	0200                	addi	s0,sp,256
    14f0:	0304                	addi	s1,sp,384
    14f2:	0306                	slli	t1,t1,0x1
    14f4:	0900                	addi	s0,sp,144
    14f6:	0000                	unimp
    14f8:	0501                	addi	a0,a0,0
    14fa:	0402001b          	0x402001b
    14fe:	7c030603          	lb	a2,1984(t1)
    1502:	0409                	addi	s0,s0,2
    1504:	0100                	addi	s0,sp,128
    1506:	0d05                	addi	s10,s10,1
    1508:	0200                	addi	s0,sp,256
    150a:	0304                	addi	s1,sp,384
    150c:	04092c03          	lw	s8,64(s2)
    1510:	0100                	addi	s0,sp,128
    1512:	2205                	jal	1632 <product2+0x202>
    1514:	0200                	addi	s0,sp,256
    1516:	0304                	addi	s1,sp,384
    1518:	0306                	slli	t1,t1,0x1
    151a:	0900                	addi	s0,sp,144
    151c:	0000                	unimp
    151e:	0501                	addi	a0,a0,0
    1520:	002a                	c.slli	zero,0xa
    1522:	0402                	c.slli64	s0
    1524:	097f0303          	lb	t1,151(t5)
    1528:	0008                	0x8
    152a:	0501                	addi	a0,a0,0
    152c:	001d                	c.nop	7
    152e:	0402                	c.slli64	s0
    1530:	09010303          	lb	t1,144(sp)
    1534:	0004                	0x4
    1536:	0501                	addi	a0,a0,0
    1538:	002a                	c.slli	zero,0xa
    153a:	0402                	c.slli64	s0
    153c:	7f030603          	lb	a2,2032(t1)
    1540:	0409                	addi	s0,s0,2
    1542:	0100                	addi	s0,sp,128
    1544:	0f05                	addi	t5,t5,1
    1546:	0200                	addi	s0,sp,256
    1548:	0304                	addi	s1,sp,384
    154a:	0900d803          	lhu	a6,144(ra)
    154e:	0002                	c.slli64	zero
    1550:	0501                	addi	a0,a0,0
    1552:	04020017          	auipc	zero,0x4020
    1556:	00030603          	lb	a2,0(t1)
    155a:	0409                	addi	s0,s0,2
    155c:	0100                	addi	s0,sp,128
    155e:	1b05                	addi	s6,s6,-31
    1560:	0200                	addi	s0,sp,256
    1562:	0304                	addi	s1,sp,384
    1564:	04090103          	lb	sp,64(s2)
    1568:	0100                	addi	s0,sp,128
    156a:	1605                	addi	a2,a2,-31
    156c:	0200                	addi	s0,sp,256
    156e:	0304                	addi	s1,sp,384
    1570:	02090003          	lb	zero,32(s2)
    1574:	0100                	addi	s0,sp,128
    1576:	1705                	addi	a4,a4,-31
    1578:	0200                	addi	s0,sp,256
    157a:	0304                	addi	s1,sp,384
    157c:	02097f03          	0x2097f03
    1580:	0100                	addi	s0,sp,128
    1582:	0d05                	addi	s10,s10,1
    1584:	0200                	addi	s0,sp,256
    1586:	0304                	addi	s1,sp,384
    1588:	0306                	slli	t1,t1,0x1
    158a:	0901                	addi	s2,s2,0
    158c:	0004                	0x4
    158e:	0501                	addi	a0,a0,0
    1590:	0020                	addi	s0,sp,8
    1592:	0402                	c.slli64	s0
    1594:	7a030603          	lb	a2,1952(t1)
    1598:	0009                	c.nop	2
    159a:	0100                	addi	s0,sp,128
    159c:	1605                	addi	a2,a2,-31
    159e:	0200                	addi	s0,sp,256
    15a0:	0304                	addi	s1,sp,384
    15a2:	02090603          	lb	a2,32(s2)
    15a6:	0100                	addi	s0,sp,128
    15a8:	2005                	jal	15c8 <product2+0x198>
    15aa:	0200                	addi	s0,sp,256
    15ac:	0304                	addi	s1,sp,384
    15ae:	0306                	slli	t1,t1,0x1
    15b0:	097a                	slli	s2,s2,0x1e
    15b2:	0002                	c.slli64	zero
    15b4:	0501                	addi	a0,a0,0
    15b6:	030d                	addi	t1,t1,3
    15b8:	090c                	addi	a1,sp,144
    15ba:	0002                	c.slli64	zero
    15bc:	0501                	addi	a0,a0,0
    15be:	0003061b          	0x3061b
    15c2:	0009                	c.nop	2
    15c4:	0100                	addi	s0,sp,128
    15c6:	2005                	jal	15e6 <product2+0x1b6>
    15c8:	08090003          	lb	zero,128(s2)
    15cc:	0100                	addi	s0,sp,128
    15ce:	1005                	c.nop	-31
    15d0:	04090003          	lb	zero,64(s2)
    15d4:	0100                	addi	s0,sp,128
    15d6:	1e05                	addi	t3,t3,-31
    15d8:	0200                	addi	s0,sp,256
    15da:	0204                	addi	s1,sp,256
    15dc:	0306                	slli	t1,t1,0x1
    15de:	097f                	0x97f
    15e0:	0004                	0x4
    15e2:	0501                	addi	a0,a0,0
    15e4:	000d                	c.nop	3
    15e6:	0402                	c.slli64	s0
    15e8:	090d0303          	lb	t1,144(s10)
    15ec:	0004                	0x4
    15ee:	0501                	addi	a0,a0,0
    15f0:	0020                	addi	s0,sp,8
    15f2:	0402                	c.slli64	s0
    15f4:	00030603          	lb	a2,0(t1)
    15f8:	0009                	c.nop	2
    15fa:	0100                	addi	s0,sp,128
    15fc:	0200                	addi	s0,sp,256
    15fe:	0304                	addi	s1,sp,384
    1600:	02097f03          	0x2097f03
    1604:	0100                	addi	s0,sp,128
    1606:	0200                	addi	s0,sp,256
    1608:	0304                	addi	s1,sp,384
    160a:	04090103          	lb	sp,64(s2)
    160e:	0100                	addi	s0,sp,128
    1610:	2505                	jal	1c30 <random_keys+0x1c0>
    1612:	0200                	addi	s0,sp,256
    1614:	0304                	addi	s1,sp,384
    1616:	04090003          	lb	zero,64(s2)
    161a:	0100                	addi	s0,sp,128
    161c:	1505                	addi	a0,a0,-31
    161e:	0200                	addi	s0,sp,256
    1620:	0304                	addi	s1,sp,384
    1622:	04090003          	lb	zero,64(s2)
    1626:	0100                	addi	s0,sp,128
    1628:	2005                	jal	1648 <product2+0x218>
    162a:	0200                	addi	s0,sp,256
    162c:	0304                	addi	s1,sp,384
    162e:	0306                	slli	t1,t1,0x1
    1630:	097f                	0x97f
    1632:	0004                	0x4
    1634:	0501                	addi	a0,a0,0
    1636:	0328                	addi	a0,sp,392
    1638:	090c                	addi	a1,sp,144
    163a:	0002                	c.slli64	zero
    163c:	0501                	addi	a0,a0,0
    163e:	0305                	addi	t1,t1,1
    1640:	0902                	c.slli64	s2
    1642:	0000                	unimp
    1644:	0501                	addi	a0,a0,0
    1646:	0628                	addi	a0,sp,776
    1648:	00097e03          	0x97e03
    164c:	0100                	addi	s0,sp,128
    164e:	36090003          	lb	zero,864(s2)
    1652:	0100                	addi	s0,sp,128
    1654:	0905                	addi	s2,s2,1
    1656:	04090203          	lb	tp,64(s2)
    165a:	0100                	addi	s0,sp,128
    165c:	10090103          	lb	sp,256(s2)
    1660:	0100                	addi	s0,sp,128
    1662:	0a097f03          	0xa097f03
    1666:	0100                	addi	s0,sp,128
    1668:	0505                	addi	a0,a0,1
    166a:	0306                	slli	t1,t1,0x1
    166c:	0901                	addi	s2,s2,0
    166e:	006c                	addi	a1,sp,12
    1670:	0501                	addi	a0,a0,0
    1672:	0610                	addi	a2,sp,768
    1674:	00090603          	lb	a2,0(s2)
    1678:	0100                	addi	s0,sp,128
    167a:	0905                	addi	s2,s2,1
    167c:	04097a03          	0x4097a03
    1680:	0100                	addi	s0,sp,128
    1682:	02090603          	lb	a2,32(s2)
    1686:	0100                	addi	s0,sp,128
    1688:	0e05                	addi	t3,t3,1
    168a:	0e090503          	lb	a0,224(s2)
    168e:	0100                	addi	s0,sp,128
    1690:	0905                	addi	s2,s2,1
    1692:	0a097503          	0xa097503
    1696:	0100                	addi	s0,sp,128
    1698:	0505                	addi	a0,a0,1
    169a:	0306                	slli	t1,t1,0x1
    169c:	0902                	c.slli64	s2
    169e:	0064                	addi	s1,sp,12
    16a0:	0301                	addi	t1,t1,0
    16a2:	0901                	addi	s2,s2,0
    16a4:	0000                	unimp
    16a6:	0301                	addi	t1,t1,0
    16a8:	0901                	addi	s2,s2,0
    16aa:	0000                	unimp
    16ac:	0301                	addi	t1,t1,0
    16ae:	0901                	addi	s2,s2,0
    16b0:	0000                	unimp
    16b2:	0301                	addi	t1,t1,0
    16b4:	0901                	addi	s2,s2,0
    16b6:	0000                	unimp
    16b8:	0301                	addi	t1,t1,0
    16ba:	0901                	addi	s2,s2,0
    16bc:	0000                	unimp
    16be:	0301                	addi	t1,t1,0
    16c0:	0901                	addi	s2,s2,0
    16c2:	0000                	unimp
    16c4:	0301                	addi	t1,t1,0
    16c6:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    16ca:	0301                	addi	t1,t1,0
    16cc:	0901                	addi	s2,s2,0
    16ce:	0000                	unimp
    16d0:	0501                	addi	a0,a0,0
    16d2:	060e                	slli	a2,a2,0x3
    16d4:	00090003          	lb	zero,0(s2)
    16d8:	0100                	addi	s0,sp,128
    16da:	0505                	addi	a0,a0,1
    16dc:	0306                	slli	t1,t1,0x1
    16de:	0902                	c.slli64	s2
    16e0:	0004                	0x4
    16e2:	0501                	addi	a0,a0,0
    16e4:	0003060b          	0x3060b
    16e8:	0009                	c.nop	2
    16ea:	0100                	addi	s0,sp,128
    16ec:	1005                	c.nop	-31
    16ee:	0200                	addi	s0,sp,256
    16f0:	0104                	addi	s1,sp,128
    16f2:	0306                	slli	t1,t1,0x1
    16f4:	0900                	addi	s0,sp,144
    16f6:	0002                	c.slli64	zero
    16f8:	0501                	addi	a0,a0,0
    16fa:	0005                	c.nop	1
    16fc:	0402                	c.slli64	s0
    16fe:	0601                	addi	a2,a2,0
    1700:	00090003          	lb	zero,0(s2)
    1704:	0100                	addi	s0,sp,128
    1706:	06090603          	lb	a2,96(s2)
    170a:	0100                	addi	s0,sp,128
    170c:	1105                	addi	sp,sp,-31
    170e:	0200                	addi	s0,sp,256
    1710:	0104                	addi	s1,sp,128
    1712:	0306                	slli	t1,t1,0x1
    1714:	0900                	addi	s0,sp,144
    1716:	0004                	0x4
    1718:	0501                	addi	a0,a0,0
    171a:	0005                	c.nop	1
    171c:	0402                	c.slli64	s0
    171e:	0601                	addi	a2,a2,0
    1720:	00090003          	lb	zero,0(s2)
    1724:	0100                	addi	s0,sp,128
    1726:	0b05                	addi	s6,s6,1
    1728:	04090703          	lb	a4,64(s2)
    172c:	0100                	addi	s0,sp,128
    172e:	1805                	addi	a6,a6,-31
    1730:	02090103          	lb	sp,32(s2)
    1734:	0100                	addi	s0,sp,128
    1736:	1005                	c.nop	-31
    1738:	0200                	addi	s0,sp,256
    173a:	0104                	addi	s1,sp,128
    173c:	0306                	slli	t1,t1,0x1
    173e:	097f                	0x97f
    1740:	0008                	0x8
    1742:	0501                	addi	a0,a0,0
    1744:	0005                	c.nop	1
    1746:	0402                	c.slli64	s0
    1748:	0601                	addi	a2,a2,0
    174a:	00090003          	lb	zero,0(s2)
    174e:	0100                	addi	s0,sp,128
    1750:	1605                	addi	a2,a2,-31
    1752:	08090503          	lb	a0,128(s2)
    1756:	0100                	addi	s0,sp,128
    1758:	1805                	addi	a6,a6,-31
    175a:	08090103          	lb	sp,128(s2)
    175e:	0100                	addi	s0,sp,128
    1760:	1005                	c.nop	-31
    1762:	0200                	addi	s0,sp,256
    1764:	0104                	addi	s1,sp,128
    1766:	0306                	slli	t1,t1,0x1
    1768:	097f                	0x97f
    176a:	0008                	0x8
    176c:	0501                	addi	a0,a0,0
    176e:	0005                	c.nop	1
    1770:	0402                	c.slli64	s0
    1772:	0601                	addi	a2,a2,0
    1774:	00090003          	lb	zero,0(s2)
    1778:	0100                	addi	s0,sp,128
    177a:	0306                	slli	t1,t1,0x1
    177c:	0905                	addi	s2,s2,1
    177e:	0004                	0x4
    1780:	0501                	addi	a0,a0,0
    1782:	061a                	slli	a2,a2,0x6
    1784:	00090203          	lb	tp,0(s2)
    1788:	0100                	addi	s0,sp,128
    178a:	0a05                	addi	s4,s4,1
    178c:	06097e03          	0x6097e03
    1790:	0100                	addi	s0,sp,128
    1792:	0505                	addi	a0,a0,1
    1794:	0306                	slli	t1,t1,0x1
    1796:	0902                	c.slli64	s2
    1798:	000c                	0xc
    179a:	0501                	addi	a0,a0,0
    179c:	0618                	addi	a4,sp,768
    179e:	02090103          	lb	sp,32(s2)
    17a2:	0100                	addi	s0,sp,128
    17a4:	1405                	addi	s0,s0,-31
    17a6:	0200                	addi	s0,sp,256
    17a8:	0104                	addi	s1,sp,128
    17aa:	0306                	slli	t1,t1,0x1
    17ac:	097f                	0x97f
    17ae:	0008                	0x8
    17b0:	0501                	addi	a0,a0,0
    17b2:	0005                	c.nop	1
    17b4:	0402                	c.slli64	s0
    17b6:	0601                	addi	a2,a2,0
    17b8:	00090003          	lb	zero,0(s2)
    17bc:	0100                	addi	s0,sp,128
    17be:	0306                	slli	t1,t1,0x1
    17c0:	0906                	slli	s2,s2,0x1
    17c2:	0004                	0x4
    17c4:	0501                	addi	a0,a0,0
    17c6:	060a                	slli	a2,a2,0x2
    17c8:	00090003          	lb	zero,0(s2)
    17cc:	0100                	addi	s0,sp,128
    17ce:	0505                	addi	a0,a0,1
    17d0:	0306                	slli	t1,t1,0x1
    17d2:	0904                	addi	s1,sp,144
    17d4:	000c                	0xc
    17d6:	0501                	addi	a0,a0,0
    17d8:	061a                	slli	a2,a2,0x6
    17da:	06090003          	lb	zero,96(s2)
    17de:	0100                	addi	s0,sp,128
    17e0:	1805                	addi	a6,a6,-31
    17e2:	02090103          	lb	sp,32(s2)
    17e6:	0100                	addi	s0,sp,128
    17e8:	1405                	addi	s0,s0,-31
    17ea:	0200                	addi	s0,sp,256
    17ec:	0104                	addi	s1,sp,128
    17ee:	0306                	slli	t1,t1,0x1
    17f0:	097f                	0x97f
    17f2:	0008                	0x8
    17f4:	0501                	addi	a0,a0,0
    17f6:	0005                	c.nop	1
    17f8:	0402                	c.slli64	s0
    17fa:	0601                	addi	a2,a2,0
    17fc:	00090003          	lb	zero,0(s2)
    1800:	0100                	addi	s0,sp,128
    1802:	0306                	slli	t1,t1,0x1
    1804:	0905                	addi	s2,s2,1
    1806:	0004                	0x4
    1808:	0501                	addi	a0,a0,0
    180a:	060a                	slli	a2,a2,0x2
    180c:	00090003          	lb	zero,0(s2)
    1810:	0100                	addi	s0,sp,128
    1812:	0505                	addi	a0,a0,1
    1814:	0306                	slli	t1,t1,0x1
    1816:	0904                	addi	s1,sp,144
    1818:	000a                	c.slli	zero,0x2
    181a:	0501                	addi	a0,a0,0
    181c:	0003060b          	0x3060b
    1820:	0209                	addi	tp,tp,2
    1822:	0100                	addi	s0,sp,128
    1824:	1805                	addi	a6,a6,-31
    1826:	02090003          	lb	zero,32(s2)
    182a:	0100                	addi	s0,sp,128
    182c:	1005                	c.nop	-31
    182e:	0200                	addi	s0,sp,256
    1830:	0104                	addi	s1,sp,128
    1832:	0306                	slli	t1,t1,0x1
    1834:	0900                	addi	s0,sp,144
    1836:	0004                	0x4
    1838:	0501                	addi	a0,a0,0
    183a:	0005                	c.nop	1
    183c:	0402                	c.slli64	s0
    183e:	0601                	addi	a2,a2,0
    1840:	00090003          	lb	zero,0(s2)
    1844:	0100                	addi	s0,sp,128
    1846:	0306                	slli	t1,t1,0x1
    1848:	0906                	slli	s2,s2,0x1
    184a:	0004                	0x4
    184c:	0501                	addi	a0,a0,0
    184e:	060a                	slli	a2,a2,0x2
    1850:	00090003          	lb	zero,0(s2)
    1854:	0100                	addi	s0,sp,128
    1856:	0505                	addi	a0,a0,1
    1858:	0306                	slli	t1,t1,0x1
    185a:	0904                	addi	s1,sp,144
    185c:	0008                	0x8
    185e:	0501                	addi	a0,a0,0
    1860:	061a                	slli	a2,a2,0x6
    1862:	00090003          	lb	zero,0(s2)
    1866:	0100                	addi	s0,sp,128
    1868:	1805                	addi	a6,a6,-31
    186a:	0a090103          	lb	sp,160(s2)
    186e:	0100                	addi	s0,sp,128
    1870:	1405                	addi	s0,s0,-31
    1872:	0200                	addi	s0,sp,256
    1874:	0104                	addi	s1,sp,128
    1876:	0306                	slli	t1,t1,0x1
    1878:	097f                	0x97f
    187a:	0008                	0x8
    187c:	0501                	addi	a0,a0,0
    187e:	0005                	c.nop	1
    1880:	0402                	c.slli64	s0
    1882:	0601                	addi	a2,a2,0
    1884:	02090003          	lb	zero,32(s2)
    1888:	0100                	addi	s0,sp,128
    188a:	1a05                	addi	s4,s4,-31
    188c:	04090503          	lb	a0,64(s2)
    1890:	0100                	addi	s0,sp,128
    1892:	1805                	addi	a6,a6,-31
    1894:	04090103          	lb	sp,64(s2)
    1898:	0100                	addi	s0,sp,128
    189a:	1a05                	addi	s4,s4,-31
    189c:	08097f03          	0x8097f03
    18a0:	0100                	addi	s0,sp,128
    18a2:	1405                	addi	s0,s0,-31
    18a4:	0200                	addi	s0,sp,256
    18a6:	0104                	addi	s1,sp,128
    18a8:	0306                	slli	t1,t1,0x1
    18aa:	0900                	addi	s0,sp,144
    18ac:	0008                	0x8
    18ae:	0501                	addi	a0,a0,0
    18b0:	0005                	c.nop	1
    18b2:	0402                	c.slli64	s0
    18b4:	0601                	addi	a2,a2,0
    18b6:	00090003          	lb	zero,0(s2)
    18ba:	0100                	addi	s0,sp,128
    18bc:	0306                	slli	t1,t1,0x1
    18be:	0906                	slli	s2,s2,0x1
    18c0:	0004                	0x4
    18c2:	0301                	addi	t1,t1,0
    18c4:	0902                	c.slli64	s2
    18c6:	0000                	unimp
    18c8:	0501                	addi	a0,a0,0
    18ca:	0601                	addi	a2,a2,0
    18cc:	00090103          	lb	sp,0(s2)
    18d0:	0100                	addi	s0,sp,128
    18d2:	0905                	addi	s2,s2,1
    18d4:	0200                	addi	s0,sp,256
    18d6:	0304                	addi	s1,sp,384
    18d8:	0306                	slli	t1,t1,0x1
    18da:	7fbd                	lui	t6,0xfffef
    18dc:	4009                	c.li	zero,2
    18de:	0100                	addi	s0,sp,128
    18e0:	1205                	addi	tp,tp,-31
    18e2:	0200                	addi	s0,sp,256
    18e4:	0304                	addi	s1,sp,384
    18e6:	0306                	slli	t1,t1,0x1
    18e8:	0900                	addi	s0,sp,144
    18ea:	0000                	unimp
    18ec:	0501                	addi	a0,a0,0
    18ee:	04020017          	auipc	zero,0x4020
    18f2:	7f030603          	lb	a2,2032(t1)
    18f6:	0a09                	addi	s4,s4,2
    18f8:	0100                	addi	s0,sp,128
    18fa:	0905                	addi	s2,s2,1
    18fc:	0200                	addi	s0,sp,256
    18fe:	0304                	addi	s1,sp,384
    1900:	04090703          	lb	a4,64(s2)
    1904:	0100                	addi	s0,sp,128
    1906:	0e05                	addi	t3,t3,1
    1908:	0200                	addi	s0,sp,256
    190a:	0304                	addi	s1,sp,384
    190c:	0306                	slli	t1,t1,0x1
    190e:	0900                	addi	s0,sp,144
    1910:	0004                	0x4
    1912:	0501                	addi	a0,a0,0
    1914:	0009                	c.nop	2
    1916:	0402                	c.slli64	s0
    1918:	01030603          	lb	a2,16(t1)
    191c:	0a09                	addi	s4,s4,2
    191e:	0100                	addi	s0,sp,128
    1920:	0e05                	addi	t3,t3,1
    1922:	0200                	addi	s0,sp,256
    1924:	0304                	addi	s1,sp,384
    1926:	0306                	slli	t1,t1,0x1
    1928:	0900                	addi	s0,sp,144
    192a:	0000                	unimp
    192c:	0501                	addi	a0,a0,0
    192e:	0019                	c.nop	6
    1930:	0402                	c.slli64	s0
    1932:	7e030603          	lb	a2,2016(t1)
    1936:	0a09                	addi	s4,s4,2
    1938:	0100                	addi	s0,sp,128
    193a:	0905                	addi	s2,s2,1
    193c:	0200                	addi	s0,sp,256
    193e:	0304                	addi	s1,sp,384
    1940:	04090803          	lb	a6,64(s2)
    1944:	0100                	addi	s0,sp,128
    1946:	1b05                	addi	s6,s6,-31
    1948:	0200                	addi	s0,sp,256
    194a:	0304                	addi	s1,sp,384
    194c:	0306                	slli	t1,t1,0x1
    194e:	0900                	addi	s0,sp,144
    1950:	0004                	0x4
    1952:	0501                	addi	a0,a0,0
    1954:	0018                	0x18
    1956:	0402                	c.slli64	s0
    1958:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    195c:	0004                	0x4
    195e:	0501                	addi	a0,a0,0
    1960:	0402001b          	0x402001b
    1964:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1968:	0004                	0x4
    196a:	0501                	addi	a0,a0,0
    196c:	0018                	0x18
    196e:	0402                	c.slli64	s0
    1970:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1974:	0002                	c.slli64	zero
    1976:	0501                	addi	a0,a0,0
    1978:	04020017          	auipc	zero,0x4020
    197c:	097f0303          	lb	t1,151(t5)
    1980:	0002                	c.slli64	zero
    1982:	0501                	addi	a0,a0,0
    1984:	0018                	0x18
    1986:	0402                	c.slli64	s0
    1988:	09010303          	lb	t1,144(sp)
    198c:	0002                	c.slli64	zero
    198e:	0501                	addi	a0,a0,0
    1990:	04020017          	auipc	zero,0x4020
    1994:	7f030603          	lb	a2,2032(t1)
    1998:	0209                	addi	tp,tp,2
    199a:	0100                	addi	s0,sp,128
    199c:	0905                	addi	s2,s2,1
    199e:	0200                	addi	s0,sp,256
    19a0:	0304                	addi	s1,sp,384
    19a2:	02090603          	lb	a2,32(s2)
    19a6:	0100                	addi	s0,sp,128
    19a8:	1805                	addi	a6,a6,-31
    19aa:	0200                	addi	s0,sp,256
    19ac:	0304                	addi	s1,sp,384
    19ae:	0306                	slli	t1,t1,0x1
    19b0:	0900                	addi	s0,sp,144
    19b2:	0000                	unimp
    19b4:	0501                	addi	a0,a0,0
    19b6:	0402001b          	0x402001b
    19ba:	7f030603          	lb	a2,2032(t1)
    19be:	0a09                	addi	s4,s4,2
    19c0:	0100                	addi	s0,sp,128
    19c2:	0905                	addi	s2,s2,1
    19c4:	0200                	addi	s0,sp,256
    19c6:	0304                	addi	s1,sp,384
    19c8:	06090803          	lb	a6,96(s2)
    19cc:	0100                	addi	s0,sp,128
    19ce:	1c05                	addi	s8,s8,-31
    19d0:	0200                	addi	s0,sp,256
    19d2:	0304                	addi	s1,sp,384
    19d4:	0306                	slli	t1,t1,0x1
    19d6:	0900                	addi	s0,sp,144
    19d8:	0000                	unimp
    19da:	0501                	addi	a0,a0,0
    19dc:	0018                	0x18
    19de:	0402                	c.slli64	s0
    19e0:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    19e4:	0002                	c.slli64	zero
    19e6:	0501                	addi	a0,a0,0
    19e8:	001f 0402 0603      	0x6030402001f
    19ee:	08097f03          	0x8097f03
    19f2:	0100                	addi	s0,sp,128
    19f4:	0905                	addi	s2,s2,1
    19f6:	0200                	addi	s0,sp,256
    19f8:	0304                	addi	s1,sp,384
    19fa:	06090b03          	lb	s6,96(s2)
    19fe:	0100                	addi	s0,sp,128
    1a00:	1c05                	addi	s8,s8,-31
    1a02:	0200                	addi	s0,sp,256
    1a04:	0304                	addi	s1,sp,384
    1a06:	0306                	slli	t1,t1,0x1
    1a08:	0900                	addi	s0,sp,144
    1a0a:	0004                	0x4
    1a0c:	0501                	addi	a0,a0,0
    1a0e:	0018                	0x18
    1a10:	0402                	c.slli64	s0
    1a12:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1a16:	0008                	0x8
    1a18:	0501                	addi	a0,a0,0
    1a1a:	001f 0402 0303      	0x3030402001f
    1a20:	097f                	0x97f
    1a22:	0002                	c.slli64	zero
    1a24:	0501                	addi	a0,a0,0
    1a26:	0018                	0x18
    1a28:	0402                	c.slli64	s0
    1a2a:	09010303          	lb	t1,144(sp)
    1a2e:	0002                	c.slli64	zero
    1a30:	0501                	addi	a0,a0,0
    1a32:	001f 0402 0603      	0x6030402001f
    1a38:	02097f03          	0x2097f03
    1a3c:	0100                	addi	s0,sp,128
    1a3e:	0905                	addi	s2,s2,1
    1a40:	0200                	addi	s0,sp,256
    1a42:	0304                	addi	s1,sp,384
    1a44:	02090a03          	lb	s4,32(s2)
    1a48:	0100                	addi	s0,sp,128
    1a4a:	1605                	addi	a2,a2,-31
    1a4c:	0200                	addi	s0,sp,256
    1a4e:	0304                	addi	s1,sp,384
    1a50:	0306                	slli	t1,t1,0x1
    1a52:	0900                	addi	s0,sp,144
    1a54:	0000                	unimp
    1a56:	0501                	addi	a0,a0,0
    1a58:	001d                	c.nop	7
    1a5a:	0402                	c.slli64	s0
    1a5c:	097f0303          	lb	t1,151(t5)
    1a60:	0002                	c.slli64	zero
    1a62:	0501                	addi	a0,a0,0
    1a64:	0016                	c.slli	zero,0x5
    1a66:	0402                	c.slli64	s0
    1a68:	09010303          	lb	t1,144(sp)
    1a6c:	0004                	0x4
    1a6e:	0501                	addi	a0,a0,0
    1a70:	0402000f          	0x402000f
    1a74:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1a78:	0004                	0x4
    1a7a:	0501                	addi	a0,a0,0
    1a7c:	001d                	c.nop	7
    1a7e:	0402                	c.slli64	s0
    1a80:	7f030603          	lb	a2,2032(t1)
    1a84:	0409                	addi	s0,s0,2
    1a86:	0100                	addi	s0,sp,128
    1a88:	0905                	addi	s2,s2,1
    1a8a:	0200                	addi	s0,sp,256
    1a8c:	0304                	addi	s1,sp,384
    1a8e:	02090b03          	lb	s6,32(s2)
    1a92:	0100                	addi	s0,sp,128
    1a94:	1c05                	addi	s8,s8,-31
    1a96:	0200                	addi	s0,sp,256
    1a98:	0304                	addi	s1,sp,384
    1a9a:	0306                	slli	t1,t1,0x1
    1a9c:	0900                	addi	s0,sp,144
    1a9e:	0000                	unimp
    1aa0:	0501                	addi	a0,a0,0
    1aa2:	0018                	0x18
    1aa4:	0402                	c.slli64	s0
    1aa6:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1aaa:	0004                	0x4
    1aac:	0501                	addi	a0,a0,0
    1aae:	001f 0402 0603      	0x6030402001f
    1ab4:	08097f03          	0x8097f03
    1ab8:	0100                	addi	s0,sp,128
    1aba:	0905                	addi	s2,s2,1
    1abc:	0200                	addi	s0,sp,256
    1abe:	0304                	addi	s1,sp,384
    1ac0:	04090603          	lb	a2,64(s2)
    1ac4:	0100                	addi	s0,sp,128
    1ac6:	1805                	addi	a6,a6,-31
    1ac8:	0200                	addi	s0,sp,256
    1aca:	0304                	addi	s1,sp,384
    1acc:	0306                	slli	t1,t1,0x1
    1ace:	0900                	addi	s0,sp,144
    1ad0:	0004                	0x4
    1ad2:	0501                	addi	a0,a0,0
    1ad4:	001f 0402 0303      	0x3030402001f
    1ada:	0900                	addi	s0,sp,144
    1adc:	0004                	0x4
    1ade:	0501                	addi	a0,a0,0
    1ae0:	0018                	0x18
    1ae2:	0402                	c.slli64	s0
    1ae4:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1ae8:	0004                	0x4
    1aea:	0501                	addi	a0,a0,0
    1aec:	0021                	c.nop	8
    1aee:	0402                	c.slli64	s0
    1af0:	097f0303          	lb	t1,151(t5)
    1af4:	0002                	c.slli64	zero
    1af6:	0501                	addi	a0,a0,0
    1af8:	0018                	0x18
    1afa:	0402                	c.slli64	s0
    1afc:	09010303          	lb	t1,144(sp)
    1b00:	0002                	c.slli64	zero
    1b02:	0501                	addi	a0,a0,0
    1b04:	0021                	c.nop	8
    1b06:	0402                	c.slli64	s0
    1b08:	7f030603          	lb	a2,2032(t1)
    1b0c:	0209                	addi	tp,tp,2
    1b0e:	0100                	addi	s0,sp,128
    1b10:	4b05                	li	s6,1
    1b12:	02090c03          	lb	s8,32(s2)
    1b16:	0100                	addi	s0,sp,128
    1b18:	0505                	addi	a0,a0,1
    1b1a:	00090203          	lb	tp,0(s2)
    1b1e:	0100                	addi	s0,sp,128
    1b20:	00090103          	lb	sp,0(s2)
    1b24:	0100                	addi	s0,sp,128
    1b26:	00090203          	lb	tp,0(s2)
    1b2a:	0100                	addi	s0,sp,128
    1b2c:	4b05                	li	s6,1
    1b2e:	0306                	slli	t1,t1,0x1
    1b30:	0000097b          	0x97b
    1b34:	0501                	addi	a0,a0,0
    1b36:	0309                	addi	t1,t1,2
    1b38:	0905                	addi	s2,s2,1
    1b3a:	000c                	0xc
    1b3c:	0501                	addi	a0,a0,0
    1b3e:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    1b42:	0004                	0x4
    1b44:	0501                	addi	a0,a0,0
    1b46:	0309                	addi	t1,t1,2
    1b48:	0905                	addi	s2,s2,1
    1b4a:	0002                	c.slli64	zero
    1b4c:	0501                	addi	a0,a0,0
    1b4e:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    1b52:	000a                	c.slli	zero,0x2
    1b54:	0301                	addi	t1,t1,0
    1b56:	0900                	addi	s0,sp,144
    1b58:	0006                	c.slli	zero,0x1
    1b5a:	0501                	addi	a0,a0,0
    1b5c:	0309                	addi	t1,t1,2
    1b5e:	0905                	addi	s2,s2,1
    1b60:	0004                	0x4
    1b62:	0501                	addi	a0,a0,0
    1b64:	0605                	addi	a2,a2,1
    1b66:	02090103          	lb	sp,32(s2)
    1b6a:	0100                	addi	s0,sp,128
    1b6c:	00090103          	lb	sp,0(s2)
    1b70:	0100                	addi	s0,sp,128
    1b72:	00090303          	lb	t1,0(s2)
    1b76:	0100                	addi	s0,sp,128
    1b78:	0c05                	addi	s8,s8,1
    1b7a:	0306                	slli	t1,t1,0x1
    1b7c:	0900                	addi	s0,sp,144
    1b7e:	0000                	unimp
    1b80:	0501                	addi	a0,a0,0
    1b82:	0301                	addi	t1,t1,0
    1b84:	0908                	addi	a0,sp,144
    1b86:	0012                	c.slli	zero,0x4
    1b88:	0501                	addi	a0,a0,0
    1b8a:	030c                	addi	a1,sp,384
    1b8c:	0978                	addi	a4,sp,156
    1b8e:	0006                	c.slli	zero,0x1
    1b90:	0501                	addi	a0,a0,0
    1b92:	0601                	addi	a2,a2,0
    1b94:	02090803          	lb	a6,32(s2)
    1b98:	0100                	addi	s0,sp,128
    1b9a:	0a05                	addi	s4,s4,1
    1b9c:	0306                	slli	t1,t1,0x1
    1b9e:	0904                	addi	s1,sp,144
    1ba0:	0000                	unimp
    1ba2:	0501                	addi	a0,a0,0
    1ba4:	0301                	addi	t1,t1,0
    1ba6:	097c                	addi	a5,sp,156
    1ba8:	0004                	0x4
    1baa:	0501                	addi	a0,a0,0
    1bac:	0605                	addi	a2,a2,1
    1bae:	04090403          	lb	s0,64(s2)
    1bb2:	0100                	addi	s0,sp,128
    1bb4:	0a05                	addi	s4,s4,1
    1bb6:	0306                	slli	t1,t1,0x1
    1bb8:	0900                	addi	s0,sp,144
    1bba:	0000                	unimp
    1bbc:	0501                	addi	a0,a0,0
    1bbe:	0605                	addi	a2,a2,1
    1bc0:	10090203          	lb	tp,256(s2)
    1bc4:	0100                	addi	s0,sp,128
    1bc6:	1a05                	addi	s4,s4,-31
    1bc8:	0306                	slli	t1,t1,0x1
    1bca:	0900                	addi	s0,sp,144
    1bcc:	0000                	unimp
    1bce:	0501                	addi	a0,a0,0
    1bd0:	0014                	0x14
    1bd2:	0402                	c.slli64	s0
    1bd4:	0601                	addi	a2,a2,0
    1bd6:	08090003          	lb	zero,128(s2)
    1bda:	0100                	addi	s0,sp,128
    1bdc:	0505                	addi	a0,a0,1
    1bde:	0200                	addi	s0,sp,256
    1be0:	0104                	addi	s1,sp,128
    1be2:	0306                	slli	t1,t1,0x1
    1be4:	0900                	addi	s0,sp,144
    1be6:	0000                	unimp
    1be8:	0501                	addi	a0,a0,0
    1bea:	0301                	addi	t1,t1,0
    1bec:	0909                	addi	s2,s2,2
    1bee:	0004                	0x4
    1bf0:	0501                	addi	a0,a0,0
    1bf2:	0009                	c.nop	2
    1bf4:	0402                	c.slli64	s0
    1bf6:	78030603          	lb	a2,1920(t1)
    1bfa:	1009                	c.nop	-30
    1bfc:	0100                	addi	s0,sp,128
    1bfe:	1905                	addi	s2,s2,-31
    1c00:	0200                	addi	s0,sp,256
    1c02:	0304                	addi	s1,sp,384
    1c04:	0306                	slli	t1,t1,0x1
    1c06:	0900                	addi	s0,sp,144
    1c08:	0000                	unimp
    1c0a:	0501                	addi	a0,a0,0
    1c0c:	001f 0402 0303      	0x3030402001f
    1c12:	097f                	0x97f
    1c14:	0008                	0x8
    1c16:	0501                	addi	a0,a0,0
    1c18:	0015                	c.nop	5
    1c1a:	0402                	c.slli64	s0
    1c1c:	09010303          	lb	t1,144(sp)
    1c20:	0004                	0x4
    1c22:	0501                	addi	a0,a0,0
    1c24:	001f 0402 0603      	0x6030402001f
    1c2a:	04097f03          	0x4097f03
    1c2e:	0100                	addi	s0,sp,128
    1c30:	6c05                	lui	s8,0x1
    1c32:	02090c03          	lb	s8,32(s2)
    1c36:	0100                	addi	s0,sp,128
    1c38:	0505                	addi	a0,a0,1
    1c3a:	00090203          	lb	tp,0(s2)
    1c3e:	0100                	addi	s0,sp,128
    1c40:	00090103          	lb	sp,0(s2)
    1c44:	0100                	addi	s0,sp,128
    1c46:	00090103          	lb	sp,0(s2)
    1c4a:	0100                	addi	s0,sp,128
    1c4c:	00090103          	lb	sp,0(s2)
    1c50:	0100                	addi	s0,sp,128
    1c52:	00090103          	lb	sp,0(s2)
    1c56:	0100                	addi	s0,sp,128
    1c58:	00090103          	lb	sp,0(s2)
    1c5c:	0100                	addi	s0,sp,128
    1c5e:	00090403          	lb	s0,0(s2)
    1c62:	0100                	addi	s0,sp,128
    1c64:	6c05                	lui	s8,0x1
    1c66:	0306                	slli	t1,t1,0x1
    1c68:	0975                	addi	s2,s2,29
    1c6a:	0000                	unimp
    1c6c:	0501                	addi	a0,a0,0
    1c6e:	031e                	slli	t1,t1,0x7
    1c70:	0915                	addi	s2,s2,5
    1c72:	0008                	0x8
    1c74:	0501                	addi	a0,a0,0
    1c76:	036c                	addi	a1,sp,396
    1c78:	0006096b          	0x6096b
    1c7c:	0501                	addi	a0,a0,0
    1c7e:	0309                	addi	t1,t1,2
    1c80:	000a090b          	0xa090b
    1c84:	0501                	addi	a0,a0,0
    1c86:	036c                	addi	a1,sp,396
    1c88:	0975                	addi	s2,s2,29
    1c8a:	0004                	0x4
    1c8c:	0501                	addi	a0,a0,0
    1c8e:	0309                	addi	t1,t1,2
    1c90:	0004090b          	0x4090b
    1c94:	0501                	addi	a0,a0,0
    1c96:	036c                	addi	a1,sp,396
    1c98:	0975                	addi	s2,s2,29
    1c9a:	0004                	0x4
    1c9c:	0301                	addi	t1,t1,0
    1c9e:	0900                	addi	s0,sp,144
    1ca0:	0008                	0x8
    1ca2:	0501                	addi	a0,a0,0
    1ca4:	030a                	slli	t1,t1,0x2
    1ca6:	0911                	addi	s2,s2,4
    1ca8:	0002                	c.slli64	zero
    1caa:	0501                	addi	a0,a0,0
    1cac:	0309                	addi	t1,t1,2
    1cae:	097a                	slli	s2,s2,0x1e
    1cb0:	0004                	0x4
    1cb2:	0501                	addi	a0,a0,0
    1cb4:	0605                	addi	a2,a2,1
    1cb6:	04090603          	lb	a2,64(s2)
    1cba:	0100                	addi	s0,sp,128
    1cbc:	0a05                	addi	s4,s4,1
    1cbe:	0306                	slli	t1,t1,0x1
    1cc0:	0900                	addi	s0,sp,144
    1cc2:	0000                	unimp
    1cc4:	0501                	addi	a0,a0,0
    1cc6:	0605                	addi	a2,a2,1
    1cc8:	12090403          	lb	s0,288(s2)
    1ccc:	0100                	addi	s0,sp,128
    1cce:	0b05                	addi	s6,s6,1
    1cd0:	0306                	slli	t1,t1,0x1
    1cd2:	0900                	addi	s0,sp,144
    1cd4:	0004                	0x4
    1cd6:	0501                	addi	a0,a0,0
    1cd8:	0014                	0x14
    1cda:	0402                	c.slli64	s0
    1cdc:	0601                	addi	a2,a2,0
    1cde:	02090003          	lb	zero,32(s2)
    1ce2:	0100                	addi	s0,sp,128
    1ce4:	0505                	addi	a0,a0,1
    1ce6:	0200                	addi	s0,sp,256
    1ce8:	0104                	addi	s1,sp,128
    1cea:	0306                	slli	t1,t1,0x1
    1cec:	0900                	addi	s0,sp,144
    1cee:	0000                	unimp
    1cf0:	0501                	addi	a0,a0,0
    1cf2:	0316                	slli	t1,t1,0x5
    1cf4:	0906                	slli	s2,s2,0x1
    1cf6:	0004                	0x4
    1cf8:	0501                	addi	a0,a0,0
    1cfa:	030c                	addi	a1,sp,384
    1cfc:	097f                	0x97f
    1cfe:	0006                	c.slli	zero,0x1
    1d00:	0501                	addi	a0,a0,0
    1d02:	0011                	c.nop	4
    1d04:	0402                	c.slli64	s0
    1d06:	0601                	addi	a2,a2,0
    1d08:	02090003          	lb	zero,32(s2)
    1d0c:	0100                	addi	s0,sp,128
    1d0e:	0505                	addi	a0,a0,1
    1d10:	0200                	addi	s0,sp,256
    1d12:	0104                	addi	s1,sp,128
    1d14:	0306                	slli	t1,t1,0x1
    1d16:	0900                	addi	s0,sp,144
    1d18:	0000                	unimp
    1d1a:	0601                	addi	a2,a2,0
    1d1c:	04090803          	lb	a6,64(s2)
    1d20:	0100                	addi	s0,sp,128
    1d22:	0905                	addi	s2,s2,1
    1d24:	0306                	slli	t1,t1,0x1
    1d26:	0900                	addi	s0,sp,144
    1d28:	0000                	unimp
    1d2a:	0501                	addi	a0,a0,0
    1d2c:	0605                	addi	a2,a2,1
    1d2e:	0c090503          	lb	a0,192(s2)
    1d32:	0100                	addi	s0,sp,128
    1d34:	0a05                	addi	s4,s4,1
    1d36:	0306                	slli	t1,t1,0x1
    1d38:	0900                	addi	s0,sp,144
    1d3a:	0000                	unimp
    1d3c:	0501                	addi	a0,a0,0
    1d3e:	0605                	addi	a2,a2,1
    1d40:	0c090203          	lb	tp,192(s2)
    1d44:	0100                	addi	s0,sp,128
    1d46:	1405                	addi	s0,s0,-31
    1d48:	0200                	addi	s0,sp,256
    1d4a:	0104                	addi	s1,sp,128
    1d4c:	02090003          	lb	zero,32(s2)
    1d50:	0100                	addi	s0,sp,128
    1d52:	0505                	addi	a0,a0,1
    1d54:	0200                	addi	s0,sp,256
    1d56:	0104                	addi	s1,sp,128
    1d58:	0306                	slli	t1,t1,0x1
    1d5a:	0900                	addi	s0,sp,144
    1d5c:	0000                	unimp
    1d5e:	0501                	addi	a0,a0,0
    1d60:	0301                	addi	t1,t1,0
    1d62:	00040907          	0x40907
    1d66:	0501                	addi	a0,a0,0
    1d68:	0009                	c.nop	2
    1d6a:	0402                	c.slli64	s0
    1d6c:	66030603          	lb	a2,1632(t1)
    1d70:	1609                	addi	a2,a2,-30
    1d72:	0100                	addi	s0,sp,128
    1d74:	1905                	addi	s2,s2,-31
    1d76:	0200                	addi	s0,sp,256
    1d78:	0304                	addi	s1,sp,384
    1d7a:	0306                	slli	t1,t1,0x1
    1d7c:	0900                	addi	s0,sp,144
    1d7e:	0000                	unimp
    1d80:	0501                	addi	a0,a0,0
    1d82:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1d86:	097f0303          	lb	t1,151(t5)
    1d8a:	0008                	0x8
    1d8c:	0501                	addi	a0,a0,0
    1d8e:	0015                	c.nop	5
    1d90:	0402                	c.slli64	s0
    1d92:	09010303          	lb	t1,144(sp)
    1d96:	0004                	0x4
    1d98:	0501                	addi	a0,a0,0
    1d9a:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1d9e:	7f030603          	lb	a2,2032(t1)
    1da2:	0409                	addi	s0,s0,2
    1da4:	0100                	addi	s0,sp,128
    1da6:	0905                	addi	s2,s2,1
    1da8:	02090603          	lb	a2,32(s2)
    1dac:	0100                	addi	s0,sp,128
    1dae:	0e05                	addi	t3,t3,1
    1db0:	0306                	slli	t1,t1,0x1
    1db2:	0900                	addi	s0,sp,144
    1db4:	0000                	unimp
    1db6:	0501                	addi	a0,a0,0
    1db8:	0900030b          	0x900030b
    1dbc:	0002                	c.slli64	zero
    1dbe:	0501                	addi	a0,a0,0
    1dc0:	060d                	addi	a2,a2,3
    1dc2:	04090303          	lb	t1,64(s2)
    1dc6:	0100                	addi	s0,sp,128
    1dc8:	1905                	addi	s2,s2,-31
    1dca:	0306                	slli	t1,t1,0x1
    1dcc:	0900                	addi	s0,sp,144
    1dce:	0000                	unimp
    1dd0:	0501                	addi	a0,a0,0
    1dd2:	09000313          	li	t1,144
    1dd6:	0004                	0x4
    1dd8:	0501                	addi	a0,a0,0
    1dda:	0018                	0x18
    1ddc:	0402                	c.slli64	s0
    1dde:	0602                	c.slli64	a2
    1de0:	02097c03          	0x2097c03
    1de4:	0100                	addi	s0,sp,128
    1de6:	0905                	addi	s2,s2,1
    1de8:	0200                	addi	s0,sp,256
    1dea:	0304                	addi	s1,sp,384
    1dec:	06091003          	lh	zero,96(s2)
    1df0:	0100                	addi	s0,sp,128
    1df2:	1905                	addi	s2,s2,-31
    1df4:	0200                	addi	s0,sp,256
    1df6:	0304                	addi	s1,sp,384
    1df8:	0306                	slli	t1,t1,0x1
    1dfa:	0900                	addi	s0,sp,144
    1dfc:	0000                	unimp
    1dfe:	0501                	addi	a0,a0,0
    1e00:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1e04:	097f0303          	lb	t1,151(t5)
    1e08:	0008                	0x8
    1e0a:	0501                	addi	a0,a0,0
    1e0c:	0015                	c.nop	5
    1e0e:	0402                	c.slli64	s0
    1e10:	09010303          	lb	t1,144(sp)
    1e14:	0004                	0x4
    1e16:	0501                	addi	a0,a0,0
    1e18:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1e1c:	7f030603          	lb	a2,2032(t1)
    1e20:	0409                	addi	s0,s0,2
    1e22:	0100                	addi	s0,sp,128
    1e24:	0209                	addi	tp,tp,2
    1e26:	0000                	unimp
    1e28:	0101                	addi	sp,sp,0
    1e2a:	0b05                	addi	s6,s6,1
    1e2c:	0500                	addi	s0,sp,640
    1e2e:	2c02                	fld	fs8,0(sp)
    1e30:	0300000f          	fence	rw,unknown
    1e34:	050106db          	0x50106db
    1e38:	0305                	addi	t1,t1,1
    1e3a:	0902                	c.slli64	s2
    1e3c:	0000                	unimp
    1e3e:	0301                	addi	t1,t1,0
    1e40:	0901                	addi	s2,s2,0
    1e42:	0000                	unimp
    1e44:	0301                	addi	t1,t1,0
    1e46:	0901                	addi	s2,s2,0
    1e48:	0000                	unimp
    1e4a:	0301                	addi	t1,t1,0
    1e4c:	0901                	addi	s2,s2,0
    1e4e:	0000                	unimp
    1e50:	0301                	addi	t1,t1,0
    1e52:	0901                	addi	s2,s2,0
    1e54:	0000                	unimp
    1e56:	0301                	addi	t1,t1,0
    1e58:	0901                	addi	s2,s2,0
    1e5a:	0000                	unimp
    1e5c:	0301                	addi	t1,t1,0
    1e5e:	0902                	c.slli64	s2
    1e60:	0000                	unimp
    1e62:	0501                	addi	a0,a0,0
    1e64:	7703060b          	0x7703060b
    1e68:	0009                	c.nop	2
    1e6a:	0100                	addi	s0,sp,128
    1e6c:	0905                	addi	s2,s2,1
    1e6e:	04090903          	lb	s2,64(s2)
    1e72:	0100                	addi	s0,sp,128
    1e74:	0b05                	addi	s6,s6,1
    1e76:	0e097703          	0xe097703
    1e7a:	0100                	addi	s0,sp,128
    1e7c:	0905                	addi	s2,s2,1
    1e7e:	08090903          	lb	s2,128(s2)
    1e82:	0100                	addi	s0,sp,128
    1e84:	0505                	addi	a0,a0,1
    1e86:	0306                	slli	t1,t1,0x1
    1e88:	0901                	addi	s2,s2,0
    1e8a:	0002                	c.slli64	zero
    1e8c:	0301                	addi	t1,t1,0
    1e8e:	0901                	addi	s2,s2,0
    1e90:	0000                	unimp
    1e92:	0301                	addi	t1,t1,0
    1e94:	0901                	addi	s2,s2,0
    1e96:	0000                	unimp
    1e98:	0301                	addi	t1,t1,0
    1e9a:	0901                	addi	s2,s2,0
    1e9c:	0000                	unimp
    1e9e:	0301                	addi	t1,t1,0
    1ea0:	0901                	addi	s2,s2,0
    1ea2:	0000                	unimp
    1ea4:	0301                	addi	t1,t1,0
    1ea6:	0901                	addi	s2,s2,0
    1ea8:	0000                	unimp
    1eaa:	0301                	addi	t1,t1,0
    1eac:	0901                	addi	s2,s2,0
    1eae:	0000                	unimp
    1eb0:	0301                	addi	t1,t1,0
    1eb2:	0909                	addi	s2,s2,2
    1eb4:	0000                	unimp
    1eb6:	0501                	addi	a0,a0,0
    1eb8:	060c                	addi	a1,sp,768
    1eba:	00090003          	lb	zero,0(s2)
    1ebe:	0100                	addi	s0,sp,128
    1ec0:	0505                	addi	a0,a0,1
    1ec2:	0306                	slli	t1,t1,0x1
    1ec4:	0904                	addi	s1,sp,144
    1ec6:	000c                	0xc
    1ec8:	0501                	addi	a0,a0,0
    1eca:	0310                	addi	a2,sp,384
    1ecc:	0900                	addi	s0,sp,144
    1ece:	0000                	unimp
    1ed0:	0501                	addi	a0,a0,0
    1ed2:	060c                	addi	a1,sp,768
    1ed4:	00097c03          	0x97c03
    1ed8:	0100                	addi	s0,sp,128
    1eda:	0505                	addi	a0,a0,1
    1edc:	02090403          	lb	s0,32(s2)
    1ee0:	0100                	addi	s0,sp,128
    1ee2:	0905                	addi	s2,s2,1
    1ee4:	0200                	addi	s0,sp,256
    1ee6:	0304                	addi	s1,sp,384
    1ee8:	0306                	slli	t1,t1,0x1
    1eea:	0902                	c.slli64	s2
    1eec:	0004                	0x4
    1eee:	0501                	addi	a0,a0,0
    1ef0:	001f 0402 0603      	0x6030402001f
    1ef6:	00090003          	lb	zero,0(s2)
    1efa:	0100                	addi	s0,sp,128
    1efc:	1905                	addi	s2,s2,-31
    1efe:	0200                	addi	s0,sp,256
    1f00:	0304                	addi	s1,sp,384
    1f02:	06090003          	lb	zero,96(s2)
    1f06:	0100                	addi	s0,sp,128
    1f08:	1705                	addi	a4,a4,-31
    1f0a:	0200                	addi	s0,sp,256
    1f0c:	0304                	addi	s1,sp,384
    1f0e:	0306                	slli	t1,t1,0x1
    1f10:	097e                	slli	s2,s2,0x1f
    1f12:	0006                	c.slli	zero,0x1
    1f14:	0501                	addi	a0,a0,0
    1f16:	0010                	0x10
    1f18:	0402                	c.slli64	s0
    1f1a:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1f1e:	0000                	unimp
    1f20:	0501                	addi	a0,a0,0
    1f22:	0005                	c.nop	1
    1f24:	0402                	c.slli64	s0
    1f26:	00030603          	lb	a2,0(t1)
    1f2a:	0209                	addi	tp,tp,2
    1f2c:	0100                	addi	s0,sp,128
    1f2e:	0905                	addi	s2,s2,1
    1f30:	0200                	addi	s0,sp,256
    1f32:	0304                	addi	s1,sp,384
    1f34:	0306                	slli	t1,t1,0x1
    1f36:	0909                	addi	s2,s2,2
    1f38:	0004                	0x4
    1f3a:	0501                	addi	a0,a0,0
    1f3c:	0402001b          	0x402001b
    1f40:	097e0303          	lb	t1,151(t3)
    1f44:	0000                	unimp
    1f46:	0501                	addi	a0,a0,0
    1f48:	0010                	0x10
    1f4a:	0402                	c.slli64	s0
    1f4c:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1f50:	0000                	unimp
    1f52:	0501                	addi	a0,a0,0
    1f54:	0009                	c.nop	2
    1f56:	0402                	c.slli64	s0
    1f58:	09090303          	lb	t1,144(s2)
    1f5c:	000c                	0xc
    1f5e:	0501                	addi	a0,a0,0
    1f60:	0026                	c.slli	zero,0x9
    1f62:	0402                	c.slli64	s0
    1f64:	00030603          	lb	a2,0(t1)
    1f68:	0009                	c.nop	2
    1f6a:	0100                	addi	s0,sp,128
    1f6c:	2005                	jal	1f8c <_bss_end+0x20>
    1f6e:	0200                	addi	s0,sp,256
    1f70:	0304                	addi	s1,sp,384
    1f72:	06090003          	lb	zero,96(s2)
    1f76:	0100                	addi	s0,sp,128
    1f78:	1f05                	addi	t5,t5,-31
    1f7a:	0200                	addi	s0,sp,256
    1f7c:	0304                	addi	s1,sp,384
    1f7e:	0306                	slli	t1,t1,0x1
    1f80:	097e                	slli	s2,s2,0x1f
    1f82:	0004                	0x4
    1f84:	0501                	addi	a0,a0,0
    1f86:	0014                	0x14
    1f88:	0402                	c.slli64	s0
    1f8a:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1f8e:	0000                	unimp
    1f90:	0501                	addi	a0,a0,0
    1f92:	0005                	c.nop	1
    1f94:	0402                	c.slli64	s0
    1f96:	00030603          	lb	a2,0(t1)
    1f9a:	0009                	c.nop	2
    1f9c:	0100                	addi	s0,sp,128
    1f9e:	0905                	addi	s2,s2,1
    1fa0:	0200                	addi	s0,sp,256
    1fa2:	0304                	addi	s1,sp,384
    1fa4:	0306                	slli	t1,t1,0x1
    1fa6:	0909                	addi	s2,s2,2
    1fa8:	0004                	0x4
    1faa:	0501                	addi	a0,a0,0
    1fac:	001f 0402 0303      	0x3030402001f
    1fb2:	097e                	slli	s2,s2,0x1f
    1fb4:	0000                	unimp
    1fb6:	0501                	addi	a0,a0,0
    1fb8:	0014                	0x14
    1fba:	0402                	c.slli64	s0
    1fbc:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1fc0:	0000                	unimp
    1fc2:	0501                	addi	a0,a0,0
    1fc4:	0009                	c.nop	2
    1fc6:	0402                	c.slli64	s0
    1fc8:	09090303          	lb	t1,144(s2)
    1fcc:	000c                	0xc
    1fce:	0501                	addi	a0,a0,0
    1fd0:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1fd4:	00030603          	lb	a2,0(t1)
    1fd8:	0009                	c.nop	2
    1fda:	0100                	addi	s0,sp,128
    1fdc:	1d05                	addi	s10,s10,-31
    1fde:	0200                	addi	s0,sp,256
    1fe0:	0304                	addi	s1,sp,384
    1fe2:	06090003          	lb	zero,96(s2)
    1fe6:	0100                	addi	s0,sp,128
    1fe8:	1f05                	addi	t5,t5,-31
    1fea:	0200                	addi	s0,sp,256
    1fec:	0304                	addi	s1,sp,384
    1fee:	0306                	slli	t1,t1,0x1
    1ff0:	097e                	slli	s2,s2,0x1f
    1ff2:	0004                	0x4
    1ff4:	0501                	addi	a0,a0,0
    1ff6:	0014                	0x14
    1ff8:	0402                	c.slli64	s0
    1ffa:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1ffe:	0000                	unimp
    2000:	0501                	addi	a0,a0,0
    2002:	0005                	c.nop	1
    2004:	0402                	c.slli64	s0
    2006:	00030603          	lb	a2,0(t1)
    200a:	0009                	c.nop	2
    200c:	0100                	addi	s0,sp,128
    200e:	0905                	addi	s2,s2,1
    2010:	0200                	addi	s0,sp,256
    2012:	0304                	addi	s1,sp,384
    2014:	0306                	slli	t1,t1,0x1
    2016:	0909                	addi	s2,s2,2
    2018:	000c                	0xc
    201a:	0501                	addi	a0,a0,0
    201c:	0022                	c.slli	zero,0x8
    201e:	0402                	c.slli64	s0
    2020:	00030603          	lb	a2,0(t1)
    2024:	0009                	c.nop	2
    2026:	0100                	addi	s0,sp,128
    2028:	1c05                	addi	s8,s8,-31
    202a:	0200                	addi	s0,sp,256
    202c:	0304                	addi	s1,sp,384
    202e:	06090003          	lb	zero,96(s2)
    2032:	0100                	addi	s0,sp,128
    2034:	2105                	jal	2454 <_min_stack+0x454>
    2036:	0200                	addi	s0,sp,256
    2038:	0304                	addi	s1,sp,384
    203a:	0306                	slli	t1,t1,0x1
    203c:	097e                	slli	s2,s2,0x1f
    203e:	0004                	0x4
    2040:	0501                	addi	a0,a0,0
    2042:	0014                	0x14
    2044:	0402                	c.slli64	s0
    2046:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    204a:	0000                	unimp
    204c:	0501                	addi	a0,a0,0
    204e:	0005                	c.nop	1
    2050:	0402                	c.slli64	s0
    2052:	00030603          	lb	a2,0(t1)
    2056:	0009                	c.nop	2
    2058:	0100                	addi	s0,sp,128
    205a:	0306                	slli	t1,t1,0x1
    205c:	0908                	addi	a0,sp,144
    205e:	0004                	0x4
    2060:	0501                	addi	a0,a0,0
    2062:	00030613          	mv	a2,t1
    2066:	0009                	c.nop	2
    2068:	0100                	addi	s0,sp,128
    206a:	0505                	addi	a0,a0,1
    206c:	0306                	slli	t1,t1,0x1
    206e:	0905                	addi	s2,s2,1
    2070:	0010                	0x10
    2072:	0501                	addi	a0,a0,0
    2074:	00030613          	mv	a2,t1
    2078:	0009                	c.nop	2
    207a:	0100                	addi	s0,sp,128
    207c:	0505                	addi	a0,a0,1
    207e:	0306                	slli	t1,t1,0x1
    2080:	090a                	slli	s2,s2,0x2
    2082:	0014                	0x14
    2084:	0501                	addi	a0,a0,0
    2086:	0310                	addi	a2,sp,384
    2088:	0900                	addi	s0,sp,144
    208a:	0000                	unimp
    208c:	0501                	addi	a0,a0,0
    208e:	061a                	slli	a2,a2,0x6
    2090:	00090803          	lb	a6,0(s2)
    2094:	0100                	addi	s0,sp,128
    2096:	1305                	addi	t1,t1,-31
    2098:	04096e03          	0x4096e03
    209c:	0100                	addi	s0,sp,128
    209e:	1a05                	addi	s4,s4,-31
    20a0:	12091203          	lh	tp,288(s2)
    20a4:	0100                	addi	s0,sp,128
    20a6:	0505                	addi	a0,a0,1
    20a8:	04097803          	0x4097803
    20ac:	0100                	addi	s0,sp,128
    20ae:	0905                	addi	s2,s2,1
    20b0:	0306                	slli	t1,t1,0x1
    20b2:	0901                	addi	s2,s2,0
    20b4:	0004                	0x4
    20b6:	0501                	addi	a0,a0,0
    20b8:	0003060b          	0x3060b
    20bc:	0009                	c.nop	2
    20be:	0100                	addi	s0,sp,128
    20c0:	2705                	jal	27e0 <_min_stack+0x7e0>
    20c2:	02090003          	lb	zero,32(s2)
    20c6:	0100                	addi	s0,sp,128
    20c8:	0b05                	addi	s6,s6,1
    20ca:	04090003          	lb	zero,64(s2)
    20ce:	0100                	addi	s0,sp,128
    20d0:	0d05                	addi	s10,s10,1
    20d2:	0306                	slli	t1,t1,0x1
    20d4:	0902                	c.slli64	s2
    20d6:	000e                	c.slli	zero,0x3
    20d8:	0501                	addi	a0,a0,0
    20da:	061a                	slli	a2,a2,0x6
    20dc:	00090003          	lb	zero,0(s2)
    20e0:	0100                	addi	s0,sp,128
    20e2:	0705                	addi	a4,a4,1
    20e4:	0306                	slli	t1,t1,0x1
    20e6:	0901                	addi	s2,s2,0
    20e8:	000a                	c.slli	zero,0x2
    20ea:	0501                	addi	a0,a0,0
    20ec:	00030617          	auipc	a2,0x30
    20f0:	0009                	c.nop	2
    20f2:	0100                	addi	s0,sp,128
    20f4:	0c05                	addi	s8,s8,1
    20f6:	02090003          	lb	zero,32(s2)
    20fa:	0100                	addi	s0,sp,128
    20fc:	0d05                	addi	s10,s10,1
    20fe:	0306                	slli	t1,t1,0x1
    2100:	0901                	addi	s2,s2,0
    2102:	0008                	0x8
    2104:	0501                	addi	a0,a0,0
    2106:	0305                	addi	t1,t1,1
    2108:	090c                	addi	a1,sp,144
    210a:	0000                	unimp
    210c:	0501                	addi	a0,a0,0
    210e:	0601                	addi	a2,a2,0
    2110:	00090103          	lb	sp,0(s2)
    2114:	0100                	addi	s0,sp,128
    2116:	0d05                	addi	s10,s10,1
    2118:	0200                	addi	s0,sp,256
    211a:	0204                	addi	s1,sp,256
    211c:	0306                	slli	t1,t1,0x1
    211e:	0976                	slli	s2,s2,0x1d
    2120:	0010                	0x10
    2122:	0501                	addi	a0,a0,0
    2124:	001a                	c.slli	zero,0x6
    2126:	0402                	c.slli64	s0
    2128:	0602                	c.slli64	a2
    212a:	00090003          	lb	zero,0(s2)
    212e:	0100                	addi	s0,sp,128
    2130:	0605                	addi	a2,a2,1
    2132:	0200                	addi	s0,sp,256
    2134:	0204                	addi	s1,sp,256
    2136:	0306                	slli	t1,t1,0x1
    2138:	0901                	addi	s2,s2,0
    213a:	0002                	c.slli64	zero
    213c:	0501                	addi	a0,a0,0
    213e:	0016                	c.slli	zero,0x5
    2140:	0402                	c.slli64	s0
    2142:	0602                	c.slli64	a2
    2144:	00090003          	lb	zero,0(s2)
    2148:	0100                	addi	s0,sp,128
    214a:	0b05                	addi	s6,s6,1
    214c:	0200                	addi	s0,sp,256
    214e:	0204                	addi	s1,sp,256
    2150:	04090003          	lb	zero,64(s2)
    2154:	0100                	addi	s0,sp,128
    2156:	1805                	addi	a6,a6,-31
    2158:	0200                	addi	s0,sp,256
    215a:	0204                	addi	s1,sp,256
    215c:	0306                	slli	t1,t1,0x1
    215e:	00080977          	0x80977
    2162:	0501                	addi	a0,a0,0
    2164:	0010                	0x10
    2166:	0402                	c.slli64	s0
    2168:	0302                	c.slli64	t1
    216a:	0900                	addi	s0,sp,144
    216c:	0000                	unimp
    216e:	0501                	addi	a0,a0,0
    2170:	0005                	c.nop	1
    2172:	0402                	c.slli64	s0
    2174:	0602                	c.slli64	a2
    2176:	00090003          	lb	zero,0(s2)
    217a:	0100                	addi	s0,sp,128
    217c:	0609                	addi	a2,a2,2
    217e:	0000                	unimp
    2180:	0101                	addi	sp,sp,0
    2182:	0150                	addi	a2,sp,132
    2184:	0000                	unimp
    2186:	001d0003          	lb	zero,1(s10)
    218a:	0000                	unimp
    218c:	0101                	addi	sp,sp,0
    218e:	000d0efb          	0xd0efb
    2192:	0101                	addi	sp,sp,0
    2194:	0101                	addi	sp,sp,0
    2196:	0000                	unimp
    2198:	0100                	addi	s0,sp,128
    219a:	0000                	unimp
    219c:	0001                	nop
    219e:	30747263          	bgeu	s0,t2,24a2 <_min_stack+0x4a2>
    21a2:	532e                	lw	t1,232(sp)
    21a4:	0000                	unimp
    21a6:	0000                	unimp
    21a8:	0000                	unimp
    21aa:	0205                	addi	tp,tp,1
    21ac:	0d30                	addi	a2,sp,664
    21ae:	0000                	unimp
    21b0:	0315                	addi	t1,t1,5
    21b2:	0904                	addi	s1,sp,144
    21b4:	0004                	0x4
    21b6:	0301                	addi	t1,t1,0
    21b8:	0901                	addi	s2,s2,0
    21ba:	0004                	0x4
    21bc:	0301                	addi	t1,t1,0
    21be:	0901                	addi	s2,s2,0
    21c0:	0002                	c.slli64	zero
    21c2:	0301                	addi	t1,t1,0
    21c4:	0901                	addi	s2,s2,0
    21c6:	0002                	c.slli64	zero
    21c8:	0301                	addi	t1,t1,0
    21ca:	0901                	addi	s2,s2,0
    21cc:	0002                	c.slli64	zero
    21ce:	0301                	addi	t1,t1,0
    21d0:	0901                	addi	s2,s2,0
    21d2:	0002                	c.slli64	zero
    21d4:	0301                	addi	t1,t1,0
    21d6:	0901                	addi	s2,s2,0
    21d8:	0002                	c.slli64	zero
    21da:	0301                	addi	t1,t1,0
    21dc:	0901                	addi	s2,s2,0
    21de:	0002                	c.slli64	zero
    21e0:	0301                	addi	t1,t1,0
    21e2:	0901                	addi	s2,s2,0
    21e4:	0002                	c.slli64	zero
    21e6:	0301                	addi	t1,t1,0
    21e8:	0901                	addi	s2,s2,0
    21ea:	0002                	c.slli64	zero
    21ec:	0301                	addi	t1,t1,0
    21ee:	0901                	addi	s2,s2,0
    21f0:	0002                	c.slli64	zero
    21f2:	0301                	addi	t1,t1,0
    21f4:	0901                	addi	s2,s2,0
    21f6:	0002                	c.slli64	zero
    21f8:	0301                	addi	t1,t1,0
    21fa:	0901                	addi	s2,s2,0
    21fc:	0002                	c.slli64	zero
    21fe:	0301                	addi	t1,t1,0
    2200:	0901                	addi	s2,s2,0
    2202:	0002                	c.slli64	zero
    2204:	0301                	addi	t1,t1,0
    2206:	0901                	addi	s2,s2,0
    2208:	0002                	c.slli64	zero
    220a:	0301                	addi	t1,t1,0
    220c:	0901                	addi	s2,s2,0
    220e:	0002                	c.slli64	zero
    2210:	0301                	addi	t1,t1,0
    2212:	0901                	addi	s2,s2,0
    2214:	0002                	c.slli64	zero
    2216:	0301                	addi	t1,t1,0
    2218:	0901                	addi	s2,s2,0
    221a:	0002                	c.slli64	zero
    221c:	0301                	addi	t1,t1,0
    221e:	0901                	addi	s2,s2,0
    2220:	0002                	c.slli64	zero
    2222:	0301                	addi	t1,t1,0
    2224:	0901                	addi	s2,s2,0
    2226:	0002                	c.slli64	zero
    2228:	0301                	addi	t1,t1,0
    222a:	0901                	addi	s2,s2,0
    222c:	0002                	c.slli64	zero
    222e:	0301                	addi	t1,t1,0
    2230:	0901                	addi	s2,s2,0
    2232:	0002                	c.slli64	zero
    2234:	0301                	addi	t1,t1,0
    2236:	0901                	addi	s2,s2,0
    2238:	0002                	c.slli64	zero
    223a:	0301                	addi	t1,t1,0
    223c:	0901                	addi	s2,s2,0
    223e:	0002                	c.slli64	zero
    2240:	0301                	addi	t1,t1,0
    2242:	0901                	addi	s2,s2,0
    2244:	0002                	c.slli64	zero
    2246:	0301                	addi	t1,t1,0
    2248:	0901                	addi	s2,s2,0
    224a:	0002                	c.slli64	zero
    224c:	0301                	addi	t1,t1,0
    224e:	0901                	addi	s2,s2,0
    2250:	0002                	c.slli64	zero
    2252:	0301                	addi	t1,t1,0
    2254:	0901                	addi	s2,s2,0
    2256:	0002                	c.slli64	zero
    2258:	0301                	addi	t1,t1,0
    225a:	0901                	addi	s2,s2,0
    225c:	0002                	c.slli64	zero
    225e:	0301                	addi	t1,t1,0
    2260:	0901                	addi	s2,s2,0
    2262:	0002                	c.slli64	zero
    2264:	0301                	addi	t1,t1,0
    2266:	0901                	addi	s2,s2,0
    2268:	0002                	c.slli64	zero
    226a:	0301                	addi	t1,t1,0
    226c:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    2270:	0301                	addi	t1,t1,0
    2272:	0906                	slli	s2,s2,0x1
    2274:	0008                	0x8
    2276:	0301                	addi	t1,t1,0
    2278:	0901                	addi	s2,s2,0
    227a:	0008                	0x8
    227c:	0301                	addi	t1,t1,0
    227e:	0902                	c.slli64	s2
    2280:	0008                	0x8
    2282:	0301                	addi	t1,t1,0
    2284:	00040903          	lb	s2,0(s0)
    2288:	0301                	addi	t1,t1,0
    228a:	0901                	addi	s2,s2,0
    228c:	0004                	0x4
    228e:	0301                	addi	t1,t1,0
    2290:	0901                	addi	s2,s2,0
    2292:	0002                	c.slli64	zero
    2294:	0301                	addi	t1,t1,0
    2296:	0906                	slli	s2,s2,0x1
    2298:	0004                	0x4
    229a:	0301                	addi	t1,t1,0
    229c:	0901                	addi	s2,s2,0
    229e:	0004                	0x4
    22a0:	0301                	addi	t1,t1,0
    22a2:	0901                	addi	s2,s2,0
    22a4:	0004                	0x4
    22a6:	0901                	addi	s2,s2,0
    22a8:	0004                	0x4
    22aa:	0100                	addi	s0,sp,128
    22ac:	0001                	nop
    22ae:	0205                	addi	tp,tp,1
    22b0:	0000                	unimp
    22b2:	0000                	unimp
    22b4:	0100cb03          	lbu	s6,16(ra)
    22b8:	7c090103          	lb	sp,1984(s2)
    22bc:	0100                	addi	s0,sp,128
    22be:	04090403          	lb	s0,64(s2)
    22c2:	0100                	addi	s0,sp,128
    22c4:	04090403          	lb	s0,64(s2)
    22c8:	0100                	addi	s0,sp,128
    22ca:	04090403          	lb	s0,64(s2)
    22ce:	0100                	addi	s0,sp,128
    22d0:	0409                	addi	s0,s0,2
    22d2:	0000                	unimp
    22d4:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	7865                	lui	a6,0xffff9
   2:	5f74                	lw	a3,124(a4)
   4:	7565                	lui	a0,0xffff9
   6:	64696c63          	bltu	s2,t1,65e <polydiv+0x244>
   a:	5f00                	lw	s0,56(a4)
   c:	655f6e6f          	jal	t3,f6e60 <_stack_start+0xe6e60>
  10:	6978                	flw	fa4,84(a0)
  12:	5f74                	lw	a3,124(a4)
  14:	7261                	lui	tp,0xffff8
  16:	5f007367          	0x5f007367
  1a:	6f746377          	0x6f746377
  1e:	626d                	lui	tp,0x1b
  20:	735f 6174 6574      	0x65746174735f
  26:	7200                	flw	fs0,32(a2)
  28:	6e61                	lui	t3,0x18
  2a:	6f64                	flw	fs1,92(a4)
  2c:	5f6d                	li	t5,-5
  2e:	6176                	flw	ft2,92(sp)
  30:	006c                	addi	a1,sp,12
  32:	656d                	lui	a0,0x1b
  34:	67617373          	csrrci	t1,0x676,2
  38:	0065                	c.nop	25
  3a:	725f 3834 5f00      	0x5f003834725f
  40:	6e676973          	csrrsi	s2,0x6e6,14
  44:	6c61                	lui	s8,0x18
  46:	625f 6675 6700      	0x67006675625f
  4c:	6e65                	lui	t3,0x19
  4e:	7265                	lui	tp,0xffff9
  50:	7461                	lui	s0,0xffff8
  52:	5f65                	li	t5,-7
  54:	7379656b          	0x7379656b
  58:	5f00                	lw	s0,56(a4)
  5a:	626c                	flw	fa1,68(a2)
  5c:	7366                	flw	ft6,120(sp)
  5e:	7a69                	lui	s4,0xffffa
  60:	0065                	c.nop	25
  62:	665f 616c 7367      	0x7367616c665f
  68:	5f00                	lw	s0,56(a4)
  6a:	4f4c                	lw	a1,28(a4)
  6c:	525f4b43          	fmadd.d	fs6,ft10,ft5,fa0,rmm
  70:	4345                	li	t1,17
  72:	5255                	li	tp,-11
  74:	45564953          	0x45564953
  78:	545f 6900 736e      	0x736e6900545f
  jal x0, default_exc_handler
  7e:	7274                	flw	fa3,100(a2)
  jal x0, reset_handler
  80:	655f 7571 5f00      	0x5f007571655f
  jal x0, default_exc_handler
  86:	6572                	flw	fa0,28(sp)
  jal x0, default_exc_handler
  88:	6461                	lui	s0,0x18
  8a:	6100                	flw	fs0,0(a0)
    asm volatile(
  8c:	7272                	flw	ft4,60(sp)
  8e:	7961                	lui	s2,0xffff8
}
  90:	655f 7571 5f00      	0x5f007571655f
    for(i=0;i<(length/3);i++) {
  96:	626d                	lui	tp,0x1b
  98:	6c72                	flw	fs8,28(sp)
  9a:	6e65                	lui	t3,0x19
  9c:	735f 6174 6574      	0x65746174735f
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	5f00                	lw	s0,56(a4)
  a4:	625f 6975 746c      	0x746c6975625f
    asm volatile(
  aa:	6e69                	lui	t3,0x1a
  ac:	6d5f 6d65 7063      	0x70636d656d5f
    for(i=0;i<(length/3);i++) {
  b2:	0079                	c.nop	30
    asm volatile(
  b4:	6d6f682f          	0x6d6f682f
}
  b8:	2f65                	jal	870 <ext_euclid+0x172>
    for(i=0;i<(length/3);i++) {
  ba:	6c65                	lui	s8,0x19
  bc:	6669                	lui	a2,0x1a
  be:	756e                	flw	fa0,248(sp)
  c0:	2f72                	fld	ft10,280(sp)
  c2:	6544                	flw	fs1,12(a0)
  c4:	6f746b73          	csrrsi	s6,0x6f7,8
}
  c8:	2f70                	fld	fa2,216(a4)
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  ca:	6269                	lui	tp,0x1a
  cc:	7865                	lui	a6,0xffff9
    asm volatile(
  ce:	765f 2f32 6269      	0x62692f32765f
  d4:	7865                	lui	a6,0xffff9
  d6:	6d2d                	lui	s10,0xb
    for(i=0;i<(length/3);i++) {
  d8:	7361                	lui	t1,0xffff8
  da:	6574                	flw	fa3,76(a0)
    asm volatile(
  dc:	2f72                	fld	ft10,280(sp)
  de:	7865                	lui	a6,0xffff9
}
  e0:	6d61                	lui	s10,0x18
    for(i=0;i<(length/3);i++) {
  e2:	6c70                	flw	fa2,92(s0)
  e4:	7365                	lui	t1,0xffff9
  e6:	2f77732f          	0x2f77732f
  ea:	746e                	flw	fs0,248(sp)
  ec:	7572                	flw	fa0,60(sp)
  ee:	6c5f 7461 6669      	0x666974616c5f
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f4:	6f68                	flw	fa0,92(a4)
    asm volatile(
  f6:	772f6163          	bltu	t5,s2,858 <ext_euclid+0x15a>
  fa:	7469                	lui	s0,0xffffa
  fc:	5f68                	lw	a0,124(a4)
  fe:	74737563          	bgeu	t1,t2,848 <ext_euclid+0x14a>
    for(i=0;i<(length/3);i++) {
 102:	5f006d6f          	jal	s10,66f2 <_stack_len+0x26f2>
    asm volatile(
 106:	6f647473          	csrrci	s0,0x6f6,8
    for(i=0;i<(length/3);i++) {
 10a:	7475                	lui	s0,0xffffd
 10c:	5f00                	lw	s0,56(a4)
 10e:	7066                	flw	ft0,120(sp)
    asm volatile(
 110:	745f736f          	jal	t1,f8054 <_stack_start+0xe8054>
    for(i=0;i<(length/3);i++) {
 114:	7200                	flw	fs0,32(a2)
 116:	5f69                	li	t5,-6
}
 118:	0032                	c.slli	zero,0xc
    asm volatile(
 11a:	665f 736e 5f00      	0x5f00736e665f
 120:	6b6f6f63          	bltu	t5,s6,7de <ext_euclid+0xe0>
    for(i=0;i<(length/3);i++) {
 124:	6569                	lui	a0,0x1a
 126:	5f00                	lw	s0,56(a4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 128:	6942                	flw	fs2,16(sp)
 12a:	746e6967          	0x746e6967
 12e:	5f00                	lw	s0,56(a4)
 130:	745f 5f6d 6477      	0x64775f6d745f
    int line[size_b][size_a + size_b];
 136:	7961                	lui	s2,0xffff8
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 138:	6100                	flw	fs0,0(a0)
 13a:	7272                	flw	ft4,60(sp)
    int line[size_b][size_a + size_b];
 13c:	7961                	lui	s2,0xffff8
 13e:	615f 6464 5f00      	0x5f006464615f
 144:	6572                	flw	fa0,28(sp)
 146:	746c7573          	csrrci	a0,0x746,24
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 14a:	5f00                	lw	s0,56(a4)
 14c:	745f 5f6d 6f68      	0x6f685f6d745f
 152:	7275                	lui	tp,0xffffd
 154:	5f00                	lw	s0,56(a4)
 156:	635f 756f 746e      	0x746e756f635f
 15c:	5f00                	lw	s0,56(a4)
    int line[size_b][size_a + size_b];
 15e:	745f 5f6d 696d      	0x696d5f6d745f
    int pola[size_a];
 164:	006e                	c.slli	zero,0x1b
 166:	6e5f 7865 6674      	0x667478656e5f
    int line[size_b][size_a + size_b];
 16c:	7000                	flw	fs0,32(s0)
    int pola[size_a];
 16e:	6275                	lui	tp,0x1d
 170:	696c                	flw	fa1,84(a0)
    int polb[size_b];
 172:	656b5f63          	bge	s6,s6,7d0 <ext_euclid+0xd2>
 176:	0079                	c.nop	30
    int pola[size_a];
 178:	725f 6e61 3464      	0x34646e61725f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 17e:	0038                	addi	a4,sp,8
 180:	725f 7365 6c75      	0x6c757365725f
    int line[size_b][size_a + size_b];
 186:	5f74                	lw	a3,124(a4)
    int pola[size_a];
 188:	6f6c006b          	0x6f6c006b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 18c:	676e                	flw	fa4,216(sp)
    int polb[size_b];
 18e:	6c20                	flw	fs0,88(s0)
            line[i][j] = 0;   
 190:	20676e6f          	jal	t3,76396 <_stack_start+0x66396>
  for(j = 0; j < size_a + size_b -1; ++j) {
 194:	6e75                	lui	t3,0x1d
	product[j] = 0;
 196:	6e676973          	csrrsi	s2,0x6e6,14
 19a:	6465                	lui	s0,0x19
 19c:	6920                	flw	fs0,80(a0)
  for(j = 0; j < size_a + size_b -1; ++j) {
 19e:	746e                	flw	fs0,248(sp)
 1a0:	5f00                	lw	s0,56(a4)
    array_equ(pola,a,size_a);
 1a2:	7361                	lui	t1,0xffff8
 1a4:	6d697463          	bgeu	s2,s6,86c <ext_euclid+0x16e>
 1a8:	5f65                	li	t5,-7
 1aa:	7562                	flw	fa0,56(sp)
 1ac:	0066                	c.slli	zero,0x19
 1ae:	5f5f 4673 4c49      	0x4c4946735f5f
    array_mod(pola,mod,size_a);
 1b4:	0045                	c.nop	17
 1b6:	775f 7364 6100      	0x61007364775f
    array_equ(polb,b,size_b);
 1bc:	7272                	flw	ft4,60(sp)
 1be:	7961                	lui	s2,0xffff8
 1c0:	6d5f 646f 6400      	0x6400646f6d5f
    array_mod(polb,mod,size_b);
 1c6:	6e65                	lui	t3,0x19
 1c8:	6d75                	lui	s10,0x1d
 1ca:	745f 6d65 0070      	0x706d65745f
    if(star_mult == 1){
 1d0:	5f5f 4946 454c      	0x454c49465f5f
 1d6:	7300                	flw	fs0,32(a4)
 1d8:	7a69                	lui	s4,0xffffa
 1da:	5f65                	li	t5,-7
 1dc:	0044                	addi	s1,sp,4
 1de:	6f5f 6666 6573      	0x657366666f5f
        for (j = size_b -1; j >= 0; j = j-1){
 1e4:	0074                	addi	a3,sp,12
            for (k = size_a-1; k >= 0; k = k-1 ){
 1e6:	6e45                	lui	t3,0x11
 1e8:	654d5f63          	bge	s10,s4,846 <ext_euclid+0x148>
            line[i][j] = 0;   
 1ec:	67617373          	csrrci	t1,0x676,2
 1f0:	0065                	c.nop	25
 1f2:	655f 656d 6772      	0x6772656d655f
 1f8:	6e65                	lui	t3,0x19
         for (i = 0; i < size_b; ++i){
 1fa:	73007963          	bgeu	zero,a6,92c <generate_keys+0x3e>
	product[j] = 0;
 1fe:	7a69                	lui	s4,0xffffa
 200:	5f65                	li	t5,-7
 202:	0061                	c.nop	24
 204:	657a6973          	csrrsi	s2,0x657,20
  for(j = 0; j < size_a + size_b -1; ++j) {
 208:	625f 7400 5f69      	0x5f697400625f
         for (i = 0; i < size_b; ++i){
 20e:	0031                	c.nop	12
 210:	6974                	flw	fa3,84(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 212:	325f 7200 6e69      	0x6e697200325f
            for (k = size_a-1; k >= 0; k = k-1 ){
 218:	6f705f67          	0x6f705f67
        array_add(product, line[i], (size_a + size_b - 1));
 21c:	796c                	flw	fa1,116(a0)
 21e:	5f00                	lw	s0,56(a4)
 220:	745f 5f6d 6573      	0x65735f6d745f
    for (i = 0; i < size_b; ++i){
 226:	75730063          	beq	t1,s7,966 <generate_keys+0x78>
    array_mod(product,mod,(size_a+size_b-1));
 22a:	6f62                	flw	ft10,24(sp)
 22c:	7470                	flw	fa2,108(s0)
 22e:	7261                	lui	tp,0xffff8
 230:	5f5f0067          	jr	1525(t5)
}
 234:	6d74                	flw	fa3,92(a0)
 236:	795f 6164 0079      	0x796164795f
 23c:	695f 636e 5f00      	0x5f00636e695f
 242:	6e69                	lui	t3,0x1a
 244:	0064                	addi	s1,sp,12
 246:	6e69                	lui	t3,0x1a
 248:	5f727473          	csrrci	s0,0x5f7,4
 24c:	00627573          	csrrci	a0,0x6,4
 250:	6d5f 7362 7472      	0x747273626d5f
 256:	7363776f          	jal	a4,3798c <_stack_start+0x2798c>
 25a:	735f 6174 6574      	0x65746174735f
                line[size_b-1-j][k] = pola[k]*polb[j];
 260:	7300                	flw	fs0,32(a4)
 262:	6365                	lui	t1,0x19
 264:	6572                	flw	fa0,28(sp)
 266:	5f74                	lw	a3,124(a4)
 268:	5f79656b          	0x5f79656b
 26c:	0066                	c.slli	zero,0x19
            for (k = size_a-1; k >= 0; k = k-1 ){
 26e:	72636573          	csrrsi	a0,0x726,6
                line[size_b-1-j][k] = pola[k]*polb[j];
 272:	7465                	lui	s0,0xffff9
 274:	6b5f 7965 675f      	0x675f79656b5f
        for (j = size_b -1; j >= 0; j = j-1){
 27a:	7300                	flw	fs0,32(a4)
 27c:	6365                	lui	t1,0x19
 27e:	6572                	flw	fa0,28(sp)
 280:	5f74                	lw	a3,124(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 282:	5f79656b          	0x5f79656b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 286:	7066                	flw	ft0,120(sp)
 288:	7300                	flw	fs0,32(a4)
 28a:	6365                	lui	t1,0x19
 28c:	6572                	flw	fa0,28(sp)
 28e:	5f74                	lw	a3,124(a4)
 290:	5f79656b          	0x5f79656b
 294:	7166                	flw	ft2,120(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 296:	5f00                	lw	s0,56(a4)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 298:	765f 6c61 6575      	0x65756c61765f
            for (k = size_a-1; k >= 0; k = k-1 ){
 29e:	5f00                	lw	s0,56(a4)
 2a0:	3570                	fld	fa2,232(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 2a2:	6f700073          	0x6f700073
 2a6:	616c                	flw	fa1,68(a0)
 2a8:	7000                	flw	fs0,32(s0)
        array_mod(line[i],mod,(size_a+size_b-1));
 2aa:	00626c6f          	jal	s8,262b0 <_stack_start+0x162b0>
        array_add(product, line[i], (size_a + size_b - 1));
 2ae:	746e6f63          	bltu	t3,t1,a0c <generate_keys+0x11e>
 2b2:	6f72                	flw	ft10,28(sp)
 2b4:	526c                	lw	a1,100(a2)
    for (i = 0; i < size_b; ++i){
 2b6:	5f00                	lw	s0,56(a4)
 2b8:	72736377          	0x72736377
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2bc:	6f74                	flw	fa3,92(a4)
    int line[size_b][size_a + size_b];
 2be:	626d                	lui	tp,0x1b
 2c0:	74735f73          	csrrwi	t5,0x747,6
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2c4:	7461                	lui	s0,0xffff8
 2c6:	0065                	c.nop	25
 2c8:	6d5f 6c62 6e65      	0x6e656c626d5f
    int line[size_b][size_a + size_b];
 2ce:	735f 6174 6574      	0x65746174735f
 2d4:	5f00                	lw	s0,56(a4)
 2d6:	745f 5f6d 646d      	0x646d5f6d745f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2dc:	7961                	lui	s2,0xffff8
 2de:	5f00                	lw	s0,56(a4)
 2e0:	5f676973          	csrrsi	s2,0x5f6,14
 2e4:	7566                	flw	fa0,120(sp)
 2e6:	636e                	flw	ft6,216(sp)
 2e8:	5f00                	lw	s0,56(a4)
    int line[size_b][size_a + size_b];
 2ea:	626d                	lui	tp,0x1b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2ec:	7472                	flw	fs0,60(sp)
 2ee:	5f63776f          	jal	a4,378e4 <_stack_start+0x278e4>
    int line[size_b][size_a + size_b];
 2f2:	74617473          	csrrci	s0,0x746,2
    int pola[size_a];
 2f6:	0065                	c.nop	25
 2f8:	615f 6574 6978      	0x69786574615f
    int line[size_b][size_a + size_b];
 2fe:	3074                	fld	fa3,224(s0)
    int pola[size_a];
 300:	7000                	flw	fs0,32(s0)
 302:	6f72                	flw	ft10,28(sp)
    int polb[size_b];
 304:	7564                	flw	fs1,108(a0)
 306:	00327463          	bgeu	tp,gp,30e <polymult2+0x52>
    int pola[size_a];
 30a:	665f 6f6c 6b63      	0x6b636f6c665f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 310:	745f 5f00 775f      	0x775f5f00745f
    int line[size_b][size_a + size_b];
 316:	5f006863          	bltu	zero,a6,906 <generate_keys+0x18>
    int pola[size_a];
 31a:	6f69                	lui	t5,0x1a
 31c:	7362                	flw	ft6,56(sp)
    int polb[size_b];
 31e:	5f00                	lw	s0,56(a4)
            line[i][j] = 0;
 320:	736f6c63          	bltu	t5,s6,a58 <generate_keys+0x16a>
    for(j = 0; j < size_a + size_b -1; ++j){
 324:	0065                	c.nop	25
 	product2[j] = 0;
 326:	5f5f 6473 6469      	0x646964735f5f
 32c:	6e69                	lui	t3,0x1a
    for(j = 0; j < size_a + size_b -1; ++j){
 32e:	7469                	lui	s0,0xffffa
 330:	5f00                	lw	s0,56(a4)
    array_equ(pola,a,size_a);
 332:	69647473          	csrrci	s0,0x696,8
 336:	006e                	c.slli	zero,0x1b
 338:	675f 6d61 616d      	0x616d6d61675f
    array_equ(polb,b,size_b);
 33e:	735f 6769 676e      	0x676e6769735f
    if(star_mult == 1){
 344:	6d61                	lui	s10,0x18
 346:	6c00                	flw	fs0,24(s0)
 348:	20676e6f          	jal	t3,7654e <_stack_start+0x6654e>
 34c:	6f6c                	flw	fa1,92(a4)
 34e:	676e                	flw	fa4,216(sp)
 350:	6920                	flw	fs0,80(a0)
 352:	746e                	flw	fs0,248(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 354:	5f00                	lw	s0,56(a4)
 356:	6162                	flw	ft2,24(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 358:	5f006573          	csrrsi	a0,0x5f0,0
            line[i][j] = 0;
 35c:	7266                	flw	ft4,120(sp)
 35e:	6565                	lui	a0,0x19
        for (i = 0; i < size_b; ++i){
 360:	696c                	flw	fa1,84(a0)
            line[i][j] = 0;
 362:	5f007473          	csrrci	s0,0x5f0,0
 366:	555f 6f4c 676e      	0x676e6f4c555f
        for (i = 0; i < size_b; ++i){
 36c:	5f00                	lw	s0,56(a4)
 36e:	74726377          	0x74726377
 	product2[j] = 0;
 372:	5f626d6f          	jal	s10,26968 <_stack_start+0x16968>
 376:	74617473          	csrrci	s0,0x746,2
    for(j = 0; j < size_a + size_b -1; ++j){
 37a:	0065                	c.nop	25
 37c:	665f 6c69 0065      	0x656c69665f
        for (i = 0; i < size_b; ++i){
 382:	7261                	lui	tp,0xffff8
        for (j = size_b -1; j >= 0; j = j-1){
 384:	6172                	flw	ft2,28(sp)
 386:	5f79                	li	t5,-2
            for (k = size_a-1; k >= 0; k = k-1 ){
 388:	00627573          	csrrci	a0,0x6,4
        array_add(product2,line[i],size_a+size_b-1);
 38c:	6572                	flw	fa0,28(sp)
 38e:	746c7573          	csrrci	a0,0x746,24
    for(i=0;i<size_b;++i){
 392:	006e6f6b          	0x6e6f6b
}
 396:	5f5f 6c63 6165      	0x61656c635f5f
 39c:	756e                	flw	fa0,248(sp)
 39e:	0070                	addi	a2,sp,12
 3a0:	6d5f 7362 6174      	0x617473626d5f
 3a6:	6574                	flw	fa3,76(a0)
 3a8:	745f 5f00 6e66      	0x6e665f00745f
 3ae:	7261                	lui	tp,0xffff8
 3b0:	73007367          	0x73007367
 3b4:	7a69                	lui	s4,0xffffa
 3b6:	5f65                	li	t5,-7
 3b8:	004e                	c.slli	zero,0x13
 3ba:	5f5f 6d74 695f      	0x695f6d745f5f
                line[size_b-1-j][k] = pola[k]*polb[j];
 3c0:	74736473          	csrrsi	s0,0x747,6
 3c4:	5f00                	lw	s0,56(a4)
 3c6:	5f68                	lw	a0,124(a4)
 3c8:	7265                	lui	tp,0xffff9
 3ca:	6e72                	flw	ft8,28(sp)
 3cc:	6172006f          	j	211e2 <_stack_start+0x111e2>
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d0:	646e                	flw	fs0,216(sp)
                line[size_b-1-j][k] = pola[k]*polb[j];
 3d2:	6b5f6d6f          	jal	s10,f7286 <_stack_start+0xe7286>
 3d6:	7965                	lui	s2,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d8:	544e0073          	0x544e0073
        for (j = size_b -1; j >= 0; j = j-1){
 3dc:	5552                	lw	a0,52(sp)
 3de:	345f 5f38 6962      	0x69625f38345f
            for (k = size_a-1; k >= 0; k = k-1 ){
 3e4:	4d74                	lw	a3,92(a0)
 3e6:	632e                	flw	ft6,200(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3e8:	5f00                	lw	s0,56(a4)
 3ea:	745f 5f6d 6f6d      	0x6f6d5f6d745f
 3f0:	006e                	c.slli	zero,0x1b
 3f2:	6f6c                	flw	fa1,92(a4)
 3f4:	676e                	flw	fa4,216(sp)
 3f6:	6420                	flw	fs0,72(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3f8:	6c62756f          	jal	a0,27abe <_stack_start+0x17abe>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3fc:	0065                	c.nop	25
 3fe:	616d                	addi	sp,sp,240
            for (k = size_a-1; k >= 0; k = k-1 ){
 400:	6e69                	lui	t3,0x1a
 402:	5f00                	lw	s0,56(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 404:	74697277          	0x74697277
 408:	0065                	c.nop	25
 40a:	6544                	flw	fs1,12(a0)
        array_add(product2,line[i],size_a+size_b-1);
 40c:	654d5f63          	bge	s10,s4,a6a <generate_keys+0x17c>
 410:	67617373          	csrrci	t1,0x676,2
    for(i=0;i<size_b;++i){
 414:	0065                	c.nop	25
 416:	72617473          	csrrci	s0,0x726,2
    int v[size_N];
 41a:	6d5f 6c75 0074      	0x746c756d5f
 420:	615f 6574 6978      	0x69786574615f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 426:	0074                	addi	a3,sp,12
 428:	6d5f 7362 6174      	0x617473626d5f
 42e:	6574                	flw	fa3,76(a0)
 430:	7300                	flw	fs0,32(a4)
 432:	6f68                	flw	fa0,92(a4)
 434:	7472                	flw	fs0,60(sp)
 436:	6920                	flw	fs0,80(a0)
 438:	746e                	flw	fs0,248(sp)
 43a:	6e00                	flw	fs0,24(a2)
 43c:	7274                	flw	fa3,100(a2)
 43e:	5f75                	li	t5,-3
    int v[size_N];
 440:	6e65                	lui	t3,0x19
 442:	70727963          	bgeu	tp,t2,b54 <generate_keys+0x266>
    int q[size_N];
 446:	0074                	addi	a3,sp,12
 448:	6e69                	lui	t3,0x1a
 44a:	5f727473          	csrrci	s0,0x5f7,4
    int num_temp[size_N];
 44e:	6461                	lui	s0,0x18
    int denum_temp[size_D];
 450:	0064                	addi	s1,sp,12
 452:	6f70                	flw	fa2,92(a4)
 454:	796c                	flw	fa1,116(a0)
 456:	756d                	lui	a0,0xffffb
    int num_temp[size_N];
 458:	746c                	flw	fa1,108(s0)
    int denum_temp[size_D];
 45a:	7100                	flw	fs0,32(a0)
 45c:	5f69                	li	t5,-6
 if(size_N == 106) {
 45e:	0031                	c.nop	12
 460:	656c                	flw	fa1,76(a0)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 462:	676e                	flw	fa4,216(sp)
 464:	6874                	flw	fa3,84(s0)
 466:	5f00                	lw	s0,56(a4)
 468:	735f 0066 735f      	0x735f0066735f
    int v[size_N];
 46e:	6769                	lui	a4,0x1a
    int denum_temp[size_D];
 470:	006e                	c.slli	zero,0x1b
 472:	645f 7461 0061      	0x617461645f
 if(size_N == 106) {
 478:	5f5f 6377 6268      	0x626863775f5f
     array_equ(num_temp, num, size_N - 1);   // 105 elemani ücer ücer yap...
 47e:	5f00                	lw	s0,56(a4)
 480:	626f6c67          	0x626f6c67
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
 484:	6c61                	lui	s8,0x18
 486:	695f 706d 7275      	0x7275706d695f
        array_mod(num_temp, mod, size_N - 1);
 48c:	5f65                	li	t5,-7
 48e:	7470                	flw	fa2,108(s0)
     num_temp[size_N - 1] = num[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
 490:	0072                	c.slli	zero,0x1c
 492:	5f5f 6d74 795f      	0x795f6d745f5f
        while(num_temp[size_N - 1] < 0){
 498:	6165                	addi	sp,sp,112
 49a:	0072                	c.slli	zero,0x1c
 49c:	6572                	flw	fa0,28(sp)
        num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
 49e:	7574                	flw	fa3,108(a0)
 4a0:	6e72                	flw	ft8,28(sp)
 4a2:	615f 6464 6572      	0x65726464615f
     array_equ(num_temp, num, size_N );
 4a8:	00317373          	csrrci	t1,fcsr,2
 4ac:	6572                	flw	fa0,28(sp)
 4ae:	7574                	flw	fa3,108(a0)
        array_mod(num_temp, mod, size_N);
 4b0:	6e72                	flw	ft8,28(sp)
 4b2:	615f 6464 6572      	0x65726464615f
    array_equ(denum_temp,denum,size_D);
 4b8:	00327373          	csrrci	t1,fcsr,4
 4bc:	6572                	flw	fa0,28(sp)
 4be:	7574                	flw	fa3,108(a0)
    array_mod(denum_temp,mod,size_D);
 4c0:	6e72                	flw	ft8,28(sp)
 4c2:	615f 6464 6572      	0x65726464615f
    for (i = 0; i < size_N; ++i){
 4c8:	00337373          	csrrci	t1,fcsr,6
 4cc:	6572                	flw	fa0,28(sp)
    for (i = size_D-1; i >= 0; i = i-1){
 4ce:	7574                	flw	fa3,108(a0)
 4d0:	6e72                	flw	ft8,28(sp)
 4d2:	615f 6464 6572      	0x65726464615f
 4d8:	00347373          	csrrci	t1,fcsr,8
    for (i = 0; i < size_N; ++i){
 4dc:	6572                	flw	fa0,28(sp)
        if ( (b_N*u)%mod == 1 )
 4de:	7574                	flw	fa3,108(a0)
    for (u = 0; u < mod; ++u){
 4e0:	6e72                	flw	ft8,28(sp)
 4e2:	615f 6464 6572      	0x65726464615f
            num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
 4e8:	00357373          	csrrci	t1,fcsr,10
 4ec:	6572                	flw	fa0,28(sp)
 4ee:	7574                	flw	fa3,108(a0)
        q[i] = 0;
 4f0:	6e72                	flw	ft8,28(sp)
 4f2:	615f 6464 6572      	0x65726464615f
        v[i] = 0;
 4f8:	00367373          	csrrci	t1,fcsr,12
        q[i] = 0;
 4fc:	6572                	flw	fa0,28(sp)
        v[i] = 0;
 4fe:	7574                	flw	fa3,108(a0)
 500:	6e72                	flw	ft8,28(sp)
    for (i = 0; i < size_N; ++i){
 502:	615f 6464 6572      	0x65726464615f
    for (i = size_D-1; i >= 0; i = i-1){
 508:	00377373          	csrrci	t1,fcsr,14
        if ( (b_N*u)%mod == 1 )
 50c:	6c5f 636f 6c61      	0x6c61636f6c5f
 512:	6974                	flw	fa3,84(a0)
 514:	656d                	lui	a0,0x1b
    for (u = 0; u < mod; ++u){
 516:	625f 6675 6900      	0x69006675625f
    for (i = size_N-1; i >= 0; i = i-1){
 51c:	736e                	flw	ft6,248(sp)
 51e:	7274                	flw	fa3,100(a2)
 520:	6d5f 646f 5f00      	0x5f00646f6d5f
 526:	6e75                	lui	t3,0x1d
 528:	7375                	lui	t1,0xffffd
    while (d >= d2){
 52a:	6465                	lui	s0,0x19
 52c:	5f00                	lw	s0,56(a4)
 if(size_N == 106) {
 52e:	755f 6e69 3874      	0x38746e69755f
 534:	745f 5f00 656e      	0x656e5f00745f
     array_equ(result, q, size_N - 1);   // 105 elemani ücer ücer yap...
 53a:	635f0077          	0x635f0077
 53e:	7476                	flw	fs0,124(sp)
 540:	656c                	flw	fa1,76(a0)
 542:	006e                	c.slli	zero,0x1b
 544:	6d5f 7861 6477      	0x647778616d5f
     result[size_N - 1] = q[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
 54a:	6c5f0073          	0x6c5f0073
 54e:	3436                	fld	fs0,360(sp)
 550:	5f61                	li	t5,-8
 552:	7562                	flw	fa0,56(sp)
 554:	0066                	c.slli	zero,0x19
 556:	5f5f 7562 6c69      	0x6c6975625f5f
    for(i = size_N; i < (2*size_N); ++i){
 55c:	6974                	flw	fa3,84(a0)
 55e:	5f6e                	lw	t5,248(sp)
        result[i] = num_temp[i-size_N];
 560:	656d                	lui	a0,0x1b
 562:	736d                	lui	t1,0xffffb
 564:	7465                	lui	s0,0xffff9
 566:	5f00                	lw	s0,56(a4)
    for(i = size_N; i < (2*size_N); ++i){
 568:	6c62                	flw	fs8,24(sp)
 56a:	7a69736b          	0x7a69736b
}
 56e:	0065                	c.nop	25
 570:	5f5f 6d74 5f00      	0x5f006d745f5f
 576:	6f6c                	flw	fa1,92(a4)
 578:	64006b63          	bltu	zero,zero,bce <generate_keys+0x2e0>
 57c:	6e65                	lui	t3,0x19
 57e:	6d75                	lui	s10,0x1d
 580:	5f00                	lw	s0,56(a4)
 582:	696e                	flw	fs2,216(sp)
 584:	0073626f          	jal	tp,36d8a <_stack_start+0x26d8a>
 588:	746e6977          	0x746e6977
 58c:	745f 5f00 7364      	0x73645f00745f
 592:	61685f6f          	jal	t5,85ba8 <_stack_start+0x75ba8>
        v[(d-d2)] = u*r_d;
 596:	646e                	flw	fs0,216(sp)
 598:	656c                	flw	fa1,76(a0)
 59a:	7000                	flw	fs0,32(s0)
 59c:	52796c6f          	jal	s8,972c2 <_stack_start+0x872c2>
 5a0:	7200                	flw	fs0,32(a2)
 5a2:	5f69                	li	t5,-6
        if(size_N == 106) {
 5a4:	0031                	c.nop	12
 5a6:	635f 7476 7562      	0x75627476635f
            array_mod(v, mod, size_N - 1);
 5ac:	0066                	c.slli	zero,0x19
 5ae:	6e75                	lui	t3,0x1d
 5b0:	6e676973          	csrrsi	s2,0x6e6,14
 5b4:	6465                	lui	s0,0x19
            while(v[size_N - 1] < 0){
 5b6:	6320                	flw	fs0,64(a4)
 5b8:	6168                	flw	fa0,68(a0)
 5ba:	0072                	c.slli	zero,0x1c
 5bc:	6f70                	flw	fa2,92(a4)
            v[size_N - 1] = v[size_N - 1] % mod;
 5be:	796c                	flw	fa1,116(a0)
 5c0:	0066                	c.slli	zero,0x19
 5c2:	696c                	flw	fa1,84(a0)
 5c4:	656e                	flw	fa0,216(sp)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 5c6:	5f00                	lw	s0,56(a4)
 5c8:	64746567          	0x64746567
 5cc:	7461                	lui	s0,0xffff8
 5ce:	5f65                	li	t5,-7
 5d0:	7265                	lui	tp,0xffff9
 5d2:	0072                	c.slli	zero,0x1c
        if(size_N == 106) {
 5d4:	5f5f 6273 6675      	0x667562735f5f
 5da:	5f00                	lw	s0,56(a4)
 5dc:	65756c67          	0x65756c67
            array_mod(product, mod, size_N - 1);
 5e0:	7200                	flw	fs0,32(a2)
 5e2:	7365                	lui	t1,0xffff9
 5e4:	0031                	c.nop	12
            while(product[size_N - 1] < 0){
 5e6:	6572                	flw	fa0,28(sp)
 5e8:	5f003273          	csrrc	tp,0x5f0,zero
 5ec:	735f 6c67 6575      	0x65756c67735f
            array_sub(num_temp, product, size_N - 1);   // 105 elemani ücer ücer yap...
 5f2:	5f00                	lw	s0,56(a4)
 5f4:	74727473          	csrrci	s0,0x747,4
 5f8:	6c5f6b6f          	jal	s6,f74bc <_stack_start+0xe74bc>
            product[size_N - 1] = product[size_N - 1] % mod;
 5fc:	7361                	lui	t1,0xffff8
            array_sub(num_temp, product, size_N - 1);   // 105 elemani ücer ücer yap...
 5fe:	0074                	addi	a3,sp,12
            num_temp[size_N - 1] = num_temp[size_N - 1] - product[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
 600:	6d5f 7462 776f      	0x776f74626d5f
 606:	74735f63          	bge	t1,t2,d64 <reset_handler+0x30>
            array_mod(num_temp, mod, size_N - 1);
 60a:	7461                	lui	s0,0xffff8
 60c:	0065                	c.nop	25
            num_temp[size_N - 1] = num_temp[size_N - 1] - product[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
 60e:	6c5f 636f 6c61      	0x6c61636f6c5f
 614:	0065                	c.nop	25
 616:	735f 6973 657a      	0x657a6973735f
            while(num_temp[size_N - 1] < 0){
 61c:	745f 5f00 6572      	0x65725f00745f
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
 622:	6e65                	lui	t3,0x19
 624:	0074                	addi	a3,sp,12
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
 626:	726f6873          	csrrsi	a6,0x726,30
 62a:	2074                	fld	fa3,192(s0)
 62c:	6e75                	lui	t3,0x1d
            num_temp[size_N - 1] = num_temp[size_N - 1] % mod;
 62e:	6e676973          	csrrsi	s2,0x6e6,14
            array_add(q, v, size_N - 1);   // 105 elemani ücer ücer yap...
 632:	6465                	lui	s0,0x19
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
 634:	6920                	flw	fs0,80(a0)
 636:	746e                	flw	fs0,248(sp)
 638:	6e00                	flw	fs0,24(a2)
 63a:	7274                	flw	fa3,100(a2)
            array_mod(q, mod, size_N - 1);
 63c:	5f75                	li	t5,-3
 63e:	6564                	flw	fs1,76(a0)
 640:	70796563          	bltu	s2,t2,d4a <reset_handler+0x16>
 644:	0074                	addi	a3,sp,12
            q[size_N - 1] = q[size_N - 1] + v[size_N - 1];        // length (106) üce bolunmedigi icin yazildi!
 646:	665f 746e 7079      	0x7079746e665f
            while(q[size_N - 1] < 0){
 64c:	7365                	lui	t1,0xffff9
 64e:	5f00                	lw	s0,56(a4)
 650:	657a6973          	csrrsi	s2,0x657,20
            q[size_N - 1] = q[size_N - 1] % mod;
 654:	7000                	flw	fs0,32(s0)
 656:	6f72                	flw	ft10,28(sp)
 658:	7564                	flw	fs1,108(a0)
 65a:	70007463          	bgeu	zero,zero,d62 <reset_handler+0x2e>
                v[size_N - 1] = v[size_N - 1]+mod;
 65e:	64796c6f          	jal	s8,974a4 <_stack_start+0x874a4>
 662:	7669                	lui	a2,0xffffa
 664:	5f00                	lw	s0,56(a4)
            array_mod(v, mod, size_N);
 666:	5f66666f          	jal	a2,66c5c <_stack_start+0x56c5c>
 66a:	0074                	addi	a3,sp,12
 66c:	6e5f 7562 0066      	0x6675626e5f
                product[size_N - 1] = product[size_N - 1]+mod;
 672:	755f 756e 6573      	0x6573756e755f
            array_mod(product, mod, size_N);
 678:	5f64                	lw	s1,124(a4)
 67a:	6172                	flw	ft2,28(sp)
 67c:	646e                	flw	fs0,216(sp)
            array_sub(num_temp, product, size_N );
 67e:	5f00                	lw	s0,56(a4)
 680:	6e75                	lui	t3,0x1d
 682:	63657073          	csrci	0x636,10
            array_mod(num_temp, mod, size_N);
 686:	6669                	lui	a2,0x1a
 688:	6569                	lui	a0,0x1a
 68a:	5f64                	lw	s1,124(a4)
 68c:	6f6c                	flw	fa1,92(a4)
            array_add(q, v, size_N );
 68e:	656c6163          	bltu	s8,s6,cd0 <ntru_deceypt+0x68>
 692:	695f 666e 006f      	0x6f666e695f
            array_mod(q, mod, size_N);
 698:	665f 616c 7367      	0x7367616c665f
    int v[size_N];
 69e:	0032                	c.slli	zero,0xc
        for (i = size_N-1; i >= 0; i = i-1){
 6a0:	695f 5f73 7863      	0x78635f73695f
 6a6:	0061                	c.nop	24
 6a8:	735f 6565 0064      	0x646565735f
 6ae:	725f 6e61 5f64      	0x5f646e61725f
                num_temp[size_N - 1] = num_temp[size_N - 1]+mod;
 6b4:	656e                	flw	fa0,216(sp)
 6b6:	7478                	flw	fa4,108(s0)
                q[size_N - 1] = q[size_N - 1]+mod;
 6b8:	5f00                	lw	s0,56(a4)
 6ba:	6c5f 636f 6c61      	0x6c61636f6c5f
            if( num_temp[i] != 0 )
 6c0:	5f65                	li	t5,-7
        for (i = size_N-1; i >= 0; i = i-1){
 6c2:	0074                	addi	a3,sp,12
 6c4:	735f 6565 006b      	0x6b6565735f
            v[i] = 0;
 6ca:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
 6ce:	20373143          	fmadd.s	ft2,fa4,ft3,ft4,rup
        for (i = 0; i < size_N; ++i){
 6d2:	2e39                	jal	9f0 <generate_keys+0x102>
 6d4:	2e32                	fld	ft8,264(sp)
 6d6:	2030                	fld	fa2,64(s0)
     array_equ(result, q, size_N );
 6d8:	6d2d                	lui	s10,0xb
 6da:	7261                	lui	tp,0xffff8
 6dc:	723d6863          	bltu	s10,gp,e0c <memcpy+0x66>
 6e0:	3376                	fld	ft6,376(sp)
 6e2:	6932                	flw	fs2,12(sp)
 6e4:	636d                	lui	t1,0x1b
 6e6:	2d20                	fld	fs0,88(a0)
 6e8:	616d                	addi	sp,sp,240
        result[i] = num_temp[i-size_N];
 6ea:	6962                	flw	fs2,24(sp)
 6ec:	693d                	lui	s2,0xf
 6ee:	706c                	flw	fa1,100(s0)
 6f0:	2d203233          	0x2d203233
 6f4:	636d                	lui	t1,0x1b
 6f6:	6f6d                	lui	t5,0x1b
    for(i = size_N; i < (2*size_N); ++i){
 6f8:	6564                	flw	fs1,76(a0)
        result[i] = num_temp[i-size_N];
 6fa:	3d6c                	fld	fa1,248(a0)
    for(i = size_N; i < (2*size_N); ++i){
 6fc:	656d                	lui	a0,0x1b
    int ri_2[size]; // MX-ring poly, a
 6fe:	6164                	flw	fs1,68(a0)
 700:	796e                	flw	fs2,248(sp)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 702:	2d20                	fld	fs0,88(a0)
    int ri_2[size]; // MX-ring poly, a
 704:	746d                	lui	s0,0xffffb
 706:	6e75                	lui	t3,0x1d
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 708:	3d65                	jal	5c0 <polydiv+0x1a6>
 70a:	6f72                	flw	ft10,28(sp)
 70c:	74656b63          	bltu	a0,t1,e62 <memcpy+0xbc>
 710:	2d20                	fld	fs0,88(a0)
 712:	4f2d2067          	0x4f2d2067
 716:	662d2073          	csrs	0x662,s10
 71a:	6976                	flw	fs2,92(sp)
 71c:	69626973          	csrrsi	s2,0x696,4
 720:	696c                	flw	fa1,84(a0)
 722:	7974                	flw	fa3,116(a0)
    int ri_2[size]; // MX-ring poly, a
 724:	683d                	lui	a6,0xf
 726:	6469                	lui	s0,0x1a
 728:	6564                	flw	fs1,76(a0)
    int ri_1[size]; // f-random poly, f[N] = 0, b
 72a:	006e                	c.slli	zero,0x1b
 72c:	735f 6474 7265      	0x72656474735f
    int ri[size];
 732:	0072                	c.slli	zero,0x1c
 734:	6e5f 616d 6c6c      	0x6c6c616d6e5f
    int ti_1[size]; // ti_1[0] = 1
 73a:	5f00636f          	jal	t1,6d2a <_stack_len+0x2d2a>
    int ti[size];
 73e:	6275                	lui	tp,0x1d
 740:	6675                	lui	a2,0x1d
    int qi_1[size];
 742:	7000                	flw	fs0,32(s0)
 744:	6d796c6f          	jal	s8,9761a <_stack_start+0x8761a>
    int temp[size];
 748:	6c75                	lui	s8,0x1d
 74a:	3274                	fld	fa3,224(a2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 74c:	6300                	flw	fs0,0(a4)
 74e:	7472                	flw	fs0,60(sp)
 750:	2e30                	fld	fa2,88(a2)
    int ri_2[size]; // MX-ring poly, a
 752:	4e470053          	0x4e470053
    int temp[size];
 756:	2055                	jal	7fa <ext_euclid+0xfc>
    for (i = 0; i < size; ++i) {
 758:	5341                	li	t1,-16
        ti_2[i] = 0;
 75a:	3220                	fld	fs0,96(a2)
 75c:	332e                	fld	ft6,232(sp)
 75e:	0032                	c.slli	zero,0xc

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <polydiv+0x266>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0022                	c.slli	zero,0x8
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	00b4                	addi	a3,sp,72
  3a:	0000                	unimp
  3c:	0006                	c.slli	zero,0x1
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	00ba                	slli	ra,ra,0xe
  4a:	0000                	unimp
  4c:	0022                	c.slli	zero,0x8
  4e:	0000                	unimp
  50:	000c                	0xc
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	00dc                	addi	a5,sp,68
  5a:	0000                	unimp
  5c:	0006                	c.slli	zero,0x1
  5e:	0000                	unimp
  60:	000c                	0xc
  62:	0000                	unimp
  64:	0000                	unimp
  66:	0000                	unimp
  68:	00e2                	slli	ra,ra,0x18
  6a:	0000                	unimp
  6c:	0022                	c.slli	zero,0x8
  6e:	0000                	unimp
  70:	000c                	0xc
  72:	0000                	unimp
  74:	0000                	unimp
  76:	0000                	unimp
  78:	0104                	addi	s1,sp,128
  7a:	0000                	unimp
  jal x0, default_exc_handler
  7c:	0006                	c.slli	zero,0x1
  7e:	0000                	unimp
  jal x0, reset_handler
  80:	000c                	0xc
  82:	0000                	unimp
  jal x0, default_exc_handler
  84:	0000                	unimp
  86:	0000                	unimp
  jal x0, default_exc_handler
  88:	010a                	slli	sp,sp,0x2
  8a:	0000                	unimp
    asm volatile(
  8c:	001e                	c.slli	zero,0x7
  8e:	0000                	unimp
}
  90:	0058                	addi	a4,sp,4
    for(i=0;i<(length/3);i++) {
  92:	0000                	unimp
  94:	0000                	unimp
  96:	0000                	unimp
  98:	0128                	addi	a0,sp,136
  9a:	0000                	unimp
  9c:	0194                	addi	a3,sp,192
  9e:	0000                	unimp
}
  a0:	0e42                	slli	t3,t3,0x10
      instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	4450                	lw	a2,12(s0)
  a4:	0492                	slli	s1,s1,0x4
    asm volatile(
  a6:	0694                	addi	a3,sp,832
  a8:	954e                	add	a0,a0,s3
  aa:	600b9907          	0x600b9907
  ae:	0288                	addi	a0,sp,320
    for(i=0;i<(length/3);i++) {
  b0:	0389                	addi	t2,t2,2
  b2:	08960593          	addi	a1,a2,137 # 1d089 <_stack_start+0xd089>
    asm volatile(
  b6:	0a980997          	auipc	s3,0xa980
    for(i=0;i<(length/3);i++) {
  ba:	0c9a                	slli	s9,s9,0x6
  bc:	01810d9b          	0x1810d9b
  c0:	0c42                	slli	s8,s8,0x10
  c2:	0008                	0x8
  c4:	da02                	sw	zero,52(sp)
  c6:	0c0a                	slli	s8,s8,0x2
}
  c8:	5002                	0x5002
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  ca:	c142                	sw	a6,128(sp)
  cc:	c842                	sw	a6,16(sp)
    asm volatile(
  ce:	c942                	sw	a6,144(sp)
  d0:	d242                	sw	a6,36(sp)
  d2:	d342                	sw	a6,164(sp)
  d4:	d442                	sw	a6,40(sp)
  d6:	d542                	sw	a6,168(sp)
    for(i=0;i<(length/3);i++) {
  d8:	d642                	sw	a6,44(sp)
  da:	d742                	sw	a6,172(sp)
    asm volatile(
  dc:	d842                	sw	a6,48(sp)
  de:	d942                	sw	a6,176(sp)
}
  e0:	da42                	sw	a6,52(sp)
    for(i=0;i<(length/3);i++) {
  e2:	db42                	sw	a6,180(sp)
  e4:	0e4a                	slli	t3,t3,0x12
  e6:	4200                	lw	s0,0(a2)
  e8:	0000000b          	0xb
  ec:	0058                	addi	a4,sp,4
  ee:	0000                	unimp
}
  f0:	0000                	unimp
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	0000                	unimp
  f4:	02bc                	addi	a5,sp,328
    asm volatile(
  f6:	0000                	unimp
  f8:	015e                	slli	sp,sp,0x17
  fa:	0000                	unimp
  fc:	0e42                	slli	t3,t3,0x10
  fe:	4640                	lw	s0,12(a2)
    for(i=0;i<(length/3);i++) {
 100:	0492                	slli	s1,s1,0x4
 102:	9348                	0x9348
    asm volatile(
 104:	9705                	srai	a4,a4,0x21
 106:	6209                	lui	tp,0x2
}
 108:	0288                	addi	a0,sp,320
    for(i=0;i<(length/3);i++) {
 10a:	0389                	addi	t2,t2,2
 10c:	0694                	addi	a3,sp,832
 10e:	0795                	addi	a5,a5,5
    asm volatile(
 110:	0896                	slli	a7,a7,0x5
    for(i=0;i<(length/3);i++) {
 112:	0a98                	addi	a4,sp,336
 114:	0b99                	addi	s7,s7,6
 116:	0c9a                	slli	s9,s9,0x6
}
 118:	01810d9b          	0x1810d9b
    asm volatile(
 11c:	0c42                	slli	s8,s8,0x10
 11e:	0008                	0x8
 120:	aa02                	fsd	ft0,272(sp)
 122:	0c0a                	slli	s8,s8,0x2
    for(i=0;i<(length/3);i++) {
 124:	4002                	0x4002
 126:	c142                	sw	a6,128(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 128:	c842                	sw	a6,16(sp)
 12a:	c942                	sw	a6,144(sp)
 12c:	d242                	sw	a6,36(sp)
 12e:	d342                	sw	a6,164(sp)
 130:	d442                	sw	a6,40(sp)
 132:	d542                	sw	a6,168(sp)
    int line[size_b][size_a + size_b];
 134:	d642                	sw	a6,44(sp)
 136:	d742                	sw	a6,172(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 138:	d842                	sw	a6,48(sp)
 13a:	d942                	sw	a6,176(sp)
    int line[size_b][size_a + size_b];
 13c:	da42                	sw	a6,52(sp)
 13e:	db42                	sw	a6,180(sp)
 140:	0e4a                	slli	t3,t3,0x12
 142:	4200                	lw	s0,0(a2)
 144:	0000000b          	0xb
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 148:	0054                	addi	a3,sp,4
 14a:	0000                	unimp
 14c:	0000                	unimp
 14e:	0000                	unimp
 150:	041a                	slli	s0,s0,0x6
 152:	0000                	unimp
 154:	02e4                	addi	s1,sp,332
 156:	0000                	unimp
 158:	0e46                	slli	t3,t3,0x11
    int line[size_b][size_a + size_b];
 15a:	5e40                	lw	s0,60(a2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 15c:	0288                	addi	a0,sp,320
    int line[size_b][size_a + size_b];
 15e:	0389                	addi	t2,t2,2
 160:	0492                	slli	s1,s1,0x4
 162:	06940593          	addi	a1,s0,105 # 1a069 <_stack_start+0xa069>
    int pola[size_a];
 166:	0795                	addi	a5,a5,5
 168:	0896                	slli	a7,a7,0x5
 16a:	0a980997          	auipc	s3,0xa980
 16e:	0b99                	addi	s7,s7,6
 170:	0c9a                	slli	s9,s9,0x6
    int polb[size_b];
 172:	01810d9b          	0x1810d9b
 176:	0c42                	slli	s8,s8,0x10
    int pola[size_a];
 178:	0008                	0x8
    int polb[size_b];
 17a:	0a013003          	0xa013003
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 17e:	020c                	addi	a1,sp,256
 180:	4240                	lw	s0,4(a2)
 182:	42c1                	li	t0,16
    int line[size_b][size_a + size_b];
 184:	42c8                	lw	a0,4(a3)
 186:	42c9                	li	t0,18
    int pola[size_a];
 188:	42d2                	lw	t0,20(sp)
 18a:	42d442d3          	0x42d442d3
    int polb[size_b];
 18e:	42d5                	li	t0,21
            line[i][j] = 0;   
 190:	42d6                	lw	t0,84(sp)
 192:	42d842d7          	0x42d842d7
	product[j] = 0;
 196:	42d9                	li	t0,22
 198:	42da                	lw	t0,148(sp)
 19a:	000e4adb          	0xe4adb
  for(j = 0; j < size_a + size_b -1; ++j) {
 19e:	0b42                	slli	s6,s6,0x10
 1a0:	0054                	addi	a3,sp,4
    array_equ(pola,a,size_a);
 1a2:	0000                	unimp
 1a4:	0000                	unimp
 1a6:	0000                	unimp
 1a8:	06fe                	slli	a3,a3,0x1f
 1aa:	0000                	unimp
 1ac:	01f0                	addi	a2,sp,204
 1ae:	0000                	unimp
 1b0:	0e46                	slli	t3,t3,0x11
    array_mod(pola,mod,size_a);
 1b2:	5e50                	lw	a2,60(a2)
 1b4:	0288                	addi	a0,sp,320
 1b6:	0389                	addi	t2,t2,2
 1b8:	0492                	slli	s1,s1,0x4
    array_equ(polb,b,size_b);
 1ba:	06940593          	addi	a1,s0,105
 1be:	0795                	addi	a5,a5,5
 1c0:	0896                	slli	a7,a7,0x5
 1c2:	0a980997          	auipc	s3,0xa980
    array_mod(polb,mod,size_b);
 1c6:	0b99                	addi	s7,s7,6
 1c8:	0c9a                	slli	s9,s9,0x6
 1ca:	01810d9b          	0x1810d9b
    if(star_mult == 1){
 1ce:	0c42                	slli	s8,s8,0x10
 1d0:	0008                	0x8
 1d2:	0a013e03          	0xa013e03
 1d6:	020c                	addi	a1,sp,256
 1d8:	4250                	lw	a2,4(a2)
 1da:	42c1                	li	t0,16
 1dc:	42c8                	lw	a0,4(a3)
 1de:	42c9                	li	t0,18
 1e0:	42d2                	lw	t0,20(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 1e2:	42d442d3          	0x42d442d3
            for (k = size_a-1; k >= 0; k = k-1 ){
 1e6:	42d5                	li	t0,21
 1e8:	42d6                	lw	t0,84(sp)
            line[i][j] = 0;   
 1ea:	42d842d7          	0x42d842d7
         for (i = 0; i < size_b; ++i){
 1ee:	42d9                	li	t0,22
            line[i][j] = 0;   
 1f0:	42da                	lw	t0,148(sp)
 1f2:	000e4adb          	0xe4adb
 1f6:	0b42                	slli	s6,s6,0x10
 1f8:	0054                	addi	a3,sp,4
         for (i = 0; i < size_b; ++i){
 1fa:	0000                	unimp
 1fc:	0000                	unimp
	product[j] = 0;
 1fe:	0000                	unimp
 200:	08ee                	slli	a7,a7,0x1b
 202:	0000                	unimp
 204:	02f2                	slli	t0,t0,0x1c
 206:	0000                	unimp
  for(j = 0; j < size_a + size_b -1; ++j) {
 208:	0e42                	slli	t3,t3,0x10
 20a:	03f0                	addi	a2,sp,460
         for (i = 0; i < size_b; ++i){
 20c:	814c                	0x814c
 20e:	8801                	andi	s0,s0,0
 210:	8902                	jr	s2
        for (j = size_b -1; j >= 0; j = j-1){
 212:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
 216:	6400                	flw	fs0,8(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 218:	0492                	slli	s1,s1,0x4
        array_add(product, line[i], (size_a + size_b - 1));
 21a:	06940593          	addi	a1,s0,105
 21e:	0795                	addi	a5,a5,5
 220:	0896                	slli	a7,a7,0x5
        array_mod(line[i],mod,(size_a+size_b-1));
 222:	0c9a0997          	auipc	s3,0xc9a0
    for (i = 0; i < size_b; ++i){
 226:	0a98                	addi	a4,sp,336
 228:	0b99                	addi	s7,s7,6
    array_mod(product,mod,(size_a+size_b-1));
 22a:	0a01da03          	lhu	s4,160(gp)
 22e:	020c                	addi	a1,sp,256
 230:	03f0                	addi	a2,sp,460
 232:	c144                	sw	s1,4(a0)
}
 234:	c844                	sw	s1,20(s0)
 236:	c944                	sw	s1,20(a0)
 238:	d244                	sw	s1,36(a2)
 23a:	d344                	sw	s1,36(a4)
 23c:	d444                	sw	s1,44(s0)
 23e:	d544                	sw	s1,44(a0)
 240:	d644                	sw	s1,44(a2)
 242:	d744                	sw	s1,44(a4)
 244:	d844                	sw	s1,52(s0)
 246:	d944                	sw	s1,52(a0)
 248:	da44                	sw	s1,52(a2)
 24a:	0e4a                	slli	t3,t3,0x12
 24c:	4200                	lw	s0,0(a2)
 24e:	0034000b          	0x34000b
 252:	0000                	unimp
 254:	0000                	unimp
 256:	0000                	unimp
 258:	0be0                	addi	s0,sp,476
 25a:	0000                	unimp
 25c:	0088                	addi	a0,sp,64
                line[size_b-1-j][k] = pola[k]*polb[j];
 25e:	0000                	unimp
 260:	0e42                	slli	t3,t3,0x10
 262:	01e0                	addi	s0,sp,204
 264:	8844                	0x8844
 266:	8902                	jr	s2
 268:	04924a03          	lbu	s4,73(tp) # 2049 <_min_stack+0x49>
 26c:	8152                	mv	sp,s4
            for (k = size_a-1; k >= 0; k = k-1 ){
 26e:	9301                	srli	a4,a4,0x20
                line[size_b-1-j][k] = pola[k]*polb[j];
 270:	9405                	srai	s0,s0,0x21
 272:	0206                	slli	tp,tp,0x1
 274:	0a46                	slli	s4,s4,0x11
            for (k = size_a-1; k >= 0; k = k-1 ){
 276:	42c1                	li	t0,16
 278:	42c8                	lw	a0,4(a3)
        for (j = size_b -1; j >= 0; j = j-1){
 27a:	42c9                	li	t0,18
 27c:	42d2                	lw	t0,20(sp)
 27e:	42d442d3          	0x42d442d3
            for (k = size_a-1; k >= 0; k = k-1 ){
 282:	000e                	c.slli	zero,0x3
 284:	0b42                	slli	s6,s6,0x10
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 286:	0000                	unimp
 288:	0040                	addi	s0,sp,4
 28a:	0000                	unimp
 28c:	0000                	unimp
 28e:	0000                	unimp
 290:	0c68                	addi	a0,sp,540
 292:	0000                	unimp
 294:	00c8                	addi	a0,sp,68
            for (k = size_a-1; k >= 0; k = k-1 ){
 296:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 298:	0e42                	slli	t3,t3,0x10
 29a:	4430                	lw	a2,72(s0)
 29c:	0288                	addi	a0,sp,320
            for (k = size_a-1; k >= 0; k = k-1 ){
 29e:	924e0593          	addi	a1,t3,-1756 # 1c924 <_stack_start+0xc924>
        for (j = size_b -1; j >= 0; j = j-1){
 2a2:	9504                	0x9504
 2a4:	58099707          	0x58099707
 2a8:	0181                	addi	gp,gp,0
        array_mod(line[i],mod,(size_a+size_b-1));
 2aa:	0389                	addi	t2,t2,2
 2ac:	0694                	addi	a3,sp,832
        array_add(product, line[i], (size_a + size_b - 1));
 2ae:	0896                	slli	a7,a7,0x5
 2b0:	5202                	lw	tp,32(sp)
 2b2:	c10a                	sw	sp,128(sp)
 2b4:	c842                	sw	a6,16(sp)
    for (i = 0; i < size_b; ++i){
 2b6:	c942                	sw	a6,144(sp)
 2b8:	d242                	sw	a6,36(sp)
 2ba:	d342                	sw	a6,164(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2bc:	d442                	sw	a6,40(sp)
    int line[size_b][size_a + size_b];
 2be:	d542                	sw	a6,168(sp)
 2c0:	d642                	sw	a6,44(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2c2:	d742                	sw	a6,172(sp)
 2c4:	0e42                	slli	t3,t3,0x10
 2c6:	4200                	lw	s0,0(a2)
 2c8:	0000000b          	0xb
    int line[size_b][size_a + size_b];
 2cc:	0020                	addi	s0,sp,8
 2ce:	0000                	unimp
 2d0:	0000                	unimp
 2d2:	0000                	unimp
 2d4:	0f2c                	addi	a1,sp,920
 2d6:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2d8:	0118                	addi	a4,sp,128
 2da:	0000                	unimp
 2dc:	0e44                	addi	s1,sp,788
 2de:	08b0                	addi	a2,sp,88
 2e0:	8156                	mv	sp,s5
 2e2:	8801                	andi	s0,s0,0
 2e4:	0202                	c.slli64	tp
 2e6:	0ade                	slli	s5,s5,0x17
 2e8:	44c1                	li	s1,16
    int line[size_b][size_a + size_b];
 2ea:	46c8                	lw	a0,12(a3)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2ec:	000e                	c.slli	zero,0x3
 2ee:	0b42                	slli	s6,s6,0x10

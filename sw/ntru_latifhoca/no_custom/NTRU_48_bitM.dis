
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  7c:	5610006f          	j	ddc <default_exc_handler>
  80:	5610006f          	j	de0 <reset_handler>
  84:	5590006f          	j	ddc <default_exc_handler>
  88:	5550006f          	j	ddc <default_exc_handler>

Disassembly of section .text:

0000008c <polymult>:



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){

    int line[size_b][size_a + size_b];
      8c:	00d588b3          	add	a7,a1,a3
      90:	00269813          	slli	a6,a3,0x2
      94:	00289f13          	slli	t5,a7,0x2
      98:	fff88e93          	addi	t4,a7,-1
      9c:	030888b3          	mul	a7,a7,a6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      a0:	1101                	addi	sp,sp,-32
      a2:	cc26                	sw	s1,24(sp)
      a4:	84be                	mv	s1,a5
    int i,j,k;
    int *return_address1;
    int pola[size_a];
      a6:	00259793          	slli	a5,a1,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      aa:	ce22                	sw	s0,28(sp)
      ac:	ca4a                	sw	s2,20(sp)
      ae:	c84e                	sw	s3,16(sp)
      b0:	c652                	sw	s4,12(sp)
      b2:	c05e                	sw	s7,0(sp)
    int line[size_b][size_a + size_b];
      b4:	08bd                	addi	a7,a7,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b6:	c456                	sw	s5,8(sp)
      b8:	c25a                	sw	s6,4(sp)
      ba:	1000                	addi	s0,sp,32
    int line[size_b][size_a + size_b];
      bc:	ff08f893          	andi	a7,a7,-16
    int pola[size_a];
      c0:	07bd                	addi	a5,a5,15
      c2:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
      c4:	41110133          	sub	sp,sp,a7
      c8:	8e0a                	mv	t3,sp
    int pola[size_a];
      ca:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
      ce:	00f80793          	addi	a5,a6,15
      d2:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
      d4:	828a                	mv	t0,sp
    int polb[size_b];
      d6:	40f10133          	sub	sp,sp,a5
    int line[size_b][size_a + size_b];
      da:	fff68313          	addi	t1,a3,-1
    int pola[size_a];
      de:	fff58913          	addi	s2,a1,-1
    int polb[size_b];
      e2:	878a                	mv	a5,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
      e4:	002f5393          	srli	t2,t5,0x2
      e8:	8ff2                	mv	t6,t3
    for (i = 0; i < size_b; ++i){
      ea:	8a72                	mv	s4,t3
      ec:	4981                	li	s3,0
            product[j] = 0;
      ee:	00001b97          	auipc	s7,0x1
      f2:	176b8b93          	addi	s7,s7,374 # 1264 <_bss_start>
    for (i = 0; i < size_b; ++i){
      f6:	04d9c463          	blt	s3,a3,13e <polymult+0xb2>
      fa:	8996                	mv	s3,t0
        }
    }

    // make mod calculations
    for (i = 0; i < size_a; ++i){
      fc:	4a01                	li	s4,0
      fe:	04ba4363          	blt	s4,a1,144 <polymult+0xb8>
     102:	853e                	mv	a0,a5
        }
        pola[i] = pola[i] % mod;
    }


    for (i = 0; i < size_b; ++i){
     104:	4881                	li	a7,0
     106:	06d8c363          	blt	a7,a3,16c <polymult+0xe0>
        }
        polb[i] = polb[i] % mod;
    }

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     10a:	4605                	li	a2,1
     10c:	97c2                	add	a5,a5,a6
     10e:	08c48063          	beq	s1,a2,18e <polymult+0x102>
     112:	1871                	addi	a6,a6,-4
     114:	ffcf0513          	addi	a0,t5,-4
     118:	9872                	add	a6,a6,t3
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     11a:	06034d63          	bltz	t1,194 <polymult+0x108>
            for (k = size_a-1; k >= 0; k = k-1 ){
     11e:	864a                	mv	a2,s2
     120:	a8d5                	j	214 <polymult+0x188>
            product[j] = 0;
     122:	00289b13          	slli	s6,a7,0x2
     126:	9b5e                	add	s6,s6,s7
            line[i][j] = 0;
     128:	000aa023          	sw	zero,0(s5)
            product[j] = 0;
     12c:	000b2023          	sw	zero,0(s6)
        for(j = 0; j < size_a + size_b -1; ++j){
     130:	0885                	addi	a7,a7,1
     132:	0a91                	addi	s5,s5,4
     134:	ffd8c7e3          	blt	a7,t4,122 <polymult+0x96>
    for (i = 0; i < size_b; ++i){
     138:	0985                	addi	s3,s3,1
     13a:	9a7a                	add	s4,s4,t5
     13c:	bf6d                	j	f6 <polymult+0x6a>
     13e:	8ad2                	mv	s5,s4
        for(j = 0; j < size_a + size_b -1; ++j){
     140:	4881                	li	a7,0
     142:	bfcd                	j	134 <polymult+0xa8>
        pola[i] = a[i];
     144:	002a1893          	slli	a7,s4,0x2
     148:	98aa                	add	a7,a7,a0
     14a:	0008a883          	lw	a7,0(a7)
            pola[i] = pola[i] + mod;
     14e:	0119a023          	sw	a7,0(s3)
        while (pola[i] < 0){
     152:	0009a883          	lw	a7,0(s3)
     156:	0008c963          	bltz	a7,168 <polymult+0xdc>
        pola[i] = pola[i] % mod;
     15a:	02e8e8b3          	rem	a7,a7,a4
    for (i = 0; i < size_a; ++i){
     15e:	0a05                	addi	s4,s4,1
     160:	0991                	addi	s3,s3,4
        pola[i] = pola[i] % mod;
     162:	ff19ae23          	sw	a7,-4(s3)
    for (i = 0; i < size_a; ++i){
     166:	bf61                	j	fe <polymult+0x72>
            pola[i] = pola[i] + mod;
     168:	98ba                	add	a7,a7,a4
     16a:	b7d5                	j	14e <polymult+0xc2>
        polb[i] = b[i];
     16c:	00289593          	slli	a1,a7,0x2
     170:	95b2                	add	a1,a1,a2
     172:	418c                	lw	a1,0(a1)
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     174:	c10c                	sw	a1,0(a0)
        while (polb[i] < 0){
     176:	410c                	lw	a1,0(a0)
     178:	0005c963          	bltz	a1,18a <polymult+0xfe>
        polb[i] = polb[i] % mod;
     17c:	02e5e5b3          	rem	a1,a1,a4
    for (i = 0; i < size_b; ++i){
     180:	0885                	addi	a7,a7,1
     182:	0511                	addi	a0,a0,4
        polb[i] = polb[i] % mod;
     184:	feb52e23          	sw	a1,-4(a0)
    for (i = 0; i < size_b; ++i){
     188:	bfbd                	j	106 <polymult+0x7a>
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     18a:	95ba                	add	a1,a1,a4
     18c:	b7e5                	j	174 <polymult+0xe8>
    if(star_mult == 1){
     18e:	8572                	mv	a0,t3
        for (j = size_b -1; j >= 0; j = j-1){
     190:	06035363          	bgez	t1,1f6 <polymult+0x16a>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
     194:	4601                	li	a2,0
    for (i = 0; i < size_b; ++i){
     196:	0ad64163          	blt	a2,a3,238 <polymult+0x1ac>
     19a:	00001617          	auipc	a2,0x1
     19e:	0ca60613          	addi	a2,a2,202 # 1264 <_bss_start>
     1a2:	8532                	mv	a0,a2
            line[i][j] = line[i][j] % mod;
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
     1a4:	4581                	li	a1,0
     1a6:	0bd5cc63          	blt	a1,t4,25e <polymult+0x1d2>
            product[j] += line[i][j];
        }
    }

    //mod calculations
    for(j = 0; j < size_a + size_b -1; ++j){
     1aa:	4781                	li	a5,0
     1ac:	0bd7cb63          	blt	a5,t4,262 <polymult+0x1d6>
    }

    return_address1 = &product[0];

    return return_address1;
}
     1b0:	fe040113          	addi	sp,s0,-32
     1b4:	4472                	lw	s0,28(sp)
     1b6:	44e2                	lw	s1,24(sp)
     1b8:	4952                	lw	s2,20(sp)
     1ba:	49c2                	lw	s3,16(sp)
     1bc:	4a32                	lw	s4,12(sp)
     1be:	4aa2                	lw	s5,8(sp)
     1c0:	4b12                	lw	s6,4(sp)
     1c2:	4b82                	lw	s7,0(sp)
     1c4:	00001517          	auipc	a0,0x1
     1c8:	0a050513          	addi	a0,a0,160 # 1264 <_bss_start>
     1cc:	6105                	addi	sp,sp,32
     1ce:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     1d0:	00261593          	slli	a1,a2,0x2
     1d4:	00b50833          	add	a6,a0,a1
     1d8:	9596                	add	a1,a1,t0
     1da:	418c                	lw	a1,0(a1)
     1dc:	ffc7a883          	lw	a7,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e0:	167d                	addi	a2,a2,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     1e2:	031585b3          	mul	a1,a1,a7
     1e6:	00b82023          	sw	a1,0(a6)
            for (k = size_a-1; k >= 0; k = k-1 ){
     1ea:	fe0653e3          	bgez	a2,1d0 <polymult+0x144>
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	137d                	addi	t1,t1,-1
     1f0:	17f1                	addi	a5,a5,-4
     1f2:	957a                	add	a0,a0,t5
     1f4:	bf71                	j	190 <polymult+0x104>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f6:	864a                	mv	a2,s2
     1f8:	bfcd                	j	1ea <polymult+0x15e>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     1fa:	00261593          	slli	a1,a2,0x2
     1fe:	00b808b3          	add	a7,a6,a1
     202:	9596                	add	a1,a1,t0
     204:	418c                	lw	a1,0(a1)
     206:	ffc7a483          	lw	s1,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     20a:	167d                	addi	a2,a2,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     20c:	029585b3          	mul	a1,a1,s1
     210:	00b8a023          	sw	a1,0(a7)
            for (k = size_a-1; k >= 0; k = k-1 ){
     214:	fe0653e3          	bgez	a2,1fa <polymult+0x16e>
        for (j = size_b -1; j >= 0; j = j-1){
     218:	137d                	addi	t1,t1,-1
     21a:	17f1                	addi	a5,a5,-4
     21c:	982a                	add	a6,a6,a0
     21e:	bdf5                	j	11a <polymult+0x8e>
            line[i][j] = line[i][j] % mod;
     220:	4388                	lw	a0,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     222:	0585                	addi	a1,a1,1
     224:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
     226:	02e56533          	rem	a0,a0,a4
     22a:	fea7ae23          	sw	a0,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     22e:	ffd5c9e3          	blt	a1,t4,220 <polymult+0x194>
    for (i = 0; i < size_b; ++i){
     232:	0605                	addi	a2,a2,1
     234:	9ffa                	add	t6,t6,t5
     236:	b785                	j	196 <polymult+0x10a>
     238:	87fe                	mv	a5,t6
        for(j = 0; j < size_a + size_b -1; ++j){
     23a:	4581                	li	a1,0
     23c:	bfcd                	j	22e <polymult+0x1a2>
            product[j] += line[i][j];
     23e:	027807b3          	mul	a5,a6,t2
     242:	00052883          	lw	a7,0(a0)
        for(i = 0; i < size_b; ++i){
     246:	0805                	addi	a6,a6,1
            product[j] += line[i][j];
     248:	97ae                	add	a5,a5,a1
     24a:	078a                	slli	a5,a5,0x2
     24c:	97f2                	add	a5,a5,t3
     24e:	439c                	lw	a5,0(a5)
     250:	97c6                	add	a5,a5,a7
     252:	c11c                	sw	a5,0(a0)
        for(i = 0; i < size_b; ++i){
     254:	fed845e3          	blt	a6,a3,23e <polymult+0x1b2>
    for(j = 0; j < size_a + size_b -1; ++j){
     258:	0585                	addi	a1,a1,1
     25a:	0511                	addi	a0,a0,4
     25c:	b7a9                	j	1a6 <polymult+0x11a>
        for(i = 0; i < size_b; ++i){
     25e:	4801                	li	a6,0
     260:	bfd5                	j	254 <polymult+0x1c8>
        product[j] = product[j] % mod;
     262:	4214                	lw	a3,0(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	0785                	addi	a5,a5,1
     266:	0611                	addi	a2,a2,4
        product[j] = product[j] % mod;
     268:	02e6e6b3          	rem	a3,a3,a4
     26c:	fed62e23          	sw	a3,-4(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
     270:	bf35                	j	1ac <polymult+0x120>

00000272 <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
   

    int line[size_b][size_a + size_b];
     272:	00d587b3          	add	a5,a1,a3
     276:	00269813          	slli	a6,a3,0x2
     27a:	00279313          	slli	t1,a5,0x2
     27e:	fff78e93          	addi	t4,a5,-1
     282:	030787b3          	mul	a5,a5,a6
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     286:	1101                	addi	sp,sp,-32
     288:	ce22                	sw	s0,28(sp)
     28a:	cc26                	sw	s1,24(sp)
     28c:	ca4a                	sw	s2,20(sp)
     28e:	c84e                	sw	s3,16(sp)
     290:	c25a                	sw	s6,4(sp)
     292:	c652                	sw	s4,12(sp)
     294:	c456                	sw	s5,8(sp)
     296:	1000                	addi	s0,sp,32
    int line[size_b][size_a + size_b];
     298:	07bd                	addi	a5,a5,15
     29a:	9bc1                	andi	a5,a5,-16
     29c:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     2a0:	00259793          	slli	a5,a1,0x2
     2a4:	07bd                	addi	a5,a5,15
     2a6:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     2a8:	8e0a                	mv	t3,sp
    int pola[size_a];
     2aa:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     2ae:	00f80793          	addi	a5,a6,15
     2b2:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     2b4:	828a                	mv	t0,sp
    int polb[size_b];
     2b6:	40f10133          	sub	sp,sp,a5
    int line[size_b][size_a + size_b];
     2ba:	fff68893          	addi	a7,a3,-1
    int pola[size_a];
     2be:	fff58f93          	addi	t6,a1,-1
    int polb[size_b];
     2c2:	878a                	mv	a5,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
     2c4:	00235f13          	srli	t5,t1,0x2
     2c8:	8972                	mv	s2,t3
    for (i = 0; i < size_b; ++i){
     2ca:	89f2                	mv	s3,t3
     2cc:	4481                	li	s1,0
            product2[j] = 0;
     2ce:	00001b17          	auipc	s6,0x1
     2d2:	1eeb0b13          	addi	s6,s6,494 # 14bc <product2>
    for (i = 0; i < size_b; ++i){
     2d6:	04d4c163          	blt	s1,a3,318 <polymult2+0xa6>
        }
    }

    for(i = 0; i < size_a; ++i){
     2da:	4381                	li	t2,0
     2dc:	04b3c163          	blt	t2,a1,31e <polymult2+0xac>
        pola[i] = a[i];
    }


    for(i = 0; i < size_b; ++i){
     2e0:	4581                	li	a1,0
     2e2:	04d5c863          	blt	a1,a3,332 <polymult2+0xc0>
        polb[i] = b[i];
    }


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     2e6:	4605                	li	a2,1
     2e8:	97c2                	add	a5,a5,a6
     2ea:	06c70f63          	beq	a4,a2,368 <polymult2+0xf6>
     2ee:	1871                	addi	a6,a6,-4
     2f0:	1371                	addi	t1,t1,-4
     2f2:	9872                	add	a6,a6,t3
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     2f4:	0608cc63          	bltz	a7,36c <polymult2+0xfa>
            for (k = size_a-1; k >= 0; k = k-1 ){
     2f8:	877e                	mv	a4,t6
     2fa:	a86d                	j	3b4 <polymult2+0x142>
            product2[j] = 0;
     2fc:	00239a93          	slli	s5,t2,0x2
     300:	9ada                	add	s5,s5,s6
            line[i][j] = 0;
     302:	000a2023          	sw	zero,0(s4)
            product2[j] = 0;
     306:	000aa023          	sw	zero,0(s5)
        for(j = 0; j < size_a + size_b -1; ++j){
     30a:	0385                	addi	t2,t2,1
     30c:	0a11                	addi	s4,s4,4
     30e:	ffd3c7e3          	blt	t2,t4,2fc <polymult2+0x8a>
    for (i = 0; i < size_b; ++i){
     312:	0485                	addi	s1,s1,1
     314:	999a                	add	s3,s3,t1
     316:	b7c1                	j	2d6 <polymult2+0x64>
     318:	8a4e                	mv	s4,s3
        for(j = 0; j < size_a + size_b -1; ++j){
     31a:	4381                	li	t2,0
     31c:	bfcd                	j	30e <polymult2+0x9c>
        pola[i] = a[i];
     31e:	00239493          	slli	s1,t2,0x2
     322:	009289b3          	add	s3,t0,s1
     326:	94aa                	add	s1,s1,a0
     328:	4084                	lw	s1,0(s1)
    for(i = 0; i < size_a; ++i){
     32a:	0385                	addi	t2,t2,1
        pola[i] = a[i];
     32c:	0099a023          	sw	s1,0(s3)
    for(i = 0; i < size_a; ++i){
     330:	b775                	j	2dc <polymult2+0x6a>
        polb[i] = b[i];
     332:	00259513          	slli	a0,a1,0x2
     336:	00a783b3          	add	t2,a5,a0
     33a:	9532                	add	a0,a0,a2
     33c:	4108                	lw	a0,0(a0)
    for(i = 0; i < size_b; ++i){
     33e:	0585                	addi	a1,a1,1
        polb[i] = b[i];
     340:	00a3a023          	sw	a0,0(t2)
    for(i = 0; i < size_b; ++i){
     344:	bf79                	j	2e2 <polymult2+0x70>
                line[size_b-1-j][k] = pola[k]*polb[j];
     346:	00271613          	slli	a2,a4,0x2
     34a:	00c905b3          	add	a1,s2,a2
     34e:	9616                	add	a2,a2,t0
     350:	4210                	lw	a2,0(a2)
     352:	ffc7a503          	lw	a0,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     356:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     358:	02a60633          	mul	a2,a2,a0
     35c:	c190                	sw	a2,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     35e:	fe0754e3          	bgez	a4,346 <polymult2+0xd4>
        for (j = size_b -1; j >= 0; j = j-1){
     362:	18fd                	addi	a7,a7,-1
     364:	17f1                	addi	a5,a5,-4
     366:	991a                	add	s2,s2,t1
     368:	0208d863          	bgez	a7,398 <polymult2+0x126>
     36c:	00001617          	auipc	a2,0x1
     370:	15060613          	addi	a2,a2,336 # 14bc <product2>
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
        for(i = 0; i < size_b; ++i){
     374:	4701                	li	a4,0
    for(j = 0; j < size_a + size_b -1; ++j){
     376:	07d74463          	blt	a4,t4,3de <polymult2+0x16c>


    return_address2 = &product2[0];

    return return_address2;
}
     37a:	fe040113          	addi	sp,s0,-32
     37e:	4472                	lw	s0,28(sp)
     380:	44e2                	lw	s1,24(sp)
     382:	4952                	lw	s2,20(sp)
     384:	49c2                	lw	s3,16(sp)
     386:	4a32                	lw	s4,12(sp)
     388:	4aa2                	lw	s5,8(sp)
     38a:	4b12                	lw	s6,4(sp)
     38c:	00001517          	auipc	a0,0x1
     390:	13050513          	addi	a0,a0,304 # 14bc <product2>
     394:	6105                	addi	sp,sp,32
     396:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
     398:	877e                	mv	a4,t6
     39a:	b7d1                	j	35e <polymult2+0xec>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     39c:	00271613          	slli	a2,a4,0x2
     3a0:	00c805b3          	add	a1,a6,a2
     3a4:	9616                	add	a2,a2,t0
     3a6:	4210                	lw	a2,0(a2)
     3a8:	ffc7a503          	lw	a0,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ac:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3ae:	02a60633          	mul	a2,a2,a0
     3b2:	c190                	sw	a2,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b4:	fe0754e3          	bgez	a4,39c <polymult2+0x12a>
        for (j = size_b -1; j >= 0; j = j-1){
     3b8:	18fd                	addi	a7,a7,-1
     3ba:	17f1                	addi	a5,a5,-4
     3bc:	981a                	add	a6,a6,t1
     3be:	bf1d                	j	2f4 <polymult2+0x82>
            product2[j] += line[i][j];
     3c0:	03e587b3          	mul	a5,a1,t5
     3c4:	4208                	lw	a0,0(a2)
        for(i = 0; i < size_b; ++i){
     3c6:	0585                	addi	a1,a1,1
            product2[j] += line[i][j];
     3c8:	97ba                	add	a5,a5,a4
     3ca:	078a                	slli	a5,a5,0x2
     3cc:	97f2                	add	a5,a5,t3
     3ce:	439c                	lw	a5,0(a5)
     3d0:	97aa                	add	a5,a5,a0
     3d2:	c21c                	sw	a5,0(a2)
        for(i = 0; i < size_b; ++i){
     3d4:	fed5c6e3          	blt	a1,a3,3c0 <polymult2+0x14e>
    for(j = 0; j < size_a + size_b -1; ++j){
     3d8:	0705                	addi	a4,a4,1
     3da:	0611                	addi	a2,a2,4
     3dc:	bf69                	j	376 <polymult2+0x104>
        for(i = 0; i < size_b; ++i){
     3de:	4581                	li	a1,0
     3e0:	bfd5                	j	3d4 <polymult2+0x162>

000003e2 <polydiv>:
 

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     3e2:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3e6:	7139                	addi	sp,sp,-64
    int v[size_N];
     3e8:	07bd                	addi	a5,a5,15
     3ea:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3ec:	dc22                	sw	s0,56(sp)
     3ee:	da26                	sw	s1,52(sp)
     3f0:	d84a                	sw	s2,48(sp)
     3f2:	d64e                	sw	s3,44(sp)
     3f4:	d452                	sw	s4,40(sp)
     3f6:	d256                	sw	s5,36(sp)
     3f8:	ce5e                	sw	s7,28(sp)
     3fa:	cc62                	sw	s8,24(sp)
     3fc:	ca66                	sw	s9,20(sp)
     3fe:	c86a                	sw	s10,16(sp)
     400:	c66e                	sw	s11,12(sp)
     402:	de06                	sw	ra,60(sp)
     404:	d05a                	sw	s6,32(sp)
     406:	0080                	addi	s0,sp,64
    int v[size_N];
     408:	40f10133          	sub	sp,sp,a5
     40c:	8d8a                	mv	s11,sp
    int q[size_N];
     40e:	40f10133          	sub	sp,sp,a5
     412:	8c0a                	mv	s8,sp
    int *product;
    int num_temp[size_N];
     414:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     418:	00269793          	slli	a5,a3,0x2
     41c:	07bd                	addi	a5,a5,15
     41e:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
     420:	8a8a                	mv	s5,sp
    int denum_temp[size_D];
     422:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     426:	89b6                	mv	s3,a3
     428:	893a                	mv	s2,a4
    int denum_temp[size_D];
     42a:	fff68a13          	addi	s4,a3,-1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     42e:	84ae                	mv	s1,a1
    int v[size_N];
     430:	fff58c93          	addi	s9,a1,-1
    int denum_temp[size_D];
     434:	8d0a                	mv	s10,sp


    // make mod calculation for coefficents
    for (i = 0; i < size_N; ++i){
     436:	8bd6                	mv	s7,s5
     438:	8756                	mv	a4,s5
     43a:	4681                	li	a3,0
     43c:	0296c663          	blt	a3,s1,468 <polydiv+0x86>
     440:	876a                	mv	a4,s10
        num_temp[i] = num_temp[i] % mod;
    }


    // make mod calculation for coefficents
    for (i = 0; i < size_D; ++i) {
     442:	4681                	li	a3,0
     444:	0536c363          	blt	a3,s3,48a <polydiv+0xa8>
            denum_temp[i] = denum_temp[i] + mod;
        }
        denum_temp[i] = denum_temp[i] % mod;
    }

    for (i = 0; i < size_N; ++i){
     448:	4781                	li	a5,0
     44a:	0697c163          	blt	a5,s1,4ac <polydiv+0xca>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     44e:	002a1793          	slli	a5,s4,0x2
     452:	97ea                	add	a5,a5,s10
     454:	4398                	lw	a4,0(a5)
     456:	060a5663          	bgez	s4,4c2 <polydiv+0xe0>
    for (i = 0; i < size_N; ++i){
     45a:	4781                	li	a5,0
     45c:	4b01                	li	s6,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     45e:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     460:	072b4463          	blt	s6,s2,4c8 <polydiv+0xe6>
     464:	87e6                	mv	a5,s9
     466:	a895                	j	4da <polydiv+0xf8>
        num_temp[i] = num[i];
     468:	00269793          	slli	a5,a3,0x2
     46c:	97aa                	add	a5,a5,a0
     46e:	439c                	lw	a5,0(a5)
            num_temp[i] = num_temp[i] + mod;
     470:	c31c                	sw	a5,0(a4)
        while (num_temp[i] < 0) {
     472:	431c                	lw	a5,0(a4)
     474:	0007c963          	bltz	a5,486 <polydiv+0xa4>
        num_temp[i] = num_temp[i] % mod;
     478:	0327e7b3          	rem	a5,a5,s2
    for (i = 0; i < size_N; ++i){
     47c:	0685                	addi	a3,a3,1
     47e:	0711                	addi	a4,a4,4
        num_temp[i] = num_temp[i] % mod;
     480:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_N; ++i){
     484:	bf65                	j	43c <polydiv+0x5a>
            num_temp[i] = num_temp[i] + mod;
     486:	97ca                	add	a5,a5,s2
     488:	b7e5                	j	470 <polydiv+0x8e>
        denum_temp[i] = denum[i];
     48a:	00269793          	slli	a5,a3,0x2
     48e:	97b2                	add	a5,a5,a2
     490:	439c                	lw	a5,0(a5)
            denum_temp[i] = denum_temp[i] + mod;
     492:	c31c                	sw	a5,0(a4)
        while (denum_temp[i] < 0) {
     494:	431c                	lw	a5,0(a4)
     496:	0007c963          	bltz	a5,4a8 <polydiv+0xc6>
        denum_temp[i] = denum_temp[i] % mod;
     49a:	0327e7b3          	rem	a5,a5,s2
    for (i = 0; i < size_D; ++i) {
     49e:	0685                	addi	a3,a3,1
     4a0:	0711                	addi	a4,a4,4
        denum_temp[i] = denum_temp[i] % mod;
     4a2:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_D; ++i) {
     4a6:	bf79                	j	444 <polydiv+0x62>
            denum_temp[i] = denum_temp[i] + mod;
     4a8:	97ca                	add	a5,a5,s2
     4aa:	b7e5                	j	492 <polydiv+0xb0>
        q[i] = 0;
     4ac:	00279713          	slli	a4,a5,0x2
     4b0:	00ec06b3          	add	a3,s8,a4
        v[i] = 0;
     4b4:	976e                	add	a4,a4,s11
        q[i] = 0;
     4b6:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     4ba:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     4be:	0785                	addi	a5,a5,1
     4c0:	b769                	j	44a <polydiv+0x68>
        if( denum_temp[i] != 0 )
     4c2:	ff41                	bnez	a4,45a <polydiv+0x78>
    for (i = size_D-1; i >= 0; i = i-1){
     4c4:	1a7d                	addi	s4,s4,-1
     4c6:	b761                	j	44e <polydiv+0x6c>
        if ( (b_N*u)%mod == 1 )
     4c8:	0327e633          	rem	a2,a5,s2
     4cc:	97ba                	add	a5,a5,a4
     4ce:	f8d60be3          	beq	a2,a3,464 <polydiv+0x82>
    for (u = 0; u < mod; ++u){
     4d2:	0b05                	addi	s6,s6,1
     4d4:	b771                	j	460 <polydiv+0x7e>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     4d6:	eb01                	bnez	a4,4e6 <polydiv+0x104>
    for (i = size_N-1; i >= 0; i = i-1){
     4d8:	17fd                	addi	a5,a5,-1
     4da:	00279713          	slli	a4,a5,0x2
     4de:	9756                	add	a4,a4,s5
     4e0:	4318                	lw	a4,0(a4)
     4e2:	fe07dae3          	bgez	a5,4d6 <polydiv+0xf4>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     4e6:	0547d663          	bge	a5,s4,532 <polydiv+0x150>
        }


    } //End While-1

    for(i = 0; i < size_N; ++i){
     4ea:	4781                	li	a5,0
        result[i] = q[i];
     4ec:	00001697          	auipc	a3,0x1
     4f0:	22868693          	addi	a3,a3,552 # 1714 <result>
    for(i = 0; i < size_N; ++i){
     4f4:	1097ce63          	blt	a5,s1,610 <polydiv+0x22e>
    }
    for(i = size_N; i < (2*size_N); ++i){
     4f8:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
     4fc:	00001697          	auipc	a3,0x1
     500:	21868693          	addi	a3,a3,536 # 1714 <result>
    for(i = size_N; i < (2*size_N); ++i){
     504:	10e4cf63          	blt	s1,a4,622 <polydiv+0x240>
    }

    return_address3 = &result[0];

    return return_address3;
}
     508:	fc040113          	addi	sp,s0,-64
     50c:	50f2                	lw	ra,60(sp)
     50e:	5462                	lw	s0,56(sp)
     510:	54d2                	lw	s1,52(sp)
     512:	5942                	lw	s2,48(sp)
     514:	59b2                	lw	s3,44(sp)
     516:	5a22                	lw	s4,40(sp)
     518:	5a92                	lw	s5,36(sp)
     51a:	5b02                	lw	s6,32(sp)
     51c:	4bf2                	lw	s7,28(sp)
     51e:	4c62                	lw	s8,24(sp)
     520:	4cd2                	lw	s9,20(sp)
     522:	4d42                	lw	s10,16(sp)
     524:	4db2                	lw	s11,12(sp)
     526:	00001517          	auipc	a0,0x1
     52a:	1ee50513          	addi	a0,a0,494 # 1714 <result>
     52e:	6121                	addi	sp,sp,64
     530:	8082                	ret
        v[(d-d2)] = u*r_d;
     532:	03670733          	mul	a4,a4,s6
     536:	414787b3          	sub	a5,a5,s4
     53a:	078a                	slli	a5,a5,0x2
     53c:	97ee                	add	a5,a5,s11
     53e:	c398                	sw	a4,0(a5)
        for (i = 0; i < size_N; ++i){
     540:	87ee                	mv	a5,s11
     542:	4701                	li	a4,0
     544:	04974263          	blt	a4,s1,588 <polydiv+0x1a6>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     548:	874a                	mv	a4,s2
     54a:	86ce                	mv	a3,s3
     54c:	4781                	li	a5,0
     54e:	866e                	mv	a2,s11
     550:	85ce                	mv	a1,s3
     552:	856a                	mv	a0,s10
     554:	3e25                	jal	8c <polymult>
        for (i = 0; i < size_N; ++i){
     556:	872a                	mv	a4,a0
     558:	4681                	li	a3,0
     55a:	0496c163          	blt	a3,s1,59c <polydiv+0x1ba>
     55e:	8756                	mv	a4,s5
        for (i = 0; i < size_N; ++i){
     560:	4781                	li	a5,0
     562:	0497c763          	blt	a5,s1,5b0 <polydiv+0x1ce>
     566:	8756                	mv	a4,s5
        for (i = 0; i < size_N; ++i){
     568:	4681                	li	a3,0
     56a:	0696c063          	blt	a3,s1,5ca <polydiv+0x1e8>
     56e:	86e2                	mv	a3,s8
        for(i = 0; i < size_N; ++i){
     570:	4701                	li	a4,0
     572:	06974663          	blt	a4,s1,5de <polydiv+0x1fc>
        for (i = size_N-1; i >= 0; i = i-1){
     576:	87e6                	mv	a5,s9
     578:	00279713          	slli	a4,a5,0x2
     57c:	9756                	add	a4,a4,s5
     57e:	4318                	lw	a4,0(a4)
     580:	0607dc63          	bgez	a5,5f8 <polydiv+0x216>
     584:	4681                	li	a3,0
     586:	a051                	j	60a <polydiv+0x228>
            v[i] = v[i] % mod;
     588:	4394                	lw	a3,0(a5)
        for (i = 0; i < size_N; ++i){
     58a:	0705                	addi	a4,a4,1
     58c:	0791                	addi	a5,a5,4
            v[i] = v[i] % mod;
     58e:	0326e6b3          	rem	a3,a3,s2
     592:	fed7ae23          	sw	a3,-4(a5)
        for (i = 0; i < size_N; ++i){
     596:	b77d                	j	544 <polydiv+0x162>
                product[i] = product[i] + mod;
     598:	97ca                	add	a5,a5,s2
     59a:	c31c                	sw	a5,0(a4)
            while (product[i] < 0) {
     59c:	431c                	lw	a5,0(a4)
     59e:	fe07cde3          	bltz	a5,598 <polydiv+0x1b6>
            product[i] = product[i] % mod;
     5a2:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < size_N; ++i){
     5a6:	0685                	addi	a3,a3,1
     5a8:	0711                	addi	a4,a4,4
            product[i] = product[i] % mod;
     5aa:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     5ae:	b775                	j	55a <polydiv+0x178>
            num_temp[i] = num_temp[i] - product[i];
     5b0:	00279613          	slli	a2,a5,0x2
     5b4:	962a                	add	a2,a2,a0
     5b6:	4314                	lw	a3,0(a4)
     5b8:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
     5ba:	0785                	addi	a5,a5,1
     5bc:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
     5be:	8e91                	sub	a3,a3,a2
     5c0:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
     5c4:	bf79                	j	562 <polydiv+0x180>
                num_temp[i] = num_temp[i] + mod;
     5c6:	97ca                	add	a5,a5,s2
     5c8:	c31c                	sw	a5,0(a4)
            while (num_temp[i] < 0){
     5ca:	431c                	lw	a5,0(a4)
     5cc:	fe07cde3          	bltz	a5,5c6 <polydiv+0x1e4>
            num_temp[i] = num_temp[i] % mod;
     5d0:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < size_N; ++i){
     5d4:	0685                	addi	a3,a3,1
     5d6:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] % mod;
     5d8:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     5dc:	b779                	j	56a <polydiv+0x188>
            q[i] = q[i] + v[i];
     5de:	00271793          	slli	a5,a4,0x2
     5e2:	97ee                	add	a5,a5,s11
     5e4:	4290                	lw	a2,0(a3)
     5e6:	439c                	lw	a5,0(a5)
        for(i = 0; i < size_N; ++i){
     5e8:	0705                	addi	a4,a4,1
     5ea:	0691                	addi	a3,a3,4
            q[i] = q[i] + v[i];
     5ec:	97b2                	add	a5,a5,a2
            q[i] = q[i] % mod;
     5ee:	0327e7b3          	rem	a5,a5,s2
     5f2:	fef6ae23          	sw	a5,-4(a3)
        for(i = 0; i < size_N; ++i){
     5f6:	bfb5                	j	572 <polydiv+0x190>
            if( num_temp[i] != 0 )
     5f8:	f751                	bnez	a4,584 <polydiv+0x1a2>
        for (i = size_N-1; i >= 0; i = i-1){
     5fa:	17fd                	addi	a5,a5,-1
     5fc:	bfb5                	j	578 <polydiv+0x196>
            v[i] = 0;
     5fe:	00269613          	slli	a2,a3,0x2
     602:	966e                	add	a2,a2,s11
     604:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     608:	0685                	addi	a3,a3,1
     60a:	fe96cae3          	blt	a3,s1,5fe <polydiv+0x21c>
     60e:	bde1                	j	4e6 <polydiv+0x104>
        result[i] = q[i];
     610:	00279713          	slli	a4,a5,0x2
     614:	00e68633          	add	a2,a3,a4
     618:	9762                	add	a4,a4,s8
     61a:	4318                	lw	a4,0(a4)
    for(i = 0; i < size_N; ++i){
     61c:	0785                	addi	a5,a5,1
        result[i] = q[i];
     61e:	c218                	sw	a4,0(a2)
    for(i = 0; i < size_N; ++i){
     620:	bdd1                	j	4f4 <polydiv+0x112>
        result[i] = num_temp[i-size_N];
     622:	000ba603          	lw	a2,0(s7)
     626:	00249793          	slli	a5,s1,0x2
     62a:	97b6                	add	a5,a5,a3
     62c:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     62e:	0485                	addi	s1,s1,1
     630:	0b91                	addi	s7,s7,4
     632:	bdc9                	j	504 <polydiv+0x122>

00000634 <ext_euclid>:
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
   

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     634:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     638:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     63a:	07bd                	addi	a5,a5,15
     63c:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     63e:	c4a2                	sw	s0,72(sp)
     640:	c2a6                	sw	s1,68(sp)
     642:	c0ca                	sw	s2,64(sp)
     644:	de4e                	sw	s3,60(sp)
     646:	dc52                	sw	s4,56(sp)
     648:	da56                	sw	s5,52(sp)
     64a:	d85a                	sw	s6,48(sp)
     64c:	d65e                	sw	s7,44(sp)
     64e:	d266                	sw	s9,36(sp)
     650:	d06a                	sw	s10,32(sp)
     652:	ce6e                	sw	s11,28(sp)
     654:	c686                	sw	ra,76(sp)
     656:	d462                	sw	s8,40(sp)
     658:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     65a:	40f10133          	sub	sp,sp,a5
     65e:	8d0a                	mv	s10,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     660:	40f10133          	sub	sp,sp,a5
     664:	8d8a                	mv	s11,sp
    int ri[size];
     666:	40f10133          	sub	sp,sp,a5
     66a:	8b0a                	mv	s6,sp

    int ti_1[size]; // ti_1[0] = 1
     66c:	40f10133          	sub	sp,sp,a5
     670:	8a0a                	mv	s4,sp
    int ti[size];
     672:	40f10133          	sub	sp,sp,a5
     676:	8b8a                	mv	s7,sp
    int qi_1[size];
     678:	40f10133          	sub	sp,sp,a5
     67c:	8a8a                	mv	s5,sp
    int temp[size];
     67e:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     682:	84b6                	mv	s1,a3
     684:	8932                	mv	s2,a2
    int ri_2[size]; // MX-ring poly, a
     686:	fff60993          	addi	s3,a2,-1
    int temp[size];
     68a:	8c8a                	mv	s9,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     68c:	4781                	li	a5,0
     68e:	4701                	li	a4,0
        ri_2[i] = polyR[i];
        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     690:	00001697          	auipc	a3,0x1
     694:	2dc68693          	addi	a3,a3,732 # 196c <ti_2>
    for (i = 0; i < size; ++i) {
     698:	01274b63          	blt	a4,s2,6ae <ext_euclid+0x7a>
    }
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     69c:	4785                	li	a5,1
     69e:	00fa2023          	sw	a5,0(s4)
            ri_1[i] = ri_1[i] % mod;
        }


        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6a2:	00191793          	slli	a5,s2,0x1
     6a6:	faf42e23          	sw	a5,-68(s0)
        for (i = 0; i < N + 1; ++i) {
     6aa:	4681                	li	a3,0
     6ac:	a0a9                	j	6f6 <ext_euclid+0xc2>
        ri_2[i] = polyR[i];
     6ae:	00f508b3          	add	a7,a0,a5
     6b2:	0008a883          	lw	a7,0(a7)
     6b6:	00fd0633          	add	a2,s10,a5
    for (i = 0; i < size; ++i) {
     6ba:	0705                	addi	a4,a4,1
        ri_2[i] = polyR[i];
     6bc:	01162023          	sw	a7,0(a2)
        ri_1[i] = polyf[i];
     6c0:	00f588b3          	add	a7,a1,a5
     6c4:	0008a883          	lw	a7,0(a7)
     6c8:	00fd8633          	add	a2,s11,a5
     6cc:	01162023          	sw	a7,0(a2)
        ti_2[i] = 0;
     6d0:	00f68633          	add	a2,a3,a5
     6d4:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     6d8:	00fa0633          	add	a2,s4,a5
     6dc:	00062023          	sw	zero,0(a2)
    for (i = 0; i < size; ++i) {
     6e0:	0791                	addi	a5,a5,4
     6e2:	bf5d                	j	698 <ext_euclid+0x64>
                ri_2[i] = ri_2[i] + mod;
     6e4:	97a6                	add	a5,a5,s1
     6e6:	c31c                	sw	a5,0(a4)
            while (ri_2[i] < 0) {
     6e8:	431c                	lw	a5,0(a4)
     6ea:	fe07cde3          	bltz	a5,6e4 <ext_euclid+0xb0>
            ri_2[i] = ri_2[i] % mod;
     6ee:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     6f2:	0685                	addi	a3,a3,1
            ri_2[i] = ri_2[i] % mod;
     6f4:	c31c                	sw	a5,0(a4)
        for (i = 0; i < N + 1; ++i) {
     6f6:	00d9c663          	blt	s3,a3,702 <ext_euclid+0xce>
     6fa:	00269713          	slli	a4,a3,0x2
     6fe:	976a                	add	a4,a4,s10
     700:	b7e5                	j	6e8 <ext_euclid+0xb4>
     702:	876e                	mv	a4,s11
        for (i = 0; i < N + 1; ++i) {
     704:	4681                	li	a3,0
     706:	0cd9d063          	bge	s3,a3,7c6 <ext_euclid+0x192>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     70a:	8726                	mv	a4,s1
     70c:	86ca                	mv	a3,s2
     70e:	866e                	mv	a2,s11
     710:	85ca                	mv	a1,s2
     712:	856a                	mv	a0,s10
     714:	31f9                	jal	3e2 <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     716:	875a                	mv	a4,s6
     718:	87ca                	mv	a5,s2
     71a:	fbc42683          	lw	a3,-68(s0)
     71e:	0ad7ce63          	blt	a5,a3,7da <ext_euclid+0x1a6>
     722:	4781                	li	a5,0
            ri[i - (N + 1)] = res[i];
        }

/// qi_1 = (ri_2 - ri)/ri_1; ///

        for (i = 0; i < N + 1; ++i) {
     724:	4701                	li	a4,0
     726:	0ce9d363          	bge	s3,a4,7ec <ext_euclid+0x1b8>
     72a:	8c66                	mv	s8,s9
     72c:	8766                	mv	a4,s9
            temp[i] = ri_2[i] - ri[i];
        }

        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     72e:	4681                	li	a3,0
     730:	0cd9dd63          	bge	s3,a3,80a <ext_euclid+0x1d6>
            }
            temp[i] = temp[i] % mod;
        }


        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     734:	8726                	mv	a4,s1
     736:	86ca                	mv	a3,s2
     738:	866e                	mv	a2,s11
     73a:	85ca                	mv	a1,s2
     73c:	8566                	mv	a0,s9
     73e:	3155                	jal	3e2 <polydiv>
        for (i = 0; i < N + 1; ++i) {
     740:	4781                	li	a5,0
     742:	0cf9de63          	bge	s3,a5,81e <ext_euclid+0x1ea>
     746:	8756                	mv	a4,s5
            qi_1[i] = res1[i];
        }


        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     748:	4681                	li	a3,0
     74a:	0ed9d563          	bge	s3,a3,834 <ext_euclid+0x200>
        }


/// ti = ti_2 - qi_1*ti_1; ///

        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     74e:	4781                	li	a5,0
     750:	8726                	mv	a4,s1
     752:	86ca                	mv	a3,s2
     754:	8652                	mv	a2,s4
     756:	85ca                	mv	a1,s2
     758:	8556                	mv	a0,s5
     75a:	3a0d                	jal	8c <polymult>
        for (i = 0; i < N + 1; ++i) {
     75c:	4781                	li	a5,0
     75e:	0ef9d563          	bge	s3,a5,848 <ext_euclid+0x214>
            temp[i] = res2[i];
        }
        // make mod calculations
        for (i = 0; i < N + 1; ++i) {
     762:	4701                	li	a4,0
     764:	0ee9de63          	bge	s3,a4,860 <ext_euclid+0x22c>
     768:	4781                	li	a5,0
            }
            temp[i] = temp[i] % mod;
        }


        for (i = 0; i < N + 1; ++i) {
     76a:	4701                	li	a4,0
     76c:	10e9d563          	bge	s3,a4,876 <ext_euclid+0x242>
     770:	875e                	mv	a4,s7
            ti[i] = ti_2[i] - temp[i];
        }

        for (i = 0; i < N + 1; ++i) {
     772:	4681                	li	a3,0
     774:	12d9d363          	bge	s3,a3,89a <ext_euclid+0x266>
     778:	4781                	li	a5,0
        controlR = 0;
     77a:	4701                	li	a4,0
            ti[i] = ti[i] % mod;
        }

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

        for (i = 0; i < N + 1; ++i) {
     77c:	4681                	li	a3,0
     77e:	12d9d863          	bge	s3,a3,8ae <ext_euclid+0x27a>
    while (controlR != 0) {
     782:	f705                	bnez	a4,6aa <ext_euclid+0x76>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     784:	4781                	li	a5,0
            if (((ri_2[0] * j) % mod) == 1)
     786:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     788:	1697c463          	blt	a5,s1,8f0 <ext_euclid+0x2bc>
     78c:	00001617          	auipc	a2,0x1
     790:	1e060613          	addi	a2,a2,480 # 196c <ti_2>
            if (ri_2[i] != 0)
                //	printf("** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! ***\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     794:	16e9d863          	bge	s3,a4,904 <ext_euclid+0x2d0>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     798:	fb040113          	addi	sp,s0,-80
     79c:	40b6                	lw	ra,76(sp)
     79e:	4426                	lw	s0,72(sp)
     7a0:	4496                	lw	s1,68(sp)
     7a2:	4906                	lw	s2,64(sp)
     7a4:	59f2                	lw	s3,60(sp)
     7a6:	5a62                	lw	s4,56(sp)
     7a8:	5ad2                	lw	s5,52(sp)
     7aa:	5b42                	lw	s6,48(sp)
     7ac:	5bb2                	lw	s7,44(sp)
     7ae:	5c22                	lw	s8,40(sp)
     7b0:	5c92                	lw	s9,36(sp)
     7b2:	5d02                	lw	s10,32(sp)
     7b4:	4df2                	lw	s11,28(sp)
     7b6:	00001517          	auipc	a0,0x1
     7ba:	1b650513          	addi	a0,a0,438 # 196c <ti_2>
     7be:	6161                	addi	sp,sp,80
     7c0:	8082                	ret
                ri_1[i] = ri_1[i] + mod;
     7c2:	97a6                	add	a5,a5,s1
     7c4:	c31c                	sw	a5,0(a4)
            while (ri_1[i] < 0) {
     7c6:	431c                	lw	a5,0(a4)
     7c8:	fe07cde3          	bltz	a5,7c2 <ext_euclid+0x18e>
            ri_1[i] = ri_1[i] % mod;
     7cc:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     7d0:	0685                	addi	a3,a3,1
     7d2:	0711                	addi	a4,a4,4
            ri_1[i] = ri_1[i] % mod;
     7d4:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     7d8:	b73d                	j	706 <ext_euclid+0xd2>
            ri[i - (N + 1)] = res[i];
     7da:	00279693          	slli	a3,a5,0x2
     7de:	96aa                	add	a3,a3,a0
     7e0:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7e2:	0785                	addi	a5,a5,1
     7e4:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     7e6:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7ea:	bf05                	j	71a <ext_euclid+0xe6>
            temp[i] = ri_2[i] - ri[i];
     7ec:	00fd06b3          	add	a3,s10,a5
     7f0:	00fb05b3          	add	a1,s6,a5
     7f4:	4294                	lw	a3,0(a3)
     7f6:	418c                	lw	a1,0(a1)
     7f8:	00fc8633          	add	a2,s9,a5
        for (i = 0; i < N + 1; ++i) {
     7fc:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     7fe:	8e8d                	sub	a3,a3,a1
     800:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     802:	0791                	addi	a5,a5,4
     804:	b70d                	j	726 <ext_euclid+0xf2>
                temp[i] = temp[i] + mod;
     806:	97a6                	add	a5,a5,s1
     808:	c31c                	sw	a5,0(a4)
            while (temp[i] < 0) {
     80a:	431c                	lw	a5,0(a4)
     80c:	fe07cde3          	bltz	a5,806 <ext_euclid+0x1d2>
            temp[i] = temp[i] % mod;
     810:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     814:	0685                	addi	a3,a3,1
     816:	0711                	addi	a4,a4,4
            temp[i] = temp[i] % mod;
     818:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     81c:	bf11                	j	730 <ext_euclid+0xfc>
            qi_1[i] = res1[i];
     81e:	00279713          	slli	a4,a5,0x2
     822:	00e506b3          	add	a3,a0,a4
     826:	4294                	lw	a3,0(a3)
     828:	9756                	add	a4,a4,s5
        for (i = 0; i < N + 1; ++i) {
     82a:	0785                	addi	a5,a5,1
            qi_1[i] = res1[i];
     82c:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     82e:	bf11                	j	742 <ext_euclid+0x10e>
                qi_1[i] = qi_1[i] + mod;
     830:	97a6                	add	a5,a5,s1
     832:	c31c                	sw	a5,0(a4)
            while (qi_1[i] < 0) {
     834:	431c                	lw	a5,0(a4)
     836:	fe07cde3          	bltz	a5,830 <ext_euclid+0x1fc>
            qi_1[i] = qi_1[i] % mod;
     83a:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     83e:	0685                	addi	a3,a3,1
     840:	0711                	addi	a4,a4,4
            qi_1[i] = qi_1[i] % mod;
     842:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     846:	b711                	j	74a <ext_euclid+0x116>
            temp[i] = res2[i];
     848:	00279713          	slli	a4,a5,0x2
     84c:	00e506b3          	add	a3,a0,a4
     850:	4294                	lw	a3,0(a3)
     852:	9766                	add	a4,a4,s9
        for (i = 0; i < N + 1; ++i) {
     854:	0785                	addi	a5,a5,1
            temp[i] = res2[i];
     856:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     858:	b719                	j	75e <ext_euclid+0x12a>
                temp[i] = temp[i] + mod;
     85a:	97a6                	add	a5,a5,s1
     85c:	00fc2023          	sw	a5,0(s8)
            while (temp[i] < 0) {
     860:	000c2783          	lw	a5,0(s8)
     864:	fe07cbe3          	bltz	a5,85a <ext_euclid+0x226>
            temp[i] = temp[i] % mod;
     868:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     86c:	0705                	addi	a4,a4,1
     86e:	0c11                	addi	s8,s8,4
            temp[i] = temp[i] % mod;
     870:	fefc2e23          	sw	a5,-4(s8)
        for (i = 0; i < N + 1; ++i) {
     874:	bdc5                	j	764 <ext_euclid+0x130>
            ti[i] = ti_2[i] - temp[i];
     876:	00001697          	auipc	a3,0x1
     87a:	0f668693          	addi	a3,a3,246 # 196c <ti_2>
     87e:	96be                	add	a3,a3,a5
     880:	00fc85b3          	add	a1,s9,a5
     884:	4294                	lw	a3,0(a3)
     886:	418c                	lw	a1,0(a1)
     888:	00fb8633          	add	a2,s7,a5
        for (i = 0; i < N + 1; ++i) {
     88c:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     88e:	8e8d                	sub	a3,a3,a1
     890:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     892:	0791                	addi	a5,a5,4
     894:	bde1                	j	76c <ext_euclid+0x138>
                ti[i] = ti[i] + mod;
     896:	97a6                	add	a5,a5,s1
     898:	c31c                	sw	a5,0(a4)
            while (ti[i] < 0) {
     89a:	431c                	lw	a5,0(a4)
     89c:	fe07cde3          	bltz	a5,896 <ext_euclid+0x262>
            ti[i] = ti[i] % mod;
     8a0:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     8a4:	0685                	addi	a3,a3,1
     8a6:	0711                	addi	a4,a4,4
            ti[i] = ti[i] % mod;
     8a8:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     8ac:	b5e1                	j	774 <ext_euclid+0x140>
            ri_2[i] = ri_1[i];
     8ae:	00fd85b3          	add	a1,s11,a5
     8b2:	4188                	lw	a0,0(a1)
     8b4:	00fd0633          	add	a2,s10,a5
        for (i = 0; i < N + 1; ++i) {
     8b8:	0685                	addi	a3,a3,1
            ri_2[i] = ri_1[i];
     8ba:	c208                	sw	a0,0(a2)
            ri_1[i] = ri[i];
     8bc:	00fb0633          	add	a2,s6,a5
     8c0:	4210                	lw	a2,0(a2)
            ti_2[i] = ti_1[i];
     8c2:	00001517          	auipc	a0,0x1
     8c6:	0aa50513          	addi	a0,a0,170 # 196c <ti_2>
     8ca:	953e                	add	a0,a0,a5
            ri_1[i] = ri[i];
     8cc:	c190                	sw	a2,0(a1)
            ti_2[i] = ti_1[i];
     8ce:	00fa05b3          	add	a1,s4,a5
     8d2:	0005a883          	lw	a7,0(a1)
            controlR += ri[i];
     8d6:	9732                	add	a4,a4,a2
            ti_2[i] = ti_1[i];
     8d8:	01152023          	sw	a7,0(a0)
            ti_1[i] = ti[i];
     8dc:	00fb8533          	add	a0,s7,a5
     8e0:	4108                	lw	a0,0(a0)
     8e2:	c188                	sw	a0,0(a1)
            qi_1[i] = 0;
     8e4:	00fa85b3          	add	a1,s5,a5
     8e8:	0005a023          	sw	zero,0(a1)
        for (i = 0; i < N + 1; ++i) {
     8ec:	0791                	addi	a5,a5,4
     8ee:	bd41                	j	77e <ext_euclid+0x14a>
            if (((ri_2[0] * j) % mod) == 1)
     8f0:	000d2683          	lw	a3,0(s10)
     8f4:	02d786b3          	mul	a3,a5,a3
     8f8:	0296e6b3          	rem	a3,a3,s1
     8fc:	e8c688e3          	beq	a3,a2,78c <ext_euclid+0x158>
        for (j = 0; j < mod; ++j) {
     900:	0785                	addi	a5,a5,1
     902:	b559                	j	788 <ext_euclid+0x154>
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     904:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     906:	0705                	addi	a4,a4,1
     908:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     90a:	02d786b3          	mul	a3,a5,a3
     90e:	0296e6b3          	rem	a3,a3,s1
     912:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     916:	bdbd                	j	794 <ext_euclid+0x160>

00000918 <generate_keys>:




int* generate_keys(int N, int p, int q){
     918:	7101                	addi	sp,sp,-512
     91a:	1e112e23          	sw	ra,508(sp)
     91e:	1e812c23          	sw	s0,504(sp)
     922:	1e912a23          	sw	s1,500(sp)
     926:	0400                	addi	s0,sp,512
     928:	1f212823          	sw	s2,496(sp)
     92c:	1f312623          	sw	s3,492(sp)
     930:	1f412423          	sw	s4,488(sp)
     934:	1f512223          	sw	s5,484(sp)
     938:	1f612023          	sw	s6,480(sp)
     93c:	1d712e23          	sw	s7,476(sp)
     940:	1d812c23          	sw	s8,472(sp)
     944:	1db12623          	sw	s11,460(sp)
     948:	1d912a23          	sw	s9,468(sp)
     94c:	1da12823          	sw	s10,464(sp)
  
resultkon[0] = 0xAAAAAAA0;
     950:	aaaab7b7          	lui	a5,0xaaaab
     954:	aa078793          	addi	a5,a5,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
int* generate_keys(int N, int p, int q){
     958:	892a                	mv	s2,a0
     95a:	8c2e                	mv	s8,a1
     95c:	8bb2                	mv	s7,a2
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     95e:	4581                	li	a1,0
     960:	0d000613          	li	a2,208
resultkon[0] = 0xAAAAAAA0;
     964:	00001a97          	auipc	s5,0x1
     968:	8fca8a93          	addi	s5,s5,-1796 # 1260 <_edata>
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96c:	e1440513          	addi	a0,s0,-492
resultkon[0] = 0xAAAAAAA0;
     970:	00faa023          	sw	a5,0(s5)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     974:	2b75                	jal	f30 <memset>
     976:	4485                	li	s1,1
     978:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97a:	0d800613          	li	a2,216
     97e:	4581                	li	a1,0
     980:	ee840513          	addi	a0,s0,-280
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     984:	e1342423          	sw	s3,-504(s0)
     988:	e0942623          	sw	s1,-500(s0)
     98c:	e0942823          	sw	s1,-496(s0)
     990:	e1342c23          	sw	s3,-488(s0)
     994:	e2942023          	sw	s1,-480(s0)
     998:	e2942623          	sw	s1,-468(s0)
     99c:	e3342823          	sw	s3,-464(s0)
     9a0:	e3342a23          	sw	s3,-460(s0)
     9a4:	e2942e23          	sw	s1,-452(s0)
     9a8:	e5342223          	sw	s3,-444(s0)
     9ac:	e4942623          	sw	s1,-436(s0)
     9b0:	e4942823          	sw	s1,-432(s0)
     9b4:	e5342e23          	sw	s3,-420(s0)
     9b8:	e6942223          	sw	s1,-412(s0)
     9bc:	e6942823          	sw	s1,-400(s0)
     9c0:	e6942a23          	sw	s1,-396(s0)
     9c4:	e6942c23          	sw	s1,-392(s0)
     9c8:	e7342e23          	sw	s3,-388(s0)
     9cc:	e8942223          	sw	s1,-380(s0)
     9d0:	e8942823          	sw	s1,-368(s0)
     9d4:	e8942a23          	sw	s1,-364(s0)
     9d8:	e8942c23          	sw	s1,-360(s0)
     9dc:	e9342e23          	sw	s3,-356(s0)
     9e0:	ea942223          	sw	s1,-348(s0)
     9e4:	ea942823          	sw	s1,-336(s0)
     9e8:	ea942a23          	sw	s1,-332(s0)
     9ec:	ea942c23          	sw	s1,-328(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     9f0:	00190b13          	addi	s6,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f4:	2b35                	jal	f30 <memset>
    int polyR[N+1];
     9f6:	002b1793          	slli	a5,s6,0x2
     9fa:	07bd                	addi	a5,a5,15
     9fc:	9bc1                	andi	a5,a5,-16
     9fe:	40f10133          	sub	sp,sp,a5
     a02:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     a04:	00291d93          	slli	s11,s2,0x2
     a08:	01ba07b3          	add	a5,s4,s11
     a0c:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a0e:	ef342223          	sw	s3,-284(s0)
     a12:	ee942623          	sw	s1,-276(s0)
     a16:	ee942823          	sw	s1,-272(s0)
     a1a:	ee942c23          	sw	s1,-264(s0)
     a1e:	f1342223          	sw	s3,-252(s0)
     a22:	f1342623          	sw	s3,-244(s0)
     a26:	f1342823          	sw	s3,-240(s0)
     a2a:	f0942c23          	sw	s1,-232(s0)
     a2e:	f3342023          	sw	s3,-224(s0)
     a32:	f2942423          	sw	s1,-216(s0)
     a36:	f2942a23          	sw	s1,-204(s0)
     a3a:	f3342c23          	sw	s3,-200(s0)
     a3e:	f4942023          	sw	s1,-192(s0)
     a42:	f4942623          	sw	s1,-180(s0)
     a46:	f5342823          	sw	s3,-176(s0)
     a4a:	f4942c23          	sw	s1,-168(s0)
     a4e:	f6942223          	sw	s1,-156(s0)
     a52:	f7342423          	sw	s3,-152(s0)
     a56:	f6942823          	sw	s1,-144(s0)
     a5a:	f6942c23          	sw	s1,-136(s0)
     a5e:	f6942e23          	sw	s1,-132(s0)
     a62:	f8942423          	sw	s1,-120(s0)
     a66:	f9342623          	sw	s3,-116(s0)
     a6a:	f8942a23          	sw	s1,-108(s0)
     a6e:	f8942e23          	sw	s1,-100(s0)
    polyR[0] = -1;
     a72:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     a76:	4785                	li	a5,1
     a78:	1127cb63          	blt	a5,s2,b8e <generate_keys+0x276>
     a7c:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     a7e:	03600693          	li	a3,54
     a82:	10f6dd63          	bge	a3,a5,b9c <generate_keys+0x284>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     a86:	4781                	li	a5,0
        random_keys[i] = f[i];
     a88:	00001697          	auipc	a3,0x1
     a8c:	07468693          	addi	a3,a3,116 # 1afc <random_keys>
    for(i = 0; i < N; ++i){
     a90:	1327c463          	blt	a5,s2,bb8 <generate_keys+0x2a0>
     a94:	ee440713          	addi	a4,s0,-284
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     a98:	00191993          	slli	s3,s2,0x1
     a9c:	87ca                	mv	a5,s2
     a9e:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     aa0:	00001617          	auipc	a2,0x1
     aa4:	05c60613          	addi	a2,a2,92 # 1afc <random_keys>
    for(i = N; i < (2*N); ++i){
     aa8:	1337c363          	blt	a5,s3,bce <generate_keys+0x2b6>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     aac:	448d                	li	s1,3
     aae:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     ab2:	86e2                	mv	a3,s8
     ab4:	865a                	mv	a2,s6
     ab6:	e0840593          	addi	a1,s0,-504
     aba:	8552                	mv	a0,s4
     abc:	3ea5                	jal	634 <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     abe:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     ac0:	00001697          	auipc	a3,0x1
     ac4:	03c68693          	addi	a3,a3,60 # 1afc <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     ac8:	1097cb63          	blt	a5,s1,bde <generate_keys+0x2c6>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     acc:	865a                	mv	a2,s6
     ace:	86de                	mv	a3,s7
     ad0:	e0840593          	addi	a1,s0,-504
     ad4:	8552                	mv	a0,s4
     ad6:	3eb9                	jal	634 <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     ad8:	5751                	li	a4,-12
     ada:	02e90733          	mul	a4,s2,a4
     ade:	8d6e                	mv	s10,s11
        random_keys[i] = fq[i-(3*N)];
     ae0:	00001617          	auipc	a2,0x1
     ae4:	01c60613          	addi	a2,a2,28 # 1afc <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     ae8:	11b4c363          	blt	s1,s11,bee <generate_keys+0x2d6>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     aec:	4701                	li	a4,0
     aee:	85ca                	mv	a1,s2
     af0:	86ca                	mv	a3,s2
     af2:	8666                	mv	a2,s9
     af4:	f7eff0ef          	jal	ra,272 <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     af8:	87aa                	mv	a5,a0
     afa:	4701                	li	a4,0
     afc:	fff98593          	addi	a1,s3,-1
     b00:	10b74163          	blt	a4,a1,c02 <generate_keys+0x2ea>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b04:	86da                	mv	a3,s6
     b06:	875e                	mv	a4,s7
     b08:	8652                	mv	a2,s4
     b0a:	38e1                	jal	3e2 <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     b0c:	4795                	li	a5,5
     b0e:	02f907b3          	mul	a5,s2,a5
     b12:	098a                	slli	s3,s3,0x2
     b14:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b16:	00001697          	auipc	a3,0x1
     b1a:	fe668693          	addi	a3,a3,-26 # 1afc <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     b1e:	0991                	addi	s3,s3,4
     b20:	0efd4963          	blt	s10,a5,c12 <generate_keys+0x2fa>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     b24:	4699                	li	a3,6
     b26:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     b28:	00001617          	auipc	a2,0x1
     b2c:	fd460613          	addi	a2,a2,-44 # 1afc <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     b30:	02d906b3          	mul	a3,s2,a3
     b34:	02a90933          	mul	s2,s2,a0
     b38:	0ef6d563          	bge	a3,a5,c22 <generate_keys+0x30a>
    }
    //////// RANDOM KEYS TAŞTI? ARRAY 300LÜK YERE SAHİP AMA 318'E KADAR DOLDURULUYOR? ///////


    return_address5 = &random_keys[0];
resultkon[0] = 0xAAAAAAA1;
     b3c:	aaaab7b7          	lui	a5,0xaaaab
     b40:	aa178793          	addi	a5,a5,-1375 # aaaaaaa1 <_stack_start+0xaaa9aaa1>
     b44:	00faa023          	sw	a5,0(s5)
    return return_address5;
}
     b48:	e0040113          	addi	sp,s0,-512
     b4c:	1fc12083          	lw	ra,508(sp)
     b50:	1f812403          	lw	s0,504(sp)
     b54:	1f412483          	lw	s1,500(sp)
     b58:	1f012903          	lw	s2,496(sp)
     b5c:	1ec12983          	lw	s3,492(sp)
     b60:	1e812a03          	lw	s4,488(sp)
     b64:	1e412a83          	lw	s5,484(sp)
     b68:	1e012b03          	lw	s6,480(sp)
     b6c:	1dc12b83          	lw	s7,476(sp)
     b70:	1d812c03          	lw	s8,472(sp)
     b74:	1d412c83          	lw	s9,468(sp)
     b78:	1d012d03          	lw	s10,464(sp)
     b7c:	1cc12d83          	lw	s11,460(sp)
     b80:	00001517          	auipc	a0,0x1
     b84:	f7c50513          	addi	a0,a0,-132 # 1afc <random_keys>
     b88:	20010113          	addi	sp,sp,512
     b8c:	8082                	ret
        polyR[i] = 0;
     b8e:	00279713          	slli	a4,a5,0x2
     b92:	9752                	add	a4,a4,s4
     b94:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     b98:	0785                	addi	a5,a5,1
     b9a:	bdf9                	j	a78 <generate_keys+0x160>
        f[i] = 0;
     b9c:	00279713          	slli	a4,a5,0x2
     ba0:	e0840613          	addi	a2,s0,-504
     ba4:	963a                	add	a2,a2,a4
     ba6:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     baa:	ee440613          	addi	a2,s0,-284
     bae:	9732                	add	a4,a4,a2
     bb0:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     bb4:	0785                	addi	a5,a5,1
     bb6:	b5f1                	j	a82 <generate_keys+0x16a>
        random_keys[i] = f[i];
     bb8:	00279713          	slli	a4,a5,0x2
     bbc:	e0840593          	addi	a1,s0,-504
     bc0:	00e68633          	add	a2,a3,a4
     bc4:	972e                	add	a4,a4,a1
     bc6:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     bc8:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     bca:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     bcc:	b5d1                	j	a90 <generate_keys+0x178>
        random_keys[i] = g[i-N];
     bce:	430c                	lw	a1,0(a4)
     bd0:	00279693          	slli	a3,a5,0x2
     bd4:	96b2                	add	a3,a3,a2
     bd6:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     bd8:	0785                	addi	a5,a5,1
     bda:	0711                	addi	a4,a4,4
     bdc:	b5f1                	j	aa8 <generate_keys+0x190>
        random_keys[i] = fp[i-(2*N)];
     bde:	4110                	lw	a2,0(a0)
     be0:	00279713          	slli	a4,a5,0x2
     be4:	9736                	add	a4,a4,a3
     be6:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     be8:	0785                	addi	a5,a5,1
     bea:	0511                	addi	a0,a0,4
     bec:	bdf1                	j	ac8 <generate_keys+0x1b0>
        random_keys[i] = fq[i-(3*N)];
     bee:	00249793          	slli	a5,s1,0x2
     bf2:	00f706b3          	add	a3,a4,a5
     bf6:	96aa                	add	a3,a3,a0
     bf8:	4294                	lw	a3,0(a3)
     bfa:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     bfc:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     bfe:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     c00:	b5e5                	j	ae8 <generate_keys+0x1d0>
        fg[i] = fg[i]*p;
     c02:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     c04:	0705                	addi	a4,a4,1
     c06:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     c08:	038686b3          	mul	a3,a3,s8
     c0c:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     c10:	bdc5                	j	b00 <generate_keys+0x1e8>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c12:	ff89a603          	lw	a2,-8(s3)
     c16:	002d1713          	slli	a4,s10,0x2
     c1a:	9736                	add	a4,a4,a3
     c1c:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     c1e:	0d05                	addi	s10,s10,1
     c20:	bdfd                	j	b1e <generate_keys+0x206>
        random_keys[i] = polyR[i-(5*N)];
     c22:	00279713          	slli	a4,a5,0x2
     c26:	00e605b3          	add	a1,a2,a4
     c2a:	974a                	add	a4,a4,s2
     c2c:	9752                	add	a4,a4,s4
     c2e:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     c30:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     c32:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     c34:	b711                	j	b38 <generate_keys+0x220>

00000c36 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c36:	7115                	addi	sp,sp,-224
resultkon[0] = 0xBBBBBBB0;
     c38:	bbbbc7b7          	lui	a5,0xbbbbc
     c3c:	bb078793          	addi	a5,a5,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c40:	cda2                	sw	s0,216(sp)
     c42:	cba6                	sw	s1,212(sp)
     c44:	c9ca                	sw	s2,208(sp)
     c46:	c3d6                	sw	s5,196(sp)
     c48:	842a                	mv	s0,a0
     c4a:	892e                	mv	s2,a1
     c4c:	84b2                	mv	s1,a2
    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c4e:	00000597          	auipc	a1,0x0
     c52:	49258593          	addi	a1,a1,1170 # 10e0 <__DTOR_END__>
     c56:	0c000613          	li	a2,192
resultkon[0] = 0xBBBBBBB0;
     c5a:	00000a97          	auipc	s5,0x0
     c5e:	606a8a93          	addi	s5,s5,1542 # 1260 <_edata>
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c62:	850a                	mv	a0,sp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c64:	cf86                	sw	ra,220(sp)
     c66:	c7ce                	sw	s3,204(sp)
     c68:	c5d2                	sw	s4,200(sp)
     c6a:	89ba                	mv	s3,a4
     c6c:	8a36                	mv	s4,a3
resultkon[0] = 0xBBBBBBB0;
     c6e:	00faa023          	sw	a5,0(s5)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c72:	22c5                	jal	e52 <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     c74:	4781                	li	a5,0
     c76:	860a                	mv	a2,sp
     c78:	874a                	mv	a4,s2
     c7a:	03000693          	li	a3,48
     c7e:	85a2                	mv	a1,s0
     c80:	8552                	mv	a0,s4
     c82:	c0aff0ef          	jal	ra,8c <polymult>
     c86:	4781                	li	a5,0

    /////// PUBLIC_KEY*RANDOM_VALUE ///////

    for(i = 0; i < 48; ++i){
     c88:	0c000613          	li	a2,192
        temp[i] = temp[i] + message[i];
     c8c:	00f506b3          	add	a3,a0,a5
     c90:	00f485b3          	add	a1,s1,a5
     c94:	4298                	lw	a4,0(a3)
     c96:	418c                	lw	a1,0(a1)
     c98:	0791                	addi	a5,a5,4
     c9a:	972e                	add	a4,a4,a1
     c9c:	c298                	sw	a4,0(a3)
    for(i = 0; i < 48; ++i){
     c9e:	fec797e3          	bne	a5,a2,c8c <ntru_encyrpt+0x56>
    }

    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     ca2:	00141493          	slli	s1,s0,0x1
     ca6:	00140693          	addi	a3,s0,1
     caa:	874a                	mv	a4,s2
     cac:	864e                	mv	a2,s3
     cae:	85a6                	mv	a1,s1
     cb0:	f32ff0ef          	jal	ra,3e2 <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     cb4:	478d                	li	a5,3
     cb6:	02f40433          	mul	s0,s0,a5
     cba:	87aa                	mv	a5,a0
     cbc:	0284c163          	blt	s1,s0,cde <ntru_encyrpt+0xa8>


    return_address6 = &CT[0];
resultkon[0] = 0xBBBBBBB1;
    return return_address6;
}
     cc0:	40fe                	lw	ra,220(sp)
     cc2:	446e                	lw	s0,216(sp)
resultkon[0] = 0xBBBBBBB1;
     cc4:	bbbbc7b7          	lui	a5,0xbbbbc
     cc8:	bb178793          	addi	a5,a5,-1103 # bbbbbbb1 <_stack_start+0xbbbabbb1>
     ccc:	00faa023          	sw	a5,0(s5)
}
     cd0:	44de                	lw	s1,212(sp)
     cd2:	494e                	lw	s2,208(sp)
     cd4:	49be                	lw	s3,204(sp)
     cd6:	4a2e                	lw	s4,200(sp)
     cd8:	4a9e                	lw	s5,196(sp)
     cda:	612d                	addi	sp,sp,224
     cdc:	8082                	ret
        CT[i-(2*N)] = CT[i];
     cde:	00249713          	slli	a4,s1,0x2
     ce2:	972a                	add	a4,a4,a0
     ce4:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     ce6:	0485                	addi	s1,s1,1
     ce8:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     cea:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     cee:	b7f9                	j	cbc <ntru_encyrpt+0x86>

00000cf0 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cf0:	7179                	addi	sp,sp,-48
     cf2:	d422                	sw	s0,40(sp)
     cf4:	cc52                	sw	s4,24(sp)
     cf6:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     cf8:	4a0d                	li	s4,3
     cfa:	03440a33          	mul	s4,s0,s4
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cfe:	c462                	sw	s8,8(sp)
     d00:	8c3a                	mv	s8,a4
    resultkon[0] = 0xCCCCCCC0;
     d02:	ccccd737          	lui	a4,0xccccd
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d06:	ce4e                	sw	s3,28(sp)
    resultkon[0] = 0xCCCCCCC0;
     d08:	cc070713          	addi	a4,a4,-832 # ccccccc0 <_stack_start+0xcccbccc0>
     d0c:	00000997          	auipc	s3,0x0
     d10:	55498993          	addi	s3,s3,1364 # 1260 <_edata>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d14:	d04a                	sw	s2,32(sp)
     d16:	c85a                	sw	s6,16(sp)
     d18:	8932                	mv	s2,a2
     d1a:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d1c:	863e                	mv	a2,a5
    resultkon[0] = 0xCCCCCCC0;
     d1e:	00e9a023          	sw	a4,0(s3)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d22:	86a2                	mv	a3,s0
     d24:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d26:	8b2e                	mv	s6,a1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d28:	85a2                	mv	a1,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d2a:	d606                	sw	ra,44(sp)
     d2c:	d226                	sw	s1,36(sp)
     d2e:	ca56                	sw	s5,20(sp)
     d30:	c65e                	sw	s7,12(sp)
     d32:	8ac2                	mv	s5,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d34:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d38:	d3aff0ef          	jal	ra,272 <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d3c:	00140b93          	addi	s7,s0,1
     d40:	874a                	mv	a4,s2
     d42:	86de                	mv	a3,s7
     d44:	8656                	mv	a2,s5
     d46:	85a6                	mv	a1,s1
     d48:	e9aff0ef          	jal	ra,3e2 <polydiv>
     d4c:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4e:	87aa                	mv	a5,a0
     d50:	872a                	mv	a4,a0
     d52:	86a6                	mv	a3,s1
     d54:	0546c963          	blt	a3,s4,da6 <ntru_deceypt+0xb6>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     d58:	4589                	li	a1,2
     d5a:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     d5e:	4701                	li	a4,0
     d60:	04874c63          	blt	a4,s0,db8 <ntru_deceypt+0xc8>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     d64:	4701                	li	a4,0
     d66:	86a2                	mv	a3,s0
     d68:	85a2                	mv	a1,s0
     d6a:	8562                	mv	a0,s8
     d6c:	d06ff0ef          	jal	ra,272 <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d70:	875a                	mv	a4,s6
     d72:	86de                	mv	a3,s7
     d74:	8656                	mv	a2,s5
     d76:	85a6                	mv	a1,s1
     d78:	e6aff0ef          	jal	ra,3e2 <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d7c:	87aa                	mv	a5,a0
     d7e:	0544c663          	blt	s1,s4,dca <ntru_deceypt+0xda>
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    resultkon[0] = 0xCCCCCCC1;
    return return_address7;
}
     d82:	50b2                	lw	ra,44(sp)
     d84:	5422                	lw	s0,40(sp)
    resultkon[0] = 0xCCCCCCC1;
     d86:	ccccd7b7          	lui	a5,0xccccd
     d8a:	cc178793          	addi	a5,a5,-831 # ccccccc1 <_stack_start+0xcccbccc1>
     d8e:	00f9a023          	sw	a5,0(s3)
}
     d92:	5492                	lw	s1,36(sp)
     d94:	5902                	lw	s2,32(sp)
     d96:	49f2                	lw	s3,28(sp)
     d98:	4a62                	lw	s4,24(sp)
     d9a:	4ad2                	lw	s5,20(sp)
     d9c:	4b42                	lw	s6,16(sp)
     d9e:	4bb2                	lw	s7,12(sp)
     da0:	4c22                	lw	s8,8(sp)
     da2:	6145                	addi	sp,sp,48
     da4:	8082                	ret
        a2[i-(2*N)] = a2[i];
     da6:	00269593          	slli	a1,a3,0x2
     daa:	95b2                	add	a1,a1,a2
     dac:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     dae:	0685                	addi	a3,a3,1
     db0:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     db2:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     db6:	bf79                	j	d54 <ntru_deceypt+0x64>
        if(a2[i] <= q/2)
     db8:	4394                	lw	a3,0(a5)
     dba:	00d5d563          	bge	a1,a3,dc4 <ntru_deceypt+0xd4>
            a2[i] = (-1)*(q-a2[i]);
     dbe:	412686b3          	sub	a3,a3,s2
     dc2:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     dc4:	0705                	addi	a4,a4,1
     dc6:	0791                	addi	a5,a5,4
     dc8:	bf61                	j	d60 <ntru_deceypt+0x70>
        c2[i-(2*N)] = c2[i];
     dca:	00249713          	slli	a4,s1,0x2
     dce:	972a                	add	a4,a4,a0
     dd0:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     dd2:	0485                	addi	s1,s1,1
     dd4:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     dd6:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     dda:	b755                	j	d7e <ntru_deceypt+0x8e>

00000ddc <default_exc_handler>:
     ddc:	0000006f          	j	ddc <default_exc_handler>

00000de0 <reset_handler>:
     de0:	00000093          	li	ra,0
     de4:	8106                	mv	sp,ra
     de6:	8186                	mv	gp,ra
     de8:	8206                	mv	tp,ra
     dea:	8286                	mv	t0,ra
     dec:	8306                	mv	t1,ra
     dee:	8386                	mv	t2,ra
     df0:	8406                	mv	s0,ra
     df2:	8486                	mv	s1,ra
     df4:	8506                	mv	a0,ra
     df6:	8586                	mv	a1,ra
     df8:	8606                	mv	a2,ra
     dfa:	8686                	mv	a3,ra
     dfc:	8706                	mv	a4,ra
     dfe:	8786                	mv	a5,ra
     e00:	8806                	mv	a6,ra
     e02:	8886                	mv	a7,ra
     e04:	8906                	mv	s2,ra
     e06:	8986                	mv	s3,ra
     e08:	8a06                	mv	s4,ra
     e0a:	8a86                	mv	s5,ra
     e0c:	8b06                	mv	s6,ra
     e0e:	8b86                	mv	s7,ra
     e10:	8c06                	mv	s8,ra
     e12:	8c86                	mv	s9,ra
     e14:	8d06                	mv	s10,ra
     e16:	8d86                	mv	s11,ra
     e18:	8e06                	mv	t3,ra
     e1a:	8e86                	mv	t4,ra
     e1c:	8f06                	mv	t5,ra
     e1e:	8f86                	mv	t6,ra
     e20:	0000f117          	auipc	sp,0xf
     e24:	1e010113          	addi	sp,sp,480 # 10000 <_stack_start>

00000e28 <_start>:
     e28:	00000d17          	auipc	s10,0x0
     e2c:	43cd0d13          	addi	s10,s10,1084 # 1264 <_bss_start>
     e30:	00001d97          	auipc	s11,0x1
     e34:	1c4d8d93          	addi	s11,s11,452 # 1ff4 <_bss_end>
     e38:	01bd5763          	bge	s10,s11,e46 <main_entry>

00000e3c <zero_loop>:
     e3c:	000d2023          	sw	zero,0(s10)
     e40:	0d11                	addi	s10,s10,4
     e42:	ffaddde3          	bge	s11,s10,e3c <zero_loop>

00000e46 <main_entry>:
     e46:	00000513          	li	a0,0
     e4a:	00000593          	li	a1,0
     e4e:	18a000ef          	jal	ra,fd8 <main>

00000e52 <memcpy>:
     e52:	00a5c7b3          	xor	a5,a1,a0
     e56:	8b8d                	andi	a5,a5,3
     e58:	00c508b3          	add	a7,a0,a2
     e5c:	e7a1                	bnez	a5,ea4 <memcpy+0x52>
     e5e:	478d                	li	a5,3
     e60:	04c7f263          	bgeu	a5,a2,ea4 <memcpy+0x52>
     e64:	00357793          	andi	a5,a0,3
     e68:	872a                	mv	a4,a0
     e6a:	eba9                	bnez	a5,ebc <memcpy+0x6a>
     e6c:	ffc8f613          	andi	a2,a7,-4
     e70:	fe060793          	addi	a5,a2,-32
     e74:	06f76763          	bltu	a4,a5,ee2 <memcpy+0x90>
     e78:	02c77363          	bgeu	a4,a2,e9e <memcpy+0x4c>
     e7c:	86ae                	mv	a3,a1
     e7e:	87ba                	mv	a5,a4
     e80:	0006a803          	lw	a6,0(a3)
     e84:	0791                	addi	a5,a5,4
     e86:	0691                	addi	a3,a3,4
     e88:	ff07ae23          	sw	a6,-4(a5)
     e8c:	fec7eae3          	bltu	a5,a2,e80 <memcpy+0x2e>
     e90:	fff60793          	addi	a5,a2,-1
     e94:	8f99                	sub	a5,a5,a4
     e96:	9bf1                	andi	a5,a5,-4
     e98:	0791                	addi	a5,a5,4
     e9a:	973e                	add	a4,a4,a5
     e9c:	95be                	add	a1,a1,a5
     e9e:	01176663          	bltu	a4,a7,eaa <memcpy+0x58>
     ea2:	8082                	ret
     ea4:	872a                	mv	a4,a0
     ea6:	ff157ee3          	bgeu	a0,a7,ea2 <memcpy+0x50>
     eaa:	0005c783          	lbu	a5,0(a1)
     eae:	0705                	addi	a4,a4,1
     eb0:	0585                	addi	a1,a1,1
     eb2:	fef70fa3          	sb	a5,-1(a4)
     eb6:	ff176ae3          	bltu	a4,a7,eaa <memcpy+0x58>
     eba:	8082                	ret
     ebc:	0005c683          	lbu	a3,0(a1)
     ec0:	0705                	addi	a4,a4,1
     ec2:	00377793          	andi	a5,a4,3
     ec6:	fed70fa3          	sb	a3,-1(a4)
     eca:	0585                	addi	a1,a1,1
     ecc:	d3c5                	beqz	a5,e6c <memcpy+0x1a>
     ece:	0005c683          	lbu	a3,0(a1)
     ed2:	0705                	addi	a4,a4,1
     ed4:	00377793          	andi	a5,a4,3
     ed8:	fed70fa3          	sb	a3,-1(a4)
     edc:	0585                	addi	a1,a1,1
     ede:	fff9                	bnez	a5,ebc <memcpy+0x6a>
     ee0:	b771                	j	e6c <memcpy+0x1a>
     ee2:	41d4                	lw	a3,4(a1)
     ee4:	0005a283          	lw	t0,0(a1)
     ee8:	0085af83          	lw	t6,8(a1)
     eec:	00c5af03          	lw	t5,12(a1)
     ef0:	0105ae83          	lw	t4,16(a1)
     ef4:	0145ae03          	lw	t3,20(a1)
     ef8:	0185a303          	lw	t1,24(a1)
     efc:	01c5a803          	lw	a6,28(a1)
     f00:	c354                	sw	a3,4(a4)
     f02:	5194                	lw	a3,32(a1)
     f04:	00572023          	sw	t0,0(a4)
     f08:	01f72423          	sw	t6,8(a4)
     f0c:	01e72623          	sw	t5,12(a4)
     f10:	01d72823          	sw	t4,16(a4)
     f14:	01c72a23          	sw	t3,20(a4)
     f18:	00672c23          	sw	t1,24(a4)
     f1c:	01072e23          	sw	a6,28(a4)
     f20:	d314                	sw	a3,32(a4)
     f22:	02470713          	addi	a4,a4,36
     f26:	02458593          	addi	a1,a1,36
     f2a:	faf76ce3          	bltu	a4,a5,ee2 <memcpy+0x90>
     f2e:	b7a9                	j	e78 <memcpy+0x26>

00000f30 <memset>:
     f30:	433d                	li	t1,15
     f32:	872a                	mv	a4,a0
     f34:	02c37363          	bgeu	t1,a2,f5a <memset+0x2a>
     f38:	00f77793          	andi	a5,a4,15
     f3c:	efbd                	bnez	a5,fba <memset+0x8a>
     f3e:	e5ad                	bnez	a1,fa8 <memset+0x78>
     f40:	ff067693          	andi	a3,a2,-16
     f44:	8a3d                	andi	a2,a2,15
     f46:	96ba                	add	a3,a3,a4
     f48:	c30c                	sw	a1,0(a4)
     f4a:	c34c                	sw	a1,4(a4)
     f4c:	c70c                	sw	a1,8(a4)
     f4e:	c74c                	sw	a1,12(a4)
     f50:	0741                	addi	a4,a4,16
     f52:	fed76be3          	bltu	a4,a3,f48 <memset+0x18>
     f56:	e211                	bnez	a2,f5a <memset+0x2a>
     f58:	8082                	ret
     f5a:	40c306b3          	sub	a3,t1,a2
     f5e:	068a                	slli	a3,a3,0x2
     f60:	00000297          	auipc	t0,0x0
     f64:	9696                	add	a3,a3,t0
     f66:	00a68067          	jr	10(a3)
     f6a:	00b70723          	sb	a1,14(a4)
     f6e:	00b706a3          	sb	a1,13(a4)
     f72:	00b70623          	sb	a1,12(a4)
     f76:	00b705a3          	sb	a1,11(a4)
     f7a:	00b70523          	sb	a1,10(a4)
     f7e:	00b704a3          	sb	a1,9(a4)
     f82:	00b70423          	sb	a1,8(a4)
     f86:	00b703a3          	sb	a1,7(a4)
     f8a:	00b70323          	sb	a1,6(a4)
     f8e:	00b702a3          	sb	a1,5(a4)
     f92:	00b70223          	sb	a1,4(a4)
     f96:	00b701a3          	sb	a1,3(a4)
     f9a:	00b70123          	sb	a1,2(a4)
     f9e:	00b700a3          	sb	a1,1(a4)
     fa2:	00b70023          	sb	a1,0(a4)
     fa6:	8082                	ret
     fa8:	0ff5f593          	andi	a1,a1,255
     fac:	00859693          	slli	a3,a1,0x8
     fb0:	8dd5                	or	a1,a1,a3
     fb2:	01059693          	slli	a3,a1,0x10
     fb6:	8dd5                	or	a1,a1,a3
     fb8:	b761                	j	f40 <memset+0x10>
     fba:	00279693          	slli	a3,a5,0x2
     fbe:	00000297          	auipc	t0,0x0
     fc2:	9696                	add	a3,a3,t0
     fc4:	8286                	mv	t0,ra
     fc6:	fa8680e7          	jalr	-88(a3)
     fca:	8096                	mv	ra,t0
     fcc:	17c1                	addi	a5,a5,-16
     fce:	8f1d                	sub	a4,a4,a5
     fd0:	963e                	add	a2,a2,a5
     fd2:	f8c374e3          	bgeu	t1,a2,f5a <memset+0x2a>
     fd6:	b7a5                	j	f3e <memset+0xe>

00000fd8 <main>:

int main(){
     fd8:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fdc:	0c000613          	li	a2,192
     fe0:	00000597          	auipc	a1,0x0
     fe4:	1c058593          	addi	a1,a1,448 # 11a0 <__DTOR_END__+0xc0>
     fe8:	0068                	addi	a0,sp,12
int main(){
     fea:	42112623          	sw	ra,1068(sp)
     fee:	42812423          	sw	s0,1064(sp)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     ff2:	3585                	jal	e52 <memcpy>
  //  printf("\nKEY GENERATION STARTED \n");


 //   start = clock();

    keys = generate_keys(N, p, q);
     ff4:	06500613          	li	a2,101
     ff8:	458d                	li	a1,3
     ffa:	03500513          	li	a0,53
     ffe:	3a29                	jal	918 <generate_keys>
    1000:	4781                	li	a5,0
 

   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
    1002:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
    1006:	00f506b3          	add	a3,a0,a5
    100a:	4290                	lw	a2,0(a3)
    100c:	1314                	addi	a3,sp,416
    100e:	96be                	add	a3,a3,a5
    1010:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
    1012:	0791                	addi	a5,a5,4
    1014:	fee799e3          	bne	a5,a4,1006 <main+0x2e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
    1018:	1cd8                	addi	a4,sp,628
    101a:	1a850793          	addi	a5,a0,424
    101e:	27c50693          	addi	a3,a0,636
    1022:	843a                	mv	s0,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
    1024:	4390                	lw	a2,0(a5)
    1026:	0791                	addi	a5,a5,4
    1028:	0711                	addi	a4,a4,4
    102a:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
    102e:	fed79be3          	bne	a5,a3,1024 <main+0x4c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
    1032:	01f8                	addi	a4,sp,204
    1034:	35050793          	addi	a5,a0,848
    1038:	42450613          	addi	a2,a0,1060
    103c:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
    103e:	438c                	lw	a1,0(a5)
    1040:	0791                	addi	a5,a5,4
    1042:	0711                	addi	a4,a4,4
    1044:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
    1048:	fec79be3          	bne	a5,a2,103e <main+0x66>
    104c:	06b0                	addi	a2,sp,840
    104e:	4fc50513          	addi	a0,a0,1276
    1052:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
    1054:	4398                	lw	a4,0(a5)
    1056:	0791                	addi	a5,a5,4
    1058:	0611                	addi	a2,a2,4
    105a:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
    105e:	fea79be3          	bne	a5,a0,1054 <main+0x7c>
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");

    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1062:	8742                	mv	a4,a6
    1064:	0070                	addi	a2,sp,12
    1066:	06500593          	li	a1,101
    106a:	03500513          	li	a0,53
    106e:	36e1                	jal	c36 <ntru_encyrpt>
    1070:	87aa                	mv	a5,a0
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");

    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1072:	34810813          	addi	a6,sp,840
    1076:	8722                	mv	a4,s0
    1078:	458d                	li	a1,3
    107a:	1314                	addi	a3,sp,416
    107c:	06500613          	li	a2,101
    1080:	03500513          	li	a0,53
    1084:	31b5                	jal	cf0 <ntru_deceypt>
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    1086:	dedee737          	lui	a4,0xdedee
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    108a:	4781                	li	a5,0
    108c:	00000597          	auipc	a1,0x0
    1090:	1d458593          	addi	a1,a1,468 # 1260 <_edata>
            resultkon[0] = 0xDEDEDEDE;
    1094:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
    1098:	08000813          	li	a6,128
        if(!(message[i] == Dec_Message[i])){
    109c:	0070                	addi	a2,sp,12
    109e:	00f506b3          	add	a3,a0,a5
    10a2:	963e                	add	a2,a2,a5
    10a4:	4210                	lw	a2,0(a2)
    10a6:	4294                	lw	a3,0(a3)
    10a8:	00d60f63          	beq	a2,a3,10c6 <main+0xee>
            resultkon[0] = 0xBABABABA;
    10ac:	babac7b7          	lui	a5,0xbabac
    10b0:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    10b4:	c19c                	sw	a5,0(a1)
    //printf("RESULT = %d\n",resultkon[0]);
   // printf("Time Result = %f clocks\n",cpu_time_used);


    return 0;
}
    10b6:	42c12083          	lw	ra,1068(sp)
    10ba:	42812403          	lw	s0,1064(sp)
    10be:	4501                	li	a0,0
    10c0:	43010113          	addi	sp,sp,1072
    10c4:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    10c6:	c198                	sw	a4,0(a1)
    for(i = 0; i < 32; ++i){
    10c8:	0791                	addi	a5,a5,4
    10ca:	fd0799e3          	bne	a5,a6,109c <main+0xc4>
    10ce:	b7e5                	j	10b6 <main+0xde>

000010d0 <__CTOR_LIST__>:
	...

000010d8 <__CTOR_END__>:
	...

Disassembly of section .rodata:

000010e0 <.rodata>:
    10e0:	0001                	nop
    10e2:	0000                	unimp
    10e4:	ffff                	0xffff
    10e6:	ffff                	0xffff
    10e8:	0000                	unimp
    10ea:	0000                	unimp
    10ec:	0001                	nop
    10ee:	0000                	unimp
    10f0:	ffff                	0xffff
    10f2:	ffff                	0xffff
    10f4:	0001                	nop
    10f6:	0000                	unimp
    10f8:	ffff                	0xffff
    10fa:	ffff                	0xffff
    10fc:	0000                	unimp
    10fe:	0000                	unimp
    1100:	0001                	nop
    1102:	0000                	unimp
    1104:	0001                	nop
    1106:	0000                	unimp
    1108:	0000                	unimp
    110a:	0000                	unimp
    110c:	ffff                	0xffff
    110e:	ffff                	0xffff
    1110:	0001                	nop
    1112:	0000                	unimp
    1114:	ffff                	0xffff
    1116:	ffff                	0xffff
    1118:	0001                	nop
    111a:	0000                	unimp
    111c:	0000                	unimp
    111e:	0000                	unimp
    1120:	0001                	nop
    1122:	0000                	unimp
    1124:	0001                	nop
    1126:	0000                	unimp
    1128:	0000                	unimp
    112a:	0000                	unimp
    112c:	ffff                	0xffff
    112e:	ffff                	0xffff
    1130:	0001                	nop
    1132:	0000                	unimp
    1134:	ffff                	0xffff
    1136:	ffff                	0xffff
    1138:	0001                	nop
    113a:	0000                	unimp
    113c:	0000                	unimp
    113e:	0000                	unimp
    1140:	0001                	nop
    1142:	0000                	unimp
    1144:	0001                	nop
    1146:	0000                	unimp
    1148:	0000                	unimp
    114a:	0000                	unimp
    114c:	0001                	nop
    114e:	0000                	unimp
    1150:	ffff                	0xffff
    1152:	ffff                	0xffff
    1154:	0001                	nop
    1156:	0000                	unimp
    1158:	ffff                	0xffff
    115a:	ffff                	0xffff
    115c:	0000                	unimp
    115e:	0000                	unimp
    1160:	0001                	nop
    1162:	0000                	unimp
    1164:	ffff                	0xffff
    1166:	ffff                	0xffff
    1168:	0000                	unimp
    116a:	0000                	unimp
    116c:	0001                	nop
    116e:	0000                	unimp
    1170:	ffff                	0xffff
    1172:	ffff                	0xffff
    1174:	0001                	nop
    1176:	0000                	unimp
    1178:	ffff                	0xffff
    117a:	ffff                	0xffff
    117c:	0000                	unimp
    117e:	0000                	unimp
    1180:	0001                	nop
    1182:	0000                	unimp
    1184:	0001                	nop
    1186:	0000                	unimp
    1188:	0000                	unimp
    118a:	0000                	unimp
    118c:	ffff                	0xffff
    118e:	ffff                	0xffff
    1190:	0001                	nop
    1192:	0000                	unimp
    1194:	ffff                	0xffff
    1196:	ffff                	0xffff
    1198:	0001                	nop
    119a:	0000                	unimp
    119c:	0000                	unimp
    119e:	0000                	unimp
    11a0:	0001                	nop
    11a2:	0000                	unimp
    11a4:	0001                	nop
    11a6:	0000                	unimp
    11a8:	0002                	c.slli64	zero
    11aa:	0000                	unimp
    11ac:	0001                	nop
    11ae:	0000                	unimp
    11b0:	0001                	nop
    11b2:	0000                	unimp
    11b4:	0001                	nop
    11b6:	0000                	unimp
    11b8:	0001                	nop
    11ba:	0000                	unimp
    11bc:	0002                	c.slli64	zero
    11be:	0000                	unimp
    11c0:	0001                	nop
    11c2:	0000                	unimp
    11c4:	0001                	nop
    11c6:	0000                	unimp
    11c8:	0000                	unimp
    11ca:	0000                	unimp
    11cc:	0001                	nop
    11ce:	0000                	unimp
    11d0:	0001                	nop
    11d2:	0000                	unimp
    11d4:	0002                	c.slli64	zero
    11d6:	0000                	unimp
    11d8:	0001                	nop
    11da:	0000                	unimp
    11dc:	0000                	unimp
    11de:	0000                	unimp
    11e0:	0001                	nop
    11e2:	0000                	unimp
    11e4:	0002                	c.slli64	zero
    11e6:	0000                	unimp
    11e8:	0000                	unimp
    11ea:	0000                	unimp
    11ec:	0001                	nop
    11ee:	0000                	unimp
    11f0:	0001                	nop
    11f2:	0000                	unimp
    11f4:	0001                	nop
    11f6:	0000                	unimp
    11f8:	0001                	nop
    11fa:	0000                	unimp
    11fc:	0000                	unimp
    11fe:	0000                	unimp
    1200:	0001                	nop
    1202:	0000                	unimp
    1204:	0001                	nop
    1206:	0000                	unimp
    1208:	0000                	unimp
    120a:	0000                	unimp
    120c:	0002                	c.slli64	zero
    120e:	0000                	unimp
    1210:	0001                	nop
    1212:	0000                	unimp
    1214:	0002                	c.slli64	zero
    1216:	0000                	unimp
    1218:	0001                	nop
    121a:	0000                	unimp
    121c:	0000                	unimp
    121e:	0000                	unimp
    1220:	0001                	nop
    1222:	0000                	unimp
    1224:	0001                	nop
    1226:	0000                	unimp
    1228:	0002                	c.slli64	zero
    122a:	0000                	unimp
    122c:	0001                	nop
    122e:	0000                	unimp
    1230:	0001                	nop
    1232:	0000                	unimp
    1234:	0001                	nop
    1236:	0000                	unimp
    1238:	0001                	nop
    123a:	0000                	unimp
    123c:	0002                	c.slli64	zero
    123e:	0000                	unimp
    1240:	0001                	nop
    1242:	0000                	unimp
    1244:	0001                	nop
    1246:	0000                	unimp
    1248:	0002                	c.slli64	zero
    124a:	0000                	unimp
    124c:	0001                	nop
    124e:	0000                	unimp
    1250:	0001                	nop
    1252:	0000                	unimp
    1254:	0001                	nop
    1256:	0000                	unimp
    1258:	0001                	nop
    125a:	0000                	unimp
    125c:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

00001260 <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    1260:	bebe                	fsd	fa5,376(sp)
    1262:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

00001264 <_bss_start>:
	...

000014bc <product2>:
	...

00001714 <result>:
	...

0000196c <ti_2>:
	...

00001afc <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	1731                	addi	a4,a4,-20
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05bd                	addi	a1,a1,15
       e:	0000                	unimp
      10:	260c                	fld	fa1,8(a2)
      12:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
      16:	0004                	0x4
	...
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	0459                	addi	s0,s0,22
      2a:	0000                	unimp
      2c:	0102                	c.slli64	sp
      2e:	5708                	lw	a0,40(a4)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	0478                	addi	a4,sp,524
      38:	0000                	unimp
      3a:	0202                	c.slli64	tp
      3c:	0002b707          	fld	fa4,0(t0) # fbe <memset+0x8e>
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	000000f3          	0xf3
      48:	0402                	c.slli64	s0
      4a:	00007007          	0x7007
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00ee                	slli	ra,ra,0x1b
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00006b07          	0x6b07
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	0075                	c.nop	29
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	8504                	0x8504
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	02fa                	slli	t0,t0,0x1e
      7a:	0000                	unimp
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
      80:	0069                	c.nop	26
      82:	0000                	unimp
      84:	d606                	sw	ra,44(sp)
      86:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
      8a:	0e2e                	slli	t3,t3,0xb
    int line[size_b][size_a + size_b];
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
      90:	4b06                	lw	s6,64(sp)
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	5306                	lw	t1,96(sp)
      9e:	0006                	c.slli	zero,0x1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      a0:	0300                	addi	s0,sp,384
      a2:	005d1793          	slli	a5,s10,0x5
    int pola[size_a];
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      ac:	0000ca03          	lbu	s4,0(ra)
      b0:	0800                	addi	s0,sp,16
      b2:	02f4                	addi	a3,sp,332
    int line[size_b][size_a + size_b];
      b4:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b6:	770ca703          	lw	a4,1904(s9)
      ba:	0000                	unimp
    int line[size_b][size_a + size_b];
      bc:	0800                	addi	s0,sp,16
      be:	0000021b          	0x21b
    int pola[size_a];
      c2:	ca13a803          	lw	a6,-863(t2)
    int line[size_b][size_a + size_b];
      c6:	0000                	unimp
      c8:	0000                	unimp
    int pola[size_a];
      ca:	2c09                	jal	2dc <polymult2+0x6a>
      cc:	0000                	unimp
    int polb[size_b];
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
    int pola[size_a];
      d4:	0069                	c.nop	26
    int polb[size_b];
      d6:	0000                	unimp
      d8:	080b0003          	lb	zero,128(s6)
    int line[size_b][size_a + size_b];
      dc:	fe09a203          	lw	tp,-32(s3)
    int pola[size_a];
      e0:	0000                	unimp
    int polb[size_b];
      e2:	0c00                	addi	s0,sp,528
            line[i][j] = 0;
      e4:	0535                	addi	a0,a0,13
      e6:	0000                	unimp
      e8:	5d07a403          	lw	s0,1488(a5)
    for (i = 0; i < size_b; ++i){
      ec:	0000                	unimp
            product[j] = 0;
      ee:	0000                	unimp
      f0:	3d0c                	fld	fa1,56(a0)
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
    for (i = 0; i < size_b; ++i){
      f6:	05a9                	addi	a1,a1,10
      f8:	00a8                	addi	a0,sp,72
      fa:	0000                	unimp
    for (i = 0; i < size_a; ++i){
      fc:	0004                	0x4
      fe:	a806                	fsd	ft1,16(sp)
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
    for (i = 0; i < size_b; ++i){
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
     108:	0000                	unimp
    if(star_mult == 1){
     10a:	040d                	addi	s0,s0,3
     10c:	9006                	c.add	zero,ra
     10e:	0005                	c.nop	1
     110:	0400                	addi	s0,sp,512
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
     116:	0000                	unimp
     118:	7306                	flw	ft6,96(sp)
        for (j = size_b -1; j >= 0; j = j-1){
     11a:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
            for (k = size_a-1; k >= 0; k = k-1 ){
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
            product[j] = 0;
     122:	0000                	unimp
     124:	d306                	sw	ra,164(sp)
     126:	0001                	nop
            line[i][j] = 0;
     128:	0400                	addi	s0,sp,512
     12a:	01181b23          	sh	a7,22(a6)
            product[j] = 0;
     12e:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     130:	e40e                	fsw	ft3,8(sp)
     132:	0001                	nop
     134:	1800                	addi	s0,sp,48
     136:	3404                	fld	fs1,40(s0)
    for (i = 0; i < size_b; ++i){
     138:	8a08                	0x8a08
     13a:	0001                	nop
     13c:	0c00                	addi	s0,sp,528
     13e:	04c9                	addi	s1,s1,18
        for(j = 0; j < size_a + size_b -1; ++j){
     140:	0000                	unimp
     142:	3604                	fld	fs1,40(a2)
        pola[i] = a[i];
     144:	00018a13          	mv	s4,gp
     148:	0000                	unimp
     14a:	006b5f0f          	0x6b5f0f
            pola[i] = pola[i] + mod;
     14e:	3704                	fld	fs1,40(a4)
     150:	00005d07          	0x5d07
        while (pola[i] < 0){
     154:	0400                	addi	s0,sp,512
     156:	110c                	addi	a1,sp,160
     158:	0005                	c.nop	1
        pola[i] = pola[i] % mod;
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
    for (i = 0; i < size_a; ++i){
     160:	0000                	unimp
        pola[i] = pola[i] % mod;
     162:	0c08                	addi	a0,sp,528
     164:	01cd                	addi	gp,gp,19
    for (i = 0; i < size_a; ++i){
     166:	0000                	unimp
            pola[i] = pola[i] + mod;
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
        polb[i] = b[i];
     16c:	0000                	unimp
     16e:	0c00                	addi	s0,sp,528
     170:	310c                	fld	fa1,32(a0)
     172:	0006                	c.slli	zero,0x1
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     174:	0400                	addi	s0,sp,512
        while (polb[i] < 0){
     176:	005d1b37          	lui	s6,0x5d1
     17a:	0000                	unimp
        polb[i] = polb[i] % mod;
     17c:	0f10                	addi	a2,sp,912
     17e:	785f 0400 0b38      	0xb380400785f
     184:	0190                	addi	a2,sp,192
     186:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     188:	0014                	0x14
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     18a:	0410                	addi	a2,sp,512
     18c:	0130                	addi	a2,sp,136
    if(star_mult == 1){
     18e:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     190:	0c09                	addi	s8,s8,2
     192:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     194:	a000                	fsd	fs0,0(s0)
    for (i = 0; i < size_b; ++i){
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
     19e:	0000                	unimp
     1a0:	0b0e                	slli	s6,s6,0x3
     1a2:	0002                	c.slli64	zero
    for(j = 0; j < size_a + size_b -1; ++j){
     1a4:	2400                	fld	fs0,8(s0)
     1a6:	3c04                	fld	fs1,56(s0)
     1a8:	2308                	fld	fa0,0(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
     1aa:	0002                	c.slli64	zero
     1ac:	0c00                	addi	s0,sp,528
     1ae:	00e5                	addi	ra,ra,25
}
     1b0:	0000                	unimp
     1b2:	3e04                	fld	fs1,56(a2)
     1b4:	5d09                	li	s10,-30
     1b6:	0000                	unimp
     1b8:	0000                	unimp
     1ba:	530c                	lw	a1,32(a4)
     1bc:	0005                	c.nop	1
     1be:	0400                	addi	s0,sp,512
     1c0:	005d093f 0c040000 	0xc040000005d093f
     1c8:	0118                	addi	a4,sp,128
     1ca:	0000                	unimp
     1cc:	4004                	lw	s1,0(s0)
     1ce:	5d09                	li	s10,-30
                line[size_b-1-j][k] = pola[k]*polb[j];
     1d0:	0000                	unimp
     1d2:	0800                	addi	s0,sp,16
     1d4:	cf0c                	sw	a1,24(a4)
     1d6:	0006                	c.slli	zero,0x1
     1d8:	0400                	addi	s0,sp,512
     1da:	0941                	addi	s2,s2,16
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e0:	0c0c                	addi	a1,sp,528
                line[size_b-1-j][k] = pola[k]*polb[j];
     1e2:	03a0                	addi	s0,sp,456
     1e4:	0000                	unimp
     1e6:	4204                	lw	s1,0(a2)
     1e8:	5d09                	li	s10,-30
            for (k = size_a-1; k >= 0; k = k-1 ){
     1ea:	0000                	unimp
     1ec:	1000                	addi	s0,sp,32
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	500c                	lw	a1,32(s0)
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f8:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     1fa:	0c14                	addi	a3,sp,528
     1fc:	0636                	slli	a2,a2,0xd
     1fe:	0000                	unimp
     200:	4404                	lw	s1,8(s0)
     202:	5d09                	li	s10,-30
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
     208:	820c                	0x820c
            for (k = size_a-1; k >= 0; k = k-1 ){
     20a:	0004                	0x4
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
     210:	005d                	c.nop	23
     212:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     214:	0c1c                	addi	a5,sp,528
     216:	0691                	addi	a3,a3,4
        for (j = size_b -1; j >= 0; j = j-1){
     218:	0000                	unimp
     21a:	4604                	lw	s1,8(a2)
     21c:	5d09                	li	s10,-30
     21e:	0000                	unimp
            line[i][j] = line[i][j] % mod;
     220:	2000                	fld	fs0,0(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     222:	1100                	addi	s0,sp,160
     224:	00000127          	0x127
            line[i][j] = line[i][j] % mod;
     228:	0108                	addi	a0,sp,128
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     22e:	0002                	c.slli64	zero
     230:	0c00                	addi	s0,sp,528
    for (i = 0; i < size_b; ++i){
     232:	000001b3          	add	gp,zero,zero
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
     23a:	0002                	c.slli64	zero
     23c:	0000                	unimp
            product[j] += line[i][j];
     23e:	000c                	0xc
     240:	0000                	unimp
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
        for(i = 0; i < size_b; ++i){
     246:	0268                	addi	a0,sp,268
            product[j] += line[i][j];
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
     24c:	0574                	addi	a3,sp,652
     24e:	0000                	unimp
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
        for(i = 0; i < size_b; ++i){
     254:	0001                	nop
     256:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     258:	1201                	addi	tp,tp,-32
     25a:	0156                	slli	sp,sp,0x15
     25c:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     25e:	5604                	lw	s1,40(a2)
     260:	0c0a                	slli	s8,s8,0x2
        product[j] = product[j] % mod;
     262:	0001                	nop
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
        product[j] = product[j] % mod;
     268:	0a09                	addi	s4,s4,2
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
     26e:	0002                	c.slli64	zero
    for(j = 0; j < size_a + size_b -1; ++j){
     270:	0a00                	addi	s0,sp,272
    int line[size_b][size_a + size_b];
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f b911 0003      	0x3b911001f
     27c:	9000                	0x9000
     27e:	0401                	addi	s0,s0,0
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     286:	c90c                	sw	a1,16(a0)
     288:	0004                	0x4
     28a:	0400                	addi	s0,sp,512
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult2+0x3e>
     290:	0000                	unimp
     292:	0c00                	addi	s0,sp,528
     294:	04e1                	addi	s1,s1,24
     296:	0000                	unimp
    int line[size_b][size_a + size_b];
     298:	6404                	flw	fs1,8(s0)
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
    int pola[size_a];
     2a0:	c80c                	sw	a1,16(s0)
     2a2:	0001                	nop
     2a4:	0400                	addi	s0,sp,512
     2a6:	0966                	slli	s2,s2,0x19
    int line[size_b][size_a + size_b];
     2a8:	02c1                	addi	t0,t0,16
    int pola[size_a];
     2aa:	0000                	unimp
     2ac:	0c08                	addi	a0,sp,528
    int polb[size_b];
     2ae:	00000127          	0x127
     2b2:	6704                	flw	fs1,8(a4)
    int pola[size_a];
     2b4:	231e                	fld	ft6,448(sp)
    int polb[size_b];
     2b6:	0002                	c.slli64	zero
     2b8:	8800                	0x8800
    int line[size_b][size_a + size_b];
     2ba:	1000                	addi	s0,sp,32
     2bc:	7804                	flw	fs1,48(s0)
    int pola[size_a];
     2be:	0002                	c.slli64	zero
     2c0:	0900                	addi	s0,sp,144
    int polb[size_b];
     2c2:	02d1                	addi	t0,t0,20
            line[i][j] = 0;
     2c4:	0000                	unimp
     2c6:	02d1                	addi	t0,t0,20
     2c8:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     2ca:	690a                	flw	fs2,128(sp)
     2cc:	0000                	unimp
            product2[j] = 0;
     2ce:	1f00                	addi	s0,sp,944
     2d0:	1000                	addi	s0,sp,32
     2d2:	d704                	sw	s1,40(a4)
     2d4:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     2d6:	1300                	addi	s0,sp,416
     2d8:	8c0e                	mv	s8,gp
    for(i = 0; i < size_a; ++i){
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
     2de:	7a04                	flw	fs1,48(a2)
    for(i = 0; i < size_b; ++i){
     2e0:	0008                	0x8
     2e2:	0c000003          	lb	zero,192(zero) # c0 <polymult+0x34>
    if(star_mult == 1){
     2e6:	0112                	slli	sp,sp,0x4
     2e8:	0000                	unimp
     2ea:	7b04                	flw	fs1,48(a4)
     2ec:	0011                	c.nop	4
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
     2f2:	110c                	addi	a1,sp,160
        for (j = size_b -1; j >= 0; j = j-1){
     2f4:	0000                	unimp
     2f6:	0400                	addi	s0,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     2f8:	067c                	addi	a5,sp,780
     2fa:	005d                	c.nop	23
            product2[j] = 0;
     2fc:	0000                	unimp
     2fe:	0004                	0x4
     300:	0410                	addi	a2,sp,512
            line[i][j] = 0;
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
            product2[j] = 0;
     306:	b30e                	fsd	ft3,416(sp)
     308:	0004                	0x4
        for(j = 0; j < size_a + size_b -1; ++j){
     30a:	6800                	flw	fs0,16(s0)
     30c:	ba04                	fsd	fs1,48(a2)
     30e:	4908                	lw	a0,16(a0)
     310:	0004                	0x4
    for (i = 0; i < size_b; ++i){
     312:	0f00                	addi	s0,sp,912
     314:	705f 0400 12bb      	0x12bb0400705f
        for(j = 0; j < size_a + size_b -1; ++j){
     31a:	0300                	addi	s0,sp,384
     31c:	0000                	unimp
        pola[i] = a[i];
     31e:	0f00                	addi	s0,sp,912
     320:	725f 0400 07bc      	0x7bc0400725f
     326:	005d                	c.nop	23
     328:	0000                	unimp
    for(i = 0; i < size_a; ++i){
     32a:	0f04                	addi	s1,sp,912
        pola[i] = a[i];
     32c:	775f 0400 07bd      	0x7bd0400775f
        polb[i] = b[i];
     332:	005d                	c.nop	23
     334:	0000                	unimp
     336:	0c08                	addi	a0,sp,528
     338:	0000014f          	fnmadd.s	ft2,ft0,ft0,ft0,rne
     33c:	be04                	fsd	fs1,56(a2)
    for(i = 0; i < size_b; ++i){
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
        polb[i] = b[i];
     340:	0000                	unimp
     342:	0c00                	addi	s0,sp,528
    for(i = 0; i < size_b; ++i){
     344:	4a0c                	lw	a1,16(a2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     346:	0002                	c.slli64	zero
     348:	0400                	addi	s0,sp,512
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
     352:	625f 0066 c004      	0xc0040066625f
     358:	d811                	beqz	s0,26c <polymult+0x1e0>
     35a:	0002                	c.slli64	zero
     35c:	1000                	addi	s0,sp,32
            for (k = size_a-1; k >= 0; k = k-1 ){
     35e:	8e0c                	0x8e0c
     360:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     362:	0400                	addi	s0,sp,512
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
     36c:	0135                	addi	sp,sp,13
     36e:	0000                	unimp
     370:	c804                	sw	s1,16(s0)
     372:	0a0a                	slli	s4,s4,0x2
        for(i = 0; i < size_b; ++i){
     374:	0001                	nop
    for(j = 0; j < size_a + size_b -1; ++j){
     376:	1c00                	addi	s0,sp,560
     378:	fb0c                	fsw	fa1,48(a4)
}
     37a:	0001                	nop
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
     380:	05cd                	addi	a1,a1,19
     382:	0000                	unimp
     384:	0c20                	addi	s0,sp,536
     386:	0349                	addi	t1,t1,18
     388:	0000                	unimp
     38a:	cc04                	sw	s1,24(s0)
     38c:	f71d                	bnez	a4,2ba <polymult2+0x48>
     38e:	0005                	c.nop	1
     390:	2400                	fld	fs0,8(s0)
     392:	450c                	lw	a1,8(a0)
     394:	0005                	c.nop	1
     396:	0400                	addi	s0,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     39c:	0000                	unimp
     39e:	0c28                	addi	a0,sp,536
     3a0:	000006ab          	0x6ab
     3a4:	d004                	sw	s1,32(s0)
     3a6:	3509                	jal	1a8 <polymult+0x11c>
     3a8:	0006                	c.slli	zero,0x1
     3aa:	2c00                	fld	fs0,24(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ac:	62755f0f          	0x62755f0f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3b0:	0400                	addi	s0,sp,512
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b6:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     3b8:	0f30                	addi	a2,sp,920
     3ba:	755f 0070 d404      	0xd4040070755f
            product2[j] += line[i][j];
     3c0:	0012                	c.slli	zero,0x4
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult2+0x10e>
        for(i = 0; i < size_b; ++i){
     3c6:	72755f0f          	0x72755f0f
            product2[j] += line[i][j];
     3ca:	0400                	addi	s0,sp,512
     3cc:	07d5                	addi	a5,a5,21
     3ce:	005d                	c.nop	23
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
        for(i = 0; i < size_b; ++i){
     3d4:	010c                	addi	a1,sp,128
     3d6:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     3d8:	d804                	sw	s1,48(s0)
     3da:	3b11                	jal	ee <polymult+0x62>
     3dc:	0006                	c.slli	zero,0x1
        for(i = 0; i < size_b; ++i){
     3de:	4000                	lw	s0,0(s0)
     3e0:	760c                	flw	fa1,40(a2)
    int v[size_N];
     3e2:	0006                	c.slli	zero,0x1
     3e4:	0400                	addi	s0,sp,512
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3e6:	11d9                	addi	gp,gp,-10
    int v[size_N];
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3ec:	6c5f0f43          	0x6c5f0f43
     3f0:	0062                	c.slli	zero,0x18
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult2+0x96>
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
     3fa:	650c                	flw	fa1,8(a0)
     3fc:	0001                	nop
     3fe:	0400                	addi	s0,sp,512
     400:	07df 005d 0000      	0x5d07df
     406:	0c4c                	addi	a1,sp,532
    int v[size_N];
     408:	018c                	addi	a1,sp,192
     40a:	0000                	unimp
     40c:	e004                	fsw	fs1,0(s0)
    int q[size_N];
     40e:	840a                	mv	s0,sp
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
    int num_temp[size_N];
     414:	340c                	fld	fa1,40(s0)
     416:	0000                	unimp
    int denum_temp[size_D];
     418:	0400                	addi	s0,sp,512
     41a:	046712e3          	bne	a4,t1,c5e <ntru_encyrpt+0x28>
     41e:	0000                	unimp
    int num_temp[size_N];
     420:	0c54                	addi	a3,sp,532
    int denum_temp[size_D];
     422:	0320                	addi	s0,sp,392
     424:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
    int denum_temp[size_D];
     42a:	0001                	nop
     42c:	5800                	lw	s0,48(s0)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     42e:	bb0c                	fsd	fa1,48(a4)
    int v[size_N];
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
    int denum_temp[size_D];
     434:	0ee9                	addi	t4,t4,26
    for (i = 0; i < size_N; ++i){
     436:	00fe                	slli	ra,ra,0x1f
     438:	0000                	unimp
     43a:	0c5c                	addi	a5,sp,532
     43c:	00000493          	li	s1,0
     440:	ea04                	fsw	fs1,16(a2)
    for (i = 0; i < size_D; ++i) {
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
    for (i = 0; i < size_N; ++i){
     448:	1400                	addi	s0,sp,544
     44a:	009c                	addi	a5,sp,64
     44c:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     452:	6715                	lui	a4,0x5
     454:	0004                	0x4
     456:	1500                	addi	s0,sp,672
     458:	010a                	slli	sp,sp,0x2
    for (i = 0; i < size_N; ++i){
     45a:	0000                	unimp
     45c:	bb15                	j	190 <polymult+0x104>
        if ( (b_N*u)%mod == 1 )
     45e:	0005                	c.nop	1
    for (u = 0; u < mod; ++u){
     460:	1500                	addi	s0,sp,672
     462:	005d                	c.nop	23
     464:	0000                	unimp
     466:	1000                	addi	s0,sp,32
        num_temp[i] = num[i];
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
     46c:	1600                	addi	s0,sp,800
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
        while (num_temp[i] < 0) {
     472:	00051917          	auipc	s2,0x51
     476:	2800                	fld	fs0,16(s0)
        num_temp[i] = num_temp[i] % mod;
     478:	0404                	addi	s1,sp,512
     47a:	0265                	addi	tp,tp,25
    for (i = 0; i < size_N; ++i){
     47c:	bb08                	fsd	fa0,48(a4)
     47e:	0005                	c.nop	1
        num_temp[i] = num_temp[i] % mod;
     480:	1800                	addi	s0,sp,48
     482:	0471                	addi	s0,s0,28
    for (i = 0; i < size_N; ++i){
     484:	0000                	unimp
            num_temp[i] = num_temp[i] + mod;
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
        denum_temp[i] = denum[i];
     48a:	005d                	c.nop	23
     48c:	0000                	unimp
     48e:	1800                	addi	s0,sp,48
     490:	015e                	slli	sp,sp,0x17
            denum_temp[i] = denum_temp[i] + mod;
     492:	0000                	unimp
        while (denum_temp[i] < 0) {
     494:	6c04                	flw	fs1,24(s0)
     496:	0b02                	c.slli64	s6
     498:	000006a7          	0x6a7
        denum_temp[i] = denum_temp[i] % mod;
     49c:	1804                	addi	s1,sp,48
    for (i = 0; i < size_D; ++i) {
     49e:	022c                	addi	a1,sp,264
     4a0:	0000                	unimp
        denum_temp[i] = denum_temp[i] % mod;
     4a2:	6c04                	flw	fs1,24(s0)
     4a4:	1402                	slli	s0,s0,0x20
    for (i = 0; i < size_D; ++i) {
     4a6:	000006a7          	0x6a7
            denum_temp[i] = denum_temp[i] + mod;
     4aa:	1808                	addi	a0,sp,48
        q[i] = 0;
     4ac:	01dc                	addi	a5,sp,196
     4ae:	0000                	unimp
     4b0:	6c04                	flw	fs1,24(s0)
     4b2:	1e02                	slli	t3,t3,0x20
        v[i] = 0;
     4b4:	000006a7          	0x6a7
        q[i] = 0;
     4b8:	180c                	addi	a1,sp,48
        v[i] = 0;
     4ba:	04dc                	addi	a5,sp,580
     4bc:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     4be:	6e04                	flw	fs1,24(a2)
     4c0:	0802                	c.slli64	a6
        if( denum_temp[i] != 0 )
     4c2:	005d                	c.nop	23
    for (i = size_D-1; i >= 0; i = i-1){
     4c4:	0000                	unimp
     4c6:	1810                	addi	a2,sp,48
        if ( (b_N*u)%mod == 1 )
     4c8:	001f 0000 6f04      	0x6f040000001f
     4ce:	0802                	c.slli64	a6
     4d0:	000008a7          	0x8a7
    for (u = 0; u < mod; ++u){
     4d4:	1814                	addi	a3,sp,48
        if( num_temp[i] != 0 )
     4d6:	04f8                	addi	a4,sp,588
    for (i = size_N-1; i >= 0; i = i-1){
     4d8:	0000                	unimp
     4da:	7204                	flw	fs1,32(a2)
     4dc:	0702                	c.slli64	a4
     4de:	005d                	c.nop	23
     4e0:	0000                	unimp
     4e2:	1830                	addi	a2,sp,56
     4e4:	04e6                	slli	s1,s1,0x19
    while (d >= d2){
     4e6:	0000                	unimp
     4e8:	7304                	flw	fs1,32(a4)
    for(i = 0; i < size_N; ++i){
     4ea:	1602                	slli	a2,a2,0x20
        result[i] = q[i];
     4ec:	08bc                	addi	a5,sp,88
     4ee:	0000                	unimp
     4f0:	1834                	addi	a3,sp,56
     4f2:	000003cb          	fnmsub.s	ft7,ft0,ft0,ft0,rne
    for(i = 0; i < size_N; ++i){
     4f6:	7504                	flw	fs1,40(a0)
    for(i = size_N; i < (2*size_N); ++i){
     4f8:	0702                	c.slli64	a4
     4fa:	005d                	c.nop	23
        result[i] = num_temp[i-size_N];
     4fc:	0000                	unimp
     4fe:	1838                	addi	a4,sp,56
     500:	04ee                	slli	s1,s1,0x1b
     502:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     504:	7704                	flw	fs1,40(a4)
     506:	0a02                	c.slli64	s4
}
     508:	08cd                	addi	a7,a7,19
     50a:	0000                	unimp
     50c:	183c                	addi	a5,sp,56
     50e:	02ec                	addi	a1,sp,332
     510:	0000                	unimp
     512:	7a04                	flw	fs1,48(a2)
     514:	1302                	slli	t1,t1,0x20
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
     51a:	1840                	addi	s0,sp,52
     51c:	0201                	addi	tp,tp,0
     51e:	0000                	unimp
     520:	7b04                	flw	fs1,48(a4)
     522:	0702                	c.slli64	a4
     524:	005d                	c.nop	23
     526:	0000                	unimp
     528:	1844                	addi	s1,sp,52
     52a:	06c5                	addi	a3,a3,17
     52c:	0000                	unimp
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
        v[(d-d2)] = u*r_d;
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
     536:	1848                	addi	a0,sp,52
     538:	03f2                	slli	t2,t2,0x1c
     53a:	0000                	unimp
     53c:	7d04                	flw	fs1,56(a0)
     53e:	1402                	slli	s0,s0,0x20
        for (i = 0; i < size_N; ++i){
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
     544:	184c                	addi	a1,sp,52
     546:	0234                	addi	a3,sp,264
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     548:	0000                	unimp
     54a:	8004                	0x8004
     54c:	0702                	c.slli64	a4
     54e:	005d                	c.nop	23
     550:	0000                	unimp
     552:	1850                	addi	a2,sp,52
     554:	0184                	addi	s1,sp,192
        for (i = 0; i < size_N; ++i){
     556:	0000                	unimp
     558:	8104                	0x8104
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
        for (i = 0; i < size_N; ++i){
     560:	1854                	addi	a3,sp,52
     562:	046a                	slli	s0,s0,0x1a
     564:	0000                	unimp
     566:	a404                	fsd	fs1,8(s0)
        for (i = 0; i < size_N; ++i){
     568:	0702                	c.slli64	a4
     56a:	0882                	c.slli64	a7
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
        for(i = 0; i < size_N; ++i){
     570:	03b9                	addi	t2,t2,14
     572:	0000                	unimp
     574:	a804                	fsd	fs1,16(s0)
        for (i = size_N-1; i >= 0; i = i-1){
     576:	1302                	slli	t1,t1,0x20
     578:	000002bb          	0x2bb
     57c:	0148                	addi	a0,sp,132
     57e:	ca19                	beqz	a2,594 <polydiv+0x1b2>
     580:	0002                	c.slli64	zero
     582:	0400                	addi	s0,sp,512
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
            v[i] = v[i] % mod;
     588:	0002                	c.slli64	zero
        for (i = 0; i < size_N; ++i){
     58a:	4c00                	lw	s0,24(s0)
     58c:	1901                	addi	s2,s2,-32
            v[i] = v[i] % mod;
     58e:	066c                	addi	a1,sp,780
     590:	0000                	unimp
     592:	ad04                	fsd	fs1,24(a0)
     594:	0c02                	c.slli64	s8
        for (i = 0; i < size_N; ++i){
     596:	08e4                	addi	s1,sp,92
                product[i] = product[i] + mod;
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
            while (product[i] < 0) {
     59c:	3d19                	jal	3b2 <polymult2+0x140>
     59e:	0001                	nop
     5a0:	0400                	addi	s0,sp,512
            product[i] = product[i] % mod;
     5a2:	02b2                	slli	t0,t0,0xc
     5a4:	6810                	flw	fa2,16(s0)
        for (i = 0; i < size_N; ++i){
     5a6:	0006                	c.slli	zero,0x1
     5a8:	e000                	fsw	fs0,0(s0)
            product[i] = product[i] % mod;
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	0122                	slli	sp,sp,0x8
        for (i = 0; i < size_N; ++i){
     5ae:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
     5b8:	02ec                	addi	a1,sp,332
        for (i = 0; i < size_N; ++i){
     5ba:	1000                	addi	s0,sp,32
     5bc:	c104                	sw	s1,0(a0)
            num_temp[i] = num_temp[i] - product[i];
     5be:	0005                	c.nop	1
     5c0:	0200                	addi	s0,sp,256
     5c2:	0801                	addi	a6,a6,0
        for (i = 0; i < size_N; ++i){
     5c4:	0460                	addi	s0,sp,524
                num_temp[i] = num_temp[i] + mod;
     5c6:	0000                	unimp
     5c8:	c116                	sw	t0,128(sp)
            while (num_temp[i] < 0){
     5ca:	0005                	c.nop	1
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
            num_temp[i] = num_temp[i] % mod;
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
        for (i = 0; i < size_N; ++i){
     5d4:	009c                	addi	a5,sp,64
     5d6:	0000                	unimp
            num_temp[i] = num_temp[i] % mod;
     5d8:	05f1                	addi	a1,a1,28
     5da:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     5dc:	6715                	lui	a4,0x5
            q[i] = q[i] + v[i];
     5de:	0004                	0x4
     5e0:	1500                	addi	s0,sp,672
     5e2:	010a                	slli	sp,sp,0x2
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polydiv+0x128>
        for(i = 0; i < size_N; ++i){
     5e8:	0005                	c.nop	1
     5ea:	1500                	addi	s0,sp,672
            q[i] = q[i] + v[i];
     5ec:	005d                	c.nop	23
            q[i] = q[i] % mod;
     5ee:	0000                	unimp
     5f0:	1000                	addi	s0,sp,32
     5f2:	c804                	sw	s1,16(s0)
     5f4:	0005                	c.nop	1
        for(i = 0; i < size_N; ++i){
     5f6:	1000                	addi	s0,sp,32
            if( num_temp[i] != 0 )
     5f8:	d304                	sw	s1,32(a4)
        for (i = size_N-1; i >= 0; i = i-1){
     5fa:	0005                	c.nop	1
     5fc:	1400                	addi	s0,sp,544
            v[i] = 0;
     5fe:	0090                	addi	a2,sp,64
     600:	0000                	unimp
     602:	0000061b          	0x61b
     606:	6715                	lui	a4,0x5
        for (i = 0; i < size_N; ++i){
     608:	0004                	0x4
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
        result[i] = q[i];
     610:	9015                	srli	s0,s0,0x25
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
     616:	005d                	c.nop	23
     618:	0000                	unimp
     61a:	1000                	addi	s0,sp,32
    for(i = 0; i < size_N; ++i){
     61c:	fd04                	fsw	fs1,56(a0)
        result[i] = q[i];
     61e:	0005                	c.nop	1
    for(i = 0; i < size_N; ++i){
     620:	1400                	addi	s0,sp,544
        result[i] = num_temp[i-size_N];
     622:	005d                	c.nop	23
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
     628:	0000                	unimp
     62a:	6715                	lui	a4,0x5
     62c:	0004                	0x4
    for(i = size_N; i < (2*size_N); ++i){
     62e:	1500                	addi	s0,sp,672
     630:	010a                	slli	sp,sp,0x2
     632:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     634:	1000                	addi	s0,sp,32
     636:	2104                	fld	fs1,0(a0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     638:	0006                	c.slli	zero,0x1
    int ri_2[size]; // MX-ring poly, a
     63a:	0900                	addi	s0,sp,144
     63c:	002c                	addi	a1,sp,8
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     63e:	0000                	unimp
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     644:	690a                	flw	fs2,128(sp)
     646:	0000                	unimp
     648:	0200                	addi	s0,sp,256
     64a:	0900                	addi	s0,sp,144
     64c:	002c                	addi	a1,sp,8
     64e:	0000                	unimp
     650:	0000065b          	0x65b
     654:	690a                	flw	fs2,128(sp)
     656:	0000                	unimp
     658:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     65a:	0500                	addi	s0,sp,640
     65c:	04a1                	addi	s1,s1,8
     65e:	0000                	unimp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     660:	2404                	fld	fs1,8(s0)
     662:	1a01                	addi	s4,s4,-32
     664:	0306                	slli	t1,t1,0x1
    int ri[size];
     666:	0000                	unimp
     668:	401a                	0x401a
     66a:	0006                	c.slli	zero,0x1
    int ti_1[size]; // ti_1[0] = 1
     66c:	0c00                	addi	s0,sp,528
     66e:	2804                	fld	fs1,16(s0)
     670:	0801                	addi	a6,a6,0
    int ti[size];
     672:	06a1                	addi	a3,a3,8
     674:	0000                	unimp
     676:	c918                	sw	a4,16(a0)
    int qi_1[size];
     678:	0004                	0x4
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
    int temp[size];
     67e:	a111                	j	a82 <generate_keys+0x16a>
     680:	0006                	c.slli	zero,0x1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     682:	0000                	unimp
     684:	9018                	0x9018
    int ri_2[size]; // MX-ring poly, a
     686:	0002                	c.slli64	zero
     688:	0400                	addi	s0,sp,512
    int temp[size];
     68a:	5d07012b          	0x5d07012b
    for (i = 0; i < size; ++i) {
     68e:	0000                	unimp
        ti_2[i] = 0;
     690:	0400                	addi	s0,sp,512
     692:	9b18                	0x9b18
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
    for (i = 0; i < size; ++i) {
     698:	012c                	addi	a1,sp,136
     69a:	0006a70b          	0x6a70b
    ti_1[0] = 1;
     69e:	0800                	addi	s0,sp,16
     6a0:	1000                	addi	s0,sp,32
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6a2:	6804                	flw	fs1,16(s0)
     6a4:	0006                	c.slli	zero,0x1
     6a6:	1000                	addi	s0,sp,32
     6a8:	5b04                	lw	s1,48(a4)
        for (i = 0; i < N + 1; ++i) {
     6aa:	0006                	c.slli	zero,0x1
     6ac:	1a00                	addi	s0,sp,304
        ri_2[i] = polyR[i];
     6ae:	00000017          	auipc	zero,0x0
     6b2:	040e                	slli	s0,s0,0x3
     6b4:	0144                	addi	s1,sp,132
     6b6:	e608                	fsw	fa0,8(a2)
     6b8:	0006                	c.slli	zero,0x1
    for (i = 0; i < size; ++i) {
     6ba:	1800                	addi	s0,sp,48
        ri_2[i] = polyR[i];
     6bc:	052a                	slli	a0,a0,0xa
     6be:	0000                	unimp
        ri_1[i] = polyf[i];
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
     6c4:	06e6                	slli	a3,a3,0x19
     6c6:	0000                	unimp
     6c8:	1800                	addi	s0,sp,48
     6ca:	0524                	addi	s1,sp,648
     6cc:	0000                	unimp
     6ce:	4604                	lw	s1,8(a2)
        ti_2[i] = 0;
     6d0:	1201                	addi	tp,tp,-32
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
     6d6:	1806                	slli	a6,a6,0x21
        ti_1[i] = 0;
     6d8:	0000058b          	0x58b
     6dc:	4704                	lw	s1,8(a4)
     6de:	1201                	addi	tp,tp,-32
    for (i = 0; i < size; ++i) {
     6e0:	003a                	c.slli	zero,0xe
     6e2:	0000                	unimp
                ri_2[i] = ri_2[i] + mod;
     6e4:	000c                	0xc
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
            while (ri_2[i] < 0) {
     6e8:	0000                	unimp
     6ea:	f600                	fsw	fs0,40(a2)
     6ec:	0006                	c.slli	zero,0x1
            ri_2[i] = ri_2[i] % mod;
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
        for (i = 0; i < N + 1; ++i) {
     6f2:	0000                	unimp
            ri_2[i] = ri_2[i] % mod;
     6f4:	0002                	c.slli64	zero
        for (i = 0; i < N + 1; ++i) {
     6f6:	8504d01b          	0x8504d01b
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
     700:	1f18                	addi	a4,sp,944
     702:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     704:	0400                	addi	s0,sp,512
     706:	69180287          	0x69180287
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     70a:	0000                	unimp
     70c:	0000                	unimp
     70e:	6718                	flw	fa4,8(a4)
     710:	0005                	c.nop	1
     712:	0400                	addi	s0,sp,512
     714:	0288                	addi	a0,sp,320
        for (i = N + 1; i < (2 * N + 2); ++i) {
     716:	bb12                	fsd	ft4,432(sp)
     718:	0005                	c.nop	1
     71a:	0400                	addi	s0,sp,512
     71c:	df18                	sw	a4,56(a4)
     71e:	0002                	c.slli64	zero
     720:	0400                	addi	s0,sp,512
     722:	0289                	addi	t0,t0,2
        for (i = 0; i < N + 1; ++i) {
     724:	0b10                	addi	a2,sp,400
     726:	0008                	0x8
     728:	0800                	addi	s0,sp,16
     72a:	9c18                	0x9c18
     72c:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     72e:	0400                	addi	s0,sp,512
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     736:	2400                	fld	fs0,8(s0)
     738:	ec18                	fsw	fa4,24(s0)
     73a:	0001                	nop
     73c:	0400                	addi	s0,sp,512
     73e:	5d0f028b          	0x5d0f028b
        for (i = 0; i < N + 1; ++i) {
     742:	0000                	unimp
     744:	4800                	lw	s0,16(s0)
     746:	c418                	sw	a4,8(s0)
        for (i = 0; i < N + 1; ++i) {
     748:	0004                	0x4
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     74e:	562c                	lw	a1,104(a2)
     750:	0000                	unimp
     752:	5000                	lw	s0,32(s0)
     754:	b218                	fsd	fa4,32(a2)
     756:	0006                	c.slli	zero,0x1
     758:	0400                	addi	s0,sp,512
     75a:	028d                	addi	t0,t0,3
        for (i = 0; i < N + 1; ++i) {
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
     760:	5800                	lw	s0,48(s0)
        for (i = 0; i < N + 1; ++i) {
     762:	cf18                	sw	a4,24(a4)
     764:	0004                	0x4
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
        for (i = 0; i < N + 1; ++i) {
     76a:	fe16                	fsw	ft5,60(sp)
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
     770:	b718                	fsd	fa4,40(a4)
        for (i = 0; i < N + 1; ++i) {
     772:	0006                	c.slli	zero,0x1
     774:	0400                	addi	s0,sp,512
     776:	fe16028f          	0xfe16028f
        controlR = 0;
     77a:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     77c:	7000                	flw	fs0,32(s0)
     77e:	d718                	sw	a4,40(a4)
     780:	0000                	unimp
    while (controlR != 0) {
     782:	0400                	addi	s0,sp,512
        for (j = 0; j < mod; ++j) {
     784:	0290                	addi	a2,sp,320
            if (((ri_2[0] * j) % mod) == 1)
     786:	fe16                	fsw	ft5,60(sp)
        for (j = 0; j < mod; ++j) {
     788:	0000                	unimp
     78a:	7800                	flw	fs0,48(s0)
     78c:	5c18                	lw	a4,56(s0)
     78e:	0006                	c.slli	zero,0x1
     790:	0400                	addi	s0,sp,512
     792:	0291                	addi	t0,t0,4
        for (i = 0; i < N + 1; ++i) {
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
    }
     798:	8000                	0x8000
     79a:	d318                	sw	a4,32(a4)
     79c:	0002                	c.slli64	zero
     79e:	0400                	addi	s0,sp,512
     7a0:	0292                	slli	t0,t0,0x4
     7a2:	2b10                	fld	fa2,16(a4)
     7a4:	0008                	0x8
     7a6:	8800                	0x8800
     7a8:	9d18                	0x9d18
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
     7ae:	5d0f0293          	addi	t0,t5,1488
     7b2:	0000                	unimp
     7b4:	a000                	fsd	fs0,0(s0)
     7b6:	a518                	fsd	fa4,8(a0)
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
     7bc:	0294                	addi	a3,sp,320
     7be:	fe16                	fsw	ft5,60(sp)
     7c0:	0000                	unimp
                ri_1[i] = ri_1[i] + mod;
     7c2:	a400                	fsd	fs0,8(s0)
     7c4:	c818                	sw	a4,16(s0)
            while (ri_1[i] < 0) {
     7c6:	0000                	unimp
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
            ri_1[i] = ri_1[i] % mod;
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7d0:	ac00                	fsd	fs0,24(s0)
     7d2:	9418                	0x9418
            ri_1[i] = ri_1[i] % mod;
     7d4:	0001                	nop
     7d6:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     7d8:	0296                	slli	t0,t0,0x5
            ri[i - (N + 1)] = res[i];
     7da:	fe16                	fsw	ft5,60(sp)
     7dc:	0000                	unimp
     7de:	b400                	fsd	fs0,40(s0)
     7e0:	3a18                	fld	fa4,48(a2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7e2:	0000                	unimp
     7e4:	0400                	addi	s0,sp,512
            ri[i - (N + 1)] = res[i];
     7e6:	fe160297          	auipc	t0,0xfe160
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7ea:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	4918                	lw	a4,16(a0)
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
        for (i = 0; i < N + 1; ++i) {
     7fc:	6f18                	flw	fa4,24(a4)
            temp[i] = ri_2[i] - ri[i];
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     802:	0299                	addi	t0,t0,6
     804:	5d08                	lw	a0,56(a0)
                temp[i] = temp[i] + mod;
     806:	0000                	unimp
     808:	cc00                	sw	s0,24(s0)
            while (temp[i] < 0) {
     80a:	0900                	addi	s0,sp,144
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
            temp[i] = temp[i] % mod;
     810:	0000081b          	0x81b
        for (i = 0; i < N + 1; ++i) {
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
            temp[i] = temp[i] % mod;
     818:	1900                	addi	s0,sp,176
     81a:	0900                	addi	s0,sp,144
        for (i = 0; i < N + 1; ++i) {
     81c:	05c1                	addi	a1,a1,16
            qi_1[i] = res1[i];
     81e:	0000                	unimp
     820:	0000082b          	0x82b
     824:	690a                	flw	fs2,128(sp)
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
        for (i = 0; i < N + 1; ++i) {
     82a:	0900                	addi	s0,sp,144
            qi_1[i] = res1[i];
     82c:	05c1                	addi	a1,a1,16
        for (i = 0; i < N + 1; ++i) {
     82e:	0000                	unimp
                qi_1[i] = qi_1[i] + mod;
     830:	0000083b          	0x83b
            while (qi_1[i] < 0) {
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
     838:	1700                	addi	s0,sp,928
            qi_1[i] = qi_1[i] % mod;
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
        for (i = 0; i < N + 1; ++i) {
     83e:	029e                	slli	t0,t0,0x7
     840:	00086207          	0x86207
            qi_1[i] = qi_1[i] % mod;
     844:	1800                	addi	s0,sp,48
        for (i = 0; i < N + 1; ++i) {
     846:	0391                	addi	t2,t2,4
            temp[i] = res2[i];
     848:	0000                	unimp
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
     84e:	0862                	slli	a6,a6,0x18
     850:	0000                	unimp
     852:	1800                	addi	s0,sp,48
        for (i = 0; i < N + 1; ++i) {
     854:	036a                	slli	t1,t1,0x1a
            temp[i] = res2[i];
     856:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     858:	a204                	fsd	fs1,0(a2)
                temp[i] = temp[i] + mod;
     85a:	1802                	slli	a6,a6,0x20
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
            while (temp[i] < 0) {
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0xec>
            temp[i] = temp[i] % mod;
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
        for (i = 0; i < N + 1; ++i) {
     86c:	0069                	c.nop	26
     86e:	0000                	unimp
            temp[i] = temp[i] % mod;
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
        for (i = 0; i < N + 1; ++i) {
     874:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     876:	8200                	0x8200
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
     888:	000008a7          	0x8a7
        for (i = 0; i < N + 1; ++i) {
     88c:	191d                	addi	s2,s2,-25
            ti[i] = ti_2[i] - temp[i];
     88e:	0005                	c.nop	1
     890:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     892:	029a                	slli	t0,t0,0x6
     894:	0006f60b          	0x6f60b
                ti[i] = ti[i] + mod;
     898:	1d00                	addi	s0,sp,688
            while (ti[i] < 0) {
     89a:	067c                	addi	a5,sp,780
     89c:	0000                	unimp
     89e:	a304                	fsd	fs1,0(a4)
            ti[i] = ti[i] % mod;
     8a0:	0b02                	c.slli64	s6
     8a2:	0000083b          	0x83b
        for (i = 0; i < N + 1; ++i) {
     8a6:	0900                	addi	s0,sp,144
            ti[i] = ti[i] % mod;
     8a8:	05c1                	addi	a1,a1,16
     8aa:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8ac:	000008b7          	lui	a7,0x0
            ri_2[i] = ri_1[i];
     8b0:	690a                	flw	fs2,128(sp)
     8b2:	0000                	unimp
     8b4:	1800                	addi	s0,sp,48
     8b6:	1e00                	addi	s0,sp,816
        for (i = 0; i < N + 1; ++i) {
     8b8:	000000a3          	sb	zero,1(zero) # 1 <__DYNAMIC+0x1>
            ri_1[i] = ri[i];
     8bc:	0410                	addi	a2,sp,512
     8be:	000008b7          	lui	a7,0x0
            ti_2[i] = ti_1[i];
     8c2:	cd1f 0008 1500      	0x15000008cd1f
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
            ri_1[i] = ri[i];
     8cc:	1000                	addi	s0,sp,32
            ti_2[i] = ti_1[i];
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
     8d2:	1000                	addi	s0,sp,32
     8d4:	8a04                	0x8a04
            controlR += ri[i];
     8d6:	0001                	nop
            ti_2[i] = ti_1[i];
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
            ti_1[i] = ti[i];
     8dc:	0000                	unimp
     8de:	5d15                	li	s10,-27
     8e0:	0000                	unimp
     8e2:	0000                	unimp
            qi_1[i] = 0;
     8e4:	0410                	addi	a2,sp,512
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
     8ea:	0410                	addi	a2,sp,512
        for (i = 0; i < N + 1; ++i) {
     8ec:	08d9                	addi	a7,a7,22
     8ee:	0000                	unimp
            if (((ri_2[0] * j) % mod) == 1)
     8f0:	5b09                	li	s6,-30
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
     8fe:	0002                	c.slli64	zero
        for (j = 0; j < mod; ++j) {
     900:	b120                	fsd	fs0,96(a0)
     902:	0005                	c.nop	1
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     904:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     906:	67170333          	0x67170333
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
     90e:	05aa                	slli	a1,a1,0xa
     910:	0000                	unimp
     912:	3404                	fld	fs1,40(s0)
     914:	046d1d03          	lh	s10,70(s10)
int* generate_keys(int N, int p, int q){
     918:	0000                	unimp
     91a:	c121                	beqz	a0,95a <generate_keys+0x42>
     91c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
     924:	0000                	unimp
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
     930:	0069                	c.nop	26
     932:	0000                	unimp
     934:	0095                	addi	ra,ra,5
     936:	6e22                	flw	ft8,8(sp)
     938:	0001                	nop
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
     944:	1264                	addi	s1,sp,300
     946:	0000                	unimp
     948:	3522                	fld	fa0,40(sp)
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     94e:	09260c07          	0x9260c07
resultkon[0] = 0xAAAAAAA0;
     952:	0000                	unimp
     954:	0305                	addi	t1,t1,1
     956:	14bc                	addi	a5,sp,616
int* generate_keys(int N, int p, int q){
     958:	0000                	unimp
     95a:	ed22                	fsw	fs0,152(sp)
     95c:	0002                	c.slli64	zero
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     95e:	0100                	addi	s0,sp,128
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
resultkon[0] = 0xAAAAAAA0;
     964:	0000                	unimp
     966:	0305                	addi	t1,t1,1
     968:	1714                	addi	a3,sp,928
     96a:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96c:	5d09                	li	s10,-30
     96e:	0000                	unimp
resultkon[0] = 0xAAAAAAA0;
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     974:	0a00                	addi	s0,sp,272
     976:	0069                	c.nop	26
     978:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97a:	52220063          	beq	tp,sp,e9a <memcpy+0x48>
     97e:	0004                	0x4
     980:	0100                	addi	s0,sp,128
     982:	0c09                	addi	s8,s8,2
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
     98a:	196c                	addi	a1,sp,188
     98c:	0000                	unimp
     98e:	5d09                	li	s10,-30
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00000097          	auipc	ra,0x0
     9a4:	0a01                	addi	s4,s4,0
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	001afc03          	0x1afc03
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
     9c6:	2224                	fld	fs1,64(a2)
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	1260                	addi	s0,sp,300
     9d6:	0000                	unimp
     9d8:	ca25                	beqz	a2,a48 <generate_keys+0x130>
     9da:	0006                	c.slli	zero,0x1
     9dc:	0100                	addi	s0,sp,128
     9de:	0255                	addi	tp,tp,21
     9e0:	5d05                	li	s10,-31
     9e2:	0000                	unimp
     9e4:	d800                	sw	s0,48(s0)
     9e6:	f800000f          	0xf800000f
     9ea:	0000                	unimp
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
    int polyR[N+1];
     9f0:	2600000b          	0x2600000b
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f4:	03dd                	addi	t2,t2,23
    int polyR[N+1];
     9f6:	0000                	unimp
     9f8:	5701                	li	a4,-32
     9fa:	0a02                	c.slli64	s4
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0xfa>
     a00:	0000                	unimp
     a02:	0000                	unimp
    polyR[N] = 1;
     a04:	8226                	mv	tp,s1
     a06:	0000                	unimp
     a08:	0100                	addi	s0,sp,128
     a0a:	0258                	addi	a4,sp,260
     a0c:	630a                	flw	ft6,128(sp)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	030a                	slli	t1,t1,0x2
     a18:	0000                	unimp
     a1a:	5901                	li	s2,-32
     a1c:	0a02                	c.slli64	s4
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0x11c>
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	025a                	slli	tp,tp,0x16
     a2c:	5d09                	li	s10,-30
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
     a36:	5d09025b          	0x5d09025b
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
     a42:	025c                	addi	a5,sp,260
     a44:	5d09                	li	s10,-30
     a46:	0000                	unimp
     a48:	6500                	flw	fs0,8(a0)
     a4a:	9828                	0x9828
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     a50:	025e                	slli	tp,tp,0x17
     a52:	6909                	lui	s2,0x2
     a54:	0300000b          	0x300000b
     a58:	dc91                	beqz	s1,974 <generate_keys+0x5c>
     a5a:	055c2677          	0x55c2677
     a5e:	0000                	unimp
     a60:	5f01                	li	t5,-32
     a62:	0902                	c.slli64	s2
     a64:	0b79                	addi	s6,s6,30
     a66:	0000                	unimp
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
     a6c:	ae26                	fsd	fs1,280(sp)
     a6e:	0000                	unimp
     a70:	0100                	addi	s0,sp,128
    polyR[0] = -1;
     a72:	0260                	addi	s0,sp,268
     a74:	8b09                	andi	a4,a4,2
    for(i = 1; i < N; ++i){
     a76:	b100000b          	0xb100000b
     a7a:	0000                	unimp
     a7c:	2900                	fld	fs0,16(a0)
    for (i = N; i < 55; ++i ){
     a7e:	000000bb          	0xbb
     a82:	6101                	0x6101
     a84:	0902                	c.slli64	s2
    for(i = 0; i < N; ++i){
     a86:	0b9d                	addi	s7,s7,7
        random_keys[i] = f[i];
     a88:	0000                	unimp
     a8a:	7d26                	flw	fs10,104(sp)
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     a90:	0262                	slli	tp,tp,0x18
     a92:	af09                	j	11a4 <__DTOR_END__+0xc4>
     a94:	1200000b          	0x1200000b
    for(i = N; i < (2*N); ++i){
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
     a9c:	023c                	addi	a5,sp,264
     a9e:	0000                	unimp
        random_keys[i] = g[i-N];
     aa0:	6301                	0x6301
     aa2:	0902                	c.slli64	s2
     aa4:	0bc1                	addi	s7,s7,16
     aa6:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     aa8:	fc26                	fsw	fs1,56(sp)
     aaa:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    for(i = (2*N); i < (3*N); ++i){
     aae:	0264                	addi	s1,sp,268
     ab0:	d309                	beqz	a4,9b2 <generate_keys+0x9a>
    fp = ext_euclid(polyR, f, (N+1), p);
     ab2:	6500000b          	0x6500000b
     ab6:	0001                	nop
     ab8:	2a00                	fld	fs0,16(a2)
     aba:	0069                	c.nop	26
     abc:	6501                	0x6501
    for(i = (2*N); i < (3*N); ++i){
     abe:	0902                	c.slli64	s2
        random_keys[i] = fp[i-(2*N)];
     ac0:	005d                	c.nop	23
     ac2:	0000                	unimp
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     ac8:	000ff42b          	0xff42b
    fq = ext_euclid(polyR, f, (N+1), q);
     acc:	1e00                	addi	s0,sp,816
     ace:	ec000017          	auipc	zero,0xec000
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
     ad6:	5a01                	li	s4,-32
    for(i = (3*N); i < (4*N); ++i){
     ad8:	77dc9103          	lh	sp,1917(s9)
     adc:	012c                	addi	a1,sp,136
     ade:	a003055b          	0xa003055b
        random_keys[i] = fq[i-(3*N)];
     ae2:	0011                	c.nop	4
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
    for(i = (3*N); i < (4*N); ++i){
     ae8:	0802                	c.slli64	a6
     aea:	00c0                	addi	s0,sp,68
    fg = polymult2(fq, N, g, N, 0);
     aec:	0010002b          	0x10002b
     af0:	9d00                	0x9d00
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
    for(i = 0; i < (2*N-1); ++i){
     afa:	5a01                	li	s4,-32
     afc:	0802                	c.slli64	a6
     afe:	2c35                	jal	d3a <ntru_deceypt+0x4a>
     b00:	5b01                	li	s6,-32
     b02:	3301                	jal	802 <ext_euclid+0x1ce>
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
     b08:	6508                	flw	fa0,8(a0)
     b0a:	2b00                	fld	fs0,16(a4)
    for(i = (4*N); i < (5*N); ++i){
     b0c:	1070                	addi	a2,sp,44
     b0e:	0000                	unimp
     b10:	0d6a                	slli	s10,s10,0x1a
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
    for(i = (4*N); i < (5*N); ++i){
     b1e:	012c                	addi	a1,sp,136
     b20:	6508025b          	0x6508025b
    for(i = (5*N); i < (6*N+1); ++i){
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
        random_keys[i] = polyR[i-(5*N)];
     b28:	dc91                	beqz	s1,a44 <generate_keys+0x12c>
     b2a:	5e012c77          	0x5e012c77
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x1b5>
    for(i = (5*N); i < (6*N+1); ++i){
     b32:	2d00                	fld	fs0,24(a0)
     b34:	1086                	slli	ra,ra,0x21
     b36:	0000                	unimp
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
resultkon[0] = 0xAAAAAAA1;
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
     b40:	3508                	fld	fa0,40(a0)
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
}
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <reset_handler+0x24>
     b4e:	5d01                	li	s10,-32
     b50:	7af09103          	lh	sp,1967(ra) # 114f <__DTOR_END__+0x6f>
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
     b58:	0078                	addi	a4,sp,12
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
     b60:	007e                	c.slli	zero,0x1f
     b62:	1000                	addi	s0,sp,32
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
     b68:	0900                	addi	s0,sp,144
     b6a:	005d                	c.nop	23
     b6c:	0000                	unimp
     b6e:	0b79                	addi	s6,s6,30
     b70:	0000                	unimp
     b72:	690a                	flw	fs2,128(sp)
     b74:	0000                	unimp
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
     b7a:	005d                	c.nop	23
     b7c:	0000                	unimp
     b7e:	00000b8b          	0xb8b
     b82:	692e                	flw	fs2,200(sp)
     b84:	0000                	unimp
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
        polyR[i] = 0;
     b8e:	0000                	unimp
     b90:	0b9d                	addi	s7,s7,7
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
     b96:	0000                	unimp
    for(i = 1; i < N; ++i){
     b98:	0200                	addi	s0,sp,256
     b9a:	3408                	fld	fa0,40(s0)
        f[i] = 0;
     b9c:	0900                	addi	s0,sp,144
     b9e:	005d                	c.nop	23
     ba0:	0000                	unimp
     ba2:	00000baf          	0xbaf
     ba6:	692e                	flw	fs2,200(sp)
     ba8:	0000                	unimp
        g[i] = 0;
     baa:	0200                	addi	s0,sp,256
     bac:	3408                	fld	fa0,40(s0)
     bae:	0900                	addi	s0,sp,144
     bb0:	005d                	c.nop	23
     bb2:	0000                	unimp
    for (i = N; i < 55; ++i ){
     bb4:	0bc1                	addi	s7,s7,16
     bb6:	0000                	unimp
        random_keys[i] = f[i];
     bb8:	692e                	flw	fs2,200(sp)
     bba:	0000                	unimp
     bbc:	0200                	addi	s0,sp,256
     bbe:	3408                	fld	fa0,40(s0)
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
     bca:	692e                	flw	fs2,200(sp)
    for(i = 0; i < N; ++i){
     bcc:	0000                	unimp
        random_keys[i] = g[i-N];
     bce:	0200                	addi	s0,sp,256
     bd0:	3408                	fld	fa0,40(s0)
     bd2:	0900                	addi	s0,sp,144
     bd4:	005d                	c.nop	23
     bd6:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     bd8:	0be5                	addi	s7,s7,25
     bda:	0000                	unimp
     bdc:	692e                	flw	fs2,200(sp)
        random_keys[i] = fp[i-(2*N)];
     bde:	0000                	unimp
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
     be4:	2f00                	fld	fs0,24(a4)
     be6:	000001bb          	0x1bb
    for(i = (2*N); i < (3*N); ++i){
     bea:	2801                	jal	bfa <generate_keys+0x2e2>
     bec:	0602                	c.slli64	a2
        random_keys[i] = fq[i-(3*N)];
     bee:	00000b63          	beqz	zero,c04 <generate_keys+0x2ec>
     bf2:	0cf0                	addi	a2,sp,604
     bf4:	0000                	unimp
     bf6:	00ec                	addi	a1,sp,76
     bf8:	0000                	unimp
     bfa:	9c01                	0x9c01
    for(i = (3*N); i < (4*N); ++i){
     bfc:	0d6a                	slli	s10,s10,0x1a
        random_keys[i] = fq[i-(3*N)];
     bfe:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     c00:	4e30                	lw	a2,88(a2)
        fg[i] = fg[i]*p;
     c02:	0100                	addi	s0,sp,128
    for(i = 0; i < (2*N-1); ++i){
     c04:	0228                	addi	a0,sp,264
     c06:	00005d17          	auipc	s10,0x5
        fg[i] = fg[i]*p;
     c0a:	d900                	sw	s0,48(a0)
     c0c:	0001                	nop
     c0e:	3000                	fld	fs0,32(s0)
    for(i = 0; i < (2*N-1); ++i){
     c10:	0070                	addi	a2,sp,12
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c12:	2801                	jal	c22 <generate_keys+0x30a>
     c14:	1e02                	slli	t3,t3,0x20
     c16:	005d                	c.nop	23
     c18:	0000                	unimp
     c1a:	021d                	addi	tp,tp,7
     c1c:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
        random_keys[i] = polyR[i-(5*N)];
     c22:	0228                	addi	a0,sp,264
     c24:	5d25                	li	s10,-23
     c26:	0000                	unimp
     c28:	5400                	lw	s0,40(s0)
     c2a:	0002                	c.slli64	zero
     c2c:	3100                	fld	fs0,32(a0)
     c2e:	00ae                	slli	ra,ra,0xb
    for(i = (5*N); i < (6*N+1); ++i){
     c30:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     c32:	2801                	jal	c42 <ntru_encyrpt+0xc>
    for(i = (5*N); i < (6*N+1); ++i){
     c34:	2d02                	fld	fs10,0(sp)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c36:	00000b63          	beqz	zero,c4c <ntru_encyrpt+0x16>
resultkon[0] = 0xBBBBBBB0;
     c3a:	0000028b          	0x28b
     c3e:	7d31                	lui	s10,0xfffec
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c40:	0005                	c.nop	1
     c42:	0100                	addi	s0,sp,128
     c44:	0228                	addi	a0,sp,264
     c46:	6340                	flw	fs0,4(a4)
     c48:	b700000b          	0xb700000b
     c4c:	0002                	c.slli64	zero
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c4e:	3100                	fld	fs0,32(a0)
     c50:	03dd                	addi	t2,t2,23
     c52:	0000                	unimp
     c54:	2801                	jal	c64 <ntru_encyrpt+0x2e>
     c56:	5402                	lw	s0,32(sp)
     c58:	00000b63          	beqz	zero,c6e <ntru_encyrpt+0x38>
resultkon[0] = 0xBBBBBBB0;
     c5c:	02ee                	slli	t0,t0,0x1b
     c5e:	0000                	unimp
     c60:	8431                	srai	s0,s0,0xc
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c62:	0006                	c.slli	zero,0x1
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c64:	0100                	addi	s0,sp,128
     c66:	0228                	addi	a0,sp,264
     c68:	6366                	flw	ft6,88(sp)
     c6a:	0f00000b          	0xf00000b
resultkon[0] = 0xBBBBBBB0;
     c6e:	26000003          	lb	zero,608(zero) # 260 <polymult+0x1d4>
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c72:	000002a7          	0x2a7
    temp = polymult(public_key,N,random_val,48,q,0);
     c76:	2a01                	jal	d86 <ntru_deceypt+0x96>
     c78:	0a02                	c.slli64	s4
     c7a:	00000b63          	beqz	zero,c90 <ntru_encyrpt+0x5a>
     c7e:	0346                	slli	t1,t1,0x11
     c80:	0000                	unimp
     c82:	612a                	flw	ft2,136(sp)
     c84:	0100                	addi	s0,sp,128
     c86:	630a022b          	0x630a022b
    for(i = 0; i < 48; ++i){
     c8a:	5900000b          	0x5900000b
        temp[i] = temp[i] + message[i];
     c8e:	2a000003          	lb	zero,672(zero) # 2a0 <polymult2+0x2e>
     c92:	3261                	jal	61a <polydiv+0x238>
     c94:	0100                	addi	s0,sp,128
     c96:	022c                	addi	a1,sp,264
     c98:	630a                	flw	ft6,128(sp)
     c9a:	6c00000b          	0x6c00000b
    for(i = 0; i < 48; ++i){
     c9e:	2a000003          	lb	zero,672(zero) # 2a0 <polymult2+0x2e>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     ca2:	2d010063          	beq	sp,a6,f62 <memset+0x32>
     ca6:	0a02                	c.slli64	s4
     ca8:	00000b63          	beqz	zero,cbe <ntru_encyrpt+0x88>
     cac:	0395                	addi	t2,t2,5
     cae:	0000                	unimp
     cb0:	632a                	flw	ft6,136(sp)
     cb2:	0032                	c.slli	zero,0xc
    for(i = (2*N); i < (3*N); ++i){
     cb4:	2e01                	jal	fc4 <memset+0x94>
     cb6:	0a02                	c.slli64	s4
     cb8:	00000b63          	beqz	zero,cce <ntru_encyrpt+0x98>
     cbc:	03a8                	addi	a0,sp,456
     cbe:	0000                	unimp
}
     cc0:	692a                	flw	fs2,136(sp)
     cc2:	0100                	addi	s0,sp,128
resultkon[0] = 0xBBBBBBB1;
     cc4:	5d09022f          	0x5d09022f
     cc8:	0000                	unimp
     cca:	c600                	sw	s0,8(a2)
     ccc:	2b000003          	lb	zero,688(zero) # 2b0 <polymult2+0x3e>
}
     cd0:	0d3c                	addi	a5,sp,664
     cd2:	0000                	unimp
     cd4:	14c5                	addi	s1,s1,-15
     cd6:	0000                	unimp
     cd8:	0cfc                	addi	a5,sp,604
     cda:	0000                	unimp
     cdc:	012c                	addi	a1,sp,136
        CT[i-(2*N)] = CT[i];
     cde:	035a                	slli	t1,t1,0x16
     ce0:	2c5d01f3          	0x2c5d01f3
     ce4:	5b01                	li	s6,-32
    for(i = (2*N); i < (3*N); ++i){
     ce6:	7802                	flw	fa6,32(sp)
     ce8:	2c00                	fld	fs0,24(s0)
        CT[i-(2*N)] = CT[i];
     cea:	5c01                	li	s8,-32
     cec:	5f01f303          	0x5f01f303
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cf0:	012c                	addi	a1,sp,136
     cf2:	025d                	addi	tp,tp,23
     cf4:	0078                	addi	a4,sp,12
     cf6:	012c                	addi	a1,sp,136
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf8:	015e                	slli	sp,sp,0x17
     cfa:	0030                	addi	a2,sp,8
     cfc:	000d4c2b          	0xd4c2b
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d00:	1000                	addi	s0,sp,32
    resultkon[0] = 0xCCCCCCC0;
     d02:	22000013          	li	zero,544
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d06:	000d                	c.nop	3
    resultkon[0] = 0xCCCCCCC0;
     d08:	2c00                	fld	fs0,24(s0)
     d0a:	5b01                	li	s6,-32
     d0c:	7902                	flw	fs2,32(sp)
     d0e:	2c00                	fld	fs0,24(s0)
     d10:	5c01                	li	s8,-32
     d12:	8502                	jr	a0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d14:	2c00                	fld	fs0,24(s0)
     d16:	5d01                	li	s10,-32
     d18:	8702                	jr	a4
     d1a:	2c00                	fld	fs0,24(s0)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d1c:	5e01                	li	t3,-32
    resultkon[0] = 0xCCCCCCC0;
     d1e:	8202                	jr	tp
     d20:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d22:	000d702b          	0xd702b
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d26:	c500                	sw	s0,8(a0)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d28:	0014                	0x14
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d2a:	4700                	lw	s0,8(a4)
     d2c:	000d                	c.nop	3
     d2e:	2c00                	fld	fs0,24(s0)
     d30:	5a01                	li	s4,-32
     d32:	8802                	jr	a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d34:	2c00                	fld	fs0,24(s0)
     d36:	5b01                	li	s6,-32
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d38:	7802                	flw	fa6,32(sp)
     d3a:	2c00                	fld	fs0,24(s0)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d3c:	5d01                	li	s10,-32
     d3e:	7802                	flw	fa6,32(sp)
     d40:	2c00                	fld	fs0,24(s0)
     d42:	5e01                	li	t3,-32
     d44:	3001                	jal	544 <polydiv+0x162>
     d46:	2d00                	fld	fs0,24(a0)
     d48:	0d7c                	addi	a5,sp,668
     d4a:	0000                	unimp
     d4c:	1310                	addi	a2,sp,416
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4e:	0000                	unimp
     d50:	012c                	addi	a1,sp,136
     d52:	0079025b          	0x79025b
     d56:	012c                	addi	a1,sp,136
        if(a2[i] <= q/2)
     d58:	025c                	addi	a5,sp,260
     d5a:	0085                	addi	ra,ra,1
     d5c:	012c                	addi	a1,sp,136
    for (i = 0; i < N; ++i){
     d5e:	025d                	addi	tp,tp,23
     d60:	012c0087          	0x12c0087
    c = polymult2(secret_key_fp,N,a2,N,0);
     d64:	025e                	slli	tp,tp,0x17
     d66:	0086                	slli	ra,ra,0x1
     d68:	0000                	unimp
     d6a:	0006462f          	0x6462f
     d6e:	0100                	addi	s0,sp,128
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d70:	0205                	addi	tp,tp,1
     d72:	6306                	flw	ft6,64(sp)
     d74:	3600000b          	0x3600000b
     d78:	000c                	0xc
     d7a:	ba00                	fsd	fs0,48(a2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d7c:	0000                	unimp
     d7e:	0100                	addi	s0,sp,128
     d80:	9d9c                	0x9d9c
}
     d82:	000e                	c.slli	zero,0x3
     d84:	3000                	fld	fs0,32(s0)
    resultkon[0] = 0xCCCCCCC1;
     d86:	004e                	c.slli	zero,0x13
     d88:	0501                	addi	a0,a0,0
     d8a:	1702                	slli	a4,a4,0x20
     d8c:	005d                	c.nop	23
     d8e:	0000                	unimp
     d90:	0000044b          	fnmsub.s	fs0,ft0,ft0,ft0,rne
}
     d94:	7130                	flw	fa2,96(a0)
     d96:	0100                	addi	s0,sp,128
     d98:	0205                	addi	tp,tp,1
     d9a:	5d1e                	lw	s10,228(sp)
     d9c:	0000                	unimp
     d9e:	7700                	flw	fs0,40(a4)
     da0:	0004                	0x4
     da2:	3100                	fld	fs0,32(a0)
     da4:	0398                	addi	a4,sp,448
        a2[i-(2*N)] = a2[i];
     da6:	0000                	unimp
     da8:	0501                	addi	a0,a0,0
     daa:	2602                	fld	fa2,0(sp)
     dac:	00000b63          	beqz	zero,dc2 <ntru_deceypt+0xd2>
    for(i = (2*N); i < ((2*N)+N); ++i){
     db0:	04ae                	slli	s1,s1,0xb
        a2[i-(2*N)] = a2[i];
     db2:	0000                	unimp
     db4:	5c31                	li	s8,-20
    for(i = (2*N); i < ((2*N)+N); ++i){
     db6:	0005                	c.nop	1
        if(a2[i] <= q/2)
     db8:	0100                	addi	s0,sp,128
     dba:	0205                	addi	tp,tp,1
     dbc:	6334                	flw	fa3,64(a4)
            a2[i] = (-1)*(q-a2[i]);
     dbe:	da00000b          	0xda00000b
     dc2:	0004                	0x4
    for (i = 0; i < N; ++i){
     dc4:	3100                	fld	fs0,32(a0)
     dc6:	0684                	addi	s1,sp,832
     dc8:	0000                	unimp
        c2[i-(2*N)] = c2[i];
     dca:	0501                	addi	a0,a0,0
     dcc:	4502                	lw	a0,0(sp)
     dce:	00000b63          	beqz	zero,de4 <reset_handler+0x4>
    for(i = (2*N); i < ((2*N)+N); ++i){
     dd2:	0511                	addi	a0,a0,4
     dd4:	0000                	unimp
        c2[i-(2*N)] = c2[i];
     dd6:	9726                	add	a4,a4,s1
     dd8:	0002                	c.slli64	zero
    for(i = (2*N); i < ((2*N)+N); ++i){
     dda:	0100                	addi	s0,sp,128
     ddc:	630a0207          	0x630a0207
     de0:	4800000b          	0x4800000b
     de4:	0005                	c.nop	1
     de6:	3200                	fld	fs0,32(a2)
     de8:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     dec:	0208                	addi	a0,sp,256
     dee:	630a                	flw	ft6,128(sp)
     df0:	0100000b          	0x100000b
     df4:	285a                	fld	fa6,400(sp)
     df6:	035f 0000 0a01      	0xa010000035f
     dfc:	0902                	c.slli64	s2
     dfe:	0b69                	addi	s6,s6,26
     e00:	0000                	unimp
     e02:	7ea09103          	lh	sp,2026(ra)
     e06:	1626                	slli	a2,a2,0x29
     e08:	0002                	c.slli64	zero
     e0a:	0100                	addi	s0,sp,128
     e0c:	630a020b          	0x630a020b
     e10:	5b00000b          	0x5b00000b
     e14:	0005                	c.nop	1
     e16:	2a00                	fld	fs0,16(a2)
     e18:	0069                	c.nop	26
     e1a:	0c01                	addi	s8,s8,0
     e1c:	0902                	c.slli64	s2
     e1e:	005d                	c.nop	23
     e20:	0000                	unimp
     e22:	056e                	slli	a0,a0,0x1b
     e24:	0000                	unimp
     e26:	000c742b          	0xc742b
     e2a:	1e00                	addi	s0,sp,816
     e2c:	49000017          	auipc	zero,0x49000
     e30:	000e                	c.slli	zero,0x3
     e32:	2c00                	fld	fs0,24(s0)
     e34:	5a01                	li	s4,-32
     e36:	7202                	flw	ft4,32(sp)
     e38:	2c00                	fld	fs0,24(s0)
     e3a:	5b01                	li	s6,-32
     e3c:	0305                	addi	t1,t1,1
     e3e:	10e0                	addi	s0,sp,108
     e40:	0000                	unimp
     e42:	012c                	addi	a1,sp,136
     e44:	025c                	addi	a5,sp,260
     e46:	c008                	sw	a0,0(s0)
     e48:	2b00                	fld	fs0,16(a4)
     e4a:	0c86                	slli	s9,s9,0x1
     e4c:	0000                	unimp
     e4e:	15e5                	addi	a1,a1,-7
     e50:	0000                	unimp
     e52:	0e7a                	slli	t3,t3,0x1e
     e54:	0000                	unimp
     e56:	012c                	addi	a1,sp,136
     e58:	025a                	slli	tp,tp,0x16
     e5a:	0084                	addi	s1,sp,64
     e5c:	012c                	addi	a1,sp,136
     e5e:	0078025b          	0x78025b
     e62:	012c                	addi	a1,sp,136
     e64:	025c                	addi	a5,sp,260
     e66:	0072                	c.slli	zero,0x1c
     e68:	012c                	addi	a1,sp,136
     e6a:	025d                	addi	tp,tp,23
     e6c:	3008                	fld	fa0,32(s0)
     e6e:	012c                	addi	a1,sp,136
     e70:	025e                	slli	tp,tp,0x17
     e72:	0082                	c.slli64	ra
     e74:	012c                	addi	a1,sp,136
     e76:	015f 0030 b42d      	0xb42d0030015f
     e7c:	000c                	0xc
     e7e:	1000                	addi	s0,sp,32
     e80:	2c000013          	li	zero,704
     e84:	5b01                	li	s6,-32
     e86:	7902                	flw	fs2,32(sp)
     e88:	2c00                	fld	fs0,24(s0)
     e8a:	5c01                	li	s8,-32
     e8c:	8302                	jr	t1
     e8e:	2c00                	fld	fs0,24(s0)
     e90:	5d01                	li	s10,-32
     e92:	7802                	flw	fa6,32(sp)
     e94:	2c01                	jal	10a4 <main+0xcc>
     e96:	5e01                	li	t3,-32
     e98:	8202                	jr	tp
     e9a:	0000                	unimp
     e9c:	2f00                	fld	fs0,24(a4)
     e9e:	0301                	addi	t1,t1,0
     ea0:	0000                	unimp
     ea2:	ac01                	j	10b2 <main+0xda>
     ea4:	0601                	addi	a2,a2,0
     ea6:	00000b63          	beqz	zero,ebc <memcpy+0x6a>
     eaa:	0918                	addi	a4,sp,144
     eac:	0000                	unimp
     eae:	031e                	slli	t1,t1,0x7
     eb0:	0000                	unimp
     eb2:	9c01                	0x9c01
     eb4:	104d                	c.nop	-13
     eb6:	0000                	unimp
     eb8:	4e30                	lw	a2,88(a2)
     eba:	0100                	addi	s0,sp,128
     ebc:	01ac                	addi	a1,sp,200
     ebe:	5d18                	lw	a4,56(a0)
     ec0:	0000                	unimp
     ec2:	b000                	fsd	fs0,32(s0)
     ec4:	0005                	c.nop	1
     ec6:	3000                	fld	fs0,32(s0)
     ec8:	0070                	addi	a2,sp,12
     eca:	ac01                	j	10da <__CTOR_END__+0x2>
     ecc:	1f01                	addi	t5,t5,-32
     ece:	005d                	c.nop	23
     ed0:	0000                	unimp
     ed2:	0601                	addi	a2,a2,0
     ed4:	0000                	unimp
     ed6:	7130                	flw	fa2,96(a0)
     ed8:	0100                	addi	s0,sp,128
     eda:	01ac                	addi	a1,sp,200
     edc:	5d26                	lw	s10,104(sp)
     ede:	0000                	unimp
     ee0:	3800                	fld	fs0,48(s0)
     ee2:	0006                	c.slli	zero,0x1
     ee4:	3200                	fld	fs0,32(a2)
     ee6:	0066                	c.slli	zero,0x19
     ee8:	af01                	j	15f8 <product2+0x13c>
     eea:	0901                	addi	s2,s2,0
     eec:	104d                	c.nop	-13
     eee:	0000                	unimp
     ef0:	7c889103          	lh	sp,1992(a7)
     ef4:	6732                	flw	fa4,12(sp)
     ef6:	0100                	addi	s0,sp,128
     ef8:	01b0                	addi	a2,sp,200
     efa:	4d09                	li	s10,2
     efc:	0010                	0x10
     efe:	0300                	addi	s0,sp,384
     f00:	e491                	bnez	s1,f0c <memcpy+0xba>
     f02:	2a7d                	jal	10c0 <main+0xe8>
     f04:	7066                	flw	ft0,120(sp)
     f06:	0100                	addi	s0,sp,128
     f08:	01b2                	slli	gp,gp,0xc
     f0a:	630a                	flw	ft6,128(sp)
     f0c:	6f00000b          	0x6f00000b
     f10:	0006                	c.slli	zero,0x1
     f12:	2a00                	fld	fs0,16(a2)
     f14:	7166                	flw	ft2,120(sp)
     f16:	0100                	addi	s0,sp,128
     f18:	630a01b3          	0x630a01b3
     f1c:	8200000b          	0x8200000b
     f20:	0006                	c.slli	zero,0x1
     f22:	2a00                	fld	fs0,16(a2)
     f24:	6766                	flw	fa4,88(sp)
     f26:	0100                	addi	s0,sp,128
     f28:	01b4                	addi	a3,sp,200
     f2a:	630a                	flw	ft6,128(sp)
     f2c:	a000000b          	0xa000000b
     f30:	0006                	c.slli	zero,0x1
     f32:	2a00                	fld	fs0,16(a2)
     f34:	6b70                	flw	fa2,84(a4)
     f36:	0100                	addi	s0,sp,128
     f38:	01b5                	addi	gp,gp,13
     f3a:	630a                	flw	ft6,128(sp)
     f3c:	be00000b          	0xbe00000b
     f40:	0006                	c.slli	zero,0x1
     f42:	2600                	fld	fs0,8(a2)
     f44:	0684                	addi	s1,sp,832
     f46:	0000                	unimp
     f48:	b601                	j	a48 <generate_keys+0x130>
     f4a:	0901                	addi	s2,s2,0
     f4c:	105d                	c.nop	-9
     f4e:	0000                	unimp
     f50:	06dc                	addi	a5,sp,836
     f52:	0000                	unimp
     f54:	692a                	flw	fs2,136(sp)
     f56:	0100                	addi	s0,sp,128
     f58:	5d0901b7          	lui	gp,0x5d090
     f5c:	0000                	unimp
     f5e:	3f00                	fld	fs0,56(a4)
     f60:	26000007          	0x26000007
     f64:	03a9                	addi	t2,t2,10
     f66:	0000                	unimp
     f68:	b801                	j	778 <ext_euclid+0x144>
     f6a:	0a01                	addi	s4,s4,0
     f6c:	00000b63          	beqz	zero,f82 <memset+0x52>
     f70:	0886                	slli	a7,a7,0x1
     f72:	0000                	unimp
     f74:	00006933          	or	s2,zero,zero
     f78:	9e00                	0x9e00
     f7a:	0008                	0x8
     f7c:	2b00                	fld	fs0,16(a4)
     f7e:	0976                	slli	s2,s2,0x1d
     f80:	0000                	unimp
     f82:	1729                	addi	a4,a4,-22
     f84:	0000                	unimp
     f86:	0f9d                	addi	t6,t6,7
     f88:	0000                	unimp
     f8a:	012c                	addi	a1,sp,136
     f8c:	035a                	slli	t1,t1,0x16
     f8e:	9478                	0x9478
     f90:	2c7c                	fld	fa5,216(s0)
     f92:	5b01                	li	s6,-32
     f94:	3001                	jal	794 <ext_euclid+0x160>
     f96:	012c                	addi	a1,sp,136
     f98:	025c                	addi	a5,sp,260
     f9a:	d008                	sw	a0,32(s0)
     f9c:	2b00                	fld	fs0,16(a4)
     f9e:	09f6                	slli	s3,s3,0x1d
     fa0:	0000                	unimp
     fa2:	1729                	addi	a4,a4,-22
     fa4:	0000                	unimp
     fa6:	0fbd                	addi	t6,t6,15
     fa8:	0000                	unimp
     faa:	012c                	addi	a1,sp,136
     fac:	035a                	slli	t1,t1,0x16
     fae:	e878                	fsw	fa4,84(s0)
     fb0:	2c7d                	jal	126e <_bss_start+0xa>
     fb2:	5b01                	li	s6,-32
     fb4:	3001                	jal	7b4 <ext_euclid+0x180>
     fb6:	012c                	addi	a1,sp,136
     fb8:	025c                	addi	a5,sp,260
     fba:	d808                	sw	a0,48(s0)
     fbc:	2b00                	fld	fs0,16(a4)
     fbe:	0abe                	slli	s5,s5,0xf
     fc0:	0000                	unimp
     fc2:	1070                	addi	a2,sp,44
     fc4:	0000                	unimp
     fc6:	0fe4                	addi	s1,sp,988
     fc8:	0000                	unimp
     fca:	012c                	addi	a1,sp,136
     fcc:	025a                	slli	tp,tp,0x16
     fce:	0072                	c.slli	zero,0x1c
     fd0:	012c                	addi	a1,sp,136
     fd2:	8878035b          	0x8878035b
     fd6:	2c7c                	fld	fa5,216(s0)
int main(){
     fd8:	5c01                	li	s8,-32
     fda:	8602                	jr	a2
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fdc:	2c00                	fld	fs0,24(s0)
     fde:	5d01                	li	s10,-32
     fe0:	8802                	jr	a6
     fe2:	0000                	unimp
     fe4:	000ad82b          	0xad82b
     fe8:	7000                	flw	fs0,32(s0)
int main(){
     fea:	0010                	0x10
     fec:	0b00                	addi	s0,sp,400
     fee:	0010                	0x10
     ff0:	2c00                	fld	fs0,24(s0)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     ff2:	5a01                	li	s4,-32
    keys = generate_keys(N, p, q);
     ff4:	7202                	flw	ft4,32(sp)
     ff6:	2c00                	fld	fs0,24(s0)
     ff8:	5b01                	li	s6,-32
     ffa:	7c887803          	0x7c887803
     ffe:	012c                	addi	a1,sp,136
    1000:	025c                	addi	a5,sp,260
    for(i = 0; i < N; ++i){
    1002:	0086                	slli	ra,ra,0x1
    1004:	012c                	addi	a1,sp,136
        secret_key_f[i] = keys[i];
    1006:	025d                	addi	tp,tp,23
    1008:	2b000087          	0x2b000087
    100c:	0af8                	addi	a4,sp,348
    100e:	0000                	unimp
    1010:	14c5                	addi	s1,s1,-15
    for(i = 0; i < N; ++i){
    1012:	0000                	unimp
    1014:	1030                	addi	a2,sp,40
    1016:	0000                	unimp
    for(i = N; i < (2*N); ++i){
    1018:	012c                	addi	a1,sp,136
    101a:	0082025b          	0x82025b
    101e:	012c                	addi	a1,sp,136
    1020:	025c                	addi	a5,sp,260
    1022:	0089                	addi	ra,ra,2
        secret_key_fp[i-(2*N)] = keys[i];
    1024:	012c                	addi	a1,sp,136
    1026:	025d                	addi	tp,tp,23
    1028:	0082                	c.slli64	ra
    102a:	012c                	addi	a1,sp,136
    102c:	015e                	slli	sp,sp,0x17
    for(i = (2*N); i < (3*N); ++i){
    102e:	0030                	addi	a2,sp,8
    1030:	0c2d                	addi	s8,s8,11
    for(i = (3*N); i < (4*N); ++i){
    1032:	1000000b          	0x1000000b
    1036:	2c000013          	li	zero,704
    103a:	5c01                	li	s8,-32
    103c:	7202                	flw	ft4,32(sp)
        public_key[i-(4*N)] = keys[i];
    103e:	2c00                	fld	fs0,24(s0)
    1040:	5d01                	li	s10,-32
    1042:	8602                	jr	a2
    1044:	2c00                	fld	fs0,24(s0)
    1046:	5e01                	li	t3,-32
    for(i = (4*N); i < (5*N); ++i){
    1048:	8702                	jr	a4
    104a:	0000                	unimp
    104c:	0900                	addi	s0,sp,144
    104e:	005d                	c.nop	23
    1050:	0000                	unimp
    1052:	105d                	c.nop	-9
        ring_poly[i-(5*N)] = keys[i];
    1054:	0000                	unimp
    1056:	690a                	flw	fs2,128(sp)
    1058:	0000                	unimp
    105a:	3600                	fld	fs0,40(a2)
    105c:	0900                	addi	s0,sp,144
    for(i = (5*N); i < (6*N+1); ++i){
    105e:	005d                	c.nop	23
    1060:	0000                	unimp
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1062:	1070                	addi	a2,sp,44
    1064:	0000                	unimp
    1066:	6934                	flw	fa3,80(a0)
    1068:	0000                	unimp
    106a:	7400                	flw	fs0,40(s0)
    106c:	0000000f          	fence	unknown,unknown
    1070:	00033e2f          	0x33e2f
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1074:	0100                	addi	s0,sp,128
    1076:	0115                	addi	sp,sp,5
    1078:	6306                	flw	ft6,64(sp)
    107a:	3400000b          	0x3400000b
    107e:	0006                	c.slli	zero,0x1
    1080:	e400                	fsw	fs0,8(s0)
    1082:	0002                	c.slli64	zero
    1084:	0100                	addi	s0,sp,128
            resultkon[0] = 0xDEDEDEDE;
    1086:	8b9c                	0x8b9c
    1088:	0012                	c.slli	zero,0x4
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    108a:	3100                	fld	fs0,32(a0)
    108c:	0684                	addi	s1,sp,832
    108e:	0000                	unimp
    1090:	1501                	addi	a0,a0,-32
    1092:	1601                	addi	a2,a2,-32
            resultkon[0] = 0xDEDEDEDE;
    1094:	00000b63          	beqz	zero,10aa <main+0xd2>
    for(i = 0; i < 32; ++i){
    1098:	08e4                	addi	s1,sp,92
    109a:	0000                	unimp
        if(!(message[i] == Dec_Message[i])){
    109c:	7e31                	lui	t3,0xfffec
    109e:	0001                	nop
    10a0:	0100                	addi	s0,sp,128
    10a2:	0115                	addi	sp,sp,5
    10a4:	6322                	flw	ft6,8(sp)
    10a6:	1e00000b          	0x1e00000b
    10aa:	0009                	c.nop	2
            resultkon[0] = 0xBABABABA;
    10ac:	3100                	fld	fs0,32(a0)
    10ae:	0012                	c.slli	zero,0x4
    10b0:	0000                	unimp
    10b2:	1501                	addi	a0,a0,-32
    10b4:	2d01                	jal	16c4 <product2+0x208>
}
    10b6:	005d                	c.nop	23
    10b8:	0000                	unimp
    10ba:	0958                	addi	a4,sp,148
    10bc:	0000                	unimp
    10be:	6d30                	flw	fa2,88(a0)
    10c0:	0100646f          	jal	s0,70d0 <_stack_len+0x30d0>
    10c4:	0115                	addi	sp,sp,5
            resultkon[0] = 0xDEDEDEDE;
    10c6:	00005d37          	lui	s10,0x5
    for(i = 0; i < 32; ++i){
    10ca:	9c00                	0x9c00
    10cc:	0009                	c.nop	2
    10ce:	2600                	fld	fs0,8(a2)
    10d0:	0280                	addi	s0,sp,320
    10d2:	0000                	unimp
    10d4:	1801                	addi	a6,a6,-32
    10d6:	0a01                	addi	s4,s4,0
    10d8:	00000b63          	beqz	zero,10ee <__DTOR_END__+0xe>
    10dc:	000009d3          	fadd.s	fs3,ft0,ft0,rne
    10e0:	4e2a                	lw	t3,136(sp)
    10e2:	0100                	addi	s0,sp,128
    10e4:	0119                	addi	sp,sp,6
    10e6:	5d09                	li	s10,-30
    10e8:	0000                	unimp
    10ea:	eb00                	fsw	fs0,16(a4)
    10ec:	0009                	c.nop	2
    10ee:	2a00                	fld	fs0,16(a2)
    10f0:	0069                	c.nop	26
    10f2:	1901                	addi	s2,s2,-32
    10f4:	0c01                	addi	s8,s8,0
    10f6:	005d                	c.nop	23
    10f8:	0000                	unimp
    10fa:	0a19                	addi	s4,s4,6
    10fc:	0000                	unimp
    10fe:	6a2a                	flw	fs4,136(sp)
    1100:	0100                	addi	s0,sp,128
    1102:	0119                	addi	sp,sp,6
    1104:	00005d0f          	0x5d0f
    1108:	9200                	0x9200
    110a:	000c                	0xc
    110c:	2600                	fld	fs0,8(a2)
    110e:	0530                	addi	a2,sp,648
    1110:	0000                	unimp
    1112:	1a01                	addi	s4,s4,-32
    1114:	0901                	addi	s2,s2,0
    1116:	0000128b          	0x128b
    111a:	0cb0                	addi	a2,sp,600
    111c:	0000                	unimp
    111e:	9826                	add	a6,a6,s1
    1120:	0005                	c.nop	1
    1122:	0100                	addi	s0,sp,128
    1124:	9e09011b          	0x9e09011b
    1128:	0012                	c.slli	zero,0x4
    112a:	d000                	sw	s0,32(s0)
    112c:	000c                	0xc
    112e:	2a00                	fld	fs0,16(a2)
    1130:	6972                	flw	fs2,28(sp)
    1132:	0100                	addi	s0,sp,128
    1134:	011c                	addi	a5,sp,128
    1136:	b109                	j	d38 <ntru_deceypt+0x48>
    1138:	0012                	c.slli	zero,0x4
    113a:	f000                	fsw	fs0,32(s0)
    113c:	000c                	0xc
    113e:	2600                	fld	fs0,8(a2)
    1140:	044d                	addi	s0,s0,19
    1142:	0000                	unimp
    1144:	1e01                	addi	t3,t3,-32
    1146:	0901                	addi	s2,s2,0
    1148:	12c4                	addi	s1,sp,356
    114a:	0000                	unimp
    114c:	00000d27          	0xd27
    1150:	742a                	flw	fs0,168(sp)
    1152:	0069                	c.nop	26
    1154:	1f01                	addi	t5,t5,-32
    1156:	0901                	addi	s2,s2,0
    1158:	000012d7          	0x12d7
    115c:	00000d77          	0xd77
    1160:	6526                	flw	fa0,72(sp)
    1162:	0004                	0x4
    1164:	0100                	addi	s0,sp,128
    1166:	0120                	addi	s0,sp,136
    1168:	ea09                	bnez	a2,117a <__DTOR_END__+0x9a>
    116a:	0012                	c.slli	zero,0x4
    116c:	b000                	fsd	fs0,32(s0)
    116e:	000d                	c.nop	3
    1170:	2600                	fld	fs0,8(a2)
    1172:	0216                	slli	tp,tp,0x5
    1174:	0000                	unimp
    1176:	2101                	jal	1576 <product2+0xba>
    1178:	0901                	addi	s2,s2,0
    117a:	12fd                	addi	t0,t0,-1
    117c:	0000                	unimp
    117e:	0e00                	addi	s0,sp,784
    1180:	0000                	unimp
    1182:	722a                	flw	ft4,168(sp)
    1184:	7365                	lui	t1,0xffff9
    1186:	0100                	addi	s0,sp,128
    1188:	0122                	slli	sp,sp,0x8
    118a:	630a                	flw	ft6,128(sp)
    118c:	4500000b          	0x4500000b
    1190:	000e                	c.slli	zero,0x3
    1192:	2600                	fld	fs0,8(a2)
    1194:	0145                	addi	sp,sp,17
    1196:	0000                	unimp
    1198:	2301                	jal	1698 <product2+0x1dc>
    119a:	0a01                	addi	s4,s4,0
    119c:	00000b63          	beqz	zero,11b2 <__DTOR_END__+0xd2>
    11a0:	00000e63          	beqz	zero,11bc <__DTOR_END__+0xdc>
    11a4:	4a26                	lw	s4,72(sp)
    11a6:	0001                	nop
    11a8:	0100                	addi	s0,sp,128
    11aa:	0124                	addi	s1,sp,136
    11ac:	630a                	flw	ft6,128(sp)
    11ae:	8100000b          	0x8100000b
    11b2:	000e                	c.slli	zero,0x3
    11b4:	2600                	fld	fs0,8(a2)
    11b6:	03e9                	addi	t2,t2,26
    11b8:	0000                	unimp
    11ba:	2501                	jal	17ba <result+0xa6>
    11bc:	0901                	addi	s2,s2,0
    11be:	005d                	c.nop	23
    11c0:	0000                	unimp
    11c2:	0e9f 0000 6933      	0x693300000e9f
    11c8:	0000                	unimp
    11ca:	e000                	fsw	fs0,0(s0)
    11cc:	000e                	c.slli	zero,0x3
    11ce:	3300                	fld	fs0,32(a4)
    11d0:	0069                	c.nop	26
    11d2:	0000                	unimp
    11d4:	0f0e                	slli	t5,t5,0x3
    11d6:	0000                	unimp
    11d8:	00006933          	or	s2,zero,zero
    11dc:	3c00                	fld	fs0,56(s0)
    11de:	3300000f          	0x3300000f
    11e2:	0069                	c.nop	26
    11e4:	0000                	unimp
    11e6:	0f6a                	slli	t5,t5,0x1a
    11e8:	0000                	unimp
    11ea:	00006933          	or	s2,zero,zero
    11ee:	9800                	0x9800
    11f0:	3300000f          	0x3300000f
    11f4:	0069                	c.nop	26
    11f6:	0000                	unimp
    11f8:	0fc6                	slli	t6,t6,0x11
    11fa:	0000                	unimp
    11fc:	00006933          	or	s2,zero,zero
    1200:	f400                	fsw	fs0,40(s0)
    1202:	2b00000f          	0x2b00000f
    1206:	0716                	slli	a4,a4,0x5
    1208:	0000                	unimp
    120a:	1310                	addi	a2,sp,416
    120c:	0000                	unimp
    120e:	1231                	addi	tp,tp,-20
    1210:	0000                	unimp
    1212:	012c                	addi	a1,sp,136
    1214:	025a                	slli	tp,tp,0x16
    1216:	008a                	slli	ra,ra,0x2
    1218:	012c                	addi	a1,sp,136
    121a:	0082025b          	0x82025b
    121e:	012c                	addi	a1,sp,136
    1220:	025c                	addi	a5,sp,260
    1222:	012c008b          	0x12c008b
    1226:	025d                	addi	tp,tp,23
    1228:	0082                	c.slli64	ra
    122a:	012c                	addi	a1,sp,136
    122c:	025e                	slli	tp,tp,0x17
    122e:	0079                	c.nop	30
    1230:	2b00                	fld	fs0,16(a4)
    1232:	0740                	addi	s0,sp,900
    1234:	0000                	unimp
    1236:	1310                	addi	a2,sp,416
    1238:	0000                	unimp
    123a:	125d                	addi	tp,tp,-9
    123c:	0000                	unimp
    123e:	012c                	addi	a1,sp,136
    1240:	025a                	slli	tp,tp,0x16
    1242:	0072                	c.slli	zero,0x1c
    1244:	012c                	addi	a1,sp,136
    1246:	0082025b          	0x82025b
    124a:	012c                	addi	a1,sp,136
    124c:	025c                	addi	a5,sp,260
    124e:	012c008b          	0x12c008b
    1252:	025d                	addi	tp,tp,23
    1254:	0082                	c.slli64	ra
    1256:	012c                	addi	a1,sp,136
    1258:	025e                	slli	tp,tp,0x17
    125a:	0079                	c.nop	30
    125c:	2d00                	fld	fs0,24(a0)
    125e:	075c                	addi	a5,sp,900
    1260:	0000                	unimp
    1262:	15e5                	addi	a1,a1,-7
    1264:	0000                	unimp
    1266:	012c                	addi	a1,sp,136
    1268:	025a                	slli	tp,tp,0x16
    126a:	0085                	addi	ra,ra,1
    126c:	012c                	addi	a1,sp,136
    126e:	0082025b          	0x82025b
    1272:	012c                	addi	a1,sp,136
    1274:	025c                	addi	a5,sp,260
    1276:	0084                	addi	s1,sp,64
    1278:	012c                	addi	a1,sp,136
    127a:	025d                	addi	tp,tp,23
    127c:	0082                	c.slli64	ra
    127e:	012c                	addi	a1,sp,136
    1280:	025e                	slli	tp,tp,0x17
    1282:	0079                	c.nop	30
    1284:	012c                	addi	a1,sp,136
    1286:	015f 0030 0900      	0x9000030015f
    128c:	005d                	c.nop	23
    128e:	0000                	unimp
    1290:	129e                	slli	t0,t0,0x27
    1292:	0000                	unimp
    1294:	6934                	flw	fa3,80(a0)
    1296:	0000                	unimp
    1298:	c600                	sw	s0,8(a2)
    129a:	0011                	c.nop	4
    129c:	0000                	unimp
    129e:	5d09                	li	s10,-30
    12a0:	0000                	unimp
    12a2:	b100                	fsd	fs0,32(a0)
    12a4:	0012                	c.slli	zero,0x4
    12a6:	3400                	fld	fs0,40(s0)
    12a8:	0069                	c.nop	26
    12aa:	0000                	unimp
    12ac:	000011cf          	fnmadd.s	ft3,ft0,ft0,ft0,rtz
    12b0:	0900                	addi	s0,sp,144
    12b2:	005d                	c.nop	23
    12b4:	0000                	unimp
    12b6:	12c4                	addi	s1,sp,356
    12b8:	0000                	unimp
    12ba:	6934                	flw	fa3,80(a0)
    12bc:	0000                	unimp
    12be:	d800                	sw	s0,48(s0)
    12c0:	0011                	c.nop	4
    12c2:	0000                	unimp
    12c4:	5d09                	li	s10,-30
    12c6:	0000                	unimp
    12c8:	d700                	sw	s0,40(a4)
    12ca:	0012                	c.slli	zero,0x4
    12cc:	3400                	fld	fs0,40(s0)
    12ce:	0069                	c.nop	26
    12d0:	0000                	unimp
    12d2:	11e1                	addi	gp,gp,-8
    12d4:	0000                	unimp
    12d6:	0900                	addi	s0,sp,144
    12d8:	005d                	c.nop	23
    12da:	0000                	unimp
    12dc:	12ea                	slli	t0,t0,0x3a
    12de:	0000                	unimp
    12e0:	6934                	flw	fa3,80(a0)
    12e2:	0000                	unimp
    12e4:	ea00                	fsw	fs0,16(a2)
    12e6:	0011                	c.nop	4
    12e8:	0000                	unimp
    12ea:	5d09                	li	s10,-30
    12ec:	0000                	unimp
    12ee:	fd00                	fsw	fs0,56(a0)
    12f0:	0012                	c.slli	zero,0x4
    12f2:	3400                	fld	fs0,40(s0)
    12f4:	0069                	c.nop	26
    12f6:	0000                	unimp
    12f8:	000011f3          	csrrw	gp,ustatus,zero
    12fc:	0900                	addi	s0,sp,144
    12fe:	005d                	c.nop	23
    1300:	0000                	unimp
    1302:	1310                	addi	a2,sp,416
    1304:	0000                	unimp
    1306:	6934                	flw	fa3,80(a0)
    1308:	0000                	unimp
    130a:	fc00                	fsw	fs0,56(s0)
    130c:	0011                	c.nop	4
    130e:	0000                	unimp
    1310:	7635                	lui	a2,0xfffed
    1312:	0001                	nop
    1314:	0100                	addi	s0,sp,128
    1316:	0691                	addi	a3,a3,4
    1318:	00000b63          	beqz	zero,132e <_bss_start+0xca>
    131c:	03e2                	slli	t2,t2,0x18
    131e:	0000                	unimp
    1320:	0252                	slli	tp,tp,0x14
    1322:	0000                	unimp
    1324:	9c01                	0x9c01
    1326:	1479                	addi	s0,s0,-2
    1328:	0000                	unimp
    132a:	6e36                	flw	ft8,76(sp)
    132c:	6d75                	lui	s10,0x1d
    132e:	0100                	addi	s0,sp,128
    1330:	1391                	addi	t2,t2,-28
    1332:	00000b63          	beqz	zero,1348 <_bss_start+0xe4>
    1336:	1022                	c.slli	zero,0x28
    1338:	0000                	unimp
    133a:	0000fc37          	lui	s8,0xf
    133e:	0100                	addi	s0,sp,128
    1340:	1c91                	addi	s9,s9,-28
    1342:	005d                	c.nop	23
    1344:	0000                	unimp
    1346:	00001043          	fmadd.s	ft0,ft0,ft0,ft0,rtz
    134a:	00066637          	lui	a2,0x66
    134e:	0100                	addi	s0,sp,128
    1350:	2891                	jal	13a4 <_bss_start+0x140>
    1352:	00000b63          	beqz	zero,1368 <_bss_start+0x104>
    1356:	1094                	addi	a3,sp,96
    1358:	0000                	unimp
    135a:	00068a37          	lui	s4,0x68
    135e:	0100                	addi	s0,sp,128
    1360:	3391                	jal	10a4 <main+0xcc>
    1362:	005d                	c.nop	23
    1364:	0000                	unimp
    1366:	10ce                	slli	ra,ra,0x33
    1368:	0000                	unimp
    136a:	6d36                	flw	fs10,76(sp)
    136c:	0100646f          	jal	s0,737c <_stack_len+0x337c>
    1370:	3f91                	jal	12c4 <_bss_start+0x60>
    1372:	005d                	c.nop	23
    1374:	0000                	unimp
    1376:	1105                	addi	sp,sp,-31
    1378:	0000                	unimp
    137a:	7538                	flw	fa4,104(a0)
    137c:	0100                	addi	s0,sp,128
    137e:	0994                	addi	a3,sp,208
    1380:	005d                	c.nop	23
    1382:	0000                	unimp
    1384:	113c                	addi	a5,sp,168
    1386:	0000                	unimp
    1388:	6438                	flw	fa4,72(s0)
    138a:	0100                	addi	s0,sp,128
    138c:	0b94                	addi	a3,sp,464
    138e:	005d                	c.nop	23
    1390:	0000                	unimp
    1392:	1165                	addi	sp,sp,-7
    1394:	0000                	unimp
    1396:	6439                	lui	s0,0xe
    1398:	0032                	c.slli	zero,0xc
    139a:	9401                	srai	s0,s0,0x20
    139c:	5d0d                	li	s10,-29
    139e:	0000                	unimp
    13a0:	3800                	fld	fs0,48(s0)
    13a2:	0069                	c.nop	26
    13a4:	9401                	srai	s0,s0,0x20
    13a6:	5d10                	lw	a2,56(a0)
    13a8:	0000                	unimp
    13aa:	8300                	0x8300
    13ac:	0011                	c.nop	4
    13ae:	3900                	fld	fs0,48(a0)
    13b0:	5f62                	lw	t5,56(sp)
    13b2:	004e                	c.slli	zero,0x13
    13b4:	9401                	srai	s0,s0,0x20
    13b6:	5d12                	lw	s10,36(sp)
    13b8:	0000                	unimp
    13ba:	3800                	fld	fs0,48(s0)
    13bc:	5f72                	lw	t5,60(sp)
    13be:	0064                	addi	s1,sp,12
    13c0:	9401                	srai	s0,s0,0x20
    13c2:	5d16                	lw	s10,100(sp)
    13c4:	0000                	unimp
    13c6:	7700                	flw	fs0,40(a4)
    13c8:	3a000013          	li	zero,928
    13cc:	0270                	addi	a2,sp,268
    13ce:	0000                	unimp
    13d0:	9501                	srai	a0,a0,0x20
    13d2:	630a                	flw	ft6,128(sp)
    13d4:	9500000b          	0x9500000b
    13d8:	38000013          	li	zero,896
    13dc:	0076                	c.slli	zero,0x1d
    13de:	9701                	srai	a4,a4,0x20
    13e0:	7909                	lui	s2,0xfffe2
    13e2:	0014                	0x14
    13e4:	ad00                	fsd	fs0,24(a0)
    13e6:	38000013          	li	zero,896
    13ea:	0071                	c.nop	28
    13ec:	9801                	andi	s0,s0,-32
    13ee:	8c09                	sub	s0,s0,a0
    13f0:	0014                	0x14
    13f2:	cd00                	sw	s0,24(a0)
    13f4:	3a000013          	li	zero,928
    13f8:	016e                	slli	sp,sp,0x1b
    13fa:	0000                	unimp
    13fc:	9901                	andi	a0,a0,-32
    13fe:	630a                	flw	ft6,128(sp)
    1400:	1a00000b          	0x1a00000b
    1404:	0014                	0x14
    1406:	3a00                	fld	fs0,48(a2)
    1408:	0212                	slli	tp,tp,0x4
    140a:	0000                	unimp
    140c:	9a01                	andi	a2,a2,-32
    140e:	9f09                	0x9f09
    1410:	0014                	0x14
    1412:	3800                	fld	fs0,48(s0)
    1414:	0014                	0x14
    1416:	3a00                	fld	fs0,48(a2)
    1418:	0210                	addi	a2,sp,256
    141a:	0000                	unimp
    141c:	9b01                	andi	a4,a4,-32
    141e:	b209                	j	d20 <ntru_deceypt+0x30>
    1420:	0014                	0x14
    1422:	9f00                	0x9f00
    1424:	0014                	0x14
    1426:	3300                	fld	fs0,32(a4)
    1428:	0069                	c.nop	26
    142a:	0000                	unimp
    142c:	000014ef          	jal	s1,242c <_min_stack+0x42c>
    1430:	00006933          	or	s2,zero,zero
    1434:	1d00                	addi	s0,sp,688
    1436:	0015                	c.nop	5
    1438:	3300                	fld	fs0,32(a4)
    143a:	0069                	c.nop	26
    143c:	0000                	unimp
    143e:	0000154b          	fnmsub.s	fa0,ft0,ft0,ft0,rtz
    1442:	00006933          	or	s2,zero,zero
    1446:	7900                	flw	fs0,48(a0)
    1448:	0015                	c.nop	5
    144a:	2d00                	fld	fs0,24(a0)
    144c:	0556                	slli	a0,a0,0x15
    144e:	0000                	unimp
    1450:	15e5                	addi	a1,a1,-7
    1452:	0000                	unimp
    1454:	012c                	addi	a1,sp,136
    1456:	025a                	slli	tp,tp,0x16
    1458:	0072                	c.slli	zero,0x1c
    145a:	012c                	addi	a1,sp,136
    145c:	0083025b          	0x83025b
    1460:	012c                	addi	a1,sp,136
    1462:	025c                	addi	a5,sp,260
    1464:	012c008b          	0x12c008b
    1468:	025d                	addi	tp,tp,23
    146a:	012c0083          	lb	ra,18(s8) # f012 <_stack+0x1012>
    146e:	025e                	slli	tp,tp,0x17
    1470:	0082                	c.slli64	ra
    1472:	012c                	addi	a1,sp,136
    1474:	015f 0030 0900      	0x9000030015f
    147a:	005d                	c.nop	23
    147c:	0000                	unimp
    147e:	148c                	addi	a1,sp,608
    1480:	0000                	unimp
    1482:	6934                	flw	fa3,80(a0)
    1484:	0000                	unimp
    1486:	2700                	fld	fs0,8(a4)
    1488:	0014                	0x14
    148a:	0000                	unimp
    148c:	5d09                	li	s10,-30
    148e:	0000                	unimp
    1490:	9f00                	0x9f00
    1492:	0014                	0x14
    1494:	3400                	fld	fs0,40(s0)
    1496:	0069                	c.nop	26
    1498:	0000                	unimp
    149a:	1430                	addi	a2,sp,552
    149c:	0000                	unimp
    149e:	0900                	addi	s0,sp,144
    14a0:	005d                	c.nop	23
    14a2:	0000                	unimp
    14a4:	14b2                	slli	s1,s1,0x2c
    14a6:	0000                	unimp
    14a8:	6934                	flw	fa3,80(a0)
    14aa:	0000                	unimp
    14ac:	3900                	fld	fs0,48(a0)
    14ae:	0014                	0x14
    14b0:	0000                	unimp
    14b2:	5d09                	li	s10,-30
    14b4:	0000                	unimp
    14b6:	c500                	sw	s0,8(a0)
    14b8:	0014                	0x14
    14ba:	3400                	fld	fs0,40(s0)
    14bc:	0069                	c.nop	26
    14be:	0000                	unimp
    14c0:	1442                	slli	s0,s0,0x30
    14c2:	0000                	unimp
    14c4:	3500                	fld	fs0,40(a0)
    14c6:	002a                	c.slli	zero,0xa
    14c8:	0000                	unimp
    14ca:	5901                	li	s2,-32
    14cc:	6306                	flw	ft6,64(sp)
    14ce:	7200000b          	0x7200000b
    14d2:	0002                	c.slli64	zero
    14d4:	7000                	flw	fs0,32(s0)
    14d6:	0001                	nop
    14d8:	0100                	addi	s0,sp,128
    14da:	a59c                	fsd	fa5,8(a1)
    14dc:	0015                	c.nop	5
    14de:	3600                	fld	fs0,40(a2)
    14e0:	0061                	c.nop	24
    14e2:	5901                	li	s2,-32
    14e4:	6315                	lui	t1,0x5
    14e6:	ce00000b          	0xce00000b
    14ea:	0015                	c.nop	5
    14ec:	3700                	fld	fs0,40(a4)
    14ee:	06d9                	addi	a3,a3,22
    14f0:	0000                	unimp
    14f2:	5901                	li	s2,-32
    14f4:	5d1c                	lw	a5,56(a0)
    14f6:	0000                	unimp
    14f8:	0800                	addi	s0,sp,16
    14fa:	0016                	c.slli	zero,0x5
    14fc:	3600                	fld	fs0,40(a2)
    14fe:	0062                	c.slli	zero,0x18
    1500:	5901                	li	s2,-32
    1502:	6329                	lui	t1,0xa
    1504:	4000000b          	0x4000000b
    1508:	0016                	c.slli	zero,0x5
    150a:	3b00                	fld	fs0,48(a4)
    150c:	06e0                	addi	s0,sp,844
    150e:	0000                	unimp
    1510:	5901                	li	s2,-32
    1512:	5d30                	lw	a2,120(a0)
    1514:	0000                	unimp
    1516:	0100                	addi	s0,sp,128
    1518:	375d                	jal	14be <product2+0x2>
    151a:	0520                	addi	s0,sp,648
    151c:	0000                	unimp
    151e:	5901                	li	s2,-32
    1520:	5d3c                	lw	a5,120(a0)
    1522:	0000                	unimp
    1524:	7a00                	flw	fs0,48(a2)
    1526:	0016                	c.slli	zero,0x5
    1528:	3a00                	fld	fs0,48(a2)
    152a:	062c                	addi	a1,sp,776
    152c:	0000                	unimp
    152e:	5c01                	li	s8,-32
    1530:	a509                	j	1b32 <random_keys+0x36>
    1532:	0015                	c.nop	5
    1534:	b400                	fsd	fs0,40(s0)
    1536:	0016                	c.slli	zero,0x5
    1538:	3800                	fld	fs0,48(s0)
    153a:	0069                	c.nop	26
    153c:	5d01                	li	s10,-32
    153e:	5d09                	li	s10,-30
    1540:	0000                	unimp
    1542:	f800                	fsw	fs0,48(s0)
    1544:	0016                	c.slli	zero,0x5
    1546:	3800                	fld	fs0,48(s0)
    1548:	006a                	c.slli	zero,0x1a
    154a:	5d01                	li	s10,-32
    154c:	00005d0b          	0x5d0b
    1550:	a100                	fsd	fs0,0(a0)
    1552:	38000017          	auipc	zero,0x38000
    1556:	5d01006b          	0x5d01006b
    155a:	5d0d                	li	s10,-29
    155c:	0000                	unimp
    155e:	eb00                	fsw	fs0,16(a4)
    1560:	3a000017          	auipc	zero,0x3a000
    1564:	0260                	addi	s0,sp,268
    1566:	0000                	unimp
    1568:	5e01                	li	t3,-32
    156a:	630a                	flw	ft6,128(sp)
    156c:	3900000b          	0x3900000b
    1570:	0018                	0x18
    1572:	2200                	fld	fs0,0(a2)
    1574:	000c                	0xc
    1576:	0000                	unimp
    1578:	5f01                	li	t5,-32
    157a:	c009                	beqz	s0,157c <product2+0xc0>
    157c:	0015                	c.nop	5
    157e:	0200                	addi	s0,sp,256
    1580:	0075                	c.nop	29
    1582:	5a3a                	lw	s4,172(sp)
    1584:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1588:	0960                	addi	s0,sp,156
    158a:	15d2                	slli	a1,a1,0x34
    158c:	0000                	unimp
    158e:	1851                	addi	a6,a6,-12
    1590:	0000                	unimp
    1592:	00006933          	or	s2,zero,zero
    1596:	8700                	0x8700
    1598:	0018                	0x18
    159a:	3300                	fld	fs0,32(a4)
    159c:	0069                	c.nop	26
    159e:	0000                	unimp
    15a0:	000018bf 005d0900 	0x5d0900000018bf
    15a8:	0000                	unimp
    15aa:	15c0                	addi	s0,sp,740
    15ac:	0000                	unimp
    15ae:	6934                	flw	fa3,80(a0)
    15b0:	0000                	unimp
    15b2:	9200                	0x9200
    15b4:	0015                	c.nop	5
    15b6:	2e00                	fld	fs0,24(a2)
    15b8:	0069                	c.nop	26
    15ba:	0000                	unimp
    15bc:	8d02                	jr	s10
    15be:	0000                	unimp
    15c0:	5d09                	li	s10,-30
    15c2:	0000                	unimp
    15c4:	d200                	sw	s0,32(a2)
    15c6:	0015                	c.nop	5
    15c8:	2e00                	fld	fs0,24(a2)
    15ca:	0069                	c.nop	26
    15cc:	0000                	unimp
    15ce:	8f02                	jr	t5
    15d0:	0000                	unimp
    15d2:	5d09                	li	s10,-30
    15d4:	0000                	unimp
    15d6:	e500                	fsw	fs0,8(a0)
    15d8:	0015                	c.nop	5
    15da:	3400                	fld	fs0,40(s0)
    15dc:	0069                	c.nop	26
    15de:	0000                	unimp
    15e0:	0000159b          	0x159b
    15e4:	3500                	fld	fs0,40(a0)
    15e6:	00000103          	lb	sp,0(zero) # 0 <__DYNAMIC>
    15ea:	0f01                	addi	t5,t5,0
    15ec:	6306                	flw	ft6,64(sp)
    15ee:	8c00000b          	0x8c00000b
    15f2:	0000                	unimp
    15f4:	e600                	fsw	fs0,8(a2)
    15f6:	0001                	nop
    15f8:	0100                	addi	s0,sp,128
    15fa:	dd9c                	sw	a5,56(a1)
    15fc:	0016                	c.slli	zero,0x5
    15fe:	3600                	fld	fs0,40(a2)
    1600:	0061                	c.nop	24
    1602:	0f01                	addi	t5,t5,0
    1604:	6314                	flw	fa3,0(a4)
    1606:	f700000b          	0xf700000b
    160a:	0018                	0x18
    160c:	3700                	fld	fs0,40(a4)
    160e:	06d9                	addi	a3,a3,22
    1610:	0000                	unimp
    1612:	0f01                	addi	t5,t5,0
    1614:	00005d1b          	0x5d1b
    1618:	3100                	fld	fs0,32(a0)
    161a:	0019                	c.nop	6
    161c:	3600                	fld	fs0,40(a2)
    161e:	0062                	c.slli	zero,0x18
    1620:	0f01                	addi	t5,t5,0
    1622:	6328                	flw	fa0,64(a4)
    1624:	7700000b          	0x7700000b
    1628:	0019                	c.nop	6
    162a:	3700                	fld	fs0,40(a4)
    162c:	06e0                	addi	s0,sp,844
    162e:	0000                	unimp
    1630:	0f01                	addi	t5,t5,0
    1632:	00005d2f          	0x5d2f
    1636:	b100                	fsd	fs0,32(a0)
    1638:	0019                	c.nop	6
    163a:	3c00                	fld	fs0,56(s0)
    163c:	6f6d                	lui	t5,0x1b
    163e:	0064                	addi	s1,sp,12
    1640:	0f01                	addi	t5,t5,0
    1642:	00005d3b          	0x5d3b
    1646:	0100                	addi	s0,sp,128
    1648:	375e                	fld	fa4,496(sp)
    164a:	0520                	addi	s0,sp,648
    164c:	0000                	unimp
    164e:	0f01                	addi	t5,t5,0
    1650:	5d44                	lw	s1,60(a0)
    1652:	0000                	unimp
    1654:	eb00                	fsw	fs0,16(a4)
    1656:	0019                	c.nop	6
    1658:	2200                	fld	fs0,0(a2)
    165a:	062c                	addi	a1,sp,776
    165c:	0000                	unimp
    165e:	1101                	addi	sp,sp,-32
    1660:	dd09                	beqz	a0,157a <product2+0xbe>
    1662:	0016                	c.slli	zero,0x5
    1664:	0200                	addi	s0,sp,256
    1666:	008c                	addi	a1,sp,64
    1668:	6938                	flw	fa4,80(a0)
    166a:	0100                	addi	s0,sp,128
    166c:	0912                	slli	s2,s2,0x4
    166e:	005d                	c.nop	23
    1670:	0000                	unimp
    1672:	1a49                	addi	s4,s4,-14
    1674:	0000                	unimp
    1676:	6a38                	flw	fa4,80(a2)
    1678:	0100                	addi	s0,sp,128
    167a:	0b12                	slli	s6,s6,0x4
    167c:	005d                	c.nop	23
    167e:	0000                	unimp
    1680:	1b08                	addi	a0,sp,432
    1682:	0000                	unimp
    1684:	6b38                	flw	fa4,80(a4)
    1686:	0100                	addi	s0,sp,128
    1688:	0d12                	slli	s10,s10,0x4
    168a:	005d                	c.nop	23
    168c:	0000                	unimp
    168e:	00001ba3          	sh	zero,23(zero) # 17 <__DYNAMIC+0x17>
    1692:	503a                	0x503a
    1694:	0002                	c.slli64	zero
    1696:	0100                	addi	s0,sp,128
    1698:	0b630a13          	addi	s4,t1,182 # a0b6 <_stack_len+0x60b6>
    169c:	0000                	unimp
    169e:	1bf1                	addi	s7,s7,-4
    16a0:	0000                	unimp
    16a2:	0c22                	slli	s8,s8,0x8
    16a4:	0000                	unimp
    16a6:	0100                	addi	s0,sp,128
    16a8:	0914                	addi	a3,sp,144
    16aa:	16f8                	addi	a4,sp,876
    16ac:	0000                	unimp
    16ae:	7502                	flw	fa0,32(sp)
    16b0:	3a00                	fld	fs0,48(a2)
    16b2:	035a                	slli	t1,t1,0x16
    16b4:	0000                	unimp
    16b6:	1501                	addi	a0,a0,-32
    16b8:	0b09                	addi	s6,s6,2
    16ba:	09000017          	auipc	zero,0x9000
    16be:	001c                	0x1c
    16c0:	3300                	fld	fs0,32(a4)
    16c2:	0069                	c.nop	26
    16c4:	0000                	unimp
    16c6:	1c40                	addi	s0,sp,564
    16c8:	0000                	unimp
    16ca:	00006933          	or	s2,zero,zero
    16ce:	a500                	fsd	fs0,8(a0)
    16d0:	001c                	0x1c
    16d2:	3300                	fld	fs0,32(a4)
    16d4:	0069                	c.nop	26
    16d6:	0000                	unimp
    16d8:	00001cd3          	fadd.s	fs9,ft0,ft0,rtz
    16dc:	0900                	addi	s0,sp,144
    16de:	005d                	c.nop	23
    16e0:	0000                	unimp
    16e2:	16f8                	addi	a4,sp,876
    16e4:	0000                	unimp
    16e6:	6934                	flw	fa3,80(a0)
    16e8:	0000                	unimp
    16ea:	c100                	sw	s0,0(a0)
    16ec:	0016                	c.slli	zero,0x5
    16ee:	2e00                	fld	fs0,24(a2)
    16f0:	0069                	c.nop	26
    16f2:	0000                	unimp
    16f4:	8d02                	jr	s10
    16f6:	0000                	unimp
    16f8:	5d09                	li	s10,-30
    16fa:	0000                	unimp
    16fc:	0b00                	addi	s0,sp,400
    16fe:	34000017          	auipc	zero,0x34000
    1702:	0069                	c.nop	26
    1704:	0000                	unimp
    1706:	16ca                	slli	a3,a3,0x32
    1708:	0000                	unimp
    170a:	0900                	addi	s0,sp,144
    170c:	005d                	c.nop	23
    170e:	0000                	unimp
    1710:	171e                	slli	a4,a4,0x27
    1712:	0000                	unimp
    1714:	6934                	flw	fa3,80(a0)
    1716:	0000                	unimp
    1718:	d300                	sw	s0,32(a4)
    171a:	0016                	c.slli	zero,0x5
    171c:	0000                	unimp
    171e:	193d                	addi	s2,s2,-17
    1720:	0f000003          	lb	zero,240(zero) # f0 <polymult+0x64>
    1724:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    1728:	3d00                	fld	fs0,56(a0)
    172a:	0064                	addi	s1,sp,12
    172c:	0000                	unimp
    172e:	005a                	c.slli	zero,0x16
    1730:	0000                	unimp
    1732:	1e000007          	0x1e000007
    1736:	0000                	unimp
    1738:	0200                	addi	s0,sp,256
    173a:	8e00                	0x8e00
    173c:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1740:	ad01                	j	1d50 <random_keys+0x254>
    1742:	0029                	c.nop	10
    1744:	1800                	addi	s0,sp,48
    1746:	0000                	unimp
    1748:	e700                	fsw	fs0,8(a4)
    174a:	0006                	c.slli	zero,0x1
    174c:	ee00                	fsw	fs0,24(a2)
    174e:	0006                	c.slli	zero,0x1
    1750:	3d00                	fld	fs0,56(a0)
    1752:	01000007          	0x1000007
    1756:	80              	Address 0x0000000000001756 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x220>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <polymult+0x24>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # 680b3 <_stack_start+0x580b3>
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  7e:	0b01130b          	0xb01130b
  82:	3b0b3a0b          	0x3b0b3a0b
  86:	010b390b          	0x10b390b
  8a:	0c000013          	li	zero,192
    int line[size_b][size_a + size_b];
  8e:	000d                	c.nop	3
  90:	0b3a0e03          	lb	t3,179(s4)
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  a0:	0b00                	addi	s0,sp,400
  a2:	0e00000b          	0xe00000b
    int pola[size_a];
  a6:	0e030113          	addi	sp,t1,224
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
  b2:	1301                	addi	t1,t1,-32
    int line[size_b][size_a + size_b];
  b4:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
    int line[size_b][size_a + size_b];
  bc:	390b3b0b          	0x390b3b0b
    int pola[size_a];
  c0:	3813490b          	0x3813490b
    int line[size_b][size_a + size_b];
  c4:	1000000b          	0x1000000b
  c8:	0b0b000f          	0xb0b000f
    int pola[size_a];
  cc:	1349                	addi	t1,t1,-14
    int polb[size_b];
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
    int pola[size_a];
  d4:	0b0e                	slli	s6,s6,0x3
    int polb[size_b];
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
  d8:	390b3b0b          	0x390b3b0b
    int line[size_b][size_a + size_b];
  dc:	0013010b          	0x13010b
    int pola[size_a];
  e0:	1200                	addi	s0,sp,288
    int polb[size_b];
  e2:	000d                	c.nop	3
            line[i][j] = 0;
  e4:	0b3a0e03          	lb	t3,179(s4)
  e8:	0b390b3b          	0xb390b3b
    for (i = 0; i < size_b; ++i){
  ec:	1349                	addi	t1,t1,-14
            product[j] = 0;
  ee:	0538                	addi	a4,sp,648
  f0:	0000                	unimp
  f2:	27001513          	0x27001513
    for (i = 0; i < size_b; ++i){
  f6:	0019                	c.nop	6
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
    for (i = 0; i < size_a; ++i){
  fc:	13491927          	0x13491927
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
 108:	16000013          	li	zero,352
    if(star_mult == 1){
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
 110:	0000                	unimp
 112:	03011317          	auipc	t1,0x3011
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
        for (j = size_b -1; j >= 0; j = j-1){
 11a:	39053b0b          	0x39053b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 11e:	0013010b          	0x13010b
            product[j] = 0;
 122:	1800                	addi	s0,sp,48
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
            line[i][j] = 0;
 12a:	0b39053b          	0xb39053b
            product[j] = 0;
 12e:	1349                	addi	t1,t1,-14
        for(j = 0; j < size_a + size_b -1; ++j){
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
 134:	0d19                	addi	s10,s10,6
 136:	0300                	addi	s0,sp,384
    for (i = 0; i < size_b; ++i){
 138:	3a0e                	fld	fs4,224(sp)
 13a:	39053b0b          	0x39053b0b
 13e:	3813490b          	0x3813490b
        for(j = 0; j < size_a + size_b -1; ++j){
 142:	0005                	c.nop	1
        pola[i] = a[i];
 144:	1a00                	addi	s0,sp,304
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
 14a:	0b3a0b0b          	0xb3a0b0b
            pola[i] = pola[i] + mod;
 14e:	0b39053b          	0xb39053b
        while (pola[i] < 0){
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
 156:	0b01131b          	0xb01131b
        pola[i] = pola[i] % mod;
 15a:	3b0b3a0b          	0x3b0b3a0b
    for (i = 0; i < size_a; ++i){
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
        pola[i] = pola[i] % mod;
 164:	1c00                	addi	s0,sp,560
    for (i = 0; i < size_a; ++i){
 166:	0b0b0117          	auipc	sp,0xb0b0
            pola[i] = pola[i] + mod;
 16a:	0b3a                	slli	s6,s6,0xe
        polb[i] = b[i];
 16c:	0b39053b          	0xb39053b
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
 174:	0d1d                	addi	s10,s10,7
        while (polb[i] < 0){
 176:	0300                	addi	s0,sp,384
 178:	3a0e                	fld	fs4,224(sp)
 17a:	39053b0b          	0x39053b0b
        polb[i] = polb[i] % mod;
 17e:	0013490b          	0x13490b
    for (i = 0; i < size_b; ++i){
 182:	1e00                	addi	s0,sp,816
        polb[i] = polb[i] % mod;
 184:	0e030013          	addi	zero,t1,224
    for (i = 0; i < size_b; ++i){
 188:	193c                	addi	a5,sp,184
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
        for (j = size_b -1; j >= 0; j = j-1){
 192:	20000013          	li	zero,512
    for (i = 0; i < size_b; ++i){
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
 19c:	0b39053b          	0xb39053b
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
    for(j = 0; j < size_a + size_b -1; ++j){
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
}
 1b2:	3f13490b          	0x3f13490b
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0xa0>
                line[size_b-1-j][k] = pola[k]*polb[j];
 1d0:	00052f13          	slti	t5,a0,0
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
 1dc:	0b390b3b          	0xb390b3b
            for (k = size_a-1; k >= 0; k = k-1 ){
 1e0:	1349                	addi	t1,t1,-14
                line[size_b-1-j][k] = pola[k]*polb[j];
 1e2:	1802193f 2e250000 	0x2e2500001802193f
            for (k = size_a-1; k >= 0; k = k-1 ){
 1ea:	3f01                	jal	fa <polymult+0x6e>
 1ec:	0319                	addi	t1,t1,6
        for (j = size_b -1; j >= 0; j = j-1){
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
 1f4:	1113490b          	0x1113490b
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f8:	1201                	addi	tp,tp,-32
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 1fa:	4006                	0x4006
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
 200:	1301                	addi	t1,t1,-32
 202:	0000                	unimp
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
 208:	3a0e                	fld	fs4,224(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 20a:	39053b0b          	0x39053b0b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 20e:	0213490b          	0x213490b
 212:	27000017          	auipc	zero,0x27000
            for (k = size_a-1; k >= 0; k = k-1 ){
 216:	0034                	addi	a3,sp,8
        for (j = size_b -1; j >= 0; j = j-1){
 218:	0b3a0803          	lb	a6,179(s4)
 21c:	0b39053b          	0xb39053b
            line[i][j] = line[i][j] % mod;
 220:	1349                	addi	t1,t1,-14
        for(j = 0; j < size_a + size_b -1; ++j){
 222:	0b1c                	addi	a5,sp,400
 224:	0000                	unimp
            line[i][j] = line[i][j] % mod;
 226:	3428                	fld	fa0,104(s0)
 228:	0300                	addi	s0,sp,384
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
        for(j = 0; j < size_a + size_b -1; ++j){
 230:	0213490b          	0x213490b
    for (i = 0; i < size_b; ++i){
 234:	0018                	0x18
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
        for(j = 0; j < size_a + size_b -1; ++j){
 23a:	0b3a0e03          	lb	t3,179(s4)
            product[j] += line[i][j];
 23e:	0b39053b          	0xb39053b
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
        for(i = 0; i < size_b; ++i){
 246:	342a                	fld	fs0,168(sp)
            product[j] += line[i][j];
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
 250:	0213490b          	0x213490b
        for(i = 0; i < size_b; ++i){
 254:	2b000017          	auipc	zero,0x2b000
    for(j = 0; j < size_a + size_b -1; ++j){
 258:	8289                	srli	a3,a3,0x2
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
        for(i = 0; i < size_b; ++i){
 25e:	1331                	addi	t1,t1,-20
 260:	1301                	addi	t1,t1,-32
        product[j] = product[j] % mod;
 262:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
        product[j] = product[j] % mod;
 268:	0200                	addi	s0,sp,256
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
 26e:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
 270:	892d                	andi	a0,a0,11
    int line[size_b][size_a + size_b];
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
 27c:	0021                	c.nop	8
 27e:	1349                	addi	t1,t1,-14
 280:	0000182f          	0x182f
 284:	3f012e2f          	0x3f012e2f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 288:	0319                	addi	t1,t1,6
 28a:	3a0e                	fld	fs4,224(sp)
 28c:	39053b0b          	0x39053b0b
 290:	4919270b          	0x4919270b
 294:	12011113          	0x12011113
    int line[size_b][size_a + size_b];
 298:	4006                	0x4006
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
    int pola[size_a];
 2a0:	0000                	unimp
 2a2:	0530                	addi	a2,sp,648
 2a4:	0300                	addi	s0,sp,384
 2a6:	3a08                	fld	fa0,48(a2)
    int line[size_b][size_a + size_b];
 2a8:	39053b0b          	0x39053b0b
    int pola[size_a];
 2ac:	0213490b          	0x213490b
    int polb[size_b];
 2b0:	31000017          	auipc	zero,0x31000
    int pola[size_a];
 2b4:	0005                	c.nop	1
    int polb[size_b];
 2b6:	0b3a0e03          	lb	t3,179(s4)
    int line[size_b][size_a + size_b];
 2ba:	0b39053b          	0xb39053b
    int pola[size_a];
 2be:	1349                	addi	t1,t1,-14
 2c0:	1702                	slli	a4,a4,0x20
    int polb[size_b];
 2c2:	0000                	unimp
            line[i][j] = 0;
 2c4:	3432                	fld	fs0,296(sp)
 2c6:	0300                	addi	s0,sp,384
 2c8:	3a08                	fld	fa0,48(a2)
    for (i = 0; i < size_b; ++i){
 2ca:	39053b0b          	0x39053b0b
            product2[j] = 0;
 2ce:	0213490b          	0x213490b
 2d2:	0018                	0x18
 2d4:	3300                	fld	fs0,32(a4)
    for (i = 0; i < size_b; ++i){
 2d6:	0034                	addi	a3,sp,8
 2d8:	1349                	addi	t1,t1,-14
    for(i = 0; i < size_a; ++i){
 2da:	1934                	addi	a3,sp,184
 2dc:	1702                	slli	a4,a4,0x20
 2de:	0000                	unimp
    for(i = 0; i < size_b; ++i){
 2e0:	2134                	fld	fa3,64(a0)
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
    if(star_mult == 1){
 2e8:	3500                	fld	fs0,40(a0)
 2ea:	012e                	slli	sp,sp,0xb
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
        for (j = size_b -1; j >= 0; j = j-1){
 2f4:	0b39                	addi	s6,s6,14
 2f6:	13491927          	0x13491927
            for (k = size_a-1; k >= 0; k = k-1 ){
 2fa:	0111                	addi	sp,sp,4
            product2[j] = 0;
 2fc:	0612                	slli	a2,a2,0x4
 2fe:	1840                	addi	s0,sp,52
 300:	01194297          	auipc	t0,0x1194
            line[i][j] = 0;
 304:	36000013          	li	zero,864
            product2[j] = 0;
 308:	0005                	c.nop	1
        for(j = 0; j < size_a + size_b -1; ++j){
 30a:	0b3a0803          	lb	a6,179(s4)
 30e:	0b390b3b          	0xb390b3b
    for (i = 0; i < size_b; ++i){
 312:	1349                	addi	t1,t1,-14
 314:	1702                	slli	a4,a4,0x20
 316:	0000                	unimp
 318:	03000537          	lui	a0,0x3000
        for(j = 0; j < size_a + size_b -1; ++j){
 31c:	3a0e                	fld	fs4,224(sp)
        pola[i] = a[i];
 31e:	390b3b0b          	0x390b3b0b
 322:	0213490b          	0x213490b
 326:	38000017          	auipc	zero,0x38000
    for(i = 0; i < size_a; ++i){
 32a:	0034                	addi	a3,sp,8
        pola[i] = a[i];
 32c:	0b3a0803          	lb	a6,179(s4)
    for(i = 0; i < size_a; ++i){
 330:	0b390b3b          	0xb390b3b
        polb[i] = b[i];
 334:	1349                	addi	t1,t1,-14
 336:	1702                	slli	a4,a4,0x20
 338:	0000                	unimp
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
 33c:	0300                	addi	s0,sp,384
    for(i = 0; i < size_b; ++i){
 33e:	3a08                	fld	fa0,48(a2)
        polb[i] = b[i];
 340:	390b3b0b          	0x390b3b0b
    for(i = 0; i < size_b; ++i){
 344:	0013490b          	0x13490b
                line[size_b-1-j][k] = pola[k]*polb[j];
 348:	3a00                	fld	fs0,48(a2)
 34a:	0034                	addi	a3,sp,8
 34c:	0b3a0e03          	lb	t3,179(s4)
 350:	0b390b3b          	0xb390b3b
 354:	1349                	addi	t1,t1,-14
            for (k = size_a-1; k >= 0; k = k-1 ){
 356:	1702                	slli	a4,a4,0x20
                line[size_b-1-j][k] = pola[k]*polb[j];
 358:	0000                	unimp
 35a:	0300053b          	0x300053b
            for (k = size_a-1; k >= 0; k = k-1 ){
 35e:	3a0e                	fld	fs4,224(sp)
 360:	390b3b0b          	0x390b3b0b
        for (j = size_b -1; j >= 0; j = j-1){
 364:	0213490b          	0x213490b
 368:	0018                	0x18
 36a:	3c00                	fld	fs0,56(s0)
 36c:	0005                	c.nop	1
 36e:	0b3a0803          	lb	a6,179(s4)
 372:	0b390b3b          	0xb390b3b
    for(j = 0; j < size_a + size_b -1; ++j){
 376:	1349                	addi	t1,t1,-14
 378:	1802                	slli	a6,a6,0x20
}
 37a:	0000                	unimp
 37c:	2e3d                	jal	6ba <ext_euclid+0x86>
 37e:	3f00                	fld	fs0,56(a4)
 380:	3c19                	jal	fffffd96 <_stack_start+0xfffefd96>
 382:	6e19                	lui	t3,0x6
 384:	030e                	slli	t1,t1,0x3
 386:	3a0e                	fld	fs4,224(sp)
 388:	000b3b0b          	0xb3b0b
 38c:	0000                	unimp
 38e:	1101                	addi	sp,sp,-32
 390:	1000                	addi	s0,sp,32
 392:	5506                	lw	a0,96(sp)
 394:	0306                	slli	t1,t1,0x1
 396:	1b0e                	slli	s6,s6,0x23
            for (k = size_a-1; k >= 0; k = k-1 ){
 398:	250e                	fld	fa0,192(sp)
 39a:	130e                	slli	t1,t1,0x23
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 39c:	0005                	c.nop	1
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	1072                	c.slli	zero,0x3c
       2:	0000                	unimp
       4:	1084                	addi	s1,sp,96
       6:	0000                	unimp
       8:	0001                	nop
       a:	845a                	mv	s0,s6
       c:	0010                	0x10
       e:	8500                	0x8500
      10:	0010                	0x10
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	1086                	slli	ra,ra,0x21
      20:	0000                	unimp
      22:	10c0                	addi	s0,sp,100
      24:	0000                	unimp
      26:	0001                	nop
      28:	c65a                	sw	s6,12(sp)
      2a:	0010                	0x10
      2c:	d000                	sw	s0,32(s0)
      2e:	0010                	0x10
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	1000                	addi	s0,sp,32
      3e:	0000                	unimp
      40:	1052                	c.slli	zero,0x34
      42:	0000                	unimp
      44:	0001                	nop
      46:	525a                	lw	tp,180(sp)
      48:	0010                	0x10
      4a:	6e00                	flw	fs0,24(a2)
      4c:	0010                	0x10
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	f400                	fsw	fs0,40(s0)
      5e:	3400000f          	0x3400000f
      62:	0010                	0x10
      64:	0300                	addi	s0,sp,384
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	1034                	addi	a3,sp,40
      6c:	0000                	unimp
      6e:	103e                	c.slli	zero,0x2f
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	103e                	c.slli	zero,0x2f
      78:	0000                	unimp
      7a:	0000106f          	j	107a <main+0xa2>
      7e:	0002                	c.slli64	zero
      80:	007d                	c.nop	31
      82:	0000106f          	j	1082 <main+0xaa>
      86:	10c4                	addi	s1,sp,100
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    int line[size_b][size_a + size_b];
      8e:	c479                	beqz	s0,15c <polymult+0xd0>
      90:	0010                	0x10
      92:	c600                	sw	s0,8(a2)
      94:	0010                	0x10
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	10c6                	slli	ra,ra,0x31
      9e:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      a0:	10d0                	addi	a2,sp,100
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
    int pola[size_a];
      a8:	0079                	c.nop	30
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
      b0:	f400                	fsw	fs0,40(s0)
      b2:	0e00000f          	fence	ior,unknown
      b6:	0010                	0x10
      b8:	0300                	addi	s0,sp,384
      ba:	9100                	0x9100
    int line[size_b][size_a + size_b];
      bc:	7af0                	flw	fa2,116(a3)
      be:	100e                	c.slli	zero,0x23
    int pola[size_a];
      c0:	0000                	unimp
      c2:	1010                	addi	a2,sp,32
    int line[size_b][size_a + size_b];
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
      c8:	007d                	c.nop	31
    int pola[size_a];
      ca:	1010                	addi	a2,sp,32
      cc:	0000                	unimp
    int polb[size_b];
      ce:	107c                	addi	a5,sp,44
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
      d6:	7c7a                	flw	fs8,188(sp)
      d8:	0010                	0x10
    int line[size_b][size_a + size_b];
      da:	8500                	0x8500
      dc:	0010                	0x10
    int pola[size_a];
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
    int polb[size_b];
      e2:	8500                	0x8500
            line[i][j] = 0;
      e4:	0010                	0x10
      e6:	c400                	sw	s0,8(s0)
      e8:	0010                	0x10
    for (i = 0; i < size_b; ++i){
      ea:	0300                	addi	s0,sp,384
      ec:	9100                	0x9100
            product[j] = 0;
      ee:	7af0                	flw	fa2,116(a3)
      f0:	10c4                	addi	s1,sp,100
      f2:	0000                	unimp
      f4:	10c6                	slli	ra,ra,0x31
    for (i = 0; i < size_b; ++i){
      f6:	0000                	unimp
      f8:	f0720003          	lb	zero,-249(tp) # ffffff07 <_stack_start+0xfffeff07>
    for (i = 0; i < size_a; ++i){
      fc:	c67a                	sw	t5,12(sp)
      fe:	0010                	0x10
     100:	d000                	sw	s0,32(s0)
     102:	0010                	0x10
    for (i = 0; i < size_b; ++i){
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
     108:	7af0                	flw	fa2,116(a3)
	...
    if(star_mult == 1){
     112:	0ff4                	addi	a3,sp,988
     114:	0000                	unimp
     116:	101a                	c.slli	zero,0x26
     118:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     11a:	c4910003          	lb	zero,-951(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
     11e:	1a7c                	addi	a5,sp,316
     120:	0010                	0x10
            product[j] = 0;
     122:	2400                	fld	fs0,8(s0)
     124:	0010                	0x10
     126:	0200                	addi	s0,sp,256
            line[i][j] = 0;
     128:	7e00                	flw	fs0,56(a2)
     12a:	2400                	fld	fs0,8(s0)
            product[j] = 0;
     12c:	0010                	0x10
     12e:	be00                	fsd	fs0,56(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
     130:	0010                	0x10
     132:	0200                	addi	s0,sp,256
     134:	7800                	flw	fs0,48(s0)
     136:	be00                	fsd	fs0,56(a2)
    for (i = 0; i < size_b; ++i){
     138:	0010                	0x10
     13a:	c400                	sw	s0,8(s0)
     13c:	0010                	0x10
     13e:	0300                	addi	s0,sp,384
        for(j = 0; j < size_a + size_b -1; ++j){
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
        pola[i] = a[i];
     144:	10c4                	addi	s1,sp,100
     146:	0000                	unimp
     148:	10c6                	slli	ra,ra,0x31
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
            pola[i] = pola[i] + mod;
     150:	c67c                	sw	a5,76(a2)
        while (pola[i] < 0){
     152:	0010                	0x10
     154:	d000                	sw	s0,32(s0)
     156:	0010                	0x10
     158:	0200                	addi	s0,sp,256
        pola[i] = pola[i] % mod;
     15a:	7800                	flw	fs0,48(s0)
	...
     164:	f400                	fsw	fs0,40(s0)
    for (i = 0; i < size_a; ++i){
     166:	4e00000f          	0x4e00000f
            pola[i] = pola[i] + mod;
     16a:	0010                	0x10
        polb[i] = b[i];
     16c:	0300                	addi	s0,sp,384
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
     172:	104e                	c.slli	zero,0x33
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     174:	0000                	unimp
        while (polb[i] < 0){
     176:	1054                	addi	a3,sp,36
     178:	0000                	unimp
     17a:	0002                	c.slli64	zero
        polb[i] = polb[i] % mod;
     17c:	007c                	addi	a5,sp,12
     17e:	1054                	addi	a3,sp,36
    for (i = 0; i < size_b; ++i){
     180:	0000                	unimp
     182:	0000106f          	j	1182 <__DTOR_END__+0xa2>
        polb[i] = polb[i] % mod;
     186:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     188:	0080                	addi	s0,sp,64
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     18a:	0000106f          	j	118a <__DTOR_END__+0xaa>
    if(star_mult == 1){
     18e:	10c4                	addi	s1,sp,100
        for (j = size_b -1; j >= 0; j = j-1){
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
    for (i = 0; i < size_b; ++i){
     196:	c47e                	sw	t6,8(sp)
     198:	0010                	0x10
     19a:	c600                	sw	s0,8(a2)
     19c:	0010                	0x10
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
    for(j = 0; j < size_a + size_b -1; ++j){
     1a4:	10c6                	slli	ra,ra,0x31
     1a6:	0000                	unimp
     1a8:	10d0                	addi	a2,sp,100
    for(j = 0; j < size_a + size_b -1; ++j){
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
}
     1b0:	007e                	c.slli	zero,0x1f
	...
     1ba:	0010                	0x10
     1bc:	0600                	addi	s0,sp,768
     1be:	0010                	0x10
     1c0:	0200                	addi	s0,sp,256
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	869f 0010 9c00      	0x9c000010869f
     1ca:	0010                	0x10
     1cc:	0200                	addi	s0,sp,256
     1ce:	3000                	fld	fs0,32(s0)
                line[size_b-1-j][k] = pola[k]*polb[j];
     1d0:	009f 0000 0000      	0x9f
     1d6:	0000                	unimp
     1d8:	f000                	fsw	fs0,32(s0)
     1da:	000c                	0xc
     1dc:	1c00                	addi	s0,sp,560
     1de:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e0:	0100                	addi	s0,sp,128
                line[size_b-1-j][k] = pola[k]*polb[j];
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0d1c                	addi	a5,sp,656
     1e6:	0000                	unimp
     1e8:	0d86                	slli	s11,s11,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     1ea:	0000                	unimp
     1ec:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	8658                	0x8658
     1f0:	000d                	c.nop	3
     1f2:	a000                	fsd	fs0,0(s0)
     1f4:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f6:	0300                	addi	s0,sp,384
     1f8:	8700                	0x8700
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     1fa:	9f7f                	0x9f7f
     1fc:	0da0                	addi	s0,sp,728
     1fe:	0000                	unimp
     200:	0da6                	slli	s11,s11,0x9
     202:	0000                	unimp
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
            for (k = size_a-1; k >= 0; k = k-1 ){
     20a:	0da6                	slli	s11,s11,0x9
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     20c:	0000                	unimp
     20e:	0ddc                	addi	a5,sp,724
     210:	0000                	unimp
     212:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     218:	0000                	unimp
     21a:	0000                	unimp
     21c:	f000                	fsw	fs0,32(s0)
     21e:	000c                	0xc
            line[i][j] = line[i][j] % mod;
     220:	2a00                	fld	fs0,16(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
     222:	000d                	c.nop	3
     224:	0100                	addi	s0,sp,128
            line[i][j] = line[i][j] % mod;
     226:	5b00                	lw	s0,48(a4)
     228:	0d2a                	slli	s10,s10,0xa
     22a:	0000                	unimp
     22c:	0d9e                	slli	s11,s11,0x7
        for(j = 0; j < size_a + size_b -1; ++j){
     22e:	0000                	unimp
     230:	0001                	nop
    for (i = 0; i < size_b; ++i){
     232:	9e66                	add	t3,t3,s9
     234:	000d                	c.nop	3
     236:	a600                	fsd	fs0,8(a2)
     238:	000d                	c.nop	3
        for(j = 0; j < size_a + size_b -1; ++j){
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
            product[j] += line[i][j];
     23e:	5b01                	li	s6,-32
     240:	a69f 000d dc00      	0xdc00000da69f
        for(i = 0; i < size_b; ++i){
     246:	000d                	c.nop	3
            product[j] += line[i][j];
     248:	0100                	addi	s0,sp,128
     24a:	6600                	flw	fs0,8(a2)
	...
        for(i = 0; i < size_b; ++i){
     254:	0cf0                	addi	a2,sp,604
     256:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     258:	0d1e                	slli	s10,s10,0x7
     25a:	0000                	unimp
     25c:	0001                	nop
        for(i = 0; i < size_b; ++i){
     25e:	1e5c                	addi	a5,sp,820
     260:	000d                	c.nop	3
        product[j] = product[j] % mod;
     262:	9600                	0x9600
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	000d                	c.nop	3
     266:	0100                	addi	s0,sp,128
        product[j] = product[j] % mod;
     268:	6200                	flw	fs0,0(a2)
     26a:	0d96                	slli	s11,s11,0x5
     26c:	0000                	unimp
     26e:	0da6                	slli	s11,s11,0x9
    for(j = 0; j < size_a + size_b -1; ++j){
     270:	0000                	unimp
    int line[size_b][size_a + size_b];
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0da6                	slli	s11,s11,0x9
     27a:	0000                	unimp
     27c:	0ddc                	addi	a5,sp,724
     27e:	0000                	unimp
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     286:	0000                	unimp
     288:	0000                	unimp
     28a:	f000                	fsw	fs0,32(s0)
     28c:	000c                	0xc
     28e:	2400                	fld	fs0,8(s0)
     290:	000d                	c.nop	3
     292:	0100                	addi	s0,sp,128
     294:	5d00                	lw	s0,56(a0)
     296:	0d24                	addi	s1,sp,664
    int line[size_b][size_a + size_b];
     298:	0000                	unimp
     29a:	00000d3b          	0xd3b
     29e:	0001                	nop
    int pola[size_a];
     2a0:	3b5a                	fld	fs6,432(sp)
     2a2:	000d                	c.nop	3
     2a4:	dc00                	sw	s0,56(s0)
     2a6:	000d                	c.nop	3
    int line[size_b][size_a + size_b];
     2a8:	0400                	addi	s0,sp,512
    int pola[size_a];
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
    int polb[size_b];
     2ae:	009f 0000 0000      	0x9f
    int pola[size_a];
     2b4:	0000                	unimp
    int polb[size_b];
     2b6:	f000                	fsw	fs0,32(s0)
     2b8:	000c                	0xc
    int line[size_b][size_a + size_b];
     2ba:	0600                	addi	s0,sp,768
     2bc:	000d                	c.nop	3
    int pola[size_a];
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
    int polb[size_b];
     2c2:	0d06                	slli	s10,s10,0x1
            line[i][j] = 0;
     2c4:	0000                	unimp
     2c6:	0da2                	slli	s11,s11,0x8
     2c8:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     2ca:	0001                	nop
     2cc:	a268                	fsd	fa0,192(a2)
            product2[j] = 0;
     2ce:	000d                	c.nop	3
     2d0:	a600                	fsd	fs0,8(a2)
     2d2:	000d                	c.nop	3
     2d4:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     2d6:	f300                	fsw	fs0,32(a4)
     2d8:	5e01                	li	t3,-32
    for(i = 0; i < size_a; ++i){
     2da:	a69f 000d dc00      	0xdc00000da69f
    for(i = 0; i < size_b; ++i){
     2e0:	000d                	c.nop	3
     2e2:	0100                	addi	s0,sp,128
     2e4:	6800                	flw	fs0,16(s0)
	...
    if(star_mult == 1){
     2ee:	0cf0                	addi	a2,sp,604
     2f0:	0000                	unimp
     2f2:	00000d3b          	0xd3b
        for (j = size_b -1; j >= 0; j = j-1){
     2f6:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     2f8:	3b5f 000d dc00      	0xdc00000d3b5f
            product2[j] = 0;
     2fe:	000d                	c.nop	3
     300:	0400                	addi	s0,sp,512
            line[i][j] = 0;
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
            product2[j] = 0;
     306:	009f 0000 0000      	0x9f
        for(j = 0; j < size_a + size_b -1; ++j){
     30c:	0000                	unimp
     30e:	f000                	fsw	fs0,32(s0)
     310:	000c                	0xc
    for (i = 0; i < size_b; ++i){
     312:	3b00                	fld	fs0,48(a4)
     314:	000d                	c.nop	3
     316:	0100                	addi	s0,sp,128
     318:	6000                	flw	fs0,0(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     31a:	00000d3b          	0xd3b
        pola[i] = a[i];
     31e:	0d9c                	addi	a5,sp,720
     320:	0000                	unimp
     322:	0001                	nop
     324:	9c65                	0x9c65
     326:	000d                	c.nop	3
     328:	a600                	fsd	fs0,8(a2)
    for(i = 0; i < size_a; ++i){
     32a:	000d                	c.nop	3
        pola[i] = a[i];
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
    for(i = 0; i < size_a; ++i){
     330:	6001                	0x6001
        polb[i] = b[i];
     332:	a69f 000d dc00      	0xdc00000da69f
     338:	000d                	c.nop	3
     33a:	0100                	addi	s0,sp,128
     33c:	6500                	flw	fs0,8(a0)
	...
                line[size_b-1-j][k] = pola[k]*polb[j];
     346:	0d82                	c.slli64	s11
     348:	0000                	unimp
     34a:	0da6                	slli	s11,s11,0x9
     34c:	0000                	unimp
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
     352:	0000                	unimp
     354:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     356:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     358:	3c00                	fld	fs0,56(s0)
     35a:	000d                	c.nop	3
     35c:	4b00                	lw	s0,16(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
     35e:	000d                	c.nop	3
     360:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     362:	5a00                	lw	s0,48(a2)
	...
     36c:	0d4e                	slli	s10,s10,0x13
     36e:	0000                	unimp
     370:	0d6c                	addi	a1,sp,668
     372:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     374:	0001                	nop
    for(j = 0; j < size_a + size_b -1; ++j){
     376:	6c5a                	flw	fs8,148(sp)
     378:	000d                	c.nop	3
}
     37a:	6f00                	flw	fs0,24(a4)
     37c:	000d                	c.nop	3
     37e:	0100                	addi	s0,sp,128
     380:	5c00                	lw	s0,56(s0)
     382:	0da6                	slli	s11,s11,0x9
     384:	0000                	unimp
     386:	0dca                	slli	s11,s11,0x12
     388:	0000                	unimp
     38a:	0001                	nop
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
     390:	0000                	unimp
     392:	0000                	unimp
     394:	7000                	flw	fs0,32(s0)
     396:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     398:	7b00                	flw	fs0,48(a4)
     39a:	000d                	c.nop	3
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
	...
     3a8:	0d7c                	addi	a5,sp,668
     3aa:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ac:	0da6                	slli	s11,s11,0x9
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3ae:	0000                	unimp
     3b0:	0001                	nop
     3b2:	ca5a                	sw	s6,20(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b4:	000d                	c.nop	3
     3b6:	dc00                	sw	s0,56(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     3b8:	000d                	c.nop	3
     3ba:	0100                	addi	s0,sp,128
     3bc:	5a00                	lw	s0,48(a2)
	...
        for(i = 0; i < size_b; ++i){
     3c6:	0d4e                	slli	s10,s10,0x13
            product2[j] += line[i][j];
     3c8:	0000                	unimp
     3ca:	0d54                	addi	a3,sp,660
     3cc:	0000                	unimp
     3ce:	0001                	nop
     3d0:	5459                	li	s0,-10
     3d2:	000d                	c.nop	3
        for(i = 0; i < size_b; ++i){
     3d4:	6000                	flw	fs0,0(s0)
     3d6:	000d                	c.nop	3
    for(j = 0; j < size_a + size_b -1; ++j){
     3d8:	0100                	addi	s0,sp,128
     3da:	5d00                	lw	s0,56(a0)
     3dc:	0d60                	addi	s0,sp,668
        for(i = 0; i < size_b; ++i){
     3de:	0000                	unimp
     3e0:	0d66                	slli	s10,s10,0x19
    int v[size_N];
     3e2:	0000                	unimp
     3e4:	0001                	nop
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3e6:	7c5e                	flw	fs8,244(sp)
    int v[size_N];
     3e8:	000d                	c.nop	3
     3ea:	9400                	0x9400
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3ec:	000d                	c.nop	3
     3ee:	0100                	addi	s0,sp,128
     3f0:	5900                	lw	s0,48(a0)
     3f2:	0da6                	slli	s11,s11,0x9
     3f4:	0000                	unimp
     3f6:	0db0                	addi	a2,sp,728
     3f8:	0000                	unimp
     3fa:	0001                	nop
     3fc:	b05d                	j	fffffca2 <_stack_start+0xfffefca2>
     3fe:	000d                	c.nop	3
     400:	b600                	fsd	fs0,40(a2)
     402:	000d                	c.nop	3
     404:	0300                	addi	s0,sp,384
     406:	7d00                	flw	fs0,56(a0)
    int v[size_N];
     408:	9f7f                	0x9f7f
     40a:	0db6                	slli	s11,s11,0xd
     40c:	0000                	unimp
    int q[size_N];
     40e:	0db8                	addi	a4,sp,728
     410:	0000                	unimp
     412:	0001                	nop
    int num_temp[size_N];
     414:	b85d                	j	fffffcca <_stack_start+0xfffefcca>
     416:	000d                	c.nop	3
    int denum_temp[size_D];
     418:	ca00                	sw	s0,16(a2)
     41a:	000d                	c.nop	3
     41c:	0100                	addi	s0,sp,128
     41e:	5e00                	lw	s0,56(a2)
    int num_temp[size_N];
     420:	0dca                	slli	s11,s11,0x12
    int denum_temp[size_D];
     422:	0000                	unimp
     424:	0dd4                	addi	a3,sp,724
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     426:	0000                	unimp
     428:	0001                	nop
    int denum_temp[size_D];
     42a:	d459                	beqz	s0,3b8 <polymult2+0x146>
     42c:	000d                	c.nop	3
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     42e:	da00                	sw	s0,48(a2)
    int v[size_N];
     430:	000d                	c.nop	3
     432:	0300                	addi	s0,sp,384
    int denum_temp[size_D];
     434:	7900                	flw	fs0,48(a0)
    for (i = 0; i < size_N; ++i){
     436:	9f7f                	0x9f7f
     438:	0dda                	slli	s11,s11,0x16
     43a:	0000                	unimp
     43c:	0ddc                	addi	a5,sp,724
     43e:	0000                	unimp
     440:	0001                	nop
    for (i = 0; i < size_D; ++i) {
     442:	0059                	c.nop	22
     444:	0000                	unimp
     446:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     448:	0000                	unimp
     44a:	3600                	fld	fs0,40(a2)
     44c:	000c                	0xc
    for (i = size_D-1; i >= 0; i = i-1){
     44e:	6400                	flw	fs0,8(s0)
     450:	000c                	0xc
     452:	0100                	addi	s0,sp,128
     454:	5a00                	lw	s0,48(a2)
     456:	0c64                	addi	s1,sp,540
     458:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     45a:	0cba                	slli	s9,s9,0xe
     45c:	0000                	unimp
        if ( (b_N*u)%mod == 1 )
     45e:	0001                	nop
    for (u = 0; u < mod; ++u){
     460:	ba58                	fsd	fa4,176(a2)
     462:	000c                	0xc
     464:	f000                	fsw	fs0,32(s0)
     466:	000c                	0xc
        num_temp[i] = num[i];
     468:	0400                	addi	s0,sp,512
     46a:	f300                	fsw	fs0,32(a4)
     46c:	5a01                	li	s4,-32
     46e:	009f 0000 0000      	0x9f
        while (num_temp[i] < 0) {
     474:	0000                	unimp
     476:	3600                	fld	fs0,40(a2)
        num_temp[i] = num_temp[i] % mod;
     478:	000c                	0xc
     47a:	5600                	lw	s0,40(a2)
    for (i = 0; i < size_N; ++i){
     47c:	000c                	0xc
     47e:	0100                	addi	s0,sp,128
        num_temp[i] = num_temp[i] % mod;
     480:	5b00                	lw	s0,48(a4)
     482:	0c56                	slli	s8,s8,0x15
    for (i = 0; i < size_N; ++i){
     484:	0000                	unimp
            num_temp[i] = num_temp[i] + mod;
     486:	0cd4                	addi	a3,sp,596
     488:	0000                	unimp
        denum_temp[i] = denum[i];
     48a:	0001                	nop
     48c:	d462                	sw	s8,40(sp)
     48e:	000c                	0xc
     490:	de00                	sw	s0,56(a2)
            denum_temp[i] = denum_temp[i] + mod;
     492:	000c                	0xc
        while (denum_temp[i] < 0) {
     494:	0400                	addi	s0,sp,512
     496:	f300                	fsw	fs0,32(a4)
     498:	5b01                	li	s6,-32
        denum_temp[i] = denum_temp[i] % mod;
     49a:	de9f 000c f000      	0xf000000cde9f
    for (i = 0; i < size_D; ++i) {
     4a0:	000c                	0xc
        denum_temp[i] = denum_temp[i] % mod;
     4a2:	0100                	addi	s0,sp,128
     4a4:	6200                	flw	fs0,0(a2)
	...
        q[i] = 0;
     4ae:	0c36                	slli	s8,s8,0xd
     4b0:	0000                	unimp
     4b2:	0c5a                	slli	s8,s8,0x16
        v[i] = 0;
     4b4:	0000                	unimp
        q[i] = 0;
     4b6:	0001                	nop
     4b8:	5a5c                	lw	a5,52(a2)
        v[i] = 0;
     4ba:	000c                	0xc
     4bc:	a600                	fsd	fs0,8(a2)
    for (i = 0; i < size_N; ++i){
     4be:	000c                	0xc
     4c0:	0100                	addi	s0,sp,128
        if( denum_temp[i] != 0 )
     4c2:	5900                	lw	s0,48(a0)
    for (i = size_D-1; i >= 0; i = i-1){
     4c4:	0ca6                	slli	s9,s9,0x9
     4c6:	0000                	unimp
        if ( (b_N*u)%mod == 1 )
     4c8:	0cf0                	addi	a2,sp,604
     4ca:	0000                	unimp
     4cc:	0004                	0x4
     4ce:	9f5c01f3          	0x9f5c01f3
	...
    for (i = size_N-1; i >= 0; i = i-1){
     4da:	0c36                	slli	s8,s8,0xd
     4dc:	0000                	unimp
     4de:	00000c73          	0xc73
     4e2:	0001                	nop
     4e4:	735d                	lui	t1,0xffff7
    while (d >= d2){
     4e6:	000c                	0xc
     4e8:	d800                	sw	s0,48(s0)
    for(i = 0; i < size_N; ++i){
     4ea:	000c                	0xc
        result[i] = q[i];
     4ec:	0100                	addi	s0,sp,128
     4ee:	6400                	flw	fs0,8(s0)
     4f0:	0cd8                	addi	a4,sp,596
     4f2:	0000                	unimp
    for(i = 0; i < size_N; ++i){
     4f4:	0cde                	slli	s9,s9,0x17
     4f6:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     4f8:	0004                	0x4
     4fa:	9f5d01f3          	0x9f5d01f3
        result[i] = num_temp[i-size_N];
     4fe:	0cde                	slli	s9,s9,0x17
     500:	0000                	unimp
     502:	0cf0                	addi	a2,sp,604
    for(i = size_N; i < (2*size_N); ++i){
     504:	0000                	unimp
     506:	0001                	nop
}
     508:	0064                	addi	s1,sp,12
     50a:	0000                	unimp
     50c:	0000                	unimp
     50e:	0000                	unimp
     510:	3600                	fld	fs0,40(a2)
     512:	000c                	0xc
     514:	7300                	flw	fs0,32(a4)
     516:	000c                	0xc
     518:	0100                	addi	s0,sp,128
     51a:	5e00                	lw	s0,56(a2)
     51c:	00000c73          	0xc73
     520:	0cd6                	slli	s9,s9,0x15
     522:	0000                	unimp
     524:	0001                	nop
     526:	000cd663          	bgez	s9,532 <polydiv+0x150>
     52a:	de00                	sw	s0,56(a2)
     52c:	000c                	0xc
     52e:	0400                	addi	s0,sp,512
     530:	f300                	fsw	fs0,32(a4)
        v[(d-d2)] = u*r_d;
     532:	5e01                	li	t3,-32
     534:	de9f 000c f000      	0xf000000cde9f
     53a:	000c                	0xc
     53c:	0100                	addi	s0,sp,128
     53e:	6300                	flw	fs0,0(a4)
	...
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     548:	0cc0                	addi	s0,sp,596
     54a:	0000                	unimp
     54c:	0cde                	slli	s9,s9,0x17
     54e:	0000                	unimp
     550:	0001                	nop
     552:	005a                	c.slli	zero,0x16
     554:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     556:	0000                	unimp
     558:	0000                	unimp
     55a:	8600                	0x8600
     55c:	000c                	0xc
     55e:	b300                	fsd	fs0,32(a4)
        for (i = 0; i < size_N; ++i){
     560:	000c                	0xc
     562:	0100                	addi	s0,sp,128
     564:	5a00                	lw	s0,48(a2)
	...
        for (i = 0; i < size_N; ++i){
     56e:	0c86                	slli	s9,s9,0x1
        for(i = 0; i < size_N; ++i){
     570:	0000                	unimp
     572:	0c8c                	addi	a1,sp,592
     574:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     576:	0002                	c.slli64	zero
     578:	9f30                	0x9f30
     57a:	0cb4                	addi	a3,sp,600
     57c:	0000                	unimp
     57e:	0cd2                	slli	s9,s9,0x14
     580:	0000                	unimp
     582:	0001                	nop
     584:	de59                	beqz	a2,522 <polydiv+0x140>
     586:	000c                	0xc
            v[i] = v[i] % mod;
     588:	e800                	fsw	fs0,16(s0)
        for (i = 0; i < size_N; ++i){
     58a:	000c                	0xc
     58c:	0100                	addi	s0,sp,128
            v[i] = v[i] % mod;
     58e:	5900                	lw	s0,48(a0)
     590:	0ce8                	addi	a0,sp,604
     592:	0000                	unimp
     594:	0cee                	slli	s9,s9,0x1b
        for (i = 0; i < size_N; ++i){
     596:	0000                	unimp
                product[i] = product[i] + mod;
     598:	7f790003          	lb	zero,2039(s2) # fffe27f7 <_stack_start+0xfffd27f7>
            while (product[i] < 0) {
     59c:	ee9f 000c f000      	0xf000000cee9f
            product[i] = product[i] % mod;
     5a2:	000c                	0xc
     5a4:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     5a6:	5900                	lw	s0,48(a0)
	...
            num_temp[i] = num_temp[i] - product[i];
     5b0:	0918                	addi	a4,sp,144
     5b2:	0000                	unimp
     5b4:	0970                	addi	a2,sp,156
     5b6:	0000                	unimp
     5b8:	0001                	nop
        for (i = 0; i < size_N; ++i){
     5ba:	705a                	flw	ft0,180(sp)
     5bc:	0009                	c.nop	2
            num_temp[i] = num_temp[i] - product[i];
     5be:	3800                	fld	fs0,48(s0)
     5c0:	0100000b          	0x100000b
        for (i = 0; i < size_N; ++i){
     5c4:	6200                	flw	fs0,0(a2)
                num_temp[i] = num_temp[i] + mod;
     5c6:	0b38                	addi	a4,sp,408
     5c8:	0000                	unimp
            while (num_temp[i] < 0){
     5ca:	0b6c                	addi	a1,sp,412
     5cc:	0000                	unimp
     5ce:	7f860003          	lb	zero,2040(a2) # 667f8 <_stack_start+0x567f8>
            num_temp[i] = num_temp[i] % mod;
     5d2:	6c9f 000b 8e00      	0x8e00000b6c9f
     5d8:	0400000b          	0x400000b
        for (i = 0; i < size_N; ++i){
     5dc:	f300                	fsw	fs0,32(a4)
            q[i] = q[i] + v[i];
     5de:	5a01                	li	s4,-32
     5e0:	8e9f 000b 2200      	0x2200000b8e9f
     5e6:	000c                	0xc
        for(i = 0; i < size_N; ++i){
     5e8:	0100                	addi	s0,sp,128
     5ea:	6200                	flw	fs0,0(a2)
            q[i] = q[i] + v[i];
     5ec:	0c22                	slli	s8,s8,0x8
            q[i] = q[i] % mod;
     5ee:	0000                	unimp
     5f0:	0c36                	slli	s8,s8,0xd
     5f2:	0000                	unimp
     5f4:	7f860003          	lb	zero,2040(a2)
            if( num_temp[i] != 0 )
     5f8:	009f 0000 0000      	0x9f
            v[i] = 0;
     5fe:	0000                	unimp
     600:	1800                	addi	s0,sp,48
     602:	0009                	c.nop	2
     604:	6000                	flw	fs0,0(s0)
     606:	0009                	c.nop	2
        for (i = 0; i < size_N; ++i){
     608:	0100                	addi	s0,sp,128
     60a:	5b00                	lw	s0,48(a4)
     60c:	0960                	addi	s0,sp,156
     60e:	0000                	unimp
        result[i] = q[i];
     610:	0b74                	addi	a3,sp,412
     612:	0000                	unimp
     614:	0001                	nop
     616:	7468                	flw	fa0,108(s0)
     618:	8e00000b          	0x8e00000b
    for(i = 0; i < size_N; ++i){
     61c:	0400000b          	0x400000b
     620:	f300                	fsw	fs0,32(a4)
        result[i] = num_temp[i-size_N];
     622:	5b01                	li	s6,-32
     624:	8e9f 000b 3600      	0x3600000b8e9f
     62a:	000c                	0xc
     62c:	0100                	addi	s0,sp,128
    for(i = size_N; i < (2*size_N); ++i){
     62e:	6800                	flw	fs0,16(s0)
	...
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     638:	0918                	addi	a4,sp,144
    int ri_2[size]; // MX-ring poly, a
     63a:	0000                	unimp
     63c:	0964                	addi	s1,sp,156
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     63e:	0000                	unimp
     640:	0001                	nop
     642:	645c                	flw	fa5,12(s0)
     644:	0009                	c.nop	2
     646:	7000                	flw	fs0,32(s0)
     648:	0100000b          	0x100000b
     64c:	6700                	flw	fs0,8(a4)
     64e:	0b70                	addi	a2,sp,412
     650:	0000                	unimp
     652:	0b8e                	slli	s7,s7,0x3
     654:	0000                	unimp
     656:	0004                	0x4
     658:	9f5c01f3          	0x9f5c01f3
    int ri_2[size]; // MX-ring poly, a
     65c:	0b8e                	slli	s7,s7,0x3
     65e:	0000                	unimp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     660:	0c36                	slli	s8,s8,0xd
     662:	0000                	unimp
     664:	0001                	nop
    int ri[size];
     666:	00000067          	jr	zero # 0 <__DYNAMIC>
     66a:	0000                	unimp
    int ti_1[size]; // ti_1[0] = 1
     66c:	0000                	unimp
     66e:	be00                	fsd	fs0,56(a2)
     670:	000a                	c.slli	zero,0x2
    int ti[size];
     672:	c800                	sw	s0,16(s0)
     674:	000a                	c.slli	zero,0x2
     676:	0100                	addi	s0,sp,128
    int qi_1[size];
     678:	5a00                	lw	s0,48(a2)
	...
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     682:	0ad8                	addi	a4,sp,340
     684:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     686:	00000af7          	0xaf7
    int temp[size];
     68a:	0001                	nop
    for (i = 0; i < size; ++i) {
     68c:	ee5a                	fsw	fs6,28(sp)
     68e:	0200000b          	0x200000b
        ti_2[i] = 0;
     692:	000c                	0xc
     694:	0100                	addi	s0,sp,128
     696:	5a00                	lw	s0,48(a2)
	...
    ti_1[0] = 1;
     6a0:	0af8                	addi	a4,sp,348
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6a2:	0000                	unimp
     6a4:	00000b0b          	0xb0b
     6a8:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     6aa:	025a                	slli	tp,tp,0x16
     6ac:	000c                	0xc
        ri_2[i] = polyR[i];
     6ae:	1200                	addi	s0,sp,288
     6b0:	000c                	0xc
     6b2:	0100                	addi	s0,sp,128
     6b4:	5a00                	lw	s0,48(a2)
	...
     6be:	0b0c                	addi	a1,sp,400
        ri_1[i] = polyf[i];
     6c0:	0000                	unimp
     6c2:	0b28                	addi	a0,sp,408
     6c4:	0000                	unimp
     6c6:	0001                	nop
     6c8:	125a                	slli	tp,tp,0x36
     6ca:	000c                	0xc
     6cc:	2200                	fld	fs0,0(a2)
     6ce:	000c                	0xc
        ti_2[i] = 0;
     6d0:	0100                	addi	s0,sp,128
     6d2:	5a00                	lw	s0,48(a2)
	...
        ti_1[i] = 0;
     6dc:	0a72                	slli	s4,s4,0x1c
     6de:	0000                	unimp
    for (i = 0; i < size; ++i) {
     6e0:	0b4c                	addi	a1,sp,404
     6e2:	0000                	unimp
                ri_2[i] = ri_2[i] + mod;
     6e4:	0002                	c.slli64	zero
     6e6:	0072                	c.slli	zero,0x1c
            while (ri_2[i] < 0) {
     6e8:	0b4c                	addi	a1,sp,404
     6ea:	0000                	unimp
     6ec:	0b64                	addi	s1,sp,412
            ri_2[i] = ri_2[i] % mod;
     6ee:	0000                	unimp
     6f0:	0002                	c.slli64	zero
        for (i = 0; i < N + 1; ++i) {
     6f2:	0084                	addi	s1,sp,64
            ri_2[i] = ri_2[i] % mod;
     6f4:	0b64                	addi	s1,sp,412
        for (i = 0; i < N + 1; ++i) {
     6f6:	0000                	unimp
     6f8:	0b6c                	addi	a1,sp,412
     6fa:	0000                	unimp
     6fc:	0010                	0x10
     6fe:	0091                	addi	ra,ra,4
     700:	0086                	slli	ra,ra,0x1
     702:	2432                	fld	fs0,264(sp)
        for (i = 0; i < N + 1; ++i) {
     704:	f0090f23          	sb	zero,-226(s2)
     708:	1c1a                	slli	s8,s8,0x26
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     70a:	000a                	c.slli	zero,0x2
     70c:	1c02                	slli	s8,s8,0x20
     70e:	0b6c                	addi	a1,sp,412
     710:	0000                	unimp
     712:	0b8e                	slli	s7,s7,0x3
     714:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     716:	00910013          	addi	zero,sp,9
     71a:	235a01f3          	0x235a01f3
     71e:	3201                	jal	1e <__DYNAMIC+0x1e>
     720:	2324                	fld	fs1,64(a4)
     722:	1af0090f          	0x1af0090f
        for (i = 0; i < N + 1; ++i) {
     726:	0a1c                	addi	a5,sp,272
     728:	0200                	addi	s0,sp,256
     72a:	8e1c                	0x8e1c
     72c:	3600000b          	0x3600000b
        for (i = 0; i < N + 1; ++i) {
     730:	000c                	0xc
     732:	0200                	addi	s0,sp,256
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     734:	7200                	flw	fs0,32(a2)
	...
     73e:	7600                	flw	fs0,40(a2)
        for (i = 0; i < N + 1; ++i) {
     740:	000a                	c.slli	zero,0x2
     742:	7800                	flw	fs0,48(s0)
     744:	000a                	c.slli	zero,0x2
     746:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     748:	3100                	fld	fs0,32(a0)
     74a:	789f 000a 7e00      	0x7e00000a789f
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     750:	000a                	c.slli	zero,0x2
     752:	0100                	addi	s0,sp,128
     754:	5f00                	lw	s0,56(a4)
     756:	0a82                	c.slli64	s5
     758:	0000                	unimp
     75a:	0a88                	addi	a0,sp,336
        for (i = 0; i < N + 1; ++i) {
     75c:	0000                	unimp
     75e:	0001                	nop
     760:	905f 000a 9e00      	0x9e00000a905f
        for (i = 0; i < N + 1; ++i) {
     766:	000a                	c.slli	zero,0x2
     768:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     76a:	5f00                	lw	s0,56(a4)
     76c:	0aa8                	addi	a0,sp,344
     76e:	0000                	unimp
     770:	0abd                	addi	s5,s5,15
        for (i = 0; i < N + 1; ++i) {
     772:	0000                	unimp
     774:	0001                	nop
     776:	be5f 000a c800      	0xc800000abe5f
        for (i = 0; i < N + 1; ++i) {
     77c:	000a                	c.slli	zero,0x2
     77e:	0500                	addi	s0,sp,640
     780:	8200                	0x8200
    while (controlR != 0) {
     782:	3100                	fld	fs0,32(a0)
        for (j = 0; j < mod; ++j) {
     784:	9f24                	0x9f24
            if (((ri_2[0] * j) % mod) == 1)
     786:	0ac8                	addi	a0,sp,340
        for (j = 0; j < mod; ++j) {
     788:	0000                	unimp
     78a:	00000ad7          	0xad7
     78e:	0001                	nop
     790:	d85f 000a e800      	0xe800000ad85f
        for (i = 0; i < N + 1; ++i) {
     796:	000a                	c.slli	zero,0x2
    }
     798:	0500                	addi	s0,sp,640
     79a:	8200                	0x8200
     79c:	3300                	fld	fs0,32(a4)
     79e:	9f1e                	add	t5,t5,t2
     7a0:	0ae8                	addi	a0,sp,348
     7a2:	0000                	unimp
     7a4:	0af8                	addi	a4,sp,348
     7a6:	0000                	unimp
     7a8:	0001                	nop
     7aa:	f859                	bnez	s0,740 <ext_euclid+0x10c>
     7ac:	000a                	c.slli	zero,0x2
     7ae:	0000                	unimp
     7b0:	0200000b          	0x200000b
     7b4:	3000                	fld	fs0,32(s0)
     7b6:	009f 000b 0800      	0x800000b009f
     7bc:	0100000b          	0x100000b
     7c0:	5e00                	lw	s0,56(a2)
                ri_1[i] = ri_1[i] + mod;
     7c2:	0b0c                	addi	a1,sp,400
     7c4:	0000                	unimp
            while (ri_1[i] < 0) {
     7c6:	0b1e                	slli	s6,s6,0x7
     7c8:	0000                	unimp
     7ca:	0005                	c.nop	1
            ri_1[i] = ri_1[i] % mod;
     7cc:	0082                	c.slli64	ra
     7ce:	2432                	fld	fs0,264(sp)
        for (i = 0; i < N + 1; ++i) {
     7d0:	1e9f 000b 3800      	0x3800000b1e9f
            ri_1[i] = ri_1[i] % mod;
     7d6:	0100000b          	0x100000b
            ri[i - (N + 1)] = res[i];
     7da:	6a00                	flw	fs0,16(a2)
     7dc:	0b38                	addi	a4,sp,408
     7de:	0000                	unimp
     7e0:	0b40                	addi	s0,sp,404
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7e2:	0000                	unimp
     7e4:	0001                	nop
            ri[i - (N + 1)] = res[i];
     7e6:	8e5f 000b ca00      	0xca00000b8e5f
            temp[i] = ri_2[i] - ri[i];
     7ec:	0100000b          	0x100000b
     7f0:	5f00                	lw	s0,56(a4)
     7f2:	0bca                	slli	s7,s7,0x12
     7f4:	0000                	unimp
     7f6:	0bcc                	addi	a1,sp,468
     7f8:	0000                	unimp
     7fa:	7f7f0003          	lb	zero,2039(t5) # 1b7f7 <_stack_start+0xb7f7>
     7fe:	cc9f 000b ee00      	0xee00000bcc9f
        for (i = 0; i < N + 1; ++i) {
     804:	0100000b          	0x100000b
                temp[i] = temp[i] + mod;
     808:	5f00                	lw	s0,56(a4)
            while (temp[i] < 0) {
     80a:	0bee                	slli	s7,s7,0x1b
     80c:	0000                	unimp
     80e:	0bfe                	slli	s7,s7,0x1f
            temp[i] = temp[i] % mod;
     810:	0000                	unimp
     812:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     814:	fe59                	bnez	a2,7b2 <ext_euclid+0x17e>
     816:	0000000b          	0xb
            temp[i] = temp[i] % mod;
     81a:	000c                	0xc
        for (i = 0; i < N + 1; ++i) {
     81c:	0300                	addi	s0,sp,384
            qi_1[i] = res1[i];
     81e:	7900                	flw	fs0,48(a0)
     820:	9f7f                	0x9f7f
     822:	0c00                	addi	s0,sp,528
     824:	0000                	unimp
     826:	0c02                	c.slli64	s8
     828:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     82a:	0001                	nop
            qi_1[i] = res1[i];
     82c:	0259                	addi	tp,tp,22
        for (i = 0; i < N + 1; ++i) {
     82e:	000c                	0xc
                qi_1[i] = qi_1[i] + mod;
     830:	0600                	addi	s0,sp,768
     832:	000c                	0xc
            while (qi_1[i] < 0) {
     834:	0100                	addi	s0,sp,128
     836:	5e00                	lw	s0,56(a2)
     838:	0c06                	slli	s8,s8,0x1
            qi_1[i] = qi_1[i] % mod;
     83a:	0000                	unimp
     83c:	0c10                	addi	a2,sp,528
        for (i = 0; i < N + 1; ++i) {
     83e:	0000                	unimp
     840:	7f7e0003          	lb	zero,2039(t3) # 67f7 <_stack_len+0x27f7>
            qi_1[i] = qi_1[i] % mod;
     844:	109f 000c 1200      	0x1200000c109f
            temp[i] = res2[i];
     84a:	000c                	0xc
     84c:	0100                	addi	s0,sp,128
     84e:	5e00                	lw	s0,56(a2)
     850:	0c12                	slli	s8,s8,0x4
     852:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     854:	0c22                	slli	s8,s8,0x8
            temp[i] = res2[i];
     856:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     858:	0001                	nop
                temp[i] = temp[i] + mod;
     85a:	226a                	fld	ft4,152(sp)
     85c:	000c                	0xc
     85e:	3200                	fld	fs0,32(a2)
            while (temp[i] < 0) {
     860:	000c                	0xc
     862:	0100                	addi	s0,sp,128
     864:	5f00                	lw	s0,56(a4)
     866:	0c32                	slli	s8,s8,0xc
            temp[i] = temp[i] % mod;
     868:	0000                	unimp
     86a:	0c34                	addi	a3,sp,536
        for (i = 0; i < N + 1; ++i) {
     86c:	0000                	unimp
     86e:	7f7f0003          	lb	zero,2039(t5)
            temp[i] = temp[i] % mod;
     872:	349f 000c 3600      	0x3600000c349f
            ti[i] = ti_2[i] - temp[i];
     878:	000c                	0xc
     87a:	0100                	addi	s0,sp,128
     87c:	5f00                	lw	s0,56(a4)
	...
     886:	0b3c                	addi	a5,sp,408
     888:	0000                	unimp
     88a:	0b8e                	slli	s7,s7,0x3
        for (i = 0; i < N + 1; ++i) {
     88c:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     88e:	0006                	c.slli	zero,0x1
     890:	001afc03          	0x1afc03
        for (i = 0; i < N + 1; ++i) {
     894:	9f00                	0x9f00
	...
            while (ti[i] < 0) {
     89e:	0a72                	slli	s4,s4,0x1c
            ti[i] = ti[i] % mod;
     8a0:	0000                	unimp
     8a2:	0b38                	addi	a4,sp,408
        for (i = 0; i < N + 1; ++i) {
     8a4:	0000                	unimp
     8a6:	0001                	nop
            ti[i] = ti[i] % mod;
     8a8:	3862                	fld	fa6,56(sp)
     8aa:	6c00000b          	0x6c00000b
            ri_2[i] = ri_1[i];
     8ae:	0300000b          	0x300000b
     8b2:	8600                	0x8600
     8b4:	9f7f                	0x9f7f
     8b6:	0b6c                	addi	a1,sp,412
        for (i = 0; i < N + 1; ++i) {
     8b8:	0000                	unimp
            ri_2[i] = ri_1[i];
     8ba:	0b8e                	slli	s7,s7,0x3
            ri_1[i] = ri[i];
     8bc:	0000                	unimp
     8be:	0004                	0x4
     8c0:	9f5a01f3          	0x9f5a01f3
            ti_2[i] = ti_1[i];
     8c4:	0b8e                	slli	s7,s7,0x3
     8c6:	0000                	unimp
     8c8:	0c22                	slli	s8,s8,0x8
     8ca:	0000                	unimp
            ri_1[i] = ri[i];
     8cc:	0001                	nop
            ti_2[i] = ti_1[i];
     8ce:	2262                	fld	ft4,24(sp)
     8d0:	000c                	0xc
     8d2:	3600                	fld	fs0,40(a2)
     8d4:	000c                	0xc
            controlR += ri[i];
     8d6:	0300                	addi	s0,sp,384
            ti_2[i] = ti_1[i];
     8d8:	8600                	0x8600
     8da:	9f7f                	0x9f7f
	...
            qi_1[i] = 0;
     8e4:	0634                	addi	a3,sp,776
     8e6:	0000                	unimp
     8e8:	06aa                	slli	a3,a3,0xa
     8ea:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8ec:	0001                	nop
     8ee:	aa5a                	fsd	fs6,272(sp)
            if (((ri_2[0] * j) % mod) == 1)
     8f0:	0006                	c.slli	zero,0x1
     8f2:	ae00                	fsd	fs0,24(a2)
     8f4:	0006                	c.slli	zero,0x1
     8f6:	0400                	addi	s0,sp,512
     8f8:	f300                	fsw	fs0,32(a4)
     8fa:	5a01                	li	s4,-32
     8fc:	ae9f 0006 e400      	0xe4000006ae9f
        for (j = 0; j < mod; ++j) {
     902:	0006                	c.slli	zero,0x1
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     904:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     906:	5a00                	lw	s0,48(a2)
     908:	06e4                	addi	s1,sp,844
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     90a:	0000                	unimp
     90c:	0918                	addi	a4,sp,144
     90e:	0000                	unimp
     910:	0004                	0x4
     912:	9f5a01f3          	0x9f5a01f3
	...
int* generate_keys(int N, int p, int q){
     91e:	0634                	addi	a3,sp,776
     920:	0000                	unimp
     922:	06aa                	slli	a3,a3,0xa
     924:	0000                	unimp
     926:	0001                	nop
     928:	0006aa5b          	0x6aa5b
     92c:	ae00                	fsd	fs0,24(a2)
     92e:	0006                	c.slli	zero,0x1
     930:	0400                	addi	s0,sp,512
     932:	f300                	fsw	fs0,32(a4)
     934:	5b01                	li	s6,-32
     936:	ae9f 0006 e400      	0xe4000006ae9f
     93c:	0006                	c.slli	zero,0x1
     93e:	0100                	addi	s0,sp,128
     940:	5b00                	lw	s0,48(a4)
     942:	06e4                	addi	s1,sp,844
     944:	0000                	unimp
     946:	0918                	addi	a4,sp,144
     948:	0000                	unimp
     94a:	0004                	0x4
     94c:	9f5b01f3          	0x9f5b01f3
	...
     958:	0634                	addi	a3,sp,776
     95a:	0000                	unimp
     95c:	0698                	addi	a4,sp,832
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     95e:	0000                	unimp
     960:	0001                	nop
     962:	985c                	0x985c
resultkon[0] = 0xAAAAAAA0;
     964:	0006                	c.slli	zero,0x1
     966:	a400                	fsd	fs0,8(s0)
     968:	01000007          	0x1000007
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96c:	6200                	flw	fs0,0(a2)
     96e:	07a4                	addi	s1,sp,968
resultkon[0] = 0xAAAAAAA0;
     970:	0000                	unimp
     972:	07a6                	slli	a5,a5,0x9
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     974:	0000                	unimp
     976:	01830003          	lb	zero,24(t1) # ffff7018 <_stack_start+0xfffe7018>
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97a:	a69f 0007 c200      	0xc2000007a69f
     980:	04000007          	0x4000007
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     984:	f300                	fsw	fs0,32(a4)
     986:	5c01                	li	s8,-32
     988:	c29f 0007 1800      	0x18000007c29f
     98e:	0009                	c.nop	2
     990:	0100                	addi	s0,sp,128
     992:	6200                	flw	fs0,0(a2)
	...
     99c:	0634                	addi	a3,sp,776
     99e:	0000                	unimp
     9a0:	0698                	addi	a4,sp,832
     9a2:	0000                	unimp
     9a4:	0001                	nop
     9a6:	985d                	andi	s0,s0,-9
     9a8:	0006                	c.slli	zero,0x1
     9aa:	a200                	fsd	fs0,0(a2)
     9ac:	01000007          	0x1000007
     9b0:	5900                	lw	s0,48(a0)
     9b2:	07a2                	slli	a5,a5,0x8
     9b4:	0000                	unimp
     9b6:	07c2                	slli	a5,a5,0x10
     9b8:	0000                	unimp
     9ba:	0004                	0x4
     9bc:	9f5d01f3          	0x9f5d01f3
     9c0:	07c2                	slli	a5,a5,0x10
     9c2:	0000                	unimp
     9c4:	0918                	addi	a4,sp,144
     9c6:	0000                	unimp
     9c8:	0001                	nop
     9ca:	0059                	c.nop	22
     9cc:	0000                	unimp
     9ce:	0000                	unimp
     9d0:	0000                	unimp
     9d2:	9800                	0x9800
     9d4:	c2000007          	0xc2000007
     9d8:	06000007          	0x6000007
     9dc:	0300                	addi	s0,sp,384
     9de:	196c                	addi	a1,sp,188
     9e0:	0000                	unimp
     9e2:	009f 0000 0000      	0x9f
     9e8:	0000                	unimp
     9ea:	8c00                	0x8c00
     9ec:	0006                	c.slli	zero,0x1
     9ee:	a600                	fsd	fs0,8(a2)
    int polyR[N+1];
     9f0:	01000007          	0x1000007
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f4:	6300                	flw	fs0,0(a4)
    int polyR[N+1];
     9f6:	07a6                	slli	a5,a5,0x9
     9f8:	0000                	unimp
     9fa:	07c2                	slli	a5,a5,0x10
     9fc:	0000                	unimp
     9fe:	0006                	c.slli	zero,0x1
     a00:	315c01f3          	0x315c01f3
    polyR[N] = 1;
     a04:	9f1c                	0x9f1c
     a06:	07c2                	slli	a5,a5,0x10
     a08:	0000                	unimp
     a0a:	0918                	addi	a4,sp,144
     a0c:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a0e:	0001                	nop
     a10:	00000063          	beqz	zero,a10 <generate_keys+0xf8>
     a14:	0000                	unimp
     a16:	0000                	unimp
     a18:	8c00                	0x8c00
     a1a:	0006                	c.slli	zero,0x1
     a1c:	9800                	0x9800
     a1e:	0006                	c.slli	zero,0x1
     a20:	0200                	addi	s0,sp,256
     a22:	3000                	fld	fs0,32(s0)
     a24:	989f 0006 aa00      	0xaa000006989f
     a2a:	0006                	c.slli	zero,0x1
     a2c:	0100                	addi	s0,sp,128
     a2e:	5e00                	lw	s0,56(a2)
     a30:	06ae                	slli	a3,a3,0xb
     a32:	0000                	unimp
     a34:	06bc                	addi	a5,sp,840
     a36:	0000                	unimp
     a38:	0001                	nop
     a3a:	bc5e                	fsd	fs7,56(sp)
     a3c:	0006                	c.slli	zero,0x1
     a3e:	e000                	fsw	fs0,0(s0)
     a40:	0006                	c.slli	zero,0x1
     a42:	0300                	addi	s0,sp,384
     a44:	7e00                	flw	fs0,56(a2)
     a46:	9f7f                	0x9f7f
     a48:	06e0                	addi	s0,sp,844
     a4a:	0000                	unimp
     a4c:	06e4                	addi	s1,sp,844
     a4e:	0000                	unimp
     a50:	0001                	nop
     a52:	e45e                	fsw	fs7,8(sp)
     a54:	0006                	c.slli	zero,0x1
     a56:	f400                	fsw	fs0,40(s0)
     a58:	0006                	c.slli	zero,0x1
     a5a:	0100                	addi	s0,sp,128
     a5c:	5d00                	lw	s0,56(a0)
     a5e:	06f4                	addi	a3,sp,844
     a60:	0000                	unimp
     a62:	06f6                	slli	a3,a3,0x1d
     a64:	0000                	unimp
     a66:	7f7d0003          	lb	zero,2039(s10) # 1d7f7 <_stack_start+0xd7f7>
     a6a:	f69f 0006 0e00      	0xe000006f69f
     a70:	01000007          	0x1000007
    polyR[0] = -1;
     a74:	5d00                	lw	s0,56(a0)
    for(i = 1; i < N; ++i){
     a76:	0716                	slli	a4,a4,0x5
     a78:	0000                	unimp
     a7a:	071a                	slli	a4,a4,0x6
     a7c:	0000                	unimp
    for (i = N; i < 55; ++i ){
     a7e:	0001                	nop
     a80:	1a62                	slli	s4,s4,0x38
     a82:	24000007          	0x24000007
    for(i = 0; i < N; ++i){
     a86:	01000007          	0x1000007
        random_keys[i] = f[i];
     a8a:	5f00                	lw	s0,56(a4)
     a8c:	0726                	slli	a4,a4,0x9
     a8e:	0000                	unimp
    for(i = 0; i < N; ++i){
     a90:	072e                	slli	a4,a4,0xb
     a92:	0000                	unimp
     a94:	0001                	nop
     a96:	305e                	fld	ft0,496(sp)
    for(i = N; i < (2*N); ++i){
     a98:	38000007          	0x38000007
     a9c:	01000007          	0x1000007
        random_keys[i] = g[i-N];
     aa0:	5d00                	lw	s0,56(a0)
     aa2:	0740                	addi	s0,sp,900
     aa4:	0000                	unimp
     aa6:	0742                	slli	a4,a4,0x10
    for(i = N; i < (2*N); ++i){
     aa8:	0000                	unimp
     aaa:	0002                	c.slli64	zero
    for(i = (2*N); i < (3*N); ++i){
     aac:	9f30                	0x9f30
     aae:	0742                	slli	a4,a4,0x10
     ab0:	0000                	unimp
    fp = ext_euclid(polyR, f, (N+1), p);
     ab2:	074a                	slli	a4,a4,0x12
     ab4:	0000                	unimp
     ab6:	0001                	nop
     ab8:	4a5f 0007 5400      	0x540000074a5f
    for(i = (2*N); i < (3*N); ++i){
     abe:	01000007          	0x1000007
        random_keys[i] = fp[i-(2*N)];
     ac2:	5d00                	lw	s0,56(a0)
     ac4:	075c                	addi	a5,sp,900
     ac6:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     ac8:	075e                	slli	a4,a4,0x17
     aca:	0000                	unimp
    fq = ext_euclid(polyR, f, (N+1), q);
     acc:	0002                	c.slli64	zero
     ace:	9f30                	0x9f30
     ad0:	075e                	slli	a4,a4,0x17
     ad2:	0000                	unimp
     ad4:	0764                	addi	s1,sp,908
     ad6:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     ad8:	0001                	nop
     ada:	645f 0007 7200      	0x72000007645f
        random_keys[i] = fq[i-(3*N)];
     ae0:	01000007          	0x1000007
     ae4:	5e00                	lw	s0,56(a2)
     ae6:	0774                	addi	a3,sp,908
    for(i = (3*N); i < (4*N); ++i){
     ae8:	0000                	unimp
     aea:	0788                	addi	a0,sp,960
    fg = polymult2(fq, N, g, N, 0);
     aec:	0000                	unimp
     aee:	0001                	nop
     af0:	945d                	srai	s0,s0,0x37
     af2:	c2000007          	0xc2000007
     af6:	01000007          	0x1000007
    for(i = 0; i < (2*N-1); ++i){
     afa:	5e00                	lw	s0,56(a2)
     afc:	07c2                	slli	a5,a5,0x10
     afe:	0000                	unimp
     b00:	07d2                	slli	a5,a5,0x14
     b02:	0000                	unimp
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b04:	0001                	nop
     b06:	d25d                	beqz	a2,aac <generate_keys+0x194>
     b08:	d8000007          	0xd8000007
    for(i = (4*N); i < (5*N); ++i){
     b0c:	03000007          	0x3000007
     b10:	7d00                	flw	fs0,56(a0)
     b12:	9f7f                	0x9f7f
     b14:	07d8                	addi	a4,sp,964
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b16:	0000                	unimp
     b18:	07da                	slli	a5,a5,0x16
     b1a:	0000                	unimp
     b1c:	0001                	nop
    for(i = (4*N); i < (5*N); ++i){
     b1e:	da5d                	beqz	a2,ad4 <generate_keys+0x1bc>
     b20:	e4000007          	0xe4000007
    for(i = (5*N); i < (6*N+1); ++i){
     b24:	01000007          	0x1000007
        random_keys[i] = polyR[i-(5*N)];
     b28:	5f00                	lw	s0,56(a4)
     b2a:	07e4                	addi	s1,sp,972
     b2c:	0000                	unimp
     b2e:	07ea                	slli	a5,a5,0x1a
    for(i = (5*N); i < (6*N+1); ++i){
     b30:	0000                	unimp
     b32:	7f7f0003          	lb	zero,2039(t5)
     b36:	ea9f 0007 ec00      	0xec000007ea9f
resultkon[0] = 0xAAAAAAA1;
     b3c:	01000007          	0x1000007
     b40:	5f00                	lw	s0,56(a4)
     b42:	07ec                	addi	a1,sp,972
     b44:	0000                	unimp
     b46:	07fe                	slli	a5,a5,0x1f
}
     b48:	0000                	unimp
     b4a:	0001                	nop
     b4c:	fe5e                	fsw	fs7,60(sp)
     b4e:	02000007          	0x2000007
     b52:	0008                	0x8
     b54:	0300                	addi	s0,sp,384
     b56:	7e00                	flw	fs0,56(a2)
     b58:	9f7f                	0x9f7f
     b5a:	0802                	c.slli64	a6
     b5c:	0000                	unimp
     b5e:	0806                	slli	a6,a6,0x1
     b60:	0000                	unimp
     b62:	0001                	nop
     b64:	065e                	slli	a2,a2,0x17
     b66:	0008                	0x8
     b68:	1600                	addi	s0,sp,800
     b6a:	0008                	0x8
     b6c:	0100                	addi	s0,sp,128
     b6e:	5d00                	lw	s0,56(a0)
     b70:	0816                	slli	a6,a6,0x5
     b72:	0000                	unimp
     b74:	081c                	addi	a5,sp,16
     b76:	0000                	unimp
     b78:	7f7d0003          	lb	zero,2039(s10)
     b7c:	1c9f 0008 1e00      	0x1e0000081c9f
     b82:	0008                	0x8
     b84:	0100                	addi	s0,sp,128
     b86:	5d00                	lw	s0,56(a0)
     b88:	081e                	slli	a6,a6,0x7
     b8a:	0000                	unimp
     b8c:	082c                	addi	a1,sp,24
        polyR[i] = 0;
     b8e:	0000                	unimp
     b90:	0001                	nop
     b92:	2c5f 0008 2e00      	0x2e0000082c5f
    for(i = 1; i < N; ++i){
     b98:	0008                	0x8
     b9a:	0300                	addi	s0,sp,384
        f[i] = 0;
     b9c:	7f00                	flw	fs0,56(a4)
     b9e:	9f7f                	0x9f7f
     ba0:	082e                	slli	a6,a6,0xb
     ba2:	0000                	unimp
     ba4:	0830                	addi	a2,sp,24
     ba6:	0000                	unimp
     ba8:	0001                	nop
        g[i] = 0;
     baa:	305f 0008 4000      	0x40000008305f
     bb0:	0008                	0x8
     bb2:	0100                	addi	s0,sp,128
    for (i = N; i < 55; ++i ){
     bb4:	5d00                	lw	s0,56(a0)
     bb6:	0840                	addi	s0,sp,20
        random_keys[i] = f[i];
     bb8:	0000                	unimp
     bba:	0846                	slli	a6,a6,0x11
     bbc:	0000                	unimp
     bbe:	7f7d0003          	lb	zero,2039(s10)
     bc2:	469f 0008 4800      	0x48000008469f
    for(i = 0; i < N; ++i){
     bc8:	0008                	0x8
        random_keys[i] = f[i];
     bca:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     bcc:	5d00                	lw	s0,56(a0)
        random_keys[i] = g[i-N];
     bce:	0848                	addi	a0,sp,20
     bd0:	0000                	unimp
     bd2:	0856                	slli	a6,a6,0x15
     bd4:	0000                	unimp
     bd6:	0001                	nop
    for(i = N; i < (2*N); ++i){
     bd8:	565f 0008 5800      	0x58000008565f
        random_keys[i] = fp[i-(2*N)];
     bde:	0008                	0x8
     be0:	0300                	addi	s0,sp,384
     be2:	7f00                	flw	fs0,56(a4)
     be4:	9f7f                	0x9f7f
     be6:	0858                	addi	a4,sp,20
    for(i = (2*N); i < (3*N); ++i){
     be8:	0000                	unimp
     bea:	085a                	slli	a6,a6,0x16
     bec:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     bee:	0001                	nop
     bf0:	5a5f 0008 6e00      	0x6e0000085a5f
     bf6:	0008                	0x8
     bf8:	0100                	addi	s0,sp,128
     bfa:	5e00                	lw	s0,56(a2)
    for(i = (3*N); i < (4*N); ++i){
     bfc:	086e                	slli	a6,a6,0x1b
        random_keys[i] = fq[i-(3*N)];
     bfe:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     c00:	0874                	addi	a3,sp,28
        fg[i] = fg[i]*p;
     c02:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     c04:	7f7e0003          	lb	zero,2039(t3)
        fg[i] = fg[i]*p;
     c08:	749f 0008 8e00      	0x8e000008749f
     c0e:	0008                	0x8
    for(i = 0; i < (2*N-1); ++i){
     c10:	0100                	addi	s0,sp,128
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c12:	5e00                	lw	s0,56(a2)
     c14:	088e                	slli	a7,a7,0x3
     c16:	0000                	unimp
     c18:	0892                	slli	a7,a7,0x4
     c1a:	0000                	unimp
     c1c:	7f7e0003          	lb	zero,2039(t3)
    for(i = (4*N); i < (5*N); ++i){
     c20:	929f 0008 9600      	0x96000008929f
        random_keys[i] = polyR[i-(5*N)];
     c26:	0008                	0x8
     c28:	0100                	addi	s0,sp,128
     c2a:	5e00                	lw	s0,56(a2)
     c2c:	0896                	slli	a7,a7,0x5
     c2e:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     c30:	08a6                	slli	a7,a7,0x9
        random_keys[i] = polyR[i-(5*N)];
     c32:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     c34:	0001                	nop
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c36:	a65d                	j	fdc <main+0x4>
resultkon[0] = 0xBBBBBBB0;
     c38:	0008                	0x8
     c3a:	ac00                	fsd	fs0,24(s0)
     c3c:	0008                	0x8
     c3e:	0300                	addi	s0,sp,384
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c40:	7d00                	flw	fs0,56(a0)
     c42:	9f7f                	0x9f7f
     c44:	08ac                	addi	a1,sp,88
     c46:	0000                	unimp
     c48:	08ba                	slli	a7,a7,0xe
     c4a:	0000                	unimp
     c4c:	0001                	nop
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c4e:	ba5d                	j	604 <polydiv+0x222>
     c50:	0008                	0x8
     c52:	ec00                	fsw	fs0,24(s0)
     c54:	0008                	0x8
     c56:	0300                	addi	s0,sp,384
     c58:	7d00                	flw	fs0,56(a0)
resultkon[0] = 0xBBBBBBB0;
     c5a:	9f7f                	0x9f7f
     c5c:	08ec                	addi	a1,sp,92
     c5e:	0000                	unimp
     c60:	08f0                	addi	a2,sp,92
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c62:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c64:	0001                	nop
     c66:	045d                	addi	s0,s0,23
     c68:	0009                	c.nop	2
     c6a:	0800                	addi	s0,sp,16
     c6c:	0009                	c.nop	2
resultkon[0] = 0xBBBBBBB0;
     c6e:	0100                	addi	s0,sp,128
     c70:	5e00                	lw	s0,56(a2)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c72:	0908                	addi	a0,sp,144
    temp = polymult(public_key,N,random_val,48,q,0);
     c74:	0000                	unimp
     c76:	0916                	slli	s2,s2,0x5
     c78:	0000                	unimp
     c7a:	7f7e0003          	lb	zero,2039(t3)
     c7e:	169f 0009 1800      	0x18000009169f
     c84:	0009                	c.nop	2
     c86:	0100                	addi	s0,sp,128
    for(i = 0; i < 48; ++i){
     c88:	5e00                	lw	s0,56(a2)
	...
        temp[i] = temp[i] + message[i];
     c92:	0788                	addi	a0,sp,960
     c94:	0000                	unimp
     c96:	07c2                	slli	a5,a5,0x10
     c98:	0000                	unimp
     c9a:	0001                	nop
     c9c:	f05f 0008 1800      	0x18000008f05f
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     ca2:	0009                	c.nop	2
     ca4:	0100                	addi	s0,sp,128
     ca6:	5f00                	lw	s0,56(a4)
	...
     cb0:	068a                	slli	a3,a3,0x2
     cb2:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     cb4:	07b4                	addi	a3,sp,968
     cb6:	0000                	unimp
     cb8:	0002                	c.slli64	zero
     cba:	008a                	slli	ra,ra,0x2
     cbc:	07c2                	slli	a5,a5,0x10
     cbe:	0000                	unimp
}
     cc0:	0918                	addi	a4,sp,144
     cc2:	0000                	unimp
resultkon[0] = 0xBBBBBBB1;
     cc4:	0002                	c.slli64	zero
     cc6:	008a                	slli	ra,ra,0x2
	...
}
     cd0:	068a                	slli	a3,a3,0x2
     cd2:	0000                	unimp
     cd4:	07b6                	slli	a5,a5,0xd
     cd6:	0000                	unimp
     cd8:	0002                	c.slli64	zero
     cda:	07c2008b          	0x7c2008b
        CT[i-(2*N)] = CT[i];
     cde:	0000                	unimp
     ce0:	0918                	addi	a4,sp,144
     ce2:	0000                	unimp
     ce4:	0002                	c.slli64	zero
    for(i = (2*N); i < (3*N); ++i){
     ce6:	0000008b          	0x8b
        CT[i-(2*N)] = CT[i];
     cea:	0000                	unimp
     cec:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     cee:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cf0:	068a                	slli	a3,a3,0x2
     cf2:	0000                	unimp
     cf4:	07ac                	addi	a1,sp,968
     cf6:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf8:	0002                	c.slli64	zero
     cfa:	0086                	slli	ra,ra,0x1
     cfc:	07ac                	addi	a1,sp,968
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cfe:	0000                	unimp
     d00:	07b6                	slli	a5,a5,0xd
    resultkon[0] = 0xCCCCCCC0;
     d02:	0000                	unimp
     d04:	000d                	c.nop	3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d06:	01f3008b          	0x1f3008b
    resultkon[0] = 0xCCCCCCC0;
     d0a:	325c                	fld	fa5,160(a2)
     d0c:	2324                	fld	fs1,64(a4)
     d0e:	1af0090f          	0x1af0090f
     d12:	c21c                	sw	a5,0(a2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d14:	18000007          	0x18000007
     d18:	0009                	c.nop	2
     d1a:	0200                	addi	s0,sp,256
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d1c:	8600                	0x8600
	...
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d26:	8a00                	0x8a00
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d28:	0006                	c.slli	zero,0x1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d2a:	a800                	fsd	fs0,16(s0)
     d2c:	02000007          	0x2000007
     d30:	8400                	0x8400
     d32:	a800                	fsd	fs0,16(s0)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d34:	ac000007          	0xac000007
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d38:	0d000007          	0xd000007
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d3c:	8600                	0x8600
     d3e:	f300                	fsw	fs0,32(a4)
     d40:	5c01                	li	s8,-32
     d42:	2432                	fld	fs0,264(sp)
     d44:	f0090f23          	sb	zero,-226(s2)
     d48:	1c1a                	slli	s8,s8,0x26
     d4a:	07ac                	addi	a1,sp,968
     d4c:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4e:	07b6                	slli	a5,a5,0xd
     d50:	0000                	unimp
     d52:	008b000f          	0x8b000f
     d56:	325c01f3          	0x325c01f3
        if(a2[i] <= q/2)
     d5a:	2324                	fld	fs1,64(a4)
     d5c:	1af0090f          	0x1af0090f
    for (i = 0; i < N; ++i){
     d60:	2431                	jal	f6c <memset+0x3c>
     d62:	c21c                	sw	a5,0(a2)
    c = polymult2(secret_key_fp,N,a2,N,0);
     d64:	18000007          	0x18000007
     d68:	0009                	c.nop	2
     d6a:	0200                	addi	s0,sp,256
     d6c:	8400                	0x8400
	...
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d76:	8a00                	0x8a00
     d78:	0006                	c.slli	zero,0x1
     d7a:	ae00                	fsd	fs0,24(a2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d7c:	02000007          	0x2000007
     d80:	8700                	0x8700
}
     d82:	ae00                	fsd	fs0,24(a2)
     d84:	b6000007          	0xb6000007
    resultkon[0] = 0xCCCCCCC1;
     d88:	0f000007          	0xf000007
     d8c:	8b00                	0x8b00
     d8e:	f300                	fsw	fs0,32(a4)
     d90:	5c01                	li	s8,-32
}
     d92:	2432                	fld	fs0,264(sp)
     d94:	f0090f23          	sb	zero,-226(s2)
     d98:	331a                	fld	ft6,416(sp)
     d9a:	1c1e                	slli	s8,s8,0x27
     d9c:	07c2                	slli	a5,a5,0x10
     d9e:	0000                	unimp
     da0:	0918                	addi	a4,sp,144
     da2:	0000                	unimp
     da4:	0002                	c.slli64	zero
        a2[i-(2*N)] = a2[i];
     da6:	00000087          	0x87
     daa:	0000                	unimp
     dac:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     dae:	0000                	unimp
     db0:	068a                	slli	a3,a3,0x2
        a2[i-(2*N)] = a2[i];
     db2:	0000                	unimp
     db4:	07aa                	slli	a5,a5,0xa
    for(i = (2*N); i < ((2*N)+N); ++i){
     db6:	0000                	unimp
        if(a2[i] <= q/2)
     db8:	0002                	c.slli64	zero
     dba:	0085                	addi	ra,ra,1
     dbc:	07aa                	slli	a5,a5,0xa
            a2[i] = (-1)*(q-a2[i]);
     dbe:	0000                	unimp
     dc0:	07ae                	slli	a5,a5,0xb
     dc2:	0000                	unimp
    for (i = 0; i < N; ++i){
     dc4:	000d                	c.nop	3
     dc6:	01f30087          	0x1f30087
        c2[i-(2*N)] = c2[i];
     dca:	325c                	fld	fa5,160(a2)
     dcc:	2324                	fld	fs1,64(a4)
     dce:	1af0090f          	0x1af0090f
    for(i = (2*N); i < ((2*N)+N); ++i){
     dd2:	ae1c                	fsd	fa5,24(a2)
     dd4:	b6000007          	0xb6000007
        c2[i-(2*N)] = c2[i];
     dd8:	0f000007          	0xf000007
     ddc:	8b00                	0x8b00
     dde:	f300                	fsw	fs0,32(a4)
     de0:	5c01                	li	s8,-32
     de2:	2432                	fld	fs0,264(sp)
     de4:	f0090f23          	sb	zero,-226(s2)
     de8:	321a                	fld	ft4,416(sp)
     dea:	1c24                	addi	s1,sp,568
     dec:	07c2                	slli	a5,a5,0x10
     dee:	0000                	unimp
     df0:	0918                	addi	a4,sp,144
     df2:	0000                	unimp
     df4:	0002                	c.slli64	zero
     df6:	0085                	addi	ra,ra,1
	...
     e00:	068c                	addi	a1,sp,832
     e02:	0000                	unimp
     e04:	079c                	addi	a5,sp,960
     e06:	0000                	unimp
     e08:	0002                	c.slli64	zero
     e0a:	0072                	c.slli	zero,0x1c
     e0c:	079c                	addi	a5,sp,960
     e0e:	0000                	unimp
     e10:	07b2                	slli	a5,a5,0xc
     e12:	0000                	unimp
     e14:	0002                	c.slli64	zero
     e16:	0089                	addi	ra,ra,2
     e18:	07b2                	slli	a5,a5,0xc
     e1a:	0000                	unimp
     e1c:	07b6                	slli	a5,a5,0xd
     e1e:	0000                	unimp
     e20:	008b000f          	0x8b000f
     e24:	325c01f3          	0x325c01f3
     e28:	2324                	fld	fs1,64(a4)
     e2a:	1af0090f          	0x1af0090f
     e2e:	1e35                	addi	t3,t3,-19
     e30:	c21c                	sw	a5,0(a2)
     e32:	18000007          	0x18000007
     e36:	0009                	c.nop	2
     e38:	0200                	addi	s0,sp,256
     e3a:	7200                	flw	fs0,32(a2)
	...
     e44:	1600                	addi	s0,sp,800
     e46:	3e000007          	0x3e000007
     e4a:	01000007          	0x1000007
     e4e:	5a00                	lw	s0,48(a2)
     e50:	07da                	slli	a5,a5,0x16
     e52:	0000                	unimp
     e54:	081e                	slli	a6,a6,0x7
     e56:	0000                	unimp
     e58:	0001                	nop
     e5a:	005a                	c.slli	zero,0x16
     e5c:	0000                	unimp
     e5e:	0000                	unimp
     e60:	0000                	unimp
     e62:	4000                	lw	s0,0(s0)
     e64:	5a000007          	0x5a000007
     e68:	01000007          	0x1000007
     e6c:	5a00                	lw	s0,48(a2)
     e6e:	081e                	slli	a6,a6,0x7
     e70:	0000                	unimp
     e72:	0848                	addi	a0,sp,20
     e74:	0000                	unimp
     e76:	0001                	nop
     e78:	005a                	c.slli	zero,0x16
     e7a:	0000                	unimp
     e7c:	0000                	unimp
     e7e:	0000                	unimp
     e80:	5c00                	lw	s0,56(s0)
     e82:	7e000007          	0x7e000007
     e86:	01000007          	0x1000007
     e8a:	5a00                	lw	s0,48(a2)
     e8c:	0848                	addi	a0,sp,20
     e8e:	0000                	unimp
     e90:	08ae                	slli	a7,a7,0xb
     e92:	0000                	unimp
     e94:	0001                	nop
     e96:	005a                	c.slli	zero,0x16
     e98:	0000                	unimp
     e9a:	0000                	unimp
     e9c:	0000                	unimp
     e9e:	8c00                	0x8c00
     ea0:	0006                	c.slli	zero,0x1
     ea2:	aa00                	fsd	fs0,16(a2)
     ea4:	0006                	c.slli	zero,0x1
     ea6:	0200                	addi	s0,sp,256
     ea8:	3100                	fld	fs0,32(a0)
     eaa:	ae9f 0006 e400      	0xe4000006ae9f
     eb0:	0006                	c.slli	zero,0x1
     eb2:	0200                	addi	s0,sp,256
     eb4:	3100                	fld	fs0,32(a0)
     eb6:	7e9f 0007 9400      	0x940000077e9f
     ebc:	01000007          	0x1000007
     ec0:	5e00                	lw	s0,56(a2)
     ec2:	08ae                	slli	a7,a7,0xb
     ec4:	0000                	unimp
     ec6:	08d8                	addi	a4,sp,84
     ec8:	0000                	unimp
     eca:	0001                	nop
     ecc:	ec5e                	fsw	fs7,24(sp)
     ece:	0008                	0x8
     ed0:	0400                	addi	s0,sp,512
     ed2:	0009                	c.nop	2
     ed4:	0100                	addi	s0,sp,128
     ed6:	5e00                	lw	s0,56(a2)
	...
     ee0:	068a                	slli	a3,a3,0x2
     ee2:	0000                	unimp
     ee4:	07a6                	slli	a5,a5,0x9
     ee6:	0000                	unimp
     ee8:	0001                	nop
     eea:	0007a663          	0x7a663
     eee:	c200                	sw	s0,0(a2)
     ef0:	06000007          	0x6000007
     ef4:	f300                	fsw	fs0,32(a4)
     ef6:	5c01                	li	s8,-32
     ef8:	1c31                	addi	s8,s8,-20
     efa:	c29f 0007 1800      	0x18000007c29f
     f00:	0009                	c.nop	2
     f02:	0100                	addi	s0,sp,128
     f04:	6300                	flw	fs0,0(a4)
	...
     f0e:	068a                	slli	a3,a3,0x2
     f10:	0000                	unimp
     f12:	07a6                	slli	a5,a5,0x9
     f14:	0000                	unimp
     f16:	0001                	nop
     f18:	0007a663          	0x7a663
     f1c:	c200                	sw	s0,0(a2)
     f1e:	06000007          	0x6000007
     f22:	f300                	fsw	fs0,32(a4)
     f24:	5c01                	li	s8,-32
     f26:	1c31                	addi	s8,s8,-20
     f28:	c29f 0007 1800      	0x18000007c29f
     f2e:	0009                	c.nop	2
     f30:	0100                	addi	s0,sp,128
     f32:	6300                	flw	fs0,0(a4)
	...
     f3c:	068a                	slli	a3,a3,0x2
     f3e:	0000                	unimp
     f40:	07a6                	slli	a5,a5,0x9
     f42:	0000                	unimp
     f44:	0001                	nop
     f46:	0007a663          	0x7a663
     f4a:	c200                	sw	s0,0(a2)
     f4c:	06000007          	0x6000007
     f50:	f300                	fsw	fs0,32(a4)
     f52:	5c01                	li	s8,-32
     f54:	1c31                	addi	s8,s8,-20
     f56:	c29f 0007 1800      	0x18000007c29f
     f5c:	0009                	c.nop	2
     f5e:	0100                	addi	s0,sp,128
     f60:	6300                	flw	fs0,0(a4)
	...
     f6a:	068a                	slli	a3,a3,0x2
     f6c:	0000                	unimp
     f6e:	07a6                	slli	a5,a5,0x9
     f70:	0000                	unimp
     f72:	0001                	nop
     f74:	0007a663          	0x7a663
     f78:	c200                	sw	s0,0(a2)
     f7a:	06000007          	0x6000007
     f7e:	f300                	fsw	fs0,32(a4)
     f80:	5c01                	li	s8,-32
     f82:	1c31                	addi	s8,s8,-20
     f84:	c29f 0007 1800      	0x18000007c29f
     f8a:	0009                	c.nop	2
     f8c:	0100                	addi	s0,sp,128
     f8e:	6300                	flw	fs0,0(a4)
	...
     f98:	068a                	slli	a3,a3,0x2
     f9a:	0000                	unimp
     f9c:	07a6                	slli	a5,a5,0x9
     f9e:	0000                	unimp
     fa0:	0001                	nop
     fa2:	0007a663          	0x7a663
     fa6:	c200                	sw	s0,0(a2)
     fa8:	06000007          	0x6000007
     fac:	f300                	fsw	fs0,32(a4)
     fae:	5c01                	li	s8,-32
     fb0:	1c31                	addi	s8,s8,-20
     fb2:	c29f 0007 1800      	0x18000007c29f
     fb8:	0009                	c.nop	2
     fba:	0100                	addi	s0,sp,128
     fbc:	6300                	flw	fs0,0(a4)
	...
     fc6:	068a                	slli	a3,a3,0x2
     fc8:	0000                	unimp
     fca:	07a6                	slli	a5,a5,0x9
     fcc:	0000                	unimp
     fce:	0001                	nop
     fd0:	0007a663          	0x7a663
     fd4:	c200                	sw	s0,0(a2)
     fd6:	06000007          	0x6000007
int main(){
     fda:	f300                	fsw	fs0,32(a4)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fdc:	5c01                	li	s8,-32
     fde:	1c31                	addi	s8,s8,-20
     fe0:	c29f 0007 1800      	0x18000007c29f
     fe6:	0009                	c.nop	2
     fe8:	0100                	addi	s0,sp,128
int main(){
     fea:	6300                	flw	fs0,0(a4)
	...
    keys = generate_keys(N, p, q);
     ff4:	068a                	slli	a3,a3,0x2
     ff6:	0000                	unimp
     ff8:	07a6                	slli	a5,a5,0x9
     ffa:	0000                	unimp
     ffc:	0001                	nop
     ffe:	0007a663          	0x7a663
    for(i = 0; i < N; ++i){
    1002:	c200                	sw	s0,0(a2)
    1004:	06000007          	0x6000007
        secret_key_f[i] = keys[i];
    1008:	f300                	fsw	fs0,32(a4)
    100a:	5c01                	li	s8,-32
    100c:	1c31                	addi	s8,s8,-20
    100e:	c29f 0007 1800      	0x18000007c29f
    for(i = 0; i < N; ++i){
    1014:	0009                	c.nop	2
    1016:	0100                	addi	s0,sp,128
    for(i = N; i < (2*N); ++i){
    1018:	6300                	flw	fs0,0(a4)
	...
    1022:	03e2                	slli	t2,t2,0x18
        secret_key_fp[i-(2*N)] = keys[i];
    1024:	0000                	unimp
    1026:	04e6                	slli	s1,s1,0x19
    1028:	0000                	unimp
    102a:	0001                	nop
    102c:	e65a                	fsw	fs6,12(sp)
    for(i = (2*N); i < (3*N); ++i){
    102e:	0004                	0x4
    1030:	3400                	fld	fs0,40(s0)
    for(i = (3*N); i < (4*N); ++i){
    1032:	0006                	c.slli	zero,0x1
    1034:	0400                	addi	s0,sp,512
    1036:	f300                	fsw	fs0,32(a4)
    1038:	5a01                	li	s4,-32
    103a:	009f 0000 0000      	0x9f
        public_key[i-(4*N)] = keys[i];
    1040:	0000                	unimp
    1042:	e200                	fsw	fs0,0(a2)
    1044:	e6000003          	lb	zero,-416(zero) # fffffe60 <_stack_start+0xfffefe60>
    for(i = (4*N); i < (5*N); ++i){
    1048:	0004                	0x4
    104a:	0100                	addi	s0,sp,128
    104c:	5b00                	lw	s0,48(a4)
    104e:	04e6                	slli	s1,s1,0x19
    1050:	0000                	unimp
    1052:	0504                	addi	s1,sp,640
        ring_poly[i-(5*N)] = keys[i];
    1054:	0000                	unimp
    1056:	0001                	nop
    1058:	0459                	addi	s0,s0,22
    105a:	0005                	c.nop	1
    105c:	2200                	fld	fs0,0(a2)
    for(i = (5*N); i < (6*N+1); ++i){
    105e:	0005                	c.nop	1
    1060:	0300                	addi	s0,sp,384
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1062:	8900                	0x8900
    1064:	9f01                	0x9f01
    1066:	0522                	slli	a0,a0,0x8
    1068:	0000                	unimp
    106a:	0532                	slli	a0,a0,0xc
    106c:	0000                	unimp
    106e:	0004                	0x4
    1070:	9f5b01f3          	0x9f5b01f3
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1074:	0532                	slli	a0,a0,0xc
    1076:	0000                	unimp
    1078:	0622                	slli	a2,a2,0x8
    107a:	0000                	unimp
    107c:	0001                	nop
    107e:	2259                	jal	1204 <__DTOR_END__+0x124>
    1080:	0006                	c.slli	zero,0x1
    1082:	3400                	fld	fs0,40(s0)
    1084:	0006                	c.slli	zero,0x1
            resultkon[0] = 0xDEDEDEDE;
    1086:	0300                	addi	s0,sp,384
    1088:	8900                	0x8900
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    108a:	9f01                	0x9f01
	...
            resultkon[0] = 0xDEDEDEDE;
    1094:	03e2                	slli	t2,t2,0x18
    1096:	0000                	unimp
    for(i = 0; i < 32; ++i){
    1098:	0460                	addi	s0,sp,524
    109a:	0000                	unimp
        if(!(message[i] == Dec_Message[i])){
    109c:	0001                	nop
    109e:	605c                	flw	fa5,4(s0)
    10a0:	0004                	0x4
    10a2:	6800                	flw	fs0,16(s0)
    10a4:	0004                	0x4
    10a6:	0400                	addi	s0,sp,512
    10a8:	f300                	fsw	fs0,32(a4)
    10aa:	5c01                	li	s8,-32
            resultkon[0] = 0xBABABABA;
    10ac:	689f 0004 c800      	0xc8000004689f
    10b2:	0004                	0x4
    10b4:	0100                	addi	s0,sp,128
}
    10b6:	5c00                	lw	s0,56(s0)
    10b8:	04c8                	addi	a0,sp,580
    10ba:	0000                	unimp
    10bc:	0634                	addi	a3,sp,776
    10be:	0000                	unimp
    10c0:	0004                	0x4
    10c2:	9f5c01f3          	0x9f5c01f3
	...
    for(i = 0; i < 32; ++i){
    10ce:	03e2                	slli	t2,t2,0x18
    10d0:	0000                	unimp
    10d2:	043c                	addi	a5,sp,520
    10d4:	0000                	unimp
    10d6:	0001                	nop
    10d8:	3c5d                	jal	b8e <generate_keys+0x276>
    10da:	0004                	0x4
    10dc:	1600                	addi	s0,sp,800
    10de:	0005                	c.nop	1
    10e0:	0100                	addi	s0,sp,128
    10e2:	6300                	flw	fs0,0(a4)
    10e4:	0516                	slli	a0,a0,0x5
    10e6:	0000                	unimp
    10e8:	0532                	slli	a0,a0,0xc
    10ea:	0000                	unimp
    10ec:	0004                	0x4
    10ee:	9f5d01f3          	0x9f5d01f3
    10f2:	0532                	slli	a0,a0,0xc
    10f4:	0000                	unimp
    10f6:	0634                	addi	a3,sp,776
    10f8:	0000                	unimp
    10fa:	0001                	nop
    10fc:	00000063          	beqz	zero,10fc <__DTOR_END__+0x1c>
    1100:	0000                	unimp
    1102:	0000                	unimp
    1104:	e200                	fsw	fs0,0(a2)
    1106:	3a000003          	lb	zero,928(zero) # 3a0 <polymult2+0x12e>
    110a:	0004                	0x4
    110c:	0100                	addi	s0,sp,128
    110e:	5e00                	lw	s0,56(a2)
    1110:	043a                	slli	s0,s0,0xe
    1112:	0000                	unimp
    1114:	0514                	addi	a3,sp,640
    1116:	0000                	unimp
    1118:	0001                	nop
    111a:	1462                	slli	s0,s0,0x38
    111c:	0005                	c.nop	1
    111e:	3200                	fld	fs0,32(a2)
    1120:	0005                	c.nop	1
    1122:	0400                	addi	s0,sp,512
    1124:	f300                	fsw	fs0,32(a4)
    1126:	5e01                	li	t3,-32
    1128:	329f 0005 3400      	0x34000005329f
    112e:	0006                	c.slli	zero,0x1
    1130:	0100                	addi	s0,sp,128
    1132:	6200                	flw	fs0,0(a2)
	...
    113c:	0460                	addi	s0,sp,524
    113e:	0000                	unimp
    1140:	0468                	addi	a0,sp,524
    1142:	0000                	unimp
    1144:	0001                	nop
    1146:	c866                	sw	s9,16(sp)
    1148:	0004                	0x4
    114a:	1c00                	addi	s0,sp,560
    114c:	0005                	c.nop	1
    114e:	0100                	addi	s0,sp,128
    1150:	6600                	flw	fs0,8(a2)
    1152:	0532                	slli	a0,a0,0xc
    1154:	0000                	unimp
    1156:	0634                	addi	a3,sp,776
    1158:	0000                	unimp
    115a:	0001                	nop
    115c:	0066                	c.slli	zero,0x19
    115e:	0000                	unimp
    1160:	0000                	unimp
    1162:	0000                	unimp
    1164:	e600                	fsw	fs0,8(a2)
    1166:	0004                	0x4
    1168:	ec00                	fsw	fs0,24(s0)
    116a:	0004                	0x4
    116c:	0100                	addi	s0,sp,128
    116e:	5f00                	lw	s0,56(a4)
    1170:	0532                	slli	a0,a0,0xc
    1172:	0000                	unimp
    1174:	053a                	slli	a0,a0,0xe
    1176:	0000                	unimp
    1178:	0001                	nop
    117a:	005f 0000 0000      	0x5f
    1180:	0000                	unimp
    1182:	3600                	fld	fs0,40(a2)
    1184:	0004                	0x4
    1186:	3c00                	fld	fs0,56(s0)
    1188:	0004                	0x4
    118a:	0200                	addi	s0,sp,256
    118c:	3000                	fld	fs0,32(s0)
    118e:	3c9f 0004 4a00      	0x4a0000043c9f
    1194:	0004                	0x4
    1196:	0100                	addi	s0,sp,128
    1198:	5d00                	lw	s0,56(a0)
    119a:	044a                	slli	s0,s0,0x12
    119c:	0000                	unimp
    119e:	044e                	slli	s0,s0,0x13
    11a0:	0000                	unimp
    11a2:	0001                	nop
    11a4:	4e5f 0004 6800      	0x680000044e5f
    11aa:	0004                	0x4
    11ac:	0100                	addi	s0,sp,128
    11ae:	6400                	flw	fs0,8(s0)
    11b0:	0468                	addi	a0,sp,524
    11b2:	0000                	unimp
    11b4:	047e                	slli	s0,s0,0x1f
    11b6:	0000                	unimp
    11b8:	0001                	nop
    11ba:	7e5d                	lui	t3,0xffff7
    11bc:	0004                	0x4
    11be:	8400                	0x8400
    11c0:	0004                	0x4
    11c2:	0300                	addi	s0,sp,384
    11c4:	7d00                	flw	fs0,56(a0)
    11c6:	9f7f                	0x9f7f
    11c8:	0484                	addi	s1,sp,576
    11ca:	0000                	unimp
    11cc:	04a0                	addi	s0,sp,584
    11ce:	0000                	unimp
    11d0:	0001                	nop
    11d2:	a05d                	j	1278 <_bss_start+0x14>
    11d4:	0004                	0x4
    11d6:	a600                	fsd	fs0,8(a2)
    11d8:	0004                	0x4
    11da:	0300                	addi	s0,sp,384
    11dc:	7d00                	flw	fs0,56(a0)
    11de:	9f7f                	0x9f7f
    11e0:	04a6                	slli	s1,s1,0x9
    11e2:	0000                	unimp
    11e4:	04ac                	addi	a1,sp,584
    11e6:	0000                	unimp
    11e8:	0001                	nop
    11ea:	ac5d                	j	14a0 <_bss_start+0x23c>
    11ec:	0004                	0x4
    11ee:	c200                	sw	s0,0(a2)
    11f0:	0004                	0x4
    11f2:	0100                	addi	s0,sp,128
    11f4:	5f00                	lw	s0,56(a4)
    11f6:	04c2                	slli	s1,s1,0x10
    11f8:	0000                	unimp
    11fa:	04d6                	slli	s1,s1,0x15
    11fc:	0000                	unimp
    11fe:	0001                	nop
    1200:	d664                	sw	s1,108(a2)
    1202:	0004                	0x4
    1204:	e600                	fsw	fs0,8(a2)
    1206:	0004                	0x4
    1208:	0100                	addi	s0,sp,128
    120a:	5f00                	lw	s0,56(a4)
    120c:	04f4                	addi	a3,sp,588
    120e:	0000                	unimp
    1210:	0504                	addi	s1,sp,640
    1212:	0000                	unimp
    1214:	0001                	nop
    1216:	045f 0005 1200      	0x12000005045f
    121c:	0005                	c.nop	1
    121e:	0100                	addi	s0,sp,128
    1220:	5900                	lw	s0,48(a0)
    1222:	0540                	addi	s0,sp,644
    1224:	0000                	unimp
    1226:	0544                	addi	s1,sp,644
    1228:	0000                	unimp
    122a:	0002                	c.slli64	zero
    122c:	9f30                	0x9f30
    122e:	0544                	addi	s1,sp,644
    1230:	0000                	unimp
    1232:	054a                	slli	a0,a0,0x12
    1234:	0000                	unimp
    1236:	0001                	nop
    1238:	565e                	lw	a2,244(sp)
    123a:	0005                	c.nop	1
    123c:	5a00                	lw	s0,48(a2)
    123e:	0005                	c.nop	1
    1240:	0200                	addi	s0,sp,256
    1242:	3000                	fld	fs0,32(s0)
    1244:	5a9f 0005 6200      	0x620000055a9f
    124a:	0005                	c.nop	1
    124c:	0100                	addi	s0,sp,128
    124e:	5d00                	lw	s0,56(a0)
    1250:	0562                	slli	a0,a0,0x18
    1252:	0000                	unimp
    1254:	056a                	slli	a0,a0,0x1a
    1256:	0000                	unimp
    1258:	0001                	nop
    125a:	6a5f 0005 7000      	0x700000056a5f
    1260:	0005                	c.nop	1
    1262:	0100                	addi	s0,sp,128
    1264:	5d00                	lw	s0,56(a0)
    1266:	0572                	slli	a0,a0,0x1c
    1268:	0000                	unimp
    126a:	0578                	addi	a4,sp,652
    126c:	0000                	unimp
    126e:	0001                	nop
    1270:	785e                	flw	fa6,244(sp)
    1272:	0005                	c.nop	1
    1274:	8800                	0x8800
    1276:	0005                	c.nop	1
    1278:	0100                	addi	s0,sp,128
    127a:	5f00                	lw	s0,56(a4)
    127c:	0588                	addi	a0,sp,704
    127e:	0000                	unimp
    1280:	058c                	addi	a1,sp,704
    1282:	0000                	unimp
    1284:	0001                	nop
    1286:	8c5e                	mv	s8,s7
    1288:	0005                	c.nop	1
    128a:	9600                	0x9600
    128c:	0005                	c.nop	1
    128e:	0300                	addi	s0,sp,384
    1290:	7e00                	flw	fs0,56(a2)
    1292:	9f7f                	0x9f7f
    1294:	0596                	slli	a1,a1,0x5
    1296:	0000                	unimp
    1298:	0598                	addi	a4,sp,704
    129a:	0000                	unimp
    129c:	0001                	nop
    129e:	985e                	add	a6,a6,s7
    12a0:	0005                	c.nop	1
    12a2:	a800                	fsd	fs0,16(s0)
    12a4:	0005                	c.nop	1
    12a6:	0100                	addi	s0,sp,128
    12a8:	5d00                	lw	s0,56(a0)
    12aa:	05a8                	addi	a0,sp,712
    12ac:	0000                	unimp
    12ae:	05ae                	slli	a1,a1,0xb
    12b0:	0000                	unimp
    12b2:	7f7d0003          	lb	zero,2039(s10)
    12b6:	ae9f 0005 b000      	0xb0000005ae9f
    12bc:	0005                	c.nop	1
    12be:	0100                	addi	s0,sp,128
    12c0:	5d00                	lw	s0,56(a0)
    12c2:	05b0                	addi	a2,sp,712
    12c4:	0000                	unimp
    12c6:	05bc                	addi	a5,sp,712
    12c8:	0000                	unimp
    12ca:	0001                	nop
    12cc:	bc5f 0005 c400      	0xc4000005bc5f
    12d2:	0005                	c.nop	1
    12d4:	0300                	addi	s0,sp,384
    12d6:	7f00                	flw	fs0,56(a4)
    12d8:	9f7f                	0x9f7f
    12da:	05c4                	addi	s1,sp,708
    12dc:	0000                	unimp
    12de:	05c6                	slli	a1,a1,0x11
    12e0:	0000                	unimp
    12e2:	0001                	nop
    12e4:	c65f 0005 d600      	0xd6000005c65f
    12ea:	0005                	c.nop	1
    12ec:	0100                	addi	s0,sp,128
    12ee:	5d00                	lw	s0,56(a0)
    12f0:	05d6                	slli	a1,a1,0x15
    12f2:	0000                	unimp
    12f4:	05dc                	addi	a5,sp,708
    12f6:	0000                	unimp
    12f8:	7f7d0003          	lb	zero,2039(s10)
    12fc:	dc9f 0005 de00      	0xde000005dc9f
    1302:	0005                	c.nop	1
    1304:	0100                	addi	s0,sp,128
    1306:	5d00                	lw	s0,56(a0)
    1308:	05de                	slli	a1,a1,0x17
    130a:	0000                	unimp
    130c:	05ea                	slli	a1,a1,0x1a
    130e:	0000                	unimp
    1310:	0001                	nop
    1312:	ea5e                	fsw	fs7,20(sp)
    1314:	0005                	c.nop	1
    1316:	f600                	fsw	fs0,40(a2)
    1318:	0005                	c.nop	1
    131a:	0300                	addi	s0,sp,384
    131c:	7e00                	flw	fs0,56(a2)
    131e:	9f7f                	0x9f7f
    1320:	05f6                	slli	a1,a1,0x1d
    1322:	0000                	unimp
    1324:	05f8                	addi	a4,sp,716
    1326:	0000                	unimp
    1328:	0001                	nop
    132a:	f85e                	fsw	fs7,48(sp)
    132c:	0005                	c.nop	1
    132e:	fe00                	fsw	fs0,56(a2)
    1330:	0005                	c.nop	1
    1332:	0100                	addi	s0,sp,128
    1334:	5f00                	lw	s0,56(a4)
    1336:	05fe                	slli	a1,a1,0x1f
    1338:	0000                	unimp
    133a:	0610                	addi	a2,sp,768
    133c:	0000                	unimp
    133e:	0001                	nop
    1340:	105d                	c.nop	-9
    1342:	0006                	c.slli	zero,0x1
    1344:	1e00                	addi	s0,sp,816
    1346:	0006                	c.slli	zero,0x1
    1348:	0100                	addi	s0,sp,128
    134a:	5f00                	lw	s0,56(a4)
    134c:	061e                	slli	a2,a2,0x7
    134e:	0000                	unimp
    1350:	0620                	addi	s0,sp,776
    1352:	0000                	unimp
    1354:	7f7f0003          	lb	zero,2039(t5)
    1358:	209f 0006 2200      	0x22000006209f
    135e:	0006                	c.slli	zero,0x1
    1360:	0100                	addi	s0,sp,128
    1362:	5f00                	lw	s0,56(a4)
    1364:	0622                	slli	a2,a2,0x8
    1366:	0000                	unimp
    1368:	0634                	addi	a3,sp,776
    136a:	0000                	unimp
    136c:	0001                	nop
    136e:	0059                	c.nop	22
    1370:	0000                	unimp
    1372:	0000                	unimp
    1374:	0000                	unimp
    1376:	e600                	fsw	fs0,8(a2)
    1378:	0004                	0x4
    137a:	f400                	fsw	fs0,40(s0)
    137c:	0004                	0x4
    137e:	0100                	addi	s0,sp,128
    1380:	5e00                	lw	s0,56(a2)
    1382:	0532                	slli	a0,a0,0xc
    1384:	0000                	unimp
    1386:	0536                	slli	a0,a0,0xd
    1388:	0000                	unimp
    138a:	0001                	nop
    138c:	005e                	c.slli	zero,0x17
    138e:	0000                	unimp
    1390:	0000                	unimp
    1392:	0000                	unimp
    1394:	0800                	addi	s0,sp,16
    1396:	0005                	c.nop	1
    1398:	3200                	fld	fs0,32(a2)
    139a:	0005                	c.nop	1
    139c:	0600                	addi	s0,sp,768
    139e:	0300                	addi	s0,sp,384
    13a0:	1714                	addi	a3,sp,928
    13a2:	0000                	unimp
    13a4:	009f 0000 0000      	0x9f
    13aa:	0000                	unimp
    13ac:	3400                	fld	fs0,40(s0)
    13ae:	0004                	0x4
    13b0:	2600                	fld	fs0,8(a2)
    13b2:	0005                	c.nop	1
    13b4:	0200                	addi	s0,sp,256
    13b6:	8b00                	0x8b00
    13b8:	3200                	fld	fs0,32(a2)
    13ba:	0005                	c.nop	1
    13bc:	3400                	fld	fs0,40(s0)
    13be:	0006                	c.slli	zero,0x1
    13c0:	0200                	addi	s0,sp,256
    13c2:	8b00                	0x8b00
	...
    13cc:	3400                	fld	fs0,40(s0)
    13ce:	0004                	0x4
    13d0:	2000                	fld	fs0,0(s0)
    13d2:	0005                	c.nop	1
    13d4:	0200                	addi	s0,sp,256
    13d6:	8800                	0x8800
    13d8:	2000                	fld	fs0,0(s0)
    13da:	0005                	c.nop	1
    13dc:	2200                	fld	fs0,0(a2)
    13de:	0005                	c.nop	1
    13e0:	0c00                	addi	s0,sp,528
    13e2:	8b00                	0x8b00
    13e4:	8900                	0x8900
    13e6:	3201                	jal	ce6 <ntru_encyrpt+0xb0>
    13e8:	2324                	fld	fs1,64(a4)
    13ea:	1af0090f          	0x1af0090f
    13ee:	221c                	fld	fa5,0(a2)
    13f0:	0005                	c.nop	1
    13f2:	2600                	fld	fs0,8(a2)
    13f4:	0005                	c.nop	1
    13f6:	0d00                	addi	s0,sp,656
    13f8:	8b00                	0x8b00
    13fa:	f300                	fsw	fs0,32(a4)
    13fc:	5b01                	li	s6,-32
    13fe:	2432                	fld	fs0,264(sp)
    1400:	f0090f23          	sb	zero,-226(s2)
    1404:	1c1a                	slli	s8,s8,0x26
    1406:	0532                	slli	a0,a0,0xc
    1408:	0000                	unimp
    140a:	0634                	addi	a3,sp,776
    140c:	0000                	unimp
    140e:	0002                	c.slli64	zero
    1410:	0088                	addi	a0,sp,64
	...
    141a:	0556                	slli	a0,a0,0x15
    141c:	0000                	unimp
    141e:	0588                	addi	a0,sp,704
    1420:	0000                	unimp
    1422:	0001                	nop
    1424:	985a                	add	a6,a6,s6
    1426:	0005                	c.nop	1
    1428:	1000                	addi	s0,sp,32
    142a:	0006                	c.slli	zero,0x1
    142c:	0100                	addi	s0,sp,128
    142e:	5a00                	lw	s0,48(a2)
	...
    1438:	0434                	addi	a3,sp,520
    143a:	0000                	unimp
    143c:	051a                	slli	a0,a0,0x6
    143e:	0000                	unimp
    1440:	0002                	c.slli64	zero
    1442:	0085                	addi	ra,ra,1
    1444:	051a                	slli	a0,a0,0x6
    1446:	0000                	unimp
    1448:	0520                	addi	s0,sp,648
    144a:	0000                	unimp
    144c:	000c                	0xc
    144e:	0088                	addi	a0,sp,64
    1450:	0189                	addi	gp,gp,2
    1452:	2432                	fld	fs0,264(sp)
    1454:	f0090f23          	sb	zero,-226(s2)
    1458:	1c1a                	slli	s8,s8,0x26
    145a:	0520                	addi	s0,sp,648
    145c:	0000                	unimp
    145e:	0522                	slli	a0,a0,0x8
    1460:	0000                	unimp
    1462:	000e                	c.slli	zero,0x3
    1464:	0189008b          	0x189008b
    1468:	2432                	fld	fs0,264(sp)
    146a:	f0090f23          	sb	zero,-226(s2)
    146e:	311a                	fld	ft2,416(sp)
    1470:	1c24                	addi	s1,sp,568
    1472:	0522                	slli	a0,a0,0x8
    1474:	0000                	unimp
    1476:	0526                	slli	a0,a0,0x9
    1478:	0000                	unimp
    147a:	008b000f          	0x8b000f
    147e:	325b01f3          	0x325b01f3
    1482:	2324                	fld	fs1,64(a4)
    1484:	1af0090f          	0x1af0090f
    1488:	2431                	jal	1694 <product2+0x1d8>
    148a:	321c                	fld	fa5,32(a2)
    148c:	0005                	c.nop	1
    148e:	3400                	fld	fs0,40(s0)
    1490:	0006                	c.slli	zero,0x1
    1492:	0200                	addi	s0,sp,256
    1494:	8500                	0x8500
	...
    149e:	3600                	fld	fs0,40(a2)
    14a0:	0004                	0x4
    14a2:	0c00                	addi	s0,sp,528
    14a4:	0005                	c.nop	1
    14a6:	0200                	addi	s0,sp,256
    14a8:	7200                	flw	fs0,32(a2)
    14aa:	0c00                	addi	s0,sp,528
    14ac:	0005                	c.nop	1
    14ae:	2400                	fld	fs0,8(s0)
    14b0:	0005                	c.nop	1
    14b2:	0200                	addi	s0,sp,256
    14b4:	8a00                	0x8a00
    14b6:	2400                	fld	fs0,8(s0)
    14b8:	0005                	c.nop	1
    14ba:	2600                	fld	fs0,8(a2)
    14bc:	0005                	c.nop	1
    14be:	1a00                	addi	s0,sp,304
    14c0:	8b00                	0x8b00
    14c2:	f300                	fsw	fs0,32(a4)
    14c4:	5b01                	li	s6,-32
    14c6:	2432                	fld	fs0,264(sp)
    14c8:	f0090f23          	sb	zero,-226(s2)
    14cc:	311a                	fld	ft2,416(sp)
    14ce:	1c24                	addi	s1,sp,568
    14d0:	325d01f3          	0x325d01f3
    14d4:	2324                	fld	fs1,64(a4)
    14d6:	1af0090f          	0x1af0090f
    14da:	321c                	fld	fa5,32(a2)
    14dc:	0005                	c.nop	1
    14de:	3400                	fld	fs0,40(s0)
    14e0:	0006                	c.slli	zero,0x1
    14e2:	0200                	addi	s0,sp,256
    14e4:	7200                	flw	fs0,32(a2)
	...
    14ee:	3400                	fld	fs0,40(s0)
    14f0:	0004                	0x4
    14f2:	2200                	fld	fs0,0(a2)
    14f4:	0005                	c.nop	1
    14f6:	0100                	addi	s0,sp,128
    14f8:	6900                	flw	fs0,16(a0)
    14fa:	0522                	slli	a0,a0,0x8
    14fc:	0000                	unimp
    14fe:	0532                	slli	a0,a0,0xc
    1500:	0000                	unimp
    1502:	0006                	c.slli	zero,0x1
    1504:	315b01f3          	0x315b01f3
    1508:	9f1c                	0x9f1c
    150a:	0532                	slli	a0,a0,0xc
    150c:	0000                	unimp
    150e:	0634                	addi	a3,sp,776
    1510:	0000                	unimp
    1512:	0001                	nop
    1514:	0069                	c.nop	26
    1516:	0000                	unimp
    1518:	0000                	unimp
    151a:	0000                	unimp
    151c:	3400                	fld	fs0,40(s0)
    151e:	0004                	0x4
    1520:	2200                	fld	fs0,0(a2)
    1522:	0005                	c.nop	1
    1524:	0100                	addi	s0,sp,128
    1526:	6900                	flw	fs0,16(a0)
    1528:	0522                	slli	a0,a0,0x8
    152a:	0000                	unimp
    152c:	0532                	slli	a0,a0,0xc
    152e:	0000                	unimp
    1530:	0006                	c.slli	zero,0x1
    1532:	315b01f3          	0x315b01f3
    1536:	9f1c                	0x9f1c
    1538:	0532                	slli	a0,a0,0xc
    153a:	0000                	unimp
    153c:	0634                	addi	a3,sp,776
    153e:	0000                	unimp
    1540:	0001                	nop
    1542:	0069                	c.nop	26
    1544:	0000                	unimp
    1546:	0000                	unimp
    1548:	0000                	unimp
    154a:	3400                	fld	fs0,40(s0)
    154c:	0004                	0x4
    154e:	2200                	fld	fs0,0(a2)
    1550:	0005                	c.nop	1
    1552:	0100                	addi	s0,sp,128
    1554:	6900                	flw	fs0,16(a0)
    1556:	0522                	slli	a0,a0,0x8
    1558:	0000                	unimp
    155a:	0532                	slli	a0,a0,0xc
    155c:	0000                	unimp
    155e:	0006                	c.slli	zero,0x1
    1560:	315b01f3          	0x315b01f3
    1564:	9f1c                	0x9f1c
    1566:	0532                	slli	a0,a0,0xc
    1568:	0000                	unimp
    156a:	0634                	addi	a3,sp,776
    156c:	0000                	unimp
    156e:	0001                	nop
    1570:	0069                	c.nop	26
    1572:	0000                	unimp
    1574:	0000                	unimp
    1576:	0000                	unimp
    1578:	3400                	fld	fs0,40(s0)
    157a:	0004                	0x4
    157c:	4e00                	lw	s0,24(a2)
    157e:	0004                	0x4
    1580:	0100                	addi	s0,sp,128
    1582:	6400                	flw	fs0,8(s0)
    1584:	044e                	slli	s0,s0,0x13
    1586:	0000                	unimp
    1588:	0468                	addi	a0,sp,524
    158a:	0000                	unimp
    158c:	7f830003          	lb	zero,2040(t1)
    1590:	689f 0004 c200      	0xc2000004689f
    1596:	0004                	0x4
    1598:	0100                	addi	s0,sp,128
    159a:	6400                	flw	fs0,8(s0)
    159c:	04c2                	slli	s1,s1,0x10
    159e:	0000                	unimp
    15a0:	0516                	slli	a0,a0,0x5
    15a2:	0000                	unimp
    15a4:	7f830003          	lb	zero,2040(t1)
    15a8:	169f 0005 3200      	0x32000005169f
    15ae:	0005                	c.nop	1
    15b0:	0600                	addi	s0,sp,768
    15b2:	f300                	fsw	fs0,32(a4)
    15b4:	5d01                	li	s10,-32
    15b6:	1c31                	addi	s8,s8,-20
    15b8:	329f 0005 3400      	0x34000005329f
    15be:	0006                	c.slli	zero,0x1
    15c0:	0300                	addi	s0,sp,384
    15c2:	8300                	0x8300
    15c4:	9f7f                	0x9f7f
	...
    15ce:	0272                	slli	tp,tp,0x1c
    15d0:	0000                	unimp
    15d2:	02e2                	slli	t0,t0,0x18
    15d4:	0000                	unimp
    15d6:	0001                	nop
    15d8:	e25a                	fsw	fs6,4(sp)
    15da:	0002                	c.slli64	zero
    15dc:	fc00                	fsw	fs0,56(s0)
    15de:	0002                	c.slli64	zero
    15e0:	0400                	addi	s0,sp,512
    15e2:	f300                	fsw	fs0,32(a4)
    15e4:	5a01                	li	s4,-32
    15e6:	fc9f 0002 3200      	0x32000002fc9f
    15ec:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15f0:	5a00                	lw	s0,48(a2)
    15f2:	0332                	slli	t1,t1,0xc
    15f4:	0000                	unimp
    15f6:	03e2                	slli	t2,t2,0x18
    15f8:	0000                	unimp
    15fa:	0004                	0x4
    15fc:	9f5a01f3          	0x9f5a01f3
	...
    1608:	0272                	slli	tp,tp,0x1c
    160a:	0000                	unimp
    160c:	02e2                	slli	t0,t0,0x18
    160e:	0000                	unimp
    1610:	0001                	nop
    1612:	0002e25b          	0x2e25b
    1616:	fc00                	fsw	fs0,56(s0)
    1618:	0002                	c.slli64	zero
    161a:	0300                	addi	s0,sp,384
    161c:	8f00                	0x8f00
    161e:	9f01                	0x9f01
    1620:	02fc                	addi	a5,sp,332
    1622:	0000                	unimp
    1624:	0332                	slli	t1,t1,0xc
    1626:	0000                	unimp
    1628:	0001                	nop
    162a:	0003325b          	0x3325b
    162e:	e200                	fsw	fs0,0(a2)
    1630:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1634:	8f00                	0x8f00
    1636:	9f01                	0x9f01
	...
    1640:	0272                	slli	tp,tp,0x1c
    1642:	0000                	unimp
    1644:	02e8                	addi	a0,sp,332
    1646:	0000                	unimp
    1648:	0001                	nop
    164a:	e85c                	fsw	fa5,20(s0)
    164c:	0002                	c.slli64	zero
    164e:	fc00                	fsw	fs0,56(s0)
    1650:	0002                	c.slli64	zero
    1652:	0400                	addi	s0,sp,512
    1654:	f300                	fsw	fs0,32(a4)
    1656:	5c01                	li	s8,-32
    1658:	fc9f 0002 4600      	0x46000002fc9f
    165e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1662:	5c00                	lw	s0,56(s0)
    1664:	0346                	slli	t1,t1,0x11
    1666:	0000                	unimp
    1668:	03e2                	slli	t2,t2,0x18
    166a:	0000                	unimp
    166c:	0004                	0x4
    166e:	9f5c01f3          	0x9f5c01f3
	...
    167a:	0272                	slli	tp,tp,0x1c
    167c:	0000                	unimp
    167e:	02f4                	addi	a3,sp,332
    1680:	0000                	unimp
    1682:	0001                	nop
    1684:	f45e                	fsw	fs7,40(sp)
    1686:	0002                	c.slli64	zero
    1688:	fc00                	fsw	fs0,56(s0)
    168a:	0002                	c.slli64	zero
    168c:	0400                	addi	s0,sp,512
    168e:	f300                	fsw	fs0,32(a4)
    1690:	5e01                	li	t3,-32
    1692:	fc9f 0002 4600      	0x46000002fc9f
    1698:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    169c:	5e00                	lw	s0,56(a2)
    169e:	0346                	slli	t1,t1,0x11
    16a0:	0000                	unimp
    16a2:	03e2                	slli	t2,t2,0x18
    16a4:	0000                	unimp
    16a6:	0004                	0x4
    16a8:	9f5e01f3          	0x9f5e01f3
	...
    16b4:	02be                	slli	t0,t0,0xf
    16b6:	0000                	unimp
    16b8:	02d6                	slli	t0,t0,0x15
    16ba:	0000                	unimp
    16bc:	0002                	c.slli64	zero
    16be:	008c                	addi	a1,sp,64
    16c0:	02d6                	slli	t0,t0,0x15
    16c2:	0000                	unimp
    16c4:	0346                	slli	t1,t1,0x11
    16c6:	0000                	unimp
    16c8:	0002                	c.slli64	zero
    16ca:	0082                	c.slli64	ra
    16cc:	0346                	slli	t1,t1,0x11
    16ce:	0000                	unimp
    16d0:	039c                	addi	a5,sp,448
    16d2:	0000                	unimp
    16d4:	0002                	c.slli64	zero
    16d6:	008c                	addi	a1,sp,64
    16d8:	039c                	addi	a5,sp,448
    16da:	0000                	unimp
    16dc:	03c0                	addi	s0,sp,452
    16de:	0000                	unimp
    16e0:	0002                	c.slli64	zero
    16e2:	0082                	c.slli64	ra
    16e4:	03c0                	addi	s0,sp,452
    16e6:	0000                	unimp
    16e8:	03e2                	slli	t2,t2,0x18
    16ea:	0000                	unimp
    16ec:	0002                	c.slli64	zero
    16ee:	008c                	addi	a1,sp,64
	...
    16f8:	02c4                	addi	s1,sp,324
    16fa:	0000                	unimp
    16fc:	02d6                	slli	t0,t0,0x15
    16fe:	0000                	unimp
    1700:	0002                	c.slli64	zero
    1702:	9f30                	0x9f30
    1704:	02d6                	slli	t0,t0,0x15
    1706:	0000                	unimp
    1708:	02dc                	addi	a5,sp,324
    170a:	0000                	unimp
    170c:	0001                	nop
    170e:	dc59                	beqz	s0,16ac <product2+0x1f0>
    1710:	0002                	c.slli64	zero
    1712:	e200                	fsw	fs0,0(a2)
    1714:	0002                	c.slli64	zero
    1716:	0100                	addi	s0,sp,128
    1718:	5700                	lw	s0,40(a4)
    171a:	02e2                	slli	t0,t0,0x18
    171c:	0000                	unimp
    171e:	02f4                	addi	a3,sp,332
    1720:	0000                	unimp
    1722:	0001                	nop
    1724:	0002fc5b          	0x2fc5b
    1728:	1e00                	addi	s0,sp,816
    172a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    172e:	5900                	lw	s0,48(a0)
    1730:	031e                	slli	t1,t1,0x7
    1732:	0000                	unimp
    1734:	032c                	addi	a1,sp,392
    1736:	0000                	unimp
    1738:	0001                	nop
    173a:	00032c57          	0x32c57
    173e:	3000                	fld	fs0,32(s0)
    1740:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1744:	7700                	flw	fs0,40(a4)
    1746:	9f7f                	0x9f7f
    1748:	0330                	addi	a2,sp,392
    174a:	0000                	unimp
    174c:	0332                	slli	t1,t1,0xc
    174e:	0000                	unimp
    1750:	0001                	nop
    1752:	00033257          	0x33257
    1756:	4000                	lw	s0,0(s0)
    1758:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    175c:	5b00                	lw	s0,48(a4)
    175e:	0340                	addi	s0,sp,388
    1760:	0000                	unimp
    1762:	0344                	addi	s1,sp,388
    1764:	0000                	unimp
    1766:	7f7b0003          	lb	zero,2039(s6)
    176a:	449f 0003 4600      	0x46000003449f
    1770:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1774:	5b00                	lw	s0,48(a4)
    1776:	03c0                	addi	s0,sp,452
    1778:	0000                	unimp
    177a:	03c8                	addi	a0,sp,452
    177c:	0000                	unimp
    177e:	0001                	nop
    1780:	0003c85b          	0x3c85b
    1784:	d400                	sw	s0,40(s0)
    1786:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    178a:	7b00                	flw	fs0,48(a4)
    178c:	9f7f                	0x9f7f
    178e:	03d4                	addi	a3,sp,452
    1790:	0000                	unimp
    1792:	03de                	slli	t2,t2,0x17
    1794:	0000                	unimp
    1796:	0001                	nop
    1798:	0000005b          	0x5b
    179c:	0000                	unimp
    179e:	0000                	unimp
    17a0:	f400                	fsw	fs0,40(s0)
    17a2:	0002                	c.slli64	zero
    17a4:	fc00                	fsw	fs0,56(s0)
    17a6:	0002                	c.slli64	zero
    17a8:	0100                	addi	s0,sp,128
    17aa:	6100                	flw	fs0,0(a0)
    17ac:	02fc                	addi	a5,sp,332
    17ae:	0000                	unimp
    17b0:	0318                	addi	a4,sp,384
    17b2:	0000                	unimp
    17b4:	0001                	nop
    17b6:	00034657          	0x34657
    17ba:	7600                	flw	fs0,40(a2)
    17bc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17c0:	6100                	flw	fs0,0(a0)
    17c2:	0376                	slli	t1,t1,0x1d
    17c4:	0000                	unimp
    17c6:	0398                	addi	a4,sp,448
    17c8:	0000                	unimp
    17ca:	0001                	nop
    17cc:	985e                	add	a6,a6,s7
    17ce:	c0000003          	lb	zero,-1024(zero) # fffffc00 <_stack_start+0xfffefc00>
    17d2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17d6:	6100                	flw	fs0,0(a0)
    17d8:	03c0                	addi	s0,sp,452
    17da:	0000                	unimp
    17dc:	03e2                	slli	t2,t2,0x18
    17de:	0000                	unimp
    17e0:	0001                	nop
    17e2:	005e                	c.slli	zero,0x17
    17e4:	0000                	unimp
    17e6:	0000                	unimp
    17e8:	0000                	unimp
    17ea:	4600                	lw	s0,8(a2)
    17ec:	58000003          	lb	zero,1408(zero) # 580 <polydiv+0x19e>
    17f0:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17f4:	5e00                	lw	s0,56(a2)
    17f6:	0358                	addi	a4,sp,388
    17f8:	0000                	unimp
    17fa:	035e                	slli	t1,t1,0x17
    17fc:	0000                	unimp
    17fe:	017e0003          	lb	zero,23(t3) # ffff7017 <_stack_start+0xfffe7017>
    1802:	5e9f 0003 6800      	0x680000035e9f
    1808:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    180c:	5e00                	lw	s0,56(a2)
    180e:	039c                	addi	a5,sp,448
    1810:	0000                	unimp
    1812:	03ae                	slli	t2,t2,0xb
    1814:	0000                	unimp
    1816:	0001                	nop
    1818:	ae5e                	fsd	fs7,280(sp)
    181a:	b4000003          	lb	zero,-1216(zero) # fffffb40 <_stack_start+0xfffefb40>
    181e:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1822:	7e00                	flw	fs0,56(a2)
    1824:	9f01                	0x9f01
    1826:	03b4                	addi	a3,sp,456
    1828:	0000                	unimp
    182a:	03c0                	addi	s0,sp,452
    182c:	0000                	unimp
    182e:	0001                	nop
    1830:	005e                	c.slli	zero,0x17
    1832:	0000                	unimp
    1834:	0000                	unimp
    1836:	0000                	unimp
    1838:	7a00                	flw	fs0,48(a2)
    183a:	98000003          	lb	zero,-1664(zero) # fffff980 <_stack_start+0xfffef980>
    183e:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1842:	0300                	addi	s0,sp,384
    1844:	14bc                	addi	a5,sp,616
    1846:	0000                	unimp
    1848:	009f 0000 0000      	0x9f
    184e:	0000                	unimp
    1850:	c400                	sw	s0,8(s0)
    1852:	0002                	c.slli64	zero
    1854:	7e00                	flw	fs0,56(a2)
    1856:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    185a:	7200                	flw	fs0,32(a2)
    185c:	7e00                	flw	fs0,56(a2)
    185e:	98000003          	lb	zero,-1664(zero) # fffff980 <_stack_start+0xfffef980>
    1862:	0c000003          	lb	zero,192(zero) # c0 <polymult+0x34>
    1866:	7500                	flw	fs0,40(a0)
    1868:	7d00                	flw	fs0,56(a0)
    186a:	3200                	fld	fs0,32(a2)
    186c:	2324                	fld	fs1,64(a4)
    186e:	1af0090f          	0x1af0090f
    1872:	981c                	0x981c
    1874:	e2000003          	lb	zero,-480(zero) # fffffe20 <_stack_start+0xfffefe20>
    1878:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    187c:	7200                	flw	fs0,32(a2)
	...
    1886:	be00                	fsd	fs0,56(a2)
    1888:	0002                	c.slli64	zero
    188a:	f400                	fsw	fs0,40(s0)
    188c:	0002                	c.slli64	zero
    188e:	0100                	addi	s0,sp,128
    1890:	6100                	flw	fs0,0(a0)
    1892:	02f4                	addi	a3,sp,332
    1894:	0000                	unimp
    1896:	02fc                	addi	a5,sp,332
    1898:	0000                	unimp
    189a:	7f7d0003          	lb	zero,2039(s10)
    189e:	fc9f 0002 4600      	0x46000002fc9f
    18a4:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18a8:	6100                	flw	fs0,0(a0)
    18aa:	0346                	slli	t1,t1,0x11
    18ac:	0000                	unimp
    18ae:	03e2                	slli	t2,t2,0x18
    18b0:	0000                	unimp
    18b2:	7f7d0003          	lb	zero,2039(s10)
    18b6:	009f 0000 0000      	0x9f
    18bc:	0000                	unimp
    18be:	c200                	sw	s0,0(a2)
    18c0:	0002                	c.slli64	zero
    18c2:	f400                	fsw	fs0,40(s0)
    18c4:	0002                	c.slli64	zero
    18c6:	0100                	addi	s0,sp,128
    18c8:	6100                	flw	fs0,0(a0)
    18ca:	02f4                	addi	a3,sp,332
    18cc:	0000                	unimp
    18ce:	02fc                	addi	a5,sp,332
    18d0:	0000                	unimp
    18d2:	7f7d0003          	lb	zero,2039(s10)
    18d6:	fc9f 0002 4600      	0x46000002fc9f
    18dc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18e0:	6100                	flw	fs0,0(a0)
    18e2:	0346                	slli	t1,t1,0x11
    18e4:	0000                	unimp
    18e6:	03e2                	slli	t2,t2,0x18
    18e8:	0000                	unimp
    18ea:	7f7d0003          	lb	zero,2039(s10)
    18ee:	009f 0000 0000      	0x9f
    18f4:	0000                	unimp
    18f6:	8c00                	0x8c00
    18f8:	0000                	unimp
    18fa:	0400                	addi	s0,sp,512
    18fc:	0001                	nop
    18fe:	0100                	addi	s0,sp,128
    1900:	5a00                	lw	s0,48(a2)
    1902:	0104                	addi	s1,sp,128
    1904:	0000                	unimp
    1906:	0122                	slli	sp,sp,0x8
    1908:	0000                	unimp
    190a:	0004                	0x4
    190c:	9f5a01f3          	0x9f5a01f3
    1910:	0122                	slli	sp,sp,0x8
    1912:	0000                	unimp
    1914:	016c                	addi	a1,sp,140
    1916:	0000                	unimp
    1918:	0001                	nop
    191a:	6c5a                	flw	fs8,148(sp)
    191c:	0001                	nop
    191e:	7200                	flw	fs0,32(a2)
    1920:	0002                	c.slli64	zero
    1922:	0400                	addi	s0,sp,512
    1924:	f300                	fsw	fs0,32(a4)
    1926:	5a01                	li	s4,-32
    1928:	009f 0000 0000      	0x9f
    192e:	0000                	unimp
    1930:	8c00                	0x8c00
    1932:	0000                	unimp
    1934:	0600                	addi	s0,sp,768
    1936:	0001                	nop
    1938:	0100                	addi	s0,sp,128
    193a:	5b00                	lw	s0,48(a4)
    193c:	0106                	slli	sp,sp,0x1
    193e:	0000                	unimp
    1940:	0122                	slli	sp,sp,0x8
    1942:	0000                	unimp
    1944:	01820003          	lb	zero,24(tp) # 18 <__DYNAMIC+0x18>
    1948:	229f 0001 6c00      	0x6c000001229f
    194e:	0001                	nop
    1950:	0100                	addi	s0,sp,128
    1952:	5b00                	lw	s0,48(a4)
    1954:	016c                	addi	a1,sp,140
    1956:	0000                	unimp
    1958:	01ba                	slli	gp,gp,0xe
    195a:	0000                	unimp
    195c:	01820003          	lb	zero,24(tp) # 18 <__DYNAMIC+0x18>
    1960:	ba9f 0001 7200      	0x72000001ba9f
    1966:	0002                	c.slli64	zero
    1968:	0400                	addi	s0,sp,512
    196a:	f300                	fsw	fs0,32(a4)
    196c:	5b01                	li	s6,-32
    196e:	009f 0000 0000      	0x9f
    1974:	0000                	unimp
    1976:	8c00                	0x8c00
    1978:	0000                	unimp
    197a:	0c00                	addi	s0,sp,528
    197c:	0001                	nop
    197e:	0100                	addi	s0,sp,128
    1980:	5c00                	lw	s0,56(s0)
    1982:	010c                	addi	a1,sp,128
    1984:	0000                	unimp
    1986:	0122                	slli	sp,sp,0x8
    1988:	0000                	unimp
    198a:	0004                	0x4
    198c:	9f5c01f3          	0x9f5c01f3
    1990:	0122                	slli	sp,sp,0x8
    1992:	0000                	unimp
    1994:	018e                	slli	gp,gp,0x3
    1996:	0000                	unimp
    1998:	0001                	nop
    199a:	8e5c                	0x8e5c
    199c:	0001                	nop
    199e:	7200                	flw	fs0,32(a2)
    19a0:	0002                	c.slli64	zero
    19a2:	0400                	addi	s0,sp,512
    19a4:	f300                	fsw	fs0,32(a4)
    19a6:	5c01                	li	s8,-32
    19a8:	009f 0000 0000      	0x9f
    19ae:	0000                	unimp
    19b0:	8c00                	0x8c00
    19b2:	0000                	unimp
    19b4:	ac00                	fsd	fs0,24(s0)
    19b6:	0001                	nop
    19b8:	0100                	addi	s0,sp,128
    19ba:	5d00                	lw	s0,56(a0)
    19bc:	01ac                	addi	a1,sp,200
    19be:	0000                	unimp
    19c0:	01d0                	addi	a2,sp,196
    19c2:	0000                	unimp
    19c4:	0004                	0x4
    19c6:	9f5d01f3          	0x9f5d01f3
    19ca:	01d0                	addi	a2,sp,196
    19cc:	0000                	unimp
    19ce:	0262                	slli	tp,tp,0x18
    19d0:	0000                	unimp
    19d2:	0001                	nop
    19d4:	625d                	lui	tp,0x17
    19d6:	0002                	c.slli64	zero
    19d8:	7200                	flw	fs0,32(a2)
    19da:	0002                	c.slli64	zero
    19dc:	0400                	addi	s0,sp,512
    19de:	f300                	fsw	fs0,32(a4)
    19e0:	5d01                	li	s10,-32
    19e2:	009f 0000 0000      	0x9f
    19e8:	0000                	unimp
    19ea:	8c00                	0x8c00
    19ec:	0000                	unimp
    19ee:	aa00                	fsd	fs0,16(a2)
    19f0:	0000                	unimp
    19f2:	0100                	addi	s0,sp,128
    19f4:	5f00                	lw	s0,56(a4)
    19f6:	00aa                	slli	ra,ra,0xa
    19f8:	0000                	unimp
    19fa:	011a                	slli	sp,sp,0x6
    19fc:	0000                	unimp
    19fe:	0001                	nop
    1a00:	1a59                	addi	s4,s4,-10
    1a02:	0001                	nop
    1a04:	2200                	fld	fs0,0(a2)
    1a06:	0001                	nop
    1a08:	0400                	addi	s0,sp,512
    1a0a:	f300                	fsw	fs0,32(a4)
    1a0c:	5f01                	li	t5,-32
    1a0e:	229f 0001 9400      	0x94000001229f
    1a14:	0001                	nop
    1a16:	0100                	addi	s0,sp,128
    1a18:	5900                	lw	s0,48(a0)
    1a1a:	0194                	addi	a3,sp,192
    1a1c:	0000                	unimp
    1a1e:	01d0                	addi	a2,sp,196
    1a20:	0000                	unimp
    1a22:	0004                	0x4
    1a24:	9f5f01f3          	0x9f5f01f3
    1a28:	01d0                	addi	a2,sp,196
    1a2a:	0000                	unimp
    1a2c:	01fa                	slli	gp,gp,0x1e
    1a2e:	0000                	unimp
    1a30:	0001                	nop
    1a32:	fa59                	bnez	a2,19c8 <ti_2+0x5c>
    1a34:	0001                	nop
    1a36:	7200                	flw	fs0,32(a2)
    1a38:	0002                	c.slli64	zero
    1a3a:	0400                	addi	s0,sp,512
    1a3c:	f300                	fsw	fs0,32(a4)
    1a3e:	5f01                	li	t5,-32
    1a40:	009f 0000 0000      	0x9f
    1a46:	0000                	unimp
    1a48:	e400                	fsw	fs0,8(s0)
    1a4a:	0000                	unimp
    1a4c:	f600                	fsw	fs0,40(a2)
    1a4e:	0000                	unimp
    1a50:	0200                	addi	s0,sp,256
    1a52:	3000                	fld	fs0,32(s0)
    1a54:	f69f 0000 fc00      	0xfc000000f69f
    1a5a:	0000                	unimp
    1a5c:	0100                	addi	s0,sp,128
    1a5e:	6300                	flw	fs0,0(a4)
    1a60:	00fe                	slli	ra,ra,0x1f
    1a62:	0000                	unimp
    1a64:	0106                	slli	sp,sp,0x1
    1a66:	0000                	unimp
    1a68:	0001                	nop
    1a6a:	0664                	addi	s1,sp,780
    1a6c:	0001                	nop
    1a6e:	1a00                	addi	s0,sp,304
    1a70:	0001                	nop
    1a72:	0100                	addi	s0,sp,128
    1a74:	6100                	flw	fs0,0(a0)
    1a76:	0122                	slli	sp,sp,0x8
    1a78:	0000                	unimp
    1a7a:	0144                	addi	s1,sp,132
    1a7c:	0000                	unimp
    1a7e:	0001                	nop
    1a80:	00014463          	bltz	sp,1a88 <ti_2+0x11c>
    1a84:	6000                	flw	fs0,0(s0)
    1a86:	0001                	nop
    1a88:	0100                	addi	s0,sp,128
    1a8a:	6400                	flw	fs0,8(s0)
    1a8c:	0160                	addi	s0,sp,140
    1a8e:	0000                	unimp
    1a90:	0166                	slli	sp,sp,0x19
    1a92:	0000                	unimp
    1a94:	7f840003          	lb	zero,2040(s0) # e7f8 <_stack+0x7f8>
    1a98:	669f 0001 6c00      	0x6c000001669f
    1a9e:	0001                	nop
    1aa0:	0100                	addi	s0,sp,128
    1aa2:	6400                	flw	fs0,8(s0)
    1aa4:	016c                	addi	a1,sp,140
    1aa6:	0000                	unimp
    1aa8:	0182                	c.slli64	gp
    1aaa:	0000                	unimp
    1aac:	0001                	nop
    1aae:	8261                	srli	a2,a2,0x18
    1ab0:	0001                	nop
    1ab2:	8800                	0x8800
    1ab4:	0001                	nop
    1ab6:	0300                	addi	s0,sp,384
    1ab8:	8100                	0x8100
    1aba:	9f7f                	0x9f7f
    1abc:	0188                	addi	a0,sp,192
    1abe:	0000                	unimp
    1ac0:	0190                	addi	a2,sp,192
    1ac2:	0000                	unimp
    1ac4:	0001                	nop
    1ac6:	9661                	srai	a2,a2,0x38
    1ac8:	0001                	nop
    1aca:	a200                	fsd	fs0,0(a2)
    1acc:	0001                	nop
    1ace:	0100                	addi	s0,sp,128
    1ad0:	5c00                	lw	s0,56(s0)
    1ad2:	0220                	addi	s0,sp,264
    1ad4:	0000                	unimp
    1ad6:	023e                	slli	tp,tp,0xf
    1ad8:	0000                	unimp
    1ada:	0001                	nop
    1adc:	3e5c                	fld	fa5,184(a2)
    1ade:	0002                	c.slli64	zero
    1ae0:	4800                	lw	s0,16(s0)
    1ae2:	0002                	c.slli64	zero
    1ae4:	0100                	addi	s0,sp,128
    1ae6:	6000                	flw	fs0,0(s0)
    1ae8:	0248                	addi	a0,sp,260
    1aea:	0000                	unimp
    1aec:	0254                	addi	a3,sp,260
    1aee:	0000                	unimp
    1af0:	7f800003          	lb	zero,2040(zero) # 7f8 <ext_euclid+0x1c4>
    1af4:	549f 0002 5e00      	0x5e000002549f
    1afa:	0002                	c.slli64	zero
    1afc:	0100                	addi	s0,sp,128
    1afe:	6000                	flw	fs0,0(s0)
	...
    1b08:	011a                	slli	sp,sp,0x6
    1b0a:	0000                	unimp
    1b0c:	0122                	slli	sp,sp,0x8
    1b0e:	0000                	unimp
    1b10:	0001                	nop
    1b12:	2256                	fld	ft4,336(sp)
    1b14:	0001                	nop
    1b16:	3e00                	fld	fs0,56(a2)
    1b18:	0001                	nop
    1b1a:	0100                	addi	s0,sp,128
    1b1c:	6100                	flw	fs0,0(a0)
    1b1e:	0190                	addi	a2,sp,192
    1b20:	0000                	unimp
    1b22:	0196                	slli	gp,gp,0x5
    1b24:	0000                	unimp
    1b26:	0001                	nop
    1b28:	a656                	fsd	fs5,264(sp)
    1b2a:	0001                	nop
    1b2c:	ac00                	fsd	fs0,24(s0)
    1b2e:	0001                	nop
    1b30:	0100                	addi	s0,sp,128
    1b32:	5b00                	lw	s0,48(a4)
    1b34:	01ac                	addi	a1,sp,200
    1b36:	0000                	unimp
    1b38:	01d0                	addi	a2,sp,196
    1b3a:	0000                	unimp
    1b3c:	0001                	nop
    1b3e:	d05f 0001 2000      	0x20000001d05f
    1b44:	0002                	c.slli64	zero
    1b46:	0100                	addi	s0,sp,128
    1b48:	5600                	lw	s0,40(a2)
    1b4a:	0220                	addi	s0,sp,264
    1b4c:	0000                	unimp
    1b4e:	0224                	addi	s1,sp,264
    1b50:	0000                	unimp
    1b52:	0001                	nop
    1b54:	0002245b          	0x2245b
    1b58:	2e00                	fld	fs0,24(a2)
    1b5a:	0002                	c.slli64	zero
    1b5c:	0300                	addi	s0,sp,384
    1b5e:	7b00                	flw	fs0,48(a4)
    1b60:	9f7f                	0x9f7f
    1b62:	022e                	slli	tp,tp,0xb
    1b64:	0000                	unimp
    1b66:	0238                	addi	a4,sp,264
    1b68:	0000                	unimp
    1b6a:	0001                	nop
    1b6c:	00023e5b          	0x23e5b
    1b70:	6200                	flw	fs0,0(a2)
    1b72:	0002                	c.slli64	zero
    1b74:	0100                	addi	s0,sp,128
    1b76:	5b00                	lw	s0,48(a4)
    1b78:	0262                	slli	tp,tp,0x18
    1b7a:	0000                	unimp
    1b7c:	0266                	slli	tp,tp,0x19
    1b7e:	0000                	unimp
    1b80:	0001                	nop
    1b82:	665f 0002 7000      	0x70000002665f
    1b88:	0002                	c.slli64	zero
    1b8a:	0300                	addi	s0,sp,384
    1b8c:	7f00                	flw	fs0,56(a4)
    1b8e:	9f7f                	0x9f7f
    1b90:	0270                	addi	a2,sp,268
    1b92:	0000                	unimp
    1b94:	0272                	slli	tp,tp,0x1c
    1b96:	0000                	unimp
    1b98:	0001                	nop
    1b9a:	005f 0000 0000      	0x5f
    1ba0:	0000                	unimp
    1ba2:	d000                	sw	s0,32(s0)
    1ba4:	0001                	nop
    1ba6:	e200                	fsw	fs0,0(a2)
    1ba8:	0001                	nop
    1baa:	0100                	addi	s0,sp,128
    1bac:	5c00                	lw	s0,56(s0)
    1bae:	01e2                	slli	gp,gp,0x18
    1bb0:	0000                	unimp
    1bb2:	01ea                	slli	gp,gp,0x1a
    1bb4:	0000                	unimp
    1bb6:	017c0003          	lb	zero,23(s8)
    1bba:	ea9f 0001 f600      	0xf6000001ea9f
    1bc0:	0001                	nop
    1bc2:	0100                	addi	s0,sp,128
    1bc4:	5c00                	lw	s0,56(s0)
    1bc6:	01fa                	slli	gp,gp,0x1e
    1bc8:	0000                	unimp
    1bca:	020c                	addi	a1,sp,256
    1bcc:	0000                	unimp
    1bce:	0001                	nop
    1bd0:	0c5c                	addi	a5,sp,532
    1bd2:	0002                	c.slli64	zero
    1bd4:	1400                	addi	s0,sp,544
    1bd6:	0002                	c.slli64	zero
    1bd8:	0300                	addi	s0,sp,384
    1bda:	7c00                	flw	fs0,56(s0)
    1bdc:	9f01                	0x9f01
    1bde:	0214                	addi	a3,sp,256
    1be0:	0000                	unimp
    1be2:	0220                	addi	s0,sp,264
    1be4:	0000                	unimp
    1be6:	0001                	nop
    1be8:	005c                	addi	a5,sp,4
    1bea:	0000                	unimp
    1bec:	0000                	unimp
    1bee:	0000                	unimp
    1bf0:	b000                	fsd	fs0,32(s0)
    1bf2:	0001                	nop
    1bf4:	d000                	sw	s0,32(s0)
    1bf6:	0001                	nop
    1bf8:	0600                	addi	s0,sp,768
    1bfa:	0300                	addi	s0,sp,384
    1bfc:	1264                	addi	s1,sp,300
    1bfe:	0000                	unimp
    1c00:	009f 0000 0000      	0x9f
    1c06:	0000                	unimp
    1c08:	e400                	fsw	fs0,8(s0)
    1c0a:	0000                	unimp
    1c0c:	b400                	fsd	fs0,40(s0)
    1c0e:	0001                	nop
    1c10:	0200                	addi	s0,sp,256
    1c12:	7200                	flw	fs0,32(a2)
    1c14:	b400                	fsd	fs0,40(s0)
    1c16:	0001                	nop
    1c18:	d000                	sw	s0,32(s0)
    1c1a:	0001                	nop
    1c1c:	0d00                	addi	s0,sp,656
    1c1e:	7500                	flw	fs0,40(a0)
    1c20:	f300                	fsw	fs0,32(a4)
    1c22:	5d01                	li	s10,-32
    1c24:	2432                	fld	fs0,264(sp)
    1c26:	f0090f23          	sb	zero,-226(s2)
    1c2a:	1c1a                	slli	s8,s8,0x26
    1c2c:	01d0                	addi	a2,sp,196
    1c2e:	0000                	unimp
    1c30:	0272                	slli	tp,tp,0x1c
    1c32:	0000                	unimp
    1c34:	0002                	c.slli64	zero
    1c36:	0072                	c.slli	zero,0x1c
	...
    1c40:	00de                	slli	ra,ra,0x17
    1c42:	0000                	unimp
    1c44:	011a                	slli	sp,sp,0x6
    1c46:	0000                	unimp
    1c48:	0001                	nop
    1c4a:	1a56                	slli	s4,s4,0x35
    1c4c:	0001                	nop
    1c4e:	2200                	fld	fs0,0(a2)
    1c50:	0001                	nop
    1c52:	0300                	addi	s0,sp,384
    1c54:	7d00                	flw	fs0,56(a0)
    1c56:	9f7f                	0x9f7f
    1c58:	0122                	slli	sp,sp,0x8
    1c5a:	0000                	unimp
    1c5c:	0190                	addi	a2,sp,192
    1c5e:	0000                	unimp
    1c60:	0001                	nop
    1c62:	9056                	c.add	zero,s5
    1c64:	0001                	nop
    1c66:	ac00                	fsd	fs0,24(s0)
    1c68:	0001                	nop
    1c6a:	0300                	addi	s0,sp,384
    1c6c:	7d00                	flw	fs0,56(a0)
    1c6e:	9f7f                	0x9f7f
    1c70:	01ac                	addi	a1,sp,200
    1c72:	0000                	unimp
    1c74:	01d0                	addi	a2,sp,196
    1c76:	0000                	unimp
    1c78:	0006                	c.slli	zero,0x1
    1c7a:	315d01f3          	0x315d01f3
    1c7e:	9f1c                	0x9f1c
    1c80:	01d0                	addi	a2,sp,196
    1c82:	0000                	unimp
    1c84:	0262                	slli	tp,tp,0x18
    1c86:	0000                	unimp
    1c88:	7f7d0003          	lb	zero,2039(s10)
    1c8c:	629f 0002 7200      	0x72000002629f
    1c92:	0002                	c.slli64	zero
    1c94:	0600                	addi	s0,sp,768
    1c96:	f300                	fsw	fs0,32(a4)
    1c98:	5d01                	li	s10,-32
    1c9a:	1c31                	addi	s8,s8,-20
    1c9c:	009f 0000 0000      	0x9f
    1ca2:	0000                	unimp
    1ca4:	e200                	fsw	fs0,0(a2)
    1ca6:	0000                	unimp
    1ca8:	ba00                	fsd	fs0,48(a2)
    1caa:	0001                	nop
    1cac:	0100                	addi	s0,sp,128
    1cae:	6200                	flw	fs0,0(a2)
    1cb0:	01ba                	slli	gp,gp,0xe
    1cb2:	0000                	unimp
    1cb4:	01d0                	addi	a2,sp,196
    1cb6:	0000                	unimp
    1cb8:	0006                	c.slli	zero,0x1
    1cba:	315b01f3          	0x315b01f3
    1cbe:	9f1c                	0x9f1c
    1cc0:	01d0                	addi	a2,sp,196
    1cc2:	0000                	unimp
    1cc4:	0272                	slli	tp,tp,0x1c
    1cc6:	0000                	unimp
    1cc8:	0001                	nop
    1cca:	0062                	c.slli	zero,0x18
    1ccc:	0000                	unimp
    1cce:	0000                	unimp
    1cd0:	0000                	unimp
    1cd2:	e200                	fsw	fs0,0(a2)
    1cd4:	0000                	unimp
    1cd6:	1a00                	addi	s0,sp,304
    1cd8:	0001                	nop
    1cda:	0100                	addi	s0,sp,128
    1cdc:	5600                	lw	s0,40(a2)
    1cde:	011a                	slli	sp,sp,0x6
    1ce0:	0000                	unimp
    1ce2:	0122                	slli	sp,sp,0x8
    1ce4:	0000                	unimp
    1ce6:	7f7d0003          	lb	zero,2039(s10)
    1cea:	229f 0001 9000      	0x90000001229f
    1cf0:	0001                	nop
    1cf2:	0100                	addi	s0,sp,128
    1cf4:	5600                	lw	s0,40(a2)
    1cf6:	0190                	addi	a2,sp,192
    1cf8:	0000                	unimp
    1cfa:	01ac                	addi	a1,sp,200
    1cfc:	0000                	unimp
    1cfe:	7f7d0003          	lb	zero,2039(s10)
    1d02:	ac9f 0001 d000      	0xd0000001ac9f
    1d08:	0001                	nop
    1d0a:	0600                	addi	s0,sp,768
    1d0c:	f300                	fsw	fs0,32(a4)
    1d0e:	5d01                	li	s10,-32
    1d10:	1c31                	addi	s8,s8,-20
    1d12:	d09f 0001 6200      	0x62000001d09f
    1d18:	0002                	c.slli64	zero
    1d1a:	0300                	addi	s0,sp,384
    1d1c:	7d00                	flw	fs0,56(a0)
    1d1e:	9f7f                	0x9f7f
    1d20:	0262                	slli	tp,tp,0x18
    1d22:	0000                	unimp
    1d24:	0272                	slli	tp,tp,0x1c
    1d26:	0000                	unimp
    1d28:	0006                	c.slli	zero,0x1
    1d2a:	315d01f3          	0x315d01f3
    1d2e:	9f1c                	0x9f1c
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0d50                	addi	a2,sp,660
  16:	0000                	unimp
  18:	0fd8                	addi	a4,sp,980
  1a:	0000                	unimp
  1c:	00f8                	addi	a4,sp,76
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1735                	addi	a4,a4,-19
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0ddc                	addi	a5,sp,724
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	008c                	addi	a1,sp,64
   2:	0000                	unimp
   4:	0ddc                	addi	a5,sp,724
   6:	0000                	unimp
   8:	0fd8                	addi	a4,sp,980
   a:	0000                	unimp
   c:	10d0                	addi	a2,sp,100
	...
  16:	0000                	unimp
  18:	ffff                	0xffff
  1a:	ffff                	0xffff
  1c:	0000                	unimp
  1e:	0000                	unimp
  20:	0ddc                	addi	a5,sp,724
  22:	0000                	unimp
  24:	0e52                	slli	t3,t3,0x14
  26:	0000                	unimp
  28:	0000                	unimp
  2a:	0000                	unimp
  2c:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	29a9                	jal	45a <polydiv+0x78>
       2:	0000                	unimp
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0xf6>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult2+0xee>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <ext_euclid+0x6e>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0x150>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult2+0x118>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
      86:	6972                	flw	fs2,28(sp)
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    int line[size_b][size_a + size_b];
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
      90:	776f6e6b          	0x776f6e6b
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0xc0>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      a0:	0065                	c.nop	25
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
    int pola[size_a];
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      aa:	625f 7469 2e4d      	0x2e4d7469625f
      b0:	00000063          	beqz	zero,b0 <polymult+0x24>
    int line[size_b][size_a + size_b];
      b4:	7300                	flw	fs0,32(a4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b6:	6474                	flw	fa3,76(s0)
      b8:	6564                	flw	fs1,76(a0)
      ba:	2e66                	fld	ft8,88(sp)
    int line[size_b][size_a + size_b];
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
    int pola[size_a];
      c0:	5f00                	lw	s0,56(a4)
      c2:	7974                	flw	fa3,116(a0)
    int line[size_b][size_a + size_b];
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
    int pola[size_a];
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
    int polb[size_b];
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
    int pola[size_a];
      d4:	0200                	addi	s0,sp,256
    int polb[size_b];
      d6:	0000                	unimp
      d8:	6f6c                	flw	fa1,92(a4)
    int line[size_b][size_a + size_b];
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0x13c>
    int pola[size_a];
      de:	0200                	addi	s0,sp,256
      e0:	0000                	unimp
    int polb[size_b];
      e2:	6c647473          	csrrci	s0,0x6c6,8
            line[i][j] = 0;
      e6:	6269                	lui	tp,0x1a
      e8:	682e                	flw	fa6,200(sp)
    for (i = 0; i < size_b; ++i){
      ea:	0300                	addi	s0,sp,384
      ec:	0000                	unimp
            product[j] = 0;
      ee:	623c                	flw	fa5,64(a2)
      f0:	6975                	lui	s2,0x1d
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
    for (i = 0; i < size_b; ++i){
      f6:	3e6e                	fld	ft8,248(sp)
      f8:	0000                	unimp
      fa:	0000                	unimp
    for (i = 0; i < size_a; ++i){
      fc:	0500                	addi	s0,sp,640
      fe:	004e                	c.slli	zero,0x13
     100:	0205                	addi	tp,tp,1
     102:	008c                	addi	a1,sp,64
    for (i = 0; i < size_b; ++i){
     104:	0000                	unimp
     106:	05010e03          	lb	t3,80(sp)
    if(star_mult == 1){
     10a:	0305                	addi	t1,t1,1
     10c:	0902                	c.slli64	s2
     10e:	0000                	unimp
     110:	0501                	addi	a0,a0,0
     112:	061d                	addi	a2,a2,7
     114:	00090003          	lb	zero,0(s2) # b000 <_stack_len+0x7000>
     118:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     11a:	0905                	addi	s2,s2,1
     11c:	08090003          	lb	zero,128(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     120:	0100                	addi	s0,sp,128
            product[j] = 0;
     122:	4e05                	li	t3,1
     124:	0c097e03          	0xc097e03
            line[i][j] = 0;
     128:	0100                	addi	s0,sp,128
     12a:	0905                	addi	s2,s2,1
            product[j] = 0;
     12c:	06090503          	lb	a0,96(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     130:	0100                	addi	s0,sp,128
     132:	4e05                	li	t3,1
     134:	04097b03          	0x4097b03
    for (i = 0; i < size_b; ++i){
     138:	0100                	addi	s0,sp,128
     13a:	0905                	addi	s2,s2,1
     13c:	0a090203          	lb	tp,160(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     140:	0100                	addi	s0,sp,128
     142:	4e05                	li	t3,1
        pola[i] = a[i];
     144:	02097e03          	0x2097e03
     148:	0100                	addi	s0,sp,128
     14a:	0905                	addi	s2,s2,1
     14c:	06090203          	lb	tp,96(s2)
            pola[i] = pola[i] + mod;
     150:	0100                	addi	s0,sp,128
        while (pola[i] < 0){
     152:	04090303          	lb	t1,64(s2)
     156:	0100                	addi	s0,sp,128
     158:	4e05                	li	t3,1
        pola[i] = pola[i] % mod;
     15a:	04097b03          	0x4097b03
    for (i = 0; i < size_a; ++i){
     15e:	0100                	addi	s0,sp,128
     160:	0905                	addi	s2,s2,1
        pola[i] = pola[i] % mod;
     162:	00090203          	lb	tp,0(s2)
    for (i = 0; i < size_a; ++i){
     166:	0100                	addi	s0,sp,128
            pola[i] = pola[i] + mod;
     168:	06090303          	lb	t1,96(s2)
        polb[i] = b[i];
     16c:	0100                	addi	s0,sp,128
     16e:	04090103          	lb	sp,64(s2)
     172:	0100                	addi	s0,sp,128
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     174:	06097f03          	0x6097f03
        while (polb[i] < 0){
     178:	0100                	addi	s0,sp,128
     17a:	02090103          	lb	sp,32(s2)
        polb[i] = polb[i] % mod;
     17e:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     180:	04097c03          	0x4097c03
        polb[i] = polb[i] % mod;
     184:	0100                	addi	s0,sp,128
     186:	0505                	addi	a0,a0,1
    for (i = 0; i < size_b; ++i){
     188:	0306                	slli	t1,t1,0x1
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     18a:	0901                	addi	s2,s2,0
     18c:	0004                	0x4
    if(star_mult == 1){
     18e:	0301                	addi	t1,t1,0
        for (j = size_b -1; j >= 0; j = j-1){
     190:	0901                	addi	s2,s2,0
     192:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     194:	0301                	addi	t1,t1,0
    for (i = 0; i < size_b; ++i){
     196:	0901                	addi	s2,s2,0
     198:	0000                	unimp
     19a:	0501                	addi	a0,a0,0
     19c:	0609                	addi	a2,a2,2
     19e:	00090003          	lb	zero,0(s2)
     1a2:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     1a4:	0505                	addi	a0,a0,1
     1a6:	0306                	slli	t1,t1,0x1
     1a8:	0901                	addi	s2,s2,0
    for(j = 0; j < size_a + size_b -1; ++j){
     1aa:	0004                	0x4
     1ac:	0501                	addi	a0,a0,0
     1ae:	0609                	addi	a2,a2,2
}
     1b0:	00090003          	lb	zero,0(s2)
     1b4:	0100                	addi	s0,sp,128
     1b6:	0505                	addi	a0,a0,1
     1b8:	0306                	slli	t1,t1,0x1
     1ba:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
     1be:	0501                	addi	a0,a0,0
     1c0:	0614                	addi	a3,sp,768
     1c2:	00090203          	lb	tp,0(s2)
     1c6:	0100                	addi	s0,sp,128
     1c8:	0505                	addi	a0,a0,1
     1ca:	06097e03          	0x6097e03
     1ce:	0100                	addi	s0,sp,128
                line[size_b-1-j][k] = pola[k]*polb[j];
     1d0:	0c05                	addi	s8,s8,1
     1d2:	02090003          	lb	zero,32(s2)
     1d6:	0100                	addi	s0,sp,128
     1d8:	1805                	addi	a6,a6,-31
     1da:	02090303          	lb	t1,32(s2)
     1de:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e0:	1105                	addi	sp,sp,-31
                line[size_b-1-j][k] = pola[k]*polb[j];
     1e2:	0200                	addi	s0,sp,256
     1e4:	0104                	addi	s1,sp,128
     1e6:	0306                	slli	t1,t1,0x1
     1e8:	097d                	addi	s2,s2,31
            for (k = size_a-1; k >= 0; k = k-1 ){
     1ea:	0008                	0x8
     1ec:	0501                	addi	a0,a0,0
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	0005                	c.nop	1
     1f0:	0402                	c.slli64	s0
     1f2:	0601                	addi	a2,a2,0
     1f4:	00090003          	lb	zero,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f8:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     1fa:	0c05                	addi	s8,s8,1
     1fc:	06090803          	lb	a6,96(s2)
     200:	0100                	addi	s0,sp,128
     202:	1105                	addi	sp,sp,-31
     204:	0200                	addi	s0,sp,256
     206:	0104                	addi	s1,sp,128
     208:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     20a:	0900                	addi	s0,sp,144
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     20c:	0002                	c.slli64	zero
     20e:	0501                	addi	a0,a0,0
     210:	0005                	c.nop	1
     212:	0402                	c.slli64	s0
            for (k = size_a-1; k >= 0; k = k-1 ){
     214:	0601                	addi	a2,a2,0
     216:	00090003          	lb	zero,0(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     21a:	0100                	addi	s0,sp,128
     21c:	0c05                	addi	s8,s8,1
     21e:	06090903          	lb	s2,96(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     222:	0100                	addi	s0,sp,128
     224:	1105                	addi	sp,sp,-31
            line[i][j] = line[i][j] % mod;
     226:	0200                	addi	s0,sp,256
     228:	0104                	addi	s1,sp,128
     22a:	0306                	slli	t1,t1,0x1
     22c:	0900                	addi	s0,sp,144
        for(j = 0; j < size_a + size_b -1; ++j){
     22e:	0002                	c.slli64	zero
     230:	0501                	addi	a0,a0,0
    for (i = 0; i < size_b; ++i){
     232:	0005                	c.nop	1
     234:	0402                	c.slli64	s0
     236:	0601                	addi	a2,a2,0
     238:	00090003          	lb	zero,0(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     23c:	0100                	addi	s0,sp,128
            product[j] += line[i][j];
     23e:	0306                	slli	t1,t1,0x1
     240:	0909                	addi	s2,s2,2
     242:	0004                	0x4
     244:	0501                	addi	a0,a0,0
        for(i = 0; i < size_b; ++i){
     246:	00030607          	0x30607
            product[j] += line[i][j];
     24a:	0009                	c.nop	2
     24c:	0100                	addi	s0,sp,128
     24e:	1d05                	addi	s10,s10,-31
     250:	0200                	addi	s0,sp,256
     252:	0104                	addi	s1,sp,128
        for(i = 0; i < size_b; ++i){
     254:	0306                	slli	t1,t1,0x1
     256:	0908                	addi	a0,sp,144
    for(j = 0; j < size_a + size_b -1; ++j){
     258:	0010                	0x10
     25a:	0501                	addi	a0,a0,0
     25c:	0009                	c.nop	2
        for(i = 0; i < size_b; ++i){
     25e:	0402                	c.slli64	s0
     260:	0601                	addi	a2,a2,0
        product[j] = product[j] % mod;
     262:	00090003          	lb	zero,0(s2)
    for(j = 0; j < size_a + size_b -1; ++j){
     266:	0100                	addi	s0,sp,128
        product[j] = product[j] % mod;
     268:	1405                	addi	s0,s0,-31
     26a:	04090103          	lb	sp,64(s2)
     26e:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     270:	0d05                	addi	s10,s10,1
    int line[size_b][size_a + size_b];
     272:	0200                	addi	s0,sp,256
     274:	0304                	addi	s1,sp,384
     276:	0306                	slli	t1,t1,0x1
     278:	095f 0004 0501      	0x5010004095f
     27e:	0018                	0x18
     280:	0402                	c.slli64	s0
     282:	01030603          	lb	a2,16(t1) # ffffa010 <_stack_start+0xfffea010>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     286:	0009                	c.nop	2
     288:	0100                	addi	s0,sp,128
     28a:	0200                	addi	s0,sp,256
     28c:	0304                	addi	s1,sp,384
     28e:	06097f03          	0x6097f03
     292:	0100                	addi	s0,sp,128
     294:	0d05                	addi	s10,s10,1
     296:	0200                	addi	s0,sp,256
    int line[size_b][size_a + size_b];
     298:	0304                	addi	s1,sp,384
     29a:	0306                	slli	t1,t1,0x1
     29c:	0901                	addi	s2,s2,0
     29e:	0004                	0x4
    int pola[size_a];
     2a0:	0501                	addi	a0,a0,0
     2a2:	0018                	0x18
     2a4:	0402                	c.slli64	s0
     2a6:	00030603          	lb	a2,0(t1)
     2aa:	0009                	c.nop	2
     2ac:	0100                	addi	s0,sp,128
    int polb[size_b];
     2ae:	2c05                	jal	4de <polydiv+0xfc>
     2b0:	0200                	addi	s0,sp,256
     2b2:	0304                	addi	s1,sp,384
    int pola[size_a];
     2b4:	0306                	slli	t1,t1,0x1
    int polb[size_b];
     2b6:	097e                	slli	s2,s2,0x1f
     2b8:	0004                	0x4
    int line[size_b][size_a + size_b];
     2ba:	0501                	addi	a0,a0,0
     2bc:	0014                	0x14
    int pola[size_a];
     2be:	0402                	c.slli64	s0
     2c0:	0301                	addi	t1,t1,0
    int polb[size_b];
     2c2:	0900                	addi	s0,sp,144
            line[i][j] = 0;
     2c4:	0004                	0x4
     2c6:	0501                	addi	a0,a0,0
     2c8:	0009                	c.nop	2
    for (i = 0; i < size_b; ++i){
     2ca:	0402                	c.slli64	s0
     2cc:	0601                	addi	a2,a2,0
            product2[j] = 0;
     2ce:	00090003          	lb	zero,0(s2)
     2d2:	0100                	addi	s0,sp,128
     2d4:	1d05                	addi	s10,s10,-31
    for (i = 0; i < size_b; ++i){
     2d6:	0200                	addi	s0,sp,256
     2d8:	0204                	addi	s1,sp,256
    for(i = 0; i < size_a; ++i){
     2da:	0306                	slli	t1,t1,0x1
     2dc:	097f                	0x97f
     2de:	0004                	0x4
    for(i = 0; i < size_b; ++i){
     2e0:	0501                	addi	a0,a0,0
     2e2:	0103060f          	0x103060f
    if(star_mult == 1){
     2e6:	0809                	addi	a6,a6,2
     2e8:	0100                	addi	s0,sp,128
     2ea:	0905                	addi	s2,s2,1
     2ec:	0306                	slli	t1,t1,0x1
     2ee:	0908                	addi	a0,sp,144
     2f0:	0004                	0x4
     2f2:	0501                	addi	a0,a0,0
        for (j = size_b -1; j >= 0; j = j-1){
     2f4:	0614                	addi	a3,sp,768
     2f6:	00090003          	lb	zero,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2fa:	0100                	addi	s0,sp,128
            product2[j] = 0;
     2fc:	1105                	addi	sp,sp,-31
     2fe:	06090003          	lb	zero,96(s2)
            line[i][j] = 0;
     302:	0100                	addi	s0,sp,128
     304:	1505                	addi	a0,a0,-31
            product2[j] = 0;
     306:	04090203          	lb	tp,64(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     30a:	0100                	addi	s0,sp,128
     30c:	0f05                	addi	t5,t5,1
     30e:	0306                	slli	t1,t1,0x1
     310:	097f                	0x97f
    for (i = 0; i < size_b; ++i){
     312:	0004                	0x4
     314:	0501                	addi	a0,a0,0
     316:	0614                	addi	a3,sp,768
     318:	00090003          	lb	zero,0(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     31c:	0100                	addi	s0,sp,128
        pola[i] = a[i];
     31e:	0f05                	addi	t5,t5,1
     320:	04090003          	lb	zero,64(s2)
     324:	0100                	addi	s0,sp,128
     326:	0905                	addi	s2,s2,1
     328:	0200                	addi	s0,sp,256
    for(i = 0; i < size_a; ++i){
     32a:	0204                	addi	s1,sp,256
        pola[i] = a[i];
     32c:	0306                	slli	t1,t1,0x1
     32e:	00040903          	lb	s2,0(s0)
        polb[i] = b[i];
     332:	0501                	addi	a0,a0,0
     334:	0402001b          	0x402001b
     338:	0602                	c.slli64	a2
     33a:	00090003          	lb	zero,0(s2)
    for(i = 0; i < size_b; ++i){
     33e:	0100                	addi	s0,sp,128
        polb[i] = b[i];
     340:	1d05                	addi	s10,s10,-31
     342:	0200                	addi	s0,sp,256
    for(i = 0; i < size_b; ++i){
     344:	0204                	addi	s1,sp,256
                line[size_b-1-j][k] = pola[k]*polb[j];
     346:	04097b03          	0x4097b03
     34a:	0100                	addi	s0,sp,128
     34c:	1105                	addi	sp,sp,-31
     34e:	0200                	addi	s0,sp,256
     350:	0204                	addi	s1,sp,256
     352:	04090503          	lb	a0,64(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     356:	0100                	addi	s0,sp,128
                line[size_b-1-j][k] = pola[k]*polb[j];
     358:	1d05                	addi	s10,s10,-31
     35a:	0200                	addi	s0,sp,256
     35c:	0204                	addi	s1,sp,256
            for (k = size_a-1; k >= 0; k = k-1 ){
     35e:	0306                	slli	t1,t1,0x1
     360:	0004097b          	0x4097b
        for (j = size_b -1; j >= 0; j = j-1){
     364:	0501                	addi	a0,a0,0
     366:	030d                	addi	t1,t1,3
     368:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     36c:	0501                	addi	a0,a0,0
     36e:	061f 0003 0009      	0x90003061f
        for(i = 0; i < size_b; ++i){
     374:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     376:	0905                	addi	s2,s2,1
     378:	0306                	slli	t1,t1,0x1
}
     37a:	00040907          	0x40907
     37e:	0501                	addi	a0,a0,0
     380:	0614                	addi	a3,sp,768
     382:	00090003          	lb	zero,0(s2)
     386:	0100                	addi	s0,sp,128
     388:	1105                	addi	sp,sp,-31
     38a:	06090003          	lb	zero,96(s2)
     38e:	0100                	addi	s0,sp,128
     390:	1505                	addi	a0,a0,-31
     392:	02090203          	lb	tp,32(s2)
     396:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     398:	0f05                	addi	t5,t5,1
     39a:	0306                	slli	t1,t1,0x1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     39c:	097f                	0x97f
     39e:	0002                	c.slli64	zero
     3a0:	0501                	addi	a0,a0,0
     3a2:	0614                	addi	a3,sp,768
     3a4:	00090003          	lb	zero,0(s2)
     3a8:	0100                	addi	s0,sp,128
     3aa:	0f05                	addi	t5,t5,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ac:	02090003          	lb	zero,32(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3b0:	0100                	addi	s0,sp,128
     3b2:	0905                	addi	s2,s2,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b4:	0200                	addi	s0,sp,256
     3b6:	0204                	addi	s1,sp,256
        for (j = size_b -1; j >= 0; j = j-1){
     3b8:	0306                	slli	t1,t1,0x1
     3ba:	00040903          	lb	s2,0(s0)
     3be:	0501                	addi	a0,a0,0
            product2[j] += line[i][j];
     3c0:	0402001b          	0x402001b
     3c4:	0602                	c.slli64	a2
        for(i = 0; i < size_b; ++i){
     3c6:	00090003          	lb	zero,0(s2)
            product2[j] += line[i][j];
     3ca:	0100                	addi	s0,sp,128
     3cc:	1d05                	addi	s10,s10,-31
     3ce:	0200                	addi	s0,sp,256
     3d0:	0204                	addi	s1,sp,256
     3d2:	04097b03          	0x4097b03
        for(i = 0; i < size_b; ++i){
     3d6:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     3d8:	1105                	addi	sp,sp,-31
     3da:	0200                	addi	s0,sp,256
     3dc:	0204                	addi	s1,sp,256
        for(i = 0; i < size_b; ++i){
     3de:	04090503          	lb	a0,64(s2)
    int v[size_N];
     3e2:	0100                	addi	s0,sp,128
     3e4:	1d05                	addi	s10,s10,-31
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3e6:	0200                	addi	s0,sp,256
    int v[size_N];
     3e8:	0204                	addi	s1,sp,256
     3ea:	0306                	slli	t1,t1,0x1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3ec:	0004097b          	0x4097b
     3f0:	0501                	addi	a0,a0,0
     3f2:	030d                	addi	t1,t1,3
     3f4:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     3f8:	0501                	addi	a0,a0,0
     3fa:	061f 0003 0009      	0x90003061f
     400:	0100                	addi	s0,sp,128
     402:	0705                	addi	a4,a4,1
     404:	04090603          	lb	a2,64(s2)
    int v[size_N];
     408:	0100                	addi	s0,sp,128
     40a:	1d05                	addi	s10,s10,-31
     40c:	0200                	addi	s0,sp,256
    int q[size_N];
     40e:	0104                	addi	s1,sp,128
     410:	0306                	slli	t1,t1,0x1
     412:	0901                	addi	s2,s2,0
    int num_temp[size_N];
     414:	0002                	c.slli64	zero
     416:	0501                	addi	a0,a0,0
    int denum_temp[size_D];
     418:	0009                	c.nop	2
     41a:	0402                	c.slli64	s0
     41c:	0601                	addi	a2,a2,0
     41e:	00090003          	lb	zero,0(s2)
     422:	0100                	addi	s0,sp,128
     424:	0f05                	addi	t5,t5,1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     426:	04091003          	lh	zero,64(s2)
    int denum_temp[size_D];
     42a:	0100                	addi	s0,sp,128
     42c:	1105                	addi	sp,sp,-31
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     42e:	0200                	addi	s0,sp,256
    int v[size_N];
     430:	0104                	addi	s1,sp,128
     432:	0306                	slli	t1,t1,0x1
    int denum_temp[size_D];
     434:	097f                	0x97f
    for (i = 0; i < size_N; ++i){
     436:	0002                	c.slli64	zero
     438:	0501                	addi	a0,a0,0
     43a:	0005                	c.nop	1
     43c:	0402                	c.slli64	s0
     43e:	0601                	addi	a2,a2,0
     440:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_D; ++i) {
     444:	0100                	addi	s0,sp,128
     446:	0c090003          	lb	zero,192(s2)
    for (i = 0; i < size_N; ++i){
     44a:	0100                	addi	s0,sp,128
     44c:	0b05                	addi	s6,s6,1
    for (i = size_D-1; i >= 0; i = i-1){
     44e:	02090703          	lb	a4,32(s2)
     452:	0100                	addi	s0,sp,128
     454:	1005                	c.nop	-31
     456:	0200                	addi	s0,sp,256
     458:	0104                	addi	s1,sp,128
    for (i = 0; i < size_N; ++i){
     45a:	0306                	slli	t1,t1,0x1
     45c:	0900                	addi	s0,sp,144
        if ( (b_N*u)%mod == 1 )
     45e:	0002                	c.slli64	zero
    for (u = 0; u < mod; ++u){
     460:	0501                	addi	a0,a0,0
     462:	0005                	c.nop	1
     464:	0402                	c.slli64	s0
     466:	0601                	addi	a2,a2,0
        num_temp[i] = num[i];
     468:	00090003          	lb	zero,0(s2)
     46c:	0100                	addi	s0,sp,128
     46e:	0b05                	addi	s6,s6,1
            num_temp[i] = num_temp[i] + mod;
     470:	04090703          	lb	a4,64(s2)
        while (num_temp[i] < 0) {
     474:	0100                	addi	s0,sp,128
     476:	1005                	c.nop	-31
        num_temp[i] = num_temp[i] % mod;
     478:	0200                	addi	s0,sp,256
     47a:	0104                	addi	s1,sp,128
    for (i = 0; i < size_N; ++i){
     47c:	0306                	slli	t1,t1,0x1
     47e:	0900                	addi	s0,sp,144
        num_temp[i] = num_temp[i] % mod;
     480:	0002                	c.slli64	zero
     482:	0501                	addi	a0,a0,0
    for (i = 0; i < size_N; ++i){
     484:	0005                	c.nop	1
            num_temp[i] = num_temp[i] + mod;
     486:	0402                	c.slli64	s0
     488:	0601                	addi	a2,a2,0
        denum_temp[i] = denum[i];
     48a:	00090003          	lb	zero,0(s2)
     48e:	0100                	addi	s0,sp,128
     490:	0306                	slli	t1,t1,0x1
            denum_temp[i] = denum_temp[i] + mod;
     492:	0904                	addi	s1,sp,144
        while (denum_temp[i] < 0) {
     494:	0004                	0x4
     496:	0301                	addi	t1,t1,0
     498:	0902                	c.slli64	s2
        denum_temp[i] = denum_temp[i] % mod;
     49a:	0000                	unimp
     49c:	0501                	addi	a0,a0,0
    for (i = 0; i < size_D; ++i) {
     49e:	0601                	addi	a2,a2,0
     4a0:	00090103          	lb	sp,0(s2)
        denum_temp[i] = denum_temp[i] % mod;
     4a4:	0100                	addi	s0,sp,128
    for (i = 0; i < size_D; ++i) {
     4a6:	1105                	addi	sp,sp,-31
            denum_temp[i] = denum_temp[i] + mod;
     4a8:	0200                	addi	s0,sp,256
     4aa:	0304                	addi	s1,sp,384
        q[i] = 0;
     4ac:	0306                	slli	t1,t1,0x1
     4ae:	095e                	slli	s2,s2,0x17
     4b0:	0020                	addi	s0,sp,8
     4b2:	0501                	addi	a0,a0,0
        v[i] = 0;
     4b4:	0025                	c.nop	9
        q[i] = 0;
     4b6:	0402                	c.slli64	s0
     4b8:	00030603          	lb	a2,0(t1)
        v[i] = 0;
     4bc:	0409                	addi	s0,s0,2
    for (i = 0; i < size_N; ++i){
     4be:	0100                	addi	s0,sp,128
     4c0:	2b05                	jal	9f0 <generate_keys+0xd8>
        if( denum_temp[i] != 0 )
     4c2:	0200                	addi	s0,sp,256
    for (i = size_D-1; i >= 0; i = i-1){
     4c4:	0304                	addi	s1,sp,384
     4c6:	04090003          	lb	zero,64(s2)
        if ( (b_N*u)%mod == 1 )
     4ca:	0100                	addi	s0,sp,128
     4cc:	2e05                	jal	7fc <ext_euclid+0x1c8>
     4ce:	0200                	addi	s0,sp,256
     4d0:	0304                	addi	s1,sp,384
    for (u = 0; u < mod; ++u){
     4d2:	02090003          	lb	zero,32(s2)
        if( num_temp[i] != 0 )
     4d6:	0100                	addi	s0,sp,128
    for (i = size_N-1; i >= 0; i = i-1){
     4d8:	2a05                	jal	608 <polydiv+0x226>
     4da:	0200                	addi	s0,sp,256
     4dc:	0304                	addi	s1,sp,384
     4de:	06097f03          	0x6097f03
     4e2:	0100                	addi	s0,sp,128
     4e4:	2e05                	jal	814 <ext_euclid+0x1e0>
    while (d >= d2){
     4e6:	0200                	addi	s0,sp,256
     4e8:	0304                	addi	s1,sp,384
    for(i = 0; i < size_N; ++i){
     4ea:	02090103          	lb	sp,32(s2)
        result[i] = q[i];
     4ee:	0100                	addi	s0,sp,128
     4f0:	2505                	jal	b10 <generate_keys+0x1f8>
     4f2:	0200                	addi	s0,sp,256
    for(i = 0; i < size_N; ++i){
     4f4:	0304                	addi	s1,sp,384
     4f6:	04090003          	lb	zero,64(s2)
    for(i = size_N; i < (2*size_N); ++i){
     4fa:	0100                	addi	s0,sp,128
        result[i] = num_temp[i-size_N];
     4fc:	2805                	jal	52c <polydiv+0x14a>
     4fe:	0200                	addi	s0,sp,256
     500:	0304                	addi	s1,sp,384
     502:	0306                	slli	t1,t1,0x1
    for(i = size_N; i < (2*size_N); ++i){
     504:	097f                	0x97f
     506:	0004                	0x4
}
     508:	0501                	addi	a0,a0,0
     50a:	0020                	addi	s0,sp,8
     50c:	0402                	c.slli64	s0
     50e:	0301                	addi	t1,t1,0
     510:	0900                	addi	s0,sp,144
     512:	0000                	unimp
     514:	0501                	addi	a0,a0,0
     516:	000d                	c.nop	3
     518:	0402                	c.slli64	s0
     51a:	0601                	addi	a2,a2,0
     51c:	00090003          	lb	zero,0(s2)
     520:	0100                	addi	s0,sp,128
     522:	2505                	jal	b42 <generate_keys+0x22a>
     524:	0200                	addi	s0,sp,256
     526:	0204                	addi	s1,sp,256
     528:	0306                	slli	t1,t1,0x1
     52a:	097f                	0x97f
     52c:	0004                	0x4
     52e:	0501                	addi	a0,a0,0
     530:	04020027          	0x4020027
        v[(d-d2)] = u*r_d;
     534:	0602                	c.slli64	a2
     536:	00090003          	lb	zero,0(s2)
     53a:	0100                	addi	s0,sp,128
     53c:	1405                	addi	s0,s0,-31
     53e:	08090103          	lb	sp,128(s2)
        for (i = 0; i < size_N; ++i){
     542:	0100                	addi	s0,sp,128
     544:	1105                	addi	sp,sp,-31
     546:	0200                	addi	s0,sp,256
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     548:	0304                	addi	s1,sp,384
     54a:	0306                	slli	t1,t1,0x1
     54c:	0908                	addi	a0,sp,144
     54e:	0004                	0x4
     550:	0501                	addi	a0,a0,0
     552:	0029                	c.nop	10
     554:	0402                	c.slli64	s0
        for (i = 0; i < size_N; ++i){
     556:	00030603          	lb	a2,0(t1)
     55a:	0409                	addi	s0,s0,2
     55c:	0100                	addi	s0,sp,128
     55e:	2f05                	jal	c8e <ntru_encyrpt+0x58>
        for (i = 0; i < size_N; ++i){
     560:	0200                	addi	s0,sp,256
     562:	0304                	addi	s1,sp,384
     564:	04090003          	lb	zero,64(s2)
        for (i = 0; i < size_N; ++i){
     568:	0100                	addi	s0,sp,128
     56a:	3205                	jal	fffffe8a <_stack_start+0xfffefe8a>
     56c:	0200                	addi	s0,sp,256
     56e:	0304                	addi	s1,sp,384
        for(i = 0; i < size_N; ++i){
     570:	02090003          	lb	zero,32(s2)
     574:	0100                	addi	s0,sp,128
        for (i = size_N-1; i >= 0; i = i-1){
     576:	2a05                	jal	6a6 <ext_euclid+0x72>
     578:	0200                	addi	s0,sp,256
     57a:	0304                	addi	s1,sp,384
     57c:	06097f03          	0x6097f03
     580:	0100                	addi	s0,sp,128
     582:	3205                	jal	fffffea2 <_stack_start+0xfffefea2>
     584:	0200                	addi	s0,sp,256
     586:	0304                	addi	s1,sp,384
            v[i] = v[i] % mod;
     588:	02090103          	lb	sp,32(s2)
        for (i = 0; i < size_N; ++i){
     58c:	0100                	addi	s0,sp,128
            v[i] = v[i] % mod;
     58e:	2905                	jal	9be <generate_keys+0xa6>
     590:	0200                	addi	s0,sp,256
     592:	0304                	addi	s1,sp,384
     594:	04090003          	lb	zero,64(s2)
                product[i] = product[i] + mod;
     598:	0100                	addi	s0,sp,128
     59a:	2805                	jal	5ca <polydiv+0x1e8>
            while (product[i] < 0) {
     59c:	0200                	addi	s0,sp,256
     59e:	0304                	addi	s1,sp,384
     5a0:	0306                	slli	t1,t1,0x1
            product[i] = product[i] % mod;
     5a2:	097f                	0x97f
     5a4:	0004                	0x4
        for (i = 0; i < size_N; ++i){
     5a6:	0501                	addi	a0,a0,0
     5a8:	0020                	addi	s0,sp,8
            product[i] = product[i] % mod;
     5aa:	0402                	c.slli64	s0
     5ac:	0301                	addi	t1,t1,0
        for (i = 0; i < size_N; ++i){
     5ae:	0900                	addi	s0,sp,144
            num_temp[i] = num_temp[i] - product[i];
     5b0:	0000                	unimp
     5b2:	0501                	addi	a0,a0,0
     5b4:	000d                	c.nop	3
     5b6:	0402                	c.slli64	s0
     5b8:	0601                	addi	a2,a2,0
        for (i = 0; i < size_N; ++i){
     5ba:	00090003          	lb	zero,0(s2)
            num_temp[i] = num_temp[i] - product[i];
     5be:	0100                	addi	s0,sp,128
     5c0:	2505                	jal	be0 <generate_keys+0x2c8>
     5c2:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     5c4:	0204                	addi	s1,sp,256
                num_temp[i] = num_temp[i] + mod;
     5c6:	0306                	slli	t1,t1,0x1
     5c8:	097f                	0x97f
            while (num_temp[i] < 0){
     5ca:	0004                	0x4
     5cc:	0501                	addi	a0,a0,0
     5ce:	04020027          	0x4020027
            num_temp[i] = num_temp[i] % mod;
     5d2:	0602                	c.slli64	a2
        for (i = 0; i < size_N; ++i){
     5d4:	00090003          	lb	zero,0(s2)
            num_temp[i] = num_temp[i] % mod;
     5d8:	0100                	addi	s0,sp,128
     5da:	0d05                	addi	s10,s10,1
        for (i = 0; i < size_N; ++i){
     5dc:	0200                	addi	s0,sp,256
            q[i] = q[i] + v[i];
     5de:	0304                	addi	s1,sp,384
     5e0:	0306                	slli	t1,t1,0x1
     5e2:	090a                	slli	s2,s2,0x2
     5e4:	0008                	0x8
     5e6:	0501                	addi	a0,a0,0
        for(i = 0; i < size_N; ++i){
     5e8:	0025                	c.nop	9
     5ea:	0402                	c.slli64	s0
            q[i] = q[i] + v[i];
     5ec:	00030603          	lb	a2,0(t1)
            q[i] = q[i] % mod;
     5f0:	0009                	c.nop	2
     5f2:	0100                	addi	s0,sp,128
     5f4:	2c05                	jal	824 <ext_euclid+0x1f0>
        for(i = 0; i < size_N; ++i){
     5f6:	0200                	addi	s0,sp,256
            if( num_temp[i] != 0 )
     5f8:	0304                	addi	s1,sp,384
        for (i = size_N-1; i >= 0; i = i-1){
     5fa:	02097f03          	0x2097f03
            v[i] = 0;
     5fe:	0100                	addi	s0,sp,128
     600:	2505                	jal	c20 <generate_keys+0x308>
     602:	0200                	addi	s0,sp,256
     604:	0304                	addi	s1,sp,384
     606:	04090103          	lb	sp,64(s2)
        for (i = 0; i < size_N; ++i){
     60a:	0100                	addi	s0,sp,128
     60c:	1805                	addi	a6,a6,-31
     60e:	0200                	addi	s0,sp,256
        result[i] = q[i];
     610:	0304                	addi	s1,sp,384
     612:	04090003          	lb	zero,64(s2)
     616:	0100                	addi	s0,sp,128
     618:	2c05                	jal	848 <ext_euclid+0x214>
     61a:	0200                	addi	s0,sp,256
    for(i = 0; i < size_N; ++i){
     61c:	0304                	addi	s1,sp,384
        result[i] = q[i];
     61e:	0306                	slli	t1,t1,0x1
    for(i = 0; i < size_N; ++i){
     620:	097f                	0x97f
        result[i] = num_temp[i-size_N];
     622:	0004                	0x4
     624:	0501                	addi	a0,a0,0
     626:	0014                	0x14
     628:	0402                	c.slli64	s0
     62a:	0301                	addi	t1,t1,0
     62c:	0900                	addi	s0,sp,144
    for(i = size_N; i < (2*size_N); ++i){
     62e:	0000                	unimp
     630:	0501                	addi	a0,a0,0
     632:	0009                	c.nop	2
    int ri_2[size]; // MX-ring poly, a
     634:	0402                	c.slli64	s0
     636:	0601                	addi	a2,a2,0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     638:	00090003          	lb	zero,0(s2)
    int ri_2[size]; // MX-ring poly, a
     63c:	0100                	addi	s0,sp,128
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     63e:	1d05                	addi	s10,s10,-31
     640:	0200                	addi	s0,sp,256
     642:	0204                	addi	s1,sp,256
     644:	0306                	slli	t1,t1,0x1
     646:	097f                	0x97f
     648:	0004                	0x4
     64a:	0501                	addi	a0,a0,0
     64c:	0103060f          	0x103060f
     650:	0809                	addi	a6,a6,2
     652:	0100                	addi	s0,sp,128
     654:	0d05                	addi	s10,s10,1
     656:	0200                	addi	s0,sp,256
     658:	0304                	addi	s1,sp,384
    int ri_2[size]; // MX-ring poly, a
     65a:	0306                	slli	t1,t1,0x1
     65c:	0908                	addi	a0,sp,144
     65e:	0004                	0x4
    int ri_1[size]; // f-random poly, f[N] = 0, b
     660:	0501                	addi	a0,a0,0
     662:	0022                	c.slli	zero,0x8
     664:	0402                	c.slli64	s0
    int ri[size];
     666:	00030603          	lb	a2,0(t1)
     66a:	0009                	c.nop	2
    int ti_1[size]; // ti_1[0] = 1
     66c:	0100                	addi	s0,sp,128
     66e:	1805                	addi	a6,a6,-31
     670:	0200                	addi	s0,sp,256
    int ti[size];
     672:	0304                	addi	s1,sp,384
     674:	04090003          	lb	zero,64(s2)
    int qi_1[size];
     678:	0100                	addi	s0,sp,128
     67a:	2005                	jal	69a <ext_euclid+0x66>
     67c:	0200                	addi	s0,sp,256
    int temp[size];
     67e:	0304                	addi	s1,sp,384
     680:	04097f03          	0x4097f03
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     684:	0100                	addi	s0,sp,128
    int ri_2[size]; // MX-ring poly, a
     686:	2205                	jal	7a6 <ext_euclid+0x172>
     688:	0200                	addi	s0,sp,256
    int temp[size];
     68a:	0304                	addi	s1,sp,384
    for (i = 0; i < size; ++i) {
     68c:	02090103          	lb	sp,32(s2)
        ti_2[i] = 0;
     690:	0100                	addi	s0,sp,128
     692:	1805                	addi	a6,a6,-31
     694:	0200                	addi	s0,sp,256
     696:	0304                	addi	s1,sp,384
    for (i = 0; i < size; ++i) {
     698:	06090003          	lb	zero,96(s2)
    ti_1[0] = 1;
     69c:	0100                	addi	s0,sp,128
     69e:	2005                	jal	6be <ext_euclid+0x8a>
     6a0:	0200                	addi	s0,sp,256
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6a2:	0304                	addi	s1,sp,384
     6a4:	0306                	slli	t1,t1,0x1
     6a6:	097f                	0x97f
     6a8:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     6aa:	0501                	addi	a0,a0,0
     6ac:	0014                	0x14
        ri_2[i] = polyR[i];
     6ae:	0402                	c.slli64	s0
     6b0:	0301                	addi	t1,t1,0
     6b2:	0900                	addi	s0,sp,144
     6b4:	0000                	unimp
     6b6:	0501                	addi	a0,a0,0
     6b8:	0009                	c.nop	2
    for (i = 0; i < size; ++i) {
     6ba:	0402                	c.slli64	s0
        ri_2[i] = polyR[i];
     6bc:	0601                	addi	a2,a2,0
     6be:	00090003          	lb	zero,0(s2)
        ri_1[i] = polyf[i];
     6c2:	0100                	addi	s0,sp,128
     6c4:	2805                	jal	6f4 <ext_euclid+0xc0>
     6c6:	0200                	addi	s0,sp,256
     6c8:	0204                	addi	s1,sp,256
     6ca:	0306                	slli	t1,t1,0x1
     6cc:	097f                	0x97f
     6ce:	0004                	0x4
        ti_2[i] = 0;
     6d0:	0501                	addi	a0,a0,0
     6d2:	0103060f          	0x103060f
     6d6:	0609                	addi	a2,a2,2
        ti_1[i] = 0;
     6d8:	0100                	addi	s0,sp,128
     6da:	0905                	addi	s2,s2,1
     6dc:	0200                	addi	s0,sp,256
     6de:	0304                	addi	s1,sp,384
    for (i = 0; i < size; ++i) {
     6e0:	0306                	slli	t1,t1,0x1
     6e2:	00040907          	0x40907
                ri_2[i] = ri_2[i] + mod;
     6e6:	0501                	addi	a0,a0,0
            while (ri_2[i] < 0) {
     6e8:	0021                	c.nop	8
     6ea:	0402                	c.slli64	s0
     6ec:	00030603          	lb	a2,0(t1)
            ri_2[i] = ri_2[i] % mod;
     6f0:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     6f2:	0100                	addi	s0,sp,128
            ri_2[i] = ri_2[i] % mod;
     6f4:	2805                	jal	724 <ext_euclid+0xf0>
        for (i = 0; i < N + 1; ++i) {
     6f6:	0200                	addi	s0,sp,256
     6f8:	0304                	addi	s1,sp,384
     6fa:	02097f03          	0x2097f03
     6fe:	0100                	addi	s0,sp,128
     700:	2105                	jal	b20 <generate_keys+0x208>
     702:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     704:	0304                	addi	s1,sp,384
     706:	04090103          	lb	sp,64(s2)
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     70a:	0100                	addi	s0,sp,128
     70c:	1405                	addi	s0,s0,-31
     70e:	0200                	addi	s0,sp,256
     710:	0304                	addi	s1,sp,384
     712:	04090003          	lb	zero,64(s2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     716:	0100                	addi	s0,sp,128
     718:	2805                	jal	748 <ext_euclid+0x114>
     71a:	0200                	addi	s0,sp,256
     71c:	0304                	addi	s1,sp,384
     71e:	0306                	slli	t1,t1,0x1
     720:	097f                	0x97f
     722:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     724:	0501                	addi	a0,a0,0
     726:	0346                	slli	t1,t1,0x11
     728:	0909                	addi	s2,s2,2
     72a:	0002                	c.slli64	zero
     72c:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     72e:	0305                	addi	t1,t1,1
     730:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     734:	0501                	addi	a0,a0,0
     736:	061d                	addi	a2,a2,7
     738:	00090003          	lb	zero,0(s2)
     73c:	0100                	addi	s0,sp,128
     73e:	0905                	addi	s2,s2,1
        for (i = 0; i < N + 1; ++i) {
     740:	08090003          	lb	zero,128(s2)
     744:	0100                	addi	s0,sp,128
     746:	4605                	li	a2,1
        for (i = 0; i < N + 1; ++i) {
     748:	0c097d03          	0xc097d03
     74c:	0100                	addi	s0,sp,128
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     74e:	0905                	addi	s2,s2,1
     750:	12090303          	lb	t1,288(s2)
     754:	0100                	addi	s0,sp,128
     756:	4605                	li	a2,1
     758:	04097d03          	0x4097d03
        for (i = 0; i < N + 1; ++i) {
     75c:	0100                	addi	s0,sp,128
     75e:	0905                	addi	s2,s2,1
     760:	00090303          	lb	t1,0(s2)
        for (i = 0; i < N + 1; ++i) {
     764:	0100                	addi	s0,sp,128
     766:	04090303          	lb	t1,64(s2)
        for (i = 0; i < N + 1; ++i) {
     76a:	0100                	addi	s0,sp,128
     76c:	08097d03          	0x8097d03
     770:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     772:	02090303          	lb	t1,32(s2)
     776:	0100                	addi	s0,sp,128
     778:	04090103          	lb	sp,64(s2)
        for (i = 0; i < N + 1; ++i) {
     77c:	0100                	addi	s0,sp,128
     77e:	06097f03          	0x6097f03
    while (controlR != 0) {
     782:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     784:	02090103          	lb	sp,32(s2)
     788:	0100                	addi	s0,sp,128
     78a:	04097c03          	0x4097c03
     78e:	0100                	addi	s0,sp,128
     790:	0505                	addi	a0,a0,1
     792:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     794:	0901                	addi	s2,s2,0
     796:	0004                	0x4
    }
     798:	0301                	addi	t1,t1,0
     79a:	0901                	addi	s2,s2,0
     79c:	0000                	unimp
     79e:	0301                	addi	t1,t1,0
     7a0:	0901                	addi	s2,s2,0
     7a2:	0000                	unimp
     7a4:	0501                	addi	a0,a0,0
     7a6:	0609                	addi	a2,a2,2
     7a8:	00090003          	lb	zero,0(s2)
     7ac:	0100                	addi	s0,sp,128
     7ae:	0505                	addi	a0,a0,1
     7b0:	0306                	slli	t1,t1,0x1
     7b2:	0901                	addi	s2,s2,0
     7b4:	0004                	0x4
     7b6:	0501                	addi	a0,a0,0
     7b8:	0609                	addi	a2,a2,2
     7ba:	00090003          	lb	zero,0(s2)
     7be:	0100                	addi	s0,sp,128
     7c0:	0505                	addi	a0,a0,1
                ri_1[i] = ri_1[i] + mod;
     7c2:	0306                	slli	t1,t1,0x1
     7c4:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
            while (ri_1[i] < 0) {
     7c8:	0501                	addi	a0,a0,0
     7ca:	0614                	addi	a3,sp,768
            ri_1[i] = ri_1[i] % mod;
     7cc:	00090203          	lb	tp,0(s2)
        for (i = 0; i < N + 1; ++i) {
     7d0:	0100                	addi	s0,sp,128
     7d2:	0505                	addi	a0,a0,1
            ri_1[i] = ri_1[i] % mod;
     7d4:	06097e03          	0x6097e03
        for (i = 0; i < N + 1; ++i) {
     7d8:	0100                	addi	s0,sp,128
            ri[i - (N + 1)] = res[i];
     7da:	0c05                	addi	s8,s8,1
     7dc:	02090003          	lb	zero,32(s2)
     7e0:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7e2:	1905                	addi	s2,s2,-31
     7e4:	02090303          	lb	t1,32(s2)
            ri[i - (N + 1)] = res[i];
     7e8:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7ea:	1105                	addi	sp,sp,-31
            temp[i] = ri_2[i] - ri[i];
     7ec:	0200                	addi	s0,sp,256
     7ee:	0104                	addi	s1,sp,128
     7f0:	0306                	slli	t1,t1,0x1
     7f2:	097d                	addi	s2,s2,31
     7f4:	0008                	0x8
     7f6:	0501                	addi	a0,a0,0
     7f8:	0005                	c.nop	1
     7fa:	0402                	c.slli64	s0
        for (i = 0; i < N + 1; ++i) {
     7fc:	0601                	addi	a2,a2,0
            temp[i] = ri_2[i] - ri[i];
     7fe:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     802:	0100                	addi	s0,sp,128
     804:	0b05                	addi	s6,s6,1
                temp[i] = temp[i] + mod;
     806:	04090703          	lb	a4,64(s2)
            while (temp[i] < 0) {
     80a:	0100                	addi	s0,sp,128
     80c:	1005                	c.nop	-31
     80e:	0200                	addi	s0,sp,256
            temp[i] = temp[i] % mod;
     810:	0104                	addi	s1,sp,128
     812:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     814:	0900                	addi	s0,sp,144
     816:	0002                	c.slli64	zero
            temp[i] = temp[i] % mod;
     818:	0501                	addi	a0,a0,0
     81a:	0005                	c.nop	1
        for (i = 0; i < N + 1; ++i) {
     81c:	0402                	c.slli64	s0
            qi_1[i] = res1[i];
     81e:	0601                	addi	a2,a2,0
     820:	00090003          	lb	zero,0(s2)
     824:	0100                	addi	s0,sp,128
     826:	0b05                	addi	s6,s6,1
     828:	04090503          	lb	a0,64(s2)
     82c:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     82e:	1005                	c.nop	-31
                qi_1[i] = qi_1[i] + mod;
     830:	0200                	addi	s0,sp,256
     832:	0104                	addi	s1,sp,128
            while (qi_1[i] < 0) {
     834:	0306                	slli	t1,t1,0x1
     836:	0900                	addi	s0,sp,144
     838:	0002                	c.slli64	zero
            qi_1[i] = qi_1[i] % mod;
     83a:	0501                	addi	a0,a0,0
     83c:	0005                	c.nop	1
        for (i = 0; i < N + 1; ++i) {
     83e:	0402                	c.slli64	s0
     840:	0601                	addi	a2,a2,0
            qi_1[i] = qi_1[i] % mod;
     842:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     846:	0100                	addi	s0,sp,128
            temp[i] = res2[i];
     848:	0306                	slli	t1,t1,0x1
     84a:	0906                	slli	s2,s2,0x1
     84c:	0004                	0x4
     84e:	0501                	addi	a0,a0,0
     850:	00030607          	0x30607
        for (i = 0; i < N + 1; ++i) {
     854:	0009                	c.nop	2
            temp[i] = res2[i];
     856:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     858:	1d05                	addi	s10,s10,-31
                temp[i] = temp[i] + mod;
     85a:	0200                	addi	s0,sp,256
     85c:	0104                	addi	s1,sp,128
     85e:	0306                	slli	t1,t1,0x1
            while (temp[i] < 0) {
     860:	0908                	addi	a0,sp,144
     862:	000e                	c.slli	zero,0x3
     864:	0501                	addi	a0,a0,0
     866:	0009                	c.nop	2
            temp[i] = temp[i] % mod;
     868:	0402                	c.slli64	s0
     86a:	0601                	addi	a2,a2,0
        for (i = 0; i < N + 1; ++i) {
     86c:	00090003          	lb	zero,0(s2)
            temp[i] = temp[i] % mod;
     870:	0100                	addi	s0,sp,128
     872:	1405                	addi	s0,s0,-31
        for (i = 0; i < N + 1; ++i) {
     874:	04090103          	lb	sp,64(s2)
            ti[i] = ti_2[i] - temp[i];
     878:	0100                	addi	s0,sp,128
     87a:	0d05                	addi	s10,s10,1
     87c:	0200                	addi	s0,sp,256
     87e:	0304                	addi	s1,sp,384
     880:	0306                	slli	t1,t1,0x1
     882:	00040967          	jalr	s2,s0
     886:	0501                	addi	a0,a0,0
     888:	0019                	c.nop	6
     88a:	0402                	c.slli64	s0
        for (i = 0; i < N + 1; ++i) {
     88c:	01030603          	lb	a2,16(t1)
            ti[i] = ti_2[i] - temp[i];
     890:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     892:	0100                	addi	s0,sp,128
     894:	1805                	addi	a6,a6,-31
                ti[i] = ti[i] + mod;
     896:	0200                	addi	s0,sp,256
     898:	0304                	addi	s1,sp,384
            while (ti[i] < 0) {
     89a:	06097f03          	0x6097f03
     89e:	0100                	addi	s0,sp,128
            ti[i] = ti[i] % mod;
     8a0:	0d05                	addi	s10,s10,1
     8a2:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     8a4:	0304                	addi	s1,sp,384
     8a6:	0306                	slli	t1,t1,0x1
            ti[i] = ti[i] % mod;
     8a8:	0901                	addi	s2,s2,0
     8aa:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     8ac:	0501                	addi	a0,a0,0
            ri_2[i] = ri_1[i];
     8ae:	0019                	c.nop	6
     8b0:	0402                	c.slli64	s0
     8b2:	00030603          	lb	a2,0(t1)
     8b6:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     8b8:	0100                	addi	s0,sp,128
            ri_2[i] = ri_1[i];
     8ba:	2c05                	jal	aea <generate_keys+0x1d2>
            ri_1[i] = ri[i];
     8bc:	0200                	addi	s0,sp,256
     8be:	0304                	addi	s1,sp,384
     8c0:	0306                	slli	t1,t1,0x1
            ti_2[i] = ti_1[i];
     8c2:	097e                	slli	s2,s2,0x1f
     8c4:	0004                	0x4
     8c6:	0501                	addi	a0,a0,0
     8c8:	0014                	0x14
     8ca:	0402                	c.slli64	s0
            ri_1[i] = ri[i];
     8cc:	0301                	addi	t1,t1,0
            ti_2[i] = ti_1[i];
     8ce:	0900                	addi	s0,sp,144
     8d0:	0004                	0x4
     8d2:	0501                	addi	a0,a0,0
     8d4:	0009                	c.nop	2
            controlR += ri[i];
     8d6:	0402                	c.slli64	s0
            ti_2[i] = ti_1[i];
     8d8:	0601                	addi	a2,a2,0
     8da:	00090003          	lb	zero,0(s2)
            ti_1[i] = ti[i];
     8de:	0100                	addi	s0,sp,128
     8e0:	1d05                	addi	s10,s10,-31
     8e2:	0200                	addi	s0,sp,256
            qi_1[i] = 0;
     8e4:	0204                	addi	s1,sp,256
     8e6:	0306                	slli	t1,t1,0x1
     8e8:	097f                	0x97f
     8ea:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     8ec:	0501                	addi	a0,a0,0
     8ee:	0103060f          	0x103060f
            if (((ri_2[0] * j) % mod) == 1)
     8f2:	0809                	addi	a6,a6,2
     8f4:	0100                	addi	s0,sp,128
     8f6:	0905                	addi	s2,s2,1
     8f8:	0200                	addi	s0,sp,256
     8fa:	0304                	addi	s1,sp,384
     8fc:	0306                	slli	t1,t1,0x1
     8fe:	00040907          	0x40907
        for (j = 0; j < mod; ++j) {
     902:	0501                	addi	a0,a0,0
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     904:	0011                	c.nop	4
        for (i = 0; i < N + 1; ++i) {
     906:	0402                	c.slli64	s0
     908:	00030603          	lb	a2,0(t1)
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     90c:	0409                	addi	s0,s0,2
     90e:	0100                	addi	s0,sp,128
     910:	1405                	addi	s0,s0,-31
     912:	0200                	addi	s0,sp,256
     914:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     916:	04090003          	lb	zero,64(s2)
int* generate_keys(int N, int p, int q){
     91a:	0100                	addi	s0,sp,128
     91c:	1105                	addi	sp,sp,-31
     91e:	0200                	addi	s0,sp,256
     920:	0304                	addi	s1,sp,384
     922:	02090003          	lb	zero,32(s2)
     926:	0100                	addi	s0,sp,128
     928:	1c05                	addi	s8,s8,-31
     92a:	0200                	addi	s0,sp,256
     92c:	0304                	addi	s1,sp,384
     92e:	02097f03          	0x2097f03
     932:	0100                	addi	s0,sp,128
     934:	1105                	addi	sp,sp,-31
     936:	0200                	addi	s0,sp,256
     938:	0304                	addi	s1,sp,384
     93a:	02090103          	lb	sp,32(s2)
     93e:	0100                	addi	s0,sp,128
     940:	1c05                	addi	s8,s8,-31
     942:	0200                	addi	s0,sp,256
     944:	0304                	addi	s1,sp,384
     946:	0306                	slli	t1,t1,0x1
     948:	097f                	0x97f
     94a:	0004                	0x4
     94c:	0501                	addi	a0,a0,0
     94e:	0009                	c.nop	2
resultkon[0] = 0xAAAAAAA0;
     950:	0402                	c.slli64	s0
     952:	09060303          	lb	t1,144(a2)
     956:	0002                	c.slli64	zero
int* generate_keys(int N, int p, int q){
     958:	0501                	addi	a0,a0,0
     95a:	0011                	c.nop	4
     95c:	0402                	c.slli64	s0
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     95e:	00030603          	lb	a2,0(t1)
     962:	0409                	addi	s0,s0,2
resultkon[0] = 0xAAAAAAA0;
     964:	0100                	addi	s0,sp,128
     966:	1405                	addi	s0,s0,-31
     968:	0200                	addi	s0,sp,256
     96a:	0304                	addi	s1,sp,384
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96c:	04090003          	lb	zero,64(s2)
resultkon[0] = 0xAAAAAAA0;
     970:	0100                	addi	s0,sp,128
     972:	1105                	addi	sp,sp,-31
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     974:	0200                	addi	s0,sp,256
     976:	0304                	addi	s1,sp,384
     978:	02090003          	lb	zero,32(s2)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97c:	0100                	addi	s0,sp,128
     97e:	1c05                	addi	s8,s8,-31
     980:	0200                	addi	s0,sp,256
     982:	0304                	addi	s1,sp,384
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     984:	02097f03          	0x2097f03
     988:	0100                	addi	s0,sp,128
     98a:	1105                	addi	sp,sp,-31
     98c:	0200                	addi	s0,sp,256
     98e:	0304                	addi	s1,sp,384
     990:	02090103          	lb	sp,32(s2)
     994:	0100                	addi	s0,sp,128
     996:	1c05                	addi	s8,s8,-31
     998:	0200                	addi	s0,sp,256
     99a:	0304                	addi	s1,sp,384
     99c:	0306                	slli	t1,t1,0x1
     99e:	097f                	0x97f
     9a0:	0004                	0x4
     9a2:	0501                	addi	a0,a0,0
     9a4:	0011                	c.nop	4
     9a6:	0402                	c.slli64	s0
     9a8:	09090303          	lb	t1,144(s2)
     9ac:	0002                	c.slli64	zero
     9ae:	0501                	addi	a0,a0,0
     9b0:	0025                	c.nop	9
     9b2:	0402                	c.slli64	s0
     9b4:	00030603          	lb	a2,0(t1)
     9b8:	0409                	addi	s0,s0,2
     9ba:	0100                	addi	s0,sp,128
     9bc:	2b05                	jal	eec <memcpy+0x9a>
     9be:	0200                	addi	s0,sp,256
     9c0:	0304                	addi	s1,sp,384
     9c2:	04090003          	lb	zero,64(s2)
     9c6:	0100                	addi	s0,sp,128
     9c8:	2e05                	jal	cf8 <ntru_deceypt+0x8>
     9ca:	0200                	addi	s0,sp,256
     9cc:	0304                	addi	s1,sp,384
     9ce:	02090003          	lb	zero,32(s2)
     9d2:	0100                	addi	s0,sp,128
     9d4:	2a05                	jal	b04 <generate_keys+0x1ec>
     9d6:	0200                	addi	s0,sp,256
     9d8:	0304                	addi	s1,sp,384
     9da:	06097f03          	0x6097f03
     9de:	0100                	addi	s0,sp,128
     9e0:	2e05                	jal	d10 <ntru_deceypt+0x20>
     9e2:	0200                	addi	s0,sp,256
     9e4:	0304                	addi	s1,sp,384
     9e6:	02090103          	lb	sp,32(s2)
     9ea:	0100                	addi	s0,sp,128
     9ec:	2505                	jal	100c <main+0x34>
     9ee:	0200                	addi	s0,sp,256
    int polyR[N+1];
     9f0:	0304                	addi	s1,sp,384
     9f2:	04090003          	lb	zero,64(s2)
     9f6:	0100                	addi	s0,sp,128
     9f8:	2805                	jal	a28 <generate_keys+0x110>
     9fa:	0200                	addi	s0,sp,256
     9fc:	0304                	addi	s1,sp,384
     9fe:	0306                	slli	t1,t1,0x1
     a00:	097f                	0x97f
     a02:	0002                	c.slli64	zero
    polyR[N] = 1;
     a04:	0501                	addi	a0,a0,0
     a06:	0020                	addi	s0,sp,8
     a08:	0402                	c.slli64	s0
     a0a:	0301                	addi	t1,t1,0
     a0c:	0900                	addi	s0,sp,144
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a0e:	0000                	unimp
     a10:	0501                	addi	a0,a0,0
     a12:	000d                	c.nop	3
     a14:	0402                	c.slli64	s0
     a16:	0601                	addi	a2,a2,0
     a18:	00090003          	lb	zero,0(s2)
     a1c:	0100                	addi	s0,sp,128
     a1e:	2505                	jal	103e <main+0x66>
     a20:	0200                	addi	s0,sp,256
     a22:	0204                	addi	s1,sp,256
     a24:	0306                	slli	t1,t1,0x1
     a26:	097f                	0x97f
     a28:	0004                	0x4
     a2a:	0501                	addi	a0,a0,0
     a2c:	04020027          	0x4020027
     a30:	0602                	c.slli64	a2
     a32:	00090003          	lb	zero,0(s2)
     a36:	0100                	addi	s0,sp,128
     a38:	1d05                	addi	s10,s10,-31
     a3a:	0200                	addi	s0,sp,256
     a3c:	0104                	addi	s1,sp,128
     a3e:	0306                	slli	t1,t1,0x1
     a40:	0900                	addi	s0,sp,144
     a42:	0006                	c.slli	zero,0x1
     a44:	0501                	addi	a0,a0,0
     a46:	0009                	c.nop	2
     a48:	0402                	c.slli64	s0
     a4a:	0601                	addi	a2,a2,0
     a4c:	00090003          	lb	zero,0(s2)
     a50:	0100                	addi	s0,sp,128
     a52:	0f05                	addi	t5,t5,1
     a54:	0c091003          	lh	zero,192(s2)
     a58:	0100                	addi	s0,sp,128
     a5a:	1005                	c.nop	-31
     a5c:	0200                	addi	s0,sp,256
     a5e:	0104                	addi	s1,sp,128
     a60:	0306                	slli	t1,t1,0x1
     a62:	097f                	0x97f
     a64:	0002                	c.slli64	zero
     a66:	0501                	addi	a0,a0,0
     a68:	0005                	c.nop	1
     a6a:	0402                	c.slli64	s0
     a6c:	0601                	addi	a2,a2,0
     a6e:	00090003          	lb	zero,0(s2)
    polyR[0] = -1;
     a72:	0100                	addi	s0,sp,128
     a74:	0306                	slli	t1,t1,0x1
    for(i = 1; i < N; ++i){
     a76:	00040907          	0x40907
     a7a:	0301                	addi	t1,t1,0
     a7c:	0902                	c.slli64	s2
    for (i = N; i < 55; ++i ){
     a7e:	0000                	unimp
     a80:	0501                	addi	a0,a0,0
     a82:	0601                	addi	a2,a2,0
     a84:	00090103          	lb	sp,0(s2)
        random_keys[i] = f[i];
     a88:	0100                	addi	s0,sp,128
     a8a:	1405                	addi	s0,s0,-31
     a8c:	1e096803          	0x1e096803
    for(i = 0; i < N; ++i){
     a90:	0100                	addi	s0,sp,128
     a92:	1105                	addi	sp,sp,-31
     a94:	0200                	addi	s0,sp,256
     a96:	0304                	addi	s1,sp,384
    for(i = N; i < (2*N); ++i){
     a98:	0306                	slli	t1,t1,0x1
     a9a:	0908                	addi	a0,sp,144
     a9c:	0004                	0x4
     a9e:	0501                	addi	a0,a0,0
        random_keys[i] = g[i-N];
     aa0:	0029                	c.nop	10
     aa2:	0402                	c.slli64	s0
     aa4:	00030603          	lb	a2,0(t1)
    for(i = N; i < (2*N); ++i){
     aa8:	0409                	addi	s0,s0,2
     aaa:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     aac:	2f05                	jal	11dc <__DTOR_END__+0xfc>
     aae:	0200                	addi	s0,sp,256
     ab0:	0304                	addi	s1,sp,384
    fp = ext_euclid(polyR, f, (N+1), p);
     ab2:	04090003          	lb	zero,64(s2)
     ab6:	0100                	addi	s0,sp,128
     ab8:	3205                	jal	3d8 <polymult2+0x166>
     aba:	0200                	addi	s0,sp,256
     abc:	0304                	addi	s1,sp,384
    for(i = (2*N); i < (3*N); ++i){
     abe:	02090003          	lb	zero,32(s2)
        random_keys[i] = fp[i-(2*N)];
     ac2:	0100                	addi	s0,sp,128
     ac4:	2a05                	jal	bf4 <generate_keys+0x2dc>
     ac6:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     ac8:	0304                	addi	s1,sp,384
     aca:	06097f03          	0x6097f03
    fq = ext_euclid(polyR, f, (N+1), q);
     ace:	0100                	addi	s0,sp,128
     ad0:	3205                	jal	3f0 <polydiv+0xe>
     ad2:	0200                	addi	s0,sp,256
     ad4:	0304                	addi	s1,sp,384
     ad6:	02090103          	lb	sp,32(s2)
    for(i = (3*N); i < (4*N); ++i){
     ada:	0100                	addi	s0,sp,128
     adc:	2905                	jal	f0c <memcpy+0xba>
     ade:	0200                	addi	s0,sp,256
        random_keys[i] = fq[i-(3*N)];
     ae0:	0304                	addi	s1,sp,384
     ae2:	04090003          	lb	zero,64(s2)
     ae6:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     ae8:	2805                	jal	b18 <generate_keys+0x200>
     aea:	0200                	addi	s0,sp,256
    fg = polymult2(fq, N, g, N, 0);
     aec:	0304                	addi	s1,sp,384
     aee:	0306                	slli	t1,t1,0x1
     af0:	097f                	0x97f
     af2:	0002                	c.slli64	zero
     af4:	0501                	addi	a0,a0,0
     af6:	0020                	addi	s0,sp,8
    for(i = 0; i < (2*N-1); ++i){
     af8:	0402                	c.slli64	s0
     afa:	0301                	addi	t1,t1,0
     afc:	0900                	addi	s0,sp,144
     afe:	0000                	unimp
     b00:	0501                	addi	a0,a0,0
     b02:	000d                	c.nop	3
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b04:	0402                	c.slli64	s0
     b06:	0601                	addi	a2,a2,0
     b08:	00090003          	lb	zero,0(s2)
    for(i = (4*N); i < (5*N); ++i){
     b0c:	0100                	addi	s0,sp,128
     b0e:	2505                	jal	112e <__DTOR_END__+0x4e>
     b10:	0200                	addi	s0,sp,256
     b12:	0204                	addi	s1,sp,256
     b14:	0306                	slli	t1,t1,0x1
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b16:	097f                	0x97f
     b18:	0004                	0x4
     b1a:	0501                	addi	a0,a0,0
     b1c:	04020027          	0x4020027
    for(i = (4*N); i < (5*N); ++i){
     b20:	0602                	c.slli64	a2
     b22:	00090003          	lb	zero,0(s2)
    for(i = (5*N); i < (6*N+1); ++i){
     b26:	0100                	addi	s0,sp,128
        random_keys[i] = polyR[i-(5*N)];
     b28:	0d05                	addi	s10,s10,1
     b2a:	0200                	addi	s0,sp,256
     b2c:	0304                	addi	s1,sp,384
     b2e:	0306                	slli	t1,t1,0x1
    for(i = (5*N); i < (6*N+1); ++i){
     b30:	090a                	slli	s2,s2,0x2
     b32:	0008                	0x8
     b34:	0501                	addi	a0,a0,0
     b36:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     b3a:	00030603          	lb	a2,0(t1)
resultkon[0] = 0xAAAAAAA1;
     b3e:	0009                	c.nop	2
     b40:	0100                	addi	s0,sp,128
     b42:	1905                	addi	s2,s2,-31
     b44:	0200                	addi	s0,sp,256
     b46:	0304                	addi	s1,sp,384
}
     b48:	04090003          	lb	zero,64(s2)
     b4c:	0100                	addi	s0,sp,128
     b4e:	2005                	jal	b6e <generate_keys+0x256>
     b50:	0200                	addi	s0,sp,256
     b52:	0304                	addi	s1,sp,384
     b54:	02097f03          	0x2097f03
     b58:	0100                	addi	s0,sp,128
     b5a:	2305                	jal	107a <main+0xa2>
     b5c:	0200                	addi	s0,sp,256
     b5e:	0304                	addi	s1,sp,384
     b60:	02090103          	lb	sp,32(s2)
     b64:	0100                	addi	s0,sp,128
     b66:	1905                	addi	s2,s2,-31
     b68:	0200                	addi	s0,sp,256
     b6a:	0304                	addi	s1,sp,384
     b6c:	06090003          	lb	zero,96(s2)
     b70:	0100                	addi	s0,sp,128
     b72:	2005                	jal	b92 <generate_keys+0x27a>
     b74:	0200                	addi	s0,sp,256
     b76:	0304                	addi	s1,sp,384
     b78:	0306                	slli	t1,t1,0x1
     b7a:	097f                	0x97f
     b7c:	0006                	c.slli	zero,0x1
     b7e:	0501                	addi	a0,a0,0
     b80:	0014                	0x14
     b82:	0402                	c.slli64	s0
     b84:	0301                	addi	t1,t1,0
     b86:	0900                	addi	s0,sp,144
     b88:	0000                	unimp
     b8a:	0501                	addi	a0,a0,0
     b8c:	0009                	c.nop	2
        polyR[i] = 0;
     b8e:	0402                	c.slli64	s0
     b90:	0601                	addi	a2,a2,0
     b92:	00090003          	lb	zero,0(s2)
     b96:	0100                	addi	s0,sp,128
    for(i = 1; i < N; ++i){
     b98:	2805                	jal	bc8 <generate_keys+0x2b0>
     b9a:	0200                	addi	s0,sp,256
        f[i] = 0;
     b9c:	0204                	addi	s1,sp,256
     b9e:	0306                	slli	t1,t1,0x1
     ba0:	097f                	0x97f
     ba2:	0004                	0x4
     ba4:	0501                	addi	a0,a0,0
     ba6:	0103060f          	0x103060f
        g[i] = 0;
     baa:	0609                	addi	a2,a2,2
     bac:	0100                	addi	s0,sp,128
     bae:	4305                	li	t1,1
     bb0:	0306                	slli	t1,t1,0x1
     bb2:	0004090b          	0x4090b
    for (i = N; i < 55; ++i ){
     bb6:	0501                	addi	a0,a0,0
        random_keys[i] = f[i];
     bb8:	0305                	addi	t1,t1,1
     bba:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
     bbe:	0301                	addi	t1,t1,0
     bc0:	0901                	addi	s2,s2,0
     bc2:	0000                	unimp
     bc4:	0301                	addi	t1,t1,0
     bc6:	0902                	c.slli64	s2
    for(i = 0; i < N; ++i){
     bc8:	0000                	unimp
        random_keys[i] = f[i];
     bca:	0501                	addi	a0,a0,0
    for(i = 0; i < N; ++i){
     bcc:	0609                	addi	a2,a2,2
        random_keys[i] = g[i-N];
     bce:	00090003          	lb	zero,0(s2)
     bd2:	0100                	addi	s0,sp,128
     bd4:	4305                	li	t1,1
     bd6:	04097a03          	0x4097a03
    for(i = N; i < (2*N); ++i){
     bda:	0100                	addi	s0,sp,128
     bdc:	0905                	addi	s2,s2,1
        random_keys[i] = fp[i-(2*N)];
     bde:	02090603          	lb	a2,32(s2)
     be2:	0100                	addi	s0,sp,128
     be4:	4305                	li	t1,1
     be6:	04097a03          	0x4097a03
    for(i = (2*N); i < (3*N); ++i){
     bea:	0100                	addi	s0,sp,128
     bec:	0905                	addi	s2,s2,1
        random_keys[i] = fq[i-(3*N)];
     bee:	1c090603          	lb	a2,448(s2)
     bf2:	0100                	addi	s0,sp,128
     bf4:	06090103          	lb	sp,96(s2)
     bf8:	0100                	addi	s0,sp,128
     bfa:	06090203          	lb	tp,96(s2)
     bfe:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     c00:	04090103          	lb	sp,64(s2)
    for(i = 0; i < (2*N-1); ++i){
     c04:	0100                	addi	s0,sp,128
     c06:	08097f03          	0x8097f03
        fg[i] = fg[i]*p;
     c0a:	0100                	addi	s0,sp,128
     c0c:	02090103          	lb	sp,32(s2)
    for(i = 0; i < (2*N-1); ++i){
     c10:	0100                	addi	s0,sp,128
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c12:	4305                	li	t1,1
     c14:	04097603          	0x4097603
     c18:	0100                	addi	s0,sp,128
     c1a:	0905                	addi	s2,s2,1
     c1c:	04090a03          	lb	s4,64(s2)
    for(i = (4*N); i < (5*N); ++i){
     c20:	0100                	addi	s0,sp,128
        random_keys[i] = polyR[i-(5*N)];
     c22:	4305                	li	t1,1
     c24:	04097603          	0x4097603
     c28:	0100                	addi	s0,sp,128
     c2a:	0905                	addi	s2,s2,1
     c2c:	02090603          	lb	a2,32(s2)
    for(i = (5*N); i < (6*N+1); ++i){
     c30:	0100                	addi	s0,sp,128
        random_keys[i] = polyR[i-(5*N)];
     c32:	0505                	addi	a0,a0,1
    for(i = (5*N); i < (6*N+1); ++i){
     c34:	0306                	slli	t1,t1,0x1
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c36:	0901                	addi	s2,s2,0
resultkon[0] = 0xBBBBBBB0;
     c38:	0004                	0x4
     c3a:	0301                	addi	t1,t1,0
     c3c:	0901                	addi	s2,s2,0
     c3e:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c40:	0301                	addi	t1,t1,0
     c42:	0901                	addi	s2,s2,0
     c44:	0000                	unimp
     c46:	0301                	addi	t1,t1,0
     c48:	0901                	addi	s2,s2,0
     c4a:	0000                	unimp
     c4c:	0501                	addi	a0,a0,0
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c4e:	0609                	addi	a2,a2,2
     c50:	00090003          	lb	zero,0(s2)
     c54:	0100                	addi	s0,sp,128
     c56:	0505                	addi	a0,a0,1
     c58:	0306                	slli	t1,t1,0x1
resultkon[0] = 0xBBBBBBB0;
     c5a:	0904                	addi	s1,sp,144
     c5c:	0002                	c.slli64	zero
     c5e:	0501                	addi	a0,a0,0
     c60:	060c                	addi	a1,sp,768
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c62:	04090003          	lb	zero,64(s2)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c66:	0100                	addi	s0,sp,128
     c68:	1105                	addi	sp,sp,-31
     c6a:	0200                	addi	s0,sp,256
     c6c:	0104                	addi	s1,sp,128
resultkon[0] = 0xBBBBBBB0;
     c6e:	0306                	slli	t1,t1,0x1
     c70:	0900                	addi	s0,sp,144
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c72:	0002                	c.slli64	zero
    temp = polymult(public_key,N,random_val,48,q,0);
     c74:	0501                	addi	a0,a0,0
     c76:	0005                	c.nop	1
     c78:	0402                	c.slli64	s0
     c7a:	0601                	addi	a2,a2,0
     c7c:	00090003          	lb	zero,0(s2)
     c80:	0100                	addi	s0,sp,128
     c82:	0c05                	addi	s8,s8,1
     c84:	06090a03          	lb	s4,96(s2)
    for(i = 0; i < 48; ++i){
     c88:	0100                	addi	s0,sp,128
     c8a:	1105                	addi	sp,sp,-31
        temp[i] = temp[i] + message[i];
     c8c:	0200                	addi	s0,sp,256
     c8e:	0104                	addi	s1,sp,128
     c90:	0306                	slli	t1,t1,0x1
     c92:	0900                	addi	s0,sp,144
     c94:	0002                	c.slli64	zero
     c96:	0501                	addi	a0,a0,0
     c98:	0005                	c.nop	1
     c9a:	0402                	c.slli64	s0
     c9c:	0601                	addi	a2,a2,0
    for(i = 0; i < 48; ++i){
     c9e:	00090003          	lb	zero,0(s2)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     ca2:	0100                	addi	s0,sp,128
     ca4:	0c05                	addi	s8,s8,1
     ca6:	04090803          	lb	a6,64(s2)
     caa:	0100                	addi	s0,sp,128
     cac:	1105                	addi	sp,sp,-31
     cae:	0200                	addi	s0,sp,256
     cb0:	0104                	addi	s1,sp,128
     cb2:	0306                	slli	t1,t1,0x1
    for(i = (2*N); i < (3*N); ++i){
     cb4:	0900                	addi	s0,sp,144
     cb6:	0002                	c.slli64	zero
     cb8:	0501                	addi	a0,a0,0
     cba:	0005                	c.nop	1
     cbc:	0402                	c.slli64	s0
     cbe:	0601                	addi	a2,a2,0
}
     cc0:	00090003          	lb	zero,0(s2)
resultkon[0] = 0xBBBBBBB1;
     cc4:	0100                	addi	s0,sp,128
     cc6:	1805                	addi	a6,a6,-31
     cc8:	0200                	addi	s0,sp,256
     cca:	0104                	addi	s1,sp,128
     ccc:	0306                	slli	t1,t1,0x1
     cce:	0906                	slli	s2,s2,0x1
}
     cd0:	0004                	0x4
     cd2:	0501                	addi	a0,a0,0
     cd4:	0005                	c.nop	1
     cd6:	0402                	c.slli64	s0
     cd8:	0601                	addi	a2,a2,0
     cda:	08090003          	lb	zero,128(s2)
        CT[i-(2*N)] = CT[i];
     cde:	0100                	addi	s0,sp,128
     ce0:	0c05                	addi	s8,s8,1
     ce2:	0200                	addi	s0,sp,256
     ce4:	0104                	addi	s1,sp,128
    for(i = (2*N); i < (3*N); ++i){
     ce6:	04097a03          	0x4097a03
        CT[i-(2*N)] = CT[i];
     cea:	0100                	addi	s0,sp,128
     cec:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     cee:	0104                	addi	s1,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cf0:	04090f03          	lb	t5,64(s2)
     cf4:	0100                	addi	s0,sp,128
     cf6:	1105                	addi	sp,sp,-31
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf8:	0200                	addi	s0,sp,256
     cfa:	0104                	addi	s1,sp,128
     cfc:	0306                	slli	t1,t1,0x1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cfe:	097f                	0x97f
     d00:	0002                	c.slli64	zero
    resultkon[0] = 0xCCCCCCC0;
     d02:	0501                	addi	a0,a0,0
     d04:	0005                	c.nop	1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d06:	0402                	c.slli64	s0
    resultkon[0] = 0xCCCCCCC0;
     d08:	0601                	addi	a2,a2,0
     d0a:	00090003          	lb	zero,0(s2)
     d0e:	0100                	addi	s0,sp,128
     d10:	0905                	addi	s2,s2,1
     d12:	0306                	slli	t1,t1,0x1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d14:	0961                	addi	s2,s2,24
     d16:	0008                	0x8
     d18:	0501                	addi	a0,a0,0
     d1a:	061a                	slli	a2,a2,0x6
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d1c:	00090003          	lb	zero,0(s2)
    resultkon[0] = 0xCCCCCCC0;
     d20:	0100                	addi	s0,sp,128
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d22:	1505                	addi	a0,a0,-31
     d24:	06090003          	lb	zero,96(s2)
     d28:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d2a:	1905                	addi	s2,s2,-31
     d2c:	02090203          	lb	tp,32(s2)
     d30:	0100                	addi	s0,sp,128
     d32:	0f05                	addi	t5,t5,1
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d34:	0306                	slli	t1,t1,0x1
     d36:	097f                	0x97f
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d38:	0002                	c.slli64	zero
     d3a:	0501                	addi	a0,a0,0
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d3c:	0618                	addi	a4,sp,768
     d3e:	00090003          	lb	zero,0(s2)
     d42:	0100                	addi	s0,sp,128
     d44:	0f05                	addi	t5,t5,1
     d46:	02090003          	lb	zero,32(s2)
     d4a:	0100                	addi	s0,sp,128
     d4c:	0905                	addi	s2,s2,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4e:	0200                	addi	s0,sp,256
     d50:	0204                	addi	s1,sp,256
     d52:	0306                	slli	t1,t1,0x1
     d54:	00040903          	lb	s2,0(s0)
        if(a2[i] <= q/2)
     d58:	0501                	addi	a0,a0,0
     d5a:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    for (i = 0; i < N; ++i){
     d5e:	0602                	c.slli64	a2
     d60:	00090003          	lb	zero,0(s2)
    c = polymult2(secret_key_fp,N,a2,N,0);
     d64:	0100                	addi	s0,sp,128
     d66:	1d05                	addi	s10,s10,-31
     d68:	0200                	addi	s0,sp,256
     d6a:	0204                	addi	s1,sp,256
     d6c:	04097b03          	0x4097b03
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d70:	0100                	addi	s0,sp,128
     d72:	1505                	addi	a0,a0,-31
     d74:	0200                	addi	s0,sp,256
     d76:	0204                	addi	s1,sp,256
     d78:	04090503          	lb	a0,64(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d7c:	0100                	addi	s0,sp,128
     d7e:	1d05                	addi	s10,s10,-31
     d80:	0200                	addi	s0,sp,256
}
     d82:	0204                	addi	s1,sp,256
     d84:	0306                	slli	t1,t1,0x1
    resultkon[0] = 0xCCCCCCC1;
     d86:	0004097b          	0x4097b
     d8a:	0501                	addi	a0,a0,0
     d8c:	030d                	addi	t1,t1,3
     d8e:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
}
     d92:	0501                	addi	a0,a0,0
     d94:	00030627          	0x30627
     d98:	0009                	c.nop	2
     d9a:	0100                	addi	s0,sp,128
     d9c:	0905                	addi	s2,s2,1
     d9e:	0306                	slli	t1,t1,0x1
     da0:	0908                	addi	a0,sp,144
     da2:	0004                	0x4
     da4:	0501                	addi	a0,a0,0
        a2[i-(2*N)] = a2[i];
     da6:	061e                	slli	a2,a2,0x7
     da8:	00090003          	lb	zero,0(s2)
     dac:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     dae:	1705                	addi	a4,a4,-31
     db0:	06090003          	lb	zero,96(s2)
        a2[i-(2*N)] = a2[i];
     db4:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     db6:	1b05                	addi	s6,s6,-31
        if(a2[i] <= q/2)
     db8:	02090203          	lb	tp,32(s2)
     dbc:	0100                	addi	s0,sp,128
            a2[i] = (-1)*(q-a2[i]);
     dbe:	0f05                	addi	t5,t5,1
     dc0:	0306                	slli	t1,t1,0x1
     dc2:	097f                	0x97f
    for (i = 0; i < N; ++i){
     dc4:	0002                	c.slli64	zero
     dc6:	0501                	addi	a0,a0,0
     dc8:	061a                	slli	a2,a2,0x6
        c2[i-(2*N)] = c2[i];
     dca:	00090003          	lb	zero,0(s2)
     dce:	0100                	addi	s0,sp,128
     dd0:	0f05                	addi	t5,t5,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     dd2:	02090003          	lb	zero,32(s2)
        c2[i-(2*N)] = c2[i];
     dd6:	0100                	addi	s0,sp,128
     dd8:	0905                	addi	s2,s2,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     dda:	0200                	addi	s0,sp,256
     ddc:	0204                	addi	s1,sp,256
     dde:	0306                	slli	t1,t1,0x1
     de0:	00040903          	lb	s2,0(s0)
     de4:	0501                	addi	a0,a0,0
     de6:	04020027          	0x4020027
     dea:	0602                	c.slli64	a2
     dec:	00090003          	lb	zero,0(s2)
     df0:	0100                	addi	s0,sp,128
     df2:	1d05                	addi	s10,s10,-31
     df4:	0200                	addi	s0,sp,256
     df6:	0204                	addi	s1,sp,256
     df8:	04097b03          	0x4097b03
     dfc:	0100                	addi	s0,sp,128
     dfe:	1705                	addi	a4,a4,-31
     e00:	0200                	addi	s0,sp,256
     e02:	0204                	addi	s1,sp,256
     e04:	04090503          	lb	a0,64(s2)
     e08:	0100                	addi	s0,sp,128
     e0a:	1d05                	addi	s10,s10,-31
     e0c:	0200                	addi	s0,sp,256
     e0e:	0204                	addi	s1,sp,256
     e10:	0306                	slli	t1,t1,0x1
     e12:	0004097b          	0x4097b
     e16:	0501                	addi	a0,a0,0
     e18:	030d                	addi	t1,t1,3
     e1a:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     e1e:	0501                	addi	a0,a0,0
     e20:	0003062b          	0x3062b
     e24:	0009                	c.nop	2
     e26:	0100                	addi	s0,sp,128
     e28:	0905                	addi	s2,s2,1
     e2a:	0200                	addi	s0,sp,256
     e2c:	0304                	addi	s1,sp,384
     e2e:	0306                	slli	t1,t1,0x1
     e30:	0906                	slli	s2,s2,0x1
     e32:	0004                	0x4
     e34:	0501                	addi	a0,a0,0
     e36:	000e                	c.slli	zero,0x3
     e38:	0402                	c.slli64	s0
     e3a:	00030603          	lb	a2,0(t1)
     e3e:	0409                	addi	s0,s0,2
     e40:	0100                	addi	s0,sp,128
     e42:	0200                	addi	s0,sp,256
     e44:	0304                	addi	s1,sp,384
     e46:	04090103          	lb	sp,64(s2)
     e4a:	0100                	addi	s0,sp,128
     e4c:	0200                	addi	s0,sp,256
     e4e:	0304                	addi	s1,sp,384
     e50:	02097f03          	0x2097f03
     e54:	0100                	addi	s0,sp,128
     e56:	0905                	addi	s2,s2,1
     e58:	0200                	addi	s0,sp,256
     e5a:	0304                	addi	s1,sp,384
     e5c:	0306                	slli	t1,t1,0x1
     e5e:	0901                	addi	s2,s2,0
     e60:	0004                	0x4
     e62:	0501                	addi	a0,a0,0
     e64:	000e                	c.slli	zero,0x3
     e66:	0402                	c.slli64	s0
     e68:	00030603          	lb	a2,0(t1)
     e6c:	0009                	c.nop	2
     e6e:	0100                	addi	s0,sp,128
     e70:	1d05                	addi	s10,s10,-31
     e72:	0200                	addi	s0,sp,256
     e74:	0304                	addi	s1,sp,384
     e76:	0306                	slli	t1,t1,0x1
     e78:	097e                	slli	s2,s2,0x1f
     e7a:	0004                	0x4
     e7c:	0501                	addi	a0,a0,0
     e7e:	0309                	addi	t1,t1,2
     e80:	00040907          	0x40907
     e84:	0501                	addi	a0,a0,0
     e86:	0003060b          	0x3060b
     e8a:	0009                	c.nop	2
     e8c:	0100                	addi	s0,sp,128
     e8e:	2005                	jal	eae <memcpy+0x5c>
     e90:	0200                	addi	s0,sp,256
     e92:	0204                	addi	s1,sp,256
     e94:	0306                	slli	t1,t1,0x1
     e96:	097f                	0x97f
     e98:	0002                	c.slli64	zero
     e9a:	0501                	addi	a0,a0,0
     e9c:	0022                	c.slli	zero,0x8
     e9e:	0402                	c.slli64	s0
     ea0:	0602                	c.slli64	a2
     ea2:	00090003          	lb	zero,0(s2)
     ea6:	0100                	addi	s0,sp,128
     ea8:	0905                	addi	s2,s2,1
     eaa:	0306                	slli	t1,t1,0x1
     eac:	0909                	addi	s2,s2,2
     eae:	0004                	0x4
     eb0:	0501                	addi	a0,a0,0
     eb2:	0615                	addi	a2,a2,5
     eb4:	00090003          	lb	zero,0(s2)
     eb8:	0100                	addi	s0,sp,128
     eba:	0c05                	addi	s8,s8,1
     ebc:	06090003          	lb	zero,96(s2)
     ec0:	0100                	addi	s0,sp,128
     ec2:	1a05                	addi	s4,s4,-31
     ec4:	0200                	addi	s0,sp,256
     ec6:	0204                	addi	s1,sp,256
     ec8:	0306                	slli	t1,t1,0x1
     eca:	097f                	0x97f
     ecc:	0004                	0x4
     ece:	0501                	addi	a0,a0,0
     ed0:	0309                	addi	t1,t1,2
     ed2:	00040907          	0x40907
     ed6:	0501                	addi	a0,a0,0
     ed8:	0003060b          	0x3060b
     edc:	0009                	c.nop	2
     ede:	0100                	addi	s0,sp,128
     ee0:	2005                	jal	f00 <memcpy+0xae>
     ee2:	0200                	addi	s0,sp,256
     ee4:	0204                	addi	s1,sp,256
     ee6:	0306                	slli	t1,t1,0x1
     ee8:	097f                	0x97f
     eea:	0002                	c.slli64	zero
     eec:	0501                	addi	a0,a0,0
     eee:	0022                	c.slli	zero,0x8
     ef0:	0402                	c.slli64	s0
     ef2:	0602                	c.slli64	a2
     ef4:	00090003          	lb	zero,0(s2)
     ef8:	0100                	addi	s0,sp,128
     efa:	1805                	addi	a6,a6,-31
     efc:	0200                	addi	s0,sp,256
     efe:	0104                	addi	s1,sp,128
     f00:	0306                	slli	t1,t1,0x1
     f02:	0900                	addi	s0,sp,144
     f04:	0002                	c.slli64	zero
     f06:	0501                	addi	a0,a0,0
     f08:	0005                	c.nop	1
     f0a:	0402                	c.slli64	s0
     f0c:	0601                	addi	a2,a2,0
     f0e:	08090003          	lb	zero,128(s2)
     f12:	0100                	addi	s0,sp,128
     f14:	0b05                	addi	s6,s6,1
     f16:	0306                	slli	t1,t1,0x1
     f18:	090c                	addi	a1,sp,144
     f1a:	0004                	0x4
     f1c:	0601                	addi	a2,a2,0
     f1e:	04093703          	0x4093703
     f22:	0100                	addi	s0,sp,128
     f24:	1305                	addi	t1,t1,-31
     f26:	02090103          	lb	sp,32(s2)
     f2a:	0100                	addi	s0,sp,128
     f2c:	1005                	c.nop	-31
     f2e:	0200                	addi	s0,sp,256
     f30:	0104                	addi	s1,sp,128
     f32:	0306                	slli	t1,t1,0x1
     f34:	097f                	0x97f
     f36:	0008                	0x8
     f38:	0501                	addi	a0,a0,0
     f3a:	0005                	c.nop	1
     f3c:	0402                	c.slli64	s0
     f3e:	0601                	addi	a2,a2,0
     f40:	00090003          	lb	zero,0(s2)
     f44:	0100                	addi	s0,sp,128
     f46:	1b05                	addi	s6,s6,-31
     f48:	04090303          	lb	t1,64(s2)
     f4c:	0100                	addi	s0,sp,128
     f4e:	1305                	addi	t1,t1,-31
     f50:	04090103          	lb	sp,64(s2)
     f54:	0100                	addi	s0,sp,128
     f56:	1505                	addi	a0,a0,-31
     f58:	0200                	addi	s0,sp,256
     f5a:	0104                	addi	s1,sp,128
     f5c:	0306                	slli	t1,t1,0x1
     f5e:	097f                	0x97f
     f60:	0008                	0x8
     f62:	0501                	addi	a0,a0,0
     f64:	0005                	c.nop	1
     f66:	0402                	c.slli64	s0
     f68:	0601                	addi	a2,a2,0
     f6a:	00090003          	lb	zero,0(s2)
     f6e:	0100                	addi	s0,sp,128
     f70:	0306                	slli	t1,t1,0x1
     f72:	0904                	addi	s1,sp,144
     f74:	0004                	0x4
     f76:	0301                	addi	t1,t1,0
     f78:	0902                	c.slli64	s2
     f7a:	0000                	unimp
     f7c:	0501                	addi	a0,a0,0
     f7e:	0601                	addi	a2,a2,0
     f80:	00090103          	lb	sp,0(s2)
     f84:	0100                	addi	s0,sp,128
     f86:	0905                	addi	s2,s2,1
     f88:	0306                	slli	t1,t1,0x1
     f8a:	0942                	slli	s2,s2,0x10
     f8c:	002a                	c.slli	zero,0xa
     f8e:	0501                	addi	a0,a0,0
     f90:	0616                	slli	a2,a2,0x5
     f92:	00090003          	lb	zero,0(s2)
     f96:	0100                	addi	s0,sp,128
     f98:	0d05                	addi	s10,s10,1
     f9a:	04090003          	lb	zero,64(s2)
     f9e:	0100                	addi	s0,sp,128
     fa0:	1305                	addi	t1,t1,-31
     fa2:	04090003          	lb	zero,64(s2)
     fa6:	0100                	addi	s0,sp,128
     fa8:	0905                	addi	s2,s2,1
     faa:	0306                	slli	t1,t1,0x1
     fac:	0902                	c.slli64	s2
     fae:	0006                	c.slli	zero,0x1
     fb0:	0501                	addi	a0,a0,0
     fb2:	0610                	addi	a2,sp,768
     fb4:	02090003          	lb	zero,32(s2)
     fb8:	0100                	addi	s0,sp,128
     fba:	1505                	addi	a0,a0,-31
     fbc:	0200                	addi	s0,sp,256
     fbe:	0104                	addi	s1,sp,128
     fc0:	0306                	slli	t1,t1,0x1
     fc2:	0900                	addi	s0,sp,144
     fc4:	0002                	c.slli64	zero
     fc6:	0501                	addi	a0,a0,0
     fc8:	0009                	c.nop	2
     fca:	0402                	c.slli64	s0
     fcc:	0601                	addi	a2,a2,0
     fce:	00090003          	lb	zero,0(s2)
     fd2:	0100                	addi	s0,sp,128
     fd4:	0306                	slli	t1,t1,0x1
     fd6:	0905                	addi	s2,s2,1
int main(){
     fd8:	0004                	0x4
     fda:	0501                	addi	a0,a0,0
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fdc:	00030613          	mv	a2,t1
     fe0:	0009                	c.nop	2
     fe2:	0100                	addi	s0,sp,128
     fe4:	0905                	addi	s2,s2,1
     fe6:	0306                	slli	t1,t1,0x1
     fe8:	000e0903          	lb	s2,0(t3) # 1a000 <_stack_start+0xa000>
int main(){
     fec:	0501                	addi	a0,a0,0
     fee:	0610                	addi	a2,sp,768
     ff0:	02090003          	lb	zero,32(s2)
    keys = generate_keys(N, p, q);
     ff4:	0100                	addi	s0,sp,128
     ff6:	1505                	addi	a0,a0,-31
     ff8:	0200                	addi	s0,sp,256
     ffa:	0104                	addi	s1,sp,128
     ffc:	0306                	slli	t1,t1,0x1
     ffe:	0900                	addi	s0,sp,144
    1000:	0002                	c.slli64	zero
    for(i = 0; i < N; ++i){
    1002:	0501                	addi	a0,a0,0
    1004:	0009                	c.nop	2
        secret_key_f[i] = keys[i];
    1006:	0402                	c.slli64	s0
    1008:	0601                	addi	a2,a2,0
    100a:	00090003          	lb	zero,0(s2)
    100e:	0100                	addi	s0,sp,128
    1010:	1005                	c.nop	-31
    for(i = 0; i < N; ++i){
    1012:	06090803          	lb	a6,96(s2)
    1016:	0100                	addi	s0,sp,128
    for(i = N; i < (2*N); ++i){
    1018:	1505                	addi	a0,a0,-31
    101a:	0200                	addi	s0,sp,256
    101c:	0104                	addi	s1,sp,128
    101e:	0306                	slli	t1,t1,0x1
    1020:	0900                	addi	s0,sp,144
    1022:	0002                	c.slli64	zero
        secret_key_fp[i-(2*N)] = keys[i];
    1024:	0501                	addi	a0,a0,0
    1026:	0009                	c.nop	2
    1028:	0402                	c.slli64	s0
    102a:	0601                	addi	a2,a2,0
    102c:	00090003          	lb	zero,0(s2)
    for(i = (2*N); i < (3*N); ++i){
    1030:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
    1032:	1005                	c.nop	-31
    1034:	06090503          	lb	a0,96(s2)
    1038:	0100                	addi	s0,sp,128
    103a:	1505                	addi	a0,a0,-31
    103c:	0200                	addi	s0,sp,256
        public_key[i-(4*N)] = keys[i];
    103e:	0104                	addi	s1,sp,128
    1040:	0306                	slli	t1,t1,0x1
    1042:	0900                	addi	s0,sp,144
    1044:	0002                	c.slli64	zero
    1046:	0501                	addi	a0,a0,0
    for(i = (4*N); i < (5*N); ++i){
    1048:	0009                	c.nop	2
    104a:	0402                	c.slli64	s0
    104c:	0601                	addi	a2,a2,0
    104e:	00090003          	lb	zero,0(s2)
    1052:	0100                	addi	s0,sp,128
        ring_poly[i-(5*N)] = keys[i];
    1054:	0f05                	addi	t5,t5,1
    1056:	06090803          	lb	a6,96(s2)
    105a:	0100                	addi	s0,sp,128
    105c:	1405                	addi	s0,s0,-31
    for(i = (5*N); i < (6*N+1); ++i){
    105e:	0200                	addi	s0,sp,256
    1060:	0104                	addi	s1,sp,128
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1062:	0306                	slli	t1,t1,0x1
    1064:	0900                	addi	s0,sp,144
    1066:	0002                	c.slli64	zero
    1068:	0501                	addi	a0,a0,0
    106a:	0009                	c.nop	2
    106c:	0402                	c.slli64	s0
    106e:	0601                	addi	a2,a2,0
    1070:	00090003          	lb	zero,0(s2)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1074:	0100                	addi	s0,sp,128
    1076:	1005                	c.nop	-31
    1078:	04090603          	lb	a2,64(s2)
    107c:	0100                	addi	s0,sp,128
    107e:	1c05                	addi	s8,s8,-31
    1080:	0200                	addi	s0,sp,256
    1082:	0104                	addi	s1,sp,128
    1084:	0306                	slli	t1,t1,0x1
            resultkon[0] = 0xDEDEDEDE;
    1086:	0900                	addi	s0,sp,144
    1088:	0002                	c.slli64	zero
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    108a:	0501                	addi	a0,a0,0
    108c:	0009                	c.nop	2
    108e:	0402                	c.slli64	s0
    1090:	0601                	addi	a2,a2,0
    1092:	08090003          	lb	zero,128(s2)
            resultkon[0] = 0xDEDEDEDE;
    1096:	0100                	addi	s0,sp,128
    for(i = 0; i < 32; ++i){
    1098:	0d05                	addi	s10,s10,1
    109a:	0200                	addi	s0,sp,256
        if(!(message[i] == Dec_Message[i])){
    109c:	0304                	addi	s1,sp,384
    109e:	0306                	slli	t1,t1,0x1
    10a0:	095e                	slli	s2,s2,0x17
    10a2:	0008                	0x8
    10a4:	0501                	addi	a0,a0,0
    10a6:	0019                	c.nop	6
    10a8:	0402                	c.slli64	s0
    10aa:	00030603          	lb	a2,0(t1)
            resultkon[0] = 0xBABABABA;
    10ae:	0009                	c.nop	2
    10b0:	0100                	addi	s0,sp,128
    10b2:	2105                	jal	14d2 <product2+0x16>
    10b4:	0200                	addi	s0,sp,256
}
    10b6:	0304                	addi	s1,sp,384
    10b8:	02097f03          	0x2097f03
    10bc:	0100                	addi	s0,sp,128
    10be:	1905                	addi	s2,s2,-31
    10c0:	0200                	addi	s0,sp,256
    10c2:	0304                	addi	s1,sp,384
    10c4:	04090103          	lb	sp,64(s2)
    for(i = 0; i < 32; ++i){
    10c8:	0100                	addi	s0,sp,128
    10ca:	1205                	addi	tp,tp,-31
    10cc:	0200                	addi	s0,sp,256
    10ce:	0304                	addi	s1,sp,384
    10d0:	04090003          	lb	zero,64(s2)
    10d4:	0100                	addi	s0,sp,128
    10d6:	2105                	jal	14f6 <product2+0x3a>
    10d8:	0200                	addi	s0,sp,256
    10da:	0304                	addi	s1,sp,384
    10dc:	0306                	slli	t1,t1,0x1
    10de:	097f                	0x97f
    10e0:	0004                	0x4
    10e2:	0501                	addi	a0,a0,0
    10e4:	0311                	addi	t1,t1,4
    10e6:	090a                	slli	s2,s2,0x2
    10e8:	0002                	c.slli64	zero
    10ea:	0501                	addi	a0,a0,0
    10ec:	0629                	addi	a2,a2,10
    10ee:	00090003          	lb	zero,0(s2)
    10f2:	0100                	addi	s0,sp,128
    10f4:	1c05                	addi	s8,s8,-31
    10f6:	02090003          	lb	zero,32(s2)
    10fa:	0100                	addi	s0,sp,128
    10fc:	1305                	addi	t1,t1,-31
    10fe:	0306                	slli	t1,t1,0x1
    1100:	097f                	0x97f
    1102:	0002                	c.slli64	zero
    1104:	0501                	addi	a0,a0,0
    1106:	0003061b          	0x3061b
    110a:	0009                	c.nop	2
    110c:	0100                	addi	s0,sp,128
    110e:	1305                	addi	t1,t1,-31
    1110:	02090003          	lb	zero,32(s2)
    1114:	0100                	addi	s0,sp,128
    1116:	0d05                	addi	s10,s10,1
    1118:	0200                	addi	s0,sp,256
    111a:	0204                	addi	s1,sp,256
    111c:	0306                	slli	t1,t1,0x1
    111e:	00040903          	lb	s2,0(s0)
    1122:	0501                	addi	a0,a0,0
    1124:	0025                	c.nop	9
    1126:	0402                	c.slli64	s0
    1128:	0602                	c.slli64	a2
    112a:	00090003          	lb	zero,0(s2)
    112e:	0100                	addi	s0,sp,128
    1130:	2105                	jal	1550 <product2+0x94>
    1132:	0200                	addi	s0,sp,256
    1134:	0204                	addi	s1,sp,256
    1136:	04097c03          	0x4097c03
    113a:	0100                	addi	s0,sp,128
    113c:	1805                	addi	a6,a6,-31
    113e:	0200                	addi	s0,sp,256
    1140:	0204                	addi	s1,sp,256
    1142:	04090403          	lb	s0,64(s2)
    1146:	0100                	addi	s0,sp,128
    1148:	2105                	jal	1568 <product2+0xac>
    114a:	0200                	addi	s0,sp,256
    114c:	0204                	addi	s1,sp,256
    114e:	0306                	slli	t1,t1,0x1
    1150:	097c                	addi	a5,sp,156
    1152:	0004                	0x4
    1154:	0501                	addi	a0,a0,0
    1156:	000d                	c.nop	3
    1158:	0402                	c.slli64	s0
    115a:	09090303          	lb	t1,144(s2)
    115e:	0002                	c.slli64	zero
    1160:	0501                	addi	a0,a0,0
    1162:	0030                	addi	a2,sp,8
    1164:	0402                	c.slli64	s0
    1166:	00030603          	lb	a2,0(t1)
    116a:	0009                	c.nop	2
    116c:	0100                	addi	s0,sp,128
    116e:	2705                	jal	188e <result+0x17a>
    1170:	0200                	addi	s0,sp,256
    1172:	0304                	addi	s1,sp,384
    1174:	06090003          	lb	zero,96(s2)
    1178:	0100                	addi	s0,sp,128
    117a:	2105                	jal	159a <product2+0xde>
    117c:	0200                	addi	s0,sp,256
    117e:	0304                	addi	s1,sp,384
    1180:	04097f03          	0x4097f03
    1184:	0100                	addi	s0,sp,128
    1186:	2705                	jal	18a6 <result+0x192>
    1188:	0200                	addi	s0,sp,256
    118a:	0304                	addi	s1,sp,384
    118c:	04090103          	lb	sp,64(s2)
    1190:	0100                	addi	s0,sp,128
    1192:	1905                	addi	s2,s2,-31
    1194:	0200                	addi	s0,sp,256
    1196:	0304                	addi	s1,sp,384
    1198:	02090003          	lb	zero,32(s2)
    119c:	0100                	addi	s0,sp,128
    119e:	2105                	jal	15be <product2+0x102>
    11a0:	0200                	addi	s0,sp,256
    11a2:	0304                	addi	s1,sp,384
    11a4:	0306                	slli	t1,t1,0x1
    11a6:	097f                	0x97f
    11a8:	0004                	0x4
    11aa:	0501                	addi	a0,a0,0
    11ac:	0311                	addi	t1,t1,4
    11ae:	00020907          	0x20907
    11b2:	0501                	addi	a0,a0,0
    11b4:	0003062b          	0x3062b
    11b8:	0009                	c.nop	2
    11ba:	0100                	addi	s0,sp,128
    11bc:	1d05                	addi	s10,s10,-31
    11be:	02090003          	lb	zero,32(s2)
    11c2:	0100                	addi	s0,sp,128
    11c4:	1305                	addi	t1,t1,-31
    11c6:	0306                	slli	t1,t1,0x1
    11c8:	097f                	0x97f
    11ca:	0002                	c.slli64	zero
    11cc:	0501                	addi	a0,a0,0
    11ce:	061c                	addi	a5,sp,768
    11d0:	00090003          	lb	zero,0(s2)
    11d4:	0100                	addi	s0,sp,128
    11d6:	1305                	addi	t1,t1,-31
    11d8:	02090003          	lb	zero,32(s2)
    11dc:	0100                	addi	s0,sp,128
    11de:	0d05                	addi	s10,s10,1
    11e0:	0200                	addi	s0,sp,256
    11e2:	0204                	addi	s1,sp,256
    11e4:	0306                	slli	t1,t1,0x1
    11e6:	00040903          	lb	s2,0(s0)
    11ea:	0501                	addi	a0,a0,0
    11ec:	04020027          	0x4020027
    11f0:	0602                	c.slli64	a2
    11f2:	00090003          	lb	zero,0(s2)
    11f6:	0100                	addi	s0,sp,128
    11f8:	2105                	jal	1618 <product2+0x15c>
    11fa:	0200                	addi	s0,sp,256
    11fc:	0204                	addi	s1,sp,256
    11fe:	04097c03          	0x4097c03
    1202:	0100                	addi	s0,sp,128
    1204:	1905                	addi	s2,s2,-31
    1206:	0200                	addi	s0,sp,256
    1208:	0204                	addi	s1,sp,256
    120a:	04090403          	lb	s0,64(s2)
    120e:	0100                	addi	s0,sp,128
    1210:	2105                	jal	1630 <product2+0x174>
    1212:	0200                	addi	s0,sp,256
    1214:	0204                	addi	s1,sp,256
    1216:	0306                	slli	t1,t1,0x1
    1218:	097c                	addi	a5,sp,156
    121a:	0004                	0x4
    121c:	0501                	addi	a0,a0,0
    121e:	000d                	c.nop	3
    1220:	0402                	c.slli64	s0
    1222:	09090303          	lb	t1,144(s2)
    1226:	0002                	c.slli64	zero
    1228:	0001                	nop
    122a:	0402                	c.slli64	s0
    122c:	09010303          	lb	t1,144(sp)
    1230:	0000                	unimp
    1232:	0501                	addi	a0,a0,0
    1234:	001c                	0x1c
    1236:	0402                	c.slli64	s0
    1238:	7f030603          	lb	a2,2032(t1)
    123c:	0009                	c.nop	2
    123e:	0100                	addi	s0,sp,128
    1240:	1905                	addi	s2,s2,-31
    1242:	0200                	addi	s0,sp,256
    1244:	0304                	addi	s1,sp,384
    1246:	06090003          	lb	zero,96(s2)
    124a:	0100                	addi	s0,sp,128
    124c:	2005                	jal	126c <_bss_start+0x8>
    124e:	0200                	addi	s0,sp,256
    1250:	0304                	addi	s1,sp,384
    1252:	04097f03          	0x4097f03
    1256:	0100                	addi	s0,sp,128
    1258:	1905                	addi	s2,s2,-31
    125a:	0200                	addi	s0,sp,256
    125c:	0304                	addi	s1,sp,384
    125e:	04090103          	lb	sp,64(s2)
    1262:	0100                	addi	s0,sp,128
    1264:	0200                	addi	s0,sp,256
    1266:	0304                	addi	s1,sp,384
    1268:	02090103          	lb	sp,32(s2)
    126c:	0100                	addi	s0,sp,128
    126e:	1205                	addi	tp,tp,-31
    1270:	0200                	addi	s0,sp,256
    1272:	0304                	addi	s1,sp,384
    1274:	04090003          	lb	zero,64(s2)
    1278:	0100                	addi	s0,sp,128
    127a:	2005                	jal	129a <_bss_start+0x36>
    127c:	0200                	addi	s0,sp,256
    127e:	0304                	addi	s1,sp,384
    1280:	0306                	slli	t1,t1,0x1
    1282:	097e                	slli	s2,s2,0x1f
    1284:	0004                	0x4
    1286:	0501                	addi	a0,a0,0
    1288:	030d                	addi	t1,t1,3
    128a:	00020907          	0x20907
    128e:	0501                	addi	a0,a0,0
    1290:	0003060f          	0x3060f
    1294:	0009                	c.nop	2
    1296:	0100                	addi	s0,sp,128
    1298:	2405                	jal	14b8 <_bss_start+0x254>
    129a:	0200                	addi	s0,sp,256
    129c:	0204                	addi	s1,sp,256
    129e:	0306                	slli	t1,t1,0x1
    12a0:	097f                	0x97f
    12a2:	0002                	c.slli64	zero
    12a4:	0501                	addi	a0,a0,0
    12a6:	0026                	c.slli	zero,0x9
    12a8:	0402                	c.slli64	s0
    12aa:	0602                	c.slli64	a2
    12ac:	00090003          	lb	zero,0(s2)
    12b0:	0100                	addi	s0,sp,128
    12b2:	0d05                	addi	s10,s10,1
    12b4:	0200                	addi	s0,sp,256
    12b6:	0304                	addi	s1,sp,384
    12b8:	0306                	slli	t1,t1,0x1
    12ba:	0909                	addi	s2,s2,2
    12bc:	0004                	0x4
    12be:	0501                	addi	a0,a0,0
    12c0:	0012                	c.slli	zero,0x4
    12c2:	0402                	c.slli64	s0
    12c4:	00030603          	lb	a2,0(t1)
    12c8:	0009                	c.nop	2
    12ca:	0100                	addi	s0,sp,128
    12cc:	2105                	jal	16ec <product2+0x230>
    12ce:	0200                	addi	s0,sp,256
    12d0:	0304                	addi	s1,sp,384
    12d2:	0306                	slli	t1,t1,0x1
    12d4:	097f                	0x97f
    12d6:	000a                	c.slli	zero,0x2
    12d8:	0501                	addi	a0,a0,0
    12da:	0015                	c.nop	5
    12dc:	0402                	c.slli64	s0
    12de:	0301                	addi	t1,t1,0
    12e0:	0900                	addi	s0,sp,144
    12e2:	0002                	c.slli64	zero
    12e4:	0501                	addi	a0,a0,0
    12e6:	0009                	c.nop	2
    12e8:	0402                	c.slli64	s0
    12ea:	0601                	addi	a2,a2,0
    12ec:	00090003          	lb	zero,0(s2)
    12f0:	0100                	addi	s0,sp,128
    12f2:	0200                	addi	s0,sp,256
    12f4:	0304                	addi	s1,sp,384
    12f6:	0306                	slli	t1,t1,0x1
    12f8:	0908                	addi	a0,sp,144
    12fa:	0006                	c.slli	zero,0x1
    12fc:	0501                	addi	a0,a0,0
    12fe:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1302:	00030603          	lb	a2,0(t1)
    1306:	0409                	addi	s0,s0,2
    1308:	0100                	addi	s0,sp,128
    130a:	1605                	addi	a2,a2,-31
    130c:	0200                	addi	s0,sp,256
    130e:	0304                	addi	s1,sp,384
    1310:	04090003          	lb	zero,64(s2)
    1314:	0100                	addi	s0,sp,128
    1316:	1305                	addi	t1,t1,-31
    1318:	0200                	addi	s0,sp,256
    131a:	0304                	addi	s1,sp,384
    131c:	02090003          	lb	zero,32(s2)
    1320:	0100                	addi	s0,sp,128
    1322:	1c05                	addi	s8,s8,-31
    1324:	0200                	addi	s0,sp,256
    1326:	0304                	addi	s1,sp,384
    1328:	02097f03          	0x2097f03
    132c:	0100                	addi	s0,sp,128
    132e:	1305                	addi	t1,t1,-31
    1330:	0200                	addi	s0,sp,256
    1332:	0304                	addi	s1,sp,384
    1334:	02090103          	lb	sp,32(s2)
    1338:	0100                	addi	s0,sp,128
    133a:	1c05                	addi	s8,s8,-31
    133c:	0200                	addi	s0,sp,256
    133e:	0304                	addi	s1,sp,384
    1340:	0306                	slli	t1,t1,0x1
    1342:	097f                	0x97f
    1344:	0002                	c.slli64	zero
    1346:	0501                	addi	a0,a0,0
    1348:	0009                	c.nop	2
    134a:	0402                	c.slli64	s0
    134c:	09040303          	lb	t1,144(s0)
    1350:	0002                	c.slli64	zero
    1352:	0501                	addi	a0,a0,0
    1354:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1358:	00030603          	lb	a2,0(t1)
    135c:	0009                	c.nop	2
    135e:	0100                	addi	s0,sp,128
    1360:	2505                	jal	1980 <ti_2+0x14>
    1362:	0200                	addi	s0,sp,256
    1364:	0304                	addi	s1,sp,384
    1366:	0306                	slli	t1,t1,0x1
    1368:	097f                	0x97f
    136a:	000c                	0xc
    136c:	0501                	addi	a0,a0,0
    136e:	033c                	addi	a5,sp,392
    1370:	090a                	slli	s2,s2,0x2
    1372:	0006                	c.slli	zero,0x1
    1374:	0501                	addi	a0,a0,0
    1376:	0305                	addi	t1,t1,1
    1378:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    137c:	0301                	addi	t1,t1,0
    137e:	0901                	addi	s2,s2,0
    1380:	0000                	unimp
    1382:	0301                	addi	t1,t1,0
    1384:	0901                	addi	s2,s2,0
    1386:	0000                	unimp
    1388:	0501                	addi	a0,a0,0
    138a:	0609                	addi	a2,a2,2
    138c:	00090003          	lb	zero,0(s2)
    1390:	0100                	addi	s0,sp,128
    1392:	3c05                	jal	dc2 <ntru_deceypt+0xd2>
    1394:	04097b03          	0x4097b03
    1398:	0100                	addi	s0,sp,128
    139a:	0905                	addi	s2,s2,1
    139c:	02090503          	lb	a0,32(s2)
    13a0:	0100                	addi	s0,sp,128
    13a2:	3c05                	jal	dd2 <ntru_deceypt+0xe2>
    13a4:	04097b03          	0x4097b03
    13a8:	0100                	addi	s0,sp,128
    13aa:	0905                	addi	s2,s2,1
    13ac:	1c090503          	lb	a0,448(s2)
    13b0:	0100                	addi	s0,sp,128
    13b2:	06090103          	lb	sp,96(s2)
    13b6:	0100                	addi	s0,sp,128
    13b8:	06090103          	lb	sp,96(s2)
    13bc:	0100                	addi	s0,sp,128
    13be:	06090203          	lb	tp,96(s2)
    13c2:	0100                	addi	s0,sp,128
    13c4:	06090103          	lb	sp,96(s2)
    13c8:	0100                	addi	s0,sp,128
    13ca:	06090103          	lb	sp,96(s2)
    13ce:	0100                	addi	s0,sp,128
    13d0:	06090103          	lb	sp,96(s2)
    13d4:	0100                	addi	s0,sp,128
    13d6:	3c05                	jal	e06 <reset_handler+0x26>
    13d8:	04097403          	0x4097403
    13dc:	0100                	addi	s0,sp,128
    13de:	0905                	addi	s2,s2,1
    13e0:	04090503          	lb	a0,64(s2)
    13e4:	0100                	addi	s0,sp,128
    13e6:	0505                	addi	a0,a0,1
    13e8:	0306                	slli	t1,t1,0x1
    13ea:	0901                	addi	s2,s2,0
    13ec:	0004                	0x4
    13ee:	0301                	addi	t1,t1,0
    13f0:	0901                	addi	s2,s2,0
    13f2:	0000                	unimp
    13f4:	0301                	addi	t1,t1,0
    13f6:	0902                	c.slli64	s2
    13f8:	0000                	unimp
    13fa:	0301                	addi	t1,t1,0
    13fc:	0901                	addi	s2,s2,0
    13fe:	0000                	unimp
    1400:	0301                	addi	t1,t1,0
    1402:	0901                	addi	s2,s2,0
    1404:	0000                	unimp
    1406:	0301                	addi	t1,t1,0
    1408:	0901                	addi	s2,s2,0
    140a:	0000                	unimp
    140c:	0501                	addi	a0,a0,0
    140e:	0609                	addi	a2,a2,2
    1410:	00090003          	lb	zero,0(s2)
    1414:	0100                	addi	s0,sp,128
    1416:	0505                	addi	a0,a0,1
    1418:	0306                	slli	t1,t1,0x1
    141a:	0901                	addi	s2,s2,0
    141c:	0002                	c.slli64	zero
    141e:	0301                	addi	t1,t1,0
    1420:	0901                	addi	s2,s2,0
    1422:	0000                	unimp
    1424:	0301                	addi	t1,t1,0
    1426:	0901                	addi	s2,s2,0
    1428:	0000                	unimp
    142a:	0301                	addi	t1,t1,0
    142c:	0901                	addi	s2,s2,0
    142e:	0000                	unimp
    1430:	0301                	addi	t1,t1,0
    1432:	0902                	c.slli64	s2
    1434:	0000                	unimp
    1436:	0301                	addi	t1,t1,0
    1438:	0901                	addi	s2,s2,0
    143a:	0000                	unimp
    143c:	0501                	addi	a0,a0,0
    143e:	060c                	addi	a1,sp,768
    1440:	02090003          	lb	zero,32(s2)
    1444:	0100                	addi	s0,sp,128
    1446:	1105                	addi	sp,sp,-31
    1448:	02090303          	lb	t1,32(s2)
    144c:	0100                	addi	s0,sp,128
    144e:	0200                	addi	s0,sp,256
    1450:	0104                	addi	s1,sp,128
    1452:	0306                	slli	t1,t1,0x1
    1454:	097d                	addi	s2,s2,31
    1456:	0008                	0x8
    1458:	0501                	addi	a0,a0,0
    145a:	0005                	c.nop	1
    145c:	0402                	c.slli64	s0
    145e:	0601                	addi	a2,a2,0
    1460:	00090003          	lb	zero,0(s2)
    1464:	0100                	addi	s0,sp,128
    1466:	0306                	slli	t1,t1,0x1
    1468:	090a                	slli	s2,s2,0x2
    146a:	0004                	0x4
    146c:	0501                	addi	a0,a0,0
    146e:	060d                	addi	a2,a2,3
    1470:	00090003          	lb	zero,0(s2)
    1474:	0100                	addi	s0,sp,128
    1476:	0505                	addi	a0,a0,1
    1478:	0306                	slli	t1,t1,0x1
    147a:	00060903          	lb	s2,0(a2)
    147e:	0501                	addi	a0,a0,0
    1480:	0900030b          	0x900030b
    1484:	0000                	unimp
    1486:	0501                	addi	a0,a0,0
    1488:	0624                	addi	s1,sp,776
    148a:	00091603          	lh	a2,0(s2)
    148e:	0100                	addi	s0,sp,128
    1490:	1005                	c.nop	-31
    1492:	08096e03          	0x8096e03
    1496:	0100                	addi	s0,sp,128
    1498:	0905                	addi	s2,s2,1
    149a:	0200                	addi	s0,sp,256
    149c:	0304                	addi	s1,sp,384
    149e:	0306                	slli	t1,t1,0x1
    14a0:	0970                	addi	a2,sp,156
    14a2:	0004                	0x4
    14a4:	0501                	addi	a0,a0,0
    14a6:	0018                	0x18
    14a8:	0402                	c.slli64	s0
    14aa:	00030603          	lb	a2,0(t1)
    14ae:	0009                	c.nop	2
    14b0:	0100                	addi	s0,sp,128
    14b2:	1105                	addi	sp,sp,-31
    14b4:	0200                	addi	s0,sp,256
    14b6:	0304                	addi	s1,sp,384
    14b8:	04090003          	lb	zero,64(s2)
    14bc:	0100                	addi	s0,sp,128
    14be:	1b05                	addi	s6,s6,-31
    14c0:	0200                	addi	s0,sp,256
    14c2:	0304                	addi	s1,sp,384
    14c4:	08097f03          	0x8097f03
    14c8:	0100                	addi	s0,sp,128
    14ca:	1105                	addi	sp,sp,-31
    14cc:	0200                	addi	s0,sp,256
    14ce:	0304                	addi	s1,sp,384
    14d0:	02090103          	lb	sp,32(s2)
    14d4:	0100                	addi	s0,sp,128
    14d6:	0905                	addi	s2,s2,1
    14d8:	0200                	addi	s0,sp,256
    14da:	0304                	addi	s1,sp,384
    14dc:	0306                	slli	t1,t1,0x1
    14de:	0901                	addi	s2,s2,0
    14e0:	0004                	0x4
    14e2:	0501                	addi	a0,a0,0
    14e4:	0018                	0x18
    14e6:	0402                	c.slli64	s0
    14e8:	00030603          	lb	a2,0(t1)
    14ec:	0009                	c.nop	2
    14ee:	0100                	addi	s0,sp,128
    14f0:	1105                	addi	sp,sp,-31
    14f2:	0200                	addi	s0,sp,256
    14f4:	0304                	addi	s1,sp,384
    14f6:	04090003          	lb	zero,64(s2)
    14fa:	0100                	addi	s0,sp,128
    14fc:	0905                	addi	s2,s2,1
    14fe:	0200                	addi	s0,sp,256
    1500:	0304                	addi	s1,sp,384
    1502:	0306                	slli	t1,t1,0x1
    1504:	0901                	addi	s2,s2,0
    1506:	000c                	0xc
    1508:	0501                	addi	a0,a0,0
    150a:	0011                	c.nop	4
    150c:	0402                	c.slli64	s0
    150e:	00030603          	lb	a2,0(t1)
    1512:	0009                	c.nop	2
    1514:	0100                	addi	s0,sp,128
    1516:	0905                	addi	s2,s2,1
    1518:	0200                	addi	s0,sp,256
    151a:	0304                	addi	s1,sp,384
    151c:	0306                	slli	t1,t1,0x1
    151e:	0901                	addi	s2,s2,0
    1520:	0008                	0x8
    1522:	0501                	addi	a0,a0,0
    1524:	0011                	c.nop	4
    1526:	0402                	c.slli64	s0
    1528:	00030603          	lb	a2,0(t1)
    152c:	0009                	c.nop	2
    152e:	0100                	addi	s0,sp,128
    1530:	1b05                	addi	s6,s6,-31
    1532:	0200                	addi	s0,sp,256
    1534:	0304                	addi	s1,sp,384
    1536:	0306                	slli	t1,t1,0x1
    1538:	097c                	addi	a5,sp,156
    153a:	0008                	0x8
    153c:	0501                	addi	a0,a0,0
    153e:	0311                	addi	t1,t1,4
    1540:	00040913          	mv	s2,s0
    1544:	0501                	addi	a0,a0,0
    1546:	00030623          	sb	zero,12(t1)
    154a:	0009                	c.nop	2
    154c:	0100                	addi	s0,sp,128
    154e:	1905                	addi	s2,s2,-31
    1550:	02090003          	lb	zero,32(s2)
    1554:	0100                	addi	s0,sp,128
    1556:	1305                	addi	t1,t1,-31
    1558:	0306                	slli	t1,t1,0x1
    155a:	097f                	0x97f
    155c:	0002                	c.slli64	zero
    155e:	0501                	addi	a0,a0,0
    1560:	0618                	addi	a4,sp,768
    1562:	00090003          	lb	zero,0(s2)
    1566:	0100                	addi	s0,sp,128
    1568:	1305                	addi	t1,t1,-31
    156a:	02090003          	lb	zero,32(s2)
    156e:	0100                	addi	s0,sp,128
    1570:	0d05                	addi	s10,s10,1
    1572:	0200                	addi	s0,sp,256
    1574:	0204                	addi	s1,sp,256
    1576:	0306                	slli	t1,t1,0x1
    1578:	00040903          	lb	s2,0(s0)
    157c:	0501                	addi	a0,a0,0
    157e:	001f 0402 0602      	0x6020402001f
    1584:	00090003          	lb	zero,0(s2)
    1588:	0100                	addi	s0,sp,128
    158a:	2005                	jal	15aa <product2+0xee>
    158c:	0200                	addi	s0,sp,256
    158e:	0204                	addi	s1,sp,256
    1590:	04097c03          	0x4097c03
    1594:	0100                	addi	s0,sp,128
    1596:	1505                	addi	a0,a0,-31
    1598:	0200                	addi	s0,sp,256
    159a:	0204                	addi	s1,sp,256
    159c:	02090403          	lb	s0,32(s2)
    15a0:	0100                	addi	s0,sp,128
    15a2:	2005                	jal	15c2 <product2+0x106>
    15a4:	0200                	addi	s0,sp,256
    15a6:	0204                	addi	s1,sp,256
    15a8:	0306                	slli	t1,t1,0x1
    15aa:	097c                	addi	a5,sp,156
    15ac:	0002                	c.slli64	zero
    15ae:	0501                	addi	a0,a0,0
    15b0:	0015                	c.nop	5
    15b2:	0402                	c.slli64	s0
    15b4:	0301                	addi	t1,t1,0
    15b6:	0900                	addi	s0,sp,144
    15b8:	0000                	unimp
    15ba:	0501                	addi	a0,a0,0
    15bc:	0009                	c.nop	2
    15be:	0402                	c.slli64	s0
    15c0:	0601                	addi	a2,a2,0
    15c2:	00090003          	lb	zero,0(s2)
    15c6:	0100                	addi	s0,sp,128
    15c8:	1005                	c.nop	-31
    15ca:	0e090903          	lb	s2,224(s2)
    15ce:	0100                	addi	s0,sp,128
    15d0:	1505                	addi	a0,a0,-31
    15d2:	0200                	addi	s0,sp,256
    15d4:	0104                	addi	s1,sp,128
    15d6:	0306                	slli	t1,t1,0x1
    15d8:	0900                	addi	s0,sp,144
    15da:	0002                	c.slli64	zero
    15dc:	0501                	addi	a0,a0,0
    15de:	0009                	c.nop	2
    15e0:	0402                	c.slli64	s0
    15e2:	0601                	addi	a2,a2,0
    15e4:	00090003          	lb	zero,0(s2)
    15e8:	0100                	addi	s0,sp,128
    15ea:	0306                	slli	t1,t1,0x1
    15ec:	0908                	addi	a0,sp,144
    15ee:	0004                	0x4
    15f0:	0501                	addi	a0,a0,0
    15f2:	0003060f          	0x3060f
    15f6:	0009                	c.nop	2
    15f8:	0100                	addi	s0,sp,128
    15fa:	0905                	addi	s2,s2,1
    15fc:	0306                	slli	t1,t1,0x1
    15fe:	0901                	addi	s2,s2,0
    1600:	000c                	0xc
    1602:	0501                	addi	a0,a0,0
    1604:	0019                	c.nop	6
    1606:	0402                	c.slli64	s0
    1608:	0301                	addi	t1,t1,0
    160a:	0900                	addi	s0,sp,144
    160c:	0004                	0x4
    160e:	0501                	addi	a0,a0,0
    1610:	0009                	c.nop	2
    1612:	0402                	c.slli64	s0
    1614:	0601                	addi	a2,a2,0
    1616:	00090003          	lb	zero,0(s2)
    161a:	0100                	addi	s0,sp,128
    161c:	1005                	c.nop	-31
    161e:	0a090603          	lb	a2,160(s2)
    1622:	0100                	addi	s0,sp,128
    1624:	1505                	addi	a0,a0,-31
    1626:	0200                	addi	s0,sp,256
    1628:	0104                	addi	s1,sp,128
    162a:	0306                	slli	t1,t1,0x1
    162c:	0900                	addi	s0,sp,144
    162e:	0002                	c.slli64	zero
    1630:	0501                	addi	a0,a0,0
    1632:	0009                	c.nop	2
    1634:	0402                	c.slli64	s0
    1636:	0601                	addi	a2,a2,0
    1638:	00090003          	lb	zero,0(s2)
    163c:	0100                	addi	s0,sp,128
    163e:	06090003          	lb	zero,96(s2)
    1642:	0100                	addi	s0,sp,128
    1644:	1005                	c.nop	-31
    1646:	02090503          	lb	a0,32(s2)
    164a:	0100                	addi	s0,sp,128
    164c:	1505                	addi	a0,a0,-31
    164e:	0200                	addi	s0,sp,256
    1650:	0104                	addi	s1,sp,128
    1652:	0306                	slli	t1,t1,0x1
    1654:	0900                	addi	s0,sp,144
    1656:	0002                	c.slli64	zero
    1658:	0501                	addi	a0,a0,0
    165a:	0009                	c.nop	2
    165c:	0402                	c.slli64	s0
    165e:	0601                	addi	a2,a2,0
    1660:	00090003          	lb	zero,0(s2)
    1664:	0100                	addi	s0,sp,128
    1666:	0306                	slli	t1,t1,0x1
    1668:	0908                	addi	a0,sp,144
    166a:	0004                	0x4
    166c:	0501                	addi	a0,a0,0
    166e:	0610                	addi	a2,sp,768
    1670:	00090003          	lb	zero,0(s2)
    1674:	0100                	addi	s0,sp,128
    1676:	0905                	addi	s2,s2,1
    1678:	0306                	slli	t1,t1,0x1
    167a:	0901                	addi	s2,s2,0
    167c:	000c                	0xc
    167e:	0501                	addi	a0,a0,0
    1680:	0610                	addi	a2,sp,768
    1682:	00090003          	lb	zero,0(s2)
    1686:	0100                	addi	s0,sp,128
    1688:	1505                	addi	a0,a0,-31
    168a:	0200                	addi	s0,sp,256
    168c:	0104                	addi	s1,sp,128
    168e:	0306                	slli	t1,t1,0x1
    1690:	0900                	addi	s0,sp,144
    1692:	0002                	c.slli64	zero
    1694:	0501                	addi	a0,a0,0
    1696:	0009                	c.nop	2
    1698:	0402                	c.slli64	s0
    169a:	0601                	addi	a2,a2,0
    169c:	00090003          	lb	zero,0(s2)
    16a0:	0100                	addi	s0,sp,128
    16a2:	1005                	c.nop	-31
    16a4:	06090603          	lb	a2,96(s2)
    16a8:	0100                	addi	s0,sp,128
    16aa:	1505                	addi	a0,a0,-31
    16ac:	0200                	addi	s0,sp,256
    16ae:	0104                	addi	s1,sp,128
    16b0:	0306                	slli	t1,t1,0x1
    16b2:	0900                	addi	s0,sp,144
    16b4:	0002                	c.slli64	zero
    16b6:	0501                	addi	a0,a0,0
    16b8:	0009                	c.nop	2
    16ba:	0402                	c.slli64	s0
    16bc:	0601                	addi	a2,a2,0
    16be:	00090003          	lb	zero,0(s2)
    16c2:	0100                	addi	s0,sp,128
    16c4:	0306                	slli	t1,t1,0x1
    16c6:	090a                	slli	s2,s2,0x2
    16c8:	0004                	0x4
    16ca:	0501                	addi	a0,a0,0
    16cc:	0610                	addi	a2,sp,768
    16ce:	00090003          	lb	zero,0(s2)
    16d2:	0100                	addi	s0,sp,128
    16d4:	0905                	addi	s2,s2,1
    16d6:	0306                	slli	t1,t1,0x1
    16d8:	0901                	addi	s2,s2,0
    16da:	000e                	c.slli	zero,0x3
    16dc:	0501                	addi	a0,a0,0
    16de:	0610                	addi	a2,sp,768
    16e0:	00090003          	lb	zero,0(s2)
    16e4:	0100                	addi	s0,sp,128
    16e6:	1505                	addi	a0,a0,-31
    16e8:	0200                	addi	s0,sp,256
    16ea:	0104                	addi	s1,sp,128
    16ec:	0306                	slli	t1,t1,0x1
    16ee:	0900                	addi	s0,sp,144
    16f0:	0002                	c.slli64	zero
    16f2:	0501                	addi	a0,a0,0
    16f4:	0009                	c.nop	2
    16f6:	0402                	c.slli64	s0
    16f8:	0601                	addi	a2,a2,0
    16fa:	00090003          	lb	zero,0(s2)
    16fe:	0100                	addi	s0,sp,128
    1700:	1005                	c.nop	-31
    1702:	04090403          	lb	s0,64(s2)
    1706:	0100                	addi	s0,sp,128
    1708:	1505                	addi	a0,a0,-31
    170a:	0200                	addi	s0,sp,256
    170c:	0104                	addi	s1,sp,128
    170e:	0306                	slli	t1,t1,0x1
    1710:	0900                	addi	s0,sp,144
    1712:	0002                	c.slli64	zero
    1714:	0501                	addi	a0,a0,0
    1716:	0009                	c.nop	2
    1718:	0402                	c.slli64	s0
    171a:	0601                	addi	a2,a2,0
    171c:	00090003          	lb	zero,0(s2)
    1720:	0100                	addi	s0,sp,128
    1722:	1005                	c.nop	-31
    1724:	06090803          	lb	a6,96(s2)
    1728:	0100                	addi	s0,sp,128
    172a:	1505                	addi	a0,a0,-31
    172c:	0200                	addi	s0,sp,256
    172e:	0104                	addi	s1,sp,128
    1730:	0306                	slli	t1,t1,0x1
    1732:	0900                	addi	s0,sp,144
    1734:	0002                	c.slli64	zero
    1736:	0501                	addi	a0,a0,0
    1738:	0009                	c.nop	2
    173a:	0402                	c.slli64	s0
    173c:	0601                	addi	a2,a2,0
    173e:	00090003          	lb	zero,0(s2)
    1742:	0100                	addi	s0,sp,128
    1744:	1005                	c.nop	-31
    1746:	06090403          	lb	s0,96(s2)
    174a:	0100                	addi	s0,sp,128
    174c:	1505                	addi	a0,a0,-31
    174e:	0200                	addi	s0,sp,256
    1750:	0104                	addi	s1,sp,128
    1752:	0306                	slli	t1,t1,0x1
    1754:	0900                	addi	s0,sp,144
    1756:	0002                	c.slli64	zero
    1758:	0501                	addi	a0,a0,0
    175a:	0009                	c.nop	2
    175c:	0402                	c.slli64	s0
    175e:	0601                	addi	a2,a2,0
    1760:	00090003          	lb	zero,0(s2)
    1764:	0100                	addi	s0,sp,128
    1766:	1205                	addi	tp,tp,-31
    1768:	097fb703          	0x97fb703
    176c:	0006                	c.slli	zero,0x1
    176e:	0501                	addi	a0,a0,0
    1770:	0310                	addi	a2,sp,384
    1772:	00d2                	slli	ra,ra,0x14
    1774:	0209                	addi	tp,tp,2
    1776:	0100                	addi	s0,sp,128
    1778:	1505                	addi	a0,a0,-31
    177a:	0200                	addi	s0,sp,256
    177c:	0104                	addi	s1,sp,128
    177e:	0306                	slli	t1,t1,0x1
    1780:	0900                	addi	s0,sp,144
    1782:	0002                	c.slli64	zero
    1784:	0501                	addi	a0,a0,0
    1786:	0009                	c.nop	2
    1788:	0402                	c.slli64	s0
    178a:	0601                	addi	a2,a2,0
    178c:	00090003          	lb	zero,0(s2)
    1790:	0100                	addi	s0,sp,128
    1792:	0b05                	addi	s6,s6,1
    1794:	0306                	slli	t1,t1,0x1
    1796:	7fac                	flw	fa1,120(a5)
    1798:	0409                	addi	s0,s0,2
    179a:	0100                	addi	s0,sp,128
    179c:	1005                	c.nop	-31
    179e:	0306                	slli	t1,t1,0x1
    17a0:	00df 0209 0100      	0x100020900df
    17a6:	02090103          	lb	sp,32(s2)
    17aa:	0100                	addi	s0,sp,128
    17ac:	1505                	addi	a0,a0,-31
    17ae:	0200                	addi	s0,sp,256
    17b0:	0104                	addi	s1,sp,128
    17b2:	0306                	slli	t1,t1,0x1
    17b4:	097f                	0x97f
    17b6:	0002                	c.slli64	zero
    17b8:	0501                	addi	a0,a0,0
    17ba:	0009                	c.nop	2
    17bc:	0402                	c.slli64	s0
    17be:	0601                	addi	a2,a2,0
    17c0:	00090003          	lb	zero,0(s2)
    17c4:	0100                	addi	s0,sp,128
    17c6:	1505                	addi	a0,a0,-31
    17c8:	0200                	addi	s0,sp,256
    17ca:	0104                	addi	s1,sp,128
    17cc:	0306                	slli	t1,t1,0x1
    17ce:	090c                	addi	a1,sp,144
    17d0:	000c                	0xc
    17d2:	0501                	addi	a0,a0,0
    17d4:	0009                	c.nop	2
    17d6:	0402                	c.slli64	s0
    17d8:	0601                	addi	a2,a2,0
    17da:	00090003          	lb	zero,0(s2)
    17de:	0100                	addi	s0,sp,128
    17e0:	0306                	slli	t1,t1,0x1
    17e2:	0905                	addi	s2,s2,1
    17e4:	0004                	0x4
    17e6:	0301                	addi	t1,t1,0
    17e8:	0901                	addi	s2,s2,0
    17ea:	0000                	unimp
    17ec:	0501                	addi	a0,a0,0
    17ee:	0605                	addi	a2,a2,1
    17f0:	00090103          	lb	sp,0(s2)
    17f4:	0100                	addi	s0,sp,128
    17f6:	1105                	addi	sp,sp,-31
    17f8:	0306                	slli	t1,t1,0x1
    17fa:	7f9d                	lui	t6,0xfffe7
    17fc:	2a09                	jal	190e <result+0x1fa>
    17fe:	0100                	addi	s0,sp,128
    1800:	2305                	jal	1d20 <random_keys+0x224>
    1802:	0306                	slli	t1,t1,0x1
    1804:	0900                	addi	s0,sp,144
    1806:	0000                	unimp
    1808:	0501                	addi	a0,a0,0
    180a:	0319                	addi	t1,t1,6
    180c:	0900                	addi	s0,sp,144
    180e:	0002                	c.slli64	zero
    1810:	0501                	addi	a0,a0,0
    1812:	7f030613          	addi	a2,t1,2032
    1816:	0209                	addi	tp,tp,2
    1818:	0100                	addi	s0,sp,128
    181a:	1805                	addi	a6,a6,-31
    181c:	0306                	slli	t1,t1,0x1
    181e:	0900                	addi	s0,sp,144
    1820:	0000                	unimp
    1822:	0501                	addi	a0,a0,0
    1824:	09000313          	li	t1,144
    1828:	0002                	c.slli64	zero
    182a:	0501                	addi	a0,a0,0
    182c:	000d                	c.nop	3
    182e:	0402                	c.slli64	s0
    1830:	0602                	c.slli64	a2
    1832:	04090303          	lb	t1,64(s2)
    1836:	0100                	addi	s0,sp,128
    1838:	1f05                	addi	t5,t5,-31
    183a:	0200                	addi	s0,sp,256
    183c:	0204                	addi	s1,sp,256
    183e:	0306                	slli	t1,t1,0x1
    1840:	0900                	addi	s0,sp,144
    1842:	0000                	unimp
    1844:	0501                	addi	a0,a0,0
    1846:	0020                	addi	s0,sp,8
    1848:	0402                	c.slli64	s0
    184a:	0302                	c.slli64	t1
    184c:	097c                	addi	a5,sp,156
    184e:	0004                	0x4
    1850:	0501                	addi	a0,a0,0
    1852:	0015                	c.nop	5
    1854:	0402                	c.slli64	s0
    1856:	0302                	c.slli64	t1
    1858:	0904                	addi	s1,sp,144
    185a:	0004                	0x4
    185c:	0501                	addi	a0,a0,0
    185e:	0020                	addi	s0,sp,8
    1860:	0402                	c.slli64	s0
    1862:	0602                	c.slli64	a2
    1864:	04097c03          	0x4097c03
    1868:	0100                	addi	s0,sp,128
    186a:	0d05                	addi	s10,s10,1
    186c:	0200                	addi	s0,sp,256
    186e:	0304                	addi	s1,sp,384
    1870:	02090a03          	lb	s4,32(s2)
    1874:	0100                	addi	s0,sp,128
    1876:	2205                	jal	1996 <ti_2+0x2a>
    1878:	0200                	addi	s0,sp,256
    187a:	0304                	addi	s1,sp,384
    187c:	0306                	slli	t1,t1,0x1
    187e:	0900                	addi	s0,sp,144
    1880:	0000                	unimp
    1882:	0501                	addi	a0,a0,0
    1884:	001d                	c.nop	7
    1886:	0402                	c.slli64	s0
    1888:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    188c:	0006                	c.slli	zero,0x1
    188e:	0501                	addi	a0,a0,0
    1890:	002a                	c.slli	zero,0xa
    1892:	0402                	c.slli64	s0
    1894:	097f0303          	lb	t1,151(t5)
    1898:	0002                	c.slli64	zero
    189a:	0501                	addi	a0,a0,0
    189c:	001d                	c.nop	7
    189e:	0402                	c.slli64	s0
    18a0:	09010303          	lb	t1,144(sp)
    18a4:	0004                	0x4
    18a6:	0501                	addi	a0,a0,0
    18a8:	002a                	c.slli	zero,0xa
    18aa:	0402                	c.slli64	s0
    18ac:	7f030603          	lb	a2,2032(t1)
    18b0:	0409                	addi	s0,s0,2
    18b2:	0100                	addi	s0,sp,128
    18b4:	0d05                	addi	s10,s10,1
    18b6:	0200                	addi	s0,sp,256
    18b8:	0304                	addi	s1,sp,384
    18ba:	02090703          	lb	a4,32(s2)
    18be:	0100                	addi	s0,sp,128
    18c0:	1b05                	addi	s6,s6,-31
    18c2:	0200                	addi	s0,sp,256
    18c4:	0304                	addi	s1,sp,384
    18c6:	0306                	slli	t1,t1,0x1
    18c8:	0900                	addi	s0,sp,144
    18ca:	0000                	unimp
    18cc:	0501                	addi	a0,a0,0
    18ce:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    18d2:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    18d6:	0004                	0x4
    18d8:	0501                	addi	a0,a0,0
    18da:	001f 0402 0303      	0x3030402001f
    18e0:	0900                	addi	s0,sp,144
    18e2:	0004                	0x4
    18e4:	0501                	addi	a0,a0,0
    18e6:	0015                	c.nop	5
    18e8:	0402                	c.slli64	s0
    18ea:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    18ee:	0004                	0x4
    18f0:	0501                	addi	a0,a0,0
    18f2:	0020                	addi	s0,sp,8
    18f4:	0402                	c.slli64	s0
    18f6:	097f0303          	lb	t1,151(t5)
    18fa:	0004                	0x4
    18fc:	0501                	addi	a0,a0,0
    18fe:	001f 0402 0303      	0x3030402001f
    1904:	0901                	addi	s2,s2,0
    1906:	0002                	c.slli64	zero
    1908:	0501                	addi	a0,a0,0
    190a:	0015                	c.nop	5
    190c:	0402                	c.slli64	s0
    190e:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1912:	0002                	c.slli64	zero
    1914:	0501                	addi	a0,a0,0
    1916:	0020                	addi	s0,sp,8
    1918:	0402                	c.slli64	s0
    191a:	7f030603          	lb	a2,2032(t1)
    191e:	0209                	addi	tp,tp,2
    1920:	0100                	addi	s0,sp,128
    1922:	1105                	addi	sp,sp,-31
    1924:	04090703          	lb	a4,64(s2)
    1928:	0100                	addi	s0,sp,128
    192a:	2305                	jal	1e4a <random_keys+0x34e>
    192c:	0306                	slli	t1,t1,0x1
    192e:	0900                	addi	s0,sp,144
    1930:	0000                	unimp
    1932:	0501                	addi	a0,a0,0
    1934:	0319                	addi	t1,t1,6
    1936:	0900                	addi	s0,sp,144
    1938:	0002                	c.slli64	zero
    193a:	0501                	addi	a0,a0,0
    193c:	7f030613          	addi	a2,t1,2032
    1940:	0209                	addi	tp,tp,2
    1942:	0100                	addi	s0,sp,128
    1944:	1805                	addi	a6,a6,-31
    1946:	0306                	slli	t1,t1,0x1
    1948:	0900                	addi	s0,sp,144
    194a:	0000                	unimp
    194c:	0501                	addi	a0,a0,0
    194e:	09000313          	li	t1,144
    1952:	0002                	c.slli64	zero
    1954:	0501                	addi	a0,a0,0
    1956:	000d                	c.nop	3
    1958:	0402                	c.slli64	s0
    195a:	0602                	c.slli64	a2
    195c:	04090303          	lb	t1,64(s2)
    1960:	0100                	addi	s0,sp,128
    1962:	1f05                	addi	t5,t5,-31
    1964:	0200                	addi	s0,sp,256
    1966:	0204                	addi	s1,sp,256
    1968:	0306                	slli	t1,t1,0x1
    196a:	0900                	addi	s0,sp,144
    196c:	0000                	unimp
    196e:	0501                	addi	a0,a0,0
    1970:	0020                	addi	s0,sp,8
    1972:	0402                	c.slli64	s0
    1974:	0302                	c.slli64	t1
    1976:	097c                	addi	a5,sp,156
    1978:	0004                	0x4
    197a:	0501                	addi	a0,a0,0
    197c:	0015                	c.nop	5
    197e:	0402                	c.slli64	s0
    1980:	0302                	c.slli64	t1
    1982:	0904                	addi	s1,sp,144
    1984:	0004                	0x4
    1986:	0501                	addi	a0,a0,0
    1988:	0020                	addi	s0,sp,8
    198a:	0402                	c.slli64	s0
    198c:	0602                	c.slli64	a2
    198e:	04097c03          	0x4097c03
    1992:	0100                	addi	s0,sp,128
    1994:	0d05                	addi	s10,s10,1
    1996:	0200                	addi	s0,sp,256
    1998:	0304                	addi	s1,sp,384
    199a:	02090a03          	lb	s4,32(s2)
    199e:	0100                	addi	s0,sp,128
    19a0:	1b05                	addi	s6,s6,-31
    19a2:	0200                	addi	s0,sp,256
    19a4:	0304                	addi	s1,sp,384
    19a6:	0306                	slli	t1,t1,0x1
    19a8:	0900                	addi	s0,sp,144
    19aa:	0004                	0x4
    19ac:	0501                	addi	a0,a0,0
    19ae:	0015                	c.nop	5
    19b0:	0402                	c.slli64	s0
    19b2:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    19b6:	0006                	c.slli	zero,0x1
    19b8:	0501                	addi	a0,a0,0
    19ba:	0020                	addi	s0,sp,8
    19bc:	0402                	c.slli64	s0
    19be:	097f0303          	lb	t1,151(t5)
    19c2:	0002                	c.slli64	zero
    19c4:	0501                	addi	a0,a0,0
    19c6:	0015                	c.nop	5
    19c8:	0402                	c.slli64	s0
    19ca:	09010303          	lb	t1,144(sp)
    19ce:	0002                	c.slli64	zero
    19d0:	0501                	addi	a0,a0,0
    19d2:	0020                	addi	s0,sp,8
    19d4:	0402                	c.slli64	s0
    19d6:	7f030603          	lb	a2,2032(t1)
    19da:	0209                	addi	tp,tp,2
    19dc:	0100                	addi	s0,sp,128
    19de:	1105                	addi	sp,sp,-31
    19e0:	02090803          	lb	a6,32(s2)
    19e4:	0100                	addi	s0,sp,128
    19e6:	2305                	jal	1f06 <random_keys+0x40a>
    19e8:	0306                	slli	t1,t1,0x1
    19ea:	0900                	addi	s0,sp,144
    19ec:	0000                	unimp
    19ee:	0501                	addi	a0,a0,0
    19f0:	0319                	addi	t1,t1,6
    19f2:	0900                	addi	s0,sp,144
    19f4:	0002                	c.slli64	zero
    19f6:	0501                	addi	a0,a0,0
    19f8:	7f030613          	addi	a2,t1,2032
    19fc:	0209                	addi	tp,tp,2
    19fe:	0100                	addi	s0,sp,128
    1a00:	1805                	addi	a6,a6,-31
    1a02:	0306                	slli	t1,t1,0x1
    1a04:	0900                	addi	s0,sp,144
    1a06:	0000                	unimp
    1a08:	0501                	addi	a0,a0,0
    1a0a:	09000313          	li	t1,144
    1a0e:	0002                	c.slli64	zero
    1a10:	0501                	addi	a0,a0,0
    1a12:	000d                	c.nop	3
    1a14:	0402                	c.slli64	s0
    1a16:	0602                	c.slli64	a2
    1a18:	04090303          	lb	t1,64(s2)
    1a1c:	0100                	addi	s0,sp,128
    1a1e:	1f05                	addi	t5,t5,-31
    1a20:	0200                	addi	s0,sp,256
    1a22:	0204                	addi	s1,sp,256
    1a24:	0306                	slli	t1,t1,0x1
    1a26:	0900                	addi	s0,sp,144
    1a28:	0000                	unimp
    1a2a:	0501                	addi	a0,a0,0
    1a2c:	0020                	addi	s0,sp,8
    1a2e:	0402                	c.slli64	s0
    1a30:	0302                	c.slli64	t1
    1a32:	097c                	addi	a5,sp,156
    1a34:	0004                	0x4
    1a36:	0501                	addi	a0,a0,0
    1a38:	0015                	c.nop	5
    1a3a:	0402                	c.slli64	s0
    1a3c:	0302                	c.slli64	t1
    1a3e:	0904                	addi	s1,sp,144
    1a40:	0004                	0x4
    1a42:	0501                	addi	a0,a0,0
    1a44:	0020                	addi	s0,sp,8
    1a46:	0402                	c.slli64	s0
    1a48:	0602                	c.slli64	a2
    1a4a:	04097c03          	0x4097c03
    1a4e:	0100                	addi	s0,sp,128
    1a50:	0d05                	addi	s10,s10,1
    1a52:	0200                	addi	s0,sp,256
    1a54:	0304                	addi	s1,sp,384
    1a56:	02090c03          	lb	s8,32(s2)
    1a5a:	0100                	addi	s0,sp,128
    1a5c:	1b05                	addi	s6,s6,-31
    1a5e:	0200                	addi	s0,sp,256
    1a60:	0304                	addi	s1,sp,384
    1a62:	0306                	slli	t1,t1,0x1
    1a64:	0900                	addi	s0,sp,144
    1a66:	0004                	0x4
    1a68:	0501                	addi	a0,a0,0
    1a6a:	0015                	c.nop	5
    1a6c:	0402                	c.slli64	s0
    1a6e:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1a72:	0006                	c.slli	zero,0x1
    1a74:	0501                	addi	a0,a0,0
    1a76:	0020                	addi	s0,sp,8
    1a78:	0402                	c.slli64	s0
    1a7a:	097f0303          	lb	t1,151(t5)
    1a7e:	0002                	c.slli64	zero
    1a80:	0501                	addi	a0,a0,0
    1a82:	0015                	c.nop	5
    1a84:	0402                	c.slli64	s0
    1a86:	09010303          	lb	t1,144(sp)
    1a8a:	0002                	c.slli64	zero
    1a8c:	0501                	addi	a0,a0,0
    1a8e:	0020                	addi	s0,sp,8
    1a90:	0402                	c.slli64	s0
    1a92:	7f030603          	lb	a2,2032(t1)
    1a96:	0209                	addi	tp,tp,2
    1a98:	0100                	addi	s0,sp,128
    1a9a:	1105                	addi	sp,sp,-31
    1a9c:	02090603          	lb	a2,32(s2)
    1aa0:	0100                	addi	s0,sp,128
    1aa2:	2305                	jal	1fc2 <random_keys+0x4c6>
    1aa4:	0306                	slli	t1,t1,0x1
    1aa6:	0900                	addi	s0,sp,144
    1aa8:	0000                	unimp
    1aaa:	0501                	addi	a0,a0,0
    1aac:	0319                	addi	t1,t1,6
    1aae:	0900                	addi	s0,sp,144
    1ab0:	0002                	c.slli64	zero
    1ab2:	0501                	addi	a0,a0,0
    1ab4:	7f030613          	addi	a2,t1,2032
    1ab8:	0409                	addi	s0,s0,2
    1aba:	0100                	addi	s0,sp,128
    1abc:	1805                	addi	a6,a6,-31
    1abe:	0306                	slli	t1,t1,0x1
    1ac0:	0900                	addi	s0,sp,144
    1ac2:	0000                	unimp
    1ac4:	0501                	addi	a0,a0,0
    1ac6:	09000313          	li	t1,144
    1aca:	0004                	0x4
    1acc:	0501                	addi	a0,a0,0
    1ace:	000d                	c.nop	3
    1ad0:	0402                	c.slli64	s0
    1ad2:	0602                	c.slli64	a2
    1ad4:	04090303          	lb	t1,64(s2)
    1ad8:	0100                	addi	s0,sp,128
    1ada:	1f05                	addi	t5,t5,-31
    1adc:	0200                	addi	s0,sp,256
    1ade:	0204                	addi	s1,sp,256
    1ae0:	0306                	slli	t1,t1,0x1
    1ae2:	0900                	addi	s0,sp,144
    1ae4:	0000                	unimp
    1ae6:	0501                	addi	a0,a0,0
    1ae8:	0020                	addi	s0,sp,8
    1aea:	0402                	c.slli64	s0
    1aec:	0302                	c.slli64	t1
    1aee:	097c                	addi	a5,sp,156
    1af0:	0004                	0x4
    1af2:	0501                	addi	a0,a0,0
    1af4:	0015                	c.nop	5
    1af6:	0402                	c.slli64	s0
    1af8:	0302                	c.slli64	t1
    1afa:	0904                	addi	s1,sp,144
    1afc:	0004                	0x4
    1afe:	0501                	addi	a0,a0,0
    1b00:	0020                	addi	s0,sp,8
    1b02:	0402                	c.slli64	s0
    1b04:	0602                	c.slli64	a2
    1b06:	04097c03          	0x4097c03
    1b0a:	0100                	addi	s0,sp,128
    1b0c:	0d05                	addi	s10,s10,1
    1b0e:	0200                	addi	s0,sp,256
    1b10:	0304                	addi	s1,sp,384
    1b12:	02090903          	lb	s2,32(s2)
    1b16:	0100                	addi	s0,sp,128
    1b18:	1905                	addi	s2,s2,-31
    1b1a:	0200                	addi	s0,sp,256
    1b1c:	0304                	addi	s1,sp,384
    1b1e:	0306                	slli	t1,t1,0x1
    1b20:	0900                	addi	s0,sp,144
    1b22:	0000                	unimp
    1b24:	0501                	addi	a0,a0,0
    1b26:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1b2a:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1b2e:	000a                	c.slli	zero,0x2
    1b30:	0501                	addi	a0,a0,0
    1b32:	001d                	c.nop	7
    1b34:	0402                	c.slli64	s0
    1b36:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1b3a:	0004                	0x4
    1b3c:	0501                	addi	a0,a0,0
    1b3e:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1b42:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1b46:	0004                	0x4
    1b48:	0501                	addi	a0,a0,0
    1b4a:	0020                	addi	s0,sp,8
    1b4c:	0402                	c.slli64	s0
    1b4e:	097f0303          	lb	t1,151(t5)
    1b52:	0004                	0x4
    1b54:	0501                	addi	a0,a0,0
    1b56:	001d                	c.nop	7
    1b58:	0402                	c.slli64	s0
    1b5a:	09010303          	lb	t1,144(sp)
    1b5e:	0002                	c.slli64	zero
    1b60:	0501                	addi	a0,a0,0
    1b62:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1b66:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1b6a:	0002                	c.slli64	zero
    1b6c:	0501                	addi	a0,a0,0
    1b6e:	0020                	addi	s0,sp,8
    1b70:	0402                	c.slli64	s0
    1b72:	7f030603          	lb	a2,2032(t1)
    1b76:	0209                	addi	tp,tp,2
    1b78:	0100                	addi	s0,sp,128
    1b7a:	1105                	addi	sp,sp,-31
    1b7c:	04090603          	lb	a2,64(s2)
    1b80:	0100                	addi	s0,sp,128
    1b82:	1f05                	addi	t5,t5,-31
    1b84:	0306                	slli	t1,t1,0x1
    1b86:	0900                	addi	s0,sp,144
    1b88:	0000                	unimp
    1b8a:	0501                	addi	a0,a0,0
    1b8c:	09000317          	auipc	t1,0x9000
    1b90:	0002                	c.slli64	zero
    1b92:	0501                	addi	a0,a0,0
    1b94:	7f030613          	addi	a2,t1,2032 # 900237c <_stack_start+0x8ff237c>
    1b98:	0209                	addi	tp,tp,2
    1b9a:	0100                	addi	s0,sp,128
    1b9c:	1605                	addi	a2,a2,-31
    1b9e:	0306                	slli	t1,t1,0x1
    1ba0:	0900                	addi	s0,sp,144
    1ba2:	0000                	unimp
    1ba4:	0501                	addi	a0,a0,0
    1ba6:	09000313          	li	t1,144
    1baa:	0002                	c.slli64	zero
    1bac:	0501                	addi	a0,a0,0
    1bae:	000d                	c.nop	3
    1bb0:	0402                	c.slli64	s0
    1bb2:	0602                	c.slli64	a2
    1bb4:	04090303          	lb	t1,64(s2)
    1bb8:	0100                	addi	s0,sp,128
    1bba:	1b05                	addi	s6,s6,-31
    1bbc:	0200                	addi	s0,sp,256
    1bbe:	0204                	addi	s1,sp,256
    1bc0:	0306                	slli	t1,t1,0x1
    1bc2:	0900                	addi	s0,sp,144
    1bc4:	0000                	unimp
    1bc6:	0501                	addi	a0,a0,0
    1bc8:	0020                	addi	s0,sp,8
    1bca:	0402                	c.slli64	s0
    1bcc:	0302                	c.slli64	t1
    1bce:	097c                	addi	a5,sp,156
    1bd0:	0004                	0x4
    1bd2:	0501                	addi	a0,a0,0
    1bd4:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1bd8:	0302                	c.slli64	t1
    1bda:	0904                	addi	s1,sp,144
    1bdc:	0004                	0x4
    1bde:	0501                	addi	a0,a0,0
    1be0:	0020                	addi	s0,sp,8
    1be2:	0402                	c.slli64	s0
    1be4:	0602                	c.slli64	a2
    1be6:	04097c03          	0x4097c03
    1bea:	0100                	addi	s0,sp,128
    1bec:	0d05                	addi	s10,s10,1
    1bee:	0200                	addi	s0,sp,256
    1bf0:	0304                	addi	s1,sp,384
    1bf2:	02090a03          	lb	s4,32(s2)
    1bf6:	0100                	addi	s0,sp,128
    1bf8:	1505                	addi	a0,a0,-31
    1bfa:	0200                	addi	s0,sp,256
    1bfc:	0304                	addi	s1,sp,384
    1bfe:	0306                	slli	t1,t1,0x1
    1c00:	0900                	addi	s0,sp,144
    1c02:	0004                	0x4
    1c04:	0501                	addi	a0,a0,0
    1c06:	0020                	addi	s0,sp,8
    1c08:	0402                	c.slli64	s0
    1c0a:	097f0303          	lb	t1,151(t5)
    1c0e:	0006                	c.slli	zero,0x1
    1c10:	0501                	addi	a0,a0,0
    1c12:	0015                	c.nop	5
    1c14:	0402                	c.slli64	s0
    1c16:	09010303          	lb	t1,144(sp)
    1c1a:	0002                	c.slli64	zero
    1c1c:	0501                	addi	a0,a0,0
    1c1e:	000d                	c.nop	3
    1c20:	0402                	c.slli64	s0
    1c22:	01030603          	lb	a2,16(t1)
    1c26:	0209                	addi	tp,tp,2
    1c28:	0100                	addi	s0,sp,128
    1c2a:	1905                	addi	s2,s2,-31
    1c2c:	0200                	addi	s0,sp,256
    1c2e:	0304                	addi	s1,sp,384
    1c30:	0306                	slli	t1,t1,0x1
    1c32:	0900                	addi	s0,sp,144
    1c34:	0000                	unimp
    1c36:	0501                	addi	a0,a0,0
    1c38:	0015                	c.nop	5
    1c3a:	0402                	c.slli64	s0
    1c3c:	09010303          	lb	t1,144(sp)
    1c40:	0006                	c.slli	zero,0x1
    1c42:	0001                	nop
    1c44:	0402                	c.slli64	s0
    1c46:	097f0303          	lb	t1,151(t5)
    1c4a:	000a                	c.slli	zero,0x2
    1c4c:	0501                	addi	a0,a0,0
    1c4e:	000d                	c.nop	3
    1c50:	0402                	c.slli64	s0
    1c52:	01030603          	lb	a2,16(t1)
    1c56:	0209                	addi	tp,tp,2
    1c58:	0100                	addi	s0,sp,128
    1c5a:	1505                	addi	a0,a0,-31
    1c5c:	0200                	addi	s0,sp,256
    1c5e:	0304                	addi	s1,sp,384
    1c60:	0306                	slli	t1,t1,0x1
    1c62:	0900                	addi	s0,sp,144
    1c64:	0004                	0x4
    1c66:	0501                	addi	a0,a0,0
    1c68:	0016                	c.slli	zero,0x5
    1c6a:	0402                	c.slli64	s0
    1c6c:	09030303          	lb	t1,144(t1)
    1c70:	0004                	0x4
    1c72:	0501                	addi	a0,a0,0
    1c74:	0015                	c.nop	5
    1c76:	0402                	c.slli64	s0
    1c78:	097d0303          	lb	t1,151(s10)
    1c7c:	0002                	c.slli64	zero
    1c7e:	0501                	addi	a0,a0,0
    1c80:	000d                	c.nop	3
    1c82:	0402                	c.slli64	s0
    1c84:	01030603          	lb	a2,16(t1)
    1c88:	0409                	addi	s0,s0,2
    1c8a:	0100                	addi	s0,sp,128
    1c8c:	1905                	addi	s2,s2,-31
    1c8e:	0200                	addi	s0,sp,256
    1c90:	0304                	addi	s1,sp,384
    1c92:	0306                	slli	t1,t1,0x1
    1c94:	0900                	addi	s0,sp,144
    1c96:	0000                	unimp
    1c98:	0501                	addi	a0,a0,0
    1c9a:	0015                	c.nop	5
    1c9c:	0402                	c.slli64	s0
    1c9e:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1ca2:	0004                	0x4
    1ca4:	0501                	addi	a0,a0,0
    1ca6:	000d                	c.nop	3
    1ca8:	0402                	c.slli64	s0
    1caa:	01030603          	lb	a2,16(t1)
    1cae:	0409                	addi	s0,s0,2
    1cb0:	0100                	addi	s0,sp,128
    1cb2:	1505                	addi	a0,a0,-31
    1cb4:	0200                	addi	s0,sp,256
    1cb6:	0304                	addi	s1,sp,384
    1cb8:	0306                	slli	t1,t1,0x1
    1cba:	0900                	addi	s0,sp,144
    1cbc:	0000                	unimp
    1cbe:	0501                	addi	a0,a0,0
    1cc0:	000d                	c.nop	3
    1cc2:	0402                	c.slli64	s0
    1cc4:	01030603          	lb	a2,16(t1)
    1cc8:	0809                	addi	a6,a6,2
    1cca:	0100                	addi	s0,sp,128
    1ccc:	2005                	jal	1cec <random_keys+0x1f0>
    1cce:	0200                	addi	s0,sp,256
    1cd0:	0304                	addi	s1,sp,384
    1cd2:	00097a03          	0x97a03
    1cd6:	0100                	addi	s0,sp,128
    1cd8:	0d05                	addi	s10,s10,1
    1cda:	04090c03          	lb	s8,64(s2)
    1cde:	0100                	addi	s0,sp,128
    1ce0:	1b05                	addi	s6,s6,-31
    1ce2:	0306                	slli	t1,t1,0x1
    1ce4:	0900                	addi	s0,sp,144
    1ce6:	0000                	unimp
    1ce8:	0501                	addi	a0,a0,0
    1cea:	0320                	addi	s0,sp,392
    1cec:	0900                	addi	s0,sp,144
    1cee:	0008                	0x8
    1cf0:	0501                	addi	a0,a0,0
    1cf2:	0310                	addi	a2,sp,384
    1cf4:	0900                	addi	s0,sp,144
    1cf6:	0004                	0x4
    1cf8:	0501                	addi	a0,a0,0
    1cfa:	001e                	c.slli	zero,0x7
    1cfc:	0402                	c.slli64	s0
    1cfe:	0602                	c.slli64	a2
    1d00:	04097f03          	0x4097f03
    1d04:	0100                	addi	s0,sp,128
    1d06:	0d05                	addi	s10,s10,1
    1d08:	0200                	addi	s0,sp,256
    1d0a:	0304                	addi	s1,sp,384
    1d0c:	04090d03          	lb	s10,64(s2)
    1d10:	0100                	addi	s0,sp,128
    1d12:	2005                	jal	1d32 <random_keys+0x236>
    1d14:	0200                	addi	s0,sp,256
    1d16:	0304                	addi	s1,sp,384
    1d18:	0306                	slli	t1,t1,0x1
    1d1a:	0900                	addi	s0,sp,144
    1d1c:	0000                	unimp
    1d1e:	0001                	nop
    1d20:	0402                	c.slli64	s0
    1d22:	097f0303          	lb	t1,151(t5)
    1d26:	0002                	c.slli64	zero
    1d28:	0001                	nop
    1d2a:	0402                	c.slli64	s0
    1d2c:	09010303          	lb	t1,144(sp)
    1d30:	0004                	0x4
    1d32:	0501                	addi	a0,a0,0
    1d34:	0025                	c.nop	9
    1d36:	0402                	c.slli64	s0
    1d38:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1d3c:	0004                	0x4
    1d3e:	0501                	addi	a0,a0,0
    1d40:	0015                	c.nop	5
    1d42:	0402                	c.slli64	s0
    1d44:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1d48:	0004                	0x4
    1d4a:	0501                	addi	a0,a0,0
    1d4c:	0020                	addi	s0,sp,8
    1d4e:	0402                	c.slli64	s0
    1d50:	7f030603          	lb	a2,2032(t1)
    1d54:	0409                	addi	s0,s0,2
    1d56:	0100                	addi	s0,sp,128
    1d58:	2805                	jal	1d88 <random_keys+0x28c>
    1d5a:	02090c03          	lb	s8,32(s2)
    1d5e:	0100                	addi	s0,sp,128
    1d60:	0105                	addi	sp,sp,1
    1d62:	00090203          	lb	tp,0(s2)
    1d66:	0100                	addi	s0,sp,128
    1d68:	2805                	jal	1d98 <random_keys+0x29c>
    1d6a:	0306                	slli	t1,t1,0x1
    1d6c:	097e                	slli	s2,s2,0x1f
    1d6e:	0000                	unimp
    1d70:	0501                	addi	a0,a0,0
    1d72:	030e                	slli	t1,t1,0x3
    1d74:	0902                	c.slli64	s2
    1d76:	0038                	addi	a4,sp,8
    1d78:	0501                	addi	a0,a0,0
    1d7a:	0328                	addi	a0,sp,392
    1d7c:	097e                	slli	s2,s2,0x1f
    1d7e:	0008                	0x8
    1d80:	0301                	addi	t1,t1,0
    1d82:	0900                	addi	s0,sp,144
    1d84:	0000                	unimp
    1d86:	0501                	addi	a0,a0,0
    1d88:	0309                	addi	t1,t1,2
    1d8a:	00060903          	lb	s2,0(a2)
    1d8e:	0501                	addi	a0,a0,0
    1d90:	030e                	slli	t1,t1,0x3
    1d92:	097f                	0x97f
    1d94:	0006                	c.slli	zero,0x1
    1d96:	0501                	addi	a0,a0,0
    1d98:	0309                	addi	t1,t1,2
    1d9a:	0901                	addi	s2,s2,0
    1d9c:	0008                	0x8
    1d9e:	0501                	addi	a0,a0,0
    1da0:	030e                	slli	t1,t1,0x3
    1da2:	097f                	0x97f
    1da4:	0004                	0x4
    1da6:	0501                	addi	a0,a0,0
    1da8:	0605                	addi	a2,a2,1
    1daa:	04090103          	lb	sp,64(s2)
    1dae:	0100                	addi	s0,sp,128
    1db0:	0905                	addi	s2,s2,1
    1db2:	0306                	slli	t1,t1,0x1
    1db4:	0900                	addi	s0,sp,144
    1db6:	0000                	unimp
    1db8:	0301                	addi	t1,t1,0
    1dba:	0901                	addi	s2,s2,0
    1dbc:	0006                	c.slli	zero,0x1
    1dbe:	0301                	addi	t1,t1,0
    1dc0:	097f                	0x97f
    1dc2:	000a                	c.slli	zero,0x2
    1dc4:	0501                	addi	a0,a0,0
    1dc6:	0605                	addi	a2,a2,1
    1dc8:	6c090103          	lb	sp,1728(s2)
    1dcc:	0100                	addi	s0,sp,128
    1dce:	1005                	c.nop	-31
    1dd0:	0306                	slli	t1,t1,0x1
    1dd2:	0906                	slli	s2,s2,0x1
    1dd4:	0000                	unimp
    1dd6:	0501                	addi	a0,a0,0
    1dd8:	0309                	addi	t1,t1,2
    1dda:	097a                	slli	s2,s2,0x1e
    1ddc:	0004                	0x4
    1dde:	0301                	addi	t1,t1,0
    1de0:	0906                	slli	s2,s2,0x1
    1de2:	0002                	c.slli64	zero
    1de4:	0501                	addi	a0,a0,0
    1de6:	030e                	slli	t1,t1,0x3
    1de8:	0905                	addi	s2,s2,1
    1dea:	000e                	c.slli	zero,0x3
    1dec:	0501                	addi	a0,a0,0
    1dee:	0309                	addi	t1,t1,2
    1df0:	0975                	addi	s2,s2,29
    1df2:	000a                	c.slli	zero,0x2
    1df4:	0501                	addi	a0,a0,0
    1df6:	0605                	addi	a2,a2,1
    1df8:	64090203          	lb	tp,1600(s2)
    1dfc:	0100                	addi	s0,sp,128
    1dfe:	00090103          	lb	sp,0(s2)
    1e02:	0100                	addi	s0,sp,128
    1e04:	00090103          	lb	sp,0(s2)
    1e08:	0100                	addi	s0,sp,128
    1e0a:	00090103          	lb	sp,0(s2)
    1e0e:	0100                	addi	s0,sp,128
    1e10:	00090103          	lb	sp,0(s2)
    1e14:	0100                	addi	s0,sp,128
    1e16:	00090103          	lb	sp,0(s2)
    1e1a:	0100                	addi	s0,sp,128
    1e1c:	00090103          	lb	sp,0(s2)
    1e20:	0100                	addi	s0,sp,128
    1e22:	00090303          	lb	t1,0(s2)
    1e26:	0100                	addi	s0,sp,128
    1e28:	00090103          	lb	sp,0(s2)
    1e2c:	0100                	addi	s0,sp,128
    1e2e:	0e05                	addi	t3,t3,1
    1e30:	0306                	slli	t1,t1,0x1
    1e32:	0900                	addi	s0,sp,144
    1e34:	0000                	unimp
    1e36:	0501                	addi	a0,a0,0
    1e38:	0605                	addi	a2,a2,1
    1e3a:	04090203          	lb	tp,64(s2)
    1e3e:	0100                	addi	s0,sp,128
    1e40:	0b05                	addi	s6,s6,1
    1e42:	0306                	slli	t1,t1,0x1
    1e44:	0900                	addi	s0,sp,144
    1e46:	0000                	unimp
    1e48:	0501                	addi	a0,a0,0
    1e4a:	0010                	0x10
    1e4c:	0402                	c.slli64	s0
    1e4e:	0601                	addi	a2,a2,0
    1e50:	02090003          	lb	zero,32(s2)
    1e54:	0100                	addi	s0,sp,128
    1e56:	0505                	addi	a0,a0,1
    1e58:	0200                	addi	s0,sp,256
    1e5a:	0104                	addi	s1,sp,128
    1e5c:	0306                	slli	t1,t1,0x1
    1e5e:	0900                	addi	s0,sp,144
    1e60:	0000                	unimp
    1e62:	0301                	addi	t1,t1,0
    1e64:	0906                	slli	s2,s2,0x1
    1e66:	0006                	c.slli	zero,0x1
    1e68:	0501                	addi	a0,a0,0
    1e6a:	0011                	c.nop	4
    1e6c:	0402                	c.slli64	s0
    1e6e:	0601                	addi	a2,a2,0
    1e70:	04090003          	lb	zero,64(s2)
    1e74:	0100                	addi	s0,sp,128
    1e76:	0505                	addi	a0,a0,1
    1e78:	0200                	addi	s0,sp,256
    1e7a:	0104                	addi	s1,sp,128
    1e7c:	0306                	slli	t1,t1,0x1
    1e7e:	0900                	addi	s0,sp,144
    1e80:	0000                	unimp
    1e82:	0501                	addi	a0,a0,0
    1e84:	0907030b          	0x907030b
    1e88:	0004                	0x4
    1e8a:	0501                	addi	a0,a0,0
    1e8c:	0318                	addi	a4,sp,384
    1e8e:	0901                	addi	s2,s2,0
    1e90:	0002                	c.slli64	zero
    1e92:	0501                	addi	a0,a0,0
    1e94:	0010                	0x10
    1e96:	0402                	c.slli64	s0
    1e98:	0601                	addi	a2,a2,0
    1e9a:	08097f03          	0x8097f03
    1e9e:	0100                	addi	s0,sp,128
    1ea0:	0505                	addi	a0,a0,1
    1ea2:	0200                	addi	s0,sp,256
    1ea4:	0104                	addi	s1,sp,128
    1ea6:	0306                	slli	t1,t1,0x1
    1ea8:	0900                	addi	s0,sp,144
    1eaa:	0000                	unimp
    1eac:	0501                	addi	a0,a0,0
    1eae:	0316                	slli	t1,t1,0x5
    1eb0:	0905                	addi	s2,s2,1
    1eb2:	0008                	0x8
    1eb4:	0501                	addi	a0,a0,0
    1eb6:	0318                	addi	a4,sp,384
    1eb8:	0901                	addi	s2,s2,0
    1eba:	0008                	0x8
    1ebc:	0501                	addi	a0,a0,0
    1ebe:	0010                	0x10
    1ec0:	0402                	c.slli64	s0
    1ec2:	0601                	addi	a2,a2,0
    1ec4:	08097f03          	0x8097f03
    1ec8:	0100                	addi	s0,sp,128
    1eca:	0505                	addi	a0,a0,1
    1ecc:	0200                	addi	s0,sp,256
    1ece:	0104                	addi	s1,sp,128
    1ed0:	0306                	slli	t1,t1,0x1
    1ed2:	0900                	addi	s0,sp,144
    1ed4:	0000                	unimp
    1ed6:	0601                	addi	a2,a2,0
    1ed8:	04090503          	lb	a0,64(s2)
    1edc:	0100                	addi	s0,sp,128
    1ede:	1a05                	addi	s4,s4,-31
    1ee0:	0306                	slli	t1,t1,0x1
    1ee2:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1ee6:	0501                	addi	a0,a0,0
    1ee8:	030a                	slli	t1,t1,0x2
    1eea:	097d                	addi	s2,s2,31
    1eec:	0006                	c.slli	zero,0x1
    1eee:	0501                	addi	a0,a0,0
    1ef0:	0605                	addi	a2,a2,1
    1ef2:	0c090303          	lb	t1,192(s2)
    1ef6:	0100                	addi	s0,sp,128
    1ef8:	1805                	addi	a6,a6,-31
    1efa:	0306                	slli	t1,t1,0x1
    1efc:	0901                	addi	s2,s2,0
    1efe:	0002                	c.slli64	zero
    1f00:	0501                	addi	a0,a0,0
    1f02:	0014                	0x14
    1f04:	0402                	c.slli64	s0
    1f06:	0601                	addi	a2,a2,0
    1f08:	08097f03          	0x8097f03
    1f0c:	0100                	addi	s0,sp,128
    1f0e:	0505                	addi	a0,a0,1
    1f10:	0200                	addi	s0,sp,256
    1f12:	0104                	addi	s1,sp,128
    1f14:	0306                	slli	t1,t1,0x1
    1f16:	0900                	addi	s0,sp,144
    1f18:	0000                	unimp
    1f1a:	0601                	addi	a2,a2,0
    1f1c:	04090603          	lb	a2,64(s2)
    1f20:	0100                	addi	s0,sp,128
    1f22:	0a05                	addi	s4,s4,1
    1f24:	0306                	slli	t1,t1,0x1
    1f26:	0900                	addi	s0,sp,144
    1f28:	0000                	unimp
    1f2a:	0501                	addi	a0,a0,0
    1f2c:	0605                	addi	a2,a2,1
    1f2e:	0c090403          	lb	s0,192(s2)
    1f32:	0100                	addi	s0,sp,128
    1f34:	1a05                	addi	s4,s4,-31
    1f36:	0306                	slli	t1,t1,0x1
    1f38:	0900                	addi	s0,sp,144
    1f3a:	0006                	c.slli	zero,0x1
    1f3c:	0501                	addi	a0,a0,0
    1f3e:	0318                	addi	a4,sp,384
    1f40:	0901                	addi	s2,s2,0
    1f42:	0002                	c.slli64	zero
    1f44:	0501                	addi	a0,a0,0
    1f46:	0014                	0x14
    1f48:	0402                	c.slli64	s0
    1f4a:	0601                	addi	a2,a2,0
    1f4c:	08097f03          	0x8097f03
    1f50:	0100                	addi	s0,sp,128
    1f52:	0505                	addi	a0,a0,1
    1f54:	0200                	addi	s0,sp,256
    1f56:	0104                	addi	s1,sp,128
    1f58:	0306                	slli	t1,t1,0x1
    1f5a:	0900                	addi	s0,sp,144
    1f5c:	0000                	unimp
    1f5e:	0601                	addi	a2,a2,0
    1f60:	04090503          	lb	a0,64(s2)
    1f64:	0100                	addi	s0,sp,128
    1f66:	0a05                	addi	s4,s4,1
    1f68:	0306                	slli	t1,t1,0x1
    1f6a:	0900                	addi	s0,sp,144
    1f6c:	0000                	unimp
    1f6e:	0501                	addi	a0,a0,0
    1f70:	0605                	addi	a2,a2,1
    1f72:	0c090303          	lb	t1,192(s2)
    1f76:	0100                	addi	s0,sp,128
    1f78:	0b05                	addi	s6,s6,1
    1f7a:	0306                	slli	t1,t1,0x1
    1f7c:	0900                	addi	s0,sp,144
    1f7e:	0002                	c.slli64	zero
    1f80:	0501                	addi	a0,a0,0
    1f82:	0318                	addi	a4,sp,384
    1f84:	0900                	addi	s0,sp,144
    1f86:	0002                	c.slli64	zero
    1f88:	0501                	addi	a0,a0,0
    1f8a:	0010                	0x10
    1f8c:	0402                	c.slli64	s0
    1f8e:	0601                	addi	a2,a2,0
    1f90:	04090003          	lb	zero,64(s2)
    1f94:	0100                	addi	s0,sp,128
    1f96:	0505                	addi	a0,a0,1
    1f98:	0200                	addi	s0,sp,256
    1f9a:	0104                	addi	s1,sp,128
    1f9c:	0306                	slli	t1,t1,0x1
    1f9e:	0900                	addi	s0,sp,144
    1fa0:	0000                	unimp
    1fa2:	0601                	addi	a2,a2,0
    1fa4:	04090603          	lb	a2,64(s2)
    1fa8:	0100                	addi	s0,sp,128
    1faa:	0a05                	addi	s4,s4,1
    1fac:	0306                	slli	t1,t1,0x1
    1fae:	0900                	addi	s0,sp,144
    1fb0:	0000                	unimp
    1fb2:	0501                	addi	a0,a0,0
    1fb4:	0605                	addi	a2,a2,1
    1fb6:	08090403          	lb	s0,128(s2)
    1fba:	0100                	addi	s0,sp,128
    1fbc:	1a05                	addi	s4,s4,-31
    1fbe:	0306                	slli	t1,t1,0x1
    1fc0:	0900                	addi	s0,sp,144
    1fc2:	0000                	unimp
    1fc4:	0501                	addi	a0,a0,0
    1fc6:	0318                	addi	a4,sp,384
    1fc8:	0901                	addi	s2,s2,0
    1fca:	000a                	c.slli	zero,0x2
    1fcc:	0501                	addi	a0,a0,0
    1fce:	0014                	0x14
    1fd0:	0402                	c.slli64	s0
    1fd2:	0601                	addi	a2,a2,0
    1fd4:	08097f03          	0x8097f03
    1fd8:	0100                	addi	s0,sp,128
    1fda:	0505                	addi	a0,a0,1
    1fdc:	0200                	addi	s0,sp,256
    1fde:	0104                	addi	s1,sp,128
    1fe0:	0306                	slli	t1,t1,0x1
    1fe2:	0900                	addi	s0,sp,144
    1fe4:	0002                	c.slli64	zero
    1fe6:	0501                	addi	a0,a0,0
    1fe8:	031a                	slli	t1,t1,0x6
    1fea:	0905                	addi	s2,s2,1
    1fec:	0004                	0x4
    1fee:	0501                	addi	a0,a0,0
    1ff0:	0318                	addi	a4,sp,384
    1ff2:	0901                	addi	s2,s2,0
    1ff4:	0004                	0x4
    1ff6:	0501                	addi	a0,a0,0
    1ff8:	031a                	slli	t1,t1,0x6
    1ffa:	097f                	0x97f
    1ffc:	0008                	0x8
    1ffe:	0501                	addi	a0,a0,0
    2000:	0014                	0x14
    2002:	0402                	c.slli64	s0
    2004:	0601                	addi	a2,a2,0
    2006:	08090003          	lb	zero,128(s2)
    200a:	0100                	addi	s0,sp,128
    200c:	0505                	addi	a0,a0,1
    200e:	0200                	addi	s0,sp,256
    2010:	0104                	addi	s1,sp,128
    2012:	0306                	slli	t1,t1,0x1
    2014:	0900                	addi	s0,sp,144
    2016:	0000                	unimp
    2018:	0601                	addi	a2,a2,0
    201a:	04090603          	lb	a2,64(s2)
    201e:	0100                	addi	s0,sp,128
    2020:	0105                	addi	sp,sp,1
    2022:	00090103          	lb	sp,0(s2)
    2026:	0100                	addi	s0,sp,128
    2028:	0e05                	addi	t3,t3,1
    202a:	0306                	slli	t1,t1,0x1
    202c:	0900                	addi	s0,sp,144
    202e:	0000                	unimp
    2030:	0501                	addi	a0,a0,0
    2032:	0605                	addi	a2,a2,1
    2034:	0c090103          	lb	sp,192(s2)
    2038:	0100                	addi	s0,sp,128
    203a:	0105                	addi	sp,sp,1
    203c:	0306                	slli	t1,t1,0x1
    203e:	0901                	addi	s2,s2,0
    2040:	0000                	unimp
    2042:	0501                	addi	a0,a0,0
    2044:	0009                	c.nop	2
    2046:	0402                	c.slli64	s0
    2048:	bd030603          	lb	a2,-1072(t1)
    204c:	097f                	0x97f
    204e:	0046                	c.slli	zero,0x11
    2050:	0501                	addi	a0,a0,0
    2052:	0012                	c.slli	zero,0x4
    2054:	0402                	c.slli64	s0
    2056:	00030603          	lb	a2,0(t1)
    205a:	0009                	c.nop	2
    205c:	0100                	addi	s0,sp,128
    205e:	1705                	addi	a4,a4,-31
    2060:	0200                	addi	s0,sp,256
    2062:	0304                	addi	s1,sp,384
    2064:	0306                	slli	t1,t1,0x1
    2066:	097f                	0x97f
    2068:	000a                	c.slli	zero,0x2
    206a:	0501                	addi	a0,a0,0
    206c:	0009                	c.nop	2
    206e:	0402                	c.slli64	s0
    2070:	09070303          	lb	t1,144(a4) # 5090 <_stack_len+0x1090>
    2074:	0004                	0x4
    2076:	0501                	addi	a0,a0,0
    2078:	000e                	c.slli	zero,0x3
    207a:	0402                	c.slli64	s0
    207c:	00030603          	lb	a2,0(t1)
    2080:	0409                	addi	s0,s0,2
    2082:	0100                	addi	s0,sp,128
    2084:	0905                	addi	s2,s2,1
    2086:	0200                	addi	s0,sp,256
    2088:	0304                	addi	s1,sp,384
    208a:	0306                	slli	t1,t1,0x1
    208c:	0901                	addi	s2,s2,0
    208e:	000a                	c.slli	zero,0x2
    2090:	0501                	addi	a0,a0,0
    2092:	000e                	c.slli	zero,0x3
    2094:	0402                	c.slli64	s0
    2096:	00030603          	lb	a2,0(t1)
    209a:	0009                	c.nop	2
    209c:	0100                	addi	s0,sp,128
    209e:	1905                	addi	s2,s2,-31
    20a0:	0200                	addi	s0,sp,256
    20a2:	0304                	addi	s1,sp,384
    20a4:	0306                	slli	t1,t1,0x1
    20a6:	097e                	slli	s2,s2,0x1f
    20a8:	000a                	c.slli	zero,0x2
    20aa:	0501                	addi	a0,a0,0
    20ac:	0009                	c.nop	2
    20ae:	0402                	c.slli64	s0
    20b0:	09080303          	lb	t1,144(a6)
    20b4:	0004                	0x4
    20b6:	0501                	addi	a0,a0,0
    20b8:	0402001b          	0x402001b
    20bc:	00030603          	lb	a2,0(t1)
    20c0:	0409                	addi	s0,s0,2
    20c2:	0100                	addi	s0,sp,128
    20c4:	1805                	addi	a6,a6,-31
    20c6:	0200                	addi	s0,sp,256
    20c8:	0304                	addi	s1,sp,384
    20ca:	04090003          	lb	zero,64(s2)
    20ce:	0100                	addi	s0,sp,128
    20d0:	1b05                	addi	s6,s6,-31
    20d2:	0200                	addi	s0,sp,256
    20d4:	0304                	addi	s1,sp,384
    20d6:	04090003          	lb	zero,64(s2)
    20da:	0100                	addi	s0,sp,128
    20dc:	1805                	addi	a6,a6,-31
    20de:	0200                	addi	s0,sp,256
    20e0:	0304                	addi	s1,sp,384
    20e2:	02090003          	lb	zero,32(s2)
    20e6:	0100                	addi	s0,sp,128
    20e8:	1705                	addi	a4,a4,-31
    20ea:	0200                	addi	s0,sp,256
    20ec:	0304                	addi	s1,sp,384
    20ee:	02097f03          	0x2097f03
    20f2:	0100                	addi	s0,sp,128
    20f4:	1805                	addi	a6,a6,-31
    20f6:	0200                	addi	s0,sp,256
    20f8:	0304                	addi	s1,sp,384
    20fa:	02090103          	lb	sp,32(s2)
    20fe:	0100                	addi	s0,sp,128
    2100:	1705                	addi	a4,a4,-31
    2102:	0200                	addi	s0,sp,256
    2104:	0304                	addi	s1,sp,384
    2106:	0306                	slli	t1,t1,0x1
    2108:	097f                	0x97f
    210a:	0002                	c.slli64	zero
    210c:	0501                	addi	a0,a0,0
    210e:	0009                	c.nop	2
    2110:	0402                	c.slli64	s0
    2112:	09060303          	lb	t1,144(a2)
    2116:	0002                	c.slli64	zero
    2118:	0501                	addi	a0,a0,0
    211a:	0018                	0x18
    211c:	0402                	c.slli64	s0
    211e:	00030603          	lb	a2,0(t1)
    2122:	0009                	c.nop	2
    2124:	0100                	addi	s0,sp,128
    2126:	1b05                	addi	s6,s6,-31
    2128:	0200                	addi	s0,sp,256
    212a:	0304                	addi	s1,sp,384
    212c:	0306                	slli	t1,t1,0x1
    212e:	097f                	0x97f
    2130:	000a                	c.slli	zero,0x2
    2132:	0501                	addi	a0,a0,0
    2134:	0009                	c.nop	2
    2136:	0402                	c.slli64	s0
    2138:	09090303          	lb	t1,144(s2)
    213c:	0006                	c.slli	zero,0x1
    213e:	0501                	addi	a0,a0,0
    2140:	001c                	0x1c
    2142:	0402                	c.slli64	s0
    2144:	00030603          	lb	a2,0(t1)
    2148:	0009                	c.nop	2
    214a:	0100                	addi	s0,sp,128
    214c:	1805                	addi	a6,a6,-31
    214e:	0200                	addi	s0,sp,256
    2150:	0304                	addi	s1,sp,384
    2152:	02090003          	lb	zero,32(s2)
    2156:	0100                	addi	s0,sp,128
    2158:	1f05                	addi	t5,t5,-31
    215a:	0200                	addi	s0,sp,256
    215c:	0304                	addi	s1,sp,384
    215e:	0306                	slli	t1,t1,0x1
    2160:	097f                	0x97f
    2162:	0008                	0x8
    2164:	0501                	addi	a0,a0,0
    2166:	0009                	c.nop	2
    2168:	0402                	c.slli64	s0
    216a:	090b0303          	lb	t1,144(s6)
    216e:	0006                	c.slli	zero,0x1
    2170:	0501                	addi	a0,a0,0
    2172:	001c                	0x1c
    2174:	0402                	c.slli64	s0
    2176:	00030603          	lb	a2,0(t1)
    217a:	0409                	addi	s0,s0,2
    217c:	0100                	addi	s0,sp,128
    217e:	1805                	addi	a6,a6,-31
    2180:	0200                	addi	s0,sp,256
    2182:	0304                	addi	s1,sp,384
    2184:	08090003          	lb	zero,128(s2)
    2188:	0100                	addi	s0,sp,128
    218a:	1f05                	addi	t5,t5,-31
    218c:	0200                	addi	s0,sp,256
    218e:	0304                	addi	s1,sp,384
    2190:	02097f03          	0x2097f03
    2194:	0100                	addi	s0,sp,128
    2196:	1805                	addi	a6,a6,-31
    2198:	0200                	addi	s0,sp,256
    219a:	0304                	addi	s1,sp,384
    219c:	02090103          	lb	sp,32(s2)
    21a0:	0100                	addi	s0,sp,128
    21a2:	1f05                	addi	t5,t5,-31
    21a4:	0200                	addi	s0,sp,256
    21a6:	0304                	addi	s1,sp,384
    21a8:	0306                	slli	t1,t1,0x1
    21aa:	097f                	0x97f
    21ac:	0002                	c.slli64	zero
    21ae:	0501                	addi	a0,a0,0
    21b0:	0009                	c.nop	2
    21b2:	0402                	c.slli64	s0
    21b4:	09090303          	lb	t1,144(s2)
    21b8:	0002                	c.slli64	zero
    21ba:	0501                	addi	a0,a0,0
    21bc:	0016                	c.slli	zero,0x5
    21be:	0402                	c.slli64	s0
    21c0:	00030603          	lb	a2,0(t1)
    21c4:	0009                	c.nop	2
    21c6:	0100                	addi	s0,sp,128
    21c8:	1d05                	addi	s10,s10,-31
    21ca:	0200                	addi	s0,sp,256
    21cc:	0304                	addi	s1,sp,384
    21ce:	02097f03          	0x2097f03
    21d2:	0100                	addi	s0,sp,128
    21d4:	1605                	addi	a2,a2,-31
    21d6:	0200                	addi	s0,sp,256
    21d8:	0304                	addi	s1,sp,384
    21da:	04090103          	lb	sp,64(s2)
    21de:	0100                	addi	s0,sp,128
    21e0:	0f05                	addi	t5,t5,1
    21e2:	0200                	addi	s0,sp,256
    21e4:	0304                	addi	s1,sp,384
    21e6:	04090003          	lb	zero,64(s2)
    21ea:	0100                	addi	s0,sp,128
    21ec:	1d05                	addi	s10,s10,-31
    21ee:	0200                	addi	s0,sp,256
    21f0:	0304                	addi	s1,sp,384
    21f2:	0306                	slli	t1,t1,0x1
    21f4:	097f                	0x97f
    21f6:	0004                	0x4
    21f8:	0501                	addi	a0,a0,0
    21fa:	0009                	c.nop	2
    21fc:	0402                	c.slli64	s0
    21fe:	090b0303          	lb	t1,144(s6)
    2202:	0002                	c.slli64	zero
    2204:	0501                	addi	a0,a0,0
    2206:	001c                	0x1c
    2208:	0402                	c.slli64	s0
    220a:	00030603          	lb	a2,0(t1)
    220e:	0009                	c.nop	2
    2210:	0100                	addi	s0,sp,128
    2212:	1805                	addi	a6,a6,-31
    2214:	0200                	addi	s0,sp,256
    2216:	0304                	addi	s1,sp,384
    2218:	04090003          	lb	zero,64(s2)
    221c:	0100                	addi	s0,sp,128
    221e:	1f05                	addi	t5,t5,-31
    2220:	0200                	addi	s0,sp,256
    2222:	0304                	addi	s1,sp,384
    2224:	0306                	slli	t1,t1,0x1
    2226:	097f                	0x97f
    2228:	0008                	0x8
    222a:	0501                	addi	a0,a0,0
    222c:	0009                	c.nop	2
    222e:	0402                	c.slli64	s0
    2230:	09060303          	lb	t1,144(a2)
    2234:	0004                	0x4
    2236:	0501                	addi	a0,a0,0
    2238:	0018                	0x18
    223a:	0402                	c.slli64	s0
    223c:	00030603          	lb	a2,0(t1)
    2240:	0409                	addi	s0,s0,2
    2242:	0100                	addi	s0,sp,128
    2244:	1f05                	addi	t5,t5,-31
    2246:	0200                	addi	s0,sp,256
    2248:	0304                	addi	s1,sp,384
    224a:	04090003          	lb	zero,64(s2)
    224e:	0100                	addi	s0,sp,128
    2250:	1805                	addi	a6,a6,-31
    2252:	0200                	addi	s0,sp,256
    2254:	0304                	addi	s1,sp,384
    2256:	04090003          	lb	zero,64(s2)
    225a:	0100                	addi	s0,sp,128
    225c:	2105                	jal	267c <_min_stack+0x67c>
    225e:	0200                	addi	s0,sp,256
    2260:	0304                	addi	s1,sp,384
    2262:	02097f03          	0x2097f03
    2266:	0100                	addi	s0,sp,128
    2268:	1805                	addi	a6,a6,-31
    226a:	0200                	addi	s0,sp,256
    226c:	0304                	addi	s1,sp,384
    226e:	02090103          	lb	sp,32(s2)
    2272:	0100                	addi	s0,sp,128
    2274:	2105                	jal	2694 <_min_stack+0x694>
    2276:	0200                	addi	s0,sp,256
    2278:	0304                	addi	s1,sp,384
    227a:	0306                	slli	t1,t1,0x1
    227c:	097f                	0x97f
    227e:	0002                	c.slli64	zero
    2280:	0501                	addi	a0,a0,0
    2282:	090c034b          	fnmsub.s	ft6,fs8,fa6,ft1,rne
    2286:	0002                	c.slli64	zero
    2288:	0501                	addi	a0,a0,0
    228a:	0301                	addi	t1,t1,0
    228c:	0901                	addi	s2,s2,0
    228e:	0000                	unimp
    2290:	0501                	addi	a0,a0,0
    2292:	7f03064b          	fnmsub.q	fa2,ft6,fa6,fa5,rne
    2296:	0009                	c.nop	2
    2298:	0100                	addi	s0,sp,128
    229a:	0e05                	addi	t3,t3,1
    229c:	02090103          	lb	sp,32(s2)
    22a0:	0100                	addi	s0,sp,128
    22a2:	4b05                	li	s6,1
    22a4:	08097f03          	0x8097f03
    22a8:	0100                	addi	s0,sp,128
    22aa:	0905                	addi	s2,s2,1
    22ac:	0e090503          	lb	a0,224(s2)
    22b0:	0100                	addi	s0,sp,128
    22b2:	0e05                	addi	t3,t3,1
    22b4:	0c097c03          	0xc097c03
    22b8:	0100                	addi	s0,sp,128
    22ba:	0905                	addi	s2,s2,1
    22bc:	08090403          	lb	s0,128(s2)
    22c0:	0100                	addi	s0,sp,128
    22c2:	4b05                	li	s6,1
    22c4:	02097b03          	0x2097b03
    22c8:	0100                	addi	s0,sp,128
    22ca:	06090003          	lb	zero,96(s2)
    22ce:	0100                	addi	s0,sp,128
    22d0:	0e05                	addi	t3,t3,1
    22d2:	04090103          	lb	sp,64(s2)
    22d6:	0100                	addi	s0,sp,128
    22d8:	0505                	addi	a0,a0,1
    22da:	0306                	slli	t1,t1,0x1
    22dc:	0901                	addi	s2,s2,0
    22de:	0004                	0x4
    22e0:	0301                	addi	t1,t1,0
    22e2:	0901                	addi	s2,s2,0
    22e4:	0000                	unimp
    22e6:	0301                	addi	t1,t1,0
    22e8:	0902                	c.slli64	s2
    22ea:	0000                	unimp
    22ec:	0501                	addi	a0,a0,0
    22ee:	0609                	addi	a2,a2,2
    22f0:	00090003          	lb	zero,0(s2)
    22f4:	0100                	addi	s0,sp,128
    22f6:	0505                	addi	a0,a0,1
    22f8:	0306                	slli	t1,t1,0x1
    22fa:	0901                	addi	s2,s2,0
    22fc:	0002                	c.slli64	zero
    22fe:	0301                	addi	t1,t1,0
    2300:	0901                	addi	s2,s2,0
    2302:	0000                	unimp
    2304:	0301                	addi	t1,t1,0
    2306:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    230a:	0501                	addi	a0,a0,0
    230c:	060c                	addi	a1,sp,768
    230e:	00090003          	lb	zero,0(s2)
    2312:	0100                	addi	s0,sp,128
    2314:	0505                	addi	a0,a0,1
    2316:	0306                	slli	t1,t1,0x1
    2318:	0904                	addi	s1,sp,144
    231a:	0012                	c.slli	zero,0x4
    231c:	0501                	addi	a0,a0,0
    231e:	0310                	addi	a2,sp,384
    2320:	0900                	addi	s0,sp,144
    2322:	0000                	unimp
    2324:	0501                	addi	a0,a0,0
    2326:	060c                	addi	a1,sp,768
    2328:	00097c03          	0x97c03
    232c:	0100                	addi	s0,sp,128
    232e:	0505                	addi	a0,a0,1
    2330:	02090403          	lb	s0,32(s2)
    2334:	0100                	addi	s0,sp,128
    2336:	0905                	addi	s2,s2,1
    2338:	0200                	addi	s0,sp,256
    233a:	0304                	addi	s1,sp,384
    233c:	0306                	slli	t1,t1,0x1
    233e:	0901                	addi	s2,s2,0
    2340:	0004                	0x4
    2342:	0501                	addi	a0,a0,0
    2344:	0024                	addi	s1,sp,8
    2346:	0402                	c.slli64	s0
    2348:	00030603          	lb	a2,0(t1)
    234c:	0409                	addi	s0,s0,2
    234e:	0100                	addi	s0,sp,128
    2350:	1b05                	addi	s6,s6,-31
    2352:	0200                	addi	s0,sp,256
    2354:	0304                	addi	s1,sp,384
    2356:	04090003          	lb	zero,64(s2)
    235a:	0100                	addi	s0,sp,128
    235c:	1105                	addi	sp,sp,-31
    235e:	0200                	addi	s0,sp,256
    2360:	0304                	addi	s1,sp,384
    2362:	08090003          	lb	zero,128(s2)
    2366:	0100                	addi	s0,sp,128
    2368:	1805                	addi	a6,a6,-31
    236a:	0200                	addi	s0,sp,256
    236c:	0304                	addi	s1,sp,384
    236e:	0306                	slli	t1,t1,0x1
    2370:	097f                	0x97f
    2372:	0002                	c.slli64	zero
    2374:	0501                	addi	a0,a0,0
    2376:	0010                	0x10
    2378:	0402                	c.slli64	s0
    237a:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    237e:	0000                	unimp
    2380:	0501                	addi	a0,a0,0
    2382:	0005                	c.nop	1
    2384:	0402                	c.slli64	s0
    2386:	00030603          	lb	a2,0(t1)
    238a:	0009                	c.nop	2
    238c:	0100                	addi	s0,sp,128
    238e:	0306                	slli	t1,t1,0x1
    2390:	0906                	slli	s2,s2,0x1
    2392:	0004                	0x4
    2394:	0501                	addi	a0,a0,0
    2396:	060a                	slli	a2,a2,0x2
    2398:	00090003          	lb	zero,0(s2)
    239c:	0100                	addi	s0,sp,128
    239e:	0505                	addi	a0,a0,1
    23a0:	0306                	slli	t1,t1,0x1
    23a2:	0902                	c.slli64	s2
    23a4:	0012                	c.slli	zero,0x4
    23a6:	0501                	addi	a0,a0,0
    23a8:	061a                	slli	a2,a2,0x6
    23aa:	00090003          	lb	zero,0(s2)
    23ae:	0100                	addi	s0,sp,128
    23b0:	1405                	addi	s0,s0,-31
    23b2:	0200                	addi	s0,sp,256
    23b4:	0104                	addi	s1,sp,128
    23b6:	0306                	slli	t1,t1,0x1
    23b8:	0900                	addi	s0,sp,144
    23ba:	0008                	0x8
    23bc:	0501                	addi	a0,a0,0
    23be:	0005                	c.nop	1
    23c0:	0402                	c.slli64	s0
    23c2:	0601                	addi	a2,a2,0
    23c4:	00090003          	lb	zero,0(s2)
    23c8:	0100                	addi	s0,sp,128
    23ca:	0306                	slli	t1,t1,0x1
    23cc:	00040907          	0x40907
    23d0:	0501                	addi	a0,a0,0
    23d2:	0301                	addi	t1,t1,0
    23d4:	0901                	addi	s2,s2,0
    23d6:	0000                	unimp
    23d8:	0601                	addi	a2,a2,0
    23da:	00090203          	lb	tp,0(s2)
    23de:	0100                	addi	s0,sp,128
    23e0:	0e05                	addi	t3,t3,1
    23e2:	04097e03          	0x4097e03
    23e6:	0100                	addi	s0,sp,128
    23e8:	0505                	addi	a0,a0,1
    23ea:	0306                	slli	t1,t1,0x1
    23ec:	0901                	addi	s2,s2,0
    23ee:	000c                	0xc
    23f0:	0501                	addi	a0,a0,0
    23f2:	0601                	addi	a2,a2,0
    23f4:	00090103          	lb	sp,0(s2)
    23f8:	0100                	addi	s0,sp,128
    23fa:	0905                	addi	s2,s2,1
    23fc:	0200                	addi	s0,sp,256
    23fe:	0304                	addi	s1,sp,384
    2400:	0306                	slli	t1,t1,0x1
    2402:	000e0977          	0xe0977
    2406:	0501                	addi	a0,a0,0
    2408:	0019                	c.nop	6
    240a:	0402                	c.slli64	s0
    240c:	00030603          	lb	a2,0(t1)
    2410:	0009                	c.nop	2
    2412:	0100                	addi	s0,sp,128
    2414:	1f05                	addi	t5,t5,-31
    2416:	0200                	addi	s0,sp,256
    2418:	0304                	addi	s1,sp,384
    241a:	08097f03          	0x8097f03
    241e:	0100                	addi	s0,sp,128
    2420:	1505                	addi	a0,a0,-31
    2422:	0200                	addi	s0,sp,256
    2424:	0304                	addi	s1,sp,384
    2426:	04090103          	lb	sp,64(s2)
    242a:	0100                	addi	s0,sp,128
    242c:	1f05                	addi	t5,t5,-31
    242e:	0200                	addi	s0,sp,256
    2430:	0304                	addi	s1,sp,384
    2432:	0306                	slli	t1,t1,0x1
    2434:	097f                	0x97f
    2436:	0004                	0x4
    2438:	0501                	addi	a0,a0,0
    243a:	036c                	addi	a1,sp,396
    243c:	090d                	addi	s2,s2,3
    243e:	0002                	c.slli64	zero
    2440:	0501                	addi	a0,a0,0
    2442:	0305                	addi	t1,t1,1
    2444:	0901                	addi	s2,s2,0
    2446:	0000                	unimp
    2448:	0501                	addi	a0,a0,0
    244a:	066c                	addi	a1,sp,780
    244c:	00097f03          	0x97f03
    2450:	0100                	addi	s0,sp,128
    2452:	1e05                	addi	t3,t3,-31
    2454:	08091103          	lh	sp,128(s2)
    2458:	0100                	addi	s0,sp,128
    245a:	6c05                	lui	s8,0x1
    245c:	06096f03          	0x6096f03
    2460:	0100                	addi	s0,sp,128
    2462:	1205                	addi	tp,tp,-31
    2464:	04090103          	lb	sp,64(s2)
    2468:	0100                	addi	s0,sp,128
    246a:	6c05                	lui	s8,0x1
    246c:	04097f03          	0x4097f03
    2470:	0100                	addi	s0,sp,128
    2472:	1205                	addi	tp,tp,-31
    2474:	02090103          	lb	sp,32(s2)
    2478:	0100                	addi	s0,sp,128
    247a:	6c05                	lui	s8,0x1
    247c:	0c097f03          	0xc097f03
    2480:	0100                	addi	s0,sp,128
    2482:	0905                	addi	s2,s2,1
    2484:	08090a03          	lb	s4,128(s2)
    2488:	0100                	addi	s0,sp,128
    248a:	1205                	addi	tp,tp,-31
    248c:	02097703          	0x2097703
    2490:	0100                	addi	s0,sp,128
    2492:	0505                	addi	a0,a0,1
    2494:	0306                	slli	t1,t1,0x1
    2496:	0901                	addi	s2,s2,0
    2498:	0004                	0x4
    249a:	0301                	addi	t1,t1,0
    249c:	0901                	addi	s2,s2,0
    249e:	0000                	unimp
    24a0:	0301                	addi	t1,t1,0
    24a2:	0901                	addi	s2,s2,0
    24a4:	0000                	unimp
    24a6:	0301                	addi	t1,t1,0
    24a8:	0901                	addi	s2,s2,0
    24aa:	0000                	unimp
    24ac:	0301                	addi	t1,t1,0
    24ae:	0901                	addi	s2,s2,0
    24b0:	0000                	unimp
    24b2:	0301                	addi	t1,t1,0
    24b4:	0901                	addi	s2,s2,0
    24b6:	0000                	unimp
    24b8:	0301                	addi	t1,t1,0
    24ba:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    24be:	0501                	addi	a0,a0,0
    24c0:	0609                	addi	a2,a2,2
    24c2:	00090003          	lb	zero,0(s2)
    24c6:	0100                	addi	s0,sp,128
    24c8:	6c05                	lui	s8,0x1
    24ca:	04097603          	0x4097603
    24ce:	0100                	addi	s0,sp,128
    24d0:	0905                	addi	s2,s2,1
    24d2:	02090a03          	lb	s4,32(s2)
    24d6:	0100                	addi	s0,sp,128
    24d8:	6c05                	lui	s8,0x1
    24da:	02097603          	0x2097603
    24de:	0100                	addi	s0,sp,128
    24e0:	08090003          	lb	zero,128(s2)
    24e4:	0100                	addi	s0,sp,128
    24e6:	0a05                	addi	s4,s4,1
    24e8:	02090e03          	lb	t3,32(s2)
    24ec:	0100                	addi	s0,sp,128
    24ee:	0905                	addi	s2,s2,1
    24f0:	04097c03          	0x4097c03
    24f4:	0100                	addi	s0,sp,128
    24f6:	0505                	addi	a0,a0,1
    24f8:	0306                	slli	t1,t1,0x1
    24fa:	0904                	addi	s1,sp,144
    24fc:	0004                	0x4
    24fe:	0501                	addi	a0,a0,0
    2500:	060a                	slli	a2,a2,0x2
    2502:	00090003          	lb	zero,0(s2)
    2506:	0100                	addi	s0,sp,128
    2508:	0505                	addi	a0,a0,1
    250a:	0306                	slli	t1,t1,0x1
    250c:	00120903          	lb	s2,1(tp) # 1 <__DYNAMIC+0x1>
    2510:	0501                	addi	a0,a0,0
    2512:	0003060b          	0x3060b
    2516:	0409                	addi	s0,s0,2
    2518:	0100                	addi	s0,sp,128
    251a:	1405                	addi	s0,s0,-31
    251c:	0200                	addi	s0,sp,256
    251e:	0104                	addi	s1,sp,128
    2520:	0306                	slli	t1,t1,0x1
    2522:	0900                	addi	s0,sp,144
    2524:	0002                	c.slli64	zero
    2526:	0501                	addi	a0,a0,0
    2528:	0005                	c.nop	1
    252a:	0402                	c.slli64	s0
    252c:	0601                	addi	a2,a2,0
    252e:	00090003          	lb	zero,0(s2)
    2532:	0100                	addi	s0,sp,128
    2534:	1605                	addi	a2,a2,-31
    2536:	04090603          	lb	a2,64(s2)
    253a:	0100                	addi	s0,sp,128
    253c:	0c05                	addi	s8,s8,1
    253e:	06097f03          	0x6097f03
    2542:	0100                	addi	s0,sp,128
    2544:	1105                	addi	sp,sp,-31
    2546:	0200                	addi	s0,sp,256
    2548:	0104                	addi	s1,sp,128
    254a:	0306                	slli	t1,t1,0x1
    254c:	0900                	addi	s0,sp,144
    254e:	0002                	c.slli64	zero
    2550:	0501                	addi	a0,a0,0
    2552:	0005                	c.nop	1
    2554:	0402                	c.slli64	s0
    2556:	0601                	addi	a2,a2,0
    2558:	00090003          	lb	zero,0(s2)
    255c:	0100                	addi	s0,sp,128
    255e:	0306                	slli	t1,t1,0x1
    2560:	0908                	addi	a0,sp,144
    2562:	0004                	0x4
    2564:	0501                	addi	a0,a0,0
    2566:	0609                	addi	a2,a2,2
    2568:	00090003          	lb	zero,0(s2)
    256c:	0100                	addi	s0,sp,128
    256e:	0505                	addi	a0,a0,1
    2570:	0306                	slli	t1,t1,0x1
    2572:	0904                	addi	s1,sp,144
    2574:	000c                	0xc
    2576:	0501                	addi	a0,a0,0
    2578:	060a                	slli	a2,a2,0x2
    257a:	00090003          	lb	zero,0(s2)
    257e:	0100                	addi	s0,sp,128
    2580:	0505                	addi	a0,a0,1
    2582:	0306                	slli	t1,t1,0x1
    2584:	0901                	addi	s2,s2,0
    2586:	000c                	0xc
    2588:	0501                	addi	a0,a0,0
    258a:	0014                	0x14
    258c:	0402                	c.slli64	s0
    258e:	0301                	addi	t1,t1,0
    2590:	0900                	addi	s0,sp,144
    2592:	0002                	c.slli64	zero
    2594:	0501                	addi	a0,a0,0
    2596:	0005                	c.nop	1
    2598:	0402                	c.slli64	s0
    259a:	0601                	addi	a2,a2,0
    259c:	00090003          	lb	zero,0(s2)
    25a0:	0100                	addi	s0,sp,128
    25a2:	0306                	slli	t1,t1,0x1
    25a4:	0905                	addi	s2,s2,1
    25a6:	0004                	0x4
    25a8:	0301                	addi	t1,t1,0
    25aa:	0901                	addi	s2,s2,0
    25ac:	0000                	unimp
    25ae:	0501                	addi	a0,a0,0
    25b0:	0601                	addi	a2,a2,0
    25b2:	00090203          	lb	tp,0(s2)
    25b6:	0100                	addi	s0,sp,128
    25b8:	1205                	addi	tp,tp,-31
    25ba:	04097e03          	0x4097e03
    25be:	0100                	addi	s0,sp,128
    25c0:	0505                	addi	a0,a0,1
    25c2:	0306                	slli	t1,t1,0x1
    25c4:	0901                	addi	s2,s2,0
    25c6:	000c                	0xc
    25c8:	0501                	addi	a0,a0,0
    25ca:	0601                	addi	a2,a2,0
    25cc:	00090103          	lb	sp,0(s2)
    25d0:	0100                	addi	s0,sp,128
    25d2:	0905                	addi	s2,s2,1
    25d4:	0200                	addi	s0,sp,256
    25d6:	0304                	addi	s1,sp,384
    25d8:	0306                	slli	t1,t1,0x1
    25da:	00140967          	jalr	s2,1(s0)
    25de:	0501                	addi	a0,a0,0
    25e0:	0019                	c.nop	6
    25e2:	0402                	c.slli64	s0
    25e4:	00030603          	lb	a2,0(t1)
    25e8:	0009                	c.nop	2
    25ea:	0100                	addi	s0,sp,128
    25ec:	2305                	jal	2b0c <_min_stack+0xb0c>
    25ee:	0200                	addi	s0,sp,256
    25f0:	0304                	addi	s1,sp,384
    25f2:	08097f03          	0x8097f03
    25f6:	0100                	addi	s0,sp,128
    25f8:	1505                	addi	a0,a0,-31
    25fa:	0200                	addi	s0,sp,256
    25fc:	0304                	addi	s1,sp,384
    25fe:	04090103          	lb	sp,64(s2)
    2602:	0100                	addi	s0,sp,128
    2604:	2305                	jal	2b24 <_min_stack+0xb24>
    2606:	0200                	addi	s0,sp,256
    2608:	0304                	addi	s1,sp,384
    260a:	0306                	slli	t1,t1,0x1
    260c:	097f                	0x97f
    260e:	0004                	0x4
    2610:	0501                	addi	a0,a0,0
    2612:	0309                	addi	t1,t1,2
    2614:	0906                	slli	s2,s2,0x1
    2616:	0002                	c.slli64	zero
    2618:	0501                	addi	a0,a0,0
    261a:	060e                	slli	a2,a2,0x3
    261c:	00090003          	lb	zero,0(s2)
    2620:	0100                	addi	s0,sp,128
    2622:	0b05                	addi	s6,s6,1
    2624:	02090003          	lb	zero,32(s2)
    2628:	0100                	addi	s0,sp,128
    262a:	0d05                	addi	s10,s10,1
    262c:	0306                	slli	t1,t1,0x1
    262e:	00040903          	lb	s2,0(s0)
    2632:	0501                	addi	a0,a0,0
    2634:	0619                	addi	a2,a2,6
    2636:	00090003          	lb	zero,0(s2)
    263a:	0100                	addi	s0,sp,128
    263c:	1305                	addi	t1,t1,-31
    263e:	04090003          	lb	zero,64(s2)
    2642:	0100                	addi	s0,sp,128
    2644:	1805                	addi	a6,a6,-31
    2646:	0200                	addi	s0,sp,256
    2648:	0204                	addi	s1,sp,256
    264a:	0306                	slli	t1,t1,0x1
    264c:	097c                	addi	a5,sp,156
    264e:	0002                	c.slli64	zero
    2650:	0501                	addi	a0,a0,0
    2652:	0009                	c.nop	2
    2654:	0402                	c.slli64	s0
    2656:	090e0303          	lb	t1,144(t3)
    265a:	0006                	c.slli	zero,0x1
    265c:	0501                	addi	a0,a0,0
    265e:	0019                	c.nop	6
    2660:	0402                	c.slli64	s0
    2662:	00030603          	lb	a2,0(t1)
    2666:	0009                	c.nop	2
    2668:	0100                	addi	s0,sp,128
    266a:	2305                	jal	2b8a <_min_stack+0xb8a>
    266c:	0200                	addi	s0,sp,256
    266e:	0304                	addi	s1,sp,384
    2670:	08097f03          	0x8097f03
    2674:	0100                	addi	s0,sp,128
    2676:	1505                	addi	a0,a0,-31
    2678:	0200                	addi	s0,sp,256
    267a:	0304                	addi	s1,sp,384
    267c:	04090103          	lb	sp,64(s2)
    2680:	0100                	addi	s0,sp,128
    2682:	2305                	jal	2ba2 <_min_stack+0xba2>
    2684:	0200                	addi	s0,sp,256
    2686:	0304                	addi	s1,sp,384
    2688:	0306                	slli	t1,t1,0x1
    268a:	097f                	0x97f
    268c:	0004                	0x4
    268e:	0901                	addi	s2,s2,0
    2690:	0002                	c.slli64	zero
    2692:	0100                	addi	s0,sp,128
    2694:	0501                	addi	a0,a0,0
    2696:	0205000b          	0x205000b
    269a:	0fd8                	addi	a4,sp,980
    269c:	0000                	unimp
    269e:	0104d403          	lhu	s0,16(s1)
    26a2:	0505                	addi	a0,a0,1
    26a4:	00090203          	lb	tp,0(s2)
    26a8:	0100                	addi	s0,sp,128
    26aa:	00090103          	lb	sp,0(s2)
    26ae:	0100                	addi	s0,sp,128
    26b0:	00090103          	lb	sp,0(s2)
    26b4:	0100                	addi	s0,sp,128
    26b6:	00090103          	lb	sp,0(s2)
    26ba:	0100                	addi	s0,sp,128
    26bc:	00090103          	lb	sp,0(s2)
    26c0:	0100                	addi	s0,sp,128
    26c2:	00090103          	lb	sp,0(s2)
    26c6:	0100                	addi	s0,sp,128
    26c8:	00090203          	lb	tp,0(s2)
    26cc:	0100                	addi	s0,sp,128
    26ce:	0b05                	addi	s6,s6,1
    26d0:	0306                	slli	t1,t1,0x1
    26d2:	00000977          	0x977
    26d6:	0501                	addi	a0,a0,0
    26d8:	0309                	addi	t1,t1,2
    26da:	0909                	addi	s2,s2,2
    26dc:	0004                	0x4
    26de:	0501                	addi	a0,a0,0
    26e0:	0977030b          	0x977030b
    26e4:	000e                	c.slli	zero,0x3
    26e6:	0501                	addi	a0,a0,0
    26e8:	0309                	addi	t1,t1,2
    26ea:	0909                	addi	s2,s2,2
    26ec:	0008                	0x8
    26ee:	0501                	addi	a0,a0,0
    26f0:	0605                	addi	a2,a2,1
    26f2:	02090103          	lb	sp,32(s2)
    26f6:	0100                	addi	s0,sp,128
    26f8:	00090103          	lb	sp,0(s2)
    26fc:	0100                	addi	s0,sp,128
    26fe:	00090103          	lb	sp,0(s2)
    2702:	0100                	addi	s0,sp,128
    2704:	00090103          	lb	sp,0(s2)
    2708:	0100                	addi	s0,sp,128
    270a:	00090103          	lb	sp,0(s2)
    270e:	0100                	addi	s0,sp,128
    2710:	00090103          	lb	sp,0(s2)
    2714:	0100                	addi	s0,sp,128
    2716:	00090103          	lb	sp,0(s2)
    271a:	0100                	addi	s0,sp,128
    271c:	00090b03          	lb	s6,0(s2)
    2720:	0100                	addi	s0,sp,128
    2722:	0c05                	addi	s8,s8,1
    2724:	0306                	slli	t1,t1,0x1
    2726:	0900                	addi	s0,sp,144
    2728:	0000                	unimp
    272a:	0501                	addi	a0,a0,0
    272c:	0605                	addi	a2,a2,1
    272e:	0c090403          	lb	s0,192(s2)
    2732:	0100                	addi	s0,sp,128
    2734:	1005                	c.nop	-31
    2736:	00090003          	lb	zero,0(s2)
    273a:	0100                	addi	s0,sp,128
    273c:	0c05                	addi	s8,s8,1
    273e:	0306                	slli	t1,t1,0x1
    2740:	097c                	addi	a5,sp,156
    2742:	0000                	unimp
    2744:	0501                	addi	a0,a0,0
    2746:	0305                	addi	t1,t1,1
    2748:	0904                	addi	s1,sp,144
    274a:	0002                	c.slli64	zero
    274c:	0501                	addi	a0,a0,0
    274e:	0009                	c.nop	2
    2750:	0402                	c.slli64	s0
    2752:	02030603          	lb	a2,32(t1)
    2756:	0409                	addi	s0,s0,2
    2758:	0100                	addi	s0,sp,128
    275a:	1f05                	addi	t5,t5,-31
    275c:	0200                	addi	s0,sp,256
    275e:	0304                	addi	s1,sp,384
    2760:	0306                	slli	t1,t1,0x1
    2762:	0900                	addi	s0,sp,144
    2764:	0000                	unimp
    2766:	0501                	addi	a0,a0,0
    2768:	0019                	c.nop	6
    276a:	0402                	c.slli64	s0
    276c:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    2770:	0006                	c.slli	zero,0x1
    2772:	0501                	addi	a0,a0,0
    2774:	04020017          	auipc	zero,0x4020
    2778:	7e030603          	lb	a2,2016(t1)
    277c:	0609                	addi	a2,a2,2
    277e:	0100                	addi	s0,sp,128
    2780:	1005                	c.nop	-31
    2782:	0200                	addi	s0,sp,256
    2784:	0304                	addi	s1,sp,384
    2786:	00090003          	lb	zero,0(s2)
    278a:	0100                	addi	s0,sp,128
    278c:	0505                	addi	a0,a0,1
    278e:	0200                	addi	s0,sp,256
    2790:	0304                	addi	s1,sp,384
    2792:	0306                	slli	t1,t1,0x1
    2794:	0900                	addi	s0,sp,144
    2796:	0002                	c.slli64	zero
    2798:	0501                	addi	a0,a0,0
    279a:	0009                	c.nop	2
    279c:	0402                	c.slli64	s0
    279e:	09030603          	lb	a2,144(t1)
    27a2:	0409                	addi	s0,s0,2
    27a4:	0100                	addi	s0,sp,128
    27a6:	1b05                	addi	s6,s6,-31
    27a8:	0200                	addi	s0,sp,256
    27aa:	0304                	addi	s1,sp,384
    27ac:	00097e03          	0x97e03
    27b0:	0100                	addi	s0,sp,128
    27b2:	1005                	c.nop	-31
    27b4:	0200                	addi	s0,sp,256
    27b6:	0304                	addi	s1,sp,384
    27b8:	00090003          	lb	zero,0(s2)
    27bc:	0100                	addi	s0,sp,128
    27be:	0905                	addi	s2,s2,1
    27c0:	0200                	addi	s0,sp,256
    27c2:	0304                	addi	s1,sp,384
    27c4:	0c090903          	lb	s2,192(s2)
    27c8:	0100                	addi	s0,sp,128
    27ca:	2605                	jal	2aea <_min_stack+0xaea>
    27cc:	0200                	addi	s0,sp,256
    27ce:	0304                	addi	s1,sp,384
    27d0:	0306                	slli	t1,t1,0x1
    27d2:	0900                	addi	s0,sp,144
    27d4:	0000                	unimp
    27d6:	0501                	addi	a0,a0,0
    27d8:	0020                	addi	s0,sp,8
    27da:	0402                	c.slli64	s0
    27dc:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    27e0:	0006                	c.slli	zero,0x1
    27e2:	0501                	addi	a0,a0,0
    27e4:	001f 0402 0603      	0x6030402001f
    27ea:	04097e03          	0x4097e03
    27ee:	0100                	addi	s0,sp,128
    27f0:	1405                	addi	s0,s0,-31
    27f2:	0200                	addi	s0,sp,256
    27f4:	0304                	addi	s1,sp,384
    27f6:	00090003          	lb	zero,0(s2)
    27fa:	0100                	addi	s0,sp,128
    27fc:	0505                	addi	a0,a0,1
    27fe:	0200                	addi	s0,sp,256
    2800:	0304                	addi	s1,sp,384
    2802:	0306                	slli	t1,t1,0x1
    2804:	0900                	addi	s0,sp,144
    2806:	0000                	unimp
    2808:	0501                	addi	a0,a0,0
    280a:	0009                	c.nop	2
    280c:	0402                	c.slli64	s0
    280e:	09030603          	lb	a2,144(t1)
    2812:	0409                	addi	s0,s0,2
    2814:	0100                	addi	s0,sp,128
    2816:	1f05                	addi	t5,t5,-31
    2818:	0200                	addi	s0,sp,256
    281a:	0304                	addi	s1,sp,384
    281c:	00097e03          	0x97e03
    2820:	0100                	addi	s0,sp,128
    2822:	1405                	addi	s0,s0,-31
    2824:	0200                	addi	s0,sp,256
    2826:	0304                	addi	s1,sp,384
    2828:	00090003          	lb	zero,0(s2)
    282c:	0100                	addi	s0,sp,128
    282e:	0905                	addi	s2,s2,1
    2830:	0200                	addi	s0,sp,256
    2832:	0304                	addi	s1,sp,384
    2834:	0c090903          	lb	s2,192(s2)
    2838:	0100                	addi	s0,sp,128
    283a:	2305                	jal	2d5a <_min_stack+0xd5a>
    283c:	0200                	addi	s0,sp,256
    283e:	0304                	addi	s1,sp,384
    2840:	0306                	slli	t1,t1,0x1
    2842:	0900                	addi	s0,sp,144
    2844:	0000                	unimp
    2846:	0501                	addi	a0,a0,0
    2848:	001d                	c.nop	7
    284a:	0402                	c.slli64	s0
    284c:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    2850:	0006                	c.slli	zero,0x1
    2852:	0501                	addi	a0,a0,0
    2854:	001f 0402 0603      	0x6030402001f
    285a:	04097e03          	0x4097e03
    285e:	0100                	addi	s0,sp,128
    2860:	1405                	addi	s0,s0,-31
    2862:	0200                	addi	s0,sp,256
    2864:	0304                	addi	s1,sp,384
    2866:	00090003          	lb	zero,0(s2)
    286a:	0100                	addi	s0,sp,128
    286c:	0505                	addi	a0,a0,1
    286e:	0200                	addi	s0,sp,256
    2870:	0304                	addi	s1,sp,384
    2872:	0306                	slli	t1,t1,0x1
    2874:	0900                	addi	s0,sp,144
    2876:	0000                	unimp
    2878:	0501                	addi	a0,a0,0
    287a:	0009                	c.nop	2
    287c:	0402                	c.slli64	s0
    287e:	09030603          	lb	a2,144(t1)
    2882:	0c09                	addi	s8,s8,2
    2884:	0100                	addi	s0,sp,128
    2886:	2205                	jal	29a6 <_min_stack+0x9a6>
    2888:	0200                	addi	s0,sp,256
    288a:	0304                	addi	s1,sp,384
    288c:	0306                	slli	t1,t1,0x1
    288e:	0900                	addi	s0,sp,144
    2890:	0000                	unimp
    2892:	0501                	addi	a0,a0,0
    2894:	001c                	0x1c
    2896:	0402                	c.slli64	s0
    2898:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    289c:	0006                	c.slli	zero,0x1
    289e:	0501                	addi	a0,a0,0
    28a0:	0021                	c.nop	8
    28a2:	0402                	c.slli64	s0
    28a4:	7e030603          	lb	a2,2016(t1)
    28a8:	0409                	addi	s0,s0,2
    28aa:	0100                	addi	s0,sp,128
    28ac:	1405                	addi	s0,s0,-31
    28ae:	0200                	addi	s0,sp,256
    28b0:	0304                	addi	s1,sp,384
    28b2:	00090003          	lb	zero,0(s2)
    28b6:	0100                	addi	s0,sp,128
    28b8:	0505                	addi	a0,a0,1
    28ba:	0200                	addi	s0,sp,256
    28bc:	0304                	addi	s1,sp,384
    28be:	0306                	slli	t1,t1,0x1
    28c0:	0900                	addi	s0,sp,144
    28c2:	0000                	unimp
    28c4:	0601                	addi	a2,a2,0
    28c6:	04090903          	lb	s2,64(s2)
    28ca:	0100                	addi	s0,sp,128
    28cc:	1305                	addi	t1,t1,-31
    28ce:	0306                	slli	t1,t1,0x1
    28d0:	0900                	addi	s0,sp,144
    28d2:	0000                	unimp
    28d4:	0501                	addi	a0,a0,0
    28d6:	0605                	addi	a2,a2,1
    28d8:	10090b03          	lb	s6,256(s2)
    28dc:	0100                	addi	s0,sp,128
    28de:	1305                	addi	t1,t1,-31
    28e0:	0306                	slli	t1,t1,0x1
    28e2:	0900                	addi	s0,sp,144
    28e4:	0000                	unimp
    28e6:	0501                	addi	a0,a0,0
    28e8:	0605                	addi	a2,a2,1
    28ea:	14091403          	lh	s0,320(s2)
    28ee:	0100                	addi	s0,sp,128
    28f0:	1005                	c.nop	-31
    28f2:	00090003          	lb	zero,0(s2)
    28f6:	0100                	addi	s0,sp,128
    28f8:	1a05                	addi	s4,s4,-31
    28fa:	0306                	slli	t1,t1,0x1
    28fc:	0908                	addi	a0,sp,144
    28fe:	0000                	unimp
    2900:	0501                	addi	a0,a0,0
    2902:	09640313          	addi	t1,s0,150
    2906:	0004                	0x4
    2908:	0501                	addi	a0,a0,0
    290a:	031a                	slli	t1,t1,0x6
    290c:	091c                	addi	a5,sp,144
    290e:	000a                	c.slli	zero,0x2
    2910:	0501                	addi	a0,a0,0
    2912:	0305                	addi	t1,t1,1
    2914:	0978                	addi	a4,sp,156
    2916:	0004                	0x4
    2918:	0501                	addi	a0,a0,0
    291a:	0609                	addi	a2,a2,2
    291c:	04090103          	lb	sp,64(s2)
    2920:	0100                	addi	s0,sp,128
    2922:	0b05                	addi	s6,s6,1
    2924:	0306                	slli	t1,t1,0x1
    2926:	0900                	addi	s0,sp,144
    2928:	0000                	unimp
    292a:	0501                	addi	a0,a0,0
    292c:	09000327          	0x9000327
    2930:	0002                	c.slli64	zero
    2932:	0501                	addi	a0,a0,0
    2934:	0900030b          	0x900030b
    2938:	0004                	0x4
    293a:	0501                	addi	a0,a0,0
    293c:	060d                	addi	a2,a2,3
    293e:	0a090203          	lb	tp,160(s2)
    2942:	0100                	addi	s0,sp,128
    2944:	1a05                	addi	s4,s4,-31
    2946:	0306                	slli	t1,t1,0x1
    2948:	0900                	addi	s0,sp,144
    294a:	0000                	unimp
    294c:	0501                	addi	a0,a0,0
    294e:	060d                	addi	a2,a2,3
    2950:	0a090203          	lb	tp,160(s2)
    2954:	0100                	addi	s0,sp,128
    2956:	0505                	addi	a0,a0,1
    2958:	00090c03          	lb	s8,0(s2)
    295c:	0100                	addi	s0,sp,128
    295e:	0105                	addi	sp,sp,1
    2960:	0306                	slli	t1,t1,0x1
    2962:	0901                	addi	s2,s2,0
    2964:	0000                	unimp
    2966:	0501                	addi	a0,a0,0
    2968:	000d                	c.nop	3
    296a:	0402                	c.slli64	s0
    296c:	0602                	c.slli64	a2
    296e:	10097603          	0x10097603
    2972:	0100                	addi	s0,sp,128
    2974:	1a05                	addi	s4,s4,-31
    2976:	0200                	addi	s0,sp,256
    2978:	0204                	addi	s1,sp,256
    297a:	0306                	slli	t1,t1,0x1
    297c:	0900                	addi	s0,sp,144
    297e:	0000                	unimp
    2980:	0501                	addi	a0,a0,0
    2982:	0018                	0x18
    2984:	0402                	c.slli64	s0
    2986:	0602                	c.slli64	a2
    2988:	02097803          	0x2097803
    298c:	0100                	addi	s0,sp,128
    298e:	1005                	c.nop	-31
    2990:	0200                	addi	s0,sp,256
    2992:	0204                	addi	s1,sp,256
    2994:	00090003          	lb	zero,0(s2)
    2998:	0100                	addi	s0,sp,128
    299a:	0505                	addi	a0,a0,1
    299c:	0200                	addi	s0,sp,256
    299e:	0204                	addi	s1,sp,256
    29a0:	0306                	slli	t1,t1,0x1
    29a2:	0900                	addi	s0,sp,144
    29a4:	0002                	c.slli64	zero
    29a6:	0901                	addi	s2,s2,0
    29a8:	0006                	c.slli	zero,0x1
    29aa:	0100                	addi	s0,sp,128
    29ac:	5001                	c.li	zero,-32
    29ae:	0001                	nop
    29b0:	0300                	addi	s0,sp,384
    29b2:	1d00                	addi	s0,sp,688
    29b4:	0000                	unimp
    29b6:	0100                	addi	s0,sp,128
    29b8:	fb01                	bnez	a4,28c8 <_min_stack+0x8c8>
    29ba:	0d0e                	slli	s10,s10,0x3
    29bc:	0100                	addi	s0,sp,128
    29be:	0101                	addi	sp,sp,0
    29c0:	0001                	nop
    29c2:	0000                	unimp
    29c4:	0001                	nop
    29c6:	0100                	addi	s0,sp,128
    29c8:	6300                	flw	fs0,0(a4)
    29ca:	7472                	flw	fs0,60(sp)
    29cc:	2e30                	fld	fa2,88(a2)
    29ce:	00000053          	fadd.s	ft0,ft0,ft0,rne
    29d2:	0000                	unimp
    29d4:	0500                	addi	s0,sp,640
    29d6:	dc02                	sw	zero,56(sp)
    29d8:	000d                	c.nop	3
    29da:	1500                	addi	s0,sp,672
    29dc:	04090403          	lb	s0,64(s2)
    29e0:	0100                	addi	s0,sp,128
    29e2:	04090103          	lb	sp,64(s2)
    29e6:	0100                	addi	s0,sp,128
    29e8:	02090103          	lb	sp,32(s2)
    29ec:	0100                	addi	s0,sp,128
    29ee:	02090103          	lb	sp,32(s2)
    29f2:	0100                	addi	s0,sp,128
    29f4:	02090103          	lb	sp,32(s2)
    29f8:	0100                	addi	s0,sp,128
    29fa:	02090103          	lb	sp,32(s2)
    29fe:	0100                	addi	s0,sp,128
    2a00:	02090103          	lb	sp,32(s2)
    2a04:	0100                	addi	s0,sp,128
    2a06:	02090103          	lb	sp,32(s2)
    2a0a:	0100                	addi	s0,sp,128
    2a0c:	02090103          	lb	sp,32(s2)
    2a10:	0100                	addi	s0,sp,128
    2a12:	02090103          	lb	sp,32(s2)
    2a16:	0100                	addi	s0,sp,128
    2a18:	02090103          	lb	sp,32(s2)
    2a1c:	0100                	addi	s0,sp,128
    2a1e:	02090103          	lb	sp,32(s2)
    2a22:	0100                	addi	s0,sp,128
    2a24:	02090103          	lb	sp,32(s2)
    2a28:	0100                	addi	s0,sp,128
    2a2a:	02090103          	lb	sp,32(s2)
    2a2e:	0100                	addi	s0,sp,128
    2a30:	02090103          	lb	sp,32(s2)
    2a34:	0100                	addi	s0,sp,128
    2a36:	02090103          	lb	sp,32(s2)
    2a3a:	0100                	addi	s0,sp,128
    2a3c:	02090103          	lb	sp,32(s2)
    2a40:	0100                	addi	s0,sp,128
    2a42:	02090103          	lb	sp,32(s2)
    2a46:	0100                	addi	s0,sp,128
    2a48:	02090103          	lb	sp,32(s2)
    2a4c:	0100                	addi	s0,sp,128
    2a4e:	02090103          	lb	sp,32(s2)
    2a52:	0100                	addi	s0,sp,128
    2a54:	02090103          	lb	sp,32(s2)
    2a58:	0100                	addi	s0,sp,128
    2a5a:	02090103          	lb	sp,32(s2)
    2a5e:	0100                	addi	s0,sp,128
    2a60:	02090103          	lb	sp,32(s2)
    2a64:	0100                	addi	s0,sp,128
    2a66:	02090103          	lb	sp,32(s2)
    2a6a:	0100                	addi	s0,sp,128
    2a6c:	02090103          	lb	sp,32(s2)
    2a70:	0100                	addi	s0,sp,128
    2a72:	02090103          	lb	sp,32(s2)
    2a76:	0100                	addi	s0,sp,128
    2a78:	02090103          	lb	sp,32(s2)
    2a7c:	0100                	addi	s0,sp,128
    2a7e:	02090103          	lb	sp,32(s2)
    2a82:	0100                	addi	s0,sp,128
    2a84:	02090103          	lb	sp,32(s2)
    2a88:	0100                	addi	s0,sp,128
    2a8a:	02090103          	lb	sp,32(s2)
    2a8e:	0100                	addi	s0,sp,128
    2a90:	02090103          	lb	sp,32(s2)
    2a94:	0100                	addi	s0,sp,128
    2a96:	02090303          	lb	t1,32(s2)
    2a9a:	0100                	addi	s0,sp,128
    2a9c:	08090603          	lb	a2,128(s2)
    2aa0:	0100                	addi	s0,sp,128
    2aa2:	08090103          	lb	sp,128(s2)
    2aa6:	0100                	addi	s0,sp,128
    2aa8:	08090203          	lb	tp,128(s2)
    2aac:	0100                	addi	s0,sp,128
    2aae:	04090303          	lb	t1,64(s2)
    2ab2:	0100                	addi	s0,sp,128
    2ab4:	04090103          	lb	sp,64(s2)
    2ab8:	0100                	addi	s0,sp,128
    2aba:	02090103          	lb	sp,32(s2)
    2abe:	0100                	addi	s0,sp,128
    2ac0:	04090603          	lb	a2,64(s2)
    2ac4:	0100                	addi	s0,sp,128
    2ac6:	04090103          	lb	sp,64(s2)
    2aca:	0100                	addi	s0,sp,128
    2acc:	04090103          	lb	sp,64(s2)
    2ad0:	0100                	addi	s0,sp,128
    2ad2:	0409                	addi	s0,s0,2
    2ad4:	0000                	unimp
    2ad6:	0101                	addi	sp,sp,0
    2ad8:	0500                	addi	s0,sp,640
    2ada:	0002                	c.slli64	zero
    2adc:	0000                	unimp
    2ade:	0300                	addi	s0,sp,384
    2ae0:	030100cb          	fnmsub.d	ft1,ft2,fa6,ft0,rne
    2ae4:	0901                	addi	s2,s2,0
    2ae6:	007c                	addi	a5,sp,12
    2ae8:	0301                	addi	t1,t1,0
    2aea:	0904                	addi	s1,sp,144
    2aec:	0004                	0x4
    2aee:	0301                	addi	t1,t1,0
    2af0:	0904                	addi	s1,sp,144
    2af2:	0004                	0x4
    2af4:	0301                	addi	t1,t1,0
    2af6:	0904                	addi	s1,sp,144
    2af8:	0004                	0x4
    2afa:	0901                	addi	s2,s2,0
    2afc:	0004                	0x4
    2afe:	0100                	addi	s0,sp,128
    2b00:	01              	Address 0x0000000000002b00 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	775f 7263 6f74      	0x6f747263775f
  40:	626d                	lui	tp,0x1b
  42:	735f 6174 6574      	0x65746174735f
  48:	5f00                	lw	s0,56(a4)
  4a:	72736377          	0x72736377
  4e:	6f74                	flw	fa3,92(a4)
  50:	626d                	lui	tp,0x1b
  52:	74735f73          	csrrwi	t5,0x747,6
  56:	7461                	lui	s0,0xffff8
  58:	0065                	c.nop	25
  5a:	5f5f 7562 6c69      	0x6c6975625f5f
  60:	6974                	flw	fa3,84(a0)
  62:	5f6e                	lw	t5,248(sp)
  64:	656d                	lui	a0,0x1b
  66:	736d                	lui	t1,0xffffb
  68:	7465                	lui	s0,0xffff9
  6a:	6c00                	flw	fs0,24(s0)
  6c:	20676e6f          	jal	t3,76272 <_stack_start+0x66272>
  70:	6f6c                	flw	fa1,92(a4)
  72:	676e                	flw	fa4,216(sp)
  74:	7520                	flw	fs0,104(a0)
  76:	736e                	flw	ft6,248(sp)
  78:	6769                	lui	a4,0x1a
  7a:	656e                	flw	fa0,216(sp)
  7c:	2064                	fld	fs1,192(s0)
  7e:	6e69                	lui	t3,0x1a
  80:	0074                	addi	a3,sp,12
  82:	6544                	flw	fs1,12(a0)
  84:	654d5f63          	bge	s10,s4,6e2 <ext_euclid+0xae>
  88:	67617373          	csrrci	t1,0x676,2
    int line[size_b][size_a + size_b];
  8c:	0065                	c.nop	25
  8e:	6c5f 6662 6973      	0x697366626c5f
  94:	657a                	flw	fa0,156(sp)
  96:	7200                	flw	fs0,32(a2)
  98:	6e61                	lui	t3,0x18
  9a:	6f64                	flw	fs1,92(a4)
  9c:	5f6d                	li	t5,-5
  9e:	7379656b          	0x7379656b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  a2:	5f00                	lw	s0,56(a4)
  a4:	6c5f 636f 6c61      	0x6c61636f6c5f
  aa:	5f65                	li	t5,-7
  ac:	0074                	addi	a3,sp,12
  ae:	72636573          	csrrsi	a0,0x726,6
  b2:	7465                	lui	s0,0xffff9
    int line[size_b][size_a + size_b];
  b4:	6b5f 7965 665f      	0x665f79656b5f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  ba:	7300                	flw	fs0,32(a4)
    int line[size_b][size_a + size_b];
  bc:	6365                	lui	t1,0x19
  be:	6572                	flw	fa0,28(sp)
    int pola[size_a];
  c0:	5f74                	lw	a3,124(a4)
  c2:	5f79656b          	0x5f79656b
    int line[size_b][size_a + size_b];
  c6:	6d5f0067          	jr	1749(t5)
    int pola[size_a];
  ca:	7262                	flw	ft4,56(sp)
  cc:	6f74                	flw	fa3,92(a4)
    int polb[size_b];
  ce:	735f6377          	0x735f6377
  d2:	6174                	flw	fa3,68(a0)
    int pola[size_a];
  d4:	6574                	flw	fa3,76(a0)
    int polb[size_b];
  d6:	5f00                	lw	s0,56(a4)
  d8:	6f746377          	0x6f746377
    int line[size_b][size_a + size_b];
  dc:	626d                	lui	tp,0x1b
    int pola[size_a];
  de:	735f 6174 6574      	0x65746174735f
            line[i][j] = 0;
  e4:	5f00                	lw	s0,56(a4)
  e6:	745f 5f6d 6573      	0x65735f6d745f
    for (i = 0; i < size_b; ++i){
  ec:	6f6c0063          	beq	s8,s6,7cc <ext_euclid+0x198>
            product[j] = 0;
  f0:	676e                	flw	fa4,216(sp)
  f2:	6c20                	flw	fs0,88(s0)
  f4:	20676e6f          	jal	t3,762fa <_stack_start+0x662fa>
    for (i = 0; i < size_b; ++i){
  f8:	6e69                	lui	t3,0x1a
  fa:	0074                	addi	a3,sp,12
    for (i = 0; i < size_a; ++i){
  fc:	657a6973          	csrrsi	s2,0x657,20
 100:	4e5f 7000 6c6f      	0x6c6f70004e5f
    for (i = 0; i < size_b; ++i){
 106:	6d79                	lui	s10,0x1e
 108:	6c75                	lui	s8,0x1d
    if(star_mult == 1){
 10a:	0074                	addi	a3,sp,12
 10c:	755f 7562 0066      	0x667562755f
 112:	625f 7361 0065      	0x657361625f
 118:	5f5f 6d74 685f      	0x685f6d745f5f
            for (k = size_a-1; k >= 0; k = k-1 ){
 11e:	0072756f          	jal	a0,27924 <_stack_start+0x17924>
            product[j] = 0;
 122:	5f5f 6673 5f00      	0x5f0066735f5f
            line[i][j] = 0;
 128:	655f6e6f          	jal	t3,f6f7c <_stack_start+0xe6f7c>
            product[j] = 0;
 12c:	6978                	flw	fa4,84(a0)
 12e:	5f74                	lw	a3,124(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
 130:	7261                	lui	tp,0xffff8
 132:	5f007367          	0x5f007367
 136:	6b6f6f63          	bltu	t5,s6,7f4 <ext_euclid+0x1c0>
    for (i = 0; i < size_b; ++i){
 13a:	6569                	lui	a0,0x1a
 13c:	5f00                	lw	s0,56(a4)
 13e:	735f 6c67 6575      	0x65756c67735f
        pola[i] = a[i];
 144:	7200                	flw	fs0,32(a2)
 146:	7365                	lui	t1,0xffff9
 148:	0031                	c.nop	12
 14a:	6572                	flw	fa0,28(sp)
 14c:	5f003273          	csrrc	tp,0x5f0,zero
            pola[i] = pola[i] + mod;
 150:	6c66                	flw	fs8,88(sp)
        while (pola[i] < 0){
 152:	6761                	lui	a4,0x18
 154:	695f0073          	0x695f0073
 158:	78635f73          	csrrwi	t5,0x786,6
        pola[i] = pola[i] % mod;
 15c:	0061                	c.nop	24
    for (i = 0; i < size_a; ++i){
 15e:	735f 6474 6e69      	0x6e696474735f
        pola[i] = pola[i] % mod;
 164:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_a; ++i){
 166:	6c62                	flw	fs8,24(sp)
            pola[i] = pola[i] + mod;
 168:	7a69736b          	0x7a69736b
        polb[i] = b[i];
 16c:	0065                	c.nop	25
 16e:	7270                	flw	fa2,100(a2)
 170:	6375646f          	jal	s0,56fa6 <_stack_start+0x46fa6>
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
 174:	0074                	addi	a3,sp,12
        while (polb[i] < 0){
 176:	6f70                	flw	fa2,92(a4)
 178:	796c                	flw	fa1,116(a0)
 17a:	6964                	flw	fs1,84(a0)
        polb[i] = polb[i] % mod;
 17c:	0076                	c.slli	zero,0x1d
 17e:	6f70                	flw	fa2,92(a4)
    for (i = 0; i < size_b; ++i){
 180:	796c                	flw	fa1,116(a0)
 182:	0066                	c.slli	zero,0x19
        polb[i] = polb[i] % mod;
 184:	635f 7476 7562      	0x75627476635f
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
 18a:	0066                	c.slli	zero,0x19
 18c:	6f5f 6666 6573      	0x657366666f5f
        for (j = size_b -1; j >= 0; j = j-1){
 192:	0074                	addi	a3,sp,12
        for(j = 0; j < size_a + size_b -1; ++j){
 194:	6d5f 7362 7472      	0x747273626d5f
    for (i = 0; i < size_b; ++i){
 19a:	7363776f          	jal	a4,378d0 <_stack_start+0x278d0>
 19e:	735f 6174 6574      	0x65746174735f
    for(j = 0; j < size_a + size_b -1; ++j){
 1a4:	5f00                	lw	s0,56(a4)
 1a6:	626d                	lui	tp,0x1b
 1a8:	6c72                	flw	fs8,28(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 1aa:	6e65                	lui	t3,0x19
 1ac:	735f 6174 6574      	0x65746174735f
}
 1b2:	5f00                	lw	s0,56(a4)
 1b4:	6e66                	flw	ft8,88(sp)
 1b6:	7261                	lui	tp,0xffff8
 1b8:	6e007367          	0x6e007367
 1bc:	7274                	flw	fa3,100(a2)
 1be:	5f75                	li	t5,-3
 1c0:	6564                	flw	fs1,76(a0)
 1c2:	70796563          	bltu	s2,t2,8cc <ext_euclid+0x298>
 1c6:	0074                	addi	a3,sp,12
 1c8:	665f 736e 5f00      	0x5f00736e665f
 1ce:	6e676973          	csrrsi	s2,0x6e6,14
                line[size_b-1-j][k] = pola[k]*polb[j];
 1d2:	5f00                	lw	s0,56(a4)
 1d4:	6c66                	flw	fs8,88(sp)
 1d6:	5f6b636f          	jal	t1,b67cc <_stack_start+0xa67cc>
 1da:	0074                	addi	a3,sp,12
 1dc:	735f 6474 7265      	0x72656474735f
 1e2:	0072                	c.slli	zero,0x1c
 1e4:	425f 6769 6e69      	0x6e696769425f
            for (k = size_a-1; k >= 0; k = k-1 ){
 1ea:	0074                	addi	a3,sp,12
 1ec:	675f 6d61 616d      	0x616d6d61675f
        for (j = size_b -1; j >= 0; j = j-1){
 1f2:	735f 6769 676e      	0x676e6769735f
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f8:	6d61                	lui	s10,0x18
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 1fa:	5f00                	lw	s0,56(a4)
 1fc:	6572                	flw	fa0,28(sp)
 1fe:	6461                	lui	s0,0x18
 200:	5f00                	lw	s0,56(a4)
 202:	6572                	flw	fa0,28(sp)
 204:	746c7573          	csrrci	a0,0x746,24
 208:	6b5f 5f00 745f      	0x745f5f006b5f
 20e:	006d                	c.nop	27
 210:	6564                	flw	fs1,76(a0)
 212:	756e                	flw	fa0,248(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 214:	5f6d                	li	t5,-5
 216:	6574                	flw	fa3,76(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 218:	706d                	c.lui	zero,0xffffb
 21a:	5f00                	lw	s0,56(a4)
 21c:	775f 6863 0062      	0x626863775f
        for(j = 0; j < size_a + size_b -1; ++j){
 222:	6572                	flw	fa0,28(sp)
 224:	746c7573          	csrrci	a0,0x746,24
            line[i][j] = line[i][j] % mod;
 228:	006e6f6b          	0x6e6f6b
 22c:	735f 6474 756f      	0x756f6474735f
    for (i = 0; i < size_b; ++i){
 232:	0074                	addi	a3,sp,12
 234:	635f 7476 656c      	0x656c7476635f
        for(j = 0; j < size_a + size_b -1; ++j){
 23a:	006e                	c.slli	zero,0x1b
 23c:	72636573          	csrrsi	a0,0x726,6
            product[j] += line[i][j];
 240:	7465                	lui	s0,0xffff9
 242:	6b5f 7965 665f      	0x665f79656b5f
 248:	0071                	c.nop	28
 24a:	665f 6c69 0065      	0x656c69665f
 250:	6572                	flw	fa0,28(sp)
 252:	7574                	flw	fa3,108(a0)
        for(i = 0; i < size_b; ++i){
 254:	6e72                	flw	ft8,28(sp)
 256:	615f 6464 6572      	0x65726464615f
    for(j = 0; j < size_a + size_b -1; ++j){
 25c:	00317373          	csrrci	t1,fcsr,2
        for(i = 0; i < size_b; ++i){
 260:	6572                	flw	fa0,28(sp)
        product[j] = product[j] % mod;
 262:	7574                	flw	fa3,108(a0)
    for(j = 0; j < size_a + size_b -1; ++j){
 264:	6e72                	flw	ft8,28(sp)
 266:	615f 6464 6572      	0x65726464615f
        product[j] = product[j] % mod;
 26c:	00327373          	csrrci	t1,fcsr,4
    for(j = 0; j < size_a + size_b -1; ++j){
 270:	6572                	flw	fa0,28(sp)
    int line[size_b][size_a + size_b];
 272:	7574                	flw	fa3,108(a0)
 274:	6e72                	flw	ft8,28(sp)
 276:	615f 6464 6572      	0x65726464615f
 27c:	00337373          	csrrci	t1,fcsr,6
 280:	6572                	flw	fa0,28(sp)
 282:	7574                	flw	fa3,108(a0)
 284:	6e72                	flw	ft8,28(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 286:	615f 6464 6572      	0x65726464615f
 28c:	00347373          	csrrci	t1,fcsr,8
 290:	6e5f 6f69 7362      	0x73626f696e5f
 296:	7200                	flw	fs0,32(a2)
    int line[size_b][size_a + size_b];
 298:	7465                	lui	s0,0xffff9
 29a:	7275                	lui	tp,0xffffd
 29c:	5f6e                	lw	t5,248(sp)
 29e:	6461                	lui	s0,0x18
    int pola[size_a];
 2a0:	7264                	flw	fs1,100(a2)
 2a2:	7365                	lui	t1,0xffff9
 2a4:	72003673          	csrrc	a2,0x720,zero
    int line[size_b][size_a + size_b];
 2a8:	7465                	lui	s0,0xffff9
    int pola[size_a];
 2aa:	7275                	lui	tp,0xffffd
 2ac:	5f6e                	lw	t5,248(sp)
    int polb[size_b];
 2ae:	6461                	lui	s0,0x18
 2b0:	7264                	flw	fs1,100(a2)
 2b2:	7365                	lui	t1,0xffff9
    int pola[size_a];
 2b4:	73003773          	csrrc	a4,0x730,zero
    int polb[size_b];
 2b8:	6f68                	flw	fa0,92(a4)
    int line[size_b][size_a + size_b];
 2ba:	7472                	flw	fs0,60(sp)
 2bc:	7520                	flw	fs0,104(a0)
    int pola[size_a];
 2be:	736e                	flw	ft6,248(sp)
 2c0:	6769                	lui	a4,0x1a
    int polb[size_b];
 2c2:	656e                	flw	fa0,216(sp)
            line[i][j] = 0;
 2c4:	2064                	fld	fs1,192(s0)
 2c6:	6e69                	lui	t3,0x1a
 2c8:	0074                	addi	a3,sp,12
    for (i = 0; i < size_b; ++i){
 2ca:	615f 6574 6978      	0x69786574615f
            product2[j] = 0;
 2d0:	3074                	fld	fa3,224(s0)
 2d2:	5f00                	lw	s0,56(a4)
 2d4:	6e676973          	csrrsi	s2,0x6e6,14
    for (i = 0; i < size_b; ++i){
 2d8:	6c61                	lui	s8,0x18
    for(i = 0; i < size_a; ++i){
 2da:	625f 6675 5f00      	0x5f006675625f
    for(i = 0; i < size_b; ++i){
 2e0:	7361                	lui	t1,0xffff8
 2e2:	6d697463          	bgeu	s2,s6,9aa <generate_keys+0x92>
    if(star_mult == 1){
 2e6:	5f65                	li	t5,-7
 2e8:	7562                	flw	fa0,56(sp)
 2ea:	0066                	c.slli	zero,0x19
 2ec:	725f 7365 6c75      	0x6c757365725f
 2f2:	0074                	addi	a3,sp,12
        for (j = size_b -1; j >= 0; j = j-1){
 2f4:	5f5f 6377 0068      	0x6863775f5f
            for (k = size_a-1; k >= 0; k = k-1 ){
 2fa:	746e6977          	0x746e6977
            product2[j] = 0;
 2fe:	745f 6700 6e65      	0x6e656700745f
            line[i][j] = 0;
 304:	7265                	lui	tp,0xffff9
            product2[j] = 0;
 306:	7461                	lui	s0,0xffff8
 308:	5f65                	li	t5,-7
        for(j = 0; j < size_a + size_b -1; ++j){
 30a:	7379656b          	0x7379656b
 30e:	5f00                	lw	s0,56(a4)
 310:	625f 6975 746c      	0x746c6975625f
    for (i = 0; i < size_b; ++i){
 316:	6e69                	lui	t3,0x1a
 318:	6d5f 6d65 7063      	0x70636d656d5f
        pola[i] = a[i];
 31e:	0079                	c.nop	30
 320:	6c5f 636f 006b      	0x6b636f6c5f
 326:	544e                	lw	s0,240(sp)
 328:	5552                	lw	a0,52(sp)
    for(i = 0; i < size_a; ++i){
 32a:	345f 5f38 6962      	0x69625f38345f
 330:	4d74                	lw	a3,92(a0)
        polb[i] = b[i];
 332:	632e                	flw	ft6,200(sp)
 334:	7000                	flw	fs0,32(s0)
 336:	6f72                	flw	ft10,28(sp)
 338:	7564                	flw	fs1,108(a0)
 33a:	00327463          	bgeu	tp,gp,342 <polymult2+0xd0>
    for(i = 0; i < size_b; ++i){
 33e:	7865                	lui	a6,0xffff9
        polb[i] = b[i];
 340:	5f74                	lw	a3,124(a4)
 342:	7565                	lui	a0,0xffff9
    for(i = 0; i < size_b; ++i){
 344:	64696c63          	bltu	s2,t1,99c <generate_keys+0x84>
                line[size_b-1-j][k] = pola[k]*polb[j];
 348:	5f00                	lw	s0,56(a4)
 34a:	74697277          	0x74697277
 34e:	0065                	c.nop	25
 350:	5f5f 6d74 795f      	0x795f6d745f5f
            for (k = size_a-1; k >= 0; k = k-1 ){
 356:	6165                	addi	sp,sp,112
                line[size_b-1-j][k] = pola[k]*polb[j];
 358:	0072                	c.slli	zero,0x1c
 35a:	6f70                	flw	fa2,92(a4)
 35c:	626c                	flw	fa1,68(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 35e:	7200                	flw	fs0,32(a2)
 360:	6e61                	lui	t3,0x18
        for (j = size_b -1; j >= 0; j = j-1){
 362:	6f64                	flw	fs1,92(a4)
 364:	5f6d                	li	t5,-5
 366:	6176                	flw	ft2,92(sp)
 368:	006c                	addi	a1,sp,12
 36a:	6e5f 616d 6c6c      	0x6c6c616d6e5f
 370:	5f00636f          	jal	t1,6960 <_stack_len+0x2960>
        for(i = 0; i < size_b; ++i){
 374:	4f4c                	lw	a1,28(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
 376:	525f4b43          	fmadd.d	fs6,ft10,ft5,fa0,rmm
}
 37a:	4345                	li	t1,17
 37c:	5255                	li	tp,-11
 37e:	45564953          	0x45564953
 382:	545f 6c00 6e6f      	0x6e6f6c00545f
 388:	6f642067          	0x6f642067
 38c:	6275                	lui	tp,0x1d
 38e:	656c                	flw	fa1,76(a0)
 390:	5f00                	lw	s0,56(a4)
 392:	656e                	flw	fa0,216(sp)
 394:	7478                	flw	fa4,108(s0)
 396:	0066                	c.slli	zero,0x19
            for (k = size_a-1; k >= 0; k = k-1 ){
 398:	656d                	lui	a0,0x1b
 39a:	67617373          	csrrci	t1,0x676,2
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 39e:	0065                	c.nop	25
 3a0:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
 3a6:	72006e6f          	jal	t3,6ac6 <_stack_len+0x2ac6>
 3aa:	7465                	lui	s0,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ac:	7275                	lui	tp,0xffffd
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3ae:	5f6e                	lw	t5,248(sp)
 3b0:	6461                	lui	s0,0x18
 3b2:	7264                	flw	fs1,100(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3b4:	7365                	lui	t1,0xffff9
 3b6:	5f003573          	csrrc	a0,0x5f0,zero
        for (j = size_b -1; j >= 0; j = j-1){
 3ba:	7461                	lui	s0,0xffff8
 3bc:	7865                	lui	a6,0xffff9
 3be:	7469                	lui	s0,0xffffa
            product2[j] += line[i][j];
 3c0:	7300                	flw	fs0,32(a4)
 3c2:	6275                	lui	tp,0x1d
 3c4:	6174706f          	j	481da <_stack_start+0x381da>
 3c8:	6772                	flw	fa4,28(sp)
 3ca:	5f00                	lw	s0,56(a4)
 3cc:	735f 6964 6964      	0x69646964735f
 3d2:	696e                	flw	fs2,216(sp)
        for(i = 0; i < size_b; ++i){
 3d4:	0074                	addi	a3,sp,12
 3d6:	6f5f 6666 745f      	0x745f66666f5f
    for(j = 0; j < size_a + size_b -1; ++j){
 3dc:	4500                	lw	s0,8(a0)
        for(i = 0; i < size_b; ++i){
 3de:	636e                	flw	ft6,216(sp)
 3e0:	4d5f 7365 6173      	0x617373654d5f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 3e6:	63006567          	0x63006567
    int v[size_N];
 3ea:	72746e6f          	jal	t3,47310 <_stack_start+0x37310>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 3ee:	00526c6f          	jal	s8,26bf2 <_stack_start+0x16bf2>
 3f2:	665f 6572 6c65      	0x6c656572665f
 3f8:	7369                	lui	t1,0xffffa
 3fa:	0074                	addi	a3,sp,12
 3fc:	6972                	flw	fs2,28(sp)
 3fe:	676e                	flw	fa4,216(sp)
 400:	705f 6c6f 0079      	0x796c6f705f
 406:	6d6f682f          	0x6d6f682f
    int v[size_N];
 40a:	2f65                	jal	bc2 <generate_keys+0x2aa>
 40c:	6f74                	flw	fa3,92(a4)
    int q[size_N];
 40e:	6170                	flw	fa2,68(a0)
 410:	636c                	flw	fa1,68(a4)
 412:	7365442f          	0x7365442f
    int num_temp[size_N];
 416:	706f746b          	0x706f746b
    int denum_temp[size_D];
 41a:	7469672f          	0x7469672f
 41e:	7568                	flw	fa0,108(a0)
    int num_temp[size_N];
 420:	2f62                	fld	ft10,24(sp)
    int denum_temp[size_D];
 422:	696e6573          	csrrsi	a0,0x696,28
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 426:	705f726f          	jal	tp,f832a <_stack_start+0xe832a>
    int denum_temp[size_D];
 42a:	6f72                	flw	ft10,28(sp)
 42c:	656a                	flw	fa0,152(sp)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 42e:	732f7463          	bgeu	t5,s2,b56 <generate_keys+0x23e>
    int v[size_N];
 432:	746e2f77          	0x746e2f77
    for (i = 0; i < size_N; ++i){
 436:	7572                	flw	fa0,60(sp)
 438:	6c5f 7461 6669      	0x666974616c5f
 43e:	6f68                	flw	fa0,92(a4)
 440:	6e2f6163          	bltu	t5,sp,b22 <generate_keys+0x20a>
    for (i = 0; i < size_D; ++i) {
 444:	75635f6f          	jal	t5,35b9a <_stack_start+0x25b9a>
    for (i = 0; i < size_N; ++i){
 448:	6d6f7473          	csrrci	s0,0x6d6,30
 44c:	7400                	flw	fs0,40(s0)
    for (i = size_D-1; i >= 0; i = i-1){
 44e:	5f69                	li	t5,-6
 450:	0031                	c.nop	12
 452:	6974                	flw	fa3,84(a0)
 454:	325f 7500 736e      	0x736e7500325f
    for (i = 0; i < size_N; ++i){
 45a:	6769                	lui	a4,0x1a
 45c:	656e                	flw	fa0,216(sp)
        if ( (b_N*u)%mod == 1 )
 45e:	2064                	fld	fs1,192(s0)
    for (u = 0; u < mod; ++u){
 460:	72616863          	bltu	sp,t1,b90 <generate_keys+0x278>
 464:	7100                	flw	fs0,32(a0)
 466:	5f69                	li	t5,-6
        num_temp[i] = num[i];
 468:	0031                	c.nop	12
 46a:	6e5f 7765 5f00      	0x5f0077656e5f
            num_temp[i] = num_temp[i] + mod;
 470:	5f68                	lw	a0,124(a4)
        while (num_temp[i] < 0) {
 472:	7265                	lui	tp,0xffff9
 474:	6e72                	flw	ft8,28(sp)
 476:	6873006f          	j	312fc <_stack_start+0x212fc>
        num_temp[i] = num_temp[i] % mod;
 47a:	2074726f          	jal	tp,47e80 <_stack_start+0x37e80>
    for (i = 0; i < size_N; ++i){
 47e:	6e69                	lui	t3,0x1a
        num_temp[i] = num_temp[i] % mod;
 480:	0074                	addi	a3,sp,12
 482:	5f5f 6d74 795f      	0x795f6d745f5f
            num_temp[i] = num_temp[i] + mod;
 488:	6164                	flw	fs1,68(a0)
        denum_temp[i] = denum[i];
 48a:	0079                	c.nop	30
 48c:	5f5f 6273 6675      	0x667562735f5f
            denum_temp[i] = denum_temp[i] + mod;
 492:	5f00                	lw	s0,56(a4)
        while (denum_temp[i] < 0) {
 494:	6c66                	flw	fs8,88(sp)
 496:	6761                	lui	a4,0x18
 498:	5f003273          	csrrc	tp,0x5f0,zero
        denum_temp[i] = denum_temp[i] % mod;
 49c:	6f69                	lui	t5,0x1a
    for (i = 0; i < size_D; ++i) {
 49e:	7362                	flw	ft6,56(sp)
 4a0:	5f00                	lw	s0,56(a4)
        denum_temp[i] = denum_temp[i] % mod;
 4a2:	465f 4c49 0045      	0x454c49465f
            denum_temp[i] = denum_temp[i] + mod;
 4a8:	6d5f 7362 6174      	0x617473626d5f
        q[i] = 0;
 4ae:	6574                	flw	fa3,76(a0)
 4b0:	745f 5f00 735f      	0x735f5f00745f
 4b6:	4946                	lw	s2,80(sp)
 4b8:	454c                	lw	a1,12(a0)
        v[i] = 0;
 4ba:	5f00                	lw	s0,56(a4)
 4bc:	626d                	lui	tp,0x1b
    for (i = 0; i < size_N; ++i){
 4be:	74617473          	csrrci	s0,0x746,2
        if( denum_temp[i] != 0 )
 4c2:	0065                	c.nop	25
    for (i = size_D-1; i >= 0; i = i-1){
 4c4:	725f 6e61 5f64      	0x5f646e61725f
        if ( (b_N*u)%mod == 1 )
 4ca:	656e                	flw	fa0,216(sp)
 4cc:	7478                	flw	fa4,108(s0)
 4ce:	5f00                	lw	s0,56(a4)
 4d0:	626d                	lui	tp,0x1b
    for (u = 0; u < mod; ++u){
 4d2:	656c                	flw	fa1,76(a0)
 4d4:	5f6e                	lw	t5,248(sp)
        if( num_temp[i] != 0 )
 4d6:	74617473          	csrrci	s0,0x746,2
    for (i = size_N-1; i >= 0; i = i-1){
 4da:	0065                	c.nop	25
 4dc:	695f 636e 5f00      	0x5f00636e695f
 4e2:	6e69                	lui	t3,0x1a
 4e4:	0064                	addi	s1,sp,12
    while (d >= d2){
 4e6:	6c5f 636f 6c61      	0x6c61636f6c5f
        result[i] = q[i];
 4ec:	0065                	c.nop	25
 4ee:	5f5f 6c63 6165      	0x61656c635f5f
    for(i = 0; i < size_N; ++i){
 4f4:	756e                	flw	fa0,248(sp)
 4f6:	0070                	addi	a2,sp,12
    for(i = size_N; i < (2*size_N); ++i){
 4f8:	755f 736e 6570      	0x6570736e755f
        result[i] = num_temp[i-size_N];
 4fe:	69666963          	bltu	a2,s6,b90 <generate_keys+0x278>
 502:	6465                	lui	s0,0x19
    for(i = size_N; i < (2*size_N); ++i){
 504:	6c5f 636f 6c61      	0x6c61636f6c5f
}
 50a:	5f65                	li	t5,-7
 50c:	6e69                	lui	t3,0x1a
 50e:	6f66                	flw	ft10,88(sp)
 510:	5f00                	lw	s0,56(a4)
 512:	616d                	addi	sp,sp,240
 514:	7778                	flw	fa4,108(a4)
 516:	7364                	flw	fs1,100(a4)
 518:	5f00                	lw	s0,56(a4)
 51a:	6572                	flw	fa0,28(sp)
 51c:	6e65                	lui	t3,0x19
 51e:	0074                	addi	a3,sp,12
 520:	72617473          	csrrci	s0,0x726,2
 524:	6d5f 6c75 0074      	0x746c756d5f
 52a:	735f 6565 0064      	0x646565735f
 530:	6972                	flw	fs2,28(sp)
        v[(d-d2)] = u*r_d;
 532:	325f 5f00 635f      	0x635f5f00325f
 538:	746e756f          	jal	a0,e7c7e <_stack_start+0xd7c7e>
 53c:	5f00                	lw	s0,56(a4)
 53e:	765f 6c61 6575      	0x65756c61765f
        for (i = 0; i < size_N; ++i){
 544:	5f00                	lw	s0,56(a4)
 546:	6b656573          	csrrsi	a0,0x6b6,10
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 54a:	5f00                	lw	s0,56(a4)
 54c:	7066                	flw	ft0,120(sp)
 54e:	745f736f          	jal	t1,f8492 <_stack_start+0xe8492>
 552:	5f00                	lw	s0,56(a4)
 554:	745f 5f6d 696d      	0x696d5f6d745f
        for (i = 0; i < size_N; ++i){
 55a:	006e                	c.slli	zero,0x1b
 55c:	7570                	flw	fa2,108(a0)
 55e:	6c62                	flw	fs8,24(sp)
        for (i = 0; i < size_N; ++i){
 560:	6369                	lui	t1,0x1a
 562:	6b5f 7965 5f00      	0x5f0079656b5f
        for (i = 0; i < size_N; ++i){
 568:	74727473          	csrrci	s0,0x747,4
 56c:	6c5f6b6f          	jal	s6,f7430 <_stack_start+0xe7430>
        for(i = 0; i < size_N; ++i){
 570:	7361                	lui	t1,0xffff8
 572:	0074                	addi	a3,sp,12
 574:	665f 746e 7079      	0x7079746e665f
        for (i = size_N-1; i >= 0; i = i-1){
 57a:	7365                	lui	t1,0xffff9
 57c:	7300                	flw	fs0,32(a4)
 57e:	6365                	lui	t1,0x19
 580:	6572                	flw	fa0,28(sp)
 582:	5f74                	lw	a3,124(a4)
 584:	5f79656b          	0x5f79656b
            v[i] = v[i] % mod;
 588:	7066                	flw	ft0,120(sp)
        for (i = 0; i < size_N; ++i){
 58a:	5f00                	lw	s0,56(a4)
 58c:	6461                	lui	s0,0x18
            v[i] = v[i] % mod;
 58e:	0064                	addi	s1,sp,12
 590:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
        for (i = 0; i < size_N; ++i){
 596:	69720067          	jr	1687(tp) # 0 <__DYNAMIC>
                product[i] = product[i] + mod;
 59a:	315f 5f00 6567      	0x65675f00315f
            while (product[i] < 0) {
 5a0:	6474                	flw	fa3,76(s0)
            product[i] = product[i] % mod;
 5a2:	7461                	lui	s0,0xffff8
 5a4:	5f65                	li	t5,-7
        for (i = 0; i < size_N; ++i){
 5a6:	7265                	lui	tp,0xffff9
 5a8:	0072                	c.slli	zero,0x1c
            product[i] = product[i] % mod;
 5aa:	675f 6f6c 6162      	0x61626f6c675f
            num_temp[i] = num_temp[i] - product[i];
 5b0:	5f6c                	lw	a1,124(a4)
 5b2:	6d69                	lui	s10,0x1a
 5b4:	7570                	flw	fa2,108(a0)
 5b6:	6572                	flw	fa0,28(sp)
 5b8:	705f 7274 4700      	0x47007274705f
 5be:	554e                	lw	a0,240(sp)
 5c0:	4320                	lw	s0,64(a4)
 5c2:	3731                	jal	4ce <polydiv+0xec>
        for (i = 0; i < size_N; ++i){
 5c4:	3920                	fld	fs0,112(a0)
                num_temp[i] = num_temp[i] + mod;
 5c6:	322e                	fld	ft4,232(sp)
 5c8:	302e                	fld	ft0,232(sp)
            while (num_temp[i] < 0){
 5ca:	2d20                	fld	fs0,88(a0)
 5cc:	616d                	addi	sp,sp,240
 5ce:	6372                	flw	ft6,28(sp)
            num_temp[i] = num_temp[i] % mod;
 5d0:	3d68                	fld	fa0,248(a0)
 5d2:	7672                	flw	fa2,60(sp)
        for (i = 0; i < size_N; ++i){
 5d4:	6d693233          	0x6d693233
            num_temp[i] = num_temp[i] % mod;
 5d8:	6d2d2063          	0x6d2d2063
        for (i = 0; i < size_N; ++i){
 5dc:	6261                	lui	tp,0x18
            q[i] = q[i] + v[i];
 5de:	3d69                	jal	478 <polydiv+0x96>
 5e0:	6c69                	lui	s8,0x1a
 5e2:	3370                	fld	fa2,224(a4)
 5e4:	2032                	fld	ft0,264(sp)
 5e6:	6d2d                	lui	s10,0xb
        for(i = 0; i < size_N; ++i){
 5e8:	646f6d63          	bltu	t5,t1,c42 <ntru_encyrpt+0xc>
            q[i] = q[i] + v[i];
 5ec:	6c65                	lui	s8,0x19
            q[i] = q[i] % mod;
 5ee:	6d3d                	lui	s10,0xf
 5f0:	6465                	lui	s0,0x19
 5f2:	6e61                	lui	t3,0x18
 5f4:	2079                	jal	682 <ext_euclid+0x4e>
        for(i = 0; i < size_N; ++i){
 5f6:	6d2d                	lui	s10,0xb
            if( num_temp[i] != 0 )
 5f8:	7574                	flw	fa3,108(a0)
        for (i = size_N-1; i >= 0; i = i-1){
 5fa:	656e                	flw	fa0,216(sp)
 5fc:	723d                	lui	tp,0xfffef
            v[i] = 0;
 5fe:	656b636f          	jal	t1,b6c54 <_stack_start+0xa6c54>
 602:	2074                	fld	fa3,192(s0)
 604:	672d                	lui	a4,0xb
 606:	2d20                	fld	fs0,88(a0)
        for (i = 0; i < size_N; ++i){
 608:	2d20734f          	0x2d20734f
 60c:	7666                	flw	fa2,120(sp)
 60e:	7369                	lui	t1,0xffffa
        result[i] = q[i];
 610:	6269                	lui	tp,0x1a
 612:	6c69                	lui	s8,0x1a
 614:	7469                	lui	s0,0xffffa
 616:	3d79                	jal	4b4 <polydiv+0xd2>
 618:	6968                	flw	fa0,84(a0)
 61a:	6464                	flw	fs1,76(s0)
    for(i = 0; i < size_N; ++i){
 61c:	6e65                	lui	t3,0x19
        result[i] = q[i];
 61e:	5f00                	lw	s0,56(a4)
    for(i = 0; i < size_N; ++i){
 620:	6e75                	lui	t3,0x1d
        result[i] = num_temp[i-size_N];
 622:	7375                	lui	t1,0xffffd
 624:	6465                	lui	s0,0x19
 626:	725f 6e61 0064      	0x646e61725f
 62c:	696c                	flw	fa1,84(a0)
    for(i = size_N; i < (2*size_N); ++i){
 62e:	656e                	flw	fa0,216(sp)
 630:	5f00                	lw	s0,56(a4)
 632:	00736477          	0x736477
    int ri_2[size]; // MX-ring poly, a
 636:	5f5f 6d74 775f      	0x775f6d745f5f
 63c:	6164                	flw	fs1,68(a0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 63e:	0079                	c.nop	30
 640:	675f 756c 0065      	0x65756c675f
 646:	746e                	flw	fs0,248(sp)
 648:	7572                	flw	fa0,60(sp)
 64a:	655f 636e 7279      	0x7279636e655f
 650:	7470                	flw	fa2,108(s0)
 652:	5f00                	lw	s0,56(a4)
 654:	7a697373          	csrrci	t1,0x7a6,18
 658:	5f65                	li	t5,-7
    int ri_2[size]; // MX-ring poly, a
 65a:	0074                	addi	a3,sp,12
 65c:	6c5f 3436 5f61      	0x5f6134366c5f
    int ri_1[size]; // f-random poly, f[N] = 0, b
 662:	7562                	flw	fa0,56(sp)
 664:	0066                	c.slli	zero,0x19
    int ri[size];
 666:	6564                	flw	fs1,76(a0)
 668:	756e                	flw	fa0,248(sp)
 66a:	006d                	c.nop	27
    int ti_1[size]; // ti_1[0] = 1
 66c:	735f 6769 665f      	0x665f6769735f
    int ti[size];
 672:	6e75                	lui	t3,0x1d
 674:	6e5f0063          	beq	t5,t0,d54 <ntru_deceypt+0x64>
    int qi_1[size];
 678:	7562                	flw	fa0,56(sp)
 67a:	0066                	c.slli	zero,0x19
 67c:	755f 756e 6573      	0x6573756e755f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 682:	0064                	addi	s1,sp,12
 684:	6f70                	flw	fa2,92(a4)
    int ri_2[size]; // MX-ring poly, a
 686:	796c                	flw	fa1,116(a0)
 688:	0052                	c.slli	zero,0x14
    int temp[size];
 68a:	657a6973          	csrrsi	s2,0x657,20
    for (i = 0; i < size; ++i) {
 68e:	445f 5f00 745f      	0x745f5f00445f
        ti_2[i] = 0;
 694:	5f6d                	li	t5,-5
 696:	7369                	lui	t1,0xffffa
    for (i = 0; i < size; ++i) {
 698:	7364                	flw	fs1,100(a4)
 69a:	0074                	addi	a3,sp,12
    ti_1[0] = 1;
 69c:	6c5f 636f 6c61      	0x6c61636f6c5f
        for (i = N + 1; i < (2 * N + 2); ++i) {
 6a2:	6974                	flw	fa3,84(a0)
 6a4:	656d                	lui	a0,0x1b
 6a6:	625f 6675 5f00      	0x5f006675625f
        for (i = 0; i < N + 1; ++i) {
 6ac:	736f6c63          	bltu	t5,s6,de4 <reset_handler+0x4>
        ri_2[i] = polyR[i];
 6b0:	0065                	c.nop	25
 6b2:	725f 3834 5f00      	0x5f003834725f
 6b8:	626d                	lui	tp,0x1b
    for (i = 0; i < size; ++i) {
 6ba:	6f74                	flw	fa3,92(a4)
        ri_2[i] = polyR[i];
 6bc:	735f6377          	0x735f6377
        ri_1[i] = polyf[i];
 6c0:	6174                	flw	fa3,68(a0)
 6c2:	6574                	flw	fa3,76(a0)
 6c4:	5f00                	lw	s0,56(a4)
 6c6:	3570                	fld	fa2,232(a0)
 6c8:	616d0073          	0x616d0073
 6cc:	6e69                	lui	t3,0x1a
 6ce:	5f00                	lw	s0,56(a4)
        ti_2[i] = 0;
 6d0:	745f 5f6d 646d      	0x646d5f6d745f
 6d6:	7961                	lui	s2,0xffff8
        ti_1[i] = 0;
 6d8:	7300                	flw	fs0,32(a4)
 6da:	7a69                	lui	s4,0xffffa
 6dc:	5f65                	li	t5,-7
 6de:	0061                	c.nop	24
    for (i = 0; i < size; ++i) {
 6e0:	657a6973          	csrrsi	s2,0x657,20
                ri_2[i] = ri_2[i] + mod;
 6e4:	625f 6300 7472      	0x74726300625f
            while (ri_2[i] < 0) {
 6ea:	2e30                	fld	fa2,88(a2)
 6ec:	682f0053          	0x682f0053
            ri_2[i] = ri_2[i] % mod;
 6f0:	2f656d6f          	jal	s10,569e6 <_stack_start+0x469e6>
 6f4:	6c65                	lui	s8,0x19
        for (i = 0; i < N + 1; ++i) {
 6f6:	6669                	lui	a2,0x1a
 6f8:	756e                	flw	fa0,248(sp)
 6fa:	2f72                	fld	ft10,280(sp)
 6fc:	6544                	flw	fs1,12(a0)
 6fe:	6f746b73          	csrrsi	s6,0x6f7,8
 702:	2f70                	fld	fa2,216(a4)
        for (i = 0; i < N + 1; ++i) {
 704:	6269                	lui	tp,0x1a
 706:	7865                	lui	a6,0xffff9
 708:	765f 2f32 6269      	0x62692f32765f
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
 70e:	7865                	lui	a6,0xffff9
 710:	6d2d                	lui	s10,0xb
 712:	7361                	lui	t1,0xffff8
 714:	6574                	flw	fa3,76(a0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 716:	2f72                	fld	ft10,280(sp)
 718:	7865                	lui	a6,0xffff9
 71a:	6d61                	lui	s10,0x18
 71c:	6c70                	flw	fa2,92(s0)
 71e:	7365                	lui	t1,0xffff9
 720:	2f77732f          	0x2f77732f
        for (i = 0; i < N + 1; ++i) {
 724:	746e                	flw	fs0,248(sp)
 726:	7572                	flw	fa0,60(sp)
 728:	6c5f 7461 6669      	0x666974616c5f
        for (i = 0; i < N + 1; ++i) {
 72e:	6f68                	flw	fa0,92(a4)
 730:	6e2f6163          	bltu	t5,sp,e12 <reset_handler+0x32>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
 734:	75635f6f          	jal	t5,35e8a <_stack_start+0x25e8a>
 738:	6d6f7473          	csrrci	s0,0x6d6,30
 73c:	4700                	lw	s0,8(a4)
 73e:	554e                	lw	a0,240(sp)
        for (i = 0; i < N + 1; ++i) {
 740:	4120                	lw	s0,64(a0)
 742:	2e322053          	0x2e322053
 746:	          	snez	tp,zero

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <ext_euclid+0x4c>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	0040                	addi	s0,sp,4
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	01e6                	slli	gp,gp,0x19
  1e:	0000                	unimp
  20:	0e56                	slli	t3,t3,0x15
  22:	4220                	lw	s0,64(a2)
  24:	0289                	addi	t0,t0,2
  26:	8856                	mv	a6,s5
  28:	9201                	srli	a2,a2,0x20
  2a:	94049303          	lh	t1,-1728(s1)
  2e:	9705                	srai	a4,a4,0x21
  30:	9508                	0x9508
  32:	9606                	add	a2,a2,ra
  34:	080c4207          	flq	ft4,128(s8) # fffe0080 <_stack_start+0xfffd0080>
  38:	0200                	addi	s0,sp,256
  3a:	0af8                	addi	a4,sp,348
  3c:	020c                	addi	a1,sp,256
  3e:	4220                	lw	s0,64(a2)
  40:	42c8                	lw	a0,4(a3)
  42:	42c9                	li	t0,18
  44:	42d2                	lw	t0,20(sp)
  46:	42d442d3          	0x42d442d3
  4a:	42d5                	li	t0,21
  4c:	42d6                	lw	t0,84(sp)
  4e:	000e4ad7          	0xe4ad7
  52:	0b42                	slli	s6,s6,0x10
  54:	003c                	addi	a5,sp,8
  56:	0000                	unimp
  58:	0000                	unimp
  5a:	0000                	unimp
  5c:	0272                	slli	tp,tp,0x1c
  5e:	0000                	unimp
  60:	0170                	addi	a2,sp,140
  62:	0000                	unimp
  64:	0e56                	slli	t3,t3,0x15
  66:	4e20                	lw	s0,88(a2)
  68:	0188                	addi	a0,sp,192
  6a:	0289                	addi	t0,t0,2
  6c:	0392                	slli	t2,t2,0x4
  6e:	07960493          	addi	s1,a2,121 # 1a079 <_stack_start+0xa079>
  72:	0594                	addi	a3,sp,704
  74:	0695                	addi	a3,a3,5
  76:	0c42                	slli	s8,s8,0x10
  78:	0008                	0x8
  7a:	e602                	fsw	ft0,12(sp)
  7c:	0c0a                	slli	s8,s8,0x2
  7e:	2002                	fld	ft0,0(sp)
  80:	c842                	sw	a6,16(sp)
  82:	c942                	sw	a6,144(sp)
  84:	d242                	sw	a6,36(sp)
  86:	d342                	sw	a6,164(sp)
  88:	d442                	sw	a6,40(sp)
  8a:	d542                	sw	a6,168(sp)
    int line[size_b][size_a + size_b];
  8c:	d642                	sw	a6,44(sp)
  8e:	0e4a                	slli	t3,t3,0x12
  90:	4200                	lw	s0,0(a2)
  92:	0054000b          	0x54000b
  96:	0000                	unimp
  98:	0000                	unimp
  9a:	0000                	unimp
  9c:	03e2                	slli	t2,t2,0x18
  9e:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  a0:	0252                	slli	tp,tp,0x14
  a2:	0000                	unimp
  a4:	0e46                	slli	t3,t3,0x11
    int pola[size_a];
  a6:	5e40                	lw	s0,60(a2)
  a8:	0288                	addi	a0,sp,320
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  aa:	0389                	addi	t2,t2,2
  ac:	0492                	slli	s1,s1,0x4
  ae:	06940593          	addi	a1,s0,105 # 19069 <_stack_start+0x9069>
  b2:	0795                	addi	a5,a5,5
    int line[size_b][size_a + size_b];
  b4:	0a980997          	auipc	s3,0xa980
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  b8:	0b99                	addi	s7,s7,6
  ba:	0c9a                	slli	s9,s9,0x6
    int line[size_b][size_a + size_b];
  bc:	01810d9b          	0x1810d9b
    int pola[size_a];
  c0:	0896                	slli	a7,a7,0x5
  c2:	0c42                	slli	s8,s8,0x10
    int line[size_b][size_a + size_b];
  c4:	0008                	0x8
  c6:	0a010403          	lb	s0,160(sp)
    int pola[size_a];
  ca:	020c                	addi	a1,sp,256
  cc:	4240                	lw	s0,4(a2)
    int polb[size_b];
  ce:	42c1                	li	t0,16
  d0:	42c8                	lw	a0,4(a3)
  d2:	42c9                	li	t0,18
    int pola[size_a];
  d4:	42d2                	lw	t0,20(sp)
    int polb[size_b];
  d6:	42d442d3          	0x42d442d3
    int line[size_b][size_a + size_b];
  da:	42d5                	li	t0,21
  dc:	42d6                	lw	t0,84(sp)
    int pola[size_a];
  de:	42d842d7          	0x42d842d7
    int polb[size_b];
  e2:	42d9                	li	t0,22
            line[i][j] = 0;
  e4:	42da                	lw	t0,148(sp)
  e6:	000e4adb          	0xe4adb
    for (i = 0; i < size_b; ++i){
  ea:	0b42                	slli	s6,s6,0x10
  ec:	0054                	addi	a3,sp,4
            product[j] = 0;
  ee:	0000                	unimp
  f0:	0000                	unimp
  f2:	0000                	unimp
  f4:	0634                	addi	a3,sp,776
    for (i = 0; i < size_b; ++i){
  f6:	0000                	unimp
  f8:	02e4                	addi	s1,sp,332
  fa:	0000                	unimp
    for (i = 0; i < size_a; ++i){
  fc:	0e46                	slli	t3,t3,0x11
  fe:	5e50                	lw	a2,60(a2)
 100:	0288                	addi	a0,sp,320
 102:	0389                	addi	t2,t2,2
    for (i = 0; i < size_b; ++i){
 104:	0492                	slli	s1,s1,0x4
 106:	06940593          	addi	a1,s0,105
    if(star_mult == 1){
 10a:	0795                	addi	a5,a5,5
 10c:	0896                	slli	a7,a7,0x5
 10e:	0b990997          	auipc	s3,0xb990
 112:	0c9a                	slli	s9,s9,0x6
 114:	01810d9b          	0x1810d9b
 118:	0a98                	addi	a4,sp,336
        for (j = size_b -1; j >= 0; j = j-1){
 11a:	0c42                	slli	s8,s8,0x10
 11c:	0008                	0x8
            for (k = size_a-1; k >= 0; k = k-1 ){
 11e:	0a014203          	lbu	tp,160(sp)
            product[j] = 0;
 122:	020c                	addi	a1,sp,256
 124:	4250                	lw	a2,4(a2)
 126:	42c1                	li	t0,16
            line[i][j] = 0;
 128:	42c8                	lw	a0,4(a3)
 12a:	42c9                	li	t0,18
            product[j] = 0;
 12c:	42d2                	lw	t0,20(sp)
 12e:	42d442d3          	0x42d442d3
        for(j = 0; j < size_a + size_b -1; ++j){
 132:	42d5                	li	t0,21
 134:	42d6                	lw	t0,84(sp)
 136:	42d842d7          	0x42d842d7
    for (i = 0; i < size_b; ++i){
 13a:	42d9                	li	t0,22
 13c:	42da                	lw	t0,148(sp)
 13e:	000e4adb          	0xe4adb
        for(j = 0; j < size_a + size_b -1; ++j){
 142:	0b42                	slli	s6,s6,0x10
        pola[i] = a[i];
 144:	0058                	addi	a4,sp,4
 146:	0000                	unimp
 148:	0000                	unimp
 14a:	0000                	unimp
 14c:	0918                	addi	a4,sp,144
            pola[i] = pola[i] + mod;
 14e:	0000                	unimp
 150:	031e                	slli	t1,t1,0x7
        while (pola[i] < 0){
 152:	0000                	unimp
 154:	0e42                	slli	t3,t3,0x10
 156:	0480                	addi	s0,sp,576
 158:	814c                	0x814c
        pola[i] = pola[i] % mod;
 15a:	8801                	andi	s0,s0,0
 15c:	8902                	jr	s2
    for (i = 0; i < size_a; ++i){
 15e:	080c4203          	lbu	tp,128(s8)
        pola[i] = pola[i] % mod;
 162:	7000                	flw	fs0,32(s0)
 164:	0492                	slli	s1,s1,0x4
    for (i = 0; i < size_a; ++i){
 166:	06940593          	addi	a1,s0,105
            pola[i] = pola[i] + mod;
 16a:	0795                	addi	a5,a5,5
        polb[i] = b[i];
 16c:	0896                	slli	a7,a7,0x5
 16e:	0a980997          	auipc	s3,0xa980
 172:	0b990d9b          	0xb990d9b
        while (polb[i] < 0){
 176:	0c9a                	slli	s9,s9,0x6
 178:	0a01f403          	0xa01f403
        polb[i] = polb[i] % mod;
 17c:	020c                	addi	a1,sp,256
 17e:	0480                	addi	s0,sp,576
    for (i = 0; i < size_b; ++i){
 180:	c144                	sw	s1,4(a0)
 182:	c844                	sw	s1,20(s0)
        polb[i] = polb[i] % mod;
 184:	c944                	sw	s1,20(a0)
 186:	d244                	sw	s1,36(a2)
    for (i = 0; i < size_b; ++i){
 188:	d344                	sw	s1,36(a4)
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
 18a:	d444                	sw	s1,44(s0)
 18c:	d544                	sw	s1,44(a0)
    if(star_mult == 1){
 18e:	d644                	sw	s1,44(a2)
        for (j = size_b -1; j >= 0; j = j-1){
 190:	d744                	sw	s1,44(a4)
 192:	d844                	sw	s1,52(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
 194:	d944                	sw	s1,52(a0)
    for (i = 0; i < size_b; ++i){
 196:	da44                	sw	s1,52(a2)
 198:	db44                	sw	s1,52(a4)
 19a:	0e4c                	addi	a1,sp,788
 19c:	4200                	lw	s0,0(a2)
 19e:	0038000b          	0x38000b
 1a2:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
 1a4:	0000                	unimp
 1a6:	0000                	unimp
 1a8:	0c36                	slli	s8,s8,0xd
    for(j = 0; j < size_a + size_b -1; ++j){
 1aa:	0000                	unimp
 1ac:	00ba                	slli	ra,ra,0xe
 1ae:	0000                	unimp
}
 1b0:	0e42                	slli	t3,t3,0x10
 1b2:	01e0                	addi	s0,sp,204
 1b4:	8850                	0x8850
 1b6:	8902                	jr	s2
 1b8:	95049203          	lh	tp,-1712(s1)
 1bc:	01816207          	0x1816207
 1c0:	06940593          	addi	a1,s0,105
 1c4:	5802                	lw	a6,32(sp)
 1c6:	c10a                	sw	sp,128(sp)
 1c8:	c842                	sw	a6,16(sp)
 1ca:	c94e                	sw	s3,144(sp)
 1cc:	d242                	sw	a6,36(sp)
 1ce:	d342                	sw	a6,164(sp)
                line[size_b-1-j][k] = pola[k]*polb[j];
 1d0:	d442                	sw	a6,40(sp)
 1d2:	d542                	sw	a6,168(sp)
 1d4:	0e42                	slli	t3,t3,0x10
 1d6:	4200                	lw	s0,0(a2)
 1d8:	0000000b          	0xb
 1dc:	0044                	addi	s1,sp,4
 1de:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 1e0:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
 1e2:	0000                	unimp
 1e4:	0cf0                	addi	a2,sp,604
 1e6:	0000                	unimp
 1e8:	00ec                	addi	a1,sp,76
            for (k = size_a-1; k >= 0; k = k-1 ){
 1ea:	0000                	unimp
 1ec:	0e42                	slli	t3,t3,0x10
        for (j = size_b -1; j >= 0; j = j-1){
 1ee:	4430                	lw	a2,72(s0)
 1f0:	0288                	addi	a0,sp,320
 1f2:	0694                	addi	a3,sp,832
 1f4:	984a                	add	a6,a6,s2
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f6:	4c0a                	lw	s8,128(sp)
 1f8:	924c0593          	addi	a1,s8,-1756
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 1fc:	9604                	0x9604
 1fe:	5a08                	lw	a0,48(a2)
 200:	0181                	addi	gp,gp,0
 202:	0389                	addi	t2,t2,2
 204:	0795                	addi	a5,a5,5
 206:	52020997          	auipc	s3,0x52020
            for (k = size_a-1; k >= 0; k = k-1 ){
 20a:	c10a                	sw	sp,128(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 20c:	c842                	sw	a6,16(sp)
 20e:	c94e                	sw	s3,144(sp)
 210:	d242                	sw	a6,36(sp)
 212:	d342                	sw	a6,164(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 214:	d442                	sw	a6,40(sp)
 216:	d542                	sw	a6,168(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 218:	d642                	sw	a6,44(sp)
 21a:	d742                	sw	a6,172(sp)
 21c:	d842                	sw	a6,48(sp)
 21e:	0e42                	slli	t3,t3,0x10
            line[i][j] = line[i][j] % mod;
 220:	4200                	lw	s0,0(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
 222:	0020000b          	0x20000b
            line[i][j] = line[i][j] % mod;
 226:	0000                	unimp
 228:	0000                	unimp
 22a:	0000                	unimp
 22c:	0fd8                	addi	a4,sp,980
        for(j = 0; j < size_a + size_b -1; ++j){
 22e:	0000                	unimp
 230:	00f8                	addi	a4,sp,76
    for (i = 0; i < size_b; ++i){
 232:	0000                	unimp
 234:	0e44                	addi	s1,sp,788
 236:	08b0                	addi	a2,sp,88
 238:	8156                	mv	sp,s5
        for(j = 0; j < size_a + size_b -1; ++j){
 23a:	8801                	andi	s0,s0,0
 23c:	0202                	c.slli64	tp
            product[j] += line[i][j];
 23e:	0ac8                	addi	a0,sp,340
 240:	44c1                	li	s1,16
 242:	46c8                	lw	a0,12(a3)
 244:	000e                	c.slli	zero,0x3
        for(i = 0; i < size_b; ++i){
 246:	0b42                	slli	s6,s6,0x10

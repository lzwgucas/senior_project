
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	4ef0006f          	j	d6a <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	4ef0006f          	j	d6e <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	4e70006f          	j	d6a <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	4e30006f          	j	d6a <default_exc_handler>

Disassembly of section .text:

0000008c <polymult>:
static int random_keys[318];
volatile int resultkon[1];

int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){

    int line[size_b][size_a + size_b];
      8c:	00d588b3          	add	a7,a1,a3
      90:	00269813          	slli	a6,a3,0x2
      94:	00289f13          	slli	t5,a7,0x2
      98:	fff88e93          	addi	t4,a7,-1
      9c:	030888b3          	mul	a7,a7,a6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      a0:	1101                	addi	sp,sp,-32
      a2:	cc26                	sw	s1,24(sp)
      a4:	84be                	mv	s1,a5
    int i,j,k;
    int *return_address1;
    int pola[size_a];
      a6:	00259793          	slli	a5,a1,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      aa:	ce22                	sw	s0,28(sp)
      ac:	ca4a                	sw	s2,20(sp)
      ae:	c84e                	sw	s3,16(sp)
      b0:	c652                	sw	s4,12(sp)
      b2:	c05e                	sw	s7,0(sp)
    int line[size_b][size_a + size_b];
      b4:	08bd                	addi	a7,a7,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b6:	c456                	sw	s5,8(sp)
      b8:	c25a                	sw	s6,4(sp)
      ba:	1000                	addi	s0,sp,32
    int line[size_b][size_a + size_b];
      bc:	ff08f893          	andi	a7,a7,-16
    int pola[size_a];
      c0:	07bd                	addi	a5,a5,15
      c2:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
      c4:	41110133          	sub	sp,sp,a7
      c8:	8e0a                	mv	t3,sp
    int pola[size_a];
      ca:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
      ce:	00f80793          	addi	a5,a6,15
      d2:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
      d4:	828a                	mv	t0,sp
    int polb[size_b];
      d6:	40f10133          	sub	sp,sp,a5
    int line[size_b][size_a + size_b];
      da:	fff68313          	addi	t1,a3,-1
    int pola[size_a];
      de:	fff58913          	addi	s2,a1,-1
    int polb[size_b];
      e2:	878a                	mv	a5,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
      e4:	002f5393          	srli	t2,t5,0x2
      e8:	8ff2                	mv	t6,t3
    for (i = 0; i < size_b; ++i){
      ea:	8a72                	mv	s4,t3
      ec:	4981                	li	s3,0
            product[j] = 0;
      ee:	00001b97          	auipc	s7,0x1
      f2:	132b8b93          	addi	s7,s7,306 # 1220 <_edata>
    for (i = 0; i < size_b; ++i){
      f6:	04d9c463          	blt	s3,a3,13e <polymult+0xb2>
      fa:	8996                	mv	s3,t0
        }
    }

    // make mod calculations
    for (i = 0; i < size_a; ++i){
      fc:	4a01                	li	s4,0
      fe:	04ba4363          	blt	s4,a1,144 <polymult+0xb8>
     102:	853e                	mv	a0,a5
        }
        pola[i] = pola[i] % mod;
    }


    for (i = 0; i < size_b; ++i){
     104:	4881                	li	a7,0
     106:	06d8c363          	blt	a7,a3,16c <polymult+0xe0>
        }
        polb[i] = polb[i] % mod;
    }

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     10a:	4605                	li	a2,1
     10c:	97c2                	add	a5,a5,a6
     10e:	08c48063          	beq	s1,a2,18e <polymult+0x102>
     112:	1871                	addi	a6,a6,-4
     114:	ffcf0513          	addi	a0,t5,-4
     118:	9872                	add	a6,a6,t3
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     11a:	06034d63          	bltz	t1,194 <polymult+0x108>
            for (k = size_a-1; k >= 0; k = k-1 ){
     11e:	864a                	mv	a2,s2
     120:	a8d5                	j	214 <polymult+0x188>
            product[j] = 0;
     122:	00289b13          	slli	s6,a7,0x2
     126:	9b5e                	add	s6,s6,s7
            line[i][j] = 0;
     128:	000aa023          	sw	zero,0(s5)
            product[j] = 0;
     12c:	000b2023          	sw	zero,0(s6)
        for(j = 0; j < size_a + size_b -1; ++j){
     130:	0885                	addi	a7,a7,1
     132:	0a91                	addi	s5,s5,4
     134:	ffd8c7e3          	blt	a7,t4,122 <polymult+0x96>
    for (i = 0; i < size_b; ++i){
     138:	0985                	addi	s3,s3,1
     13a:	9a7a                	add	s4,s4,t5
     13c:	bf6d                	j	f6 <polymult+0x6a>
     13e:	8ad2                	mv	s5,s4
        for(j = 0; j < size_a + size_b -1; ++j){
     140:	4881                	li	a7,0
     142:	bfcd                	j	134 <polymult+0xa8>
        pola[i] = a[i];
     144:	002a1893          	slli	a7,s4,0x2
     148:	98aa                	add	a7,a7,a0
     14a:	0008a883          	lw	a7,0(a7)
            pola[i] = pola[i] + mod;
     14e:	0119a023          	sw	a7,0(s3)
        while (pola[i] < 0){
     152:	0009a883          	lw	a7,0(s3)
     156:	0008c963          	bltz	a7,168 <polymult+0xdc>
        pola[i] = pola[i] % mod;
     15a:	02e8e8b3          	rem	a7,a7,a4
    for (i = 0; i < size_a; ++i){
     15e:	0a05                	addi	s4,s4,1
     160:	0991                	addi	s3,s3,4
        pola[i] = pola[i] % mod;
     162:	ff19ae23          	sw	a7,-4(s3)
    for (i = 0; i < size_a; ++i){
     166:	bf61                	j	fe <polymult+0x72>
            pola[i] = pola[i] + mod;
     168:	98ba                	add	a7,a7,a4
     16a:	b7d5                	j	14e <polymult+0xc2>
        polb[i] = b[i];
     16c:	00289593          	slli	a1,a7,0x2
     170:	95b2                	add	a1,a1,a2
     172:	418c                	lw	a1,0(a1)
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     174:	c10c                	sw	a1,0(a0)
        while (polb[i] < 0){
     176:	410c                	lw	a1,0(a0)
     178:	0005c963          	bltz	a1,18a <polymult+0xfe>
        polb[i] = polb[i] % mod;
     17c:	02e5e5b3          	rem	a1,a1,a4
    for (i = 0; i < size_b; ++i){
     180:	0885                	addi	a7,a7,1
     182:	0511                	addi	a0,a0,4
        polb[i] = polb[i] % mod;
     184:	feb52e23          	sw	a1,-4(a0)
    for (i = 0; i < size_b; ++i){
     188:	bfbd                	j	106 <polymult+0x7a>
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     18a:	95ba                	add	a1,a1,a4
     18c:	b7e5                	j	174 <polymult+0xe8>
    if(star_mult == 1){
     18e:	8572                	mv	a0,t3
        for (j = size_b -1; j >= 0; j = j-1){
     190:	06035363          	bgez	t1,1f6 <polymult+0x16a>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
     194:	4601                	li	a2,0
    for (i = 0; i < size_b; ++i){
     196:	0ad64163          	blt	a2,a3,238 <polymult+0x1ac>
     19a:	00001617          	auipc	a2,0x1
     19e:	08660613          	addi	a2,a2,134 # 1220 <_edata>
     1a2:	8532                	mv	a0,a2
            line[i][j] = line[i][j] % mod;
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
     1a4:	4581                	li	a1,0
     1a6:	0bd5cc63          	blt	a1,t4,25e <polymult+0x1d2>
            product[j] += line[i][j];
        }
    }

    //mod calculations
    for(j = 0; j < size_a + size_b -1; ++j){
     1aa:	4781                	li	a5,0
     1ac:	0bd7cb63          	blt	a5,t4,262 <polymult+0x1d6>
    }

    return_address1 = &product[0];

    return return_address1;
}
     1b0:	fe040113          	addi	sp,s0,-32
     1b4:	4472                	lw	s0,28(sp)
     1b6:	44e2                	lw	s1,24(sp)
     1b8:	4952                	lw	s2,20(sp)
     1ba:	49c2                	lw	s3,16(sp)
     1bc:	4a32                	lw	s4,12(sp)
     1be:	4aa2                	lw	s5,8(sp)
     1c0:	4b12                	lw	s6,4(sp)
     1c2:	4b82                	lw	s7,0(sp)
     1c4:	00001517          	auipc	a0,0x1
     1c8:	05c50513          	addi	a0,a0,92 # 1220 <_edata>
     1cc:	6105                	addi	sp,sp,32
     1ce:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     1d0:	00261593          	slli	a1,a2,0x2
     1d4:	00b50833          	add	a6,a0,a1
     1d8:	9596                	add	a1,a1,t0
     1da:	418c                	lw	a1,0(a1)
     1dc:	ffc7a883          	lw	a7,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e0:	167d                	addi	a2,a2,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     1e2:	031585b3          	mul	a1,a1,a7
     1e6:	00b82023          	sw	a1,0(a6)
            for (k = size_a-1; k >= 0; k = k-1 ){
     1ea:	fe0653e3          	bgez	a2,1d0 <polymult+0x144>
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	137d                	addi	t1,t1,-1
     1f0:	17f1                	addi	a5,a5,-4
     1f2:	957a                	add	a0,a0,t5
     1f4:	bf71                	j	190 <polymult+0x104>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f6:	864a                	mv	a2,s2
     1f8:	bfcd                	j	1ea <polymult+0x15e>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     1fa:	00261593          	slli	a1,a2,0x2
     1fe:	00b808b3          	add	a7,a6,a1
     202:	9596                	add	a1,a1,t0
     204:	418c                	lw	a1,0(a1)
     206:	ffc7a483          	lw	s1,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     20a:	167d                	addi	a2,a2,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     20c:	029585b3          	mul	a1,a1,s1
     210:	00b8a023          	sw	a1,0(a7)
            for (k = size_a-1; k >= 0; k = k-1 ){
     214:	fe0653e3          	bgez	a2,1fa <polymult+0x16e>
        for (j = size_b -1; j >= 0; j = j-1){
     218:	137d                	addi	t1,t1,-1
     21a:	17f1                	addi	a5,a5,-4
     21c:	982a                	add	a6,a6,a0
     21e:	bdf5                	j	11a <polymult+0x8e>
            line[i][j] = line[i][j] % mod;
     220:	4388                	lw	a0,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     222:	0585                	addi	a1,a1,1
     224:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
     226:	02e56533          	rem	a0,a0,a4
     22a:	fea7ae23          	sw	a0,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     22e:	ffd5c9e3          	blt	a1,t4,220 <polymult+0x194>
    for (i = 0; i < size_b; ++i){
     232:	0605                	addi	a2,a2,1
     234:	9ffa                	add	t6,t6,t5
     236:	b785                	j	196 <polymult+0x10a>
     238:	87fe                	mv	a5,t6
        for(j = 0; j < size_a + size_b -1; ++j){
     23a:	4581                	li	a1,0
     23c:	bfcd                	j	22e <polymult+0x1a2>
            product[j] += line[i][j];
     23e:	027807b3          	mul	a5,a6,t2
     242:	00052883          	lw	a7,0(a0)
        for(i = 0; i < size_b; ++i){
     246:	0805                	addi	a6,a6,1
            product[j] += line[i][j];
     248:	97ae                	add	a5,a5,a1
     24a:	078a                	slli	a5,a5,0x2
     24c:	97f2                	add	a5,a5,t3
     24e:	439c                	lw	a5,0(a5)
     250:	97c6                	add	a5,a5,a7
     252:	c11c                	sw	a5,0(a0)
        for(i = 0; i < size_b; ++i){
     254:	fed845e3          	blt	a6,a3,23e <polymult+0x1b2>
    for(j = 0; j < size_a + size_b -1; ++j){
     258:	0585                	addi	a1,a1,1
     25a:	0511                	addi	a0,a0,4
     25c:	b7a9                	j	1a6 <polymult+0x11a>
        for(i = 0; i < size_b; ++i){
     25e:	4801                	li	a6,0
     260:	bfd5                	j	254 <polymult+0x1c8>
        product[j] = product[j] % mod;
     262:	4214                	lw	a3,0(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	0785                	addi	a5,a5,1
     266:	0611                	addi	a2,a2,4
        product[j] = product[j] % mod;
     268:	02e6e6b3          	rem	a3,a3,a4
     26c:	fed62e23          	sw	a3,-4(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
     270:	bf35                	j	1ac <polymult+0x120>

00000272 <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
   

    int line[size_b][size_a + size_b];
     272:	00d587b3          	add	a5,a1,a3
     276:	00269813          	slli	a6,a3,0x2
     27a:	00279313          	slli	t1,a5,0x2
     27e:	fff78e93          	addi	t4,a5,-1
     282:	030787b3          	mul	a5,a5,a6
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     286:	1101                	addi	sp,sp,-32
     288:	ce22                	sw	s0,28(sp)
     28a:	cc26                	sw	s1,24(sp)
     28c:	ca4a                	sw	s2,20(sp)
     28e:	c84e                	sw	s3,16(sp)
     290:	c25a                	sw	s6,4(sp)
     292:	c652                	sw	s4,12(sp)
     294:	c456                	sw	s5,8(sp)
     296:	1000                	addi	s0,sp,32
    int line[size_b][size_a + size_b];
     298:	07bd                	addi	a5,a5,15
     29a:	9bc1                	andi	a5,a5,-16
     29c:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     2a0:	00259793          	slli	a5,a1,0x2
     2a4:	07bd                	addi	a5,a5,15
     2a6:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     2a8:	8e0a                	mv	t3,sp
    int pola[size_a];
     2aa:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     2ae:	00f80793          	addi	a5,a6,15
     2b2:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     2b4:	828a                	mv	t0,sp
    int polb[size_b];
     2b6:	40f10133          	sub	sp,sp,a5
    int line[size_b][size_a + size_b];
     2ba:	fff68893          	addi	a7,a3,-1
    int pola[size_a];
     2be:	fff58f93          	addi	t6,a1,-1
    int polb[size_b];
     2c2:	878a                	mv	a5,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
     2c4:	00235f13          	srli	t5,t1,0x2
     2c8:	8972                	mv	s2,t3
    for (i = 0; i < size_b; ++i){
     2ca:	89f2                	mv	s3,t3
     2cc:	4481                	li	s1,0
            product2[j] = 0;
     2ce:	00001b17          	auipc	s6,0x1
     2d2:	1aab0b13          	addi	s6,s6,426 # 1478 <product2>
    for (i = 0; i < size_b; ++i){
     2d6:	04d4c163          	blt	s1,a3,318 <polymult2+0xa6>
        }
    }

    for(i = 0; i < size_a; ++i){
     2da:	4381                	li	t2,0
     2dc:	04b3c163          	blt	t2,a1,31e <polymult2+0xac>
        pola[i] = a[i];
    }


    for(i = 0; i < size_b; ++i){
     2e0:	4581                	li	a1,0
     2e2:	04d5c863          	blt	a1,a3,332 <polymult2+0xc0>
        polb[i] = b[i];
    }


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     2e6:	4605                	li	a2,1
     2e8:	97c2                	add	a5,a5,a6
     2ea:	06c70f63          	beq	a4,a2,368 <polymult2+0xf6>
     2ee:	1871                	addi	a6,a6,-4
     2f0:	1371                	addi	t1,t1,-4
     2f2:	9872                	add	a6,a6,t3
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     2f4:	0608cc63          	bltz	a7,36c <polymult2+0xfa>
            for (k = size_a-1; k >= 0; k = k-1 ){
     2f8:	877e                	mv	a4,t6
     2fa:	a86d                	j	3b4 <polymult2+0x142>
            product2[j] = 0;
     2fc:	00239a93          	slli	s5,t2,0x2
     300:	9ada                	add	s5,s5,s6
            line[i][j] = 0;
     302:	000a2023          	sw	zero,0(s4)
            product2[j] = 0;
     306:	000aa023          	sw	zero,0(s5)
        for(j = 0; j < size_a + size_b -1; ++j){
     30a:	0385                	addi	t2,t2,1
     30c:	0a11                	addi	s4,s4,4
     30e:	ffd3c7e3          	blt	t2,t4,2fc <polymult2+0x8a>
    for (i = 0; i < size_b; ++i){
     312:	0485                	addi	s1,s1,1
     314:	999a                	add	s3,s3,t1
     316:	b7c1                	j	2d6 <polymult2+0x64>
     318:	8a4e                	mv	s4,s3
        for(j = 0; j < size_a + size_b -1; ++j){
     31a:	4381                	li	t2,0
     31c:	bfcd                	j	30e <polymult2+0x9c>
        pola[i] = a[i];
     31e:	00239493          	slli	s1,t2,0x2
     322:	009289b3          	add	s3,t0,s1
     326:	94aa                	add	s1,s1,a0
     328:	4084                	lw	s1,0(s1)
    for(i = 0; i < size_a; ++i){
     32a:	0385                	addi	t2,t2,1
        pola[i] = a[i];
     32c:	0099a023          	sw	s1,0(s3)
    for(i = 0; i < size_a; ++i){
     330:	b775                	j	2dc <polymult2+0x6a>
        polb[i] = b[i];
     332:	00259513          	slli	a0,a1,0x2
     336:	00a783b3          	add	t2,a5,a0
     33a:	9532                	add	a0,a0,a2
     33c:	4108                	lw	a0,0(a0)
    for(i = 0; i < size_b; ++i){
     33e:	0585                	addi	a1,a1,1
        polb[i] = b[i];
     340:	00a3a023          	sw	a0,0(t2)
    for(i = 0; i < size_b; ++i){
     344:	bf79                	j	2e2 <polymult2+0x70>
                line[size_b-1-j][k] = pola[k]*polb[j];
     346:	00271613          	slli	a2,a4,0x2
     34a:	00c905b3          	add	a1,s2,a2
     34e:	9616                	add	a2,a2,t0
     350:	4210                	lw	a2,0(a2)
     352:	ffc7a503          	lw	a0,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     356:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     358:	02a60633          	mul	a2,a2,a0
     35c:	c190                	sw	a2,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     35e:	fe0754e3          	bgez	a4,346 <polymult2+0xd4>
        for (j = size_b -1; j >= 0; j = j-1){
     362:	18fd                	addi	a7,a7,-1
     364:	17f1                	addi	a5,a5,-4
     366:	991a                	add	s2,s2,t1
     368:	0208d863          	bgez	a7,398 <polymult2+0x126>
     36c:	00001617          	auipc	a2,0x1
     370:	10c60613          	addi	a2,a2,268 # 1478 <product2>
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
        for(i = 0; i < size_b; ++i){
     374:	4701                	li	a4,0
    for(j = 0; j < size_a + size_b -1; ++j){
     376:	07d74463          	blt	a4,t4,3de <polymult2+0x16c>


    return_address2 = &product2[0];

    return return_address2;
}
     37a:	fe040113          	addi	sp,s0,-32
     37e:	4472                	lw	s0,28(sp)
     380:	44e2                	lw	s1,24(sp)
     382:	4952                	lw	s2,20(sp)
     384:	49c2                	lw	s3,16(sp)
     386:	4a32                	lw	s4,12(sp)
     388:	4aa2                	lw	s5,8(sp)
     38a:	4b12                	lw	s6,4(sp)
     38c:	00001517          	auipc	a0,0x1
     390:	0ec50513          	addi	a0,a0,236 # 1478 <product2>
     394:	6105                	addi	sp,sp,32
     396:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
     398:	877e                	mv	a4,t6
     39a:	b7d1                	j	35e <polymult2+0xec>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     39c:	00271613          	slli	a2,a4,0x2
     3a0:	00c805b3          	add	a1,a6,a2
     3a4:	9616                	add	a2,a2,t0
     3a6:	4210                	lw	a2,0(a2)
     3a8:	ffc7a503          	lw	a0,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ac:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3ae:	02a60633          	mul	a2,a2,a0
     3b2:	c190                	sw	a2,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b4:	fe0754e3          	bgez	a4,39c <polymult2+0x12a>
        for (j = size_b -1; j >= 0; j = j-1){
     3b8:	18fd                	addi	a7,a7,-1
     3ba:	17f1                	addi	a5,a5,-4
     3bc:	981a                	add	a6,a6,t1
     3be:	bf1d                	j	2f4 <polymult2+0x82>
            product2[j] += line[i][j];
     3c0:	03e587b3          	mul	a5,a1,t5
     3c4:	4208                	lw	a0,0(a2)
        for(i = 0; i < size_b; ++i){
     3c6:	0585                	addi	a1,a1,1
            product2[j] += line[i][j];
     3c8:	97ba                	add	a5,a5,a4
     3ca:	078a                	slli	a5,a5,0x2
     3cc:	97f2                	add	a5,a5,t3
     3ce:	439c                	lw	a5,0(a5)
     3d0:	97aa                	add	a5,a5,a0
     3d2:	c21c                	sw	a5,0(a2)
        for(i = 0; i < size_b; ++i){
     3d4:	fed5c6e3          	blt	a1,a3,3c0 <polymult2+0x14e>
    for(j = 0; j < size_a + size_b -1; ++j){
     3d8:	0705                	addi	a4,a4,1
     3da:	0611                	addi	a2,a2,4
     3dc:	bf69                	j	376 <polymult2+0x104>
        for(i = 0; i < size_b; ++i){
     3de:	4581                	li	a1,0
     3e0:	bfd5                	j	3d4 <polymult2+0x162>

000003e2 <polydiv>:
 

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     3e2:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3e6:	7139                	addi	sp,sp,-64
    int v[size_N];
     3e8:	07bd                	addi	a5,a5,15
     3ea:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3ec:	dc22                	sw	s0,56(sp)
     3ee:	da26                	sw	s1,52(sp)
     3f0:	d84a                	sw	s2,48(sp)
     3f2:	d64e                	sw	s3,44(sp)
     3f4:	d452                	sw	s4,40(sp)
     3f6:	d256                	sw	s5,36(sp)
     3f8:	ce5e                	sw	s7,28(sp)
     3fa:	cc62                	sw	s8,24(sp)
     3fc:	ca66                	sw	s9,20(sp)
     3fe:	c86a                	sw	s10,16(sp)
     400:	c66e                	sw	s11,12(sp)
     402:	de06                	sw	ra,60(sp)
     404:	d05a                	sw	s6,32(sp)
     406:	0080                	addi	s0,sp,64
    int v[size_N];
     408:	40f10133          	sub	sp,sp,a5
     40c:	8d8a                	mv	s11,sp
    int q[size_N];
     40e:	40f10133          	sub	sp,sp,a5
     412:	8c0a                	mv	s8,sp
    int *product;
    int num_temp[size_N];
     414:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     418:	00269793          	slli	a5,a3,0x2
     41c:	07bd                	addi	a5,a5,15
     41e:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
     420:	8a8a                	mv	s5,sp
    int denum_temp[size_D];
     422:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     426:	89b6                	mv	s3,a3
     428:	893a                	mv	s2,a4
    int denum_temp[size_D];
     42a:	fff68a13          	addi	s4,a3,-1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     42e:	84ae                	mv	s1,a1
    int v[size_N];
     430:	fff58c93          	addi	s9,a1,-1
    int denum_temp[size_D];
     434:	8d0a                	mv	s10,sp


    // make mod calculation for coefficents
    for (i = 0; i < size_N; ++i){
     436:	8bd6                	mv	s7,s5
     438:	8756                	mv	a4,s5
     43a:	4681                	li	a3,0
     43c:	0296c663          	blt	a3,s1,468 <polydiv+0x86>
     440:	876a                	mv	a4,s10
        num_temp[i] = num_temp[i] % mod;
    }


    // make mod calculation for coefficents
    for (i = 0; i < size_D; ++i) {
     442:	4681                	li	a3,0
     444:	0536c363          	blt	a3,s3,48a <polydiv+0xa8>
            denum_temp[i] = denum_temp[i] + mod;
        }
        denum_temp[i] = denum_temp[i] % mod;
    }

    for (i = 0; i < size_N; ++i){
     448:	4781                	li	a5,0
     44a:	0697c163          	blt	a5,s1,4ac <polydiv+0xca>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     44e:	002a1793          	slli	a5,s4,0x2
     452:	97ea                	add	a5,a5,s10
     454:	4398                	lw	a4,0(a5)
     456:	060a5663          	bgez	s4,4c2 <polydiv+0xe0>
    for (i = 0; i < size_N; ++i){
     45a:	4781                	li	a5,0
     45c:	4b01                	li	s6,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     45e:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     460:	072b4463          	blt	s6,s2,4c8 <polydiv+0xe6>
     464:	87e6                	mv	a5,s9
     466:	a895                	j	4da <polydiv+0xf8>
        num_temp[i] = num[i];
     468:	00269793          	slli	a5,a3,0x2
     46c:	97aa                	add	a5,a5,a0
     46e:	439c                	lw	a5,0(a5)
            num_temp[i] = num_temp[i] + mod;
     470:	c31c                	sw	a5,0(a4)
        while (num_temp[i] < 0) {
     472:	431c                	lw	a5,0(a4)
     474:	0007c963          	bltz	a5,486 <polydiv+0xa4>
        num_temp[i] = num_temp[i] % mod;
     478:	0327e7b3          	rem	a5,a5,s2
    for (i = 0; i < size_N; ++i){
     47c:	0685                	addi	a3,a3,1
     47e:	0711                	addi	a4,a4,4
        num_temp[i] = num_temp[i] % mod;
     480:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_N; ++i){
     484:	bf65                	j	43c <polydiv+0x5a>
            num_temp[i] = num_temp[i] + mod;
     486:	97ca                	add	a5,a5,s2
     488:	b7e5                	j	470 <polydiv+0x8e>
        denum_temp[i] = denum[i];
     48a:	00269793          	slli	a5,a3,0x2
     48e:	97b2                	add	a5,a5,a2
     490:	439c                	lw	a5,0(a5)
            denum_temp[i] = denum_temp[i] + mod;
     492:	c31c                	sw	a5,0(a4)
        while (denum_temp[i] < 0) {
     494:	431c                	lw	a5,0(a4)
     496:	0007c963          	bltz	a5,4a8 <polydiv+0xc6>
        denum_temp[i] = denum_temp[i] % mod;
     49a:	0327e7b3          	rem	a5,a5,s2
    for (i = 0; i < size_D; ++i) {
     49e:	0685                	addi	a3,a3,1
     4a0:	0711                	addi	a4,a4,4
        denum_temp[i] = denum_temp[i] % mod;
     4a2:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_D; ++i) {
     4a6:	bf79                	j	444 <polydiv+0x62>
            denum_temp[i] = denum_temp[i] + mod;
     4a8:	97ca                	add	a5,a5,s2
     4aa:	b7e5                	j	492 <polydiv+0xb0>
        q[i] = 0;
     4ac:	00279713          	slli	a4,a5,0x2
     4b0:	00ec06b3          	add	a3,s8,a4
        v[i] = 0;
     4b4:	976e                	add	a4,a4,s11
        q[i] = 0;
     4b6:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     4ba:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     4be:	0785                	addi	a5,a5,1
     4c0:	b769                	j	44a <polydiv+0x68>
        if( denum_temp[i] != 0 )
     4c2:	ff41                	bnez	a4,45a <polydiv+0x78>
    for (i = size_D-1; i >= 0; i = i-1){
     4c4:	1a7d                	addi	s4,s4,-1
     4c6:	b761                	j	44e <polydiv+0x6c>
        if ( (b_N*u)%mod == 1 )
     4c8:	0327e633          	rem	a2,a5,s2
     4cc:	97ba                	add	a5,a5,a4
     4ce:	f8d60be3          	beq	a2,a3,464 <polydiv+0x82>
    for (u = 0; u < mod; ++u){
     4d2:	0b05                	addi	s6,s6,1
     4d4:	b771                	j	460 <polydiv+0x7e>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     4d6:	eb01                	bnez	a4,4e6 <polydiv+0x104>
    for (i = size_N-1; i >= 0; i = i-1){
     4d8:	17fd                	addi	a5,a5,-1
     4da:	00279713          	slli	a4,a5,0x2
     4de:	9756                	add	a4,a4,s5
     4e0:	4318                	lw	a4,0(a4)
     4e2:	fe07dae3          	bgez	a5,4d6 <polydiv+0xf4>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     4e6:	0547d663          	bge	a5,s4,532 <polydiv+0x150>
        }


    } //End While-1

    for(i = 0; i < size_N; ++i){
     4ea:	4781                	li	a5,0
        result[i] = q[i];
     4ec:	00001697          	auipc	a3,0x1
     4f0:	1e468693          	addi	a3,a3,484 # 16d0 <result>
    for(i = 0; i < size_N; ++i){
     4f4:	1097ce63          	blt	a5,s1,610 <polydiv+0x22e>
    }
    for(i = size_N; i < (2*size_N); ++i){
     4f8:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
     4fc:	00001697          	auipc	a3,0x1
     500:	1d468693          	addi	a3,a3,468 # 16d0 <result>
    for(i = size_N; i < (2*size_N); ++i){
     504:	10e4cf63          	blt	s1,a4,622 <polydiv+0x240>
    }

    return_address3 = &result[0];

    return return_address3;
}
     508:	fc040113          	addi	sp,s0,-64
     50c:	50f2                	lw	ra,60(sp)
     50e:	5462                	lw	s0,56(sp)
     510:	54d2                	lw	s1,52(sp)
     512:	5942                	lw	s2,48(sp)
     514:	59b2                	lw	s3,44(sp)
     516:	5a22                	lw	s4,40(sp)
     518:	5a92                	lw	s5,36(sp)
     51a:	5b02                	lw	s6,32(sp)
     51c:	4bf2                	lw	s7,28(sp)
     51e:	4c62                	lw	s8,24(sp)
     520:	4cd2                	lw	s9,20(sp)
     522:	4d42                	lw	s10,16(sp)
     524:	4db2                	lw	s11,12(sp)
     526:	00001517          	auipc	a0,0x1
     52a:	1aa50513          	addi	a0,a0,426 # 16d0 <result>
     52e:	6121                	addi	sp,sp,64
     530:	8082                	ret
        v[(d-d2)] = u*r_d;
     532:	03670733          	mul	a4,a4,s6
     536:	414787b3          	sub	a5,a5,s4
     53a:	078a                	slli	a5,a5,0x2
     53c:	97ee                	add	a5,a5,s11
     53e:	c398                	sw	a4,0(a5)
        for (i = 0; i < size_N; ++i){
     540:	87ee                	mv	a5,s11
     542:	4701                	li	a4,0
     544:	04974263          	blt	a4,s1,588 <polydiv+0x1a6>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     548:	874a                	mv	a4,s2
     54a:	86ce                	mv	a3,s3
     54c:	4781                	li	a5,0
     54e:	866e                	mv	a2,s11
     550:	85ce                	mv	a1,s3
     552:	856a                	mv	a0,s10
     554:	3e25                	jal	8c <polymult>
        for (i = 0; i < size_N; ++i){
     556:	872a                	mv	a4,a0
     558:	4681                	li	a3,0
     55a:	0496c163          	blt	a3,s1,59c <polydiv+0x1ba>
     55e:	8756                	mv	a4,s5
        for (i = 0; i < size_N; ++i){
     560:	4781                	li	a5,0
     562:	0497c763          	blt	a5,s1,5b0 <polydiv+0x1ce>
     566:	8756                	mv	a4,s5
        for (i = 0; i < size_N; ++i){
     568:	4681                	li	a3,0
     56a:	0696c063          	blt	a3,s1,5ca <polydiv+0x1e8>
     56e:	86e2                	mv	a3,s8
        for(i = 0; i < size_N; ++i){
     570:	4701                	li	a4,0
     572:	06974663          	blt	a4,s1,5de <polydiv+0x1fc>
        for (i = size_N-1; i >= 0; i = i-1){
     576:	87e6                	mv	a5,s9
     578:	00279713          	slli	a4,a5,0x2
     57c:	9756                	add	a4,a4,s5
     57e:	4318                	lw	a4,0(a4)
     580:	0607dc63          	bgez	a5,5f8 <polydiv+0x216>
     584:	4681                	li	a3,0
     586:	a051                	j	60a <polydiv+0x228>
            v[i] = v[i] % mod;
     588:	4394                	lw	a3,0(a5)
        for (i = 0; i < size_N; ++i){
     58a:	0705                	addi	a4,a4,1
     58c:	0791                	addi	a5,a5,4
            v[i] = v[i] % mod;
     58e:	0326e6b3          	rem	a3,a3,s2
     592:	fed7ae23          	sw	a3,-4(a5)
        for (i = 0; i < size_N; ++i){
     596:	b77d                	j	544 <polydiv+0x162>
                product[i] = product[i] + mod;
     598:	97ca                	add	a5,a5,s2
     59a:	c31c                	sw	a5,0(a4)
            while (product[i] < 0) {
     59c:	431c                	lw	a5,0(a4)
     59e:	fe07cde3          	bltz	a5,598 <polydiv+0x1b6>
            product[i] = product[i] % mod;
     5a2:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < size_N; ++i){
     5a6:	0685                	addi	a3,a3,1
     5a8:	0711                	addi	a4,a4,4
            product[i] = product[i] % mod;
     5aa:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     5ae:	b775                	j	55a <polydiv+0x178>
            num_temp[i] = num_temp[i] - product[i];
     5b0:	00279613          	slli	a2,a5,0x2
     5b4:	962a                	add	a2,a2,a0
     5b6:	4314                	lw	a3,0(a4)
     5b8:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
     5ba:	0785                	addi	a5,a5,1
     5bc:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
     5be:	8e91                	sub	a3,a3,a2
     5c0:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
     5c4:	bf79                	j	562 <polydiv+0x180>
                num_temp[i] = num_temp[i] + mod;
     5c6:	97ca                	add	a5,a5,s2
     5c8:	c31c                	sw	a5,0(a4)
            while (num_temp[i] < 0){
     5ca:	431c                	lw	a5,0(a4)
     5cc:	fe07cde3          	bltz	a5,5c6 <polydiv+0x1e4>
            num_temp[i] = num_temp[i] % mod;
     5d0:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < size_N; ++i){
     5d4:	0685                	addi	a3,a3,1
     5d6:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] % mod;
     5d8:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     5dc:	b779                	j	56a <polydiv+0x188>
            q[i] = q[i] + v[i];
     5de:	00271793          	slli	a5,a4,0x2
     5e2:	97ee                	add	a5,a5,s11
     5e4:	4290                	lw	a2,0(a3)
     5e6:	439c                	lw	a5,0(a5)
        for(i = 0; i < size_N; ++i){
     5e8:	0705                	addi	a4,a4,1
     5ea:	0691                	addi	a3,a3,4
            q[i] = q[i] + v[i];
     5ec:	97b2                	add	a5,a5,a2
            q[i] = q[i] % mod;
     5ee:	0327e7b3          	rem	a5,a5,s2
     5f2:	fef6ae23          	sw	a5,-4(a3)
        for(i = 0; i < size_N; ++i){
     5f6:	bfb5                	j	572 <polydiv+0x190>
            if( num_temp[i] != 0 )
     5f8:	f751                	bnez	a4,584 <polydiv+0x1a2>
        for (i = size_N-1; i >= 0; i = i-1){
     5fa:	17fd                	addi	a5,a5,-1
     5fc:	bfb5                	j	578 <polydiv+0x196>
            v[i] = 0;
     5fe:	00269613          	slli	a2,a3,0x2
     602:	966e                	add	a2,a2,s11
     604:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     608:	0685                	addi	a3,a3,1
     60a:	fe96cae3          	blt	a3,s1,5fe <polydiv+0x21c>
     60e:	bde1                	j	4e6 <polydiv+0x104>
        result[i] = q[i];
     610:	00279713          	slli	a4,a5,0x2
     614:	00e68633          	add	a2,a3,a4
     618:	9762                	add	a4,a4,s8
     61a:	4318                	lw	a4,0(a4)
    for(i = 0; i < size_N; ++i){
     61c:	0785                	addi	a5,a5,1
        result[i] = q[i];
     61e:	c218                	sw	a4,0(a2)
    for(i = 0; i < size_N; ++i){
     620:	bdd1                	j	4f4 <polydiv+0x112>
        result[i] = num_temp[i-size_N];
     622:	000ba603          	lw	a2,0(s7)
     626:	00249793          	slli	a5,s1,0x2
     62a:	97b6                	add	a5,a5,a3
     62c:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     62e:	0485                	addi	s1,s1,1
     630:	0b91                	addi	s7,s7,4
     632:	bdc9                	j	504 <polydiv+0x122>

00000634 <ext_euclid>:
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
   

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     634:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     638:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     63a:	07bd                	addi	a5,a5,15
     63c:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     63e:	c4a2                	sw	s0,72(sp)
     640:	c2a6                	sw	s1,68(sp)
     642:	c0ca                	sw	s2,64(sp)
     644:	de4e                	sw	s3,60(sp)
     646:	dc52                	sw	s4,56(sp)
     648:	da56                	sw	s5,52(sp)
     64a:	d85a                	sw	s6,48(sp)
     64c:	d65e                	sw	s7,44(sp)
     64e:	d266                	sw	s9,36(sp)
     650:	d06a                	sw	s10,32(sp)
     652:	ce6e                	sw	s11,28(sp)
     654:	c686                	sw	ra,76(sp)
     656:	d462                	sw	s8,40(sp)
     658:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     65a:	40f10133          	sub	sp,sp,a5
     65e:	8d0a                	mv	s10,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     660:	40f10133          	sub	sp,sp,a5
     664:	8d8a                	mv	s11,sp
    int ri[size];
     666:	40f10133          	sub	sp,sp,a5
     66a:	8b0a                	mv	s6,sp

    int ti_1[size]; // ti_1[0] = 1
     66c:	40f10133          	sub	sp,sp,a5
     670:	8a0a                	mv	s4,sp
    int ti[size];
     672:	40f10133          	sub	sp,sp,a5
     676:	8b8a                	mv	s7,sp
    int qi_1[size];
     678:	40f10133          	sub	sp,sp,a5
     67c:	8a8a                	mv	s5,sp
    int temp[size];
     67e:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     682:	84b6                	mv	s1,a3
     684:	8932                	mv	s2,a2
    int ri_2[size]; // MX-ring poly, a
     686:	fff60993          	addi	s3,a2,-1
    int temp[size];
     68a:	8c8a                	mv	s9,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     68c:	4781                	li	a5,0
     68e:	4701                	li	a4,0
        ri_2[i] = polyR[i];
        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     690:	00001697          	auipc	a3,0x1
     694:	29868693          	addi	a3,a3,664 # 1928 <ti_2>
    for (i = 0; i < size; ++i) {
     698:	01274b63          	blt	a4,s2,6ae <ext_euclid+0x7a>
    }
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     69c:	4785                	li	a5,1
     69e:	00fa2023          	sw	a5,0(s4)
            ri_1[i] = ri_1[i] % mod;
        }


        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6a2:	00191793          	slli	a5,s2,0x1
     6a6:	faf42e23          	sw	a5,-68(s0)
        for (i = 0; i < N + 1; ++i) {
     6aa:	4681                	li	a3,0
     6ac:	a0a9                	j	6f6 <ext_euclid+0xc2>
        ri_2[i] = polyR[i];
     6ae:	00f508b3          	add	a7,a0,a5
     6b2:	0008a883          	lw	a7,0(a7)
     6b6:	00fd0633          	add	a2,s10,a5
    for (i = 0; i < size; ++i) {
     6ba:	0705                	addi	a4,a4,1
        ri_2[i] = polyR[i];
     6bc:	01162023          	sw	a7,0(a2)
        ri_1[i] = polyf[i];
     6c0:	00f588b3          	add	a7,a1,a5
     6c4:	0008a883          	lw	a7,0(a7)
     6c8:	00fd8633          	add	a2,s11,a5
     6cc:	01162023          	sw	a7,0(a2)
        ti_2[i] = 0;
     6d0:	00f68633          	add	a2,a3,a5
     6d4:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     6d8:	00fa0633          	add	a2,s4,a5
     6dc:	00062023          	sw	zero,0(a2)
    for (i = 0; i < size; ++i) {
     6e0:	0791                	addi	a5,a5,4
     6e2:	bf5d                	j	698 <ext_euclid+0x64>
                ri_2[i] = ri_2[i] + mod;
     6e4:	97a6                	add	a5,a5,s1
     6e6:	c31c                	sw	a5,0(a4)
            while (ri_2[i] < 0) {
     6e8:	431c                	lw	a5,0(a4)
     6ea:	fe07cde3          	bltz	a5,6e4 <ext_euclid+0xb0>
            ri_2[i] = ri_2[i] % mod;
     6ee:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     6f2:	0685                	addi	a3,a3,1
            ri_2[i] = ri_2[i] % mod;
     6f4:	c31c                	sw	a5,0(a4)
        for (i = 0; i < N + 1; ++i) {
     6f6:	00d9c663          	blt	s3,a3,702 <ext_euclid+0xce>
     6fa:	00269713          	slli	a4,a3,0x2
     6fe:	976a                	add	a4,a4,s10
     700:	b7e5                	j	6e8 <ext_euclid+0xb4>
     702:	876e                	mv	a4,s11
        for (i = 0; i < N + 1; ++i) {
     704:	4681                	li	a3,0
     706:	0cd9d063          	bge	s3,a3,7c6 <ext_euclid+0x192>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     70a:	8726                	mv	a4,s1
     70c:	86ca                	mv	a3,s2
     70e:	866e                	mv	a2,s11
     710:	85ca                	mv	a1,s2
     712:	856a                	mv	a0,s10
     714:	31f9                	jal	3e2 <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     716:	875a                	mv	a4,s6
     718:	87ca                	mv	a5,s2
     71a:	fbc42683          	lw	a3,-68(s0)
     71e:	0ad7ce63          	blt	a5,a3,7da <ext_euclid+0x1a6>
     722:	4781                	li	a5,0
            ri[i - (N + 1)] = res[i];
        }

/// qi_1 = (ri_2 - ri)/ri_1; ///

        for (i = 0; i < N + 1; ++i) {
     724:	4701                	li	a4,0
     726:	0ce9d363          	bge	s3,a4,7ec <ext_euclid+0x1b8>
     72a:	8c66                	mv	s8,s9
     72c:	8766                	mv	a4,s9
            temp[i] = ri_2[i] - ri[i];
        }

        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     72e:	4681                	li	a3,0
     730:	0cd9dd63          	bge	s3,a3,80a <ext_euclid+0x1d6>
            }
            temp[i] = temp[i] % mod;
        }


        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     734:	8726                	mv	a4,s1
     736:	86ca                	mv	a3,s2
     738:	866e                	mv	a2,s11
     73a:	85ca                	mv	a1,s2
     73c:	8566                	mv	a0,s9
     73e:	3155                	jal	3e2 <polydiv>
        for (i = 0; i < N + 1; ++i) {
     740:	4781                	li	a5,0
     742:	0cf9de63          	bge	s3,a5,81e <ext_euclid+0x1ea>
     746:	8756                	mv	a4,s5
            qi_1[i] = res1[i];
        }


        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     748:	4681                	li	a3,0
     74a:	0ed9d563          	bge	s3,a3,834 <ext_euclid+0x200>
        }


/// ti = ti_2 - qi_1*ti_1; ///

        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     74e:	4781                	li	a5,0
     750:	8726                	mv	a4,s1
     752:	86ca                	mv	a3,s2
     754:	8652                	mv	a2,s4
     756:	85ca                	mv	a1,s2
     758:	8556                	mv	a0,s5
     75a:	3a0d                	jal	8c <polymult>
        for (i = 0; i < N + 1; ++i) {
     75c:	4781                	li	a5,0
     75e:	0ef9d563          	bge	s3,a5,848 <ext_euclid+0x214>
            temp[i] = res2[i];
        }
        // make mod calculations
        for (i = 0; i < N + 1; ++i) {
     762:	4701                	li	a4,0
     764:	0ee9de63          	bge	s3,a4,860 <ext_euclid+0x22c>
     768:	4781                	li	a5,0
            }
            temp[i] = temp[i] % mod;
        }


        for (i = 0; i < N + 1; ++i) {
     76a:	4701                	li	a4,0
     76c:	10e9d563          	bge	s3,a4,876 <ext_euclid+0x242>
     770:	875e                	mv	a4,s7
            ti[i] = ti_2[i] - temp[i];
        }

        for (i = 0; i < N + 1; ++i) {
     772:	4681                	li	a3,0
     774:	12d9d363          	bge	s3,a3,89a <ext_euclid+0x266>
     778:	4781                	li	a5,0
        controlR = 0;
     77a:	4701                	li	a4,0
            ti[i] = ti[i] % mod;
        }

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

        for (i = 0; i < N + 1; ++i) {
     77c:	4681                	li	a3,0
     77e:	12d9d863          	bge	s3,a3,8ae <ext_euclid+0x27a>
    while (controlR != 0) {
     782:	f705                	bnez	a4,6aa <ext_euclid+0x76>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     784:	4781                	li	a5,0
            if (((ri_2[0] * j) % mod) == 1)
     786:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     788:	1697c463          	blt	a5,s1,8f0 <ext_euclid+0x2bc>
     78c:	00001617          	auipc	a2,0x1
     790:	19c60613          	addi	a2,a2,412 # 1928 <ti_2>
            if (ri_2[i] != 0)
                //	printf("** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! ***\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     794:	16e9d863          	bge	s3,a4,904 <ext_euclid+0x2d0>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     798:	fb040113          	addi	sp,s0,-80
     79c:	40b6                	lw	ra,76(sp)
     79e:	4426                	lw	s0,72(sp)
     7a0:	4496                	lw	s1,68(sp)
     7a2:	4906                	lw	s2,64(sp)
     7a4:	59f2                	lw	s3,60(sp)
     7a6:	5a62                	lw	s4,56(sp)
     7a8:	5ad2                	lw	s5,52(sp)
     7aa:	5b42                	lw	s6,48(sp)
     7ac:	5bb2                	lw	s7,44(sp)
     7ae:	5c22                	lw	s8,40(sp)
     7b0:	5c92                	lw	s9,36(sp)
     7b2:	5d02                	lw	s10,32(sp)
     7b4:	4df2                	lw	s11,28(sp)
     7b6:	00001517          	auipc	a0,0x1
     7ba:	17250513          	addi	a0,a0,370 # 1928 <ti_2>
     7be:	6161                	addi	sp,sp,80
     7c0:	8082                	ret
                ri_1[i] = ri_1[i] + mod;
     7c2:	97a6                	add	a5,a5,s1
     7c4:	c31c                	sw	a5,0(a4)
            while (ri_1[i] < 0) {
     7c6:	431c                	lw	a5,0(a4)
     7c8:	fe07cde3          	bltz	a5,7c2 <ext_euclid+0x18e>
            ri_1[i] = ri_1[i] % mod;
     7cc:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     7d0:	0685                	addi	a3,a3,1
     7d2:	0711                	addi	a4,a4,4
            ri_1[i] = ri_1[i] % mod;
     7d4:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     7d8:	b73d                	j	706 <ext_euclid+0xd2>
            ri[i - (N + 1)] = res[i];
     7da:	00279693          	slli	a3,a5,0x2
     7de:	96aa                	add	a3,a3,a0
     7e0:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7e2:	0785                	addi	a5,a5,1
     7e4:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     7e6:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7ea:	bf05                	j	71a <ext_euclid+0xe6>
            temp[i] = ri_2[i] - ri[i];
     7ec:	00fd06b3          	add	a3,s10,a5
     7f0:	00fb05b3          	add	a1,s6,a5
     7f4:	4294                	lw	a3,0(a3)
     7f6:	418c                	lw	a1,0(a1)
     7f8:	00fc8633          	add	a2,s9,a5
        for (i = 0; i < N + 1; ++i) {
     7fc:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     7fe:	8e8d                	sub	a3,a3,a1
     800:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     802:	0791                	addi	a5,a5,4
     804:	b70d                	j	726 <ext_euclid+0xf2>
                temp[i] = temp[i] + mod;
     806:	97a6                	add	a5,a5,s1
     808:	c31c                	sw	a5,0(a4)
            while (temp[i] < 0) {
     80a:	431c                	lw	a5,0(a4)
     80c:	fe07cde3          	bltz	a5,806 <ext_euclid+0x1d2>
            temp[i] = temp[i] % mod;
     810:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     814:	0685                	addi	a3,a3,1
     816:	0711                	addi	a4,a4,4
            temp[i] = temp[i] % mod;
     818:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     81c:	bf11                	j	730 <ext_euclid+0xfc>
            qi_1[i] = res1[i];
     81e:	00279713          	slli	a4,a5,0x2
     822:	00e506b3          	add	a3,a0,a4
     826:	4294                	lw	a3,0(a3)
     828:	9756                	add	a4,a4,s5
        for (i = 0; i < N + 1; ++i) {
     82a:	0785                	addi	a5,a5,1
            qi_1[i] = res1[i];
     82c:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     82e:	bf11                	j	742 <ext_euclid+0x10e>
                qi_1[i] = qi_1[i] + mod;
     830:	97a6                	add	a5,a5,s1
     832:	c31c                	sw	a5,0(a4)
            while (qi_1[i] < 0) {
     834:	431c                	lw	a5,0(a4)
     836:	fe07cde3          	bltz	a5,830 <ext_euclid+0x1fc>
            qi_1[i] = qi_1[i] % mod;
     83a:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     83e:	0685                	addi	a3,a3,1
     840:	0711                	addi	a4,a4,4
            qi_1[i] = qi_1[i] % mod;
     842:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     846:	b711                	j	74a <ext_euclid+0x116>
            temp[i] = res2[i];
     848:	00279713          	slli	a4,a5,0x2
     84c:	00e506b3          	add	a3,a0,a4
     850:	4294                	lw	a3,0(a3)
     852:	9766                	add	a4,a4,s9
        for (i = 0; i < N + 1; ++i) {
     854:	0785                	addi	a5,a5,1
            temp[i] = res2[i];
     856:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     858:	b719                	j	75e <ext_euclid+0x12a>
                temp[i] = temp[i] + mod;
     85a:	97a6                	add	a5,a5,s1
     85c:	00fc2023          	sw	a5,0(s8)
            while (temp[i] < 0) {
     860:	000c2783          	lw	a5,0(s8)
     864:	fe07cbe3          	bltz	a5,85a <ext_euclid+0x226>
            temp[i] = temp[i] % mod;
     868:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     86c:	0705                	addi	a4,a4,1
     86e:	0c11                	addi	s8,s8,4
            temp[i] = temp[i] % mod;
     870:	fefc2e23          	sw	a5,-4(s8)
        for (i = 0; i < N + 1; ++i) {
     874:	bdc5                	j	764 <ext_euclid+0x130>
            ti[i] = ti_2[i] - temp[i];
     876:	00001697          	auipc	a3,0x1
     87a:	0b268693          	addi	a3,a3,178 # 1928 <ti_2>
     87e:	96be                	add	a3,a3,a5
     880:	00fc85b3          	add	a1,s9,a5
     884:	4294                	lw	a3,0(a3)
     886:	418c                	lw	a1,0(a1)
     888:	00fb8633          	add	a2,s7,a5
        for (i = 0; i < N + 1; ++i) {
     88c:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     88e:	8e8d                	sub	a3,a3,a1
     890:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     892:	0791                	addi	a5,a5,4
     894:	bde1                	j	76c <ext_euclid+0x138>
                ti[i] = ti[i] + mod;
     896:	97a6                	add	a5,a5,s1
     898:	c31c                	sw	a5,0(a4)
            while (ti[i] < 0) {
     89a:	431c                	lw	a5,0(a4)
     89c:	fe07cde3          	bltz	a5,896 <ext_euclid+0x262>
            ti[i] = ti[i] % mod;
     8a0:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     8a4:	0685                	addi	a3,a3,1
     8a6:	0711                	addi	a4,a4,4
            ti[i] = ti[i] % mod;
     8a8:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     8ac:	b5e1                	j	774 <ext_euclid+0x140>
            ri_2[i] = ri_1[i];
     8ae:	00fd85b3          	add	a1,s11,a5
     8b2:	4188                	lw	a0,0(a1)
     8b4:	00fd0633          	add	a2,s10,a5
        for (i = 0; i < N + 1; ++i) {
     8b8:	0685                	addi	a3,a3,1
            ri_2[i] = ri_1[i];
     8ba:	c208                	sw	a0,0(a2)
            ri_1[i] = ri[i];
     8bc:	00fb0633          	add	a2,s6,a5
     8c0:	4210                	lw	a2,0(a2)
            ti_2[i] = ti_1[i];
     8c2:	00001517          	auipc	a0,0x1
     8c6:	06650513          	addi	a0,a0,102 # 1928 <ti_2>
     8ca:	953e                	add	a0,a0,a5
            ri_1[i] = ri[i];
     8cc:	c190                	sw	a2,0(a1)
            ti_2[i] = ti_1[i];
     8ce:	00fa05b3          	add	a1,s4,a5
     8d2:	0005a883          	lw	a7,0(a1)
            controlR += ri[i];
     8d6:	9732                	add	a4,a4,a2
            ti_2[i] = ti_1[i];
     8d8:	01152023          	sw	a7,0(a0)
            ti_1[i] = ti[i];
     8dc:	00fb8533          	add	a0,s7,a5
     8e0:	4108                	lw	a0,0(a0)
     8e2:	c188                	sw	a0,0(a1)
            qi_1[i] = 0;
     8e4:	00fa85b3          	add	a1,s5,a5
     8e8:	0005a023          	sw	zero,0(a1)
        for (i = 0; i < N + 1; ++i) {
     8ec:	0791                	addi	a5,a5,4
     8ee:	bd41                	j	77e <ext_euclid+0x14a>
            if (((ri_2[0] * j) % mod) == 1)
     8f0:	000d2683          	lw	a3,0(s10)
     8f4:	02d786b3          	mul	a3,a5,a3
     8f8:	0296e6b3          	rem	a3,a3,s1
     8fc:	e8c688e3          	beq	a3,a2,78c <ext_euclid+0x158>
        for (j = 0; j < mod; ++j) {
     900:	0785                	addi	a5,a5,1
     902:	b559                	j	788 <ext_euclid+0x154>
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     904:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     906:	0705                	addi	a4,a4,1
     908:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     90a:	02d786b3          	mul	a3,a5,a3
     90e:	0296e6b3          	rem	a3,a3,s1
     912:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     916:	bdbd                	j	794 <ext_euclid+0x160>

00000918 <generate_keys>:




int* generate_keys(int N, int p, int q){
     918:	7141                	addi	sp,sp,-496
     91a:	1e112623          	sw	ra,492(sp)
     91e:	1e812423          	sw	s0,488(sp)
     922:	1e912223          	sw	s1,484(sp)
     926:	1b80                	addi	s0,sp,496
     928:	1f212023          	sw	s2,480(sp)
     92c:	1d312e23          	sw	s3,476(sp)
     930:	1d412c23          	sw	s4,472(sp)
     934:	1d512a23          	sw	s5,468(sp)
     938:	1d612823          	sw	s6,464(sp)
     93c:	1d712623          	sw	s7,460(sp)
     940:	1da12023          	sw	s10,448(sp)
     944:	1d812423          	sw	s8,456(sp)
     948:	1d912223          	sw	s9,452(sp)
     94c:	892a                	mv	s2,a0
     94e:	8bae                	mv	s7,a1
     950:	8b32                	mv	s6,a2
  

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     952:	4581                	li	a1,0
     954:	0d000613          	li	a2,208
     958:	e2440513          	addi	a0,s0,-476
     95c:	238d                	jal	ebe <memset>
     95e:	4485                	li	s1,1
     960:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     962:	0d800613          	li	a2,216
     966:	4581                	li	a1,0
     968:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96c:	e1342c23          	sw	s3,-488(s0)
     970:	e0942e23          	sw	s1,-484(s0)
     974:	e2942023          	sw	s1,-480(s0)
     978:	e3342423          	sw	s3,-472(s0)
     97c:	e2942823          	sw	s1,-464(s0)
     980:	e2942e23          	sw	s1,-452(s0)
     984:	e5342023          	sw	s3,-448(s0)
     988:	e5342223          	sw	s3,-444(s0)
     98c:	e4942623          	sw	s1,-436(s0)
     990:	e5342a23          	sw	s3,-428(s0)
     994:	e4942e23          	sw	s1,-420(s0)
     998:	e6942023          	sw	s1,-416(s0)
     99c:	e7342623          	sw	s3,-404(s0)
     9a0:	e6942a23          	sw	s1,-396(s0)
     9a4:	e8942023          	sw	s1,-384(s0)
     9a8:	e8942223          	sw	s1,-380(s0)
     9ac:	e8942423          	sw	s1,-376(s0)
     9b0:	e9342623          	sw	s3,-372(s0)
     9b4:	e8942a23          	sw	s1,-364(s0)
     9b8:	ea942023          	sw	s1,-352(s0)
     9bc:	ea942223          	sw	s1,-348(s0)
     9c0:	ea942423          	sw	s1,-344(s0)
     9c4:	eb342623          	sw	s3,-340(s0)
     9c8:	ea942a23          	sw	s1,-332(s0)
     9cc:	ec942023          	sw	s1,-320(s0)
     9d0:	ec942223          	sw	s1,-316(s0)
     9d4:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     9d8:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9dc:	21cd                	jal	ebe <memset>
    int polyR[N+1];
     9de:	002a9793          	slli	a5,s5,0x2
     9e2:	07bd                	addi	a5,a5,15
     9e4:	9bc1                	andi	a5,a5,-16
     9e6:	40f10133          	sub	sp,sp,a5
     9ea:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     9ec:	00291d13          	slli	s10,s2,0x2
     9f0:	01aa07b3          	add	a5,s4,s10
     9f4:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f6:	ef342a23          	sw	s3,-268(s0)
     9fa:	ee942e23          	sw	s1,-260(s0)
     9fe:	f0942023          	sw	s1,-256(s0)
     a02:	f0942423          	sw	s1,-248(s0)
     a06:	f1342a23          	sw	s3,-236(s0)
     a0a:	f1342e23          	sw	s3,-228(s0)
     a0e:	f3342023          	sw	s3,-224(s0)
     a12:	f2942423          	sw	s1,-216(s0)
     a16:	f3342823          	sw	s3,-208(s0)
     a1a:	f2942c23          	sw	s1,-200(s0)
     a1e:	f4942223          	sw	s1,-188(s0)
     a22:	f5342423          	sw	s3,-184(s0)
     a26:	f4942823          	sw	s1,-176(s0)
     a2a:	f4942e23          	sw	s1,-164(s0)
     a2e:	f7342023          	sw	s3,-160(s0)
     a32:	f6942423          	sw	s1,-152(s0)
     a36:	f6942a23          	sw	s1,-140(s0)
     a3a:	f7342c23          	sw	s3,-136(s0)
     a3e:	f8942023          	sw	s1,-128(s0)
     a42:	f8942423          	sw	s1,-120(s0)
     a46:	f8942623          	sw	s1,-116(s0)
     a4a:	f8942c23          	sw	s1,-104(s0)
     a4e:	f9342e23          	sw	s3,-100(s0)
     a52:	fa942223          	sw	s1,-92(s0)
     a56:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
     a5a:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     a5e:	4785                	li	a5,1
     a60:	1127c263          	blt	a5,s2,b64 <generate_keys+0x24c>
     a64:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     a66:	03600693          	li	a3,54
     a6a:	10f6d463          	bge	a3,a5,b72 <generate_keys+0x25a>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     a6e:	4781                	li	a5,0
        random_keys[i] = f[i];
     a70:	00001697          	auipc	a3,0x1
     a74:	04868693          	addi	a3,a3,72 # 1ab8 <random_keys>
    for(i = 0; i < N; ++i){
     a78:	1127cb63          	blt	a5,s2,b8e <generate_keys+0x276>
     a7c:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     a80:	00191993          	slli	s3,s2,0x1
     a84:	87ca                	mv	a5,s2
     a86:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     a88:	00001617          	auipc	a2,0x1
     a8c:	03060613          	addi	a2,a2,48 # 1ab8 <random_keys>
    for(i = N; i < (2*N); ++i){
     a90:	1137ca63          	blt	a5,s3,ba4 <generate_keys+0x28c>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     a94:	448d                	li	s1,3
     a96:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     a9a:	86de                	mv	a3,s7
     a9c:	8656                	mv	a2,s5
     a9e:	e1840593          	addi	a1,s0,-488
     aa2:	8552                	mv	a0,s4
     aa4:	3e41                	jal	634 <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     aa6:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     aa8:	00001697          	auipc	a3,0x1
     aac:	01068693          	addi	a3,a3,16 # 1ab8 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     ab0:	1097c263          	blt	a5,s1,bb4 <generate_keys+0x29c>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     ab4:	8656                	mv	a2,s5
     ab6:	86da                	mv	a3,s6
     ab8:	e1840593          	addi	a1,s0,-488
     abc:	8552                	mv	a0,s4
     abe:	3e9d                	jal	634 <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     ac0:	5751                	li	a4,-12
     ac2:	02e90733          	mul	a4,s2,a4
     ac6:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
     ac8:	00001617          	auipc	a2,0x1
     acc:	ff060613          	addi	a2,a2,-16 # 1ab8 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     ad0:	0fa4ca63          	blt	s1,s10,bc4 <generate_keys+0x2ac>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     ad4:	4701                	li	a4,0
     ad6:	85ca                	mv	a1,s2
     ad8:	86ca                	mv	a3,s2
     ada:	8666                	mv	a2,s9
     adc:	f96ff0ef          	jal	ra,272 <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     ae0:	87aa                	mv	a5,a0
     ae2:	4701                	li	a4,0
     ae4:	fff98593          	addi	a1,s3,-1
     ae8:	0eb74863          	blt	a4,a1,bd8 <generate_keys+0x2c0>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     aec:	86d6                	mv	a3,s5
     aee:	875a                	mv	a4,s6
     af0:	8652                	mv	a2,s4
     af2:	38c5                	jal	3e2 <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     af4:	4795                	li	a5,5
     af6:	02f907b3          	mul	a5,s2,a5
     afa:	098a                	slli	s3,s3,0x2
     afc:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     afe:	00001697          	auipc	a3,0x1
     b02:	fba68693          	addi	a3,a3,-70 # 1ab8 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     b06:	0991                	addi	s3,s3,4
     b08:	0efc4063          	blt	s8,a5,be8 <generate_keys+0x2d0>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     b0c:	4699                	li	a3,6
     b0e:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     b10:	00001617          	auipc	a2,0x1
     b14:	fa860613          	addi	a2,a2,-88 # 1ab8 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     b18:	02d906b3          	mul	a3,s2,a3
     b1c:	02a90933          	mul	s2,s2,a0
     b20:	0cf6dc63          	bge	a3,a5,bf8 <generate_keys+0x2e0>


    return_address5 = &random_keys[0];

    return return_address5;
}
     b24:	e1040113          	addi	sp,s0,-496
     b28:	1ec12083          	lw	ra,492(sp)
     b2c:	1e812403          	lw	s0,488(sp)
     b30:	1e412483          	lw	s1,484(sp)
     b34:	1e012903          	lw	s2,480(sp)
     b38:	1dc12983          	lw	s3,476(sp)
     b3c:	1d812a03          	lw	s4,472(sp)
     b40:	1d412a83          	lw	s5,468(sp)
     b44:	1d012b03          	lw	s6,464(sp)
     b48:	1cc12b83          	lw	s7,460(sp)
     b4c:	1c812c03          	lw	s8,456(sp)
     b50:	1c412c83          	lw	s9,452(sp)
     b54:	1c012d03          	lw	s10,448(sp)
     b58:	00001517          	auipc	a0,0x1
     b5c:	f6050513          	addi	a0,a0,-160 # 1ab8 <random_keys>
     b60:	617d                	addi	sp,sp,496
     b62:	8082                	ret
        polyR[i] = 0;
     b64:	00279713          	slli	a4,a5,0x2
     b68:	9752                	add	a4,a4,s4
     b6a:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     b6e:	0785                	addi	a5,a5,1
     b70:	bdc5                	j	a60 <generate_keys+0x148>
        f[i] = 0;
     b72:	00279713          	slli	a4,a5,0x2
     b76:	e1840613          	addi	a2,s0,-488
     b7a:	963a                	add	a2,a2,a4
     b7c:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     b80:	ef440613          	addi	a2,s0,-268
     b84:	9732                	add	a4,a4,a2
     b86:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     b8a:	0785                	addi	a5,a5,1
     b8c:	bdf9                	j	a6a <generate_keys+0x152>
        random_keys[i] = f[i];
     b8e:	00279713          	slli	a4,a5,0x2
     b92:	e1840593          	addi	a1,s0,-488
     b96:	00e68633          	add	a2,a3,a4
     b9a:	972e                	add	a4,a4,a1
     b9c:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     b9e:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     ba0:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     ba2:	bdd9                	j	a78 <generate_keys+0x160>
        random_keys[i] = g[i-N];
     ba4:	430c                	lw	a1,0(a4)
     ba6:	00279693          	slli	a3,a5,0x2
     baa:	96b2                	add	a3,a3,a2
     bac:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     bae:	0785                	addi	a5,a5,1
     bb0:	0711                	addi	a4,a4,4
     bb2:	bdf9                	j	a90 <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
     bb4:	4110                	lw	a2,0(a0)
     bb6:	00279713          	slli	a4,a5,0x2
     bba:	9736                	add	a4,a4,a3
     bbc:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     bbe:	0785                	addi	a5,a5,1
     bc0:	0511                	addi	a0,a0,4
     bc2:	b5fd                	j	ab0 <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
     bc4:	00249793          	slli	a5,s1,0x2
     bc8:	00f706b3          	add	a3,a4,a5
     bcc:	96aa                	add	a3,a3,a0
     bce:	4294                	lw	a3,0(a3)
     bd0:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     bd2:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     bd4:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     bd6:	bded                	j	ad0 <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
     bd8:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     bda:	0705                	addi	a4,a4,1
     bdc:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     bde:	037686b3          	mul	a3,a3,s7
     be2:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     be6:	b709                	j	ae8 <generate_keys+0x1d0>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     be8:	ff89a603          	lw	a2,-8(s3)
     bec:	002c1713          	slli	a4,s8,0x2
     bf0:	9736                	add	a4,a4,a3
     bf2:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     bf4:	0c05                	addi	s8,s8,1
     bf6:	bf01                	j	b06 <generate_keys+0x1ee>
        random_keys[i] = polyR[i-(5*N)];
     bf8:	00279713          	slli	a4,a5,0x2
     bfc:	00e605b3          	add	a1,a2,a4
     c00:	974a                	add	a4,a4,s2
     c02:	9752                	add	a4,a4,s4
     c04:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     c06:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     c08:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     c0a:	bf19                	j	b20 <generate_keys+0x208>

00000c0c <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c0c:	7115                	addi	sp,sp,-224
     c0e:	cda2                	sw	s0,216(sp)
     c10:	cba6                	sw	s1,212(sp)
     c12:	c9ca                	sw	s2,208(sp)
     c14:	842a                	mv	s0,a0
     c16:	892e                	mv	s2,a1
     c18:	84b2                	mv	s1,a2

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1a:	00000597          	auipc	a1,0x0
     c1e:	48658593          	addi	a1,a1,1158 # 10a0 <_endtext>
     c22:	0c000613          	li	a2,192
     c26:	850a                	mv	a0,sp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c28:	cf86                	sw	ra,220(sp)
     c2a:	c7ce                	sw	s3,204(sp)
     c2c:	c5d2                	sw	s4,200(sp)
     c2e:	89ba                	mv	s3,a4
     c30:	8a36                	mv	s4,a3
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c32:	227d                	jal	de0 <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     c34:	4781                	li	a5,0
     c36:	860a                	mv	a2,sp
     c38:	874a                	mv	a4,s2
     c3a:	03000693          	li	a3,48
     c3e:	85a2                	mv	a1,s0
     c40:	8552                	mv	a0,s4
     c42:	c4aff0ef          	jal	ra,8c <polymult>
     c46:	4781                	li	a5,0

    /////// PUBLIC_KEY*RANDOM_VALUE ///////

    for(i = 0; i < 48; ++i){
     c48:	0c000613          	li	a2,192
        temp[i] = temp[i] + message[i];
     c4c:	00f506b3          	add	a3,a0,a5
     c50:	00f485b3          	add	a1,s1,a5
     c54:	4298                	lw	a4,0(a3)
     c56:	418c                	lw	a1,0(a1)
     c58:	0791                	addi	a5,a5,4
     c5a:	972e                	add	a4,a4,a1
     c5c:	c298                	sw	a4,0(a3)
    for(i = 0; i < 48; ++i){
     c5e:	fec797e3          	bne	a5,a2,c4c <ntru_encyrpt+0x40>
    }

    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c62:	00141493          	slli	s1,s0,0x1
     c66:	00140693          	addi	a3,s0,1
     c6a:	874a                	mv	a4,s2
     c6c:	864e                	mv	a2,s3
     c6e:	85a6                	mv	a1,s1
     c70:	f72ff0ef          	jal	ra,3e2 <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     c74:	478d                	li	a5,3
     c76:	02f40433          	mul	s0,s0,a5
     c7a:	87aa                	mv	a5,a0
     c7c:	0084ca63          	blt	s1,s0,c90 <ntru_encyrpt+0x84>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
     c80:	40fe                	lw	ra,220(sp)
     c82:	446e                	lw	s0,216(sp)
     c84:	44de                	lw	s1,212(sp)
     c86:	494e                	lw	s2,208(sp)
     c88:	49be                	lw	s3,204(sp)
     c8a:	4a2e                	lw	s4,200(sp)
     c8c:	612d                	addi	sp,sp,224
     c8e:	8082                	ret
        CT[i-(2*N)] = CT[i];
     c90:	00249713          	slli	a4,s1,0x2
     c94:	972a                	add	a4,a4,a0
     c96:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     c98:	0485                	addi	s1,s1,1
     c9a:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     c9c:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     ca0:	bff1                	j	c7c <ntru_encyrpt+0x70>

00000ca2 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca2:	7179                	addi	sp,sp,-48
     ca4:	d422                	sw	s0,40(sp)
     ca6:	ce4e                	sw	s3,28(sp)
     ca8:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     caa:	498d                	li	s3,3
     cac:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb0:	d04a                	sw	s2,32(sp)
     cb2:	ca56                	sw	s5,20(sp)
     cb4:	c65e                	sw	s7,12(sp)
     cb6:	8932                	mv	s2,a2
     cb8:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cba:	863e                	mv	a2,a5
     cbc:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cbe:	8aae                	mv	s5,a1
     cc0:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc2:	85a2                	mv	a1,s0
     cc4:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc6:	d606                	sw	ra,44(sp)
     cc8:	d226                	sw	s1,36(sp)
     cca:	cc52                	sw	s4,24(sp)
     ccc:	c85a                	sw	s6,16(sp)
     cce:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd0:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd4:	d9eff0ef          	jal	ra,272 <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd8:	00140b13          	addi	s6,s0,1
     cdc:	874a                	mv	a4,s2
     cde:	86da                	mv	a3,s6
     ce0:	8652                	mv	a2,s4
     ce2:	85a6                	mv	a1,s1
     ce4:	efeff0ef          	jal	ra,3e2 <polydiv>
     ce8:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     cea:	87aa                	mv	a5,a0
     cec:	872a                	mv	a4,a0
     cee:	86a6                	mv	a3,s1
     cf0:	0536c263          	blt	a3,s3,d34 <ntru_deceypt+0x92>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     cf4:	4589                	li	a1,2
     cf6:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     cfa:	4701                	li	a4,0
     cfc:	04874563          	blt	a4,s0,d46 <ntru_deceypt+0xa4>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     d00:	4701                	li	a4,0
     d02:	86a2                	mv	a3,s0
     d04:	85a2                	mv	a1,s0
     d06:	855e                	mv	a0,s7
     d08:	d6aff0ef          	jal	ra,272 <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d0c:	8756                	mv	a4,s5
     d0e:	86da                	mv	a3,s6
     d10:	8652                	mv	a2,s4
     d12:	85a6                	mv	a1,s1
     d14:	eceff0ef          	jal	ra,3e2 <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d18:	87aa                	mv	a5,a0
     d1a:	0334cf63          	blt	s1,s3,d58 <ntru_deceypt+0xb6>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
     d1e:	50b2                	lw	ra,44(sp)
     d20:	5422                	lw	s0,40(sp)
     d22:	5492                	lw	s1,36(sp)
     d24:	5902                	lw	s2,32(sp)
     d26:	49f2                	lw	s3,28(sp)
     d28:	4a62                	lw	s4,24(sp)
     d2a:	4ad2                	lw	s5,20(sp)
     d2c:	4b42                	lw	s6,16(sp)
     d2e:	4bb2                	lw	s7,12(sp)
     d30:	6145                	addi	sp,sp,48
     d32:	8082                	ret
        a2[i-(2*N)] = a2[i];
     d34:	00269593          	slli	a1,a3,0x2
     d38:	95b2                	add	a1,a1,a2
     d3a:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d3c:	0685                	addi	a3,a3,1
     d3e:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     d40:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d44:	b775                	j	cf0 <ntru_deceypt+0x4e>
        if(a2[i] <= q/2)
     d46:	4394                	lw	a3,0(a5)
     d48:	00d5d563          	bge	a1,a3,d52 <ntru_deceypt+0xb0>
            a2[i] = (-1)*(q-a2[i]);
     d4c:	412686b3          	sub	a3,a3,s2
     d50:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     d52:	0705                	addi	a4,a4,1
     d54:	0791                	addi	a5,a5,4
     d56:	b75d                	j	cfc <ntru_deceypt+0x5a>
        c2[i-(2*N)] = c2[i];
     d58:	00249713          	slli	a4,s1,0x2
     d5c:	972a                	add	a4,a4,a0
     d5e:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d60:	0485                	addi	s1,s1,1
     d62:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     d64:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d68:	bf4d                	j	d1a <ntru_deceypt+0x78>

00000d6a <default_exc_handler>:
  jal x0, default_exc_handler
     d6a:	0000006f          	j	d6a <default_exc_handler>

00000d6e <reset_handler>:
  mv  x1, x0
     d6e:	00000093          	li	ra,0
  mv  x2, x1
     d72:	8106                	mv	sp,ra
  mv  x3, x1
     d74:	8186                	mv	gp,ra
  mv  x4, x1
     d76:	8206                	mv	tp,ra
  mv  x5, x1
     d78:	8286                	mv	t0,ra
  mv  x6, x1
     d7a:	8306                	mv	t1,ra
  mv  x7, x1
     d7c:	8386                	mv	t2,ra
  mv  x8, x1
     d7e:	8406                	mv	s0,ra
  mv  x9, x1
     d80:	8486                	mv	s1,ra
  mv x10, x1
     d82:	8506                	mv	a0,ra
  mv x11, x1
     d84:	8586                	mv	a1,ra
  mv x12, x1
     d86:	8606                	mv	a2,ra
  mv x13, x1
     d88:	8686                	mv	a3,ra
  mv x14, x1
     d8a:	8706                	mv	a4,ra
  mv x15, x1
     d8c:	8786                	mv	a5,ra
  mv x16, x1
     d8e:	8806                	mv	a6,ra
  mv x17, x1
     d90:	8886                	mv	a7,ra
  mv x18, x1
     d92:	8906                	mv	s2,ra
  mv x19, x1
     d94:	8986                	mv	s3,ra
  mv x20, x1
     d96:	8a06                	mv	s4,ra
  mv x21, x1
     d98:	8a86                	mv	s5,ra
  mv x22, x1
     d9a:	8b06                	mv	s6,ra
  mv x23, x1
     d9c:	8b86                	mv	s7,ra
  mv x24, x1
     d9e:	8c06                	mv	s8,ra
  mv x25, x1
     da0:	8c86                	mv	s9,ra
  mv x26, x1
     da2:	8d06                	mv	s10,ra
  mv x27, x1
     da4:	8d86                	mv	s11,ra
  mv x28, x1
     da6:	8e06                	mv	t3,ra
  mv x29, x1
     da8:	8e86                	mv	t4,ra
  mv x30, x1
     daa:	8f06                	mv	t5,ra
  mv x31, x1
     dac:	8f86                	mv	t6,ra
  la   x2, _stack_start
     dae:	0000f117          	auipc	sp,0xf
     db2:	25210113          	addi	sp,sp,594 # 10000 <_stack_start>

00000db6 <_start>:
  la x26, _bss_start
     db6:	00000d17          	auipc	s10,0x0
     dba:	46ad0d13          	addi	s10,s10,1130 # 1220 <_edata>
  la x27, _bss_end
     dbe:	00001d97          	auipc	s11,0x1
     dc2:	1f6d8d93          	addi	s11,s11,502 # 1fb4 <_bss_end>
  bge x26, x27, zero_loop_end
     dc6:	01bd5763          	bge	s10,s11,dd4 <main_entry>

00000dca <zero_loop>:
  sw x0, 0(x26)
     dca:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
     dce:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
     dd0:	ffaddde3          	bge	s11,s10,dca <zero_loop>

00000dd4 <main_entry>:
  addi x10, x0, 0
     dd4:	00000513          	li	a0,0
  addi x11, x0, 0
     dd8:	00000593          	li	a1,0
  jal x1, main
     ddc:	18a000ef          	jal	ra,f66 <main>

00000de0 <memcpy>:
     de0:	00a5c7b3          	xor	a5,a1,a0
     de4:	8b8d                	andi	a5,a5,3
     de6:	00c508b3          	add	a7,a0,a2
     dea:	e7a1                	bnez	a5,e32 <memcpy+0x52>
     dec:	478d                	li	a5,3
     dee:	04c7f263          	bgeu	a5,a2,e32 <memcpy+0x52>
     df2:	00357793          	andi	a5,a0,3
     df6:	872a                	mv	a4,a0
     df8:	eba9                	bnez	a5,e4a <memcpy+0x6a>
     dfa:	ffc8f613          	andi	a2,a7,-4
     dfe:	fe060793          	addi	a5,a2,-32
     e02:	06f76763          	bltu	a4,a5,e70 <memcpy+0x90>
     e06:	02c77363          	bgeu	a4,a2,e2c <memcpy+0x4c>
     e0a:	86ae                	mv	a3,a1
     e0c:	87ba                	mv	a5,a4
     e0e:	0006a803          	lw	a6,0(a3)
     e12:	0791                	addi	a5,a5,4
     e14:	0691                	addi	a3,a3,4
     e16:	ff07ae23          	sw	a6,-4(a5)
     e1a:	fec7eae3          	bltu	a5,a2,e0e <memcpy+0x2e>
     e1e:	fff60793          	addi	a5,a2,-1
     e22:	8f99                	sub	a5,a5,a4
     e24:	9bf1                	andi	a5,a5,-4
     e26:	0791                	addi	a5,a5,4
     e28:	973e                	add	a4,a4,a5
     e2a:	95be                	add	a1,a1,a5
     e2c:	01176663          	bltu	a4,a7,e38 <memcpy+0x58>
     e30:	8082                	ret
     e32:	872a                	mv	a4,a0
     e34:	ff157ee3          	bgeu	a0,a7,e30 <memcpy+0x50>
     e38:	0005c783          	lbu	a5,0(a1)
     e3c:	0705                	addi	a4,a4,1
     e3e:	0585                	addi	a1,a1,1
     e40:	fef70fa3          	sb	a5,-1(a4)
     e44:	ff176ae3          	bltu	a4,a7,e38 <memcpy+0x58>
     e48:	8082                	ret
     e4a:	0005c683          	lbu	a3,0(a1)
     e4e:	0705                	addi	a4,a4,1
     e50:	00377793          	andi	a5,a4,3
     e54:	fed70fa3          	sb	a3,-1(a4)
     e58:	0585                	addi	a1,a1,1
     e5a:	d3c5                	beqz	a5,dfa <memcpy+0x1a>
     e5c:	0005c683          	lbu	a3,0(a1)
     e60:	0705                	addi	a4,a4,1
     e62:	00377793          	andi	a5,a4,3
     e66:	fed70fa3          	sb	a3,-1(a4)
     e6a:	0585                	addi	a1,a1,1
     e6c:	fff9                	bnez	a5,e4a <memcpy+0x6a>
     e6e:	b771                	j	dfa <memcpy+0x1a>
     e70:	41d4                	lw	a3,4(a1)
     e72:	0005a283          	lw	t0,0(a1)
     e76:	0085af83          	lw	t6,8(a1)
     e7a:	00c5af03          	lw	t5,12(a1)
     e7e:	0105ae83          	lw	t4,16(a1)
     e82:	0145ae03          	lw	t3,20(a1)
     e86:	0185a303          	lw	t1,24(a1)
     e8a:	01c5a803          	lw	a6,28(a1)
     e8e:	c354                	sw	a3,4(a4)
     e90:	5194                	lw	a3,32(a1)
     e92:	00572023          	sw	t0,0(a4)
     e96:	01f72423          	sw	t6,8(a4)
     e9a:	01e72623          	sw	t5,12(a4)
     e9e:	01d72823          	sw	t4,16(a4)
     ea2:	01c72a23          	sw	t3,20(a4)
     ea6:	00672c23          	sw	t1,24(a4)
     eaa:	01072e23          	sw	a6,28(a4)
     eae:	d314                	sw	a3,32(a4)
     eb0:	02470713          	addi	a4,a4,36
     eb4:	02458593          	addi	a1,a1,36
     eb8:	faf76ce3          	bltu	a4,a5,e70 <memcpy+0x90>
     ebc:	b7a9                	j	e06 <memcpy+0x26>

00000ebe <memset>:
     ebe:	433d                	li	t1,15
     ec0:	872a                	mv	a4,a0
     ec2:	02c37363          	bgeu	t1,a2,ee8 <memset+0x2a>
     ec6:	00f77793          	andi	a5,a4,15
     eca:	efbd                	bnez	a5,f48 <memset+0x8a>
     ecc:	e5ad                	bnez	a1,f36 <memset+0x78>
     ece:	ff067693          	andi	a3,a2,-16
     ed2:	8a3d                	andi	a2,a2,15
     ed4:	96ba                	add	a3,a3,a4
     ed6:	c30c                	sw	a1,0(a4)
     ed8:	c34c                	sw	a1,4(a4)
     eda:	c70c                	sw	a1,8(a4)
     edc:	c74c                	sw	a1,12(a4)
     ede:	0741                	addi	a4,a4,16
     ee0:	fed76be3          	bltu	a4,a3,ed6 <memset+0x18>
     ee4:	e211                	bnez	a2,ee8 <memset+0x2a>
     ee6:	8082                	ret
     ee8:	40c306b3          	sub	a3,t1,a2
     eec:	068a                	slli	a3,a3,0x2
     eee:	00000297          	auipc	t0,0x0
     ef2:	9696                	add	a3,a3,t0
     ef4:	00a68067          	jr	10(a3)
     ef8:	00b70723          	sb	a1,14(a4)
     efc:	00b706a3          	sb	a1,13(a4)
     f00:	00b70623          	sb	a1,12(a4)
     f04:	00b705a3          	sb	a1,11(a4)
     f08:	00b70523          	sb	a1,10(a4)
     f0c:	00b704a3          	sb	a1,9(a4)
     f10:	00b70423          	sb	a1,8(a4)
     f14:	00b703a3          	sb	a1,7(a4)
     f18:	00b70323          	sb	a1,6(a4)
     f1c:	00b702a3          	sb	a1,5(a4)
     f20:	00b70223          	sb	a1,4(a4)
     f24:	00b701a3          	sb	a1,3(a4)
     f28:	00b70123          	sb	a1,2(a4)
     f2c:	00b700a3          	sb	a1,1(a4)
     f30:	00b70023          	sb	a1,0(a4)
     f34:	8082                	ret
     f36:	0ff5f593          	andi	a1,a1,255
     f3a:	00859693          	slli	a3,a1,0x8
     f3e:	8dd5                	or	a1,a1,a3
     f40:	01059693          	slli	a3,a1,0x10
     f44:	8dd5                	or	a1,a1,a3
     f46:	b761                	j	ece <memset+0x10>
     f48:	00279693          	slli	a3,a5,0x2
     f4c:	00000297          	auipc	t0,0x0
     f50:	9696                	add	a3,a3,t0
     f52:	8286                	mv	t0,ra
     f54:	fa8680e7          	jalr	-88(a3)
     f58:	8096                	mv	ra,t0
     f5a:	17c1                	addi	a5,a5,-16
     f5c:	8f1d                	sub	a4,a4,a5
     f5e:	963e                	add	a2,a2,a5
     f60:	f8c374e3          	bgeu	t1,a2,ee8 <memset+0x2a>
     f64:	b7a5                	j	ecc <memset+0xe>

00000f66 <main>:

int main(){
     f66:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f6a:	0c000613          	li	a2,192
     f6e:	00000597          	auipc	a1,0x0
     f72:	1f258593          	addi	a1,a1,498 # 1160 <_endtext+0xc0>
     f76:	0068                	addi	a0,sp,12
int main(){
     f78:	42112623          	sw	ra,1068(sp)
     f7c:	42812423          	sw	s0,1064(sp)
     f80:	42912223          	sw	s1,1060(sp)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f84:	3db1                	jal	de0 <memcpy>
 //   double cpu_time_used;

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

    resultkon[0] = 0xA;
     f86:	00001417          	auipc	s0,0x1
     f8a:	02a40413          	addi	s0,s0,42 # 1fb0 <resultkon>
     f8e:	47a9                	li	a5,10
     f90:	c01c                	sw	a5,0(s0)
    *var = resultkon[0];
     f92:	401c                	lw	a5,0(s0)
     f94:	6741                	lui	a4,0x10
 //   start = clock();
    keys = generate_keys(N, p, q);
     f96:	06500613          	li	a2,101
    *var = resultkon[0];
     f9a:	0ff7f793          	andi	a5,a5,255
     f9e:	fef70fa3          	sb	a5,-1(a4) # ffff <_stack+0x1fff>
    keys = generate_keys(N, p, q);
     fa2:	458d                	li	a1,3
     fa4:	03500513          	li	a0,53
     fa8:	3a85                	jal	918 <generate_keys>
     faa:	4781                	li	a5,0


   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
     fac:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
     fb0:	00f506b3          	add	a3,a0,a5
     fb4:	4290                	lw	a2,0(a3)
     fb6:	1314                	addi	a3,sp,416
     fb8:	96be                	add	a3,a3,a5
     fba:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
     fbc:	0791                	addi	a5,a5,4
     fbe:	fee799e3          	bne	a5,a4,fb0 <main+0x4a>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
     fc2:	1cd8                	addi	a4,sp,628
     fc4:	1a850793          	addi	a5,a0,424
     fc8:	27c50693          	addi	a3,a0,636
     fcc:	84ba                	mv	s1,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
     fce:	4390                	lw	a2,0(a5)
     fd0:	0791                	addi	a5,a5,4
     fd2:	0711                	addi	a4,a4,4
     fd4:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
     fd8:	fed79be3          	bne	a5,a3,fce <main+0x68>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
     fdc:	01f8                	addi	a4,sp,204
     fde:	35050793          	addi	a5,a0,848
     fe2:	42450613          	addi	a2,a0,1060
     fe6:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
     fe8:	438c                	lw	a1,0(a5)
     fea:	0791                	addi	a5,a5,4
     fec:	0711                	addi	a4,a4,4
     fee:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
     ff2:	fec79be3          	bne	a5,a2,fe8 <main+0x82>
     ff6:	06b0                	addi	a2,sp,840
     ff8:	4fc50513          	addi	a0,a0,1276
     ffc:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
     ffe:	4398                	lw	a4,0(a5)
    1000:	0791                	addi	a5,a5,4
    1002:	0611                	addi	a2,a2,4
    1004:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
    1008:	fea79be3          	bne	a5,a0,ffe <main+0x98>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    100c:	8742                	mv	a4,a6
    100e:	0070                	addi	a2,sp,12
    1010:	06500593          	li	a1,101
    1014:	03500513          	li	a0,53
    1018:	3ed5                	jal	c0c <ntru_encyrpt>
    101a:	87aa                	mv	a5,a0
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    101c:	34810813          	addi	a6,sp,840
    1020:	1314                	addi	a3,sp,416
    1022:	458d                	li	a1,3
    1024:	8726                	mv	a4,s1
    1026:	06500613          	li	a2,101
    102a:	03500513          	li	a0,53
    102e:	3995                	jal	ca2 <ntru_deceypt>
            resultkon[0] = 0xBABABABA;
 	    *var = resultkon[0];
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    1030:	dedee6b7          	lui	a3,0xdedee
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1034:	4781                	li	a5,0
            resultkon[0] = 0xDEDEDEDE;
    1036:	ede68693          	addi	a3,a3,-290 # dededede <_stack_start+0xdedddede>
	    *var = resultkon[0];
    103a:	6841                	lui	a6,0x10
    for(i = 0; i < 32; ++i){
    103c:	08000593          	li	a1,128
        if(!(message[i] == Dec_Message[i])){
    1040:	0070                	addi	a2,sp,12
    1042:	00f50733          	add	a4,a0,a5
    1046:	963e                	add	a2,a2,a5
    1048:	4210                	lw	a2,0(a2)
    104a:	4318                	lw	a4,0(a4)
    104c:	02e60763          	beq	a2,a4,107a <main+0x114>
            resultkon[0] = 0xBABABABA;
    1050:	babac7b7          	lui	a5,0xbabac
    1054:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    1058:	c01c                	sw	a5,0(s0)
 	    *var = resultkon[0];
    105a:	401c                	lw	a5,0(s0)
    105c:	6741                	lui	a4,0x10
    105e:	0ff7f793          	andi	a5,a5,255
    1062:	fef70fa3          	sb	a5,-1(a4) # ffff <_stack+0x1fff>
    //printf("RESULT = %d\n",resultkon[0]);
   // printf("Time Result = %f clocks\n",cpu_time_used);


    return 0;
}
    1066:	42c12083          	lw	ra,1068(sp)
    106a:	42812403          	lw	s0,1064(sp)
    106e:	42412483          	lw	s1,1060(sp)
    1072:	4501                	li	a0,0
    1074:	43010113          	addi	sp,sp,1072
    1078:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    107a:	c014                	sw	a3,0(s0)
	    *var = resultkon[0];
    107c:	4018                	lw	a4,0(s0)
    107e:	0791                	addi	a5,a5,4
    1080:	0ff77713          	andi	a4,a4,255
    1084:	fee80fa3          	sb	a4,-1(a6) # ffff <_stack+0x1fff>
    for(i = 0; i < 32; ++i){
    1088:	fab79ce3          	bne	a5,a1,1040 <main+0xda>
    108c:	bfe9                	j	1066 <main+0x100>

0000108e <__CTOR_LIST__>:
	...

00001096 <__CTOR_END__>:
	...

0000109e <__DTOR_END__>:
	...

Disassembly of section .rodata:

000010a0 <.rodata>:
    10a0:	0001                	nop
    10a2:	0000                	unimp
    10a4:	ffff                	0xffff
    10a6:	ffff                	0xffff
    10a8:	0000                	unimp
    10aa:	0000                	unimp
    10ac:	0001                	nop
    10ae:	0000                	unimp
    10b0:	ffff                	0xffff
    10b2:	ffff                	0xffff
    10b4:	0001                	nop
    10b6:	0000                	unimp
    10b8:	ffff                	0xffff
    10ba:	ffff                	0xffff
    10bc:	0000                	unimp
    10be:	0000                	unimp
    10c0:	0001                	nop
    10c2:	0000                	unimp
    10c4:	0001                	nop
    10c6:	0000                	unimp
    10c8:	0000                	unimp
    10ca:	0000                	unimp
    10cc:	ffff                	0xffff
    10ce:	ffff                	0xffff
    10d0:	0001                	nop
    10d2:	0000                	unimp
    10d4:	ffff                	0xffff
    10d6:	ffff                	0xffff
    10d8:	0001                	nop
    10da:	0000                	unimp
    10dc:	0000                	unimp
    10de:	0000                	unimp
    10e0:	0001                	nop
    10e2:	0000                	unimp
    10e4:	0001                	nop
    10e6:	0000                	unimp
    10e8:	0000                	unimp
    10ea:	0000                	unimp
    10ec:	ffff                	0xffff
    10ee:	ffff                	0xffff
    10f0:	0001                	nop
    10f2:	0000                	unimp
    10f4:	ffff                	0xffff
    10f6:	ffff                	0xffff
    10f8:	0001                	nop
    10fa:	0000                	unimp
    10fc:	0000                	unimp
    10fe:	0000                	unimp
    1100:	0001                	nop
    1102:	0000                	unimp
    1104:	0001                	nop
    1106:	0000                	unimp
    1108:	0000                	unimp
    110a:	0000                	unimp
    110c:	0001                	nop
    110e:	0000                	unimp
    1110:	ffff                	0xffff
    1112:	ffff                	0xffff
    1114:	0001                	nop
    1116:	0000                	unimp
    1118:	ffff                	0xffff
    111a:	ffff                	0xffff
    111c:	0000                	unimp
    111e:	0000                	unimp
    1120:	0001                	nop
    1122:	0000                	unimp
    1124:	ffff                	0xffff
    1126:	ffff                	0xffff
    1128:	0000                	unimp
    112a:	0000                	unimp
    112c:	0001                	nop
    112e:	0000                	unimp
    1130:	ffff                	0xffff
    1132:	ffff                	0xffff
    1134:	0001                	nop
    1136:	0000                	unimp
    1138:	ffff                	0xffff
    113a:	ffff                	0xffff
    113c:	0000                	unimp
    113e:	0000                	unimp
    1140:	0001                	nop
    1142:	0000                	unimp
    1144:	0001                	nop
    1146:	0000                	unimp
    1148:	0000                	unimp
    114a:	0000                	unimp
    114c:	ffff                	0xffff
    114e:	ffff                	0xffff
    1150:	0001                	nop
    1152:	0000                	unimp
    1154:	ffff                	0xffff
    1156:	ffff                	0xffff
    1158:	0001                	nop
    115a:	0000                	unimp
    115c:	0000                	unimp
    115e:	0000                	unimp
    1160:	0001                	nop
    1162:	0000                	unimp
    1164:	0001                	nop
    1166:	0000                	unimp
    1168:	0002                	c.slli64	zero
    116a:	0000                	unimp
    116c:	0001                	nop
    116e:	0000                	unimp
    1170:	0001                	nop
    1172:	0000                	unimp
    1174:	0001                	nop
    1176:	0000                	unimp
    1178:	0001                	nop
    117a:	0000                	unimp
    117c:	0002                	c.slli64	zero
    117e:	0000                	unimp
    1180:	0001                	nop
    1182:	0000                	unimp
    1184:	0001                	nop
    1186:	0000                	unimp
    1188:	0000                	unimp
    118a:	0000                	unimp
    118c:	0001                	nop
    118e:	0000                	unimp
    1190:	0001                	nop
    1192:	0000                	unimp
    1194:	0002                	c.slli64	zero
    1196:	0000                	unimp
    1198:	0001                	nop
    119a:	0000                	unimp
    119c:	0000                	unimp
    119e:	0000                	unimp
    11a0:	0001                	nop
    11a2:	0000                	unimp
    11a4:	0002                	c.slli64	zero
    11a6:	0000                	unimp
    11a8:	0000                	unimp
    11aa:	0000                	unimp
    11ac:	0001                	nop
    11ae:	0000                	unimp
    11b0:	0001                	nop
    11b2:	0000                	unimp
    11b4:	0001                	nop
    11b6:	0000                	unimp
    11b8:	0001                	nop
    11ba:	0000                	unimp
    11bc:	0000                	unimp
    11be:	0000                	unimp
    11c0:	0001                	nop
    11c2:	0000                	unimp
    11c4:	0001                	nop
    11c6:	0000                	unimp
    11c8:	0000                	unimp
    11ca:	0000                	unimp
    11cc:	0002                	c.slli64	zero
    11ce:	0000                	unimp
    11d0:	0001                	nop
    11d2:	0000                	unimp
    11d4:	0002                	c.slli64	zero
    11d6:	0000                	unimp
    11d8:	0001                	nop
    11da:	0000                	unimp
    11dc:	0000                	unimp
    11de:	0000                	unimp
    11e0:	0001                	nop
    11e2:	0000                	unimp
    11e4:	0001                	nop
    11e6:	0000                	unimp
    11e8:	0002                	c.slli64	zero
    11ea:	0000                	unimp
    11ec:	0001                	nop
    11ee:	0000                	unimp
    11f0:	0001                	nop
    11f2:	0000                	unimp
    11f4:	0001                	nop
    11f6:	0000                	unimp
    11f8:	0001                	nop
    11fa:	0000                	unimp
    11fc:	0002                	c.slli64	zero
    11fe:	0000                	unimp
    1200:	0001                	nop
    1202:	0000                	unimp
    1204:	0001                	nop
    1206:	0000                	unimp
    1208:	0002                	c.slli64	zero
    120a:	0000                	unimp
    120c:	0001                	nop
    120e:	0000                	unimp
    1210:	0001                	nop
    1212:	0000                	unimp
    1214:	0001                	nop
    1216:	0000                	unimp
    1218:	0001                	nop
    121a:	0000                	unimp
    121c:	0002                	c.slli64	zero
	...

Disassembly of section .bss:

00001220 <_bss_start>:
	...

00001478 <product2>:
	...

000016d0 <result>:
	...

00001928 <ti_2>:
	...

00001ab8 <random_keys>:
	...

00001fb0 <resultkon>:
volatile int resultkon[1];
    1fb0:	0000                	unimp
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	0000175b          	0x175b
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05d8                	addi	a4,sp,708
       e:	0000                	unimp
      10:	300c                	fld	fa1,32(s0)
      12:	5d000003          	lb	zero,1488(zero) # 5d0 <polydiv+0x1ee>
      16:	0004                	0x4
	...
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	00000423          	sb	zero,8(zero) # 8 <__DYNAMIC+0x8>
      2c:	00003403          	0x3403
      30:	0200                	addi	s0,sp,256
      32:	0038182b          	0x38182b
      36:	0000                	unimp
      38:	0102                	c.slli64	sp
      3a:	2108                	fld	fa0,0(a0)
      3c:	0004                	0x4
      3e:	0200                	addi	s0,sp,256
      40:	0502                	c.slli64	a0
      42:	0442                	slli	s0,s0,0x10
      44:	0000                	unimp
      46:	0202                	c.slli64	tp
      48:	0002c107          	flq	ft2,0(t0) # f4c <memset+0x8e>
      4c:	0200                	addi	s0,sp,256
      4e:	0504                	addi	s1,sp,640
      50:	00fd                	addi	ra,ra,31
      52:	0000                	unimp
      54:	0402                	c.slli64	s0
      56:	00007a07          	0x7a07
      5a:	0200                	addi	s0,sp,256
      5c:	0508                	addi	a0,sp,640
      5e:	00f8                	addi	a4,sp,76
      60:	0000                	unimp
      62:	0802                	c.slli64	a6
      64:	00007507          	0x7507
      68:	0400                	addi	s0,sp,512
      6a:	0504                	addi	s1,sp,640
      6c:	6e69                	lui	t3,0x1a
      6e:	0074                	addi	a3,sp,12
      70:	6905                	lui	s2,0x1
      72:	0000                	unimp
      74:	0200                	addi	s0,sp,256
      76:	0704                	addi	s1,sp,896
      78:	007f                	0x7f
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	1002                	c.slli	zero,0x20
      7e:	8404                	0x8404
  jal x0, reset_handler
      80:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
  jal x0, default_exc_handler
      84:	0304                	addi	s1,sp,384
      86:	0000                	unimp
  jal x0, default_exc_handler
      88:	17015e03          	lhu	t3,368(sp)
    int line[size_b][size_a + size_b];
      8c:	0075                	c.nop	29
      8e:	0000                	unimp
      90:	0003d503          	lhu	a0,0(t2)
      94:	0400                	addi	s0,sp,512
      96:	0e2e                	slli	t3,t3,0xb
      98:	004d                	c.nop	19
      9a:	0000                	unimp
      9c:	00056603          	0x56603
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      a0:	0400                	addi	s0,sp,512
      a2:	0e74                	addi	a3,sp,796
      a4:	004d                	c.nop	19
    int pola[size_a];
      a6:	0000                	unimp
      a8:	00066e03          	0x66e03
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      ac:	0400                	addi	s0,sp,512
      ae:	00691793          	slli	a5,s2,0x6
      b2:	0000                	unimp
    int line[size_b][size_a + size_b];
      b4:	a5040407          	0xa5040407
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b8:	0000d603          	lhu	a2,0(ra)
    int line[size_b][size_a + size_b];
      bc:	0800                	addi	s0,sp,16
      be:	02fe                	slli	t0,t0,0x1f
    int pola[size_a];
      c0:	0000                	unimp
      c2:	a704                	fsd	fs1,8(a4)
    int line[size_b][size_a + size_b];
      c4:	830c                	0x830c
      c6:	0000                	unimp
      c8:	0800                	addi	s0,sp,16
    int pola[size_a];
      ca:	0225                	addi	tp,tp,9
      cc:	0000                	unimp
    int polb[size_b];
      ce:	a804                	fsd	fs1,16(s0)
      d0:	0000d613          	srli	a2,ra,0x0
    int pola[size_a];
      d4:	0000                	unimp
    int polb[size_b];
      d6:	3809                	jal	fffff8e8 <_stack_start+0xfffef8e8>
      d8:	0000                	unimp
    int line[size_b][size_a + size_b];
      da:	e600                	fsw	fs0,8(a2)
      dc:	0000                	unimp
    int pola[size_a];
      de:	0a00                	addi	s0,sp,272
      e0:	0075                	c.nop	29
    int polb[size_b];
      e2:	0000                	unimp
            line[i][j] = 0;
      e4:	080b0003          	lb	zero,128(s6)
      e8:	a204                	fsd	fs1,0(a2)
    for (i = 0; i < size_b; ++i){
      ea:	0a09                	addi	s4,s4,2
      ec:	0001                	nop
            product[j] = 0;
      ee:	0c00                	addi	s0,sp,528
      f0:	0546                	slli	a0,a0,0x11
      f2:	0000                	unimp
      f4:	a404                	fsd	fs1,8(s0)
    for (i = 0; i < size_b; ++i){
      f6:	00006907          	0x6907
      fa:	0000                	unimp
    for (i = 0; i < size_a; ++i){
      fc:	4e0c                	lw	a1,24(a2)
      fe:	0005                	c.nop	1
     100:	0400                	addi	s0,sp,512
     102:	05a9                	addi	a1,a1,10
    for (i = 0; i < size_b; ++i){
     104:	00b4                	addi	a3,sp,72
     106:	0000                	unimp
     108:	0004                	0x4
    if(star_mult == 1){
     10a:	0004b903          	0x4b903
     10e:	0400                	addi	s0,sp,512
     110:	03aa                	slli	t2,t2,0xa
     112:	00e6                	slli	ra,ra,0x19
     114:	0000                	unimp
     116:	040d                	addi	s0,s0,3
     118:	0005ab03          	lw	s6,0(a1)
        for (j = size_b -1; j >= 0; j = j-1){
     11c:	0500                	addi	s0,sp,640
            for (k = size_a-1; k >= 0; k = k-1 ){
     11e:	1916                	slli	s2,s2,0x25
     120:	0054                	addi	a3,sp,4
            product[j] = 0;
     122:	0000                	unimp
     124:	00040503          	lb	a0,0(s0)
            line[i][j] = 0;
     128:	0600                	addi	s0,sp,768
     12a:	0d0c                	addi	a1,sp,656
            product[j] = 0;
     12c:	0069                	c.nop	26
     12e:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     130:	0001dd03          	lhu	s10,0(gp)
     134:	0500                	addi	s0,sp,640
     136:	01241b23          	sh	s2,22(s0)
    for (i = 0; i < size_b; ++i){
     13a:	0000                	unimp
     13c:	ee0e                	fsw	ft3,28(sp)
     13e:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     140:	1800                	addi	s0,sp,48
     142:	3405                	jal	fffffb62 <_stack_start+0xfffefb62>
        pola[i] = a[i];
     144:	9608                	0x9608
     146:	0001                	nop
     148:	0c00                	addi	s0,sp,528
     14a:	04da                	slli	s1,s1,0x16
     14c:	0000                	unimp
            pola[i] = pola[i] + mod;
     14e:	3605                	jal	fffffc6e <_stack_start+0xfffefc6e>
     150:	00019613          	slli	a2,gp,0x0
        while (pola[i] < 0){
     154:	0000                	unimp
     156:	006b5f0f          	0x6b5f0f
        pola[i] = pola[i] % mod;
     15a:	3705                	jal	7a <__DYNAMIC+0x7a>
     15c:	00006907          	0x6907
    for (i = 0; i < size_a; ++i){
     160:	0400                	addi	s0,sp,512
        pola[i] = pola[i] % mod;
     162:	220c                	fld	fa1,0(a2)
     164:	0005                	c.nop	1
    for (i = 0; i < size_a; ++i){
     166:	0500                	addi	s0,sp,640
            pola[i] = pola[i] + mod;
     168:	00690b37          	lui	s6,0x690
        polb[i] = b[i];
     16c:	0000                	unimp
     16e:	0c08                	addi	a0,sp,528
     170:	000001d7          	0x1d7
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     174:	3705                	jal	94 <polymult+0x8>
        while (polb[i] < 0){
     176:	6914                	flw	fa3,16(a0)
     178:	0000                	unimp
     17a:	0c00                	addi	s0,sp,528
        polb[i] = polb[i] % mod;
     17c:	4c0c                	lw	a1,24(s0)
     17e:	0006                	c.slli	zero,0x1
    for (i = 0; i < size_b; ++i){
     180:	0500                	addi	s0,sp,640
     182:	00691b37          	lui	s6,0x691
        polb[i] = polb[i] % mod;
     186:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     188:	0f10                	addi	a2,sp,912
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     18a:	785f 0500 0b38      	0xb380500785f
        for (j = size_b -1; j >= 0; j = j-1){
     190:	019c                	addi	a5,sp,192
     192:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     194:	0014                	0x14
    for (i = 0; i < size_b; ++i){
     196:	0410                	addi	a2,sp,512
     198:	013c                	addi	a5,sp,136
     19a:	0000                	unimp
     19c:	1809                	addi	a6,a6,-30
     19e:	0001                	nop
     1a0:	ac00                	fsd	fs0,24(s0)
     1a2:	0001                	nop
    for(j = 0; j < size_a + size_b -1; ++j){
     1a4:	0a00                	addi	s0,sp,272
     1a6:	0075                	c.nop	29
     1a8:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     1aa:	0000                	unimp
     1ac:	150e                	slli	a0,a0,0x23
     1ae:	0002                	c.slli64	zero
}
     1b0:	2400                	fld	fs0,8(s0)
     1b2:	3c05                	jal	fffffbe2 <_stack_start+0xfffefbe2>
     1b4:	2f08                	fld	fa0,24(a4)
     1b6:	0002                	c.slli64	zero
     1b8:	0c00                	addi	s0,sp,528
     1ba:	000000ef          	jal	ra,1ba <polymult+0x12e>
     1be:	3e05                	jal	fffffcee <_stack_start+0xfffefcee>
     1c0:	6909                	lui	s2,0x2
     1c2:	0000                	unimp
     1c4:	0000                	unimp
     1c6:	6e0c                	flw	fa1,24(a2)
     1c8:	0005                	c.nop	1
     1ca:	0500                	addi	s0,sp,640
     1cc:	0069093f 0c040000 	0xc0400000069093f
                line[size_b-1-j][k] = pola[k]*polb[j];
     1d4:	0122                	slli	sp,sp,0x8
     1d6:	0000                	unimp
     1d8:	4005                	c.li	zero,1
     1da:	6909                	lui	s2,0x2
     1dc:	0000                	unimp
     1de:	0800                	addi	s0,sp,16
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e0:	e80c                	fsw	fa1,16(s0)
                line[size_b-1-j][k] = pola[k]*polb[j];
     1e2:	0006                	c.slli	zero,0x1
     1e4:	0500                	addi	s0,sp,640
     1e6:	0941                	addi	s2,s2,16
     1e8:	0069                	c.nop	26
            for (k = size_a-1; k >= 0; k = k-1 ){
     1ea:	0000                	unimp
     1ec:	0c0c                	addi	a1,sp,528
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	039f 0000 4205      	0x42050000039f
     1f4:	6909                	lui	s2,0x2
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f6:	0000                	unimp
     1f8:	1000                	addi	s0,sp,32
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     1fa:	610c                	flw	fa1,0(a0)
     1fc:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
     200:	00690943          	fmadd.s	fs2,fs2,ft6,ft0,rne
     204:	0000                	unimp
     206:	0c14                	addi	a3,sp,528
     208:	0651                	addi	a2,a2,20
            for (k = size_a-1; k >= 0; k = k-1 ){
     20a:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     20c:	4405                	li	s0,1
     20e:	6909                	lui	s2,0x2
     210:	0000                	unimp
     212:	1800                	addi	s0,sp,48
            for (k = size_a-1; k >= 0; k = k-1 ){
     214:	4c0c                	lw	a1,24(s0)
     216:	0004                	0x4
        for (j = size_b -1; j >= 0; j = j-1){
     218:	0500                	addi	s0,sp,640
     21a:	0945                	addi	s2,s2,17
     21c:	0069                	c.nop	26
     21e:	0000                	unimp
            line[i][j] = line[i][j] % mod;
     220:	0c1c                	addi	a5,sp,528
        for(j = 0; j < size_a + size_b -1; ++j){
     222:	06aa                	slli	a3,a3,0xa
     224:	0000                	unimp
            line[i][j] = line[i][j] % mod;
     226:	4605                	li	a2,1
     228:	6909                	lui	s2,0x2
     22a:	0000                	unimp
     22c:	2000                	fld	fs0,0(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     22e:	1100                	addi	s0,sp,160
     230:	0131                	addi	sp,sp,12
    for (i = 0; i < size_b; ++i){
     232:	0000                	unimp
     234:	0108                	addi	a0,sp,128
     236:	4f05                	li	t5,1
     238:	7408                	flw	fa0,40(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     23a:	0002                	c.slli64	zero
     23c:	0c00                	addi	s0,sp,528
            product[j] += line[i][j];
     23e:	01bd                	addi	gp,gp,15
     240:	0000                	unimp
     242:	5005                	c.li	zero,-31
     244:	740a                	flw	fs0,160(sp)
        for(i = 0; i < size_b; ++i){
     246:	0002                	c.slli64	zero
            product[j] += line[i][j];
     248:	0000                	unimp
     24a:	000c                	0xc
     24c:	0000                	unimp
     24e:	0500                	addi	s0,sp,640
     250:	0951                	addi	s2,s2,20
     252:	0274                	addi	a3,sp,268
        for(i = 0; i < size_b; ++i){
     254:	0000                	unimp
     256:	1280                	addi	s0,sp,352
    for(j = 0; j < size_a + size_b -1; ++j){
     258:	0000058f          	0x58f
     25c:	5305                	li	t1,-31
        for(i = 0; i < size_b; ++i){
     25e:	180a                	slli	a6,a6,0x22
     260:	0001                	nop
        product[j] = product[j] % mod;
     262:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	1201                	addi	tp,tp,-32
     266:	0160                	addi	s0,sp,140
        product[j] = product[j] % mod;
     268:	0000                	unimp
     26a:	5605                	li	a2,-31
     26c:	180a                	slli	a6,a6,0x22
     26e:	0001                	nop
    for(j = 0; j < size_a + size_b -1; ++j){
     270:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     272:	0001                	nop
     274:	1609                	addi	a2,a2,-30
     276:	0001                	nop
     278:	8400                	0x8400
     27a:	0002                	c.slli64	zero
     27c:	0a00                	addi	s0,sp,272
     27e:	0075                	c.nop	29
     280:	0000                	unimp
     282:	001f b811 0003      	0x3b811001f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     288:	9000                	0x9000
     28a:	0501                	addi	a0,a0,0
     28c:	0862                	slli	a6,a6,0x18
     28e:	000002c7          	fmsub.s	ft5,ft0,ft0,ft0,rne
     292:	da0c                	sw	a1,48(a2)
     294:	0004                	0x4
     296:	0500                	addi	s0,sp,640
    int line[size_b][size_a + size_b];
     298:	02c71263          	bne	a4,a2,2bc <polymult2+0x4a>
     29c:	0000                	unimp
     29e:	0c00                	addi	s0,sp,528
    int pola[size_a];
     2a0:	04f2                	slli	s1,s1,0x1c
     2a2:	0000                	unimp
     2a4:	6405                	lui	s0,0x1
     2a6:	6906                	flw	fs2,64(sp)
    int line[size_b][size_a + size_b];
     2a8:	0000                	unimp
    int pola[size_a];
     2aa:	0400                	addi	s0,sp,512
     2ac:	d20c                	sw	a1,32(a2)
    int polb[size_b];
     2ae:	0001                	nop
     2b0:	0500                	addi	s0,sp,640
     2b2:	0966                	slli	s2,s2,0x19
    int pola[size_a];
     2b4:	02cd                	addi	t0,t0,19
    int polb[size_b];
     2b6:	0000                	unimp
     2b8:	0c08                	addi	a0,sp,528
    int line[size_b][size_a + size_b];
     2ba:	0131                	addi	sp,sp,12
     2bc:	0000                	unimp
    int pola[size_a];
     2be:	6705                	lui	a4,0x1
     2c0:	2f1e                	fld	ft10,448(sp)
    int polb[size_b];
     2c2:	0002                	c.slli64	zero
            line[i][j] = 0;
     2c4:	8800                	0x8800
     2c6:	1000                	addi	s0,sp,32
     2c8:	8404                	0x8404
    for (i = 0; i < size_b; ++i){
     2ca:	0002                	c.slli64	zero
     2cc:	0900                	addi	s0,sp,144
            product2[j] = 0;
     2ce:	02dd                	addi	t0,t0,23
     2d0:	0000                	unimp
     2d2:	02dd                	addi	t0,t0,23
     2d4:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     2d6:	750a                	flw	fa0,160(sp)
     2d8:	0000                	unimp
    for(i = 0; i < size_a; ++i){
     2da:	1f00                	addi	s0,sp,944
     2dc:	1000                	addi	s0,sp,32
     2de:	e304                	fsw	fs1,0(a4)
    for(i = 0; i < size_b; ++i){
     2e0:	0002                	c.slli64	zero
     2e2:	1300                	addi	s0,sp,416
     2e4:	560e                	lw	a2,224(sp)
    if(star_mult == 1){
     2e6:	0004                	0x4
     2e8:	0800                	addi	s0,sp,16
     2ea:	7a05                	lui	s4,0xfffe1
     2ec:	0c08                	addi	a0,sp,528
     2ee:	0c000003          	lb	zero,192(zero) # c0 <polymult+0x34>
     2f2:	011c                	addi	a5,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     2f4:	0000                	unimp
     2f6:	7b05                	lui	s6,0xfffe1
            for (k = size_a-1; k >= 0; k = k-1 ){
     2f8:	0c11                	addi	s8,s8,4
     2fa:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
            product2[j] = 0;
     2fe:	110c                	addi	a1,sp,160
     300:	0000                	unimp
            line[i][j] = 0;
     302:	0500                	addi	s0,sp,640
     304:	067c                	addi	a5,sp,780
            product2[j] = 0;
     306:	0069                	c.nop	26
     308:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     30a:	0004                	0x4
     30c:	0410                	addi	a2,sp,512
     30e:	0038                	addi	a4,sp,8
     310:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     312:	c40e                	sw	gp,8(sp)
     314:	0004                	0x4
     316:	6800                	flw	fs0,16(s0)
     318:	ba05                	j	fffffc48 <_stack_start+0xfffefc48>
        for(j = 0; j < size_a + size_b -1; ++j){
     31a:	5508                	lw	a0,40(a0)
     31c:	0004                	0x4
        pola[i] = a[i];
     31e:	0f00                	addi	s0,sp,912
     320:	705f 0500 12bb      	0x12bb0500705f
     326:	030c                	addi	a1,sp,384
     328:	0000                	unimp
    for(i = 0; i < size_a; ++i){
     32a:	0f00                	addi	s0,sp,912
        pola[i] = a[i];
     32c:	725f 0500 07bc      	0x7bc0500725f
        polb[i] = b[i];
     332:	0069                	c.nop	26
     334:	0000                	unimp
     336:	0f04                	addi	s1,sp,912
     338:	775f 0500 07bd      	0x7bd0500775f
    for(i = 0; i < size_b; ++i){
     33e:	0069                	c.nop	26
        polb[i] = b[i];
     340:	0000                	unimp
     342:	0c08                	addi	a0,sp,528
    for(i = 0; i < size_b; ++i){
     344:	0159                	addi	sp,sp,22
                line[size_b-1-j][k] = pola[k]*polb[j];
     346:	0000                	unimp
     348:	be05                	j	fffffe78 <_stack_start+0xfffefe78>
     34a:	3f09                	jal	25c <polymult+0x1d0>
     34c:	0000                	unimp
     34e:	0c00                	addi	s0,sp,528
     350:	540c                	lw	a1,40(s0)
     352:	0002                	c.slli64	zero
     354:	0500                	addi	s0,sp,640
            for (k = size_a-1; k >= 0; k = k-1 ){
     356:	003f09bf 0f0e0000 	0xf0e0000003f09bf
     35e:	625f 0066 c005      	0xc0050066625f
        for (j = size_b -1; j >= 0; j = j-1){
     364:	e411                	bnez	s0,370 <polymult2+0xfe>
     366:	0002                	c.slli64	zero
     368:	1000                	addi	s0,sp,32
     36a:	980c                	0x980c
     36c:	0000                	unimp
     36e:	0500                	addi	s0,sp,640
     370:	07c1                	addi	a5,a5,16
     372:	0069                	c.nop	26
        for(i = 0; i < size_b; ++i){
     374:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     376:	0c18                	addi	a4,sp,528
     378:	0000013f 160ac805 	0x160ac8050000013f
}
     380:	0001                	nop
     382:	1c00                	addi	s0,sp,560
     384:	050c                	addi	a1,sp,640
     386:	0002                	c.slli64	zero
     388:	0500                	addi	s0,sp,640
     38a:	1dca                	slli	s11,s11,0x32
     38c:	05d9                	addi	a1,a1,22
     38e:	0000                	unimp
     390:	0c20                	addi	s0,sp,536
     392:	035a                	slli	t1,t1,0x16
     394:	0000                	unimp
     396:	cc05                	beqz	s0,3ce <polymult2+0x15c>
            for (k = size_a-1; k >= 0; k = k-1 ){
     398:	031d                	addi	t1,t1,7
     39a:	0006                	c.slli	zero,0x1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     39c:	2400                	fld	fs0,8(s0)
     39e:	560c                	lw	a1,40(a2)
     3a0:	0005                	c.nop	1
     3a2:	0500                	addi	s0,sp,640
     3a4:	06270dcf          	fnmadd.q	fs11,fa4,ft2,ft0,rne
     3a8:	0000                	unimp
     3aa:	0c28                	addi	a0,sp,536
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ac:	06c4                	addi	s1,sp,836
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3ae:	0000                	unimp
     3b0:	d005                	beqz	s0,2d0 <polymult2+0x5e>
     3b2:	4109                	li	sp,2
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b4:	0006                	c.slli	zero,0x1
     3b6:	2c00                	fld	fs0,24(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     3b8:	62755f0f          	0x62755f0f
     3bc:	0500                	addi	s0,sp,640
     3be:	02e411d3          	fadd.d	ft3,fs0,fa4,rtz
            product2[j] += line[i][j];
     3c2:	0000                	unimp
     3c4:	0f30                	addi	a2,sp,920
        for(i = 0; i < size_b; ++i){
     3c6:	755f 0070 d405      	0xd4050070755f
            product2[j] += line[i][j];
     3cc:	0c12                	slli	s8,s8,0x4
     3ce:	38000003          	lb	zero,896(zero) # 380 <polymult2+0x10e>
     3d2:	72755f0f          	0x72755f0f
        for(i = 0; i < size_b; ++i){
     3d6:	0500                	addi	s0,sp,640
    for(j = 0; j < size_a + size_b -1; ++j){
     3d8:	07d5                	addi	a5,a5,21
     3da:	0069                	c.nop	26
     3dc:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     3de:	0c3c                	addi	a5,sp,536
     3e0:	0116                	slli	sp,sp,0x5
    int v[size_N];
     3e2:	0000                	unimp
     3e4:	d805                	beqz	s0,314 <polymult2+0xa2>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3e6:	4711                	li	a4,4
    int v[size_N];
     3e8:	0006                	c.slli	zero,0x1
     3ea:	4000                	lw	s0,0(s0)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3ec:	8f0c                	0x8f0c
     3ee:	0006                	c.slli	zero,0x1
     3f0:	0500                	addi	s0,sp,640
     3f2:	11d9                	addi	gp,gp,-10
     3f4:	00000657          	0x657
     3f8:	6c5f0f43          	0x6c5f0f43
     3fc:	0062                	c.slli	zero,0x18
     3fe:	dc05                	beqz	s0,336 <polymult2+0xc4>
     400:	e411                	bnez	s0,40c <polydiv+0x2a>
     402:	0002                	c.slli64	zero
     404:	4400                	lw	s0,8(s0)
     406:	6f0c                	flw	fa1,24(a4)
    int v[size_N];
     408:	0001                	nop
     40a:	0500                	addi	s0,sp,640
     40c:	07df 0069 0000      	0x6907df
    int q[size_N];
     412:	0c4c                	addi	a1,sp,532
    int num_temp[size_N];
     414:	0196                	slli	gp,gp,0x5
     416:	0000                	unimp
    int denum_temp[size_D];
     418:	e005                	bnez	s0,438 <polydiv+0x56>
     41a:	900a                	c.add	zero,sp
     41c:	0000                	unimp
     41e:	5000                	lw	s0,32(s0)
    int num_temp[size_N];
     420:	3e0c                	fld	fa1,56(a2)
    int denum_temp[size_D];
     422:	0000                	unimp
     424:	0500                	addi	s0,sp,640
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     426:	047312e3          	bne	t1,t2,c6a <ntru_encyrpt+0x5e>
    int denum_temp[size_D];
     42a:	0000                	unimp
     42c:	0c54                	addi	a3,sp,532
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     42e:	032a                	slli	t1,t1,0xa
    int v[size_N];
     430:	0000                	unimp
     432:	e705                	bnez	a4,45a <polydiv+0x78>
    int denum_temp[size_D];
     434:	300c                	fld	fa1,32(s0)
    for (i = 0; i < size_N; ++i){
     436:	0001                	nop
     438:	5800                	lw	s0,48(s0)
     43a:	cc0c                	sw	a1,24(s0)
     43c:	0004                	0x4
     43e:	0500                	addi	s0,sp,640
     440:	0ee9                	addi	t4,t4,26
    for (i = 0; i < size_D; ++i) {
     442:	010a                	slli	sp,sp,0x2
     444:	0000                	unimp
     446:	0c5c                	addi	a5,sp,532
    for (i = 0; i < size_N; ++i){
     448:	00000677          	0x677
     44c:	ea05                	bnez	a2,47c <polydiv+0x9a>
    for (i = size_D-1; i >= 0; i = i-1){
     44e:	6909                	lui	s2,0x2
     450:	0000                	unimp
     452:	6400                	flw	fs0,8(s0)
     454:	1400                	addi	s0,sp,544
     456:	00a8                	addi	a0,sp,72
     458:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     45a:	00000473          	0x473
        if ( (b_N*u)%mod == 1 )
     45e:	7315                	lui	t1,0xfffe5
    for (u = 0; u < mod; ++u){
     460:	0004                	0x4
     462:	1500                	addi	s0,sp,672
     464:	0116                	slli	sp,sp,0x5
     466:	0000                	unimp
        num_temp[i] = num[i];
     468:	c715                	beqz	a4,494 <polydiv+0xb2>
     46a:	0005                	c.nop	1
     46c:	1500                	addi	s0,sp,672
     46e:	0069                	c.nop	26
            num_temp[i] = num_temp[i] + mod;
     470:	0000                	unimp
        while (num_temp[i] < 0) {
     472:	1000                	addi	s0,sp,32
     474:	7e04                	flw	fs1,56(a2)
     476:	0004                	0x4
        num_temp[i] = num_temp[i] % mod;
     478:	1600                	addi	s0,sp,800
     47a:	00000473          	0x473
    for (i = 0; i < size_N; ++i){
     47e:	00052a17          	auipc	s4,0x52
        num_temp[i] = num_temp[i] % mod;
     482:	2800                	fld	fs0,16(s0)
    for (i = 0; i < size_N; ++i){
     484:	0504                	addi	s1,sp,640
            num_temp[i] = num_temp[i] + mod;
     486:	0265                	addi	tp,tp,25
     488:	c708                	sw	a0,8(a4)
        denum_temp[i] = denum[i];
     48a:	0005                	c.nop	1
     48c:	1800                	addi	s0,sp,48
     48e:	0000043b          	0x43b
            denum_temp[i] = denum_temp[i] + mod;
     492:	6705                	lui	a4,0x1
        while (denum_temp[i] < 0) {
     494:	0702                	c.slli64	a4
     496:	0069                	c.nop	26
     498:	0000                	unimp
        denum_temp[i] = denum_temp[i] % mod;
     49a:	1800                	addi	s0,sp,48
     49c:	0168                	addi	a0,sp,140
    for (i = 0; i < size_D; ++i) {
     49e:	0000                	unimp
     4a0:	6c05                	lui	s8,0x1
        denum_temp[i] = denum_temp[i] % mod;
     4a2:	0b02                	c.slli64	s6
     4a4:	000006b3          	add	a3,zero,zero
            denum_temp[i] = denum_temp[i] + mod;
     4a8:	1804                	addi	s1,sp,48
     4aa:	0236                	slli	tp,tp,0xd
        q[i] = 0;
     4ac:	0000                	unimp
     4ae:	6c05                	lui	s8,0x1
     4b0:	1402                	slli	s0,s0,0x20
     4b2:	000006b3          	add	a3,zero,zero
     4b6:	1808                	addi	a0,sp,48
     4b8:	01e6                	slli	gp,gp,0x19
        v[i] = 0;
     4ba:	0000                	unimp
     4bc:	6c05                	lui	s8,0x1
    for (i = 0; i < size_N; ++i){
     4be:	1e02                	slli	t3,t3,0x20
     4c0:	000006b3          	add	a3,zero,zero
    for (i = size_D-1; i >= 0; i = i-1){
     4c4:	180c                	addi	a1,sp,48
     4c6:	04ed                	addi	s1,s1,27
        if ( (b_N*u)%mod == 1 )
     4c8:	0000                	unimp
     4ca:	6e05                	lui	t3,0x1
     4cc:	0802                	c.slli64	a6
     4ce:	0069                	c.nop	26
     4d0:	0000                	unimp
    for (u = 0; u < mod; ++u){
     4d2:	1810                	addi	a2,sp,48
     4d4:	001f 0000 6f05      	0x6f050000001f
    for (i = size_N-1; i >= 0; i = i-1){
     4da:	0802                	c.slli64	a6
     4dc:	000008b3          	add	a7,zero,zero
     4e0:	1814                	addi	a3,sp,48
     4e2:	0509                	addi	a0,a0,2
     4e4:	0000                	unimp
    while (d >= d2){
     4e6:	7205                	lui	tp,0xfffe1
     4e8:	0702                	c.slli64	a4
    for(i = 0; i < size_N; ++i){
     4ea:	0069                	c.nop	26
        result[i] = q[i];
     4ec:	0000                	unimp
     4ee:	1830                	addi	a2,sp,56
     4f0:	000004f7          	0x4f7
    for(i = 0; i < size_N; ++i){
     4f4:	7305                	lui	t1,0xfffe1
     4f6:	1602                	slli	a2,a2,0x20
    for(i = size_N; i < (2*size_N); ++i){
     4f8:	08c8                	addi	a0,sp,84
     4fa:	0000                	unimp
        result[i] = num_temp[i-size_N];
     4fc:	1834                	addi	a3,sp,56
     4fe:	03ca                	slli	t2,t2,0x12
     500:	0000                	unimp
     502:	7505                	lui	a0,0xfffe1
    for(i = size_N; i < (2*size_N); ++i){
     504:	0702                	c.slli64	a4
     506:	0069                	c.nop	26
}
     508:	0000                	unimp
     50a:	1838                	addi	a4,sp,56
     50c:	04ff                	0x4ff
     50e:	0000                	unimp
     510:	7705                	lui	a4,0xfffe1
     512:	0a02                	c.slli64	s4
     514:	08d9                	addi	a7,a7,22
     516:	0000                	unimp
     518:	183c                	addi	a5,sp,56
     51a:	02f6                	slli	t0,t0,0x1d
     51c:	0000                	unimp
     51e:	7a05                	lui	s4,0xfffe1
     520:	1302                	slli	t1,t1,0x20
     522:	0196                	slli	gp,gp,0x5
     524:	0000                	unimp
     526:	1840                	addi	s0,sp,52
     528:	0000020b          	0x20b
     52c:	7b05                	lui	s6,0xfffe1
     52e:	0702                	c.slli64	a4
     530:	0069                	c.nop	26
        v[(d-d2)] = u*r_d;
     532:	0000                	unimp
     534:	1844                	addi	s1,sp,52
     536:	06de                	slli	a3,a3,0x17
     538:	0000                	unimp
     53a:	7c05                	lui	s8,0xfffe1
     53c:	1302                	slli	t1,t1,0x20
     53e:	0196                	slli	gp,gp,0x5
        for (i = 0; i < size_N; ++i){
     540:	0000                	unimp
     542:	1848                	addi	a0,sp,52
     544:	03f1                	addi	t2,t2,28
     546:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     548:	7d05                	lui	s10,0xfffe1
     54a:	1402                	slli	s0,s0,0x20
     54c:	08df 0000 184c      	0x184c000008df
     552:	023e                	slli	tp,tp,0xf
     554:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     556:	8005                	srli	s0,s0,0x1
     558:	0702                	c.slli64	a4
     55a:	0069                	c.nop	26
     55c:	0000                	unimp
     55e:	1850                	addi	a2,sp,52
        for (i = 0; i < size_N; ++i){
     560:	018e                	slli	gp,gp,0x3
     562:	0000                	unimp
     564:	8105                	srli	a0,a0,0x1
     566:	0902                	c.slli64	s2
        for (i = 0; i < size_N; ++i){
     568:	000005c7          	fmsub.s	fa1,ft0,ft0,ft0,rne
     56c:	1854                	addi	a3,sp,52
     56e:	0434                	addi	a3,sp,520
        for(i = 0; i < size_N; ++i){
     570:	0000                	unimp
     572:	a405                	j	792 <ext_euclid+0x15e>
     574:	0702                	c.slli64	a4
        for (i = size_N-1; i >= 0; i = i-1){
     576:	088e                	slli	a7,a7,0x3
     578:	0000                	unimp
     57a:	1958                	addi	a4,sp,180
     57c:	03b8                	addi	a4,sp,456
     57e:	0000                	unimp
     580:	a805                	j	5b0 <polydiv+0x1ce>
     582:	1302                	slli	t1,t1,0x20
     584:	000002c7          	fmsub.s	ft5,ft0,ft0,ft0,rne
            v[i] = v[i] % mod;
     588:	0148                	addi	a0,sp,132
        for (i = 0; i < size_N; ++i){
     58a:	d419                	beqz	s0,498 <polydiv+0xb6>
     58c:	0002                	c.slli64	zero
            v[i] = v[i] % mod;
     58e:	0500                	addi	s0,sp,640
     590:	02a9                	addi	t0,t0,10
     592:	8412                	mv	s0,tp
     594:	0002                	c.slli64	zero
        for (i = 0; i < size_N; ++i){
     596:	4c00                	lw	s0,24(s0)
                product[i] = product[i] + mod;
     598:	1901                	addi	s2,s2,-32
     59a:	0685                	addi	a3,a3,1
            while (product[i] < 0) {
     59c:	0000                	unimp
     59e:	ad05                	j	bce <generate_keys+0x2b6>
     5a0:	0c02                	c.slli64	s8
            product[i] = product[i] % mod;
     5a2:	08f0                	addi	a2,sp,92
     5a4:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     5a6:	02dc                	addi	a5,sp,324
     5a8:	4719                	li	a4,6
            product[i] = product[i] % mod;
     5aa:	0001                	nop
     5ac:	0500                	addi	s0,sp,640
        for (i = 0; i < size_N; ++i){
     5ae:	02b2                	slli	t0,t0,0xc
            num_temp[i] = num_temp[i] - product[i];
     5b0:	7410                	flw	fa2,40(s0)
     5b2:	0006                	c.slli	zero,0x1
     5b4:	e000                	fsw	fs0,0(s0)
     5b6:	1902                	slli	s2,s2,0x20
     5b8:	012c                	addi	a1,sp,136
        for (i = 0; i < size_N; ++i){
     5ba:	0000                	unimp
     5bc:	b405                	j	ffffffdc <_stack_start+0xfffeffdc>
            num_temp[i] = num_temp[i] - product[i];
     5be:	0a02                	c.slli64	s4
     5c0:	08fc                	addi	a5,sp,92
     5c2:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     5c4:	02ec                	addi	a1,sp,332
                num_temp[i] = num_temp[i] + mod;
     5c6:	1000                	addi	s0,sp,32
     5c8:	cd04                	sw	s1,24(a0)
            while (num_temp[i] < 0){
     5ca:	0005                	c.nop	1
     5cc:	0200                	addi	s0,sp,256
     5ce:	0801                	addi	a6,a6,0
            num_temp[i] = num_temp[i] % mod;
     5d0:	042a                	slli	s0,s0,0xa
     5d2:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     5d4:	cd16                	sw	t0,152(sp)
     5d6:	0005                	c.nop	1
            num_temp[i] = num_temp[i] % mod;
     5d8:	1000                	addi	s0,sp,32
     5da:	5504                	lw	s1,40(a0)
        for (i = 0; i < size_N; ++i){
     5dc:	0004                	0x4
            q[i] = q[i] + v[i];
     5de:	1400                	addi	s0,sp,544
     5e0:	00a8                	addi	a0,sp,72
     5e2:	0000                	unimp
     5e4:	05fd                	addi	a1,a1,31
     5e6:	0000                	unimp
        for(i = 0; i < size_N; ++i){
     5e8:	7315                	lui	t1,0xfffe5
     5ea:	0004                	0x4
            q[i] = q[i] + v[i];
     5ec:	1500                	addi	s0,sp,672
            q[i] = q[i] % mod;
     5ee:	0116                	slli	sp,sp,0x5
     5f0:	0000                	unimp
     5f2:	fd15                	bnez	a0,52e <polydiv+0x14c>
     5f4:	0005                	c.nop	1
        for(i = 0; i < size_N; ++i){
     5f6:	1500                	addi	s0,sp,672
            if( num_temp[i] != 0 )
     5f8:	0069                	c.nop	26
        for (i = size_N-1; i >= 0; i = i-1){
     5fa:	0000                	unimp
     5fc:	1000                	addi	s0,sp,32
            v[i] = 0;
     5fe:	d404                	sw	s1,40(s0)
     600:	0005                	c.nop	1
     602:	1000                	addi	s0,sp,32
     604:	df04                	sw	s1,56(a4)
     606:	0005                	c.nop	1
        for (i = 0; i < size_N; ++i){
     608:	1400                	addi	s0,sp,544
     60a:	009c                	addi	a5,sp,64
     60c:	0000                	unimp
     60e:	00000627          	0x627
        result[i] = q[i];
     612:	7315                	lui	t1,0xfffe5
     614:	0004                	0x4
     616:	1500                	addi	s0,sp,672
     618:	0116                	slli	sp,sp,0x5
     61a:	0000                	unimp
    for(i = 0; i < size_N; ++i){
     61c:	9c15                	0x9c15
        result[i] = q[i];
     61e:	0000                	unimp
    for(i = 0; i < size_N; ++i){
     620:	1500                	addi	s0,sp,672
        result[i] = num_temp[i-size_N];
     622:	0069                	c.nop	26
     624:	0000                	unimp
     626:	1000                	addi	s0,sp,32
     628:	0904                	addi	s1,sp,144
     62a:	0006                	c.slli	zero,0x1
     62c:	1400                	addi	s0,sp,544
    for(i = size_N; i < (2*size_N); ++i){
     62e:	0069                	c.nop	26
     630:	0000                	unimp
     632:	0641                	addi	a2,a2,16
    int ri_2[size]; // MX-ring poly, a
     634:	0000                	unimp
     636:	7315                	lui	t1,0xfffe5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     638:	0004                	0x4
    int ri_2[size]; // MX-ring poly, a
     63a:	1500                	addi	s0,sp,672
     63c:	0116                	slli	sp,sp,0x5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     63e:	0000                	unimp
     640:	1000                	addi	s0,sp,32
     642:	2d04                	fld	fs1,24(a0)
     644:	0006                	c.slli	zero,0x1
     646:	0900                	addi	s0,sp,144
     648:	0038                	addi	a4,sp,8
     64a:	0000                	unimp
     64c:	00000657          	0x657
     650:	750a                	flw	fa0,160(sp)
     652:	0000                	unimp
     654:	0200                	addi	s0,sp,256
     656:	0900                	addi	s0,sp,144
     658:	0038                	addi	a4,sp,8
    int ri_2[size]; // MX-ring poly, a
     65a:	0000                	unimp
     65c:	00000667          	jalr	a2,zero # 0 <__DYNAMIC>
    int ri_1[size]; // f-random poly, f[N] = 0, b
     660:	750a                	flw	fa0,160(sp)
     662:	0000                	unimp
     664:	0000                	unimp
    int ri[size];
     666:	0600                	addi	s0,sp,768
     668:	04b2                	slli	s1,s1,0xc
     66a:	0000                	unimp
    int ti_1[size]; // ti_1[0] = 1
     66c:	2405                	jal	88c <ext_euclid+0x258>
     66e:	1a01                	addi	s4,s4,-32
     670:	0312                	slli	t1,t1,0x4
    int ti[size];
     672:	0000                	unimp
     674:	5b1a                	lw	s6,164(sp)
     676:	0006                	c.slli	zero,0x1
    int qi_1[size];
     678:	0c00                	addi	s0,sp,528
     67a:	2805                	jal	6aa <ext_euclid+0x76>
     67c:	0801                	addi	a6,a6,0
    int temp[size];
     67e:	06ad                	addi	a3,a3,11
     680:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     682:	da18                	sw	a4,48(a2)
     684:	0004                	0x4
    int ri_2[size]; // MX-ring poly, a
     686:	0500                	addi	s0,sp,640
     688:	012a                	slli	sp,sp,0xa
    int temp[size];
     68a:	ad11                	j	c9e <ntru_encyrpt+0x92>
    for (i = 0; i < size; ++i) {
     68c:	0006                	c.slli	zero,0x1
     68e:	0000                	unimp
        ti_2[i] = 0;
     690:	9a18                	0x9a18
     692:	0002                	c.slli64	zero
     694:	0500                	addi	s0,sp,640
     696:	6907012b          	0x6907012b
    for (i = 0; i < size; ++i) {
     69a:	0000                	unimp
    ti_1[0] = 1;
     69c:	0400                	addi	s0,sp,512
     69e:	ac18                	fsd	fa4,24(s0)
     6a0:	0004                	0x4
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6a2:	0500                	addi	s0,sp,640
     6a4:	012c                	addi	a1,sp,136
     6a6:	0006b30b          	0x6b30b
        for (i = 0; i < N + 1; ++i) {
     6aa:	0800                	addi	s0,sp,16
     6ac:	1000                	addi	s0,sp,32
        ri_2[i] = polyR[i];
     6ae:	7404                	flw	fs1,40(s0)
     6b0:	0006                	c.slli	zero,0x1
     6b2:	1000                	addi	s0,sp,32
     6b4:	6704                	flw	fs1,8(a4)
     6b6:	0006                	c.slli	zero,0x1
     6b8:	1a00                	addi	s0,sp,304
    for (i = 0; i < size; ++i) {
     6ba:	00000017          	auipc	zero,0x0
        ri_2[i] = polyR[i];
     6be:	050e                	slli	a0,a0,0x3
        ri_1[i] = polyf[i];
     6c0:	0144                	addi	s1,sp,132
     6c2:	f208                	fsw	fa0,32(a2)
     6c4:	0006                	c.slli	zero,0x1
     6c6:	1800                	addi	s0,sp,48
     6c8:	0000053b          	0x53b
     6cc:	4505                	li	a0,1
     6ce:	1201                	addi	tp,tp,-32
        ti_2[i] = 0;
     6d0:	06f2                	slli	a3,a3,0x1c
     6d2:	0000                	unimp
     6d4:	1800                	addi	s0,sp,48
     6d6:	0535                	addi	a0,a0,13
        ti_1[i] = 0;
     6d8:	0000                	unimp
     6da:	4605                	li	a2,1
     6dc:	1201                	addi	tp,tp,-32
     6de:	06f2                	slli	a3,a3,0x1c
    for (i = 0; i < size; ++i) {
     6e0:	0000                	unimp
     6e2:	1806                	slli	a6,a6,0x21
                ri_2[i] = ri_2[i] + mod;
     6e4:	05a6                	slli	a1,a1,0x9
     6e6:	0000                	unimp
            while (ri_2[i] < 0) {
     6e8:	4705                	li	a4,1
     6ea:	1201                	addi	tp,tp,-32
     6ec:	0046                	c.slli	zero,0x11
            ri_2[i] = ri_2[i] % mod;
     6ee:	0000                	unimp
     6f0:	000c                	0xc
        for (i = 0; i < N + 1; ++i) {
     6f2:	4609                	li	a2,2
            ri_2[i] = ri_2[i] % mod;
     6f4:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     6f6:	0200                	addi	s0,sp,256
     6f8:	0a000007          	0xa000007
     6fc:	0075                	c.nop	29
     6fe:	0000                	unimp
     700:	0002                	c.slli64	zero
     702:	8505d01b          	0x8505d01b
        for (i = 0; i < N + 1; ++i) {
     706:	0702                	c.slli64	a4
     708:	00000817          	auipc	a6,0x0
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     70c:	3a18                	fld	fa4,48(a2)
     70e:	0006                	c.slli	zero,0x1
     710:	0500                	addi	s0,sp,640
     712:	75180287          	0x75180287
        for (i = N + 1; i < (2 * N + 2); ++i) {
     716:	0000                	unimp
     718:	0000                	unimp
     71a:	8218                	0x8218
     71c:	0005                	c.nop	1
     71e:	0500                	addi	s0,sp,640
     720:	0288                	addi	a0,sp,320
     722:	c712                	sw	tp,140(sp)
        for (i = 0; i < N + 1; ++i) {
     724:	0005                	c.nop	1
     726:	0400                	addi	s0,sp,512
     728:	e918                	fsw	fa4,16(a0)
     72a:	0002                	c.slli64	zero
     72c:	0500                	addi	s0,sp,640
        for (i = 0; i < N + 1; ++i) {
     72e:	0289                	addi	t0,t0,2
     730:	1710                	addi	a2,sp,928
     732:	0008                	0x8
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     734:	0800                	addi	s0,sp,16
     736:	b518                	fsd	fa4,40(a0)
     738:	0006                	c.slli	zero,0x1
     73a:	0500                	addi	s0,sp,640
     73c:	028a                	slli	t0,t0,0x2
     73e:	0001ac17          	auipc	s8,0x1a
        for (i = 0; i < N + 1; ++i) {
     742:	2400                	fld	fs0,8(s0)
     744:	f618                	fsw	fa4,40(a2)
     746:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     748:	0500                	addi	s0,sp,640
     74a:	690f028b          	0x690f028b
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     74e:	0000                	unimp
     750:	4800                	lw	s0,16(s0)
     752:	d518                	sw	a4,40(a0)
     754:	0004                	0x4
     756:	0500                	addi	s0,sp,640
     758:	028c                	addi	a1,sp,320
     75a:	622c                	flw	fa1,64(a2)
        for (i = 0; i < N + 1; ++i) {
     75c:	0000                	unimp
     75e:	5000                	lw	s0,32(s0)
     760:	cb18                	sw	a4,16(a4)
        for (i = 0; i < N + 1; ++i) {
     762:	0006                	c.slli	zero,0x1
     764:	0500                	addi	s0,sp,640
     766:	028d                	addi	t0,t0,3
     768:	b91a                	fsd	ft6,176(sp)
        for (i = 0; i < N + 1; ++i) {
     76a:	0006                	c.slli	zero,0x1
     76c:	5800                	lw	s0,48(s0)
     76e:	e018                	fsw	fa4,0(s0)
     770:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     772:	0500                	addi	s0,sp,640
     774:	028e                	slli	t0,t0,0x3
     776:	0a16                	slli	s4,s4,0x5
     778:	0001                	nop
        controlR = 0;
     77a:	6800                	flw	fs0,16(s0)
        for (i = 0; i < N + 1; ++i) {
     77c:	d018                	sw	a4,32(s0)
     77e:	0006                	c.slli	zero,0x1
     780:	0500                	addi	s0,sp,640
    while (controlR != 0) {
     782:	0a16028f          	0xa16028f
            if (((ri_2[0] * j) % mod) == 1)
     786:	0001                	nop
        for (j = 0; j < mod; ++j) {
     788:	7000                	flw	fs0,32(s0)
     78a:	e118                	fsw	fa4,0(a0)
     78c:	0000                	unimp
     78e:	0500                	addi	s0,sp,640
     790:	0290                	addi	a2,sp,320
     792:	0a16                	slli	s4,s4,0x5
        for (i = 0; i < N + 1; ++i) {
     794:	0001                	nop
     796:	7800                	flw	fs0,48(s0)
    }
     798:	5c18                	lw	a4,56(s0)
     79a:	0005                	c.nop	1
     79c:	0500                	addi	s0,sp,640
     79e:	0291                	addi	t0,t0,4
     7a0:	2710                	fld	fa2,8(a4)
     7a2:	0008                	0x8
     7a4:	8000                	0x8000
     7a6:	dd18                	sw	a4,56(a0)
     7a8:	0002                	c.slli64	zero
     7aa:	0500                	addi	s0,sp,640
     7ac:	0292                	slli	t0,t0,0x4
     7ae:	3710                	fld	fa2,40(a4)
     7b0:	0008                	0x8
     7b2:	8800                	0x8800
     7b4:	b818                	fsd	fa4,48(s0)
     7b6:	0005                	c.nop	1
     7b8:	0500                	addi	s0,sp,640
     7ba:	690f0293          	addi	t0,t5,1680
     7be:	0000                	unimp
     7c0:	a000                	fsd	fs0,0(s0)
                ri_1[i] = ri_1[i] + mod;
     7c2:	af18                	fsd	fa4,24(a4)
     7c4:	0001                	nop
            while (ri_1[i] < 0) {
     7c6:	0500                	addi	s0,sp,640
     7c8:	0294                	addi	a3,sp,320
     7ca:	0a16                	slli	s4,s4,0x5
            ri_1[i] = ri_1[i] % mod;
     7cc:	0001                	nop
     7ce:	a400                	fsd	fs0,8(s0)
        for (i = 0; i < N + 1; ++i) {
     7d0:	d218                	sw	a4,32(a2)
     7d2:	0000                	unimp
            ri_1[i] = ri_1[i] % mod;
     7d4:	0500                	addi	s0,sp,640
     7d6:	0295                	addi	t0,t0,5
        for (i = 0; i < N + 1; ++i) {
     7d8:	0a16                	slli	s4,s4,0x5
            ri[i - (N + 1)] = res[i];
     7da:	0001                	nop
     7dc:	ac00                	fsd	fs0,24(s0)
     7de:	9e18                	0x9e18
     7e0:	0001                	nop
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7e2:	0500                	addi	s0,sp,640
     7e4:	0296                	slli	t0,t0,0x5
            ri[i - (N + 1)] = res[i];
     7e6:	0a16                	slli	s4,s4,0x5
     7e8:	0001                	nop
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7ea:	b400                	fsd	fs0,40(s0)
            temp[i] = ri_2[i] - ri[i];
     7ec:	4418                	lw	a4,8(s0)
     7ee:	0000                	unimp
     7f0:	0500                	addi	s0,sp,640
     7f2:	0a160297          	auipc	t0,0xa160
     7f6:	0001                	nop
     7f8:	bc00                	fsd	fs0,56(s0)
     7fa:	5318                	lw	a4,32(a4)
        for (i = 0; i < N + 1; ++i) {
     7fc:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     7fe:	0500                	addi	s0,sp,640
     800:	0298                	addi	a4,sp,320
        for (i = 0; i < N + 1; ++i) {
     802:	0a16                	slli	s4,s4,0x5
     804:	0001                	nop
                temp[i] = temp[i] + mod;
     806:	c400                	sw	s0,8(s0)
     808:	3918                	fld	fa4,48(a0)
            while (temp[i] < 0) {
     80a:	0004                	0x4
     80c:	0500                	addi	s0,sp,640
     80e:	0299                	addi	t0,t0,6
            temp[i] = temp[i] % mod;
     810:	6908                	flw	fa0,16(a0)
     812:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     814:	cc00                	sw	s0,24(s0)
     816:	0900                	addi	s0,sp,144
            temp[i] = temp[i] % mod;
     818:	05cd                	addi	a1,a1,19
     81a:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     81c:	00000827          	0x827
            qi_1[i] = res1[i];
     820:	750a                	flw	fa0,160(sp)
     822:	0000                	unimp
     824:	1900                	addi	s0,sp,176
     826:	0900                	addi	s0,sp,144
     828:	05cd                	addi	a1,a1,19
        for (i = 0; i < N + 1; ++i) {
     82a:	0000                	unimp
            qi_1[i] = res1[i];
     82c:	00000837          	lui	a6,0x0
                qi_1[i] = qi_1[i] + mod;
     830:	750a                	flw	fa0,160(sp)
     832:	0000                	unimp
            while (qi_1[i] < 0) {
     834:	0700                	addi	s0,sp,896
     836:	0900                	addi	s0,sp,144
     838:	05cd                	addi	a1,a1,19
            qi_1[i] = qi_1[i] % mod;
     83a:	0000                	unimp
     83c:	00000847          	fmsub.s	fa6,ft0,ft0,ft0,rne
        for (i = 0; i < N + 1; ++i) {
     840:	750a                	flw	fa0,160(sp)
            qi_1[i] = qi_1[i] % mod;
     842:	0000                	unimp
     844:	1700                	addi	s0,sp,928
        for (i = 0; i < N + 1; ++i) {
     846:	1b00                	addi	s0,sp,432
            temp[i] = res2[i];
     848:	05f0                	addi	a2,sp,716
     84a:	029e                	slli	t0,t0,0x7
     84c:	00086e07          	0x86e07
     850:	1800                	addi	s0,sp,48
     852:	0390                	addi	a2,sp,448
        for (i = 0; i < N + 1; ++i) {
     854:	0000                	unimp
            temp[i] = res2[i];
     856:	a105                	j	c76 <ntru_encyrpt+0x6a>
        for (i = 0; i < N + 1; ++i) {
     858:	1b02                	slli	s6,s6,0x20
                temp[i] = temp[i] + mod;
     85a:	086e                	slli	a6,a6,0x1b
     85c:	0000                	unimp
     85e:	1800                	addi	s0,sp,48
            while (temp[i] < 0) {
     860:	0000037b          	0x37b
     864:	a205                	j	984 <generate_keys+0x6c>
     866:	1802                	slli	a6,a6,0x20
            temp[i] = temp[i] % mod;
     868:	087e                	slli	a6,a6,0x1f
     86a:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     86c:	0078                	addi	a4,sp,12
     86e:	0c09                	addi	s8,s8,2
            temp[i] = temp[i] % mod;
     870:	7e000003          	lb	zero,2016(zero) # 7e0 <ext_euclid+0x1ac>
        for (i = 0; i < N + 1; ++i) {
     874:	0008                	0x8
            ti[i] = ti_2[i] - temp[i];
     876:	0a00                	addi	s0,sp,272
     878:	0075                	c.nop	29
     87a:	0000                	unimp
     87c:	001d                	c.nop	7
     87e:	7509                	lui	a0,0xfffe2
     880:	0000                	unimp
     882:	8e00                	0x8e00
     884:	0008                	0x8
     886:	0a00                	addi	s0,sp,272
     888:	0075                	c.nop	29
     88a:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     88c:	001d                	c.nop	7
            ti[i] = ti_2[i] - temp[i];
     88e:	f01c                	fsw	fa5,32(s0)
     890:	8305                	srli	a4,a4,0x1
        for (i = 0; i < N + 1; ++i) {
     892:	0302                	c.slli64	t1
     894:	000008b3          	add	a7,zero,zero
                ti[i] = ti[i] + mod;
     898:	2a1d                	jal	9ce <generate_keys+0xb6>
            while (ti[i] < 0) {
     89a:	0005                	c.nop	1
     89c:	0500                	addi	s0,sp,640
     89e:	029a                	slli	t0,t0,0x6
            ti[i] = ti[i] % mod;
     8a0:	0007020b          	0x7020b
        for (i = 0; i < N + 1; ++i) {
     8a4:	1d00                	addi	s0,sp,688
     8a6:	0695                	addi	a3,a3,5
            ti[i] = ti[i] % mod;
     8a8:	0000                	unimp
     8aa:	a305                	j	dca <zero_loop>
        for (i = 0; i < N + 1; ++i) {
     8ac:	0b02                	c.slli64	s6
            ri_2[i] = ri_1[i];
     8ae:	00000847          	fmsub.s	fa6,ft0,ft0,ft0,rne
     8b2:	0900                	addi	s0,sp,144
     8b4:	05cd                	addi	a1,a1,19
     8b6:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8b8:	000008c3          	fmadd.s	fa7,ft0,ft0,ft0,rne
            ri_1[i] = ri[i];
     8bc:	750a                	flw	fa0,160(sp)
     8be:	0000                	unimp
     8c0:	1800                	addi	s0,sp,48
            ti_2[i] = ti_1[i];
     8c2:	1e00                	addi	s0,sp,816
     8c4:	00ad                	addi	ra,ra,11
     8c6:	0000                	unimp
     8c8:	0410                	addi	a2,sp,512
     8ca:	000008c3          	fmadd.s	fa7,ft0,ft0,ft0,rne
     8ce:	d91f 0008 1500      	0x15000008d91f
     8d4:	00000473          	0x473
     8d8:	1000                	addi	s0,sp,32
     8da:	ce04                	sw	s1,24(a2)
            ti_1[i] = ti[i];
     8dc:	0008                	0x8
     8de:	1000                	addi	s0,sp,32
     8e0:	9604                	0x9604
     8e2:	0001                	nop
            qi_1[i] = 0;
     8e4:	1f00                	addi	s0,sp,944
     8e6:	08f0                	addi	a2,sp,92
     8e8:	0000                	unimp
     8ea:	6915                	lui	s2,0x5
        for (i = 0; i < N + 1; ++i) {
     8ec:	0000                	unimp
     8ee:	0000                	unimp
            if (((ri_2[0] * j) % mod) == 1)
     8f0:	0410                	addi	a2,sp,512
     8f2:	08f6                	slli	a7,a7,0x1d
     8f4:	0000                	unimp
     8f6:	0410                	addi	a2,sp,512
     8f8:	08e5                	addi	a7,a7,25
     8fa:	0000                	unimp
     8fc:	6709                	lui	a4,0x2
     8fe:	0006                	c.slli	zero,0x1
        for (j = 0; j < mod; ++j) {
     900:	0c00                	addi	s0,sp,528
     902:	0009                	c.nop	2
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     904:	0a00                	addi	s0,sp,272
        for (i = 0; i < N + 1; ++i) {
     906:	0075                	c.nop	29
     908:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     90a:	0002                	c.slli64	zero
     90c:	cc20                	sw	s0,88(s0)
     90e:	0005                	c.nop	1
     910:	0500                	addi	s0,sp,640
     912:	73170333          	0x73170333
        for (i = 0; i < N + 1; ++i) {
     916:	0004                	0x4
int* generate_keys(int N, int p, int q){
     918:	2000                	fld	fs0,0(s0)
     91a:	05c5                	addi	a1,a1,17
     91c:	0000                	unimp
     91e:	3405                	jal	33e <polymult2+0xcc>
     920:	04791d03          	lh	s10,71(s2) # 5047 <_stack_len+0x1047>
     924:	0000                	unimp
     926:	00003603          	0x3603
     92a:	0700                	addi	s0,sp,896
     92c:	1318                	addi	a4,sp,416
     92e:	002c                	addi	a1,sp,8
     930:	0000                	unimp
     932:	2605                	jal	c52 <ntru_encyrpt+0x46>
     934:	0009                	c.nop	2
     936:	2100                	fld	fs0,0(a0)
     938:	03c0                	addi	s0,sp,452
     93a:	0000                	unimp
     93c:	6708                	flw	fa0,8(a4)
     93e:	c70e                	sw	gp,140(sp)
     940:	0005                	c.nop	1
     942:	0900                	addi	s0,sp,144
     944:	0069                	c.nop	26
     946:	0000                	unimp
     948:	00000953          	fadd.s	fs2,ft0,ft0,rne
     94c:	750a                	flw	fa0,160(sp)
     94e:	0000                	unimp
     950:	9500                	0x9500
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     952:	2200                	fld	fs0,0(a2)
     954:	0178                	addi	a4,sp,140
     956:	0000                	unimp
     958:	0601                	addi	a2,a2,0
     95a:	430c                	lw	a1,0(a4)
     95c:	0009                	c.nop	2
     95e:	0500                	addi	s0,sp,640
     960:	00122003          	lw	zero,1(tp) # fffe1001 <_stack_start+0xfffd1001>
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     964:	2200                	fld	fs0,0(a2)
     966:	0346                	slli	t1,t1,0x11
     968:	0000                	unimp
     96a:	0701                	addi	a4,a4,0
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96c:	430c                	lw	a1,0(a4)
     96e:	0009                	c.nop	2
     970:	0500                	addi	s0,sp,640
     972:	00147803          	0x147803
     976:	2200                	fld	fs0,0(a2)
     978:	000002f7          	0x2f7
     97c:	0801                	addi	a6,a6,0
     97e:	430c                	lw	a1,0(a4)
     980:	0009                	c.nop	2
     982:	0500                	addi	s0,sp,640
     984:	0016d003          	lhu	zero,1(a3)
     988:	0900                	addi	s0,sp,144
     98a:	0069                	c.nop	26
     98c:	0000                	unimp
     98e:	0999                	addi	s3,s3,6
     990:	0000                	unimp
     992:	750a                	flw	fa0,160(sp)
     994:	0000                	unimp
     996:	6300                	flw	fs0,0(a4)
     998:	2200                	fld	fs0,0(a2)
     99a:	041c                	addi	a5,sp,512
     99c:	0000                	unimp
     99e:	0901                	addi	s2,s2,0
     9a0:	890c                	0x890c
     9a2:	0009                	c.nop	2
     9a4:	0500                	addi	s0,sp,640
     9a6:	00192803          	lw	a6,1(s2)
     9aa:	0900                	addi	s0,sp,144
     9ac:	0069                	c.nop	26
     9ae:	0000                	unimp
     9b0:	09bc                	addi	a5,sp,216
     9b2:	0000                	unimp
     9b4:	00007523          	0x7523
     9b8:	3d00                	fld	fs0,56(a0)
     9ba:	0001                	nop
     9bc:	a122                	fsd	fs0,128(sp)
     9be:	0000                	unimp
     9c0:	0100                	addi	s0,sp,128
     9c2:	0c0a                	slli	s8,s8,0x2
     9c4:	000009ab          	0x9ab
     9c8:	0305                	addi	t1,t1,1
     9ca:	1ab8                	addi	a4,sp,376
     9cc:	0000                	unimp
     9ce:	7009                	c.lui	zero,0xfffe2
     9d0:	0000                	unimp
     9d2:	de00                	sw	s0,56(a2)
     9d4:	0009                	c.nop	2
     9d6:	0a00                	addi	s0,sp,272
    int polyR[N+1];
     9d8:	0075                	c.nop	29
     9da:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9dc:	0000                	unimp
    int polyR[N+1];
     9de:	ce05                	beqz	a2,a16 <generate_keys+0xfe>
     9e0:	0009                	c.nop	2
     9e2:	2400                	fld	fs0,8(s0)
     9e4:	022c                	addi	a1,sp,264
     9e6:	0000                	unimp
     9e8:	0b01                	addi	s6,s6,0
     9ea:	de0e                	sw	gp,60(sp)
    polyR[N] = 1;
     9ec:	0009                	c.nop	2
     9ee:	0500                	addi	s0,sp,640
     9f0:	001fb003          	0x1fb003
     9f4:	2500                	fld	fs0,8(a0)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f6:	000006e3          	beqz	zero,1202 <_endtext+0x162>
     9fa:	5101                	li	sp,-32
     9fc:	0502                	c.slli64	a0
     9fe:	0069                	c.nop	26
     a00:	0000                	unimp
     a02:	0f66                	slli	t5,t5,0x19
     a04:	0000                	unimp
     a06:	0128                	addi	a0,sp,136
     a08:	0000                	unimp
     a0a:	9c01                	0x9c01
     a0c:	00000b8f          	0xb8f
     a10:	7626                	flw	fa2,104(sp)
     a12:	7261                	lui	tp,0xffff8
     a14:	0100                	addi	s0,sp,128
     a16:	0252                	slli	tp,tp,0x14
     a18:	000b8f13          	mv	t5,s7
     a1c:	ff00                	fsw	fs0,56(a4)
     a1e:	27ff                	0x27ff
     a20:	03dc                	addi	a5,sp,452
     a22:	0000                	unimp
     a24:	5301                	li	t1,-32
     a26:	0a02                	c.slli64	s4
     a28:	0b95                	addi	s7,s7,5
     a2a:	0000                	unimp
     a2c:	0000                	unimp
     a2e:	0000                	unimp
     a30:	00008c27          	0x8c27
     a34:	0100                	addi	s0,sp,128
     a36:	0254                	addi	a3,sp,260
     a38:	950a                	add	a0,a0,sp
     a3a:	1e00000b          	0x1e00000b
     a3e:	0000                	unimp
     a40:	2700                	fld	fs0,8(a4)
     a42:	0314                	addi	a3,sp,384
     a44:	0000                	unimp
     a46:	5501                	li	a0,-32
     a48:	0a02                	c.slli64	s4
     a4a:	0b95                	addi	s7,s7,5
     a4c:	0000                	unimp
     a4e:	003c                	addi	a5,sp,8
     a50:	0000                	unimp
     a52:	4e28                	lw	a0,88(a2)
     a54:	0100                	addi	s0,sp,128
     a56:	0256                	slli	tp,tp,0x15
     a58:	6909                	lui	s2,0x2
    polyR[0] = -1;
     a5a:	0000                	unimp
     a5c:	3500                	fld	fs0,40(a0)
    for(i = 1; i < N; ++i){
     a5e:	7028                	flw	fa0,96(s0)
     a60:	0100                	addi	s0,sp,128
     a62:	69090257          	0x69090257
    for (i = N; i < 55; ++i ){
     a66:	0000                	unimp
     a68:	0300                	addi	s0,sp,384
     a6a:	7128                	flw	fa0,96(a0)
     a6c:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     a6e:	0258                	addi	a4,sp,260
        random_keys[i] = f[i];
     a70:	6909                	lui	s2,0x2
     a72:	0000                	unimp
     a74:	6500                	flw	fs0,8(a0)
     a76:	9729                	srai	a4,a4,0x2a
    for(i = 0; i < N; ++i){
     a78:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     a7c:	025a                	slli	tp,tp,0x16
     a7e:	9b09                	andi	a4,a4,-30
    for(i = N; i < (2*N); ++i){
     a80:	0300000b          	0x300000b
     a84:	dc91                	beqz	s1,9a0 <generate_keys+0x88>
     a86:	05772777          	0x5772777
        random_keys[i] = g[i-N];
     a8a:	0000                	unimp
     a8c:	5b01                	li	s6,-32
     a8e:	0902                	c.slli64	s2
    for(i = N; i < (2*N); ++i){
     a90:	00000bab          	0xbab
    for(i = (2*N); i < (3*N); ++i){
     a94:	005d                	c.nop	23
     a96:	0000                	unimp
     a98:	0000b827          	fsd	ft0,16(ra)
    fp = ext_euclid(polyR, f, (N+1), p);
     a9c:	0100                	addi	s0,sp,128
     a9e:	025c                	addi	a5,sp,260
     aa0:	bd09                	j	8b2 <ext_euclid+0x27e>
     aa2:	b100000b          	0xb100000b
    for(i = (2*N); i < (3*N); ++i){
     aa6:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     aa8:	2a00                	fld	fs0,16(a2)
     aaa:	00c5                	addi	ra,ra,17
     aac:	0000                	unimp
     aae:	5d01                	li	s10,-32
    for(i = (2*N); i < (3*N); ++i){
     ab0:	0902                	c.slli64	s2
     ab2:	00000bcf          	fnmadd.s	fs7,ft0,ft0,ft0,rne
    fq = ext_euclid(polyR, f, (N+1), q);
     ab6:	00059827          	0x59827
     aba:	0100                	addi	s0,sp,128
     abc:	025e                	slli	tp,tp,0x17
     abe:	e109                	bnez	a0,ac0 <generate_keys+0x1a8>
    for(i = (3*N); i < (4*N); ++i){
     ac0:	1200000b          	0x1200000b
     ac4:	0001                	nop
     ac6:	2a00                	fld	fs0,16(a2)
        random_keys[i] = fq[i-(3*N)];
     ac8:	0246                	slli	tp,tp,0x11
     aca:	0000                	unimp
     acc:	5f01                	li	t5,-32
     ace:	0902                	c.slli64	s2
    for(i = (3*N); i < (4*N); ++i){
     ad0:	00000bf3          	0xbf3
    fg = polymult2(fq, N, g, N, 0);
     ad4:	0003fb27          	0x3fb27
     ad8:	0100                	addi	s0,sp,128
     ada:	0260                	addi	s0,sp,268
     adc:	0509                	addi	a0,a0,2
     ade:	000c                	0xc
    for(i = 0; i < (2*N-1); ++i){
     ae0:	6500                	flw	fs0,8(a0)
     ae2:	0001                	nop
     ae4:	2b00                	fld	fs0,16(a4)
     ae6:	0069                	c.nop	26
     ae8:	6101                	0x6101
     aea:	0902                	c.slli64	s2
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     aec:	0069                	c.nop	26
     aee:	0000                	unimp
     af0:	01b9                	addi	gp,gp,14
     af2:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     af4:	862c                	0x862c
     af6:	4800000f          	0x4800000f
     afa:	18000017          	auipc	zero,0x18000
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     afe:	2d00000b          	0x2d00000b
     b02:	5a01                	li	s4,-32
     b04:	77dc9103          	lh	sp,1917(s9)
    for(i = (4*N); i < (5*N); ++i){
     b08:	012d                	addi	sp,sp,11
     b0a:	6003055b          	0x6003055b
    for(i = (5*N); i < (6*N+1); ++i){
     b0e:	0011                	c.nop	4
        random_keys[i] = polyR[i-(5*N)];
     b10:	2d00                	fld	fs0,24(a0)
     b12:	5c01                	li	s8,-32
     b14:	0802                	c.slli64	a6
     b16:	00c0                	addi	s0,sp,68
    for(i = (5*N); i < (6*N+1); ++i){
     b18:	aa2c                	fsd	fa1,80(a2)
     b1a:	c700000f          	0xc700000f
     b1e:	000e                	c.slli	zero,0x3
     b20:	3700                	fld	fs0,40(a4)
     b22:	2d00000b          	0x2d00000b
}
     b26:	5a01                	li	s4,-32
     b28:	0802                	c.slli64	a6
     b2a:	2d35                	jal	1166 <_endtext+0xc6>
     b2c:	5b01                	li	s6,-32
     b2e:	3301                	jal	82e <ext_euclid+0x1fa>
     b30:	012d                	addi	sp,sp,11
     b32:	025c                	addi	a5,sp,260
     b34:	6508                	flw	fa0,8(a0)
     b36:	2c00                	fld	fs0,24(s0)
     b38:	101a                	c.slli	zero,0x26
     b3a:	0000                	unimp
     b3c:	0d98                	addi	a4,sp,720
     b3e:	0000                	unimp
     b40:	0b5f 0000 012d      	0x12d00000b5f
     b46:	025a                	slli	tp,tp,0x16
     b48:	3508                	fld	fa0,40(a0)
     b4a:	012d                	addi	sp,sp,11
     b4c:	6508025b          	0x6508025b
     b50:	012d                	addi	sp,sp,11
     b52:	035c                	addi	a5,sp,388
     b54:	dc91                	beqz	s1,a70 <generate_keys+0x158>
     b56:	5e012d77          	0x5e012d77
     b5a:	7e989103          	lh	sp,2025(a7)
     b5e:	2e00                	fld	fs0,24(a2)
     b60:	1030                	addi	a2,sp,40
     b62:	0000                	unimp
        polyR[i] = 0;
     b64:	00000c17          	auipc	s8,0x0
     b68:	012d                	addi	sp,sp,11
     b6a:	025a                	slli	tp,tp,0x16
     b6c:	3508                	fld	fa0,40(a0)
    for(i = 1; i < N; ++i){
     b6e:	012d                	addi	sp,sp,11
     b70:	2d33015b          	0x2d33015b
        f[i] = 0;
     b74:	5c01                	li	s8,-32
     b76:	0802                	c.slli64	a6
     b78:	2d65                	jal	1230 <_edata+0x10>
     b7a:	5d01                	li	s10,-32
     b7c:	7af09103          	lh	sp,1967(ra)
        g[i] = 0;
     b80:	012d                	addi	sp,sp,11
     b82:	025e                	slli	tp,tp,0x17
     b84:	0079                	c.nop	30
     b86:	012d                	addi	sp,sp,11
     b88:	0360                	addi	s0,sp,396
    for (i = N; i < 55; ++i ){
     b8a:	9891                	andi	s1,s1,-28
     b8c:	007e                	c.slli	zero,0x1f
        random_keys[i] = f[i];
     b8e:	1000                	addi	s0,sp,32
     b90:	3204                	fld	fs1,32(a2)
     b92:	0009                	c.nop	2
     b94:	1000                	addi	s0,sp,32
     b96:	6904                	flw	fs1,16(a0)
     b98:	0000                	unimp
     b9a:	0900                	addi	s0,sp,144
     b9c:	0069                	c.nop	26
    for(i = 0; i < N; ++i){
     b9e:	0000                	unimp
        random_keys[i] = f[i];
     ba0:	00000bab          	0xbab
        random_keys[i] = g[i-N];
     ba4:	750a                	flw	fa0,160(sp)
     ba6:	0000                	unimp
     ba8:	2f00                	fld	fs0,24(a4)
     baa:	0900                	addi	s0,sp,144
     bac:	0069                	c.nop	26
    for(i = N; i < (2*N); ++i){
     bae:	0000                	unimp
     bb0:	0bbd                	addi	s7,s7,15
     bb2:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     bb4:	0000752f          	0x752f
     bb8:	0200                	addi	s0,sp,256
     bba:	3408                	fld	fa0,40(s0)
     bbc:	0900                	addi	s0,sp,144
    for(i = (2*N); i < (3*N); ++i){
     bbe:	0069                	c.nop	26
     bc0:	0000                	unimp
     bc2:	00000bcf          	fnmadd.s	fs7,ft0,ft0,ft0,rne
        random_keys[i] = fq[i-(3*N)];
     bc6:	0000752f          	0x752f
     bca:	0200                	addi	s0,sp,256
     bcc:	3408                	fld	fa0,40(s0)
     bce:	0900                	addi	s0,sp,144
     bd0:	0069                	c.nop	26
    for(i = (3*N); i < (4*N); ++i){
     bd2:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     bd4:	0be1                	addi	s7,s7,24
    for(i = (3*N); i < (4*N); ++i){
     bd6:	0000                	unimp
        fg[i] = fg[i]*p;
     bd8:	0000752f          	0x752f
    for(i = 0; i < (2*N-1); ++i){
     bdc:	0200                	addi	s0,sp,256
        fg[i] = fg[i]*p;
     bde:	3408                	fld	fa0,40(s0)
     be0:	0900                	addi	s0,sp,144
     be2:	0069                	c.nop	26
     be4:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     be6:	00000bf3          	0xbf3
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bea:	0000752f          	0x752f
     bee:	0200                	addi	s0,sp,256
     bf0:	3408                	fld	fa0,40(s0)
     bf2:	0900                	addi	s0,sp,144
    for(i = (4*N); i < (5*N); ++i){
     bf4:	0069                	c.nop	26
     bf6:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     bf8:	0c05                	addi	s8,s8,1
     bfa:	0000                	unimp
     bfc:	0000752f          	0x752f
     c00:	0200                	addi	s0,sp,256
     c02:	3408                	fld	fa0,40(s0)
     c04:	0900                	addi	s0,sp,144
    for(i = (5*N); i < (6*N+1); ++i){
     c06:	0069                	c.nop	26
        random_keys[i] = polyR[i-(5*N)];
     c08:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     c0a:	00000c17          	auipc	s8,0x0
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c0e:	0000752f          	0x752f
     c12:	0200                	addi	s0,sp,256
     c14:	3508                	fld	fa0,40(a0)
     c16:	3000                	fld	fs0,32(s0)
     c18:	01c5                	addi	gp,gp,17
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1a:	0000                	unimp
     c1c:	2501                	jal	121c <_endtext+0x17c>
     c1e:	0602                	c.slli64	a2
     c20:	0b95                	addi	s7,s7,5
     c22:	0000                	unimp
     c24:	0ca2                	slli	s9,s9,0x8
     c26:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c28:	00c8                	addi	a0,sp,68
     c2a:	0000                	unimp
     c2c:	9c01                	0x9c01
     c2e:	0d98                	addi	a4,sp,720
     c30:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c32:	4e31                	li	t3,12
    temp = polymult(public_key,N,random_val,48,q,0);
     c34:	0100                	addi	s0,sp,128
     c36:	0225                	addi	tp,tp,9
     c38:	00006917          	auipc	s2,0x6
     c3c:	d900                	sw	s0,48(a0)
     c3e:	0001                	nop
     c40:	3100                	fld	fs0,32(a0)
     c42:	0070                	addi	a2,sp,12
     c44:	2501                	jal	1244 <_edata+0x24>
     c46:	1e02                	slli	t3,t3,0x20
    for(i = 0; i < 48; ++i){
     c48:	0069                	c.nop	26
     c4a:	0000                	unimp
        temp[i] = temp[i] + message[i];
     c4c:	021d                	addi	tp,tp,7
     c4e:	0000                	unimp
     c50:	7131                	addi	sp,sp,-192
     c52:	0100                	addi	s0,sp,128
     c54:	0225                	addi	tp,tp,9
     c56:	6925                	lui	s2,0x9
     c58:	0000                	unimp
     c5a:	5400                	lw	s0,40(s0)
     c5c:	0002                	c.slli64	zero
    for(i = 0; i < 48; ++i){
     c5e:	3200                	fld	fs0,32(a2)
     c60:	00b8                	addi	a4,sp,72
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c62:	0000                	unimp
     c64:	2501                	jal	1264 <_edata+0x44>
     c66:	2d02                	fld	fs10,0(sp)
     c68:	0b95                	addi	s7,s7,5
     c6a:	0000                	unimp
     c6c:	0000028b          	0x28b
     c70:	9832                	add	a6,a6,a2
     c72:	0005                	c.nop	1
    for(i = (2*N); i < (3*N); ++i){
     c74:	0100                	addi	s0,sp,128
     c76:	0225                	addi	tp,tp,9
     c78:	9540                	0x9540
     c7a:	b700000b          	0xb700000b
     c7e:	0002                	c.slli64	zero
}
     c80:	3200                	fld	fs0,32(a2)
     c82:	03dc                	addi	a5,sp,452
     c84:	0000                	unimp
     c86:	2501                	jal	1286 <_edata+0x66>
     c88:	5402                	lw	s0,32(sp)
     c8a:	0b95                	addi	s7,s7,5
     c8c:	0000                	unimp
     c8e:	02ee                	slli	t0,t0,0x1b
        CT[i-(2*N)] = CT[i];
     c90:	0000                	unimp
     c92:	9d32                	add	s10,s10,a2
     c94:	0006                	c.slli	zero,0x1
     c96:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     c98:	0225                	addi	tp,tp,9
     c9a:	9566                	add	a0,a0,s9
        CT[i-(2*N)] = CT[i];
     c9c:	0f00000b          	0xf00000b
    for(i = (2*N); i < (3*N); ++i){
     ca0:	2a000003          	lb	zero,672(zero) # 2a0 <polymult2+0x2e>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca4:	02b1                	addi	t0,t0,12
     ca6:	0000                	unimp
     ca8:	2701                	jal	13a8 <_edata+0x188>
    for(i = (2*N); i < ((2*N)+N); ++i){
     caa:	0a02                	c.slli64	s4
     cac:	0b95                	addi	s7,s7,5
     cae:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb0:	0100612b          	0x100612b
     cb4:	0228                	addi	a0,sp,264
     cb6:	950a                	add	a0,a0,sp
     cb8:	4600000b          	0x4600000b
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cbc:	2b000003          	lb	zero,688(zero) # 2b0 <polymult2+0x3e>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc0:	3261                	jal	648 <ext_euclid+0x14>
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc2:	0100                	addi	s0,sp,128
     cc4:	0229                	addi	tp,tp,10
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc6:	950a                	add	a0,a0,sp
     cc8:	5900000b          	0x5900000b
     ccc:	2b000003          	lb	zero,688(zero) # 2b0 <polymult2+0x3e>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd0:	2a010063          	beqz	sp,f70 <main+0xa>
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd4:	0a02                	c.slli64	s4
     cd6:	0b95                	addi	s7,s7,5
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd8:	0000                	unimp
     cda:	0382                	c.slli64	t2
     cdc:	0000                	unimp
     cde:	0032632b          	0x32632b
     ce2:	2b01                	jal	11f2 <_endtext+0x152>
     ce4:	0a02                	c.slli64	s4
     ce6:	0b95                	addi	s7,s7,5
     ce8:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     cea:	0395                	addi	t2,t2,5
     cec:	0000                	unimp
     cee:	0100692b          	0x100692b
     cf2:	022c                	addi	a1,sp,264
        if(a2[i] <= q/2)
     cf4:	6909                	lui	s2,0x2
     cf6:	0000                	unimp
     cf8:	b300                	fsd	fs0,32(a4)
    for (i = 0; i < N; ++i){
     cfa:	2c000003          	lb	zero,704(zero) # 2c0 <polymult2+0x4e>
     cfe:	0cd8                	addi	a4,sp,596
    c = polymult2(secret_key_fp,N,a2,N,0);
     d00:	0000                	unimp
     d02:	000014ef          	jal	s1,1d02 <random_keys+0x24a>
     d06:	0d2a                	slli	s10,s10,0xa
     d08:	0000                	unimp
     d0a:	012d                	addi	sp,sp,11
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d0c:	035a                	slli	t1,t1,0x16
     d0e:	2d5d01f3          	0x2d5d01f3
     d12:	5b01                	li	s6,-32
     d14:	7802                	flw	fa6,32(sp)
     d16:	2d00                	fld	fs0,24(a0)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d18:	5c01                	li	s8,-32
     d1a:	5f01f303          	0x5f01f303
}
     d1e:	012d                	addi	sp,sp,11
     d20:	025d                	addi	tp,tp,23
     d22:	0078                	addi	a4,sp,12
     d24:	012d                	addi	sp,sp,11
     d26:	015e                	slli	sp,sp,0x17
     d28:	0030                	addi	a2,sp,8
     d2a:	e82c                	fsw	fa1,80(s0)
     d2c:	000c                	0xc
     d2e:	3a00                	fld	fs0,48(a2)
     d30:	50000013          	li	zero,1280
        a2[i-(2*N)] = a2[i];
     d34:	000d                	c.nop	3
     d36:	2d00                	fld	fs0,24(a0)
     d38:	5b01                	li	s6,-32
     d3a:	7902                	flw	fs2,32(sp)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d3c:	2d00                	fld	fs0,24(a0)
     d3e:	5c01                	li	s8,-32
        a2[i-(2*N)] = a2[i];
     d40:	8402                	jr	s0
     d42:	2d00                	fld	fs0,24(a0)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d44:	5d01                	li	s10,-32
        if(a2[i] <= q/2)
     d46:	8602                	jr	a2
     d48:	2d00                	fld	fs0,24(a0)
     d4a:	5e01                	li	t3,-32
            a2[i] = (-1)*(q-a2[i]);
     d4c:	8202                	jr	tp
     d4e:	0000                	unimp
     d50:	0c2c                	addi	a1,sp,536
    for (i = 0; i < N; ++i){
     d52:	000d                	c.nop	3
     d54:	ef00                	fsw	fs0,24(a4)
     d56:	0014                	0x14
        c2[i-(2*N)] = c2[i];
     d58:	7500                	flw	fs0,40(a0)
     d5a:	000d                	c.nop	3
     d5c:	2d00                	fld	fs0,24(a0)
     d5e:	5a01                	li	s4,-32
    for(i = (2*N); i < ((2*N)+N); ++i){
     d60:	8702                	jr	a4
     d62:	2d00                	fld	fs0,24(a0)
        c2[i-(2*N)] = c2[i];
     d64:	5b01                	li	s6,-32
     d66:	7802                	flw	fa6,32(sp)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d68:	2d00                	fld	fs0,24(a0)
  jal x0, default_exc_handler
     d6a:	5d01                	li	s10,-32
     d6c:	7802                	flw	fa6,32(sp)
  mv  x1, x0
     d6e:	2d00                	fld	fs0,24(a0)
     d70:	5e01                	li	t3,-32
  mv  x2, x1
     d72:	3001                	jal	572 <polydiv+0x190>
  mv  x3, x1
     d74:	2e00                	fld	fs0,24(a2)
  mv  x4, x1
     d76:	0d18                	addi	a4,sp,656
  mv  x5, x1
     d78:	0000                	unimp
  mv  x6, x1
     d7a:	133a                	slli	t1,t1,0x2e
  mv  x7, x1
     d7c:	0000                	unimp
  mv  x8, x1
     d7e:	012d                	addi	sp,sp,11
  mv  x9, x1
     d80:	0079025b          	0x79025b
  mv x11, x1
     d84:	012d                	addi	sp,sp,11
  mv x12, x1
     d86:	025c                	addi	a5,sp,260
  mv x13, x1
     d88:	0084                	addi	s1,sp,64
  mv x14, x1
     d8a:	012d                	addi	sp,sp,11
  mv x15, x1
     d8c:	025d                	addi	tp,tp,23
  mv x16, x1
     d8e:	0086                	slli	ra,ra,0x1
  mv x17, x1
     d90:	012d                	addi	sp,sp,11
  mv x18, x1
     d92:	025e                	slli	tp,tp,0x17
  mv x19, x1
     d94:	0085                	addi	ra,ra,1
  mv x20, x1
     d96:	0000                	unimp
  mv x21, x1
     d98:	6130                	flw	fa2,64(a0)
  mv x22, x1
     d9a:	0006                	c.slli	zero,0x1
  mv x23, x1
     d9c:	0100                	addi	s0,sp,128
  mv x24, x1
     d9e:	95060203          	lb	tp,-1712(a2)
  mv x26, x1
     da2:	0c00000b          	0xc00000b
  mv x28, x1
     da6:	000c                	0xc
  mv x29, x1
     da8:	9600                	0x9600
  mv x30, x1
     daa:	0000                	unimp
  mv x31, x1
     dac:	0100                	addi	s0,sp,128
  la   x2, _stack_start
     dae:	c79c                	sw	a5,8(a5)
     db0:	000e                	c.slli	zero,0x3
     db2:	3100                	fld	fs0,32(a0)
     db4:	004e                	c.slli	zero,0x13
  la x26, _bss_start
     db6:	0301                	addi	t1,t1,0
     db8:	1702                	slli	a4,a4,0x20
     dba:	0069                	c.nop	26
     dbc:	0000                	unimp
  la x27, _bss_end
     dbe:	0438                	addi	a4,sp,520
     dc0:	0000                	unimp
     dc2:	7131                	addi	sp,sp,-192
     dc4:	0100                	addi	s0,sp,128
  bge x26, x27, zero_loop_end
     dc6:	691e0203          	lb	tp,1681(t3) # 1691 <product2+0x219>
  sw x0, 0(x26)
     dca:	0000                	unimp
     dcc:	6400                	flw	fs0,8(s0)
  addi x26, x26, 4
     dce:	0004                	0x4
  ble x26, x27, zero_loop
     dd0:	3200                	fld	fs0,32(a2)
     dd2:	00000397          	auipc	t2,0x0
  addi x10, x0, 0
     dd6:	0301                	addi	t1,t1,0
  addi x11, x0, 0
     dd8:	2602                	fld	fa2,0(sp)
     dda:	0b95                	addi	s7,s7,5
  jal x1, main
     ddc:	0000                	unimp
     dde:	0000049b          	0x49b
     de2:	7732                	flw	fa4,44(sp)
     de4:	0005                	c.nop	1
     de6:	0100                	addi	s0,sp,128
     de8:	95340203          	lb	tp,-1709(s0) # 953 <generate_keys+0x3b>
     dec:	c700000b          	0xc700000b
     df0:	0004                	0x4
     df2:	3200                	fld	fs0,32(a2)
     df4:	069d                	addi	a3,a3,7
     df6:	0000                	unimp
     df8:	0301                	addi	t1,t1,0
     dfa:	4502                	lw	a0,0(sp)
     dfc:	0b95                	addi	s7,s7,5
     dfe:	0000                	unimp
     e00:	04fe                	slli	s1,s1,0x1f
     e02:	0000                	unimp
     e04:	a12a                	fsd	fa0,128(sp)
     e06:	0002                	c.slli64	zero
     e08:	0100                	addi	s0,sp,128
     e0a:	0205                	addi	tp,tp,1
     e0c:	950a                	add	a0,a0,sp
     e0e:	3300000b          	0x3300000b
     e12:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     e16:	0206                	slli	tp,tp,0x1
     e18:	950a                	add	a0,a0,sp
     e1a:	0100000b          	0x100000b
     e1e:	295a                	fld	fs2,400(sp)
     e20:	0370                	addi	a2,sp,396
     e22:	0000                	unimp
     e24:	0801                	addi	a6,a6,0
     e26:	0902                	c.slli64	s2
     e28:	00000b9b          	0xb9b
     e2c:	7ea09103          	lh	sp,2026(ra)
     e30:	00022027          	fsw	ft0,0(tp) # ffff8000 <_stack_start+0xfffe8000>
     e34:	0100                	addi	s0,sp,128
     e36:	0209                	addi	tp,tp,2
     e38:	950a                	add	a0,a0,sp
     e3a:	3500000b          	0x3500000b
     e3e:	0005                	c.nop	1
     e40:	2b00                	fld	fs0,16(a4)
     e42:	0069                	c.nop	26
     e44:	0a01                	addi	s4,s4,0
     e46:	0902                	c.slli64	s2
     e48:	0069                	c.nop	26
     e4a:	0000                	unimp
     e4c:	0548                	addi	a0,sp,644
     e4e:	0000                	unimp
     e50:	342c                	fld	fa1,104(s0)
     e52:	000c                	0xc
     e54:	4800                	lw	s0,16(s0)
     e56:	73000017          	auipc	zero,0x73000
     e5a:	000e                	c.slli	zero,0x3
     e5c:	2d00                	fld	fs0,24(a0)
     e5e:	5a01                	li	s4,-32
     e60:	7202                	flw	ft4,32(sp)
     e62:	2d00                	fld	fs0,24(a0)
     e64:	5b01                	li	s6,-32
     e66:	0305                	addi	t1,t1,1
     e68:	10a0                	addi	s0,sp,104
     e6a:	0000                	unimp
     e6c:	012d                	addi	sp,sp,11
     e6e:	025c                	addi	a5,sp,260
     e70:	c008                	sw	a0,0(s0)
     e72:	2c00                	fld	fs0,24(s0)
     e74:	0c46                	slli	s8,s8,0x11
     e76:	0000                	unimp
     e78:	0000160f          	0x160f
     e7c:	0ea4                	addi	s1,sp,856
     e7e:	0000                	unimp
     e80:	012d                	addi	sp,sp,11
     e82:	025a                	slli	tp,tp,0x16
     e84:	0084                	addi	s1,sp,64
     e86:	012d                	addi	sp,sp,11
     e88:	0078025b          	0x78025b
     e8c:	012d                	addi	sp,sp,11
     e8e:	025c                	addi	a5,sp,260
     e90:	0072                	c.slli	zero,0x1c
     e92:	012d                	addi	sp,sp,11
     e94:	025d                	addi	tp,tp,23
     e96:	3008                	fld	fa0,32(s0)
     e98:	012d                	addi	sp,sp,11
     e9a:	025e                	slli	tp,tp,0x17
     e9c:	0082                	c.slli64	ra
     e9e:	012d                	addi	sp,sp,11
     ea0:	015f 0030 742e      	0x742e0030015f
     ea6:	000c                	0xc
     ea8:	3a00                	fld	fs0,48(a2)
     eaa:	2d000013          	li	zero,720
     eae:	5b01                	li	s6,-32
     eb0:	7902                	flw	fs2,32(sp)
     eb2:	2d00                	fld	fs0,24(a0)
     eb4:	5c01                	li	s8,-32
     eb6:	8302                	jr	t1
     eb8:	2d00                	fld	fs0,24(a0)
     eba:	5d01                	li	s10,-32
     ebc:	7802                	flw	fa6,32(sp)
     ebe:	2d01                	jal	14ce <product2+0x56>
     ec0:	5e01                	li	t3,-32
     ec2:	8202                	jr	tp
     ec4:	0000                	unimp
     ec6:	3000                	fld	fs0,32(s0)
     ec8:	0000030b          	0x30b
     ecc:	aa01                	j	fdc <main+0x76>
     ece:	0601                	addi	a2,a2,0
     ed0:	0b95                	addi	s7,s7,5
     ed2:	0000                	unimp
     ed4:	0918                	addi	a4,sp,144
     ed6:	0000                	unimp
     ed8:	02f4                	addi	a3,sp,332
     eda:	0000                	unimp
     edc:	9c01                	0x9c01
     ede:	00001077          	0x1077
     ee2:	4e31                	li	t3,12
     ee4:	0100                	addi	s0,sp,128
     ee6:	01aa                	slli	gp,gp,0xa
     ee8:	6918                	flw	fa4,16(a0)
     eea:	0000                	unimp
     eec:	8a00                	0x8a00
     eee:	0005                	c.nop	1
     ef0:	3100                	fld	fs0,32(a0)
     ef2:	0070                	addi	a2,sp,12
     ef4:	aa01                	j	1004 <main+0x9e>
     ef6:	1f01                	addi	t5,t5,-32
     ef8:	0069                	c.nop	26
     efa:	0000                	unimp
     efc:	000005db          	0x5db
     f00:	7131                	addi	sp,sp,-192
     f02:	0100                	addi	s0,sp,128
     f04:	01aa                	slli	gp,gp,0xa
     f06:	6926                	flw	fs2,72(sp)
     f08:	0000                	unimp
     f0a:	1200                	addi	s0,sp,288
     f0c:	0006                	c.slli	zero,0x1
     f0e:	3300                	fld	fs0,32(a4)
     f10:	0066                	c.slli	zero,0x19
     f12:	ad01                	j	1522 <product2+0xaa>
     f14:	0901                	addi	s2,s2,0
     f16:	00001077          	0x1077
     f1a:	7c989103          	lh	sp,1993(a7)
     f1e:	01006733          	or	a4,zero,a6
     f22:	01ae                	slli	gp,gp,0xb
     f24:	7709                	lui	a4,0xfffe2
     f26:	0010                	0x10
     f28:	0300                	addi	s0,sp,384
     f2a:	f491                	bnez	s1,e36 <memcpy+0x56>
     f2c:	2b7d                	jal	14ea <product2+0x72>
     f2e:	7066                	flw	ft0,120(sp)
     f30:	0100                	addi	s0,sp,128
     f32:	01b0                	addi	a2,sp,200
     f34:	950a                	add	a0,a0,sp
     f36:	4900000b          	0x4900000b
     f3a:	0006                	c.slli	zero,0x1
     f3c:	2b00                	fld	fs0,16(a4)
     f3e:	7166                	flw	ft2,120(sp)
     f40:	0100                	addi	s0,sp,128
     f42:	01b1                	addi	gp,gp,12
     f44:	950a                	add	a0,a0,sp
     f46:	5c00000b          	0x5c00000b
     f4a:	0006                	c.slli	zero,0x1
     f4c:	2b00                	fld	fs0,16(a4)
     f4e:	6766                	flw	fa4,88(sp)
     f50:	0100                	addi	s0,sp,128
     f52:	01b2                	slli	gp,gp,0xc
     f54:	950a                	add	a0,a0,sp
     f56:	7a00000b          	0x7a00000b
     f5a:	0006                	c.slli	zero,0x1
     f5c:	2b00                	fld	fs0,16(a4)
     f5e:	6b70                	flw	fa2,84(a4)
     f60:	0100                	addi	s0,sp,128
     f62:	950a01b3          	0x950a01b3
int main(){
     f66:	9800000b          	0x9800000b
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f6a:	0006                	c.slli	zero,0x1
     f6c:	2700                	fld	fs0,8(a4)
     f6e:	069d                	addi	a3,a3,7
     f70:	0000                	unimp
     f72:	b401                	j	972 <generate_keys+0x5a>
     f74:	0901                	addi	s2,s2,0
     f76:	00001087          	0x1087
int main(){
     f7a:	06b6                	slli	a3,a3,0xd
     f7c:	0000                	unimp
     f7e:	0100692b          	0x100692b
     f82:	01b5                	addi	gp,gp,13
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f84:	6909                	lui	s2,0x2
    resultkon[0] = 0xA;
     f86:	0000                	unimp
     f88:	1900                	addi	s0,sp,176
     f8a:	27000007          	0x27000007
     f8e:	03a8                	addi	a0,sp,456
     f90:	0000                	unimp
    *var = resultkon[0];
     f92:	b601                	j	a92 <generate_keys+0x17a>
     f94:	0a01                	addi	s4,s4,0
    keys = generate_keys(N, p, q);
     f96:	0b95                	addi	s7,s7,5
     f98:	0000                	unimp
    *var = resultkon[0];
     f9a:	0855                	addi	a6,a6,21
     f9c:	0000                	unimp
     f9e:	7534                	flw	fa3,104(a0)
     fa0:	0000                	unimp
    keys = generate_keys(N, p, q);
     fa2:	6d00                	flw	fs0,24(a0)
     fa4:	0008                	0x8
     fa6:	2c00                	fld	fs0,24(s0)
     fa8:	095e                	slli	s2,s2,0x17
     faa:	0000                	unimp
    for(i = 0; i < N; ++i){
     fac:	00001753          	fadd.s	fa4,ft0,ft0,rtz
        secret_key_f[i] = keys[i];
     fb0:	00000fc7          	fmsub.s	ft11,ft0,ft0,ft0,rne
     fb4:	012d                	addi	sp,sp,11
     fb6:	035a                	slli	t1,t1,0x16
     fb8:	a478                	fsd	fa4,200(s0)
     fba:	2d7c                	fld	fa5,216(a0)
    for(i = 0; i < N; ++i){
     fbc:	5b01                	li	s6,-32
     fbe:	3001                	jal	7be <ext_euclid+0x18a>
     fc0:	012d                	addi	sp,sp,11
    for(i = N; i < (2*N); ++i){
     fc2:	025c                	addi	a5,sp,260
     fc4:	d008                	sw	a0,32(s0)
     fc6:	2c00                	fld	fs0,24(s0)
     fc8:	09de                	slli	s3,s3,0x17
     fca:	0000                	unimp
     fcc:	00001753          	fadd.s	fa4,ft0,ft0,rtz
        secret_key_fp[i-(2*N)] = keys[i];
     fd0:	00000fe7          	jalr	t6,zero # 0 <__DYNAMIC>
     fd4:	012d                	addi	sp,sp,11
     fd6:	035a                	slli	t1,t1,0x16
    for(i = (2*N); i < (3*N); ++i){
     fd8:	f878                	fsw	fa4,116(s0)
     fda:	2d7d                	jal	1698 <product2+0x220>
    for(i = (3*N); i < (4*N); ++i){
     fdc:	5b01                	li	s6,-32
     fde:	3001                	jal	7de <ext_euclid+0x1aa>
     fe0:	012d                	addi	sp,sp,11
     fe2:	025c                	addi	a5,sp,260
     fe4:	d808                	sw	a0,48(s0)
     fe6:	2c00                	fld	fs0,24(s0)
        public_key[i-(4*N)] = keys[i];
     fe8:	0aa6                	slli	s5,s5,0x9
     fea:	0000                	unimp
     fec:	109a                	slli	ra,ra,0x26
     fee:	0000                	unimp
     ff0:	100e                	c.slli	zero,0x23
    for(i = (4*N); i < (5*N); ++i){
     ff2:	0000                	unimp
     ff4:	012d                	addi	sp,sp,11
     ff6:	025a                	slli	tp,tp,0x16
     ff8:	0072                	c.slli	zero,0x1c
     ffa:	012d                	addi	sp,sp,11
     ffc:	9878035b          	0x9878035b
        ring_poly[i-(5*N)] = keys[i];
    1000:	2d7c                	fld	fa5,216(a0)
    1002:	5c01                	li	s8,-32
    1004:	8502                	jr	a0
    1006:	2d00                	fld	fs0,24(a0)
    for(i = (5*N); i < (6*N+1); ++i){
    1008:	5d01                	li	s10,-32
    100a:	8702                	jr	a4
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    100c:	0000                	unimp
    100e:	c02c                	sw	a1,64(s0)
    1010:	000a                	c.slli	zero,0x2
    1012:	9a00                	0x9a00
    1014:	0010                	0x10
    1016:	3500                	fld	fs0,40(a0)
    1018:	0010                	0x10
    101a:	2d00                	fld	fs0,24(a0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    101c:	5a01                	li	s4,-32
    101e:	7202                	flw	ft4,32(sp)
    1020:	2d00                	fld	fs0,24(a0)
    1022:	5b01                	li	s6,-32
    1024:	7c987803          	0x7c987803
    1028:	012d                	addi	sp,sp,11
    102a:	025c                	addi	a5,sp,260
    102c:	0085                	addi	ra,ra,1
    102e:	012d                	addi	sp,sp,11
            resultkon[0] = 0xDEDEDEDE;
    1030:	025d                	addi	tp,tp,23
    1032:	0086                	slli	ra,ra,0x1
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1034:	2c00                	fld	fs0,24(s0)
            resultkon[0] = 0xDEDEDEDE;
    1036:	0ae0                	addi	s0,sp,348
    1038:	0000                	unimp
	    *var = resultkon[0];
    103a:	000014ef          	jal	s1,203a <_min_stack+0x3a>
    for(i = 0; i < 32; ++i){
    103e:	105a                	c.slli	zero,0x36
        if(!(message[i] == Dec_Message[i])){
    1040:	0000                	unimp
    1042:	012d                	addi	sp,sp,11
    1044:	0082025b          	0x82025b
    1048:	012d                	addi	sp,sp,11
    104a:	025c                	addi	a5,sp,260
    104c:	0089                	addi	ra,ra,2
    104e:	012d                	addi	sp,sp,11
            resultkon[0] = 0xBABABABA;
    1050:	025d                	addi	tp,tp,23
    1052:	0082                	c.slli64	ra
    1054:	012d                	addi	sp,sp,11
    1056:	015e                	slli	sp,sp,0x17
    1058:	0030                	addi	a2,sp,8
 	    *var = resultkon[0];
    105a:	f42e                	fsw	fa1,40(sp)
    105c:	000a                	c.slli	zero,0x2
    105e:	3a00                	fld	fs0,48(a2)
    1060:	2d000013          	li	zero,720
    1064:	5c01                	li	s8,-32
}
    1066:	7202                	flw	ft4,32(sp)
    1068:	2d00                	fld	fs0,24(a0)
    106a:	5d01                	li	s10,-32
    106c:	8502                	jr	a0
    106e:	2d00                	fld	fs0,24(a0)
    1070:	5e01                	li	t3,-32
    1072:	8602                	jr	a2
    1074:	0000                	unimp
    1076:	0900                	addi	s0,sp,144
    1078:	0069                	c.nop	26
            resultkon[0] = 0xDEDEDEDE;
    107a:	0000                	unimp
	    *var = resultkon[0];
    107c:	00001087          	0x1087
    1080:	750a                	flw	fa0,160(sp)
    1082:	0000                	unimp
    1084:	3600                	fld	fs0,40(a2)
    1086:	0900                	addi	s0,sp,144
    for(i = 0; i < 32; ++i){
    1088:	0069                	c.nop	26
    108a:	0000                	unimp
    108c:	109a                	slli	ra,ra,0x26
    108e:	0000                	unimp
    1090:	7535                	lui	a0,0xfffed
    1092:	0000                	unimp
    1094:	9e00                	0x9e00
    1096:	0000000f          	fence	unknown,unknown
    109a:	4f30                	lw	a2,88(a4)
    109c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    10a0:	95060113          	addi	sp,a2,-1712
    10a4:	3400000b          	0x3400000b
    10a8:	0006                	c.slli	zero,0x1
    10aa:	e400                	fsw	fs0,8(s0)
    10ac:	0002                	c.slli64	zero
    10ae:	0100                	addi	s0,sp,128
    10b0:	b59c                	fsd	fa5,40(a1)
    10b2:	0012                	c.slli	zero,0x4
    10b4:	3200                	fld	fs0,32(a2)
    10b6:	069d                	addi	a3,a3,7
    10b8:	0000                	unimp
    10ba:	1301                	addi	t1,t1,-32
    10bc:	1601                	addi	a2,a2,-32
    10be:	0b95                	addi	s7,s7,5
    10c0:	0000                	unimp
    10c2:	000008b3          	add	a7,zero,zero
    10c6:	8832                	mv	a6,a2
    10c8:	0001                	nop
    10ca:	0100                	addi	s0,sp,128
    10cc:	95220113          	addi	sp,tp,-1710 # fffff952 <_stack_start+0xfffef952>
    10d0:	ed00000b          	0xed00000b
    10d4:	0008                	0x8
    10d6:	3200                	fld	fs0,32(a2)
    10d8:	0012                	c.slli	zero,0x4
    10da:	0000                	unimp
    10dc:	1301                	addi	t1,t1,-32
    10de:	2d01                	jal	16ee <result+0x1e>
    10e0:	0069                	c.nop	26
    10e2:	0000                	unimp
    10e4:	00000927          	0x927
    10e8:	6d31                	lui	s10,0xc
    10ea:	0100646f          	jal	s0,70fa <_stack_len+0x30fa>
    10ee:	69370113          	addi	sp,a4,1683 # fffe2693 <_stack_start+0xfffd2693>
    10f2:	0000                	unimp
    10f4:	6b00                	flw	fs0,16(a4)
    10f6:	0009                	c.nop	2
    10f8:	2700                	fld	fs0,8(a4)
    10fa:	028a                	slli	t0,t0,0x2
    10fc:	0000                	unimp
    10fe:	1601                	addi	a2,a2,-32
    1100:	0a01                	addi	s4,s4,0
    1102:	0b95                	addi	s7,s7,5
    1104:	0000                	unimp
    1106:	09a2                	slli	s3,s3,0x8
    1108:	0000                	unimp
    110a:	01004e2b          	0x1004e2b
    110e:	69090117          	auipc	sp,0x69090
    1112:	0000                	unimp
    1114:	ba00                	fsd	fs0,48(a2)
    1116:	0009                	c.nop	2
    1118:	2b00                	fld	fs0,16(a4)
    111a:	0069                	c.nop	26
    111c:	1701                	addi	a4,a4,-32
    111e:	0c01                	addi	s8,s8,0
    1120:	0069                	c.nop	26
    1122:	0000                	unimp
    1124:	09e8                	addi	a0,sp,220
    1126:	0000                	unimp
    1128:	01006a2b          	0x1006a2b
    112c:	690f0117          	auipc	sp,0x690f0
    1130:	0000                	unimp
    1132:	6100                	flw	fs0,0(a0)
    1134:	000c                	0xc
    1136:	2700                	fld	fs0,8(a4)
    1138:	0541                	addi	a0,a0,16
    113a:	0000                	unimp
    113c:	1801                	addi	a6,a6,-32
    113e:	0901                	addi	s2,s2,0
    1140:	12b5                	addi	t0,t0,-19
    1142:	0000                	unimp
    1144:	0c7f                	0xc7f
    1146:	0000                	unimp
    1148:	0005b327          	fsd	ft0,6(a1)
    114c:	0100                	addi	s0,sp,128
    114e:	0119                	addi	sp,sp,6
    1150:	c809                	beqz	s0,1162 <_endtext+0xc2>
    1152:	0012                	c.slli	zero,0x4
    1154:	9f00                	0x9f00
    1156:	000c                	0xc
    1158:	2b00                	fld	fs0,16(a4)
    115a:	6972                	flw	fs2,28(sp)
    115c:	0100                	addi	s0,sp,128
    115e:	011a                	slli	sp,sp,0x6
    1160:	db09                	beqz	a4,1072 <main+0x10c>
    1162:	0012                	c.slli	zero,0x4
    1164:	bf00                	fsd	fs0,56(a4)
    1166:	000c                	0xc
    1168:	2700                	fld	fs0,8(a4)
    116a:	00000417          	auipc	s0,0x0
    116e:	1c01                	addi	s8,s8,-32
    1170:	0901                	addi	s2,s2,0
    1172:	12ee                	slli	t0,t0,0x3b
    1174:	0000                	unimp
    1176:	0cf6                	slli	s9,s9,0x1d
    1178:	0000                	unimp
    117a:	0069742b          	0x69742b
    117e:	1d01                	addi	s10,s10,-32
    1180:	0901                	addi	s2,s2,0
    1182:	1301                	addi	t1,t1,-32
    1184:	0000                	unimp
    1186:	0d46                	slli	s10,s10,0x11
    1188:	0000                	unimp
    118a:	00042f27          	fsw	ft0,30(s0) # 1188 <_endtext+0xe8>
    118e:	0100                	addi	s0,sp,128
    1190:	011e                	slli	sp,sp,0x7
    1192:	1409                	addi	s0,s0,-30
    1194:	7f000013          	li	zero,2032
    1198:	000d                	c.nop	3
    119a:	2700                	fld	fs0,8(a4)
    119c:	0220                	addi	s0,sp,264
    119e:	0000                	unimp
    11a0:	1f01                	addi	t5,t5,-32
    11a2:	0901                	addi	s2,s2,0
    11a4:	00001327          	0x1327
    11a8:	00000dcf          	fnmadd.s	fs11,ft0,ft0,ft0,rne
    11ac:	7365722b          	0x7365722b
    11b0:	0100                	addi	s0,sp,128
    11b2:	0120                	addi	s0,sp,136
    11b4:	950a                	add	a0,a0,sp
    11b6:	1400000b          	0x1400000b
    11ba:	000e                	c.slli	zero,0x3
    11bc:	2700                	fld	fs0,8(a4)
    11be:	0000014f          	fnmadd.s	ft2,ft0,ft0,ft0,rne
    11c2:	2101                	jal	15c2 <product2+0x14a>
    11c4:	0a01                	addi	s4,s4,0
    11c6:	0b95                	addi	s7,s7,5
    11c8:	0000                	unimp
    11ca:	0e32                	slli	t3,t3,0xc
    11cc:	0000                	unimp
    11ce:	00015427          	0x15427
    11d2:	0100                	addi	s0,sp,128
    11d4:	0122                	slli	sp,sp,0x8
    11d6:	950a                	add	a0,a0,sp
    11d8:	5000000b          	0x5000000b
    11dc:	000e                	c.slli	zero,0x3
    11de:	2700                	fld	fs0,8(a4)
    11e0:	03e8                	addi	a0,sp,460
    11e2:	0000                	unimp
    11e4:	2301                	jal	16e4 <result+0x14>
    11e6:	0901                	addi	s2,s2,0
    11e8:	0069                	c.nop	26
    11ea:	0000                	unimp
    11ec:	0e6e                	slli	t3,t3,0x1b
    11ee:	0000                	unimp
    11f0:	7534                	flw	fa3,104(a0)
    11f2:	0000                	unimp
    11f4:	af00                	fsd	fs0,24(a4)
    11f6:	000e                	c.slli	zero,0x3
    11f8:	3400                	fld	fs0,40(s0)
    11fa:	0075                	c.nop	29
    11fc:	0000                	unimp
    11fe:	0edd                	addi	t4,t4,23
    1200:	0000                	unimp
    1202:	7534                	flw	fa3,104(a0)
    1204:	0000                	unimp
    1206:	0b00                	addi	s0,sp,400
    1208:	3400000f          	0x3400000f
    120c:	0075                	c.nop	29
    120e:	0000                	unimp
    1210:	0f39                	addi	t5,t5,14
    1212:	0000                	unimp
    1214:	7534                	flw	fa3,104(a0)
    1216:	0000                	unimp
    1218:	6700                	flw	fs0,8(a4)
    121a:	3400000f          	0x3400000f
    121e:	0075                	c.nop	29
    1220:	0000                	unimp
    1222:	0f95                	addi	t6,t6,5
    1224:	0000                	unimp
    1226:	7534                	flw	fa3,104(a0)
    1228:	0000                	unimp
    122a:	c300                	sw	s0,0(a4)
    122c:	2c00000f          	0x2c00000f
    1230:	0716                	slli	a4,a4,0x5
    1232:	0000                	unimp
    1234:	133a                	slli	t1,t1,0x2e
    1236:	0000                	unimp
    1238:	0000125b          	0x125b
    123c:	012d                	addi	sp,sp,11
    123e:	025a                	slli	tp,tp,0x16
    1240:	008a                	slli	ra,ra,0x2
    1242:	012d                	addi	sp,sp,11
    1244:	0082025b          	0x82025b
    1248:	012d                	addi	sp,sp,11
    124a:	025c                	addi	a5,sp,260
    124c:	012d008b          	0x12d008b
    1250:	025d                	addi	tp,tp,23
    1252:	0082                	c.slli64	ra
    1254:	012d                	addi	sp,sp,11
    1256:	025e                	slli	tp,tp,0x17
    1258:	0079                	c.nop	30
    125a:	2c00                	fld	fs0,24(s0)
    125c:	0740                	addi	s0,sp,900
    125e:	0000                	unimp
    1260:	133a                	slli	t1,t1,0x2e
    1262:	0000                	unimp
    1264:	00001287          	0x1287
    1268:	012d                	addi	sp,sp,11
    126a:	025a                	slli	tp,tp,0x16
    126c:	0072                	c.slli	zero,0x1c
    126e:	012d                	addi	sp,sp,11
    1270:	0082025b          	0x82025b
    1274:	012d                	addi	sp,sp,11
    1276:	025c                	addi	a5,sp,260
    1278:	012d008b          	0x12d008b
    127c:	025d                	addi	tp,tp,23
    127e:	0082                	c.slli64	ra
    1280:	012d                	addi	sp,sp,11
    1282:	025e                	slli	tp,tp,0x17
    1284:	0079                	c.nop	30
    1286:	2e00                	fld	fs0,24(a2)
    1288:	075c                	addi	a5,sp,900
    128a:	0000                	unimp
    128c:	0000160f          	0x160f
    1290:	012d                	addi	sp,sp,11
    1292:	025a                	slli	tp,tp,0x16
    1294:	0085                	addi	ra,ra,1
    1296:	012d                	addi	sp,sp,11
    1298:	0082025b          	0x82025b
    129c:	012d                	addi	sp,sp,11
    129e:	025c                	addi	a5,sp,260
    12a0:	0084                	addi	s1,sp,64
    12a2:	012d                	addi	sp,sp,11
    12a4:	025d                	addi	tp,tp,23
    12a6:	0082                	c.slli64	ra
    12a8:	012d                	addi	sp,sp,11
    12aa:	025e                	slli	tp,tp,0x17
    12ac:	0079                	c.nop	30
    12ae:	012d                	addi	sp,sp,11
    12b0:	015f 0030 0900      	0x9000030015f
    12b6:	0069                	c.nop	26
    12b8:	0000                	unimp
    12ba:	12c8                	addi	a0,sp,356
    12bc:	0000                	unimp
    12be:	7535                	lui	a0,0xfffed
    12c0:	0000                	unimp
    12c2:	f000                	fsw	fs0,32(s0)
    12c4:	0011                	c.nop	4
    12c6:	0000                	unimp
    12c8:	6909                	lui	s2,0x2
    12ca:	0000                	unimp
    12cc:	db00                	sw	s0,48(a4)
    12ce:	0012                	c.slli	zero,0x4
    12d0:	3500                	fld	fs0,40(a0)
    12d2:	0075                	c.nop	29
    12d4:	0000                	unimp
    12d6:	11f9                	addi	gp,gp,-2
    12d8:	0000                	unimp
    12da:	0900                	addi	s0,sp,144
    12dc:	0069                	c.nop	26
    12de:	0000                	unimp
    12e0:	12ee                	slli	t0,t0,0x3b
    12e2:	0000                	unimp
    12e4:	7535                	lui	a0,0xfffed
    12e6:	0000                	unimp
    12e8:	0200                	addi	s0,sp,256
    12ea:	0012                	c.slli	zero,0x4
    12ec:	0000                	unimp
    12ee:	6909                	lui	s2,0x2
    12f0:	0000                	unimp
    12f2:	0100                	addi	s0,sp,128
    12f4:	35000013          	li	zero,848
    12f8:	0075                	c.nop	29
    12fa:	0000                	unimp
    12fc:	0000120b          	0x120b
    1300:	0900                	addi	s0,sp,144
    1302:	0069                	c.nop	26
    1304:	0000                	unimp
    1306:	1314                	addi	a3,sp,416
    1308:	0000                	unimp
    130a:	7535                	lui	a0,0xfffed
    130c:	0000                	unimp
    130e:	1400                	addi	s0,sp,544
    1310:	0012                	c.slli	zero,0x4
    1312:	0000                	unimp
    1314:	6909                	lui	s2,0x2
    1316:	0000                	unimp
    1318:	2700                	fld	fs0,8(a4)
    131a:	35000013          	li	zero,848
    131e:	0075                	c.nop	29
    1320:	0000                	unimp
    1322:	121d                	addi	tp,tp,-25
    1324:	0000                	unimp
    1326:	0900                	addi	s0,sp,144
    1328:	0069                	c.nop	26
    132a:	0000                	unimp
    132c:	133a                	slli	t1,t1,0x2e
    132e:	0000                	unimp
    1330:	7535                	lui	a0,0xfffed
    1332:	0000                	unimp
    1334:	2600                	fld	fs0,8(a2)
    1336:	0012                	c.slli	zero,0x4
    1338:	0000                	unimp
    133a:	8036                	c.mv	zero,a3
    133c:	0001                	nop
    133e:	0100                	addi	s0,sp,128
    1340:	0b95068f          	0xb95068f
    1344:	0000                	unimp
    1346:	03e2                	slli	t2,t2,0x18
    1348:	0000                	unimp
    134a:	0252                	slli	tp,tp,0x14
    134c:	0000                	unimp
    134e:	9c01                	0x9c01
    1350:	000014a3          	sh	zero,9(zero) # 9 <__DYNAMIC+0x9>
    1354:	6d756e37          	lui	t3,0x6d756
    1358:	0100                	addi	s0,sp,128
    135a:	0b95138f          	0xb95138f
    135e:	0000                	unimp
    1360:	0ff1                	addi	t6,t6,28
    1362:	0000                	unimp
    1364:	0638                	addi	a4,sp,776
    1366:	0001                	nop
    1368:	0100                	addi	s0,sp,128
    136a:	00691c8f          	0x691c8f
    136e:	0000                	unimp
    1370:	1012                	c.slli	zero,0x24
    1372:	0000                	unimp
    1374:	7f38                	flw	fa4,120(a4)
    1376:	0006                	c.slli	zero,0x1
    1378:	0100                	addi	s0,sp,128
    137a:	0b95288f          	0xb95288f
    137e:	0000                	unimp
    1380:	00001063          	bnez	zero,1380 <_edata+0x160>
    1384:	a338                	fsd	fa4,64(a4)
    1386:	0006                	c.slli	zero,0x1
    1388:	0100                	addi	s0,sp,128
    138a:	0069338f          	0x69338f
    138e:	0000                	unimp
    1390:	109d                	addi	ra,ra,-25
    1392:	0000                	unimp
    1394:	646f6d37          	lui	s10,0x646f6
    1398:	0100                	addi	s0,sp,128
    139a:	00693f8f          	0x693f8f
    139e:	0000                	unimp
    13a0:	10d4                	addi	a3,sp,100
    13a2:	0000                	unimp
    13a4:	7539                	lui	a0,0xfffee
    13a6:	0100                	addi	s0,sp,128
    13a8:	0992                	slli	s3,s3,0x4
    13aa:	0069                	c.nop	26
    13ac:	0000                	unimp
    13ae:	0000110b          	0x110b
    13b2:	6439                	lui	s0,0xe
    13b4:	0100                	addi	s0,sp,128
    13b6:	0b92                	slli	s7,s7,0x4
    13b8:	0069                	c.nop	26
    13ba:	0000                	unimp
    13bc:	1134                	addi	a3,sp,168
    13be:	0000                	unimp
    13c0:	643a                	flw	fs0,140(sp)
    13c2:	0032                	c.slli	zero,0xc
    13c4:	9201                	srli	a2,a2,0x20
    13c6:	690d                	lui	s2,0x3
    13c8:	0000                	unimp
    13ca:	3900                	fld	fs0,48(a0)
    13cc:	0069                	c.nop	26
    13ce:	9201                	srli	a2,a2,0x20
    13d0:	6910                	flw	fa2,16(a0)
    13d2:	0000                	unimp
    13d4:	5200                	lw	s0,32(a2)
    13d6:	0011                	c.nop	4
    13d8:	3a00                	fld	fs0,48(a2)
    13da:	5f62                	lw	t5,56(sp)
    13dc:	004e                	c.slli	zero,0x13
    13de:	9201                	srli	a2,a2,0x20
    13e0:	6912                	flw	fs2,4(sp)
    13e2:	0000                	unimp
    13e4:	3900                	fld	fs0,48(a0)
    13e6:	5f72                	lw	t5,60(sp)
    13e8:	0064                	addi	s1,sp,12
    13ea:	9201                	srli	a2,a2,0x20
    13ec:	6916                	flw	fs2,68(sp)
    13ee:	0000                	unimp
    13f0:	4600                	lw	s0,8(a2)
    13f2:	3b000013          	li	zero,944
    13f6:	027a                	slli	tp,tp,0x1e
    13f8:	0000                	unimp
    13fa:	9301                	srli	a4,a4,0x20
    13fc:	950a                	add	a0,a0,sp
    13fe:	6400000b          	0x6400000b
    1402:	39000013          	li	zero,912
    1406:	0076                	c.slli	zero,0x1d
    1408:	9501                	srai	a0,a0,0x20
    140a:	a309                	j	190c <result+0x23c>
    140c:	0014                	0x14
    140e:	7c00                	flw	fs0,56(s0)
    1410:	39000013          	li	zero,912
    1414:	0071                	c.nop	28
    1416:	9601                	srai	a2,a2,0x20
    1418:	b609                	j	f1a <memset+0x5c>
    141a:	0014                	0x14
    141c:	9c00                	0x9c00
    141e:	3b000013          	li	zero,944
    1422:	0178                	addi	a4,sp,140
    1424:	0000                	unimp
    1426:	9701                	srai	a4,a4,0x20
    1428:	950a                	add	a0,a0,sp
    142a:	e900000b          	0xe900000b
    142e:	3b000013          	li	zero,944
    1432:	021c                	addi	a5,sp,256
    1434:	0000                	unimp
    1436:	9801                	andi	s0,s0,-32
    1438:	c909                	beqz	a0,144a <_edata+0x22a>
    143a:	0014                	0x14
    143c:	0700                	addi	s0,sp,896
    143e:	0014                	0x14
    1440:	3b00                	fld	fs0,48(a4)
    1442:	021a                	slli	tp,tp,0x6
    1444:	0000                	unimp
    1446:	9901                	andi	a0,a0,-32
    1448:	dc09                	beqz	s0,1362 <_edata+0x142>
    144a:	0014                	0x14
    144c:	6e00                	flw	fs0,24(a2)
    144e:	0014                	0x14
    1450:	3400                	fld	fs0,40(s0)
    1452:	0075                	c.nop	29
    1454:	0000                	unimp
    1456:	14be                	slli	s1,s1,0x2f
    1458:	0000                	unimp
    145a:	7534                	flw	fa3,104(a0)
    145c:	0000                	unimp
    145e:	ec00                	fsw	fs0,24(s0)
    1460:	0014                	0x14
    1462:	3400                	fld	fs0,40(s0)
    1464:	0075                	c.nop	29
    1466:	0000                	unimp
    1468:	151a                	slli	a0,a0,0x26
    146a:	0000                	unimp
    146c:	7534                	flw	fa3,104(a0)
    146e:	0000                	unimp
    1470:	4800                	lw	s0,16(s0)
    1472:	0015                	c.nop	5
    1474:	2e00                	fld	fs0,24(a2)
    1476:	0556                	slli	a0,a0,0x15
    1478:	0000                	unimp
    147a:	0000160f          	0x160f
    147e:	012d                	addi	sp,sp,11
    1480:	025a                	slli	tp,tp,0x16
    1482:	0072                	c.slli	zero,0x1c
    1484:	012d                	addi	sp,sp,11
    1486:	0083025b          	0x83025b
    148a:	012d                	addi	sp,sp,11
    148c:	025c                	addi	a5,sp,260
    148e:	012d008b          	0x12d008b
    1492:	025d                	addi	tp,tp,23
    1494:	012d0083          	lb	ra,18(s10) # 646f6012 <_stack_start+0x646e6012>
    1498:	025e                	slli	tp,tp,0x17
    149a:	0082                	c.slli64	ra
    149c:	012d                	addi	sp,sp,11
    149e:	015f 0030 0900      	0x9000030015f
    14a4:	0069                	c.nop	26
    14a6:	0000                	unimp
    14a8:	14b6                	slli	s1,s1,0x2d
    14aa:	0000                	unimp
    14ac:	7535                	lui	a0,0xfffed
    14ae:	0000                	unimp
    14b0:	5100                	lw	s0,32(a0)
    14b2:	0014                	0x14
    14b4:	0000                	unimp
    14b6:	6909                	lui	s2,0x2
    14b8:	0000                	unimp
    14ba:	c900                	sw	s0,16(a0)
    14bc:	0014                	0x14
    14be:	3500                	fld	fs0,40(a0)
    14c0:	0075                	c.nop	29
    14c2:	0000                	unimp
    14c4:	145a                	slli	s0,s0,0x36
    14c6:	0000                	unimp
    14c8:	0900                	addi	s0,sp,144
    14ca:	0069                	c.nop	26
    14cc:	0000                	unimp
    14ce:	14dc                	addi	a5,sp,612
    14d0:	0000                	unimp
    14d2:	7535                	lui	a0,0xfffed
    14d4:	0000                	unimp
    14d6:	6300                	flw	fs0,0(a4)
    14d8:	0014                	0x14
    14da:	0000                	unimp
    14dc:	6909                	lui	s2,0x2
    14de:	0000                	unimp
    14e0:	ef00                	fsw	fs0,24(a4)
    14e2:	0014                	0x14
    14e4:	3500                	fld	fs0,40(a0)
    14e6:	0075                	c.nop	29
    14e8:	0000                	unimp
    14ea:	146c                	addi	a1,sp,556
    14ec:	0000                	unimp
    14ee:	3600                	fld	fs0,40(a2)
    14f0:	002a                	c.slli	zero,0xa
    14f2:	0000                	unimp
    14f4:	5701                	li	a4,-32
    14f6:	9506                	add	a0,a0,ra
    14f8:	7200000b          	0x7200000b
    14fc:	0002                	c.slli64	zero
    14fe:	7000                	flw	fs0,32(s0)
    1500:	0001                	nop
    1502:	0100                	addi	s0,sp,128
    1504:	cf9c                	sw	a5,24(a5)
    1506:	0015                	c.nop	5
    1508:	3700                	fld	fs0,40(a4)
    150a:	0061                	c.nop	24
    150c:	5701                	li	a4,-32
    150e:	9515                	srai	a0,a0,0x25
    1510:	9d00000b          	0x9d00000b
    1514:	0015                	c.nop	5
    1516:	3800                	fld	fs0,48(s0)
    1518:	0000033f 691c5701 	0x691c57010000033f
    1520:	0000                	unimp
    1522:	d700                	sw	s0,40(a4)
    1524:	0015                	c.nop	5
    1526:	3700                	fld	fs0,40(a4)
    1528:	0062                	c.slli	zero,0x18
    152a:	5701                	li	a4,-32
    152c:	9529                	srai	a0,a0,0x2a
    152e:	0f00000b          	0xf00000b
    1532:	0016                	c.slli	zero,0x5
    1534:	3c00                	fld	fs0,56(s0)
    1536:	06f2                	slli	a3,a3,0x1c
    1538:	0000                	unimp
    153a:	5701                	li	a4,-32
    153c:	6930                	flw	fa2,80(a0)
    153e:	0000                	unimp
    1540:	0100                	addi	s0,sp,128
    1542:	385d                	jal	df8 <memcpy+0x18>
    1544:	0531                	addi	a0,a0,12
    1546:	0000                	unimp
    1548:	5701                	li	a4,-32
    154a:	693c                	flw	fa5,80(a0)
    154c:	0000                	unimp
    154e:	4900                	lw	s0,16(a0)
    1550:	0016                	c.slli	zero,0x5
    1552:	3b00                	fld	fs0,48(a4)
    1554:	00000647          	fmsub.s	fa2,ft0,ft0,ft0,rne
    1558:	5a01                	li	s4,-32
    155a:	cf09                	beqz	a4,1574 <product2+0xfc>
    155c:	0015                	c.nop	5
    155e:	8300                	0x8300
    1560:	0016                	c.slli	zero,0x5
    1562:	3900                	fld	fs0,48(a0)
    1564:	0069                	c.nop	26
    1566:	5b01                	li	s6,-32
    1568:	6909                	lui	s2,0x2
    156a:	0000                	unimp
    156c:	c700                	sw	s0,8(a4)
    156e:	0016                	c.slli	zero,0x5
    1570:	3900                	fld	fs0,48(a0)
    1572:	006a                	c.slli	zero,0x1a
    1574:	5b01                	li	s6,-32
    1576:	0000690b          	0x690b
    157a:	7000                	flw	fs0,32(s0)
    157c:	39000017          	auipc	zero,0x39000
    1580:	5b01006b          	0x5b01006b
    1584:	690d                	lui	s2,0x3
    1586:	0000                	unimp
    1588:	ba00                	fsd	fs0,48(a2)
    158a:	3b000017          	auipc	zero,0x3b000
    158e:	026a                	slli	tp,tp,0x1a
    1590:	0000                	unimp
    1592:	5c01                	li	s8,-32
    1594:	950a                	add	a0,a0,sp
    1596:	0800000b          	0x800000b
    159a:	0018                	0x18
    159c:	2200                	fld	fs0,0(a2)
    159e:	000c                	0xc
    15a0:	0000                	unimp
    15a2:	5d01                	li	s10,-32
    15a4:	ea09                	bnez	a2,15b6 <product2+0x13e>
    15a6:	0015                	c.nop	5
    15a8:	0200                	addi	s0,sp,256
    15aa:	0075                	c.nop	29
    15ac:	00036b3b          	0x36b3b
    15b0:	0100                	addi	s0,sp,128
    15b2:	095e                	slli	s2,s2,0x17
    15b4:	15fc                	addi	a5,sp,748
    15b6:	0000                	unimp
    15b8:	1820                	addi	s0,sp,56
    15ba:	0000                	unimp
    15bc:	7534                	flw	fa3,104(a0)
    15be:	0000                	unimp
    15c0:	5600                	lw	s0,40(a2)
    15c2:	0018                	0x18
    15c4:	3400                	fld	fs0,40(s0)
    15c6:	0075                	c.nop	29
    15c8:	0000                	unimp
    15ca:	188e                	slli	a7,a7,0x23
    15cc:	0000                	unimp
    15ce:	0900                	addi	s0,sp,144
    15d0:	0069                	c.nop	26
    15d2:	0000                	unimp
    15d4:	15ea                	slli	a1,a1,0x3a
    15d6:	0000                	unimp
    15d8:	7535                	lui	a0,0xfffed
    15da:	0000                	unimp
    15dc:	bc00                	fsd	fs0,56(s0)
    15de:	0015                	c.nop	5
    15e0:	2f00                	fld	fs0,24(a4)
    15e2:	0075                	c.nop	29
    15e4:	0000                	unimp
    15e6:	8d02                	jr	s10
    15e8:	0000                	unimp
    15ea:	6909                	lui	s2,0x2
    15ec:	0000                	unimp
    15ee:	fc00                	fsw	fs0,56(s0)
    15f0:	0015                	c.nop	5
    15f2:	2f00                	fld	fs0,24(a4)
    15f4:	0075                	c.nop	29
    15f6:	0000                	unimp
    15f8:	8f02                	jr	t5
    15fa:	0000                	unimp
    15fc:	6909                	lui	s2,0x2
    15fe:	0000                	unimp
    1600:	0f00                	addi	s0,sp,912
    1602:	0016                	c.slli	zero,0x5
    1604:	3500                	fld	fs0,40(a0)
    1606:	0075                	c.nop	29
    1608:	0000                	unimp
    160a:	15c5                	addi	a1,a1,-15
    160c:	0000                	unimp
    160e:	3600                	fld	fs0,40(a2)
    1610:	010d                	addi	sp,sp,3
    1612:	0000                	unimp
    1614:	0d01                	addi	s10,s10,0
    1616:	9506                	add	a0,a0,ra
    1618:	8c00000b          	0x8c00000b
    161c:	0000                	unimp
    161e:	e600                	fsw	fs0,8(a2)
    1620:	0001                	nop
    1622:	0100                	addi	s0,sp,128
    1624:	079c                	addi	a5,sp,960
    1626:	37000017          	auipc	zero,0x37000
    162a:	0061                	c.nop	24
    162c:	0d01                	addi	s10,s10,0
    162e:	9514                	0x9514
    1630:	c600000b          	0xc600000b
    1634:	0018                	0x18
    1636:	3800                	fld	fs0,48(s0)
    1638:	0000033f 691b0d01 	0x691b0d010000033f
    1640:	0000                	unimp
    1642:	0000                	unimp
    1644:	0019                	c.nop	6
    1646:	3700                	fld	fs0,40(a4)
    1648:	0062                	c.slli	zero,0x18
    164a:	0d01                	addi	s10,s10,0
    164c:	9528                	0x9528
    164e:	4600000b          	0x4600000b
    1652:	0019                	c.nop	6
    1654:	3800                	fld	fs0,48(s0)
    1656:	06f2                	slli	a3,a3,0x1c
    1658:	0000                	unimp
    165a:	0d01                	addi	s10,s10,0
    165c:	0000692f          	0x692f
    1660:	8000                	0x8000
    1662:	0019                	c.nop	6
    1664:	3d00                	fld	fs0,56(a0)
    1666:	6f6d                	lui	t5,0x1b
    1668:	0064                	addi	s1,sp,12
    166a:	0d01                	addi	s10,s10,0
    166c:	0000693b          	0x693b
    1670:	0100                	addi	s0,sp,128
    1672:	385e                	fld	fa6,496(sp)
    1674:	0531                	addi	a0,a0,12
    1676:	0000                	unimp
    1678:	0d01                	addi	s10,s10,0
    167a:	6944                	flw	fs1,20(a0)
    167c:	0000                	unimp
    167e:	ba00                	fsd	fs0,48(a2)
    1680:	0019                	c.nop	6
    1682:	2200                	fld	fs0,0(a2)
    1684:	00000647          	fmsub.s	fa2,ft0,ft0,ft0,rne
    1688:	0f01                	addi	t5,t5,0
    168a:	0709                	addi	a4,a4,2
    168c:	02000017          	auipc	zero,0x2000
    1690:	008c                	addi	a1,sp,64
    1692:	6939                	lui	s2,0xe
    1694:	0100                	addi	s0,sp,128
    1696:	0910                	addi	a2,sp,144
    1698:	0069                	c.nop	26
    169a:	0000                	unimp
    169c:	1a18                	addi	a4,sp,304
    169e:	0000                	unimp
    16a0:	6a39                	lui	s4,0xe
    16a2:	0100                	addi	s0,sp,128
    16a4:	0b10                	addi	a2,sp,400
    16a6:	0069                	c.nop	26
    16a8:	0000                	unimp
    16aa:	00001ad7          	0x1ad7
    16ae:	6b39                	lui	s6,0xe
    16b0:	0100                	addi	s0,sp,128
    16b2:	0d10                	addi	a2,sp,656
    16b4:	0069                	c.nop	26
    16b6:	0000                	unimp
    16b8:	1b72                	slli	s6,s6,0x3c
    16ba:	0000                	unimp
    16bc:	00025a3b          	0x25a3b
    16c0:	0100                	addi	s0,sp,128
    16c2:	0a11                	addi	s4,s4,4
    16c4:	0b95                	addi	s7,s7,5
    16c6:	0000                	unimp
    16c8:	1bc0                	addi	s0,sp,500
    16ca:	0000                	unimp
    16cc:	0c22                	slli	s8,s8,0x8
    16ce:	0000                	unimp
    16d0:	0100                	addi	s0,sp,128
    16d2:	0912                	slli	s2,s2,0x4
    16d4:	1722                	slli	a4,a4,0x28
    16d6:	0000                	unimp
    16d8:	7502                	flw	fa0,32(sp)
    16da:	3b00                	fld	fs0,48(a4)
    16dc:	0000036b          	0x36b
    16e0:	1301                	addi	t1,t1,-32
    16e2:	3509                	jal	14e4 <product2+0x6c>
    16e4:	d8000017          	auipc	zero,0xd8000
    16e8:	3400001b          	0x3400001b
    16ec:	0075                	c.nop	29
    16ee:	0000                	unimp
    16f0:	00001c0f          	0x1c0f
    16f4:	7534                	flw	fa3,104(a0)
    16f6:	0000                	unimp
    16f8:	7400                	flw	fs0,40(s0)
    16fa:	001c                	0x1c
    16fc:	3400                	fld	fs0,40(s0)
    16fe:	0075                	c.nop	29
    1700:	0000                	unimp
    1702:	1ca2                	slli	s9,s9,0x28
    1704:	0000                	unimp
    1706:	0900                	addi	s0,sp,144
    1708:	0069                	c.nop	26
    170a:	0000                	unimp
    170c:	1722                	slli	a4,a4,0x28
    170e:	0000                	unimp
    1710:	7535                	lui	a0,0xfffed
    1712:	0000                	unimp
    1714:	eb00                	fsw	fs0,16(a4)
    1716:	0016                	c.slli	zero,0x5
    1718:	2f00                	fld	fs0,24(a4)
    171a:	0075                	c.nop	29
    171c:	0000                	unimp
    171e:	8d02                	jr	s10
    1720:	0000                	unimp
    1722:	6909                	lui	s2,0x2
    1724:	0000                	unimp
    1726:	3500                	fld	fs0,40(a0)
    1728:	35000017          	auipc	zero,0x35000
    172c:	0075                	c.nop	29
    172e:	0000                	unimp
    1730:	16f4                	addi	a3,sp,876
    1732:	0000                	unimp
    1734:	0900                	addi	s0,sp,144
    1736:	0069                	c.nop	26
    1738:	0000                	unimp
    173a:	1748                	addi	a0,sp,932
    173c:	0000                	unimp
    173e:	7535                	lui	a0,0xfffed
    1740:	0000                	unimp
    1742:	fd00                	fsw	fs0,56(a0)
    1744:	0016                	c.slli	zero,0x5
    1746:	0000                	unimp
    1748:	233e                	fld	ft6,456(sp)
    174a:	19000003          	lb	zero,400(zero) # 190 <polymult+0x104>
    174e:	09000003          	lb	zero,144(zero) # 90 <polymult+0x4>
    1752:	3e00                	fld	fs0,56(a2)
    1754:	006e                	c.slli	zero,0x1b
    1756:	0000                	unimp
    1758:	0064                	addi	s1,sp,12
    175a:	0000                	unimp
    175c:	0009                	c.nop	2
    175e:	1e00                	addi	s0,sp,816
    1760:	0000                	unimp
    1762:	0200                	addi	s0,sp,256
    1764:	9f00                	0x9f00
    1766:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    176a:	7f01                	lui	t5,0xfffe0
    176c:	0029                	c.nop	10
    176e:	1800                	addi	s0,sp,48
    1770:	0000                	unimp
    1772:	f900                	fsw	fs0,48(a0)
    1774:	0006                	c.slli	zero,0x1
    1776:	5d00                	lw	s0,56(a0)
    1778:	0004                	0x4
    177a:	0000                	unimp
    177c:	01000007          	0x1000007
    1780:	80              	Address 0x0000000000001780 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x220>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	03001603          	lh	a2,48(zero) # 30 <__DYNAMIC+0x30>
  22:	3a0e                	fld	fs4,224(sp)
  24:	390b3b0b          	0x390b3b0b
  28:	0013490b          	0x13490b
  2c:	0400                	addi	s0,sp,512
  2e:	0024                	addi	s1,sp,8
  30:	0b3e0b0b          	0xb3e0b0b
  34:	00000803          	lb	a6,0(zero) # 0 <__DYNAMIC>
  38:	3505                	jal	fffffe58 <_stack_start+0xfffefe58>
  3a:	4900                	lw	s0,16(a0)
  3c:	06000013          	li	zero,96
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # e0b3 <_stack+0xb3>
  46:	0b39053b          	0xb39053b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1 # fffe5001 <_stack_start+0xfffd5001>
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    int line[size_b][size_a + size_b];
  8e:	000d                	c.nop	3
  90:	0b3a0e03          	lb	t3,179(s4)
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  a0:	0b00                	addi	s0,sp,400
  a2:	0e00000b          	0xe00000b
    int pola[size_a];
  a6:	0e030113          	addi	sp,t1,224
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
  b2:	1301                	addi	t1,t1,-32
    int line[size_b][size_a + size_b];
  b4:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
    int line[size_b][size_a + size_b];
  bc:	390b3b0b          	0x390b3b0b
    int pola[size_a];
  c0:	3813490b          	0x3813490b
    int line[size_b][size_a + size_b];
  c4:	1000000b          	0x1000000b
  c8:	0b0b000f          	0xb0b000f
    int pola[size_a];
  cc:	1349                	addi	t1,t1,-14
    int polb[size_b];
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
    int pola[size_a];
  d4:	0b0e                	slli	s6,s6,0x3
    int polb[size_b];
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
  d8:	390b3b0b          	0x390b3b0b
    int line[size_b][size_a + size_b];
  dc:	0013010b          	0x13010b
    int pola[size_a];
  e0:	1200                	addi	s0,sp,288
    int polb[size_b];
  e2:	000d                	c.nop	3
            line[i][j] = 0;
  e4:	0b3a0e03          	lb	t3,179(s4)
  e8:	0b390b3b          	0xb390b3b
    for (i = 0; i < size_b; ++i){
  ec:	1349                	addi	t1,t1,-14
            product[j] = 0;
  ee:	0538                	addi	a4,sp,648
  f0:	0000                	unimp
  f2:	27001513          	0x27001513
    for (i = 0; i < size_b; ++i){
  f6:	0019                	c.nop	6
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
    for (i = 0; i < size_a; ++i){
  fc:	13491927          	0x13491927
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
 108:	16000013          	li	zero,352
    if(star_mult == 1){
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
 110:	0000                	unimp
 112:	03011317          	auipc	t1,0x3011
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
        for (j = size_b -1; j >= 0; j = j-1){
 11a:	39053b0b          	0x39053b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 11e:	0013010b          	0x13010b
            product[j] = 0;
 122:	1800                	addi	s0,sp,48
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
            line[i][j] = 0;
 12a:	0b39053b          	0xb39053b
            product[j] = 0;
 12e:	1349                	addi	t1,t1,-14
        for(j = 0; j < size_a + size_b -1; ++j){
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
 134:	0d19                	addi	s10,s10,6
 136:	0300                	addi	s0,sp,384
    for (i = 0; i < size_b; ++i){
 138:	3a0e                	fld	fs4,224(sp)
 13a:	39053b0b          	0x39053b0b
 13e:	3813490b          	0x3813490b
        for(j = 0; j < size_a + size_b -1; ++j){
 142:	0005                	c.nop	1
        pola[i] = a[i];
 144:	1a00                	addi	s0,sp,304
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
 14a:	0b3a0b0b          	0xb3a0b0b
            pola[i] = pola[i] + mod;
 14e:	0b39053b          	0xb39053b
        while (pola[i] < 0){
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
 156:	0b01131b          	0xb01131b
        pola[i] = pola[i] % mod;
 15a:	3b0b3a0b          	0x3b0b3a0b
    for (i = 0; i < size_a; ++i){
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
        pola[i] = pola[i] % mod;
 164:	1c00                	addi	s0,sp,560
    for (i = 0; i < size_a; ++i){
 166:	0b0b0117          	auipc	sp,0xb0b0
            pola[i] = pola[i] + mod;
 16a:	0b3a                	slli	s6,s6,0xe
        polb[i] = b[i];
 16c:	0b39053b          	0xb39053b
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
 174:	0d1d                	addi	s10,s10,7
        while (polb[i] < 0){
 176:	0300                	addi	s0,sp,384
 178:	3a0e                	fld	fs4,224(sp)
 17a:	39053b0b          	0x39053b0b
        polb[i] = polb[i] % mod;
 17e:	0013490b          	0x13490b
    for (i = 0; i < size_b; ++i){
 182:	1e00                	addi	s0,sp,816
        polb[i] = polb[i] % mod;
 184:	0e030013          	addi	zero,t1,224
    for (i = 0; i < size_b; ++i){
 188:	193c                	addi	a5,sp,184
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
        for (j = size_b -1; j >= 0; j = j-1){
 192:	20000013          	li	zero,512
    for (i = 0; i < size_b; ++i){
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
 19c:	0b39053b          	0xb39053b
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
    for(j = 0; j < size_a + size_b -1; ++j){
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
}
 1b2:	3f13490b          	0x3f13490b
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0xa0>
                line[size_b-1-j][k] = pola[k]*polb[j];
 1d0:	00052f13          	slti	t5,a0,0
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
 1dc:	0b390b3b          	0xb390b3b
            for (k = size_a-1; k >= 0; k = k-1 ){
 1e0:	1349                	addi	t1,t1,-14
                line[size_b-1-j][k] = pola[k]*polb[j];
 1e2:	1802193f 2e250000 	0x2e2500001802193f
            for (k = size_a-1; k >= 0; k = k-1 ){
 1ea:	3f01                	jal	fa <polymult+0x6e>
 1ec:	0319                	addi	t1,t1,6
        for (j = size_b -1; j >= 0; j = j-1){
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
 1f4:	1113490b          	0x1113490b
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f8:	1201                	addi	tp,tp,-32
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 1fa:	4006                	0x4006
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
 200:	1301                	addi	t1,t1,-32
 202:	0000                	unimp
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
 208:	3a08                	fld	fa0,48(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 20a:	39053b0b          	0x39053b0b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 20e:	1c13490b          	0x1c13490b
 212:	0005                	c.nop	1
            for (k = size_a-1; k >= 0; k = k-1 ){
 214:	2700                	fld	fs0,8(a4)
 216:	0034                	addi	a3,sp,8
        for (j = size_b -1; j >= 0; j = j-1){
 218:	0b3a0e03          	lb	t3,179(s4)
 21c:	0b39053b          	0xb39053b
            line[i][j] = line[i][j] % mod;
 220:	1349                	addi	t1,t1,-14
        for(j = 0; j < size_a + size_b -1; ++j){
 222:	1702                	slli	a4,a4,0x20
 224:	0000                	unimp
            line[i][j] = line[i][j] % mod;
 226:	3428                	fld	fa0,104(s0)
 228:	0300                	addi	s0,sp,384
 22a:	3a08                	fld	fa0,48(a2)
 22c:	39053b0b          	0x39053b0b
        for(j = 0; j < size_a + size_b -1; ++j){
 230:	1c13490b          	0x1c13490b
    for (i = 0; i < size_b; ++i){
 234:	2900000b          	0x2900000b
 238:	0034                	addi	a3,sp,8
        for(j = 0; j < size_a + size_b -1; ++j){
 23a:	0b3a0e03          	lb	t3,179(s4)
            product[j] += line[i][j];
 23e:	0b39053b          	0xb39053b
 242:	1349                	addi	t1,t1,-14
 244:	1802                	slli	a6,a6,0x20
        for(i = 0; i < size_b; ++i){
 246:	0000                	unimp
            product[j] += line[i][j];
 248:	342a                	fld	fs0,168(sp)
 24a:	0300                	addi	s0,sp,384
 24c:	3a0e                	fld	fs4,224(sp)
 24e:	39053b0b          	0x39053b0b
 252:	0013490b          	0x13490b
        for(i = 0; i < size_b; ++i){
 256:	2b00                	fld	fs0,16(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
 258:	0034                	addi	a3,sp,8
 25a:	0b3a0803          	lb	a6,179(s4)
        for(i = 0; i < size_b; ++i){
 25e:	0b39053b          	0xb39053b
        product[j] = product[j] % mod;
 262:	1349                	addi	t1,t1,-14
    for(j = 0; j < size_a + size_b -1; ++j){
 264:	1702                	slli	a4,a4,0x20
 266:	0000                	unimp
        product[j] = product[j] % mod;
 268:	892c                	0x892c
 26a:	0182                	c.slli64	gp
 26c:	1101                	addi	sp,sp,-32
 26e:	3101                	jal	fffffe6e <_stack_start+0xfffefe6e>
    for(j = 0; j < size_a + size_b -1; ++j){
 270:	00130113          	addi	sp,t1,1
    int line[size_b][size_a + size_b];
 274:	2d00                	fld	fs0,24(a0)
 276:	828a                	mv	t0,sp
 278:	0001                	nop
 27a:	1802                	slli	a6,a6,0x20
 27c:	4291                	li	t0,4
 27e:	0018                	0x18
 280:	2e00                	fld	fs0,24(a2)
 282:	8289                	srli	a3,a3,0x2
 284:	0101                	addi	sp,sp,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 286:	0111                	addi	sp,sp,4
 288:	1331                	addi	t1,t1,-20
 28a:	0000                	unimp
 28c:	4900212f          	0x4900212f
 290:	00182f13          	slti	t5,a6,1
 294:	3000                	fld	fs0,32(s0)
 296:	012e                	slli	sp,sp,0xb
    int line[size_b][size_a + size_b];
 298:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
    int pola[size_a];
 2a0:	0b39                	addi	s6,s6,14
 2a2:	13491927          	0x13491927
 2a6:	0111                	addi	sp,sp,4
    int line[size_b][size_a + size_b];
 2a8:	0612                	slli	a2,a2,0x4
    int pola[size_a];
 2aa:	1840                	addi	s0,sp,52
 2ac:	01194297          	auipc	t0,0x1194
    int polb[size_b];
 2b0:	31000013          	li	zero,784
    int pola[size_a];
 2b4:	0005                	c.nop	1
    int polb[size_b];
 2b6:	0b3a0803          	lb	a6,179(s4)
    int line[size_b][size_a + size_b];
 2ba:	0b39053b          	0xb39053b
    int pola[size_a];
 2be:	1349                	addi	t1,t1,-14
 2c0:	1702                	slli	a4,a4,0x20
    int polb[size_b];
 2c2:	0000                	unimp
            line[i][j] = 0;
 2c4:	0532                	slli	a0,a0,0xc
 2c6:	0300                	addi	s0,sp,384
 2c8:	3a0e                	fld	fs4,224(sp)
    for (i = 0; i < size_b; ++i){
 2ca:	39053b0b          	0x39053b0b
            product2[j] = 0;
 2ce:	0213490b          	0x213490b
 2d2:	33000017          	auipc	zero,0x33000
    for (i = 0; i < size_b; ++i){
 2d6:	0034                	addi	a3,sp,8
 2d8:	0b3a0803          	lb	a6,179(s4)
    for(i = 0; i < size_a; ++i){
 2dc:	0b39053b          	0xb39053b
    for(i = 0; i < size_b; ++i){
 2e0:	1349                	addi	t1,t1,-14
 2e2:	1802                	slli	a6,a6,0x20
 2e4:	0000                	unimp
    if(star_mult == 1){
 2e6:	3434                	fld	fa3,104(s0)
 2e8:	4900                	lw	s0,16(a0)
 2ea:	02193413          	sltiu	s0,s2,33
 2ee:	35000017          	auipc	zero,0x35000
 2f2:	0021                	c.nop	8
        for (j = size_b -1; j >= 0; j = j-1){
 2f4:	1349                	addi	t1,t1,-14
 2f6:	0000132f          	0x132f
            for (k = size_a-1; k >= 0; k = k-1 ){
 2fa:	2e36                	fld	ft8,328(sp)
            product2[j] = 0;
 2fc:	3f01                	jal	20c <polymult+0x180>
 2fe:	0319                	addi	t1,t1,6
 300:	3a0e                	fld	fs4,224(sp)
            line[i][j] = 0;
 302:	390b3b0b          	0x390b3b0b
            product2[j] = 0;
 306:	4919270b          	0x4919270b
        for(j = 0; j < size_a + size_b -1; ++j){
 30a:	12011113          	0x12011113
 30e:	4006                	0x4006
 310:	9718                	0x9718
    for (i = 0; i < size_b; ++i){
 312:	1942                	slli	s2,s2,0x30
 314:	1301                	addi	t1,t1,-32
 316:	0000                	unimp
 318:	03000537          	lui	a0,0x3000
        for(j = 0; j < size_a + size_b -1; ++j){
 31c:	3a08                	fld	fa0,48(a2)
        pola[i] = a[i];
 31e:	390b3b0b          	0x390b3b0b
 322:	0213490b          	0x213490b
 326:	38000017          	auipc	zero,0x38000
    for(i = 0; i < size_a; ++i){
 32a:	0005                	c.nop	1
        pola[i] = a[i];
 32c:	0b3a0e03          	lb	t3,179(s4)
    for(i = 0; i < size_a; ++i){
 330:	0b390b3b          	0xb390b3b
        polb[i] = b[i];
 334:	1349                	addi	t1,t1,-14
 336:	1702                	slli	a4,a4,0x20
 338:	0000                	unimp
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
 33c:	0300                	addi	s0,sp,384
    for(i = 0; i < size_b; ++i){
 33e:	3a08                	fld	fa0,48(a2)
        polb[i] = b[i];
 340:	390b3b0b          	0x390b3b0b
    for(i = 0; i < size_b; ++i){
 344:	0213490b          	0x213490b
                line[size_b-1-j][k] = pola[k]*polb[j];
 348:	3a000017          	auipc	zero,0x3a000
 34c:	0034                	addi	a3,sp,8
 34e:	0b3a0803          	lb	a6,179(s4)
 352:	0b390b3b          	0xb390b3b
            for (k = size_a-1; k >= 0; k = k-1 ){
 356:	1349                	addi	t1,t1,-14
                line[size_b-1-j][k] = pola[k]*polb[j];
 358:	0000                	unimp
 35a:	0300343b          	0x300343b
            for (k = size_a-1; k >= 0; k = k-1 ){
 35e:	3a0e                	fld	fs4,224(sp)
 360:	390b3b0b          	0x390b3b0b
        for (j = size_b -1; j >= 0; j = j-1){
 364:	0213490b          	0x213490b
 368:	3c000017          	auipc	zero,0x3c000
 36c:	0005                	c.nop	1
 36e:	0b3a0e03          	lb	t3,179(s4)
 372:	0b390b3b          	0xb390b3b
    for(j = 0; j < size_a + size_b -1; ++j){
 376:	1349                	addi	t1,t1,-14
 378:	1802                	slli	a6,a6,0x20
}
 37a:	0000                	unimp
 37c:	053d                	addi	a0,a0,15
 37e:	0300                	addi	s0,sp,384
 380:	3a08                	fld	fa0,48(a2)
 382:	390b3b0b          	0x390b3b0b
 386:	0213490b          	0x213490b
 38a:	0018                	0x18
 38c:	3e00                	fld	fs0,56(a2)
 38e:	002e                	c.slli	zero,0xb
 390:	193c193f 0e030e6e 	0xe030e6e193c193f
            for (k = size_a-1; k >= 0; k = k-1 ){
 398:	0b3a                	slli	s6,s6,0xe
 39a:	00000b3b          	0xb3b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 39e:	0100                	addi	s0,sp,128
 3a0:	0011                	c.nop	4
 3a2:	0610                	addi	a2,sp,768
 3a4:	0655                	addi	a2,a2,21
 3a6:	0e1b0e03          	lb	t3,225(s6) # e0e1 <_stack+0xe1>
 3aa:	0e25                	addi	t3,t3,9
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ac:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	101c                	addi	a5,sp,32
       2:	0000                	unimp
       4:	102e                	c.slli	zero,0x2b
       6:	0000                	unimp
       8:	0001                	nop
       a:	2e5a                	fld	ft8,400(sp)
       c:	0010                	0x10
       e:	2f00                	fld	fs0,24(a4)
      10:	0010                	0x10
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	1030                	addi	a2,sp,40
      20:	0000                	unimp
      22:	1074                	addi	a3,sp,44
      24:	0000                	unimp
      26:	0001                	nop
      28:	7a5a                	flw	fs4,180(sp)
      2a:	0010                	0x10
      2c:	8e00                	0x8e00
      2e:	0010                	0x10
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0faa                	slli	t6,t6,0xa
      3e:	0000                	unimp
      40:	0ffc                	addi	a5,sp,988
      42:	0000                	unimp
      44:	0001                	nop
      46:	fc5a                	fsw	fs6,56(sp)
      48:	1800000f          	0x1800000f
      4c:	0010                	0x10
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	8600                	0x8600
      5e:	de00000f          	0xde00000f
      62:	0300000f          	fence	rw,unknown
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0fde                	slli	t6,t6,0x17
      6c:	0000                	unimp
      6e:	0fe8                	addi	a0,sp,988
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0fe8                	addi	a0,sp,988
      78:	0000                	unimp
      7a:	1019                	c.nop	-26
  jal x0, default_exc_handler
      7c:	0000                	unimp
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	1019                	c.nop	-26
  jal x0, default_exc_handler
      84:	0000                	unimp
      86:	1078                	addi	a4,sp,44
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    int line[size_b][size_a + size_b];
      8e:	7879                	lui	a6,0xffffe
      90:	0010                	0x10
      92:	7a00                	flw	fs0,48(a2)
      94:	0010                	0x10
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	107a                	c.slli	zero,0x3e
      9e:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      a0:	108e                	slli	ra,ra,0x23
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
    int pola[size_a];
      a8:	0079                	c.nop	30
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
      b0:	8600                	0x8600
      b2:	b800000f          	0xb800000f
      b6:	0300000f          	fence	rw,unknown
      ba:	9100                	0x9100
    int line[size_b][size_a + size_b];
      bc:	7af0                	flw	fa2,116(a3)
      be:	0fb8                	addi	a4,sp,984
    int pola[size_a];
      c0:	0000                	unimp
      c2:	0fba                	slli	t6,t6,0xe
    int line[size_b][size_a + size_b];
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
      c8:	007d                	c.nop	31
    int pola[size_a];
      ca:	0fba                	slli	t6,t6,0xe
      cc:	0000                	unimp
    int polb[size_b];
      ce:	1022                	c.slli	zero,0x28
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
      d6:	227a                	fld	ft4,408(sp)
      d8:	0010                	0x10
    int line[size_b][size_a + size_b];
      da:	2f00                	fld	fs0,24(a4)
      dc:	0010                	0x10
    int pola[size_a];
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
    int polb[size_b];
      e2:	2f00                	fld	fs0,24(a4)
            line[i][j] = 0;
      e4:	0010                	0x10
      e6:	7800                	flw	fs0,48(s0)
      e8:	0010                	0x10
    for (i = 0; i < size_b; ++i){
      ea:	0300                	addi	s0,sp,384
      ec:	9100                	0x9100
            product[j] = 0;
      ee:	7af0                	flw	fa2,116(a3)
      f0:	1078                	addi	a4,sp,44
      f2:	0000                	unimp
      f4:	107a                	c.slli	zero,0x3e
    for (i = 0; i < size_b; ++i){
      f6:	0000                	unimp
      f8:	f0720003          	lb	zero,-249(tp) # ffffff07 <_stack_start+0xfffeff07>
    for (i = 0; i < size_a; ++i){
      fc:	7a7a                	flw	fs4,188(sp)
      fe:	0010                	0x10
     100:	8e00                	0x8e00
     102:	0010                	0x10
    for (i = 0; i < size_b; ++i){
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
     108:	7af0                	flw	fa2,116(a3)
	...
    if(star_mult == 1){
     112:	0f86                	slli	t6,t6,0x1
     114:	0000                	unimp
     116:	0fc4                	addi	s1,sp,980
     118:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     11a:	c4910003          	lb	zero,-951(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
     11e:	c47c                	sw	a5,76(s0)
     120:	ce00000f          	0xce00000f
            product[j] = 0;
     124:	0200000f          	fence	r,unknown
            line[i][j] = 0;
     128:	7e00                	flw	fs0,56(a2)
     12a:	ce00                	sw	s0,24(a2)
            product[j] = 0;
     12c:	7200000f          	0x7200000f
        for(j = 0; j < size_a + size_b -1; ++j){
     130:	0010                	0x10
     132:	0200                	addi	s0,sp,256
     134:	7900                	flw	fs0,48(a0)
     136:	7200                	flw	fs0,32(a2)
    for (i = 0; i < size_b; ++i){
     138:	0010                	0x10
     13a:	7800                	flw	fs0,48(s0)
     13c:	0010                	0x10
     13e:	0300                	addi	s0,sp,384
        for(j = 0; j < size_a + size_b -1; ++j){
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
        pola[i] = a[i];
     144:	1078                	addi	a4,sp,44
     146:	0000                	unimp
     148:	107a                	c.slli	zero,0x3e
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
            pola[i] = pola[i] + mod;
     150:	7a7c                	flw	fa5,116(a2)
        while (pola[i] < 0){
     152:	0010                	0x10
     154:	8e00                	0x8e00
     156:	0010                	0x10
     158:	0200                	addi	s0,sp,256
        pola[i] = pola[i] % mod;
     15a:	7900                	flw	fs0,48(a0)
	...
     164:	8600                	0x8600
    for (i = 0; i < size_a; ++i){
     166:	f800000f          	0xf800000f
            pola[i] = pola[i] + mod;
     16a:	0300000f          	fence	rw,unknown
        polb[i] = b[i];
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
     172:	0ff8                	addi	a4,sp,988
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     174:	0000                	unimp
        while (polb[i] < 0){
     176:	0ffe                	slli	t6,t6,0x1f
     178:	0000                	unimp
     17a:	0002                	c.slli64	zero
        polb[i] = polb[i] % mod;
     17c:	007c                	addi	a5,sp,12
     17e:	0ffe                	slli	t6,t6,0x1f
    for (i = 0; i < size_b; ++i){
     180:	0000                	unimp
     182:	1019                	c.nop	-26
        polb[i] = polb[i] % mod;
     184:	0000                	unimp
     186:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     188:	0080                	addi	s0,sp,64
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     18a:	1019                	c.nop	-26
     18c:	0000                	unimp
    if(star_mult == 1){
     18e:	1078                	addi	a4,sp,44
        for (j = size_b -1; j >= 0; j = j-1){
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
    for (i = 0; i < size_b; ++i){
     196:	787e                	flw	fa6,252(sp)
     198:	0010                	0x10
     19a:	7a00                	flw	fs0,48(a2)
     19c:	0010                	0x10
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
    for(j = 0; j < size_a + size_b -1; ++j){
     1a4:	107a                	c.slli	zero,0x3e
     1a6:	0000                	unimp
     1a8:	108e                	slli	ra,ra,0x23
    for(j = 0; j < size_a + size_b -1; ++j){
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
}
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
     1b4:	0000                	unimp
     1b6:	0000                	unimp
     1b8:	aa00                	fsd	fs0,16(a2)
     1ba:	b000000f          	0xb000000f
     1be:	0200000f          	fence	r,unknown
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	309f 0010 4000      	0x40000010309f
     1ca:	0010                	0x10
     1cc:	0200                	addi	s0,sp,256
     1ce:	3000                	fld	fs0,32(s0)
                line[size_b-1-j][k] = pola[k]*polb[j];
     1d0:	009f 0000 0000      	0x9f
     1d6:	0000                	unimp
     1d8:	a200                	fsd	fs0,0(a2)
     1da:	000c                	0xc
     1dc:	ba00                	fsd	fs0,48(a2)
     1de:	000c                	0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e0:	0100                	addi	s0,sp,128
                line[size_b-1-j][k] = pola[k]*polb[j];
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0cba                	slli	s9,s9,0xe
     1e6:	0000                	unimp
     1e8:	0d22                	slli	s10,s10,0x8
            for (k = size_a-1; k >= 0; k = k-1 ){
     1ea:	0000                	unimp
     1ec:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	2258                	fld	fa4,128(a2)
     1f0:	000d                	c.nop	3
     1f2:	2e00                	fld	fs0,24(a2)
     1f4:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f6:	0300                	addi	s0,sp,384
     1f8:	8600                	0x8600
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     1fa:	9f7f                	0x9f7f
     1fc:	0d2e                	slli	s10,s10,0xb
     1fe:	0000                	unimp
     200:	0d34                	addi	a3,sp,664
     202:	0000                	unimp
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
            for (k = size_a-1; k >= 0; k = k-1 ){
     20a:	0d34                	addi	a3,sp,664
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     20c:	0000                	unimp
     20e:	0d6a                	slli	s10,s10,0x1a
     210:	0000                	unimp
     212:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     218:	0000                	unimp
     21a:	0000                	unimp
     21c:	a200                	fsd	fs0,0(a2)
     21e:	000c                	0xc
            line[i][j] = line[i][j] % mod;
     220:	c400                	sw	s0,8(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     222:	000c                	0xc
     224:	0100                	addi	s0,sp,128
            line[i][j] = line[i][j] % mod;
     226:	5b00                	lw	s0,48(a4)
     228:	0cc4                	addi	s1,sp,596
     22a:	0000                	unimp
     22c:	0d2c                	addi	a1,sp,664
        for(j = 0; j < size_a + size_b -1; ++j){
     22e:	0000                	unimp
     230:	0001                	nop
    for (i = 0; i < size_b; ++i){
     232:	2c65                	jal	4ea <polydiv+0x108>
     234:	000d                	c.nop	3
     236:	3400                	fld	fs0,40(s0)
     238:	000d                	c.nop	3
        for(j = 0; j < size_a + size_b -1; ++j){
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
            product[j] += line[i][j];
     23e:	5b01                	li	s6,-32
     240:	349f 000d 6a00      	0x6a00000d349f
        for(i = 0; i < size_b; ++i){
     246:	000d                	c.nop	3
            product[j] += line[i][j];
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
        for(i = 0; i < size_b; ++i){
     254:	0ca2                	slli	s9,s9,0x8
     256:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     258:	0cbc                	addi	a5,sp,600
     25a:	0000                	unimp
     25c:	0001                	nop
        for(i = 0; i < size_b; ++i){
     25e:	bc5c                	fsd	fa5,184(s0)
     260:	000c                	0xc
        product[j] = product[j] % mod;
     262:	2600                	fld	fs0,8(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	000d                	c.nop	3
     266:	0100                	addi	s0,sp,128
        product[j] = product[j] % mod;
     268:	6200                	flw	fs0,0(a2)
     26a:	0d26                	slli	s10,s10,0x9
     26c:	0000                	unimp
     26e:	0d34                	addi	a3,sp,664
    for(j = 0; j < size_a + size_b -1; ++j){
     270:	0000                	unimp
    int line[size_b][size_a + size_b];
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0d34                	addi	a3,sp,664
     27a:	0000                	unimp
     27c:	0d6a                	slli	s10,s10,0x1a
     27e:	0000                	unimp
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     286:	0000                	unimp
     288:	0000                	unimp
     28a:	a200                	fsd	fs0,0(a2)
     28c:	000c                	0xc
     28e:	be00                	fsd	fs0,56(a2)
     290:	000c                	0xc
     292:	0100                	addi	s0,sp,128
     294:	5d00                	lw	s0,56(a0)
     296:	0cbe                	slli	s9,s9,0xf
    int line[size_b][size_a + size_b];
     298:	0000                	unimp
     29a:	00000cd7          	0xcd7
     29e:	0001                	nop
    int pola[size_a];
     2a0:	d75a                	sw	s6,172(sp)
     2a2:	000c                	0xc
     2a4:	6a00                	flw	fs0,16(a2)
     2a6:	000d                	c.nop	3
    int line[size_b][size_a + size_b];
     2a8:	0400                	addi	s0,sp,512
    int pola[size_a];
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
    int polb[size_b];
     2ae:	009f 0000 0000      	0x9f
    int pola[size_a];
     2b4:	0000                	unimp
    int polb[size_b];
     2b6:	a200                	fsd	fs0,0(a2)
     2b8:	000c                	0xc
    int line[size_b][size_a + size_b];
     2ba:	c600                	sw	s0,8(a2)
     2bc:	000c                	0xc
    int pola[size_a];
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
    int polb[size_b];
     2c2:	0cc6                	slli	s9,s9,0x11
            line[i][j] = 0;
     2c4:	0000                	unimp
     2c6:	0d30                	addi	a2,sp,664
     2c8:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     2ca:	0001                	nop
     2cc:	000d3067          	0xd3067
            product2[j] = 0;
     2d0:	3400                	fld	fs0,40(s0)
     2d2:	000d                	c.nop	3
     2d4:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     2d6:	f300                	fsw	fs0,32(a4)
     2d8:	5e01                	li	t3,-32
    for(i = 0; i < size_a; ++i){
     2da:	349f 000d 6a00      	0x6a00000d349f
    for(i = 0; i < size_b; ++i){
     2e0:	000d                	c.nop	3
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
    if(star_mult == 1){
     2ee:	0ca2                	slli	s9,s9,0x8
     2f0:	0000                	unimp
     2f2:	00000cd7          	0xcd7
        for (j = size_b -1; j >= 0; j = j-1){
     2f6:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     2f8:	d75f 000c 6a00      	0x6a00000cd75f
            product2[j] = 0;
     2fe:	000d                	c.nop	3
     300:	0400                	addi	s0,sp,512
            line[i][j] = 0;
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
            product2[j] = 0;
     306:	009f 0000 0000      	0x9f
        for(j = 0; j < size_a + size_b -1; ++j){
     30c:	0000                	unimp
     30e:	a200                	fsd	fs0,0(a2)
     310:	000c                	0xc
    for (i = 0; i < size_b; ++i){
     312:	d700                	sw	s0,40(a4)
     314:	000c                	0xc
     316:	0100                	addi	s0,sp,128
     318:	6000                	flw	fs0,0(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     31a:	00000cd7          	0xcd7
        pola[i] = a[i];
     31e:	0d2a                	slli	s10,s10,0xa
     320:	0000                	unimp
     322:	0001                	nop
     324:	2a64                	fld	fs1,208(a2)
     326:	000d                	c.nop	3
     328:	3400                	fld	fs0,40(s0)
    for(i = 0; i < size_a; ++i){
     32a:	000d                	c.nop	3
        pola[i] = a[i];
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
    for(i = 0; i < size_a; ++i){
     330:	6001                	0x6001
        polb[i] = b[i];
     332:	349f 000d 6a00      	0x6a00000d349f
     338:	000d                	c.nop	3
     33a:	0100                	addi	s0,sp,128
     33c:	6400                	flw	fs0,8(s0)
	...
                line[size_b-1-j][k] = pola[k]*polb[j];
     346:	0cd8                	addi	a4,sp,596
     348:	0000                	unimp
     34a:	00000ce7          	jalr	s9,zero # 0 <__DYNAMIC>
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
     352:	0000                	unimp
     354:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     356:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     358:	ea00                	fsw	fs0,16(a2)
     35a:	000c                	0xc
     35c:	0800                	addi	s0,sp,16
            for (k = size_a-1; k >= 0; k = k-1 ){
     35e:	000d                	c.nop	3
     360:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     362:	5a00                	lw	s0,48(a2)
     364:	0d08                	addi	a0,sp,656
     366:	0000                	unimp
     368:	00000d0b          	0xd0b
     36c:	0001                	nop
     36e:	345c                	fld	fa5,168(s0)
     370:	000d                	c.nop	3
     372:	5800                	lw	s0,48(s0)
        for(i = 0; i < size_b; ++i){
     374:	000d                	c.nop	3
    for(j = 0; j < size_a + size_b -1; ++j){
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
}
     382:	0d0c                	addi	a1,sp,656
     384:	0000                	unimp
     386:	00000d17          	auipc	s10,0x0
     38a:	0001                	nop
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
     390:	0000                	unimp
     392:	0000                	unimp
     394:	1800                	addi	s0,sp,48
     396:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     398:	3400                	fld	fs0,40(s0)
     39a:	000d                	c.nop	3
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0d58                	addi	a4,sp,660
     3a2:	0000                	unimp
     3a4:	0d6a                	slli	s10,s10,0x1a
     3a6:	0000                	unimp
     3a8:	0001                	nop
     3aa:	005a                	c.slli	zero,0x16
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ac:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3ae:	0000                	unimp
     3b0:	0000                	unimp
     3b2:	ea00                	fsw	fs0,16(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b4:	000c                	0xc
     3b6:	f000                	fsw	fs0,32(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     3b8:	000c                	0xc
     3ba:	0100                	addi	s0,sp,128
     3bc:	5900                	lw	s0,48(a0)
     3be:	0cf0                	addi	a2,sp,604
            product2[j] += line[i][j];
     3c0:	0000                	unimp
     3c2:	0cfc                	addi	a5,sp,604
     3c4:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     3c6:	0001                	nop
            product2[j] += line[i][j];
     3c8:	fc5d                	bnez	s0,386 <polymult2+0x114>
     3ca:	000c                	0xc
     3cc:	0200                	addi	s0,sp,256
     3ce:	000d                	c.nop	3
     3d0:	0100                	addi	s0,sp,128
     3d2:	5e00                	lw	s0,56(a2)
        for(i = 0; i < size_b; ++i){
     3d4:	0d18                	addi	a4,sp,656
     3d6:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     3d8:	0d24                	addi	s1,sp,664
     3da:	0000                	unimp
     3dc:	0001                	nop
        for(i = 0; i < size_b; ++i){
     3de:	3459                	jal	fffffe64 <_stack_start+0xfffefe64>
     3e0:	000d                	c.nop	3
    int v[size_N];
     3e2:	3e00                	fld	fs0,56(a2)
     3e4:	000d                	c.nop	3
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3e6:	0100                	addi	s0,sp,128
    int v[size_N];
     3e8:	5d00                	lw	s0,56(a0)
     3ea:	0d3e                	slli	s10,s10,0xf
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3ec:	0000                	unimp
     3ee:	0d44                	addi	s1,sp,660
     3f0:	0000                	unimp
     3f2:	7f7d0003          	lb	zero,2039(s10) # b7d <generate_keys+0x265>
     3f6:	449f 000d 4600      	0x4600000d449f
     3fc:	000d                	c.nop	3
     3fe:	0100                	addi	s0,sp,128
     400:	5d00                	lw	s0,56(a0)
     402:	0d46                	slli	s10,s10,0x11
     404:	0000                	unimp
     406:	0d58                	addi	a4,sp,660
    int v[size_N];
     408:	0000                	unimp
     40a:	0001                	nop
     40c:	585e                	lw	a6,244(sp)
    int q[size_N];
     40e:	000d                	c.nop	3
     410:	6200                	flw	fs0,0(a2)
     412:	000d                	c.nop	3
    int num_temp[size_N];
     414:	0100                	addi	s0,sp,128
     416:	5900                	lw	s0,48(a0)
    int denum_temp[size_D];
     418:	0d62                	slli	s10,s10,0x18
     41a:	0000                	unimp
     41c:	0d68                	addi	a0,sp,668
     41e:	0000                	unimp
    int num_temp[size_N];
     420:	7f790003          	lb	zero,2039(s2) # 27f7 <_min_stack+0x7f7>
    int denum_temp[size_D];
     424:	689f 000d 6a00      	0x6a00000d689f
     42a:	000d                	c.nop	3
     42c:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     42e:	5900                	lw	s0,48(a0)
	...
    for (i = 0; i < size_N; ++i){
     438:	0c0c                	addi	a1,sp,528
     43a:	0000                	unimp
     43c:	0c28                	addi	a0,sp,536
     43e:	0000                	unimp
     440:	0001                	nop
    for (i = 0; i < size_D; ++i) {
     442:	285a                	fld	fa6,400(sp)
     444:	000c                	0xc
     446:	7a00                	flw	fs0,48(a2)
    for (i = 0; i < size_N; ++i){
     448:	000c                	0xc
     44a:	0100                	addi	s0,sp,128
     44c:	5800                	lw	s0,48(s0)
    for (i = size_D-1; i >= 0; i = i-1){
     44e:	0c7a                	slli	s8,s8,0x1e
     450:	0000                	unimp
     452:	0ca2                	slli	s9,s9,0x8
     454:	0000                	unimp
     456:	0004                	0x4
     458:	9f5a01f3          	0x9f5a01f3
	...
    for (u = 0; u < mod; ++u){
     464:	0c0c                	addi	a1,sp,528
     466:	0000                	unimp
        num_temp[i] = num[i];
     468:	0c22                	slli	s8,s8,0x8
     46a:	0000                	unimp
     46c:	0001                	nop
     46e:	000c225b          	0xc225b
        while (num_temp[i] < 0) {
     472:	8800                	0x8800
     474:	000c                	0xc
     476:	0100                	addi	s0,sp,128
        num_temp[i] = num_temp[i] % mod;
     478:	6200                	flw	fs0,0(a2)
     47a:	0c88                	addi	a0,sp,592
    for (i = 0; i < size_N; ++i){
     47c:	0000                	unimp
     47e:	0c90                	addi	a2,sp,592
        num_temp[i] = num_temp[i] % mod;
     480:	0000                	unimp
     482:	0004                	0x4
    for (i = 0; i < size_N; ++i){
     484:	9f5b01f3          	0x9f5b01f3
            num_temp[i] = num_temp[i] + mod;
     488:	0c90                	addi	a2,sp,592
        denum_temp[i] = denum[i];
     48a:	0000                	unimp
     48c:	0ca2                	slli	s9,s9,0x8
     48e:	0000                	unimp
     490:	0001                	nop
            denum_temp[i] = denum_temp[i] + mod;
     492:	0062                	c.slli	zero,0x18
        while (denum_temp[i] < 0) {
     494:	0000                	unimp
     496:	0000                	unimp
     498:	0000                	unimp
        denum_temp[i] = denum_temp[i] % mod;
     49a:	0c00                	addi	s0,sp,528
     49c:	000c                	0xc
    for (i = 0; i < size_D; ++i) {
     49e:	2600                	fld	fs0,8(a2)
     4a0:	000c                	0xc
        denum_temp[i] = denum_temp[i] % mod;
     4a2:	0100                	addi	s0,sp,128
     4a4:	5c00                	lw	s0,56(s0)
    for (i = 0; i < size_D; ++i) {
     4a6:	0c26                	slli	s8,s8,0x9
            denum_temp[i] = denum_temp[i] + mod;
     4a8:	0000                	unimp
     4aa:	0c66                	slli	s8,s8,0x19
        q[i] = 0;
     4ac:	0000                	unimp
     4ae:	0001                	nop
     4b0:	6659                	lui	a2,0x16
     4b2:	000c                	0xc
        v[i] = 0;
     4b4:	a200                	fsd	fs0,0(a2)
        q[i] = 0;
     4b6:	000c                	0xc
     4b8:	0400                	addi	s0,sp,512
        v[i] = 0;
     4ba:	f300                	fsw	fs0,32(a4)
     4bc:	5c01                	li	s8,-32
    for (i = 0; i < size_N; ++i){
     4be:	009f 0000 0000      	0x9f
    for (i = size_D-1; i >= 0; i = i-1){
     4c4:	0000                	unimp
     4c6:	0c00                	addi	s0,sp,528
        if ( (b_N*u)%mod == 1 )
     4c8:	000c                	0xc
     4ca:	3300                	fld	fs0,32(a4)
     4cc:	000c                	0xc
     4ce:	0100                	addi	s0,sp,128
     4d0:	5d00                	lw	s0,56(a0)
    for (u = 0; u < mod; ++u){
     4d2:	00000c33          	add	s8,zero,zero
        if( num_temp[i] != 0 )
     4d6:	0c8c                	addi	a1,sp,592
    for (i = size_N-1; i >= 0; i = i-1){
     4d8:	0000                	unimp
     4da:	0001                	nop
     4dc:	8c64                	0x8c64
     4de:	000c                	0xc
     4e0:	9000                	0x9000
     4e2:	000c                	0xc
     4e4:	0400                	addi	s0,sp,512
    while (d >= d2){
     4e6:	f300                	fsw	fs0,32(a4)
     4e8:	5d01                	li	s10,-32
    for(i = 0; i < size_N; ++i){
     4ea:	909f 000c a200      	0xa200000c909f
        result[i] = q[i];
     4f0:	000c                	0xc
     4f2:	0100                	addi	s0,sp,128
    for(i = 0; i < size_N; ++i){
     4f4:	6400                	flw	fs0,8(s0)
	...
        result[i] = num_temp[i-size_N];
     4fe:	0c0c                	addi	a1,sp,528
     500:	0000                	unimp
     502:	00000c33          	add	s8,zero,zero
    for(i = size_N; i < (2*size_N); ++i){
     506:	0001                	nop
}
     508:	335e                	fld	ft6,496(sp)
     50a:	000c                	0xc
     50c:	8a00                	0x8a00
     50e:	000c                	0xc
     510:	0100                	addi	s0,sp,128
     512:	6300                	flw	fs0,0(a4)
     514:	0c8a                	slli	s9,s9,0x2
     516:	0000                	unimp
     518:	0c90                	addi	a2,sp,592
     51a:	0000                	unimp
     51c:	0004                	0x4
     51e:	9f5e01f3          	0x9f5e01f3
     522:	0c90                	addi	a2,sp,592
     524:	0000                	unimp
     526:	0ca2                	slli	s9,s9,0x8
     528:	0000                	unimp
     52a:	0001                	nop
     52c:	00000063          	beqz	zero,52c <polydiv+0x14a>
     530:	0000                	unimp
        v[(d-d2)] = u*r_d;
     532:	0000                	unimp
     534:	4600                	lw	s0,8(a2)
     536:	000c                	0xc
     538:	7300                	flw	fs0,32(a4)
     53a:	000c                	0xc
     53c:	0100                	addi	s0,sp,128
     53e:	5a00                	lw	s0,48(a2)
	...
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     548:	0c46                	slli	s8,s8,0x11
     54a:	0000                	unimp
     54c:	0c4c                	addi	a1,sp,532
     54e:	0000                	unimp
     550:	0002                	c.slli64	zero
     552:	9f30                	0x9f30
     554:	0c74                	addi	a3,sp,540
        for (i = 0; i < size_N; ++i){
     556:	0000                	unimp
     558:	0c86                	slli	s9,s9,0x1
     55a:	0000                	unimp
     55c:	0001                	nop
     55e:	9059                	srli	s0,s0,0x36
        for (i = 0; i < size_N; ++i){
     560:	000c                	0xc
     562:	9a00                	0x9a00
     564:	000c                	0xc
     566:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     568:	5900                	lw	s0,48(a0)
     56a:	0c9a                	slli	s9,s9,0x6
     56c:	0000                	unimp
     56e:	0ca0                	addi	s0,sp,600
        for(i = 0; i < size_N; ++i){
     570:	0000                	unimp
     572:	7f790003          	lb	zero,2039(s2)
        for (i = size_N-1; i >= 0; i = i-1){
     576:	a09f 000c a200      	0xa200000ca09f
     57c:	000c                	0xc
     57e:	0100                	addi	s0,sp,128
     580:	5900                	lw	s0,48(a0)
	...
        for (i = 0; i < size_N; ++i){
     58a:	0918                	addi	a4,sp,144
     58c:	0000                	unimp
            v[i] = v[i] % mod;
     58e:	095c                	addi	a5,sp,148
     590:	0000                	unimp
     592:	0001                	nop
     594:	5c5a                	lw	s8,180(sp)
        for (i = 0; i < size_N; ++i){
     596:	0009                	c.nop	2
                product[i] = product[i] + mod;
     598:	2000                	fld	fs0,0(s0)
     59a:	0100000b          	0x100000b
            while (product[i] < 0) {
     59e:	6200                	flw	fs0,0(a2)
     5a0:	0b20                	addi	s0,sp,408
            product[i] = product[i] % mod;
     5a2:	0000                	unimp
     5a4:	0b44                	addi	s1,sp,404
        for (i = 0; i < size_N; ++i){
     5a6:	0000                	unimp
     5a8:	7f850003          	lb	zero,2040(a0) # 30007f8 <_stack_start+0x2ff07f8>
            product[i] = product[i] % mod;
     5ac:	449f 000b 6400      	0x6400000b449f
            num_temp[i] = num_temp[i] - product[i];
     5b2:	0400000b          	0x400000b
     5b6:	f300                	fsw	fs0,32(a4)
     5b8:	5a01                	li	s4,-32
        for (i = 0; i < size_N; ++i){
     5ba:	649f 000b f800      	0xf800000b649f
            num_temp[i] = num_temp[i] - product[i];
     5c0:	0100000b          	0x100000b
        for (i = 0; i < size_N; ++i){
     5c4:	6200                	flw	fs0,0(a2)
                num_temp[i] = num_temp[i] + mod;
     5c6:	0bf8                	addi	a4,sp,476
     5c8:	0000                	unimp
            while (num_temp[i] < 0){
     5ca:	0c0c                	addi	a1,sp,528
     5cc:	0000                	unimp
     5ce:	7f850003          	lb	zero,2040(a0)
            num_temp[i] = num_temp[i] % mod;
     5d2:	009f 0000 0000      	0x9f
     5d8:	0000                	unimp
     5da:	1800                	addi	s0,sp,48
        for (i = 0; i < size_N; ++i){
     5dc:	0009                	c.nop	2
            q[i] = q[i] + v[i];
     5de:	5400                	lw	s0,40(s0)
     5e0:	0009                	c.nop	2
     5e2:	0100                	addi	s0,sp,128
     5e4:	5b00                	lw	s0,48(a4)
     5e6:	0954                	addi	a3,sp,148
        for(i = 0; i < size_N; ++i){
     5e8:	0000                	unimp
     5ea:	0b4c                	addi	a1,sp,404
            q[i] = q[i] + v[i];
     5ec:	0000                	unimp
            q[i] = q[i] % mod;
     5ee:	0001                	nop
     5f0:	000b4c67          	0xb4c67
     5f4:	6400                	flw	fs0,8(s0)
        for(i = 0; i < size_N; ++i){
     5f6:	0400000b          	0x400000b
        for (i = size_N-1; i >= 0; i = i-1){
     5fa:	f300                	fsw	fs0,32(a4)
     5fc:	5b01                	li	s6,-32
            v[i] = 0;
     5fe:	649f 000b 0c00      	0xc00000b649f
     604:	000c                	0xc
     606:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     608:	6700                	flw	fs0,8(a4)
	...
        result[i] = q[i];
     612:	0918                	addi	a4,sp,144
     614:	0000                	unimp
     616:	0958                	addi	a4,sp,148
     618:	0000                	unimp
     61a:	0001                	nop
    for(i = 0; i < size_N; ++i){
     61c:	585c                	lw	a5,52(s0)
        result[i] = q[i];
     61e:	0009                	c.nop	2
    for(i = 0; i < size_N; ++i){
     620:	4800                	lw	s0,16(s0)
        result[i] = num_temp[i-size_N];
     622:	0100000b          	0x100000b
     626:	6600                	flw	fs0,8(a2)
     628:	0b48                	addi	a0,sp,404
     62a:	0000                	unimp
     62c:	0b64                	addi	s1,sp,412
    for(i = size_N; i < (2*size_N); ++i){
     62e:	0000                	unimp
     630:	0004                	0x4
     632:	9f5c01f3          	0x9f5c01f3
    int ri_2[size]; // MX-ring poly, a
     636:	0b64                	addi	s1,sp,412
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     638:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     63a:	0c0c                	addi	a1,sp,528
     63c:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     63e:	0001                	nop
     640:	0066                	c.slli	zero,0x19
     642:	0000                	unimp
     644:	0000                	unimp
     646:	0000                	unimp
     648:	a600                	fsd	fs0,8(a2)
     64a:	000a                	c.slli	zero,0x2
     64c:	b000                	fsd	fs0,32(s0)
     64e:	000a                	c.slli	zero,0x2
     650:	0100                	addi	s0,sp,128
     652:	5a00                	lw	s0,48(a2)
	...
    int ri_2[size]; // MX-ring poly, a
     65c:	0ac0                	addi	s0,sp,340
     65e:	0000                	unimp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     660:	0adf 0000 0001      	0x100000adf
    int ri[size];
     666:	c45a                	sw	s6,8(sp)
     668:	d800000b          	0xd800000b
    int ti_1[size]; // ti_1[0] = 1
     66c:	0100000b          	0x100000b
     670:	5a00                	lw	s0,48(a2)
	...
    int qi_1[size];
     67a:	0ae0                	addi	s0,sp,348
     67c:	0000                	unimp
    int temp[size];
     67e:	00000af3          	0xaf3
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     682:	0001                	nop
     684:	d85a                	sw	s6,48(sp)
    int ri_2[size]; // MX-ring poly, a
     686:	e800000b          	0xe800000b
    int temp[size];
     68a:	0100000b          	0x100000b
    for (i = 0; i < size; ++i) {
     68e:	5a00                	lw	s0,48(a2)
	...
     698:	0af4                	addi	a3,sp,348
     69a:	0000                	unimp
    ti_1[0] = 1;
     69c:	0b10                	addi	a2,sp,400
     69e:	0000                	unimp
     6a0:	0001                	nop
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6a2:	e85a                	fsw	fs6,16(sp)
     6a4:	f800000b          	0xf800000b
     6a8:	0100000b          	0x100000b
        for (i = 0; i < N + 1; ++i) {
     6ac:	5a00                	lw	s0,48(a2)
	...
        ri_2[i] = polyR[i];
     6b6:	0a5a                	slli	s4,s4,0x16
     6b8:	0000                	unimp
    for (i = 0; i < size; ++i) {
     6ba:	0b28                	addi	a0,sp,408
        ri_2[i] = polyR[i];
     6bc:	0000                	unimp
     6be:	0002                	c.slli64	zero
        ri_1[i] = polyf[i];
     6c0:	0072                	c.slli	zero,0x1c
     6c2:	0b28                	addi	a0,sp,408
     6c4:	0000                	unimp
     6c6:	0b40                	addi	s0,sp,404
     6c8:	0000                	unimp
     6ca:	0002                	c.slli64	zero
     6cc:	0084                	addi	s1,sp,64
     6ce:	0b40                	addi	s0,sp,404
        ti_2[i] = 0;
     6d0:	0000                	unimp
     6d2:	0b44                	addi	s1,sp,404
     6d4:	0000                	unimp
     6d6:	0010                	0x10
        ti_1[i] = 0;
     6d8:	0091                	addi	ra,ra,4
     6da:	0085                	addi	ra,ra,1
     6dc:	2432                	fld	fs0,264(sp)
     6de:	f0090f23          	sb	zero,-226(s2)
    for (i = 0; i < size; ++i) {
     6e2:	1c1a                	slli	s8,s8,0x26
                ri_2[i] = ri_2[i] + mod;
     6e4:	f00a                	fsw	ft2,32(sp)
     6e6:	1c01                	addi	s8,s8,-32
            while (ri_2[i] < 0) {
     6e8:	0b44                	addi	s1,sp,404
     6ea:	0000                	unimp
     6ec:	0b64                	addi	s1,sp,412
            ri_2[i] = ri_2[i] % mod;
     6ee:	0000                	unimp
     6f0:	00910013          	addi	zero,sp,9
     6f4:	235a01f3          	0x235a01f3
        for (i = 0; i < N + 1; ++i) {
     6f8:	3201                	jal	fffffff8 <_stack_start+0xfffefff8>
     6fa:	2324                	fld	fs1,64(a4)
     6fc:	1af0090f          	0x1af0090f
     700:	0a1c                	addi	a5,sp,272
     702:	01f0                	addi	a2,sp,204
        for (i = 0; i < N + 1; ++i) {
     704:	641c                	flw	fa5,8(s0)
     706:	0c00000b          	0xc00000b
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     70a:	000c                	0xc
     70c:	0200                	addi	s0,sp,256
     70e:	7200                	flw	fs0,32(a2)
	...
        for (i = N + 1; i < (2 * N + 2); ++i) {
     718:	5e00                	lw	s0,56(a2)
     71a:	000a                	c.slli	zero,0x2
     71c:	6000                	flw	fs0,0(s0)
     71e:	000a                	c.slli	zero,0x2
     720:	0200                	addi	s0,sp,256
     722:	3100                	fld	fs0,32(a0)
        for (i = 0; i < N + 1; ++i) {
     724:	609f 000a 6600      	0x6600000a609f
     72a:	000a                	c.slli	zero,0x2
     72c:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     72e:	5f00                	lw	s0,56(a4)
     730:	0a6a                	slli	s4,s4,0x1a
     732:	0000                	unimp
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     734:	0a70                	addi	a2,sp,284
     736:	0000                	unimp
     738:	0001                	nop
     73a:	785f 000a 8600      	0x8600000a785f
        for (i = 0; i < N + 1; ++i) {
     740:	000a                	c.slli	zero,0x2
     742:	0100                	addi	s0,sp,128
     744:	5f00                	lw	s0,56(a4)
     746:	0a90                	addi	a2,sp,336
        for (i = 0; i < N + 1; ++i) {
     748:	0000                	unimp
     74a:	0aa5                	addi	s5,s5,9
     74c:	0000                	unimp
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     74e:	0001                	nop
     750:	a65f 000a b000      	0xb000000aa65f
     756:	000a                	c.slli	zero,0x2
     758:	0500                	addi	s0,sp,640
     75a:	8200                	0x8200
        for (i = 0; i < N + 1; ++i) {
     75c:	3100                	fld	fs0,32(a0)
     75e:	9f24                	0x9f24
     760:	0ab0                	addi	a2,sp,344
        for (i = 0; i < N + 1; ++i) {
     762:	0000                	unimp
     764:	00000abf c05f0001 	0xc05f000100000abf
        for (i = 0; i < N + 1; ++i) {
     76c:	000a                	c.slli	zero,0x2
     76e:	d000                	sw	s0,32(s0)
     770:	000a                	c.slli	zero,0x2
        for (i = 0; i < N + 1; ++i) {
     772:	0500                	addi	s0,sp,640
     774:	8200                	0x8200
     776:	3300                	fld	fs0,32(a4)
     778:	9f1e                	add	t5,t5,t2
        controlR = 0;
     77a:	0ad0                	addi	a2,sp,340
        for (i = 0; i < N + 1; ++i) {
     77c:	0000                	unimp
     77e:	0ae0                	addi	s0,sp,348
     780:	0000                	unimp
    while (controlR != 0) {
     782:	0001                	nop
        for (j = 0; j < mod; ++j) {
     784:	e059                	bnez	s0,80a <ext_euclid+0x1d6>
            if (((ri_2[0] * j) % mod) == 1)
     786:	000a                	c.slli	zero,0x2
        for (j = 0; j < mod; ++j) {
     788:	e800                	fsw	fs0,16(s0)
     78a:	000a                	c.slli	zero,0x2
     78c:	0200                	addi	s0,sp,256
     78e:	3000                	fld	fs0,32(s0)
     790:	e89f 000a f000      	0xf000000ae89f
        for (i = 0; i < N + 1; ++i) {
     796:	000a                	c.slli	zero,0x2
    }
     798:	0100                	addi	s0,sp,128
     79a:	5e00                	lw	s0,56(a2)
     79c:	0af4                	addi	a3,sp,348
     79e:	0000                	unimp
     7a0:	0b06                	slli	s6,s6,0x1
     7a2:	0000                	unimp
     7a4:	0005                	c.nop	1
     7a6:	0082                	c.slli64	ra
     7a8:	2432                	fld	fs0,264(sp)
     7aa:	069f 000b 2000      	0x2000000b069f
     7b0:	0100000b          	0x100000b
     7b4:	6800                	flw	fs0,16(s0)
     7b6:	0b20                	addi	s0,sp,408
     7b8:	0000                	unimp
     7ba:	0ba0                	addi	s0,sp,472
     7bc:	0000                	unimp
     7be:	0001                	nop
     7c0:	a05f 000b a200      	0xa200000ba05f
            while (ri_1[i] < 0) {
     7c6:	0300000b          	0x300000b
     7ca:	7f00                	flw	fs0,56(a4)
            ri_1[i] = ri_1[i] % mod;
     7cc:	9f7f                	0x9f7f
     7ce:	0ba2                	slli	s7,s7,0x8
        for (i = 0; i < N + 1; ++i) {
     7d0:	0000                	unimp
     7d2:	0bc4                	addi	s1,sp,468
            ri_1[i] = ri_1[i] % mod;
     7d4:	0000                	unimp
     7d6:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     7d8:	c45f 000b d400      	0xd400000bc45f
            ri[i - (N + 1)] = res[i];
     7de:	0100000b          	0x100000b
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7e2:	5900                	lw	s0,48(a0)
     7e4:	0bd4                	addi	a3,sp,468
            ri[i - (N + 1)] = res[i];
     7e6:	0000                	unimp
     7e8:	0bd6                	slli	s7,s7,0x15
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7ea:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     7ec:	7f790003          	lb	zero,2039(s2)
     7f0:	d69f 000b d800      	0xd800000bd69f
     7f6:	0100000b          	0x100000b
     7fa:	5900                	lw	s0,48(a0)
        for (i = 0; i < N + 1; ++i) {
     7fc:	0bd8                	addi	a4,sp,468
            temp[i] = ri_2[i] - ri[i];
     7fe:	0000                	unimp
     800:	0bdc                	addi	a5,sp,468
        for (i = 0; i < N + 1; ++i) {
     802:	0000                	unimp
     804:	0001                	nop
                temp[i] = temp[i] + mod;
     806:	dc5e                	sw	s7,56(sp)
     808:	e600000b          	0xe600000b
            while (temp[i] < 0) {
     80c:	0300000b          	0x300000b
            temp[i] = temp[i] % mod;
     810:	7e00                	flw	fs0,56(a2)
     812:	9f7f                	0x9f7f
        for (i = 0; i < N + 1; ++i) {
     814:	0be6                	slli	s7,s7,0x19
     816:	0000                	unimp
            temp[i] = temp[i] % mod;
     818:	0be8                	addi	a0,sp,476
     81a:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     81c:	0001                	nop
            qi_1[i] = res1[i];
     81e:	e85e                	fsw	fs7,16(sp)
     820:	f800000b          	0xf800000b
     824:	0100000b          	0x100000b
     828:	6800                	flw	fs0,16(s0)
        for (i = 0; i < N + 1; ++i) {
     82a:	0bf8                	addi	a4,sp,476
            qi_1[i] = res1[i];
     82c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     82e:	0c08                	addi	a0,sp,528
                qi_1[i] = qi_1[i] + mod;
     830:	0000                	unimp
     832:	0001                	nop
            while (qi_1[i] < 0) {
     834:	085f 000c 0a00      	0xa00000c085f
            qi_1[i] = qi_1[i] % mod;
     83a:	000c                	0xc
     83c:	0300                	addi	s0,sp,384
        for (i = 0; i < N + 1; ++i) {
     83e:	7f00                	flw	fs0,56(a4)
     840:	9f7f                	0x9f7f
            qi_1[i] = qi_1[i] % mod;
     842:	0c0a                	slli	s8,s8,0x2
     844:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     846:	0c0c                	addi	a1,sp,528
            temp[i] = res2[i];
     848:	0000                	unimp
     84a:	0001                	nop
     84c:	005f 0000 0000      	0x5f
     852:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     854:	2400                	fld	fs0,8(s0)
            temp[i] = res2[i];
     856:	6400000b          	0x6400000b
                temp[i] = temp[i] + mod;
     85a:	0600000b          	0x600000b
     85e:	0300                	addi	s0,sp,384
            while (temp[i] < 0) {
     860:	1ab8                	addi	a4,sp,376
     862:	0000                	unimp
     864:	009f 0000 0000      	0x9f
            temp[i] = temp[i] % mod;
     86a:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     86c:	5a00                	lw	s0,48(a2)
     86e:	000a                	c.slli	zero,0x2
            temp[i] = temp[i] % mod;
     870:	2000                	fld	fs0,0(s0)
     872:	0100000b          	0x100000b
            ti[i] = ti_2[i] - temp[i];
     876:	6200                	flw	fs0,0(a2)
     878:	0b20                	addi	s0,sp,408
     87a:	0000                	unimp
     87c:	0b44                	addi	s1,sp,404
     87e:	0000                	unimp
     880:	7f850003          	lb	zero,2040(a0)
     884:	449f 000b 6400      	0x6400000b449f
     88a:	0400000b          	0x400000b
     88e:	f300                	fsw	fs0,32(a4)
     890:	5a01                	li	s4,-32
        for (i = 0; i < N + 1; ++i) {
     892:	649f 000b f800      	0xf800000b649f
                ti[i] = ti[i] + mod;
     898:	0100000b          	0x100000b
            while (ti[i] < 0) {
     89c:	6200                	flw	fs0,0(a2)
     89e:	0bf8                	addi	a4,sp,476
            ti[i] = ti[i] % mod;
     8a0:	0000                	unimp
     8a2:	0c0c                	addi	a1,sp,528
        for (i = 0; i < N + 1; ++i) {
     8a4:	0000                	unimp
     8a6:	7f850003          	lb	zero,2040(a0)
            ti[i] = ti[i] % mod;
     8aa:	009f 0000 0000      	0x9f
            ri_2[i] = ri_1[i];
     8b0:	0000                	unimp
     8b2:	3400                	fld	fs0,40(s0)
     8b4:	0006                	c.slli	zero,0x1
     8b6:	aa00                	fsd	fs0,16(a2)
        for (i = 0; i < N + 1; ++i) {
     8b8:	0006                	c.slli	zero,0x1
            ri_2[i] = ri_1[i];
     8ba:	0100                	addi	s0,sp,128
            ri_1[i] = ri[i];
     8bc:	5a00                	lw	s0,48(a2)
     8be:	06aa                	slli	a3,a3,0xa
     8c0:	0000                	unimp
            ti_2[i] = ti_1[i];
     8c2:	06ae                	slli	a3,a3,0xb
     8c4:	0000                	unimp
     8c6:	0004                	0x4
     8c8:	9f5a01f3          	0x9f5a01f3
            ri_1[i] = ri[i];
     8cc:	06ae                	slli	a3,a3,0xb
            ti_2[i] = ti_1[i];
     8ce:	0000                	unimp
     8d0:	06e4                	addi	s1,sp,844
     8d2:	0000                	unimp
     8d4:	0001                	nop
            controlR += ri[i];
     8d6:	e45a                	fsw	fs6,8(sp)
            ti_2[i] = ti_1[i];
     8d8:	0006                	c.slli	zero,0x1
     8da:	1800                	addi	s0,sp,48
            ti_1[i] = ti[i];
     8dc:	0009                	c.nop	2
     8de:	0400                	addi	s0,sp,512
     8e0:	f300                	fsw	fs0,32(a4)
     8e2:	5a01                	li	s4,-32
            qi_1[i] = 0;
     8e4:	009f 0000 0000      	0x9f
     8ea:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8ec:	3400                	fld	fs0,40(s0)
     8ee:	0006                	c.slli	zero,0x1
            if (((ri_2[0] * j) % mod) == 1)
     8f0:	aa00                	fsd	fs0,16(a2)
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0100                	addi	s0,sp,128
     8f6:	5b00                	lw	s0,48(a4)
     8f8:	06aa                	slli	a3,a3,0xa
     8fa:	0000                	unimp
     8fc:	06ae                	slli	a3,a3,0xb
     8fe:	0000                	unimp
        for (j = 0; j < mod; ++j) {
     900:	0004                	0x4
     902:	9f5b01f3          	0x9f5b01f3
        for (i = 0; i < N + 1; ++i) {
     906:	06ae                	slli	a3,a3,0xb
     908:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     90a:	06e4                	addi	s1,sp,844
     90c:	0000                	unimp
     90e:	0001                	nop
     910:	0006e45b          	0x6e45b
     914:	1800                	addi	s0,sp,48
        for (i = 0; i < N + 1; ++i) {
     916:	0009                	c.nop	2
int* generate_keys(int N, int p, int q){
     918:	0400                	addi	s0,sp,512
     91a:	f300                	fsw	fs0,32(a4)
     91c:	5b01                	li	s6,-32
     91e:	009f 0000 0000      	0x9f
     924:	0000                	unimp
     926:	3400                	fld	fs0,40(s0)
     928:	0006                	c.slli	zero,0x1
     92a:	9800                	0x9800
     92c:	0006                	c.slli	zero,0x1
     92e:	0100                	addi	s0,sp,128
     930:	5c00                	lw	s0,56(s0)
     932:	0698                	addi	a4,sp,832
     934:	0000                	unimp
     936:	07a4                	addi	s1,sp,968
     938:	0000                	unimp
     93a:	0001                	nop
     93c:	a462                	fsd	fs8,8(sp)
     93e:	a6000007          	0xa6000007
     942:	03000007          	0x3000007
     946:	8300                	0x8300
     948:	9f01                	0x9f01
     94a:	07a6                	slli	a5,a5,0x9
     94c:	0000                	unimp
     94e:	07c2                	slli	a5,a5,0x10
     950:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     952:	0004                	0x4
     954:	9f5c01f3          	0x9f5c01f3
     958:	07c2                	slli	a5,a5,0x10
     95a:	0000                	unimp
     95c:	0918                	addi	a4,sp,144
     95e:	0000                	unimp
     960:	0001                	nop
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     962:	0062                	c.slli	zero,0x18
     964:	0000                	unimp
     966:	0000                	unimp
     968:	0000                	unimp
     96a:	3400                	fld	fs0,40(s0)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96c:	0006                	c.slli	zero,0x1
     96e:	9800                	0x9800
     970:	0006                	c.slli	zero,0x1
     972:	0100                	addi	s0,sp,128
     974:	5d00                	lw	s0,56(a0)
     976:	0698                	addi	a4,sp,832
     978:	0000                	unimp
     97a:	07a2                	slli	a5,a5,0x8
     97c:	0000                	unimp
     97e:	0001                	nop
     980:	a259                	j	b06 <generate_keys+0x1ee>
     982:	c2000007          	0xc2000007
     986:	04000007          	0x4000007
     98a:	f300                	fsw	fs0,32(a4)
     98c:	5d01                	li	s10,-32
     98e:	c29f 0007 1800      	0x18000007c29f
     994:	0009                	c.nop	2
     996:	0100                	addi	s0,sp,128
     998:	5900                	lw	s0,48(a0)
	...
     9a2:	0798                	addi	a4,sp,960
     9a4:	0000                	unimp
     9a6:	07c2                	slli	a5,a5,0x10
     9a8:	0000                	unimp
     9aa:	0006                	c.slli	zero,0x1
     9ac:	00192803          	lw	a6,1(s2)
     9b0:	9f00                	0x9f00
	...
     9ba:	068c                	addi	a1,sp,832
     9bc:	0000                	unimp
     9be:	07a6                	slli	a5,a5,0x9
     9c0:	0000                	unimp
     9c2:	0001                	nop
     9c4:	0007a663          	0x7a663
     9c8:	c200                	sw	s0,0(a2)
     9ca:	06000007          	0x6000007
     9ce:	f300                	fsw	fs0,32(a4)
     9d0:	5c01                	li	s8,-32
     9d2:	1c31                	addi	s8,s8,-20
     9d4:	c29f 0007 1800      	0x18000007c29f
    int polyR[N+1];
     9da:	0009                	c.nop	2
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9dc:	0100                	addi	s0,sp,128
    int polyR[N+1];
     9de:	6300                	flw	fs0,0(a4)
	...
     9e8:	068c                	addi	a1,sp,832
     9ea:	0000                	unimp
    polyR[N] = 1;
     9ec:	0698                	addi	a4,sp,832
     9ee:	0000                	unimp
     9f0:	0002                	c.slli64	zero
     9f2:	9f30                	0x9f30
     9f4:	0698                	addi	a4,sp,832
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f6:	0000                	unimp
     9f8:	06aa                	slli	a3,a3,0xa
     9fa:	0000                	unimp
     9fc:	0001                	nop
     9fe:	ae5e                	fsd	fs7,280(sp)
     a00:	0006                	c.slli	zero,0x1
     a02:	bc00                	fsd	fs0,56(s0)
     a04:	0006                	c.slli	zero,0x1
     a06:	0100                	addi	s0,sp,128
     a08:	5e00                	lw	s0,56(a2)
     a0a:	06bc                	addi	a5,sp,840
     a0c:	0000                	unimp
     a0e:	06e0                	addi	s0,sp,844
     a10:	0000                	unimp
     a12:	7f7e0003          	lb	zero,2039(t3) # 6d7567f7 <_stack_start+0x6d7467f7>
     a16:	e09f 0006 e400      	0xe4000006e09f
     a1c:	0006                	c.slli	zero,0x1
     a1e:	0100                	addi	s0,sp,128
     a20:	5e00                	lw	s0,56(a2)
     a22:	06e4                	addi	s1,sp,844
     a24:	0000                	unimp
     a26:	06f4                	addi	a3,sp,844
     a28:	0000                	unimp
     a2a:	0001                	nop
     a2c:	f45d                	bnez	s0,9da <generate_keys+0xc2>
     a2e:	0006                	c.slli	zero,0x1
     a30:	f600                	fsw	fs0,40(a2)
     a32:	0006                	c.slli	zero,0x1
     a34:	0300                	addi	s0,sp,384
     a36:	7d00                	flw	fs0,56(a0)
     a38:	9f7f                	0x9f7f
     a3a:	06f6                	slli	a3,a3,0x1d
     a3c:	0000                	unimp
     a3e:	070e                	slli	a4,a4,0x3
     a40:	0000                	unimp
     a42:	0001                	nop
     a44:	165d                	addi	a2,a2,-9
     a46:	1a000007          	0x1a000007
     a4a:	01000007          	0x1000007
     a4e:	6200                	flw	fs0,0(a2)
     a50:	071a                	slli	a4,a4,0x6
     a52:	0000                	unimp
     a54:	0724                	addi	s1,sp,904
     a56:	0000                	unimp
     a58:	0001                	nop
    polyR[0] = -1;
     a5a:	265f 0007 2e00      	0x2e000007265f
    for(i = 1; i < N; ++i){
     a60:	01000007          	0x1000007
     a64:	5e00                	lw	s0,56(a2)
    for (i = N; i < 55; ++i ){
     a66:	0730                	addi	a2,sp,904
     a68:	0000                	unimp
     a6a:	0738                	addi	a4,sp,904
     a6c:	0000                	unimp
    for(i = 0; i < N; ++i){
     a6e:	0001                	nop
        random_keys[i] = f[i];
     a70:	405d                	c.li	zero,23
     a72:	42000007          	0x42000007
     a76:	02000007          	0x2000007
    for(i = 0; i < N; ++i){
     a7a:	3000                	fld	fs0,32(s0)
     a7c:	429f 0007 4a00      	0x4a000007429f
    for(i = N; i < (2*N); ++i){
     a82:	01000007          	0x1000007
     a86:	5f00                	lw	s0,56(a4)
        random_keys[i] = g[i-N];
     a88:	074a                	slli	a4,a4,0x12
     a8a:	0000                	unimp
     a8c:	0754                	addi	a3,sp,900
     a8e:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     a90:	0001                	nop
     a92:	5c5d                	li	s8,-9
    for(i = (2*N); i < (3*N); ++i){
     a94:	5e000007          	0x5e000007
     a98:	02000007          	0x2000007
    fp = ext_euclid(polyR, f, (N+1), p);
     a9c:	3000                	fld	fs0,32(s0)
     a9e:	5e9f 0007 6400      	0x640000075e9f
     aa4:	01000007          	0x1000007
        random_keys[i] = fp[i-(2*N)];
     aa8:	5f00                	lw	s0,56(a4)
     aaa:	0764                	addi	s1,sp,908
     aac:	0000                	unimp
     aae:	0772                	slli	a4,a4,0x1c
    for(i = (2*N); i < (3*N); ++i){
     ab0:	0000                	unimp
     ab2:	0001                	nop
    fq = ext_euclid(polyR, f, (N+1), q);
     ab4:	745e                	flw	fs0,244(sp)
     ab6:	88000007          	0x88000007
     aba:	01000007          	0x1000007
     abe:	5d00                	lw	s0,56(a0)
    for(i = (3*N); i < (4*N); ++i){
     ac0:	0794                	addi	a3,sp,960
     ac2:	0000                	unimp
     ac4:	07c2                	slli	a5,a5,0x10
     ac6:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     ac8:	0001                	nop
     aca:	c25e                	sw	s7,4(sp)
     acc:	d2000007          	0xd2000007
    for(i = (3*N); i < (4*N); ++i){
     ad0:	01000007          	0x1000007
    fg = polymult2(fq, N, g, N, 0);
     ad4:	5d00                	lw	s0,56(a0)
     ad6:	07d2                	slli	a5,a5,0x14
     ad8:	0000                	unimp
     ada:	07d8                	addi	a4,sp,964
     adc:	0000                	unimp
     ade:	7f7d0003          	lb	zero,2039(s10)
    for(i = 0; i < (2*N-1); ++i){
     ae2:	d89f 0007 da00      	0xda000007d89f
     ae8:	01000007          	0x1000007
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     aec:	5d00                	lw	s0,56(a0)
     aee:	07da                	slli	a5,a5,0x16
     af0:	0000                	unimp
     af2:	07e4                	addi	s1,sp,972
    for(i = (4*N); i < (5*N); ++i){
     af4:	0000                	unimp
     af6:	0001                	nop
     af8:	e45f 0007 ea00      	0xea000007e45f
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     afe:	03000007          	0x3000007
     b02:	7f00                	flw	fs0,56(a4)
     b04:	9f7f                	0x9f7f
    for(i = (4*N); i < (5*N); ++i){
     b06:	07ea                	slli	a5,a5,0x1a
     b08:	0000                	unimp
     b0a:	07ec                	addi	a1,sp,972
    for(i = (5*N); i < (6*N+1); ++i){
     b0c:	0000                	unimp
     b0e:	0001                	nop
        random_keys[i] = polyR[i-(5*N)];
     b10:	ec5f 0007 fe00      	0xfe000007ec5f
     b16:	01000007          	0x1000007
    for(i = (5*N); i < (6*N+1); ++i){
     b1a:	5e00                	lw	s0,56(a2)
     b1c:	07fe                	slli	a5,a5,0x1f
     b1e:	0000                	unimp
     b20:	0802                	c.slli64	a6
     b22:	0000                	unimp
}
     b24:	7f7e0003          	lb	zero,2039(t3)
     b28:	029f 0008 0600      	0x6000008029f
     b2e:	0008                	0x8
     b30:	0100                	addi	s0,sp,128
     b32:	5e00                	lw	s0,56(a2)
     b34:	0806                	slli	a6,a6,0x1
     b36:	0000                	unimp
     b38:	0816                	slli	a6,a6,0x5
     b3a:	0000                	unimp
     b3c:	0001                	nop
     b3e:	165d                	addi	a2,a2,-9
     b40:	0008                	0x8
     b42:	1c00                	addi	s0,sp,560
     b44:	0008                	0x8
     b46:	0300                	addi	s0,sp,384
     b48:	7d00                	flw	fs0,56(a0)
     b4a:	9f7f                	0x9f7f
     b4c:	081c                	addi	a5,sp,16
     b4e:	0000                	unimp
     b50:	081e                	slli	a6,a6,0x7
     b52:	0000                	unimp
     b54:	0001                	nop
     b56:	1e5d                	addi	t3,t3,-9
     b58:	0008                	0x8
     b5a:	2c00                	fld	fs0,24(s0)
     b5c:	0008                	0x8
     b5e:	0100                	addi	s0,sp,128
     b60:	5f00                	lw	s0,56(a4)
     b62:	082c                	addi	a1,sp,24
        polyR[i] = 0;
     b64:	0000                	unimp
     b66:	082e                	slli	a6,a6,0xb
     b68:	0000                	unimp
     b6a:	7f7f0003          	lb	zero,2039(t5) # fffe07f7 <_stack_start+0xfffd07f7>
    for(i = 1; i < N; ++i){
     b6e:	2e9f 0008 3000      	0x300000082e9f
        f[i] = 0;
     b74:	0008                	0x8
     b76:	0100                	addi	s0,sp,128
     b78:	5f00                	lw	s0,56(a4)
     b7a:	0830                	addi	a2,sp,24
     b7c:	0000                	unimp
     b7e:	0840                	addi	s0,sp,20
        g[i] = 0;
     b80:	0000                	unimp
     b82:	0001                	nop
     b84:	405d                	c.li	zero,23
     b86:	0008                	0x8
     b88:	4600                	lw	s0,8(a2)
    for (i = N; i < 55; ++i ){
     b8a:	0008                	0x8
     b8c:	0300                	addi	s0,sp,384
        random_keys[i] = f[i];
     b8e:	7d00                	flw	fs0,56(a0)
     b90:	9f7f                	0x9f7f
     b92:	0846                	slli	a6,a6,0x11
     b94:	0000                	unimp
     b96:	0848                	addi	a0,sp,20
     b98:	0000                	unimp
     b9a:	0001                	nop
     b9c:	485d                	li	a6,23
    for(i = 0; i < N; ++i){
     b9e:	0008                	0x8
        random_keys[i] = f[i];
     ba0:	5600                	lw	s0,40(a2)
    for(i = 0; i < N; ++i){
     ba2:	0008                	0x8
        random_keys[i] = g[i-N];
     ba4:	0100                	addi	s0,sp,128
     ba6:	5f00                	lw	s0,56(a4)
     ba8:	0856                	slli	a6,a6,0x15
     baa:	0000                	unimp
     bac:	0858                	addi	a4,sp,20
    for(i = N; i < (2*N); ++i){
     bae:	0000                	unimp
     bb0:	7f7f0003          	lb	zero,2039(t5)
        random_keys[i] = fp[i-(2*N)];
     bb4:	589f 0008 5a00      	0x5a000008589f
     bba:	0008                	0x8
     bbc:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     bbe:	5f00                	lw	s0,56(a4)
     bc0:	085a                	slli	a6,a6,0x16
     bc2:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     bc4:	086e                	slli	a6,a6,0x1b
     bc6:	0000                	unimp
     bc8:	0001                	nop
     bca:	6e5e                	flw	ft8,212(sp)
     bcc:	0008                	0x8
     bce:	7400                	flw	fs0,40(s0)
     bd0:	0008                	0x8
    for(i = (3*N); i < (4*N); ++i){
     bd2:	0300                	addi	s0,sp,384
        random_keys[i] = fq[i-(3*N)];
     bd4:	7e00                	flw	fs0,56(a2)
    for(i = (3*N); i < (4*N); ++i){
     bd6:	9f7f                	0x9f7f
        fg[i] = fg[i]*p;
     bd8:	0874                	addi	a3,sp,28
    for(i = 0; i < (2*N-1); ++i){
     bda:	0000                	unimp
     bdc:	088e                	slli	a7,a7,0x3
        fg[i] = fg[i]*p;
     bde:	0000                	unimp
     be0:	0001                	nop
     be2:	8e5e                	mv	t3,s7
     be4:	0008                	0x8
    for(i = 0; i < (2*N-1); ++i){
     be6:	9200                	0x9200
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     be8:	0008                	0x8
     bea:	0300                	addi	s0,sp,384
     bec:	7e00                	flw	fs0,56(a2)
     bee:	9f7f                	0x9f7f
     bf0:	0892                	slli	a7,a7,0x4
     bf2:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     bf4:	0896                	slli	a7,a7,0x5
     bf6:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     bf8:	0001                	nop
     bfa:	965e                	add	a2,a2,s7
     bfc:	0008                	0x8
     bfe:	a600                	fsd	fs0,8(a2)
     c00:	0008                	0x8
     c02:	0100                	addi	s0,sp,128
     c04:	5d00                	lw	s0,56(a0)
    for(i = (5*N); i < (6*N+1); ++i){
     c06:	08a6                	slli	a7,a7,0x9
        random_keys[i] = polyR[i-(5*N)];
     c08:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     c0a:	08ac                	addi	a1,sp,88
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c0c:	0000                	unimp
     c0e:	7f7d0003          	lb	zero,2039(s10)
     c12:	ac9f 0008 ba00      	0xba000008ac9f
     c18:	0008                	0x8
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1a:	0100                	addi	s0,sp,128
     c1c:	5d00                	lw	s0,56(a0)
     c1e:	08ba                	slli	a7,a7,0xe
     c20:	0000                	unimp
     c22:	08ec                	addi	a1,sp,92
     c24:	0000                	unimp
     c26:	7f7d0003          	lb	zero,2039(s10)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c2a:	ec9f 0008 f000      	0xf0000008ec9f
     c30:	0008                	0x8
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c32:	0100                	addi	s0,sp,128
    temp = polymult(public_key,N,random_val,48,q,0);
     c34:	5d00                	lw	s0,56(a0)
     c36:	0904                	addi	s1,sp,144
     c38:	0000                	unimp
     c3a:	0908                	addi	a0,sp,144
     c3c:	0000                	unimp
     c3e:	0001                	nop
     c40:	085e                	slli	a6,a6,0x17
     c42:	0009                	c.nop	2
     c44:	1600                	addi	s0,sp,800
     c46:	0009                	c.nop	2
    for(i = 0; i < 48; ++i){
     c48:	0300                	addi	s0,sp,384
     c4a:	7e00                	flw	fs0,56(a2)
        temp[i] = temp[i] + message[i];
     c4c:	9f7f                	0x9f7f
     c4e:	0916                	slli	s2,s2,0x5
     c50:	0000                	unimp
     c52:	0918                	addi	a4,sp,144
     c54:	0000                	unimp
     c56:	0001                	nop
     c58:	005e                	c.slli	zero,0x17
     c5a:	0000                	unimp
     c5c:	0000                	unimp
    for(i = 0; i < 48; ++i){
     c5e:	0000                	unimp
     c60:	8800                	0x8800
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c62:	c2000007          	0xc2000007
     c66:	01000007          	0x1000007
     c6a:	5f00                	lw	s0,56(a4)
     c6c:	08f0                	addi	a2,sp,92
     c6e:	0000                	unimp
     c70:	0918                	addi	a4,sp,144
     c72:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     c74:	0001                	nop
     c76:	005f 0000 0000      	0x5f
     c7c:	0000                	unimp
     c7e:	8a00                	0x8a00
}
     c80:	0006                	c.slli	zero,0x1
     c82:	b400                	fsd	fs0,40(s0)
     c84:	02000007          	0x2000007
     c88:	8a00                	0x8a00
     c8a:	c200                	sw	s0,0(a2)
     c8c:	18000007          	0x18000007
        CT[i-(2*N)] = CT[i];
     c90:	0009                	c.nop	2
     c92:	0200                	addi	s0,sp,256
     c94:	8a00                	0x8a00
	...
     c9e:	8a00                	0x8a00
    for(i = (2*N); i < (3*N); ++i){
     ca0:	0006                	c.slli	zero,0x1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca2:	b600                	fsd	fs0,40(a2)
     ca4:	02000007          	0x2000007
     ca8:	8b00                	0x8b00
    for(i = (2*N); i < ((2*N)+N); ++i){
     caa:	c200                	sw	s0,0(a2)
     cac:	18000007          	0x18000007
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb0:	0009                	c.nop	2
     cb2:	0200                	addi	s0,sp,256
     cb4:	8b00                	0x8b00
	...
     cbe:	8a00                	0x8a00
     cc0:	0006                	c.slli	zero,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc2:	ac00                	fsd	fs0,24(s0)
     cc4:	02000007          	0x2000007
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc8:	8600                	0x8600
     cca:	ac00                	fsd	fs0,24(s0)
     ccc:	b6000007          	0xb6000007
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd0:	0d000007          	0xd000007
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd4:	8b00                	0x8b00
     cd6:	f300                	fsw	fs0,32(a4)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd8:	5c01                	li	s8,-32
     cda:	2432                	fld	fs0,264(sp)
     cdc:	f0090f23          	sb	zero,-226(s2)
     ce0:	1c1a                	slli	s8,s8,0x26
     ce2:	07c2                	slli	a5,a5,0x10
     ce4:	0000                	unimp
     ce6:	0918                	addi	a4,sp,144
     ce8:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     cea:	0002                	c.slli64	zero
     cec:	0086                	slli	ra,ra,0x1
	...
        if(a2[i] <= q/2)
     cf6:	068a                	slli	a3,a3,0x2
     cf8:	0000                	unimp
    for (i = 0; i < N; ++i){
     cfa:	07a8                	addi	a0,sp,968
     cfc:	0000                	unimp
     cfe:	0002                	c.slli64	zero
    c = polymult2(secret_key_fp,N,a2,N,0);
     d00:	0084                	addi	s1,sp,64
     d02:	07a8                	addi	a0,sp,968
     d04:	0000                	unimp
     d06:	07ac                	addi	a1,sp,968
     d08:	0000                	unimp
     d0a:	000d                	c.nop	3
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d0c:	0086                	slli	ra,ra,0x1
     d0e:	325c01f3          	0x325c01f3
     d12:	2324                	fld	fs1,64(a4)
     d14:	1af0090f          	0x1af0090f
    for(i = (2*N); i < ((2*N)+N); ++i){
     d18:	ac1c                	fsd	fa5,24(s0)
     d1a:	b6000007          	0xb6000007
}
     d1e:	0f000007          	0xf000007
     d22:	8b00                	0x8b00
     d24:	f300                	fsw	fs0,32(a4)
     d26:	5c01                	li	s8,-32
     d28:	2432                	fld	fs0,264(sp)
     d2a:	f0090f23          	sb	zero,-226(s2)
     d2e:	311a                	fld	ft2,416(sp)
     d30:	1c24                	addi	s1,sp,568
     d32:	07c2                	slli	a5,a5,0x10
        a2[i-(2*N)] = a2[i];
     d34:	0000                	unimp
     d36:	0918                	addi	a4,sp,144
     d38:	0000                	unimp
     d3a:	0002                	c.slli64	zero
    for(i = (2*N); i < ((2*N)+N); ++i){
     d3c:	0084                	addi	s1,sp,64
	...
        if(a2[i] <= q/2)
     d46:	068a                	slli	a3,a3,0x2
     d48:	0000                	unimp
     d4a:	07ae                	slli	a5,a5,0xb
            a2[i] = (-1)*(q-a2[i]);
     d4c:	0000                	unimp
     d4e:	0002                	c.slli64	zero
     d50:	07ae0087          	0x7ae0087
    for (i = 0; i < N; ++i){
     d54:	0000                	unimp
     d56:	07b6                	slli	a5,a5,0xd
        c2[i-(2*N)] = c2[i];
     d58:	0000                	unimp
     d5a:	008b000f          	0x8b000f
     d5e:	325c01f3          	0x325c01f3
    for(i = (2*N); i < ((2*N)+N); ++i){
     d62:	2324                	fld	fs1,64(a4)
        c2[i-(2*N)] = c2[i];
     d64:	1af0090f          	0x1af0090f
    for(i = (2*N); i < ((2*N)+N); ++i){
     d68:	c21c1e33          	0xc21c1e33
  jal x0, default_exc_handler
     d6c:	18000007          	0x18000007
  mv  x1, x0
     d70:	0009                	c.nop	2
  mv  x2, x1
     d72:	0200                	addi	s0,sp,256
  mv  x3, x1
     d74:	8700                	0x8700
	...
  mv  x8, x1
     d7e:	8a00                	0x8a00
  mv  x9, x1
     d80:	0006                	c.slli	zero,0x1
  mv x10, x1
     d82:	aa00                	fsd	fs0,16(a2)
  mv x11, x1
     d84:	02000007          	0x2000007
  mv x13, x1
     d88:	8500                	0x8500
  mv x14, x1
     d8a:	aa00                	fsd	fs0,16(a2)
  mv x15, x1
     d8c:	ae000007          	0xae000007
  mv x17, x1
     d90:	0d000007          	0xd000007
  mv x19, x1
     d94:	8700                	0x8700
  mv x20, x1
     d96:	f300                	fsw	fs0,32(a4)
  mv x21, x1
     d98:	5c01                	li	s8,-32
  mv x22, x1
     d9a:	2432                	fld	fs0,264(sp)
  mv x23, x1
     d9c:	f0090f23          	sb	zero,-226(s2)
  mv x25, x1
     da0:	1c1a                	slli	s8,s8,0x26
  mv x26, x1
     da2:	07ae                	slli	a5,a5,0xb
  mv x27, x1
     da4:	0000                	unimp
  mv x28, x1
     da6:	07b6                	slli	a5,a5,0xd
  mv x29, x1
     da8:	0000                	unimp
  mv x30, x1
     daa:	008b000f          	0x8b000f
  la   x2, _stack_start
     dae:	325c01f3          	0x325c01f3
     db2:	2324                	fld	fs1,64(a4)
     db4:	1af0090f          	0x1af0090f
  la x26, _bss_start
     db8:	2432                	fld	fs0,264(sp)
     dba:	c21c                	sw	a5,0(a2)
     dbc:	18000007          	0x18000007
  la x27, _bss_end
     dc0:	0009                	c.nop	2
     dc2:	0200                	addi	s0,sp,256
     dc4:	8500                	0x8500
	...
  addi x26, x26, 4
     dce:	8c00                	0x8c00
  ble x26, x27, zero_loop
     dd0:	0006                	c.slli	zero,0x1
     dd2:	9c00                	0x9c00
  addi x10, x0, 0
     dd4:	02000007          	0x2000007
  addi x11, x0, 0
     dd8:	7200                	flw	fs0,32(a2)
     dda:	9c00                	0x9c00
  jal x1, main
     ddc:	b2000007          	0xb2000007
     de0:	02000007          	0x2000007
     de4:	8900                	0x8900
     de6:	b200                	fsd	fs0,32(a2)
     de8:	b6000007          	0xb6000007
     dec:	0f000007          	0xf000007
     df0:	8b00                	0x8b00
     df2:	f300                	fsw	fs0,32(a4)
     df4:	5c01                	li	s8,-32
     df6:	2432                	fld	fs0,264(sp)
     df8:	f0090f23          	sb	zero,-226(s2)
     dfc:	351a                	fld	fa0,416(sp)
     dfe:	1c1e                	slli	s8,s8,0x27
     e00:	07c2                	slli	a5,a5,0x10
     e02:	0000                	unimp
     e04:	0918                	addi	a4,sp,144
     e06:	0000                	unimp
     e08:	0002                	c.slli64	zero
     e0a:	0072                	c.slli	zero,0x1c
	...
     e14:	0716                	slli	a4,a4,0x5
     e16:	0000                	unimp
     e18:	073e                	slli	a4,a4,0xf
     e1a:	0000                	unimp
     e1c:	0001                	nop
     e1e:	da5a                	sw	s6,52(sp)
     e20:	1e000007          	0x1e000007
     e24:	0008                	0x8
     e26:	0100                	addi	s0,sp,128
     e28:	5a00                	lw	s0,48(a2)
	...
     e32:	0740                	addi	s0,sp,900
     e34:	0000                	unimp
     e36:	075a                	slli	a4,a4,0x16
     e38:	0000                	unimp
     e3a:	0001                	nop
     e3c:	1e5a                	slli	t3,t3,0x36
     e3e:	0008                	0x8
     e40:	4800                	lw	s0,16(s0)
     e42:	0008                	0x8
     e44:	0100                	addi	s0,sp,128
     e46:	5a00                	lw	s0,48(a2)
	...
     e50:	075c                	addi	a5,sp,900
     e52:	0000                	unimp
     e54:	077e                	slli	a4,a4,0x1f
     e56:	0000                	unimp
     e58:	0001                	nop
     e5a:	485a                	lw	a6,148(sp)
     e5c:	0008                	0x8
     e5e:	ae00                	fsd	fs0,24(a2)
     e60:	0008                	0x8
     e62:	0100                	addi	s0,sp,128
     e64:	5a00                	lw	s0,48(a2)
	...
     e6e:	068c                	addi	a1,sp,832
     e70:	0000                	unimp
     e72:	06aa                	slli	a3,a3,0xa
     e74:	0000                	unimp
     e76:	0002                	c.slli64	zero
     e78:	9f31                	0x9f31
     e7a:	06ae                	slli	a3,a3,0xb
     e7c:	0000                	unimp
     e7e:	06e4                	addi	s1,sp,844
     e80:	0000                	unimp
     e82:	0002                	c.slli64	zero
     e84:	9f31                	0x9f31
     e86:	077e                	slli	a4,a4,0x1f
     e88:	0000                	unimp
     e8a:	0794                	addi	a3,sp,960
     e8c:	0000                	unimp
     e8e:	0001                	nop
     e90:	ae5e                	fsd	fs7,280(sp)
     e92:	0008                	0x8
     e94:	d800                	sw	s0,48(s0)
     e96:	0008                	0x8
     e98:	0100                	addi	s0,sp,128
     e9a:	5e00                	lw	s0,56(a2)
     e9c:	08ec                	addi	a1,sp,92
     e9e:	0000                	unimp
     ea0:	0904                	addi	s1,sp,144
     ea2:	0000                	unimp
     ea4:	0001                	nop
     ea6:	005e                	c.slli	zero,0x17
     ea8:	0000                	unimp
     eaa:	0000                	unimp
     eac:	0000                	unimp
     eae:	8a00                	0x8a00
     eb0:	0006                	c.slli	zero,0x1
     eb2:	a600                	fsd	fs0,8(a2)
     eb4:	01000007          	0x1000007
     eb8:	6300                	flw	fs0,0(a4)
     eba:	07a6                	slli	a5,a5,0x9
     ebc:	0000                	unimp
     ebe:	07c2                	slli	a5,a5,0x10
     ec0:	0000                	unimp
     ec2:	0006                	c.slli	zero,0x1
     ec4:	315c01f3          	0x315c01f3
     ec8:	9f1c                	0x9f1c
     eca:	07c2                	slli	a5,a5,0x10
     ecc:	0000                	unimp
     ece:	0918                	addi	a4,sp,144
     ed0:	0000                	unimp
     ed2:	0001                	nop
     ed4:	00000063          	beqz	zero,ed4 <memset+0x16>
     ed8:	0000                	unimp
     eda:	0000                	unimp
     edc:	8a00                	0x8a00
     ede:	0006                	c.slli	zero,0x1
     ee0:	a600                	fsd	fs0,8(a2)
     ee2:	01000007          	0x1000007
     ee6:	6300                	flw	fs0,0(a4)
     ee8:	07a6                	slli	a5,a5,0x9
     eea:	0000                	unimp
     eec:	07c2                	slli	a5,a5,0x10
     eee:	0000                	unimp
     ef0:	0006                	c.slli	zero,0x1
     ef2:	315c01f3          	0x315c01f3
     ef6:	9f1c                	0x9f1c
     ef8:	07c2                	slli	a5,a5,0x10
     efa:	0000                	unimp
     efc:	0918                	addi	a4,sp,144
     efe:	0000                	unimp
     f00:	0001                	nop
     f02:	00000063          	beqz	zero,f02 <memset+0x44>
     f06:	0000                	unimp
     f08:	0000                	unimp
     f0a:	8a00                	0x8a00
     f0c:	0006                	c.slli	zero,0x1
     f0e:	a600                	fsd	fs0,8(a2)
     f10:	01000007          	0x1000007
     f14:	6300                	flw	fs0,0(a4)
     f16:	07a6                	slli	a5,a5,0x9
     f18:	0000                	unimp
     f1a:	07c2                	slli	a5,a5,0x10
     f1c:	0000                	unimp
     f1e:	0006                	c.slli	zero,0x1
     f20:	315c01f3          	0x315c01f3
     f24:	9f1c                	0x9f1c
     f26:	07c2                	slli	a5,a5,0x10
     f28:	0000                	unimp
     f2a:	0918                	addi	a4,sp,144
     f2c:	0000                	unimp
     f2e:	0001                	nop
     f30:	00000063          	beqz	zero,f30 <memset+0x72>
     f34:	0000                	unimp
     f36:	0000                	unimp
     f38:	8a00                	0x8a00
     f3a:	0006                	c.slli	zero,0x1
     f3c:	a600                	fsd	fs0,8(a2)
     f3e:	01000007          	0x1000007
     f42:	6300                	flw	fs0,0(a4)
     f44:	07a6                	slli	a5,a5,0x9
     f46:	0000                	unimp
     f48:	07c2                	slli	a5,a5,0x10
     f4a:	0000                	unimp
     f4c:	0006                	c.slli	zero,0x1
     f4e:	315c01f3          	0x315c01f3
     f52:	9f1c                	0x9f1c
     f54:	07c2                	slli	a5,a5,0x10
     f56:	0000                	unimp
     f58:	0918                	addi	a4,sp,144
     f5a:	0000                	unimp
     f5c:	0001                	nop
     f5e:	00000063          	beqz	zero,f5e <memset+0xa0>
     f62:	0000                	unimp
     f64:	0000                	unimp
int main(){
     f66:	8a00                	0x8a00
     f68:	0006                	c.slli	zero,0x1
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f6a:	a600                	fsd	fs0,8(a2)
     f6c:	01000007          	0x1000007
     f70:	6300                	flw	fs0,0(a4)
     f72:	07a6                	slli	a5,a5,0x9
     f74:	0000                	unimp
     f76:	07c2                	slli	a5,a5,0x10
int main(){
     f78:	0000                	unimp
     f7a:	0006                	c.slli	zero,0x1
     f7c:	315c01f3          	0x315c01f3
     f80:	9f1c                	0x9f1c
     f82:	07c2                	slli	a5,a5,0x10
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f84:	0000                	unimp
    resultkon[0] = 0xA;
     f86:	0918                	addi	a4,sp,144
     f88:	0000                	unimp
     f8a:	0001                	nop
     f8c:	00000063          	beqz	zero,f8c <main+0x26>
     f90:	0000                	unimp
    *var = resultkon[0];
     f92:	0000                	unimp
     f94:	8a00                	0x8a00
    keys = generate_keys(N, p, q);
     f96:	0006                	c.slli	zero,0x1
     f98:	a600                	fsd	fs0,8(a2)
    *var = resultkon[0];
     f9a:	01000007          	0x1000007
     f9e:	6300                	flw	fs0,0(a4)
     fa0:	07a6                	slli	a5,a5,0x9
    keys = generate_keys(N, p, q);
     fa2:	0000                	unimp
     fa4:	07c2                	slli	a5,a5,0x10
     fa6:	0000                	unimp
     fa8:	0006                	c.slli	zero,0x1
     faa:	315c01f3          	0x315c01f3
    for(i = 0; i < N; ++i){
     fae:	9f1c                	0x9f1c
        secret_key_f[i] = keys[i];
     fb0:	07c2                	slli	a5,a5,0x10
     fb2:	0000                	unimp
     fb4:	0918                	addi	a4,sp,144
     fb6:	0000                	unimp
     fb8:	0001                	nop
     fba:	00000063          	beqz	zero,fba <main+0x54>
    for(i = 0; i < N; ++i){
     fbe:	0000                	unimp
     fc0:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     fc2:	8a00                	0x8a00
     fc4:	0006                	c.slli	zero,0x1
     fc6:	a600                	fsd	fs0,8(a2)
     fc8:	01000007          	0x1000007
     fcc:	6300                	flw	fs0,0(a4)
        secret_key_fp[i-(2*N)] = keys[i];
     fce:	07a6                	slli	a5,a5,0x9
     fd0:	0000                	unimp
     fd2:	07c2                	slli	a5,a5,0x10
     fd4:	0000                	unimp
     fd6:	0006                	c.slli	zero,0x1
    for(i = (2*N); i < (3*N); ++i){
     fd8:	315c01f3          	0x315c01f3
    for(i = (3*N); i < (4*N); ++i){
     fdc:	9f1c                	0x9f1c
     fde:	07c2                	slli	a5,a5,0x10
     fe0:	0000                	unimp
     fe2:	0918                	addi	a4,sp,144
     fe4:	0000                	unimp
     fe6:	0001                	nop
        public_key[i-(4*N)] = keys[i];
     fe8:	00000063          	beqz	zero,fe8 <main+0x82>
     fec:	0000                	unimp
     fee:	0000                	unimp
     ff0:	e200                	fsw	fs0,0(a2)
    for(i = (4*N); i < (5*N); ++i){
     ff2:	e6000003          	lb	zero,-416(zero) # fffffe60 <_stack_start+0xfffefe60>
     ff6:	0004                	0x4
     ff8:	0100                	addi	s0,sp,128
     ffa:	5a00                	lw	s0,48(a2)
     ffc:	04e6                	slli	s1,s1,0x19
        ring_poly[i-(5*N)] = keys[i];
     ffe:	0000                	unimp
    1000:	0634                	addi	a3,sp,776
    1002:	0000                	unimp
    1004:	0004                	0x4
    1006:	9f5a01f3          	0x9f5a01f3
	...
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1012:	03e2                	slli	t2,t2,0x18
    1014:	0000                	unimp
    1016:	04e6                	slli	s1,s1,0x19
    1018:	0000                	unimp
    101a:	0001                	nop
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    101c:	0004e65b          	0x4e65b
    1020:	0400                	addi	s0,sp,512
    1022:	0005                	c.nop	1
    1024:	0100                	addi	s0,sp,128
    1026:	5900                	lw	s0,48(a0)
    1028:	0504                	addi	s1,sp,640
    102a:	0000                	unimp
    102c:	0522                	slli	a0,a0,0x8
    102e:	0000                	unimp
            resultkon[0] = 0xDEDEDEDE;
    1030:	01890003          	lb	zero,24(s2)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1034:	229f 0005 3200      	0x32000005229f
	    *var = resultkon[0];
    103a:	0005                	c.nop	1
    for(i = 0; i < 32; ++i){
    103c:	0400                	addi	s0,sp,512
    103e:	f300                	fsw	fs0,32(a4)
        if(!(message[i] == Dec_Message[i])){
    1040:	5b01                	li	s6,-32
    1042:	329f 0005 2200      	0x22000005329f
    1048:	0006                	c.slli	zero,0x1
    104a:	0100                	addi	s0,sp,128
    104c:	5900                	lw	s0,48(a0)
    104e:	0622                	slli	a2,a2,0x8
            resultkon[0] = 0xBABABABA;
    1050:	0000                	unimp
    1052:	0634                	addi	a3,sp,776
    1054:	0000                	unimp
    1056:	01890003          	lb	zero,24(s2)
 	    *var = resultkon[0];
    105a:	009f 0000 0000      	0x9f
    1060:	0000                	unimp
    1062:	e200                	fsw	fs0,0(a2)
    1064:	60000003          	lb	zero,1536(zero) # 600 <polydiv+0x21e>
}
    1068:	0004                	0x4
    106a:	0100                	addi	s0,sp,128
    106c:	5c00                	lw	s0,56(s0)
    106e:	0460                	addi	s0,sp,524
    1070:	0000                	unimp
    1072:	0468                	addi	a0,sp,524
    1074:	0000                	unimp
    1076:	0004                	0x4
    1078:	9f5c01f3          	0x9f5c01f3
	    *var = resultkon[0];
    107c:	0468                	addi	a0,sp,524
    107e:	0000                	unimp
    1080:	04c8                	addi	a0,sp,580
    1082:	0000                	unimp
    1084:	0001                	nop
    1086:	c85c                	sw	a5,20(s0)
    for(i = 0; i < 32; ++i){
    1088:	0004                	0x4
    108a:	3400                	fld	fs0,40(s0)
    108c:	0006                	c.slli	zero,0x1
    108e:	0400                	addi	s0,sp,512
    1090:	f300                	fsw	fs0,32(a4)
    1092:	5c01                	li	s8,-32
    1094:	009f 0000 0000      	0x9f
    109a:	0000                	unimp
    109c:	e200                	fsw	fs0,0(a2)
    109e:	3c000003          	lb	zero,960(zero) # 3c0 <polymult2+0x14e>
    10a2:	0004                	0x4
    10a4:	0100                	addi	s0,sp,128
    10a6:	5d00                	lw	s0,56(a0)
    10a8:	043c                	addi	a5,sp,520
    10aa:	0000                	unimp
    10ac:	0516                	slli	a0,a0,0x5
    10ae:	0000                	unimp
    10b0:	0001                	nop
    10b2:	00051663          	bnez	a0,10be <_endtext+0x1e>
    10b6:	3200                	fld	fs0,32(a2)
    10b8:	0005                	c.nop	1
    10ba:	0400                	addi	s0,sp,512
    10bc:	f300                	fsw	fs0,32(a4)
    10be:	5d01                	li	s10,-32
    10c0:	329f 0005 3400      	0x34000005329f
    10c6:	0006                	c.slli	zero,0x1
    10c8:	0100                	addi	s0,sp,128
    10ca:	6300                	flw	fs0,0(a4)
	...
    10d4:	03e2                	slli	t2,t2,0x18
    10d6:	0000                	unimp
    10d8:	043a                	slli	s0,s0,0xe
    10da:	0000                	unimp
    10dc:	0001                	nop
    10de:	3a5e                	fld	fs4,496(sp)
    10e0:	0004                	0x4
    10e2:	1400                	addi	s0,sp,544
    10e4:	0005                	c.nop	1
    10e6:	0100                	addi	s0,sp,128
    10e8:	6200                	flw	fs0,0(a2)
    10ea:	0514                	addi	a3,sp,640
    10ec:	0000                	unimp
    10ee:	0532                	slli	a0,a0,0xc
    10f0:	0000                	unimp
    10f2:	0004                	0x4
    10f4:	9f5e01f3          	0x9f5e01f3
    10f8:	0532                	slli	a0,a0,0xc
    10fa:	0000                	unimp
    10fc:	0634                	addi	a3,sp,776
    10fe:	0000                	unimp
    1100:	0001                	nop
    1102:	0062                	c.slli	zero,0x18
    1104:	0000                	unimp
    1106:	0000                	unimp
    1108:	0000                	unimp
    110a:	6000                	flw	fs0,0(s0)
    110c:	0004                	0x4
    110e:	6800                	flw	fs0,16(s0)
    1110:	0004                	0x4
    1112:	0100                	addi	s0,sp,128
    1114:	6600                	flw	fs0,8(a2)
    1116:	04c8                	addi	a0,sp,580
    1118:	0000                	unimp
    111a:	051c                	addi	a5,sp,640
    111c:	0000                	unimp
    111e:	0001                	nop
    1120:	3266                	fld	ft4,120(sp)
    1122:	0005                	c.nop	1
    1124:	3400                	fld	fs0,40(s0)
    1126:	0006                	c.slli	zero,0x1
    1128:	0100                	addi	s0,sp,128
    112a:	6600                	flw	fs0,8(a2)
	...
    1134:	04e6                	slli	s1,s1,0x19
    1136:	0000                	unimp
    1138:	04ec                	addi	a1,sp,588
    113a:	0000                	unimp
    113c:	0001                	nop
    113e:	325f 0005 3a00      	0x3a000005325f
    1144:	0005                	c.nop	1
    1146:	0100                	addi	s0,sp,128
    1148:	5f00                	lw	s0,56(a4)
	...
    1152:	0436                	slli	s0,s0,0xd
    1154:	0000                	unimp
    1156:	043c                	addi	a5,sp,520
    1158:	0000                	unimp
    115a:	0002                	c.slli64	zero
    115c:	9f30                	0x9f30
    115e:	043c                	addi	a5,sp,520
    1160:	0000                	unimp
    1162:	044a                	slli	s0,s0,0x12
    1164:	0000                	unimp
    1166:	0001                	nop
    1168:	4a5d                	li	s4,23
    116a:	0004                	0x4
    116c:	4e00                	lw	s0,24(a2)
    116e:	0004                	0x4
    1170:	0100                	addi	s0,sp,128
    1172:	5f00                	lw	s0,56(a4)
    1174:	044e                	slli	s0,s0,0x13
    1176:	0000                	unimp
    1178:	0468                	addi	a0,sp,524
    117a:	0000                	unimp
    117c:	0001                	nop
    117e:	6864                	flw	fs1,84(s0)
    1180:	0004                	0x4
    1182:	7e00                	flw	fs0,56(a2)
    1184:	0004                	0x4
    1186:	0100                	addi	s0,sp,128
    1188:	5d00                	lw	s0,56(a0)
    118a:	047e                	slli	s0,s0,0x1f
    118c:	0000                	unimp
    118e:	0484                	addi	s1,sp,576
    1190:	0000                	unimp
    1192:	7f7d0003          	lb	zero,2039(s10)
    1196:	849f 0004 a000      	0xa0000004849f
    119c:	0004                	0x4
    119e:	0100                	addi	s0,sp,128
    11a0:	5d00                	lw	s0,56(a0)
    11a2:	04a0                	addi	s0,sp,584
    11a4:	0000                	unimp
    11a6:	04a6                	slli	s1,s1,0x9
    11a8:	0000                	unimp
    11aa:	7f7d0003          	lb	zero,2039(s10)
    11ae:	a69f 0004 ac00      	0xac000004a69f
    11b4:	0004                	0x4
    11b6:	0100                	addi	s0,sp,128
    11b8:	5d00                	lw	s0,56(a0)
    11ba:	04ac                	addi	a1,sp,584
    11bc:	0000                	unimp
    11be:	04c2                	slli	s1,s1,0x10
    11c0:	0000                	unimp
    11c2:	0001                	nop
    11c4:	c25f 0004 d600      	0xd6000004c25f
    11ca:	0004                	0x4
    11cc:	0100                	addi	s0,sp,128
    11ce:	6400                	flw	fs0,8(s0)
    11d0:	04d6                	slli	s1,s1,0x15
    11d2:	0000                	unimp
    11d4:	04e6                	slli	s1,s1,0x19
    11d6:	0000                	unimp
    11d8:	0001                	nop
    11da:	f45f 0004 0400      	0x4000004f45f
    11e0:	0005                	c.nop	1
    11e2:	0100                	addi	s0,sp,128
    11e4:	5f00                	lw	s0,56(a4)
    11e6:	0504                	addi	s1,sp,640
    11e8:	0000                	unimp
    11ea:	0512                	slli	a0,a0,0x4
    11ec:	0000                	unimp
    11ee:	0001                	nop
    11f0:	4059                	c.li	zero,22
    11f2:	0005                	c.nop	1
    11f4:	4400                	lw	s0,8(s0)
    11f6:	0005                	c.nop	1
    11f8:	0200                	addi	s0,sp,256
    11fa:	3000                	fld	fs0,32(s0)
    11fc:	449f 0005 4a00      	0x4a000005449f
    1202:	0005                	c.nop	1
    1204:	0100                	addi	s0,sp,128
    1206:	5e00                	lw	s0,56(a2)
    1208:	0556                	slli	a0,a0,0x15
    120a:	0000                	unimp
    120c:	055a                	slli	a0,a0,0x16
    120e:	0000                	unimp
    1210:	0002                	c.slli64	zero
    1212:	9f30                	0x9f30
    1214:	055a                	slli	a0,a0,0x16
    1216:	0000                	unimp
    1218:	0562                	slli	a0,a0,0x18
    121a:	0000                	unimp
    121c:	0001                	nop
    121e:	625d                	lui	tp,0x17
    1220:	0005                	c.nop	1
    1222:	6a00                	flw	fs0,16(a2)
    1224:	0005                	c.nop	1
    1226:	0100                	addi	s0,sp,128
    1228:	5f00                	lw	s0,56(a4)
    122a:	056a                	slli	a0,a0,0x1a
    122c:	0000                	unimp
    122e:	0570                	addi	a2,sp,652
    1230:	0000                	unimp
    1232:	0001                	nop
    1234:	725d                	lui	tp,0xffff7
    1236:	0005                	c.nop	1
    1238:	7800                	flw	fs0,48(s0)
    123a:	0005                	c.nop	1
    123c:	0100                	addi	s0,sp,128
    123e:	5e00                	lw	s0,56(a2)
    1240:	0578                	addi	a4,sp,652
    1242:	0000                	unimp
    1244:	0588                	addi	a0,sp,704
    1246:	0000                	unimp
    1248:	0001                	nop
    124a:	885f 0005 8c00      	0x8c000005885f
    1250:	0005                	c.nop	1
    1252:	0100                	addi	s0,sp,128
    1254:	5e00                	lw	s0,56(a2)
    1256:	058c                	addi	a1,sp,704
    1258:	0000                	unimp
    125a:	0596                	slli	a1,a1,0x5
    125c:	0000                	unimp
    125e:	7f7e0003          	lb	zero,2039(t3)
    1262:	969f 0005 9800      	0x98000005969f
    1268:	0005                	c.nop	1
    126a:	0100                	addi	s0,sp,128
    126c:	5e00                	lw	s0,56(a2)
    126e:	0598                	addi	a4,sp,704
    1270:	0000                	unimp
    1272:	05a8                	addi	a0,sp,712
    1274:	0000                	unimp
    1276:	0001                	nop
    1278:	a85d                	j	132e <_edata+0x10e>
    127a:	0005                	c.nop	1
    127c:	ae00                	fsd	fs0,24(a2)
    127e:	0005                	c.nop	1
    1280:	0300                	addi	s0,sp,384
    1282:	7d00                	flw	fs0,56(a0)
    1284:	9f7f                	0x9f7f
    1286:	05ae                	slli	a1,a1,0xb
    1288:	0000                	unimp
    128a:	05b0                	addi	a2,sp,712
    128c:	0000                	unimp
    128e:	0001                	nop
    1290:	b05d                	j	b36 <generate_keys+0x21e>
    1292:	0005                	c.nop	1
    1294:	bc00                	fsd	fs0,56(s0)
    1296:	0005                	c.nop	1
    1298:	0100                	addi	s0,sp,128
    129a:	5f00                	lw	s0,56(a4)
    129c:	05bc                	addi	a5,sp,712
    129e:	0000                	unimp
    12a0:	05c4                	addi	s1,sp,708
    12a2:	0000                	unimp
    12a4:	7f7f0003          	lb	zero,2039(t5)
    12a8:	c49f 0005 c600      	0xc6000005c49f
    12ae:	0005                	c.nop	1
    12b0:	0100                	addi	s0,sp,128
    12b2:	5f00                	lw	s0,56(a4)
    12b4:	05c6                	slli	a1,a1,0x11
    12b6:	0000                	unimp
    12b8:	05d6                	slli	a1,a1,0x15
    12ba:	0000                	unimp
    12bc:	0001                	nop
    12be:	d65d                	beqz	a2,126c <_edata+0x4c>
    12c0:	0005                	c.nop	1
    12c2:	dc00                	sw	s0,56(s0)
    12c4:	0005                	c.nop	1
    12c6:	0300                	addi	s0,sp,384
    12c8:	7d00                	flw	fs0,56(a0)
    12ca:	9f7f                	0x9f7f
    12cc:	05dc                	addi	a5,sp,708
    12ce:	0000                	unimp
    12d0:	05de                	slli	a1,a1,0x17
    12d2:	0000                	unimp
    12d4:	0001                	nop
    12d6:	de5d                	beqz	a2,1294 <_edata+0x74>
    12d8:	0005                	c.nop	1
    12da:	ea00                	fsw	fs0,16(a2)
    12dc:	0005                	c.nop	1
    12de:	0100                	addi	s0,sp,128
    12e0:	5e00                	lw	s0,56(a2)
    12e2:	05ea                	slli	a1,a1,0x1a
    12e4:	0000                	unimp
    12e6:	05f6                	slli	a1,a1,0x1d
    12e8:	0000                	unimp
    12ea:	7f7e0003          	lb	zero,2039(t3)
    12ee:	f69f 0005 f800      	0xf8000005f69f
    12f4:	0005                	c.nop	1
    12f6:	0100                	addi	s0,sp,128
    12f8:	5e00                	lw	s0,56(a2)
    12fa:	05f8                	addi	a4,sp,716
    12fc:	0000                	unimp
    12fe:	05fe                	slli	a1,a1,0x1f
    1300:	0000                	unimp
    1302:	0001                	nop
    1304:	fe5f 0005 1000      	0x10000005fe5f
    130a:	0006                	c.slli	zero,0x1
    130c:	0100                	addi	s0,sp,128
    130e:	5d00                	lw	s0,56(a0)
    1310:	0610                	addi	a2,sp,768
    1312:	0000                	unimp
    1314:	061e                	slli	a2,a2,0x7
    1316:	0000                	unimp
    1318:	0001                	nop
    131a:	1e5f 0006 2000      	0x200000061e5f
    1320:	0006                	c.slli	zero,0x1
    1322:	0300                	addi	s0,sp,384
    1324:	7f00                	flw	fs0,56(a4)
    1326:	9f7f                	0x9f7f
    1328:	0620                	addi	s0,sp,776
    132a:	0000                	unimp
    132c:	0622                	slli	a2,a2,0x8
    132e:	0000                	unimp
    1330:	0001                	nop
    1332:	225f 0006 3400      	0x34000006225f
    1338:	0006                	c.slli	zero,0x1
    133a:	0100                	addi	s0,sp,128
    133c:	5900                	lw	s0,48(a0)
	...
    1346:	04e6                	slli	s1,s1,0x19
    1348:	0000                	unimp
    134a:	04f4                	addi	a3,sp,588
    134c:	0000                	unimp
    134e:	0001                	nop
    1350:	325e                	fld	ft4,496(sp)
    1352:	0005                	c.nop	1
    1354:	3600                	fld	fs0,40(a2)
    1356:	0005                	c.nop	1
    1358:	0100                	addi	s0,sp,128
    135a:	5e00                	lw	s0,56(a2)
	...
    1364:	0508                	addi	a0,sp,640
    1366:	0000                	unimp
    1368:	0532                	slli	a0,a0,0xc
    136a:	0000                	unimp
    136c:	0006                	c.slli	zero,0x1
    136e:	0016d003          	lhu	zero,1(a3)
    1372:	9f00                	0x9f00
	...
    137c:	0434                	addi	a3,sp,520
    137e:	0000                	unimp
    1380:	0526                	slli	a0,a0,0x9
    1382:	0000                	unimp
    1384:	0002                	c.slli64	zero
    1386:	0532008b          	0x532008b
    138a:	0000                	unimp
    138c:	0634                	addi	a3,sp,776
    138e:	0000                	unimp
    1390:	0002                	c.slli64	zero
    1392:	0000008b          	0x8b
    1396:	0000                	unimp
    1398:	0000                	unimp
    139a:	0000                	unimp
    139c:	0434                	addi	a3,sp,520
    139e:	0000                	unimp
    13a0:	0520                	addi	s0,sp,648
    13a2:	0000                	unimp
    13a4:	0002                	c.slli64	zero
    13a6:	0088                	addi	a0,sp,64
    13a8:	0520                	addi	s0,sp,648
    13aa:	0000                	unimp
    13ac:	0522                	slli	a0,a0,0x8
    13ae:	0000                	unimp
    13b0:	000c                	0xc
    13b2:	0189008b          	0x189008b
    13b6:	2432                	fld	fs0,264(sp)
    13b8:	f0090f23          	sb	zero,-226(s2)
    13bc:	1c1a                	slli	s8,s8,0x26
    13be:	0522                	slli	a0,a0,0x8
    13c0:	0000                	unimp
    13c2:	0526                	slli	a0,a0,0x9
    13c4:	0000                	unimp
    13c6:	000d                	c.nop	3
    13c8:	01f3008b          	0x1f3008b
    13cc:	2324325b          	0x2324325b
    13d0:	1af0090f          	0x1af0090f
    13d4:	321c                	fld	fa5,32(a2)
    13d6:	0005                	c.nop	1
    13d8:	3400                	fld	fs0,40(s0)
    13da:	0006                	c.slli	zero,0x1
    13dc:	0200                	addi	s0,sp,256
    13de:	8800                	0x8800
	...
    13e8:	5600                	lw	s0,40(a2)
    13ea:	0005                	c.nop	1
    13ec:	8800                	0x8800
    13ee:	0005                	c.nop	1
    13f0:	0100                	addi	s0,sp,128
    13f2:	5a00                	lw	s0,48(a2)
    13f4:	0598                	addi	a4,sp,704
    13f6:	0000                	unimp
    13f8:	0610                	addi	a2,sp,768
    13fa:	0000                	unimp
    13fc:	0001                	nop
    13fe:	005a                	c.slli	zero,0x16
    1400:	0000                	unimp
    1402:	0000                	unimp
    1404:	0000                	unimp
    1406:	3400                	fld	fs0,40(s0)
    1408:	0004                	0x4
    140a:	1a00                	addi	s0,sp,304
    140c:	0005                	c.nop	1
    140e:	0200                	addi	s0,sp,256
    1410:	8500                	0x8500
    1412:	1a00                	addi	s0,sp,304
    1414:	0005                	c.nop	1
    1416:	2000                	fld	fs0,0(s0)
    1418:	0005                	c.nop	1
    141a:	0c00                	addi	s0,sp,528
    141c:	8800                	0x8800
    141e:	8900                	0x8900
    1420:	3201                	jal	d20 <ntru_deceypt+0x7e>
    1422:	2324                	fld	fs1,64(a4)
    1424:	1af0090f          	0x1af0090f
    1428:	201c                	fld	fa5,0(s0)
    142a:	0005                	c.nop	1
    142c:	2200                	fld	fs0,0(a2)
    142e:	0005                	c.nop	1
    1430:	0e00                	addi	s0,sp,784
    1432:	8b00                	0x8b00
    1434:	8900                	0x8900
    1436:	3201                	jal	d36 <ntru_deceypt+0x94>
    1438:	2324                	fld	fs1,64(a4)
    143a:	1af0090f          	0x1af0090f
    143e:	2431                	jal	164a <product2+0x1d2>
    1440:	221c                	fld	fa5,0(a2)
    1442:	0005                	c.nop	1
    1444:	2600                	fld	fs0,8(a2)
    1446:	0005                	c.nop	1
    1448:	0f00                	addi	s0,sp,912
    144a:	8b00                	0x8b00
    144c:	f300                	fsw	fs0,32(a4)
    144e:	5b01                	li	s6,-32
    1450:	2432                	fld	fs0,264(sp)
    1452:	f0090f23          	sb	zero,-226(s2)
    1456:	311a                	fld	ft2,416(sp)
    1458:	1c24                	addi	s1,sp,568
    145a:	0532                	slli	a0,a0,0xc
    145c:	0000                	unimp
    145e:	0634                	addi	a3,sp,776
    1460:	0000                	unimp
    1462:	0002                	c.slli64	zero
    1464:	0085                	addi	ra,ra,1
	...
    146e:	0436                	slli	s0,s0,0xd
    1470:	0000                	unimp
    1472:	050c                	addi	a1,sp,640
    1474:	0000                	unimp
    1476:	0002                	c.slli64	zero
    1478:	0072                	c.slli	zero,0x1c
    147a:	050c                	addi	a1,sp,640
    147c:	0000                	unimp
    147e:	0524                	addi	s1,sp,648
    1480:	0000                	unimp
    1482:	0002                	c.slli64	zero
    1484:	008a                	slli	ra,ra,0x2
    1486:	0524                	addi	s1,sp,648
    1488:	0000                	unimp
    148a:	0526                	slli	a0,a0,0x9
    148c:	0000                	unimp
    148e:	001a                	c.slli	zero,0x6
    1490:	01f3008b          	0x1f3008b
    1494:	2324325b          	0x2324325b
    1498:	1af0090f          	0x1af0090f
    149c:	2431                	jal	16a8 <product2+0x230>
    149e:	f31c                	fsw	fa5,32(a4)
    14a0:	5d01                	li	s10,-32
    14a2:	2432                	fld	fs0,264(sp)
    14a4:	f0090f23          	sb	zero,-226(s2)
    14a8:	1c1a                	slli	s8,s8,0x26
    14aa:	0532                	slli	a0,a0,0xc
    14ac:	0000                	unimp
    14ae:	0634                	addi	a3,sp,776
    14b0:	0000                	unimp
    14b2:	0002                	c.slli64	zero
    14b4:	0072                	c.slli	zero,0x1c
	...
    14be:	0434                	addi	a3,sp,520
    14c0:	0000                	unimp
    14c2:	0522                	slli	a0,a0,0x8
    14c4:	0000                	unimp
    14c6:	0001                	nop
    14c8:	2269                	jal	1652 <product2+0x1da>
    14ca:	0005                	c.nop	1
    14cc:	3200                	fld	fs0,32(a2)
    14ce:	0005                	c.nop	1
    14d0:	0600                	addi	s0,sp,768
    14d2:	f300                	fsw	fs0,32(a4)
    14d4:	5b01                	li	s6,-32
    14d6:	1c31                	addi	s8,s8,-20
    14d8:	329f 0005 3400      	0x34000005329f
    14de:	0006                	c.slli	zero,0x1
    14e0:	0100                	addi	s0,sp,128
    14e2:	6900                	flw	fs0,16(a0)
	...
    14ec:	0434                	addi	a3,sp,520
    14ee:	0000                	unimp
    14f0:	0522                	slli	a0,a0,0x8
    14f2:	0000                	unimp
    14f4:	0001                	nop
    14f6:	2269                	jal	1680 <product2+0x208>
    14f8:	0005                	c.nop	1
    14fa:	3200                	fld	fs0,32(a2)
    14fc:	0005                	c.nop	1
    14fe:	0600                	addi	s0,sp,768
    1500:	f300                	fsw	fs0,32(a4)
    1502:	5b01                	li	s6,-32
    1504:	1c31                	addi	s8,s8,-20
    1506:	329f 0005 3400      	0x34000005329f
    150c:	0006                	c.slli	zero,0x1
    150e:	0100                	addi	s0,sp,128
    1510:	6900                	flw	fs0,16(a0)
	...
    151a:	0434                	addi	a3,sp,520
    151c:	0000                	unimp
    151e:	0522                	slli	a0,a0,0x8
    1520:	0000                	unimp
    1522:	0001                	nop
    1524:	2269                	jal	16ae <product2+0x236>
    1526:	0005                	c.nop	1
    1528:	3200                	fld	fs0,32(a2)
    152a:	0005                	c.nop	1
    152c:	0600                	addi	s0,sp,768
    152e:	f300                	fsw	fs0,32(a4)
    1530:	5b01                	li	s6,-32
    1532:	1c31                	addi	s8,s8,-20
    1534:	329f 0005 3400      	0x34000005329f
    153a:	0006                	c.slli	zero,0x1
    153c:	0100                	addi	s0,sp,128
    153e:	6900                	flw	fs0,16(a0)
	...
    1548:	0434                	addi	a3,sp,520
    154a:	0000                	unimp
    154c:	044e                	slli	s0,s0,0x13
    154e:	0000                	unimp
    1550:	0001                	nop
    1552:	4e64                	lw	s1,92(a2)
    1554:	0004                	0x4
    1556:	6800                	flw	fs0,16(s0)
    1558:	0004                	0x4
    155a:	0300                	addi	s0,sp,384
    155c:	8300                	0x8300
    155e:	9f7f                	0x9f7f
    1560:	0468                	addi	a0,sp,524
    1562:	0000                	unimp
    1564:	04c2                	slli	s1,s1,0x10
    1566:	0000                	unimp
    1568:	0001                	nop
    156a:	c264                	sw	s1,68(a2)
    156c:	0004                	0x4
    156e:	1600                	addi	s0,sp,800
    1570:	0005                	c.nop	1
    1572:	0300                	addi	s0,sp,384
    1574:	8300                	0x8300
    1576:	9f7f                	0x9f7f
    1578:	0516                	slli	a0,a0,0x5
    157a:	0000                	unimp
    157c:	0532                	slli	a0,a0,0xc
    157e:	0000                	unimp
    1580:	0006                	c.slli	zero,0x1
    1582:	315d01f3          	0x315d01f3
    1586:	9f1c                	0x9f1c
    1588:	0532                	slli	a0,a0,0xc
    158a:	0000                	unimp
    158c:	0634                	addi	a3,sp,776
    158e:	0000                	unimp
    1590:	7f830003          	lb	zero,2040(t1)
    1594:	009f 0000 0000      	0x9f
    159a:	0000                	unimp
    159c:	7200                	flw	fs0,32(a2)
    159e:	0002                	c.slli64	zero
    15a0:	e200                	fsw	fs0,0(a2)
    15a2:	0002                	c.slli64	zero
    15a4:	0100                	addi	s0,sp,128
    15a6:	5a00                	lw	s0,48(a2)
    15a8:	02e2                	slli	t0,t0,0x18
    15aa:	0000                	unimp
    15ac:	02fc                	addi	a5,sp,332
    15ae:	0000                	unimp
    15b0:	0004                	0x4
    15b2:	9f5a01f3          	0x9f5a01f3
    15b6:	02fc                	addi	a5,sp,332
    15b8:	0000                	unimp
    15ba:	0332                	slli	t1,t1,0xc
    15bc:	0000                	unimp
    15be:	0001                	nop
    15c0:	325a                	fld	ft4,432(sp)
    15c2:	e2000003          	lb	zero,-480(zero) # fffffe20 <_stack_start+0xfffefe20>
    15c6:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    15ca:	f300                	fsw	fs0,32(a4)
    15cc:	5a01                	li	s4,-32
    15ce:	009f 0000 0000      	0x9f
    15d4:	0000                	unimp
    15d6:	7200                	flw	fs0,32(a2)
    15d8:	0002                	c.slli64	zero
    15da:	e200                	fsw	fs0,0(a2)
    15dc:	0002                	c.slli64	zero
    15de:	0100                	addi	s0,sp,128
    15e0:	5b00                	lw	s0,48(a4)
    15e2:	02e2                	slli	t0,t0,0x18
    15e4:	0000                	unimp
    15e6:	02fc                	addi	a5,sp,332
    15e8:	0000                	unimp
    15ea:	018f0003          	lb	zero,24(t5)
    15ee:	fc9f 0002 3200      	0x32000002fc9f
    15f4:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15f8:	5b00                	lw	s0,48(a4)
    15fa:	0332                	slli	t1,t1,0xc
    15fc:	0000                	unimp
    15fe:	03e2                	slli	t2,t2,0x18
    1600:	0000                	unimp
    1602:	018f0003          	lb	zero,24(t5)
    1606:	009f 0000 0000      	0x9f
    160c:	0000                	unimp
    160e:	7200                	flw	fs0,32(a2)
    1610:	0002                	c.slli64	zero
    1612:	e800                	fsw	fs0,16(s0)
    1614:	0002                	c.slli64	zero
    1616:	0100                	addi	s0,sp,128
    1618:	5c00                	lw	s0,56(s0)
    161a:	02e8                	addi	a0,sp,332
    161c:	0000                	unimp
    161e:	02fc                	addi	a5,sp,332
    1620:	0000                	unimp
    1622:	0004                	0x4
    1624:	9f5c01f3          	0x9f5c01f3
    1628:	02fc                	addi	a5,sp,332
    162a:	0000                	unimp
    162c:	0346                	slli	t1,t1,0x11
    162e:	0000                	unimp
    1630:	0001                	nop
    1632:	465c                	lw	a5,12(a2)
    1634:	e2000003          	lb	zero,-480(zero) # fffffe20 <_stack_start+0xfffefe20>
    1638:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    163c:	f300                	fsw	fs0,32(a4)
    163e:	5c01                	li	s8,-32
    1640:	009f 0000 0000      	0x9f
    1646:	0000                	unimp
    1648:	7200                	flw	fs0,32(a2)
    164a:	0002                	c.slli64	zero
    164c:	f400                	fsw	fs0,40(s0)
    164e:	0002                	c.slli64	zero
    1650:	0100                	addi	s0,sp,128
    1652:	5e00                	lw	s0,56(a2)
    1654:	02f4                	addi	a3,sp,332
    1656:	0000                	unimp
    1658:	02fc                	addi	a5,sp,332
    165a:	0000                	unimp
    165c:	0004                	0x4
    165e:	9f5e01f3          	0x9f5e01f3
    1662:	02fc                	addi	a5,sp,332
    1664:	0000                	unimp
    1666:	0346                	slli	t1,t1,0x11
    1668:	0000                	unimp
    166a:	0001                	nop
    166c:	465e                	lw	a2,212(sp)
    166e:	e2000003          	lb	zero,-480(zero) # fffffe20 <_stack_start+0xfffefe20>
    1672:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1676:	f300                	fsw	fs0,32(a4)
    1678:	5e01                	li	t3,-32
    167a:	009f 0000 0000      	0x9f
    1680:	0000                	unimp
    1682:	be00                	fsd	fs0,56(a2)
    1684:	0002                	c.slli64	zero
    1686:	d600                	sw	s0,40(a2)
    1688:	0002                	c.slli64	zero
    168a:	0200                	addi	s0,sp,256
    168c:	8c00                	0x8c00
    168e:	d600                	sw	s0,40(a2)
    1690:	0002                	c.slli64	zero
    1692:	4600                	lw	s0,8(a2)
    1694:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1698:	8200                	0x8200
    169a:	4600                	lw	s0,8(a2)
    169c:	9c000003          	lb	zero,-1600(zero) # fffff9c0 <_stack_start+0xfffef9c0>
    16a0:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    16a4:	8c00                	0x8c00
    16a6:	9c00                	0x9c00
    16a8:	c0000003          	lb	zero,-1024(zero) # fffffc00 <_stack_start+0xfffefc00>
    16ac:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    16b0:	8200                	0x8200
    16b2:	c000                	sw	s0,0(s0)
    16b4:	e2000003          	lb	zero,-480(zero) # fffffe20 <_stack_start+0xfffefe20>
    16b8:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    16bc:	8c00                	0x8c00
	...
    16c6:	c400                	sw	s0,8(s0)
    16c8:	0002                	c.slli64	zero
    16ca:	d600                	sw	s0,40(a2)
    16cc:	0002                	c.slli64	zero
    16ce:	0200                	addi	s0,sp,256
    16d0:	3000                	fld	fs0,32(s0)
    16d2:	d69f 0002 dc00      	0xdc000002d69f
    16d8:	0002                	c.slli64	zero
    16da:	0100                	addi	s0,sp,128
    16dc:	5900                	lw	s0,48(a0)
    16de:	02dc                	addi	a5,sp,324
    16e0:	0000                	unimp
    16e2:	02e2                	slli	t0,t0,0x18
    16e4:	0000                	unimp
    16e6:	0001                	nop
    16e8:	0002e257          	0x2e257
    16ec:	f400                	fsw	fs0,40(s0)
    16ee:	0002                	c.slli64	zero
    16f0:	0100                	addi	s0,sp,128
    16f2:	5b00                	lw	s0,48(a4)
    16f4:	02fc                	addi	a5,sp,332
    16f6:	0000                	unimp
    16f8:	031e                	slli	t1,t1,0x7
    16fa:	0000                	unimp
    16fc:	0001                	nop
    16fe:	1e59                	addi	t3,t3,-10
    1700:	2c000003          	lb	zero,704(zero) # 2c0 <polymult2+0x4e>
    1704:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1708:	5700                	lw	s0,40(a4)
    170a:	032c                	addi	a1,sp,392
    170c:	0000                	unimp
    170e:	0330                	addi	a2,sp,392
    1710:	0000                	unimp
    1712:	7f770003          	lb	zero,2039(a4)
    1716:	309f 0003 3200      	0x32000003309f
    171c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1720:	5700                	lw	s0,40(a4)
    1722:	0332                	slli	t1,t1,0xc
    1724:	0000                	unimp
    1726:	0340                	addi	s0,sp,388
    1728:	0000                	unimp
    172a:	0001                	nop
    172c:	0003405b          	0x3405b
    1730:	4400                	lw	s0,8(s0)
    1732:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1736:	7b00                	flw	fs0,48(a4)
    1738:	9f7f                	0x9f7f
    173a:	0344                	addi	s1,sp,388
    173c:	0000                	unimp
    173e:	0346                	slli	t1,t1,0x11
    1740:	0000                	unimp
    1742:	0001                	nop
    1744:	0003c05b          	0x3c05b
    1748:	c800                	sw	s0,16(s0)
    174a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    174e:	5b00                	lw	s0,48(a4)
    1750:	03c8                	addi	a0,sp,452
    1752:	0000                	unimp
    1754:	03d4                	addi	a3,sp,452
    1756:	0000                	unimp
    1758:	7f7b0003          	lb	zero,2039(s6)
    175c:	d49f 0003 de00      	0xde000003d49f
    1762:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1766:	5b00                	lw	s0,48(a4)
	...
    1770:	02f4                	addi	a3,sp,332
    1772:	0000                	unimp
    1774:	02fc                	addi	a5,sp,332
    1776:	0000                	unimp
    1778:	0001                	nop
    177a:	fc61                	bnez	s0,1752 <result+0x82>
    177c:	0002                	c.slli64	zero
    177e:	1800                	addi	s0,sp,48
    1780:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1784:	5700                	lw	s0,40(a4)
    1786:	0346                	slli	t1,t1,0x11
    1788:	0000                	unimp
    178a:	0376                	slli	t1,t1,0x1d
    178c:	0000                	unimp
    178e:	0001                	nop
    1790:	7661                	lui	a2,0xffff8
    1792:	98000003          	lb	zero,-1664(zero) # fffff980 <_stack_start+0xfffef980>
    1796:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    179a:	5e00                	lw	s0,56(a2)
    179c:	0398                	addi	a4,sp,448
    179e:	0000                	unimp
    17a0:	03c0                	addi	s0,sp,452
    17a2:	0000                	unimp
    17a4:	0001                	nop
    17a6:	c061                	beqz	s0,1866 <result+0x196>
    17a8:	e2000003          	lb	zero,-480(zero) # fffffe20 <_stack_start+0xfffefe20>
    17ac:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17b0:	5e00                	lw	s0,56(a2)
	...
    17ba:	0346                	slli	t1,t1,0x11
    17bc:	0000                	unimp
    17be:	0358                	addi	a4,sp,388
    17c0:	0000                	unimp
    17c2:	0001                	nop
    17c4:	585e                	lw	a6,244(sp)
    17c6:	5e000003          	lb	zero,1504(zero) # 5e0 <polydiv+0x1fe>
    17ca:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    17ce:	7e00                	flw	fs0,56(a2)
    17d0:	9f01                	0x9f01
    17d2:	035e                	slli	t1,t1,0x17
    17d4:	0000                	unimp
    17d6:	0368                	addi	a0,sp,396
    17d8:	0000                	unimp
    17da:	0001                	nop
    17dc:	9c5e                	add	s8,s8,s7
    17de:	ae000003          	lb	zero,-1312(zero) # fffffae0 <_stack_start+0xfffefae0>
    17e2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17e6:	5e00                	lw	s0,56(a2)
    17e8:	03ae                	slli	t2,t2,0xb
    17ea:	0000                	unimp
    17ec:	03b4                	addi	a3,sp,456
    17ee:	0000                	unimp
    17f0:	017e0003          	lb	zero,23(t3)
    17f4:	b49f 0003 c000      	0xc0000003b49f
    17fa:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17fe:	5e00                	lw	s0,56(a2)
	...
    1808:	037a                	slli	t1,t1,0x1e
    180a:	0000                	unimp
    180c:	0398                	addi	a4,sp,448
    180e:	0000                	unimp
    1810:	0006                	c.slli	zero,0x1
    1812:	00147803          	0x147803
    1816:	9f00                	0x9f00
	...
    1820:	02c4                	addi	s1,sp,324
    1822:	0000                	unimp
    1824:	037e                	slli	t1,t1,0x1f
    1826:	0000                	unimp
    1828:	0002                	c.slli64	zero
    182a:	0072                	c.slli	zero,0x1c
    182c:	037e                	slli	t1,t1,0x1f
    182e:	0000                	unimp
    1830:	0398                	addi	a4,sp,448
    1832:	0000                	unimp
    1834:	000c                	0xc
    1836:	0075                	c.nop	29
    1838:	007d                	c.nop	31
    183a:	2432                	fld	fs0,264(sp)
    183c:	f0090f23          	sb	zero,-226(s2)
    1840:	1c1a                	slli	s8,s8,0x26
    1842:	0398                	addi	a4,sp,448
    1844:	0000                	unimp
    1846:	03e2                	slli	t2,t2,0x18
    1848:	0000                	unimp
    184a:	0002                	c.slli64	zero
    184c:	0072                	c.slli	zero,0x1c
	...
    1856:	02be                	slli	t0,t0,0xf
    1858:	0000                	unimp
    185a:	02f4                	addi	a3,sp,332
    185c:	0000                	unimp
    185e:	0001                	nop
    1860:	f461                	bnez	s0,1828 <result+0x158>
    1862:	0002                	c.slli64	zero
    1864:	fc00                	fsw	fs0,56(s0)
    1866:	0002                	c.slli64	zero
    1868:	0300                	addi	s0,sp,384
    186a:	7d00                	flw	fs0,56(a0)
    186c:	9f7f                	0x9f7f
    186e:	02fc                	addi	a5,sp,332
    1870:	0000                	unimp
    1872:	0346                	slli	t1,t1,0x11
    1874:	0000                	unimp
    1876:	0001                	nop
    1878:	4661                	li	a2,24
    187a:	e2000003          	lb	zero,-480(zero) # fffffe20 <_stack_start+0xfffefe20>
    187e:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1882:	7d00                	flw	fs0,56(a0)
    1884:	9f7f                	0x9f7f
	...
    188e:	02c2                	slli	t0,t0,0x10
    1890:	0000                	unimp
    1892:	02f4                	addi	a3,sp,332
    1894:	0000                	unimp
    1896:	0001                	nop
    1898:	f461                	bnez	s0,1860 <result+0x190>
    189a:	0002                	c.slli64	zero
    189c:	fc00                	fsw	fs0,56(s0)
    189e:	0002                	c.slli64	zero
    18a0:	0300                	addi	s0,sp,384
    18a2:	7d00                	flw	fs0,56(a0)
    18a4:	9f7f                	0x9f7f
    18a6:	02fc                	addi	a5,sp,332
    18a8:	0000                	unimp
    18aa:	0346                	slli	t1,t1,0x11
    18ac:	0000                	unimp
    18ae:	0001                	nop
    18b0:	4661                	li	a2,24
    18b2:	e2000003          	lb	zero,-480(zero) # fffffe20 <_stack_start+0xfffefe20>
    18b6:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    18ba:	7d00                	flw	fs0,56(a0)
    18bc:	9f7f                	0x9f7f
	...
    18c6:	008c                	addi	a1,sp,64
    18c8:	0000                	unimp
    18ca:	0104                	addi	s1,sp,128
    18cc:	0000                	unimp
    18ce:	0001                	nop
    18d0:	045a                	slli	s0,s0,0x16
    18d2:	0001                	nop
    18d4:	2200                	fld	fs0,0(a2)
    18d6:	0001                	nop
    18d8:	0400                	addi	s0,sp,512
    18da:	f300                	fsw	fs0,32(a4)
    18dc:	5a01                	li	s4,-32
    18de:	229f 0001 6c00      	0x6c000001229f
    18e4:	0001                	nop
    18e6:	0100                	addi	s0,sp,128
    18e8:	5a00                	lw	s0,48(a2)
    18ea:	016c                	addi	a1,sp,140
    18ec:	0000                	unimp
    18ee:	0272                	slli	tp,tp,0x1c
    18f0:	0000                	unimp
    18f2:	0004                	0x4
    18f4:	9f5a01f3          	0x9f5a01f3
	...
    1900:	008c                	addi	a1,sp,64
    1902:	0000                	unimp
    1904:	0106                	slli	sp,sp,0x1
    1906:	0000                	unimp
    1908:	0001                	nop
    190a:	0001065b          	0x1065b
    190e:	2200                	fld	fs0,0(a2)
    1910:	0001                	nop
    1912:	0300                	addi	s0,sp,384
    1914:	8200                	0x8200
    1916:	9f01                	0x9f01
    1918:	0122                	slli	sp,sp,0x8
    191a:	0000                	unimp
    191c:	016c                	addi	a1,sp,140
    191e:	0000                	unimp
    1920:	0001                	nop
    1922:	00016c5b          	0x16c5b
    1926:	ba00                	fsd	fs0,48(a2)
    1928:	0001                	nop
    192a:	0300                	addi	s0,sp,384
    192c:	8200                	0x8200
    192e:	9f01                	0x9f01
    1930:	01ba                	slli	gp,gp,0xe
    1932:	0000                	unimp
    1934:	0272                	slli	tp,tp,0x1c
    1936:	0000                	unimp
    1938:	0004                	0x4
    193a:	9f5b01f3          	0x9f5b01f3
	...
    1946:	008c                	addi	a1,sp,64
    1948:	0000                	unimp
    194a:	010c                	addi	a1,sp,128
    194c:	0000                	unimp
    194e:	0001                	nop
    1950:	0c5c                	addi	a5,sp,532
    1952:	0001                	nop
    1954:	2200                	fld	fs0,0(a2)
    1956:	0001                	nop
    1958:	0400                	addi	s0,sp,512
    195a:	f300                	fsw	fs0,32(a4)
    195c:	5c01                	li	s8,-32
    195e:	229f 0001 8e00      	0x8e000001229f
    1964:	0001                	nop
    1966:	0100                	addi	s0,sp,128
    1968:	5c00                	lw	s0,56(s0)
    196a:	018e                	slli	gp,gp,0x3
    196c:	0000                	unimp
    196e:	0272                	slli	tp,tp,0x1c
    1970:	0000                	unimp
    1972:	0004                	0x4
    1974:	9f5c01f3          	0x9f5c01f3
	...
    1980:	008c                	addi	a1,sp,64
    1982:	0000                	unimp
    1984:	01ac                	addi	a1,sp,200
    1986:	0000                	unimp
    1988:	0001                	nop
    198a:	ac5d                	j	1c40 <random_keys+0x188>
    198c:	0001                	nop
    198e:	d000                	sw	s0,32(s0)
    1990:	0001                	nop
    1992:	0400                	addi	s0,sp,512
    1994:	f300                	fsw	fs0,32(a4)
    1996:	5d01                	li	s10,-32
    1998:	d09f 0001 6200      	0x62000001d09f
    199e:	0002                	c.slli64	zero
    19a0:	0100                	addi	s0,sp,128
    19a2:	5d00                	lw	s0,56(a0)
    19a4:	0262                	slli	tp,tp,0x18
    19a6:	0000                	unimp
    19a8:	0272                	slli	tp,tp,0x1c
    19aa:	0000                	unimp
    19ac:	0004                	0x4
    19ae:	9f5d01f3          	0x9f5d01f3
	...
    19ba:	008c                	addi	a1,sp,64
    19bc:	0000                	unimp
    19be:	00aa                	slli	ra,ra,0xa
    19c0:	0000                	unimp
    19c2:	0001                	nop
    19c4:	aa5f 0000 1a00      	0x1a000000aa5f
    19ca:	0001                	nop
    19cc:	0100                	addi	s0,sp,128
    19ce:	5900                	lw	s0,48(a0)
    19d0:	011a                	slli	sp,sp,0x6
    19d2:	0000                	unimp
    19d4:	0122                	slli	sp,sp,0x8
    19d6:	0000                	unimp
    19d8:	0004                	0x4
    19da:	9f5f01f3          	0x9f5f01f3
    19de:	0122                	slli	sp,sp,0x8
    19e0:	0000                	unimp
    19e2:	0194                	addi	a3,sp,192
    19e4:	0000                	unimp
    19e6:	0001                	nop
    19e8:	9459                	srai	s0,s0,0x36
    19ea:	0001                	nop
    19ec:	d000                	sw	s0,32(s0)
    19ee:	0001                	nop
    19f0:	0400                	addi	s0,sp,512
    19f2:	f300                	fsw	fs0,32(a4)
    19f4:	5f01                	li	t5,-32
    19f6:	d09f 0001 fa00      	0xfa000001d09f
    19fc:	0001                	nop
    19fe:	0100                	addi	s0,sp,128
    1a00:	5900                	lw	s0,48(a0)
    1a02:	01fa                	slli	gp,gp,0x1e
    1a04:	0000                	unimp
    1a06:	0272                	slli	tp,tp,0x1c
    1a08:	0000                	unimp
    1a0a:	0004                	0x4
    1a0c:	9f5f01f3          	0x9f5f01f3
	...
    1a18:	00e4                	addi	s1,sp,76
    1a1a:	0000                	unimp
    1a1c:	00f6                	slli	ra,ra,0x1d
    1a1e:	0000                	unimp
    1a20:	0002                	c.slli64	zero
    1a22:	9f30                	0x9f30
    1a24:	00f6                	slli	ra,ra,0x1d
    1a26:	0000                	unimp
    1a28:	00fc                	addi	a5,sp,76
    1a2a:	0000                	unimp
    1a2c:	0001                	nop
    1a2e:	0000fe63          	bgeu	ra,zero,1a4a <ti_2+0x122>
    1a32:	0600                	addi	s0,sp,768
    1a34:	0001                	nop
    1a36:	0100                	addi	s0,sp,128
    1a38:	6400                	flw	fs0,8(s0)
    1a3a:	0106                	slli	sp,sp,0x1
    1a3c:	0000                	unimp
    1a3e:	011a                	slli	sp,sp,0x6
    1a40:	0000                	unimp
    1a42:	0001                	nop
    1a44:	2261                	jal	1bcc <random_keys+0x114>
    1a46:	0001                	nop
    1a48:	4400                	lw	s0,8(s0)
    1a4a:	0001                	nop
    1a4c:	0100                	addi	s0,sp,128
    1a4e:	6300                	flw	fs0,0(a4)
    1a50:	0144                	addi	s1,sp,132
    1a52:	0000                	unimp
    1a54:	0160                	addi	s0,sp,140
    1a56:	0000                	unimp
    1a58:	0001                	nop
    1a5a:	6064                	flw	fs1,68(s0)
    1a5c:	0001                	nop
    1a5e:	6600                	flw	fs0,8(a2)
    1a60:	0001                	nop
    1a62:	0300                	addi	s0,sp,384
    1a64:	8400                	0x8400
    1a66:	9f7f                	0x9f7f
    1a68:	0166                	slli	sp,sp,0x19
    1a6a:	0000                	unimp
    1a6c:	016c                	addi	a1,sp,140
    1a6e:	0000                	unimp
    1a70:	0001                	nop
    1a72:	6c64                	flw	fs1,92(s0)
    1a74:	0001                	nop
    1a76:	8200                	0x8200
    1a78:	0001                	nop
    1a7a:	0100                	addi	s0,sp,128
    1a7c:	6100                	flw	fs0,0(a0)
    1a7e:	0182                	c.slli64	gp
    1a80:	0000                	unimp
    1a82:	0188                	addi	a0,sp,192
    1a84:	0000                	unimp
    1a86:	7f810003          	lb	zero,2040(sp)
    1a8a:	889f 0001 9000      	0x90000001889f
    1a90:	0001                	nop
    1a92:	0100                	addi	s0,sp,128
    1a94:	6100                	flw	fs0,0(a0)
    1a96:	0196                	slli	gp,gp,0x5
    1a98:	0000                	unimp
    1a9a:	01a2                	slli	gp,gp,0x8
    1a9c:	0000                	unimp
    1a9e:	0001                	nop
    1aa0:	205c                	fld	fa5,128(s0)
    1aa2:	0002                	c.slli64	zero
    1aa4:	3e00                	fld	fs0,56(a2)
    1aa6:	0002                	c.slli64	zero
    1aa8:	0100                	addi	s0,sp,128
    1aaa:	5c00                	lw	s0,56(s0)
    1aac:	023e                	slli	tp,tp,0xf
    1aae:	0000                	unimp
    1ab0:	0248                	addi	a0,sp,260
    1ab2:	0000                	unimp
    1ab4:	0001                	nop
    1ab6:	4860                	lw	s0,84(s0)
    1ab8:	0002                	c.slli64	zero
    1aba:	5400                	lw	s0,40(s0)
    1abc:	0002                	c.slli64	zero
    1abe:	0300                	addi	s0,sp,384
    1ac0:	8000                	0x8000
    1ac2:	9f7f                	0x9f7f
    1ac4:	0254                	addi	a3,sp,260
    1ac6:	0000                	unimp
    1ac8:	025e                	slli	tp,tp,0x17
    1aca:	0000                	unimp
    1acc:	0001                	nop
    1ace:	0060                	addi	s0,sp,12
    1ad0:	0000                	unimp
    1ad2:	0000                	unimp
    1ad4:	0000                	unimp
    1ad6:	1a00                	addi	s0,sp,304
    1ad8:	0001                	nop
    1ada:	2200                	fld	fs0,0(a2)
    1adc:	0001                	nop
    1ade:	0100                	addi	s0,sp,128
    1ae0:	5600                	lw	s0,40(a2)
    1ae2:	0122                	slli	sp,sp,0x8
    1ae4:	0000                	unimp
    1ae6:	013e                	slli	sp,sp,0xf
    1ae8:	0000                	unimp
    1aea:	0001                	nop
    1aec:	9061                	srli	s0,s0,0x38
    1aee:	0001                	nop
    1af0:	9600                	0x9600
    1af2:	0001                	nop
    1af4:	0100                	addi	s0,sp,128
    1af6:	5600                	lw	s0,40(a2)
    1af8:	01a6                	slli	gp,gp,0x9
    1afa:	0000                	unimp
    1afc:	01ac                	addi	a1,sp,200
    1afe:	0000                	unimp
    1b00:	0001                	nop
    1b02:	0001ac5b          	0x1ac5b
    1b06:	d000                	sw	s0,32(s0)
    1b08:	0001                	nop
    1b0a:	0100                	addi	s0,sp,128
    1b0c:	5f00                	lw	s0,56(a4)
    1b0e:	01d0                	addi	a2,sp,196
    1b10:	0000                	unimp
    1b12:	0220                	addi	s0,sp,264
    1b14:	0000                	unimp
    1b16:	0001                	nop
    1b18:	2056                	fld	ft0,336(sp)
    1b1a:	0002                	c.slli64	zero
    1b1c:	2400                	fld	fs0,8(s0)
    1b1e:	0002                	c.slli64	zero
    1b20:	0100                	addi	s0,sp,128
    1b22:	5b00                	lw	s0,48(a4)
    1b24:	0224                	addi	s1,sp,264
    1b26:	0000                	unimp
    1b28:	022e                	slli	tp,tp,0xb
    1b2a:	0000                	unimp
    1b2c:	7f7b0003          	lb	zero,2039(s6)
    1b30:	2e9f 0002 3800      	0x380000022e9f
    1b36:	0002                	c.slli64	zero
    1b38:	0100                	addi	s0,sp,128
    1b3a:	5b00                	lw	s0,48(a4)
    1b3c:	023e                	slli	tp,tp,0xf
    1b3e:	0000                	unimp
    1b40:	0262                	slli	tp,tp,0x18
    1b42:	0000                	unimp
    1b44:	0001                	nop
    1b46:	0002625b          	0x2625b
    1b4a:	6600                	flw	fs0,8(a2)
    1b4c:	0002                	c.slli64	zero
    1b4e:	0100                	addi	s0,sp,128
    1b50:	5f00                	lw	s0,56(a4)
    1b52:	0266                	slli	tp,tp,0x19
    1b54:	0000                	unimp
    1b56:	0270                	addi	a2,sp,268
    1b58:	0000                	unimp
    1b5a:	7f7f0003          	lb	zero,2039(t5)
    1b5e:	709f 0002 7200      	0x72000002709f
    1b64:	0002                	c.slli64	zero
    1b66:	0100                	addi	s0,sp,128
    1b68:	5f00                	lw	s0,56(a4)
	...
    1b72:	01d0                	addi	a2,sp,196
    1b74:	0000                	unimp
    1b76:	01e2                	slli	gp,gp,0x18
    1b78:	0000                	unimp
    1b7a:	0001                	nop
    1b7c:	e25c                	fsw	fa5,4(a2)
    1b7e:	0001                	nop
    1b80:	ea00                	fsw	fs0,16(a2)
    1b82:	0001                	nop
    1b84:	0300                	addi	s0,sp,384
    1b86:	7c00                	flw	fs0,56(s0)
    1b88:	9f01                	0x9f01
    1b8a:	01ea                	slli	gp,gp,0x1a
    1b8c:	0000                	unimp
    1b8e:	01f6                	slli	gp,gp,0x1d
    1b90:	0000                	unimp
    1b92:	0001                	nop
    1b94:	fa5c                	fsw	fa5,52(a2)
    1b96:	0001                	nop
    1b98:	0c00                	addi	s0,sp,528
    1b9a:	0002                	c.slli64	zero
    1b9c:	0100                	addi	s0,sp,128
    1b9e:	5c00                	lw	s0,56(s0)
    1ba0:	020c                	addi	a1,sp,256
    1ba2:	0000                	unimp
    1ba4:	0214                	addi	a3,sp,256
    1ba6:	0000                	unimp
    1ba8:	017c0003          	lb	zero,23(s8) # c21 <ntru_encyrpt+0x15>
    1bac:	149f 0002 2000      	0x20000002149f
    1bb2:	0002                	c.slli64	zero
    1bb4:	0100                	addi	s0,sp,128
    1bb6:	5c00                	lw	s0,56(s0)
	...
    1bc0:	01b0                	addi	a2,sp,200
    1bc2:	0000                	unimp
    1bc4:	01d0                	addi	a2,sp,196
    1bc6:	0000                	unimp
    1bc8:	0006                	c.slli	zero,0x1
    1bca:	00122003          	lw	zero,1(tp) # ffff7001 <_stack_start+0xfffe7001>
    1bce:	9f00                	0x9f00
	...
    1bd8:	00e4                	addi	s1,sp,76
    1bda:	0000                	unimp
    1bdc:	01b4                	addi	a3,sp,200
    1bde:	0000                	unimp
    1be0:	0002                	c.slli64	zero
    1be2:	0072                	c.slli	zero,0x1c
    1be4:	01b4                	addi	a3,sp,200
    1be6:	0000                	unimp
    1be8:	01d0                	addi	a2,sp,196
    1bea:	0000                	unimp
    1bec:	000d                	c.nop	3
    1bee:	0075                	c.nop	29
    1bf0:	325d01f3          	0x325d01f3
    1bf4:	2324                	fld	fs1,64(a4)
    1bf6:	1af0090f          	0x1af0090f
    1bfa:	d01c                	sw	a5,32(s0)
    1bfc:	0001                	nop
    1bfe:	7200                	flw	fs0,32(a2)
    1c00:	0002                	c.slli64	zero
    1c02:	0200                	addi	s0,sp,256
    1c04:	7200                	flw	fs0,32(a2)
	...
    1c0e:	de00                	sw	s0,56(a2)
    1c10:	0000                	unimp
    1c12:	1a00                	addi	s0,sp,304
    1c14:	0001                	nop
    1c16:	0100                	addi	s0,sp,128
    1c18:	5600                	lw	s0,40(a2)
    1c1a:	011a                	slli	sp,sp,0x6
    1c1c:	0000                	unimp
    1c1e:	0122                	slli	sp,sp,0x8
    1c20:	0000                	unimp
    1c22:	7f7d0003          	lb	zero,2039(s10)
    1c26:	229f 0001 9000      	0x90000001229f
    1c2c:	0001                	nop
    1c2e:	0100                	addi	s0,sp,128
    1c30:	5600                	lw	s0,40(a2)
    1c32:	0190                	addi	a2,sp,192
    1c34:	0000                	unimp
    1c36:	01ac                	addi	a1,sp,200
    1c38:	0000                	unimp
    1c3a:	7f7d0003          	lb	zero,2039(s10)
    1c3e:	ac9f 0001 d000      	0xd0000001ac9f
    1c44:	0001                	nop
    1c46:	0600                	addi	s0,sp,768
    1c48:	f300                	fsw	fs0,32(a4)
    1c4a:	5d01                	li	s10,-32
    1c4c:	1c31                	addi	s8,s8,-20
    1c4e:	d09f 0001 6200      	0x62000001d09f
    1c54:	0002                	c.slli64	zero
    1c56:	0300                	addi	s0,sp,384
    1c58:	7d00                	flw	fs0,56(a0)
    1c5a:	9f7f                	0x9f7f
    1c5c:	0262                	slli	tp,tp,0x18
    1c5e:	0000                	unimp
    1c60:	0272                	slli	tp,tp,0x1c
    1c62:	0000                	unimp
    1c64:	0006                	c.slli	zero,0x1
    1c66:	315d01f3          	0x315d01f3
    1c6a:	9f1c                	0x9f1c
	...
    1c74:	00e2                	slli	ra,ra,0x18
    1c76:	0000                	unimp
    1c78:	01ba                	slli	gp,gp,0xe
    1c7a:	0000                	unimp
    1c7c:	0001                	nop
    1c7e:	ba62                	fsd	fs8,304(sp)
    1c80:	0001                	nop
    1c82:	d000                	sw	s0,32(s0)
    1c84:	0001                	nop
    1c86:	0600                	addi	s0,sp,768
    1c88:	f300                	fsw	fs0,32(a4)
    1c8a:	5b01                	li	s6,-32
    1c8c:	1c31                	addi	s8,s8,-20
    1c8e:	d09f 0001 7200      	0x72000001d09f
    1c94:	0002                	c.slli64	zero
    1c96:	0100                	addi	s0,sp,128
    1c98:	6200                	flw	fs0,0(a2)
	...
    1ca2:	00e2                	slli	ra,ra,0x18
    1ca4:	0000                	unimp
    1ca6:	011a                	slli	sp,sp,0x6
    1ca8:	0000                	unimp
    1caa:	0001                	nop
    1cac:	1a56                	slli	s4,s4,0x35
    1cae:	0001                	nop
    1cb0:	2200                	fld	fs0,0(a2)
    1cb2:	0001                	nop
    1cb4:	0300                	addi	s0,sp,384
    1cb6:	7d00                	flw	fs0,56(a0)
    1cb8:	9f7f                	0x9f7f
    1cba:	0122                	slli	sp,sp,0x8
    1cbc:	0000                	unimp
    1cbe:	0190                	addi	a2,sp,192
    1cc0:	0000                	unimp
    1cc2:	0001                	nop
    1cc4:	9056                	c.add	zero,s5
    1cc6:	0001                	nop
    1cc8:	ac00                	fsd	fs0,24(s0)
    1cca:	0001                	nop
    1ccc:	0300                	addi	s0,sp,384
    1cce:	7d00                	flw	fs0,56(a0)
    1cd0:	9f7f                	0x9f7f
    1cd2:	01ac                	addi	a1,sp,200
    1cd4:	0000                	unimp
    1cd6:	01d0                	addi	a2,sp,196
    1cd8:	0000                	unimp
    1cda:	0006                	c.slli	zero,0x1
    1cdc:	315d01f3          	0x315d01f3
    1ce0:	9f1c                	0x9f1c
    1ce2:	01d0                	addi	a2,sp,196
    1ce4:	0000                	unimp
    1ce6:	0262                	slli	tp,tp,0x18
    1ce8:	0000                	unimp
    1cea:	7f7d0003          	lb	zero,2039(s10)
    1cee:	629f 0002 7200      	0x72000002629f
    1cf4:	0002                	c.slli64	zero
    1cf6:	0600                	addi	s0,sp,768
    1cf8:	f300                	fsw	fs0,32(a4)
    1cfa:	5d01                	li	s10,-32
    1cfc:	1c31                	addi	s8,s8,-20
    1cfe:	009f 0000 0000      	0x9f
    1d04:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0cde                	slli	s9,s9,0x17
  16:	0000                	unimp
  18:	0f66                	slli	t5,t5,0x19
  1a:	0000                	unimp
  1c:	0128                	addi	a0,sp,136
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	175f 0000 0004      	0x40000175f
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d6a                	slli	s10,s10,0x1a
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	008c                	addi	a1,sp,64
   2:	0000                	unimp
   4:	0d6a                	slli	s10,s10,0x1a
   6:	0000                	unimp
   8:	0f66                	slli	t5,t5,0x19
   a:	0000                	unimp
   c:	108e                	slli	ra,ra,0x23
	...
  16:	0000                	unimp
  18:	ffff                	0xffff
  1a:	ffff                	0xffff
  1c:	0000                	unimp
  1e:	0000                	unimp
  20:	0d6a                	slli	s10,s10,0x1a
  22:	0000                	unimp
  24:	0de0                	addi	s0,sp,732
  26:	0000                	unimp
  28:	0000                	unimp
  2a:	0000                	unimp
  2c:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	0000297b          	0x297b
       4:	01430003          	lb	zero,20(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0xf6>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	6972                	flw	fs2,28(sp)
      28:	33766373          	csrrsi	t1,mhpmevent23,12
      2c:	2d32                	fld	fs10,264(sp)
      2e:	6e75                	lui	t3,0x1d
      30:	776f6e6b          	0x776f6e6b
      34:	2d6e                	fld	fs10,216(sp)
      36:	6c65                	lui	s8,0x19
      38:	2f66                	fld	ft10,88(sp)
      3a:	6e69                	lui	t3,0x1a
      3c:	64756c63          	bltu	a0,t2,694 <ext_euclid+0x60>
      40:	2f65                	jal	7f8 <ext_euclid+0x1c4>
      42:	616d                	addi	sp,sp,240
      44:	6e696863          	bltu	s2,t1,734 <ext_euclid+0x100>
      48:	0065                	c.nop	25
      4a:	74706f2f          	0x74706f2f
      4e:	7369722f          	0x7369722f
      52:	6c2f7663          	bgeu	t5,sp,71e <ext_euclid+0xea>
      56:	6269                	lui	tp,0x1a
      58:	6363672f          	0x6363672f
      5c:	7369722f          	0x7369722f
      60:	32337663          	bgeu	t1,gp,38c <polymult2+0x11a>
      64:	752d                	lui	a0,0xfffeb
      66:	6b6e                	flw	fs6,216(sp)
      68:	6f6e                	flw	ft10,216(sp)
      6a:	652d6e77          	0x652d6e77
      6e:	666c                	flw	fa1,76(a2)
      70:	322e392f          	0x322e392f
      74:	302e                	fld	ft0,232(sp)
      76:	636e692f          	0x636e692f
      7a:	756c                	flw	fa1,108(a0)
  jal x0, default_exc_handler
      7c:	6564                	flw	fs1,76(a0)
      7e:	2f00                	fld	fs0,24(a4)
  jal x0, reset_handler
      80:	2f74706f          	j	47b76 <_stack_start+0x37b76>
  jal x0, default_exc_handler
      84:	6972                	flw	fs2,28(sp)
      86:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      8a:	6972                	flw	fs2,28(sp)
    int line[size_b][size_a + size_b];
      8c:	33766373          	csrrsi	t1,mhpmevent23,12
      90:	2d32                	fld	fs10,264(sp)
      92:	6e75                	lui	t3,0x1d
      94:	776f6e6b          	0x776f6e6b
      98:	2d6e                	fld	fs10,216(sp)
      9a:	6c65                	lui	s8,0x19
      9c:	2f66                	fld	ft10,88(sp)
      9e:	6e69                	lui	t3,0x1a
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      a0:	64756c63          	bltu	a0,t2,6f8 <ext_euclid+0xc4>
      a4:	2f65                	jal	85c <ext_euclid+0x228>
    int pola[size_a];
      a6:	00737973          	csrrci	s2,0x7,6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      aa:	74706f2f          	0x74706f2f
      ae:	7369722f          	0x7369722f
      b2:	722f7663          	bgeu	t5,sp,7de <ext_euclid+0x1aa>
      b6:	7369                	lui	t1,0xffffa
      b8:	32337663          	bgeu	t1,gp,3e4 <polydiv+0x2>
    int line[size_b][size_a + size_b];
      bc:	752d                	lui	a0,0xfffeb
      be:	6b6e                	flw	fs6,216(sp)
    int pola[size_a];
      c0:	6f6e                	flw	ft10,216(sp)
      c2:	652d6e77          	0x652d6e77
    int line[size_b][size_a + size_b];
      c6:	666c                	flw	fa1,76(a2)
      c8:	636e692f          	0x636e692f
    int pola[size_a];
      cc:	756c                	flw	fa1,108(a0)
    int polb[size_b];
      ce:	6564                	flw	fs1,76(a0)
      d0:	0000                	unimp
      d2:	544e                	lw	s0,240(sp)
    int pola[size_a];
      d4:	5552                	lw	a0,52(sp)
    int polb[size_b];
      d6:	345f 5f38 6962      	0x69625f38345f
    int line[size_b][size_a + size_b];
      dc:	4d74                	lw	a3,92(a0)
    int pola[size_a];
      de:	632e                	flw	ft6,200(sp)
      e0:	0000                	unimp
    int polb[size_b];
      e2:	0000                	unimp
            line[i][j] = 0;
      e4:	645f 6665 7561      	0x75616665645f
    for (i = 0; i < size_b; ++i){
      ea:	746c                	flw	fa1,108(s0)
      ec:	745f 7079 7365      	0x73657079745f
            product[j] = 0;
      f2:	682e                	flw	fa6,200(sp)
      f4:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
      f6:	0000                	unimp
      f8:	64647473          	csrrci	s0,0x646,8
    for (i = 0; i < size_a; ++i){
      fc:	6665                	lui	a2,0x19
      fe:	682e                	flw	fa6,200(sp)
     100:	0200                	addi	s0,sp,256
     102:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     104:	745f 7079 7365      	0x73657079745f
    if(star_mult == 1){
     10a:	682e                	flw	fa6,200(sp)
     10c:	0300                	addi	s0,sp,384
     10e:	0000                	unimp
     110:	6572                	flw	fa0,28(sp)
     112:	6e65                	lui	t3,0x19
     114:	2e74                	fld	fa3,216(a2)
     116:	0068                	addi	a0,sp,12
     118:	6c000003          	lb	zero,1728(zero) # 6c0 <ext_euclid+0x8c>
        for (j = size_b -1; j >= 0; j = j-1){
     11c:	2e6b636f          	jal	t1,b6402 <_stack_start+0xa6402>
            for (k = size_a-1; k >= 0; k = k-1 ){
     120:	0068                	addi	a0,sp,12
            product[j] = 0;
     122:	5f000003          	lb	zero,1520(zero) # 5f0 <polydiv+0x20e>
     126:	69647473          	csrrci	s0,0x696,8
            line[i][j] = 0;
     12a:	746e                	flw	fs0,248(sp)
            product[j] = 0;
     12c:	682e                	flw	fa6,200(sp)
     12e:	0300                	addi	s0,sp,384
        for(j = 0; j < size_a + size_b -1; ++j){
     130:	0000                	unimp
     132:	6c647473          	csrrci	s0,0x6c6,8
     136:	6269                	lui	tp,0x1a
    for (i = 0; i < size_b; ++i){
     138:	682e                	flw	fa6,200(sp)
     13a:	0400                	addi	s0,sp,512
     13c:	0000                	unimp
     13e:	623c                	flw	fa5,64(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
     140:	6975                	lui	s2,0x1d
     142:	746c                	flw	fa1,108(s0)
        pola[i] = a[i];
     144:	692d                	lui	s2,0xb
     146:	3e6e                	fld	ft8,248(sp)
     148:	0000                	unimp
     14a:	0000                	unimp
     14c:	0500                	addi	s0,sp,640
            pola[i] = pola[i] + mod;
     14e:	004e                	c.slli	zero,0x13
     150:	0205                	addi	tp,tp,1
        while (pola[i] < 0){
     152:	008c                	addi	a1,sp,64
     154:	0000                	unimp
     156:	05010c03          	lb	s8,80(sp)
        pola[i] = pola[i] % mod;
     15a:	0305                	addi	t1,t1,1
     15c:	0902                	c.slli64	s2
    for (i = 0; i < size_a; ++i){
     15e:	0000                	unimp
     160:	0501                	addi	a0,a0,0
        pola[i] = pola[i] % mod;
     162:	061d                	addi	a2,a2,7
     164:	00090003          	lb	zero,0(s2) # b000 <_stack_len+0x7000>
            pola[i] = pola[i] + mod;
     168:	0100                	addi	s0,sp,128
     16a:	0905                	addi	s2,s2,1
        polb[i] = b[i];
     16c:	08090003          	lb	zero,128(s2)
     170:	0100                	addi	s0,sp,128
     172:	4e05                	li	t3,1
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     174:	0c097e03          	0xc097e03
        while (polb[i] < 0){
     178:	0100                	addi	s0,sp,128
     17a:	0905                	addi	s2,s2,1
        polb[i] = polb[i] % mod;
     17c:	06090503          	lb	a0,96(s2)
    for (i = 0; i < size_b; ++i){
     180:	0100                	addi	s0,sp,128
     182:	4e05                	li	t3,1
        polb[i] = polb[i] % mod;
     184:	04097b03          	0x4097b03
    for (i = 0; i < size_b; ++i){
     188:	0100                	addi	s0,sp,128
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
     18a:	0905                	addi	s2,s2,1
     18c:	0a090203          	lb	tp,160(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     190:	0100                	addi	s0,sp,128
     192:	4e05                	li	t3,1
        for(j = 0; j < size_a + size_b -1; ++j){
     194:	02097e03          	0x2097e03
    for (i = 0; i < size_b; ++i){
     198:	0100                	addi	s0,sp,128
     19a:	0905                	addi	s2,s2,1
     19c:	06090203          	lb	tp,96(s2)
     1a0:	0100                	addi	s0,sp,128
     1a2:	04090303          	lb	t1,64(s2)
    for(j = 0; j < size_a + size_b -1; ++j){
     1a6:	0100                	addi	s0,sp,128
     1a8:	4e05                	li	t3,1
    for(j = 0; j < size_a + size_b -1; ++j){
     1aa:	04097b03          	0x4097b03
     1ae:	0100                	addi	s0,sp,128
}
     1b0:	0905                	addi	s2,s2,1
     1b2:	00090203          	lb	tp,0(s2)
     1b6:	0100                	addi	s0,sp,128
     1b8:	06090303          	lb	t1,96(s2)
     1bc:	0100                	addi	s0,sp,128
     1be:	04090103          	lb	sp,64(s2)
     1c2:	0100                	addi	s0,sp,128
     1c4:	06097f03          	0x6097f03
     1c8:	0100                	addi	s0,sp,128
     1ca:	02090103          	lb	sp,32(s2)
     1ce:	0100                	addi	s0,sp,128
                line[size_b-1-j][k] = pola[k]*polb[j];
     1d0:	04097c03          	0x4097c03
     1d4:	0100                	addi	s0,sp,128
     1d6:	0505                	addi	a0,a0,1
     1d8:	0306                	slli	t1,t1,0x1
     1da:	0901                	addi	s2,s2,0
     1dc:	0004                	0x4
     1de:	0301                	addi	t1,t1,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     1e0:	0901                	addi	s2,s2,0
                line[size_b-1-j][k] = pola[k]*polb[j];
     1e2:	0000                	unimp
     1e4:	0301                	addi	t1,t1,0
     1e6:	0901                	addi	s2,s2,0
     1e8:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     1ea:	0501                	addi	a0,a0,0
     1ec:	0609                	addi	a2,a2,2
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	00090003          	lb	zero,0(s2)
     1f2:	0100                	addi	s0,sp,128
     1f4:	0505                	addi	a0,a0,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f6:	0306                	slli	t1,t1,0x1
     1f8:	0901                	addi	s2,s2,0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     1fa:	0004                	0x4
     1fc:	0501                	addi	a0,a0,0
     1fe:	0609                	addi	a2,a2,2
     200:	00090003          	lb	zero,0(s2)
     204:	0100                	addi	s0,sp,128
     206:	0505                	addi	a0,a0,1
     208:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     20a:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     20e:	0501                	addi	a0,a0,0
     210:	0614                	addi	a3,sp,768
     212:	00090203          	lb	tp,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     216:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     218:	0505                	addi	a0,a0,1
     21a:	06097e03          	0x6097e03
     21e:	0100                	addi	s0,sp,128
            line[i][j] = line[i][j] % mod;
     220:	0c05                	addi	s8,s8,1
        for(j = 0; j < size_a + size_b -1; ++j){
     222:	02090003          	lb	zero,32(s2)
            line[i][j] = line[i][j] % mod;
     226:	0100                	addi	s0,sp,128
     228:	1805                	addi	a6,a6,-31
     22a:	02090303          	lb	t1,32(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     22e:	0100                	addi	s0,sp,128
     230:	1105                	addi	sp,sp,-31
    for (i = 0; i < size_b; ++i){
     232:	0200                	addi	s0,sp,256
     234:	0104                	addi	s1,sp,128
     236:	0306                	slli	t1,t1,0x1
     238:	097d                	addi	s2,s2,31
        for(j = 0; j < size_a + size_b -1; ++j){
     23a:	0008                	0x8
     23c:	0501                	addi	a0,a0,0
            product[j] += line[i][j];
     23e:	0005                	c.nop	1
     240:	0402                	c.slli64	s0
     242:	0601                	addi	a2,a2,0
     244:	00090003          	lb	zero,0(s2)
     248:	0100                	addi	s0,sp,128
     24a:	0c05                	addi	s8,s8,1
     24c:	06090803          	lb	a6,96(s2)
     250:	0100                	addi	s0,sp,128
     252:	1105                	addi	sp,sp,-31
        for(i = 0; i < size_b; ++i){
     254:	0200                	addi	s0,sp,256
     256:	0104                	addi	s1,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     258:	0306                	slli	t1,t1,0x1
     25a:	0900                	addi	s0,sp,144
     25c:	0002                	c.slli64	zero
        for(i = 0; i < size_b; ++i){
     25e:	0501                	addi	a0,a0,0
     260:	0005                	c.nop	1
        product[j] = product[j] % mod;
     262:	0402                	c.slli64	s0
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	0601                	addi	a2,a2,0
     266:	00090003          	lb	zero,0(s2)
        product[j] = product[j] % mod;
     26a:	0100                	addi	s0,sp,128
     26c:	0c05                	addi	s8,s8,1
     26e:	06090903          	lb	s2,96(s2)
    int line[size_b][size_a + size_b];
     272:	0100                	addi	s0,sp,128
     274:	1105                	addi	sp,sp,-31
     276:	0200                	addi	s0,sp,256
     278:	0104                	addi	s1,sp,128
     27a:	0306                	slli	t1,t1,0x1
     27c:	0900                	addi	s0,sp,144
     27e:	0002                	c.slli64	zero
     280:	0501                	addi	a0,a0,0
     282:	0005                	c.nop	1
     284:	0402                	c.slli64	s0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     286:	0601                	addi	a2,a2,0
     288:	00090003          	lb	zero,0(s2)
     28c:	0100                	addi	s0,sp,128
     28e:	0306                	slli	t1,t1,0x1
     290:	0909                	addi	s2,s2,2
     292:	0004                	0x4
     294:	0501                	addi	a0,a0,0
     296:	00030607          	0x30607
    int line[size_b][size_a + size_b];
     29a:	0009                	c.nop	2
     29c:	0100                	addi	s0,sp,128
     29e:	1d05                	addi	s10,s10,-31
    int pola[size_a];
     2a0:	0200                	addi	s0,sp,256
     2a2:	0104                	addi	s1,sp,128
     2a4:	0306                	slli	t1,t1,0x1
     2a6:	0908                	addi	a0,sp,144
    int line[size_b][size_a + size_b];
     2a8:	0010                	0x10
    int pola[size_a];
     2aa:	0501                	addi	a0,a0,0
     2ac:	0009                	c.nop	2
    int polb[size_b];
     2ae:	0402                	c.slli64	s0
     2b0:	0601                	addi	a2,a2,0
     2b2:	00090003          	lb	zero,0(s2)
     2b6:	0100                	addi	s0,sp,128
     2b8:	1405                	addi	s0,s0,-31
    int line[size_b][size_a + size_b];
     2ba:	04090103          	lb	sp,64(s2)
    int pola[size_a];
     2be:	0100                	addi	s0,sp,128
     2c0:	0d05                	addi	s10,s10,1
    int polb[size_b];
     2c2:	0200                	addi	s0,sp,256
            line[i][j] = 0;
     2c4:	0304                	addi	s1,sp,384
     2c6:	0306                	slli	t1,t1,0x1
     2c8:	095f 0004 0501      	0x5010004095f
            product2[j] = 0;
     2ce:	0018                	0x18
     2d0:	0402                	c.slli64	s0
     2d2:	01030603          	lb	a2,16(t1) # ffffa010 <_stack_start+0xfffea010>
    for (i = 0; i < size_b; ++i){
     2d6:	0009                	c.nop	2
     2d8:	0100                	addi	s0,sp,128
    for(i = 0; i < size_a; ++i){
     2da:	0200                	addi	s0,sp,256
     2dc:	0304                	addi	s1,sp,384
     2de:	06097f03          	0x6097f03
    for(i = 0; i < size_b; ++i){
     2e2:	0100                	addi	s0,sp,128
     2e4:	0d05                	addi	s10,s10,1
    if(star_mult == 1){
     2e6:	0200                	addi	s0,sp,256
     2e8:	0304                	addi	s1,sp,384
     2ea:	0306                	slli	t1,t1,0x1
     2ec:	0901                	addi	s2,s2,0
     2ee:	0004                	0x4
     2f0:	0501                	addi	a0,a0,0
     2f2:	0018                	0x18
        for (j = size_b -1; j >= 0; j = j-1){
     2f4:	0402                	c.slli64	s0
     2f6:	00030603          	lb	a2,0(t1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2fa:	0009                	c.nop	2
            product2[j] = 0;
     2fc:	0100                	addi	s0,sp,128
     2fe:	2c05                	jal	52e <polydiv+0x14c>
     300:	0200                	addi	s0,sp,256
            line[i][j] = 0;
     302:	0304                	addi	s1,sp,384
     304:	0306                	slli	t1,t1,0x1
            product2[j] = 0;
     306:	097e                	slli	s2,s2,0x1f
     308:	0004                	0x4
        for(j = 0; j < size_a + size_b -1; ++j){
     30a:	0501                	addi	a0,a0,0
     30c:	0014                	0x14
     30e:	0402                	c.slli64	s0
     310:	0301                	addi	t1,t1,0
    for (i = 0; i < size_b; ++i){
     312:	0900                	addi	s0,sp,144
     314:	0004                	0x4
     316:	0501                	addi	a0,a0,0
     318:	0009                	c.nop	2
        for(j = 0; j < size_a + size_b -1; ++j){
     31a:	0402                	c.slli64	s0
     31c:	0601                	addi	a2,a2,0
        pola[i] = a[i];
     31e:	00090003          	lb	zero,0(s2)
     322:	0100                	addi	s0,sp,128
     324:	1d05                	addi	s10,s10,-31
     326:	0200                	addi	s0,sp,256
     328:	0204                	addi	s1,sp,256
    for(i = 0; i < size_a; ++i){
     32a:	0306                	slli	t1,t1,0x1
        pola[i] = a[i];
     32c:	097f                	0x97f
     32e:	0004                	0x4
    for(i = 0; i < size_a; ++i){
     330:	0501                	addi	a0,a0,0
        polb[i] = b[i];
     332:	0103060f          	0x103060f
     336:	0809                	addi	a6,a6,2
     338:	0100                	addi	s0,sp,128
     33a:	0905                	addi	s2,s2,1
     33c:	0306                	slli	t1,t1,0x1
    for(i = 0; i < size_b; ++i){
     33e:	0908                	addi	a0,sp,144
        polb[i] = b[i];
     340:	0004                	0x4
     342:	0501                	addi	a0,a0,0
    for(i = 0; i < size_b; ++i){
     344:	0614                	addi	a3,sp,768
                line[size_b-1-j][k] = pola[k]*polb[j];
     346:	00090003          	lb	zero,0(s2)
     34a:	0100                	addi	s0,sp,128
     34c:	1105                	addi	sp,sp,-31
     34e:	06090003          	lb	zero,96(s2)
     352:	0100                	addi	s0,sp,128
     354:	1505                	addi	a0,a0,-31
            for (k = size_a-1; k >= 0; k = k-1 ){
     356:	04090203          	lb	tp,64(s2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     35a:	0100                	addi	s0,sp,128
     35c:	0f05                	addi	t5,t5,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     35e:	0306                	slli	t1,t1,0x1
     360:	097f                	0x97f
        for (j = size_b -1; j >= 0; j = j-1){
     362:	0004                	0x4
     364:	0501                	addi	a0,a0,0
     366:	0614                	addi	a3,sp,768
     368:	00090003          	lb	zero,0(s2)
     36c:	0100                	addi	s0,sp,128
     36e:	0f05                	addi	t5,t5,1
     370:	04090003          	lb	zero,64(s2)
        for(i = 0; i < size_b; ++i){
     374:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     376:	0905                	addi	s2,s2,1
     378:	0200                	addi	s0,sp,256
}
     37a:	0204                	addi	s1,sp,256
     37c:	0306                	slli	t1,t1,0x1
     37e:	00040903          	lb	s2,0(s0) # e000 <_stack>
     382:	0501                	addi	a0,a0,0
     384:	0402001b          	0x402001b
     388:	0602                	c.slli64	a2
     38a:	00090003          	lb	zero,0(s2)
     38e:	0100                	addi	s0,sp,128
     390:	1d05                	addi	s10,s10,-31
     392:	0200                	addi	s0,sp,256
     394:	0204                	addi	s1,sp,256
     396:	04097b03          	0x4097b03
            for (k = size_a-1; k >= 0; k = k-1 ){
     39a:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     39c:	1105                	addi	sp,sp,-31
     39e:	0200                	addi	s0,sp,256
     3a0:	0204                	addi	s1,sp,256
     3a2:	04090503          	lb	a0,64(s2)
     3a6:	0100                	addi	s0,sp,128
     3a8:	1d05                	addi	s10,s10,-31
     3aa:	0200                	addi	s0,sp,256
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ac:	0204                	addi	s1,sp,256
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3ae:	0306                	slli	t1,t1,0x1
     3b0:	0004097b          	0x4097b
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b4:	0501                	addi	a0,a0,0
     3b6:	030d                	addi	t1,t1,3
        for (j = size_b -1; j >= 0; j = j-1){
     3b8:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     3bc:	0501                	addi	a0,a0,0
     3be:	061f 0003 0009      	0x90003061f
            product2[j] += line[i][j];
     3c4:	0100                	addi	s0,sp,128
        for(i = 0; i < size_b; ++i){
     3c6:	0905                	addi	s2,s2,1
            product2[j] += line[i][j];
     3c8:	0306                	slli	t1,t1,0x1
     3ca:	00040907          	0x40907
     3ce:	0501                	addi	a0,a0,0
     3d0:	0614                	addi	a3,sp,768
     3d2:	00090003          	lb	zero,0(s2)
        for(i = 0; i < size_b; ++i){
     3d6:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     3d8:	1105                	addi	sp,sp,-31
     3da:	06090003          	lb	zero,96(s2)
        for(i = 0; i < size_b; ++i){
     3de:	0100                	addi	s0,sp,128
     3e0:	1505                	addi	a0,a0,-31
    int v[size_N];
     3e2:	02090203          	lb	tp,32(s2)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3e6:	0100                	addi	s0,sp,128
    int v[size_N];
     3e8:	0f05                	addi	t5,t5,1
     3ea:	0306                	slli	t1,t1,0x1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     3ec:	097f                	0x97f
     3ee:	0002                	c.slli64	zero
     3f0:	0501                	addi	a0,a0,0
     3f2:	0614                	addi	a3,sp,768
     3f4:	00090003          	lb	zero,0(s2)
     3f8:	0100                	addi	s0,sp,128
     3fa:	0f05                	addi	t5,t5,1
     3fc:	02090003          	lb	zero,32(s2)
     400:	0100                	addi	s0,sp,128
     402:	0905                	addi	s2,s2,1
     404:	0200                	addi	s0,sp,256
     406:	0204                	addi	s1,sp,256
    int v[size_N];
     408:	0306                	slli	t1,t1,0x1
     40a:	00040903          	lb	s2,0(s0)
    int q[size_N];
     40e:	0501                	addi	a0,a0,0
     410:	0402001b          	0x402001b
    int num_temp[size_N];
     414:	0602                	c.slli64	a2
     416:	00090003          	lb	zero,0(s2)
    int denum_temp[size_D];
     41a:	0100                	addi	s0,sp,128
     41c:	1d05                	addi	s10,s10,-31
     41e:	0200                	addi	s0,sp,256
    int num_temp[size_N];
     420:	0204                	addi	s1,sp,256
    int denum_temp[size_D];
     422:	04097b03          	0x4097b03
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     426:	0100                	addi	s0,sp,128
     428:	1105                	addi	sp,sp,-31
    int denum_temp[size_D];
     42a:	0200                	addi	s0,sp,256
     42c:	0204                	addi	s1,sp,256
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     42e:	04090503          	lb	a0,64(s2)
    int v[size_N];
     432:	0100                	addi	s0,sp,128
    int denum_temp[size_D];
     434:	1d05                	addi	s10,s10,-31
    for (i = 0; i < size_N; ++i){
     436:	0200                	addi	s0,sp,256
     438:	0204                	addi	s1,sp,256
     43a:	0306                	slli	t1,t1,0x1
     43c:	0004097b          	0x4097b
     440:	0501                	addi	a0,a0,0
    for (i = 0; i < size_D; ++i) {
     442:	030d                	addi	t1,t1,3
     444:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    for (i = 0; i < size_N; ++i){
     448:	0501                	addi	a0,a0,0
     44a:	061f 0003 0009      	0x90003061f
    for (i = size_D-1; i >= 0; i = i-1){
     450:	0100                	addi	s0,sp,128
     452:	0705                	addi	a4,a4,1
     454:	04090603          	lb	a2,64(s2)
     458:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     45a:	1d05                	addi	s10,s10,-31
     45c:	0200                	addi	s0,sp,256
        if ( (b_N*u)%mod == 1 )
     45e:	0104                	addi	s1,sp,128
    for (u = 0; u < mod; ++u){
     460:	0306                	slli	t1,t1,0x1
     462:	0901                	addi	s2,s2,0
     464:	0002                	c.slli64	zero
     466:	0501                	addi	a0,a0,0
        num_temp[i] = num[i];
     468:	0009                	c.nop	2
     46a:	0402                	c.slli64	s0
     46c:	0601                	addi	a2,a2,0
     46e:	00090003          	lb	zero,0(s2)
        while (num_temp[i] < 0) {
     472:	0100                	addi	s0,sp,128
     474:	0f05                	addi	t5,t5,1
     476:	04091003          	lh	zero,64(s2)
        num_temp[i] = num_temp[i] % mod;
     47a:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     47c:	1105                	addi	sp,sp,-31
     47e:	0200                	addi	s0,sp,256
        num_temp[i] = num_temp[i] % mod;
     480:	0104                	addi	s1,sp,128
     482:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_N; ++i){
     484:	097f                	0x97f
            num_temp[i] = num_temp[i] + mod;
     486:	0002                	c.slli64	zero
     488:	0501                	addi	a0,a0,0
        denum_temp[i] = denum[i];
     48a:	0005                	c.nop	1
     48c:	0402                	c.slli64	s0
     48e:	0601                	addi	a2,a2,0
     490:	00090003          	lb	zero,0(s2)
        while (denum_temp[i] < 0) {
     494:	0100                	addi	s0,sp,128
     496:	0c090003          	lb	zero,192(s2)
        denum_temp[i] = denum_temp[i] % mod;
     49a:	0100                	addi	s0,sp,128
     49c:	0b05                	addi	s6,s6,1
    for (i = 0; i < size_D; ++i) {
     49e:	02090703          	lb	a4,32(s2)
        denum_temp[i] = denum_temp[i] % mod;
     4a2:	0100                	addi	s0,sp,128
     4a4:	1005                	c.nop	-31
    for (i = 0; i < size_D; ++i) {
     4a6:	0200                	addi	s0,sp,256
            denum_temp[i] = denum_temp[i] + mod;
     4a8:	0104                	addi	s1,sp,128
     4aa:	0306                	slli	t1,t1,0x1
        q[i] = 0;
     4ac:	0900                	addi	s0,sp,144
     4ae:	0002                	c.slli64	zero
     4b0:	0501                	addi	a0,a0,0
     4b2:	0005                	c.nop	1
        v[i] = 0;
     4b4:	0402                	c.slli64	s0
        q[i] = 0;
     4b6:	0601                	addi	a2,a2,0
     4b8:	00090003          	lb	zero,0(s2)
        v[i] = 0;
     4bc:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     4be:	0b05                	addi	s6,s6,1
     4c0:	04090703          	lb	a4,64(s2)
    for (i = size_D-1; i >= 0; i = i-1){
     4c4:	0100                	addi	s0,sp,128
     4c6:	1005                	c.nop	-31
        if ( (b_N*u)%mod == 1 )
     4c8:	0200                	addi	s0,sp,256
     4ca:	0104                	addi	s1,sp,128
     4cc:	0306                	slli	t1,t1,0x1
     4ce:	0900                	addi	s0,sp,144
     4d0:	0002                	c.slli64	zero
    for (u = 0; u < mod; ++u){
     4d2:	0501                	addi	a0,a0,0
     4d4:	0005                	c.nop	1
        if( num_temp[i] != 0 )
     4d6:	0402                	c.slli64	s0
    for (i = size_N-1; i >= 0; i = i-1){
     4d8:	0601                	addi	a2,a2,0
     4da:	00090003          	lb	zero,0(s2)
     4de:	0100                	addi	s0,sp,128
     4e0:	0306                	slli	t1,t1,0x1
     4e2:	0904                	addi	s1,sp,144
     4e4:	0004                	0x4
    while (d >= d2){
     4e6:	0301                	addi	t1,t1,0
     4e8:	0902                	c.slli64	s2
    for(i = 0; i < size_N; ++i){
     4ea:	0000                	unimp
        result[i] = q[i];
     4ec:	0501                	addi	a0,a0,0
     4ee:	0601                	addi	a2,a2,0
     4f0:	00090103          	lb	sp,0(s2)
    for(i = 0; i < size_N; ++i){
     4f4:	0100                	addi	s0,sp,128
     4f6:	1105                	addi	sp,sp,-31
    for(i = size_N; i < (2*size_N); ++i){
     4f8:	0200                	addi	s0,sp,256
     4fa:	0304                	addi	s1,sp,384
        result[i] = num_temp[i-size_N];
     4fc:	0306                	slli	t1,t1,0x1
     4fe:	095e                	slli	s2,s2,0x17
     500:	0020                	addi	s0,sp,8
     502:	0501                	addi	a0,a0,0
    for(i = size_N; i < (2*size_N); ++i){
     504:	0025                	c.nop	9
     506:	0402                	c.slli64	s0
}
     508:	00030603          	lb	a2,0(t1)
     50c:	0409                	addi	s0,s0,2
     50e:	0100                	addi	s0,sp,128
     510:	2b05                	jal	a40 <generate_keys+0x128>
     512:	0200                	addi	s0,sp,256
     514:	0304                	addi	s1,sp,384
     516:	04090003          	lb	zero,64(s2)
     51a:	0100                	addi	s0,sp,128
     51c:	2e05                	jal	84c <ext_euclid+0x218>
     51e:	0200                	addi	s0,sp,256
     520:	0304                	addi	s1,sp,384
     522:	02090003          	lb	zero,32(s2)
     526:	0100                	addi	s0,sp,128
     528:	2a05                	jal	658 <ext_euclid+0x24>
     52a:	0200                	addi	s0,sp,256
     52c:	0304                	addi	s1,sp,384
     52e:	06097f03          	0x6097f03
        v[(d-d2)] = u*r_d;
     532:	0100                	addi	s0,sp,128
     534:	2e05                	jal	864 <ext_euclid+0x230>
     536:	0200                	addi	s0,sp,256
     538:	0304                	addi	s1,sp,384
     53a:	02090103          	lb	sp,32(s2)
     53e:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     540:	2505                	jal	b60 <generate_keys+0x248>
     542:	0200                	addi	s0,sp,256
     544:	0304                	addi	s1,sp,384
     546:	04090003          	lb	zero,64(s2)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     54a:	0100                	addi	s0,sp,128
     54c:	2805                	jal	57c <polydiv+0x19a>
     54e:	0200                	addi	s0,sp,256
     550:	0304                	addi	s1,sp,384
     552:	0306                	slli	t1,t1,0x1
     554:	097f                	0x97f
        for (i = 0; i < size_N; ++i){
     556:	0004                	0x4
     558:	0501                	addi	a0,a0,0
     55a:	0020                	addi	s0,sp,8
     55c:	0402                	c.slli64	s0
     55e:	0301                	addi	t1,t1,0
        for (i = 0; i < size_N; ++i){
     560:	0900                	addi	s0,sp,144
     562:	0000                	unimp
     564:	0501                	addi	a0,a0,0
     566:	000d                	c.nop	3
        for (i = 0; i < size_N; ++i){
     568:	0402                	c.slli64	s0
     56a:	0601                	addi	a2,a2,0
     56c:	00090003          	lb	zero,0(s2)
        for(i = 0; i < size_N; ++i){
     570:	0100                	addi	s0,sp,128
     572:	2505                	jal	b92 <generate_keys+0x27a>
     574:	0200                	addi	s0,sp,256
        for (i = size_N-1; i >= 0; i = i-1){
     576:	0204                	addi	s1,sp,256
     578:	0306                	slli	t1,t1,0x1
     57a:	097f                	0x97f
     57c:	0004                	0x4
     57e:	0501                	addi	a0,a0,0
     580:	04020027          	0x4020027
     584:	0602                	c.slli64	a2
     586:	00090003          	lb	zero,0(s2)
        for (i = 0; i < size_N; ++i){
     58a:	0100                	addi	s0,sp,128
     58c:	1405                	addi	s0,s0,-31
            v[i] = v[i] % mod;
     58e:	08090103          	lb	sp,128(s2)
     592:	0100                	addi	s0,sp,128
     594:	1105                	addi	sp,sp,-31
        for (i = 0; i < size_N; ++i){
     596:	0200                	addi	s0,sp,256
                product[i] = product[i] + mod;
     598:	0304                	addi	s1,sp,384
     59a:	0306                	slli	t1,t1,0x1
            while (product[i] < 0) {
     59c:	0908                	addi	a0,sp,144
     59e:	0004                	0x4
     5a0:	0501                	addi	a0,a0,0
            product[i] = product[i] % mod;
     5a2:	0029                	c.nop	10
     5a4:	0402                	c.slli64	s0
        for (i = 0; i < size_N; ++i){
     5a6:	00030603          	lb	a2,0(t1)
            product[i] = product[i] % mod;
     5aa:	0409                	addi	s0,s0,2
     5ac:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     5ae:	2f05                	jal	cde <ntru_deceypt+0x3c>
            num_temp[i] = num_temp[i] - product[i];
     5b0:	0200                	addi	s0,sp,256
     5b2:	0304                	addi	s1,sp,384
     5b4:	04090003          	lb	zero,64(s2)
     5b8:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     5ba:	3205                	jal	fffffeda <_stack_start+0xfffefeda>
     5bc:	0200                	addi	s0,sp,256
            num_temp[i] = num_temp[i] - product[i];
     5be:	0304                	addi	s1,sp,384
     5c0:	02090003          	lb	zero,32(s2)
        for (i = 0; i < size_N; ++i){
     5c4:	0100                	addi	s0,sp,128
                num_temp[i] = num_temp[i] + mod;
     5c6:	2a05                	jal	6f6 <ext_euclid+0xc2>
     5c8:	0200                	addi	s0,sp,256
            while (num_temp[i] < 0){
     5ca:	0304                	addi	s1,sp,384
     5cc:	06097f03          	0x6097f03
            num_temp[i] = num_temp[i] % mod;
     5d0:	0100                	addi	s0,sp,128
     5d2:	3205                	jal	fffffef2 <_stack_start+0xfffefef2>
        for (i = 0; i < size_N; ++i){
     5d4:	0200                	addi	s0,sp,256
     5d6:	0304                	addi	s1,sp,384
            num_temp[i] = num_temp[i] % mod;
     5d8:	02090103          	lb	sp,32(s2)
        for (i = 0; i < size_N; ++i){
     5dc:	0100                	addi	s0,sp,128
            q[i] = q[i] + v[i];
     5de:	2905                	jal	a0e <generate_keys+0xf6>
     5e0:	0200                	addi	s0,sp,256
     5e2:	0304                	addi	s1,sp,384
     5e4:	04090003          	lb	zero,64(s2)
        for(i = 0; i < size_N; ++i){
     5e8:	0100                	addi	s0,sp,128
     5ea:	2805                	jal	61a <polydiv+0x238>
            q[i] = q[i] + v[i];
     5ec:	0200                	addi	s0,sp,256
            q[i] = q[i] % mod;
     5ee:	0304                	addi	s1,sp,384
     5f0:	0306                	slli	t1,t1,0x1
     5f2:	097f                	0x97f
     5f4:	0004                	0x4
        for(i = 0; i < size_N; ++i){
     5f6:	0501                	addi	a0,a0,0
            if( num_temp[i] != 0 )
     5f8:	0020                	addi	s0,sp,8
        for (i = size_N-1; i >= 0; i = i-1){
     5fa:	0402                	c.slli64	s0
     5fc:	0301                	addi	t1,t1,0
            v[i] = 0;
     5fe:	0900                	addi	s0,sp,144
     600:	0000                	unimp
     602:	0501                	addi	a0,a0,0
     604:	000d                	c.nop	3
     606:	0402                	c.slli64	s0
        for (i = 0; i < size_N; ++i){
     608:	0601                	addi	a2,a2,0
     60a:	00090003          	lb	zero,0(s2)
     60e:	0100                	addi	s0,sp,128
        result[i] = q[i];
     610:	2505                	jal	c30 <ntru_encyrpt+0x24>
     612:	0200                	addi	s0,sp,256
     614:	0204                	addi	s1,sp,256
     616:	0306                	slli	t1,t1,0x1
     618:	097f                	0x97f
     61a:	0004                	0x4
    for(i = 0; i < size_N; ++i){
     61c:	0501                	addi	a0,a0,0
        result[i] = q[i];
     61e:	04020027          	0x4020027
        result[i] = num_temp[i-size_N];
     622:	0602                	c.slli64	a2
     624:	00090003          	lb	zero,0(s2)
     628:	0100                	addi	s0,sp,128
     62a:	0d05                	addi	s10,s10,1
     62c:	0200                	addi	s0,sp,256
    for(i = size_N; i < (2*size_N); ++i){
     62e:	0304                	addi	s1,sp,384
     630:	0306                	slli	t1,t1,0x1
     632:	090a                	slli	s2,s2,0x2
    int ri_2[size]; // MX-ring poly, a
     634:	0008                	0x8
     636:	0501                	addi	a0,a0,0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     638:	0025                	c.nop	9
    int ri_2[size]; // MX-ring poly, a
     63a:	0402                	c.slli64	s0
     63c:	00030603          	lb	a2,0(t1)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     640:	0009                	c.nop	2
     642:	0100                	addi	s0,sp,128
     644:	2c05                	jal	874 <ext_euclid+0x240>
     646:	0200                	addi	s0,sp,256
     648:	0304                	addi	s1,sp,384
     64a:	02097f03          	0x2097f03
     64e:	0100                	addi	s0,sp,128
     650:	2505                	jal	c70 <ntru_encyrpt+0x64>
     652:	0200                	addi	s0,sp,256
     654:	0304                	addi	s1,sp,384
     656:	04090103          	lb	sp,64(s2)
    int ri_2[size]; // MX-ring poly, a
     65a:	0100                	addi	s0,sp,128
     65c:	1805                	addi	a6,a6,-31
     65e:	0200                	addi	s0,sp,256
    int ri_1[size]; // f-random poly, f[N] = 0, b
     660:	0304                	addi	s1,sp,384
     662:	04090003          	lb	zero,64(s2)
    int ri[size];
     666:	0100                	addi	s0,sp,128
     668:	2c05                	jal	898 <ext_euclid+0x264>
     66a:	0200                	addi	s0,sp,256
    int ti_1[size]; // ti_1[0] = 1
     66c:	0304                	addi	s1,sp,384
     66e:	0306                	slli	t1,t1,0x1
     670:	097f                	0x97f
    int ti[size];
     672:	0004                	0x4
     674:	0501                	addi	a0,a0,0
     676:	0014                	0x14
    int qi_1[size];
     678:	0402                	c.slli64	s0
     67a:	0301                	addi	t1,t1,0
     67c:	0900                	addi	s0,sp,144
    int temp[size];
     67e:	0000                	unimp
     680:	0501                	addi	a0,a0,0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     682:	0009                	c.nop	2
     684:	0402                	c.slli64	s0
    int ri_2[size]; // MX-ring poly, a
     686:	0601                	addi	a2,a2,0
     688:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size; ++i) {
     68c:	0100                	addi	s0,sp,128
     68e:	1d05                	addi	s10,s10,-31
        ti_2[i] = 0;
     690:	0200                	addi	s0,sp,256
     692:	0204                	addi	s1,sp,256
     694:	0306                	slli	t1,t1,0x1
     696:	097f                	0x97f
    for (i = 0; i < size; ++i) {
     698:	0004                	0x4
     69a:	0501                	addi	a0,a0,0
    ti_1[0] = 1;
     69c:	0103060f          	0x103060f
     6a0:	0809                	addi	a6,a6,2
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6a2:	0100                	addi	s0,sp,128
     6a4:	0d05                	addi	s10,s10,1
     6a6:	0200                	addi	s0,sp,256
     6a8:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     6aa:	0306                	slli	t1,t1,0x1
     6ac:	0908                	addi	a0,sp,144
        ri_2[i] = polyR[i];
     6ae:	0004                	0x4
     6b0:	0501                	addi	a0,a0,0
     6b2:	0022                	c.slli	zero,0x8
     6b4:	0402                	c.slli64	s0
     6b6:	00030603          	lb	a2,0(t1)
    for (i = 0; i < size; ++i) {
     6ba:	0009                	c.nop	2
        ri_2[i] = polyR[i];
     6bc:	0100                	addi	s0,sp,128
     6be:	1805                	addi	a6,a6,-31
        ri_1[i] = polyf[i];
     6c0:	0200                	addi	s0,sp,256
     6c2:	0304                	addi	s1,sp,384
     6c4:	04090003          	lb	zero,64(s2)
     6c8:	0100                	addi	s0,sp,128
     6ca:	2005                	jal	6ea <ext_euclid+0xb6>
     6cc:	0200                	addi	s0,sp,256
     6ce:	0304                	addi	s1,sp,384
        ti_2[i] = 0;
     6d0:	04097f03          	0x4097f03
     6d4:	0100                	addi	s0,sp,128
     6d6:	2205                	jal	7f6 <ext_euclid+0x1c2>
        ti_1[i] = 0;
     6d8:	0200                	addi	s0,sp,256
     6da:	0304                	addi	s1,sp,384
     6dc:	02090103          	lb	sp,32(s2)
    for (i = 0; i < size; ++i) {
     6e0:	0100                	addi	s0,sp,128
     6e2:	1805                	addi	a6,a6,-31
                ri_2[i] = ri_2[i] + mod;
     6e4:	0200                	addi	s0,sp,256
     6e6:	0304                	addi	s1,sp,384
            while (ri_2[i] < 0) {
     6e8:	06090003          	lb	zero,96(s2)
     6ec:	0100                	addi	s0,sp,128
            ri_2[i] = ri_2[i] % mod;
     6ee:	2005                	jal	70e <ext_euclid+0xda>
     6f0:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     6f2:	0304                	addi	s1,sp,384
            ri_2[i] = ri_2[i] % mod;
     6f4:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     6f6:	097f                	0x97f
     6f8:	0006                	c.slli	zero,0x1
     6fa:	0501                	addi	a0,a0,0
     6fc:	0014                	0x14
     6fe:	0402                	c.slli64	s0
     700:	0301                	addi	t1,t1,0
     702:	0900                	addi	s0,sp,144
        for (i = 0; i < N + 1; ++i) {
     704:	0000                	unimp
     706:	0501                	addi	a0,a0,0
     708:	0009                	c.nop	2
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     70a:	0402                	c.slli64	s0
     70c:	0601                	addi	a2,a2,0
     70e:	00090003          	lb	zero,0(s2)
     712:	0100                	addi	s0,sp,128
     714:	2805                	jal	744 <ext_euclid+0x110>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     716:	0200                	addi	s0,sp,256
     718:	0204                	addi	s1,sp,256
     71a:	0306                	slli	t1,t1,0x1
     71c:	097f                	0x97f
     71e:	0004                	0x4
     720:	0501                	addi	a0,a0,0
     722:	0103060f          	0x103060f
        for (i = 0; i < N + 1; ++i) {
     726:	0609                	addi	a2,a2,2
     728:	0100                	addi	s0,sp,128
     72a:	0905                	addi	s2,s2,1
     72c:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     72e:	0304                	addi	s1,sp,384
     730:	0306                	slli	t1,t1,0x1
     732:	00040907          	0x40907
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     736:	0501                	addi	a0,a0,0
     738:	0021                	c.nop	8
     73a:	0402                	c.slli64	s0
     73c:	00030603          	lb	a2,0(t1)
        for (i = 0; i < N + 1; ++i) {
     740:	0009                	c.nop	2
     742:	0100                	addi	s0,sp,128
     744:	2805                	jal	774 <ext_euclid+0x140>
     746:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     748:	0304                	addi	s1,sp,384
     74a:	02097f03          	0x2097f03
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     74e:	0100                	addi	s0,sp,128
     750:	2105                	jal	b70 <generate_keys+0x258>
     752:	0200                	addi	s0,sp,256
     754:	0304                	addi	s1,sp,384
     756:	04090103          	lb	sp,64(s2)
     75a:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     75c:	1405                	addi	s0,s0,-31
     75e:	0200                	addi	s0,sp,256
     760:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     762:	04090003          	lb	zero,64(s2)
     766:	0100                	addi	s0,sp,128
     768:	2805                	jal	798 <ext_euclid+0x164>
        for (i = 0; i < N + 1; ++i) {
     76a:	0200                	addi	s0,sp,256
     76c:	0304                	addi	s1,sp,384
     76e:	0306                	slli	t1,t1,0x1
     770:	097f                	0x97f
        for (i = 0; i < N + 1; ++i) {
     772:	0004                	0x4
     774:	0501                	addi	a0,a0,0
     776:	0346                	slli	t1,t1,0x11
     778:	0909                	addi	s2,s2,2
        controlR = 0;
     77a:	0002                	c.slli64	zero
        for (i = 0; i < N + 1; ++i) {
     77c:	0501                	addi	a0,a0,0
     77e:	0305                	addi	t1,t1,1
     780:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
        for (j = 0; j < mod; ++j) {
     784:	0501                	addi	a0,a0,0
            if (((ri_2[0] * j) % mod) == 1)
     786:	061d                	addi	a2,a2,7
        for (j = 0; j < mod; ++j) {
     788:	00090003          	lb	zero,0(s2)
     78c:	0100                	addi	s0,sp,128
     78e:	0905                	addi	s2,s2,1
     790:	08090003          	lb	zero,128(s2)
        for (i = 0; i < N + 1; ++i) {
     794:	0100                	addi	s0,sp,128
     796:	4605                	li	a2,1
    }
     798:	0c097d03          	0xc097d03
     79c:	0100                	addi	s0,sp,128
     79e:	0905                	addi	s2,s2,1
     7a0:	12090303          	lb	t1,288(s2)
     7a4:	0100                	addi	s0,sp,128
     7a6:	4605                	li	a2,1
     7a8:	04097d03          	0x4097d03
     7ac:	0100                	addi	s0,sp,128
     7ae:	0905                	addi	s2,s2,1
     7b0:	00090303          	lb	t1,0(s2)
     7b4:	0100                	addi	s0,sp,128
     7b6:	04090303          	lb	t1,64(s2)
     7ba:	0100                	addi	s0,sp,128
     7bc:	08097d03          	0x8097d03
     7c0:	0100                	addi	s0,sp,128
                ri_1[i] = ri_1[i] + mod;
     7c2:	02090303          	lb	t1,32(s2)
            while (ri_1[i] < 0) {
     7c6:	0100                	addi	s0,sp,128
     7c8:	04090103          	lb	sp,64(s2)
            ri_1[i] = ri_1[i] % mod;
     7cc:	0100                	addi	s0,sp,128
     7ce:	06097f03          	0x6097f03
        for (i = 0; i < N + 1; ++i) {
     7d2:	0100                	addi	s0,sp,128
            ri_1[i] = ri_1[i] % mod;
     7d4:	02090103          	lb	sp,32(s2)
        for (i = 0; i < N + 1; ++i) {
     7d8:	0100                	addi	s0,sp,128
            ri[i - (N + 1)] = res[i];
     7da:	04097c03          	0x4097c03
     7de:	0100                	addi	s0,sp,128
     7e0:	0505                	addi	a0,a0,1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7e2:	0306                	slli	t1,t1,0x1
     7e4:	0901                	addi	s2,s2,0
            ri[i - (N + 1)] = res[i];
     7e6:	0004                	0x4
     7e8:	0301                	addi	t1,t1,0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7ea:	0901                	addi	s2,s2,0
            temp[i] = ri_2[i] - ri[i];
     7ec:	0000                	unimp
     7ee:	0301                	addi	t1,t1,0
     7f0:	0901                	addi	s2,s2,0
     7f2:	0000                	unimp
     7f4:	0501                	addi	a0,a0,0
     7f6:	0609                	addi	a2,a2,2
     7f8:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     7fc:	0100                	addi	s0,sp,128
            temp[i] = ri_2[i] - ri[i];
     7fe:	0505                	addi	a0,a0,1
     800:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     802:	0901                	addi	s2,s2,0
     804:	0004                	0x4
                temp[i] = temp[i] + mod;
     806:	0501                	addi	a0,a0,0
     808:	0609                	addi	a2,a2,2
            while (temp[i] < 0) {
     80a:	00090003          	lb	zero,0(s2)
     80e:	0100                	addi	s0,sp,128
            temp[i] = temp[i] % mod;
     810:	0505                	addi	a0,a0,1
     812:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     814:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
            temp[i] = temp[i] % mod;
     818:	0501                	addi	a0,a0,0
     81a:	0614                	addi	a3,sp,768
        for (i = 0; i < N + 1; ++i) {
     81c:	00090203          	lb	tp,0(s2)
            qi_1[i] = res1[i];
     820:	0100                	addi	s0,sp,128
     822:	0505                	addi	a0,a0,1
     824:	06097e03          	0x6097e03
     828:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     82a:	0c05                	addi	s8,s8,1
            qi_1[i] = res1[i];
     82c:	02090003          	lb	zero,32(s2)
                qi_1[i] = qi_1[i] + mod;
     830:	0100                	addi	s0,sp,128
     832:	1905                	addi	s2,s2,-31
            while (qi_1[i] < 0) {
     834:	02090303          	lb	t1,32(s2)
     838:	0100                	addi	s0,sp,128
            qi_1[i] = qi_1[i] % mod;
     83a:	1105                	addi	sp,sp,-31
     83c:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     83e:	0104                	addi	s1,sp,128
     840:	0306                	slli	t1,t1,0x1
            qi_1[i] = qi_1[i] % mod;
     842:	097d                	addi	s2,s2,31
     844:	0008                	0x8
        for (i = 0; i < N + 1; ++i) {
     846:	0501                	addi	a0,a0,0
            temp[i] = res2[i];
     848:	0005                	c.nop	1
     84a:	0402                	c.slli64	s0
     84c:	0601                	addi	a2,a2,0
     84e:	00090003          	lb	zero,0(s2)
     852:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     854:	0b05                	addi	s6,s6,1
            temp[i] = res2[i];
     856:	04090703          	lb	a4,64(s2)
                temp[i] = temp[i] + mod;
     85a:	0100                	addi	s0,sp,128
     85c:	1005                	c.nop	-31
     85e:	0200                	addi	s0,sp,256
            while (temp[i] < 0) {
     860:	0104                	addi	s1,sp,128
     862:	0306                	slli	t1,t1,0x1
     864:	0900                	addi	s0,sp,144
     866:	0002                	c.slli64	zero
            temp[i] = temp[i] % mod;
     868:	0501                	addi	a0,a0,0
     86a:	0005                	c.nop	1
        for (i = 0; i < N + 1; ++i) {
     86c:	0402                	c.slli64	s0
     86e:	0601                	addi	a2,a2,0
            temp[i] = temp[i] % mod;
     870:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     874:	0100                	addi	s0,sp,128
            ti[i] = ti_2[i] - temp[i];
     876:	0b05                	addi	s6,s6,1
     878:	04090503          	lb	a0,64(s2)
     87c:	0100                	addi	s0,sp,128
     87e:	1005                	c.nop	-31
     880:	0200                	addi	s0,sp,256
     882:	0104                	addi	s1,sp,128
     884:	0306                	slli	t1,t1,0x1
     886:	0900                	addi	s0,sp,144
     888:	0002                	c.slli64	zero
     88a:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     88c:	0005                	c.nop	1
            ti[i] = ti_2[i] - temp[i];
     88e:	0402                	c.slli64	s0
     890:	0601                	addi	a2,a2,0
        for (i = 0; i < N + 1; ++i) {
     892:	00090003          	lb	zero,0(s2)
                ti[i] = ti[i] + mod;
     896:	0100                	addi	s0,sp,128
     898:	0306                	slli	t1,t1,0x1
            while (ti[i] < 0) {
     89a:	0906                	slli	s2,s2,0x1
     89c:	0004                	0x4
     89e:	0501                	addi	a0,a0,0
            ti[i] = ti[i] % mod;
     8a0:	00030607          	0x30607
        for (i = 0; i < N + 1; ++i) {
     8a4:	0009                	c.nop	2
     8a6:	0100                	addi	s0,sp,128
            ti[i] = ti[i] % mod;
     8a8:	1d05                	addi	s10,s10,-31
     8aa:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     8ac:	0104                	addi	s1,sp,128
            ri_2[i] = ri_1[i];
     8ae:	0306                	slli	t1,t1,0x1
     8b0:	0908                	addi	a0,sp,144
     8b2:	000e                	c.slli	zero,0x3
     8b4:	0501                	addi	a0,a0,0
     8b6:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     8b8:	0402                	c.slli64	s0
            ri_2[i] = ri_1[i];
     8ba:	0601                	addi	a2,a2,0
            ri_1[i] = ri[i];
     8bc:	00090003          	lb	zero,0(s2)
     8c0:	0100                	addi	s0,sp,128
            ti_2[i] = ti_1[i];
     8c2:	1405                	addi	s0,s0,-31
     8c4:	04090103          	lb	sp,64(s2)
     8c8:	0100                	addi	s0,sp,128
     8ca:	0d05                	addi	s10,s10,1
            ri_1[i] = ri[i];
     8cc:	0200                	addi	s0,sp,256
            ti_2[i] = ti_1[i];
     8ce:	0304                	addi	s1,sp,384
     8d0:	0306                	slli	t1,t1,0x1
     8d2:	00040967          	jalr	s2,s0
            controlR += ri[i];
     8d6:	0501                	addi	a0,a0,0
            ti_2[i] = ti_1[i];
     8d8:	0019                	c.nop	6
     8da:	0402                	c.slli64	s0
            ti_1[i] = ti[i];
     8dc:	01030603          	lb	a2,16(t1)
     8e0:	0009                	c.nop	2
     8e2:	0100                	addi	s0,sp,128
            qi_1[i] = 0;
     8e4:	1805                	addi	a6,a6,-31
     8e6:	0200                	addi	s0,sp,256
     8e8:	0304                	addi	s1,sp,384
     8ea:	06097f03          	0x6097f03
        for (i = 0; i < N + 1; ++i) {
     8ee:	0100                	addi	s0,sp,128
            if (((ri_2[0] * j) % mod) == 1)
     8f0:	0d05                	addi	s10,s10,1
     8f2:	0200                	addi	s0,sp,256
     8f4:	0304                	addi	s1,sp,384
     8f6:	0306                	slli	t1,t1,0x1
     8f8:	0901                	addi	s2,s2,0
     8fa:	0004                	0x4
     8fc:	0501                	addi	a0,a0,0
     8fe:	0019                	c.nop	6
        for (j = 0; j < mod; ++j) {
     900:	0402                	c.slli64	s0
     902:	00030603          	lb	a2,0(t1)
        for (i = 0; i < N + 1; ++i) {
     906:	0009                	c.nop	2
     908:	0100                	addi	s0,sp,128
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     90a:	2c05                	jal	b3a <generate_keys+0x222>
     90c:	0200                	addi	s0,sp,256
     90e:	0304                	addi	s1,sp,384
     910:	0306                	slli	t1,t1,0x1
     912:	097e                	slli	s2,s2,0x1f
     914:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     916:	0501                	addi	a0,a0,0
int* generate_keys(int N, int p, int q){
     918:	0014                	0x14
     91a:	0402                	c.slli64	s0
     91c:	0301                	addi	t1,t1,0
     91e:	0900                	addi	s0,sp,144
     920:	0004                	0x4
     922:	0501                	addi	a0,a0,0
     924:	0009                	c.nop	2
     926:	0402                	c.slli64	s0
     928:	0601                	addi	a2,a2,0
     92a:	00090003          	lb	zero,0(s2)
     92e:	0100                	addi	s0,sp,128
     930:	1d05                	addi	s10,s10,-31
     932:	0200                	addi	s0,sp,256
     934:	0204                	addi	s1,sp,256
     936:	0306                	slli	t1,t1,0x1
     938:	097f                	0x97f
     93a:	0004                	0x4
     93c:	0501                	addi	a0,a0,0
     93e:	0103060f          	0x103060f
     942:	0809                	addi	a6,a6,2
     944:	0100                	addi	s0,sp,128
     946:	0905                	addi	s2,s2,1
     948:	0200                	addi	s0,sp,256
     94a:	0304                	addi	s1,sp,384
     94c:	0306                	slli	t1,t1,0x1
     94e:	00040907          	0x40907
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     952:	0501                	addi	a0,a0,0
     954:	0011                	c.nop	4
     956:	0402                	c.slli64	s0
     958:	00030603          	lb	a2,0(t1)
     95c:	0409                	addi	s0,s0,2
     95e:	0100                	addi	s0,sp,128
     960:	1405                	addi	s0,s0,-31
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     962:	0200                	addi	s0,sp,256
     964:	0304                	addi	s1,sp,384
     966:	04090003          	lb	zero,64(s2)
     96a:	0100                	addi	s0,sp,128
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96c:	1105                	addi	sp,sp,-31
     96e:	0200                	addi	s0,sp,256
     970:	0304                	addi	s1,sp,384
     972:	02090003          	lb	zero,32(s2)
     976:	0100                	addi	s0,sp,128
     978:	1c05                	addi	s8,s8,-31
     97a:	0200                	addi	s0,sp,256
     97c:	0304                	addi	s1,sp,384
     97e:	02097f03          	0x2097f03
     982:	0100                	addi	s0,sp,128
     984:	1105                	addi	sp,sp,-31
     986:	0200                	addi	s0,sp,256
     988:	0304                	addi	s1,sp,384
     98a:	02090103          	lb	sp,32(s2)
     98e:	0100                	addi	s0,sp,128
     990:	1c05                	addi	s8,s8,-31
     992:	0200                	addi	s0,sp,256
     994:	0304                	addi	s1,sp,384
     996:	0306                	slli	t1,t1,0x1
     998:	097f                	0x97f
     99a:	0004                	0x4
     99c:	0501                	addi	a0,a0,0
     99e:	0009                	c.nop	2
     9a0:	0402                	c.slli64	s0
     9a2:	09060303          	lb	t1,144(a2) # 19090 <_stack_start+0x9090>
     9a6:	0002                	c.slli64	zero
     9a8:	0501                	addi	a0,a0,0
     9aa:	0011                	c.nop	4
     9ac:	0402                	c.slli64	s0
     9ae:	00030603          	lb	a2,0(t1)
     9b2:	0409                	addi	s0,s0,2
     9b4:	0100                	addi	s0,sp,128
     9b6:	1405                	addi	s0,s0,-31
     9b8:	0200                	addi	s0,sp,256
     9ba:	0304                	addi	s1,sp,384
     9bc:	04090003          	lb	zero,64(s2)
     9c0:	0100                	addi	s0,sp,128
     9c2:	1105                	addi	sp,sp,-31
     9c4:	0200                	addi	s0,sp,256
     9c6:	0304                	addi	s1,sp,384
     9c8:	02090003          	lb	zero,32(s2)
     9cc:	0100                	addi	s0,sp,128
     9ce:	1c05                	addi	s8,s8,-31
     9d0:	0200                	addi	s0,sp,256
     9d2:	0304                	addi	s1,sp,384
     9d4:	02097f03          	0x2097f03
    int polyR[N+1];
     9d8:	0100                	addi	s0,sp,128
     9da:	1105                	addi	sp,sp,-31
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9dc:	0200                	addi	s0,sp,256
    int polyR[N+1];
     9de:	0304                	addi	s1,sp,384
     9e0:	02090103          	lb	sp,32(s2)
     9e4:	0100                	addi	s0,sp,128
     9e6:	1c05                	addi	s8,s8,-31
     9e8:	0200                	addi	s0,sp,256
     9ea:	0304                	addi	s1,sp,384
    polyR[N] = 1;
     9ec:	0306                	slli	t1,t1,0x1
     9ee:	097f                	0x97f
     9f0:	0004                	0x4
     9f2:	0501                	addi	a0,a0,0
     9f4:	0011                	c.nop	4
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f6:	0402                	c.slli64	s0
     9f8:	09090303          	lb	t1,144(s2)
     9fc:	0002                	c.slli64	zero
     9fe:	0501                	addi	a0,a0,0
     a00:	0025                	c.nop	9
     a02:	0402                	c.slli64	s0
     a04:	00030603          	lb	a2,0(t1)
     a08:	0409                	addi	s0,s0,2
     a0a:	0100                	addi	s0,sp,128
     a0c:	2b05                	jal	f3c <memset+0x7e>
     a0e:	0200                	addi	s0,sp,256
     a10:	0304                	addi	s1,sp,384
     a12:	04090003          	lb	zero,64(s2)
     a16:	0100                	addi	s0,sp,128
     a18:	2e05                	jal	d48 <ntru_deceypt+0xa6>
     a1a:	0200                	addi	s0,sp,256
     a1c:	0304                	addi	s1,sp,384
     a1e:	02090003          	lb	zero,32(s2)
     a22:	0100                	addi	s0,sp,128
     a24:	2a05                	jal	b54 <generate_keys+0x23c>
     a26:	0200                	addi	s0,sp,256
     a28:	0304                	addi	s1,sp,384
     a2a:	06097f03          	0x6097f03
     a2e:	0100                	addi	s0,sp,128
     a30:	2e05                	jal	d60 <ntru_deceypt+0xbe>
     a32:	0200                	addi	s0,sp,256
     a34:	0304                	addi	s1,sp,384
     a36:	02090103          	lb	sp,32(s2)
     a3a:	0100                	addi	s0,sp,128
     a3c:	2505                	jal	105c <main+0xf6>
     a3e:	0200                	addi	s0,sp,256
     a40:	0304                	addi	s1,sp,384
     a42:	04090003          	lb	zero,64(s2)
     a46:	0100                	addi	s0,sp,128
     a48:	2805                	jal	a78 <generate_keys+0x160>
     a4a:	0200                	addi	s0,sp,256
     a4c:	0304                	addi	s1,sp,384
     a4e:	0306                	slli	t1,t1,0x1
     a50:	097f                	0x97f
     a52:	0002                	c.slli64	zero
     a54:	0501                	addi	a0,a0,0
     a56:	0020                	addi	s0,sp,8
     a58:	0402                	c.slli64	s0
    polyR[0] = -1;
     a5a:	0301                	addi	t1,t1,0
     a5c:	0900                	addi	s0,sp,144
    for(i = 1; i < N; ++i){
     a5e:	0000                	unimp
     a60:	0501                	addi	a0,a0,0
     a62:	000d                	c.nop	3
     a64:	0402                	c.slli64	s0
    for (i = N; i < 55; ++i ){
     a66:	0601                	addi	a2,a2,0
     a68:	00090003          	lb	zero,0(s2)
     a6c:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     a6e:	2505                	jal	108e <__CTOR_LIST__>
        random_keys[i] = f[i];
     a70:	0200                	addi	s0,sp,256
     a72:	0204                	addi	s1,sp,256
     a74:	0306                	slli	t1,t1,0x1
     a76:	097f                	0x97f
    for(i = 0; i < N; ++i){
     a78:	0004                	0x4
     a7a:	0501                	addi	a0,a0,0
     a7c:	04020027          	0x4020027
    for(i = N; i < (2*N); ++i){
     a80:	0602                	c.slli64	a2
     a82:	00090003          	lb	zero,0(s2)
     a86:	0100                	addi	s0,sp,128
        random_keys[i] = g[i-N];
     a88:	1d05                	addi	s10,s10,-31
     a8a:	0200                	addi	s0,sp,256
     a8c:	0104                	addi	s1,sp,128
     a8e:	0306                	slli	t1,t1,0x1
    for(i = N; i < (2*N); ++i){
     a90:	0900                	addi	s0,sp,144
     a92:	0006                	c.slli	zero,0x1
    for(i = (2*N); i < (3*N); ++i){
     a94:	0501                	addi	a0,a0,0
     a96:	0009                	c.nop	2
     a98:	0402                	c.slli64	s0
    fp = ext_euclid(polyR, f, (N+1), p);
     a9a:	0601                	addi	a2,a2,0
     a9c:	00090003          	lb	zero,0(s2)
     aa0:	0100                	addi	s0,sp,128
     aa2:	0f05                	addi	t5,t5,1
     aa4:	0c091003          	lh	zero,192(s2)
        random_keys[i] = fp[i-(2*N)];
     aa8:	0100                	addi	s0,sp,128
     aaa:	1005                	c.nop	-31
     aac:	0200                	addi	s0,sp,256
     aae:	0104                	addi	s1,sp,128
    for(i = (2*N); i < (3*N); ++i){
     ab0:	0306                	slli	t1,t1,0x1
     ab2:	097f                	0x97f
    fq = ext_euclid(polyR, f, (N+1), q);
     ab4:	0002                	c.slli64	zero
     ab6:	0501                	addi	a0,a0,0
     ab8:	0005                	c.nop	1
     aba:	0402                	c.slli64	s0
     abc:	0601                	addi	a2,a2,0
     abe:	00090003          	lb	zero,0(s2)
    for(i = (3*N); i < (4*N); ++i){
     ac2:	0100                	addi	s0,sp,128
     ac4:	0306                	slli	t1,t1,0x1
     ac6:	00040907          	0x40907
        random_keys[i] = fq[i-(3*N)];
     aca:	0301                	addi	t1,t1,0
     acc:	0902                	c.slli64	s2
     ace:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     ad0:	0501                	addi	a0,a0,0
     ad2:	0601                	addi	a2,a2,0
    fg = polymult2(fq, N, g, N, 0);
     ad4:	00090103          	lb	sp,0(s2)
     ad8:	0100                	addi	s0,sp,128
     ada:	1405                	addi	s0,s0,-31
     adc:	1e096803          	0x1e096803
    for(i = 0; i < (2*N-1); ++i){
     ae0:	0100                	addi	s0,sp,128
     ae2:	1105                	addi	sp,sp,-31
     ae4:	0200                	addi	s0,sp,256
     ae6:	0304                	addi	s1,sp,384
     ae8:	0306                	slli	t1,t1,0x1
     aea:	0908                	addi	a0,sp,144
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     aec:	0004                	0x4
     aee:	0501                	addi	a0,a0,0
     af0:	0029                	c.nop	10
     af2:	0402                	c.slli64	s0
    for(i = (4*N); i < (5*N); ++i){
     af4:	00030603          	lb	a2,0(t1)
     af8:	0409                	addi	s0,s0,2
     afa:	0100                	addi	s0,sp,128
     afc:	2f05                	jal	122c <_edata+0xc>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     afe:	0200                	addi	s0,sp,256
     b00:	0304                	addi	s1,sp,384
     b02:	04090003          	lb	zero,64(s2)
    for(i = (4*N); i < (5*N); ++i){
     b06:	0100                	addi	s0,sp,128
     b08:	3205                	jal	428 <polydiv+0x46>
     b0a:	0200                	addi	s0,sp,256
    for(i = (5*N); i < (6*N+1); ++i){
     b0c:	0304                	addi	s1,sp,384
     b0e:	02090003          	lb	zero,32(s2)
        random_keys[i] = polyR[i-(5*N)];
     b12:	0100                	addi	s0,sp,128
     b14:	2a05                	jal	c44 <ntru_encyrpt+0x38>
     b16:	0200                	addi	s0,sp,256
    for(i = (5*N); i < (6*N+1); ++i){
     b18:	0304                	addi	s1,sp,384
     b1a:	06097f03          	0x6097f03
     b1e:	0100                	addi	s0,sp,128
     b20:	3205                	jal	440 <polydiv+0x5e>
     b22:	0200                	addi	s0,sp,256
}
     b24:	0304                	addi	s1,sp,384
     b26:	02090103          	lb	sp,32(s2)
     b2a:	0100                	addi	s0,sp,128
     b2c:	2905                	jal	f5c <memset+0x9e>
     b2e:	0200                	addi	s0,sp,256
     b30:	0304                	addi	s1,sp,384
     b32:	04090003          	lb	zero,64(s2)
     b36:	0100                	addi	s0,sp,128
     b38:	2805                	jal	b68 <generate_keys+0x250>
     b3a:	0200                	addi	s0,sp,256
     b3c:	0304                	addi	s1,sp,384
     b3e:	0306                	slli	t1,t1,0x1
     b40:	097f                	0x97f
     b42:	0002                	c.slli64	zero
     b44:	0501                	addi	a0,a0,0
     b46:	0020                	addi	s0,sp,8
     b48:	0402                	c.slli64	s0
     b4a:	0301                	addi	t1,t1,0
     b4c:	0900                	addi	s0,sp,144
     b4e:	0000                	unimp
     b50:	0501                	addi	a0,a0,0
     b52:	000d                	c.nop	3
     b54:	0402                	c.slli64	s0
     b56:	0601                	addi	a2,a2,0
     b58:	00090003          	lb	zero,0(s2)
     b5c:	0100                	addi	s0,sp,128
     b5e:	2505                	jal	117e <_endtext+0xde>
     b60:	0200                	addi	s0,sp,256
     b62:	0204                	addi	s1,sp,256
        polyR[i] = 0;
     b64:	0306                	slli	t1,t1,0x1
     b66:	097f                	0x97f
     b68:	0004                	0x4
     b6a:	0501                	addi	a0,a0,0
     b6c:	04020027          	0x4020027
    for(i = 1; i < N; ++i){
     b70:	0602                	c.slli64	a2
        f[i] = 0;
     b72:	00090003          	lb	zero,0(s2)
     b76:	0100                	addi	s0,sp,128
     b78:	0d05                	addi	s10,s10,1
     b7a:	0200                	addi	s0,sp,256
     b7c:	0304                	addi	s1,sp,384
     b7e:	0306                	slli	t1,t1,0x1
        g[i] = 0;
     b80:	090a                	slli	s2,s2,0x2
     b82:	0008                	0x8
     b84:	0501                	addi	a0,a0,0
     b86:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    for (i = N; i < 55; ++i ){
     b8a:	00030603          	lb	a2,0(t1)
        random_keys[i] = f[i];
     b8e:	0009                	c.nop	2
     b90:	0100                	addi	s0,sp,128
     b92:	1905                	addi	s2,s2,-31
     b94:	0200                	addi	s0,sp,256
     b96:	0304                	addi	s1,sp,384
     b98:	04090003          	lb	zero,64(s2)
     b9c:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     b9e:	2005                	jal	bbe <generate_keys+0x2a6>
        random_keys[i] = f[i];
     ba0:	0200                	addi	s0,sp,256
    for(i = 0; i < N; ++i){
     ba2:	0304                	addi	s1,sp,384
        random_keys[i] = g[i-N];
     ba4:	02097f03          	0x2097f03
     ba8:	0100                	addi	s0,sp,128
     baa:	2305                	jal	10ca <_endtext+0x2a>
     bac:	0200                	addi	s0,sp,256
    for(i = N; i < (2*N); ++i){
     bae:	0304                	addi	s1,sp,384
     bb0:	02090103          	lb	sp,32(s2)
        random_keys[i] = fp[i-(2*N)];
     bb4:	0100                	addi	s0,sp,128
     bb6:	1905                	addi	s2,s2,-31
     bb8:	0200                	addi	s0,sp,256
     bba:	0304                	addi	s1,sp,384
     bbc:	06090003          	lb	zero,96(s2)
    for(i = (2*N); i < (3*N); ++i){
     bc0:	0100                	addi	s0,sp,128
     bc2:	2005                	jal	be2 <generate_keys+0x2ca>
        random_keys[i] = fq[i-(3*N)];
     bc4:	0200                	addi	s0,sp,256
     bc6:	0304                	addi	s1,sp,384
     bc8:	0306                	slli	t1,t1,0x1
     bca:	097f                	0x97f
     bcc:	0006                	c.slli	zero,0x1
     bce:	0501                	addi	a0,a0,0
     bd0:	0014                	0x14
    for(i = (3*N); i < (4*N); ++i){
     bd2:	0402                	c.slli64	s0
        random_keys[i] = fq[i-(3*N)];
     bd4:	0301                	addi	t1,t1,0
    for(i = (3*N); i < (4*N); ++i){
     bd6:	0900                	addi	s0,sp,144
        fg[i] = fg[i]*p;
     bd8:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     bda:	0501                	addi	a0,a0,0
     bdc:	0009                	c.nop	2
        fg[i] = fg[i]*p;
     bde:	0402                	c.slli64	s0
     be0:	0601                	addi	a2,a2,0
     be2:	00090003          	lb	zero,0(s2)
    for(i = 0; i < (2*N-1); ++i){
     be6:	0100                	addi	s0,sp,128
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     be8:	2805                	jal	c18 <ntru_encyrpt+0xc>
     bea:	0200                	addi	s0,sp,256
     bec:	0204                	addi	s1,sp,256
     bee:	0306                	slli	t1,t1,0x1
     bf0:	097f                	0x97f
     bf2:	0004                	0x4
    for(i = (4*N); i < (5*N); ++i){
     bf4:	0501                	addi	a0,a0,0
     bf6:	0103060f          	0x103060f
        random_keys[i] = polyR[i-(5*N)];
     bfa:	0609                	addi	a2,a2,2
     bfc:	0100                	addi	s0,sp,128
     bfe:	4305                	li	t1,1
     c00:	0306                	slli	t1,t1,0x1
     c02:	0004090b          	0x4090b
    for(i = (5*N); i < (6*N+1); ++i){
     c06:	0501                	addi	a0,a0,0
        random_keys[i] = polyR[i-(5*N)];
     c08:	0305                	addi	t1,t1,1
    for(i = (5*N); i < (6*N+1); ++i){
     c0a:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c0e:	0301                	addi	t1,t1,0
     c10:	0901                	addi	s2,s2,0
     c12:	0000                	unimp
     c14:	0301                	addi	t1,t1,0
     c16:	0902                	c.slli64	s2
     c18:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1a:	0501                	addi	a0,a0,0
     c1c:	0609                	addi	a2,a2,2
     c1e:	00090003          	lb	zero,0(s2)
     c22:	0100                	addi	s0,sp,128
     c24:	4305                	li	t1,1
     c26:	04097a03          	0x4097a03
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c2a:	0100                	addi	s0,sp,128
     c2c:	0905                	addi	s2,s2,1
     c2e:	02090603          	lb	a2,32(s2)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c32:	0100                	addi	s0,sp,128
    temp = polymult(public_key,N,random_val,48,q,0);
     c34:	4305                	li	t1,1
     c36:	04097a03          	0x4097a03
     c3a:	0100                	addi	s0,sp,128
     c3c:	0905                	addi	s2,s2,1
     c3e:	1c090603          	lb	a2,448(s2)
     c42:	0100                	addi	s0,sp,128
     c44:	06090103          	lb	sp,96(s2)
    for(i = 0; i < 48; ++i){
     c48:	0100                	addi	s0,sp,128
     c4a:	06090203          	lb	tp,96(s2)
        temp[i] = temp[i] + message[i];
     c4e:	0100                	addi	s0,sp,128
     c50:	04090103          	lb	sp,64(s2)
     c54:	0100                	addi	s0,sp,128
     c56:	08097f03          	0x8097f03
     c5a:	0100                	addi	s0,sp,128
     c5c:	02090103          	lb	sp,32(s2)
    for(i = 0; i < 48; ++i){
     c60:	0100                	addi	s0,sp,128
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c62:	4305                	li	t1,1
     c64:	04097603          	0x4097603
     c68:	0100                	addi	s0,sp,128
     c6a:	0905                	addi	s2,s2,1
     c6c:	04090a03          	lb	s4,64(s2)
     c70:	0100                	addi	s0,sp,128
     c72:	4305                	li	t1,1
    for(i = (2*N); i < (3*N); ++i){
     c74:	04097603          	0x4097603
     c78:	0100                	addi	s0,sp,128
     c7a:	0905                	addi	s2,s2,1
     c7c:	02090603          	lb	a2,32(s2)
}
     c80:	0100                	addi	s0,sp,128
     c82:	0505                	addi	a0,a0,1
     c84:	0306                	slli	t1,t1,0x1
     c86:	0901                	addi	s2,s2,0
     c88:	0004                	0x4
     c8a:	0301                	addi	t1,t1,0
     c8c:	0901                	addi	s2,s2,0
     c8e:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     c90:	0301                	addi	t1,t1,0
     c92:	0901                	addi	s2,s2,0
     c94:	0000                	unimp
     c96:	0301                	addi	t1,t1,0
    for(i = (2*N); i < (3*N); ++i){
     c98:	0901                	addi	s2,s2,0
     c9a:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     c9c:	0501                	addi	a0,a0,0
     c9e:	0609                	addi	a2,a2,2
    for(i = (2*N); i < (3*N); ++i){
     ca0:	00090003          	lb	zero,0(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca4:	0100                	addi	s0,sp,128
     ca6:	0505                	addi	a0,a0,1
     ca8:	0306                	slli	t1,t1,0x1
    for(i = (2*N); i < ((2*N)+N); ++i){
     caa:	0904                	addi	s1,sp,144
     cac:	0002                	c.slli64	zero
     cae:	0501                	addi	a0,a0,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb0:	060c                	addi	a1,sp,768
     cb2:	04090003          	lb	zero,64(s2)
     cb6:	0100                	addi	s0,sp,128
     cb8:	1105                	addi	sp,sp,-31
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cba:	0200                	addi	s0,sp,256
     cbc:	0104                	addi	s1,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cbe:	0306                	slli	t1,t1,0x1
     cc0:	0900                	addi	s0,sp,144
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc2:	0002                	c.slli64	zero
     cc4:	0501                	addi	a0,a0,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc6:	0005                	c.nop	1
     cc8:	0402                	c.slli64	s0
     cca:	0601                	addi	a2,a2,0
     ccc:	00090003          	lb	zero,0(s2)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd0:	0100                	addi	s0,sp,128
     cd2:	0c05                	addi	s8,s8,1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd4:	06090a03          	lb	s4,96(s2)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd8:	0100                	addi	s0,sp,128
     cda:	1105                	addi	sp,sp,-31
     cdc:	0200                	addi	s0,sp,256
     cde:	0104                	addi	s1,sp,128
     ce0:	0306                	slli	t1,t1,0x1
     ce2:	0900                	addi	s0,sp,144
     ce4:	0002                	c.slli64	zero
     ce6:	0501                	addi	a0,a0,0
     ce8:	0005                	c.nop	1
    for(i = (2*N); i < ((2*N)+N); ++i){
     cea:	0402                	c.slli64	s0
     cec:	0601                	addi	a2,a2,0
     cee:	00090003          	lb	zero,0(s2)
     cf2:	0100                	addi	s0,sp,128
        if(a2[i] <= q/2)
     cf4:	0c05                	addi	s8,s8,1
     cf6:	04090803          	lb	a6,64(s2)
    for (i = 0; i < N; ++i){
     cfa:	0100                	addi	s0,sp,128
     cfc:	1105                	addi	sp,sp,-31
     cfe:	0200                	addi	s0,sp,256
    c = polymult2(secret_key_fp,N,a2,N,0);
     d00:	0104                	addi	s1,sp,128
     d02:	0306                	slli	t1,t1,0x1
     d04:	0900                	addi	s0,sp,144
     d06:	0002                	c.slli64	zero
     d08:	0501                	addi	a0,a0,0
     d0a:	0005                	c.nop	1
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d0c:	0402                	c.slli64	s0
     d0e:	0601                	addi	a2,a2,0
     d10:	00090003          	lb	zero,0(s2)
     d14:	0100                	addi	s0,sp,128
     d16:	1805                	addi	a6,a6,-31
    for(i = (2*N); i < ((2*N)+N); ++i){
     d18:	0200                	addi	s0,sp,256
     d1a:	0104                	addi	s1,sp,128
     d1c:	0306                	slli	t1,t1,0x1
}
     d1e:	0906                	slli	s2,s2,0x1
     d20:	0004                	0x4
     d22:	0501                	addi	a0,a0,0
     d24:	0005                	c.nop	1
     d26:	0402                	c.slli64	s0
     d28:	0601                	addi	a2,a2,0
     d2a:	08090003          	lb	zero,128(s2)
     d2e:	0100                	addi	s0,sp,128
     d30:	0c05                	addi	s8,s8,1
     d32:	0200                	addi	s0,sp,256
        a2[i-(2*N)] = a2[i];
     d34:	0104                	addi	s1,sp,128
     d36:	04097a03          	0x4097a03
     d3a:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d3c:	0200                	addi	s0,sp,256
     d3e:	0104                	addi	s1,sp,128
        a2[i-(2*N)] = a2[i];
     d40:	04090f03          	lb	t5,64(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d44:	0100                	addi	s0,sp,128
        if(a2[i] <= q/2)
     d46:	1105                	addi	sp,sp,-31
     d48:	0200                	addi	s0,sp,256
     d4a:	0104                	addi	s1,sp,128
            a2[i] = (-1)*(q-a2[i]);
     d4c:	0306                	slli	t1,t1,0x1
     d4e:	097f                	0x97f
     d50:	0002                	c.slli64	zero
    for (i = 0; i < N; ++i){
     d52:	0501                	addi	a0,a0,0
     d54:	0005                	c.nop	1
     d56:	0402                	c.slli64	s0
        c2[i-(2*N)] = c2[i];
     d58:	0601                	addi	a2,a2,0
     d5a:	00090003          	lb	zero,0(s2)
     d5e:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d60:	0905                	addi	s2,s2,1
     d62:	0306                	slli	t1,t1,0x1
        c2[i-(2*N)] = c2[i];
     d64:	0961                	addi	s2,s2,24
     d66:	0008                	0x8
    for(i = (2*N); i < ((2*N)+N); ++i){
     d68:	0501                	addi	a0,a0,0
  jal x0, default_exc_handler
     d6a:	061a                	slli	a2,a2,0x6
     d6c:	00090003          	lb	zero,0(s2)
  mv  x1, x0
     d70:	0100                	addi	s0,sp,128
  mv  x2, x1
     d72:	1505                	addi	a0,a0,-31
  mv  x3, x1
     d74:	06090003          	lb	zero,96(s2)
  mv  x5, x1
     d78:	0100                	addi	s0,sp,128
  mv  x6, x1
     d7a:	1905                	addi	s2,s2,-31
  mv  x7, x1
     d7c:	02090203          	lb	tp,32(s2)
  mv  x9, x1
     d80:	0100                	addi	s0,sp,128
  mv x10, x1
     d82:	0f05                	addi	t5,t5,1
  mv x11, x1
     d84:	0306                	slli	t1,t1,0x1
  mv x12, x1
     d86:	097f                	0x97f
  mv x13, x1
     d88:	0002                	c.slli64	zero
  mv x14, x1
     d8a:	0501                	addi	a0,a0,0
  mv x15, x1
     d8c:	0618                	addi	a4,sp,768
  mv x16, x1
     d8e:	00090003          	lb	zero,0(s2)
  mv x18, x1
     d92:	0100                	addi	s0,sp,128
  mv x19, x1
     d94:	0f05                	addi	t5,t5,1
  mv x20, x1
     d96:	02090003          	lb	zero,32(s2)
  mv x22, x1
     d9a:	0100                	addi	s0,sp,128
  mv x23, x1
     d9c:	0905                	addi	s2,s2,1
  mv x24, x1
     d9e:	0200                	addi	s0,sp,256
  mv x25, x1
     da0:	0204                	addi	s1,sp,256
  mv x26, x1
     da2:	0306                	slli	t1,t1,0x1
  mv x27, x1
     da4:	00040903          	lb	s2,0(s0)
  mv x29, x1
     da8:	0501                	addi	a0,a0,0
  mv x30, x1
     daa:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
  la   x2, _stack_start
     dae:	0602                	c.slli64	a2
     db0:	00090003          	lb	zero,0(s2)
     db4:	0100                	addi	s0,sp,128
  la x26, _bss_start
     db6:	1d05                	addi	s10,s10,-31
     db8:	0200                	addi	s0,sp,256
     dba:	0204                	addi	s1,sp,256
     dbc:	04097b03          	0x4097b03
  la x27, _bss_end
     dc0:	0100                	addi	s0,sp,128
     dc2:	1505                	addi	a0,a0,-31
     dc4:	0200                	addi	s0,sp,256
  bge x26, x27, zero_loop_end
     dc6:	0204                	addi	s1,sp,256
     dc8:	04090503          	lb	a0,64(s2)
  sw x0, 0(x26)
     dcc:	0100                	addi	s0,sp,128
  addi x26, x26, 4
     dce:	1d05                	addi	s10,s10,-31
  ble x26, x27, zero_loop
     dd0:	0200                	addi	s0,sp,256
     dd2:	0204                	addi	s1,sp,256
  addi x10, x0, 0
     dd4:	0306                	slli	t1,t1,0x1
     dd6:	0004097b          	0x4097b
  addi x11, x0, 0
     dda:	0501                	addi	a0,a0,0
  jal x1, main
     ddc:	030d                	addi	t1,t1,3
     dde:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     de2:	0501                	addi	a0,a0,0
     de4:	00030627          	0x30627
     de8:	0009                	c.nop	2
     dea:	0100                	addi	s0,sp,128
     dec:	0905                	addi	s2,s2,1
     dee:	0306                	slli	t1,t1,0x1
     df0:	0908                	addi	a0,sp,144
     df2:	0004                	0x4
     df4:	0501                	addi	a0,a0,0
     df6:	061e                	slli	a2,a2,0x7
     df8:	00090003          	lb	zero,0(s2)
     dfc:	0100                	addi	s0,sp,128
     dfe:	1705                	addi	a4,a4,-31
     e00:	06090003          	lb	zero,96(s2)
     e04:	0100                	addi	s0,sp,128
     e06:	1b05                	addi	s6,s6,-31
     e08:	02090203          	lb	tp,32(s2)
     e0c:	0100                	addi	s0,sp,128
     e0e:	0f05                	addi	t5,t5,1
     e10:	0306                	slli	t1,t1,0x1
     e12:	097f                	0x97f
     e14:	0002                	c.slli64	zero
     e16:	0501                	addi	a0,a0,0
     e18:	061a                	slli	a2,a2,0x6
     e1a:	00090003          	lb	zero,0(s2)
     e1e:	0100                	addi	s0,sp,128
     e20:	0f05                	addi	t5,t5,1
     e22:	02090003          	lb	zero,32(s2)
     e26:	0100                	addi	s0,sp,128
     e28:	0905                	addi	s2,s2,1
     e2a:	0200                	addi	s0,sp,256
     e2c:	0204                	addi	s1,sp,256
     e2e:	0306                	slli	t1,t1,0x1
     e30:	00040903          	lb	s2,0(s0)
     e34:	0501                	addi	a0,a0,0
     e36:	04020027          	0x4020027
     e3a:	0602                	c.slli64	a2
     e3c:	00090003          	lb	zero,0(s2)
     e40:	0100                	addi	s0,sp,128
     e42:	1d05                	addi	s10,s10,-31
     e44:	0200                	addi	s0,sp,256
     e46:	0204                	addi	s1,sp,256
     e48:	04097b03          	0x4097b03
     e4c:	0100                	addi	s0,sp,128
     e4e:	1705                	addi	a4,a4,-31
     e50:	0200                	addi	s0,sp,256
     e52:	0204                	addi	s1,sp,256
     e54:	04090503          	lb	a0,64(s2)
     e58:	0100                	addi	s0,sp,128
     e5a:	1d05                	addi	s10,s10,-31
     e5c:	0200                	addi	s0,sp,256
     e5e:	0204                	addi	s1,sp,256
     e60:	0306                	slli	t1,t1,0x1
     e62:	0004097b          	0x4097b
     e66:	0501                	addi	a0,a0,0
     e68:	030d                	addi	t1,t1,3
     e6a:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     e6e:	0501                	addi	a0,a0,0
     e70:	0003062b          	0x3062b
     e74:	0009                	c.nop	2
     e76:	0100                	addi	s0,sp,128
     e78:	0905                	addi	s2,s2,1
     e7a:	0200                	addi	s0,sp,256
     e7c:	0304                	addi	s1,sp,384
     e7e:	0306                	slli	t1,t1,0x1
     e80:	0906                	slli	s2,s2,0x1
     e82:	0004                	0x4
     e84:	0501                	addi	a0,a0,0
     e86:	000e                	c.slli	zero,0x3
     e88:	0402                	c.slli64	s0
     e8a:	00030603          	lb	a2,0(t1)
     e8e:	0409                	addi	s0,s0,2
     e90:	0100                	addi	s0,sp,128
     e92:	0200                	addi	s0,sp,256
     e94:	0304                	addi	s1,sp,384
     e96:	04090103          	lb	sp,64(s2)
     e9a:	0100                	addi	s0,sp,128
     e9c:	0200                	addi	s0,sp,256
     e9e:	0304                	addi	s1,sp,384
     ea0:	02097f03          	0x2097f03
     ea4:	0100                	addi	s0,sp,128
     ea6:	0905                	addi	s2,s2,1
     ea8:	0200                	addi	s0,sp,256
     eaa:	0304                	addi	s1,sp,384
     eac:	0306                	slli	t1,t1,0x1
     eae:	0901                	addi	s2,s2,0
     eb0:	0004                	0x4
     eb2:	0501                	addi	a0,a0,0
     eb4:	000e                	c.slli	zero,0x3
     eb6:	0402                	c.slli64	s0
     eb8:	00030603          	lb	a2,0(t1)
     ebc:	0009                	c.nop	2
     ebe:	0100                	addi	s0,sp,128
     ec0:	1d05                	addi	s10,s10,-31
     ec2:	0200                	addi	s0,sp,256
     ec4:	0304                	addi	s1,sp,384
     ec6:	0306                	slli	t1,t1,0x1
     ec8:	097e                	slli	s2,s2,0x1f
     eca:	0004                	0x4
     ecc:	0501                	addi	a0,a0,0
     ece:	0309                	addi	t1,t1,2
     ed0:	00040907          	0x40907
     ed4:	0501                	addi	a0,a0,0
     ed6:	0003060b          	0x3060b
     eda:	0009                	c.nop	2
     edc:	0100                	addi	s0,sp,128
     ede:	2005                	jal	efe <memset+0x40>
     ee0:	0200                	addi	s0,sp,256
     ee2:	0204                	addi	s1,sp,256
     ee4:	0306                	slli	t1,t1,0x1
     ee6:	097f                	0x97f
     ee8:	0002                	c.slli64	zero
     eea:	0501                	addi	a0,a0,0
     eec:	0022                	c.slli	zero,0x8
     eee:	0402                	c.slli64	s0
     ef0:	0602                	c.slli64	a2
     ef2:	00090003          	lb	zero,0(s2)
     ef6:	0100                	addi	s0,sp,128
     ef8:	0905                	addi	s2,s2,1
     efa:	0306                	slli	t1,t1,0x1
     efc:	0909                	addi	s2,s2,2
     efe:	0004                	0x4
     f00:	0501                	addi	a0,a0,0
     f02:	0615                	addi	a2,a2,5
     f04:	00090003          	lb	zero,0(s2)
     f08:	0100                	addi	s0,sp,128
     f0a:	0c05                	addi	s8,s8,1
     f0c:	06090003          	lb	zero,96(s2)
     f10:	0100                	addi	s0,sp,128
     f12:	1a05                	addi	s4,s4,-31
     f14:	0200                	addi	s0,sp,256
     f16:	0204                	addi	s1,sp,256
     f18:	0306                	slli	t1,t1,0x1
     f1a:	097f                	0x97f
     f1c:	0004                	0x4
     f1e:	0501                	addi	a0,a0,0
     f20:	0309                	addi	t1,t1,2
     f22:	00040907          	0x40907
     f26:	0501                	addi	a0,a0,0
     f28:	0003060b          	0x3060b
     f2c:	0009                	c.nop	2
     f2e:	0100                	addi	s0,sp,128
     f30:	2005                	jal	f50 <memset+0x92>
     f32:	0200                	addi	s0,sp,256
     f34:	0204                	addi	s1,sp,256
     f36:	0306                	slli	t1,t1,0x1
     f38:	097f                	0x97f
     f3a:	0002                	c.slli64	zero
     f3c:	0501                	addi	a0,a0,0
     f3e:	0022                	c.slli	zero,0x8
     f40:	0402                	c.slli64	s0
     f42:	0602                	c.slli64	a2
     f44:	00090003          	lb	zero,0(s2)
     f48:	0100                	addi	s0,sp,128
     f4a:	1805                	addi	a6,a6,-31
     f4c:	0200                	addi	s0,sp,256
     f4e:	0104                	addi	s1,sp,128
     f50:	0306                	slli	t1,t1,0x1
     f52:	0900                	addi	s0,sp,144
     f54:	0002                	c.slli64	zero
     f56:	0501                	addi	a0,a0,0
     f58:	0005                	c.nop	1
     f5a:	0402                	c.slli64	s0
     f5c:	0601                	addi	a2,a2,0
     f5e:	08090003          	lb	zero,128(s2)
     f62:	0100                	addi	s0,sp,128
     f64:	0b05                	addi	s6,s6,1
int main(){
     f66:	0306                	slli	t1,t1,0x1
     f68:	090c                	addi	a1,sp,144
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f6a:	0004                	0x4
     f6c:	0601                	addi	a2,a2,0
     f6e:	04093703          	0x4093703
     f72:	0100                	addi	s0,sp,128
     f74:	1305                	addi	t1,t1,-31
     f76:	02090103          	lb	sp,32(s2)
int main(){
     f7a:	0100                	addi	s0,sp,128
     f7c:	1005                	c.nop	-31
     f7e:	0200                	addi	s0,sp,256
     f80:	0104                	addi	s1,sp,128
     f82:	0306                	slli	t1,t1,0x1
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f84:	097f                	0x97f
    resultkon[0] = 0xA;
     f86:	0008                	0x8
     f88:	0501                	addi	a0,a0,0
     f8a:	0005                	c.nop	1
     f8c:	0402                	c.slli64	s0
     f8e:	0601                	addi	a2,a2,0
     f90:	00090003          	lb	zero,0(s2)
    *var = resultkon[0];
     f94:	0100                	addi	s0,sp,128
    keys = generate_keys(N, p, q);
     f96:	1b05                	addi	s6,s6,-31
     f98:	04090303          	lb	t1,64(s2)
    *var = resultkon[0];
     f9c:	0100                	addi	s0,sp,128
     f9e:	1305                	addi	t1,t1,-31
     fa0:	04090103          	lb	sp,64(s2)
    keys = generate_keys(N, p, q);
     fa4:	0100                	addi	s0,sp,128
     fa6:	1505                	addi	a0,a0,-31
     fa8:	0200                	addi	s0,sp,256
     faa:	0104                	addi	s1,sp,128
    for(i = 0; i < N; ++i){
     fac:	0306                	slli	t1,t1,0x1
     fae:	097f                	0x97f
        secret_key_f[i] = keys[i];
     fb0:	0008                	0x8
     fb2:	0501                	addi	a0,a0,0
     fb4:	0005                	c.nop	1
     fb6:	0402                	c.slli64	s0
     fb8:	0601                	addi	a2,a2,0
     fba:	00090003          	lb	zero,0(s2)
    for(i = 0; i < N; ++i){
     fbe:	0100                	addi	s0,sp,128
     fc0:	0306                	slli	t1,t1,0x1
    for(i = N; i < (2*N); ++i){
     fc2:	0904                	addi	s1,sp,144
     fc4:	0004                	0x4
     fc6:	0301                	addi	t1,t1,0
     fc8:	0902                	c.slli64	s2
     fca:	0000                	unimp
     fcc:	0501                	addi	a0,a0,0
        secret_key_fp[i-(2*N)] = keys[i];
     fce:	0601                	addi	a2,a2,0
     fd0:	00090103          	lb	sp,0(s2)
     fd4:	0100                	addi	s0,sp,128
     fd6:	0905                	addi	s2,s2,1
    for(i = (2*N); i < (3*N); ++i){
     fd8:	0306                	slli	t1,t1,0x1
     fda:	0942                	slli	s2,s2,0x10
    for(i = (3*N); i < (4*N); ++i){
     fdc:	002a                	c.slli	zero,0xa
     fde:	0501                	addi	a0,a0,0
     fe0:	0616                	slli	a2,a2,0x5
     fe2:	00090003          	lb	zero,0(s2)
     fe6:	0100                	addi	s0,sp,128
        public_key[i-(4*N)] = keys[i];
     fe8:	0d05                	addi	s10,s10,1
     fea:	04090003          	lb	zero,64(s2)
     fee:	0100                	addi	s0,sp,128
     ff0:	1305                	addi	t1,t1,-31
    for(i = (4*N); i < (5*N); ++i){
     ff2:	04090003          	lb	zero,64(s2)
     ff6:	0100                	addi	s0,sp,128
     ff8:	0905                	addi	s2,s2,1
     ffa:	0306                	slli	t1,t1,0x1
     ffc:	0902                	c.slli64	s2
        ring_poly[i-(5*N)] = keys[i];
     ffe:	0006                	c.slli	zero,0x1
    1000:	0501                	addi	a0,a0,0
    1002:	0610                	addi	a2,sp,768
    1004:	02090003          	lb	zero,32(s2)
    for(i = (5*N); i < (6*N+1); ++i){
    1008:	0100                	addi	s0,sp,128
    100a:	1505                	addi	a0,a0,-31
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    100c:	0200                	addi	s0,sp,256
    100e:	0104                	addi	s1,sp,128
    1010:	0306                	slli	t1,t1,0x1
    1012:	0900                	addi	s0,sp,144
    1014:	0002                	c.slli64	zero
    1016:	0501                	addi	a0,a0,0
    1018:	0009                	c.nop	2
    101a:	0402                	c.slli64	s0
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    101c:	0601                	addi	a2,a2,0
    101e:	00090003          	lb	zero,0(s2)
    1022:	0100                	addi	s0,sp,128
    1024:	0306                	slli	t1,t1,0x1
    1026:	0905                	addi	s2,s2,1
    1028:	0004                	0x4
    102a:	0501                	addi	a0,a0,0
    102c:	00030613          	mv	a2,t1
            resultkon[0] = 0xDEDEDEDE;
    1030:	0009                	c.nop	2
    1032:	0100                	addi	s0,sp,128
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1034:	0905                	addi	s2,s2,1
            resultkon[0] = 0xDEDEDEDE;
    1036:	0306                	slli	t1,t1,0x1
    1038:	000e0903          	lb	s2,0(t3) # 19000 <_stack_start+0x9000>
    for(i = 0; i < 32; ++i){
    103c:	0501                	addi	a0,a0,0
    103e:	0610                	addi	a2,sp,768
        if(!(message[i] == Dec_Message[i])){
    1040:	02090003          	lb	zero,32(s2)
    1044:	0100                	addi	s0,sp,128
    1046:	1505                	addi	a0,a0,-31
    1048:	0200                	addi	s0,sp,256
    104a:	0104                	addi	s1,sp,128
    104c:	0306                	slli	t1,t1,0x1
    104e:	0900                	addi	s0,sp,144
            resultkon[0] = 0xBABABABA;
    1050:	0002                	c.slli64	zero
    1052:	0501                	addi	a0,a0,0
    1054:	0009                	c.nop	2
    1056:	0402                	c.slli64	s0
    1058:	0601                	addi	a2,a2,0
 	    *var = resultkon[0];
    105a:	00090003          	lb	zero,0(s2)
    105e:	0100                	addi	s0,sp,128
    1060:	1005                	c.nop	-31
    1062:	06090803          	lb	a6,96(s2)
}
    1066:	0100                	addi	s0,sp,128
    1068:	1505                	addi	a0,a0,-31
    106a:	0200                	addi	s0,sp,256
    106c:	0104                	addi	s1,sp,128
    106e:	0306                	slli	t1,t1,0x1
    1070:	0900                	addi	s0,sp,144
    1072:	0002                	c.slli64	zero
    1074:	0501                	addi	a0,a0,0
    1076:	0009                	c.nop	2
    1078:	0402                	c.slli64	s0
            resultkon[0] = 0xDEDEDEDE;
    107a:	0601                	addi	a2,a2,0
	    *var = resultkon[0];
    107c:	00090003          	lb	zero,0(s2)
    1080:	0100                	addi	s0,sp,128
    1082:	1005                	c.nop	-31
    1084:	06090503          	lb	a0,96(s2)
    for(i = 0; i < 32; ++i){
    1088:	0100                	addi	s0,sp,128
    108a:	1505                	addi	a0,a0,-31
    108c:	0200                	addi	s0,sp,256
    108e:	0104                	addi	s1,sp,128
    1090:	0306                	slli	t1,t1,0x1
    1092:	0900                	addi	s0,sp,144
    1094:	0002                	c.slli64	zero
    1096:	0501                	addi	a0,a0,0
    1098:	0009                	c.nop	2
    109a:	0402                	c.slli64	s0
    109c:	0601                	addi	a2,a2,0
    109e:	00090003          	lb	zero,0(s2)
    10a2:	0100                	addi	s0,sp,128
    10a4:	0f05                	addi	t5,t5,1
    10a6:	06090803          	lb	a6,96(s2)
    10aa:	0100                	addi	s0,sp,128
    10ac:	1405                	addi	s0,s0,-31
    10ae:	0200                	addi	s0,sp,256
    10b0:	0104                	addi	s1,sp,128
    10b2:	0306                	slli	t1,t1,0x1
    10b4:	0900                	addi	s0,sp,144
    10b6:	0002                	c.slli64	zero
    10b8:	0501                	addi	a0,a0,0
    10ba:	0009                	c.nop	2
    10bc:	0402                	c.slli64	s0
    10be:	0601                	addi	a2,a2,0
    10c0:	00090003          	lb	zero,0(s2)
    10c4:	0100                	addi	s0,sp,128
    10c6:	1005                	c.nop	-31
    10c8:	04090603          	lb	a2,64(s2)
    10cc:	0100                	addi	s0,sp,128
    10ce:	1c05                	addi	s8,s8,-31
    10d0:	0200                	addi	s0,sp,256
    10d2:	0104                	addi	s1,sp,128
    10d4:	0306                	slli	t1,t1,0x1
    10d6:	0900                	addi	s0,sp,144
    10d8:	0002                	c.slli64	zero
    10da:	0501                	addi	a0,a0,0
    10dc:	0009                	c.nop	2
    10de:	0402                	c.slli64	s0
    10e0:	0601                	addi	a2,a2,0
    10e2:	08090003          	lb	zero,128(s2)
    10e6:	0100                	addi	s0,sp,128
    10e8:	0d05                	addi	s10,s10,1
    10ea:	0200                	addi	s0,sp,256
    10ec:	0304                	addi	s1,sp,384
    10ee:	0306                	slli	t1,t1,0x1
    10f0:	095e                	slli	s2,s2,0x17
    10f2:	0008                	0x8
    10f4:	0501                	addi	a0,a0,0
    10f6:	0019                	c.nop	6
    10f8:	0402                	c.slli64	s0
    10fa:	00030603          	lb	a2,0(t1)
    10fe:	0009                	c.nop	2
    1100:	0100                	addi	s0,sp,128
    1102:	2105                	jal	1522 <product2+0xaa>
    1104:	0200                	addi	s0,sp,256
    1106:	0304                	addi	s1,sp,384
    1108:	02097f03          	0x2097f03
    110c:	0100                	addi	s0,sp,128
    110e:	1905                	addi	s2,s2,-31
    1110:	0200                	addi	s0,sp,256
    1112:	0304                	addi	s1,sp,384
    1114:	04090103          	lb	sp,64(s2)
    1118:	0100                	addi	s0,sp,128
    111a:	1205                	addi	tp,tp,-31
    111c:	0200                	addi	s0,sp,256
    111e:	0304                	addi	s1,sp,384
    1120:	04090003          	lb	zero,64(s2)
    1124:	0100                	addi	s0,sp,128
    1126:	2105                	jal	1546 <product2+0xce>
    1128:	0200                	addi	s0,sp,256
    112a:	0304                	addi	s1,sp,384
    112c:	0306                	slli	t1,t1,0x1
    112e:	097f                	0x97f
    1130:	0004                	0x4
    1132:	0501                	addi	a0,a0,0
    1134:	0311                	addi	t1,t1,4
    1136:	090a                	slli	s2,s2,0x2
    1138:	0002                	c.slli64	zero
    113a:	0501                	addi	a0,a0,0
    113c:	0629                	addi	a2,a2,10
    113e:	00090003          	lb	zero,0(s2)
    1142:	0100                	addi	s0,sp,128
    1144:	1c05                	addi	s8,s8,-31
    1146:	02090003          	lb	zero,32(s2)
    114a:	0100                	addi	s0,sp,128
    114c:	1305                	addi	t1,t1,-31
    114e:	0306                	slli	t1,t1,0x1
    1150:	097f                	0x97f
    1152:	0002                	c.slli64	zero
    1154:	0501                	addi	a0,a0,0
    1156:	0003061b          	0x3061b
    115a:	0009                	c.nop	2
    115c:	0100                	addi	s0,sp,128
    115e:	1305                	addi	t1,t1,-31
    1160:	02090003          	lb	zero,32(s2)
    1164:	0100                	addi	s0,sp,128
    1166:	0d05                	addi	s10,s10,1
    1168:	0200                	addi	s0,sp,256
    116a:	0204                	addi	s1,sp,256
    116c:	0306                	slli	t1,t1,0x1
    116e:	00040903          	lb	s2,0(s0)
    1172:	0501                	addi	a0,a0,0
    1174:	0025                	c.nop	9
    1176:	0402                	c.slli64	s0
    1178:	0602                	c.slli64	a2
    117a:	00090003          	lb	zero,0(s2)
    117e:	0100                	addi	s0,sp,128
    1180:	2105                	jal	15a0 <product2+0x128>
    1182:	0200                	addi	s0,sp,256
    1184:	0204                	addi	s1,sp,256
    1186:	04097c03          	0x4097c03
    118a:	0100                	addi	s0,sp,128
    118c:	1805                	addi	a6,a6,-31
    118e:	0200                	addi	s0,sp,256
    1190:	0204                	addi	s1,sp,256
    1192:	04090403          	lb	s0,64(s2)
    1196:	0100                	addi	s0,sp,128
    1198:	2105                	jal	15b8 <product2+0x140>
    119a:	0200                	addi	s0,sp,256
    119c:	0204                	addi	s1,sp,256
    119e:	0306                	slli	t1,t1,0x1
    11a0:	097c                	addi	a5,sp,156
    11a2:	0004                	0x4
    11a4:	0501                	addi	a0,a0,0
    11a6:	000d                	c.nop	3
    11a8:	0402                	c.slli64	s0
    11aa:	09090303          	lb	t1,144(s2)
    11ae:	0002                	c.slli64	zero
    11b0:	0501                	addi	a0,a0,0
    11b2:	0030                	addi	a2,sp,8
    11b4:	0402                	c.slli64	s0
    11b6:	00030603          	lb	a2,0(t1)
    11ba:	0009                	c.nop	2
    11bc:	0100                	addi	s0,sp,128
    11be:	2705                	jal	18de <result+0x20e>
    11c0:	0200                	addi	s0,sp,256
    11c2:	0304                	addi	s1,sp,384
    11c4:	06090003          	lb	zero,96(s2)
    11c8:	0100                	addi	s0,sp,128
    11ca:	2105                	jal	15ea <product2+0x172>
    11cc:	0200                	addi	s0,sp,256
    11ce:	0304                	addi	s1,sp,384
    11d0:	04097f03          	0x4097f03
    11d4:	0100                	addi	s0,sp,128
    11d6:	2705                	jal	18f6 <result+0x226>
    11d8:	0200                	addi	s0,sp,256
    11da:	0304                	addi	s1,sp,384
    11dc:	04090103          	lb	sp,64(s2)
    11e0:	0100                	addi	s0,sp,128
    11e2:	1905                	addi	s2,s2,-31
    11e4:	0200                	addi	s0,sp,256
    11e6:	0304                	addi	s1,sp,384
    11e8:	02090003          	lb	zero,32(s2)
    11ec:	0100                	addi	s0,sp,128
    11ee:	2105                	jal	160e <product2+0x196>
    11f0:	0200                	addi	s0,sp,256
    11f2:	0304                	addi	s1,sp,384
    11f4:	0306                	slli	t1,t1,0x1
    11f6:	097f                	0x97f
    11f8:	0004                	0x4
    11fa:	0501                	addi	a0,a0,0
    11fc:	0311                	addi	t1,t1,4
    11fe:	00020907          	0x20907
    1202:	0501                	addi	a0,a0,0
    1204:	0003062b          	0x3062b
    1208:	0009                	c.nop	2
    120a:	0100                	addi	s0,sp,128
    120c:	1d05                	addi	s10,s10,-31
    120e:	02090003          	lb	zero,32(s2)
    1212:	0100                	addi	s0,sp,128
    1214:	1305                	addi	t1,t1,-31
    1216:	0306                	slli	t1,t1,0x1
    1218:	097f                	0x97f
    121a:	0002                	c.slli64	zero
    121c:	0501                	addi	a0,a0,0
    121e:	061c                	addi	a5,sp,768
    1220:	00090003          	lb	zero,0(s2)
    1224:	0100                	addi	s0,sp,128
    1226:	1305                	addi	t1,t1,-31
    1228:	02090003          	lb	zero,32(s2)
    122c:	0100                	addi	s0,sp,128
    122e:	0d05                	addi	s10,s10,1
    1230:	0200                	addi	s0,sp,256
    1232:	0204                	addi	s1,sp,256
    1234:	0306                	slli	t1,t1,0x1
    1236:	00040903          	lb	s2,0(s0)
    123a:	0501                	addi	a0,a0,0
    123c:	04020027          	0x4020027
    1240:	0602                	c.slli64	a2
    1242:	00090003          	lb	zero,0(s2)
    1246:	0100                	addi	s0,sp,128
    1248:	2105                	jal	1668 <product2+0x1f0>
    124a:	0200                	addi	s0,sp,256
    124c:	0204                	addi	s1,sp,256
    124e:	04097c03          	0x4097c03
    1252:	0100                	addi	s0,sp,128
    1254:	1905                	addi	s2,s2,-31
    1256:	0200                	addi	s0,sp,256
    1258:	0204                	addi	s1,sp,256
    125a:	04090403          	lb	s0,64(s2)
    125e:	0100                	addi	s0,sp,128
    1260:	2105                	jal	1680 <product2+0x208>
    1262:	0200                	addi	s0,sp,256
    1264:	0204                	addi	s1,sp,256
    1266:	0306                	slli	t1,t1,0x1
    1268:	097c                	addi	a5,sp,156
    126a:	0004                	0x4
    126c:	0501                	addi	a0,a0,0
    126e:	000d                	c.nop	3
    1270:	0402                	c.slli64	s0
    1272:	09090303          	lb	t1,144(s2)
    1276:	0002                	c.slli64	zero
    1278:	0001                	nop
    127a:	0402                	c.slli64	s0
    127c:	09010303          	lb	t1,144(sp)
    1280:	0000                	unimp
    1282:	0501                	addi	a0,a0,0
    1284:	001c                	0x1c
    1286:	0402                	c.slli64	s0
    1288:	7f030603          	lb	a2,2032(t1)
    128c:	0009                	c.nop	2
    128e:	0100                	addi	s0,sp,128
    1290:	1905                	addi	s2,s2,-31
    1292:	0200                	addi	s0,sp,256
    1294:	0304                	addi	s1,sp,384
    1296:	06090003          	lb	zero,96(s2)
    129a:	0100                	addi	s0,sp,128
    129c:	2005                	jal	12bc <_edata+0x9c>
    129e:	0200                	addi	s0,sp,256
    12a0:	0304                	addi	s1,sp,384
    12a2:	04097f03          	0x4097f03
    12a6:	0100                	addi	s0,sp,128
    12a8:	1905                	addi	s2,s2,-31
    12aa:	0200                	addi	s0,sp,256
    12ac:	0304                	addi	s1,sp,384
    12ae:	04090103          	lb	sp,64(s2)
    12b2:	0100                	addi	s0,sp,128
    12b4:	0200                	addi	s0,sp,256
    12b6:	0304                	addi	s1,sp,384
    12b8:	02090103          	lb	sp,32(s2)
    12bc:	0100                	addi	s0,sp,128
    12be:	1205                	addi	tp,tp,-31
    12c0:	0200                	addi	s0,sp,256
    12c2:	0304                	addi	s1,sp,384
    12c4:	04090003          	lb	zero,64(s2)
    12c8:	0100                	addi	s0,sp,128
    12ca:	2005                	jal	12ea <_edata+0xca>
    12cc:	0200                	addi	s0,sp,256
    12ce:	0304                	addi	s1,sp,384
    12d0:	0306                	slli	t1,t1,0x1
    12d2:	097e                	slli	s2,s2,0x1f
    12d4:	0004                	0x4
    12d6:	0501                	addi	a0,a0,0
    12d8:	030d                	addi	t1,t1,3
    12da:	00020907          	0x20907
    12de:	0501                	addi	a0,a0,0
    12e0:	0003060f          	0x3060f
    12e4:	0009                	c.nop	2
    12e6:	0100                	addi	s0,sp,128
    12e8:	2405                	jal	1508 <product2+0x90>
    12ea:	0200                	addi	s0,sp,256
    12ec:	0204                	addi	s1,sp,256
    12ee:	0306                	slli	t1,t1,0x1
    12f0:	097f                	0x97f
    12f2:	0002                	c.slli64	zero
    12f4:	0501                	addi	a0,a0,0
    12f6:	0026                	c.slli	zero,0x9
    12f8:	0402                	c.slli64	s0
    12fa:	0602                	c.slli64	a2
    12fc:	00090003          	lb	zero,0(s2)
    1300:	0100                	addi	s0,sp,128
    1302:	0d05                	addi	s10,s10,1
    1304:	0200                	addi	s0,sp,256
    1306:	0304                	addi	s1,sp,384
    1308:	0306                	slli	t1,t1,0x1
    130a:	0909                	addi	s2,s2,2
    130c:	0004                	0x4
    130e:	0501                	addi	a0,a0,0
    1310:	0012                	c.slli	zero,0x4
    1312:	0402                	c.slli64	s0
    1314:	00030603          	lb	a2,0(t1)
    1318:	0009                	c.nop	2
    131a:	0100                	addi	s0,sp,128
    131c:	2105                	jal	173c <result+0x6c>
    131e:	0200                	addi	s0,sp,256
    1320:	0304                	addi	s1,sp,384
    1322:	0306                	slli	t1,t1,0x1
    1324:	097f                	0x97f
    1326:	000a                	c.slli	zero,0x2
    1328:	0501                	addi	a0,a0,0
    132a:	0015                	c.nop	5
    132c:	0402                	c.slli64	s0
    132e:	0301                	addi	t1,t1,0
    1330:	0900                	addi	s0,sp,144
    1332:	0002                	c.slli64	zero
    1334:	0501                	addi	a0,a0,0
    1336:	0009                	c.nop	2
    1338:	0402                	c.slli64	s0
    133a:	0601                	addi	a2,a2,0
    133c:	00090003          	lb	zero,0(s2)
    1340:	0100                	addi	s0,sp,128
    1342:	0200                	addi	s0,sp,256
    1344:	0304                	addi	s1,sp,384
    1346:	0306                	slli	t1,t1,0x1
    1348:	0908                	addi	a0,sp,144
    134a:	0006                	c.slli	zero,0x1
    134c:	0501                	addi	a0,a0,0
    134e:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1352:	00030603          	lb	a2,0(t1)
    1356:	0409                	addi	s0,s0,2
    1358:	0100                	addi	s0,sp,128
    135a:	1605                	addi	a2,a2,-31
    135c:	0200                	addi	s0,sp,256
    135e:	0304                	addi	s1,sp,384
    1360:	04090003          	lb	zero,64(s2)
    1364:	0100                	addi	s0,sp,128
    1366:	1305                	addi	t1,t1,-31
    1368:	0200                	addi	s0,sp,256
    136a:	0304                	addi	s1,sp,384
    136c:	02090003          	lb	zero,32(s2)
    1370:	0100                	addi	s0,sp,128
    1372:	1c05                	addi	s8,s8,-31
    1374:	0200                	addi	s0,sp,256
    1376:	0304                	addi	s1,sp,384
    1378:	02097f03          	0x2097f03
    137c:	0100                	addi	s0,sp,128
    137e:	1305                	addi	t1,t1,-31
    1380:	0200                	addi	s0,sp,256
    1382:	0304                	addi	s1,sp,384
    1384:	02090103          	lb	sp,32(s2)
    1388:	0100                	addi	s0,sp,128
    138a:	1c05                	addi	s8,s8,-31
    138c:	0200                	addi	s0,sp,256
    138e:	0304                	addi	s1,sp,384
    1390:	0306                	slli	t1,t1,0x1
    1392:	097f                	0x97f
    1394:	0002                	c.slli64	zero
    1396:	0501                	addi	a0,a0,0
    1398:	0009                	c.nop	2
    139a:	0402                	c.slli64	s0
    139c:	09040303          	lb	t1,144(s0)
    13a0:	0002                	c.slli64	zero
    13a2:	0501                	addi	a0,a0,0
    13a4:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    13a8:	00030603          	lb	a2,0(t1)
    13ac:	0009                	c.nop	2
    13ae:	0100                	addi	s0,sp,128
    13b0:	2505                	jal	19d0 <ti_2+0xa8>
    13b2:	0200                	addi	s0,sp,256
    13b4:	0304                	addi	s1,sp,384
    13b6:	0306                	slli	t1,t1,0x1
    13b8:	097f                	0x97f
    13ba:	000c                	0xc
    13bc:	0501                	addi	a0,a0,0
    13be:	033c                	addi	a5,sp,392
    13c0:	090a                	slli	s2,s2,0x2
    13c2:	0006                	c.slli	zero,0x1
    13c4:	0501                	addi	a0,a0,0
    13c6:	0305                	addi	t1,t1,1
    13c8:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    13cc:	0301                	addi	t1,t1,0
    13ce:	0901                	addi	s2,s2,0
    13d0:	0000                	unimp
    13d2:	0301                	addi	t1,t1,0
    13d4:	0901                	addi	s2,s2,0
    13d6:	0000                	unimp
    13d8:	0501                	addi	a0,a0,0
    13da:	0609                	addi	a2,a2,2
    13dc:	00090003          	lb	zero,0(s2)
    13e0:	0100                	addi	s0,sp,128
    13e2:	3c05                	jal	e12 <memcpy+0x32>
    13e4:	04097b03          	0x4097b03
    13e8:	0100                	addi	s0,sp,128
    13ea:	0905                	addi	s2,s2,1
    13ec:	02090503          	lb	a0,32(s2)
    13f0:	0100                	addi	s0,sp,128
    13f2:	3c05                	jal	e22 <memcpy+0x42>
    13f4:	04097b03          	0x4097b03
    13f8:	0100                	addi	s0,sp,128
    13fa:	0905                	addi	s2,s2,1
    13fc:	1c090503          	lb	a0,448(s2)
    1400:	0100                	addi	s0,sp,128
    1402:	06090103          	lb	sp,96(s2)
    1406:	0100                	addi	s0,sp,128
    1408:	06090103          	lb	sp,96(s2)
    140c:	0100                	addi	s0,sp,128
    140e:	06090203          	lb	tp,96(s2)
    1412:	0100                	addi	s0,sp,128
    1414:	06090103          	lb	sp,96(s2)
    1418:	0100                	addi	s0,sp,128
    141a:	06090103          	lb	sp,96(s2)
    141e:	0100                	addi	s0,sp,128
    1420:	06090103          	lb	sp,96(s2)
    1424:	0100                	addi	s0,sp,128
    1426:	3c05                	jal	e56 <memcpy+0x76>
    1428:	04097403          	0x4097403
    142c:	0100                	addi	s0,sp,128
    142e:	0905                	addi	s2,s2,1
    1430:	04090503          	lb	a0,64(s2)
    1434:	0100                	addi	s0,sp,128
    1436:	0505                	addi	a0,a0,1
    1438:	0306                	slli	t1,t1,0x1
    143a:	0901                	addi	s2,s2,0
    143c:	0004                	0x4
    143e:	0301                	addi	t1,t1,0
    1440:	0901                	addi	s2,s2,0
    1442:	0000                	unimp
    1444:	0301                	addi	t1,t1,0
    1446:	0902                	c.slli64	s2
    1448:	0000                	unimp
    144a:	0301                	addi	t1,t1,0
    144c:	0901                	addi	s2,s2,0
    144e:	0000                	unimp
    1450:	0301                	addi	t1,t1,0
    1452:	0901                	addi	s2,s2,0
    1454:	0000                	unimp
    1456:	0301                	addi	t1,t1,0
    1458:	0901                	addi	s2,s2,0
    145a:	0000                	unimp
    145c:	0501                	addi	a0,a0,0
    145e:	0609                	addi	a2,a2,2
    1460:	00090003          	lb	zero,0(s2)
    1464:	0100                	addi	s0,sp,128
    1466:	0505                	addi	a0,a0,1
    1468:	0306                	slli	t1,t1,0x1
    146a:	0901                	addi	s2,s2,0
    146c:	0002                	c.slli64	zero
    146e:	0301                	addi	t1,t1,0
    1470:	0901                	addi	s2,s2,0
    1472:	0000                	unimp
    1474:	0301                	addi	t1,t1,0
    1476:	0901                	addi	s2,s2,0
    1478:	0000                	unimp
    147a:	0301                	addi	t1,t1,0
    147c:	0901                	addi	s2,s2,0
    147e:	0000                	unimp
    1480:	0301                	addi	t1,t1,0
    1482:	0902                	c.slli64	s2
    1484:	0000                	unimp
    1486:	0301                	addi	t1,t1,0
    1488:	0901                	addi	s2,s2,0
    148a:	0000                	unimp
    148c:	0501                	addi	a0,a0,0
    148e:	060c                	addi	a1,sp,768
    1490:	02090003          	lb	zero,32(s2)
    1494:	0100                	addi	s0,sp,128
    1496:	1105                	addi	sp,sp,-31
    1498:	02090303          	lb	t1,32(s2)
    149c:	0100                	addi	s0,sp,128
    149e:	0200                	addi	s0,sp,256
    14a0:	0104                	addi	s1,sp,128
    14a2:	0306                	slli	t1,t1,0x1
    14a4:	097d                	addi	s2,s2,31
    14a6:	0008                	0x8
    14a8:	0501                	addi	a0,a0,0
    14aa:	0005                	c.nop	1
    14ac:	0402                	c.slli64	s0
    14ae:	0601                	addi	a2,a2,0
    14b0:	00090003          	lb	zero,0(s2)
    14b4:	0100                	addi	s0,sp,128
    14b6:	0306                	slli	t1,t1,0x1
    14b8:	090a                	slli	s2,s2,0x2
    14ba:	0004                	0x4
    14bc:	0501                	addi	a0,a0,0
    14be:	060d                	addi	a2,a2,3
    14c0:	00090003          	lb	zero,0(s2)
    14c4:	0100                	addi	s0,sp,128
    14c6:	0505                	addi	a0,a0,1
    14c8:	0306                	slli	t1,t1,0x1
    14ca:	00060903          	lb	s2,0(a2)
    14ce:	0501                	addi	a0,a0,0
    14d0:	0900030b          	0x900030b
    14d4:	0000                	unimp
    14d6:	0501                	addi	a0,a0,0
    14d8:	0624                	addi	s1,sp,776
    14da:	00091603          	lh	a2,0(s2)
    14de:	0100                	addi	s0,sp,128
    14e0:	1005                	c.nop	-31
    14e2:	08096e03          	0x8096e03
    14e6:	0100                	addi	s0,sp,128
    14e8:	0905                	addi	s2,s2,1
    14ea:	0200                	addi	s0,sp,256
    14ec:	0304                	addi	s1,sp,384
    14ee:	0306                	slli	t1,t1,0x1
    14f0:	0970                	addi	a2,sp,156
    14f2:	0004                	0x4
    14f4:	0501                	addi	a0,a0,0
    14f6:	0018                	0x18
    14f8:	0402                	c.slli64	s0
    14fa:	00030603          	lb	a2,0(t1)
    14fe:	0009                	c.nop	2
    1500:	0100                	addi	s0,sp,128
    1502:	1105                	addi	sp,sp,-31
    1504:	0200                	addi	s0,sp,256
    1506:	0304                	addi	s1,sp,384
    1508:	04090003          	lb	zero,64(s2)
    150c:	0100                	addi	s0,sp,128
    150e:	1b05                	addi	s6,s6,-31
    1510:	0200                	addi	s0,sp,256
    1512:	0304                	addi	s1,sp,384
    1514:	08097f03          	0x8097f03
    1518:	0100                	addi	s0,sp,128
    151a:	1105                	addi	sp,sp,-31
    151c:	0200                	addi	s0,sp,256
    151e:	0304                	addi	s1,sp,384
    1520:	02090103          	lb	sp,32(s2)
    1524:	0100                	addi	s0,sp,128
    1526:	0905                	addi	s2,s2,1
    1528:	0200                	addi	s0,sp,256
    152a:	0304                	addi	s1,sp,384
    152c:	0306                	slli	t1,t1,0x1
    152e:	0901                	addi	s2,s2,0
    1530:	0004                	0x4
    1532:	0501                	addi	a0,a0,0
    1534:	0018                	0x18
    1536:	0402                	c.slli64	s0
    1538:	00030603          	lb	a2,0(t1)
    153c:	0009                	c.nop	2
    153e:	0100                	addi	s0,sp,128
    1540:	1105                	addi	sp,sp,-31
    1542:	0200                	addi	s0,sp,256
    1544:	0304                	addi	s1,sp,384
    1546:	04090003          	lb	zero,64(s2)
    154a:	0100                	addi	s0,sp,128
    154c:	0905                	addi	s2,s2,1
    154e:	0200                	addi	s0,sp,256
    1550:	0304                	addi	s1,sp,384
    1552:	0306                	slli	t1,t1,0x1
    1554:	0901                	addi	s2,s2,0
    1556:	000c                	0xc
    1558:	0501                	addi	a0,a0,0
    155a:	0011                	c.nop	4
    155c:	0402                	c.slli64	s0
    155e:	00030603          	lb	a2,0(t1)
    1562:	0009                	c.nop	2
    1564:	0100                	addi	s0,sp,128
    1566:	0905                	addi	s2,s2,1
    1568:	0200                	addi	s0,sp,256
    156a:	0304                	addi	s1,sp,384
    156c:	0306                	slli	t1,t1,0x1
    156e:	0901                	addi	s2,s2,0
    1570:	0008                	0x8
    1572:	0501                	addi	a0,a0,0
    1574:	0011                	c.nop	4
    1576:	0402                	c.slli64	s0
    1578:	00030603          	lb	a2,0(t1)
    157c:	0009                	c.nop	2
    157e:	0100                	addi	s0,sp,128
    1580:	1b05                	addi	s6,s6,-31
    1582:	0200                	addi	s0,sp,256
    1584:	0304                	addi	s1,sp,384
    1586:	0306                	slli	t1,t1,0x1
    1588:	097c                	addi	a5,sp,156
    158a:	0008                	0x8
    158c:	0501                	addi	a0,a0,0
    158e:	0311                	addi	t1,t1,4
    1590:	00040913          	mv	s2,s0
    1594:	0501                	addi	a0,a0,0
    1596:	00030623          	sb	zero,12(t1)
    159a:	0009                	c.nop	2
    159c:	0100                	addi	s0,sp,128
    159e:	1905                	addi	s2,s2,-31
    15a0:	02090003          	lb	zero,32(s2)
    15a4:	0100                	addi	s0,sp,128
    15a6:	1305                	addi	t1,t1,-31
    15a8:	0306                	slli	t1,t1,0x1
    15aa:	097f                	0x97f
    15ac:	0002                	c.slli64	zero
    15ae:	0501                	addi	a0,a0,0
    15b0:	0618                	addi	a4,sp,768
    15b2:	00090003          	lb	zero,0(s2)
    15b6:	0100                	addi	s0,sp,128
    15b8:	1305                	addi	t1,t1,-31
    15ba:	02090003          	lb	zero,32(s2)
    15be:	0100                	addi	s0,sp,128
    15c0:	0d05                	addi	s10,s10,1
    15c2:	0200                	addi	s0,sp,256
    15c4:	0204                	addi	s1,sp,256
    15c6:	0306                	slli	t1,t1,0x1
    15c8:	00040903          	lb	s2,0(s0)
    15cc:	0501                	addi	a0,a0,0
    15ce:	001f 0402 0602      	0x6020402001f
    15d4:	00090003          	lb	zero,0(s2)
    15d8:	0100                	addi	s0,sp,128
    15da:	2005                	jal	15fa <product2+0x182>
    15dc:	0200                	addi	s0,sp,256
    15de:	0204                	addi	s1,sp,256
    15e0:	04097c03          	0x4097c03
    15e4:	0100                	addi	s0,sp,128
    15e6:	1505                	addi	a0,a0,-31
    15e8:	0200                	addi	s0,sp,256
    15ea:	0204                	addi	s1,sp,256
    15ec:	02090403          	lb	s0,32(s2)
    15f0:	0100                	addi	s0,sp,128
    15f2:	2005                	jal	1612 <product2+0x19a>
    15f4:	0200                	addi	s0,sp,256
    15f6:	0204                	addi	s1,sp,256
    15f8:	0306                	slli	t1,t1,0x1
    15fa:	097c                	addi	a5,sp,156
    15fc:	0002                	c.slli64	zero
    15fe:	0501                	addi	a0,a0,0
    1600:	0015                	c.nop	5
    1602:	0402                	c.slli64	s0
    1604:	0301                	addi	t1,t1,0
    1606:	0900                	addi	s0,sp,144
    1608:	0000                	unimp
    160a:	0501                	addi	a0,a0,0
    160c:	0009                	c.nop	2
    160e:	0402                	c.slli64	s0
    1610:	0601                	addi	a2,a2,0
    1612:	00090003          	lb	zero,0(s2)
    1616:	0100                	addi	s0,sp,128
    1618:	1005                	c.nop	-31
    161a:	0e090903          	lb	s2,224(s2)
    161e:	0100                	addi	s0,sp,128
    1620:	1505                	addi	a0,a0,-31
    1622:	0200                	addi	s0,sp,256
    1624:	0104                	addi	s1,sp,128
    1626:	0306                	slli	t1,t1,0x1
    1628:	0900                	addi	s0,sp,144
    162a:	0002                	c.slli64	zero
    162c:	0501                	addi	a0,a0,0
    162e:	0009                	c.nop	2
    1630:	0402                	c.slli64	s0
    1632:	0601                	addi	a2,a2,0
    1634:	00090003          	lb	zero,0(s2)
    1638:	0100                	addi	s0,sp,128
    163a:	0306                	slli	t1,t1,0x1
    163c:	0908                	addi	a0,sp,144
    163e:	0004                	0x4
    1640:	0501                	addi	a0,a0,0
    1642:	0003060f          	0x3060f
    1646:	0009                	c.nop	2
    1648:	0100                	addi	s0,sp,128
    164a:	0905                	addi	s2,s2,1
    164c:	0306                	slli	t1,t1,0x1
    164e:	0901                	addi	s2,s2,0
    1650:	000c                	0xc
    1652:	0501                	addi	a0,a0,0
    1654:	0019                	c.nop	6
    1656:	0402                	c.slli64	s0
    1658:	0301                	addi	t1,t1,0
    165a:	0900                	addi	s0,sp,144
    165c:	0004                	0x4
    165e:	0501                	addi	a0,a0,0
    1660:	0009                	c.nop	2
    1662:	0402                	c.slli64	s0
    1664:	0601                	addi	a2,a2,0
    1666:	00090003          	lb	zero,0(s2)
    166a:	0100                	addi	s0,sp,128
    166c:	1005                	c.nop	-31
    166e:	0a090603          	lb	a2,160(s2)
    1672:	0100                	addi	s0,sp,128
    1674:	1505                	addi	a0,a0,-31
    1676:	0200                	addi	s0,sp,256
    1678:	0104                	addi	s1,sp,128
    167a:	0306                	slli	t1,t1,0x1
    167c:	0900                	addi	s0,sp,144
    167e:	0002                	c.slli64	zero
    1680:	0501                	addi	a0,a0,0
    1682:	0009                	c.nop	2
    1684:	0402                	c.slli64	s0
    1686:	0601                	addi	a2,a2,0
    1688:	00090003          	lb	zero,0(s2)
    168c:	0100                	addi	s0,sp,128
    168e:	06090003          	lb	zero,96(s2)
    1692:	0100                	addi	s0,sp,128
    1694:	1005                	c.nop	-31
    1696:	02090503          	lb	a0,32(s2)
    169a:	0100                	addi	s0,sp,128
    169c:	1505                	addi	a0,a0,-31
    169e:	0200                	addi	s0,sp,256
    16a0:	0104                	addi	s1,sp,128
    16a2:	0306                	slli	t1,t1,0x1
    16a4:	0900                	addi	s0,sp,144
    16a6:	0002                	c.slli64	zero
    16a8:	0501                	addi	a0,a0,0
    16aa:	0009                	c.nop	2
    16ac:	0402                	c.slli64	s0
    16ae:	0601                	addi	a2,a2,0
    16b0:	00090003          	lb	zero,0(s2)
    16b4:	0100                	addi	s0,sp,128
    16b6:	0306                	slli	t1,t1,0x1
    16b8:	0908                	addi	a0,sp,144
    16ba:	0004                	0x4
    16bc:	0501                	addi	a0,a0,0
    16be:	0610                	addi	a2,sp,768
    16c0:	00090003          	lb	zero,0(s2)
    16c4:	0100                	addi	s0,sp,128
    16c6:	0905                	addi	s2,s2,1
    16c8:	0306                	slli	t1,t1,0x1
    16ca:	0901                	addi	s2,s2,0
    16cc:	000c                	0xc
    16ce:	0501                	addi	a0,a0,0
    16d0:	0610                	addi	a2,sp,768
    16d2:	00090003          	lb	zero,0(s2)
    16d6:	0100                	addi	s0,sp,128
    16d8:	1505                	addi	a0,a0,-31
    16da:	0200                	addi	s0,sp,256
    16dc:	0104                	addi	s1,sp,128
    16de:	0306                	slli	t1,t1,0x1
    16e0:	0900                	addi	s0,sp,144
    16e2:	0002                	c.slli64	zero
    16e4:	0501                	addi	a0,a0,0
    16e6:	0009                	c.nop	2
    16e8:	0402                	c.slli64	s0
    16ea:	0601                	addi	a2,a2,0
    16ec:	00090003          	lb	zero,0(s2)
    16f0:	0100                	addi	s0,sp,128
    16f2:	1005                	c.nop	-31
    16f4:	06090603          	lb	a2,96(s2)
    16f8:	0100                	addi	s0,sp,128
    16fa:	1505                	addi	a0,a0,-31
    16fc:	0200                	addi	s0,sp,256
    16fe:	0104                	addi	s1,sp,128
    1700:	0306                	slli	t1,t1,0x1
    1702:	0900                	addi	s0,sp,144
    1704:	0002                	c.slli64	zero
    1706:	0501                	addi	a0,a0,0
    1708:	0009                	c.nop	2
    170a:	0402                	c.slli64	s0
    170c:	0601                	addi	a2,a2,0
    170e:	00090003          	lb	zero,0(s2)
    1712:	0100                	addi	s0,sp,128
    1714:	0306                	slli	t1,t1,0x1
    1716:	090a                	slli	s2,s2,0x2
    1718:	0004                	0x4
    171a:	0501                	addi	a0,a0,0
    171c:	0610                	addi	a2,sp,768
    171e:	00090003          	lb	zero,0(s2)
    1722:	0100                	addi	s0,sp,128
    1724:	0905                	addi	s2,s2,1
    1726:	0306                	slli	t1,t1,0x1
    1728:	0901                	addi	s2,s2,0
    172a:	000e                	c.slli	zero,0x3
    172c:	0501                	addi	a0,a0,0
    172e:	0610                	addi	a2,sp,768
    1730:	00090003          	lb	zero,0(s2)
    1734:	0100                	addi	s0,sp,128
    1736:	1505                	addi	a0,a0,-31
    1738:	0200                	addi	s0,sp,256
    173a:	0104                	addi	s1,sp,128
    173c:	0306                	slli	t1,t1,0x1
    173e:	0900                	addi	s0,sp,144
    1740:	0002                	c.slli64	zero
    1742:	0501                	addi	a0,a0,0
    1744:	0009                	c.nop	2
    1746:	0402                	c.slli64	s0
    1748:	0601                	addi	a2,a2,0
    174a:	00090003          	lb	zero,0(s2)
    174e:	0100                	addi	s0,sp,128
    1750:	1005                	c.nop	-31
    1752:	04090403          	lb	s0,64(s2)
    1756:	0100                	addi	s0,sp,128
    1758:	1505                	addi	a0,a0,-31
    175a:	0200                	addi	s0,sp,256
    175c:	0104                	addi	s1,sp,128
    175e:	0306                	slli	t1,t1,0x1
    1760:	0900                	addi	s0,sp,144
    1762:	0002                	c.slli64	zero
    1764:	0501                	addi	a0,a0,0
    1766:	0009                	c.nop	2
    1768:	0402                	c.slli64	s0
    176a:	0601                	addi	a2,a2,0
    176c:	00090003          	lb	zero,0(s2)
    1770:	0100                	addi	s0,sp,128
    1772:	1005                	c.nop	-31
    1774:	06090803          	lb	a6,96(s2)
    1778:	0100                	addi	s0,sp,128
    177a:	1505                	addi	a0,a0,-31
    177c:	0200                	addi	s0,sp,256
    177e:	0104                	addi	s1,sp,128
    1780:	0306                	slli	t1,t1,0x1
    1782:	0900                	addi	s0,sp,144
    1784:	0002                	c.slli64	zero
    1786:	0501                	addi	a0,a0,0
    1788:	0009                	c.nop	2
    178a:	0402                	c.slli64	s0
    178c:	0601                	addi	a2,a2,0
    178e:	00090003          	lb	zero,0(s2)
    1792:	0100                	addi	s0,sp,128
    1794:	1005                	c.nop	-31
    1796:	06090403          	lb	s0,96(s2)
    179a:	0100                	addi	s0,sp,128
    179c:	1505                	addi	a0,a0,-31
    179e:	0200                	addi	s0,sp,256
    17a0:	0104                	addi	s1,sp,128
    17a2:	0306                	slli	t1,t1,0x1
    17a4:	0900                	addi	s0,sp,144
    17a6:	0002                	c.slli64	zero
    17a8:	0501                	addi	a0,a0,0
    17aa:	0009                	c.nop	2
    17ac:	0402                	c.slli64	s0
    17ae:	0601                	addi	a2,a2,0
    17b0:	00090003          	lb	zero,0(s2)
    17b4:	0100                	addi	s0,sp,128
    17b6:	1205                	addi	tp,tp,-31
    17b8:	097fb703          	0x97fb703
    17bc:	0006                	c.slli	zero,0x1
    17be:	0501                	addi	a0,a0,0
    17c0:	0310                	addi	a2,sp,384
    17c2:	00d2                	slli	ra,ra,0x14
    17c4:	0209                	addi	tp,tp,2
    17c6:	0100                	addi	s0,sp,128
    17c8:	1505                	addi	a0,a0,-31
    17ca:	0200                	addi	s0,sp,256
    17cc:	0104                	addi	s1,sp,128
    17ce:	0306                	slli	t1,t1,0x1
    17d0:	0900                	addi	s0,sp,144
    17d2:	0002                	c.slli64	zero
    17d4:	0501                	addi	a0,a0,0
    17d6:	0009                	c.nop	2
    17d8:	0402                	c.slli64	s0
    17da:	0601                	addi	a2,a2,0
    17dc:	00090003          	lb	zero,0(s2)
    17e0:	0100                	addi	s0,sp,128
    17e2:	0b05                	addi	s6,s6,1
    17e4:	0306                	slli	t1,t1,0x1
    17e6:	7fac                	flw	fa1,120(a5)
    17e8:	0409                	addi	s0,s0,2
    17ea:	0100                	addi	s0,sp,128
    17ec:	1005                	c.nop	-31
    17ee:	0306                	slli	t1,t1,0x1
    17f0:	00df 0209 0100      	0x100020900df
    17f6:	02090103          	lb	sp,32(s2)
    17fa:	0100                	addi	s0,sp,128
    17fc:	1505                	addi	a0,a0,-31
    17fe:	0200                	addi	s0,sp,256
    1800:	0104                	addi	s1,sp,128
    1802:	0306                	slli	t1,t1,0x1
    1804:	097f                	0x97f
    1806:	0002                	c.slli64	zero
    1808:	0501                	addi	a0,a0,0
    180a:	0009                	c.nop	2
    180c:	0402                	c.slli64	s0
    180e:	0601                	addi	a2,a2,0
    1810:	00090003          	lb	zero,0(s2)
    1814:	0100                	addi	s0,sp,128
    1816:	1505                	addi	a0,a0,-31
    1818:	0200                	addi	s0,sp,256
    181a:	0104                	addi	s1,sp,128
    181c:	0306                	slli	t1,t1,0x1
    181e:	090c                	addi	a1,sp,144
    1820:	000c                	0xc
    1822:	0501                	addi	a0,a0,0
    1824:	0009                	c.nop	2
    1826:	0402                	c.slli64	s0
    1828:	0601                	addi	a2,a2,0
    182a:	00090003          	lb	zero,0(s2)
    182e:	0100                	addi	s0,sp,128
    1830:	0306                	slli	t1,t1,0x1
    1832:	0905                	addi	s2,s2,1
    1834:	0004                	0x4
    1836:	0301                	addi	t1,t1,0
    1838:	0901                	addi	s2,s2,0
    183a:	0000                	unimp
    183c:	0501                	addi	a0,a0,0
    183e:	0605                	addi	a2,a2,1
    1840:	00090103          	lb	sp,0(s2)
    1844:	0100                	addi	s0,sp,128
    1846:	1105                	addi	sp,sp,-31
    1848:	0306                	slli	t1,t1,0x1
    184a:	7f9d                	lui	t6,0xfffe7
    184c:	2a09                	jal	195e <ti_2+0x36>
    184e:	0100                	addi	s0,sp,128
    1850:	2305                	jal	1d70 <random_keys+0x2b8>
    1852:	0306                	slli	t1,t1,0x1
    1854:	0900                	addi	s0,sp,144
    1856:	0000                	unimp
    1858:	0501                	addi	a0,a0,0
    185a:	0319                	addi	t1,t1,6
    185c:	0900                	addi	s0,sp,144
    185e:	0002                	c.slli64	zero
    1860:	0501                	addi	a0,a0,0
    1862:	7f030613          	addi	a2,t1,2032
    1866:	0209                	addi	tp,tp,2
    1868:	0100                	addi	s0,sp,128
    186a:	1805                	addi	a6,a6,-31
    186c:	0306                	slli	t1,t1,0x1
    186e:	0900                	addi	s0,sp,144
    1870:	0000                	unimp
    1872:	0501                	addi	a0,a0,0
    1874:	09000313          	li	t1,144
    1878:	0002                	c.slli64	zero
    187a:	0501                	addi	a0,a0,0
    187c:	000d                	c.nop	3
    187e:	0402                	c.slli64	s0
    1880:	0602                	c.slli64	a2
    1882:	04090303          	lb	t1,64(s2)
    1886:	0100                	addi	s0,sp,128
    1888:	1f05                	addi	t5,t5,-31
    188a:	0200                	addi	s0,sp,256
    188c:	0204                	addi	s1,sp,256
    188e:	0306                	slli	t1,t1,0x1
    1890:	0900                	addi	s0,sp,144
    1892:	0000                	unimp
    1894:	0501                	addi	a0,a0,0
    1896:	0020                	addi	s0,sp,8
    1898:	0402                	c.slli64	s0
    189a:	0302                	c.slli64	t1
    189c:	097c                	addi	a5,sp,156
    189e:	0004                	0x4
    18a0:	0501                	addi	a0,a0,0
    18a2:	0015                	c.nop	5
    18a4:	0402                	c.slli64	s0
    18a6:	0302                	c.slli64	t1
    18a8:	0904                	addi	s1,sp,144
    18aa:	0004                	0x4
    18ac:	0501                	addi	a0,a0,0
    18ae:	0020                	addi	s0,sp,8
    18b0:	0402                	c.slli64	s0
    18b2:	0602                	c.slli64	a2
    18b4:	04097c03          	0x4097c03
    18b8:	0100                	addi	s0,sp,128
    18ba:	0d05                	addi	s10,s10,1
    18bc:	0200                	addi	s0,sp,256
    18be:	0304                	addi	s1,sp,384
    18c0:	02090a03          	lb	s4,32(s2)
    18c4:	0100                	addi	s0,sp,128
    18c6:	2205                	jal	19e6 <ti_2+0xbe>
    18c8:	0200                	addi	s0,sp,256
    18ca:	0304                	addi	s1,sp,384
    18cc:	0306                	slli	t1,t1,0x1
    18ce:	0900                	addi	s0,sp,144
    18d0:	0000                	unimp
    18d2:	0501                	addi	a0,a0,0
    18d4:	001d                	c.nop	7
    18d6:	0402                	c.slli64	s0
    18d8:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    18dc:	0006                	c.slli	zero,0x1
    18de:	0501                	addi	a0,a0,0
    18e0:	002a                	c.slli	zero,0xa
    18e2:	0402                	c.slli64	s0
    18e4:	097f0303          	lb	t1,151(t5)
    18e8:	0002                	c.slli64	zero
    18ea:	0501                	addi	a0,a0,0
    18ec:	001d                	c.nop	7
    18ee:	0402                	c.slli64	s0
    18f0:	09010303          	lb	t1,144(sp)
    18f4:	0004                	0x4
    18f6:	0501                	addi	a0,a0,0
    18f8:	002a                	c.slli	zero,0xa
    18fa:	0402                	c.slli64	s0
    18fc:	7f030603          	lb	a2,2032(t1)
    1900:	0409                	addi	s0,s0,2
    1902:	0100                	addi	s0,sp,128
    1904:	0d05                	addi	s10,s10,1
    1906:	0200                	addi	s0,sp,256
    1908:	0304                	addi	s1,sp,384
    190a:	02090703          	lb	a4,32(s2)
    190e:	0100                	addi	s0,sp,128
    1910:	1b05                	addi	s6,s6,-31
    1912:	0200                	addi	s0,sp,256
    1914:	0304                	addi	s1,sp,384
    1916:	0306                	slli	t1,t1,0x1
    1918:	0900                	addi	s0,sp,144
    191a:	0000                	unimp
    191c:	0501                	addi	a0,a0,0
    191e:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1922:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1926:	0004                	0x4
    1928:	0501                	addi	a0,a0,0
    192a:	001f 0402 0303      	0x3030402001f
    1930:	0900                	addi	s0,sp,144
    1932:	0004                	0x4
    1934:	0501                	addi	a0,a0,0
    1936:	0015                	c.nop	5
    1938:	0402                	c.slli64	s0
    193a:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    193e:	0004                	0x4
    1940:	0501                	addi	a0,a0,0
    1942:	0020                	addi	s0,sp,8
    1944:	0402                	c.slli64	s0
    1946:	097f0303          	lb	t1,151(t5)
    194a:	0004                	0x4
    194c:	0501                	addi	a0,a0,0
    194e:	001f 0402 0303      	0x3030402001f
    1954:	0901                	addi	s2,s2,0
    1956:	0002                	c.slli64	zero
    1958:	0501                	addi	a0,a0,0
    195a:	0015                	c.nop	5
    195c:	0402                	c.slli64	s0
    195e:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1962:	0002                	c.slli64	zero
    1964:	0501                	addi	a0,a0,0
    1966:	0020                	addi	s0,sp,8
    1968:	0402                	c.slli64	s0
    196a:	7f030603          	lb	a2,2032(t1)
    196e:	0209                	addi	tp,tp,2
    1970:	0100                	addi	s0,sp,128
    1972:	1105                	addi	sp,sp,-31
    1974:	04090703          	lb	a4,64(s2)
    1978:	0100                	addi	s0,sp,128
    197a:	2305                	jal	1e9a <random_keys+0x3e2>
    197c:	0306                	slli	t1,t1,0x1
    197e:	0900                	addi	s0,sp,144
    1980:	0000                	unimp
    1982:	0501                	addi	a0,a0,0
    1984:	0319                	addi	t1,t1,6
    1986:	0900                	addi	s0,sp,144
    1988:	0002                	c.slli64	zero
    198a:	0501                	addi	a0,a0,0
    198c:	7f030613          	addi	a2,t1,2032
    1990:	0209                	addi	tp,tp,2
    1992:	0100                	addi	s0,sp,128
    1994:	1805                	addi	a6,a6,-31
    1996:	0306                	slli	t1,t1,0x1
    1998:	0900                	addi	s0,sp,144
    199a:	0000                	unimp
    199c:	0501                	addi	a0,a0,0
    199e:	09000313          	li	t1,144
    19a2:	0002                	c.slli64	zero
    19a4:	0501                	addi	a0,a0,0
    19a6:	000d                	c.nop	3
    19a8:	0402                	c.slli64	s0
    19aa:	0602                	c.slli64	a2
    19ac:	04090303          	lb	t1,64(s2)
    19b0:	0100                	addi	s0,sp,128
    19b2:	1f05                	addi	t5,t5,-31
    19b4:	0200                	addi	s0,sp,256
    19b6:	0204                	addi	s1,sp,256
    19b8:	0306                	slli	t1,t1,0x1
    19ba:	0900                	addi	s0,sp,144
    19bc:	0000                	unimp
    19be:	0501                	addi	a0,a0,0
    19c0:	0020                	addi	s0,sp,8
    19c2:	0402                	c.slli64	s0
    19c4:	0302                	c.slli64	t1
    19c6:	097c                	addi	a5,sp,156
    19c8:	0004                	0x4
    19ca:	0501                	addi	a0,a0,0
    19cc:	0015                	c.nop	5
    19ce:	0402                	c.slli64	s0
    19d0:	0302                	c.slli64	t1
    19d2:	0904                	addi	s1,sp,144
    19d4:	0004                	0x4
    19d6:	0501                	addi	a0,a0,0
    19d8:	0020                	addi	s0,sp,8
    19da:	0402                	c.slli64	s0
    19dc:	0602                	c.slli64	a2
    19de:	04097c03          	0x4097c03
    19e2:	0100                	addi	s0,sp,128
    19e4:	0d05                	addi	s10,s10,1
    19e6:	0200                	addi	s0,sp,256
    19e8:	0304                	addi	s1,sp,384
    19ea:	02090a03          	lb	s4,32(s2)
    19ee:	0100                	addi	s0,sp,128
    19f0:	1b05                	addi	s6,s6,-31
    19f2:	0200                	addi	s0,sp,256
    19f4:	0304                	addi	s1,sp,384
    19f6:	0306                	slli	t1,t1,0x1
    19f8:	0900                	addi	s0,sp,144
    19fa:	0004                	0x4
    19fc:	0501                	addi	a0,a0,0
    19fe:	0015                	c.nop	5
    1a00:	0402                	c.slli64	s0
    1a02:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1a06:	0006                	c.slli	zero,0x1
    1a08:	0501                	addi	a0,a0,0
    1a0a:	0020                	addi	s0,sp,8
    1a0c:	0402                	c.slli64	s0
    1a0e:	097f0303          	lb	t1,151(t5)
    1a12:	0002                	c.slli64	zero
    1a14:	0501                	addi	a0,a0,0
    1a16:	0015                	c.nop	5
    1a18:	0402                	c.slli64	s0
    1a1a:	09010303          	lb	t1,144(sp)
    1a1e:	0002                	c.slli64	zero
    1a20:	0501                	addi	a0,a0,0
    1a22:	0020                	addi	s0,sp,8
    1a24:	0402                	c.slli64	s0
    1a26:	7f030603          	lb	a2,2032(t1)
    1a2a:	0209                	addi	tp,tp,2
    1a2c:	0100                	addi	s0,sp,128
    1a2e:	1105                	addi	sp,sp,-31
    1a30:	02090803          	lb	a6,32(s2)
    1a34:	0100                	addi	s0,sp,128
    1a36:	2305                	jal	1f56 <random_keys+0x49e>
    1a38:	0306                	slli	t1,t1,0x1
    1a3a:	0900                	addi	s0,sp,144
    1a3c:	0000                	unimp
    1a3e:	0501                	addi	a0,a0,0
    1a40:	0319                	addi	t1,t1,6
    1a42:	0900                	addi	s0,sp,144
    1a44:	0002                	c.slli64	zero
    1a46:	0501                	addi	a0,a0,0
    1a48:	7f030613          	addi	a2,t1,2032
    1a4c:	0209                	addi	tp,tp,2
    1a4e:	0100                	addi	s0,sp,128
    1a50:	1805                	addi	a6,a6,-31
    1a52:	0306                	slli	t1,t1,0x1
    1a54:	0900                	addi	s0,sp,144
    1a56:	0000                	unimp
    1a58:	0501                	addi	a0,a0,0
    1a5a:	09000313          	li	t1,144
    1a5e:	0002                	c.slli64	zero
    1a60:	0501                	addi	a0,a0,0
    1a62:	000d                	c.nop	3
    1a64:	0402                	c.slli64	s0
    1a66:	0602                	c.slli64	a2
    1a68:	04090303          	lb	t1,64(s2)
    1a6c:	0100                	addi	s0,sp,128
    1a6e:	1f05                	addi	t5,t5,-31
    1a70:	0200                	addi	s0,sp,256
    1a72:	0204                	addi	s1,sp,256
    1a74:	0306                	slli	t1,t1,0x1
    1a76:	0900                	addi	s0,sp,144
    1a78:	0000                	unimp
    1a7a:	0501                	addi	a0,a0,0
    1a7c:	0020                	addi	s0,sp,8
    1a7e:	0402                	c.slli64	s0
    1a80:	0302                	c.slli64	t1
    1a82:	097c                	addi	a5,sp,156
    1a84:	0004                	0x4
    1a86:	0501                	addi	a0,a0,0
    1a88:	0015                	c.nop	5
    1a8a:	0402                	c.slli64	s0
    1a8c:	0302                	c.slli64	t1
    1a8e:	0904                	addi	s1,sp,144
    1a90:	0004                	0x4
    1a92:	0501                	addi	a0,a0,0
    1a94:	0020                	addi	s0,sp,8
    1a96:	0402                	c.slli64	s0
    1a98:	0602                	c.slli64	a2
    1a9a:	04097c03          	0x4097c03
    1a9e:	0100                	addi	s0,sp,128
    1aa0:	0d05                	addi	s10,s10,1
    1aa2:	0200                	addi	s0,sp,256
    1aa4:	0304                	addi	s1,sp,384
    1aa6:	02090c03          	lb	s8,32(s2)
    1aaa:	0100                	addi	s0,sp,128
    1aac:	1b05                	addi	s6,s6,-31
    1aae:	0200                	addi	s0,sp,256
    1ab0:	0304                	addi	s1,sp,384
    1ab2:	0306                	slli	t1,t1,0x1
    1ab4:	0900                	addi	s0,sp,144
    1ab6:	0004                	0x4
    1ab8:	0501                	addi	a0,a0,0
    1aba:	0015                	c.nop	5
    1abc:	0402                	c.slli64	s0
    1abe:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1ac2:	0006                	c.slli	zero,0x1
    1ac4:	0501                	addi	a0,a0,0
    1ac6:	0020                	addi	s0,sp,8
    1ac8:	0402                	c.slli64	s0
    1aca:	097f0303          	lb	t1,151(t5)
    1ace:	0002                	c.slli64	zero
    1ad0:	0501                	addi	a0,a0,0
    1ad2:	0015                	c.nop	5
    1ad4:	0402                	c.slli64	s0
    1ad6:	09010303          	lb	t1,144(sp)
    1ada:	0002                	c.slli64	zero
    1adc:	0501                	addi	a0,a0,0
    1ade:	0020                	addi	s0,sp,8
    1ae0:	0402                	c.slli64	s0
    1ae2:	7f030603          	lb	a2,2032(t1)
    1ae6:	0209                	addi	tp,tp,2
    1ae8:	0100                	addi	s0,sp,128
    1aea:	1105                	addi	sp,sp,-31
    1aec:	02090603          	lb	a2,32(s2)
    1af0:	0100                	addi	s0,sp,128
    1af2:	2305                	jal	2012 <_min_stack+0x12>
    1af4:	0306                	slli	t1,t1,0x1
    1af6:	0900                	addi	s0,sp,144
    1af8:	0000                	unimp
    1afa:	0501                	addi	a0,a0,0
    1afc:	0319                	addi	t1,t1,6
    1afe:	0900                	addi	s0,sp,144
    1b00:	0002                	c.slli64	zero
    1b02:	0501                	addi	a0,a0,0
    1b04:	7f030613          	addi	a2,t1,2032
    1b08:	0409                	addi	s0,s0,2
    1b0a:	0100                	addi	s0,sp,128
    1b0c:	1805                	addi	a6,a6,-31
    1b0e:	0306                	slli	t1,t1,0x1
    1b10:	0900                	addi	s0,sp,144
    1b12:	0000                	unimp
    1b14:	0501                	addi	a0,a0,0
    1b16:	09000313          	li	t1,144
    1b1a:	0004                	0x4
    1b1c:	0501                	addi	a0,a0,0
    1b1e:	000d                	c.nop	3
    1b20:	0402                	c.slli64	s0
    1b22:	0602                	c.slli64	a2
    1b24:	04090303          	lb	t1,64(s2)
    1b28:	0100                	addi	s0,sp,128
    1b2a:	1f05                	addi	t5,t5,-31
    1b2c:	0200                	addi	s0,sp,256
    1b2e:	0204                	addi	s1,sp,256
    1b30:	0306                	slli	t1,t1,0x1
    1b32:	0900                	addi	s0,sp,144
    1b34:	0000                	unimp
    1b36:	0501                	addi	a0,a0,0
    1b38:	0020                	addi	s0,sp,8
    1b3a:	0402                	c.slli64	s0
    1b3c:	0302                	c.slli64	t1
    1b3e:	097c                	addi	a5,sp,156
    1b40:	0004                	0x4
    1b42:	0501                	addi	a0,a0,0
    1b44:	0015                	c.nop	5
    1b46:	0402                	c.slli64	s0
    1b48:	0302                	c.slli64	t1
    1b4a:	0904                	addi	s1,sp,144
    1b4c:	0004                	0x4
    1b4e:	0501                	addi	a0,a0,0
    1b50:	0020                	addi	s0,sp,8
    1b52:	0402                	c.slli64	s0
    1b54:	0602                	c.slli64	a2
    1b56:	04097c03          	0x4097c03
    1b5a:	0100                	addi	s0,sp,128
    1b5c:	0d05                	addi	s10,s10,1
    1b5e:	0200                	addi	s0,sp,256
    1b60:	0304                	addi	s1,sp,384
    1b62:	02090903          	lb	s2,32(s2)
    1b66:	0100                	addi	s0,sp,128
    1b68:	1905                	addi	s2,s2,-31
    1b6a:	0200                	addi	s0,sp,256
    1b6c:	0304                	addi	s1,sp,384
    1b6e:	0306                	slli	t1,t1,0x1
    1b70:	0900                	addi	s0,sp,144
    1b72:	0000                	unimp
    1b74:	0501                	addi	a0,a0,0
    1b76:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1b7a:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1b7e:	000a                	c.slli	zero,0x2
    1b80:	0501                	addi	a0,a0,0
    1b82:	001d                	c.nop	7
    1b84:	0402                	c.slli64	s0
    1b86:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1b8a:	0004                	0x4
    1b8c:	0501                	addi	a0,a0,0
    1b8e:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1b92:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1b96:	0004                	0x4
    1b98:	0501                	addi	a0,a0,0
    1b9a:	0020                	addi	s0,sp,8
    1b9c:	0402                	c.slli64	s0
    1b9e:	097f0303          	lb	t1,151(t5)
    1ba2:	0004                	0x4
    1ba4:	0501                	addi	a0,a0,0
    1ba6:	001d                	c.nop	7
    1ba8:	0402                	c.slli64	s0
    1baa:	09010303          	lb	t1,144(sp)
    1bae:	0002                	c.slli64	zero
    1bb0:	0501                	addi	a0,a0,0
    1bb2:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1bb6:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1bba:	0002                	c.slli64	zero
    1bbc:	0501                	addi	a0,a0,0
    1bbe:	0020                	addi	s0,sp,8
    1bc0:	0402                	c.slli64	s0
    1bc2:	7f030603          	lb	a2,2032(t1)
    1bc6:	0209                	addi	tp,tp,2
    1bc8:	0100                	addi	s0,sp,128
    1bca:	1105                	addi	sp,sp,-31
    1bcc:	04090603          	lb	a2,64(s2)
    1bd0:	0100                	addi	s0,sp,128
    1bd2:	1f05                	addi	t5,t5,-31
    1bd4:	0306                	slli	t1,t1,0x1
    1bd6:	0900                	addi	s0,sp,144
    1bd8:	0000                	unimp
    1bda:	0501                	addi	a0,a0,0
    1bdc:	09000317          	auipc	t1,0x9000
    1be0:	0002                	c.slli64	zero
    1be2:	0501                	addi	a0,a0,0
    1be4:	7f030613          	addi	a2,t1,2032 # 90023cc <_stack_start+0x8ff23cc>
    1be8:	0209                	addi	tp,tp,2
    1bea:	0100                	addi	s0,sp,128
    1bec:	1605                	addi	a2,a2,-31
    1bee:	0306                	slli	t1,t1,0x1
    1bf0:	0900                	addi	s0,sp,144
    1bf2:	0000                	unimp
    1bf4:	0501                	addi	a0,a0,0
    1bf6:	09000313          	li	t1,144
    1bfa:	0002                	c.slli64	zero
    1bfc:	0501                	addi	a0,a0,0
    1bfe:	000d                	c.nop	3
    1c00:	0402                	c.slli64	s0
    1c02:	0602                	c.slli64	a2
    1c04:	04090303          	lb	t1,64(s2)
    1c08:	0100                	addi	s0,sp,128
    1c0a:	1b05                	addi	s6,s6,-31
    1c0c:	0200                	addi	s0,sp,256
    1c0e:	0204                	addi	s1,sp,256
    1c10:	0306                	slli	t1,t1,0x1
    1c12:	0900                	addi	s0,sp,144
    1c14:	0000                	unimp
    1c16:	0501                	addi	a0,a0,0
    1c18:	0020                	addi	s0,sp,8
    1c1a:	0402                	c.slli64	s0
    1c1c:	0302                	c.slli64	t1
    1c1e:	097c                	addi	a5,sp,156
    1c20:	0004                	0x4
    1c22:	0501                	addi	a0,a0,0
    1c24:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1c28:	0302                	c.slli64	t1
    1c2a:	0904                	addi	s1,sp,144
    1c2c:	0004                	0x4
    1c2e:	0501                	addi	a0,a0,0
    1c30:	0020                	addi	s0,sp,8
    1c32:	0402                	c.slli64	s0
    1c34:	0602                	c.slli64	a2
    1c36:	04097c03          	0x4097c03
    1c3a:	0100                	addi	s0,sp,128
    1c3c:	0d05                	addi	s10,s10,1
    1c3e:	0200                	addi	s0,sp,256
    1c40:	0304                	addi	s1,sp,384
    1c42:	02090a03          	lb	s4,32(s2)
    1c46:	0100                	addi	s0,sp,128
    1c48:	1505                	addi	a0,a0,-31
    1c4a:	0200                	addi	s0,sp,256
    1c4c:	0304                	addi	s1,sp,384
    1c4e:	0306                	slli	t1,t1,0x1
    1c50:	0900                	addi	s0,sp,144
    1c52:	0004                	0x4
    1c54:	0501                	addi	a0,a0,0
    1c56:	0020                	addi	s0,sp,8
    1c58:	0402                	c.slli64	s0
    1c5a:	097f0303          	lb	t1,151(t5)
    1c5e:	0006                	c.slli	zero,0x1
    1c60:	0501                	addi	a0,a0,0
    1c62:	0015                	c.nop	5
    1c64:	0402                	c.slli64	s0
    1c66:	09010303          	lb	t1,144(sp)
    1c6a:	0002                	c.slli64	zero
    1c6c:	0501                	addi	a0,a0,0
    1c6e:	000d                	c.nop	3
    1c70:	0402                	c.slli64	s0
    1c72:	01030603          	lb	a2,16(t1)
    1c76:	0209                	addi	tp,tp,2
    1c78:	0100                	addi	s0,sp,128
    1c7a:	1905                	addi	s2,s2,-31
    1c7c:	0200                	addi	s0,sp,256
    1c7e:	0304                	addi	s1,sp,384
    1c80:	0306                	slli	t1,t1,0x1
    1c82:	0900                	addi	s0,sp,144
    1c84:	0000                	unimp
    1c86:	0501                	addi	a0,a0,0
    1c88:	0015                	c.nop	5
    1c8a:	0402                	c.slli64	s0
    1c8c:	09010303          	lb	t1,144(sp)
    1c90:	0006                	c.slli	zero,0x1
    1c92:	0001                	nop
    1c94:	0402                	c.slli64	s0
    1c96:	097f0303          	lb	t1,151(t5)
    1c9a:	000a                	c.slli	zero,0x2
    1c9c:	0501                	addi	a0,a0,0
    1c9e:	000d                	c.nop	3
    1ca0:	0402                	c.slli64	s0
    1ca2:	01030603          	lb	a2,16(t1)
    1ca6:	0209                	addi	tp,tp,2
    1ca8:	0100                	addi	s0,sp,128
    1caa:	1505                	addi	a0,a0,-31
    1cac:	0200                	addi	s0,sp,256
    1cae:	0304                	addi	s1,sp,384
    1cb0:	0306                	slli	t1,t1,0x1
    1cb2:	0900                	addi	s0,sp,144
    1cb4:	0004                	0x4
    1cb6:	0501                	addi	a0,a0,0
    1cb8:	0016                	c.slli	zero,0x5
    1cba:	0402                	c.slli64	s0
    1cbc:	09030303          	lb	t1,144(t1)
    1cc0:	0004                	0x4
    1cc2:	0501                	addi	a0,a0,0
    1cc4:	0015                	c.nop	5
    1cc6:	0402                	c.slli64	s0
    1cc8:	097d0303          	lb	t1,151(s10)
    1ccc:	0002                	c.slli64	zero
    1cce:	0501                	addi	a0,a0,0
    1cd0:	000d                	c.nop	3
    1cd2:	0402                	c.slli64	s0
    1cd4:	01030603          	lb	a2,16(t1)
    1cd8:	0409                	addi	s0,s0,2
    1cda:	0100                	addi	s0,sp,128
    1cdc:	1905                	addi	s2,s2,-31
    1cde:	0200                	addi	s0,sp,256
    1ce0:	0304                	addi	s1,sp,384
    1ce2:	0306                	slli	t1,t1,0x1
    1ce4:	0900                	addi	s0,sp,144
    1ce6:	0000                	unimp
    1ce8:	0501                	addi	a0,a0,0
    1cea:	0015                	c.nop	5
    1cec:	0402                	c.slli64	s0
    1cee:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1cf2:	0004                	0x4
    1cf4:	0501                	addi	a0,a0,0
    1cf6:	000d                	c.nop	3
    1cf8:	0402                	c.slli64	s0
    1cfa:	01030603          	lb	a2,16(t1)
    1cfe:	0409                	addi	s0,s0,2
    1d00:	0100                	addi	s0,sp,128
    1d02:	1505                	addi	a0,a0,-31
    1d04:	0200                	addi	s0,sp,256
    1d06:	0304                	addi	s1,sp,384
    1d08:	0306                	slli	t1,t1,0x1
    1d0a:	0900                	addi	s0,sp,144
    1d0c:	0000                	unimp
    1d0e:	0501                	addi	a0,a0,0
    1d10:	000d                	c.nop	3
    1d12:	0402                	c.slli64	s0
    1d14:	01030603          	lb	a2,16(t1)
    1d18:	0809                	addi	a6,a6,2
    1d1a:	0100                	addi	s0,sp,128
    1d1c:	2005                	jal	1d3c <random_keys+0x284>
    1d1e:	0200                	addi	s0,sp,256
    1d20:	0304                	addi	s1,sp,384
    1d22:	00097a03          	0x97a03
    1d26:	0100                	addi	s0,sp,128
    1d28:	0d05                	addi	s10,s10,1
    1d2a:	04090c03          	lb	s8,64(s2)
    1d2e:	0100                	addi	s0,sp,128
    1d30:	1b05                	addi	s6,s6,-31
    1d32:	0306                	slli	t1,t1,0x1
    1d34:	0900                	addi	s0,sp,144
    1d36:	0000                	unimp
    1d38:	0501                	addi	a0,a0,0
    1d3a:	0320                	addi	s0,sp,392
    1d3c:	0900                	addi	s0,sp,144
    1d3e:	0008                	0x8
    1d40:	0501                	addi	a0,a0,0
    1d42:	0310                	addi	a2,sp,384
    1d44:	0900                	addi	s0,sp,144
    1d46:	0004                	0x4
    1d48:	0501                	addi	a0,a0,0
    1d4a:	001e                	c.slli	zero,0x7
    1d4c:	0402                	c.slli64	s0
    1d4e:	0602                	c.slli64	a2
    1d50:	04097f03          	0x4097f03
    1d54:	0100                	addi	s0,sp,128
    1d56:	0d05                	addi	s10,s10,1
    1d58:	0200                	addi	s0,sp,256
    1d5a:	0304                	addi	s1,sp,384
    1d5c:	04090d03          	lb	s10,64(s2)
    1d60:	0100                	addi	s0,sp,128
    1d62:	2005                	jal	1d82 <random_keys+0x2ca>
    1d64:	0200                	addi	s0,sp,256
    1d66:	0304                	addi	s1,sp,384
    1d68:	0306                	slli	t1,t1,0x1
    1d6a:	0900                	addi	s0,sp,144
    1d6c:	0000                	unimp
    1d6e:	0001                	nop
    1d70:	0402                	c.slli64	s0
    1d72:	097f0303          	lb	t1,151(t5)
    1d76:	0002                	c.slli64	zero
    1d78:	0001                	nop
    1d7a:	0402                	c.slli64	s0
    1d7c:	09010303          	lb	t1,144(sp)
    1d80:	0004                	0x4
    1d82:	0501                	addi	a0,a0,0
    1d84:	0025                	c.nop	9
    1d86:	0402                	c.slli64	s0
    1d88:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1d8c:	0004                	0x4
    1d8e:	0501                	addi	a0,a0,0
    1d90:	0015                	c.nop	5
    1d92:	0402                	c.slli64	s0
    1d94:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1d98:	0004                	0x4
    1d9a:	0501                	addi	a0,a0,0
    1d9c:	0020                	addi	s0,sp,8
    1d9e:	0402                	c.slli64	s0
    1da0:	7f030603          	lb	a2,2032(t1)
    1da4:	0409                	addi	s0,s0,2
    1da6:	0100                	addi	s0,sp,128
    1da8:	2805                	jal	1dd8 <random_keys+0x320>
    1daa:	02090c03          	lb	s8,32(s2)
    1dae:	0100                	addi	s0,sp,128
    1db0:	0505                	addi	a0,a0,1
    1db2:	00090303          	lb	t1,0(s2)
    1db6:	0100                	addi	s0,sp,128
    1db8:	2805                	jal	1de8 <random_keys+0x330>
    1dba:	0306                	slli	t1,t1,0x1
    1dbc:	097d                	addi	s2,s2,31
    1dbe:	0000                	unimp
    1dc0:	0301                	addi	t1,t1,0
    1dc2:	0900                	addi	s0,sp,144
    1dc4:	0036                	c.slli	zero,0xd
    1dc6:	0501                	addi	a0,a0,0
    1dc8:	0309                	addi	t1,t1,2
    1dca:	00040903          	lb	s2,0(s0)
    1dce:	0301                	addi	t1,t1,0
    1dd0:	0901                	addi	s2,s2,0
    1dd2:	0010                	0x10
    1dd4:	0301                	addi	t1,t1,0
    1dd6:	097f                	0x97f
    1dd8:	000a                	c.slli	zero,0x2
    1dda:	0501                	addi	a0,a0,0
    1ddc:	0605                	addi	a2,a2,1
    1dde:	6c090103          	lb	sp,1728(s2)
    1de2:	0100                	addi	s0,sp,128
    1de4:	1005                	c.nop	-31
    1de6:	0306                	slli	t1,t1,0x1
    1de8:	0906                	slli	s2,s2,0x1
    1dea:	0000                	unimp
    1dec:	0501                	addi	a0,a0,0
    1dee:	0309                	addi	t1,t1,2
    1df0:	097a                	slli	s2,s2,0x1e
    1df2:	0004                	0x4
    1df4:	0301                	addi	t1,t1,0
    1df6:	0906                	slli	s2,s2,0x1
    1df8:	0002                	c.slli64	zero
    1dfa:	0501                	addi	a0,a0,0
    1dfc:	030e                	slli	t1,t1,0x3
    1dfe:	0905                	addi	s2,s2,1
    1e00:	000e                	c.slli	zero,0x3
    1e02:	0501                	addi	a0,a0,0
    1e04:	0309                	addi	t1,t1,2
    1e06:	0975                	addi	s2,s2,29
    1e08:	000a                	c.slli	zero,0x2
    1e0a:	0501                	addi	a0,a0,0
    1e0c:	0605                	addi	a2,a2,1
    1e0e:	64090203          	lb	tp,1600(s2)
    1e12:	0100                	addi	s0,sp,128
    1e14:	00090103          	lb	sp,0(s2)
    1e18:	0100                	addi	s0,sp,128
    1e1a:	00090103          	lb	sp,0(s2)
    1e1e:	0100                	addi	s0,sp,128
    1e20:	00090103          	lb	sp,0(s2)
    1e24:	0100                	addi	s0,sp,128
    1e26:	00090103          	lb	sp,0(s2)
    1e2a:	0100                	addi	s0,sp,128
    1e2c:	00090103          	lb	sp,0(s2)
    1e30:	0100                	addi	s0,sp,128
    1e32:	00090103          	lb	sp,0(s2)
    1e36:	0100                	addi	s0,sp,128
    1e38:	00090303          	lb	t1,0(s2)
    1e3c:	0100                	addi	s0,sp,128
    1e3e:	00090103          	lb	sp,0(s2)
    1e42:	0100                	addi	s0,sp,128
    1e44:	0e05                	addi	t3,t3,1
    1e46:	0306                	slli	t1,t1,0x1
    1e48:	0900                	addi	s0,sp,144
    1e4a:	0000                	unimp
    1e4c:	0501                	addi	a0,a0,0
    1e4e:	0605                	addi	a2,a2,1
    1e50:	04090203          	lb	tp,64(s2)
    1e54:	0100                	addi	s0,sp,128
    1e56:	0b05                	addi	s6,s6,1
    1e58:	0306                	slli	t1,t1,0x1
    1e5a:	0900                	addi	s0,sp,144
    1e5c:	0000                	unimp
    1e5e:	0501                	addi	a0,a0,0
    1e60:	0010                	0x10
    1e62:	0402                	c.slli64	s0
    1e64:	0601                	addi	a2,a2,0
    1e66:	02090003          	lb	zero,32(s2)
    1e6a:	0100                	addi	s0,sp,128
    1e6c:	0505                	addi	a0,a0,1
    1e6e:	0200                	addi	s0,sp,256
    1e70:	0104                	addi	s1,sp,128
    1e72:	0306                	slli	t1,t1,0x1
    1e74:	0900                	addi	s0,sp,144
    1e76:	0000                	unimp
    1e78:	0301                	addi	t1,t1,0
    1e7a:	0906                	slli	s2,s2,0x1
    1e7c:	0006                	c.slli	zero,0x1
    1e7e:	0501                	addi	a0,a0,0
    1e80:	0011                	c.nop	4
    1e82:	0402                	c.slli64	s0
    1e84:	0601                	addi	a2,a2,0
    1e86:	04090003          	lb	zero,64(s2)
    1e8a:	0100                	addi	s0,sp,128
    1e8c:	0505                	addi	a0,a0,1
    1e8e:	0200                	addi	s0,sp,256
    1e90:	0104                	addi	s1,sp,128
    1e92:	0306                	slli	t1,t1,0x1
    1e94:	0900                	addi	s0,sp,144
    1e96:	0000                	unimp
    1e98:	0501                	addi	a0,a0,0
    1e9a:	0907030b          	0x907030b
    1e9e:	0004                	0x4
    1ea0:	0501                	addi	a0,a0,0
    1ea2:	0318                	addi	a4,sp,384
    1ea4:	0901                	addi	s2,s2,0
    1ea6:	0002                	c.slli64	zero
    1ea8:	0501                	addi	a0,a0,0
    1eaa:	0010                	0x10
    1eac:	0402                	c.slli64	s0
    1eae:	0601                	addi	a2,a2,0
    1eb0:	08097f03          	0x8097f03
    1eb4:	0100                	addi	s0,sp,128
    1eb6:	0505                	addi	a0,a0,1
    1eb8:	0200                	addi	s0,sp,256
    1eba:	0104                	addi	s1,sp,128
    1ebc:	0306                	slli	t1,t1,0x1
    1ebe:	0900                	addi	s0,sp,144
    1ec0:	0000                	unimp
    1ec2:	0501                	addi	a0,a0,0
    1ec4:	0316                	slli	t1,t1,0x5
    1ec6:	0905                	addi	s2,s2,1
    1ec8:	0008                	0x8
    1eca:	0501                	addi	a0,a0,0
    1ecc:	0318                	addi	a4,sp,384
    1ece:	0901                	addi	s2,s2,0
    1ed0:	0008                	0x8
    1ed2:	0501                	addi	a0,a0,0
    1ed4:	0010                	0x10
    1ed6:	0402                	c.slli64	s0
    1ed8:	0601                	addi	a2,a2,0
    1eda:	08097f03          	0x8097f03
    1ede:	0100                	addi	s0,sp,128
    1ee0:	0505                	addi	a0,a0,1
    1ee2:	0200                	addi	s0,sp,256
    1ee4:	0104                	addi	s1,sp,128
    1ee6:	0306                	slli	t1,t1,0x1
    1ee8:	0900                	addi	s0,sp,144
    1eea:	0000                	unimp
    1eec:	0601                	addi	a2,a2,0
    1eee:	04090503          	lb	a0,64(s2)
    1ef2:	0100                	addi	s0,sp,128
    1ef4:	1a05                	addi	s4,s4,-31
    1ef6:	0306                	slli	t1,t1,0x1
    1ef8:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1efc:	0501                	addi	a0,a0,0
    1efe:	030a                	slli	t1,t1,0x2
    1f00:	097d                	addi	s2,s2,31
    1f02:	0006                	c.slli	zero,0x1
    1f04:	0501                	addi	a0,a0,0
    1f06:	0605                	addi	a2,a2,1
    1f08:	0c090303          	lb	t1,192(s2)
    1f0c:	0100                	addi	s0,sp,128
    1f0e:	1805                	addi	a6,a6,-31
    1f10:	0306                	slli	t1,t1,0x1
    1f12:	0901                	addi	s2,s2,0
    1f14:	0002                	c.slli64	zero
    1f16:	0501                	addi	a0,a0,0
    1f18:	0014                	0x14
    1f1a:	0402                	c.slli64	s0
    1f1c:	0601                	addi	a2,a2,0
    1f1e:	08097f03          	0x8097f03
    1f22:	0100                	addi	s0,sp,128
    1f24:	0505                	addi	a0,a0,1
    1f26:	0200                	addi	s0,sp,256
    1f28:	0104                	addi	s1,sp,128
    1f2a:	0306                	slli	t1,t1,0x1
    1f2c:	0900                	addi	s0,sp,144
    1f2e:	0000                	unimp
    1f30:	0601                	addi	a2,a2,0
    1f32:	04090603          	lb	a2,64(s2)
    1f36:	0100                	addi	s0,sp,128
    1f38:	0a05                	addi	s4,s4,1
    1f3a:	0306                	slli	t1,t1,0x1
    1f3c:	0900                	addi	s0,sp,144
    1f3e:	0000                	unimp
    1f40:	0501                	addi	a0,a0,0
    1f42:	0605                	addi	a2,a2,1
    1f44:	0c090403          	lb	s0,192(s2)
    1f48:	0100                	addi	s0,sp,128
    1f4a:	1a05                	addi	s4,s4,-31
    1f4c:	0306                	slli	t1,t1,0x1
    1f4e:	0900                	addi	s0,sp,144
    1f50:	0006                	c.slli	zero,0x1
    1f52:	0501                	addi	a0,a0,0
    1f54:	0318                	addi	a4,sp,384
    1f56:	0901                	addi	s2,s2,0
    1f58:	0002                	c.slli64	zero
    1f5a:	0501                	addi	a0,a0,0
    1f5c:	0014                	0x14
    1f5e:	0402                	c.slli64	s0
    1f60:	0601                	addi	a2,a2,0
    1f62:	08097f03          	0x8097f03
    1f66:	0100                	addi	s0,sp,128
    1f68:	0505                	addi	a0,a0,1
    1f6a:	0200                	addi	s0,sp,256
    1f6c:	0104                	addi	s1,sp,128
    1f6e:	0306                	slli	t1,t1,0x1
    1f70:	0900                	addi	s0,sp,144
    1f72:	0000                	unimp
    1f74:	0601                	addi	a2,a2,0
    1f76:	04090503          	lb	a0,64(s2)
    1f7a:	0100                	addi	s0,sp,128
    1f7c:	0a05                	addi	s4,s4,1
    1f7e:	0306                	slli	t1,t1,0x1
    1f80:	0900                	addi	s0,sp,144
    1f82:	0000                	unimp
    1f84:	0501                	addi	a0,a0,0
    1f86:	0605                	addi	a2,a2,1
    1f88:	0c090303          	lb	t1,192(s2)
    1f8c:	0100                	addi	s0,sp,128
    1f8e:	0b05                	addi	s6,s6,1
    1f90:	0306                	slli	t1,t1,0x1
    1f92:	0900                	addi	s0,sp,144
    1f94:	0002                	c.slli64	zero
    1f96:	0501                	addi	a0,a0,0
    1f98:	0318                	addi	a4,sp,384
    1f9a:	0900                	addi	s0,sp,144
    1f9c:	0002                	c.slli64	zero
    1f9e:	0501                	addi	a0,a0,0
    1fa0:	0010                	0x10
    1fa2:	0402                	c.slli64	s0
    1fa4:	0601                	addi	a2,a2,0
    1fa6:	04090003          	lb	zero,64(s2)
    1faa:	0100                	addi	s0,sp,128
    1fac:	0505                	addi	a0,a0,1
    1fae:	0200                	addi	s0,sp,256
    1fb0:	0104                	addi	s1,sp,128
    1fb2:	0306                	slli	t1,t1,0x1
    1fb4:	0900                	addi	s0,sp,144
    1fb6:	0000                	unimp
    1fb8:	0601                	addi	a2,a2,0
    1fba:	04090603          	lb	a2,64(s2)
    1fbe:	0100                	addi	s0,sp,128
    1fc0:	0a05                	addi	s4,s4,1
    1fc2:	0306                	slli	t1,t1,0x1
    1fc4:	0900                	addi	s0,sp,144
    1fc6:	0000                	unimp
    1fc8:	0501                	addi	a0,a0,0
    1fca:	0605                	addi	a2,a2,1
    1fcc:	08090403          	lb	s0,128(s2)
    1fd0:	0100                	addi	s0,sp,128
    1fd2:	1a05                	addi	s4,s4,-31
    1fd4:	0306                	slli	t1,t1,0x1
    1fd6:	0900                	addi	s0,sp,144
    1fd8:	0000                	unimp
    1fda:	0501                	addi	a0,a0,0
    1fdc:	0318                	addi	a4,sp,384
    1fde:	0901                	addi	s2,s2,0
    1fe0:	000a                	c.slli	zero,0x2
    1fe2:	0501                	addi	a0,a0,0
    1fe4:	0014                	0x14
    1fe6:	0402                	c.slli64	s0
    1fe8:	0601                	addi	a2,a2,0
    1fea:	08097f03          	0x8097f03
    1fee:	0100                	addi	s0,sp,128
    1ff0:	0505                	addi	a0,a0,1
    1ff2:	0200                	addi	s0,sp,256
    1ff4:	0104                	addi	s1,sp,128
    1ff6:	0306                	slli	t1,t1,0x1
    1ff8:	0900                	addi	s0,sp,144
    1ffa:	0002                	c.slli64	zero
    1ffc:	0501                	addi	a0,a0,0
    1ffe:	031a                	slli	t1,t1,0x6
    2000:	0905                	addi	s2,s2,1
    2002:	0004                	0x4
    2004:	0501                	addi	a0,a0,0
    2006:	0318                	addi	a4,sp,384
    2008:	0901                	addi	s2,s2,0
    200a:	0004                	0x4
    200c:	0501                	addi	a0,a0,0
    200e:	031a                	slli	t1,t1,0x6
    2010:	097f                	0x97f
    2012:	0008                	0x8
    2014:	0501                	addi	a0,a0,0
    2016:	0014                	0x14
    2018:	0402                	c.slli64	s0
    201a:	0601                	addi	a2,a2,0
    201c:	08090003          	lb	zero,128(s2)
    2020:	0100                	addi	s0,sp,128
    2022:	0505                	addi	a0,a0,1
    2024:	0200                	addi	s0,sp,256
    2026:	0104                	addi	s1,sp,128
    2028:	0306                	slli	t1,t1,0x1
    202a:	0900                	addi	s0,sp,144
    202c:	0000                	unimp
    202e:	0601                	addi	a2,a2,0
    2030:	04090603          	lb	a2,64(s2)
    2034:	0100                	addi	s0,sp,128
    2036:	00090203          	lb	tp,0(s2)
    203a:	0100                	addi	s0,sp,128
    203c:	0105                	addi	sp,sp,1
    203e:	0306                	slli	t1,t1,0x1
    2040:	0901                	addi	s2,s2,0
    2042:	0000                	unimp
    2044:	0501                	addi	a0,a0,0
    2046:	0009                	c.nop	2
    2048:	0402                	c.slli64	s0
    204a:	bd030603          	lb	a2,-1072(t1)
    204e:	097f                	0x97f
    2050:	0040                	addi	s0,sp,4
    2052:	0501                	addi	a0,a0,0
    2054:	0012                	c.slli	zero,0x4
    2056:	0402                	c.slli64	s0
    2058:	00030603          	lb	a2,0(t1)
    205c:	0009                	c.nop	2
    205e:	0100                	addi	s0,sp,128
    2060:	1705                	addi	a4,a4,-31
    2062:	0200                	addi	s0,sp,256
    2064:	0304                	addi	s1,sp,384
    2066:	0306                	slli	t1,t1,0x1
    2068:	097f                	0x97f
    206a:	000a                	c.slli	zero,0x2
    206c:	0501                	addi	a0,a0,0
    206e:	0009                	c.nop	2
    2070:	0402                	c.slli64	s0
    2072:	09070303          	lb	t1,144(a4)
    2076:	0004                	0x4
    2078:	0501                	addi	a0,a0,0
    207a:	000e                	c.slli	zero,0x3
    207c:	0402                	c.slli64	s0
    207e:	00030603          	lb	a2,0(t1)
    2082:	0409                	addi	s0,s0,2
    2084:	0100                	addi	s0,sp,128
    2086:	0905                	addi	s2,s2,1
    2088:	0200                	addi	s0,sp,256
    208a:	0304                	addi	s1,sp,384
    208c:	0306                	slli	t1,t1,0x1
    208e:	0901                	addi	s2,s2,0
    2090:	000a                	c.slli	zero,0x2
    2092:	0501                	addi	a0,a0,0
    2094:	000e                	c.slli	zero,0x3
    2096:	0402                	c.slli64	s0
    2098:	00030603          	lb	a2,0(t1)
    209c:	0009                	c.nop	2
    209e:	0100                	addi	s0,sp,128
    20a0:	1905                	addi	s2,s2,-31
    20a2:	0200                	addi	s0,sp,256
    20a4:	0304                	addi	s1,sp,384
    20a6:	0306                	slli	t1,t1,0x1
    20a8:	097e                	slli	s2,s2,0x1f
    20aa:	000a                	c.slli	zero,0x2
    20ac:	0501                	addi	a0,a0,0
    20ae:	0009                	c.nop	2
    20b0:	0402                	c.slli64	s0
    20b2:	09080303          	lb	t1,144(a6) # ffffe090 <_stack_start+0xfffee090>
    20b6:	0004                	0x4
    20b8:	0501                	addi	a0,a0,0
    20ba:	0402001b          	0x402001b
    20be:	00030603          	lb	a2,0(t1)
    20c2:	0409                	addi	s0,s0,2
    20c4:	0100                	addi	s0,sp,128
    20c6:	1805                	addi	a6,a6,-31
    20c8:	0200                	addi	s0,sp,256
    20ca:	0304                	addi	s1,sp,384
    20cc:	04090003          	lb	zero,64(s2)
    20d0:	0100                	addi	s0,sp,128
    20d2:	1b05                	addi	s6,s6,-31
    20d4:	0200                	addi	s0,sp,256
    20d6:	0304                	addi	s1,sp,384
    20d8:	04090003          	lb	zero,64(s2)
    20dc:	0100                	addi	s0,sp,128
    20de:	1805                	addi	a6,a6,-31
    20e0:	0200                	addi	s0,sp,256
    20e2:	0304                	addi	s1,sp,384
    20e4:	02090003          	lb	zero,32(s2)
    20e8:	0100                	addi	s0,sp,128
    20ea:	1705                	addi	a4,a4,-31
    20ec:	0200                	addi	s0,sp,256
    20ee:	0304                	addi	s1,sp,384
    20f0:	02097f03          	0x2097f03
    20f4:	0100                	addi	s0,sp,128
    20f6:	1805                	addi	a6,a6,-31
    20f8:	0200                	addi	s0,sp,256
    20fa:	0304                	addi	s1,sp,384
    20fc:	02090103          	lb	sp,32(s2)
    2100:	0100                	addi	s0,sp,128
    2102:	1705                	addi	a4,a4,-31
    2104:	0200                	addi	s0,sp,256
    2106:	0304                	addi	s1,sp,384
    2108:	0306                	slli	t1,t1,0x1
    210a:	097f                	0x97f
    210c:	0002                	c.slli64	zero
    210e:	0501                	addi	a0,a0,0
    2110:	0009                	c.nop	2
    2112:	0402                	c.slli64	s0
    2114:	09060303          	lb	t1,144(a2)
    2118:	0002                	c.slli64	zero
    211a:	0501                	addi	a0,a0,0
    211c:	0018                	0x18
    211e:	0402                	c.slli64	s0
    2120:	00030603          	lb	a2,0(t1)
    2124:	0009                	c.nop	2
    2126:	0100                	addi	s0,sp,128
    2128:	1b05                	addi	s6,s6,-31
    212a:	0200                	addi	s0,sp,256
    212c:	0304                	addi	s1,sp,384
    212e:	0306                	slli	t1,t1,0x1
    2130:	097f                	0x97f
    2132:	000a                	c.slli	zero,0x2
    2134:	0501                	addi	a0,a0,0
    2136:	0009                	c.nop	2
    2138:	0402                	c.slli64	s0
    213a:	09090303          	lb	t1,144(s2)
    213e:	0006                	c.slli	zero,0x1
    2140:	0501                	addi	a0,a0,0
    2142:	001c                	0x1c
    2144:	0402                	c.slli64	s0
    2146:	00030603          	lb	a2,0(t1)
    214a:	0009                	c.nop	2
    214c:	0100                	addi	s0,sp,128
    214e:	1805                	addi	a6,a6,-31
    2150:	0200                	addi	s0,sp,256
    2152:	0304                	addi	s1,sp,384
    2154:	02090003          	lb	zero,32(s2)
    2158:	0100                	addi	s0,sp,128
    215a:	1f05                	addi	t5,t5,-31
    215c:	0200                	addi	s0,sp,256
    215e:	0304                	addi	s1,sp,384
    2160:	0306                	slli	t1,t1,0x1
    2162:	097f                	0x97f
    2164:	0008                	0x8
    2166:	0501                	addi	a0,a0,0
    2168:	0009                	c.nop	2
    216a:	0402                	c.slli64	s0
    216c:	090b0303          	lb	t1,144(s6)
    2170:	0006                	c.slli	zero,0x1
    2172:	0501                	addi	a0,a0,0
    2174:	001c                	0x1c
    2176:	0402                	c.slli64	s0
    2178:	00030603          	lb	a2,0(t1)
    217c:	0409                	addi	s0,s0,2
    217e:	0100                	addi	s0,sp,128
    2180:	1805                	addi	a6,a6,-31
    2182:	0200                	addi	s0,sp,256
    2184:	0304                	addi	s1,sp,384
    2186:	08090003          	lb	zero,128(s2)
    218a:	0100                	addi	s0,sp,128
    218c:	1f05                	addi	t5,t5,-31
    218e:	0200                	addi	s0,sp,256
    2190:	0304                	addi	s1,sp,384
    2192:	02097f03          	0x2097f03
    2196:	0100                	addi	s0,sp,128
    2198:	1805                	addi	a6,a6,-31
    219a:	0200                	addi	s0,sp,256
    219c:	0304                	addi	s1,sp,384
    219e:	02090103          	lb	sp,32(s2)
    21a2:	0100                	addi	s0,sp,128
    21a4:	1f05                	addi	t5,t5,-31
    21a6:	0200                	addi	s0,sp,256
    21a8:	0304                	addi	s1,sp,384
    21aa:	0306                	slli	t1,t1,0x1
    21ac:	097f                	0x97f
    21ae:	0002                	c.slli64	zero
    21b0:	0501                	addi	a0,a0,0
    21b2:	0009                	c.nop	2
    21b4:	0402                	c.slli64	s0
    21b6:	09090303          	lb	t1,144(s2)
    21ba:	0002                	c.slli64	zero
    21bc:	0501                	addi	a0,a0,0
    21be:	0016                	c.slli	zero,0x5
    21c0:	0402                	c.slli64	s0
    21c2:	00030603          	lb	a2,0(t1)
    21c6:	0009                	c.nop	2
    21c8:	0100                	addi	s0,sp,128
    21ca:	1d05                	addi	s10,s10,-31
    21cc:	0200                	addi	s0,sp,256
    21ce:	0304                	addi	s1,sp,384
    21d0:	02097f03          	0x2097f03
    21d4:	0100                	addi	s0,sp,128
    21d6:	1605                	addi	a2,a2,-31
    21d8:	0200                	addi	s0,sp,256
    21da:	0304                	addi	s1,sp,384
    21dc:	04090103          	lb	sp,64(s2)
    21e0:	0100                	addi	s0,sp,128
    21e2:	0f05                	addi	t5,t5,1
    21e4:	0200                	addi	s0,sp,256
    21e6:	0304                	addi	s1,sp,384
    21e8:	04090003          	lb	zero,64(s2)
    21ec:	0100                	addi	s0,sp,128
    21ee:	1d05                	addi	s10,s10,-31
    21f0:	0200                	addi	s0,sp,256
    21f2:	0304                	addi	s1,sp,384
    21f4:	0306                	slli	t1,t1,0x1
    21f6:	097f                	0x97f
    21f8:	0004                	0x4
    21fa:	0501                	addi	a0,a0,0
    21fc:	0009                	c.nop	2
    21fe:	0402                	c.slli64	s0
    2200:	090b0303          	lb	t1,144(s6)
    2204:	0002                	c.slli64	zero
    2206:	0501                	addi	a0,a0,0
    2208:	001c                	0x1c
    220a:	0402                	c.slli64	s0
    220c:	00030603          	lb	a2,0(t1)
    2210:	0009                	c.nop	2
    2212:	0100                	addi	s0,sp,128
    2214:	1805                	addi	a6,a6,-31
    2216:	0200                	addi	s0,sp,256
    2218:	0304                	addi	s1,sp,384
    221a:	04090003          	lb	zero,64(s2)
    221e:	0100                	addi	s0,sp,128
    2220:	1f05                	addi	t5,t5,-31
    2222:	0200                	addi	s0,sp,256
    2224:	0304                	addi	s1,sp,384
    2226:	0306                	slli	t1,t1,0x1
    2228:	097f                	0x97f
    222a:	0008                	0x8
    222c:	0501                	addi	a0,a0,0
    222e:	0009                	c.nop	2
    2230:	0402                	c.slli64	s0
    2232:	09060303          	lb	t1,144(a2)
    2236:	0004                	0x4
    2238:	0501                	addi	a0,a0,0
    223a:	0018                	0x18
    223c:	0402                	c.slli64	s0
    223e:	00030603          	lb	a2,0(t1)
    2242:	0409                	addi	s0,s0,2
    2244:	0100                	addi	s0,sp,128
    2246:	1f05                	addi	t5,t5,-31
    2248:	0200                	addi	s0,sp,256
    224a:	0304                	addi	s1,sp,384
    224c:	04090003          	lb	zero,64(s2)
    2250:	0100                	addi	s0,sp,128
    2252:	1805                	addi	a6,a6,-31
    2254:	0200                	addi	s0,sp,256
    2256:	0304                	addi	s1,sp,384
    2258:	04090003          	lb	zero,64(s2)
    225c:	0100                	addi	s0,sp,128
    225e:	2105                	jal	267e <_min_stack+0x67e>
    2260:	0200                	addi	s0,sp,256
    2262:	0304                	addi	s1,sp,384
    2264:	02097f03          	0x2097f03
    2268:	0100                	addi	s0,sp,128
    226a:	1805                	addi	a6,a6,-31
    226c:	0200                	addi	s0,sp,256
    226e:	0304                	addi	s1,sp,384
    2270:	02090103          	lb	sp,32(s2)
    2274:	0100                	addi	s0,sp,128
    2276:	2105                	jal	2696 <_min_stack+0x696>
    2278:	0200                	addi	s0,sp,256
    227a:	0304                	addi	s1,sp,384
    227c:	0306                	slli	t1,t1,0x1
    227e:	097f                	0x97f
    2280:	0002                	c.slli64	zero
    2282:	0501                	addi	a0,a0,0
    2284:	090c034b          	fnmsub.s	ft6,fs8,fa6,ft1,rne
    2288:	0002                	c.slli64	zero
    228a:	0501                	addi	a0,a0,0
    228c:	0305                	addi	t1,t1,1
    228e:	0902                	c.slli64	s2
    2290:	0000                	unimp
    2292:	0301                	addi	t1,t1,0
    2294:	0901                	addi	s2,s2,0
    2296:	0000                	unimp
    2298:	0301                	addi	t1,t1,0
    229a:	0902                	c.slli64	s2
    229c:	0000                	unimp
    229e:	0501                	addi	a0,a0,0
    22a0:	7b03064b          	fnmsub.d	fa2,ft6,fa6,fa5,rne
    22a4:	0009                	c.nop	2
    22a6:	0100                	addi	s0,sp,128
    22a8:	0905                	addi	s2,s2,1
    22aa:	0e090503          	lb	a0,224(s2)
    22ae:	0100                	addi	s0,sp,128
    22b0:	4b05                	li	s6,1
    22b2:	0e097b03          	0xe097b03
    22b6:	0100                	addi	s0,sp,128
    22b8:	06090003          	lb	zero,96(s2)
    22bc:	0100                	addi	s0,sp,128
    22be:	0905                	addi	s2,s2,1
    22c0:	04090503          	lb	a0,64(s2)
    22c4:	0100                	addi	s0,sp,128
    22c6:	0505                	addi	a0,a0,1
    22c8:	0306                	slli	t1,t1,0x1
    22ca:	0901                	addi	s2,s2,0
    22cc:	0002                	c.slli64	zero
    22ce:	0301                	addi	t1,t1,0
    22d0:	0901                	addi	s2,s2,0
    22d2:	0000                	unimp
    22d4:	0301                	addi	t1,t1,0
    22d6:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    22da:	0501                	addi	a0,a0,0
    22dc:	060c                	addi	a1,sp,768
    22de:	00090003          	lb	zero,0(s2)
    22e2:	0100                	addi	s0,sp,128
    22e4:	0505                	addi	a0,a0,1
    22e6:	0306                	slli	t1,t1,0x1
    22e8:	0904                	addi	s1,sp,144
    22ea:	0012                	c.slli	zero,0x4
    22ec:	0501                	addi	a0,a0,0
    22ee:	0310                	addi	a2,sp,384
    22f0:	0900                	addi	s0,sp,144
    22f2:	0000                	unimp
    22f4:	0501                	addi	a0,a0,0
    22f6:	060c                	addi	a1,sp,768
    22f8:	00097c03          	0x97c03
    22fc:	0100                	addi	s0,sp,128
    22fe:	0505                	addi	a0,a0,1
    2300:	02090403          	lb	s0,32(s2)
    2304:	0100                	addi	s0,sp,128
    2306:	0905                	addi	s2,s2,1
    2308:	0200                	addi	s0,sp,256
    230a:	0304                	addi	s1,sp,384
    230c:	0306                	slli	t1,t1,0x1
    230e:	0901                	addi	s2,s2,0
    2310:	0004                	0x4
    2312:	0501                	addi	a0,a0,0
    2314:	0024                	addi	s1,sp,8
    2316:	0402                	c.slli64	s0
    2318:	00030603          	lb	a2,0(t1)
    231c:	0409                	addi	s0,s0,2
    231e:	0100                	addi	s0,sp,128
    2320:	1b05                	addi	s6,s6,-31
    2322:	0200                	addi	s0,sp,256
    2324:	0304                	addi	s1,sp,384
    2326:	04090003          	lb	zero,64(s2)
    232a:	0100                	addi	s0,sp,128
    232c:	1105                	addi	sp,sp,-31
    232e:	0200                	addi	s0,sp,256
    2330:	0304                	addi	s1,sp,384
    2332:	08090003          	lb	zero,128(s2)
    2336:	0100                	addi	s0,sp,128
    2338:	1805                	addi	a6,a6,-31
    233a:	0200                	addi	s0,sp,256
    233c:	0304                	addi	s1,sp,384
    233e:	0306                	slli	t1,t1,0x1
    2340:	097f                	0x97f
    2342:	0002                	c.slli64	zero
    2344:	0501                	addi	a0,a0,0
    2346:	0010                	0x10
    2348:	0402                	c.slli64	s0
    234a:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    234e:	0000                	unimp
    2350:	0501                	addi	a0,a0,0
    2352:	0005                	c.nop	1
    2354:	0402                	c.slli64	s0
    2356:	00030603          	lb	a2,0(t1)
    235a:	0009                	c.nop	2
    235c:	0100                	addi	s0,sp,128
    235e:	0306                	slli	t1,t1,0x1
    2360:	0906                	slli	s2,s2,0x1
    2362:	0004                	0x4
    2364:	0501                	addi	a0,a0,0
    2366:	060a                	slli	a2,a2,0x2
    2368:	00090003          	lb	zero,0(s2)
    236c:	0100                	addi	s0,sp,128
    236e:	0505                	addi	a0,a0,1
    2370:	0306                	slli	t1,t1,0x1
    2372:	0902                	c.slli64	s2
    2374:	0012                	c.slli	zero,0x4
    2376:	0501                	addi	a0,a0,0
    2378:	061a                	slli	a2,a2,0x6
    237a:	00090003          	lb	zero,0(s2)
    237e:	0100                	addi	s0,sp,128
    2380:	1405                	addi	s0,s0,-31
    2382:	0200                	addi	s0,sp,256
    2384:	0104                	addi	s1,sp,128
    2386:	0306                	slli	t1,t1,0x1
    2388:	0900                	addi	s0,sp,144
    238a:	0008                	0x8
    238c:	0501                	addi	a0,a0,0
    238e:	0005                	c.nop	1
    2390:	0402                	c.slli64	s0
    2392:	0601                	addi	a2,a2,0
    2394:	00090003          	lb	zero,0(s2)
    2398:	0100                	addi	s0,sp,128
    239a:	0105                	addi	sp,sp,1
    239c:	04090903          	lb	s2,64(s2)
    23a0:	0100                	addi	s0,sp,128
    23a2:	0905                	addi	s2,s2,1
    23a4:	0200                	addi	s0,sp,256
    23a6:	0304                	addi	s1,sp,384
    23a8:	0306                	slli	t1,t1,0x1
    23aa:	0978                	addi	a4,sp,156
    23ac:	0010                	0x10
    23ae:	0501                	addi	a0,a0,0
    23b0:	0019                	c.nop	6
    23b2:	0402                	c.slli64	s0
    23b4:	00030603          	lb	a2,0(t1)
    23b8:	0009                	c.nop	2
    23ba:	0100                	addi	s0,sp,128
    23bc:	1f05                	addi	t5,t5,-31
    23be:	0200                	addi	s0,sp,256
    23c0:	0304                	addi	s1,sp,384
    23c2:	08097f03          	0x8097f03
    23c6:	0100                	addi	s0,sp,128
    23c8:	1505                	addi	a0,a0,-31
    23ca:	0200                	addi	s0,sp,256
    23cc:	0304                	addi	s1,sp,384
    23ce:	04090103          	lb	sp,64(s2)
    23d2:	0100                	addi	s0,sp,128
    23d4:	1f05                	addi	t5,t5,-31
    23d6:	0200                	addi	s0,sp,256
    23d8:	0304                	addi	s1,sp,384
    23da:	0306                	slli	t1,t1,0x1
    23dc:	097f                	0x97f
    23de:	0004                	0x4
    23e0:	0501                	addi	a0,a0,0
    23e2:	036c                	addi	a1,sp,396
    23e4:	090c                	addi	a1,sp,144
    23e6:	0002                	c.slli64	zero
    23e8:	0501                	addi	a0,a0,0
    23ea:	0305                	addi	t1,t1,1
    23ec:	0902                	c.slli64	s2
    23ee:	0000                	unimp
    23f0:	0301                	addi	t1,t1,0
    23f2:	0901                	addi	s2,s2,0
    23f4:	0000                	unimp
    23f6:	0301                	addi	t1,t1,0
    23f8:	0901                	addi	s2,s2,0
    23fa:	0000                	unimp
    23fc:	0301                	addi	t1,t1,0
    23fe:	0901                	addi	s2,s2,0
    2400:	0000                	unimp
    2402:	0301                	addi	t1,t1,0
    2404:	0901                	addi	s2,s2,0
    2406:	0000                	unimp
    2408:	0301                	addi	t1,t1,0
    240a:	0901                	addi	s2,s2,0
    240c:	0000                	unimp
    240e:	0301                	addi	t1,t1,0
    2410:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    2414:	0501                	addi	a0,a0,0
    2416:	066c                	addi	a1,sp,780
    2418:	00097603          	0x97603
    241c:	0100                	addi	s0,sp,128
    241e:	1e05                	addi	t3,t3,-31
    2420:	08091103          	lh	sp,128(s2)
    2424:	0100                	addi	s0,sp,128
    2426:	6c05                	lui	s8,0x1
    2428:	06096f03          	0x6096f03
    242c:	0100                	addi	s0,sp,128
    242e:	0905                	addi	s2,s2,1
    2430:	0a090a03          	lb	s4,160(s2)
    2434:	0100                	addi	s0,sp,128
    2436:	6c05                	lui	s8,0x1
    2438:	04097603          	0x4097603
    243c:	0100                	addi	s0,sp,128
    243e:	0905                	addi	s2,s2,1
    2440:	04090a03          	lb	s4,64(s2)
    2444:	0100                	addi	s0,sp,128
    2446:	6c05                	lui	s8,0x1
    2448:	04097603          	0x4097603
    244c:	0100                	addi	s0,sp,128
    244e:	08090003          	lb	zero,128(s2)
    2452:	0100                	addi	s0,sp,128
    2454:	0a05                	addi	s4,s4,1
    2456:	02090e03          	lb	t3,32(s2)
    245a:	0100                	addi	s0,sp,128
    245c:	0905                	addi	s2,s2,1
    245e:	04097c03          	0x4097c03
    2462:	0100                	addi	s0,sp,128
    2464:	0505                	addi	a0,a0,1
    2466:	0306                	slli	t1,t1,0x1
    2468:	0904                	addi	s1,sp,144
    246a:	0004                	0x4
    246c:	0501                	addi	a0,a0,0
    246e:	060a                	slli	a2,a2,0x2
    2470:	00090003          	lb	zero,0(s2)
    2474:	0100                	addi	s0,sp,128
    2476:	0505                	addi	a0,a0,1
    2478:	0306                	slli	t1,t1,0x1
    247a:	00120903          	lb	s2,1(tp) # 1 <__DYNAMIC+0x1>
    247e:	0501                	addi	a0,a0,0
    2480:	0003060b          	0x3060b
    2484:	0409                	addi	s0,s0,2
    2486:	0100                	addi	s0,sp,128
    2488:	1405                	addi	s0,s0,-31
    248a:	0200                	addi	s0,sp,256
    248c:	0104                	addi	s1,sp,128
    248e:	0306                	slli	t1,t1,0x1
    2490:	0900                	addi	s0,sp,144
    2492:	0002                	c.slli64	zero
    2494:	0501                	addi	a0,a0,0
    2496:	0005                	c.nop	1
    2498:	0402                	c.slli64	s0
    249a:	0601                	addi	a2,a2,0
    249c:	00090003          	lb	zero,0(s2)
    24a0:	0100                	addi	s0,sp,128
    24a2:	1605                	addi	a2,a2,-31
    24a4:	04090603          	lb	a2,64(s2)
    24a8:	0100                	addi	s0,sp,128
    24aa:	0c05                	addi	s8,s8,1
    24ac:	06097f03          	0x6097f03
    24b0:	0100                	addi	s0,sp,128
    24b2:	1105                	addi	sp,sp,-31
    24b4:	0200                	addi	s0,sp,256
    24b6:	0104                	addi	s1,sp,128
    24b8:	0306                	slli	t1,t1,0x1
    24ba:	0900                	addi	s0,sp,144
    24bc:	0002                	c.slli64	zero
    24be:	0501                	addi	a0,a0,0
    24c0:	0005                	c.nop	1
    24c2:	0402                	c.slli64	s0
    24c4:	0601                	addi	a2,a2,0
    24c6:	00090003          	lb	zero,0(s2)
    24ca:	0100                	addi	s0,sp,128
    24cc:	0306                	slli	t1,t1,0x1
    24ce:	0908                	addi	a0,sp,144
    24d0:	0004                	0x4
    24d2:	0501                	addi	a0,a0,0
    24d4:	0609                	addi	a2,a2,2
    24d6:	00090003          	lb	zero,0(s2)
    24da:	0100                	addi	s0,sp,128
    24dc:	0505                	addi	a0,a0,1
    24de:	0306                	slli	t1,t1,0x1
    24e0:	0904                	addi	s1,sp,144
    24e2:	000c                	0xc
    24e4:	0501                	addi	a0,a0,0
    24e6:	060a                	slli	a2,a2,0x2
    24e8:	00090003          	lb	zero,0(s2)
    24ec:	0100                	addi	s0,sp,128
    24ee:	0505                	addi	a0,a0,1
    24f0:	0306                	slli	t1,t1,0x1
    24f2:	0901                	addi	s2,s2,0
    24f4:	000c                	0xc
    24f6:	0501                	addi	a0,a0,0
    24f8:	0014                	0x14
    24fa:	0402                	c.slli64	s0
    24fc:	0301                	addi	t1,t1,0
    24fe:	0900                	addi	s0,sp,144
    2500:	0002                	c.slli64	zero
    2502:	0501                	addi	a0,a0,0
    2504:	0005                	c.nop	1
    2506:	0402                	c.slli64	s0
    2508:	0601                	addi	a2,a2,0
    250a:	00090003          	lb	zero,0(s2)
    250e:	0100                	addi	s0,sp,128
    2510:	0105                	addi	sp,sp,1
    2512:	04090703          	lb	a4,64(s2)
    2516:	0100                	addi	s0,sp,128
    2518:	0905                	addi	s2,s2,1
    251a:	0200                	addi	s0,sp,256
    251c:	0304                	addi	s1,sp,384
    251e:	0306                	slli	t1,t1,0x1
    2520:	0968                	addi	a0,sp,156
    2522:	0016                	c.slli	zero,0x5
    2524:	0501                	addi	a0,a0,0
    2526:	0019                	c.nop	6
    2528:	0402                	c.slli64	s0
    252a:	00030603          	lb	a2,0(t1)
    252e:	0009                	c.nop	2
    2530:	0100                	addi	s0,sp,128
    2532:	2305                	jal	2a52 <_min_stack+0xa52>
    2534:	0200                	addi	s0,sp,256
    2536:	0304                	addi	s1,sp,384
    2538:	08097f03          	0x8097f03
    253c:	0100                	addi	s0,sp,128
    253e:	1505                	addi	a0,a0,-31
    2540:	0200                	addi	s0,sp,256
    2542:	0304                	addi	s1,sp,384
    2544:	04090103          	lb	sp,64(s2)
    2548:	0100                	addi	s0,sp,128
    254a:	2305                	jal	2a6a <_min_stack+0xa6a>
    254c:	0200                	addi	s0,sp,256
    254e:	0304                	addi	s1,sp,384
    2550:	0306                	slli	t1,t1,0x1
    2552:	097f                	0x97f
    2554:	0004                	0x4
    2556:	0501                	addi	a0,a0,0
    2558:	0309                	addi	t1,t1,2
    255a:	0906                	slli	s2,s2,0x1
    255c:	0002                	c.slli64	zero
    255e:	0501                	addi	a0,a0,0
    2560:	060e                	slli	a2,a2,0x3
    2562:	00090003          	lb	zero,0(s2)
    2566:	0100                	addi	s0,sp,128
    2568:	0b05                	addi	s6,s6,1
    256a:	02090003          	lb	zero,32(s2)
    256e:	0100                	addi	s0,sp,128
    2570:	0d05                	addi	s10,s10,1
    2572:	0306                	slli	t1,t1,0x1
    2574:	00040903          	lb	s2,0(s0)
    2578:	0501                	addi	a0,a0,0
    257a:	0619                	addi	a2,a2,6
    257c:	00090003          	lb	zero,0(s2)
    2580:	0100                	addi	s0,sp,128
    2582:	1305                	addi	t1,t1,-31
    2584:	04090003          	lb	zero,64(s2)
    2588:	0100                	addi	s0,sp,128
    258a:	1805                	addi	a6,a6,-31
    258c:	0200                	addi	s0,sp,256
    258e:	0204                	addi	s1,sp,256
    2590:	0306                	slli	t1,t1,0x1
    2592:	097c                	addi	a5,sp,156
    2594:	0002                	c.slli64	zero
    2596:	0501                	addi	a0,a0,0
    2598:	0009                	c.nop	2
    259a:	0402                	c.slli64	s0
    259c:	090e0303          	lb	t1,144(t3)
    25a0:	0006                	c.slli	zero,0x1
    25a2:	0501                	addi	a0,a0,0
    25a4:	0019                	c.nop	6
    25a6:	0402                	c.slli64	s0
    25a8:	00030603          	lb	a2,0(t1)
    25ac:	0009                	c.nop	2
    25ae:	0100                	addi	s0,sp,128
    25b0:	2305                	jal	2ad0 <_min_stack+0xad0>
    25b2:	0200                	addi	s0,sp,256
    25b4:	0304                	addi	s1,sp,384
    25b6:	08097f03          	0x8097f03
    25ba:	0100                	addi	s0,sp,128
    25bc:	1505                	addi	a0,a0,-31
    25be:	0200                	addi	s0,sp,256
    25c0:	0304                	addi	s1,sp,384
    25c2:	04090103          	lb	sp,64(s2)
    25c6:	0100                	addi	s0,sp,128
    25c8:	2305                	jal	2ae8 <_min_stack+0xae8>
    25ca:	0200                	addi	s0,sp,256
    25cc:	0304                	addi	s1,sp,384
    25ce:	0306                	slli	t1,t1,0x1
    25d0:	097f                	0x97f
    25d2:	0004                	0x4
    25d4:	0901                	addi	s2,s2,0
    25d6:	0002                	c.slli64	zero
    25d8:	0100                	addi	s0,sp,128
    25da:	0501                	addi	a0,a0,0
    25dc:	0205000b          	0x205000b
    25e0:	0f66                	slli	t5,t5,0x19
    25e2:	0000                	unimp
    25e4:	0104d003          	lhu	zero,16(s1)
    25e8:	0105                	addi	sp,sp,1
    25ea:	00090103          	lb	sp,0(s2)
    25ee:	0100                	addi	s0,sp,128
    25f0:	0505                	addi	a0,a0,1
    25f2:	00090103          	lb	sp,0(s2)
    25f6:	0100                	addi	s0,sp,128
    25f8:	00090103          	lb	sp,0(s2)
    25fc:	0100                	addi	s0,sp,128
    25fe:	00090103          	lb	sp,0(s2)
    2602:	0100                	addi	s0,sp,128
    2604:	00090103          	lb	sp,0(s2)
    2608:	0100                	addi	s0,sp,128
    260a:	00090103          	lb	sp,0(s2)
    260e:	0100                	addi	s0,sp,128
    2610:	00090103          	lb	sp,0(s2)
    2614:	0100                	addi	s0,sp,128
    2616:	00090203          	lb	tp,0(s2)
    261a:	0100                	addi	s0,sp,128
    261c:	0b05                	addi	s6,s6,1
    261e:	0306                	slli	t1,t1,0x1
    2620:	00000977          	0x977
    2624:	0501                	addi	a0,a0,0
    2626:	0309                	addi	t1,t1,2
    2628:	0909                	addi	s2,s2,2
    262a:	0004                	0x4
    262c:	0501                	addi	a0,a0,0
    262e:	0977030b          	0x977030b
    2632:	000e                	c.slli	zero,0x3
    2634:	0501                	addi	a0,a0,0
    2636:	0309                	addi	t1,t1,2
    2638:	0909                	addi	s2,s2,2
    263a:	000c                	0xc
    263c:	0501                	addi	a0,a0,0
    263e:	0605                	addi	a2,a2,1
    2640:	02090103          	lb	sp,32(s2)
    2644:	0100                	addi	s0,sp,128
    2646:	00090103          	lb	sp,0(s2)
    264a:	0100                	addi	s0,sp,128
    264c:	00090103          	lb	sp,0(s2)
    2650:	0100                	addi	s0,sp,128
    2652:	00090103          	lb	sp,0(s2)
    2656:	0100                	addi	s0,sp,128
    2658:	00090103          	lb	sp,0(s2)
    265c:	0100                	addi	s0,sp,128
    265e:	00090103          	lb	sp,0(s2)
    2662:	0100                	addi	s0,sp,128
    2664:	00090103          	lb	sp,0(s2)
    2668:	0100                	addi	s0,sp,128
    266a:	00090803          	lb	a6,0(s2)
    266e:	0100                	addi	s0,sp,128
    2670:	1205                	addi	tp,tp,-31
    2672:	0306                	slli	t1,t1,0x1
    2674:	0900                	addi	s0,sp,144
    2676:	0000                	unimp
    2678:	0501                	addi	a0,a0,0
    267a:	0605                	addi	a2,a2,1
    267c:	0c090103          	lb	sp,192(s2)
    2680:	0100                	addi	s0,sp,128
    2682:	1505                	addi	a0,a0,-31
    2684:	0306                	slli	t1,t1,0x1
    2686:	0900                	addi	s0,sp,144
    2688:	0000                	unimp
    268a:	0501                	addi	a0,a0,0
    268c:	030a                	slli	t1,t1,0x2
    268e:	0900                	addi	s0,sp,144
    2690:	0002                	c.slli64	zero
    2692:	0501                	addi	a0,a0,0
    2694:	030c                	addi	a1,sp,384
    2696:	0902                	c.slli64	s2
    2698:	0002                	c.slli64	zero
    269a:	0501                	addi	a0,a0,0
    269c:	030a                	slli	t1,t1,0x2
    269e:	097e                	slli	s2,s2,0x1f
    26a0:	0004                	0x4
    26a2:	0501                	addi	a0,a0,0
    26a4:	0605                	addi	a2,a2,1
    26a6:	08090203          	lb	tp,128(s2)
    26aa:	0100                	addi	s0,sp,128
    26ac:	0c05                	addi	s8,s8,1
    26ae:	0306                	slli	t1,t1,0x1
    26b0:	0900                	addi	s0,sp,144
    26b2:	0000                	unimp
    26b4:	0501                	addi	a0,a0,0
    26b6:	0605                	addi	a2,a2,1
    26b8:	08090403          	lb	s0,128(s2)
    26bc:	0100                	addi	s0,sp,128
    26be:	1005                	c.nop	-31
    26c0:	00090003          	lb	zero,0(s2)
    26c4:	0100                	addi	s0,sp,128
    26c6:	0c05                	addi	s8,s8,1
    26c8:	0306                	slli	t1,t1,0x1
    26ca:	097c                	addi	a5,sp,156
    26cc:	0000                	unimp
    26ce:	0501                	addi	a0,a0,0
    26d0:	0305                	addi	t1,t1,1
    26d2:	0904                	addi	s1,sp,144
    26d4:	0002                	c.slli64	zero
    26d6:	0501                	addi	a0,a0,0
    26d8:	0009                	c.nop	2
    26da:	0402                	c.slli64	s0
    26dc:	02030603          	lb	a2,32(t1)
    26e0:	0409                	addi	s0,s0,2
    26e2:	0100                	addi	s0,sp,128
    26e4:	1f05                	addi	t5,t5,-31
    26e6:	0200                	addi	s0,sp,256
    26e8:	0304                	addi	s1,sp,384
    26ea:	0306                	slli	t1,t1,0x1
    26ec:	0900                	addi	s0,sp,144
    26ee:	0000                	unimp
    26f0:	0501                	addi	a0,a0,0
    26f2:	0019                	c.nop	6
    26f4:	0402                	c.slli64	s0
    26f6:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    26fa:	0006                	c.slli	zero,0x1
    26fc:	0501                	addi	a0,a0,0
    26fe:	04020017          	auipc	zero,0x4020
    2702:	7e030603          	lb	a2,2016(t1)
    2706:	0609                	addi	a2,a2,2
    2708:	0100                	addi	s0,sp,128
    270a:	1005                	c.nop	-31
    270c:	0200                	addi	s0,sp,256
    270e:	0304                	addi	s1,sp,384
    2710:	00090003          	lb	zero,0(s2)
    2714:	0100                	addi	s0,sp,128
    2716:	0505                	addi	a0,a0,1
    2718:	0200                	addi	s0,sp,256
    271a:	0304                	addi	s1,sp,384
    271c:	0306                	slli	t1,t1,0x1
    271e:	0900                	addi	s0,sp,144
    2720:	0002                	c.slli64	zero
    2722:	0501                	addi	a0,a0,0
    2724:	0009                	c.nop	2
    2726:	0402                	c.slli64	s0
    2728:	09030603          	lb	a2,144(t1)
    272c:	0409                	addi	s0,s0,2
    272e:	0100                	addi	s0,sp,128
    2730:	1b05                	addi	s6,s6,-31
    2732:	0200                	addi	s0,sp,256
    2734:	0304                	addi	s1,sp,384
    2736:	00097e03          	0x97e03
    273a:	0100                	addi	s0,sp,128
    273c:	1005                	c.nop	-31
    273e:	0200                	addi	s0,sp,256
    2740:	0304                	addi	s1,sp,384
    2742:	00090003          	lb	zero,0(s2)
    2746:	0100                	addi	s0,sp,128
    2748:	0905                	addi	s2,s2,1
    274a:	0200                	addi	s0,sp,256
    274c:	0304                	addi	s1,sp,384
    274e:	0c090903          	lb	s2,192(s2)
    2752:	0100                	addi	s0,sp,128
    2754:	2605                	jal	2a74 <_min_stack+0xa74>
    2756:	0200                	addi	s0,sp,256
    2758:	0304                	addi	s1,sp,384
    275a:	0306                	slli	t1,t1,0x1
    275c:	0900                	addi	s0,sp,144
    275e:	0000                	unimp
    2760:	0501                	addi	a0,a0,0
    2762:	0020                	addi	s0,sp,8
    2764:	0402                	c.slli64	s0
    2766:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    276a:	0006                	c.slli	zero,0x1
    276c:	0501                	addi	a0,a0,0
    276e:	001f 0402 0603      	0x6030402001f
    2774:	04097e03          	0x4097e03
    2778:	0100                	addi	s0,sp,128
    277a:	1405                	addi	s0,s0,-31
    277c:	0200                	addi	s0,sp,256
    277e:	0304                	addi	s1,sp,384
    2780:	00090003          	lb	zero,0(s2)
    2784:	0100                	addi	s0,sp,128
    2786:	0505                	addi	a0,a0,1
    2788:	0200                	addi	s0,sp,256
    278a:	0304                	addi	s1,sp,384
    278c:	0306                	slli	t1,t1,0x1
    278e:	0900                	addi	s0,sp,144
    2790:	0000                	unimp
    2792:	0501                	addi	a0,a0,0
    2794:	0009                	c.nop	2
    2796:	0402                	c.slli64	s0
    2798:	09030603          	lb	a2,144(t1)
    279c:	0409                	addi	s0,s0,2
    279e:	0100                	addi	s0,sp,128
    27a0:	1f05                	addi	t5,t5,-31
    27a2:	0200                	addi	s0,sp,256
    27a4:	0304                	addi	s1,sp,384
    27a6:	00097e03          	0x97e03
    27aa:	0100                	addi	s0,sp,128
    27ac:	1405                	addi	s0,s0,-31
    27ae:	0200                	addi	s0,sp,256
    27b0:	0304                	addi	s1,sp,384
    27b2:	00090003          	lb	zero,0(s2)
    27b6:	0100                	addi	s0,sp,128
    27b8:	0905                	addi	s2,s2,1
    27ba:	0200                	addi	s0,sp,256
    27bc:	0304                	addi	s1,sp,384
    27be:	0c090903          	lb	s2,192(s2)
    27c2:	0100                	addi	s0,sp,128
    27c4:	2305                	jal	2ce4 <_min_stack+0xce4>
    27c6:	0200                	addi	s0,sp,256
    27c8:	0304                	addi	s1,sp,384
    27ca:	0306                	slli	t1,t1,0x1
    27cc:	0900                	addi	s0,sp,144
    27ce:	0000                	unimp
    27d0:	0501                	addi	a0,a0,0
    27d2:	001d                	c.nop	7
    27d4:	0402                	c.slli64	s0
    27d6:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    27da:	0006                	c.slli	zero,0x1
    27dc:	0501                	addi	a0,a0,0
    27de:	001f 0402 0603      	0x6030402001f
    27e4:	04097e03          	0x4097e03
    27e8:	0100                	addi	s0,sp,128
    27ea:	1405                	addi	s0,s0,-31
    27ec:	0200                	addi	s0,sp,256
    27ee:	0304                	addi	s1,sp,384
    27f0:	00090003          	lb	zero,0(s2)
    27f4:	0100                	addi	s0,sp,128
    27f6:	0505                	addi	a0,a0,1
    27f8:	0200                	addi	s0,sp,256
    27fa:	0304                	addi	s1,sp,384
    27fc:	0306                	slli	t1,t1,0x1
    27fe:	0900                	addi	s0,sp,144
    2800:	0000                	unimp
    2802:	0501                	addi	a0,a0,0
    2804:	0009                	c.nop	2
    2806:	0402                	c.slli64	s0
    2808:	09030603          	lb	a2,144(t1)
    280c:	0c09                	addi	s8,s8,2
    280e:	0100                	addi	s0,sp,128
    2810:	2205                	jal	2930 <_min_stack+0x930>
    2812:	0200                	addi	s0,sp,256
    2814:	0304                	addi	s1,sp,384
    2816:	0306                	slli	t1,t1,0x1
    2818:	0900                	addi	s0,sp,144
    281a:	0000                	unimp
    281c:	0501                	addi	a0,a0,0
    281e:	001c                	0x1c
    2820:	0402                	c.slli64	s0
    2822:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    2826:	0006                	c.slli	zero,0x1
    2828:	0501                	addi	a0,a0,0
    282a:	0021                	c.nop	8
    282c:	0402                	c.slli64	s0
    282e:	7e030603          	lb	a2,2016(t1)
    2832:	0409                	addi	s0,s0,2
    2834:	0100                	addi	s0,sp,128
    2836:	1405                	addi	s0,s0,-31
    2838:	0200                	addi	s0,sp,256
    283a:	0304                	addi	s1,sp,384
    283c:	00090003          	lb	zero,0(s2)
    2840:	0100                	addi	s0,sp,128
    2842:	0505                	addi	a0,a0,1
    2844:	0200                	addi	s0,sp,256
    2846:	0304                	addi	s1,sp,384
    2848:	0306                	slli	t1,t1,0x1
    284a:	0900                	addi	s0,sp,144
    284c:	0000                	unimp
    284e:	0601                	addi	a2,a2,0
    2850:	04090803          	lb	a6,64(s2)
    2854:	0100                	addi	s0,sp,128
    2856:	1305                	addi	t1,t1,-31
    2858:	0306                	slli	t1,t1,0x1
    285a:	0900                	addi	s0,sp,144
    285c:	0000                	unimp
    285e:	0501                	addi	a0,a0,0
    2860:	0605                	addi	a2,a2,1
    2862:	10090903          	lb	s2,256(s2)
    2866:	0100                	addi	s0,sp,128
    2868:	1305                	addi	t1,t1,-31
    286a:	0306                	slli	t1,t1,0x1
    286c:	0900                	addi	s0,sp,144
    286e:	0000                	unimp
    2870:	0501                	addi	a0,a0,0
    2872:	0605                	addi	a2,a2,1
    2874:	14091303          	lh	t1,320(s2)
    2878:	0100                	addi	s0,sp,128
    287a:	1005                	c.nop	-31
    287c:	00090003          	lb	zero,0(s2)
    2880:	0100                	addi	s0,sp,128
    2882:	1a05                	addi	s4,s4,-31
    2884:	0306                	slli	t1,t1,0x1
    2886:	0908                	addi	a0,sp,144
    2888:	0000                	unimp
    288a:	0501                	addi	a0,a0,0
    288c:	09650313          	addi	t1,a0,150 # fffeb096 <_stack_start+0xfffdb096>
    2890:	0004                	0x4
    2892:	0501                	addi	a0,a0,0
    2894:	031a                	slli	t1,t1,0x6
    2896:	0002091b          	0x2091b
    289a:	0501                	addi	a0,a0,0
    289c:	0901030b          	0x901030b
    28a0:	0004                	0x4
    28a2:	0501                	addi	a0,a0,0
    28a4:	0305                	addi	t1,t1,1
    28a6:	00020977          	0x20977
    28aa:	0501                	addi	a0,a0,0
    28ac:	0609                	addi	a2,a2,2
    28ae:	04090103          	lb	sp,64(s2)
    28b2:	0100                	addi	s0,sp,128
    28b4:	0b05                	addi	s6,s6,1
    28b6:	0306                	slli	t1,t1,0x1
    28b8:	0900                	addi	s0,sp,144
    28ba:	0000                	unimp
    28bc:	0501                	addi	a0,a0,0
    28be:	09000327          	0x9000327
    28c2:	0002                	c.slli64	zero
    28c4:	0501                	addi	a0,a0,0
    28c6:	0900030b          	0x900030b
    28ca:	0004                	0x4
    28cc:	0501                	addi	a0,a0,0
    28ce:	060d                	addi	a2,a2,3
    28d0:	0a090203          	lb	tp,160(s2)
    28d4:	0100                	addi	s0,sp,128
    28d6:	1a05                	addi	s4,s4,-31
    28d8:	0306                	slli	t1,t1,0x1
    28da:	0900                	addi	s0,sp,144
    28dc:	0000                	unimp
    28de:	0501                	addi	a0,a0,0
    28e0:	01030607          	0x1030607
    28e4:	0a09                	addi	s4,s4,2
    28e6:	0100                	addi	s0,sp,128
    28e8:	1705                	addi	a4,a4,-31
    28ea:	0306                	slli	t1,t1,0x1
    28ec:	0900                	addi	s0,sp,144
    28ee:	0000                	unimp
    28f0:	0501                	addi	a0,a0,0
    28f2:	030c                	addi	a1,sp,384
    28f4:	0900                	addi	s0,sp,144
    28f6:	0002                	c.slli64	zero
    28f8:	0501                	addi	a0,a0,0
    28fa:	060d                	addi	a2,a2,3
    28fc:	0a090103          	lb	sp,160(s2)
    2900:	0100                	addi	s0,sp,128
    2902:	0505                	addi	a0,a0,1
    2904:	00090c03          	lb	s8,0(s2)
    2908:	0100                	addi	s0,sp,128
    290a:	0105                	addi	sp,sp,1
    290c:	0306                	slli	t1,t1,0x1
    290e:	0901                	addi	s2,s2,0
    2910:	0000                	unimp
    2912:	0501                	addi	a0,a0,0
    2914:	000d                	c.nop	3
    2916:	0402                	c.slli64	s0
    2918:	0602                	c.slli64	a2
    291a:	14097603          	0x14097603
    291e:	0100                	addi	s0,sp,128
    2920:	1a05                	addi	s4,s4,-31
    2922:	0200                	addi	s0,sp,256
    2924:	0204                	addi	s1,sp,256
    2926:	0306                	slli	t1,t1,0x1
    2928:	0900                	addi	s0,sp,144
    292a:	0000                	unimp
    292c:	0501                	addi	a0,a0,0
    292e:	0006                	c.slli	zero,0x1
    2930:	0402                	c.slli64	s0
    2932:	0602                	c.slli64	a2
    2934:	02090103          	lb	sp,32(s2)
    2938:	0100                	addi	s0,sp,128
    293a:	1605                	addi	a2,a2,-31
    293c:	0200                	addi	s0,sp,256
    293e:	0204                	addi	s1,sp,256
    2940:	0306                	slli	t1,t1,0x1
    2942:	0900                	addi	s0,sp,144
    2944:	0000                	unimp
    2946:	0501                	addi	a0,a0,0
    2948:	0402000b          	0x402000b
    294c:	0302                	c.slli64	t1
    294e:	0900                	addi	s0,sp,144
    2950:	0004                	0x4
    2952:	0501                	addi	a0,a0,0
    2954:	0018                	0x18
    2956:	0402                	c.slli64	s0
    2958:	0602                	c.slli64	a2
    295a:	08097703          	0x8097703
    295e:	0100                	addi	s0,sp,128
    2960:	1005                	c.nop	-31
    2962:	0200                	addi	s0,sp,256
    2964:	0204                	addi	s1,sp,256
    2966:	00090003          	lb	zero,0(s2)
    296a:	0100                	addi	s0,sp,128
    296c:	0505                	addi	a0,a0,1
    296e:	0200                	addi	s0,sp,256
    2970:	0204                	addi	s1,sp,256
    2972:	0306                	slli	t1,t1,0x1
    2974:	0900                	addi	s0,sp,144
    2976:	0000                	unimp
    2978:	0901                	addi	s2,s2,0
    297a:	0006                	c.slli	zero,0x1
    297c:	0100                	addi	s0,sp,128
    297e:	5001                	c.li	zero,-32
    2980:	0001                	nop
    2982:	0300                	addi	s0,sp,384
    2984:	1d00                	addi	s0,sp,688
    2986:	0000                	unimp
    2988:	0100                	addi	s0,sp,128
    298a:	fb01                	bnez	a4,289a <_min_stack+0x89a>
    298c:	0d0e                	slli	s10,s10,0x3
    298e:	0100                	addi	s0,sp,128
    2990:	0101                	addi	sp,sp,0
    2992:	0001                	nop
    2994:	0000                	unimp
    2996:	0001                	nop
    2998:	0100                	addi	s0,sp,128
    299a:	6300                	flw	fs0,0(a4)
    299c:	7472                	flw	fs0,60(sp)
    299e:	2e30                	fld	fa2,88(a2)
    29a0:	00000053          	fadd.s	ft0,ft0,ft0,rne
    29a4:	0000                	unimp
    29a6:	0500                	addi	s0,sp,640
    29a8:	6a02                	flw	fs4,0(sp)
    29aa:	000d                	c.nop	3
    29ac:	1500                	addi	s0,sp,672
    29ae:	04090403          	lb	s0,64(s2)
    29b2:	0100                	addi	s0,sp,128
    29b4:	04090103          	lb	sp,64(s2)
    29b8:	0100                	addi	s0,sp,128
    29ba:	02090103          	lb	sp,32(s2)
    29be:	0100                	addi	s0,sp,128
    29c0:	02090103          	lb	sp,32(s2)
    29c4:	0100                	addi	s0,sp,128
    29c6:	02090103          	lb	sp,32(s2)
    29ca:	0100                	addi	s0,sp,128
    29cc:	02090103          	lb	sp,32(s2)
    29d0:	0100                	addi	s0,sp,128
    29d2:	02090103          	lb	sp,32(s2)
    29d6:	0100                	addi	s0,sp,128
    29d8:	02090103          	lb	sp,32(s2)
    29dc:	0100                	addi	s0,sp,128
    29de:	02090103          	lb	sp,32(s2)
    29e2:	0100                	addi	s0,sp,128
    29e4:	02090103          	lb	sp,32(s2)
    29e8:	0100                	addi	s0,sp,128
    29ea:	02090103          	lb	sp,32(s2)
    29ee:	0100                	addi	s0,sp,128
    29f0:	02090103          	lb	sp,32(s2)
    29f4:	0100                	addi	s0,sp,128
    29f6:	02090103          	lb	sp,32(s2)
    29fa:	0100                	addi	s0,sp,128
    29fc:	02090103          	lb	sp,32(s2)
    2a00:	0100                	addi	s0,sp,128
    2a02:	02090103          	lb	sp,32(s2)
    2a06:	0100                	addi	s0,sp,128
    2a08:	02090103          	lb	sp,32(s2)
    2a0c:	0100                	addi	s0,sp,128
    2a0e:	02090103          	lb	sp,32(s2)
    2a12:	0100                	addi	s0,sp,128
    2a14:	02090103          	lb	sp,32(s2)
    2a18:	0100                	addi	s0,sp,128
    2a1a:	02090103          	lb	sp,32(s2)
    2a1e:	0100                	addi	s0,sp,128
    2a20:	02090103          	lb	sp,32(s2)
    2a24:	0100                	addi	s0,sp,128
    2a26:	02090103          	lb	sp,32(s2)
    2a2a:	0100                	addi	s0,sp,128
    2a2c:	02090103          	lb	sp,32(s2)
    2a30:	0100                	addi	s0,sp,128
    2a32:	02090103          	lb	sp,32(s2)
    2a36:	0100                	addi	s0,sp,128
    2a38:	02090103          	lb	sp,32(s2)
    2a3c:	0100                	addi	s0,sp,128
    2a3e:	02090103          	lb	sp,32(s2)
    2a42:	0100                	addi	s0,sp,128
    2a44:	02090103          	lb	sp,32(s2)
    2a48:	0100                	addi	s0,sp,128
    2a4a:	02090103          	lb	sp,32(s2)
    2a4e:	0100                	addi	s0,sp,128
    2a50:	02090103          	lb	sp,32(s2)
    2a54:	0100                	addi	s0,sp,128
    2a56:	02090103          	lb	sp,32(s2)
    2a5a:	0100                	addi	s0,sp,128
    2a5c:	02090103          	lb	sp,32(s2)
    2a60:	0100                	addi	s0,sp,128
    2a62:	02090103          	lb	sp,32(s2)
    2a66:	0100                	addi	s0,sp,128
    2a68:	02090303          	lb	t1,32(s2)
    2a6c:	0100                	addi	s0,sp,128
    2a6e:	08090603          	lb	a2,128(s2)
    2a72:	0100                	addi	s0,sp,128
    2a74:	08090103          	lb	sp,128(s2)
    2a78:	0100                	addi	s0,sp,128
    2a7a:	08090203          	lb	tp,128(s2)
    2a7e:	0100                	addi	s0,sp,128
    2a80:	04090303          	lb	t1,64(s2)
    2a84:	0100                	addi	s0,sp,128
    2a86:	04090103          	lb	sp,64(s2)
    2a8a:	0100                	addi	s0,sp,128
    2a8c:	02090103          	lb	sp,32(s2)
    2a90:	0100                	addi	s0,sp,128
    2a92:	04090603          	lb	a2,64(s2)
    2a96:	0100                	addi	s0,sp,128
    2a98:	04090103          	lb	sp,64(s2)
    2a9c:	0100                	addi	s0,sp,128
    2a9e:	04090103          	lb	sp,64(s2)
    2aa2:	0100                	addi	s0,sp,128
    2aa4:	0409                	addi	s0,s0,2
    2aa6:	0000                	unimp
    2aa8:	0101                	addi	sp,sp,0
    2aaa:	0500                	addi	s0,sp,640
    2aac:	0002                	c.slli64	zero
    2aae:	0000                	unimp
    2ab0:	0300                	addi	s0,sp,384
    2ab2:	030100cb          	fnmsub.d	ft1,ft2,fa6,ft0,rne
    2ab6:	0901                	addi	s2,s2,0
    2ab8:	007c                	addi	a5,sp,12
    2aba:	0301                	addi	t1,t1,0
    2abc:	0904                	addi	s1,sp,144
    2abe:	0004                	0x4
    2ac0:	0301                	addi	t1,t1,0
    2ac2:	0904                	addi	s1,sp,144
    2ac4:	0004                	0x4
    2ac6:	0301                	addi	t1,t1,0
    2ac8:	0904                	addi	s1,sp,144
    2aca:	0004                	0x4
    2acc:	0901                	addi	s2,s2,0
    2ace:	0004                	0x4
    2ad0:	0100                	addi	s0,sp,128
    2ad2:	01              	Address 0x0000000000002ad2 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	5f5f 6975 746e      	0x746e69755f5f
  3a:	5f38                	lw	a4,120(a4)
  3c:	0074                	addi	a3,sp,12
  3e:	645f 7461 0061      	0x617461645f
  44:	775f 7263 6f74      	0x6f747263775f
  4a:	626d                	lui	tp,0x1b
  4c:	735f 6174 6574      	0x65746174735f
  52:	5f00                	lw	s0,56(a4)
  54:	72736377          	0x72736377
  58:	6f74                	flw	fa3,92(a4)
  5a:	626d                	lui	tp,0x1b
  5c:	74735f73          	csrrwi	t5,0x747,6
  60:	7461                	lui	s0,0xffff8
  62:	0065                	c.nop	25
  64:	5f5f 7562 6c69      	0x6c6975625f5f
  6a:	6974                	flw	fa3,84(a0)
  6c:	5f6e                	lw	t5,248(sp)
  6e:	656d                	lui	a0,0x1b
  70:	736d                	lui	t1,0xffffb
  72:	7465                	lui	s0,0xffff9
  74:	6c00                	flw	fs0,24(s0)
  76:	20676e6f          	jal	t3,7627c <_stack_start+0x6627c>
  7a:	6f6c                	flw	fa1,92(a4)
  jal x0, default_exc_handler
  7c:	676e                	flw	fa4,216(sp)
  7e:	7520                	flw	fs0,104(a0)
  jal x0, reset_handler
  80:	736e                	flw	ft6,248(sp)
  82:	6769                	lui	a4,0x1a
  jal x0, default_exc_handler
  84:	656e                	flw	fa0,216(sp)
  86:	2064                	fld	fs1,192(s0)
  jal x0, default_exc_handler
  88:	6e69                	lui	t3,0x1a
  8a:	0074                	addi	a3,sp,12
    int line[size_b][size_a + size_b];
  8c:	6544                	flw	fs1,12(a0)
  8e:	654d5f63          	bge	s10,s4,6ec <ext_euclid+0xb8>
  92:	67617373          	csrrci	t1,0x676,2
  96:	0065                	c.nop	25
  98:	6c5f 6662 6973      	0x697366626c5f
  9e:	657a                	flw	fa0,156(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  a0:	7200                	flw	fs0,32(a2)
  a2:	6e61                	lui	t3,0x18
  a4:	6f64                	flw	fs1,92(a4)
    int pola[size_a];
  a6:	5f6d                	li	t5,-5
  a8:	7379656b          	0x7379656b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  ac:	5f00                	lw	s0,56(a4)
  ae:	6c5f 636f 6c61      	0x6c61636f6c5f
    int line[size_b][size_a + size_b];
  b4:	5f65                	li	t5,-7
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  b6:	0074                	addi	a3,sp,12
  b8:	72636573          	csrrsi	a0,0x726,6
    int line[size_b][size_a + size_b];
  bc:	7465                	lui	s0,0xffff9
  be:	6b5f 7965 665f      	0x665f79656b5f
  c4:	7300                	flw	fs0,32(a4)
  c6:	6365                	lui	t1,0x19
  c8:	6572                	flw	fa0,28(sp)
    int pola[size_a];
  ca:	5f74                	lw	a3,124(a4)
  cc:	5f79656b          	0x5f79656b
    int polb[size_b];
  d0:	6d5f0067          	jr	1749(t5)
    int pola[size_a];
  d4:	7262                	flw	ft4,56(sp)
    int polb[size_b];
  d6:	6f74                	flw	fa3,92(a4)
  d8:	735f6377          	0x735f6377
    int line[size_b][size_a + size_b];
  dc:	6174                	flw	fa3,68(a0)
    int pola[size_a];
  de:	6574                	flw	fa3,76(a0)
  e0:	5f00                	lw	s0,56(a4)
    int polb[size_b];
  e2:	6f746377          	0x6f746377
            line[i][j] = 0;
  e6:	626d                	lui	tp,0x1b
  e8:	735f 6174 6574      	0x65746174735f
            product[j] = 0;
  ee:	5f00                	lw	s0,56(a4)
  f0:	745f 5f6d 6573      	0x65735f6d745f
    for (i = 0; i < size_b; ++i){
  f6:	6f6c0063          	beq	s8,s6,7d6 <ext_euclid+0x1a2>
  fa:	676e                	flw	fa4,216(sp)
    for (i = 0; i < size_a; ++i){
  fc:	6c20                	flw	fs0,88(s0)
  fe:	20676e6f          	jal	t3,76304 <_stack_start+0x66304>
 102:	6e69                	lui	t3,0x1a
    for (i = 0; i < size_b; ++i){
 104:	0074                	addi	a3,sp,12
 106:	657a6973          	csrrsi	s2,0x657,20
    if(star_mult == 1){
 10a:	4e5f 7000 6c6f      	0x6c6f70004e5f
 110:	6d79                	lui	s10,0x1e
 112:	6c75                	lui	s8,0x1d
 114:	0074                	addi	a3,sp,12
 116:	755f 7562 0066      	0x667562755f
        for (j = size_b -1; j >= 0; j = j-1){
 11c:	625f 7361 0065      	0x657361625f
            product[j] = 0;
 122:	5f5f 6d74 685f      	0x685f6d745f5f
            line[i][j] = 0;
 128:	0072756f          	jal	a0,2792e <_stack_start+0x1792e>
            product[j] = 0;
 12c:	5f5f 6673 5f00      	0x5f0066735f5f
        for(j = 0; j < size_a + size_b -1; ++j){
 132:	655f6e6f          	jal	t3,f6f86 <_stack_start+0xe6f86>
 136:	6978                	flw	fa4,84(a0)
    for (i = 0; i < size_b; ++i){
 138:	5f74                	lw	a3,124(a4)
 13a:	7261                	lui	tp,0xffff8
 13c:	5f007367          	0x5f007367
        for(j = 0; j < size_a + size_b -1; ++j){
 140:	6b6f6f63          	bltu	t5,s6,7fe <ext_euclid+0x1ca>
        pola[i] = a[i];
 144:	6569                	lui	a0,0x1a
 146:	5f00                	lw	s0,56(a4)
 148:	735f 6c67 6575      	0x65756c67735f
            pola[i] = pola[i] + mod;
 14e:	7200                	flw	fs0,32(a2)
 150:	7365                	lui	t1,0xffff9
        while (pola[i] < 0){
 152:	0031                	c.nop	12
 154:	6572                	flw	fa0,28(sp)
 156:	5f003273          	csrrc	tp,0x5f0,zero
        pola[i] = pola[i] % mod;
 15a:	6c66                	flw	fs8,88(sp)
 15c:	6761                	lui	a4,0x18
    for (i = 0; i < size_a; ++i){
 15e:	695f0073          	0x695f0073
        pola[i] = pola[i] % mod;
 162:	78635f73          	csrrwi	t5,0x786,6
    for (i = 0; i < size_a; ++i){
 166:	0061                	c.nop	24
            pola[i] = pola[i] + mod;
 168:	735f 6474 6e69      	0x6e696474735f
        polb[i] = b[i];
 16e:	5f00                	lw	s0,56(a4)
 170:	6c62                	flw	fs8,24(sp)
 172:	7a69736b          	0x7a69736b
        while (polb[i] < 0){
 176:	0065                	c.nop	25
 178:	7270                	flw	fa2,100(a2)
 17a:	6375646f          	jal	s0,56fb0 <_stack_start+0x46fb0>
        polb[i] = polb[i] % mod;
 17e:	0074                	addi	a3,sp,12
    for (i = 0; i < size_b; ++i){
 180:	6f70                	flw	fa2,92(a4)
 182:	796c                	flw	fa1,116(a0)
        polb[i] = polb[i] % mod;
 184:	6964                	flw	fs1,84(a0)
 186:	0076                	c.slli	zero,0x1d
    for (i = 0; i < size_b; ++i){
 188:	6f70                	flw	fa2,92(a4)
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
 18a:	796c                	flw	fa1,116(a0)
 18c:	0066                	c.slli	zero,0x19
    if(star_mult == 1){
 18e:	635f 7476 7562      	0x75627476635f
        for(j = 0; j < size_a + size_b -1; ++j){
 194:	0066                	c.slli	zero,0x19
    for (i = 0; i < size_b; ++i){
 196:	6f5f 6666 6573      	0x657366666f5f
 19c:	0074                	addi	a3,sp,12
 19e:	6d5f 7362 7472      	0x747273626d5f
    for(j = 0; j < size_a + size_b -1; ++j){
 1a4:	7363776f          	jal	a4,378da <_stack_start+0x278da>
 1a8:	735f 6174 6574      	0x65746174735f
    for(j = 0; j < size_a + size_b -1; ++j){
 1ae:	5f00                	lw	s0,56(a4)
}
 1b0:	626d                	lui	tp,0x1b
 1b2:	6c72                	flw	fs8,28(sp)
 1b4:	6e65                	lui	t3,0x19
 1b6:	735f 6174 6574      	0x65746174735f
 1bc:	5f00                	lw	s0,56(a4)
 1be:	6e66                	flw	ft8,88(sp)
 1c0:	7261                	lui	tp,0xffff8
 1c2:	6e007367          	0x6e007367
 1c6:	7274                	flw	fa3,100(a2)
 1c8:	5f75                	li	t5,-3
 1ca:	6564                	flw	fs1,76(a0)
 1cc:	70796563          	bltu	s2,t2,8d6 <ext_euclid+0x2a2>
                line[size_b-1-j][k] = pola[k]*polb[j];
 1d0:	0074                	addi	a3,sp,12
 1d2:	665f 736e 5f00      	0x5f00736e665f
 1d8:	6e676973          	csrrsi	s2,0x6e6,14
 1dc:	5f00                	lw	s0,56(a4)
 1de:	6c66                	flw	fs8,88(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 1e0:	5f6b636f          	jal	t1,b67d6 <_stack_start+0xa67d6>
                line[size_b-1-j][k] = pola[k]*polb[j];
 1e4:	0074                	addi	a3,sp,12
 1e6:	735f 6474 7265      	0x72656474735f
            for (k = size_a-1; k >= 0; k = k-1 ){
 1ec:	0072                	c.slli	zero,0x1c
        for (j = size_b -1; j >= 0; j = j-1){
 1ee:	425f 6769 6e69      	0x6e696769425f
 1f4:	0074                	addi	a3,sp,12
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f6:	675f 6d61 616d      	0x616d6d61675f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 1fc:	735f 6769 676e      	0x676e6769735f
 202:	6d61                	lui	s10,0x18
 204:	5f00                	lw	s0,56(a4)
 206:	6572                	flw	fa0,28(sp)
 208:	6461                	lui	s0,0x18
            for (k = size_a-1; k >= 0; k = k-1 ){
 20a:	5f00                	lw	s0,56(a4)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 20c:	6572                	flw	fa0,28(sp)
 20e:	746c7573          	csrrci	a0,0x746,24
 212:	6b5f 5f00 745f      	0x745f5f006b5f
        for (j = size_b -1; j >= 0; j = j-1){
 218:	006d                	c.nop	27
 21a:	6564                	flw	fs1,76(a0)
 21c:	756e                	flw	fa0,248(sp)
 21e:	5f6d                	li	t5,-5
            line[i][j] = line[i][j] % mod;
 220:	6574                	flw	fa3,76(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
 222:	706d                	c.lui	zero,0xffffb
 224:	5f00                	lw	s0,56(a4)
            line[i][j] = line[i][j] % mod;
 226:	775f 6863 0062      	0x626863775f
 22c:	6572                	flw	fa0,28(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 22e:	746c7573          	csrrci	a0,0x746,24
    for (i = 0; i < size_b; ++i){
 232:	006e6f6b          	0x6e6f6b
 236:	735f 6474 756f      	0x756f6474735f
        for(j = 0; j < size_a + size_b -1; ++j){
 23c:	0074                	addi	a3,sp,12
            product[j] += line[i][j];
 23e:	635f 7476 656c      	0x656c7476635f
 244:	006e                	c.slli	zero,0x1b
        for(i = 0; i < size_b; ++i){
 246:	72636573          	csrrsi	a0,0x726,6
            product[j] += line[i][j];
 24a:	7465                	lui	s0,0xffff9
 24c:	6b5f 7965 665f      	0x665f79656b5f
 252:	0071                	c.nop	28
        for(i = 0; i < size_b; ++i){
 254:	665f 6c69 0065      	0x656c69665f
    for(j = 0; j < size_a + size_b -1; ++j){
 25a:	6572                	flw	fa0,28(sp)
 25c:	7574                	flw	fa3,108(a0)
        for(i = 0; i < size_b; ++i){
 25e:	6e72                	flw	ft8,28(sp)
 260:	615f 6464 6572      	0x65726464615f
    for(j = 0; j < size_a + size_b -1; ++j){
 266:	00317373          	csrrci	t1,fcsr,2
        product[j] = product[j] % mod;
 26a:	6572                	flw	fa0,28(sp)
 26c:	7574                	flw	fa3,108(a0)
 26e:	6e72                	flw	ft8,28(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 270:	615f 6464 6572      	0x65726464615f
    int line[size_b][size_a + size_b];
 276:	00327373          	csrrci	t1,fcsr,4
 27a:	6572                	flw	fa0,28(sp)
 27c:	7574                	flw	fa3,108(a0)
 27e:	6e72                	flw	ft8,28(sp)
 280:	615f 6464 6572      	0x65726464615f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 286:	00337373          	csrrci	t1,fcsr,6
 28a:	6572                	flw	fa0,28(sp)
 28c:	7574                	flw	fa3,108(a0)
 28e:	6e72                	flw	ft8,28(sp)
 290:	615f 6464 6572      	0x65726464615f
 296:	00347373          	csrrci	t1,fcsr,8
    int line[size_b][size_a + size_b];
 29a:	6e5f 6f69 7362      	0x73626f696e5f
    int pola[size_a];
 2a0:	7200                	flw	fs0,32(a2)
 2a2:	7465                	lui	s0,0xffff9
 2a4:	7275                	lui	tp,0xffffd
 2a6:	5f6e                	lw	t5,248(sp)
    int line[size_b][size_a + size_b];
 2a8:	6461                	lui	s0,0x18
    int pola[size_a];
 2aa:	7264                	flw	fs1,100(a2)
 2ac:	7365                	lui	t1,0xffff9
    int polb[size_b];
 2ae:	72003673          	csrrc	a2,0x720,zero
 2b2:	7465                	lui	s0,0xffff9
    int pola[size_a];
 2b4:	7275                	lui	tp,0xffffd
    int polb[size_b];
 2b6:	5f6e                	lw	t5,248(sp)
 2b8:	6461                	lui	s0,0x18
    int line[size_b][size_a + size_b];
 2ba:	7264                	flw	fs1,100(a2)
 2bc:	7365                	lui	t1,0xffff9
    int pola[size_a];
 2be:	73003773          	csrrc	a4,0x730,zero
    int polb[size_b];
 2c2:	6f68                	flw	fa0,92(a4)
            line[i][j] = 0;
 2c4:	7472                	flw	fs0,60(sp)
 2c6:	7520                	flw	fs0,104(a0)
 2c8:	736e                	flw	ft6,248(sp)
    for (i = 0; i < size_b; ++i){
 2ca:	6769                	lui	a4,0x1a
 2cc:	656e                	flw	fa0,216(sp)
            product2[j] = 0;
 2ce:	2064                	fld	fs1,192(s0)
 2d0:	6e69                	lui	t3,0x1a
 2d2:	0074                	addi	a3,sp,12
 2d4:	615f 6574 6978      	0x69786574615f
    for(i = 0; i < size_a; ++i){
 2da:	3074                	fld	fa3,224(s0)
 2dc:	5f00                	lw	s0,56(a4)
 2de:	6e676973          	csrrsi	s2,0x6e6,14
    for(i = 0; i < size_b; ++i){
 2e2:	6c61                	lui	s8,0x18
 2e4:	625f 6675 5f00      	0x5f006675625f
    if(star_mult == 1){
 2ea:	7361                	lui	t1,0xffff8
 2ec:	6d697463          	bgeu	s2,s6,9b4 <generate_keys+0x9c>
 2f0:	5f65                	li	t5,-7
 2f2:	7562                	flw	fa0,56(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 2f4:	0066                	c.slli	zero,0x19
 2f6:	725f 7365 6c75      	0x6c757365725f
            product2[j] = 0;
 2fc:	0074                	addi	a3,sp,12
 2fe:	5f5f 6377 0068      	0x6863775f5f
            line[i][j] = 0;
 304:	746e6977          	0x746e6977
            product2[j] = 0;
 308:	745f 6700 6e65      	0x6e656700745f
        for(j = 0; j < size_a + size_b -1; ++j){
 30e:	7265                	lui	tp,0xffff9
 310:	7461                	lui	s0,0xffff8
    for (i = 0; i < size_b; ++i){
 312:	5f65                	li	t5,-7
 314:	7379656b          	0x7379656b
 318:	5f00                	lw	s0,56(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
 31a:	625f 6975 746c      	0x746c6975625f
        pola[i] = a[i];
 320:	6e69                	lui	t3,0x1a
 322:	6d5f 6d65 7063      	0x70636d656d5f
 328:	0079                	c.nop	30
    for(i = 0; i < size_a; ++i){
 32a:	6c5f 636f 006b      	0x6b636f6c5f
 330:	544e                	lw	s0,240(sp)
        polb[i] = b[i];
 332:	5552                	lw	a0,52(sp)
 334:	345f 5f38 6962      	0x69625f38345f
 33a:	4d74                	lw	a3,92(a0)
 33c:	632e                	flw	ft6,200(sp)
    for(i = 0; i < size_b; ++i){
 33e:	7300                	flw	fs0,32(a4)
        polb[i] = b[i];
 340:	7a69                	lui	s4,0xffffa
 342:	5f65                	li	t5,-7
    for(i = 0; i < size_b; ++i){
 344:	0061                	c.nop	24
                line[size_b-1-j][k] = pola[k]*polb[j];
 346:	7270                	flw	fa2,100(a2)
 348:	6375646f          	jal	s0,5717e <_stack_start+0x4717e>
 34c:	3274                	fld	fa3,224(a2)
 34e:	6500                	flw	fs0,8(a0)
 350:	7478                	flw	fa4,108(s0)
 352:	655f 6375 696c      	0x696c6375655f
 358:	0064                	addi	s1,sp,12
 35a:	775f 6972 6574      	0x65746972775f
            for (k = size_a-1; k >= 0; k = k-1 ){
 360:	5f00                	lw	s0,56(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 362:	745f 5f6d 6579      	0x65795f6d745f
 368:	7261                	lui	tp,0xffff8
 36a:	7000                	flw	fs0,32(s0)
 36c:	00626c6f          	jal	s8,26372 <_stack_start+0x16372>
 370:	6172                	flw	ft2,28(sp)
 372:	646e                	flw	fs0,216(sp)
        for(i = 0; i < size_b; ++i){
 374:	765f6d6f          	jal	s10,f72d8 <_stack_start+0xe72d8>
    for(j = 0; j < size_a + size_b -1; ++j){
 378:	6c61                	lui	s8,0x18
}
 37a:	5f00                	lw	s0,56(a4)
 37c:	6d6e                	flw	fs10,216(sp)
 37e:	6c61                	lui	s8,0x18
 380:	6f6c                	flw	fa1,92(a4)
 382:	6f6c0063          	beq	s8,s6,a62 <generate_keys+0x14a>
 386:	676e                	flw	fa4,216(sp)
 388:	6420                	flw	fs0,72(s0)
 38a:	6c62756f          	jal	a0,27a50 <_stack_start+0x17a50>
 38e:	0065                	c.nop	25
 390:	6e5f 7865 6674      	0x667478656e5f
 396:	6d00                	flw	fs0,24(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 398:	7365                	lui	t1,0xffff9
 39a:	65676173          	csrrsi	sp,0x656,14
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 39e:	5f00                	lw	s0,56(a4)
 3a0:	745f 5f6d 6f6d      	0x6f6d5f6d745f
 3a6:	006e                	c.slli	zero,0x1b
 3a8:	6572                	flw	fa0,28(sp)
 3aa:	7574                	flw	fa3,108(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ac:	6e72                	flw	ft8,28(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3ae:	615f 6464 6572      	0x65726464615f
            for (k = size_a-1; k >= 0; k = k-1 ){
 3b4:	00357373          	csrrci	t1,fcsr,10
        for (j = size_b -1; j >= 0; j = j-1){
 3b8:	615f 6574 6978      	0x69786574615f
 3be:	0074                	addi	a3,sp,12
            product2[j] += line[i][j];
 3c0:	6f627573          	csrrci	a0,0x6f6,4
 3c4:	7470                	flw	fa2,108(s0)
        for(i = 0; i < size_b; ++i){
 3c6:	7261                	lui	tp,0xffff8
            product2[j] += line[i][j];
 3c8:	5f5f0067          	jr	1525(t5)
 3cc:	64696473          	csrrsi	s0,0x646,18
 3d0:	6e69                	lui	t3,0x1a
 3d2:	7469                	lui	s0,0xffffa
        for(i = 0; i < size_b; ++i){
 3d4:	5f00                	lw	s0,56(a4)
 3d6:	5f66666f          	jal	a2,669cc <_stack_start+0x569cc>
    for(j = 0; j < size_a + size_b -1; ++j){
 3da:	0074                	addi	a3,sp,12
 3dc:	6e45                	lui	t3,0x11
        for(i = 0; i < size_b; ++i){
 3de:	654d5f63          	bge	s10,s4,a3c <generate_keys+0x124>
    int v[size_N];
 3e2:	67617373          	csrrci	t1,0x676,2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 3e6:	0065                	c.nop	25
    int v[size_N];
 3e8:	746e6f63          	bltu	t3,t1,b46 <generate_keys+0x22e>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 3ec:	6f72                	flw	ft10,28(sp)
 3ee:	526c                	lw	a1,100(a2)
 3f0:	5f00                	lw	s0,56(a4)
 3f2:	7266                	flw	ft4,120(sp)
 3f4:	6565                	lui	a0,0x19
 3f6:	696c                	flw	fa1,84(a0)
 3f8:	72007473          	csrrci	s0,0x720,0
 3fc:	6e69                	lui	t3,0x1a
 3fe:	6f705f67          	0x6f705f67
 402:	796c                	flw	fa1,116(a0)
 404:	5f00                	lw	s0,56(a4)
 406:	4f4c                	lw	a1,28(a4)
    int v[size_N];
 408:	525f4b43          	fmadd.d	fs6,ft10,ft5,fa0,rmm
 40c:	4345                	li	t1,17
    int q[size_N];
 40e:	5255                	li	tp,-11
 410:	45564953          	0x45564953
    int num_temp[size_N];
 414:	545f 7400 5f69      	0x5f697400545f
    int denum_temp[size_D];
 41a:	0031                	c.nop	12
 41c:	6974                	flw	fa3,84(a0)
 41e:	325f 7500 736e      	0x736e7500325f
 424:	6769                	lui	a4,0x1a
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 426:	656e                	flw	fa0,216(sp)
 428:	2064                	fld	fs1,192(s0)
    int denum_temp[size_D];
 42a:	72616863          	bltu	sp,t1,b5a <generate_keys+0x242>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 42e:	7100                	flw	fs0,32(a0)
    int v[size_N];
 430:	5f69                	li	t5,-6
 432:	0031                	c.nop	12
    int denum_temp[size_D];
 434:	6e5f 7765 5f00      	0x5f0077656e5f
    for (i = 0; i < size_N; ++i){
 43a:	5f68                	lw	a0,124(a4)
 43c:	7265                	lui	tp,0xffff9
 43e:	6e72                	flw	ft8,28(sp)
 440:	6873006f          	j	312c6 <_stack_start+0x212c6>
    for (i = 0; i < size_D; ++i) {
 444:	2074726f          	jal	tp,47e4a <_stack_start+0x37e4a>
    for (i = 0; i < size_N; ++i){
 448:	6e69                	lui	t3,0x1a
 44a:	0074                	addi	a3,sp,12
 44c:	5f5f 6d74 795f      	0x795f6d745f5f
    for (i = size_D-1; i >= 0; i = i-1){
 452:	6164                	flw	fs1,68(a0)
 454:	0079                	c.nop	30
 456:	5f5f 6273 6675      	0x667562735f5f
    for (i = 0; i < size_N; ++i){
 45c:	2f00                	fld	fs0,24(a4)
        if ( (b_N*u)%mod == 1 )
 45e:	6f68                	flw	fa0,92(a4)
    for (u = 0; u < mod; ++u){
 460:	656d                	lui	a0,0x1b
 462:	696c652f          	0x696c652f
 466:	6e66                	flw	ft8,88(sp)
        num_temp[i] = num[i];
 468:	7275                	lui	tp,0xffffd
 46a:	7365442f          	0x7365442f
 46e:	706f746b          	0x706f746b
        while (num_temp[i] < 0) {
 472:	6562692f          	0x6562692f
 476:	5f78                	lw	a4,124(a4)
        num_temp[i] = num_temp[i] % mod;
 478:	3276                	fld	ft4,376(sp)
 47a:	6562692f          	0x6562692f
    for (i = 0; i < size_N; ++i){
 47e:	2d78                	fld	fa4,216(a0)
        num_temp[i] = num_temp[i] % mod;
 480:	616d                	addi	sp,sp,240
 482:	72657473          	csrrci	s0,0x726,10
            num_temp[i] = num_temp[i] + mod;
 486:	6178652f          	0x6178652f
        denum_temp[i] = denum[i];
 48a:	706d                	c.lui	zero,0xffffb
 48c:	656c                	flw	fa1,76(a0)
 48e:	77732f73          	csrrs	t5,0x777,t1
            denum_temp[i] = denum_temp[i] + mod;
 492:	72746e2f          	0x72746e2f
        while (denum_temp[i] < 0) {
 496:	5f75                	li	t5,-3
 498:	616c                	flw	fa1,68(a0)
        denum_temp[i] = denum_temp[i] % mod;
 49a:	6974                	flw	fa3,84(a0)
 49c:	6866                	flw	fa6,88(sp)
    for (i = 0; i < size_D; ++i) {
 49e:	2f61636f          	jal	t1,16794 <_stack_start+0x6794>
        denum_temp[i] = denum_temp[i] % mod;
 4a2:	6f6e                	flw	ft10,216(sp)
 4a4:	635f 7375 6f74      	0x6f747375635f
            denum_temp[i] = denum_temp[i] + mod;
 4aa:	006d                	c.nop	27
        q[i] = 0;
 4ac:	695f 626f 0073      	0x73626f695f
 4b2:	5f5f 4946 454c      	0x454c49465f5f
 4b8:	5f00                	lw	s0,56(a4)
        v[i] = 0;
 4ba:	626d                	lui	tp,0x1b
 4bc:	74617473          	csrrci	s0,0x746,2
    for (i = 0; i < size_N; ++i){
 4c0:	5f65                	li	t5,-7
        if( denum_temp[i] != 0 )
 4c2:	0074                	addi	a3,sp,12
    for (i = size_D-1; i >= 0; i = i-1){
 4c4:	5f5f 4673 4c49      	0x4c4946735f5f
        if ( (b_N*u)%mod == 1 )
 4ca:	0045                	c.nop	17
 4cc:	6d5f 7362 6174      	0x617473626d5f
    for (u = 0; u < mod; ++u){
 4d2:	6574                	flw	fa3,76(a0)
 4d4:	5f00                	lw	s0,56(a4)
        if( num_temp[i] != 0 )
 4d6:	6172                	flw	ft2,28(sp)
    for (i = size_N-1; i >= 0; i = i-1){
 4d8:	646e                	flw	fs0,216(sp)
 4da:	6e5f 7865 0074      	0x7478656e5f
 4e0:	6d5f 6c62 6e65      	0x6e656c626d5f
    while (d >= d2){
 4e6:	735f 6174 6574      	0x65746174735f
        result[i] = q[i];
 4ec:	5f00                	lw	s0,56(a4)
 4ee:	6e69                	lui	t3,0x1a
 4f0:	695f0063          	beq	t5,s5,b70 <generate_keys+0x258>
    for(i = 0; i < size_N; ++i){
 4f4:	646e                	flw	fs0,216(sp)
 4f6:	5f00                	lw	s0,56(a4)
    for(i = size_N; i < (2*size_N); ++i){
 4f8:	6f6c                	flw	fa1,92(a4)
 4fa:	656c6163          	bltu	s8,s6,b3c <generate_keys+0x224>
        result[i] = num_temp[i-size_N];
 4fe:	5f00                	lw	s0,56(a4)
 500:	635f 656c 6e61      	0x6e61656c635f
    for(i = size_N; i < (2*size_N); ++i){
 506:	7075                	c.lui	zero,0xffffd
}
 508:	5f00                	lw	s0,56(a4)
 50a:	6e75                	lui	t3,0x1d
 50c:	63657073          	csrci	0x636,10
 510:	6669                	lui	a2,0x1a
 512:	6569                	lui	a0,0x1a
 514:	5f64                	lw	s1,124(a4)
 516:	6f6c                	flw	fa1,92(a4)
 518:	656c6163          	bltu	s8,s6,b5a <generate_keys+0x242>
 51c:	695f 666e 006f      	0x6f666e695f
 522:	6d5f 7861 6477      	0x647778616d5f
 528:	725f0073          	0x725f0073
 52c:	6565                	lui	a0,0x19
 52e:	746e                	flw	fs0,248(sp)
 530:	7300                	flw	fs0,32(a4)
        v[(d-d2)] = u*r_d;
 532:	6174                	flw	fa3,68(a0)
 534:	5f72                	lw	t5,60(sp)
 536:	756d                	lui	a0,0xffffb
 538:	746c                	flw	fa1,108(s0)
 53a:	5f00                	lw	s0,56(a4)
 53c:	64656573          	csrrsi	a0,0x646,10
        for (i = 0; i < size_N; ++i){
 540:	7200                	flw	fs0,32(a2)
 542:	5f69                	li	t5,-6
 544:	0032                	c.slli	zero,0xc
 546:	5f5f 6f63 6e75      	0x6e756f635f5f
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 54c:	0074                	addi	a3,sp,12
 54e:	5f5f 6176 756c      	0x756c61765f5f
 554:	0065                	c.nop	25
        for (i = 0; i < size_N; ++i){
 556:	735f 6565 006b      	0x6b6565735f
 55c:	6c5f 3436 5f61      	0x5f6134366c5f
        for (i = 0; i < size_N; ++i){
 562:	7562                	flw	fa0,56(sp)
 564:	0066                	c.slli	zero,0x19
 566:	665f 6f70 5f73      	0x5f736f70665f
        for (i = 0; i < size_N; ++i){
 56c:	0074                	addi	a3,sp,12
 56e:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
        for(i = 0; i < size_N; ++i){
 574:	6e69                	lui	t3,0x1a
        for (i = size_N-1; i >= 0; i = i-1){
 576:	7000                	flw	fs0,32(s0)
 578:	6275                	lui	tp,0x1d
 57a:	696c                	flw	fa1,84(a0)
 57c:	656b5f63          	bge	s6,s6,bda <generate_keys+0x2c2>
 580:	0079                	c.nop	30
 582:	735f 7274 6f74      	0x6f747274735f
            v[i] = v[i] % mod;
 588:	616c5f6b          	0x616c5f6b
        for (i = 0; i < size_N; ++i){
 58c:	5f007473          	csrrci	s0,0x5f0,0
            v[i] = v[i] % mod;
 590:	6e66                	flw	ft8,88(sp)
 592:	7974                	flw	fa3,116(a0)
 594:	6570                	flw	fa2,76(a0)
        for (i = 0; i < size_N; ++i){
 596:	65730073          	0x65730073
                product[i] = product[i] + mod;
 59a:	74657263          	bgeu	a0,t1,cde <ntru_deceypt+0x3c>
            while (product[i] < 0) {
 59e:	6b5f 7965 665f      	0x665f79656b5f
            product[i] = product[i] % mod;
 5a4:	0070                	addi	a2,sp,12
        for (i = 0; i < size_N; ++i){
 5a6:	615f 6464 5f00      	0x5f006464615f
            product[i] = product[i] % mod;
 5ac:	555f 6f4c 676e      	0x676e6f4c555f
            num_temp[i] = num_temp[i] - product[i];
 5b2:	7200                	flw	fs0,32(a2)
 5b4:	5f69                	li	t5,-6
 5b6:	0031                	c.nop	12
 5b8:	675f 7465 6164      	0x61647465675f
 5be:	6574                	flw	fa3,76(a0)
 5c0:	655f 7272 5f00      	0x5f007272655f
                num_temp[i] = num_temp[i] + mod;
 5c6:	626f6c67          	0x626f6c67
            while (num_temp[i] < 0){
 5ca:	6c61                	lui	s8,0x18
 5cc:	695f 706d 7275      	0x7275706d695f
            num_temp[i] = num_temp[i] % mod;
 5d2:	5f65                	li	t5,-7
        for (i = 0; i < size_N; ++i){
 5d4:	7470                	flw	fa2,108(s0)
 5d6:	0072                	c.slli	zero,0x1c
            num_temp[i] = num_temp[i] % mod;
 5d8:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
        for (i = 0; i < size_N; ++i){
 5dc:	20373143          	fmadd.s	ft2,fa4,ft3,ft4,rup
            q[i] = q[i] + v[i];
 5e0:	2e39                	jal	8fe <ext_euclid+0x2ca>
 5e2:	2e32                	fld	ft8,264(sp)
 5e4:	2030                	fld	fa2,64(s0)
 5e6:	6d2d                	lui	s10,0xb
        for(i = 0; i < size_N; ++i){
 5e8:	7261                	lui	tp,0xffff8
 5ea:	723d6863          	bltu	s10,gp,d1a <ntru_deceypt+0x78>
            q[i] = q[i] % mod;
 5ee:	3376                	fld	ft6,376(sp)
 5f0:	6932                	flw	fs2,12(sp)
 5f2:	636d                	lui	t1,0x1b
 5f4:	2d20                	fld	fs0,88(a0)
        for(i = 0; i < size_N; ++i){
 5f6:	616d                	addi	sp,sp,240
            if( num_temp[i] != 0 )
 5f8:	6962                	flw	fs2,24(sp)
        for (i = size_N-1; i >= 0; i = i-1){
 5fa:	693d                	lui	s2,0xf
 5fc:	706c                	flw	fa1,100(s0)
            v[i] = 0;
 5fe:	2d203233          	0x2d203233
 602:	636d                	lui	t1,0x1b
 604:	6f6d                	lui	t5,0x1b
 606:	6564                	flw	fs1,76(a0)
        for (i = 0; i < size_N; ++i){
 608:	3d6c                	fld	fa1,248(a0)
 60a:	656d                	lui	a0,0x1b
 60c:	6164                	flw	fs1,68(a0)
 60e:	796e                	flw	fs2,248(sp)
        result[i] = q[i];
 610:	2d20                	fld	fs0,88(a0)
 612:	746d                	lui	s0,0xffffb
 614:	6e75                	lui	t3,0x1d
 616:	3d65                	jal	4ce <polydiv+0xec>
 618:	6f72                	flw	ft10,28(sp)
 61a:	74656b63          	bltu	a0,t1,d70 <reset_handler+0x2>
 61e:	2d20                	fld	fs0,88(a0)
    for(i = 0; i < size_N; ++i){
 620:	4f2d2067          	0x4f2d2067
        result[i] = num_temp[i-size_N];
 624:	662d2073          	csrs	0x662,s10
 628:	6976                	flw	fs2,92(sp)
 62a:	69626973          	csrrsi	s2,0x696,4
    for(i = size_N; i < (2*size_N); ++i){
 62e:	696c                	flw	fa1,84(a0)
 630:	7974                	flw	fa3,116(a0)
 632:	683d                	lui	a6,0xf
    int ri_2[size]; // MX-ring poly, a
 634:	6469                	lui	s0,0x1a
 636:	6564                	flw	fs1,76(a0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 638:	006e                	c.slli	zero,0x1b
    int ri_2[size]; // MX-ring poly, a
 63a:	755f 756e 6573      	0x6573756e755f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 640:	5f64                	lw	s1,124(a4)
 642:	6172                	flw	ft2,28(sp)
 644:	646e                	flw	fs0,216(sp)
 646:	6c00                	flw	fs0,24(s0)
 648:	6e69                	lui	t3,0x1a
 64a:	0065                	c.nop	25
 64c:	775f 7364 5f00      	0x5f007364775f
 652:	745f 5f6d 6477      	0x64775f6d745f
 658:	7961                	lui	s2,0xffff8
    int ri_2[size]; // MX-ring poly, a
 65a:	5f00                	lw	s0,56(a4)
 65c:	65756c67          	0x65756c67
    int ri_1[size]; // f-random poly, f[N] = 0, b
 660:	6e00                	flw	fs0,24(a2)
 662:	7274                	flw	fa3,100(a2)
 664:	5f75                	li	t5,-3
    int ri[size];
 666:	6e65                	lui	t3,0x19
 668:	70727963          	bgeu	tp,t2,d7a <reset_handler+0xc>
    int ti_1[size]; // ti_1[0] = 1
 66c:	0074                	addi	a3,sp,12
 66e:	735f 6973 657a      	0x657a6973735f
    int ti[size];
 674:	745f 5f00 6c66      	0x6c665f00745f
    int qi_1[size];
 67a:	6761                	lui	a4,0x18
 67c:	64003273          	csrrc	tp,0x640,zero
    int temp[size];
 680:	6e65                	lui	t3,0x19
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 682:	6d75                	lui	s10,0x1d
 684:	5f00                	lw	s0,56(a4)
    int ri_2[size]; // MX-ring poly, a
 686:	5f676973          	csrrsi	s2,0x5f6,14
    int temp[size];
 68a:	7566                	flw	fa0,120(sp)
    for (i = 0; i < size; ++i) {
 68c:	636e                	flw	ft6,216(sp)
 68e:	5f00                	lw	s0,56(a4)
        ti_2[i] = 0;
 690:	626e                	flw	ft4,216(sp)
 692:	6675                	lui	a2,0x1d
 694:	5f00                	lw	s0,56(a4)
 696:	6e75                	lui	t3,0x1d
    for (i = 0; i < size; ++i) {
 698:	7375                	lui	t1,0xffffd
 69a:	6465                	lui	s0,0x19
    ti_1[0] = 1;
 69c:	7000                	flw	fs0,32(s0)
 69e:	52796c6f          	jal	s8,973c4 <_stack_start+0x873c4>
        for (i = N + 1; i < (2 * N + 2); ++i) {
 6a2:	7300                	flw	fs0,32(a4)
 6a4:	7a69                	lui	s4,0xffffa
 6a6:	5f65                	li	t5,-7
 6a8:	0044                	addi	s1,sp,4
        for (i = 0; i < N + 1; ++i) {
 6aa:	5f5f 6d74 695f      	0x695f6d745f5f
        ri_2[i] = polyR[i];
 6b0:	74736473          	csrrsi	s0,0x747,6
 6b4:	5f00                	lw	s0,56(a4)
 6b6:	6f6c                	flw	fa1,92(a4)
 6b8:	746c6163          	bltu	s8,t1,dfa <memcpy+0x1a>
 6bc:	6d69                	lui	s10,0x1a
 6be:	5f65                	li	t5,-7
        ri_1[i] = polyf[i];
 6c0:	7562                	flw	fa0,56(sp)
 6c2:	0066                	c.slli	zero,0x19
 6c4:	635f 6f6c 6573      	0x65736f6c635f
 6ca:	5f00                	lw	s0,56(a4)
 6cc:	3472                	fld	fs0,312(sp)
 6ce:	0038                	addi	a4,sp,8
        ti_2[i] = 0;
 6d0:	6d5f 7462 776f      	0x776f74626d5f
 6d6:	74735f63          	bge	t1,t2,e34 <memcpy+0x54>
        ti_1[i] = 0;
 6da:	7461                	lui	s0,0xffff8
 6dc:	0065                	c.nop	25
 6de:	705f 7335 6d00      	0x6d007335705f
                ri_2[i] = ri_2[i] + mod;
 6e4:	6961                	lui	s2,0x18
 6e6:	006e                	c.slli	zero,0x1b
            while (ri_2[i] < 0) {
 6e8:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
            ri_2[i] = ri_2[i] % mod;
 6ee:	6164                	flw	fs1,68(a0)
 6f0:	0079                	c.nop	30
        for (i = 0; i < N + 1; ++i) {
 6f2:	657a6973          	csrrsi	s2,0x657,20
 6f6:	625f 6300 7472      	0x74726300625f
 6fc:	2e30                	fld	fa2,88(a2)
 6fe:	4e470053          	0x4e470053
 702:	2055                	jal	7a6 <ext_euclid+0x172>
        for (i = 0; i < N + 1; ++i) {
 704:	5341                	li	t1,-16
 706:	3220                	fld	fs0,96(a2)
 708:	332e                	fld	ft6,232(sp)
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
 70a:	0032                	c.slli	zero,0xc

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <ext_euclid+0x4c>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	0040                	addi	s0,sp,4
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	01e6                	slli	gp,gp,0x19
  1e:	0000                	unimp
  20:	0e56                	slli	t3,t3,0x15
  22:	4220                	lw	s0,64(a2)
  24:	0289                	addi	t0,t0,2
  26:	8856                	mv	a6,s5
  28:	9201                	srli	a2,a2,0x20
  2a:	94049303          	lh	t1,-1728(s1)
  2e:	9705                	srai	a4,a4,0x21
  30:	9508                	0x9508
  32:	9606                	add	a2,a2,ra
  34:	080c4207          	flq	ft4,128(s8) # fffe0080 <_stack_start+0xfffd0080>
  38:	0200                	addi	s0,sp,256
  3a:	0af8                	addi	a4,sp,348
  3c:	020c                	addi	a1,sp,256
  3e:	4220                	lw	s0,64(a2)
  40:	42c8                	lw	a0,4(a3)
  42:	42c9                	li	t0,18
  44:	42d2                	lw	t0,20(sp)
  46:	42d442d3          	0x42d442d3
  4a:	42d5                	li	t0,21
  4c:	42d6                	lw	t0,84(sp)
  4e:	000e4ad7          	0xe4ad7
  52:	0b42                	slli	s6,s6,0x10
  54:	003c                	addi	a5,sp,8
  56:	0000                	unimp
  58:	0000                	unimp
  5a:	0000                	unimp
  5c:	0272                	slli	tp,tp,0x1c
  5e:	0000                	unimp
  60:	0170                	addi	a2,sp,140
  62:	0000                	unimp
  64:	0e56                	slli	t3,t3,0x15
  66:	4e20                	lw	s0,88(a2)
  68:	0188                	addi	a0,sp,192
  6a:	0289                	addi	t0,t0,2
  6c:	0392                	slli	t2,t2,0x4
  6e:	07960493          	addi	s1,a2,121 # 1d079 <_stack_start+0xd079>
  72:	0594                	addi	a3,sp,704
  74:	0695                	addi	a3,a3,5
  76:	0c42                	slli	s8,s8,0x10
  78:	0008                	0x8
  7a:	e602                	fsw	ft0,12(sp)
  jal x0, default_exc_handler
  7c:	0c0a                	slli	s8,s8,0x2
  7e:	2002                	fld	ft0,0(sp)
  jal x0, reset_handler
  80:	c842                	sw	a6,16(sp)
  82:	c942                	sw	a6,144(sp)
  jal x0, default_exc_handler
  84:	d242                	sw	a6,36(sp)
  86:	d342                	sw	a6,164(sp)
  jal x0, default_exc_handler
  88:	d442                	sw	a6,40(sp)
  8a:	d542                	sw	a6,168(sp)
    int line[size_b][size_a + size_b];
  8c:	d642                	sw	a6,44(sp)
  8e:	0e4a                	slli	t3,t3,0x12
  90:	4200                	lw	s0,0(a2)
  92:	0054000b          	0x54000b
  96:	0000                	unimp
  98:	0000                	unimp
  9a:	0000                	unimp
  9c:	03e2                	slli	t2,t2,0x18
  9e:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  a0:	0252                	slli	tp,tp,0x14
  a2:	0000                	unimp
  a4:	0e46                	slli	t3,t3,0x11
    int pola[size_a];
  a6:	5e40                	lw	s0,60(a2)
  a8:	0288                	addi	a0,sp,320
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  aa:	0389                	addi	t2,t2,2
  ac:	0492                	slli	s1,s1,0x4
  ae:	06940593          	addi	a1,s0,105 # ffff8069 <_stack_start+0xfffe8069>
  b2:	0795                	addi	a5,a5,5
    int line[size_b][size_a + size_b];
  b4:	0a980997          	auipc	s3,0xa980
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  b8:	0b99                	addi	s7,s7,6
  ba:	0c9a                	slli	s9,s9,0x6
    int line[size_b][size_a + size_b];
  bc:	01810d9b          	0x1810d9b
    int pola[size_a];
  c0:	0896                	slli	a7,a7,0x5
  c2:	0c42                	slli	s8,s8,0x10
    int line[size_b][size_a + size_b];
  c4:	0008                	0x8
  c6:	0a010403          	lb	s0,160(sp)
    int pola[size_a];
  ca:	020c                	addi	a1,sp,256
  cc:	4240                	lw	s0,4(a2)
    int polb[size_b];
  ce:	42c1                	li	t0,16
  d0:	42c8                	lw	a0,4(a3)
  d2:	42c9                	li	t0,18
    int pola[size_a];
  d4:	42d2                	lw	t0,20(sp)
    int polb[size_b];
  d6:	42d442d3          	0x42d442d3
    int line[size_b][size_a + size_b];
  da:	42d5                	li	t0,21
  dc:	42d6                	lw	t0,84(sp)
    int pola[size_a];
  de:	42d842d7          	0x42d842d7
    int polb[size_b];
  e2:	42d9                	li	t0,22
            line[i][j] = 0;
  e4:	42da                	lw	t0,148(sp)
  e6:	000e4adb          	0xe4adb
    for (i = 0; i < size_b; ++i){
  ea:	0b42                	slli	s6,s6,0x10
  ec:	0054                	addi	a3,sp,4
            product[j] = 0;
  ee:	0000                	unimp
  f0:	0000                	unimp
  f2:	0000                	unimp
  f4:	0634                	addi	a3,sp,776
    for (i = 0; i < size_b; ++i){
  f6:	0000                	unimp
  f8:	02e4                	addi	s1,sp,332
  fa:	0000                	unimp
    for (i = 0; i < size_a; ++i){
  fc:	0e46                	slli	t3,t3,0x11
  fe:	5e50                	lw	a2,60(a2)
 100:	0288                	addi	a0,sp,320
 102:	0389                	addi	t2,t2,2
    for (i = 0; i < size_b; ++i){
 104:	0492                	slli	s1,s1,0x4
 106:	06940593          	addi	a1,s0,105
    if(star_mult == 1){
 10a:	0795                	addi	a5,a5,5
 10c:	0896                	slli	a7,a7,0x5
 10e:	0b990997          	auipc	s3,0xb990
 112:	0c9a                	slli	s9,s9,0x6
 114:	01810d9b          	0x1810d9b
 118:	0a98                	addi	a4,sp,336
        for (j = size_b -1; j >= 0; j = j-1){
 11a:	0c42                	slli	s8,s8,0x10
 11c:	0008                	0x8
            for (k = size_a-1; k >= 0; k = k-1 ){
 11e:	0a014203          	lbu	tp,160(sp)
            product[j] = 0;
 122:	020c                	addi	a1,sp,256
 124:	4250                	lw	a2,4(a2)
 126:	42c1                	li	t0,16
            line[i][j] = 0;
 128:	42c8                	lw	a0,4(a3)
 12a:	42c9                	li	t0,18
            product[j] = 0;
 12c:	42d2                	lw	t0,20(sp)
 12e:	42d442d3          	0x42d442d3
        for(j = 0; j < size_a + size_b -1; ++j){
 132:	42d5                	li	t0,21
 134:	42d6                	lw	t0,84(sp)
 136:	42d842d7          	0x42d842d7
    for (i = 0; i < size_b; ++i){
 13a:	42d9                	li	t0,22
 13c:	42da                	lw	t0,148(sp)
 13e:	000e4adb          	0xe4adb
        for(j = 0; j < size_a + size_b -1; ++j){
 142:	0b42                	slli	s6,s6,0x10
        pola[i] = a[i];
 144:	0054                	addi	a3,sp,4
 146:	0000                	unimp
 148:	0000                	unimp
 14a:	0000                	unimp
 14c:	0918                	addi	a4,sp,144
            pola[i] = pola[i] + mod;
 14e:	0000                	unimp
 150:	02f4                	addi	a3,sp,332
        while (pola[i] < 0){
 152:	0000                	unimp
 154:	0e42                	slli	t3,t3,0x10
 156:	03f0                	addi	a2,sp,460
 158:	814c                	0x814c
        pola[i] = pola[i] % mod;
 15a:	8801                	andi	s0,s0,0
 15c:	8902                	jr	s2
    for (i = 0; i < size_a; ++i){
 15e:	080c4203          	lbu	tp,128(s8)
        pola[i] = pola[i] % mod;
 162:	6400                	flw	fs0,8(s0)
 164:	0492                	slli	s1,s1,0x4
    for (i = 0; i < size_a; ++i){
 166:	06940593          	addi	a1,s0,105
            pola[i] = pola[i] + mod;
 16a:	0795                	addi	a5,a5,5
        polb[i] = b[i];
 16c:	0896                	slli	a7,a7,0x5
 16e:	0c9a0997          	auipc	s3,0xc9a0
 172:	0a98                	addi	a4,sp,336
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
 174:	0b99                	addi	s7,s7,6
        while (polb[i] < 0){
 176:	0a01dc03          	lhu	s8,160(gp)
 17a:	020c                	addi	a1,sp,256
        polb[i] = polb[i] % mod;
 17c:	03f0                	addi	a2,sp,460
 17e:	c144                	sw	s1,4(a0)
    for (i = 0; i < size_b; ++i){
 180:	c844                	sw	s1,20(s0)
 182:	c944                	sw	s1,20(a0)
        polb[i] = polb[i] % mod;
 184:	d244                	sw	s1,36(a2)
 186:	d344                	sw	s1,36(a4)
    for (i = 0; i < size_b; ++i){
 188:	d444                	sw	s1,44(s0)
            polb[i] = polb[i] + mod;                    ////// burayı yaptıktan sonra moda gerek yok
 18a:	d544                	sw	s1,44(a0)
 18c:	d644                	sw	s1,44(a2)
    if(star_mult == 1){
 18e:	d744                	sw	s1,44(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 190:	d844                	sw	s1,52(s0)
 192:	d944                	sw	s1,52(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
 194:	da44                	sw	s1,52(a2)
    for (i = 0; i < size_b; ++i){
 196:	0e4a                	slli	t3,t3,0x12
 198:	4200                	lw	s0,0(a2)
 19a:	0034000b          	0x34000b
 19e:	0000                	unimp
 1a0:	0000                	unimp
 1a2:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
 1a4:	0c0c                	addi	a1,sp,528
 1a6:	0000                	unimp
 1a8:	0096                	slli	ra,ra,0x5
    for(j = 0; j < size_a + size_b -1; ++j){
 1aa:	0000                	unimp
 1ac:	0e42                	slli	t3,t3,0x10
 1ae:	01e0                	addi	s0,sp,204
}
 1b0:	8846                	mv	a6,a7
 1b2:	8902                	jr	s2
 1b4:	5a049203          	lh	tp,1440(s1)
 1b8:	0181                	addi	gp,gp,0
 1ba:	06940593          	addi	a1,s0,105
 1be:	5402                	lw	s0,32(sp)
 1c0:	c10a                	sw	sp,128(sp)
 1c2:	c842                	sw	a6,16(sp)
 1c4:	c942                	sw	a6,144(sp)
 1c6:	d242                	sw	a6,36(sp)
 1c8:	d342                	sw	a6,164(sp)
 1ca:	d442                	sw	a6,40(sp)
 1cc:	0e42                	slli	t3,t3,0x10
 1ce:	4200                	lw	s0,0(a2)
                line[size_b-1-j][k] = pola[k]*polb[j];
 1d0:	0000000b          	0xb
 1d4:	0040                	addi	s0,sp,4
 1d6:	0000                	unimp
 1d8:	0000                	unimp
 1da:	0000                	unimp
 1dc:	0ca2                	slli	s9,s9,0x8
 1de:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 1e0:	00c8                	addi	a0,sp,68
                line[size_b-1-j][k] = pola[k]*polb[j];
 1e2:	0000                	unimp
 1e4:	0e42                	slli	t3,t3,0x10
 1e6:	4430                	lw	a2,72(s0)
 1e8:	0288                	addi	a0,sp,320
            for (k = size_a-1; k >= 0; k = k-1 ){
 1ea:	924e0593          	addi	a1,t3,-1756 # 1c924 <_stack_start+0xc924>
        for (j = size_b -1; j >= 0; j = j-1){
 1ee:	9504                	0x9504
 1f0:	58099707          	0x58099707
 1f4:	0181                	addi	gp,gp,0
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f6:	0389                	addi	t2,t2,2
 1f8:	0694                	addi	a3,sp,832
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 1fa:	0896                	slli	a7,a7,0x5
 1fc:	5202                	lw	tp,32(sp)
 1fe:	c10a                	sw	sp,128(sp)
 200:	c842                	sw	a6,16(sp)
 202:	c942                	sw	a6,144(sp)
 204:	d242                	sw	a6,36(sp)
 206:	d342                	sw	a6,164(sp)
 208:	d442                	sw	a6,40(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 20a:	d542                	sw	a6,168(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 20c:	d642                	sw	a6,44(sp)
 20e:	d742                	sw	a6,172(sp)
 210:	0e42                	slli	t3,t3,0x10
 212:	4200                	lw	s0,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 214:	0000000b          	0xb
        for (j = size_b -1; j >= 0; j = j-1){
 218:	0024                	addi	s1,sp,8
 21a:	0000                	unimp
 21c:	0000                	unimp
 21e:	0000                	unimp
            line[i][j] = line[i][j] % mod;
 220:	0f66                	slli	t5,t5,0x19
        for(j = 0; j < size_a + size_b -1; ++j){
 222:	0000                	unimp
 224:	0128                	addi	a0,sp,136
            line[i][j] = line[i][j] % mod;
 226:	0000                	unimp
 228:	0e44                	addi	s1,sp,788
 22a:	08b0                	addi	a2,sp,88
 22c:	815a                	mv	sp,s6
        for(j = 0; j < size_a + size_b -1; ++j){
 22e:	8801                	andi	s0,s0,0
 230:	8902                	jr	s2
    for (i = 0; i < size_b; ++i){
 232:	0ae60203          	lb	tp,174(a2)
 236:	44c1                	li	s1,16
 238:	44c8                	lw	a0,12(s1)
        for(j = 0; j < size_a + size_b -1; ++j){
 23a:	46c9                	li	a3,18
 23c:	000e                	c.slli	zero,0x3
            product[j] += line[i][j];
 23e:	0b42                	slli	s6,s6,0x10

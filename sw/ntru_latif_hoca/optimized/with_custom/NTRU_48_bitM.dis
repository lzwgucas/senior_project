
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	3ad0006f          	j	c28 <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	3ad0006f          	j	c2c <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	3a50006f          	j	c28 <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	3a10006f          	j	c28 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_add>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
  8c:	06b5750b          	0x6b5750b

    );
    return;


}
  90:	8082                	ret

00000092 <array_add>:
void array_add(int *a1, int *a2, int length) {
int i =0;
    for(i=0;i<(length/3);i++) {
  92:	478d                	li	a5,3
  94:	02f64633          	div	a2,a2,a5
  98:	4831                	li	a6,12
  9a:	4781                	li	a5,0
  9c:	00c7c363          	blt	a5,a2,a2 <array_add+0x10>
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
    }
}
  a0:	8082                	ret
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	03078733          	mul	a4,a5,a6
    asm volatile(
  a6:	00e506b3          	add	a3,a0,a4
  aa:	972e                	add	a4,a4,a1
  ac:	06e6f70b          	0x6e6f70b
    for(i=0;i<(length/3);i++) {
  b0:	0785                	addi	a5,a5,1
  b2:	b7ed                	j	9c <array_add+0xa>

000000b4 <instr_sub>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
  b4:	08b5750b          	0x8b5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
  b8:	8082                	ret

000000ba <array_sub>:
void array_sub(int *a1, int *a2, int length){
int i =0;
    for(i=0;i<(length/3);i++) {
  ba:	478d                	li	a5,3
  bc:	02f64633          	div	a2,a2,a5
  c0:	4831                	li	a6,12
  c2:	4781                	li	a5,0
  c4:	00c7c363          	blt	a5,a2,ca <array_sub+0x10>
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
    }
}
  c8:	8082                	ret
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  ca:	03078733          	mul	a4,a5,a6
    asm volatile(
  ce:	00e506b3          	add	a3,a0,a4
  d2:	972e                	add	a4,a4,a1
  d4:	08e6f70b          	0x8e6f70b
    for(i=0;i<(length/3);i++) {
  d8:	0785                	addi	a5,a5,1
  da:	b7ed                	j	c4 <array_sub+0xa>

000000dc <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
  dc:	0ab5750b          	0xab5750b
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;

}
  e0:	8082                	ret

000000e2 <array_equ>:
void array_equ(int *a1,int *a2,int length) {
int i = 0;
    for(i=0;i<(length/3);i++) {
  e2:	478d                	li	a5,3
  e4:	02f64633          	div	a2,a2,a5
  e8:	4831                	li	a6,12
  ea:	4781                	li	a5,0
  ec:	00c7c363          	blt	a5,a2,f2 <array_equ+0x10>
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
    }
}
  f0:	8082                	ret
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	03078733          	mul	a4,a5,a6
    asm volatile(
  f6:	00e506b3          	add	a3,a0,a4
  fa:	972e                	add	a4,a4,a1
  fc:	0ae6f70b          	0xae6f70b
    for(i=0;i<(length/3);i++) {
 100:	0785                	addi	a5,a5,1
 102:	b7ed                	j	ec <array_equ+0xa>

00000104 <instr_mod>:

void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
 104:	0cb5750b          	0xcb5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(mod)			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
 108:	8082                	ret

0000010a <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    for(i=0;i<(length/3);i++) {
 10a:	478d                	li	a5,3
 10c:	02f64633          	div	a2,a2,a5
    asm volatile(
 110:	46b1                	li	a3,12
    for(i=0;i<(length/3);i++) {
 112:	4781                	li	a5,0
 114:	00c7c363          	blt	a5,a2,11a <array_mod+0x10>
        instr_mod((unsigned int*)&a1[3 * i], (unsigned int)mod);
    }

}
 118:	8082                	ret
    asm volatile(
 11a:	02d78733          	mul	a4,a5,a3
 11e:	972a                	add	a4,a4,a0
 120:	0cb7770b          	0xcb7770b
    for(i=0;i<(length/3);i++) {
 124:	0785                	addi	a5,a5,1
 126:	b7fd                	j	114 <array_mod+0xa>

00000128 <polymult>:

/////////////////////////////////////////////////



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 128:	715d                	addi	sp,sp,-80
 12a:	c0ca                	sw	s2,64(sp)
 12c:	8936                	mv	s2,a3
 12e:	de4e                	sw	s3,60(sp)


    int line[size_b][size_a + size_b];
 130:	96ae                	add	a3,a3,a1
 132:	00291993          	slli	s3,s2,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 136:	d462                	sw	s8,40(sp)
 138:	d266                	sw	s9,36(sp)
    int line[size_b][size_a + size_b];
 13a:	00269c13          	slli	s8,a3,0x2
 13e:	fff68c93          	addi	s9,a3,-1
 142:	033686b3          	mul	a3,a3,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 146:	dc52                	sw	s4,56(sp)
 148:	8a3a                	mv	s4,a4
    int i,j,k;
    int *return_address1;
    int pola[size_a];
 14a:	00259713          	slli	a4,a1,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 14e:	c4a2                	sw	s0,72(sp)
 150:	c2a6                	sw	s1,68(sp)
 152:	da56                	sw	s5,52(sp)
 154:	d85a                	sw	s6,48(sp)
 156:	d65e                	sw	s7,44(sp)
 158:	d06a                	sw	s10,32(sp)
    int line[size_b][size_a + size_b];
 15a:	06bd                	addi	a3,a3,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 15c:	ce6e                	sw	s11,28(sp)
 15e:	c686                	sw	ra,76(sp)
 160:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
 162:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
 164:	073d                	addi	a4,a4,15
 166:	9b41                	andi	a4,a4,-16
    int line[size_b][size_a + size_b];
 168:	40d10133          	sub	sp,sp,a3
 16c:	8b8a                	mv	s7,sp
    int pola[size_a];
 16e:	40e10133          	sub	sp,sp,a4
    int polb[size_b];
 172:	00f98713          	addi	a4,s3,15
 176:	9b41                	andi	a4,a4,-16
    int pola[size_a];
 178:	8d8a                	mv	s11,sp
    int polb[size_b];
 17a:	40e10133          	sub	sp,sp,a4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 17e:	8aae                	mv	s5,a1
    int pola[size_a];
 180:	fff58693          	addi	a3,a1,-1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 184:	8832                	mv	a6,a2
    int line[size_b][size_a + size_b];
 186:	fff90b13          	addi	s6,s2,-1
    int polb[size_b];
 18a:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
 18c:	002c5d13          	srli	s10,s8,0x2
 190:	875e                	mv	a4,s7
    for (i = 0; i < size_b; ++i){
 192:	88de                	mv	a7,s7
 194:	4581                	li	a1,0
            product[j] = 0;
 196:	00001e97          	auipc	t4,0x1
 19a:	f16e8e93          	addi	t4,t4,-234 # 10ac <_edata>
    for (i = 0; i < size_b; ++i){
 19e:	0725cc63          	blt	a1,s2,216 <polymult+0xee>
//        while (pola[i] < 0){
//            pola[i] = pola[i] + mod;
//        }
//        pola[i] = pola[i] % mod;
//    }
    array_equ(pola,a,size_a);
 1a2:	85aa                	mv	a1,a0
 1a4:	8656                	mv	a2,s5
 1a6:	856e                	mv	a0,s11
 1a8:	faf42823          	sw	a5,-80(s0)
 1ac:	fae42c23          	sw	a4,-72(s0)
 1b0:	fad42e23          	sw	a3,-68(s0)
 1b4:	fb042a23          	sw	a6,-76(s0)
 1b8:	372d                	jal	e2 <array_equ>
    array_mod(pola,mod,size_a);
 1ba:	8656                	mv	a2,s5
 1bc:	85d2                	mv	a1,s4
 1be:	856e                	mv	a0,s11
 1c0:	37a9                	jal	10a <array_mod>
//        while (polb[i] < 0){
//            polb[i] = polb[i] + mod;
//        }
//        polb[i] = polb[i] % mod;
//    }
    array_equ(polb,b,size_b);
 1c2:	fb442803          	lw	a6,-76(s0)
 1c6:	8526                	mv	a0,s1
 1c8:	864a                	mv	a2,s2
 1ca:	85c2                	mv	a1,a6
 1cc:	3f19                	jal	e2 <array_equ>
    array_mod(polb,mod,size_b);
 1ce:	864a                	mv	a2,s2
 1d0:	8526                	mv	a0,s1
 1d2:	85d2                	mv	a1,s4
 1d4:	3f1d                	jal	10a <array_mod>


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
 1d6:	fb042783          	lw	a5,-80(s0)
 1da:	4605                	li	a2,1
 1dc:	fbc42683          	lw	a3,-68(s0)
 1e0:	fb842703          	lw	a4,-72(s0)
 1e4:	94ce                	add	s1,s1,s3
 1e6:	02c78b63          	beq	a5,a2,21c <polymult+0xf4>
 1ea:	19f1                	addi	s3,s3,-4
 1ec:	ffcc0593          	addi	a1,s8,-4
 1f0:	99de                	add	s3,s3,s7
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
 1f2:	020b4863          	bltz	s6,222 <polymult+0xfa>
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f6:	87b6                	mv	a5,a3
 1f8:	a85d                	j	2ae <polymult+0x186>
            product[j] = 0;
 1fa:	00261e13          	slli	t3,a2,0x2
 1fe:	9e76                	add	t3,t3,t4
            line[i][j] = 0;
 200:	00032023          	sw	zero,0(t1)
            product[j] = 0;
 204:	000e2023          	sw	zero,0(t3)
        for(j = 0; j < size_a + size_b -1; ++j){
 208:	0605                	addi	a2,a2,1
 20a:	0311                	addi	t1,t1,4
 20c:	ff9647e3          	blt	a2,s9,1fa <polymult+0xd2>
    for (i = 0; i < size_b; ++i){
 210:	0585                	addi	a1,a1,1
 212:	98e2                	add	a7,a7,s8
 214:	b769                	j	19e <polymult+0x76>
 216:	8346                	mv	t1,a7
        for(j = 0; j < size_a + size_b -1; ++j){
 218:	4601                	li	a2,0
 21a:	bfcd                	j	20c <polymult+0xe4>
    if(star_mult == 1){
 21c:	85de                	mv	a1,s7
        for (j = size_b -1; j >= 0; j = j-1){
 21e:	060b5a63          	bgez	s6,292 <polymult+0x16a>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
 222:	4681                	li	a3,0
    for (i = 0; i < size_b; ++i){
 224:	0b26c763          	blt	a3,s2,2d2 <polymult+0x1aa>
 228:	00001697          	auipc	a3,0x1
 22c:	e8468693          	addi	a3,a3,-380 # 10ac <_edata>
            line[i][j] = line[i][j] % mod;
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
 230:	4701                	li	a4,0
 232:	0d974263          	blt	a4,s9,2f6 <polymult+0x1ce>
//    //mod calculations
//    for(j = 0; j < size_a + size_b -1; ++j){
//        product[j] = product[j] % mod;
//    }

    array_mod(product,mod,(size_a+size_b-1));
 236:	8666                	mv	a2,s9
 238:	85d2                	mv	a1,s4
 23a:	00001517          	auipc	a0,0x1
 23e:	e7250513          	addi	a0,a0,-398 # 10ac <_edata>
 242:	35e1                	jal	10a <array_mod>

    return_address1 = &product[0];

    return return_address1;
}
 244:	fb040113          	addi	sp,s0,-80
 248:	40b6                	lw	ra,76(sp)
 24a:	4426                	lw	s0,72(sp)
 24c:	4496                	lw	s1,68(sp)
 24e:	4906                	lw	s2,64(sp)
 250:	59f2                	lw	s3,60(sp)
 252:	5a62                	lw	s4,56(sp)
 254:	5ad2                	lw	s5,52(sp)
 256:	5b42                	lw	s6,48(sp)
 258:	5bb2                	lw	s7,44(sp)
 25a:	5c22                	lw	s8,40(sp)
 25c:	5c92                	lw	s9,36(sp)
 25e:	5d02                	lw	s10,32(sp)
 260:	4df2                	lw	s11,28(sp)
 262:	00001517          	auipc	a0,0x1
 266:	e4a50513          	addi	a0,a0,-438 # 10ac <_edata>
 26a:	6161                	addi	sp,sp,80
 26c:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
 26e:	00279613          	slli	a2,a5,0x2
 272:	00c58533          	add	a0,a1,a2
 276:	966e                	add	a2,a2,s11
 278:	4210                	lw	a2,0(a2)
 27a:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
 27e:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
 280:	03060633          	mul	a2,a2,a6
 284:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 286:	fe07d4e3          	bgez	a5,26e <polymult+0x146>
        for (j = size_b -1; j >= 0; j = j-1){
 28a:	1b7d                	addi	s6,s6,-1
 28c:	14f1                	addi	s1,s1,-4
 28e:	95e2                	add	a1,a1,s8
 290:	b779                	j	21e <polymult+0xf6>
            for (k = size_a-1; k >= 0; k = k-1 ){
 292:	87b6                	mv	a5,a3
 294:	bfcd                	j	286 <polymult+0x15e>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 296:	00279613          	slli	a2,a5,0x2
 29a:	00c98533          	add	a0,s3,a2
 29e:	966e                	add	a2,a2,s11
 2a0:	4210                	lw	a2,0(a2)
 2a2:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
 2a6:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 2a8:	03060633          	mul	a2,a2,a6
 2ac:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 2ae:	fe07d4e3          	bgez	a5,296 <polymult+0x16e>
        for (j = size_b -1; j >= 0; j = j-1){
 2b2:	1b7d                	addi	s6,s6,-1
 2b4:	14f1                	addi	s1,s1,-4
 2b6:	99ae                	add	s3,s3,a1
 2b8:	bf2d                	j	1f2 <polymult+0xca>
            line[i][j] = line[i][j] % mod;
 2ba:	438c                	lw	a1,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
 2bc:	0605                	addi	a2,a2,1
 2be:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
 2c0:	0345e5b3          	rem	a1,a1,s4
 2c4:	feb7ae23          	sw	a1,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
 2c8:	ff9649e3          	blt	a2,s9,2ba <polymult+0x192>
    for (i = 0; i < size_b; ++i){
 2cc:	0685                	addi	a3,a3,1
 2ce:	9762                	add	a4,a4,s8
 2d0:	bf91                	j	224 <polymult+0xfc>
 2d2:	87ba                	mv	a5,a4
        for(j = 0; j < size_a + size_b -1; ++j){
 2d4:	4601                	li	a2,0
 2d6:	bfcd                	j	2c8 <polymult+0x1a0>
            product[j] += line[i][j];
 2d8:	03a607b3          	mul	a5,a2,s10
 2dc:	428c                	lw	a1,0(a3)
        for(i = 0; i < size_b; ++i){
 2de:	0605                	addi	a2,a2,1
            product[j] += line[i][j];
 2e0:	97ba                	add	a5,a5,a4
 2e2:	078a                	slli	a5,a5,0x2
 2e4:	97de                	add	a5,a5,s7
 2e6:	439c                	lw	a5,0(a5)
 2e8:	97ae                	add	a5,a5,a1
 2ea:	c29c                	sw	a5,0(a3)
        for(i = 0; i < size_b; ++i){
 2ec:	ff2646e3          	blt	a2,s2,2d8 <polymult+0x1b0>
    for(j = 0; j < size_a + size_b -1; ++j){
 2f0:	0705                	addi	a4,a4,1
 2f2:	0691                	addi	a3,a3,4
 2f4:	bf3d                	j	232 <polymult+0x10a>
        for(i = 0; i < size_b; ++i){
 2f6:	4601                	li	a2,0
 2f8:	bfd5                	j	2ec <polymult+0x1c4>

000002fa <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2fa:	715d                	addi	sp,sp,-80

    int line[size_b][size_a + size_b];
 2fc:	00d587b3          	add	a5,a1,a3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 300:	d85a                	sw	s6,48(sp)
 302:	00269b13          	slli	s6,a3,0x2
 306:	de4e                	sw	s3,60(sp)
 308:	d65e                	sw	s7,44(sp)
    int line[size_b][size_a + size_b];
 30a:	fff78993          	addi	s3,a5,-1
 30e:	00279b93          	slli	s7,a5,0x2
 312:	036787b3          	mul	a5,a5,s6
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 316:	c4a2                	sw	s0,72(sp)
 318:	c2a6                	sw	s1,68(sp)
 31a:	c0ca                	sw	s2,64(sp)
 31c:	dc52                	sw	s4,56(sp)
 31e:	da56                	sw	s5,52(sp)
 320:	d462                	sw	s8,40(sp)
 322:	d266                	sw	s9,36(sp)
 324:	d06a                	sw	s10,32(sp)
 326:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
 328:	07bd                	addi	a5,a5,15
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 32a:	c686                	sw	ra,76(sp)
 32c:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
 32e:	9bc1                	andi	a5,a5,-16
 330:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
 334:	00259793          	slli	a5,a1,0x2
 338:	07bd                	addi	a5,a5,15
 33a:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
 33c:	890a                	mv	s2,sp
    int pola[size_a];
 33e:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
 342:	00fb0793          	addi	a5,s6,15
 346:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
 348:	8d0a                	mv	s10,sp
    int polb[size_b];
 34a:	40f10133          	sub	sp,sp,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 34e:	8a36                	mv	s4,a3
 350:	8dba                	mv	s11,a4
    int line[size_b][size_a + size_b];
 352:	fff68a93          	addi	s5,a3,-1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 356:	8832                	mv	a6,a2
    int pola[size_a];
 358:	fff58c13          	addi	s8,a1,-1
    int polb[size_b];
 35c:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
 35e:	8cca                	mv	s9,s2
 360:	86ca                	mv	a3,s2
 362:	4701                	li	a4,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
 364:	00001317          	auipc	t1,0x1
 368:	fa030313          	addi	t1,t1,-96 # 1304 <product2>
    for (i = 0; i < size_b; ++i){
 36c:	05474963          	blt	a4,s4,3be <polymult2+0xc4>

//    for(i = 0; i < size_a; ++i){
//        pola[i] = a[i];
//    }

    array_equ(pola,a,size_a);
 370:	862e                	mv	a2,a1
 372:	85aa                	mv	a1,a0
 374:	856a                	mv	a0,s10
 376:	fb042e23          	sw	a6,-68(s0)
 37a:	33a5                	jal	e2 <array_equ>

//    for(i = 0; i < size_b; ++i){
//        polb[i] = b[i];
//    }

    array_equ(polb,b,size_b);
 37c:	fbc42803          	lw	a6,-68(s0)
 380:	8526                	mv	a0,s1
 382:	8652                	mv	a2,s4
 384:	85c2                	mv	a1,a6
 386:	3bb1                	jal	e2 <array_equ>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
 388:	4785                	li	a5,1
 38a:	01648533          	add	a0,s1,s6
 38e:	04fd8c63          	beq	s11,a5,3e6 <polymult2+0xec>
 392:	1b71                	addi	s6,s6,-4
 394:	ffcb8693          	addi	a3,s7,-4
 398:	995a                	add	s2,s2,s6
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
 39a:	040ac863          	bltz	s5,3ea <polymult2+0xf0>
            for (k = size_a-1; k >= 0; k = k-1 ){
 39e:	87e2                	mv	a5,s8
 3a0:	a879                	j	43e <polymult2+0x144>
            product2[j] = 0;
 3a2:	00279893          	slli	a7,a5,0x2
 3a6:	989a                	add	a7,a7,t1
            line[i][j] = 0;
 3a8:	00062023          	sw	zero,0(a2)
            product2[j] = 0;
 3ac:	0008a023          	sw	zero,0(a7)
        for(j = 0; j < size_a + size_b -1; ++j){
 3b0:	0785                	addi	a5,a5,1
 3b2:	0611                	addi	a2,a2,4
 3b4:	ff37c7e3          	blt	a5,s3,3a2 <polymult2+0xa8>
    for (i = 0; i < size_b; ++i){
 3b8:	0705                	addi	a4,a4,1
 3ba:	96de                	add	a3,a3,s7
 3bc:	bf45                	j	36c <polymult2+0x72>
 3be:	8636                	mv	a2,a3
        for(j = 0; j < size_a + size_b -1; ++j){
 3c0:	4781                	li	a5,0
 3c2:	bfcd                	j	3b4 <polymult2+0xba>
                line[size_b-1-j][k] = pola[k]*polb[j];
 3c4:	00279713          	slli	a4,a5,0x2
 3c8:	00e906b3          	add	a3,s2,a4
 3cc:	976a                	add	a4,a4,s10
 3ce:	4318                	lw	a4,0(a4)
 3d0:	ffc52603          	lw	a2,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d4:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
 3d6:	02c70733          	mul	a4,a4,a2
 3da:	c298                	sw	a4,0(a3)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3dc:	fe07d4e3          	bgez	a5,3c4 <polymult2+0xca>
        for (j = size_b -1; j >= 0; j = j-1){
 3e0:	1afd                	addi	s5,s5,-1
 3e2:	1571                	addi	a0,a0,-4
 3e4:	995e                	add	s2,s2,s7
 3e6:	020ade63          	bgez	s5,422 <polymult2+0x128>
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ea:	4481                	li	s1,0

    // construct product
    for(i=0;i<size_b;++i){
        //for(j=0;j<size_a+size_b-1;++j){
         //   product2[j] += line[i][j];
        array_add(product2,line[i],size_a+size_b-1);
 3ec:	00001917          	auipc	s2,0x1
 3f0:	f1890913          	addi	s2,s2,-232 # 1304 <product2>
    for(i=0;i<size_b;++i){
 3f4:	0544cb63          	blt	s1,s4,44a <polymult2+0x150>
    }

    return_address2 = &product2[0];

    return return_address2;
}
 3f8:	fb040113          	addi	sp,s0,-80
 3fc:	40b6                	lw	ra,76(sp)
 3fe:	4426                	lw	s0,72(sp)
 400:	4496                	lw	s1,68(sp)
 402:	4906                	lw	s2,64(sp)
 404:	59f2                	lw	s3,60(sp)
 406:	5a62                	lw	s4,56(sp)
 408:	5ad2                	lw	s5,52(sp)
 40a:	5b42                	lw	s6,48(sp)
 40c:	5bb2                	lw	s7,44(sp)
 40e:	5c22                	lw	s8,40(sp)
 410:	5c92                	lw	s9,36(sp)
 412:	5d02                	lw	s10,32(sp)
 414:	4df2                	lw	s11,28(sp)
 416:	00001517          	auipc	a0,0x1
 41a:	eee50513          	addi	a0,a0,-274 # 1304 <product2>
 41e:	6161                	addi	sp,sp,80
 420:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
 422:	87e2                	mv	a5,s8
 424:	bf65                	j	3dc <polymult2+0xe2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 426:	00279713          	slli	a4,a5,0x2
 42a:	00e90633          	add	a2,s2,a4
 42e:	976a                	add	a4,a4,s10
 430:	4318                	lw	a4,0(a4)
 432:	ffc52583          	lw	a1,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 436:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 438:	02b70733          	mul	a4,a4,a1
 43c:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 43e:	fe07d4e3          	bgez	a5,426 <polymult2+0x12c>
        for (j = size_b -1; j >= 0; j = j-1){
 442:	1afd                	addi	s5,s5,-1
 444:	1571                	addi	a0,a0,-4
 446:	9936                	add	s2,s2,a3
 448:	bf89                	j	39a <polymult2+0xa0>
        array_add(product2,line[i],size_a+size_b-1);
 44a:	85e6                	mv	a1,s9
 44c:	864e                	mv	a2,s3
 44e:	854a                	mv	a0,s2
 450:	3189                	jal	92 <array_add>
    for(i=0;i<size_b;++i){
 452:	0485                	addi	s1,s1,1
 454:	9cde                	add	s9,s9,s7
 456:	bf79                	j	3f4 <polymult2+0xfa>

00000458 <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
 458:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 45c:	7139                	addi	sp,sp,-64
    int v[size_N];
 45e:	07bd                	addi	a5,a5,15
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 460:	de06                	sw	ra,60(sp)
 462:	dc22                	sw	s0,56(sp)
 464:	da26                	sw	s1,52(sp)
 466:	0080                	addi	s0,sp,64
 468:	d84a                	sw	s2,48(sp)
 46a:	d64e                	sw	s3,44(sp)
 46c:	d452                	sw	s4,40(sp)
 46e:	d256                	sw	s5,36(sp)
 470:	d05a                	sw	s6,32(sp)
 472:	ce5e                	sw	s7,28(sp)
 474:	cc62                	sw	s8,24(sp)
 476:	ca66                	sw	s9,20(sp)
 478:	c86a                	sw	s10,16(sp)
    int v[size_N];
 47a:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 47c:	c66e                	sw	s11,12(sp)
    int v[size_N];
 47e:	40f10133          	sub	sp,sp,a5
 482:	8a8a                	mv	s5,sp
    int q[size_N];
 484:	40f10133          	sub	sp,sp,a5
 488:	8b0a                	mv	s6,sp
    int *product;
    int num_temp[size_N];
 48a:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
 48e:	00269793          	slli	a5,a3,0x2
 492:	07bd                	addi	a5,a5,15
 494:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
 496:	890a                	mv	s2,sp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 498:	84ae                	mv	s1,a1
    int denum_temp[size_D];
 49a:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 49e:	8d32                	mv	s10,a2
    int v[size_N];
 4a0:	fff58c93          	addi	s9,a1,-1
//            num_temp[i] = num_temp[i] + mod;
//        }
//        num_temp[i] = num_temp[i] % mod;
//    }

    array_equ(num_temp,num,size_N);
 4a4:	862e                	mv	a2,a1
 4a6:	85aa                	mv	a1,a0
 4a8:	854a                	mv	a0,s2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 4aa:	8a36                	mv	s4,a3
 4ac:	89ba                	mv	s3,a4
    int denum_temp[size_D];
 4ae:	fff68c13          	addi	s8,a3,-1
    array_equ(num_temp,num,size_N);
 4b2:	3905                	jal	e2 <array_equ>
    array_mod(num_temp,mod,size_N);
 4b4:	8626                	mv	a2,s1
 4b6:	85ce                	mv	a1,s3
 4b8:	854a                	mv	a0,s2
 4ba:	3981                	jal	10a <array_mod>
    int denum_temp[size_D];
 4bc:	8b8a                	mv	s7,sp
//            denum_temp[i] = denum_temp[i] + mod;
//        }
//        denum_temp[i] = denum_temp[i] % mod;
//    }

    array_equ(denum_temp,denum,size_D);
 4be:	8652                	mv	a2,s4
 4c0:	85ea                	mv	a1,s10
 4c2:	855e                	mv	a0,s7
 4c4:	3939                	jal	e2 <array_equ>
    array_mod(denum_temp,mod,size_D);
 4c6:	8652                	mv	a2,s4
 4c8:	85ce                	mv	a1,s3
 4ca:	855e                	mv	a0,s7
 4cc:	393d                	jal	10a <array_mod>

    for (i = 0; i < size_N; ++i){
 4ce:	4781                	li	a5,0
 4d0:	0097cf63          	blt	a5,s1,4ee <polydiv+0x96>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
 4d4:	002c1793          	slli	a5,s8,0x2
 4d8:	97de                	add	a5,a5,s7
 4da:	4398                	lw	a4,0(a5)
 4dc:	020c5463          	bgez	s8,504 <polydiv+0xac>
    for (i = 0; i < size_N; ++i){
 4e0:	4781                	li	a5,0
 4e2:	4d01                	li	s10,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
 4e4:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
 4e6:	033d4263          	blt	s10,s3,50a <polydiv+0xb2>
 4ea:	87e6                	mv	a5,s9
 4ec:	a805                	j	51c <polydiv+0xc4>
        q[i] = 0;
 4ee:	00279713          	slli	a4,a5,0x2
 4f2:	00eb06b3          	add	a3,s6,a4
        v[i] = 0;
 4f6:	9756                	add	a4,a4,s5
        q[i] = 0;
 4f8:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
 4fc:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
 500:	0785                	addi	a5,a5,1
 502:	b7f9                	j	4d0 <polydiv+0x78>
        if( denum_temp[i] != 0 )
 504:	ff71                	bnez	a4,4e0 <polydiv+0x88>
    for (i = size_D-1; i >= 0; i = i-1){
 506:	1c7d                	addi	s8,s8,-1
 508:	b7f1                	j	4d4 <polydiv+0x7c>
        if ( (b_N*u)%mod == 1 )
 50a:	0337e633          	rem	a2,a5,s3
 50e:	97ba                	add	a5,a5,a4
 510:	fcd60de3          	beq	a2,a3,4ea <polydiv+0x92>
    for (u = 0; u < mod; ++u){
 514:	0d05                	addi	s10,s10,1
 516:	bfc1                	j	4e6 <polydiv+0x8e>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
 518:	eb01                	bnez	a4,528 <polydiv+0xd0>
    for (i = size_N-1; i >= 0; i = i-1){
 51a:	17fd                	addi	a5,a5,-1
 51c:	00279713          	slli	a4,a5,0x2
 520:	974a                	add	a4,a4,s2
 522:	4318                	lw	a4,0(a4)
 524:	fe07dae3          	bgez	a5,518 <polydiv+0xc0>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
 528:	0587d663          	bge	a5,s8,574 <polydiv+0x11c>
    } //End While-1

//    for(i = 0; i < size_N; ++i){
//        result[i] = q[i];
//    }
    array_equ(result,q,size_N);
 52c:	8626                	mv	a2,s1
 52e:	85da                	mv	a1,s6
 530:	00001517          	auipc	a0,0x1
 534:	02c50513          	addi	a0,a0,44 # 155c <result>
 538:	366d                	jal	e2 <array_equ>

    for(i = size_N; i < (2*size_N); ++i){
 53a:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
 53e:	00001697          	auipc	a3,0x1
 542:	01e68693          	addi	a3,a3,30 # 155c <result>
    for(i = size_N; i < (2*size_N); ++i){
 546:	0ae4c263          	blt	s1,a4,5ea <polydiv+0x192>
    }

    return_address3 = &result[0];

    return return_address3;
}
 54a:	fc040113          	addi	sp,s0,-64
 54e:	50f2                	lw	ra,60(sp)
 550:	5462                	lw	s0,56(sp)
 552:	54d2                	lw	s1,52(sp)
 554:	5942                	lw	s2,48(sp)
 556:	59b2                	lw	s3,44(sp)
 558:	5a22                	lw	s4,40(sp)
 55a:	5a92                	lw	s5,36(sp)
 55c:	5b02                	lw	s6,32(sp)
 55e:	4bf2                	lw	s7,28(sp)
 560:	4c62                	lw	s8,24(sp)
 562:	4cd2                	lw	s9,20(sp)
 564:	4d42                	lw	s10,16(sp)
 566:	4db2                	lw	s11,12(sp)
 568:	00001517          	auipc	a0,0x1
 56c:	ff450513          	addi	a0,a0,-12 # 155c <result>
 570:	6121                	addi	sp,sp,64
 572:	8082                	ret
        v[(d-d2)] = u*r_d;
 574:	03a70733          	mul	a4,a4,s10
 578:	418787b3          	sub	a5,a5,s8
 57c:	078a                	slli	a5,a5,0x2
 57e:	97d6                	add	a5,a5,s5
    array_mod(v,mod,size_N);
 580:	8626                	mv	a2,s1
 582:	85ce                	mv	a1,s3
 584:	8556                	mv	a0,s5
        v[(d-d2)] = u*r_d;
 586:	c398                	sw	a4,0(a5)
    array_mod(v,mod,size_N);
 588:	3649                	jal	10a <array_mod>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 58a:	4781                	li	a5,0
 58c:	874e                	mv	a4,s3
 58e:	86d2                	mv	a3,s4
 590:	8656                	mv	a2,s5
 592:	85d2                	mv	a1,s4
 594:	855e                	mv	a0,s7
 596:	3e49                	jal	128 <polymult>
    array_mod(product,mod,size_N);
 598:	8626                	mv	a2,s1
 59a:	85ce                	mv	a1,s3
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 59c:	8daa                	mv	s11,a0
    array_mod(product,mod,size_N);
 59e:	36b5                	jal	10a <array_mod>
    array_sub(num_temp,product,size_N);
 5a0:	8626                	mv	a2,s1
 5a2:	85ee                	mv	a1,s11
 5a4:	854a                	mv	a0,s2
 5a6:	3e11                	jal	ba <array_sub>
    array_mod(num_temp,mod,size_N);
 5a8:	8626                	mv	a2,s1
 5aa:	85ce                	mv	a1,s3
 5ac:	854a                	mv	a0,s2
 5ae:	3eb1                	jal	10a <array_mod>
    array_add(q,v,size_N);
 5b0:	8626                	mv	a2,s1
 5b2:	85d6                	mv	a1,s5
 5b4:	855a                	mv	a0,s6
 5b6:	3cf1                	jal	92 <array_add>
    array_mod(q,mod,size_N);
 5b8:	8626                	mv	a2,s1
 5ba:	85ce                	mv	a1,s3
 5bc:	855a                	mv	a0,s6
 5be:	36b1                	jal	10a <array_mod>
        for (i = size_N-1; i >= 0; i = i-1){
 5c0:	87e6                	mv	a5,s9
 5c2:	00279713          	slli	a4,a5,0x2
 5c6:	974a                	add	a4,a4,s2
 5c8:	4318                	lw	a4,0(a4)
 5ca:	0007d463          	bgez	a5,5d2 <polydiv+0x17a>
 5ce:	4681                	li	a3,0
 5d0:	a811                	j	5e4 <polydiv+0x18c>
            if( num_temp[i] != 0 )
 5d2:	ff75                	bnez	a4,5ce <polydiv+0x176>
        for (i = size_N-1; i >= 0; i = i-1){
 5d4:	17fd                	addi	a5,a5,-1
 5d6:	b7f5                	j	5c2 <polydiv+0x16a>
            v[i] = 0;
 5d8:	00269613          	slli	a2,a3,0x2
 5dc:	9656                	add	a2,a2,s5
 5de:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
 5e2:	0685                	addi	a3,a3,1
 5e4:	fe96cae3          	blt	a3,s1,5d8 <polydiv+0x180>
 5e8:	b781                	j	528 <polydiv+0xd0>
        result[i] = num_temp[i-size_N];
 5ea:	00092603          	lw	a2,0(s2)
 5ee:	00249793          	slli	a5,s1,0x2
 5f2:	97b6                	add	a5,a5,a3
 5f4:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
 5f6:	0485                	addi	s1,s1,1
 5f8:	0911                	addi	s2,s2,4
 5fa:	b7b1                	j	546 <polydiv+0xee>

000005fc <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
 5fc:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 600:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
 602:	07bd                	addi	a5,a5,15
 604:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 606:	c4a2                	sw	s0,72(sp)
 608:	c2a6                	sw	s1,68(sp)
 60a:	c0ca                	sw	s2,64(sp)
 60c:	de4e                	sw	s3,60(sp)
 60e:	dc52                	sw	s4,56(sp)
 610:	da56                	sw	s5,52(sp)
 612:	d85a                	sw	s6,48(sp)
 614:	d65e                	sw	s7,44(sp)
 616:	d462                	sw	s8,40(sp)
 618:	d266                	sw	s9,36(sp)
 61a:	d06a                	sw	s10,32(sp)
 61c:	ce6e                	sw	s11,28(sp)
 61e:	c686                	sw	ra,76(sp)
 620:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
 622:	40f10133          	sub	sp,sp,a5
 626:	8a0a                	mv	s4,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
 628:	40f10133          	sub	sp,sp,a5
 62c:	8a8a                	mv	s5,sp
    int ri[size];
 62e:	40f10133          	sub	sp,sp,a5
 632:	8b8a                	mv	s7,sp

    int ti_1[size]; // ti_1[0] = 1
 634:	40f10133          	sub	sp,sp,a5
 638:	8b0a                	mv	s6,sp
    int ti[size];
 63a:	40f10133          	sub	sp,sp,a5
 63e:	8c0a                	mv	s8,sp
    int qi_1[size];
 640:	40f10133          	sub	sp,sp,a5
 644:	8c8a                	mv	s9,sp
    int temp[size];
 646:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 64a:	8936                	mv	s2,a3
 64c:	8dae                	mv	s11,a1
 64e:	84b2                	mv	s1,a2
    int ri_2[size]; // MX-ring poly, a
 650:	fff60d13          	addi	s10,a2,-1
    int temp[size];
 654:	898a                	mv	s3,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
 656:	4781                	li	a5,0
//        ri_2[i] = polyR[i];
//        ri_1[i] = polyf[i];
        ti_2[i] = 0;
 658:	00001697          	auipc	a3,0x1
 65c:	15c68693          	addi	a3,a3,348 # 17b4 <ti_2>
    for (i = 0; i < size; ++i) {
 660:	1297c363          	blt	a5,s1,786 <ext_euclid+0x18a>
        ti_1[i] = 0;
    }
    array_equ(ri_2,polyR,size);
 664:	85aa                	mv	a1,a0
 666:	8626                	mv	a2,s1
 668:	8552                	mv	a0,s4
 66a:	3ca5                	jal	e2 <array_equ>
    array_equ(ri_1,polyf,size);
 66c:	85ee                	mv	a1,s11
 66e:	8626                	mv	a2,s1
 670:	8556                	mv	a0,s5
 672:	3c85                	jal	e2 <array_equ>
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
 674:	4785                	li	a5,1
 676:	00fb2023          	sw	a5,0(s6)
//            ri_1[i] = ri_1[i] % mod;
//        }
    array_mod(ri_1,mod,size);

        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
 67a:	00149793          	slli	a5,s1,0x1
 67e:	faf42e23          	sw	a5,-68(s0)
    array_mod(temp,mod,size);

//        for (i = 0; i < N + 1; ++i) {
//            ti[i] = ti_2[i] - temp[i];
//        }
    array_equ(ti,ti_2,size);
 682:	00001d97          	auipc	s11,0x1
 686:	132d8d93          	addi	s11,s11,306 # 17b4 <ti_2>
    array_mod(ri_2,mod,size);
 68a:	8626                	mv	a2,s1
 68c:	85ca                	mv	a1,s2
 68e:	8552                	mv	a0,s4
 690:	3cad                	jal	10a <array_mod>
    array_mod(ri_1,mod,size);
 692:	8626                	mv	a2,s1
 694:	85ca                	mv	a1,s2
 696:	8556                	mv	a0,s5
 698:	3c8d                	jal	10a <array_mod>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
 69a:	874a                	mv	a4,s2
 69c:	86a6                	mv	a3,s1
 69e:	8656                	mv	a2,s5
 6a0:	85a6                	mv	a1,s1
 6a2:	8552                	mv	a0,s4
 6a4:	3b55                	jal	458 <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
 6a6:	875e                	mv	a4,s7
 6a8:	87a6                	mv	a5,s1
 6aa:	fbc42683          	lw	a3,-68(s0)
 6ae:	0ed7c763          	blt	a5,a3,79c <ext_euclid+0x1a0>
    array_equ(temp,ri_2,size);
 6b2:	8626                	mv	a2,s1
 6b4:	85d2                	mv	a1,s4
 6b6:	854e                	mv	a0,s3
 6b8:	342d                	jal	e2 <array_equ>
    array_sub(temp,ri,size);
 6ba:	8626                	mv	a2,s1
 6bc:	85de                	mv	a1,s7
 6be:	854e                	mv	a0,s3
 6c0:	3aed                	jal	ba <array_sub>
    array_mod(temp,mod,size);
 6c2:	8626                	mv	a2,s1
 6c4:	85ca                	mv	a1,s2
 6c6:	854e                	mv	a0,s3
 6c8:	3489                	jal	10a <array_mod>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
 6ca:	874a                	mv	a4,s2
 6cc:	86a6                	mv	a3,s1
 6ce:	8656                	mv	a2,s5
 6d0:	85a6                	mv	a1,s1
 6d2:	854e                	mv	a0,s3
 6d4:	3351                	jal	458 <polydiv>
 6d6:	85aa                	mv	a1,a0
    array_equ(qi_1,res1,size);
 6d8:	8626                	mv	a2,s1
 6da:	8566                	mv	a0,s9
 6dc:	3419                	jal	e2 <array_equ>
    array_mod(qi_1,mod,size);
 6de:	8626                	mv	a2,s1
 6e0:	85ca                	mv	a1,s2
 6e2:	8566                	mv	a0,s9
 6e4:	341d                	jal	10a <array_mod>
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
 6e6:	4781                	li	a5,0
 6e8:	874a                	mv	a4,s2
 6ea:	86a6                	mv	a3,s1
 6ec:	865a                	mv	a2,s6
 6ee:	85a6                	mv	a1,s1
 6f0:	8566                	mv	a0,s9
 6f2:	3c1d                	jal	128 <polymult>
 6f4:	85aa                	mv	a1,a0
    array_equ(temp,res2,size);
 6f6:	8626                	mv	a2,s1
 6f8:	854e                	mv	a0,s3
 6fa:	32e5                	jal	e2 <array_equ>
    array_mod(temp,mod,size);
 6fc:	8626                	mv	a2,s1
 6fe:	85ca                	mv	a1,s2
 700:	854e                	mv	a0,s3
 702:	3421                	jal	10a <array_mod>
    array_equ(ti,ti_2,size);
 704:	8626                	mv	a2,s1
 706:	85ee                	mv	a1,s11
 708:	8562                	mv	a0,s8
 70a:	3ae1                	jal	e2 <array_equ>
    array_sub(ti,temp,size);
 70c:	8626                	mv	a2,s1
 70e:	85ce                	mv	a1,s3
 710:	8562                	mv	a0,s8
 712:	3265                	jal	ba <array_sub>
//            while (ti[i] < 0) {
//                ti[i] = ti[i] + mod;
//            }
//            ti[i] = ti[i] % mod;
//        }
    array_mod(ti,mod,size);
 714:	8626                	mv	a2,s1
 716:	85ca                	mv	a1,s2
 718:	8562                	mv	a0,s8
 71a:	3ac5                	jal	10a <array_mod>

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

array_equ(ri_2,ri_1,size);
 71c:	8626                	mv	a2,s1
 71e:	85d6                	mv	a1,s5
 720:	8552                	mv	a0,s4
 722:	32c1                	jal	e2 <array_equ>
array_equ(ri_1,ri,size);
 724:	8626                	mv	a2,s1
 726:	85de                	mv	a1,s7
 728:	8556                	mv	a0,s5
 72a:	3a65                	jal	e2 <array_equ>
array_equ(ti_2,ti_1,size);
 72c:	8626                	mv	a2,s1
 72e:	85da                	mv	a1,s6
 730:	856e                	mv	a0,s11
 732:	3a45                	jal	e2 <array_equ>
array_equ(ti_1,ti,size);
 734:	8626                	mv	a2,s1
 736:	85e2                	mv	a1,s8
 738:	855a                	mv	a0,s6
 73a:	3265                	jal	e2 <array_equ>
        controlR = 0;
 73c:	4781                	li	a5,0

        for (i = 0; i < N + 1; ++i) {
 73e:	4701                	li	a4,0
 740:	06ed5763          	bge	s10,a4,7ae <ext_euclid+0x1b2>
    while (controlR != 0) {
 744:	f40793e3          	bnez	a5,68a <ext_euclid+0x8e>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
 748:	4701                	li	a4,0
            if (((ri_2[0] * j) % mod) == 1)
 74a:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
 74c:	07274c63          	blt	a4,s2,7c4 <ext_euclid+0x1c8>
 750:	00001617          	auipc	a2,0x1
 754:	06460613          	addi	a2,a2,100 # 17b4 <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
 758:	08fd5063          	bge	s10,a5,7d8 <ext_euclid+0x1dc>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
 75c:	fb040113          	addi	sp,s0,-80
 760:	40b6                	lw	ra,76(sp)
 762:	4426                	lw	s0,72(sp)
 764:	4496                	lw	s1,68(sp)
 766:	4906                	lw	s2,64(sp)
 768:	59f2                	lw	s3,60(sp)
 76a:	5a62                	lw	s4,56(sp)
 76c:	5ad2                	lw	s5,52(sp)
 76e:	5b42                	lw	s6,48(sp)
 770:	5bb2                	lw	s7,44(sp)
 772:	5c22                	lw	s8,40(sp)
 774:	5c92                	lw	s9,36(sp)
 776:	5d02                	lw	s10,32(sp)
 778:	4df2                	lw	s11,28(sp)
 77a:	00001517          	auipc	a0,0x1
 77e:	03a50513          	addi	a0,a0,58 # 17b4 <ti_2>
 782:	6161                	addi	sp,sp,80
 784:	8082                	ret
        ti_2[i] = 0;
 786:	00279713          	slli	a4,a5,0x2
 78a:	00e68633          	add	a2,a3,a4
        ti_1[i] = 0;
 78e:	975a                	add	a4,a4,s6
        ti_2[i] = 0;
 790:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
 794:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size; ++i) {
 798:	0785                	addi	a5,a5,1
 79a:	b5d9                	j	660 <ext_euclid+0x64>
            ri[i - (N + 1)] = res[i];
 79c:	00279693          	slli	a3,a5,0x2
 7a0:	96aa                	add	a3,a3,a0
 7a2:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 7a4:	0785                	addi	a5,a5,1
 7a6:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
 7a8:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 7ac:	bdfd                	j	6aa <ext_euclid+0xae>
              qi_1[i] = 0;
 7ae:	00271693          	slli	a3,a4,0x2
 7b2:	00dc8633          	add	a2,s9,a3
            controlR += ri[i];
 7b6:	96de                	add	a3,a3,s7
 7b8:	4294                	lw	a3,0(a3)
              qi_1[i] = 0;
 7ba:	00062023          	sw	zero,0(a2)
        for (i = 0; i < N + 1; ++i) {
 7be:	0705                	addi	a4,a4,1
            controlR += ri[i];
 7c0:	97b6                	add	a5,a5,a3
        for (i = 0; i < N + 1; ++i) {
 7c2:	bfbd                	j	740 <ext_euclid+0x144>
            if (((ri_2[0] * j) % mod) == 1)
 7c4:	000a2683          	lw	a3,0(s4)
 7c8:	02d706b3          	mul	a3,a4,a3
 7cc:	0326e6b3          	rem	a3,a3,s2
 7d0:	f8c680e3          	beq	a3,a2,750 <ext_euclid+0x154>
        for (j = 0; j < mod; ++j) {
 7d4:	0705                	addi	a4,a4,1
 7d6:	bf9d                	j	74c <ext_euclid+0x150>
            ti_2[i] = (ti_2[i] * j) % mod;
 7d8:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
 7da:	0785                	addi	a5,a5,1
 7dc:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
 7de:	02d706b3          	mul	a3,a4,a3
 7e2:	0326e6b3          	rem	a3,a3,s2
 7e6:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
 7ea:	b7bd                	j	758 <ext_euclid+0x15c>

000007ec <generate_keys>:




int* generate_keys(int N, int p, int q){
 7ec:	7141                	addi	sp,sp,-496
 7ee:	1e112623          	sw	ra,492(sp)
 7f2:	1e812423          	sw	s0,488(sp)
 7f6:	1e912223          	sw	s1,484(sp)
 7fa:	1b80                	addi	s0,sp,496
 7fc:	1f212023          	sw	s2,480(sp)
 800:	1d312e23          	sw	s3,476(sp)
 804:	1d412c23          	sw	s4,472(sp)
 808:	1d512a23          	sw	s5,468(sp)
 80c:	1d612823          	sw	s6,464(sp)
 810:	1d712623          	sw	s7,460(sp)
 814:	1da12023          	sw	s10,448(sp)
 818:	1d812423          	sw	s8,456(sp)
 81c:	1d912223          	sw	s9,452(sp)
 820:	892a                	mv	s2,a0
 822:	8bae                	mv	s7,a1
 824:	8b32                	mv	s6,a2

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
 826:	4581                	li	a1,0
 828:	0d000613          	li	a2,208
 82c:	e2440513          	addi	a0,s0,-476
 830:	23b1                	jal	d7c <memset>
 832:	4485                	li	s1,1
 834:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
 836:	0d800613          	li	a2,216
 83a:	4581                	li	a1,0
 83c:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
 840:	e1342c23          	sw	s3,-488(s0)
 844:	e0942e23          	sw	s1,-484(s0)
 848:	e2942023          	sw	s1,-480(s0)
 84c:	e3342423          	sw	s3,-472(s0)
 850:	e2942823          	sw	s1,-464(s0)
 854:	e2942e23          	sw	s1,-452(s0)
 858:	e5342023          	sw	s3,-448(s0)
 85c:	e5342223          	sw	s3,-444(s0)
 860:	e4942623          	sw	s1,-436(s0)
 864:	e5342a23          	sw	s3,-428(s0)
 868:	e4942e23          	sw	s1,-420(s0)
 86c:	e6942023          	sw	s1,-416(s0)
 870:	e7342623          	sw	s3,-404(s0)
 874:	e6942a23          	sw	s1,-396(s0)
 878:	e8942023          	sw	s1,-384(s0)
 87c:	e8942223          	sw	s1,-380(s0)
 880:	e8942423          	sw	s1,-376(s0)
 884:	e9342623          	sw	s3,-372(s0)
 888:	e8942a23          	sw	s1,-364(s0)
 88c:	ea942023          	sw	s1,-352(s0)
 890:	ea942223          	sw	s1,-348(s0)
 894:	ea942423          	sw	s1,-344(s0)
 898:	eb342623          	sw	s3,-340(s0)
 89c:	ea942a23          	sw	s1,-332(s0)
 8a0:	ec942023          	sw	s1,-320(s0)
 8a4:	ec942223          	sw	s1,-316(s0)
 8a8:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
 8ac:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
 8b0:	21f1                	jal	d7c <memset>
    int polyR[N+1];
 8b2:	002a9793          	slli	a5,s5,0x2
 8b6:	07bd                	addi	a5,a5,15
 8b8:	9bc1                	andi	a5,a5,-16
 8ba:	40f10133          	sub	sp,sp,a5
 8be:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
 8c0:	00291d13          	slli	s10,s2,0x2
 8c4:	01aa07b3          	add	a5,s4,s10
 8c8:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
 8ca:	ef342a23          	sw	s3,-268(s0)
 8ce:	ee942e23          	sw	s1,-260(s0)
 8d2:	f0942023          	sw	s1,-256(s0)
 8d6:	f0942423          	sw	s1,-248(s0)
 8da:	f1342a23          	sw	s3,-236(s0)
 8de:	f1342e23          	sw	s3,-228(s0)
 8e2:	f3342023          	sw	s3,-224(s0)
 8e6:	f2942423          	sw	s1,-216(s0)
 8ea:	f3342823          	sw	s3,-208(s0)
 8ee:	f2942c23          	sw	s1,-200(s0)
 8f2:	f4942223          	sw	s1,-188(s0)
 8f6:	f5342423          	sw	s3,-184(s0)
 8fa:	f4942823          	sw	s1,-176(s0)
 8fe:	f4942e23          	sw	s1,-164(s0)
 902:	f7342023          	sw	s3,-160(s0)
 906:	f6942423          	sw	s1,-152(s0)
 90a:	f6942a23          	sw	s1,-140(s0)
 90e:	f7342c23          	sw	s3,-136(s0)
 912:	f8942023          	sw	s1,-128(s0)
 916:	f8942423          	sw	s1,-120(s0)
 91a:	f8942623          	sw	s1,-116(s0)
 91e:	f8942c23          	sw	s1,-104(s0)
 922:	f9342e23          	sw	s3,-100(s0)
 926:	fa942223          	sw	s1,-92(s0)
 92a:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
 92e:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
 932:	4785                	li	a5,1
 934:	1127c163          	blt	a5,s2,a36 <generate_keys+0x24a>
 938:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
 93a:	03600693          	li	a3,54
 93e:	10f6d363          	bge	a3,a5,a44 <generate_keys+0x258>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
 942:	4781                	li	a5,0
        random_keys[i] = f[i];
 944:	00001697          	auipc	a3,0x1
 948:	00068693          	mv	a3,a3
    for(i = 0; i < N; ++i){
 94c:	1127ca63          	blt	a5,s2,a60 <generate_keys+0x274>
 950:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
 954:	00191993          	slli	s3,s2,0x1
 958:	87ca                	mv	a5,s2
 95a:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
 95c:	00001617          	auipc	a2,0x1
 960:	fe860613          	addi	a2,a2,-24 # 1944 <random_keys>
    for(i = N; i < (2*N); ++i){
 964:	1137c963          	blt	a5,s3,a76 <generate_keys+0x28a>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
 968:	448d                	li	s1,3
 96a:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
 96e:	86de                	mv	a3,s7
 970:	8656                	mv	a2,s5
 972:	e1840593          	addi	a1,s0,-488
 976:	8552                	mv	a0,s4
 978:	3151                	jal	5fc <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
 97a:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
 97c:	00001697          	auipc	a3,0x1
 980:	fc868693          	addi	a3,a3,-56 # 1944 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
 984:	1097c163          	blt	a5,s1,a86 <generate_keys+0x29a>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
 988:	8656                	mv	a2,s5
 98a:	86da                	mv	a3,s6
 98c:	e1840593          	addi	a1,s0,-488
 990:	8552                	mv	a0,s4
 992:	31ad                	jal	5fc <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
 994:	5751                	li	a4,-12
 996:	02e90733          	mul	a4,s2,a4
 99a:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
 99c:	00001617          	auipc	a2,0x1
 9a0:	fa860613          	addi	a2,a2,-88 # 1944 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
 9a4:	0fa4c963          	blt	s1,s10,a96 <generate_keys+0x2aa>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
 9a8:	4701                	li	a4,0
 9aa:	85ca                	mv	a1,s2
 9ac:	86ca                	mv	a3,s2
 9ae:	8666                	mv	a2,s9
 9b0:	32a9                	jal	2fa <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
 9b2:	87aa                	mv	a5,a0
 9b4:	4701                	li	a4,0
 9b6:	fff98593          	addi	a1,s3,-1
 9ba:	0eb74863          	blt	a4,a1,aaa <generate_keys+0x2be>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
 9be:	86d6                	mv	a3,s5
 9c0:	875a                	mv	a4,s6
 9c2:	8652                	mv	a2,s4
 9c4:	3c51                	jal	458 <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
 9c6:	4795                	li	a5,5
 9c8:	02f907b3          	mul	a5,s2,a5
 9cc:	098a                	slli	s3,s3,0x2
 9ce:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
 9d0:	00001697          	auipc	a3,0x1
 9d4:	f7468693          	addi	a3,a3,-140 # 1944 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
 9d8:	0991                	addi	s3,s3,4
 9da:	0efc4063          	blt	s8,a5,aba <generate_keys+0x2ce>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
 9de:	4699                	li	a3,6
 9e0:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
 9e2:	00001617          	auipc	a2,0x1
 9e6:	f6260613          	addi	a2,a2,-158 # 1944 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
 9ea:	02d906b3          	mul	a3,s2,a3
 9ee:	02a90933          	mul	s2,s2,a0
 9f2:	0cf6dc63          	bge	a3,a5,aca <generate_keys+0x2de>


    return_address5 = &random_keys[0];

    return return_address5;
}
 9f6:	e1040113          	addi	sp,s0,-496
 9fa:	1ec12083          	lw	ra,492(sp)
 9fe:	1e812403          	lw	s0,488(sp)
 a02:	1e412483          	lw	s1,484(sp)
 a06:	1e012903          	lw	s2,480(sp)
 a0a:	1dc12983          	lw	s3,476(sp)
 a0e:	1d812a03          	lw	s4,472(sp)
 a12:	1d412a83          	lw	s5,468(sp)
 a16:	1d012b03          	lw	s6,464(sp)
 a1a:	1cc12b83          	lw	s7,460(sp)
 a1e:	1c812c03          	lw	s8,456(sp)
 a22:	1c412c83          	lw	s9,452(sp)
 a26:	1c012d03          	lw	s10,448(sp)
 a2a:	00001517          	auipc	a0,0x1
 a2e:	f1a50513          	addi	a0,a0,-230 # 1944 <random_keys>
 a32:	617d                	addi	sp,sp,496
 a34:	8082                	ret
        polyR[i] = 0;
 a36:	00279713          	slli	a4,a5,0x2
 a3a:	9752                	add	a4,a4,s4
 a3c:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
 a40:	0785                	addi	a5,a5,1
 a42:	bdcd                	j	934 <generate_keys+0x148>
        f[i] = 0;
 a44:	00279713          	slli	a4,a5,0x2
 a48:	e1840613          	addi	a2,s0,-488
 a4c:	963a                	add	a2,a2,a4
 a4e:	00062023          	sw	zero,0(a2)
        g[i] = 0;
 a52:	ef440613          	addi	a2,s0,-268
 a56:	9732                	add	a4,a4,a2
 a58:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
 a5c:	0785                	addi	a5,a5,1
 a5e:	b5c5                	j	93e <generate_keys+0x152>
        random_keys[i] = f[i];
 a60:	00279713          	slli	a4,a5,0x2
 a64:	e1840593          	addi	a1,s0,-488
 a68:	00e68633          	add	a2,a3,a4
 a6c:	972e                	add	a4,a4,a1
 a6e:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
 a70:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
 a72:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
 a74:	bde1                	j	94c <generate_keys+0x160>
        random_keys[i] = g[i-N];
 a76:	430c                	lw	a1,0(a4)
 a78:	00279693          	slli	a3,a5,0x2
 a7c:	96b2                	add	a3,a3,a2
 a7e:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
 a80:	0785                	addi	a5,a5,1
 a82:	0711                	addi	a4,a4,4
 a84:	b5c5                	j	964 <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
 a86:	4110                	lw	a2,0(a0)
 a88:	00279713          	slli	a4,a5,0x2
 a8c:	9736                	add	a4,a4,a3
 a8e:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
 a90:	0785                	addi	a5,a5,1
 a92:	0511                	addi	a0,a0,4
 a94:	bdc5                	j	984 <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
 a96:	00249793          	slli	a5,s1,0x2
 a9a:	00f706b3          	add	a3,a4,a5
 a9e:	96aa                	add	a3,a3,a0
 aa0:	4294                	lw	a3,0(a3)
 aa2:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
 aa4:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
 aa6:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
 aa8:	bdf5                	j	9a4 <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
 aaa:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
 aac:	0705                	addi	a4,a4,1
 aae:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
 ab0:	037686b3          	mul	a3,a3,s7
 ab4:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
 ab8:	b709                	j	9ba <generate_keys+0x1ce>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
 aba:	ff89a603          	lw	a2,-8(s3)
 abe:	002c1713          	slli	a4,s8,0x2
 ac2:	9736                	add	a4,a4,a3
 ac4:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
 ac6:	0c05                	addi	s8,s8,1
 ac8:	bf01                	j	9d8 <generate_keys+0x1ec>
        random_keys[i] = polyR[i-(5*N)];
 aca:	00279713          	slli	a4,a5,0x2
 ace:	00e605b3          	add	a1,a2,a4
 ad2:	974a                	add	a4,a4,s2
 ad4:	9752                	add	a4,a4,s4
 ad6:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
 ad8:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
 ada:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
 adc:	bf19                	j	9f2 <generate_keys+0x206>

00000ade <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
 ade:	7115                	addi	sp,sp,-224
 ae0:	cda2                	sw	s0,216(sp)
 ae2:	cba6                	sw	s1,212(sp)
 ae4:	842a                	mv	s0,a0
 ae6:	84b2                	mv	s1,a2
 ae8:	c9ca                	sw	s2,208(sp)

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
 aea:	0c000613          	li	a2,192
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
 aee:	892e                	mv	s2,a1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
 af0:	850a                	mv	a0,sp
 af2:	00000597          	auipc	a1,0x0
 af6:	43a58593          	addi	a1,a1,1082 # f2c <__DTOR_END__>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
 afa:	cf86                	sw	ra,220(sp)
 afc:	c7ce                	sw	s3,204(sp)
 afe:	c5d2                	sw	s4,200(sp)
 b00:	89b6                	mv	s3,a3
 b02:	8a3a                	mv	s4,a4
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
 b04:	2a69                	jal	c9e <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
 b06:	4781                	li	a5,0
 b08:	874a                	mv	a4,s2
 b0a:	03000693          	li	a3,48
 b0e:	85a2                	mv	a1,s0
 b10:	860a                	mv	a2,sp
 b12:	854e                	mv	a0,s3
 b14:	e14ff0ef          	jal	ra,128 <polymult>
    /////// PUBLIC_KEY*RANDOM_VALUE ///////
//
//    for(i = 0; i < 48; ++i){
//        temp[i] = temp[i] + message[i];
//    }
array_add(temp,message,48);
 b18:	85a6                	mv	a1,s1
 b1a:	03000613          	li	a2,48
    temp = polymult(public_key,N,random_val,48,q,0);
 b1e:	89aa                	mv	s3,a0
    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
 b20:	00141493          	slli	s1,s0,0x1
array_add(temp,message,48);
 b24:	d6eff0ef          	jal	ra,92 <array_add>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
 b28:	00140693          	addi	a3,s0,1
 b2c:	874a                	mv	a4,s2
 b2e:	8652                	mv	a2,s4
 b30:	85a6                	mv	a1,s1
 b32:	854e                	mv	a0,s3
 b34:	3215                	jal	458 <polydiv>

    for(i = (2*N); i < (3*N); ++i){
 b36:	478d                	li	a5,3
 b38:	02f40433          	mul	s0,s0,a5
 b3c:	87aa                	mv	a5,a0
 b3e:	0084ca63          	blt	s1,s0,b52 <ntru_encyrpt+0x74>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
 b42:	40fe                	lw	ra,220(sp)
 b44:	446e                	lw	s0,216(sp)
 b46:	44de                	lw	s1,212(sp)
 b48:	494e                	lw	s2,208(sp)
 b4a:	49be                	lw	s3,204(sp)
 b4c:	4a2e                	lw	s4,200(sp)
 b4e:	612d                	addi	sp,sp,224
 b50:	8082                	ret
        CT[i-(2*N)] = CT[i];
 b52:	00249713          	slli	a4,s1,0x2
 b56:	972a                	add	a4,a4,a0
 b58:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
 b5a:	0485                	addi	s1,s1,1
 b5c:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
 b5e:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
 b62:	bff1                	j	b3e <ntru_encyrpt+0x60>

00000b64 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 b64:	7179                	addi	sp,sp,-48
 b66:	d422                	sw	s0,40(sp)
 b68:	ce4e                	sw	s3,28(sp)
 b6a:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
 b6c:	498d                	li	s3,3
 b6e:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 b72:	d04a                	sw	s2,32(sp)
 b74:	ca56                	sw	s5,20(sp)
 b76:	c65e                	sw	s7,12(sp)
 b78:	8932                	mv	s2,a2
 b7a:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
 b7c:	863e                	mv	a2,a5
 b7e:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 b80:	8aae                	mv	s5,a1
 b82:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
 b84:	85a2                	mv	a1,s0
 b86:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 b88:	d606                	sw	ra,44(sp)
 b8a:	d226                	sw	s1,36(sp)
 b8c:	cc52                	sw	s4,24(sp)
 b8e:	c85a                	sw	s6,16(sp)
 b90:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
 b92:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
 b96:	f64ff0ef          	jal	ra,2fa <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
 b9a:	00140b13          	addi	s6,s0,1
 b9e:	874a                	mv	a4,s2
 ba0:	86da                	mv	a3,s6
 ba2:	8652                	mv	a2,s4
 ba4:	85a6                	mv	a1,s1
 ba6:	384d                	jal	458 <polydiv>
 ba8:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
 baa:	87aa                	mv	a5,a0
 bac:	872a                	mv	a4,a0
 bae:	86a6                	mv	a3,s1
 bb0:	0536c163          	blt	a3,s3,bf2 <ntru_deceypt+0x8e>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
 bb4:	4589                	li	a1,2
 bb6:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
 bba:	4701                	li	a4,0
 bbc:	04874463          	blt	a4,s0,c04 <ntru_deceypt+0xa0>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
 bc0:	4701                	li	a4,0
 bc2:	86a2                	mv	a3,s0
 bc4:	85a2                	mv	a1,s0
 bc6:	855e                	mv	a0,s7
 bc8:	f32ff0ef          	jal	ra,2fa <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
 bcc:	8756                	mv	a4,s5
 bce:	86da                	mv	a3,s6
 bd0:	8652                	mv	a2,s4
 bd2:	85a6                	mv	a1,s1
 bd4:	3051                	jal	458 <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
 bd6:	87aa                	mv	a5,a0
 bd8:	0334cf63          	blt	s1,s3,c16 <ntru_deceypt+0xb2>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
 bdc:	50b2                	lw	ra,44(sp)
 bde:	5422                	lw	s0,40(sp)
 be0:	5492                	lw	s1,36(sp)
 be2:	5902                	lw	s2,32(sp)
 be4:	49f2                	lw	s3,28(sp)
 be6:	4a62                	lw	s4,24(sp)
 be8:	4ad2                	lw	s5,20(sp)
 bea:	4b42                	lw	s6,16(sp)
 bec:	4bb2                	lw	s7,12(sp)
 bee:	6145                	addi	sp,sp,48
 bf0:	8082                	ret
        a2[i-(2*N)] = a2[i];
 bf2:	00269593          	slli	a1,a3,0x2
 bf6:	95b2                	add	a1,a1,a2
 bf8:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
 bfa:	0685                	addi	a3,a3,1
 bfc:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
 bfe:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
 c02:	b77d                	j	bb0 <ntru_deceypt+0x4c>
        if(a2[i] <= q/2)
 c04:	4394                	lw	a3,0(a5)
 c06:	00d5d563          	bge	a1,a3,c10 <ntru_deceypt+0xac>
            a2[i] = (-1)*(q-a2[i]);
 c0a:	412686b3          	sub	a3,a3,s2
 c0e:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
 c10:	0705                	addi	a4,a4,1
 c12:	0791                	addi	a5,a5,4
 c14:	b765                	j	bbc <ntru_deceypt+0x58>
        c2[i-(2*N)] = c2[i];
 c16:	00249713          	slli	a4,s1,0x2
 c1a:	972a                	add	a4,a4,a0
 c1c:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
 c1e:	0485                	addi	s1,s1,1
 c20:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
 c22:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
 c26:	bf4d                	j	bd8 <ntru_deceypt+0x74>

00000c28 <default_exc_handler>:
  jal x0, default_exc_handler
 c28:	0000006f          	j	c28 <default_exc_handler>

00000c2c <reset_handler>:
  mv  x1, x0
 c2c:	00000093          	li	ra,0
  mv  x2, x1
 c30:	8106                	mv	sp,ra
  mv  x3, x1
 c32:	8186                	mv	gp,ra
  mv  x4, x1
 c34:	8206                	mv	tp,ra
  mv  x5, x1
 c36:	8286                	mv	t0,ra
  mv  x6, x1
 c38:	8306                	mv	t1,ra
  mv  x7, x1
 c3a:	8386                	mv	t2,ra
  mv  x8, x1
 c3c:	8406                	mv	s0,ra
  mv  x9, x1
 c3e:	8486                	mv	s1,ra
  mv x10, x1
 c40:	8506                	mv	a0,ra
  mv x11, x1
 c42:	8586                	mv	a1,ra
  mv x12, x1
 c44:	8606                	mv	a2,ra
  mv x13, x1
 c46:	8686                	mv	a3,ra
  mv x14, x1
 c48:	8706                	mv	a4,ra
  mv x15, x1
 c4a:	8786                	mv	a5,ra
  mv x16, x1
 c4c:	8806                	mv	a6,ra
  mv x17, x1
 c4e:	8886                	mv	a7,ra
  mv x18, x1
 c50:	8906                	mv	s2,ra
  mv x19, x1
 c52:	8986                	mv	s3,ra
  mv x20, x1
 c54:	8a06                	mv	s4,ra
  mv x21, x1
 c56:	8a86                	mv	s5,ra
  mv x22, x1
 c58:	8b06                	mv	s6,ra
  mv x23, x1
 c5a:	8b86                	mv	s7,ra
  mv x24, x1
 c5c:	8c06                	mv	s8,ra
  mv x25, x1
 c5e:	8c86                	mv	s9,ra
  mv x26, x1
 c60:	8d06                	mv	s10,ra
  mv x27, x1
 c62:	8d86                	mv	s11,ra
  mv x28, x1
 c64:	8e06                	mv	t3,ra
  mv x29, x1
 c66:	8e86                	mv	t4,ra
  mv x30, x1
 c68:	8f06                	mv	t5,ra
  mv x31, x1
 c6a:	8f86                	mv	t6,ra
  la   x2, _stack_start
 c6c:	0000f117          	auipc	sp,0xf
 c70:	39410113          	addi	sp,sp,916 # 10000 <_stack_start>

00000c74 <_start>:
  la x26, _bss_start
 c74:	00000d17          	auipc	s10,0x0
 c78:	438d0d13          	addi	s10,s10,1080 # 10ac <_edata>
  la x27, _bss_end
 c7c:	00001d97          	auipc	s11,0x1
 c80:	1c4d8d93          	addi	s11,s11,452 # 1e40 <_bss_end>
  bge x26, x27, zero_loop_end
 c84:	01bd5763          	bge	s10,s11,c92 <main_entry>

00000c88 <zero_loop>:
  sw x0, 0(x26)
 c88:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
 c8c:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
 c8e:	ffaddde3          	bge	s11,s10,c88 <zero_loop>

00000c92 <main_entry>:
  addi x10, x0, 0
 c92:	00000513          	li	a0,0
  addi x11, x0, 0
 c96:	00000593          	li	a1,0
  jal x1, main
 c9a:	18a000ef          	jal	ra,e24 <main>

00000c9e <memcpy>:
 c9e:	00a5c7b3          	xor	a5,a1,a0
 ca2:	8b8d                	andi	a5,a5,3
 ca4:	00c508b3          	add	a7,a0,a2
 ca8:	e7a1                	bnez	a5,cf0 <memcpy+0x52>
 caa:	478d                	li	a5,3
 cac:	04c7f263          	bgeu	a5,a2,cf0 <memcpy+0x52>
 cb0:	00357793          	andi	a5,a0,3
 cb4:	872a                	mv	a4,a0
 cb6:	eba9                	bnez	a5,d08 <memcpy+0x6a>
 cb8:	ffc8f613          	andi	a2,a7,-4
 cbc:	fe060793          	addi	a5,a2,-32
 cc0:	06f76763          	bltu	a4,a5,d2e <memcpy+0x90>
 cc4:	02c77363          	bgeu	a4,a2,cea <memcpy+0x4c>
 cc8:	86ae                	mv	a3,a1
 cca:	87ba                	mv	a5,a4
 ccc:	0006a803          	lw	a6,0(a3)
 cd0:	0791                	addi	a5,a5,4
 cd2:	0691                	addi	a3,a3,4
 cd4:	ff07ae23          	sw	a6,-4(a5)
 cd8:	fec7eae3          	bltu	a5,a2,ccc <memcpy+0x2e>
 cdc:	fff60793          	addi	a5,a2,-1
 ce0:	8f99                	sub	a5,a5,a4
 ce2:	9bf1                	andi	a5,a5,-4
 ce4:	0791                	addi	a5,a5,4
 ce6:	973e                	add	a4,a4,a5
 ce8:	95be                	add	a1,a1,a5
 cea:	01176663          	bltu	a4,a7,cf6 <memcpy+0x58>
 cee:	8082                	ret
 cf0:	872a                	mv	a4,a0
 cf2:	ff157ee3          	bgeu	a0,a7,cee <memcpy+0x50>
 cf6:	0005c783          	lbu	a5,0(a1)
 cfa:	0705                	addi	a4,a4,1
 cfc:	0585                	addi	a1,a1,1
 cfe:	fef70fa3          	sb	a5,-1(a4)
 d02:	ff176ae3          	bltu	a4,a7,cf6 <memcpy+0x58>
 d06:	8082                	ret
 d08:	0005c683          	lbu	a3,0(a1)
 d0c:	0705                	addi	a4,a4,1
 d0e:	00377793          	andi	a5,a4,3
 d12:	fed70fa3          	sb	a3,-1(a4)
 d16:	0585                	addi	a1,a1,1
 d18:	d3c5                	beqz	a5,cb8 <memcpy+0x1a>
 d1a:	0005c683          	lbu	a3,0(a1)
 d1e:	0705                	addi	a4,a4,1
 d20:	00377793          	andi	a5,a4,3
 d24:	fed70fa3          	sb	a3,-1(a4)
 d28:	0585                	addi	a1,a1,1
 d2a:	fff9                	bnez	a5,d08 <memcpy+0x6a>
 d2c:	b771                	j	cb8 <memcpy+0x1a>
 d2e:	41d4                	lw	a3,4(a1)
 d30:	0005a283          	lw	t0,0(a1)
 d34:	0085af83          	lw	t6,8(a1)
 d38:	00c5af03          	lw	t5,12(a1)
 d3c:	0105ae83          	lw	t4,16(a1)
 d40:	0145ae03          	lw	t3,20(a1)
 d44:	0185a303          	lw	t1,24(a1)
 d48:	01c5a803          	lw	a6,28(a1)
 d4c:	c354                	sw	a3,4(a4)
 d4e:	5194                	lw	a3,32(a1)
 d50:	00572023          	sw	t0,0(a4)
 d54:	01f72423          	sw	t6,8(a4)
 d58:	01e72623          	sw	t5,12(a4)
 d5c:	01d72823          	sw	t4,16(a4)
 d60:	01c72a23          	sw	t3,20(a4)
 d64:	00672c23          	sw	t1,24(a4)
 d68:	01072e23          	sw	a6,28(a4)
 d6c:	d314                	sw	a3,32(a4)
 d6e:	02470713          	addi	a4,a4,36
 d72:	02458593          	addi	a1,a1,36
 d76:	faf76ce3          	bltu	a4,a5,d2e <memcpy+0x90>
 d7a:	b7a9                	j	cc4 <memcpy+0x26>

00000d7c <memset>:
 d7c:	433d                	li	t1,15
 d7e:	872a                	mv	a4,a0
 d80:	02c37363          	bgeu	t1,a2,da6 <memset+0x2a>
 d84:	00f77793          	andi	a5,a4,15
 d88:	efbd                	bnez	a5,e06 <memset+0x8a>
 d8a:	e5ad                	bnez	a1,df4 <memset+0x78>
 d8c:	ff067693          	andi	a3,a2,-16
 d90:	8a3d                	andi	a2,a2,15
 d92:	96ba                	add	a3,a3,a4
 d94:	c30c                	sw	a1,0(a4)
 d96:	c34c                	sw	a1,4(a4)
 d98:	c70c                	sw	a1,8(a4)
 d9a:	c74c                	sw	a1,12(a4)
 d9c:	0741                	addi	a4,a4,16
 d9e:	fed76be3          	bltu	a4,a3,d94 <memset+0x18>
 da2:	e211                	bnez	a2,da6 <memset+0x2a>
 da4:	8082                	ret
 da6:	40c306b3          	sub	a3,t1,a2
 daa:	068a                	slli	a3,a3,0x2
 dac:	00000297          	auipc	t0,0x0
 db0:	9696                	add	a3,a3,t0
 db2:	00a68067          	jr	10(a3)
 db6:	00b70723          	sb	a1,14(a4)
 dba:	00b706a3          	sb	a1,13(a4)
 dbe:	00b70623          	sb	a1,12(a4)
 dc2:	00b705a3          	sb	a1,11(a4)
 dc6:	00b70523          	sb	a1,10(a4)
 dca:	00b704a3          	sb	a1,9(a4)
 dce:	00b70423          	sb	a1,8(a4)
 dd2:	00b703a3          	sb	a1,7(a4)
 dd6:	00b70323          	sb	a1,6(a4)
 dda:	00b702a3          	sb	a1,5(a4)
 dde:	00b70223          	sb	a1,4(a4)
 de2:	00b701a3          	sb	a1,3(a4)
 de6:	00b70123          	sb	a1,2(a4)
 dea:	00b700a3          	sb	a1,1(a4)
 dee:	00b70023          	sb	a1,0(a4)
 df2:	8082                	ret
 df4:	0ff5f593          	andi	a1,a1,255
 df8:	00859693          	slli	a3,a1,0x8
 dfc:	8dd5                	or	a1,a1,a3
 dfe:	01059693          	slli	a3,a1,0x10
 e02:	8dd5                	or	a1,a1,a3
 e04:	b761                	j	d8c <memset+0x10>
 e06:	00279693          	slli	a3,a5,0x2
 e0a:	00000297          	auipc	t0,0x0
 e0e:	9696                	add	a3,a3,t0
 e10:	8286                	mv	t0,ra
 e12:	fa8680e7          	jalr	-88(a3)
 e16:	8096                	mv	ra,t0
 e18:	17c1                	addi	a5,a5,-16
 e1a:	8f1d                	sub	a4,a4,a5
 e1c:	963e                	add	a2,a2,a5
 e1e:	f8c374e3          	bgeu	t1,a2,da6 <memset+0x2a>
 e22:	b7a5                	j	d8a <memset+0xe>

00000e24 <main>:

int main(){
 e24:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
 e28:	0c000613          	li	a2,192
 e2c:	00000597          	auipc	a1,0x0
 e30:	1c058593          	addi	a1,a1,448 # fec <__DTOR_END__+0xc0>
 e34:	0068                	addi	a0,sp,12
int main(){
 e36:	42112623          	sw	ra,1068(sp)
 e3a:	42812423          	sw	s0,1064(sp)
 e3e:	42912223          	sw	s1,1060(sp)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
 e42:	3db1                	jal	c9e <memcpy>
   // double cpu_time_used;

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

    resultkon[0] = 0xA;
 e44:	47a9                	li	a5,10
 e46:	00001417          	auipc	s0,0x1
 e4a:	ff640413          	addi	s0,s0,-10 # 1e3c <resultkon>
 //   start = clock();
    keys = generate_keys(N, p, q);
 e4e:	06500613          	li	a2,101
 e52:	458d                	li	a1,3
 e54:	03500513          	li	a0,53
    resultkon[0] = 0xA;
 e58:	c01c                	sw	a5,0(s0)
    keys = generate_keys(N, p, q);
 e5a:	3a49                	jal	7ec <generate_keys>
 e5c:	4781                	li	a5,0


   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
 e5e:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
 e62:	00f506b3          	add	a3,a0,a5
 e66:	4290                	lw	a2,0(a3)
 e68:	1314                	addi	a3,sp,416
 e6a:	96be                	add	a3,a3,a5
 e6c:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
 e6e:	0791                	addi	a5,a5,4
 e70:	fee799e3          	bne	a5,a4,e62 <main+0x3e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
 e74:	1cd8                	addi	a4,sp,628
 e76:	1a850793          	addi	a5,a0,424
 e7a:	27c50693          	addi	a3,a0,636
 e7e:	84ba                	mv	s1,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
 e80:	4390                	lw	a2,0(a5)
 e82:	0791                	addi	a5,a5,4
 e84:	0711                	addi	a4,a4,4
 e86:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
 e8a:	fed79be3          	bne	a5,a3,e80 <main+0x5c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
 e8e:	01f8                	addi	a4,sp,204
 e90:	35050793          	addi	a5,a0,848
 e94:	42450613          	addi	a2,a0,1060
 e98:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
 e9a:	438c                	lw	a1,0(a5)
 e9c:	0791                	addi	a5,a5,4
 e9e:	0711                	addi	a4,a4,4
 ea0:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
 ea4:	fec79be3          	bne	a5,a2,e9a <main+0x76>
 ea8:	06b0                	addi	a2,sp,840
 eaa:	4fc50513          	addi	a0,a0,1276
 eae:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
 eb0:	4398                	lw	a4,0(a5)
 eb2:	0791                	addi	a5,a5,4
 eb4:	0611                	addi	a2,a2,4
 eb6:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
 eba:	fea79be3          	bne	a5,a0,eb0 <main+0x8c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
 ebe:	8742                	mv	a4,a6
 ec0:	0070                	addi	a2,sp,12
 ec2:	06500593          	li	a1,101
 ec6:	03500513          	li	a0,53
 eca:	3911                	jal	ade <ntru_encyrpt>
 ecc:	87aa                	mv	a5,a0
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
 ece:	06500613          	li	a2,101
 ed2:	458d                	li	a1,3
 ed4:	34810813          	addi	a6,sp,840
 ed8:	8726                	mv	a4,s1
 eda:	1314                	addi	a3,sp,416
 edc:	03500513          	li	a0,53
 ee0:	3151                	jal	b64 <ntru_deceypt>
 ee2:	4781                	li	a5,0
 //           printf("!!ERROR!!\n");
            resultkon[0] = 0xB;
            break;	}
        else{
  //          printf("**OPERATION SUCCCESSFUL**\n");
            resultkon[0] = 0xC;}
 ee4:	45b1                	li	a1,12
    for(i = 0; i < 32; ++i){
 ee6:	08000613          	li	a2,128
        if(!(message[i] == Dec_Message[i])){
 eea:	0074                	addi	a3,sp,12
 eec:	00f50733          	add	a4,a0,a5
 ef0:	96be                	add	a3,a3,a5
 ef2:	4294                	lw	a3,0(a3)
 ef4:	4318                	lw	a4,0(a4)
 ef6:	00e68e63          	beq	a3,a4,f12 <main+0xee>
            resultkon[0] = 0xB;
 efa:	47ad                	li	a5,11
 efc:	c01c                	sw	a5,0(s0)
 //   printf("RESULT = %d\n",resultkon);
  //  printf("Time Result = %f clocks\n",cpu_time_used);


    return 0;
}
 efe:	42c12083          	lw	ra,1068(sp)
 f02:	42812403          	lw	s0,1064(sp)
 f06:	42412483          	lw	s1,1060(sp)
 f0a:	4501                	li	a0,0
 f0c:	43010113          	addi	sp,sp,1072
 f10:	8082                	ret
            resultkon[0] = 0xC;}
 f12:	c00c                	sw	a1,0(s0)
    for(i = 0; i < 32; ++i){
 f14:	0791                	addi	a5,a5,4
 f16:	fcc79ae3          	bne	a5,a2,eea <main+0xc6>
 f1a:	b7d5                	j	efe <main+0xda>

00000f1c <__CTOR_LIST__>:
	...

00000f24 <__CTOR_END__>:
	...

Disassembly of section .rodata:

00000f2c <.rodata>:
     f2c:	0001                	nop
     f2e:	0000                	unimp
     f30:	ffff                	0xffff
     f32:	ffff                	0xffff
     f34:	0000                	unimp
     f36:	0000                	unimp
     f38:	0001                	nop
     f3a:	0000                	unimp
     f3c:	ffff                	0xffff
     f3e:	ffff                	0xffff
     f40:	0001                	nop
     f42:	0000                	unimp
     f44:	ffff                	0xffff
     f46:	ffff                	0xffff
     f48:	0000                	unimp
     f4a:	0000                	unimp
     f4c:	0001                	nop
     f4e:	0000                	unimp
     f50:	0001                	nop
     f52:	0000                	unimp
     f54:	0000                	unimp
     f56:	0000                	unimp
     f58:	ffff                	0xffff
     f5a:	ffff                	0xffff
     f5c:	0001                	nop
     f5e:	0000                	unimp
     f60:	ffff                	0xffff
     f62:	ffff                	0xffff
     f64:	0001                	nop
     f66:	0000                	unimp
     f68:	0000                	unimp
     f6a:	0000                	unimp
     f6c:	0001                	nop
     f6e:	0000                	unimp
     f70:	0001                	nop
     f72:	0000                	unimp
     f74:	0000                	unimp
     f76:	0000                	unimp
     f78:	ffff                	0xffff
     f7a:	ffff                	0xffff
     f7c:	0001                	nop
     f7e:	0000                	unimp
     f80:	ffff                	0xffff
     f82:	ffff                	0xffff
     f84:	0001                	nop
     f86:	0000                	unimp
     f88:	0000                	unimp
     f8a:	0000                	unimp
     f8c:	0001                	nop
     f8e:	0000                	unimp
     f90:	0001                	nop
     f92:	0000                	unimp
     f94:	0000                	unimp
     f96:	0000                	unimp
     f98:	0001                	nop
     f9a:	0000                	unimp
     f9c:	ffff                	0xffff
     f9e:	ffff                	0xffff
     fa0:	0001                	nop
     fa2:	0000                	unimp
     fa4:	ffff                	0xffff
     fa6:	ffff                	0xffff
     fa8:	0000                	unimp
     faa:	0000                	unimp
     fac:	0001                	nop
     fae:	0000                	unimp
     fb0:	ffff                	0xffff
     fb2:	ffff                	0xffff
     fb4:	0000                	unimp
     fb6:	0000                	unimp
     fb8:	0001                	nop
     fba:	0000                	unimp
     fbc:	ffff                	0xffff
     fbe:	ffff                	0xffff
     fc0:	0001                	nop
     fc2:	0000                	unimp
     fc4:	ffff                	0xffff
     fc6:	ffff                	0xffff
     fc8:	0000                	unimp
     fca:	0000                	unimp
     fcc:	0001                	nop
     fce:	0000                	unimp
     fd0:	0001                	nop
     fd2:	0000                	unimp
     fd4:	0000                	unimp
     fd6:	0000                	unimp
     fd8:	ffff                	0xffff
     fda:	ffff                	0xffff
     fdc:	0001                	nop
     fde:	0000                	unimp
     fe0:	ffff                	0xffff
     fe2:	ffff                	0xffff
     fe4:	0001                	nop
     fe6:	0000                	unimp
     fe8:	0000                	unimp
     fea:	0000                	unimp
     fec:	0001                	nop
     fee:	0000                	unimp
     ff0:	0001                	nop
     ff2:	0000                	unimp
     ff4:	0002                	c.slli64	zero
     ff6:	0000                	unimp
     ff8:	0001                	nop
     ffa:	0000                	unimp
     ffc:	0001                	nop
     ffe:	0000                	unimp
    1000:	0001                	nop
    1002:	0000                	unimp
    1004:	0001                	nop
    1006:	0000                	unimp
    1008:	0002                	c.slli64	zero
    100a:	0000                	unimp
    100c:	0001                	nop
    100e:	0000                	unimp
    1010:	0001                	nop
    1012:	0000                	unimp
    1014:	0000                	unimp
    1016:	0000                	unimp
    1018:	0001                	nop
    101a:	0000                	unimp
    101c:	0001                	nop
    101e:	0000                	unimp
    1020:	0002                	c.slli64	zero
    1022:	0000                	unimp
    1024:	0001                	nop
    1026:	0000                	unimp
    1028:	0000                	unimp
    102a:	0000                	unimp
    102c:	0001                	nop
    102e:	0000                	unimp
    1030:	0002                	c.slli64	zero
    1032:	0000                	unimp
    1034:	0000                	unimp
    1036:	0000                	unimp
    1038:	0001                	nop
    103a:	0000                	unimp
    103c:	0001                	nop
    103e:	0000                	unimp
    1040:	0001                	nop
    1042:	0000                	unimp
    1044:	0001                	nop
    1046:	0000                	unimp
    1048:	0000                	unimp
    104a:	0000                	unimp
    104c:	0001                	nop
    104e:	0000                	unimp
    1050:	0001                	nop
    1052:	0000                	unimp
    1054:	0000                	unimp
    1056:	0000                	unimp
    1058:	0002                	c.slli64	zero
    105a:	0000                	unimp
    105c:	0001                	nop
    105e:	0000                	unimp
    1060:	0002                	c.slli64	zero
    1062:	0000                	unimp
    1064:	0001                	nop
    1066:	0000                	unimp
    1068:	0000                	unimp
    106a:	0000                	unimp
    106c:	0001                	nop
    106e:	0000                	unimp
    1070:	0001                	nop
    1072:	0000                	unimp
    1074:	0002                	c.slli64	zero
    1076:	0000                	unimp
    1078:	0001                	nop
    107a:	0000                	unimp
    107c:	0001                	nop
    107e:	0000                	unimp
    1080:	0001                	nop
    1082:	0000                	unimp
    1084:	0001                	nop
    1086:	0000                	unimp
    1088:	0002                	c.slli64	zero
    108a:	0000                	unimp
    108c:	0001                	nop
    108e:	0000                	unimp
    1090:	0001                	nop
    1092:	0000                	unimp
    1094:	0002                	c.slli64	zero
    1096:	0000                	unimp
    1098:	0001                	nop
    109a:	0000                	unimp
    109c:	0001                	nop
    109e:	0000                	unimp
    10a0:	0001                	nop
    10a2:	0000                	unimp
    10a4:	0001                	nop
    10a6:	0000                	unimp
    10a8:	0002                	c.slli64	zero
	...

Disassembly of section .bss:

000010ac <_bss_start>:
	...

00001304 <product2>:
	...

0000155c <result>:
	...

000017b4 <ti_2>:
	...

00001944 <random_keys>:
	...

00001e3c <resultkon>:
volatile int resultkon[1];
    1e3c:	0000                	unimp
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	1f11                	addi	t5,t5,-28
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	0611                	addi	a2,a2,4
       e:	0000                	unimp
      10:	3a0c                	fld	fa1,48(a2)
      12:	87000003          	lb	zero,-1936(zero) # fffff870 <_stack_start+0xfffef870>
      16:	18000003          	lb	zero,384(zero) # 180 <polymult+0x58>
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	048d                	addi	s1,s1,3
      2a:	0000                	unimp
      2c:	0102                	c.slli64	sp
      2e:	8b08                	0x8b08
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	04ac                	addi	a1,sp,584
      38:	0000                	unimp
      3a:	0202                	c.slli64	tp
      3c:	0002cb07          	flq	fs6,0(t0) # e0a <memset+0x8e>
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	00fd                	addi	ra,ra,31
      46:	0000                	unimp
      48:	0402                	c.slli64	s0
      4a:	00007a07          	0x7a07
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00f8                	addi	a4,sp,76
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00007507          	0x7507
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	007f                	0x7f
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	e404                	fsw	fs1,8(s0)
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	030e                	slli	t1,t1,0x3
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
  jal x0, reset_handler
      80:	0069                	c.nop	26
      82:	0000                	unimp
  jal x0, default_exc_handler
      84:	3f06                	fld	ft10,96(sp)
      86:	0004                	0x4
  jal x0, default_exc_handler
      88:	0300                	addi	s0,sp,384
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	7f06                	flw	ft10,96(sp)
    for(i=0;i<(length/3);i++) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	b106                	fsd	ft1,160(sp)
      9e:	0006                	c.slli	zero,0x1
}
      a0:	0300                	addi	s0,sp,384
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	005d1793          	slli	a5,s10,0x5
    asm volatile(
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
    for(i=0;i<(length/3);i++) {
      b0:	0800                	addi	s0,sp,16
      b2:	0308                	addi	a0,sp,384
    asm volatile(
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
    for(i=0;i<(length/3);i++) {
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
      be:	0000022f          	0x22f
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
}
      c8:	0000                	unimp
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      ca:	2c09                	jal	2dc <polymult+0x1b4>
      cc:	0000                	unimp
    asm volatile(
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      d8:	080b0003          	lb	zero,128(s6)
    asm volatile(
      dc:	fe09a203          	lw	tp,-32(s3)
}
      e0:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      e2:	0c00                	addi	s0,sp,528
      e4:	0569                	addi	a0,a0,26
      e6:	0000                	unimp
      e8:	5d07a403          	lw	s0,1488(a5)
      ec:	0000                	unimp
      ee:	0000                	unimp
}
      f0:	710c                	flw	fa1,32(a0)
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
    asm volatile(
      f6:	05a9                	addi	a1,a1,10
      f8:	00a8                	addi	a0,sp,72
      fa:	0000                	unimp
      fc:	0004                	0x4
      fe:	dc06                	sw	ra,56(sp)
    for(i=0;i<(length/3);i++) {
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
    asm volatile(
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
}
     108:	0000                	unimp
    for(i=0;i<(length/3);i++) {
     10a:	040d                	addi	s0,s0,3
     10c:	da06                	sw	ra,52(sp)
     10e:	0005                	c.nop	1
    asm volatile(
     110:	0400                	addi	s0,sp,512
    for(i=0;i<(length/3);i++) {
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
     116:	0000                	unimp
}
     118:	6f06                	flw	ft10,64(sp)
    asm volatile(
     11a:	0004                	0x4
     11c:	0500                	addi	s0,sp,640
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
     122:	0000                	unimp
    for(i=0;i<(length/3);i++) {
     124:	e706                	fsw	ft1,140(sp)
     126:	0001                	nop
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	0400                	addi	s0,sp,512
     12a:	01181b23          	sh	a7,22(a6)
     12e:	0000                	unimp
    int line[size_b][size_a + size_b];
     130:	f80e                	fsw	ft3,48(sp)
     132:	0001                	nop
     134:	1800                	addi	s0,sp,48
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     136:	3404                	fld	fs1,40(s0)
     138:	8a08                	0x8a08
    int line[size_b][size_a + size_b];
     13a:	0001                	nop
     13c:	0c00                	addi	s0,sp,528
     13e:	04fd                	addi	s1,s1,31
     140:	0000                	unimp
     142:	3604                	fld	fs1,40(a2)
     144:	00018a13          	mv	s4,gp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     148:	0000                	unimp
    int pola[size_a];
     14a:	006b5f0f          	0x6b5f0f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     14e:	3704                	fld	fs1,40(a4)
     150:	00005d07          	0x5d07
     154:	0400                	addi	s0,sp,512
     156:	450c                	lw	a1,8(a0)
     158:	0005                	c.nop	1
    int line[size_b][size_a + size_b];
     15a:	0400                	addi	s0,sp,512
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     15c:	005d0b37          	lui	s6,0x5d0
     160:	0000                	unimp
    int line[size_b][size_a + size_b];
     162:	0c08                	addi	a0,sp,528
    int pola[size_a];
     164:	01e1                	addi	gp,gp,24
     166:	0000                	unimp
    int line[size_b][size_a + size_b];
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
     16c:	0000                	unimp
    int pola[size_a];
     16e:	0c00                	addi	s0,sp,528
     170:	850c                	0x850c
    int polb[size_b];
     172:	0006                	c.slli	zero,0x1
     174:	0400                	addi	s0,sp,512
     176:	005d1b37          	lui	s6,0x5d1
     17a:	0000                	unimp
     17c:	0f10                	addi	a2,sp,912
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     17e:	785f 0400 0b38      	0xb380400785f
     184:	0190                	addi	a2,sp,192
    int line[size_b][size_a + size_b];
     186:	0000                	unimp
     188:	0014                	0x14
    int polb[size_b];
     18a:	0410                	addi	a2,sp,512
            line[i][j] = 0;
     18c:	0130                	addi	a2,sp,136
     18e:	0000                	unimp
     190:	0c09                	addi	s8,s8,2
    for (i = 0; i < size_b; ++i){
     192:	0001                	nop
     194:	a000                	fsd	fs0,0(s0)
            product[j] = 0;
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     19e:	0000                	unimp
     1a0:	1f0e                	slli	t5,t5,0x23
    array_equ(pola,a,size_a);
     1a2:	0002                	c.slli64	zero
     1a4:	2400                	fld	fs0,8(s0)
     1a6:	3c04                	fld	fs1,56(s0)
     1a8:	2308                	fld	fa0,0(a4)
     1aa:	0002                	c.slli64	zero
     1ac:	0c00                	addi	s0,sp,528
     1ae:	000000ef          	jal	ra,1ae <polymult+0x86>
     1b2:	3e04                	fld	fs1,56(a2)
     1b4:	5d09                	li	s10,-30
     1b6:	0000                	unimp
     1b8:	0000                	unimp
    array_mod(pola,mod,size_a);
     1ba:	8e0c                	0x8e0c
     1bc:	0005                	c.nop	1
     1be:	0400                	addi	s0,sp,512
     1c0:	005d093f 0c040000 	0xc040000005d093f
    array_equ(polb,b,size_b);
     1c8:	012c                	addi	a1,sp,136
     1ca:	0000                	unimp
     1cc:	4004                	lw	s1,0(s0)
    array_mod(polb,mod,size_b);
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
     1d2:	0800                	addi	s0,sp,16
     1d4:	2d0c                	fld	fa1,24(a0)
    if(star_mult == 1){
     1d6:	04000007          	0x4000007
     1da:	0941                	addi	s2,s2,16
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
     1e0:	0c0c                	addi	a1,sp,528
     1e2:	0409                	addi	s0,s0,2
     1e4:	0000                	unimp
     1e6:	4204                	lw	s1,0(a2)
     1e8:	5d09                	li	s10,-30
     1ea:	0000                	unimp
     1ec:	1000                	addi	s0,sp,32
     1ee:	640c                	flw	fa1,8(s0)
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
        for (j = size_b -1; j >= 0; j = j-1){
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f8:	0000                	unimp
            product[j] = 0;
     1fa:	0c14                	addi	a3,sp,528
     1fc:	068a                	slli	a3,a3,0x2
     1fe:	0000                	unimp
            line[i][j] = 0;
     200:	4404                	lw	s1,8(s0)
     202:	5d09                	li	s10,-30
            product[j] = 0;
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
        for(j = 0; j < size_a + size_b -1; ++j){
     208:	b60c                	fsd	fa1,40(a2)
     20a:	0004                	0x4
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
    for (i = 0; i < size_b; ++i){
     210:	005d                	c.nop	23
     212:	0000                	unimp
     214:	0c1c                	addi	a5,sp,528
     216:	000006ef          	jal	a3,216 <polymult+0xee>
        for(j = 0; j < size_a + size_b -1; ++j){
     21a:	4604                	lw	s1,8(a2)
    if(star_mult == 1){
     21c:	5d09                	li	s10,-30
        for (j = size_b -1; j >= 0; j = j-1){
     21e:	0000                	unimp
     220:	2000                	fld	fs0,0(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     222:	1100                	addi	s0,sp,160
    for (i = 0; i < size_b; ++i){
     224:	0000013b          	0x13b
     228:	0108                	addi	a0,sp,128
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
     22e:	0002                	c.slli64	zero
    for(j = 0; j < size_a + size_b -1; ++j){
     230:	0c00                	addi	s0,sp,528
     232:	000001c7          	fmsub.s	ft3,ft0,ft0,ft0,rne
    array_mod(product,mod,(size_a+size_b-1));
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
     23a:	0002                	c.slli64	zero
     23c:	0000                	unimp
     23e:	000c                	0xc
     240:	0000                	unimp
     242:	0400                	addi	s0,sp,512
}
     244:	0951                	addi	s2,s2,20
     246:	0268                	addi	a0,sp,268
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
     24c:	000005c3          	fmadd.s	fa1,ft0,ft0,ft0,rne
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
     254:	0001                	nop
     256:	0000                	unimp
     258:	1201                	addi	tp,tp,-32
     25a:	016a                	slli	sp,sp,0x1a
     25c:	0000                	unimp
     25e:	5604                	lw	s1,40(a2)
     260:	0c0a                	slli	s8,s8,0x2
     262:	0001                	nop
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
     268:	0a09                	addi	s4,s4,2
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
                line[size_b-1-j][k] = pola[k]*polb[j];
     26e:	0002                	c.slli64	zero
     270:	0a00                	addi	s0,sp,272
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f 2211 0004      	0x42211001f
     27c:	9000                	0x9000
            for (k = size_a-1; k >= 0; k = k-1 ){
     27e:	0401                	addi	s0,s0,0
                line[size_b-1-j][k] = pola[k]*polb[j];
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
            for (k = size_a-1; k >= 0; k = k-1 ){
     286:	fd0c                	fsw	fa1,56(a0)
     288:	0004                	0x4
        for (j = size_b -1; j >= 0; j = j-1){
     28a:	0400                	addi	s0,sp,512
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0x188>
     290:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     292:	0c00                	addi	s0,sp,528
     294:	0515                	addi	a0,a0,5
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     296:	0000                	unimp
     298:	6404                	flw	fs1,8(s0)
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
     2a0:	dc0c                	sw	a1,56(s0)
     2a2:	0001                	nop
     2a4:	0400                	addi	s0,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     2a6:	0966                	slli	s2,s2,0x19
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2a8:	02c1                	addi	t0,t0,16
     2aa:	0000                	unimp
     2ac:	0c08                	addi	a0,sp,528
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ae:	0000013b          	0x13b
        for (j = size_b -1; j >= 0; j = j-1){
     2b2:	6704                	flw	fs1,8(a4)
     2b4:	231e                	fld	ft6,448(sp)
     2b6:	0002                	c.slli64	zero
     2b8:	8800                	0x8800
            line[i][j] = line[i][j] % mod;
     2ba:	1000                	addi	s0,sp,32
        for(j = 0; j < size_a + size_b -1; ++j){
     2bc:	7804                	flw	fs1,48(s0)
     2be:	0002                	c.slli64	zero
            line[i][j] = line[i][j] % mod;
     2c0:	0900                	addi	s0,sp,144
     2c2:	02d1                	addi	t0,t0,20
     2c4:	0000                	unimp
     2c6:	02d1                	addi	t0,t0,20
        for(j = 0; j < size_a + size_b -1; ++j){
     2c8:	0000                	unimp
     2ca:	690a                	flw	fs2,128(sp)
    for (i = 0; i < size_b; ++i){
     2cc:	0000                	unimp
     2ce:	1f00                	addi	s0,sp,944
     2d0:	1000                	addi	s0,sp,32
     2d2:	d704                	sw	s1,40(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
     2d4:	0002                	c.slli64	zero
     2d6:	1300                	addi	s0,sp,416
            product[j] += line[i][j];
     2d8:	c00e                	sw	gp,0(sp)
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
        for(i = 0; i < size_b; ++i){
     2de:	7a04                	flw	fs1,48(a2)
            product[j] += line[i][j];
     2e0:	0008                	0x8
     2e2:	0c000003          	lb	zero,192(zero) # c0 <array_sub+0x6>
     2e6:	0126                	slli	sp,sp,0x9
     2e8:	0000                	unimp
     2ea:	7b04                	flw	fs1,48(a4)
        for(i = 0; i < size_b; ++i){
     2ec:	0011                	c.nop	4
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    for(j = 0; j < size_a + size_b -1; ++j){
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     2f6:	0400                	addi	s0,sp,512
     2f8:	067c                	addi	a5,sp,780
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2fa:	005d                	c.nop	23
    int line[size_b][size_a + size_b];
     2fc:	0000                	unimp
     2fe:	0004                	0x4
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     300:	0410                	addi	a2,sp,512
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
     306:	e70e                	fsw	ft3,140(sp)
     308:	0004                	0x4
    int line[size_b][size_a + size_b];
     30a:	6800                	flw	fs0,16(s0)
     30c:	ba04                	fsd	fs1,48(a2)
     30e:	4908                	lw	a0,16(a0)
     310:	0004                	0x4
     312:	0f00                	addi	s0,sp,912
     314:	705f 0400 12bb      	0x12bb0400705f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     31a:	0300                	addi	s0,sp,384
     31c:	0000                	unimp
     31e:	0f00                	addi	s0,sp,912
     320:	725f 0400 07bc      	0x7bc0400725f
     326:	005d                	c.nop	23
    int line[size_b][size_a + size_b];
     328:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     32a:	0f04                	addi	s1,sp,912
     32c:	775f 0400 07bd      	0x7bd0400775f
    int line[size_b][size_a + size_b];
     332:	005d                	c.nop	23
    int pola[size_a];
     334:	0000                	unimp
     336:	0c08                	addi	a0,sp,528
     338:	00000163          	beqz	zero,33a <polymult2+0x40>
    int line[size_b][size_a + size_b];
     33c:	be04                	fsd	fs1,56(a2)
    int pola[size_a];
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
     340:	0000                	unimp
    int polb[size_b];
     342:	0c00                	addi	s0,sp,528
     344:	5e0c                	lw	a1,56(a2)
     346:	0002                	c.slli64	zero
    int pola[size_a];
     348:	0400                	addi	s0,sp,512
    int polb[size_b];
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
    int line[size_b][size_a + size_b];
     352:	625f 0066 c004      	0xc0040066625f
    int pola[size_a];
     358:	d811                	beqz	s0,26c <polymult+0x144>
     35a:	0002                	c.slli64	zero
    int polb[size_b];
     35c:	1000                	addi	s0,sp,32
    for (i = 0; i < size_b; ++i){
     35e:	980c                	0x980c
     360:	0000                	unimp
     362:	0400                	addi	s0,sp,512
            product2[j] = 0;
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
    for (i = 0; i < size_b; ++i){
     36c:	0149                	addi	sp,sp,18
     36e:	0000                	unimp
    array_equ(pola,a,size_a);
     370:	c804                	sw	s1,16(s0)
     372:	0a0a                	slli	s4,s4,0x2
     374:	0001                	nop
     376:	1c00                	addi	s0,sp,560
     378:	0f0c                	addi	a1,sp,912
     37a:	0002                	c.slli64	zero
    array_equ(polb,b,size_b);
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
     380:	05cd                	addi	a1,a1,19
     382:	0000                	unimp
     384:	0c20                	addi	s0,sp,536
     386:	035d                	addi	t1,t1,23
    if(star_mult == 1){
     388:	0000                	unimp
     38a:	cc04                	sw	s1,24(s0)
     38c:	f71d                	bnez	a4,2ba <polymult+0x192>
     38e:	0005                	c.nop	1
     390:	2400                	fld	fs0,8(s0)
     392:	790c                	flw	fa1,48(a0)
     394:	0005                	c.nop	1
     396:	0400                	addi	s0,sp,512
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
        for (j = size_b -1; j >= 0; j = j-1){
     39c:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     39e:	0c28                	addi	a0,sp,536
     3a0:	0709                	addi	a4,a4,2
            product2[j] = 0;
     3a2:	0000                	unimp
     3a4:	d004                	sw	s1,32(s0)
     3a6:	3509                	jal	1a8 <polymult+0x80>
            line[i][j] = 0;
     3a8:	0006                	c.slli	zero,0x1
     3aa:	2c00                	fld	fs0,24(s0)
            product2[j] = 0;
     3ac:	62755f0f          	0x62755f0f
        for(j = 0; j < size_a + size_b -1; ++j){
     3b0:	0400                	addi	s0,sp,512
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
     3b6:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     3b8:	0f30                	addi	a2,sp,920
     3ba:	755f 0070 d404      	0xd4040070755f
        for(j = 0; j < size_a + size_b -1; ++j){
     3c0:	0012                	c.slli	zero,0x4
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult2+0x86>
                line[size_b-1-j][k] = pola[k]*polb[j];
     3c6:	72755f0f          	0x72755f0f
     3ca:	0400                	addi	s0,sp,512
     3cc:	07d5                	addi	a5,a5,21
     3ce:	005d                	c.nop	23
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d4:	0120                	addi	s0,sp,136
                line[size_b-1-j][k] = pola[k]*polb[j];
     3d6:	0000                	unimp
     3d8:	d804                	sw	s1,48(s0)
     3da:	3b11                	jal	ee <array_equ+0xc>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3dc:	0006                	c.slli	zero,0x1
     3de:	4000                	lw	s0,0(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     3e0:	d40c                	sw	a1,40(s0)
     3e2:	0006                	c.slli	zero,0x1
     3e4:	0400                	addi	s0,sp,512
     3e6:	11d9                	addi	gp,gp,-10
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
        array_add(product2,line[i],size_a+size_b-1);
     3ec:	6c5f0f43          	0x6c5f0f43
     3f0:	0062                	c.slli	zero,0x18
     3f2:	dc04                	sw	s1,56(s0)
    for(i=0;i<size_b;++i){
     3f4:	d811                	beqz	s0,308 <polymult2+0xe>
     3f6:	0002                	c.slli64	zero
}
     3f8:	4400                	lw	s0,8(s0)
     3fa:	790c                	flw	fa1,48(a0)
     3fc:	0001                	nop
     3fe:	0400                	addi	s0,sp,512
     400:	07df 005d 0000      	0x5d07df
     406:	0c4c                	addi	a1,sp,532
     408:	01a0                	addi	s0,sp,200
     40a:	0000                	unimp
     40c:	e004                	fsw	fs1,0(s0)
     40e:	840a                	mv	s0,sp
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
     41a:	046712e3          	bne	a4,t1,c5e <reset_handler+0x32>
     41e:	0000                	unimp
     420:	0c54                	addi	a3,sp,532
            for (k = size_a-1; k >= 0; k = k-1 ){
     422:	0334                	addi	a3,sp,392
     424:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
     42a:	0001                	nop
     42c:	5800                	lw	s0,48(s0)
     42e:	ef0c                	fsw	fa1,24(a4)
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
     434:	0ee9                	addi	t4,t4,26
            for (k = size_a-1; k >= 0; k = k-1 ){
     436:	00fe                	slli	ra,ra,0x1f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     438:	0000                	unimp
     43a:	0c5c                	addi	a5,sp,532
     43c:	000004c7          	fmsub.s	fs1,ft0,ft0,ft0,rne
            for (k = size_a-1; k >= 0; k = k-1 ){
     440:	ea04                	fsw	fs1,16(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
     448:	1400                	addi	s0,sp,544
        array_add(product2,line[i],size_a+size_b-1);
     44a:	009c                	addi	a5,sp,64
     44c:	0000                	unimp
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
    for(i=0;i<size_b;++i){
     452:	6715                	lui	a4,0x5
     454:	0004                	0x4
     456:	1500                	addi	s0,sp,672
    int v[size_N];
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     45c:	bb15                	j	190 <polymult+0x68>
    int v[size_N];
     45e:	0005                	c.nop	1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     460:	1500                	addi	s0,sp,672
     462:	005d                	c.nop	23
     464:	0000                	unimp
     466:	1000                	addi	s0,sp,32
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
     46c:	1600                	addi	s0,sp,800
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     472:	00054d17          	auipc	s10,0x54
     476:	2800                	fld	fs0,16(s0)
     478:	0404                	addi	s1,sp,512
    int v[size_N];
     47a:	0265                	addi	tp,tp,25
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     47c:	bb08                	fsd	fa0,48(a4)
    int v[size_N];
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
     482:	04a5                	addi	s1,s1,9
    int q[size_N];
     484:	0000                	unimp
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
    int num_temp[size_N];
     48a:	005d                	c.nop	23
     48c:	0000                	unimp
    int denum_temp[size_D];
     48e:	1800                	addi	s0,sp,48
     490:	0172                	slli	sp,sp,0x1c
     492:	0000                	unimp
     494:	6c04                	flw	fs1,24(s0)
    int num_temp[size_N];
     496:	0b02                	c.slli64	s6
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     498:	000006a7          	0x6a7
    int denum_temp[size_D];
     49c:	1804                	addi	s1,sp,48
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     49e:	0240                	addi	s0,sp,260
    int v[size_N];
     4a0:	0000                	unimp
     4a2:	6c04                	flw	fs1,24(s0)
    array_equ(num_temp,num,size_N);
     4a4:	1402                	slli	s0,s0,0x20
     4a6:	000006a7          	0x6a7
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4aa:	1808                	addi	a0,sp,48
     4ac:	01f0                	addi	a2,sp,204
    int denum_temp[size_D];
     4ae:	0000                	unimp
     4b0:	6c04                	flw	fs1,24(s0)
    array_equ(num_temp,num,size_N);
     4b2:	1e02                	slli	t3,t3,0x20
    array_mod(num_temp,mod,size_N);
     4b4:	000006a7          	0x6a7
     4b8:	180c                	addi	a1,sp,48
     4ba:	0510                	addi	a2,sp,640
    int denum_temp[size_D];
     4bc:	0000                	unimp
    array_equ(denum_temp,denum,size_D);
     4be:	6e04                	flw	fs1,24(a2)
     4c0:	0802                	c.slli64	a6
     4c2:	005d                	c.nop	23
     4c4:	0000                	unimp
    array_mod(denum_temp,mod,size_D);
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
    for (i = 0; i < size_N; ++i){
     4ce:	0802                	c.slli64	a6
     4d0:	000008a7          	0x8a7
    for (i = size_D-1; i >= 0; i = i-1){
     4d4:	1814                	addi	a3,sp,48
     4d6:	052c                	addi	a1,sp,648
     4d8:	0000                	unimp
     4da:	7204                	flw	fs1,32(a2)
     4dc:	0702                	c.slli64	a4
     4de:	005d                	c.nop	23
    for (i = 0; i < size_N; ++i){
     4e0:	0000                	unimp
     4e2:	1830                	addi	a2,sp,56
        if ( (b_N*u)%mod == 1 )
     4e4:	051a                	slli	a0,a0,0x6
    for (u = 0; u < mod; ++u){
     4e6:	0000                	unimp
     4e8:	7304                	flw	fs1,32(a4)
     4ea:	1602                	slli	a2,a2,0x20
     4ec:	08bc                	addi	a5,sp,88
        q[i] = 0;
     4ee:	0000                	unimp
     4f0:	1834                	addi	a3,sp,56
     4f2:	0434                	addi	a3,sp,520
     4f4:	0000                	unimp
        v[i] = 0;
     4f6:	7504                	flw	fs1,40(a0)
        q[i] = 0;
     4f8:	0702                	c.slli64	a4
     4fa:	005d                	c.nop	23
        v[i] = 0;
     4fc:	0000                	unimp
     4fe:	1838                	addi	a4,sp,56
    for (i = 0; i < size_N; ++i){
     500:	0522                	slli	a0,a0,0x8
     502:	0000                	unimp
        if( denum_temp[i] != 0 )
     504:	7704                	flw	fs1,40(a4)
    for (i = size_D-1; i >= 0; i = i-1){
     506:	0a02                	c.slli64	s4
     508:	08cd                	addi	a7,a7,19
        if ( (b_N*u)%mod == 1 )
     50a:	0000                	unimp
     50c:	183c                	addi	a5,sp,56
     50e:	0300                	addi	s0,sp,384
     510:	0000                	unimp
     512:	7a04                	flw	fs1,48(a2)
    for (u = 0; u < mod; ++u){
     514:	1302                	slli	t1,t1,0x20
     516:	018a                	slli	gp,gp,0x2
        if( num_temp[i] != 0 )
     518:	0000                	unimp
    for (i = size_N-1; i >= 0; i = i-1){
     51a:	1840                	addi	s0,sp,52
     51c:	0215                	addi	tp,tp,5
     51e:	0000                	unimp
     520:	7b04                	flw	fs1,48(a4)
     522:	0702                	c.slli64	a4
     524:	005d                	c.nop	23
     526:	0000                	unimp
    while (d >= d2){
     528:	1844                	addi	s1,sp,52
     52a:	00000723          	sb	zero,14(zero) # e <__DYNAMIC+0xe>
    array_equ(result,q,size_N);
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
     536:	1848                	addi	a0,sp,52
     538:	0000045b          	0x45b
    for(i = size_N; i < (2*size_N); ++i){
     53c:	7d04                	flw	fs1,56(a0)
        result[i] = num_temp[i-size_N];
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
     544:	184c                	addi	a1,sp,52
    for(i = size_N; i < (2*size_N); ++i){
     546:	0248                	addi	a0,sp,260
     548:	0000                	unimp
}
     54a:	8004                	0x8004
     54c:	0702                	c.slli64	a4
     54e:	005d                	c.nop	23
     550:	0000                	unimp
     552:	1850                	addi	a2,sp,52
     554:	0198                	addi	a4,sp,192
     556:	0000                	unimp
     558:	8104                	0x8104
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
     560:	1854                	addi	a3,sp,52
     562:	049e                	slli	s1,s1,0x7
     564:	0000                	unimp
     566:	a404                	fsd	fs1,8(s0)
     568:	0702                	c.slli64	a4
     56a:	0882                	c.slli64	a7
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
     570:	0422                	slli	s0,s0,0x8
     572:	0000                	unimp
        v[(d-d2)] = u*r_d;
     574:	a804                	fsd	fs1,16(s0)
     576:	1302                	slli	t1,t1,0x20
     578:	000002bb          	0x2bb
     57c:	0148                	addi	a0,sp,132
     57e:	de19                	beqz	a2,49c <polydiv+0x44>
    array_mod(v,mod,size_N);
     580:	0002                	c.slli64	zero
     582:	0400                	addi	s0,sp,512
     584:	02a9                	addi	t0,t0,10
        v[(d-d2)] = u*r_d;
     586:	7812                	flw	fa6,36(sp)
    array_mod(v,mod,size_N);
     588:	0002                	c.slli64	zero
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     58a:	4c00                	lw	s0,24(s0)
     58c:	1901                	addi	s2,s2,-32
     58e:	06ca                	slli	a3,a3,0x12
     590:	0000                	unimp
     592:	ad04                	fsd	fs1,24(a0)
     594:	0c02                	c.slli64	s8
     596:	08e4                	addi	s1,sp,92
    array_mod(product,mod,size_N);
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     59c:	5119                	li	sp,-26
    array_mod(product,mod,size_N);
     59e:	0001                	nop
    array_sub(num_temp,product,size_N);
     5a0:	0400                	addi	s0,sp,512
     5a2:	02b2                	slli	t0,t0,0xc
     5a4:	6810                	flw	fa2,16(s0)
     5a6:	0006                	c.slli	zero,0x1
    array_mod(num_temp,mod,size_N);
     5a8:	e000                	fsw	fs0,0(s0)
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	0136                	slli	sp,sp,0xd
     5ae:	0000                	unimp
    array_add(q,v,size_N);
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
    array_mod(q,mod,size_N);
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
     5bc:	c104                	sw	s1,0(a0)
     5be:	0005                	c.nop	1
        for (i = size_N-1; i >= 0; i = i-1){
     5c0:	0200                	addi	s0,sp,256
     5c2:	0801                	addi	a6,a6,0
     5c4:	0494                	addi	a3,sp,576
     5c6:	0000                	unimp
     5c8:	c116                	sw	t0,128(sp)
     5ca:	0005                	c.nop	1
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
     5d0:	0004                	0x4
            if( num_temp[i] != 0 )
     5d2:	1400                	addi	s0,sp,544
        for (i = size_N-1; i >= 0; i = i-1){
     5d4:	009c                	addi	a5,sp,64
     5d6:	0000                	unimp
            v[i] = 0;
     5d8:	05f1                	addi	a1,a1,28
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
     5de:	0004                	0x4
     5e0:	1500                	addi	s0,sp,672
        for (i = 0; i < size_N; ++i){
     5e2:	010a                	slli	sp,sp,0x2
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polydiv+0xb2>
     5e8:	0005                	c.nop	1
        result[i] = num_temp[i-size_N];
     5ea:	1500                	addi	s0,sp,672
     5ec:	005d                	c.nop	23
     5ee:	0000                	unimp
     5f0:	1000                	addi	s0,sp,32
     5f2:	c804                	sw	s1,16(s0)
     5f4:	0005                	c.nop	1
    for(i = size_N; i < (2*size_N); ++i){
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
     5fa:	0005                	c.nop	1
    int ri_2[size]; // MX-ring poly, a
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     600:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     602:	0000061b          	0x61b
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     606:	6715                	lui	a4,0x5
     608:	0004                	0x4
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
     610:	9015                	srli	s0,s0,0x25
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
     616:	005d                	c.nop	23
     618:	0000                	unimp
     61a:	1000                	addi	s0,sp,32
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
     620:	1400                	addi	s0,sp,544
    int ri_2[size]; // MX-ring poly, a
     622:	005d                	c.nop	23
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
    int ri_1[size]; // f-random poly, f[N] = 0, b
     628:	0000                	unimp
     62a:	6715                	lui	a4,0x5
     62c:	0004                	0x4
    int ri[size];
     62e:	1500                	addi	s0,sp,672
     630:	010a                	slli	sp,sp,0x2
     632:	0000                	unimp
    int ti_1[size]; // ti_1[0] = 1
     634:	1000                	addi	s0,sp,32
     636:	2104                	fld	fs1,0(a0)
     638:	0006                	c.slli	zero,0x1
    int ti[size];
     63a:	0900                	addi	s0,sp,144
     63c:	002c                	addi	a1,sp,8
     63e:	0000                	unimp
    int qi_1[size];
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     644:	690a                	flw	fs2,128(sp)
    int temp[size];
     646:	0000                	unimp
     648:	0200                	addi	s0,sp,256
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     64a:	0900                	addi	s0,sp,144
     64c:	002c                	addi	a1,sp,8
     64e:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     650:	0000065b          	0x65b
    int temp[size];
     654:	690a                	flw	fs2,128(sp)
    for (i = 0; i < size; ++i) {
     656:	0000                	unimp
        ti_2[i] = 0;
     658:	0000                	unimp
     65a:	0500                	addi	s0,sp,640
     65c:	04d5                	addi	s1,s1,21
     65e:	0000                	unimp
    for (i = 0; i < size; ++i) {
     660:	2404                	fld	fs1,8(s0)
     662:	1a01                	addi	s4,s4,-32
    array_equ(ri_2,polyR,size);
     664:	0306                	slli	t1,t1,0x1
     666:	0000                	unimp
     668:	941a                	add	s0,s0,t1
     66a:	0006                	c.slli	zero,0x1
    array_equ(ri_1,polyf,size);
     66c:	0c00                	addi	s0,sp,528
     66e:	2804                	fld	fs1,16(s0)
     670:	0801                	addi	a6,a6,0
     672:	06a1                	addi	a3,a3,8
    ti_1[0] = 1;
     674:	0000                	unimp
     676:	fd18                	fsw	fa4,56(a0)
     678:	0004                	0x4
        for (i = N + 1; i < (2 * N + 2); ++i) {
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <generate_keys+0x296>
     680:	0006                	c.slli	zero,0x1
    array_equ(ti,ti_2,size);
     682:	0000                	unimp
     684:	a418                	fsd	fa4,8(s0)
     686:	0002                	c.slli64	zero
     688:	0400                	addi	s0,sp,512
    array_mod(ri_2,mod,size);
     68a:	5d07012b          	0x5d07012b
     68e:	0000                	unimp
     690:	0400                	addi	s0,sp,512
    array_mod(ri_1,mod,size);
     692:	cf18                	sw	a4,24(a4)
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
     698:	012c                	addi	a1,sp,136
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     69a:	0006a70b          	0x6a70b
     69e:	0800                	addi	s0,sp,16
     6a0:	1000                	addi	s0,sp,32
     6a2:	6804                	flw	fs1,16(s0)
     6a4:	0006                	c.slli	zero,0x1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6a6:	1000                	addi	s0,sp,32
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
     6ac:	1a00                	addi	s0,sp,304
     6ae:	00000017          	auipc	zero,0x0
    array_equ(temp,ri_2,size);
     6b2:	040e                	slli	s0,s0,0x3
     6b4:	0144                	addi	s1,sp,132
     6b6:	e608                	fsw	fa0,8(a2)
     6b8:	0006                	c.slli	zero,0x1
    array_sub(temp,ri,size);
     6ba:	1800                	addi	s0,sp,48
     6bc:	055e                	slli	a0,a0,0x17
     6be:	0000                	unimp
     6c0:	4504                	lw	s1,8(a0)
    array_mod(temp,mod,size);
     6c2:	1201                	addi	tp,tp,-32
     6c4:	06e6                	slli	a3,a3,0x19
     6c6:	0000                	unimp
     6c8:	1800                	addi	s0,sp,48
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     6ca:	0558                	addi	a4,sp,644
     6cc:	0000                	unimp
     6ce:	4604                	lw	s1,8(a2)
     6d0:	1201                	addi	tp,tp,-32
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
     6d6:	1806                	slli	a6,a6,0x21
    array_equ(qi_1,res1,size);
     6d8:	0000003f 12014704 	0x120147040000003f
    array_mod(qi_1,mod,size);
     6e0:	003a                	c.slli	zero,0xe
     6e2:	0000                	unimp
     6e4:	000c                	0xc
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
     6e8:	0000                	unimp
     6ea:	f600                	fsw	fs0,40(a2)
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
     6f2:	0000                	unimp
     6f4:	0002                	c.slli64	zero
    array_equ(temp,res2,size);
     6f6:	8504d01b          	0x8504d01b
     6fa:	0702                	c.slli64	a4
    array_mod(temp,mod,size);
     6fc:	0000080b          	0x80b
     700:	7318                	flw	fa4,32(a4)
     702:	0006                	c.slli	zero,0x1
    array_equ(ti,ti_2,size);
     704:	0400                	addi	s0,sp,512
     706:	69180287          	0x69180287
     70a:	0000                	unimp
    array_sub(ti,temp,size);
     70c:	0000                	unimp
     70e:	b618                	fsd	fa4,40(a2)
     710:	0005                	c.nop	1
     712:	0400                	addi	s0,sp,512
    array_mod(ti,mod,size);
     714:	0288                	addi	a0,sp,320
     716:	bb12                	fsd	ft4,432(sp)
     718:	0005                	c.nop	1
     71a:	0400                	addi	s0,sp,512
array_equ(ri_2,ri_1,size);
     71c:	f318                	fsw	fa4,32(a4)
     71e:	0002                	c.slli64	zero
     720:	0400                	addi	s0,sp,512
     722:	0289                	addi	t0,t0,2
array_equ(ri_1,ri,size);
     724:	0b10                	addi	a2,sp,400
     726:	0008                	0x8
     728:	0800                	addi	s0,sp,16
     72a:	fa18                	fsw	fa4,48(a2)
array_equ(ti_2,ti_1,size);
     72c:	0006                	c.slli	zero,0x1
     72e:	0400                	addi	s0,sp,512
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
array_equ(ti_1,ti,size);
     736:	2400                	fld	fs0,8(s0)
     738:	0018                	0x18
     73a:	0002                	c.slli64	zero
        controlR = 0;
     73c:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     73e:	5d0f028b          	0x5d0f028b
     742:	0000                	unimp
    while (controlR != 0) {
     744:	4800                	lw	s0,16(s0)
     746:	f818                	fsw	fa4,48(s0)
        for (j = 0; j < mod; ++j) {
     748:	0004                	0x4
            if (((ri_2[0] * j) % mod) == 1)
     74a:	0400                	addi	s0,sp,512
        for (j = 0; j < mod; ++j) {
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
     750:	0000                	unimp
     752:	5000                	lw	s0,32(s0)
     754:	1018                	addi	a4,sp,32
     756:	04000007          	0x4000007
        for (i = 0; i < N + 1; ++i) {
     75a:	028d                	addi	t0,t0,3
    }
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
     760:	5800                	lw	s0,48(s0)
     762:	0318                	addi	a4,sp,384
     764:	0005                	c.nop	1
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
     76a:	fe16                	fsw	ft5,60(sp)
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
     770:	1518                	addi	a4,sp,672
     772:	04000007          	0x4000007
     776:	fe16028f          	0xfe16028f
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
     77e:	e118                	fsw	fa4,0(a0)
     780:	0000                	unimp
     782:	0400                	addi	s0,sp,512
     784:	0290                	addi	a2,sp,320
        ti_2[i] = 0;
     786:	fe16                	fsw	ft5,60(sp)
     788:	0000                	unimp
     78a:	7800                	flw	fs0,48(s0)
     78c:	ba18                	fsd	fa4,48(a2)
        ti_1[i] = 0;
     78e:	0006                	c.slli	zero,0x1
        ti_2[i] = 0;
     790:	0400                	addi	s0,sp,512
     792:	0291                	addi	t0,t0,4
        ti_1[i] = 0;
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
    for (i = 0; i < size; ++i) {
     798:	8000                	0x8000
     79a:	e718                	fsw	fa4,8(a4)
            ri[i - (N + 1)] = res[i];
     79c:	0002                	c.slli64	zero
     79e:	0400                	addi	s0,sp,512
     7a0:	0292                	slli	t0,t0,0x4
     7a2:	2b10                	fld	fa2,16(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7a4:	0008                	0x8
     7a6:	8800                	0x8800
            ri[i - (N + 1)] = res[i];
     7a8:	e718                	fsw	fa4,8(a4)
     7aa:	0005                	c.nop	1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7ac:	0400                	addi	s0,sp,512
              qi_1[i] = 0;
     7ae:	5d0f0293          	addi	t0,t5,1488
     7b2:	0000                	unimp
     7b4:	a000                	fsd	fs0,0(s0)
            controlR += ri[i];
     7b6:	b918                	fsd	fa4,48(a0)
     7b8:	0001                	nop
              qi_1[i] = 0;
     7ba:	0400                	addi	s0,sp,512
     7bc:	0294                	addi	a3,sp,320
        for (i = 0; i < N + 1; ++i) {
     7be:	fe16                	fsw	ft5,60(sp)
            controlR += ri[i];
     7c0:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7c2:	a400                	fsd	fs0,8(s0)
            if (((ri_2[0] * j) % mod) == 1)
     7c4:	d218                	sw	a4,32(a2)
     7c6:	0000                	unimp
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
     7d0:	ac00                	fsd	fs0,24(s0)
     7d2:	a818                	fsd	fa4,16(s0)
        for (j = 0; j < mod; ++j) {
     7d4:	0001                	nop
     7d6:	0400                	addi	s0,sp,512
            ti_2[i] = (ti_2[i] * j) % mod;
     7d8:	0296                	slli	t0,t0,0x5
        for (i = 0; i < N + 1; ++i) {
     7da:	fe16                	fsw	ft5,60(sp)
     7dc:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;
     7de:	b400                	fsd	fs0,40(s0)
     7e0:	4418                	lw	a4,8(s0)
     7e2:	0000                	unimp
     7e4:	0400                	addi	s0,sp,512
     7e6:	fe160297          	auipc	t0,0xfe160
        for (i = 0; i < N + 1; ++i) {
     7ea:	0000                	unimp
int* generate_keys(int N, int p, int q){
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	5318                	lw	a4,32(a4)
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
     7fc:	a318                	fsd	fa4,0(a4)
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
     802:	0299                	addi	t0,t0,6
     804:	5d08                	lw	a0,56(a0)
     806:	0000                	unimp
     808:	cc00                	sw	s0,24(s0)
     80a:	0900                	addi	s0,sp,144
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
     810:	0000081b          	0x81b
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
     818:	1900                	addi	s0,sp,176
     81a:	0900                	addi	s0,sp,144
     81c:	05c1                	addi	a1,a1,16
     81e:	0000                	unimp
     820:	0000082b          	0x82b
     824:	690a                	flw	fs2,128(sp)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
     830:	0000083b          	0x83b
     834:	690a                	flw	fs2,128(sp)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     836:	0000                	unimp
     838:	1700                	addi	s0,sp,928
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     840:	00086207          	0x86207
     844:	1800                	addi	s0,sp,48
     846:	03f0                	addi	a2,sp,460
     848:	0000                	unimp
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
     84e:	0862                	slli	a6,a6,0x18
     850:	0000                	unimp
     852:	1800                	addi	s0,sp,48
     854:	037e                	slli	t1,t1,0x1f
     856:	0000                	unimp
     858:	a204                	fsd	fs1,0(a2)
     85a:	1802                	slli	a6,a6,0x20
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x124>
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
     86c:	0069                	c.nop	26
     86e:	0000                	unimp
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
     874:	0000                	unimp
     876:	8200                	0x8200
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
     888:	000008a7          	0x8a7
     88c:	4d1d                	li	s10,7
     88e:	0005                	c.nop	1
     890:	0400                	addi	s0,sp,512
     892:	029a                	slli	t0,t0,0x6
     894:	0006f60b          	0x6f60b
     898:	1d00                	addi	s0,sp,688
     89a:	06da                	slli	a3,a3,0x16
     89c:	0000                	unimp
     89e:	a304                	fsd	fs1,0(a4)
     8a0:	0b02                	c.slli64	s6
     8a2:	0000083b          	0x83b
     8a6:	0900                	addi	s0,sp,144
     8a8:	05c1                	addi	a1,a1,16
     8aa:	0000                	unimp
    int polyR[N+1];
     8ac:	000008b7          	lui	a7,0x0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8b0:	690a                	flw	fs2,128(sp)
    int polyR[N+1];
     8b2:	0000                	unimp
     8b4:	1800                	addi	s0,sp,48
     8b6:	1e00                	addi	s0,sp,816
     8b8:	00ad                	addi	ra,ra,11
     8ba:	0000                	unimp
     8bc:	0410                	addi	a2,sp,512
     8be:	000008b7          	lui	a7,0x0
    polyR[N] = 1;
     8c2:	cd1f 0008 1500      	0x15000008cd1f
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8cc:	1000                	addi	s0,sp,32
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
     8d2:	1000                	addi	s0,sp,32
     8d4:	8a04                	0x8a04
     8d6:	0001                	nop
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
     8dc:	0000                	unimp
     8de:	5d15                	li	s10,-27
     8e0:	0000                	unimp
     8e2:	0000                	unimp
     8e4:	0410                	addi	a2,sp,512
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
     8ee:	0000                	unimp
     8f0:	5b09                	li	s6,-30
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
     8fe:	0002                	c.slli64	zero
     900:	0520                	addi	s0,sp,648
     902:	0006                	c.slli	zero,0x1
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
     90e:	05fe                	slli	a1,a1,0x1f
     910:	0000                	unimp
     912:	3404                	fld	fs1,40(s0)
     914:	046d1d03          	lh	s10,70(s10) # 544b8 <_stack_start+0x444b8>
     918:	0000                	unimp
     91a:	2a21                	jal	a32 <generate_keys+0x246>
     91c:	0004                	0x4
     91e:	0600                	addi	s0,sp,768
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
     924:	0000                	unimp
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
    polyR[0] = -1;
     92e:	0a00                	addi	s0,sp,272
     930:	0069                	c.nop	26
    for(i = 1; i < N; ++i){
     932:	0000                	unimp
     934:	0095                	addi	ra,ra,5
     936:	8222                	mv	tp,s0
     938:	0001                	nop
    for (i = N; i < 55; ++i ){
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
    for(i = 0; i < N; ++i){
     942:	0305                	addi	t1,t1,1
        random_keys[i] = f[i];
     944:	10ac                	addi	a1,sp,104
     946:	0000                	unimp
     948:	4922                	lw	s2,8(sp)
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    for(i = 0; i < N; ++i){
     94e:	09260c07          	0x9260c07
     952:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     954:	0305                	addi	t1,t1,1
     956:	1304                	addi	s1,sp,416
     958:	0000                	unimp
     95a:	0122                	slli	sp,sp,0x8
        random_keys[i] = g[i-N];
     95c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
    for(i = N; i < (2*N); ++i){
     964:	0000                	unimp
     966:	0305                	addi	t1,t1,1
    for(i = (2*N); i < (3*N); ++i){
     968:	155c                	addi	a5,sp,676
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
    fp = ext_euclid(polyR, f, (N+1), p);
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
     976:	0069                	c.nop	26
     978:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     97a:	86220063          	beq	tp,sp,fffff9da <_stack_start+0xfffef9da>
        random_keys[i] = fp[i-(2*N)];
     97e:	0004                	0x4
     980:	0100                	addi	s0,sp,128
     982:	0c09                	addi	s8,s8,2
    for(i = (2*N); i < (3*N); ++i){
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
    fq = ext_euclid(polyR, f, (N+1), q);
     988:	0305                	addi	t1,t1,1
     98a:	17b4                	addi	a3,sp,1000
     98c:	0000                	unimp
     98e:	5d09                	li	s10,-30
     990:	0000                	unimp
     992:	9f00                	0x9f00
    for(i = (3*N); i < (4*N); ++i){
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00a1                	addi	ra,ra,8
     9a2:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     9a4:	0a01                	addi	s4,s4,0
     9a6:	8e0c                	0x8e0c
    fg = polymult2(fq, N, g, N, 0);
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	00194403          	lbu	s0,1(s2) # 2001 <_min_stack+0x1>
     9b0:	0900                	addi	s0,sp,144
    for(i = 0; i < (2*N-1); ++i){
     9b2:	0064                	addi	s1,sp,12
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     9c6:	3624                	fld	fs1,104(a2)
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	1e3c                	addi	a5,sp,824
     9d6:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     9d8:	2825                	jal	a10 <generate_keys+0x224>
     9da:	01000007          	0x1000007
    for(i = (5*N); i < (6*N+1); ++i){
     9de:	02df 5d05 0000      	0x5d0502df
        random_keys[i] = polyR[i-(5*N)];
     9e4:	2400                	fld	fs0,8(s0)
     9e6:	000e                	c.slli	zero,0x3
     9e8:	f800                	fsw	fs0,48(s0)
    for(i = (5*N); i < (6*N+1); ++i){
     9ea:	0000                	unimp
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
     9f0:	2600000b          	0x2600000b
     9f4:	0446                	slli	s0,s0,0x11
}
     9f6:	0000                	unimp
     9f8:	e101                	bnez	a0,9f8 <generate_keys+0x20c>
     9fa:	0a02                	c.slli64	s4
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0x226>
     a00:	0000                	unimp
     a02:	0000                	unimp
     a04:	8c26                	mv	s8,s1
     a06:	0000                	unimp
     a08:	0100                	addi	s0,sp,128
     a0a:	02e2                	slli	t0,t0,0x18
     a0c:	630a                	flw	ft6,128(sp)
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	031e                	slli	t1,t1,0x7
     a18:	0000                	unimp
     a1a:	e301                	bnez	a4,a1a <generate_keys+0x22e>
     a1c:	0a02                	c.slli64	s4
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0x248>
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	02e4                	addi	s1,sp,332
     a2c:	5d09                	li	s10,-30
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
        polyR[i] = 0;
     a36:	02e5                	addi	t0,t0,25
     a38:	5d09                	li	s10,-30
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
    for(i = 1; i < N; ++i){
     a42:	02e6                	slli	t0,t0,0x19
        f[i] = 0;
     a44:	5d09                	li	s10,-30
     a46:	0000                	unimp
     a48:	6500                	flw	fs0,8(a0)
     a4a:	0128                	addi	a0,sp,136
     a4c:	0004                	0x4
     a4e:	0100                	addi	s0,sp,128
     a50:	02e8                	addi	a0,sp,332
        g[i] = 0;
     a52:	6909                	lui	s2,0x2
     a54:	0300000b          	0x300000b
     a58:	dc91                	beqz	s1,974 <generate_keys+0x188>
     a5a:	05972677          	0x5972677
    for (i = N; i < 55; ++i ){
     a5e:	0000                	unimp
        random_keys[i] = f[i];
     a60:	e901                	bnez	a0,a70 <generate_keys+0x284>
     a62:	0902                	c.slli64	s2
     a64:	0b79                	addi	s6,s6,30
     a66:	0000                	unimp
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
     a6c:	b826                	fsd	fs1,48(sp)
     a6e:	0000                	unimp
    for(i = 0; i < N; ++i){
     a70:	0100                	addi	s0,sp,128
        random_keys[i] = f[i];
     a72:	02ea                	slli	t0,t0,0x1a
    for(i = 0; i < N; ++i){
     a74:	8b09                	andi	a4,a4,2
        random_keys[i] = g[i-N];
     a76:	b100000b          	0xb100000b
     a7a:	0000                	unimp
     a7c:	2900                	fld	fs0,16(a0)
     a7e:	00c5                	addi	ra,ra,17
    for(i = N; i < (2*N); ++i){
     a80:	0000                	unimp
     a82:	eb01                	bnez	a4,a92 <generate_keys+0x2a6>
     a84:	0902                	c.slli64	s2
        random_keys[i] = fp[i-(2*N)];
     a86:	0b9d                	addi	s7,s7,7
     a88:	0000                	unimp
     a8a:	cc26                	sw	s1,24(sp)
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     a90:	02ec                	addi	a1,sp,332
     a92:	af09                	j	11a4 <_edata+0xf8>
     a94:	1200000b          	0x1200000b
        random_keys[i] = fq[i-(3*N)];
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
     a9c:	0250                	addi	a2,sp,260
     a9e:	0000                	unimp
     aa0:	ed01                	bnez	a0,ab8 <generate_keys+0x2cc>
     aa2:	0902                	c.slli64	s2
    for(i = (3*N); i < (4*N); ++i){
     aa4:	0bc1                	addi	s7,s7,16
        random_keys[i] = fq[i-(3*N)];
     aa6:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     aa8:	6526                	flw	fa0,72(sp)
        fg[i] = fg[i]*p;
     aaa:	0004                	0x4
    for(i = 0; i < (2*N-1); ++i){
     aac:	0100                	addi	s0,sp,128
     aae:	02ee                	slli	t0,t0,0x1b
        fg[i] = fg[i]*p;
     ab0:	d309                	beqz	a4,9b2 <generate_keys+0x1c6>
     ab2:	6500000b          	0x6500000b
     ab6:	0001                	nop
    for(i = 0; i < (2*N-1); ++i){
     ab8:	2a00                	fld	fs0,16(a2)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     aba:	0069                	c.nop	26
     abc:	ef01                	bnez	a4,ad4 <generate_keys+0x2e8>
     abe:	0902                	c.slli64	s2
     ac0:	005d                	c.nop	23
     ac2:	0000                	unimp
     ac4:	01b9                	addi	gp,gp,14
    for(i = (4*N); i < (5*N); ++i){
     ac6:	0000                	unimp
     ac8:	000e442b          	0xe442b
        random_keys[i] = polyR[i-(5*N)];
     acc:	fe00                	fsw	fs0,56(a2)
     ace:	001e                	c.slli	zero,0x7
     ad0:	ec00                	fsw	fs0,24(s0)
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
     ad6:	5a01                	li	s4,-32
    for(i = (5*N); i < (6*N+1); ++i){
     ad8:	77dc9103          	lh	sp,1917(s9)
     adc:	012c                	addi	a1,sp,136
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     ade:	ec03055b          	0xec03055b
     ae2:	2c00000f          	0x2c00000f
     ae6:	5c01                	li	s8,-32
     ae8:	0802                	c.slli64	a6
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     aea:	00c0                	addi	s0,sp,68
     aec:	000e5c2b          	0xe5c2b
     af0:	bc00                	fsd	fs0,56(s0)
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     afa:	5a01                	li	s4,-32
     afc:	0802                	c.slli64	a6
     afe:	2c35                	jal	d3a <memcpy+0x9c>
     b00:	5b01                	li	s6,-32
     b02:	3301                	jal	802 <generate_keys+0x16>
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b04:	012c                	addi	a1,sp,136
    temp = polymult(public_key,N,random_val,48,q,0);
     b06:	025c                	addi	a5,sp,260
     b08:	6508                	flw	fa0,8(a0)
     b0a:	2b00                	fld	fs0,16(a4)
     b0c:	0ecc                	addi	a1,sp,852
     b0e:	0000                	unimp
     b10:	0d66                	slli	s10,s10,0x19
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
array_add(temp,message,48);
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
    temp = polymult(public_key,N,random_val,48,q,0);
     b1e:	012c                	addi	a1,sp,136
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b20:	6508025b          	0x6508025b
array_add(temp,message,48);
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b28:	dc91                	beqz	s1,a44 <generate_keys+0x258>
     b2a:	5e012c77          	0x5e012c77
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x1ed>
     b32:	2d00                	fld	fs0,24(a0)
     b34:	0ee2                	slli	t4,t4,0x18
    for(i = (2*N); i < (3*N); ++i){
     b36:	0000                	unimp
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
     b40:	3508                	fld	fa0,40(a0)
}
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <memset+0x88>
     b4e:	5d01                	li	s10,-32
     b50:	7af09103          	lh	sp,1967(ra)
        CT[i-(2*N)] = CT[i];
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
     b58:	0079                	c.nop	30
    for(i = (2*N); i < (3*N); ++i){
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
        CT[i-(2*N)] = CT[i];
     b5e:	9891                	andi	s1,s1,-28
     b60:	007e                	c.slli	zero,0x1f
    for(i = (2*N); i < (3*N); ++i){
     b62:	1000                	addi	s0,sp,32
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
     b68:	0900                	addi	s0,sp,144
     b6a:	005d                	c.nop	23
    for(i = (2*N); i < ((2*N)+N); ++i){
     b6c:	0000                	unimp
     b6e:	0b79                	addi	s6,s6,30
     b70:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b72:	690a                	flw	fs2,128(sp)
     b74:	0000                	unimp
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
     b7a:	005d                	c.nop	23
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b7c:	0000                	unimp
     b7e:	00000b8b          	0xb8b
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b82:	692e                	flw	fs2,200(sp)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b84:	0000                	unimp
     b86:	0200                	addi	s0,sp,256
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b88:	3408                	fld	fa0,40(s0)
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
     b8e:	0000                	unimp
     b90:	0b9d                	addi	s7,s7,7
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b96:	0000                	unimp
     b98:	0200                	addi	s0,sp,256
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     b9a:	3408                	fld	fa0,40(s0)
     b9c:	0900                	addi	s0,sp,144
     b9e:	005d                	c.nop	23
     ba0:	0000                	unimp
     ba2:	00000baf          	0xbaf
     ba6:	692e                	flw	fs2,200(sp)
     ba8:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     baa:	0200                	addi	s0,sp,256
     bac:	3408                	fld	fa0,40(s0)
     bae:	0900                	addi	s0,sp,144
     bb0:	005d                	c.nop	23
     bb2:	0000                	unimp
        if(a2[i] <= q/2)
     bb4:	0bc1                	addi	s7,s7,16
     bb6:	0000                	unimp
     bb8:	692e                	flw	fs2,200(sp)
    for (i = 0; i < N; ++i){
     bba:	0000                	unimp
     bbc:	0200                	addi	s0,sp,256
     bbe:	3408                	fld	fa0,40(s0)
    c = polymult2(secret_key_fp,N,a2,N,0);
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
     bca:	692e                	flw	fs2,200(sp)
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     bcc:	0000                	unimp
     bce:	0200                	addi	s0,sp,256
     bd0:	3408                	fld	fa0,40(s0)
     bd2:	0900                	addi	s0,sp,144
     bd4:	005d                	c.nop	23
    for(i = (2*N); i < ((2*N)+N); ++i){
     bd6:	0000                	unimp
     bd8:	0be5                	addi	s7,s7,25
     bda:	0000                	unimp
}
     bdc:	692e                	flw	fs2,200(sp)
     bde:	0000                	unimp
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
     be4:	2f00                	fld	fs0,24(a4)
     be6:	000001cf          	fnmadd.s	ft3,ft0,ft0,ft0,rne
     bea:	b301                	j	8ea <generate_keys+0xfe>
     bec:	0602                	c.slli64	a2
     bee:	00000b63          	beqz	zero,c04 <ntru_deceypt+0xa0>
        a2[i-(2*N)] = a2[i];
     bf2:	0b64                	addi	s1,sp,412
     bf4:	0000                	unimp
     bf6:	00c4                	addi	s1,sp,68
     bf8:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     bfa:	9c01                	0x9c01
     bfc:	0d66                	slli	s10,s10,0x19
        a2[i-(2*N)] = a2[i];
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     c02:	0100                	addi	s0,sp,128
        if(a2[i] <= q/2)
     c04:	5d1702b3          	0x5d1702b3
     c08:	0000                	unimp
            a2[i] = (-1)*(q-a2[i]);
     c0a:	d900                	sw	s0,48(a0)
     c0c:	0001                	nop
     c0e:	3000                	fld	fs0,32(s0)
    for (i = 0; i < N; ++i){
     c10:	0070                	addi	a2,sp,12
     c12:	b301                	j	912 <generate_keys+0x126>
     c14:	1e02                	slli	t3,t3,0x20
        c2[i-(2*N)] = c2[i];
     c16:	005d                	c.nop	23
     c18:	0000                	unimp
     c1a:	021d                	addi	tp,tp,7
     c1c:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
        c2[i-(2*N)] = c2[i];
     c22:	5d2502b3          	0x5d2502b3
    for(i = (2*N); i < ((2*N)+N); ++i){
     c26:	0000                	unimp
  jal x0, default_exc_handler
     c28:	5400                	lw	s0,40(s0)
     c2a:	0002                	c.slli64	zero
  mv  x1, x0
     c2c:	3100                	fld	fs0,32(a0)
     c2e:	00b8                	addi	a4,sp,72
  mv  x2, x1
     c30:	0000                	unimp
  mv  x3, x1
     c32:	b301                	j	932 <generate_keys+0x146>
  mv  x4, x1
     c34:	2d02                	fld	fs10,0(sp)
  mv  x5, x1
     c36:	00000b63          	beqz	zero,c4c <reset_handler+0x20>
  mv  x7, x1
     c3a:	0000028b          	0x28b
  mv  x9, x1
     c3e:	cc31                	beqz	s0,c9a <main_entry+0x8>
  mv x10, x1
     c40:	0005                	c.nop	1
  mv x11, x1
     c42:	0100                	addi	s0,sp,128
  mv x12, x1
     c44:	634002b3          	0x634002b3
  mv x14, x1
     c48:	b700000b          	0xb700000b
  mv x16, x1
     c4c:	0002                	c.slli64	zero
  mv x17, x1
     c4e:	3100                	fld	fs0,32(a0)
  mv x18, x1
     c50:	0446                	slli	s0,s0,0x11
  mv x19, x1
     c52:	0000                	unimp
  mv x20, x1
     c54:	b301                	j	954 <generate_keys+0x168>
  mv x21, x1
     c56:	5402                	lw	s0,32(sp)
  mv x22, x1
     c58:	00000b63          	beqz	zero,c6e <reset_handler+0x42>
  mv x24, x1
     c5c:	02ee                	slli	t0,t0,0x1b
  mv x25, x1
     c5e:	0000                	unimp
  mv x26, x1
     c60:	e231                	bnez	a2,ca4 <memcpy+0x6>
  mv x27, x1
     c62:	0006                	c.slli	zero,0x1
  mv x28, x1
     c64:	0100                	addi	s0,sp,128
  mv x29, x1
     c66:	636602b3          	0x636602b3
  mv x31, x1
     c6a:	0f00000b          	0xf00000b
  la   x2, _stack_start
     c6e:	29000003          	lb	zero,656(zero) # 290 <polymult+0x168>
     c72:	000002bb          	0x2bb
  la x26, _bss_start
     c76:	b501                	j	a76 <generate_keys+0x28a>
     c78:	0a02                	c.slli64	s4
     c7a:	00000b63          	beqz	zero,c90 <zero_loop+0x8>
  la x27, _bss_end
     c7e:	612a                	flw	ft2,136(sp)
     c80:	0100                	addi	s0,sp,128
     c82:	02b6                	slli	t0,t0,0xd
  bge x26, x27, zero_loop_end
     c84:	630a                	flw	ft6,128(sp)
     c86:	4600000b          	0x4600000b
  sw x0, 0(x26)
     c8a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x178>
  ble x26, x27, zero_loop
     c8e:	3261                	jal	616 <ext_euclid+0x1a>
     c90:	0100                	addi	s0,sp,128
  addi x10, x0, 0
     c92:	630a02b7          	lui	t0,0x630a0
  addi x11, x0, 0
     c96:	5900000b          	0x5900000b
  jal x1, main
     c9a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x178>
     c9e:	b8010063          	beqz	sp,1e <__DYNAMIC+0x1e>
     ca2:	0a02                	c.slli64	s4
     ca4:	00000b63          	beqz	zero,cba <memcpy+0x1c>
     ca8:	0382                	c.slli64	t2
     caa:	0000                	unimp
     cac:	632a                	flw	ft6,136(sp)
     cae:	0032                	c.slli	zero,0xc
     cb0:	b901                	j	8c0 <generate_keys+0xd4>
     cb2:	0a02                	c.slli64	s4
     cb4:	00000b63          	beqz	zero,cca <memcpy+0x2c>
     cb8:	0395                	addi	t2,t2,5
     cba:	0000                	unimp
     cbc:	692a                	flw	fs2,136(sp)
     cbe:	0100                	addi	s0,sp,128
     cc0:	02ba                	slli	t0,t0,0xe
     cc2:	5d09                	li	s10,-30
     cc4:	0000                	unimp
     cc6:	b300                	fsd	fs0,32(a4)
     cc8:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0x188>
     ccc:	0b9a                	slli	s7,s7,0x6
     cce:	0000                	unimp
     cd0:	0000188f          	0x188f
     cd4:	0cf8                	addi	a4,sp,604
     cd6:	0000                	unimp
     cd8:	012c                	addi	a1,sp,136
     cda:	035a                	slli	t1,t1,0x16
     cdc:	2c5d01f3          	0x2c5d01f3
     ce0:	5b01                	li	s6,-32
     ce2:	7802                	flw	fa6,32(sp)
     ce4:	2c00                	fld	fs0,24(s0)
     ce6:	5c01                	li	s8,-32
     ce8:	5f01f303          	0x5f01f303
     cec:	012c                	addi	a1,sp,136
     cee:	025d                	addi	tp,tp,23
     cf0:	0078                	addi	a4,sp,12
     cf2:	012c                	addi	a1,sp,136
     cf4:	015e                	slli	sp,sp,0x17
     cf6:	0030                	addi	a2,sp,8
     cf8:	000ba82b          	0xba82b
     cfc:	6400                	flw	fs0,8(s0)
     cfe:	0015                	c.nop	5
     d00:	1e00                	addi	s0,sp,816
     d02:	000d                	c.nop	3
     d04:	2c00                	fld	fs0,24(s0)
     d06:	5b01                	li	s6,-32
     d08:	7902                	flw	fs2,32(sp)
     d0a:	2c00                	fld	fs0,24(s0)
     d0c:	5c01                	li	s8,-32
     d0e:	8402                	jr	s0
     d10:	2c00                	fld	fs0,24(s0)
     d12:	5d01                	li	s10,-32
     d14:	8602                	jr	a2
     d16:	2c00                	fld	fs0,24(s0)
     d18:	5e01                	li	t3,-32
     d1a:	8202                	jr	tp
     d1c:	0000                	unimp
     d1e:	000bcc2b          	0xbcc2b
     d22:	8f00                	0x8f00
     d24:	0018                	0x18
     d26:	4300                	lw	s0,0(a4)
     d28:	000d                	c.nop	3
     d2a:	2c00                	fld	fs0,24(s0)
     d2c:	5a01                	li	s4,-32
     d2e:	8702                	jr	a4
     d30:	2c00                	fld	fs0,24(s0)
     d32:	5b01                	li	s6,-32
     d34:	7802                	flw	fa6,32(sp)
     d36:	2c00                	fld	fs0,24(s0)
     d38:	5d01                	li	s10,-32
     d3a:	7802                	flw	fa6,32(sp)
     d3c:	2c00                	fld	fs0,24(s0)
     d3e:	5e01                	li	t3,-32
     d40:	3001                	jal	540 <polydiv+0xe8>
     d42:	2d00                	fld	fs0,24(a0)
     d44:	0bd6                	slli	s7,s7,0x15
     d46:	0000                	unimp
     d48:	1564                	addi	s1,sp,684
     d4a:	0000                	unimp
     d4c:	012c                	addi	a1,sp,136
     d4e:	0079025b          	0x79025b
     d52:	012c                	addi	a1,sp,136
     d54:	025c                	addi	a5,sp,260
     d56:	0084                	addi	s1,sp,64
     d58:	012c                	addi	a1,sp,136
     d5a:	025d                	addi	tp,tp,23
     d5c:	0086                	slli	ra,ra,0x1
     d5e:	012c                	addi	a1,sp,136
     d60:	025e                	slli	tp,tp,0x17
     d62:	0085                	addi	ra,ra,1
     d64:	0000                	unimp
     d66:	0006a42f          	amoadd.w	s0,zero,(a3)
     d6a:	0100                	addi	s0,sp,128
     d6c:	0291                	addi	t0,t0,4
     d6e:	6306                	flw	ft6,64(sp)
     d70:	de00000b          	0xde00000b
     d74:	000a                	c.slli	zero,0x2
     d76:	8600                	0x8600
     d78:	0000                	unimp
     d7a:	0100                	addi	s0,sp,128
     d7c:	bc9c                	fsd	fa5,56(s1)
     d7e:	000e                	c.slli	zero,0x3
     d80:	3000                	fld	fs0,32(s0)
     d82:	004e                	c.slli	zero,0x13
     d84:	9101                	srli	a0,a0,0x20
     d86:	1702                	slli	a4,a4,0x20
     d88:	005d                	c.nop	23
     d8a:	0000                	unimp
     d8c:	0438                	addi	a4,sp,520
     d8e:	0000                	unimp
     d90:	7130                	flw	fa2,96(a0)
     d92:	0100                	addi	s0,sp,128
     d94:	0291                	addi	t0,t0,4
     d96:	5d1e                	lw	s10,228(sp)
     d98:	0000                	unimp
     d9a:	6400                	flw	fs0,8(s0)
     d9c:	0004                	0x4
     d9e:	3100                	fld	fs0,32(a0)
     da0:	0401                	addi	s0,s0,0
     da2:	0000                	unimp
     da4:	9101                	srli	a0,a0,0x20
     da6:	2602                	fld	fa2,0(sp)
     da8:	00000b63          	beqz	zero,dbe <memset+0x42>
     dac:	0000049b          	0x49b
     db0:	9731                	srai	a4,a4,0x2c
     db2:	0005                	c.nop	1
     db4:	0100                	addi	s0,sp,128
     db6:	0291                	addi	t0,t0,4
     db8:	6334                	flw	fa3,64(a4)
     dba:	d200000b          	0xd200000b
     dbe:	0004                	0x4
     dc0:	3100                	fld	fs0,32(a0)
     dc2:	06e2                	slli	a3,a3,0x18
     dc4:	0000                	unimp
     dc6:	9101                	srli	a0,a0,0x20
     dc8:	4502                	lw	a0,0(sp)
     dca:	00000b63          	beqz	zero,de0 <memset+0x64>
     dce:	04fe                	slli	s1,s1,0x1f
     dd0:	0000                	unimp
     dd2:	ab29                	j	12ec <_edata+0x240>
     dd4:	0002                	c.slli64	zero
     dd6:	0100                	addi	s0,sp,128
     dd8:	630a0293          	addi	t0,s4,1584
     ddc:	3200000b          	0x3200000b
     de0:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     de4:	0294                	addi	a3,sp,320
     de6:	630a                	flw	ft6,128(sp)
     de8:	0100000b          	0x100000b
     dec:	285a                	fld	fa6,400(sp)
     dee:	00000373          	0x373
     df2:	9601                	srai	a2,a2,0x20
     df4:	0902                	c.slli64	s2
     df6:	0b69                	addi	s6,s6,26
     df8:	0000                	unimp
     dfa:	7ea09103          	lh	sp,2026(ra)
     dfe:	2a26                	fld	fs4,72(sp)
     e00:	0002                	c.slli64	zero
     e02:	0100                	addi	s0,sp,128
     e04:	630a0297          	auipc	t0,0x630a0
     e08:	3500000b          	0x3500000b
     e0c:	0005                	c.nop	1
     e0e:	2a00                	fld	fs0,16(a2)
     e10:	0069                	c.nop	26
     e12:	9801                	andi	s0,s0,-32
     e14:	0902                	c.slli64	s2
     e16:	005d                	c.nop	23
     e18:	0000                	unimp
     e1a:	055e                	slli	a0,a0,0x17
     e1c:	0000                	unimp
     e1e:	000b062b          	0xb062b
     e22:	fe00                	fsw	fs0,56(a2)
int main(){
     e24:	001e                	c.slli	zero,0x7
     e26:	4100                	lw	s0,0(a0)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e28:	000e                	c.slli	zero,0x3
     e2a:	2c00                	fld	fs0,24(s0)
     e2c:	5a01                	li	s4,-32
     e2e:	7202                	flw	ft4,32(sp)
     e30:	2c00                	fld	fs0,24(s0)
     e32:	5b01                	li	s6,-32
     e34:	0305                	addi	t1,t1,1
int main(){
     e36:	0f2c                	addi	a1,sp,920
     e38:	0000                	unimp
     e3a:	012c                	addi	a1,sp,136
     e3c:	025c                	addi	a5,sp,260
     e3e:	c008                	sw	a0,0(s0)
     e40:	2b00                	fld	fs0,16(a4)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e42:	0b18                	addi	a4,sp,400
    resultkon[0] = 0xA;
     e44:	0000                	unimp
     e46:	1a25                	addi	s4,s4,-23
     e48:	0000                	unimp
     e4a:	0e72                	slli	t3,t3,0x1c
     e4c:	0000                	unimp
    keys = generate_keys(N, p, q);
     e4e:	012c                	addi	a1,sp,136
     e50:	025a                	slli	tp,tp,0x16
     e52:	012c0083          	lb	ra,18(s8)
     e56:	0078025b          	0x78025b
     e5a:	012c                	addi	a1,sp,136
     e5c:	025c                	addi	a5,sp,260
    for(i = 0; i < N; ++i){
     e5e:	0072                	c.slli	zero,0x1c
     e60:	012c                	addi	a1,sp,136
        secret_key_f[i] = keys[i];
     e62:	025d                	addi	tp,tp,23
     e64:	3008                	fld	fa0,32(s0)
     e66:	012c                	addi	a1,sp,136
     e68:	025e                	slli	tp,tp,0x17
     e6a:	0082                	c.slli64	ra
     e6c:	012c                	addi	a1,sp,136
    for(i = 0; i < N; ++i){
     e6e:	015f 0030 282b      	0x282b0030015f
    for(i = N; i < (2*N); ++i){
     e74:	d800000b          	0xd800000b
     e78:	001d                	c.nop	7
     e7a:	9300                	0x9300
     e7c:	000e                	c.slli	zero,0x3
     e7e:	2c00                	fld	fs0,24(s0)
        secret_key_fp[i-(2*N)] = keys[i];
     e80:	5a01                	li	s4,-32
     e82:	8302                	jr	t1
     e84:	2c00                	fld	fs0,24(s0)
     e86:	5b01                	li	s6,-32
     e88:	5c01f303          	0x5c01f303
    for(i = (2*N); i < (3*N); ++i){
     e8c:	012c                	addi	a1,sp,136
    for(i = (3*N); i < (4*N); ++i){
     e8e:	025c                	addi	a5,sp,260
     e90:	3008                	fld	fa0,32(s0)
     e92:	2d00                	fld	fs0,24(a0)
     e94:	0b36                	slli	s6,s6,0xd
     e96:	0000                	unimp
     e98:	1564                	addi	s1,sp,684
        public_key[i-(4*N)] = keys[i];
     e9a:	0000                	unimp
     e9c:	012c                	addi	a1,sp,136
     e9e:	025a                	slli	tp,tp,0x16
     ea0:	012c0083          	lb	ra,18(s8)
    for(i = (4*N); i < (5*N); ++i){
     ea4:	0079025b          	0x79025b
     ea8:	012c                	addi	a1,sp,136
     eaa:	025c                	addi	a5,sp,260
     eac:	0084                	addi	s1,sp,64
     eae:	012c                	addi	a1,sp,136
        ring_poly[i-(5*N)] = keys[i];
     eb0:	025d                	addi	tp,tp,23
     eb2:	0178                	addi	a4,sp,140
     eb4:	012c                	addi	a1,sp,136
     eb6:	025e                	slli	tp,tp,0x17
     eb8:	0082                	c.slli64	ra
    for(i = (5*N); i < (6*N+1); ++i){
     eba:	0000                	unimp
     ebc:	0003152f          	0x3152f
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ec0:	0100                	addi	s0,sp,128
     ec2:	0239                	addi	tp,tp,14
     ec4:	6306                	flw	ft6,64(sp)
     ec6:	ec00000b          	0xec00000b
     eca:	f2000007          	0xf2000007
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     ece:	0002                	c.slli64	zero
     ed0:	0100                	addi	s0,sp,128
     ed2:	6c9c                	flw	fa5,24(s1)
     ed4:	0010                	0x10
     ed6:	3000                	fld	fs0,32(s0)
     ed8:	004e                	c.slli	zero,0x13
     eda:	3901                	jal	aea <ntru_encyrpt+0xc>
     edc:	1802                	slli	a6,a6,0x20
     ede:	005d                	c.nop	23
     ee0:	0000                	unimp
     ee2:	0594                	addi	a3,sp,704
            resultkon[0] = 0xC;}
     ee4:	0000                	unimp
    for(i = 0; i < 32; ++i){
     ee6:	7030                	flw	fa2,96(s0)
     ee8:	0100                	addi	s0,sp,128
        if(!(message[i] == Dec_Message[i])){
     eea:	0239                	addi	tp,tp,14
     eec:	5d1f 0000 e500      	0xe50000005d1f
     ef2:	0005                	c.nop	1
     ef4:	3000                	fld	fs0,32(s0)
     ef6:	0071                	c.nop	28
     ef8:	3901                	jal	b08 <ntru_encyrpt+0x2a>
            resultkon[0] = 0xB;
     efa:	2602                	fld	fa2,0(sp)
     efc:	005d                	c.nop	23
}
     efe:	0000                	unimp
     f00:	061c                	addi	a5,sp,768
     f02:	0000                	unimp
     f04:	6632                	flw	fa2,12(sp)
     f06:	0100                	addi	s0,sp,128
     f08:	6c09023b          	0x6c09023b
     f0c:	0010                	0x10
     f0e:	0300                	addi	s0,sp,384
     f10:	9891                	andi	s1,s1,-28
            resultkon[0] = 0xC;}
     f12:	327c                	fld	fa5,224(a2)
    for(i = 0; i < 32; ++i){
     f14:	3c010067          	jr	960(sp)
     f18:	0902                	c.slli64	s2
     f1a:	106c                	addi	a1,sp,44
     f1c:	0000                	unimp
     f1e:	7df49103          	lh	sp,2015(s1)
     f22:	662a                	flw	fa2,136(sp)
     f24:	0070                	addi	a2,sp,12
     f26:	3e01                	jal	a36 <generate_keys+0x24a>
     f28:	0a02                	c.slli64	s4
     f2a:	00000b63          	beqz	zero,f40 <__DTOR_END__+0x14>
     f2e:	00000653          	fadd.s	fa2,ft0,ft0,rne
     f32:	662a                	flw	fa2,136(sp)
     f34:	0071                	c.nop	28
     f36:	3f01                	jal	e46 <main+0x22>
     f38:	0a02                	c.slli64	s4
     f3a:	00000b63          	beqz	zero,f50 <__DTOR_END__+0x24>
     f3e:	0666                	slli	a2,a2,0x19
     f40:	0000                	unimp
     f42:	662a                	flw	fa2,136(sp)
     f44:	40010067          	jr	1024(sp)
     f48:	0a02                	c.slli64	s4
     f4a:	00000b63          	beqz	zero,f60 <__DTOR_END__+0x34>
     f4e:	0684                	addi	s1,sp,832
     f50:	0000                	unimp
     f52:	702a                	flw	ft0,168(sp)
     f54:	4101006b          	0x4101006b
     f58:	0a02                	c.slli64	s4
     f5a:	00000b63          	beqz	zero,f70 <__DTOR_END__+0x44>
     f5e:	06a2                	slli	a3,a3,0x8
     f60:	0000                	unimp
     f62:	e226                	fsw	fs1,4(sp)
     f64:	0006                	c.slli	zero,0x1
     f66:	0100                	addi	s0,sp,128
     f68:	0242                	slli	tp,tp,0x10
     f6a:	7c09                	lui	s8,0xfffe2
     f6c:	0010                	0x10
     f6e:	c000                	sw	s0,0(s0)
     f70:	0006                	c.slli	zero,0x1
     f72:	2a00                	fld	fs0,16(a2)
     f74:	0069                	c.nop	26
     f76:	4301                	li	t1,0
     f78:	0902                	c.slli64	s2
     f7a:	005d                	c.nop	23
     f7c:	0000                	unimp
     f7e:	00000723          	sb	zero,14(zero) # e <__DYNAMIC+0xe>
     f82:	1226                	slli	tp,tp,0x29
     f84:	0004                	0x4
     f86:	0100                	addi	s0,sp,128
     f88:	0244                	addi	s1,sp,260
     f8a:	630a                	flw	ft6,128(sp)
     f8c:	5f00000b          	0x5f00000b
     f90:	0008                	0x8
     f92:	3300                	fld	fs0,32(a4)
     f94:	0069                	c.nop	26
     f96:	0000                	unimp
     f98:	00000877          	0x877
     f9c:	0008322b          	0x8322b
     fa0:	0900                	addi	s0,sp,144
     fa2:	001f bc00 000f      	0xfbc00001f
     fa8:	2c00                	fld	fs0,24(s0)
     faa:	5a01                	li	s4,-32
     fac:	7ca47803          	0x7ca47803
     fb0:	012c                	addi	a1,sp,136
     fb2:	2c30015b          	0x2c30015b
     fb6:	5c01                	li	s8,-32
     fb8:	0802                	c.slli64	a6
     fba:	00d0                	addi	a2,sp,68
     fbc:	0008b22b          	0x8b22b
     fc0:	0900                	addi	s0,sp,144
     fc2:	001f dc00 000f      	0xfdc00001f
     fc8:	2c00                	fld	fs0,24(s0)
     fca:	5a01                	li	s4,-32
     fcc:	7df87803          	0x7df87803
     fd0:	012c                	addi	a1,sp,136
     fd2:	2c30015b          	0x2c30015b
     fd6:	5c01                	li	s8,-32
     fd8:	0802                	c.slli64	a6
     fda:	00d8                	addi	a4,sp,68
     fdc:	00097a2b          	0x97a2b
     fe0:	8f00                	0x8f00
     fe2:	0010                	0x10
     fe4:	0300                	addi	s0,sp,384
     fe6:	0010                	0x10
     fe8:	2c00                	fld	fs0,24(s0)
     fea:	5a01                	li	s4,-32
     fec:	7202                	flw	ft4,32(sp)
     fee:	2c00                	fld	fs0,24(s0)
     ff0:	5b01                	li	s6,-32
     ff2:	7c987803          	0x7c987803
     ff6:	012c                	addi	a1,sp,136
     ff8:	025c                	addi	a5,sp,260
     ffa:	0085                	addi	ra,ra,1
     ffc:	012c                	addi	a1,sp,136
     ffe:	025d                	addi	tp,tp,23
    1000:	2b000087          	0x2b000087
    1004:	0994                	addi	a3,sp,208
    1006:	0000                	unimp
    1008:	0000108f          	0x108f
    100c:	102a                	c.slli	zero,0x2a
    100e:	0000                	unimp
    1010:	012c                	addi	a1,sp,136
    1012:	025a                	slli	tp,tp,0x16
    1014:	0072                	c.slli	zero,0x1c
    1016:	012c                	addi	a1,sp,136
    1018:	9878035b          	0x9878035b
    101c:	2c7c                	fld	fa5,216(s0)
    101e:	5c01                	li	s8,-32
    1020:	8502                	jr	a0
    1022:	2c00                	fld	fs0,24(s0)
    1024:	5d01                	li	s10,-32
    1026:	8602                	jr	a2
    1028:	0000                	unimp
    102a:	0009b22b          	0x9b22b
    102e:	8f00                	0x8f00
    1030:	0018                	0x18
    1032:	4f00                	lw	s0,24(a4)
    1034:	0010                	0x10
    1036:	2c00                	fld	fs0,24(s0)
    1038:	5b01                	li	s6,-32
    103a:	8202                	jr	tp
    103c:	2c00                	fld	fs0,24(s0)
    103e:	5c01                	li	s8,-32
    1040:	8902                	jr	s2
    1042:	2c00                	fld	fs0,24(s0)
    1044:	5d01                	li	s10,-32
    1046:	8202                	jr	tp
    1048:	2c00                	fld	fs0,24(s0)
    104a:	5e01                	li	t3,-32
    104c:	3001                	jal	84c <generate_keys+0x60>
    104e:	2d00                	fld	fs0,24(a0)
    1050:	09c6                	slli	s3,s3,0x11
    1052:	0000                	unimp
    1054:	1564                	addi	s1,sp,684
    1056:	0000                	unimp
    1058:	012c                	addi	a1,sp,136
    105a:	025c                	addi	a5,sp,260
    105c:	0072                	c.slli	zero,0x1c
    105e:	012c                	addi	a1,sp,136
    1060:	025d                	addi	tp,tp,23
    1062:	0085                	addi	ra,ra,1
    1064:	012c                	addi	a1,sp,136
    1066:	025e                	slli	tp,tp,0x17
    1068:	0086                	slli	ra,ra,0x1
    106a:	0000                	unimp
    106c:	5d09                	li	s10,-30
    106e:	0000                	unimp
    1070:	7c00                	flw	fs0,56(s0)
    1072:	0010                	0x10
    1074:	0a00                	addi	s0,sp,272
    1076:	0069                	c.nop	26
    1078:	0000                	unimp
    107a:	0036                	c.slli	zero,0xd
    107c:	5d09                	li	s10,-30
    107e:	0000                	unimp
    1080:	8f00                	0x8f00
    1082:	0010                	0x10
    1084:	3400                	fld	fs0,40(s0)
    1086:	0069                	c.nop	26
    1088:	0000                	unimp
    108a:	00000f93          	li	t6,0
    108e:	2f00                	fld	fs0,24(a4)
    1090:	0352                	slli	t1,t1,0x14
    1092:	0000                	unimp
    1094:	9501                	srai	a0,a0,0x20
    1096:	0601                	addi	a2,a2,0
    1098:	00000b63          	beqz	zero,10ae <_edata+0x2>
    109c:	05fc                	addi	a5,sp,716
    109e:	0000                	unimp
    10a0:	01f0                	addi	a2,sp,204
    10a2:	0000                	unimp
    10a4:	9c01                	0x9c01
    10a6:	14df 0000 e231      	0xe231000014df
    10ac:	0006                	c.slli	zero,0x1
    10ae:	0100                	addi	s0,sp,128
    10b0:	0195                	addi	gp,gp,5
    10b2:	6316                	flw	ft6,68(sp)
    10b4:	bd00000b          	0xbd00000b
    10b8:	0008                	0x8
    10ba:	3100                	fld	fs0,32(a0)
    10bc:	0192                	slli	gp,gp,0x4
    10be:	0000                	unimp
    10c0:	9501                	srai	a0,a0,0x20
    10c2:	2201                	jal	11c2 <_edata+0x116>
    10c4:	00000b63          	beqz	zero,10da <_edata+0x2e>
    10c8:	0902                	c.slli64	s2
    10ca:	0000                	unimp
    10cc:	1231                	addi	tp,tp,-20
    10ce:	0000                	unimp
    10d0:	0100                	addi	s0,sp,128
    10d2:	0195                	addi	gp,gp,5
    10d4:	5d2d                	li	s10,-21
    10d6:	0000                	unimp
    10d8:	4700                	lw	s0,8(a4)
    10da:	0009                	c.nop	2
    10dc:	3000                	fld	fs0,32(s0)
    10de:	6f6d                	lui	t5,0x1b
    10e0:	0064                	addi	s1,sp,12
    10e2:	9501                	srai	a0,a0,0x20
    10e4:	3701                	jal	fe4 <__DTOR_END__+0xb8>
    10e6:	005d                	c.nop	23
    10e8:	0000                	unimp
    10ea:	0000098b          	0x98b
    10ee:	9426                	add	s0,s0,s1
    10f0:	0002                	c.slli64	zero
    10f2:	0100                	addi	s0,sp,128
    10f4:	630a0197          	auipc	gp,0x630a0
    10f8:	c200000b          	0xc200000b
    10fc:	0009                	c.nop	2
    10fe:	2a00                	fld	fs0,16(a2)
    1100:	004e                	c.slli	zero,0x13
    1102:	9801                	andi	s0,s0,-32
    1104:	0901                	addi	s2,s2,0
    1106:	005d                	c.nop	23
    1108:	0000                	unimp
    110a:	09da                	slli	s3,s3,0x16
    110c:	0000                	unimp
    110e:	692a                	flw	fs2,136(sp)
    1110:	0100                	addi	s0,sp,128
    1112:	0198                	addi	a4,sp,192
    1114:	5d0c                	lw	a1,56(a0)
    1116:	0000                	unimp
    1118:	0800                	addi	s0,sp,16
    111a:	000a                	c.slli	zero,0x2
    111c:	2a00                	fld	fs0,16(a2)
    111e:	006a                	c.slli	zero,0x1a
    1120:	9801                	andi	s0,s0,-32
    1122:	0f01                	addi	t5,t5,0
    1124:	005d                	c.nop	23
    1126:	0000                	unimp
    1128:	0abd                	addi	s5,s5,15
    112a:	0000                	unimp
    112c:	6426                	flw	fs0,72(sp)
    112e:	0005                	c.nop	1
    1130:	0100                	addi	s0,sp,128
    1132:	0199                	addi	gp,gp,6
    1134:	df09                	beqz	a4,104e <__DTOR_END__+0x122>
    1136:	0014                	0x14
    1138:	db00                	sw	s0,48(a4)
    113a:	000a                	c.slli	zero,0x2
    113c:	2600                	fld	fs0,8(a2)
    113e:	05e2                	slli	a1,a1,0x18
    1140:	0000                	unimp
    1142:	9a01                	andi	a2,a2,-32
    1144:	0901                	addi	s2,s2,0
    1146:	14f2                	slli	s1,s1,0x3c
    1148:	0000                	unimp
    114a:	00000afb          	0xafb
    114e:	722a                	flw	ft4,168(sp)
    1150:	0069                	c.nop	26
    1152:	9b01                	andi	a4,a4,-32
    1154:	0901                	addi	s2,s2,0
    1156:	1505                	addi	a0,a0,-31
    1158:	0000                	unimp
    115a:	00000b1b          	0xb1b
    115e:	8126                	mv	sp,s1
    1160:	0004                	0x4
    1162:	0100                	addi	s0,sp,128
    1164:	019d                	addi	gp,gp,7
    1166:	1809                	addi	a6,a6,-30
    1168:	0015                	c.nop	5
    116a:	3b00                	fld	fs0,48(a4)
    116c:	2a00000b          	0x2a00000b
    1170:	6974                	flw	fa3,84(a0)
    1172:	0100                	addi	s0,sp,128
    1174:	019e                	slli	gp,gp,0x7
    1176:	2b09                	jal	1688 <result+0x12c>
    1178:	0015                	c.nop	5
    117a:	7100                	flw	fs0,32(a0)
    117c:	2600000b          	0x2600000b
    1180:	0499                	addi	s1,s1,6
    1182:	0000                	unimp
    1184:	9f01                	0x9f01
    1186:	0901                	addi	s2,s2,0
    1188:	153e                	slli	a0,a0,0x2f
    118a:	0000                	unimp
    118c:	0b91                	addi	s7,s7,4
    118e:	0000                	unimp
    1190:	2a26                	fld	fs4,72(sp)
    1192:	0002                	c.slli64	zero
    1194:	0100                	addi	s0,sp,128
    1196:	01a0                	addi	s0,sp,200
    1198:	5109                	li	sp,-30
    119a:	0015                	c.nop	5
    119c:	b100                	fsd	fs0,32(a0)
    119e:	2a00000b          	0x2a00000b
    11a2:	6572                	flw	fa0,28(sp)
    11a4:	a1010073          	0xa1010073
    11a8:	0a01                	addi	s4,s4,0
    11aa:	00000b63          	beqz	zero,11c0 <_edata+0x114>
    11ae:	00000bf3          	0xbf3
    11b2:	5926                	lw	s2,104(sp)
    11b4:	0001                	nop
    11b6:	0100                	addi	s0,sp,128
    11b8:	01a2                	slli	gp,gp,0x8
    11ba:	630a                	flw	ft6,128(sp)
    11bc:	1100000b          	0x1100000b
    11c0:	000c                	0xc
    11c2:	2600                	fld	fs0,8(a2)
    11c4:	015e                	slli	sp,sp,0x17
    11c6:	0000                	unimp
    11c8:	a301                	j	16c8 <result+0x16c>
    11ca:	0a01                	addi	s4,s4,0
    11cc:	00000b63          	beqz	zero,11e2 <_edata+0x136>
    11d0:	00000c2f          	0xc2f
    11d4:	5226                	lw	tp,104(sp)
    11d6:	0004                	0x4
    11d8:	0100                	addi	s0,sp,128
    11da:	01a4                	addi	s1,sp,200
    11dc:	5d09                	li	s10,-30
    11de:	0000                	unimp
    11e0:	4d00                	lw	s0,24(a0)
    11e2:	000c                	0xc
    11e4:	3300                	fld	fs0,32(a4)
    11e6:	0069                	c.nop	26
    11e8:	0000                	unimp
    11ea:	00000c9b          	0xc9b
    11ee:	00006933          	or	s2,zero,zero
    11f2:	c900                	sw	s0,16(a0)
    11f4:	000c                	0xc
    11f6:	3300                	fld	fs0,32(a4)
    11f8:	0069                	c.nop	26
    11fa:	0000                	unimp
    11fc:	00000cf7          	0xcf7
    1200:	00006933          	or	s2,zero,zero
    1204:	2500                	fld	fs0,8(a0)
    1206:	000d                	c.nop	3
    1208:	3300                	fld	fs0,32(a4)
    120a:	0069                	c.nop	26
    120c:	0000                	unimp
    120e:	00000d53          	fadd.s	fs10,ft0,ft0,rne
    1212:	00006933          	or	s2,zero,zero
    1216:	8100                	0x8100
    1218:	000d                	c.nop	3
    121a:	3300                	fld	fs0,32(a4)
    121c:	0069                	c.nop	26
    121e:	0000                	unimp
    1220:	00000daf          	0xdaf
    1224:	00066c2b          	0x66c2b
    1228:	ac00                	fsd	fs0,24(s0)
    122a:	001c                	0x1c
    122c:	4500                	lw	s0,8(a0)
    122e:	0012                	c.slli	zero,0x4
    1230:	2c00                	fld	fs0,24(s0)
    1232:	5a01                	li	s4,-32
    1234:	8402                	jr	s0
    1236:	2c00                	fld	fs0,24(s0)
    1238:	5b01                	li	s6,-32
    123a:	5a01f303          	0x5a01f303
    123e:	012c                	addi	a1,sp,136
    1240:	025c                	addi	a5,sp,260
    1242:	0079                	c.nop	30
    1244:	2b00                	fld	fs0,16(a4)
    1246:	0674                	addi	a3,sp,780
    1248:	0000                	unimp
    124a:	1cac                	addi	a1,sp,632
    124c:	0000                	unimp
    124e:	1265                	addi	tp,tp,-7
    1250:	0000                	unimp
    1252:	012c                	addi	a1,sp,136
    1254:	025a                	slli	tp,tp,0x16
    1256:	0085                	addi	ra,ra,1
    1258:	012c                	addi	a1,sp,136
    125a:	008b025b          	0x8b025b
    125e:	012c                	addi	a1,sp,136
    1260:	025c                	addi	a5,sp,260
    1262:	0079                	c.nop	30
    1264:	2b00                	fld	fs0,16(a4)
    1266:	0692                	slli	a3,a3,0x4
    1268:	0000                	unimp
    126a:	1c0e                	slli	s8,s8,0x23
    126c:	0000                	unimp
    126e:	1285                	addi	t0,t0,-31
    1270:	0000                	unimp
    1272:	012c                	addi	a1,sp,136
    1274:	025a                	slli	tp,tp,0x16
    1276:	0084                	addi	s1,sp,64
    1278:	012c                	addi	a1,sp,136
    127a:	0082025b          	0x82025b
    127e:	012c                	addi	a1,sp,136
    1280:	025c                	addi	a5,sp,260
    1282:	0079                	c.nop	30
    1284:	2b00                	fld	fs0,16(a4)
    1286:	069a                	slli	a3,a3,0x6
    1288:	0000                	unimp
    128a:	1c0e                	slli	s8,s8,0x23
    128c:	0000                	unimp
    128e:	12a5                	addi	t0,t0,-23
    1290:	0000                	unimp
    1292:	012c                	addi	a1,sp,136
    1294:	025a                	slli	tp,tp,0x16
    1296:	0085                	addi	ra,ra,1
    1298:	012c                	addi	a1,sp,136
    129a:	0082025b          	0x82025b
    129e:	012c                	addi	a1,sp,136
    12a0:	025c                	addi	a5,sp,260
    12a2:	0079                	c.nop	30
    12a4:	2b00                	fld	fs0,16(a4)
    12a6:	06a6                	slli	a3,a3,0x9
    12a8:	0000                	unimp
    12aa:	1564                	addi	s1,sp,684
    12ac:	0000                	unimp
    12ae:	12d1                	addi	t0,t0,-12
    12b0:	0000                	unimp
    12b2:	012c                	addi	a1,sp,136
    12b4:	025a                	slli	tp,tp,0x16
    12b6:	0084                	addi	s1,sp,64
    12b8:	012c                	addi	a1,sp,136
    12ba:	0079025b          	0x79025b
    12be:	012c                	addi	a1,sp,136
    12c0:	025c                	addi	a5,sp,260
    12c2:	0085                	addi	ra,ra,1
    12c4:	012c                	addi	a1,sp,136
    12c6:	025d                	addi	tp,tp,23
    12c8:	0079                	c.nop	30
    12ca:	012c                	addi	a1,sp,136
    12cc:	025e                	slli	tp,tp,0x17
    12ce:	0082                	c.slli64	ra
    12d0:	2b00                	fld	fs0,16(a4)
    12d2:	06ba                	slli	a3,a3,0xe
    12d4:	0000                	unimp
    12d6:	1cac                	addi	a1,sp,632
    12d8:	0000                	unimp
    12da:	12f1                	addi	t0,t0,-4
    12dc:	0000                	unimp
    12de:	012c                	addi	a1,sp,136
    12e0:	025a                	slli	tp,tp,0x16
    12e2:	0072                	c.slli	zero,0x1c
    12e4:	012c                	addi	a1,sp,136
    12e6:	0084025b          	0x84025b
    12ea:	012c                	addi	a1,sp,136
    12ec:	025c                	addi	a5,sp,260
    12ee:	0079                	c.nop	30
    12f0:	2b00                	fld	fs0,16(a4)
    12f2:	06c2                	slli	a3,a3,0x10
    12f4:	0000                	unimp
    12f6:	1d42                	slli	s10,s10,0x30
    12f8:	0000                	unimp
    12fa:	1311                	addi	t1,t1,-28
    12fc:	0000                	unimp
    12fe:	012c                	addi	a1,sp,136
    1300:	025a                	slli	tp,tp,0x16
    1302:	0072                	c.slli	zero,0x1c
    1304:	012c                	addi	a1,sp,136
    1306:	0087025b          	0x87025b
    130a:	012c                	addi	a1,sp,136
    130c:	025c                	addi	a5,sp,260
    130e:	0079                	c.nop	30
    1310:	2b00                	fld	fs0,16(a4)
    1312:	06ca                	slli	a3,a3,0x12
    1314:	0000                	unimp
    1316:	1c0e                	slli	s8,s8,0x23
    1318:	0000                	unimp
    131a:	1331                	addi	t1,t1,-20
    131c:	0000                	unimp
    131e:	012c                	addi	a1,sp,136
    1320:	025a                	slli	tp,tp,0x16
    1322:	0072                	c.slli	zero,0x1c
    1324:	012c                	addi	a1,sp,136
    1326:	0082025b          	0x82025b
    132a:	012c                	addi	a1,sp,136
    132c:	025c                	addi	a5,sp,260
    132e:	0079                	c.nop	30
    1330:	2b00                	fld	fs0,16(a4)
    1332:	06d6                	slli	a3,a3,0x15
    1334:	0000                	unimp
    1336:	1564                	addi	s1,sp,684
    1338:	0000                	unimp
    133a:	135d                	addi	t1,t1,-9
    133c:	0000                	unimp
    133e:	012c                	addi	a1,sp,136
    1340:	025a                	slli	tp,tp,0x16
    1342:	0072                	c.slli	zero,0x1c
    1344:	012c                	addi	a1,sp,136
    1346:	0079025b          	0x79025b
    134a:	012c                	addi	a1,sp,136
    134c:	025c                	addi	a5,sp,260
    134e:	0085                	addi	ra,ra,1
    1350:	012c                	addi	a1,sp,136
    1352:	025d                	addi	tp,tp,23
    1354:	0079                	c.nop	30
    1356:	012c                	addi	a1,sp,136
    1358:	025e                	slli	tp,tp,0x17
    135a:	0082                	c.slli64	ra
    135c:	2b00                	fld	fs0,16(a4)
    135e:	06de                	slli	a3,a3,0x17
    1360:	0000                	unimp
    1362:	1cac                	addi	a1,sp,632
    1364:	0000                	unimp
    1366:	00001377          	0x1377
    136a:	012c                	addi	a1,sp,136
    136c:	025a                	slli	tp,tp,0x16
    136e:	0089                	addi	ra,ra,2
    1370:	012c                	addi	a1,sp,136
    1372:	025c                	addi	a5,sp,260
    1374:	0079                	c.nop	30
    1376:	2b00                	fld	fs0,16(a4)
    1378:	06e6                	slli	a3,a3,0x19
    137a:	0000                	unimp
    137c:	1c0e                	slli	s8,s8,0x23
    137e:	0000                	unimp
    1380:	00001397          	auipc	t2,0x1
    1384:	012c                	addi	a1,sp,136
    1386:	025a                	slli	tp,tp,0x16
    1388:	0089                	addi	ra,ra,2
    138a:	012c                	addi	a1,sp,136
    138c:	0082025b          	0x82025b
    1390:	012c                	addi	a1,sp,136
    1392:	025c                	addi	a5,sp,260
    1394:	0079                	c.nop	30
    1396:	2b00                	fld	fs0,16(a4)
    1398:	06f4                	addi	a3,sp,844
    139a:	0000                	unimp
    139c:	1a25                	addi	s4,s4,-23
    139e:	0000                	unimp
    13a0:	13c8                	addi	a0,sp,484
    13a2:	0000                	unimp
    13a4:	012c                	addi	a1,sp,136
    13a6:	025a                	slli	tp,tp,0x16
    13a8:	0089                	addi	ra,ra,2
    13aa:	012c                	addi	a1,sp,136
    13ac:	0079025b          	0x79025b
    13b0:	012c                	addi	a1,sp,136
    13b2:	025c                	addi	a5,sp,260
    13b4:	0086                	slli	ra,ra,0x1
    13b6:	012c                	addi	a1,sp,136
    13b8:	025d                	addi	tp,tp,23
    13ba:	0079                	c.nop	30
    13bc:	012c                	addi	a1,sp,136
    13be:	025e                	slli	tp,tp,0x17
    13c0:	0082                	c.slli64	ra
    13c2:	012c                	addi	a1,sp,136
    13c4:	015f 0030 fc2b      	0xfc2b0030015f
    13ca:	0006                	c.slli	zero,0x1
    13cc:	ac00                	fsd	fs0,24(s0)
    13ce:	001c                	0x1c
    13d0:	e200                	fsw	fs0,0(a2)
    13d2:	2c000013          	li	zero,704
    13d6:	5a01                	li	s4,-32
    13d8:	7202                	flw	ft4,32(sp)
    13da:	2c00                	fld	fs0,24(s0)
    13dc:	5c01                	li	s8,-32
    13de:	7902                	flw	fs2,32(sp)
    13e0:	0000                	unimp
    13e2:	0007042b          	0x7042b
    13e6:	0e00                	addi	s0,sp,784
    13e8:	001c                	0x1c
    13ea:	0200                	addi	s0,sp,256
    13ec:	0014                	0x14
    13ee:	2c00                	fld	fs0,24(s0)
    13f0:	5a01                	li	s4,-32
    13f2:	7202                	flw	ft4,32(sp)
    13f4:	2c00                	fld	fs0,24(s0)
    13f6:	5b01                	li	s6,-32
    13f8:	8202                	jr	tp
    13fa:	2c00                	fld	fs0,24(s0)
    13fc:	5c01                	li	s8,-32
    13fe:	7902                	flw	fs2,32(sp)
    1400:	0000                	unimp
    1402:	00070c2b          	0x70c2b
    1406:	ac00                	fsd	fs0,24(s0)
    1408:	001c                	0x1c
    140a:	2200                	fld	fs0,0(a2)
    140c:	0014                	0x14
    140e:	2c00                	fld	fs0,24(s0)
    1410:	5a01                	li	s4,-32
    1412:	8802                	jr	a6
    1414:	2c00                	fld	fs0,24(s0)
    1416:	5b01                	li	s6,-32
    1418:	8b02                	jr	s6
    141a:	2c00                	fld	fs0,24(s0)
    141c:	5c01                	li	s8,-32
    141e:	7902                	flw	fs2,32(sp)
    1420:	0000                	unimp
    1422:	0007142b          	0x7142b
    1426:	4200                	lw	s0,0(a2)
    1428:	001d                	c.nop	7
    142a:	4200                	lw	s0,0(a2)
    142c:	0014                	0x14
    142e:	2c00                	fld	fs0,24(s0)
    1430:	5a01                	li	s4,-32
    1432:	8802                	jr	a6
    1434:	2c00                	fld	fs0,24(s0)
    1436:	5b01                	li	s6,-32
    1438:	7202                	flw	ft4,32(sp)
    143a:	2c00                	fld	fs0,24(s0)
    143c:	5c01                	li	s8,-32
    143e:	7902                	flw	fs2,32(sp)
    1440:	0000                	unimp
    1442:	00071c2b          	0x71c2b
    1446:	0e00                	addi	s0,sp,784
    1448:	001c                	0x1c
    144a:	6200                	flw	fs0,0(a2)
    144c:	0014                	0x14
    144e:	2c00                	fld	fs0,24(s0)
    1450:	5a01                	li	s4,-32
    1452:	8802                	jr	a6
    1454:	2c00                	fld	fs0,24(s0)
    1456:	5b01                	li	s6,-32
    1458:	8202                	jr	tp
    145a:	2c00                	fld	fs0,24(s0)
    145c:	5c01                	li	s8,-32
    145e:	7902                	flw	fs2,32(sp)
    1460:	0000                	unimp
    1462:	0007242b          	0x7242b
    1466:	ac00                	fsd	fs0,24(s0)
    1468:	001c                	0x1c
    146a:	8200                	0x8200
    146c:	0014                	0x14
    146e:	2c00                	fld	fs0,24(s0)
    1470:	5a01                	li	s4,-32
    1472:	8402                	jr	s0
    1474:	2c00                	fld	fs0,24(s0)
    1476:	5b01                	li	s6,-32
    1478:	8502                	jr	a0
    147a:	2c00                	fld	fs0,24(s0)
    147c:	5c01                	li	s8,-32
    147e:	7902                	flw	fs2,32(sp)
    1480:	0000                	unimp
    1482:	00072c2b          	0x72c2b
    1486:	ac00                	fsd	fs0,24(s0)
    1488:	001c                	0x1c
    148a:	a200                	fsd	fs0,0(a2)
    148c:	0014                	0x14
    148e:	2c00                	fld	fs0,24(s0)
    1490:	5a01                	li	s4,-32
    1492:	8502                	jr	a0
    1494:	2c00                	fld	fs0,24(s0)
    1496:	5b01                	li	s6,-32
    1498:	8702                	jr	a4
    149a:	2c00                	fld	fs0,24(s0)
    149c:	5c01                	li	s8,-32
    149e:	7902                	flw	fs2,32(sp)
    14a0:	0000                	unimp
    14a2:	0007342b          	0x7342b
    14a6:	ac00                	fsd	fs0,24(s0)
    14a8:	001c                	0x1c
    14aa:	c200                	sw	s0,0(a2)
    14ac:	0014                	0x14
    14ae:	2c00                	fld	fs0,24(s0)
    14b0:	5a01                	li	s4,-32
    14b2:	8b02                	jr	s6
    14b4:	2c00                	fld	fs0,24(s0)
    14b6:	5b01                	li	s6,-32
    14b8:	8602                	jr	a2
    14ba:	2c00                	fld	fs0,24(s0)
    14bc:	5c01                	li	s8,-32
    14be:	7902                	flw	fs2,32(sp)
    14c0:	0000                	unimp
    14c2:	3c2d                	jal	efc <main+0xd8>
    14c4:	ac000007          	0xac000007
    14c8:	001c                	0x1c
    14ca:	2c00                	fld	fs0,24(s0)
    14cc:	5a01                	li	s4,-32
    14ce:	8602                	jr	a2
    14d0:	2c00                	fld	fs0,24(s0)
    14d2:	5b01                	li	s6,-32
    14d4:	8802                	jr	a6
    14d6:	2c00                	fld	fs0,24(s0)
    14d8:	5c01                	li	s8,-32
    14da:	7902                	flw	fs2,32(sp)
    14dc:	0000                	unimp
    14de:	0900                	addi	s0,sp,144
    14e0:	005d                	c.nop	23
    14e2:	0000                	unimp
    14e4:	14f2                	slli	s1,s1,0x3c
    14e6:	0000                	unimp
    14e8:	6934                	flw	fa3,80(a0)
    14ea:	0000                	unimp
    14ec:	e500                	fsw	fs0,8(a0)
    14ee:	0011                	c.nop	4
    14f0:	0000                	unimp
    14f2:	5d09                	li	s10,-30
    14f4:	0000                	unimp
    14f6:	0500                	addi	s0,sp,640
    14f8:	0015                	c.nop	5
    14fa:	3400                	fld	fs0,40(s0)
    14fc:	0069                	c.nop	26
    14fe:	0000                	unimp
    1500:	11ee                	slli	gp,gp,0x3b
    1502:	0000                	unimp
    1504:	0900                	addi	s0,sp,144
    1506:	005d                	c.nop	23
    1508:	0000                	unimp
    150a:	1518                	addi	a4,sp,672
    150c:	0000                	unimp
    150e:	6934                	flw	fa3,80(a0)
    1510:	0000                	unimp
    1512:	f700                	fsw	fs0,40(a4)
    1514:	0011                	c.nop	4
    1516:	0000                	unimp
    1518:	5d09                	li	s10,-30
    151a:	0000                	unimp
    151c:	2b00                	fld	fs0,16(a4)
    151e:	0015                	c.nop	5
    1520:	3400                	fld	fs0,40(s0)
    1522:	0069                	c.nop	26
    1524:	0000                	unimp
    1526:	1200                	addi	s0,sp,288
    1528:	0000                	unimp
    152a:	0900                	addi	s0,sp,144
    152c:	005d                	c.nop	23
    152e:	0000                	unimp
    1530:	153e                	slli	a0,a0,0x2f
    1532:	0000                	unimp
    1534:	6934                	flw	fa3,80(a0)
    1536:	0000                	unimp
    1538:	0900                	addi	s0,sp,144
    153a:	0012                	c.slli	zero,0x4
    153c:	0000                	unimp
    153e:	5d09                	li	s10,-30
    1540:	0000                	unimp
    1542:	5100                	lw	s0,32(a0)
    1544:	0015                	c.nop	5
    1546:	3400                	fld	fs0,40(s0)
    1548:	0069                	c.nop	26
    154a:	0000                	unimp
    154c:	1212                	slli	tp,tp,0x24
    154e:	0000                	unimp
    1550:	0900                	addi	s0,sp,144
    1552:	005d                	c.nop	23
    1554:	0000                	unimp
    1556:	1564                	addi	s1,sp,684
    1558:	0000                	unimp
    155a:	6934                	flw	fa3,80(a0)
    155c:	0000                	unimp
    155e:	1b00                	addi	s0,sp,432
    1560:	0012                	c.slli	zero,0x4
    1562:	0000                	unimp
    1564:	00018a2f          	0x18a2f
    1568:	0100                	addi	s0,sp,128
    156a:	63060103          	lb	sp,1584(a2)
    156e:	5800000b          	0x5800000b
    1572:	0004                	0x4
    1574:	a400                	fsd	fs0,8(s0)
    1576:	0001                	nop
    1578:	0100                	addi	s0,sp,128
    157a:	439c                	lw	a5,0(a5)
    157c:	0018                	0x18
    157e:	3000                	fld	fs0,32(s0)
    1580:	756e                	flw	fa0,248(sp)
    1582:	006d                	c.nop	27
    1584:	0301                	addi	t1,t1,0
    1586:	1301                	addi	t1,t1,-32
    1588:	00000b63          	beqz	zero,159e <result+0x42>
    158c:	0ddd                	addi	s11,s11,23
    158e:	0000                	unimp
    1590:	0631                	addi	a2,a2,12
    1592:	0001                	nop
    1594:	0100                	addi	s0,sp,128
    1596:	5d1c0103          	lb	sp,1489(s8) # fffe25d1 <_stack_start+0xfffd25d1>
    159a:	0000                	unimp
    159c:	0900                	addi	s0,sp,144
    159e:	000e                	c.slli	zero,0x3
    15a0:	3100                	fld	fs0,32(a0)
    15a2:	06c4                	addi	s1,sp,836
    15a4:	0000                	unimp
    15a6:	0301                	addi	t1,t1,0
    15a8:	2801                	jal	15b8 <result+0x5c>
    15aa:	00000b63          	beqz	zero,15c0 <result+0x64>
    15ae:	0e5a                	slli	t3,t3,0x16
    15b0:	0000                	unimp
    15b2:	e831                	bnez	s0,1606 <result+0xaa>
    15b4:	0006                	c.slli	zero,0x1
    15b6:	0100                	addi	s0,sp,128
    15b8:	5d330103          	lb	sp,1491(t1)
    15bc:	0000                	unimp
    15be:	9f00                	0x9f00
    15c0:	000e                	c.slli	zero,0x3
    15c2:	3000                	fld	fs0,32(s0)
    15c4:	6f6d                	lui	t5,0x1b
    15c6:	0064                	addi	s1,sp,12
    15c8:	0301                	addi	t1,t1,0
    15ca:	3f01                	jal	14da <product2+0x1d6>
    15cc:	005d                	c.nop	23
    15ce:	0000                	unimp
    15d0:	0ed6                	slli	t4,t4,0x15
    15d2:	0000                	unimp
    15d4:	752a                	flw	fa0,168(sp)
    15d6:	0100                	addi	s0,sp,128
    15d8:	0105                	addi	sp,sp,1
    15da:	5d09                	li	s10,-30
    15dc:	0000                	unimp
    15de:	0d00                	addi	s0,sp,656
    15e0:	2a00000f          	0x2a00000f
    15e4:	0064                	addi	s1,sp,12
    15e6:	0501                	addi	a0,a0,0
    15e8:	0b01                	addi	s6,s6,0
    15ea:	005d                	c.nop	23
    15ec:	0000                	unimp
    15ee:	0f36                	slli	t5,t5,0xd
    15f0:	0000                	unimp
    15f2:	6435                	lui	s0,0xd
    15f4:	0032                	c.slli	zero,0xc
    15f6:	0501                	addi	a0,a0,0
    15f8:	0d01                	addi	s10,s10,0
    15fa:	005d                	c.nop	23
    15fc:	0000                	unimp
    15fe:	692a                	flw	fs2,136(sp)
    1600:	0100                	addi	s0,sp,128
    1602:	0105                	addi	sp,sp,1
    1604:	5d10                	lw	a2,56(a0)
    1606:	0000                	unimp
    1608:	5400                	lw	s0,40(s0)
    160a:	3500000f          	0x3500000f
    160e:	5f62                	lw	t5,56(sp)
    1610:	004e                	c.slli	zero,0x13
    1612:	0501                	addi	a0,a0,0
    1614:	1201                	addi	tp,tp,-32
    1616:	005d                	c.nop	23
    1618:	0000                	unimp
    161a:	722a                	flw	ft4,168(sp)
    161c:	645f 0100 0105      	0x1050100645f
    1622:	5d16                	lw	s10,100(sp)
    1624:	0000                	unimp
    1626:	d600                	sw	s0,40(a2)
    1628:	2600000f          	0x2600000f
    162c:	0284                	addi	s1,sp,320
    162e:	0000                	unimp
    1630:	0601                	addi	a2,a2,0
    1632:	0a01                	addi	s4,s4,0
    1634:	00000b63          	beqz	zero,164a <result+0xee>
    1638:	0ff4                	addi	a3,sp,988
    163a:	0000                	unimp
    163c:	762a                	flw	fa2,168(sp)
    163e:	0100                	addi	s0,sp,128
    1640:	0108                	addi	a0,sp,128
    1642:	4309                	li	t1,2
    1644:	0018                	0x18
    1646:	0c00                	addi	s0,sp,528
    1648:	0010                	0x10
    164a:	2a00                	fld	fs0,16(a2)
    164c:	0071                	c.nop	28
    164e:	0901                	addi	s2,s2,0
    1650:	0901                	addi	s2,s2,0
    1652:	1856                	slli	a6,a6,0x35
    1654:	0000                	unimp
    1656:	102c                	addi	a1,sp,40
    1658:	0000                	unimp
    165a:	8226                	mv	tp,s1
    165c:	0001                	nop
    165e:	0100                	addi	s0,sp,128
    1660:	010a                	slli	sp,sp,0x2
    1662:	630a                	flw	ft6,128(sp)
    1664:	4c00000b          	0x4c00000b
    1668:	0010                	0x10
    166a:	2600                	fld	fs0,8(a2)
    166c:	0226                	slli	tp,tp,0x9
    166e:	0000                	unimp
    1670:	0b01                	addi	s6,s6,0
    1672:	0901                	addi	s2,s2,0
    1674:	1869                	addi	a6,a6,-6
    1676:	0000                	unimp
    1678:	106a                	c.slli	zero,0x3a
    167a:	0000                	unimp
    167c:	2426                	fld	fs0,72(sp)
    167e:	0002                	c.slli64	zero
    1680:	0100                	addi	s0,sp,128
    1682:	010c                	addi	a1,sp,128
    1684:	7c09                	lui	s8,0xfffe2
    1686:	0018                	0x18
    1688:	b600                	fsd	fs0,40(a2)
    168a:	0010                	0x10
    168c:	3300                	fld	fs0,32(a4)
    168e:	0069                	c.nop	26
    1690:	0000                	unimp
    1692:	10ee                	slli	ra,ra,0x3b
    1694:	0000                	unimp
    1696:	00006933          	or	s2,zero,zero
    169a:	1c00                	addi	s0,sp,560
    169c:	0011                	c.nop	4
    169e:	3300                	fld	fs0,32(a4)
    16a0:	0069                	c.nop	26
    16a2:	0000                	unimp
    16a4:	114a                	slli	sp,sp,0x32
    16a6:	0000                	unimp
    16a8:	00006933          	or	s2,zero,zero
    16ac:	7800                	flw	fs0,48(s0)
    16ae:	0011                	c.nop	4
    16b0:	2b00                	fld	fs0,16(a4)
    16b2:	04b4                	addi	a3,sp,584
    16b4:	0000                	unimp
    16b6:	1cac                	addi	a1,sp,632
    16b8:	0000                	unimp
    16ba:	16d2                	slli	a3,a3,0x34
    16bc:	0000                	unimp
    16be:	012c                	addi	a1,sp,136
    16c0:	025a                	slli	tp,tp,0x16
    16c2:	0082                	c.slli64	ra
    16c4:	012c                	addi	a1,sp,136
    16c6:	01f3035b          	0x1f3035b
    16ca:	2c5a                	fld	fs8,400(sp)
    16cc:	5c01                	li	s8,-32
    16ce:	7902                	flw	fs2,32(sp)
    16d0:	0000                	unimp
    16d2:	0004bc2b          	0x4bc2b
    16d6:	0e00                	addi	s0,sp,784
    16d8:	001c                	0x1c
    16da:	f200                	fsw	fs0,32(a2)
    16dc:	0016                	c.slli	zero,0x5
    16de:	2c00                	fld	fs0,24(s0)
    16e0:	5a01                	li	s4,-32
    16e2:	8202                	jr	tp
    16e4:	2c00                	fld	fs0,24(s0)
    16e6:	5b01                	li	s6,-32
    16e8:	8302                	jr	t1
    16ea:	2c00                	fld	fs0,24(s0)
    16ec:	5c01                	li	s8,-32
    16ee:	7902                	flw	fs2,32(sp)
    16f0:	0000                	unimp
    16f2:	0004c62b          	0x4c62b
    16f6:	ac00                	fsd	fs0,24(s0)
    16f8:	001c                	0x1c
    16fa:	1200                	addi	s0,sp,288
    16fc:	2c000017          	auipc	zero,0x2c000
    1700:	5a01                	li	s4,-32
    1702:	8702                	jr	a4
    1704:	2c00                	fld	fs0,24(s0)
    1706:	5b01                	li	s6,-32
    1708:	8a02                	jr	s4
    170a:	2c00                	fld	fs0,24(s0)
    170c:	5c01                	li	s8,-32
    170e:	8402                	jr	s0
    1710:	0000                	unimp
    1712:	0004ce2b          	0x4ce2b
    1716:	0e00                	addi	s0,sp,784
    1718:	001c                	0x1c
    171a:	3200                	fld	fs0,32(a2)
    171c:	2c000017          	auipc	zero,0x2c000
    1720:	5a01                	li	s4,-32
    1722:	8702                	jr	a4
    1724:	2c00                	fld	fs0,24(s0)
    1726:	5b01                	li	s6,-32
    1728:	8302                	jr	t1
    172a:	2c00                	fld	fs0,24(s0)
    172c:	5c01                	li	s8,-32
    172e:	8402                	jr	s0
    1730:	0000                	unimp
    1732:	00053a2b          	0x53a2b
    1736:	ac00                	fsd	fs0,24(s0)
    1738:	001c                	0x1c
    173a:	5500                	lw	s0,40(a0)
    173c:	2c000017          	auipc	zero,0x2c000
    1740:	5a01                	li	s4,-32
    1742:	0305                	addi	t1,t1,1
    1744:	155c                	addi	a5,sp,676
    1746:	0000                	unimp
    1748:	012c                	addi	a1,sp,136
    174a:	0086025b          	0x86025b
    174e:	012c                	addi	a1,sp,136
    1750:	025c                	addi	a5,sp,260
    1752:	0079                	c.nop	30
    1754:	2b00                	fld	fs0,16(a4)
    1756:	058a                	slli	a1,a1,0x2
    1758:	0000                	unimp
    175a:	1c0e                	slli	s8,s8,0x23
    175c:	0000                	unimp
    175e:	1775                	addi	a4,a4,-3
    1760:	0000                	unimp
    1762:	012c                	addi	a1,sp,136
    1764:	025a                	slli	tp,tp,0x16
    1766:	0085                	addi	ra,ra,1
    1768:	012c                	addi	a1,sp,136
    176a:	0083025b          	0x83025b
    176e:	012c                	addi	a1,sp,136
    1770:	025c                	addi	a5,sp,260
    1772:	0079                	c.nop	30
    1774:	2b00                	fld	fs0,16(a4)
    1776:	0598                	addi	a4,sp,704
    1778:	0000                	unimp
    177a:	1a25                	addi	s4,s4,-23
    177c:	0000                	unimp
    177e:	17a6                	slli	a5,a5,0x29
    1780:	0000                	unimp
    1782:	012c                	addi	a1,sp,136
    1784:	025a                	slli	tp,tp,0x16
    1786:	0072                	c.slli	zero,0x1c
    1788:	012c                	addi	a1,sp,136
    178a:	0084025b          	0x84025b
    178e:	012c                	addi	a1,sp,136
    1790:	025c                	addi	a5,sp,260
    1792:	0085                	addi	ra,ra,1
    1794:	012c                	addi	a1,sp,136
    1796:	025d                	addi	tp,tp,23
    1798:	0084                	addi	s1,sp,64
    179a:	012c                	addi	a1,sp,136
    179c:	025e                	slli	tp,tp,0x17
    179e:	012c0083          	lb	ra,18(s8) # fffe2012 <_stack_start+0xfffd2012>
    17a2:	015f 0030 a02b      	0xa02b0030015f
    17a8:	0005                	c.nop	1
    17aa:	0e00                	addi	s0,sp,784
    17ac:	001c                	0x1c
    17ae:	c600                	sw	s0,8(a2)
    17b0:	2c000017          	auipc	zero,0x2c000
    17b4:	5a01                	li	s4,-32
    17b6:	8b02                	jr	s6
    17b8:	2c00                	fld	fs0,24(s0)
    17ba:	5b01                	li	s6,-32
    17bc:	8302                	jr	t1
    17be:	2c00                	fld	fs0,24(s0)
    17c0:	5c01                	li	s8,-32
    17c2:	7902                	flw	fs2,32(sp)
    17c4:	0000                	unimp
    17c6:	0005a82b          	0x5a82b
    17ca:	4200                	lw	s0,0(a2)
    17cc:	001d                	c.nop	7
    17ce:	e600                	fsw	fs0,8(a2)
    17d0:	2c000017          	auipc	zero,0x2c000
    17d4:	5a01                	li	s4,-32
    17d6:	8202                	jr	tp
    17d8:	2c00                	fld	fs0,24(s0)
    17da:	5b01                	li	s6,-32
    17dc:	8b02                	jr	s6
    17de:	2c00                	fld	fs0,24(s0)
    17e0:	5c01                	li	s8,-32
    17e2:	7902                	flw	fs2,32(sp)
    17e4:	0000                	unimp
    17e6:	0005b02b          	0x5b02b
    17ea:	0e00                	addi	s0,sp,784
    17ec:	001c                	0x1c
    17ee:	0600                	addi	s0,sp,768
    17f0:	0018                	0x18
    17f2:	2c00                	fld	fs0,24(s0)
    17f4:	5a01                	li	s4,-32
    17f6:	8202                	jr	tp
    17f8:	2c00                	fld	fs0,24(s0)
    17fa:	5b01                	li	s6,-32
    17fc:	8302                	jr	t1
    17fe:	2c00                	fld	fs0,24(s0)
    1800:	5c01                	li	s8,-32
    1802:	7902                	flw	fs2,32(sp)
    1804:	0000                	unimp
    1806:	0005b82b          	0x5b82b
    180a:	d800                	sw	s0,48(s0)
    180c:	001d                	c.nop	7
    180e:	2600                	fld	fs0,8(a2)
    1810:	0018                	0x18
    1812:	2c00                	fld	fs0,24(s0)
    1814:	5a01                	li	s4,-32
    1816:	8602                	jr	a2
    1818:	2c00                	fld	fs0,24(s0)
    181a:	5b01                	li	s6,-32
    181c:	8502                	jr	a0
    181e:	2c00                	fld	fs0,24(s0)
    1820:	5c01                	li	s8,-32
    1822:	7902                	flw	fs2,32(sp)
    1824:	0000                	unimp
    1826:	c02d                	beqz	s0,1888 <ti_2+0xd4>
    1828:	0005                	c.nop	1
    182a:	0e00                	addi	s0,sp,784
    182c:	001c                	0x1c
    182e:	2c00                	fld	fs0,24(s0)
    1830:	5a01                	li	s4,-32
    1832:	8602                	jr	a2
    1834:	2c00                	fld	fs0,24(s0)
    1836:	5b01                	li	s6,-32
    1838:	8302                	jr	t1
    183a:	2c00                	fld	fs0,24(s0)
    183c:	5c01                	li	s8,-32
    183e:	7902                	flw	fs2,32(sp)
    1840:	0000                	unimp
    1842:	0900                	addi	s0,sp,144
    1844:	005d                	c.nop	23
    1846:	0000                	unimp
    1848:	1856                	slli	a6,a6,0x35
    184a:	0000                	unimp
    184c:	6934                	flw	fa3,80(a0)
    184e:	0000                	unimp
    1850:	8d00                	0x8d00
    1852:	0016                	c.slli	zero,0x5
    1854:	0000                	unimp
    1856:	5d09                	li	s10,-30
    1858:	0000                	unimp
    185a:	6900                	flw	fs0,16(a0)
    185c:	0018                	0x18
    185e:	3400                	fld	fs0,40(s0)
    1860:	0069                	c.nop	26
    1862:	0000                	unimp
    1864:	1696                	slli	a3,a3,0x25
    1866:	0000                	unimp
    1868:	0900                	addi	s0,sp,144
    186a:	005d                	c.nop	23
    186c:	0000                	unimp
    186e:	187c                	addi	a5,sp,60
    1870:	0000                	unimp
    1872:	6934                	flw	fa3,80(a0)
    1874:	0000                	unimp
    1876:	9f00                	0x9f00
    1878:	0016                	c.slli	zero,0x5
    187a:	0000                	unimp
    187c:	5d09                	li	s10,-30
    187e:	0000                	unimp
    1880:	8f00                	0x8f00
    1882:	0018                	0x18
    1884:	3400                	fld	fs0,40(s0)
    1886:	0069                	c.nop	26
    1888:	0000                	unimp
    188a:	16a8                	addi	a0,sp,872
    188c:	0000                	unimp
    188e:	3600                	fld	fs0,40(a2)
    1890:	002a                	c.slli	zero,0xa
    1892:	0000                	unimp
    1894:	ca01                	beqz	a2,18a4 <ti_2+0xf0>
    1896:	6306                	flw	ft6,64(sp)
    1898:	fa00000b          	0xfa00000b
    189c:	0002                	c.slli64	zero
    189e:	5e00                	lw	s0,56(a2)
    18a0:	0001                	nop
    18a2:	0100                	addi	s0,sp,128
    18a4:	e39c                	fsw	fa5,0(a5)
    18a6:	0019                	c.nop	6
    18a8:	3700                	fld	fs0,40(a4)
    18aa:	0061                	c.nop	24
    18ac:	ca01                	beqz	a2,18bc <ti_2+0x108>
    18ae:	6315                	lui	t1,0x5
    18b0:	cd00000b          	0xcd00000b
    18b4:	0011                	c.nop	4
    18b6:	3800                	fld	fs0,48(s0)
    18b8:	00000737          	lui	a4,0x0
    18bc:	ca01                	beqz	a2,18cc <ti_2+0x118>
    18be:	5d1c                	lw	a5,56(a0)
    18c0:	0000                	unimp
    18c2:	1200                	addi	s0,sp,288
    18c4:	0012                	c.slli	zero,0x4
    18c6:	3700                	fld	fs0,40(a4)
    18c8:	0062                	c.slli	zero,0x18
    18ca:	ca01                	beqz	a2,18da <ti_2+0x126>
    18cc:	6329                	lui	t1,0xa
    18ce:	6300000b          	0x6300000b
    18d2:	0012                	c.slli	zero,0x4
    18d4:	3800                	fld	fs0,48(s0)
    18d6:	073e                	slli	a4,a4,0xf
    18d8:	0000                	unimp
    18da:	ca01                	beqz	a2,18ea <ti_2+0x136>
    18dc:	5d30                	lw	a2,120(a0)
    18de:	0000                	unimp
    18e0:	b300                	fsd	fs0,32(a4)
    18e2:	0012                	c.slli	zero,0x4
    18e4:	3800                	fld	fs0,48(s0)
    18e6:	0554                	addi	a3,sp,644
    18e8:	0000                	unimp
    18ea:	ca01                	beqz	a2,18fa <ti_2+0x146>
    18ec:	5d3c                	lw	a5,120(a0)
    18ee:	0000                	unimp
    18f0:	ea00                	fsw	fs0,16(a2)
    18f2:	0012                	c.slli	zero,0x4
    18f4:	3900                	fld	fs0,48(a0)
    18f6:	0680                	addi	s0,sp,832
    18f8:	0000                	unimp
    18fa:	cc01                	beqz	s0,1912 <ti_2+0x15e>
    18fc:	e309                	bnez	a4,18fe <ti_2+0x14a>
    18fe:	0019                	c.nop	6
    1900:	2100                	fld	fs0,0(a0)
    1902:	3a000013          	li	zero,928
    1906:	0069                	c.nop	26
    1908:	cd01                	beqz	a0,1920 <ti_2+0x16c>
    190a:	5d09                	li	s10,-30
    190c:	0000                	unimp
    190e:	6500                	flw	fs0,8(a0)
    1910:	3a000013          	li	zero,928
    1914:	006a                	c.slli	zero,0x1a
    1916:	cd01                	beqz	a0,192e <ti_2+0x17a>
    1918:	00005d0b          	0x5d0b
    191c:	a500                	fsd	fs0,8(a0)
    191e:	3a000013          	li	zero,928
    1922:	cd01006b          	0xcd01006b
    1926:	5d0d                	li	s10,-29
    1928:	0000                	unimp
    192a:	d900                	sw	s0,48(a0)
    192c:	39000013          	li	zero,912
    1930:	0274                	addi	a3,sp,268
    1932:	0000                	unimp
    1934:	ce01                	beqz	a2,194c <random_keys+0x8>
    1936:	630a                	flw	ft6,128(sp)
    1938:	2700000b          	0x2700000b
    193c:	0014                	0x14
    193e:	3900                	fld	fs0,48(a0)
    1940:	000c                	0xc
    1942:	0000                	unimp
    1944:	cf01                	beqz	a4,195c <random_keys+0x18>
    1946:	ff09                	bnez	a4,1860 <ti_2+0xac>
    1948:	0019                	c.nop	6
    194a:	3f00                	fld	fs0,56(a4)
    194c:	0014                	0x14
    194e:	3900                	fld	fs0,48(a0)
    1950:	036e                	slli	t1,t1,0x1b
    1952:	0000                	unimp
    1954:	d001                	beqz	s0,1854 <ti_2+0xa0>
    1956:	1209                	addi	tp,tp,-30
    1958:	001a                	c.slli	zero,0x6
    195a:	5f00                	lw	s0,56(a4)
    195c:	0014                	0x14
    195e:	3300                	fld	fs0,32(a4)
    1960:	0069                	c.nop	26
    1962:	0000                	unimp
    1964:	14ac                	addi	a1,sp,616
    1966:	0000                	unimp
    1968:	00006933          	or	s2,zero,zero
    196c:	0100                	addi	s0,sp,128
    196e:	0015                	c.nop	5
    1970:	3300                	fld	fs0,32(a4)
    1972:	0069                	c.nop	26
    1974:	0000                	unimp
    1976:	1554                	addi	a3,sp,676
    1978:	0000                	unimp
    197a:	00006933          	or	s2,zero,zero
    197e:	8200                	0x8200
    1980:	0015                	c.nop	5
    1982:	2b00                	fld	fs0,16(a4)
    1984:	037c                	addi	a5,sp,396
    1986:	0000                	unimp
    1988:	1cac                	addi	a1,sp,632
    198a:	0000                	unimp
    198c:	19a4                	addi	s1,sp,248
    198e:	0000                	unimp
    1990:	012c                	addi	a1,sp,136
    1992:	025a                	slli	tp,tp,0x16
    1994:	008a                	slli	ra,ra,0x2
    1996:	012c                	addi	a1,sp,136
    1998:	01f3035b          	0x1f3035b
    199c:	2c5a                	fld	fs8,400(sp)
    199e:	5c01                	li	s8,-32
    19a0:	8802                	jr	a6
    19a2:	0001                	nop
    19a4:	0003882b          	0x3882b
    19a8:	ac00                	fsd	fs0,24(s0)
    19aa:	001c                	0x1c
    19ac:	c600                	sw	s0,8(a2)
    19ae:	0019                	c.nop	6
    19b0:	2c00                	fld	fs0,24(s0)
    19b2:	5a01                	li	s4,-32
    19b4:	7202                	flw	ft4,32(sp)
    19b6:	2c00                	fld	fs0,24(s0)
    19b8:	5b01                	li	s6,-32
    19ba:	7804                	flw	fs1,48(s0)
    19bc:	7fbc                	flw	fa5,120(a5)
    19be:	2c06                	fld	fs8,64(sp)
    19c0:	5c01                	li	s8,-32
    19c2:	8402                	jr	s0
    19c4:	0000                	unimp
    19c6:	522d                	li	tp,-21
    19c8:	0004                	0x4
    19ca:	d800                	sw	s0,48(s0)
    19cc:	001d                	c.nop	7
    19ce:	2c00                	fld	fs0,24(s0)
    19d0:	5a01                	li	s4,-32
    19d2:	8202                	jr	tp
    19d4:	2c00                	fld	fs0,24(s0)
    19d6:	5b01                	li	s6,-32
    19d8:	8902                	jr	s2
    19da:	2c00                	fld	fs0,24(s0)
    19dc:	5c01                	li	s8,-32
    19de:	8302                	jr	t1
    19e0:	0000                	unimp
    19e2:	0900                	addi	s0,sp,144
    19e4:	005d                	c.nop	23
    19e6:	0000                	unimp
    19e8:	19ff                	0x19ff
    19ea:	0000                	unimp
    19ec:	6934                	flw	fa3,80(a0)
    19ee:	0000                	unimp
    19f0:	5f00                	lw	s0,56(a4)
    19f2:	0019                	c.nop	6
    19f4:	3400                	fld	fs0,40(s0)
    19f6:	0069                	c.nop	26
    19f8:	0000                	unimp
    19fa:	1968                	addi	a0,sp,188
    19fc:	0000                	unimp
    19fe:	0900                	addi	s0,sp,144
    1a00:	005d                	c.nop	23
    1a02:	0000                	unimp
    1a04:	1a12                	slli	s4,s4,0x24
    1a06:	0000                	unimp
    1a08:	6934                	flw	fa3,80(a0)
    1a0a:	0000                	unimp
    1a0c:	7100                	flw	fs0,32(a0)
    1a0e:	0019                	c.nop	6
    1a10:	0000                	unimp
    1a12:	5d09                	li	s10,-30
    1a14:	0000                	unimp
    1a16:	2500                	fld	fs0,8(a0)
    1a18:	001a                	c.slli	zero,0x6
    1a1a:	3400                	fld	fs0,40(s0)
    1a1c:	0069                	c.nop	26
    1a1e:	0000                	unimp
    1a20:	197a                	slli	s2,s2,0x3e
    1a22:	0000                	unimp
    1a24:	3600                	fld	fs0,40(a2)
    1a26:	00000117          	auipc	sp,0x0
    1a2a:	7901                	lui	s2,0xfffe0
    1a2c:	6306                	flw	ft6,64(sp)
    1a2e:	2800000b          	0x2800000b
    1a32:	0001                	nop
    1a34:	d200                	sw	s0,32(a2)
    1a36:	0001                	nop
    1a38:	0100                	addi	s0,sp,128
    1a3a:	cc9c                	sw	a5,24(s1)
    1a3c:	3700001b          	0x3700001b
    1a40:	0061                	c.nop	24
    1a42:	7901                	lui	s2,0xfffe0
    1a44:	6314                	flw	fa3,0(a4)
    1a46:	d700000b          	0xd700000b
    1a4a:	0015                	c.nop	5
    1a4c:	3800                	fld	fs0,48(s0)
    1a4e:	00000737          	lui	a4,0x0
    1a52:	7901                	lui	s2,0xfffe0
    1a54:	00005d1b          	0x5d1b
    1a58:	1c00                	addi	s0,sp,560
    1a5a:	0016                	c.slli	zero,0x5
    1a5c:	3700                	fld	fs0,40(a4)
    1a5e:	0062                	c.slli	zero,0x18
    1a60:	7901                	lui	s2,0xfffe0
    1a62:	6328                	flw	fa0,64(a4)
    1a64:	5600000b          	0x5600000b
    1a68:	0016                	c.slli	zero,0x5
    1a6a:	3800                	fld	fs0,48(s0)
    1a6c:	073e                	slli	a4,a4,0xf
    1a6e:	0000                	unimp
    1a70:	7901                	lui	s2,0xfffe0
    1a72:	00005d2f          	0x5d2f
    1a76:	a600                	fsd	fs0,8(a2)
    1a78:	0016                	c.slli	zero,0x5
    1a7a:	3700                	fld	fs0,40(a4)
    1a7c:	6f6d                	lui	t5,0x1b
    1a7e:	0064                	addi	s1,sp,12
    1a80:	7901                	lui	s2,0xfffe0
    1a82:	00005d3b          	0x5d3b
    1a86:	dd00                	sw	s0,56(a0)
    1a88:	0016                	c.slli	zero,0x5
    1a8a:	3800                	fld	fs0,48(s0)
    1a8c:	0554                	addi	a3,sp,644
    1a8e:	0000                	unimp
    1a90:	7901                	lui	s2,0xfffe0
    1a92:	5d44                	lw	s1,60(a0)
    1a94:	0000                	unimp
    1a96:	1400                	addi	s0,sp,544
    1a98:	39000017          	auipc	zero,0x39000
    1a9c:	0680                	addi	s0,sp,832
    1a9e:	0000                	unimp
    1aa0:	7c01                	lui	s8,0xfffe0
    1aa2:	cc09                	beqz	s0,1abc <random_keys+0x178>
    1aa4:	7200001b          	0x7200001b
    1aa8:	3a000017          	auipc	zero,0x3a000
    1aac:	0069                	c.nop	26
    1aae:	7d01                	lui	s10,0xfffe0
    1ab0:	5d09                	li	s10,-30
    1ab2:	0000                	unimp
    1ab4:	d000                	sw	s0,32(s0)
    1ab6:	3a000017          	auipc	zero,0x3a000
    1aba:	006a                	c.slli	zero,0x1a
    1abc:	7d01                	lui	s10,0xfffe0
    1abe:	00005d0b          	0x5d0b
    1ac2:	3300                	fld	fs0,32(a4)
    1ac4:	0018                	0x18
    1ac6:	3a00                	fld	fs0,48(a2)
    1ac8:	7d01006b          	0x7d01006b
    1acc:	5d0d                	li	s10,-29
    1ace:	0000                	unimp
    1ad0:	a000                	fsd	fs0,0(s0)
    1ad2:	0018                	0x18
    1ad4:	3900                	fld	fs0,48(a0)
    1ad6:	0264                	addi	s1,sp,268
    1ad8:	0000                	unimp
    1ada:	7e01                	lui	t3,0xfffe0
    1adc:	630a                	flw	ft6,128(sp)
    1ade:	ee00000b          	0xee00000b
    1ae2:	0018                	0x18
    1ae4:	3900                	fld	fs0,48(a0)
    1ae6:	000c                	0xc
    1ae8:	0000                	unimp
    1aea:	7f01                	lui	t5,0xfffe0
    1aec:	e809                	bnez	s0,1afe <random_keys+0x1ba>
    1aee:	0600001b          	0x600001b
    1af2:	0019                	c.nop	6
    1af4:	3900                	fld	fs0,48(a0)
    1af6:	036e                	slli	t1,t1,0x1b
    1af8:	0000                	unimp
    1afa:	8001                	c.srli64	s0
    1afc:	fb09                	bnez	a4,1a0e <random_keys+0xca>
    1afe:	4200001b          	0x4200001b
    1b02:	0019                	c.nop	6
    1b04:	3300                	fld	fs0,32(a4)
    1b06:	0069                	c.nop	26
    1b08:	0000                	unimp
    1b0a:	19b6                	slli	s3,s3,0x2d
    1b0c:	0000                	unimp
    1b0e:	00006933          	or	s2,zero,zero
    1b12:	0b00                	addi	s0,sp,400
    1b14:	001a                	c.slli	zero,0x6
    1b16:	3300                	fld	fs0,32(a4)
    1b18:	0069                	c.nop	26
    1b1a:	0000                	unimp
    1b1c:	1a3c                	addi	a5,sp,312
    1b1e:	0000                	unimp
    1b20:	00006933          	or	s2,zero,zero
    1b24:	8100                	0x8100
    1b26:	001a                	c.slli	zero,0x6
    1b28:	2b00                	fld	fs0,16(a4)
    1b2a:	01ba                	slli	gp,gp,0xe
    1b2c:	0000                	unimp
    1b2e:	1cac                	addi	a1,sp,632
    1b30:	0000                	unimp
    1b32:	1b4a                	slli	s6,s6,0x32
    1b34:	0000                	unimp
    1b36:	012c                	addi	a1,sp,136
    1b38:	025a                	slli	tp,tp,0x16
    1b3a:	012c008b          	0x12c008b
    1b3e:	01f3035b          	0x1f3035b
    1b42:	2c5a                	fld	fs8,400(sp)
    1b44:	5c01                	li	s8,-32
    1b46:	8502                	jr	a0
    1b48:	0000                	unimp
    1b4a:	0001c22b          	0x1c22b
    1b4e:	0e00                	addi	s0,sp,784
    1b50:	001c                	0x1c
    1b52:	6a00                	flw	fs0,16(a2)
    1b54:	2c00001b          	0x2c00001b
    1b58:	5a01                	li	s4,-32
    1b5a:	8b02                	jr	s6
    1b5c:	2c00                	fld	fs0,24(s0)
    1b5e:	5b01                	li	s6,-32
    1b60:	8402                	jr	s0
    1b62:	2c00                	fld	fs0,24(s0)
    1b64:	5c01                	li	s8,-32
    1b66:	8502                	jr	a0
    1b68:	0000                	unimp
    1b6a:	0001ce2b          	0x1ce2b
    1b6e:	ac00                	fsd	fs0,24(s0)
    1b70:	001c                	0x1c
    1b72:	8c00                	0x8c00
    1b74:	2c00001b          	0x2c00001b
    1b78:	5a01                	li	s4,-32
    1b7a:	7202                	flw	ft4,32(sp)
    1b7c:	2c00                	fld	fs0,24(s0)
    1b7e:	5b01                	li	s6,-32
    1b80:	7804                	flw	fs1,48(s0)
    1b82:	7fb4                	flw	fa3,120(a5)
    1b84:	2c06                	fld	fs8,64(sp)
    1b86:	5c01                	li	s8,-32
    1b88:	8202                	jr	tp
    1b8a:	0000                	unimp
    1b8c:	0001d62b          	0x1d62b
    1b90:	0e00                	addi	s0,sp,784
    1b92:	001c                	0x1c
    1b94:	ac00                	fsd	fs0,24(s0)
    1b96:	2c00001b          	0x2c00001b
    1b9a:	5a01                	li	s4,-32
    1b9c:	7202                	flw	ft4,32(sp)
    1b9e:	2c00                	fld	fs0,24(s0)
    1ba0:	5b01                	li	s6,-32
    1ba2:	8402                	jr	s0
    1ba4:	2c00                	fld	fs0,24(s0)
    1ba6:	5c01                	li	s8,-32
    1ba8:	8202                	jr	tp
    1baa:	0000                	unimp
    1bac:	442d                	li	s0,11
    1bae:	0002                	c.slli64	zero
    1bb0:	0e00                	addi	s0,sp,784
    1bb2:	001c                	0x1c
    1bb4:	2c00                	fld	fs0,24(s0)
    1bb6:	5a01                	li	s4,-32
    1bb8:	0305                	addi	t1,t1,1
    1bba:	10ac                	addi	a1,sp,104
    1bbc:	0000                	unimp
    1bbe:	012c                	addi	a1,sp,136
    1bc0:	0084025b          	0x84025b
    1bc4:	012c                	addi	a1,sp,136
    1bc6:	025c                	addi	a5,sp,260
    1bc8:	0089                	addi	ra,ra,2
    1bca:	0000                	unimp
    1bcc:	5d09                	li	s10,-30
    1bce:	0000                	unimp
    1bd0:	e800                	fsw	fs0,16(s0)
    1bd2:	3400001b          	0x3400001b
    1bd6:	0069                	c.nop	26
    1bd8:	0000                	unimp
    1bda:	1b05                	addi	s6,s6,-31
    1bdc:	0000                	unimp
    1bde:	6934                	flw	fa3,80(a0)
    1be0:	0000                	unimp
    1be2:	0e00                	addi	s0,sp,784
    1be4:	0000001b          	0x1b
    1be8:	5d09                	li	s10,-30
    1bea:	0000                	unimp
    1bec:	fb00                	fsw	fs0,48(a4)
    1bee:	3400001b          	0x3400001b
    1bf2:	0069                	c.nop	26
    1bf4:	0000                	unimp
    1bf6:	00001b17          	auipc	s6,0x1
    1bfa:	0900                	addi	s0,sp,144
    1bfc:	005d                	c.nop	23
    1bfe:	0000                	unimp
    1c00:	1c0e                	slli	s8,s8,0x23
    1c02:	0000                	unimp
    1c04:	6934                	flw	fa3,80(a0)
    1c06:	0000                	unimp
    1c08:	2000                	fld	fs0,0(s0)
    1c0a:	0000001b          	0x1b
    1c0e:	0005ac3b          	0x5ac3b
    1c12:	0100                	addi	s0,sp,128
    1c14:	0668                	addi	a0,sp,780
    1c16:	010a                	slli	sp,sp,0x2
    1c18:	0000                	unimp
    1c1a:	001e                	c.slli	zero,0x7
    1c1c:	0000                	unimp
    1c1e:	9c01                	0x9c01
    1c20:	1c81                	addi	s9,s9,-32
    1c22:	0000                	unimp
    1c24:	613c                	flw	fa5,64(a0)
    1c26:	0031                	c.nop	12
    1c28:	6801                	0x6801
    1c2a:	6315                	lui	t1,0x5
    1c2c:	0100000b          	0x100000b
    1c30:	3c5a                	fld	fs8,432(sp)
    1c32:	6f6d                	lui	t5,0x1b
    1c34:	0064                	addi	s1,sp,12
    1c36:	6801                	0x6801
    1c38:	5d1d                	li	s10,-25
    1c3a:	0000                	unimp
    1c3c:	0100                	addi	s0,sp,128
    1c3e:	0587385b          	0x587385b
    1c42:	0000                	unimp
    1c44:	6801                	0x6801
    1c46:	5d25                	li	s10,-23
    1c48:	0000                	unimp
    1c4a:	d600                	sw	s0,40(a2)
    1c4c:	001a                	c.slli	zero,0x6
    1c4e:	3a00                	fld	fs0,48(a2)
    1c50:	0069                	c.nop	26
    1c52:	6d01                	0x6d01
    1c54:	5d05                	li	s10,-31
    1c56:	0000                	unimp
    1c58:	f700                	fsw	fs0,40(a4)
    1c5a:	001a                	c.slli	zero,0x6
    1c5c:	3d00                	fld	fs0,56(a0)
    1c5e:	1c81                	addi	s9,s9,-32
    1c60:	0000                	unimp
    1c62:	0110                	addi	a2,sp,128
    1c64:	0000                	unimp
    1c66:	0000                	unimp
    1c68:	0000                	unimp
    1c6a:	7001                	c.lui	zero,0xfffe0
    1c6c:	3e09                	jal	177e <result+0x222>
    1c6e:	1c99                	addi	s9,s9,-26
    1c70:	0000                	unimp
    1c72:	1b16                	slli	s6,s6,0x25
    1c74:	0000                	unimp
    1c76:	8e3e                	mv	t3,a5
    1c78:	001c                	0x1c
    1c7a:	2900                	fld	fs0,16(a0)
    1c7c:	0000001b          	0x1b
    1c80:	3f00                	fld	fs0,56(a4)
    1c82:	010d                	addi	sp,sp,3
    1c84:	0000                	unimp
    1c86:	5b01                	li	s6,-32
    1c88:	0106                	slli	sp,sp,0x1
    1c8a:	1ca6                	slli	s9,s9,0x29
    1c8c:	0000                	unimp
    1c8e:	6140                	flw	fs0,4(a0)
    1c90:	0031                	c.nop	12
    1c92:	5b01                	li	s6,-32
    1c94:	a61e                	fsd	ft7,264(sp)
    1c96:	001c                	0x1c
    1c98:	4000                	lw	s0,0(s0)
    1c9a:	6f6d                	lui	t5,0x1b
    1c9c:	0064                	addi	s1,sp,12
    1c9e:	5b01                	li	s6,-32
    1ca0:	0000692f          	0x692f
    1ca4:	0000                	unimp
    1ca6:	0410                	addi	a2,sp,512
    1ca8:	0069                	c.nop	26
    1caa:	0000                	unimp
    1cac:	0003f73b          	0x3f73b
    1cb0:	0100                	addi	s0,sp,128
    1cb2:	0654                	addi	a3,sp,772
    1cb4:	00e2                	slli	ra,ra,0x18
    1cb6:	0000                	unimp
    1cb8:	0022                	c.slli	zero,0x8
    1cba:	0000                	unimp
    1cbc:	9c01                	0x9c01
    1cbe:	1d1e                	slli	s10,s10,0x27
    1cc0:	0000                	unimp
    1cc2:	613c                	flw	fa5,64(a0)
    1cc4:	0031                	c.nop	12
    1cc6:	5401                	li	s0,-32
    1cc8:	6315                	lui	t1,0x5
    1cca:	0100000b          	0x100000b
    1cce:	3c5a                	fld	fs8,432(sp)
    1cd0:	3261                	jal	1658 <result+0xfc>
    1cd2:	0100                	addi	s0,sp,128
    1cd4:	1d54                	addi	a3,sp,692
    1cd6:	00000b63          	beqz	zero,1cec <random_keys+0x3a8>
    1cda:	5b01                	li	s6,-32
    1cdc:	8738                	0x8738
    1cde:	0005                	c.nop	1
    1ce0:	0100                	addi	s0,sp,128
    1ce2:	2454                	fld	fa3,136(s0)
    1ce4:	005d                	c.nop	23
    1ce6:	0000                	unimp
    1ce8:	00001b43          	fmadd.s	fs6,ft0,ft0,ft0,rtz
    1cec:	693a                	flw	fs2,140(sp)
    1cee:	0100                	addi	s0,sp,128
    1cf0:	0555                	addi	a0,a0,21
    1cf2:	005d                	c.nop	23
    1cf4:	0000                	unimp
    1cf6:	1b64                	addi	s1,sp,444
    1cf8:	0000                	unimp
    1cfa:	1e41                	addi	t3,t3,-16
    1cfc:	001d                	c.nop	7
    1cfe:	f600                	fsw	fs0,40(a2)
    1d00:	0000                	unimp
    1d02:	0a00                	addi	s0,sp,272
    1d04:	0000                	unimp
    1d06:	0100                	addi	s0,sp,128
    1d08:	363e0957          	0x363e0957
    1d0c:	001d                	c.nop	7
    1d0e:	8300                	0x8300
    1d10:	3e00001b          	0x3e00001b
    1d14:	00001d2b          	0x1d2b
    1d18:	1ba6                	slli	s7,s7,0x29
    1d1a:	0000                	unimp
    1d1c:	0000                	unimp
    1d1e:	00069a3f 06420100 	0x642010000069a3f
    1d26:	4201                	li	tp,0
    1d28:	001d                	c.nop	7
    1d2a:	4000                	lw	s0,0(s0)
    1d2c:	3161                	jal	19b4 <random_keys+0x70>
    1d2e:	0100                	addi	s0,sp,128
    1d30:	1e42                	slli	t3,t3,0x30
    1d32:	1ca6                	slli	s9,s9,0x29
    1d34:	0000                	unimp
    1d36:	6140                	flw	fs0,4(a0)
    1d38:	0032                	c.slli	zero,0xc
    1d3a:	4201                	li	tp,0
    1d3c:	a630                	fsd	fa2,72(a2)
    1d3e:	001c                	0x1c
    1d40:	0000                	unimp
    1d42:	0003da3b          	0x3da3b
    1d46:	0100                	addi	s0,sp,128
    1d48:	00ba063b          	0xba063b
    1d4c:	0000                	unimp
    1d4e:	0022                	c.slli	zero,0x8
    1d50:	0000                	unimp
    1d52:	9c01                	0x9c01
    1d54:	1db4                	addi	a3,sp,760
    1d56:	0000                	unimp
    1d58:	613c                	flw	fa5,64(a0)
    1d5a:	0031                	c.nop	12
    1d5c:	3b01                	jal	1a6c <random_keys+0x128>
    1d5e:	6315                	lui	t1,0x5
    1d60:	0100000b          	0x100000b
    1d64:	3c5a                	fld	fs8,432(sp)
    1d66:	3261                	jal	16ee <result+0x192>
    1d68:	0100                	addi	s0,sp,128
    1d6a:	0b631e3b          	0xb631e3b
    1d6e:	0000                	unimp
    1d70:	5b01                	li	s6,-32
    1d72:	8738                	0x8738
    1d74:	0005                	c.nop	1
    1d76:	0100                	addi	s0,sp,128
    1d78:	005d263b          	0x5d263b
    1d7c:	0000                	unimp
    1d7e:	1bc9                	addi	s7,s7,-14
    1d80:	0000                	unimp
    1d82:	693a                	flw	fs2,140(sp)
    1d84:	0100                	addi	s0,sp,128
    1d86:	053c                	addi	a5,sp,648
    1d88:	005d                	c.nop	23
    1d8a:	0000                	unimp
    1d8c:	1bea                	slli	s7,s7,0x3a
    1d8e:	0000                	unimp
    1d90:	b441                	j	1810 <ti_2+0x5c>
    1d92:	001d                	c.nop	7
    1d94:	ce00                	sw	s0,24(a2)
    1d96:	0000                	unimp
    1d98:	0a00                	addi	s0,sp,272
    1d9a:	0000                	unimp
    1d9c:	0100                	addi	s0,sp,128
    1d9e:	093e                	slli	s2,s2,0xf
    1da0:	cc3e                	sw	a5,24(sp)
    1da2:	001d                	c.nop	7
    1da4:	0900                	addi	s0,sp,144
    1da6:	001c                	0x1c
    1da8:	3e00                	fld	fs0,56(a2)
    1daa:	1dc1                	addi	s11,s11,-16
    1dac:	0000                	unimp
    1dae:	1c2c                	addi	a1,sp,568
    1db0:	0000                	unimp
    1db2:	0000                	unimp
    1db4:	0005f43f 062a0100 	0x62a01000005f43f
    1dbc:	d801                	beqz	s0,1ccc <random_keys+0x388>
    1dbe:	001d                	c.nop	7
    1dc0:	4000                	lw	s0,0(s0)
    1dc2:	3161                	jal	1a4a <random_keys+0x106>
    1dc4:	0100                	addi	s0,sp,128
    1dc6:	1e2a                	slli	t3,t3,0x2a
    1dc8:	1ca6                	slli	s9,s9,0x29
    1dca:	0000                	unimp
    1dcc:	6140                	flw	fs0,4(a0)
    1dce:	0032                	c.slli	zero,0xc
    1dd0:	2a01                	jal	1ee0 <_bss_end+0xa0>
    1dd2:	a630                	fsd	fa2,72(a2)
    1dd4:	001c                	0x1c
    1dd6:	0000                	unimp
    1dd8:	0005a23b          	0x5a23b
    1ddc:	0100                	addi	s0,sp,128
    1dde:	00920623          	sb	s1,12(tp) # c <__DYNAMIC+0xc>
    1de2:	0000                	unimp
    1de4:	0022                	c.slli	zero,0x8
    1de6:	0000                	unimp
    1de8:	9c01                	0x9c01
    1dea:	1e4a                	slli	t3,t3,0x32
    1dec:	0000                	unimp
    1dee:	613c                	flw	fa5,64(a0)
    1df0:	0031                	c.nop	12
    1df2:	2301                	jal	22f2 <_min_stack+0x2f2>
    1df4:	6315                	lui	t1,0x5
    1df6:	0100000b          	0x100000b
    1dfa:	3c5a                	fld	fs8,432(sp)
    1dfc:	3261                	jal	1784 <result+0x228>
    1dfe:	0100                	addi	s0,sp,128
    1e00:	0b631e23          	sh	s6,188(t1) # 50bc <_stack_len+0x10bc>
    1e04:	0000                	unimp
    1e06:	5b01                	li	s6,-32
    1e08:	8738                	0x8738
    1e0a:	0005                	c.nop	1
    1e0c:	0100                	addi	s0,sp,128
    1e0e:	005d2623          	sw	t0,12(s10) # fffe000c <_stack_start+0xfffd000c>
    1e12:	0000                	unimp
    1e14:	00001c4f          	fnmadd.s	fs8,ft0,ft0,ft0,rtz
    1e18:	693a                	flw	fs2,140(sp)
    1e1a:	0100                	addi	s0,sp,128
    1e1c:	0524                	addi	s1,sp,648
    1e1e:	005d                	c.nop	23
    1e20:	0000                	unimp
    1e22:	1c70                	addi	a2,sp,572
    1e24:	0000                	unimp
    1e26:	4a41                	li	s4,16
    1e28:	001e                	c.slli	zero,0x7
    1e2a:	a600                	fsd	fs0,8(a2)
    1e2c:	0000                	unimp
    1e2e:	0a00                	addi	s0,sp,272
    1e30:	0000                	unimp
    1e32:	0100                	addi	s0,sp,128
    1e34:	0926                	slli	s2,s2,0x9
    1e36:	623e                	flw	ft4,204(sp)
    1e38:	001e                	c.slli	zero,0x7
    1e3a:	8f00                	0x8f00
    1e3c:	001c                	0x1c
    1e3e:	3e00                	fld	fs0,56(a2)
    1e40:	00001e57          	0x1e57
    1e44:	1cb2                	slli	s9,s9,0x2c
    1e46:	0000                	unimp
    1e48:	0000                	unimp
    1e4a:	00003a3f 060f0100 	0x60f010000003a3f
    1e52:	6e01                	0x6e01
    1e54:	001e                	c.slli	zero,0x7
    1e56:	4000                	lw	s0,0(s0)
    1e58:	3161                	jal	1ae0 <random_keys+0x19c>
    1e5a:	0100                	addi	s0,sp,128
    1e5c:	1ca61e0f          	0x1ca61e0f
    1e60:	0000                	unimp
    1e62:	6140                	flw	fs0,4(a0)
    1e64:	0032                	c.slli	zero,0xc
    1e66:	0f01                	addi	t5,t5,0
    1e68:	a630                	fsd	fa2,72(a2)
    1e6a:	001c                	0x1c
    1e6c:	0000                	unimp
    1e6e:	4a42                	lw	s4,16(sp)
    1e70:	001e                	c.slli	zero,0x7
    1e72:	8c00                	0x8c00
    1e74:	0000                	unimp
    1e76:	0600                	addi	s0,sp,768
    1e78:	0000                	unimp
    1e7a:	0100                	addi	s0,sp,128
    1e7c:	929c                	0x929c
    1e7e:	001e                	c.slli	zero,0x7
    1e80:	3e00                	fld	fs0,56(a2)
    1e82:	00001e57          	0x1e57
    1e86:	1cd5                	addi	s9,s9,-11
    1e88:	0000                	unimp
    1e8a:	001e6243          	fmadd.s	ft4,ft8,ft1,ft0,unknown
    1e8e:	0100                	addi	s0,sp,128
    1e90:	b442005b          	0xb442005b
    1e94:	001d                	c.nop	7
    1e96:	b400                	fsd	fs0,40(s0)
    1e98:	0000                	unimp
    1e9a:	0600                	addi	s0,sp,768
    1e9c:	0000                	unimp
    1e9e:	0100                	addi	s0,sp,128
    1ea0:	b69c                	fsd	fa5,40(a3)
    1ea2:	001e                	c.slli	zero,0x7
    1ea4:	3e00                	fld	fs0,56(a2)
    1ea6:	1dc1                	addi	s11,s11,-16
    1ea8:	0000                	unimp
    1eaa:	1ce8                	addi	a0,sp,636
    1eac:	0000                	unimp
    1eae:	001dcc43          	fmadd.s	fs8,fs11,ft1,ft0,rmm
    1eb2:	0100                	addi	s0,sp,128
    1eb4:	1e42005b          	0x1e42005b
    1eb8:	001d                	c.nop	7
    1eba:	dc00                	sw	s0,56(s0)
    1ebc:	0000                	unimp
    1ebe:	0600                	addi	s0,sp,768
    1ec0:	0000                	unimp
    1ec2:	0100                	addi	s0,sp,128
    1ec4:	da9c                	sw	a5,48(a3)
    1ec6:	001e                	c.slli	zero,0x7
    1ec8:	3e00                	fld	fs0,56(a2)
    1eca:	00001d2b          	0x1d2b
    1ece:	00001cfb          	0x1cfb
    1ed2:	001d3643          	fmadd.s	fa2,fs10,ft1,ft0,rup
    1ed6:	0100                	addi	s0,sp,128
    1ed8:	8142005b          	0x8142005b
    1edc:	001c                	0x1c
    1ede:	0400                	addi	s0,sp,512
    1ee0:	0001                	nop
    1ee2:	0600                	addi	s0,sp,768
    1ee4:	0000                	unimp
    1ee6:	0100                	addi	s0,sp,128
    1ee8:	fe9c                	fsw	fa5,56(a3)
    1eea:	001e                	c.slli	zero,0x7
    1eec:	3e00                	fld	fs0,56(a2)
    1eee:	1c8e                	slli	s9,s9,0x23
    1ef0:	0000                	unimp
    1ef2:	1d0e                	slli	s10,s10,0x23
    1ef4:	0000                	unimp
    1ef6:	001c9943          	fmadd.s	fs2,fs9,ft1,ft0,rtz
    1efa:	0100                	addi	s0,sp,128
    1efc:	2d44005b          	0x2d44005b
    1f00:	23000003          	lb	zero,560(zero) # 230 <polymult+0x108>
    1f04:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    1f08:	4400                	lw	s0,8(s0)
    1f0a:	006e                	c.slli	zero,0x1b
    1f0c:	0000                	unimp
    1f0e:	0064                	addi	s1,sp,12
    1f10:	0000                	unimp
    1f12:	1e000007          	0x1e000007
    1f16:	0000                	unimp
    1f18:	0200                	addi	s0,sp,256
    1f1a:	0300                	addi	s0,sp,384
    1f1c:	0004                	0x4
    1f1e:	0400                	addi	s0,sp,512
    1f20:	d301                	beqz	a4,1e20 <random_keys+0x4dc>
    1f22:	001e                	c.slli	zero,0x7
    1f24:	3000                	fld	fs0,32(s0)
    1f26:	0000                	unimp
    1f28:	4500                	lw	s0,8(a0)
    1f2a:	87000007          	0x87000007
    1f2e:	4c000003          	lb	zero,1216(zero) # 4c0 <polydiv+0x68>
    1f32:	01000007          	0x1000007
    1f36:	80              	Address 0x0000000000001f36 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <ext_euclid+0x6>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_add+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4)
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    for(i=0;i<(length/3);i++) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
}
  a0:	0b00                	addi	s0,sp,400
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	0e00000b          	0xe00000b
    asm volatile(
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
    for(i=0;i<(length/3);i++) {
  b2:	1301                	addi	t1,t1,-32
    asm volatile(
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
    for(i=0;i<(length/3);i++) {
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
  c4:	1000000b          	0x1000000b
}
  c8:	0b0b000f          	0xb0b000f
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  cc:	1349                	addi	t1,t1,-14
    asm volatile(
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
    for(i=0;i<(length/3);i++) {
  d8:	390b3b0b          	0x390b3b0b
    asm volatile(
  dc:	0013010b          	0x13010b
}
  e0:	1200                	addi	s0,sp,288
    for(i=0;i<(length/3);i++) {
  e2:	000d                	c.nop	3
  e4:	0b3a0e03          	lb	t3,179(s4)
  e8:	0b390b3b          	0xb390b3b
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
}
  f0:	0000                	unimp
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	27001513          	0x27001513
    asm volatile(
  f6:	0019                	c.nop	6
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
    for(i=0;i<(length/3);i++) {
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
    asm volatile(
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
}
 108:	16000013          	li	zero,352
    for(i=0;i<(length/3);i++) {
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
    asm volatile(
 110:	0000                	unimp
    for(i=0;i<(length/3);i++) {
 112:	03011317          	auipc	t1,0x3011
 116:	0b0e                	slli	s6,s6,0x3
}
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
    asm volatile(
 11a:	39053b0b          	0x39053b0b
 11e:	0013010b          	0x13010b
 122:	1800                	addi	s0,sp,48
    for(i=0;i<(length/3);i++) {
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 12a:	0b39053b          	0xb39053b
 12e:	1349                	addi	t1,t1,-14
    int line[size_b][size_a + size_b];
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
 134:	0d19                	addi	s10,s10,6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
    int line[size_b][size_a + size_b];
 13a:	39053b0b          	0x39053b0b
 13e:	3813490b          	0x3813490b
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
    int pola[size_a];
 14a:	0b3a0b0b          	0xb3a0b0b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
 156:	0b01131b          	0xb01131b
    int line[size_b][size_a + size_b];
 15a:	3b0b3a0b          	0x3b0b3a0b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
    int pola[size_a];
 164:	1c00                	addi	s0,sp,560
 166:	0b0b0117          	auipc	sp,0xb0b0
    int line[size_b][size_a + size_b];
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
    int pola[size_a];
 170:	1301                	addi	t1,t1,-32
    int polb[size_b];
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
    int pola[size_a];
 178:	3a0e                	fld	fs4,224(sp)
    int polb[size_b];
 17a:	39053b0b          	0x39053b0b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 17e:	0013490b          	0x13490b
    int pola[size_a];
 182:	1e00                	addi	s0,sp,816
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 184:	0e030013          	addi	zero,t1,224
    int line[size_b][size_a + size_b];
 188:	193c                	addi	a5,sp,184
    int polb[size_b];
 18a:	0000                	unimp
            line[i][j] = 0;
 18c:	151f 2701 0119      	0x1192701151f
    for (i = 0; i < size_b; ++i){
 192:	20000013          	li	zero,512
            product[j] = 0;
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
 19c:	0b39053b          	0xb39053b
    for (i = 0; i < size_b; ++i){
 1a0:	1349                	addi	t1,t1,-14
    array_equ(pola,a,size_a);
 1a2:	193c193f 34210000 	0x34210000193c193f
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
 1b2:	3f13490b          	0x3f13490b
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
    array_mod(pola,mod,size_a);
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
    array_equ(polb,b,size_b);
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0x2a>
    array_mod(polb,mod,size_b);
 1d0:	00052f13          	slti	t5,a0,0
 1d4:	2400                	fld	fs0,8(s0)
    if(star_mult == 1){
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
 1dc:	0b390b3b          	0xb390b3b
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 2e250000 	0x2e2500001802193f
 1ea:	3f01                	jal	fa <array_equ+0x18>
 1ec:	0319                	addi	t1,t1,6
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
        for (j = size_b -1; j >= 0; j = j-1){
 1f4:	1113490b          	0x1113490b
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f8:	1201                	addi	tp,tp,-32
            product[j] = 0;
 1fa:	4006                	0x4006
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
            line[i][j] = 0;
 200:	1301                	addi	t1,t1,-32
 202:	0000                	unimp
            product[j] = 0;
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
        for(j = 0; j < size_a + size_b -1; ++j){
 208:	3a0e                	fld	fs4,224(sp)
 20a:	39053b0b          	0x39053b0b
 20e:	0213490b          	0x213490b
    for (i = 0; i < size_b; ++i){
 212:	27000017          	auipc	zero,0x27000
 216:	0034                	addi	a3,sp,8
        for(j = 0; j < size_a + size_b -1; ++j){
 218:	0b3a0803          	lb	a6,179(s4)
    if(star_mult == 1){
 21c:	0b39053b          	0xb39053b
        for (j = size_b -1; j >= 0; j = j-1){
 220:	1349                	addi	t1,t1,-14
        for(j = 0; j < size_a + size_b -1; ++j){
 222:	0b1c                	addi	a5,sp,400
    for (i = 0; i < size_b; ++i){
 224:	0000                	unimp
 226:	3428                	fld	fa0,104(s0)
 228:	0300                	addi	s0,sp,384
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
    for(j = 0; j < size_a + size_b -1; ++j){
 230:	0213490b          	0x213490b
 234:	0018                	0x18
    array_mod(product,mod,(size_a+size_b-1));
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
 23a:	0b3a0e03          	lb	t3,179(s4)
 23e:	0b39053b          	0xb39053b
 242:	1349                	addi	t1,t1,-14
}
 244:	0000                	unimp
 246:	342a                	fld	fs0,168(sp)
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
 250:	0213490b          	0x213490b
 254:	2b000017          	auipc	zero,0x2b000
 258:	8289                	srli	a3,a3,0x2
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
 25e:	1331                	addi	t1,t1,-20
 260:	1301                	addi	t1,t1,-32
 262:	0000                	unimp
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
 268:	0200                	addi	s0,sp,256
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
                line[size_b-1-j][k] = pola[k]*polb[j];
 26e:	0000                	unimp
 270:	892d                	andi	a0,a0,11
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
 27c:	0021                	c.nop	8
            for (k = size_a-1; k >= 0; k = k-1 ){
 27e:	1349                	addi	t1,t1,-14
                line[size_b-1-j][k] = pola[k]*polb[j];
 280:	0000182f          	0x182f
 284:	3f012e2f          	0x3f012e2f
            for (k = size_a-1; k >= 0; k = k-1 ){
 288:	0319                	addi	t1,t1,6
        for (j = size_b -1; j >= 0; j = j-1){
 28a:	3a0e                	fld	fs4,224(sp)
 28c:	39053b0b          	0x39053b0b
 290:	4919270b          	0x4919270b
            for (k = size_a-1; k >= 0; k = k-1 ){
 294:	12011113          	0x12011113
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 298:	4006                	0x4006
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
 2a0:	0000                	unimp
 2a2:	0530                	addi	a2,sp,648
 2a4:	0300                	addi	s0,sp,384
            for (k = size_a-1; k >= 0; k = k-1 ){
 2a6:	3a08                	fld	fa0,48(a2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 2a8:	39053b0b          	0x39053b0b
 2ac:	0213490b          	0x213490b
            for (k = size_a-1; k >= 0; k = k-1 ){
 2b0:	31000017          	auipc	zero,0x31000
        for (j = size_b -1; j >= 0; j = j-1){
 2b4:	0005                	c.nop	1
 2b6:	0b3a0e03          	lb	t3,179(s4)
            line[i][j] = line[i][j] % mod;
 2ba:	0b39053b          	0xb39053b
        for(j = 0; j < size_a + size_b -1; ++j){
 2be:	1349                	addi	t1,t1,-14
            line[i][j] = line[i][j] % mod;
 2c0:	1702                	slli	a4,a4,0x20
 2c2:	0000                	unimp
 2c4:	3432                	fld	fs0,296(sp)
 2c6:	0300                	addi	s0,sp,384
        for(j = 0; j < size_a + size_b -1; ++j){
 2c8:	3a08                	fld	fa0,48(a2)
 2ca:	39053b0b          	0x39053b0b
    for (i = 0; i < size_b; ++i){
 2ce:	0213490b          	0x213490b
 2d2:	0018                	0x18
        for(j = 0; j < size_a + size_b -1; ++j){
 2d4:	3300                	fld	fs0,32(a4)
 2d6:	0034                	addi	a3,sp,8
            product[j] += line[i][j];
 2d8:	1349                	addi	t1,t1,-14
 2da:	1934                	addi	a3,sp,184
 2dc:	1702                	slli	a4,a4,0x20
        for(i = 0; i < size_b; ++i){
 2de:	0000                	unimp
            product[j] += line[i][j];
 2e0:	2134                	fld	fa3,64(a0)
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
 2e8:	3500                	fld	fs0,40(a0)
 2ea:	0034                	addi	a3,sp,8
        for(i = 0; i < size_b; ++i){
 2ec:	0b3a0803          	lb	a6,179(s4)
    for(j = 0; j < size_a + size_b -1; ++j){
 2f0:	0b39053b          	0xb39053b
 2f4:	1349                	addi	t1,t1,-14
        for(i = 0; i < size_b; ++i){
 2f6:	0000                	unimp
 2f8:	2e36                	fld	ft8,328(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2fa:	3f01                	jal	20a <polymult+0xe2>
    int line[size_b][size_a + size_b];
 2fc:	0319                	addi	t1,t1,6
 2fe:	3a0e                	fld	fs4,224(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 300:	390b3b0b          	0x390b3b0b
 304:	4919270b          	0x4919270b
 308:	12011113          	0x12011113
    int line[size_b][size_a + size_b];
 30c:	4006                	0x4006
 30e:	9718                	0x9718
 310:	1942                	slli	s2,s2,0x30
 312:	1301                	addi	t1,t1,-32
 314:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 316:	03000537          	lui	a0,0x3000
 31a:	3a08                	fld	fa0,48(a2)
 31c:	390b3b0b          	0x390b3b0b
 320:	0213490b          	0x213490b
 324:	38000017          	auipc	zero,0x38000
    int line[size_b][size_a + size_b];
 328:	0005                	c.nop	1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 32a:	0b3a0e03          	lb	t3,179(s4)
    int line[size_b][size_a + size_b];
 32e:	0b390b3b          	0xb390b3b
 332:	1349                	addi	t1,t1,-14
    int pola[size_a];
 334:	1702                	slli	a4,a4,0x20
 336:	0000                	unimp
 338:	3439                	jal	fffffd46 <_stack_start+0xfffefd46>
 33a:	0300                	addi	s0,sp,384
    int line[size_b][size_a + size_b];
 33c:	3a0e                	fld	fs4,224(sp)
    int pola[size_a];
 33e:	390b3b0b          	0x390b3b0b
    int polb[size_b];
 342:	0213490b          	0x213490b
 346:	3a000017          	auipc	zero,0x3a000
 34a:	0034                	addi	a3,sp,8
 34c:	0b3a0803          	lb	a6,179(s4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 350:	0b390b3b          	0xb390b3b
    int line[size_b][size_a + size_b];
 354:	1349                	addi	t1,t1,-14
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 356:	1702                	slli	a4,a4,0x20
    int pola[size_a];
 358:	0000                	unimp
 35a:	3f012e3b          	0x3f012e3b
    for (i = 0; i < size_b; ++i){
 35e:	0319                	addi	t1,t1,6
 360:	3a0e                	fld	fs4,224(sp)
 362:	390b3b0b          	0x390b3b0b
            product2[j] = 0;
 366:	1119270b          	0x1119270b
 36a:	1201                	addi	tp,tp,-32
    for (i = 0; i < size_b; ++i){
 36c:	4006                	0x4006
 36e:	9718                	0x9718
    array_equ(pola,a,size_a);
 370:	1942                	slli	s2,s2,0x30
 372:	1301                	addi	t1,t1,-32
 374:	0000                	unimp
 376:	053c                	addi	a5,sp,648
 378:	0300                	addi	s0,sp,384
 37a:	3a08                	fld	fa0,48(a2)
    array_equ(polb,b,size_b);
 37c:	390b3b0b          	0x390b3b0b
 380:	0213490b          	0x213490b
 384:	0018                	0x18
 386:	3d00                	fld	fs0,56(a0)
    if(star_mult == 1){
 388:	011d                	addi	sp,sp,7
 38a:	1331                	addi	t1,t1,-20
 38c:	0152                	slli	sp,sp,0x14
 38e:	1755                	addi	a4,a4,-11
 390:	0b58                	addi	a4,sp,404
 392:	0b59                	addi	s6,s6,22
 394:	00000b57          	0xb57
 398:	053e                	slli	a0,a0,0xf
        for (j = size_b -1; j >= 0; j = j-1){
 39a:	3100                	fld	fs0,32(a0)
 39c:	00170213          	addi	tp,a4,1 # 1 <__DYNAMIC+0x1>
            for (k = size_a-1; k >= 0; k = k-1 ){
 3a0:	3f00                	fld	fs0,56(a4)
            product2[j] = 0;
 3a2:	012e                	slli	sp,sp,0xb
 3a4:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 3ac:	0b39                	addi	s6,s6,14
 3ae:	0b201927          	0xb201927
        for(j = 0; j < size_a + size_b -1; ++j){
 3b2:	1301                	addi	t1,t1,-32
 3b4:	0000                	unimp
 3b6:	0540                	addi	s0,sp,644
    for (i = 0; i < size_b; ++i){
 3b8:	0300                	addi	s0,sp,384
 3ba:	3a08                	fld	fa0,48(a2)
 3bc:	390b3b0b          	0x390b3b0b
        for(j = 0; j < size_a + size_b -1; ++j){
 3c0:	0013490b          	0x13490b
                line[size_b-1-j][k] = pola[k]*polb[j];
 3c4:	4100                	lw	s0,0(a0)
 3c6:	011d                	addi	sp,sp,7
 3c8:	1331                	addi	t1,t1,-20
 3ca:	0111                	addi	sp,sp,4
 3cc:	0612                	slli	a2,a2,0x4
 3ce:	0b58                	addi	a4,sp,404
 3d0:	0b59                	addi	s6,s6,22
 3d2:	00000b57          	0xb57
 3d6:	2e42                	fld	ft8,16(sp)
 3d8:	3101                	jal	ffffffd8 <_stack_start+0xfffeffd8>
 3da:	12011113          	0x12011113
            for (k = size_a-1; k >= 0; k = k-1 ){
 3de:	4006                	0x4006
        for (j = size_b -1; j >= 0; j = j-1){
 3e0:	9718                	0x9718
 3e2:	1942                	slli	s2,s2,0x30
 3e4:	1301                	addi	t1,t1,-32
 3e6:	0000                	unimp
 3e8:	31000543          	fmadd.s	fa0,ft0,fa6,ft6,rne
        array_add(product2,line[i],size_a+size_b-1);
 3ec:	00180213          	addi	tp,a6,1
 3f0:	4400                	lw	s0,8(s0)
 3f2:	002e                	c.slli	zero,0xb
    for(i=0;i<size_b;++i){
 3f4:	193c193f 0e030e6e 	0xe030e6e193c193f
}
 3fc:	0b3a                	slli	s6,s6,0xe
 3fe:	00000b3b          	0xb3b
 402:	0100                	addi	s0,sp,128
 404:	0011                	c.nop	4
 406:	0610                	addi	a2,sp,768
 408:	0655                	addi	a2,a2,21
 40a:	0e1b0e03          	lb	t3,225(s6) # 2cd7 <_min_stack+0xcd7>
 40e:	0e25                	addi	t3,t3,9
 410:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	0ece                	slli	t4,t4,0x13
       2:	0000                	unimp
       4:	0ee0                	addi	s0,sp,860
       6:	0000                	unimp
       8:	0001                	nop
       a:	e05a                	fsw	fs6,0(sp)
       c:	000e                	c.slli	zero,0x3
       e:	e100                	fsw	fs0,0(a0)
      10:	000e                	c.slli	zero,0x3
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	0ee2                	slli	t4,t4,0x18
      20:	0000                	unimp
      22:	0f0c                	addi	a1,sp,912
      24:	0000                	unimp
      26:	0001                	nop
      28:	125a                	slli	tp,tp,0x36
      2a:	1c00000f          	0x1c00000f
      2e:	0100000f          	fence	w,unknown
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0e5c                	addi	a5,sp,788
      3e:	0000                	unimp
      40:	0eae                	slli	t4,t4,0xb
      42:	0000                	unimp
      44:	0001                	nop
      46:	ae5a                	fsd	fs6,280(sp)
      48:	000e                	c.slli	zero,0x3
      4a:	ca00                	sw	s0,16(a2)
      4c:	000e                	c.slli	zero,0x3
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	4400                	lw	s0,8(s0)
      5e:	000e                	c.slli	zero,0x3
      60:	9000                	0x9000
      62:	000e                	c.slli	zero,0x3
      64:	0300                	addi	s0,sp,384
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0e90                	addi	a2,sp,848
      6c:	0000                	unimp
      6e:	0e9a                	slli	t4,t4,0x6
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0e9a                	slli	t4,t4,0x6
      78:	0000                	unimp
      7a:	00000ecb          	fnmsub.s	ft9,ft0,ft0,ft0,rne
  jal x0, default_exc_handler
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	00000ecb          	fnmsub.s	ft9,ft0,ft0,ft0,rne
  jal x0, default_exc_handler
      86:	0f10                	addi	a2,sp,912
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	1079                	c.nop	-2
}
      90:	1200000f          	0x1200000f
    for(i=0;i<(length/3);i++) {
      94:	0300000f          	fence	rw,unknown
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	0f12                	slli	t5,t5,0x4
      9e:	0000                	unimp
}
      a0:	0f1c                	addi	a5,sp,912
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
    asm volatile(
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      b0:	4400                	lw	s0,8(s0)
      b2:	000e                	c.slli	zero,0x3
    asm volatile(
      b4:	6a00                	flw	fs0,16(a2)
      b6:	000e                	c.slli	zero,0x3
}
      b8:	0300                	addi	s0,sp,384
    for(i=0;i<(length/3);i++) {
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	0e6a                	slli	t3,t3,0x1a
      c0:	0000                	unimp
      c2:	0e6c                	addi	a1,sp,796
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
}
      c8:	007d                	c.nop	31
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      ca:	0e6c                	addi	a1,sp,796
      cc:	0000                	unimp
    asm volatile(
      ce:	0edc                	addi	a5,sp,852
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
      d6:	dc7a                	sw	t5,56(sp)
    for(i=0;i<(length/3);i++) {
      d8:	000e                	c.slli	zero,0x3
      da:	e100                	fsw	fs0,0(a0)
    asm volatile(
      dc:	000e                	c.slli	zero,0x3
      de:	0200                	addi	s0,sp,256
}
      e0:	7d00                	flw	fs0,56(a0)
    for(i=0;i<(length/3);i++) {
      e2:	e100                	fsw	fs0,0(a0)
      e4:	000e                	c.slli	zero,0x3
      e6:	1000                	addi	s0,sp,32
      e8:	0300000f          	fence	rw,unknown
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
}
      f0:	0f10                	addi	a2,sp,912
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	0000                	unimp
      f4:	0f12                	slli	t5,t5,0x4
    asm volatile(
      f6:	0000                	unimp
      f8:	f0720003          	lb	zero,-249(tp) # ffffff07 <_stack_start+0xfffeff07>
      fc:	127a                	slli	tp,tp,0x3e
      fe:	1c00000f          	0x1c00000f
    for(i=0;i<(length/3);i++) {
     102:	0300000f          	fence	rw,unknown
    asm volatile(
     106:	9100                	0x9100
}
     108:	7af0                	flw	fa2,116(a3)
	...
    for(i=0;i<(length/3);i++) {
     112:	0e44                	addi	s1,sp,788
     114:	0000                	unimp
     116:	0e76                	slli	t3,t3,0x1d
}
     118:	0000                	unimp
    asm volatile(
     11a:	c4910003          	lb	zero,-951(sp)
     11e:	767c                	flw	fa5,108(a2)
     120:	000e                	c.slli	zero,0x3
     122:	8000                	0x8000
    for(i=0;i<(length/3);i++) {
     124:	000e                	c.slli	zero,0x3
     126:	0200                	addi	s0,sp,256
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	7e00                	flw	fs0,56(a2)
     12a:	8000                	0x8000
     12c:	000e                	c.slli	zero,0x3
     12e:	0a00                	addi	s0,sp,272
    int line[size_b][size_a + size_b];
     130:	0200000f          	fence	r,unknown
     134:	7900                	flw	fs0,48(a0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     136:	0a00                	addi	s0,sp,272
     138:	1000000f          	0x1000000f
    int line[size_b][size_a + size_b];
     13c:	0300000f          	fence	rw,unknown
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
     144:	0f10                	addi	a2,sp,912
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     146:	0000                	unimp
     148:	0f12                	slli	t5,t5,0x4
    int pola[size_a];
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     150:	127c                	addi	a5,sp,300
     152:	1c00000f          	0x1c00000f
     156:	0200000f          	fence	r,unknown
    int line[size_b][size_a + size_b];
     15a:	7900                	flw	fs0,48(a0)
	...
    int pola[size_a];
     164:	4400                	lw	s0,8(s0)
     166:	000e                	c.slli	zero,0x3
    int line[size_b][size_a + size_b];
     168:	aa00                	fsd	fs0,16(a2)
     16a:	000e                	c.slli	zero,0x3
     16c:	0300                	addi	s0,sp,384
    int pola[size_a];
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
    int polb[size_b];
     172:	0eaa                	slli	t4,t4,0xa
     174:	0000                	unimp
     176:	0eb0                	addi	a2,sp,856
    int pola[size_a];
     178:	0000                	unimp
    int polb[size_b];
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     17e:	0eb0                	addi	a2,sp,856
    int pola[size_a];
     180:	0000                	unimp
     182:	00000ecb          	fnmsub.s	ft9,ft0,ft0,ft0,rne
    int line[size_b][size_a + size_b];
     186:	0002                	c.slli64	zero
     188:	0080                	addi	s0,sp,64
    int polb[size_b];
     18a:	00000ecb          	fnmsub.s	ft9,ft0,ft0,ft0,rne
            line[i][j] = 0;
     18e:	0f10                	addi	a2,sp,912
     190:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     192:	98910003          	lb	zero,-1655(sp)
            product[j] = 0;
     196:	107e                	c.slli	zero,0x3f
     198:	1200000f          	0x1200000f
     19c:	0300000f          	fence	rw,unknown
    for (i = 0; i < size_b; ++i){
     1a0:	7200                	flw	fs0,32(a2)
    array_equ(pola,a,size_a);
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	0f12                	slli	t5,t5,0x4
     1a6:	0000                	unimp
     1a8:	0f1c                	addi	a5,sp,912
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
     1b4:	0000                	unimp
     1b6:	0000                	unimp
     1b8:	5c00                	lw	s0,56(s0)
    array_mod(pola,mod,size_a);
     1ba:	000e                	c.slli	zero,0x3
     1bc:	6200                	flw	fs0,0(a2)
     1be:	000e                	c.slli	zero,0x3
     1c0:	0200                	addi	s0,sp,256
    array_equ(polb,b,size_b);
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	e29f 000e ea00      	0xea00000ee29f
     1ca:	000e                	c.slli	zero,0x3
     1cc:	0200                	addi	s0,sp,256
    array_mod(polb,mod,size_b);
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
    if(star_mult == 1){
     1d6:	0000                	unimp
     1d8:	6400                	flw	fs0,8(s0)
     1da:	7c00000b          	0x7c00000b
     1de:	0100000b          	0x100000b
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0b7c                	addi	a5,sp,412
     1e6:	0000                	unimp
     1e8:	0be0                	addi	s0,sp,476
     1ea:	0000                	unimp
     1ec:	0001                	nop
     1ee:	e058                	fsw	fa4,4(s0)
     1f0:	ec00000b          	0xec00000b
        for (j = size_b -1; j >= 0; j = j-1){
     1f4:	0300000b          	0x300000b
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f8:	8600                	0x8600
            product[j] = 0;
     1fa:	9f7f                	0x9f7f
     1fc:	0bec                	addi	a1,sp,476
     1fe:	0000                	unimp
            line[i][j] = 0;
     200:	0bf2                	slli	s7,s7,0x1c
     202:	0000                	unimp
            product[j] = 0;
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
        for(j = 0; j < size_a + size_b -1; ++j){
     20a:	0bf2                	slli	s7,s7,0x1c
     20c:	0000                	unimp
     20e:	0c28                	addi	a0,sp,536
    for (i = 0; i < size_b; ++i){
     210:	0000                	unimp
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     218:	0000                	unimp
     21a:	0000                	unimp
    if(star_mult == 1){
     21c:	6400                	flw	fs0,8(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     21e:	8600000b          	0x8600000b
        for(j = 0; j < size_a + size_b -1; ++j){
     222:	0100000b          	0x100000b
    for (i = 0; i < size_b; ++i){
     226:	5b00                	lw	s0,48(a4)
     228:	0b86                	slli	s7,s7,0x1
     22a:	0000                	unimp
     22c:	0bea                	slli	s7,s7,0x1a
     22e:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     230:	0001                	nop
     232:	ea65                	bnez	a2,322 <polymult2+0x28>
     234:	f200000b          	0xf200000b
    array_mod(product,mod,(size_a+size_b-1));
     238:	0400000b          	0x400000b
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	f29f 000b 2800      	0x2800000bf29f
}
     246:	000c                	0xc
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
     254:	0b64                	addi	s1,sp,412
     256:	0000                	unimp
     258:	0b7e                	slli	s6,s6,0x1f
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	7e5c                	flw	fa5,60(a2)
     260:	e400000b          	0xe400000b
     264:	0100000b          	0x100000b
     268:	6200                	flw	fs0,0(a2)
     26a:	0be4                	addi	s1,sp,476
     26c:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     26e:	0bf2                	slli	s7,s7,0x1c
     270:	0000                	unimp
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0bf2                	slli	s7,s7,0x1c
     27a:	0000                	unimp
     27c:	0c28                	addi	a0,sp,536
            for (k = size_a-1; k >= 0; k = k-1 ){
     27e:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     286:	0000                	unimp
     288:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     28a:	6400                	flw	fs0,8(s0)
     28c:	8000000b          	0x8000000b
     290:	0100000b          	0x100000b
            for (k = size_a-1; k >= 0; k = k-1 ){
     294:	5d00                	lw	s0,56(a0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     296:	0b80                	addi	s0,sp,464
     298:	0000                	unimp
     29a:	0b99                	addi	s7,s7,6
     29c:	0000                	unimp
     29e:	0001                	nop
     2a0:	995a                	add	s2,s2,s6
     2a2:	2800000b          	0x2800000b
            for (k = size_a-1; k >= 0; k = k-1 ){
     2a6:	000c                	0xc
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2a8:	0400                	addi	s0,sp,512
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ae:	009f 0000 0000      	0x9f
        for (j = size_b -1; j >= 0; j = j-1){
     2b4:	0000                	unimp
     2b6:	6400                	flw	fs0,8(s0)
     2b8:	8800000b          	0x8800000b
        for(j = 0; j < size_a + size_b -1; ++j){
     2bc:	0100000b          	0x100000b
            line[i][j] = line[i][j] % mod;
     2c0:	5e00                	lw	s0,56(a2)
     2c2:	0b88                	addi	a0,sp,464
     2c4:	0000                	unimp
     2c6:	0bee                	slli	s7,s7,0x1b
        for(j = 0; j < size_a + size_b -1; ++j){
     2c8:	0000                	unimp
     2ca:	0001                	nop
    for (i = 0; i < size_b; ++i){
     2cc:	000bee67          	0xbee67
     2d0:	f200                	fsw	fs0,32(a2)
     2d2:	0400000b          	0x400000b
        for(j = 0; j < size_a + size_b -1; ++j){
     2d6:	f300                	fsw	fs0,32(a4)
            product[j] += line[i][j];
     2d8:	5e01                	li	t3,-32
     2da:	f29f 000b 2800      	0x2800000bf29f
     2e0:	000c                	0xc
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
        for(i = 0; i < size_b; ++i){
     2ee:	0b64                	addi	s1,sp,412
    for(j = 0; j < size_a + size_b -1; ++j){
     2f0:	0000                	unimp
     2f2:	0b99                	addi	s7,s7,6
     2f4:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     2f6:	0001                	nop
     2f8:	995f 000b 2800      	0x2800000b995f
    int line[size_b][size_a + size_b];
     2fe:	000c                	0xc
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
     306:	009f 0000 0000      	0x9f
    int line[size_b][size_a + size_b];
     30c:	0000                	unimp
     30e:	6400                	flw	fs0,8(s0)
     310:	9900000b          	0x9900000b
     314:	0100000b          	0x100000b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     318:	6000                	flw	fs0,0(s0)
     31a:	0b99                	addi	s7,s7,6
     31c:	0000                	unimp
     31e:	0be8                	addi	a0,sp,476
     320:	0000                	unimp
     322:	0001                	nop
     324:	e864                	fsw	fs1,84(s0)
     326:	f200000b          	0xf200000b
     32a:	0400000b          	0x400000b
    int line[size_b][size_a + size_b];
     32e:	f300                	fsw	fs0,32(a4)
     330:	6001                	0x6001
     332:	f29f 000b 2800      	0x2800000bf29f
    int pola[size_a];
     338:	000c                	0xc
     33a:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     33c:	6400                	flw	fs0,8(s0)
	...
    int polb[size_b];
     346:	0b9a                	slli	s7,s7,0x6
    int pola[size_a];
     348:	0000                	unimp
    int polb[size_b];
     34a:	00000ba7          	0xba7
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
    int line[size_b][size_a + size_b];
     352:	0000                	unimp
     354:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     356:	0000                	unimp
    int pola[size_a];
     358:	aa00                	fsd	fs0,16(a2)
     35a:	c800000b          	0xc800000b
    for (i = 0; i < size_b; ++i){
     35e:	0100000b          	0x100000b
     362:	5a00                	lw	s0,48(a2)
            product2[j] = 0;
     364:	0bc8                	addi	a0,sp,468
     366:	0000                	unimp
     368:	00000bcb          	fnmsub.s	fs7,ft0,ft0,ft0,rne
    for (i = 0; i < size_b; ++i){
     36c:	0001                	nop
     36e:	f25c                	fsw	fa5,36(a2)
    array_equ(pola,a,size_a);
     370:	1600000b          	0x1600000b
     374:	000c                	0xc
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
    array_equ(polb,b,size_b);
     382:	0bcc                	addi	a1,sp,468
     384:	0000                	unimp
     386:	0bd5                	addi	s7,s7,21
    if(star_mult == 1){
     388:	0000                	unimp
     38a:	0001                	nop
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
     390:	0000                	unimp
     392:	0000                	unimp
     394:	d600                	sw	s0,40(a2)
     396:	f200000b          	0xf200000b
        for (j = size_b -1; j >= 0; j = j-1){
     39a:	0100000b          	0x100000b
            for (k = size_a-1; k >= 0; k = k-1 ){
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0c16                	slli	s8,s8,0x5
            product2[j] = 0;
     3a2:	0000                	unimp
     3a4:	0c28                	addi	a0,sp,536
     3a6:	0000                	unimp
            line[i][j] = 0;
     3a8:	0001                	nop
     3aa:	005a                	c.slli	zero,0x16
            product2[j] = 0;
     3ac:	0000                	unimp
     3ae:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     3b0:	0000                	unimp
     3b2:	aa00                	fsd	fs0,16(a2)
     3b4:	b000000b          	0xb000000b
    for (i = 0; i < size_b; ++i){
     3b8:	0100000b          	0x100000b
     3bc:	5900                	lw	s0,48(a0)
     3be:	0bb0                	addi	a2,sp,472
        for(j = 0; j < size_a + size_b -1; ++j){
     3c0:	0000                	unimp
     3c2:	0bbc                	addi	a5,sp,472
                line[size_b-1-j][k] = pola[k]*polb[j];
     3c4:	0000                	unimp
     3c6:	0001                	nop
     3c8:	bc5d                	j	fffffe7e <_stack_start+0xfffefe7e>
     3ca:	c200000b          	0xc200000b
     3ce:	0100000b          	0x100000b
     3d2:	5e00                	lw	s0,56(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d4:	0bd6                	slli	s7,s7,0x15
                line[size_b-1-j][k] = pola[k]*polb[j];
     3d6:	0000                	unimp
     3d8:	0be2                	slli	s7,s7,0x18
     3da:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3dc:	0001                	nop
     3de:	f259                	bnez	a2,364 <polymult2+0x6a>
        for (j = size_b -1; j >= 0; j = j-1){
     3e0:	fc00000b          	0xfc00000b
     3e4:	0100000b          	0x100000b
     3e8:	5d00                	lw	s0,56(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ea:	0bfc                	addi	a5,sp,476
        array_add(product2,line[i],size_a+size_b-1);
     3ec:	0000                	unimp
     3ee:	0c02                	c.slli64	s8
     3f0:	0000                	unimp
     3f2:	7f7d0003          	lb	zero,2039(s10)
    for(i=0;i<size_b;++i){
     3f6:	029f 000c 0400      	0x400000c029f
}
     3fc:	000c                	0xc
     3fe:	0100                	addi	s0,sp,128
     400:	5d00                	lw	s0,56(a0)
     402:	0c04                	addi	s1,sp,528
     404:	0000                	unimp
     406:	0c16                	slli	s8,s8,0x5
     408:	0000                	unimp
     40a:	0001                	nop
     40c:	165e                	slli	a2,a2,0x37
     40e:	000c                	0xc
     410:	2000                	fld	fs0,0(s0)
     412:	000c                	0xc
     414:	0100                	addi	s0,sp,128
     416:	5900                	lw	s0,48(a0)
     418:	0c20                	addi	s0,sp,536
     41a:	0000                	unimp
     41c:	0c26                	slli	s8,s8,0x9
     41e:	0000                	unimp
     420:	7f790003          	lb	zero,2039(s2) # fffe07f7 <_stack_start+0xfffd07f7>
            for (k = size_a-1; k >= 0; k = k-1 ){
     424:	269f 000c 2800      	0x2800000c269f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     42a:	000c                	0xc
     42c:	0100                	addi	s0,sp,128
     42e:	5900                	lw	s0,48(a0)
	...
     438:	0ade                	slli	s5,s5,0x17
     43a:	0000                	unimp
     43c:	0af2                	slli	s5,s5,0x1c
            for (k = size_a-1; k >= 0; k = k-1 ){
     43e:	0000                	unimp
     440:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     442:	f25a                	fsw	fs6,36(sp)
     444:	000a                	c.slli	zero,0x2
     446:	3c00                	fld	fs0,56(s0)
     448:	0100000b          	0x100000b
        array_add(product2,line[i],size_a+size_b-1);
     44c:	5800                	lw	s0,48(s0)
     44e:	0b3c                	addi	a5,sp,408
     450:	0000                	unimp
    for(i=0;i<size_b;++i){
     452:	0b64                	addi	s1,sp,412
     454:	0000                	unimp
     456:	0004                	0x4
    int v[size_N];
     458:	9f5a01f3          	0x9f5a01f3
	...
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     464:	0ade                	slli	s5,s5,0x17
     466:	0000                	unimp
     468:	0afa                	slli	s5,s5,0x1e
     46a:	0000                	unimp
     46c:	0001                	nop
     46e:	000afa5b          	0xafa5b
     472:	4a00                	lw	s0,16(a2)
     474:	0100000b          	0x100000b
     478:	6200                	flw	fs0,0(a2)
    int v[size_N];
     47a:	0b4a                	slli	s6,s6,0x12
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     47c:	0000                	unimp
    int v[size_N];
     47e:	0b52                	slli	s6,s6,0x14
     480:	0000                	unimp
     482:	0004                	0x4
    int q[size_N];
     484:	9f5b01f3          	0x9f5b01f3
     488:	0b52                	slli	s6,s6,0x14
    int num_temp[size_N];
     48a:	0000                	unimp
     48c:	0b64                	addi	s1,sp,412
    int denum_temp[size_D];
     48e:	0000                	unimp
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
     494:	0000                	unimp
    int num_temp[size_N];
     496:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     498:	0000                	unimp
    int denum_temp[size_D];
     49a:	de00                	sw	s0,56(a2)
     49c:	000a                	c.slli	zero,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     49e:	ee00                	fsw	fs0,24(a2)
    int v[size_N];
     4a0:	000a                	c.slli	zero,0x2
     4a2:	0100                	addi	s0,sp,128
    array_equ(num_temp,num,size_N);
     4a4:	5c00                	lw	s0,56(s0)
     4a6:	0aee                	slli	s5,s5,0x1b
     4a8:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4aa:	0b24                	addi	s1,sp,408
     4ac:	0000                	unimp
    int denum_temp[size_D];
     4ae:	0001                	nop
     4b0:	2459                	jal	736 <ext_euclid+0x13a>
    array_equ(num_temp,num,size_N);
     4b2:	2700000b          	0x2700000b
    array_mod(num_temp,mod,size_N);
     4b6:	0100000b          	0x100000b
     4ba:	5b00                	lw	s0,48(a4)
    int denum_temp[size_D];
     4bc:	00000b27          	0xb27
    array_equ(denum_temp,denum,size_D);
     4c0:	0b64                	addi	s1,sp,412
     4c2:	0000                	unimp
     4c4:	0004                	0x4
    array_mod(denum_temp,mod,size_D);
     4c6:	9f5c01f3          	0x9f5c01f3
	...
    for (i = 0; i < size_N; ++i){
     4d2:	0ade                	slli	s5,s5,0x17
    for (i = size_D-1; i >= 0; i = i-1){
     4d4:	0000                	unimp
     4d6:	0b05                	addi	s6,s6,1
     4d8:	0000                	unimp
     4da:	0001                	nop
     4dc:	055d                	addi	a0,a0,23
     4de:	2000000b          	0x2000000b
    for (i = 0; i < size_N; ++i){
     4e2:	0100000b          	0x100000b
    for (u = 0; u < mod; ++u){
     4e6:	6300                	flw	fs0,0(a4)
     4e8:	0b20                	addi	s0,sp,408
     4ea:	0000                	unimp
     4ec:	0b64                	addi	s1,sp,412
        q[i] = 0;
     4ee:	0000                	unimp
     4f0:	0004                	0x4
     4f2:	9f5d01f3          	0x9f5d01f3
	...
        v[i] = 0;
     4fe:	0ade                	slli	s5,s5,0x17
    for (i = 0; i < size_N; ++i){
     500:	0000                	unimp
     502:	0b05                	addi	s6,s6,1
        if( denum_temp[i] != 0 )
     504:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     506:	0001                	nop
     508:	055e                	slli	a0,a0,0x17
        if ( (b_N*u)%mod == 1 )
     50a:	4e00000b          	0x4e00000b
     50e:	0100000b          	0x100000b
     512:	6400                	flw	fs0,8(s0)
    for (u = 0; u < mod; ++u){
     514:	0b4e                	slli	s6,s6,0x13
     516:	0000                	unimp
        if( num_temp[i] != 0 )
     518:	0b52                	slli	s6,s6,0x14
    for (i = size_N-1; i >= 0; i = i-1){
     51a:	0000                	unimp
     51c:	0004                	0x4
     51e:	9f5e01f3          	0x9f5e01f3
     522:	0b52                	slli	s6,s6,0x14
     524:	0000                	unimp
     526:	0b64                	addi	s1,sp,412
    while (d >= d2){
     528:	0000                	unimp
     52a:	0001                	nop
    array_equ(result,q,size_N);
     52c:	0064                	addi	s1,sp,12
     52e:	0000                	unimp
     530:	0000                	unimp
     532:	0000                	unimp
     534:	2000                	fld	fs0,0(s0)
     536:	2700000b          	0x2700000b
    for(i = size_N; i < (2*size_N); ++i){
     53a:	0100000b          	0x100000b
        result[i] = num_temp[i-size_N];
     53e:	5a00                	lw	s0,48(a2)
     540:	00000b27          	0xb27
     544:	0b4c                	addi	a1,sp,404
    for(i = size_N; i < (2*size_N); ++i){
     546:	0000                	unimp
     548:	0001                	nop
}
     54a:	000b5263          	bgez	s6,54e <polydiv+0xf6>
     54e:	6400                	flw	fs0,8(s0)
     550:	0100000b          	0x100000b
     554:	6300                	flw	fs0,0(a4)
	...
     55e:	0b36                	slli	s6,s6,0xd
     560:	0000                	unimp
     562:	0b48                	addi	a0,sp,404
     564:	0000                	unimp
     566:	0001                	nop
     568:	5259                	li	tp,-10
     56a:	5c00000b          	0x5c00000b
     56e:	0100000b          	0x100000b
     572:	5900                	lw	s0,48(a0)
        v[(d-d2)] = u*r_d;
     574:	0b5c                	addi	a5,sp,404
     576:	0000                	unimp
     578:	0b62                	slli	s6,s6,0x18
     57a:	0000                	unimp
     57c:	7f790003          	lb	zero,2039(s2)
    array_mod(v,mod,size_N);
     580:	629f 000b 6400      	0x6400000b629f
        v[(d-d2)] = u*r_d;
     586:	0100000b          	0x100000b
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     58a:	5900                	lw	s0,48(a0)
	...
     594:	07ec                	addi	a1,sp,972
     596:	0000                	unimp
    array_mod(product,mod,size_N);
     598:	0830                	addi	a2,sp,24
     59a:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     59c:	0001                	nop
    array_mod(product,mod,size_N);
     59e:	305a                	fld	ft0,432(sp)
    array_sub(num_temp,product,size_N);
     5a0:	0008                	0x8
     5a2:	f200                	fsw	fs0,32(a2)
     5a4:	0009                	c.nop	2
     5a6:	0100                	addi	s0,sp,128
    array_mod(num_temp,mod,size_N);
     5a8:	6200                	flw	fs0,0(a2)
     5aa:	09f2                	slli	s3,s3,0x1c
     5ac:	0000                	unimp
     5ae:	0a16                	slli	s4,s4,0x5
    array_add(q,v,size_N);
     5b0:	0000                	unimp
     5b2:	7f850003          	lb	zero,2040(a0) # 30007f8 <_stack_start+0x2ff07f8>
     5b6:	169f 000a 3600      	0x3600000a169f
    array_mod(q,mod,size_N);
     5bc:	000a                	c.slli	zero,0x2
     5be:	0400                	addi	s0,sp,512
        for (i = size_N-1; i >= 0; i = i-1){
     5c0:	f300                	fsw	fs0,32(a4)
     5c2:	5a01                	li	s4,-32
     5c4:	369f 000a ca00      	0xca00000a369f
     5ca:	000a                	c.slli	zero,0x2
     5cc:	0100                	addi	s0,sp,128
     5ce:	6200                	flw	fs0,0(a2)
     5d0:	0aca                	slli	s5,s5,0x12
            if( num_temp[i] != 0 )
     5d2:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     5d4:	0ade                	slli	s5,s5,0x17
     5d6:	0000                	unimp
            v[i] = 0;
     5d8:	7f850003          	lb	zero,2040(a0)
     5dc:	009f 0000 0000      	0x9f
        for (i = 0; i < size_N; ++i){
     5e2:	0000                	unimp
     5e4:	ec00                	fsw	fs0,24(s0)
     5e6:	28000007          	0x28000007
        result[i] = num_temp[i-size_N];
     5ea:	0008                	0x8
     5ec:	0100                	addi	s0,sp,128
     5ee:	5b00                	lw	s0,48(a4)
     5f0:	0828                	addi	a0,sp,24
     5f2:	0000                	unimp
     5f4:	0a1e                	slli	s4,s4,0x7
    for(i = size_N; i < (2*size_N); ++i){
     5f6:	0000                	unimp
     5f8:	0001                	nop
     5fa:	000a1e67          	0xa1e67
    int ri_2[size]; // MX-ring poly, a
     5fe:	3600                	fld	fs0,40(a2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     600:	000a                	c.slli	zero,0x2
    int ri_2[size]; // MX-ring poly, a
     602:	0400                	addi	s0,sp,512
     604:	f300                	fsw	fs0,32(a4)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     606:	5b01                	li	s6,-32
     608:	369f 000a de00      	0xde00000a369f
     60e:	000a                	c.slli	zero,0x2
     610:	0100                	addi	s0,sp,128
     612:	6700                	flw	fs0,8(a4)
	...
     61c:	07ec                	addi	a1,sp,972
     61e:	0000                	unimp
     620:	082c                	addi	a1,sp,24
    int ri_2[size]; // MX-ring poly, a
     622:	0000                	unimp
     624:	0001                	nop
     626:	2c5c                	fld	fa5,152(s0)
    int ri_1[size]; // f-random poly, f[N] = 0, b
     628:	0008                	0x8
     62a:	1a00                	addi	s0,sp,304
     62c:	000a                	c.slli	zero,0x2
    int ri[size];
     62e:	0100                	addi	s0,sp,128
     630:	6600                	flw	fs0,8(a2)
     632:	0a1a                	slli	s4,s4,0x6
    int ti_1[size]; // ti_1[0] = 1
     634:	0000                	unimp
     636:	0a36                	slli	s4,s4,0xd
     638:	0000                	unimp
    int ti[size];
     63a:	0004                	0x4
     63c:	9f5c01f3          	0x9f5c01f3
    int qi_1[size];
     640:	0a36                	slli	s4,s4,0xd
     642:	0000                	unimp
     644:	0ade                	slli	s5,s5,0x17
    int temp[size];
     646:	0000                	unimp
     648:	0001                	nop
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     64a:	0066                	c.slli	zero,0x19
     64c:	0000                	unimp
     64e:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     650:	0000                	unimp
     652:	7a00                	flw	fs0,48(a2)
    int temp[size];
     654:	0009                	c.nop	2
    for (i = 0; i < size; ++i) {
     656:	8400                	0x8400
        ti_2[i] = 0;
     658:	0009                	c.nop	2
     65a:	0100                	addi	s0,sp,128
     65c:	5a00                	lw	s0,48(a2)
	...
    array_equ(ri_2,polyR,size);
     666:	0994                	addi	a3,sp,208
     668:	0000                	unimp
     66a:	09b1                	addi	s3,s3,12
    array_equ(ri_1,polyf,size);
     66c:	0000                	unimp
     66e:	0001                	nop
     670:	965a                	add	a2,a2,s6
     672:	000a                	c.slli	zero,0x2
    ti_1[0] = 1;
     674:	aa00                	fsd	fs0,16(a2)
     676:	000a                	c.slli	zero,0x2
     678:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     67a:	5a00                	lw	s0,48(a2)
	...
    array_equ(ti,ti_2,size);
     684:	09b2                	slli	s3,s3,0xc
     686:	0000                	unimp
     688:	09c5                	addi	s3,s3,17
    array_mod(ri_2,mod,size);
     68a:	0000                	unimp
     68c:	0001                	nop
     68e:	aa5a                	fsd	fs6,272(sp)
     690:	000a                	c.slli	zero,0x2
    array_mod(ri_1,mod,size);
     692:	ba00                	fsd	fs0,48(a2)
     694:	000a                	c.slli	zero,0x2
     696:	0100                	addi	s0,sp,128
     698:	5a00                	lw	s0,48(a2)
	...
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     6a2:	09c6                	slli	s3,s3,0x11
     6a4:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6a6:	09e2                	slli	s3,s3,0x18
     6a8:	0000                	unimp
     6aa:	0001                	nop
     6ac:	ba5a                	fsd	fs6,304(sp)
     6ae:	000a                	c.slli	zero,0x2
     6b0:	ca00                	sw	s0,16(a2)
    array_equ(temp,ri_2,size);
     6b2:	000a                	c.slli	zero,0x2
     6b4:	0100                	addi	s0,sp,128
     6b6:	5a00                	lw	s0,48(a2)
	...
    array_sub(temp,ri,size);
     6c0:	092e                	slli	s2,s2,0xb
    array_mod(temp,mod,size);
     6c2:	0000                	unimp
     6c4:	09fa                	slli	s3,s3,0x1e
     6c6:	0000                	unimp
     6c8:	0002                	c.slli64	zero
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     6ca:	0072                	c.slli	zero,0x1c
     6cc:	09fa                	slli	s3,s3,0x1e
     6ce:	0000                	unimp
     6d0:	0a12                	slli	s4,s4,0x4
     6d2:	0000                	unimp
     6d4:	0002                	c.slli64	zero
     6d6:	0084                	addi	s1,sp,64
    array_equ(qi_1,res1,size);
     6d8:	0a12                	slli	s4,s4,0x4
     6da:	0000                	unimp
     6dc:	0a16                	slli	s4,s4,0x5
    array_mod(qi_1,mod,size);
     6de:	0000                	unimp
     6e0:	0010                	0x10
     6e2:	0091                	addi	ra,ra,4
     6e4:	0085                	addi	ra,ra,1
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     6e6:	2432                	fld	fs0,264(sp)
     6e8:	f0090f23          	sb	zero,-226(s2)
     6ec:	1c1a                	slli	s8,s8,0x26
     6ee:	f00a                	fsw	ft2,32(sp)
     6f0:	1c01                	addi	s8,s8,-32
     6f2:	0a16                	slli	s4,s4,0x5
     6f4:	0000                	unimp
    array_equ(temp,res2,size);
     6f6:	0a36                	slli	s4,s4,0xd
     6f8:	0000                	unimp
     6fa:	00910013          	addi	zero,sp,9
    array_mod(temp,mod,size);
     6fe:	235a01f3          	0x235a01f3
     702:	3201                	jal	2 <__DYNAMIC+0x2>
    array_equ(ti,ti_2,size);
     704:	2324                	fld	fs1,64(a4)
     706:	1af0090f          	0x1af0090f
     70a:	0a1c                	addi	a5,sp,272
    array_sub(ti,temp,size);
     70c:	01f0                	addi	a2,sp,204
     70e:	361c                	fld	fa5,40(a2)
     710:	000a                	c.slli	zero,0x2
     712:	de00                	sw	s0,56(a2)
    array_mod(ti,mod,size);
     714:	000a                	c.slli	zero,0x2
     716:	0200                	addi	s0,sp,256
     718:	7200                	flw	fs0,32(a2)
	...
array_equ(ri_2,ri_1,size);
     722:	3200                	fld	fs0,32(a2)
array_equ(ri_1,ri,size);
     724:	0009                	c.nop	2
     726:	3400                	fld	fs0,40(s0)
     728:	0009                	c.nop	2
     72a:	0200                	addi	s0,sp,256
array_equ(ti_2,ti_1,size);
     72c:	3100                	fld	fs0,32(a0)
     72e:	349f 0009 3a00      	0x3a000009349f
array_equ(ti_1,ti,size);
     734:	0009                	c.nop	2
     736:	0100                	addi	s0,sp,128
     738:	5f00                	lw	s0,56(a4)
     73a:	093e                	slli	s2,s2,0xf
        controlR = 0;
     73c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     73e:	0944                	addi	s1,sp,148
     740:	0000                	unimp
     742:	0001                	nop
    while (controlR != 0) {
     744:	4c5f 0009 5a00      	0x5a0000094c5f
            if (((ri_2[0] * j) % mod) == 1)
     74a:	0009                	c.nop	2
        for (j = 0; j < mod; ++j) {
     74c:	0100                	addi	s0,sp,128
     74e:	5f00                	lw	s0,56(a4)
     750:	0964                	addi	s1,sp,156
     752:	0000                	unimp
     754:	0979                	addi	s2,s2,30
     756:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     758:	0001                	nop
     75a:	7a5f 0009 8400      	0x840000097a5f
    }
     760:	0009                	c.nop	2
     762:	0500                	addi	s0,sp,640
     764:	8200                	0x8200
     766:	3100                	fld	fs0,32(a0)
     768:	9f24                	0x9f24
     76a:	0984                	addi	s1,sp,208
     76c:	0000                	unimp
     76e:	00000993          	li	s3,0
     772:	0001                	nop
     774:	945f 0009 a400      	0xa4000009945f
     77a:	0009                	c.nop	2
     77c:	0500                	addi	s0,sp,640
     77e:	8200                	0x8200
     780:	3300                	fld	fs0,32(a4)
     782:	9f1e                	add	t5,t5,t2
     784:	09a4                	addi	s1,sp,216
        ti_2[i] = 0;
     786:	0000                	unimp
     788:	09b2                	slli	s3,s3,0xc
     78a:	0000                	unimp
     78c:	0001                	nop
        ti_1[i] = 0;
     78e:	b259                	j	114 <array_mod+0xa>
        ti_2[i] = 0;
     790:	0009                	c.nop	2
     792:	ba00                	fsd	fs0,48(a2)
        ti_1[i] = 0;
     794:	0009                	c.nop	2
     796:	0200                	addi	s0,sp,256
    for (i = 0; i < size; ++i) {
     798:	3000                	fld	fs0,32(s0)
     79a:	ba9f 0009 c200      	0xc2000009ba9f
            ri[i - (N + 1)] = res[i];
     7a0:	0009                	c.nop	2
     7a2:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7a4:	5e00                	lw	s0,56(a2)
     7a6:	09c6                	slli	s3,s3,0x11
            ri[i - (N + 1)] = res[i];
     7a8:	0000                	unimp
     7aa:	09d8                	addi	a4,sp,212
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7ac:	0000                	unimp
              qi_1[i] = 0;
     7ae:	0005                	c.nop	1
     7b0:	0082                	c.slli64	ra
     7b2:	2432                	fld	fs0,264(sp)
     7b4:	d89f 0009 f200      	0xf2000009d89f
     7ba:	0009                	c.nop	2
     7bc:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     7be:	6800                	flw	fs0,16(s0)
            controlR += ri[i];
     7c0:	09f2                	slli	s3,s3,0x1c
        for (i = 0; i < N + 1; ++i) {
     7c2:	0000                	unimp
            if (((ri_2[0] * j) % mod) == 1)
     7c4:	0a72                	slli	s4,s4,0x1c
     7c6:	0000                	unimp
     7c8:	0001                	nop
     7ca:	725f 000a 7400      	0x7400000a725f
     7d0:	000a                	c.slli	zero,0x2
     7d2:	0300                	addi	s0,sp,384
        for (j = 0; j < mod; ++j) {
     7d4:	7f00                	flw	fs0,56(a4)
     7d6:	9f7f                	0x9f7f
            ti_2[i] = (ti_2[i] * j) % mod;
     7d8:	0a74                	addi	a3,sp,284
        for (i = 0; i < N + 1; ++i) {
     7da:	0000                	unimp
     7dc:	0a96                	slli	s5,s5,0x5
            ti_2[i] = (ti_2[i] * j) % mod;
     7de:	0000                	unimp
     7e0:	0001                	nop
     7e2:	965f 000a a600      	0xa600000a965f
     7e8:	000a                	c.slli	zero,0x2
        for (i = 0; i < N + 1; ++i) {
     7ea:	0100                	addi	s0,sp,128
int* generate_keys(int N, int p, int q){
     7ec:	5900                	lw	s0,48(a0)
     7ee:	0aa6                	slli	s5,s5,0x9
     7f0:	0000                	unimp
     7f2:	0aa8                	addi	a0,sp,344
     7f4:	0000                	unimp
     7f6:	7f790003          	lb	zero,2039(s2)
     7fa:	a89f 000a aa00      	0xaa00000aa89f
     800:	000a                	c.slli	zero,0x2
     802:	0100                	addi	s0,sp,128
     804:	5900                	lw	s0,48(a0)
     806:	0aaa                	slli	s5,s5,0xa
     808:	0000                	unimp
     80a:	0aae                	slli	s5,s5,0xb
     80c:	0000                	unimp
     80e:	0001                	nop
     810:	ae5e                	fsd	fs7,280(sp)
     812:	000a                	c.slli	zero,0x2
     814:	b800                	fsd	fs0,48(s0)
     816:	000a                	c.slli	zero,0x2
     818:	0300                	addi	s0,sp,384
     81a:	7e00                	flw	fs0,56(a2)
     81c:	9f7f                	0x9f7f
     81e:	0ab8                	addi	a4,sp,344
     820:	0000                	unimp
     822:	0aba                	slli	s5,s5,0xe
     824:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     826:	0001                	nop
     828:	ba5e                	fsd	fs7,304(sp)
     82a:	000a                	c.slli	zero,0x2
     82c:	ca00                	sw	s0,16(a2)
     82e:	000a                	c.slli	zero,0x2
     830:	0100                	addi	s0,sp,128
     832:	6800                	flw	fs0,16(s0)
     834:	0aca                	slli	s5,s5,0x12
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     836:	0000                	unimp
     838:	0ada                	slli	s5,s5,0x16
     83a:	0000                	unimp
     83c:	0001                	nop
     83e:	da5f 000a dc00      	0xdc00000ada5f
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     844:	000a                	c.slli	zero,0x2
     846:	0300                	addi	s0,sp,384
     848:	7f00                	flw	fs0,56(a4)
     84a:	9f7f                	0x9f7f
     84c:	0adc                	addi	a5,sp,340
     84e:	0000                	unimp
     850:	0ade                	slli	s5,s5,0x17
     852:	0000                	unimp
     854:	0001                	nop
     856:	005f 0000 0000      	0x5f
     85c:	0000                	unimp
     85e:	f600                	fsw	fs0,40(a2)
     860:	0009                	c.nop	2
     862:	3600                	fld	fs0,40(a2)
     864:	000a                	c.slli	zero,0x2
     866:	0600                	addi	s0,sp,768
     868:	0300                	addi	s0,sp,384
     86a:	1944                	addi	s1,sp,180
     86c:	0000                	unimp
     86e:	009f 0000 0000      	0x9f
     874:	0000                	unimp
     876:	2e00                	fld	fs0,24(a2)
     878:	0009                	c.nop	2
     87a:	f200                	fsw	fs0,32(a2)
     87c:	0009                	c.nop	2
     87e:	0100                	addi	s0,sp,128
     880:	6200                	flw	fs0,0(a2)
     882:	09f2                	slli	s3,s3,0x1c
     884:	0000                	unimp
     886:	0a16                	slli	s4,s4,0x5
     888:	0000                	unimp
     88a:	7f850003          	lb	zero,2040(a0)
     88e:	169f 000a 3600      	0x3600000a169f
     894:	000a                	c.slli	zero,0x2
     896:	0400                	addi	s0,sp,512
     898:	f300                	fsw	fs0,32(a4)
     89a:	5a01                	li	s4,-32
     89c:	369f 000a ca00      	0xca00000a369f
     8a2:	000a                	c.slli	zero,0x2
     8a4:	0100                	addi	s0,sp,128
     8a6:	6200                	flw	fs0,0(a2)
     8a8:	0aca                	slli	s5,s5,0x12
     8aa:	0000                	unimp
    int polyR[N+1];
     8ac:	0ade                	slli	s5,s5,0x17
     8ae:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8b0:	7f850003          	lb	zero,2040(a0)
    int polyR[N+1];
     8b4:	009f 0000 0000      	0x9f
     8ba:	0000                	unimp
     8bc:	fc00                	fsw	fs0,56(s0)
     8be:	0005                	c.nop	1
    polyR[N] = 1;
     8c0:	6a00                	flw	fs0,16(a2)
     8c2:	0006                	c.slli	zero,0x1
     8c4:	0100                	addi	s0,sp,128
     8c6:	5a00                	lw	s0,48(a2)
     8c8:	066a                	slli	a2,a2,0x1a
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8ca:	0000                	unimp
     8cc:	0000066b          	0x66b
     8d0:	0001                	nop
     8d2:	00066b5b          	0x66b5b
     8d6:	8600                	0x8600
     8d8:	04000007          	0x4000007
     8dc:	f300                	fsw	fs0,32(a4)
     8de:	5a01                	li	s4,-32
     8e0:	869f 0007 9c00      	0x9c000007869f
     8e6:	01000007          	0x1000007
     8ea:	5a00                	lw	s0,48(a2)
     8ec:	079c                	addi	a5,sp,960
     8ee:	0000                	unimp
     8f0:	07ec                	addi	a1,sp,972
     8f2:	0000                	unimp
     8f4:	0004                	0x4
     8f6:	9f5a01f3          	0x9f5a01f3
	...
     902:	05fc                	addi	a5,sp,716
     904:	0000                	unimp
     906:	0666                	slli	a2,a2,0x19
     908:	0000                	unimp
     90a:	0001                	nop
     90c:	0006665b          	0x6665b
     910:	8a00                	0x8a00
     912:	0006                	c.slli	zero,0x1
     914:	0100                	addi	s0,sp,128
     916:	6b00                	flw	fs0,16(a4)
     918:	068a                	slli	a3,a3,0x2
     91a:	0000                	unimp
     91c:	0786                	slli	a5,a5,0x1
     91e:	0000                	unimp
     920:	0004                	0x4
     922:	9f5b01f3          	0x9f5b01f3
     926:	0786                	slli	a5,a5,0x1
     928:	0000                	unimp
     92a:	079c                	addi	a5,sp,960
     92c:	0000                	unimp
    polyR[0] = -1;
     92e:	0001                	nop
     930:	00079c5b          	0x79c5b
    for(i = 1; i < N; ++i){
     934:	ec00                	fsw	fs0,24(s0)
     936:	04000007          	0x4000007
    for (i = N; i < 55; ++i ){
     93a:	f300                	fsw	fs0,32(a4)
     93c:	5b01                	li	s6,-32
     93e:	009f 0000 0000      	0x9f
        random_keys[i] = f[i];
     944:	0000                	unimp
     946:	fc00                	fsw	fs0,56(s0)
     948:	0005                	c.nop	1
     94a:	6000                	flw	fs0,0(s0)
    for(i = 0; i < N; ++i){
     94c:	0006                	c.slli	zero,0x1
     94e:	0100                	addi	s0,sp,128
     950:	5c00                	lw	s0,56(s0)
     952:	0660                	addi	s0,sp,780
    for(i = N; i < (2*N); ++i){
     954:	0000                	unimp
     956:	0766                	slli	a4,a4,0x19
     958:	0000                	unimp
     95a:	0001                	nop
        random_keys[i] = g[i-N];
     95c:	6659                	lui	a2,0x16
     95e:	78000007          	0x78000007
     962:	03000007          	0x3000007
    for(i = N; i < (2*N); ++i){
     966:	8a00                	0x8a00
    for(i = (2*N); i < (3*N); ++i){
     968:	9f01                	0x9f01
     96a:	0778                	addi	a4,sp,908
     96c:	0000                	unimp
    fp = ext_euclid(polyR, f, (N+1), p);
     96e:	0786                	slli	a5,a5,0x1
     970:	0000                	unimp
     972:	0004                	0x4
     974:	9f5c01f3          	0x9f5c01f3
     978:	0786                	slli	a5,a5,0x1
    for(i = (2*N); i < (3*N); ++i){
     97a:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     97c:	07ec                	addi	a1,sp,972
     97e:	0000                	unimp
     980:	0001                	nop
     982:	0059                	c.nop	22
    for(i = (2*N); i < (3*N); ++i){
     984:	0000                	unimp
     986:	0000                	unimp
    fq = ext_euclid(polyR, f, (N+1), q);
     988:	0000                	unimp
     98a:	fc00                	fsw	fs0,56(s0)
     98c:	0005                	c.nop	1
     98e:	6000                	flw	fs0,0(s0)
     990:	0006                	c.slli	zero,0x1
     992:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     994:	5d00                	lw	s0,56(a0)
     996:	0660                	addi	s0,sp,780
     998:	0000                	unimp
     99a:	0768                	addi	a0,sp,908
        random_keys[i] = fq[i-(3*N)];
     99c:	0000                	unimp
     99e:	0001                	nop
     9a0:	6862                	flw	fa6,24(sp)
     9a2:	86000007          	0x86000007
    for(i = (3*N); i < (4*N); ++i){
     9a6:	04000007          	0x4000007
    fg = polymult2(fq, N, g, N, 0);
     9aa:	f300                	fsw	fs0,32(a4)
     9ac:	5d01                	li	s10,-32
     9ae:	869f 0007 ec00      	0xec000007869f
    for(i = 0; i < (2*N-1); ++i){
     9b4:	01000007          	0x1000007
     9b8:	6200                	flw	fs0,0(a2)
	...
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     9c2:	075c                	addi	a5,sp,900
     9c4:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     9c6:	0786                	slli	a5,a5,0x1
     9c8:	0000                	unimp
     9ca:	0006                	c.slli	zero,0x1
     9cc:	0017b403          	0x17b403
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     9d0:	9f00                	0x9f00
	...
    for(i = (4*N); i < (5*N); ++i){
     9da:	0656                	slli	a2,a2,0x15
     9dc:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     9de:	0778                	addi	a4,sp,908
     9e0:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     9e2:	0001                	nop
     9e4:	786a                	flw	fa6,184(sp)
     9e6:	86000007          	0x86000007
    for(i = (5*N); i < (6*N+1); ++i){
     9ea:	06000007          	0x6000007
     9ee:	f300                	fsw	fs0,32(a4)
     9f0:	5c01                	li	s8,-32
     9f2:	1c31                	addi	s8,s8,-20
     9f4:	869f 0007 ec00      	0xec000007869f
}
     9fa:	01000007          	0x1000007
     9fe:	6a00                	flw	fs0,16(a2)
	...
     a08:	0656                	slli	a2,a2,0x15
     a0a:	0000                	unimp
     a0c:	0660                	addi	s0,sp,780
     a0e:	0000                	unimp
     a10:	0002                	c.slli64	zero
     a12:	9f30                	0x9f30
     a14:	0660                	addi	s0,sp,780
     a16:	0000                	unimp
     a18:	0000066b          	0x66b
     a1c:	0001                	nop
     a1e:	a65f 0006 aa00      	0xaa000006a65f
     a24:	0006                	c.slli	zero,0x1
     a26:	0100                	addi	s0,sp,128
     a28:	5900                	lw	s0,48(a0)
     a2a:	06aa                	slli	a3,a3,0xa
     a2c:	0000                	unimp
     a2e:	06b9                	addi	a3,a3,14
     a30:	0000                	unimp
     a32:	0001                	nop
     a34:	3c5f 0007 4000      	0x400000073c5f
        polyR[i] = 0;
     a3a:	02000007          	0x2000007
     a3e:	3000                	fld	fs0,32(s0)
    for(i = 1; i < N; ++i){
     a40:	409f 0007 4a00      	0x4a000007409f
        f[i] = 0;
     a46:	01000007          	0x1000007
     a4a:	5e00                	lw	s0,56(a2)
     a4c:	0758                	addi	a4,sp,900
     a4e:	0000                	unimp
     a50:	07a6                	slli	a5,a5,0x9
        g[i] = 0;
     a52:	0000                	unimp
     a54:	0001                	nop
     a56:	a65f 0007 ac00      	0xac000007a65f
    for (i = N; i < 55; ++i ){
     a5c:	03000007          	0x3000007
        random_keys[i] = f[i];
     a60:	7f00                	flw	fs0,56(a4)
     a62:	9f7f                	0x9f7f
     a64:	07ac                	addi	a1,sp,968
     a66:	0000                	unimp
     a68:	07ae                	slli	a5,a5,0xb
     a6a:	0000                	unimp
     a6c:	0001                	nop
     a6e:	ae5f 0007 c000      	0xc0000007ae5f
    for(i = 0; i < N; ++i){
     a74:	01000007          	0x1000007
        random_keys[i] = g[i-N];
     a78:	5e00                	lw	s0,56(a2)
     a7a:	07c0                	addi	s0,sp,964
     a7c:	0000                	unimp
     a7e:	07c2                	slli	a5,a5,0x10
    for(i = N; i < (2*N); ++i){
     a80:	0000                	unimp
     a82:	7f7e0003          	lb	zero,2039(t3) # fffe07f7 <_stack_start+0xfffd07f7>
        random_keys[i] = fp[i-(2*N)];
     a86:	c29f 0007 c400      	0xc4000007c29f
     a8c:	01000007          	0x1000007
    for(i = (2*N); i < (3*N); ++i){
     a90:	5e00                	lw	s0,56(a2)
     a92:	07d8                	addi	a4,sp,964
     a94:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     a96:	07dc                	addi	a5,sp,964
     a98:	0000                	unimp
     a9a:	0001                	nop
     a9c:	dc5f 0007 ea00      	0xea000007dc5f
     aa2:	03000007          	0x3000007
     aa6:	7f00                	flw	fs0,56(a4)
    for(i = (3*N); i < (4*N); ++i){
     aa8:	9f7f                	0x9f7f
        fg[i] = fg[i]*p;
     aaa:	07ea                	slli	a5,a5,0x1a
    for(i = 0; i < (2*N-1); ++i){
     aac:	0000                	unimp
     aae:	07ec                	addi	a1,sp,972
        fg[i] = fg[i]*p;
     ab0:	0000                	unimp
     ab2:	0001                	nop
     ab4:	005f 0000 0000      	0x5f
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     aba:	0000                	unimp
     abc:	4c00                	lw	s0,24(s0)
     abe:	86000007          	0x86000007
     ac2:	01000007          	0x1000007
    for(i = (4*N); i < (5*N); ++i){
     ac6:	5e00                	lw	s0,56(a2)
     ac8:	07c4                	addi	s1,sp,964
        random_keys[i] = polyR[i-(5*N)];
     aca:	0000                	unimp
     acc:	07ec                	addi	a1,sp,972
     ace:	0000                	unimp
     ad0:	0001                	nop
     ad2:	005e                	c.slli	zero,0x17
     ad4:	0000                	unimp
     ad6:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     ad8:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     ada:	5400                	lw	s0,40(s0)
    for(i = (5*N); i < (6*N+1); ++i){
     adc:	0006                	c.slli	zero,0x1
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     ade:	6c00                	flw	fs0,24(s0)
     ae0:	02000007          	0x2000007
     ae4:	8400                	0x8400
     ae6:	8600                	0x8600
     ae8:	ec000007          	0xec000007
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     aec:	02000007          	0x2000007
     af0:	8400                	0x8400
	...
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     afa:	5400                	lw	s0,40(s0)
     afc:	0006                	c.slli	zero,0x1
     afe:	6e00                	flw	fs0,24(a2)
     b00:	02000007          	0x2000007
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b04:	8500                	0x8500
    temp = polymult(public_key,N,random_val,48,q,0);
     b06:	8600                	0x8600
     b08:	ec000007          	0xec000007
     b0c:	02000007          	0x2000007
     b10:	8500                	0x8500
	...
array_add(temp,message,48);
     b1a:	5400                	lw	s0,40(s0)
     b1c:	0006                	c.slli	zero,0x1
    temp = polymult(public_key,N,random_val,48,q,0);
     b1e:	7200                	flw	fs0,32(a2)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b20:	02000007          	0x2000007
array_add(temp,message,48);
     b24:	8700                	0x8700
     b26:	8600                	0x8600
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b28:	ec000007          	0xec000007
     b2c:	02000007          	0x2000007
     b30:	8700                	0x8700
	...
    for(i = (2*N); i < (3*N); ++i){
     b3a:	5400                	lw	s0,40(s0)
     b3c:	0006                	c.slli	zero,0x1
     b3e:	7000                	flw	fs0,32(s0)
     b40:	02000007          	0x2000007
}
     b44:	8600                	0x8600
     b46:	7000                	flw	fs0,32(s0)
     b48:	72000007          	0x72000007
     b4c:	0c000007          	0xc000007
     b50:	8700                	0x8700
        CT[i-(2*N)] = CT[i];
     b52:	8a00                	0x8a00
     b54:	3201                	jal	454 <polymult2+0x15a>
     b56:	2324                	fld	fs1,64(a4)
     b58:	1af0090f          	0x1af0090f
    for(i = (2*N); i < (3*N); ++i){
     b5c:	861c                	0x861c
        CT[i-(2*N)] = CT[i];
     b5e:	ec000007          	0xec000007
    for(i = (2*N); i < (3*N); ++i){
     b62:	02000007          	0x2000007
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b66:	8600                	0x8600
	...
    for(i = (2*N); i < ((2*N)+N); ++i){
     b70:	5400                	lw	s0,40(s0)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b72:	0006                	c.slli	zero,0x1
     b74:	7400                	flw	fs0,40(s0)
     b76:	02000007          	0x2000007
     b7a:	8800                	0x8800
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b7c:	8600                	0x8600
     b7e:	ec000007          	0xec000007
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b82:	02000007          	0x2000007
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b86:	8800                	0x8800
	...
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b90:	5400                	lw	s0,40(s0)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     b92:	0006                	c.slli	zero,0x1
     b94:	7600                	flw	fs0,40(a2)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b96:	02000007          	0x2000007
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     b9a:	8900                	0x8900
     b9c:	8600                	0x8600
     b9e:	ec000007          	0xec000007
     ba2:	02000007          	0x2000007
     ba6:	8900                	0x8900
	...
    for(i = (2*N); i < ((2*N)+N); ++i){
     bb0:	5600                	lw	s0,40(a2)
     bb2:	0006                	c.slli	zero,0x1
        if(a2[i] <= q/2)
     bb4:	6000                	flw	fs0,0(s0)
     bb6:	02000007          	0x2000007
    for (i = 0; i < N; ++i){
     bba:	7200                	flw	fs0,32(a2)
     bbc:	6000                	flw	fs0,0(s0)
     bbe:	6a000007          	0x6a000007
    c = polymult2(secret_key_fp,N,a2,N,0);
     bc2:	02000007          	0x2000007
     bc6:	8300                	0x8300
     bc8:	6a00                	flw	fs0,16(a2)
     bca:	76000007          	0x76000007
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     bce:	0c000007          	0xc000007
     bd2:	8900                	0x8900
     bd4:	8a00                	0x8a00
    for(i = (2*N); i < ((2*N)+N); ++i){
     bd6:	3201                	jal	4d6 <polydiv+0x7e>
     bd8:	2324                	fld	fs1,64(a4)
     bda:	1af0090f          	0x1af0090f
}
     bde:	861c                	0x861c
     be0:	ec000007          	0xec000007
     be4:	02000007          	0x2000007
     be8:	7200                	flw	fs0,32(a2)
	...
        a2[i-(2*N)] = a2[i];
     bf2:	a600                	fsd	fs0,8(a2)
     bf4:	0006                	c.slli	zero,0x1
     bf6:	b800                	fsd	fs0,48(s0)
     bf8:	0006                	c.slli	zero,0x1
    for(i = (2*N); i < ((2*N)+N); ++i){
     bfa:	0100                	addi	s0,sp,128
     bfc:	5a00                	lw	s0,48(a2)
        a2[i-(2*N)] = a2[i];
     bfe:	079c                	addi	a5,sp,960
     c00:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     c02:	07ae                	slli	a5,a5,0xb
        if(a2[i] <= q/2)
     c04:	0000                	unimp
     c06:	0001                	nop
     c08:	005a                	c.slli	zero,0x16
            a2[i] = (-1)*(q-a2[i]);
     c0a:	0000                	unimp
     c0c:	0000                	unimp
     c0e:	0000                	unimp
    for (i = 0; i < N; ++i){
     c10:	d800                	sw	s0,48(s0)
     c12:	0006                	c.slli	zero,0x1
     c14:	dc00                	sw	s0,56(s0)
        c2[i-(2*N)] = c2[i];
     c16:	0006                	c.slli	zero,0x1
     c18:	0100                	addi	s0,sp,128
     c1a:	5a00                	lw	s0,48(a2)
     c1c:	06dc                	addi	a5,sp,836
    for(i = (2*N); i < ((2*N)+N); ++i){
     c1e:	0000                	unimp
     c20:	06dd                	addi	a3,a3,23
        c2[i-(2*N)] = c2[i];
     c22:	0000                	unimp
     c24:	0001                	nop
    for(i = (2*N); i < ((2*N)+N); ++i){
     c26:	0000005b          	0x5b
  jal x0, default_exc_handler
     c2a:	0000                	unimp
  mv  x1, x0
     c2c:	0000                	unimp
     c2e:	f600                	fsw	fs0,40(a2)
  mv  x2, x1
     c30:	0006                	c.slli	zero,0x1
  mv  x3, x1
     c32:	fa00                	fsw	fs0,48(a2)
  mv  x4, x1
     c34:	0006                	c.slli	zero,0x1
  mv  x5, x1
     c36:	0100                	addi	s0,sp,128
  mv  x6, x1
     c38:	5a00                	lw	s0,48(a2)
  mv  x7, x1
     c3a:	06fa                	slli	a3,a3,0x1e
  mv  x8, x1
     c3c:	0000                	unimp
  mv  x9, x1
     c3e:	000006fb          	0x6fb
  mv x11, x1
     c42:	0001                	nop
  mv x12, x1
     c44:	0000005b          	0x5b
  mv x14, x1
     c48:	0000                	unimp
  mv x15, x1
     c4a:	0000                	unimp
  mv x16, x1
     c4c:	5600                	lw	s0,40(a2)
  mv x17, x1
     c4e:	0006                	c.slli	zero,0x1
  mv x18, x1
     c50:	8a00                	0x8a00
  mv x19, x1
     c52:	0006                	c.slli	zero,0x1
  mv x20, x1
     c54:	0200                	addi	s0,sp,256
  mv x21, x1
     c56:	3100                	fld	fs0,32(a0)
  mv x22, x1
     c58:	8a9f 0006 4000      	0x400000068a9f
  mv x25, x1
     c5e:	02000007          	0x2000007
  mv x27, x1
     c62:	3000                	fld	fs0,32(s0)
  mv x28, x1
     c64:	409f 0007 5800      	0x58000007409f
  mv x31, x1
     c6a:	01000007          	0x1000007
  la   x2, _stack_start
     c6e:	5f00                	lw	s0,56(a4)
     c70:	0786                	slli	a5,a5,0x1
     c72:	0000                	unimp
  la x26, _bss_start
     c74:	079c                	addi	a5,sp,960
     c76:	0000                	unimp
     c78:	0002                	c.slli64	zero
     c7a:	9f31                	0x9f31
  la x27, _bss_end
     c7c:	079c                	addi	a5,sp,960
     c7e:	0000                	unimp
     c80:	07ae                	slli	a5,a5,0xb
     c82:	0000                	unimp
  bge x26, x27, zero_loop_end
     c84:	0002                	c.slli64	zero
     c86:	9f30                	0x9f30
  sw x0, 0(x26)
     c88:	07ae                	slli	a5,a5,0xb
     c8a:	0000                	unimp
  addi x26, x26, 4
     c8c:	07d8                	addi	a4,sp,964
  ble x26, x27, zero_loop
     c8e:	0000                	unimp
     c90:	0001                	nop
  addi x10, x0, 0
     c92:	005f 0000 0000      	0x5f
  addi x11, x0, 0
     c98:	0000                	unimp
  jal x1, main
     c9a:	5400                	lw	s0,40(s0)
     c9c:	0006                	c.slli	zero,0x1
     c9e:	7800                	flw	fs0,48(s0)
     ca0:	01000007          	0x1000007
     ca4:	6a00                	flw	fs0,16(a2)
     ca6:	0778                	addi	a4,sp,908
     ca8:	0000                	unimp
     caa:	0786                	slli	a5,a5,0x1
     cac:	0000                	unimp
     cae:	0006                	c.slli	zero,0x1
     cb0:	315c01f3          	0x315c01f3
     cb4:	9f1c                	0x9f1c
     cb6:	0786                	slli	a5,a5,0x1
     cb8:	0000                	unimp
     cba:	07ec                	addi	a1,sp,972
     cbc:	0000                	unimp
     cbe:	0001                	nop
     cc0:	006a                	c.slli	zero,0x1a
     cc2:	0000                	unimp
     cc4:	0000                	unimp
     cc6:	0000                	unimp
     cc8:	5400                	lw	s0,40(s0)
     cca:	0006                	c.slli	zero,0x1
     ccc:	7800                	flw	fs0,48(s0)
     cce:	01000007          	0x1000007
     cd2:	6a00                	flw	fs0,16(a2)
     cd4:	0778                	addi	a4,sp,908
     cd6:	0000                	unimp
     cd8:	0786                	slli	a5,a5,0x1
     cda:	0000                	unimp
     cdc:	0006                	c.slli	zero,0x1
     cde:	315c01f3          	0x315c01f3
     ce2:	9f1c                	0x9f1c
     ce4:	0786                	slli	a5,a5,0x1
     ce6:	0000                	unimp
     ce8:	07ec                	addi	a1,sp,972
     cea:	0000                	unimp
     cec:	0001                	nop
     cee:	006a                	c.slli	zero,0x1a
     cf0:	0000                	unimp
     cf2:	0000                	unimp
     cf4:	0000                	unimp
     cf6:	5400                	lw	s0,40(s0)
     cf8:	0006                	c.slli	zero,0x1
     cfa:	7800                	flw	fs0,48(s0)
     cfc:	01000007          	0x1000007
     d00:	6a00                	flw	fs0,16(a2)
     d02:	0778                	addi	a4,sp,908
     d04:	0000                	unimp
     d06:	0786                	slli	a5,a5,0x1
     d08:	0000                	unimp
     d0a:	0006                	c.slli	zero,0x1
     d0c:	315c01f3          	0x315c01f3
     d10:	9f1c                	0x9f1c
     d12:	0786                	slli	a5,a5,0x1
     d14:	0000                	unimp
     d16:	07ec                	addi	a1,sp,972
     d18:	0000                	unimp
     d1a:	0001                	nop
     d1c:	006a                	c.slli	zero,0x1a
     d1e:	0000                	unimp
     d20:	0000                	unimp
     d22:	0000                	unimp
     d24:	5400                	lw	s0,40(s0)
     d26:	0006                	c.slli	zero,0x1
     d28:	7800                	flw	fs0,48(s0)
     d2a:	01000007          	0x1000007
     d2e:	6a00                	flw	fs0,16(a2)
     d30:	0778                	addi	a4,sp,908
     d32:	0000                	unimp
     d34:	0786                	slli	a5,a5,0x1
     d36:	0000                	unimp
     d38:	0006                	c.slli	zero,0x1
     d3a:	315c01f3          	0x315c01f3
     d3e:	9f1c                	0x9f1c
     d40:	0786                	slli	a5,a5,0x1
     d42:	0000                	unimp
     d44:	07ec                	addi	a1,sp,972
     d46:	0000                	unimp
     d48:	0001                	nop
     d4a:	006a                	c.slli	zero,0x1a
     d4c:	0000                	unimp
     d4e:	0000                	unimp
     d50:	0000                	unimp
     d52:	5400                	lw	s0,40(s0)
     d54:	0006                	c.slli	zero,0x1
     d56:	7800                	flw	fs0,48(s0)
     d58:	01000007          	0x1000007
     d5c:	6a00                	flw	fs0,16(a2)
     d5e:	0778                	addi	a4,sp,908
     d60:	0000                	unimp
     d62:	0786                	slli	a5,a5,0x1
     d64:	0000                	unimp
     d66:	0006                	c.slli	zero,0x1
     d68:	315c01f3          	0x315c01f3
     d6c:	9f1c                	0x9f1c
     d6e:	0786                	slli	a5,a5,0x1
     d70:	0000                	unimp
     d72:	07ec                	addi	a1,sp,972
     d74:	0000                	unimp
     d76:	0001                	nop
     d78:	006a                	c.slli	zero,0x1a
     d7a:	0000                	unimp
     d7c:	0000                	unimp
     d7e:	0000                	unimp
     d80:	5400                	lw	s0,40(s0)
     d82:	0006                	c.slli	zero,0x1
     d84:	7800                	flw	fs0,48(s0)
     d86:	01000007          	0x1000007
     d8a:	6a00                	flw	fs0,16(a2)
     d8c:	0778                	addi	a4,sp,908
     d8e:	0000                	unimp
     d90:	0786                	slli	a5,a5,0x1
     d92:	0000                	unimp
     d94:	0006                	c.slli	zero,0x1
     d96:	315c01f3          	0x315c01f3
     d9a:	9f1c                	0x9f1c
     d9c:	0786                	slli	a5,a5,0x1
     d9e:	0000                	unimp
     da0:	07ec                	addi	a1,sp,972
     da2:	0000                	unimp
     da4:	0001                	nop
     da6:	006a                	c.slli	zero,0x1a
     da8:	0000                	unimp
     daa:	0000                	unimp
     dac:	0000                	unimp
     dae:	5400                	lw	s0,40(s0)
     db0:	0006                	c.slli	zero,0x1
     db2:	7800                	flw	fs0,48(s0)
     db4:	01000007          	0x1000007
     db8:	6a00                	flw	fs0,16(a2)
     dba:	0778                	addi	a4,sp,908
     dbc:	0000                	unimp
     dbe:	0786                	slli	a5,a5,0x1
     dc0:	0000                	unimp
     dc2:	0006                	c.slli	zero,0x1
     dc4:	315c01f3          	0x315c01f3
     dc8:	9f1c                	0x9f1c
     dca:	0786                	slli	a5,a5,0x1
     dcc:	0000                	unimp
     dce:	07ec                	addi	a1,sp,972
     dd0:	0000                	unimp
     dd2:	0001                	nop
     dd4:	006a                	c.slli	zero,0x1a
     dd6:	0000                	unimp
     dd8:	0000                	unimp
     dda:	0000                	unimp
     ddc:	5800                	lw	s0,48(s0)
     dde:	0004                	0x4
     de0:	aa00                	fsd	fs0,16(a2)
     de2:	0004                	0x4
     de4:	0100                	addi	s0,sp,128
     de6:	5a00                	lw	s0,48(a2)
     de8:	04aa                	slli	s1,s1,0xa
     dea:	0000                	unimp
     dec:	000004b3          	add	s1,zero,zero
     df0:	0001                	nop
     df2:	0004b35b          	0x4b35b
     df6:	fc00                	fsw	fs0,56(s0)
     df8:	0005                	c.nop	1
     dfa:	0400                	addi	s0,sp,512
     dfc:	f300                	fsw	fs0,32(a4)
     dfe:	5a01                	li	s4,-32
     e00:	009f 0000 0000      	0x9f
     e06:	0000                	unimp
     e08:	5800                	lw	s0,48(s0)
     e0a:	0004                	0x4
     e0c:	a800                	fsd	fs0,16(s0)
     e0e:	0004                	0x4
     e10:	0100                	addi	s0,sp,128
     e12:	5b00                	lw	s0,48(a4)
     e14:	04a8                	addi	a0,sp,584
     e16:	0000                	unimp
     e18:	0546                	slli	a0,a0,0x11
     e1a:	0000                	unimp
     e1c:	0001                	nop
     e1e:	4659                	li	a2,22
     e20:	0005                	c.nop	1
     e22:	6400                	flw	fs0,8(s0)
int main(){
     e24:	0005                	c.nop	1
     e26:	0300                	addi	s0,sp,384
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e28:	8900                	0x8900
     e2a:	9f01                	0x9f01
     e2c:	0564                	addi	s1,sp,652
     e2e:	0000                	unimp
     e30:	0574                	addi	a3,sp,652
     e32:	0000                	unimp
     e34:	0004                	0x4
int main(){
     e36:	9f5b01f3          	0x9f5b01f3
     e3a:	0574                	addi	a3,sp,652
     e3c:	0000                	unimp
     e3e:	05ea                	slli	a1,a1,0x1a
     e40:	0000                	unimp
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e42:	0001                	nop
    resultkon[0] = 0xA;
     e44:	ea59                	bnez	a2,eda <main+0xb6>
     e46:	0005                	c.nop	1
     e48:	fc00                	fsw	fs0,56(s0)
     e4a:	0005                	c.nop	1
     e4c:	0300                	addi	s0,sp,384
    keys = generate_keys(N, p, q);
     e4e:	8900                	0x8900
     e50:	9f01                	0x9f01
	...
     e5a:	0458                	addi	a4,sp,516
     e5c:	0000                	unimp
    for(i = 0; i < N; ++i){
     e5e:	04a6                	slli	s1,s1,0x9
     e60:	0000                	unimp
        secret_key_f[i] = keys[i];
     e62:	0001                	nop
     e64:	a65c                	fsd	fa5,136(a2)
     e66:	0004                	0x4
     e68:	e400                	fsw	fs0,8(s0)
     e6a:	0004                	0x4
     e6c:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     e6e:	6a00                	flw	fs0,16(a2)
     e70:	04e4                	addi	s1,sp,588
     e72:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     e74:	04ee                	slli	s1,s1,0x1b
     e76:	0000                	unimp
     e78:	0004                	0x4
     e7a:	9f5c01f3          	0x9f5c01f3
     e7e:	04ee                	slli	s1,s1,0x1b
        secret_key_fp[i-(2*N)] = keys[i];
     e80:	0000                	unimp
     e82:	050a                	slli	a0,a0,0x2
     e84:	0000                	unimp
     e86:	0001                	nop
     e88:	0a6a                	slli	s4,s4,0x1a
    for(i = (2*N); i < (3*N); ++i){
     e8a:	0005                	c.nop	1
     e8c:	fc00                	fsw	fs0,56(s0)
    for(i = (3*N); i < (4*N); ++i){
     e8e:	0005                	c.nop	1
     e90:	0400                	addi	s0,sp,512
     e92:	f300                	fsw	fs0,32(a4)
     e94:	5c01                	li	s8,-32
     e96:	009f 0000 0000      	0x9f
        public_key[i-(4*N)] = keys[i];
     e9c:	0000                	unimp
     e9e:	5800                	lw	s0,48(s0)
     ea0:	0004                	0x4
     ea2:	b300                	fsd	fs0,32(a4)
    for(i = (4*N); i < (5*N); ++i){
     ea4:	0004                	0x4
     ea6:	0100                	addi	s0,sp,128
     ea8:	5d00                	lw	s0,56(a0)
     eaa:	000004b3          	add	s1,zero,zero
     eae:	055a                	slli	a0,a0,0x16
        ring_poly[i-(5*N)] = keys[i];
     eb0:	0000                	unimp
     eb2:	0001                	nop
     eb4:	5a64                	lw	s1,116(a2)
     eb6:	0005                	c.nop	1
     eb8:	7400                	flw	fs0,40(s0)
    for(i = (5*N); i < (6*N+1); ++i){
     eba:	0005                	c.nop	1
     ebc:	0400                	addi	s0,sp,512
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ebe:	f300                	fsw	fs0,32(a4)
     ec0:	5d01                	li	s10,-32
     ec2:	749f 0005 fc00      	0xfc000005749f
     ec8:	0005                	c.nop	1
     eca:	0100                	addi	s0,sp,128
     ecc:	6400                	flw	fs0,8(s0)
	...
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     ed6:	0458                	addi	a4,sp,516
     ed8:	0000                	unimp
     eda:	000004b3          	add	s1,zero,zero
     ede:	0001                	nop
     ee0:	b35e                	fsd	fs7,416(sp)
     ee2:	0004                	0x4
            resultkon[0] = 0xC;}
     ee4:	5800                	lw	s0,48(s0)
    for(i = 0; i < 32; ++i){
     ee6:	0005                	c.nop	1
     ee8:	0100                	addi	s0,sp,128
        if(!(message[i] == Dec_Message[i])){
     eea:	6300                	flw	fs0,0(a4)
     eec:	0558                	addi	a4,sp,644
     eee:	0000                	unimp
     ef0:	0574                	addi	a3,sp,652
     ef2:	0000                	unimp
     ef4:	0004                	0x4
     ef6:	9f5e01f3          	0x9f5e01f3
            resultkon[0] = 0xB;
     efa:	0574                	addi	a3,sp,652
     efc:	0000                	unimp
}
     efe:	05fc                	addi	a5,sp,716
     f00:	0000                	unimp
     f02:	0001                	nop
     f04:	00000063          	beqz	zero,f04 <main+0xe0>
     f08:	0000                	unimp
     f0a:	0000                	unimp
     f0c:	e600                	fsw	fs0,8(a2)
     f0e:	0004                	0x4
     f10:	ee00                	fsw	fs0,24(a2)
            resultkon[0] = 0xC;}
     f12:	0004                	0x4
    for(i = 0; i < 32; ++i){
     f14:	0100                	addi	s0,sp,128
     f16:	6a00                	flw	fs0,16(a2)
     f18:	050a                	slli	a0,a0,0x2
     f1a:	0000                	unimp
     f1c:	0566                	slli	a0,a0,0x19
     f1e:	0000                	unimp
     f20:	0001                	nop
     f22:	746a                	flw	fs0,184(sp)
     f24:	0005                	c.nop	1
     f26:	fc00                	fsw	fs0,56(s0)
     f28:	0005                	c.nop	1
     f2a:	0100                	addi	s0,sp,128
     f2c:	6a00                	flw	fs0,16(a2)
	...
     f36:	0528                	addi	a0,sp,648
     f38:	0000                	unimp
     f3a:	0539                	addi	a0,a0,14
     f3c:	0000                	unimp
     f3e:	0001                	nop
     f40:	745f 0005 7c00      	0x7c000005745f
     f46:	0005                	c.nop	1
     f48:	0100                	addi	s0,sp,128
     f4a:	5f00                	lw	s0,56(a4)
	...
     f54:	04ce                	slli	s1,s1,0x13
     f56:	0000                	unimp
     f58:	04d0                	addi	a2,sp,580
     f5a:	0000                	unimp
     f5c:	0002                	c.slli64	zero
     f5e:	9f30                	0x9f30
     f60:	04d0                	addi	a2,sp,580
     f62:	0000                	unimp
     f64:	04d4                	addi	a3,sp,580
     f66:	0000                	unimp
     f68:	0001                	nop
     f6a:	d45f 0004 ee00      	0xee000004d45f
     f70:	0004                	0x4
     f72:	0100                	addi	s0,sp,128
     f74:	6800                	flw	fs0,16(s0)
     f76:	04ee                	slli	s1,s1,0x1b
     f78:	0000                	unimp
     f7a:	0504                	addi	s1,sp,640
     f7c:	0000                	unimp
     f7e:	0001                	nop
     f80:	045f 0005 1800      	0x18000005045f
     f86:	0005                	c.nop	1
     f88:	0100                	addi	s0,sp,128
     f8a:	6800                	flw	fs0,16(s0)
     f8c:	0518                	addi	a4,sp,640
     f8e:	0000                	unimp
     f90:	0528                	addi	a0,sp,648
     f92:	0000                	unimp
     f94:	0001                	nop
     f96:	3a5f 0005 5400      	0x540000053a5f
     f9c:	0005                	c.nop	1
     f9e:	0100                	addi	s0,sp,128
     fa0:	5900                	lw	s0,48(a0)
     fa2:	05c0                	addi	s0,sp,708
     fa4:	0000                	unimp
     fa6:	05c2                	slli	a1,a1,0x10
     fa8:	0000                	unimp
     faa:	0001                	nop
     fac:	c269                	beqz	a2,106e <__DTOR_END__+0x142>
     fae:	0005                	c.nop	1
     fb0:	d800                	sw	s0,48(s0)
     fb2:	0005                	c.nop	1
     fb4:	0100                	addi	s0,sp,128
     fb6:	5f00                	lw	s0,56(a4)
     fb8:	05d8                	addi	a4,sp,708
     fba:	0000                	unimp
     fbc:	05ea                	slli	a1,a1,0x1a
     fbe:	0000                	unimp
     fc0:	0001                	nop
     fc2:	ea5d                	bnez	a2,1078 <__DTOR_END__+0x14c>
     fc4:	0005                	c.nop	1
     fc6:	fc00                	fsw	fs0,56(s0)
     fc8:	0005                	c.nop	1
     fca:	0100                	addi	s0,sp,128
     fcc:	5900                	lw	s0,48(a0)
	...
     fd6:	0528                	addi	a0,sp,648
     fd8:	0000                	unimp
     fda:	0539                	addi	a0,a0,14
     fdc:	0000                	unimp
     fde:	0001                	nop
     fe0:	745e                	flw	fs0,244(sp)
     fe2:	0005                	c.nop	1
     fe4:	7800                	flw	fs0,48(s0)
     fe6:	0005                	c.nop	1
     fe8:	0100                	addi	s0,sp,128
     fea:	5e00                	lw	s0,56(a2)
	...
     ff4:	054a                	slli	a0,a0,0x12
     ff6:	0000                	unimp
     ff8:	0574                	addi	a3,sp,652
     ffa:	0000                	unimp
     ffc:	0006                	c.slli	zero,0x1
     ffe:	00155c03          	lhu	s8,1(a0)
    1002:	9f00                	0x9f00
	...
    100c:	04a4                	addi	s1,sp,584
    100e:	0000                	unimp
    1010:	055c                	addi	a5,sp,644
    1012:	0000                	unimp
    1014:	0002                	c.slli64	zero
    1016:	0085                	addi	ra,ra,1
    1018:	0574                	addi	a3,sp,652
    101a:	0000                	unimp
    101c:	05fc                	addi	a5,sp,716
    101e:	0000                	unimp
    1020:	0002                	c.slli64	zero
    1022:	0085                	addi	ra,ra,1
	...
    102c:	04a4                	addi	s1,sp,584
    102e:	0000                	unimp
    1030:	055e                	slli	a0,a0,0x17
    1032:	0000                	unimp
    1034:	0002                	c.slli64	zero
    1036:	0086                	slli	ra,ra,0x1
    1038:	0574                	addi	a3,sp,652
    103a:	0000                	unimp
    103c:	05fc                	addi	a5,sp,716
    103e:	0000                	unimp
    1040:	0002                	c.slli64	zero
    1042:	0086                	slli	ra,ra,0x1
	...
    104c:	059e                	slli	a1,a1,0x7
    104e:	0000                	unimp
    1050:	059f 0000 0001      	0x10000059f
    1056:	9f5a                	add	t5,t5,s6
    1058:	0005                	c.nop	1
    105a:	ea00                	fsw	fs0,16(a2)
    105c:	0005                	c.nop	1
    105e:	0100                	addi	s0,sp,128
    1060:	6b00                	flw	fs0,16(a4)
	...
    106a:	04a4                	addi	s1,sp,584
    106c:	0000                	unimp
    106e:	0546                	slli	a0,a0,0x11
    1070:	0000                	unimp
    1072:	0002                	c.slli64	zero
    1074:	0082                	c.slli64	ra
    1076:	0546                	slli	a0,a0,0x11
    1078:	0000                	unimp
    107a:	055e                	slli	a0,a0,0x17
    107c:	0000                	unimp
    107e:	000c                	0xc
    1080:	0086                	slli	ra,ra,0x1
    1082:	0189                	addi	gp,gp,2
    1084:	2432                	fld	fs0,264(sp)
    1086:	f0090f23          	sb	zero,-226(s2)
    108a:	1c1a                	slli	s8,s8,0x26
    108c:	0574                	addi	a3,sp,652
    108e:	0000                	unimp
    1090:	05ea                	slli	a1,a1,0x1a
    1092:	0000                	unimp
    1094:	0002                	c.slli64	zero
    1096:	0082                	c.slli64	ra
    1098:	05ea                	slli	a1,a1,0x1a
    109a:	0000                	unimp
    109c:	05fc                	addi	a5,sp,716
    109e:	0000                	unimp
    10a0:	000c                	0xc
    10a2:	0086                	slli	ra,ra,0x1
    10a4:	0189                	addi	gp,gp,2
    10a6:	2432                	fld	fs0,264(sp)
    10a8:	f0090f23          	sb	zero,-226(s2)
    10ac:	1c1a                	slli	s8,s8,0x26
	...
    10b6:	04be                	slli	s1,s1,0xf
    10b8:	0000                	unimp
    10ba:	04d0                	addi	a2,sp,580
    10bc:	0000                	unimp
    10be:	0002                	c.slli64	zero
    10c0:	04d00087          	0x4d00087
    10c4:	0000                	unimp
    10c6:	054e                	slli	a0,a0,0x13
    10c8:	0000                	unimp
    10ca:	0002                	c.slli64	zero
    10cc:	0072                	c.slli	zero,0x1c
    10ce:	054e                	slli	a0,a0,0x13
    10d0:	0000                	unimp
    10d2:	0560                	addi	s0,sp,652
    10d4:	0000                	unimp
    10d6:	0002                	c.slli64	zero
    10d8:	05740087          	0x5740087
    10dc:	0000                	unimp
    10de:	05fc                	addi	a5,sp,716
    10e0:	0000                	unimp
    10e2:	0002                	c.slli64	zero
    10e4:	0072                	c.slli	zero,0x1c
	...
    10ee:	04a4                	addi	s1,sp,584
    10f0:	0000                	unimp
    10f2:	0564                	addi	s1,sp,652
    10f4:	0000                	unimp
    10f6:	0001                	nop
    10f8:	6469                	lui	s0,0x1a
    10fa:	0005                	c.nop	1
    10fc:	7400                	flw	fs0,40(s0)
    10fe:	0005                	c.nop	1
    1100:	0600                	addi	s0,sp,768
    1102:	f300                	fsw	fs0,32(a4)
    1104:	5b01                	li	s6,-32
    1106:	1c31                	addi	s8,s8,-20
    1108:	749f 0005 fc00      	0xfc000005749f
    110e:	0005                	c.nop	1
    1110:	0100                	addi	s0,sp,128
    1112:	6900                	flw	fs0,16(a0)
	...
    111c:	04a4                	addi	s1,sp,584
    111e:	0000                	unimp
    1120:	0564                	addi	s1,sp,652
    1122:	0000                	unimp
    1124:	0001                	nop
    1126:	6469                	lui	s0,0x1a
    1128:	0005                	c.nop	1
    112a:	7400                	flw	fs0,40(s0)
    112c:	0005                	c.nop	1
    112e:	0600                	addi	s0,sp,768
    1130:	f300                	fsw	fs0,32(a4)
    1132:	5b01                	li	s6,-32
    1134:	1c31                	addi	s8,s8,-20
    1136:	749f 0005 fc00      	0xfc000005749f
    113c:	0005                	c.nop	1
    113e:	0100                	addi	s0,sp,128
    1140:	6900                	flw	fs0,16(a0)
	...
    114a:	04a4                	addi	s1,sp,584
    114c:	0000                	unimp
    114e:	0564                	addi	s1,sp,652
    1150:	0000                	unimp
    1152:	0001                	nop
    1154:	6469                	lui	s0,0x1a
    1156:	0005                	c.nop	1
    1158:	7400                	flw	fs0,40(s0)
    115a:	0005                	c.nop	1
    115c:	0600                	addi	s0,sp,768
    115e:	f300                	fsw	fs0,32(a4)
    1160:	5b01                	li	s6,-32
    1162:	1c31                	addi	s8,s8,-20
    1164:	749f 0005 fc00      	0xfc000005749f
    116a:	0005                	c.nop	1
    116c:	0100                	addi	s0,sp,128
    116e:	6900                	flw	fs0,16(a0)
	...
    1178:	04b2                	slli	s1,s1,0xc
    117a:	0000                	unimp
    117c:	04d4                	addi	a3,sp,580
    117e:	0000                	unimp
    1180:	0001                	nop
    1182:	d468                	sw	a0,108(s0)
    1184:	0004                	0x4
    1186:	ee00                	fsw	fs0,24(a2)
    1188:	0004                	0x4
    118a:	0300                	addi	s0,sp,384
    118c:	8400                	0x8400
    118e:	9f7f                	0x9f7f
    1190:	04ee                	slli	s1,s1,0x1b
    1192:	0000                	unimp
    1194:	0504                	addi	s1,sp,640
    1196:	0000                	unimp
    1198:	0001                	nop
    119a:	0468                	addi	a0,sp,524
    119c:	0005                	c.nop	1
    119e:	5a00                	lw	s0,48(a2)
    11a0:	0005                	c.nop	1
    11a2:	0300                	addi	s0,sp,384
    11a4:	8400                	0x8400
    11a6:	9f7f                	0x9f7f
    11a8:	055a                	slli	a0,a0,0x16
    11aa:	0000                	unimp
    11ac:	0574                	addi	a3,sp,652
    11ae:	0000                	unimp
    11b0:	0006                	c.slli	zero,0x1
    11b2:	315d01f3          	0x315d01f3
    11b6:	9f1c                	0x9f1c
    11b8:	0574                	addi	a3,sp,652
    11ba:	0000                	unimp
    11bc:	05fc                	addi	a5,sp,716
    11be:	0000                	unimp
    11c0:	7f840003          	lb	zero,2040(s0) # 1a7f8 <_stack_start+0xa7f8>
    11c4:	009f 0000 0000      	0x9f
    11ca:	0000                	unimp
    11cc:	fa00                	fsw	fs0,48(a2)
    11ce:	0002                	c.slli64	zero
    11d0:	7600                	flw	fs0,40(a2)
    11d2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    11d6:	5a00                	lw	s0,48(a2)
    11d8:	0376                	slli	t1,t1,0x1d
    11da:	0000                	unimp
    11dc:	0000037b          	0x37b
    11e0:	0001                	nop
    11e2:	00037b5b          	0x37b5b
    11e6:	a200                	fsd	fs0,0(a2)
    11e8:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    11ec:	f300                	fsw	fs0,32(a4)
    11ee:	5a01                	li	s4,-32
    11f0:	a29f 0003 c400      	0xc4000003a29f
    11f6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    11fa:	5a00                	lw	s0,48(a2)
    11fc:	03c4                	addi	s1,sp,452
    11fe:	0000                	unimp
    1200:	0458                	addi	a4,sp,516
    1202:	0000                	unimp
    1204:	0004                	0x4
    1206:	9f5a01f3          	0x9f5a01f3
	...
    1212:	02fa                	slli	t0,t0,0x1e
    1214:	0000                	unimp
    1216:	0374                	addi	a3,sp,396
    1218:	0000                	unimp
    121a:	0001                	nop
    121c:	0003745b          	0x3745b
    1220:	7b00                	flw	fs0,48(a4)
    1222:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1226:	5c00                	lw	s0,56(s0)
    1228:	0000037b          	0x37b
    122c:	03a2                	slli	t2,t2,0x8
    122e:	0000                	unimp
    1230:	01880003          	lb	zero,24(a6)
    1234:	a29f 0003 c400      	0xc4000003a29f
    123a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    123e:	5b00                	lw	s0,48(a4)
    1240:	03c4                	addi	s1,sp,452
    1242:	0000                	unimp
    1244:	0410                	addi	a2,sp,512
    1246:	0000                	unimp
    1248:	01880003          	lb	zero,24(a6)
    124c:	109f 0004 5800      	0x58000004109f
    1252:	0004                	0x4
    1254:	0400                	addi	s0,sp,512
    1256:	f300                	fsw	fs0,32(a4)
    1258:	5b01                	li	s6,-32
    125a:	009f 0000 0000      	0x9f
    1260:	0000                	unimp
    1262:	fa00                	fsw	fs0,48(a2)
    1264:	0002                	c.slli64	zero
    1266:	6c00                	flw	fs0,24(s0)
    1268:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    126c:	5c00                	lw	s0,56(s0)
    126e:	036c                	addi	a1,sp,396
    1270:	0000                	unimp
    1272:	0000037b          	0x37b
    1276:	0001                	nop
    1278:	7b60                	flw	fs0,116(a4)
    127a:	a2000003          	lb	zero,-1504(zero) # fffffa20 <_stack_start+0xfffefa20>
    127e:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1282:	7800                	flw	fs0,48(s0)
    1284:	7fbc                	flw	fa5,120(a5)
    1286:	03a2                	slli	t2,t2,0x8
    1288:	0000                	unimp
    128a:	03c4                	addi	s1,sp,452
    128c:	0000                	unimp
    128e:	0001                	nop
    1290:	c460                	sw	s0,76(s0)
    1292:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    1296:	0004                	0x4
    1298:	0300                	addi	s0,sp,384
    129a:	7800                	flw	fs0,48(s0)
    129c:	7fbc                	flw	fa5,120(a5)
    129e:	0400                	addi	s0,sp,512
    12a0:	0000                	unimp
    12a2:	0458                	addi	a4,sp,516
    12a4:	0000                	unimp
    12a6:	bc910003          	lb	zero,-1079(sp)
    12aa:	007f                	0x7f
    12ac:	0000                	unimp
    12ae:	0000                	unimp
    12b0:	0000                	unimp
    12b2:	fa00                	fsw	fs0,48(a2)
    12b4:	0002                	c.slli64	zero
    12b6:	6200                	flw	fs0,0(a2)
    12b8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    12bc:	5d00                	lw	s0,56(a0)
    12be:	0362                	slli	t1,t1,0x18
    12c0:	0000                	unimp
    12c2:	0408                	addi	a0,sp,512
    12c4:	0000                	unimp
    12c6:	0001                	nop
    12c8:	0864                	addi	s1,sp,28
    12ca:	0004                	0x4
    12cc:	2200                	fld	fs0,0(a2)
    12ce:	0004                	0x4
    12d0:	0400                	addi	s0,sp,512
    12d2:	f300                	fsw	fs0,32(a4)
    12d4:	5d01                	li	s10,-32
    12d6:	229f 0004 5800      	0x58000004229f
    12dc:	0004                	0x4
    12de:	0100                	addi	s0,sp,128
    12e0:	6400                	flw	fs0,8(s0)
	...
    12ea:	02fa                	slli	t0,t0,0x1e
    12ec:	0000                	unimp
    12ee:	0364                	addi	s1,sp,396
    12f0:	0000                	unimp
    12f2:	0001                	nop
    12f4:	645e                	flw	fs0,212(sp)
    12f6:	16000003          	lb	zero,352(zero) # 160 <polymult+0x38>
    12fa:	0004                	0x4
    12fc:	0100                	addi	s0,sp,128
    12fe:	6b00                	flw	fs0,16(a4)
    1300:	0416                	slli	s0,s0,0x5
    1302:	0000                	unimp
    1304:	0422                	slli	s0,s0,0x8
    1306:	0000                	unimp
    1308:	0004                	0x4
    130a:	9f5e01f3          	0x9f5e01f3
    130e:	0422                	slli	s0,s0,0x8
    1310:	0000                	unimp
    1312:	0458                	addi	a4,sp,516
    1314:	0000                	unimp
    1316:	0001                	nop
    1318:	0000006b          	0x6b
    131c:	0000                	unimp
    131e:	0000                	unimp
    1320:	5600                	lw	s0,40(a2)
    1322:	9a000003          	lb	zero,-1632(zero) # fffff9a0 <_stack_start+0xfffef9a0>
    1326:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    132a:	8200                	0x8200
    132c:	9a00                	0x9a00
    132e:	a2000003          	lb	zero,-1504(zero) # fffffa20 <_stack_start+0xfffefa20>
    1332:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1336:	8900                	0x8900
    1338:	a200                	fsd	fs0,0(a2)
    133a:	c4000003          	lb	zero,-960(zero) # fffffc40 <_stack_start+0xfffefc40>
    133e:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1342:	8200                	0x8200
    1344:	c400                	sw	s0,8(s0)
    1346:	f4000003          	lb	zero,-192(zero) # ffffff40 <_stack_start+0xfffeff40>
    134a:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    134e:	8900                	0x8900
    1350:	2200                	fld	fs0,0(a2)
    1352:	0004                	0x4
    1354:	4a00                	lw	s0,16(a2)
    1356:	0004                	0x4
    1358:	0200                	addi	s0,sp,256
    135a:	8900                	0x8900
	...
    1364:	5e00                	lw	s0,56(a2)
    1366:	6c000003          	lb	zero,1728(zero) # 6c0 <ext_euclid+0xc4>
    136a:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    136e:	3000                	fld	fs0,32(s0)
    1370:	6c9f 0003 7b00      	0x7b0000036c9f
    1376:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    137a:	5e00                	lw	s0,56(a2)
    137c:	03a2                	slli	t2,t2,0x8
    137e:	0000                	unimp
    1380:	03c4                	addi	s1,sp,452
    1382:	0000                	unimp
    1384:	0001                	nop
    1386:	f45e                	fsw	fs7,40(sp)
    1388:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    138c:	0004                	0x4
    138e:	0100                	addi	s0,sp,128
    1390:	5900                	lw	s0,48(a0)
    1392:	044a                	slli	s0,s0,0x12
    1394:	0000                	unimp
    1396:	0458                	addi	a4,sp,516
    1398:	0000                	unimp
    139a:	0001                	nop
    139c:	0059                	c.nop	22
    139e:	0000                	unimp
    13a0:	0000                	unimp
    13a2:	0000                	unimp
    13a4:	9a00                	0x9a00
    13a6:	a2000003          	lb	zero,-1504(zero) # fffffa20 <_stack_start+0xfffefa20>
    13aa:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    13ae:	6500                	flw	fs0,8(a0)
    13b0:	03a2                	slli	t2,t2,0x8
    13b2:	0000                	unimp
    13b4:	03be                	slli	t2,t2,0xf
    13b6:	0000                	unimp
    13b8:	0001                	nop
    13ba:	c45f 0003 0a00      	0xa000003c45f
    13c0:	0004                	0x4
    13c2:	0100                	addi	s0,sp,128
    13c4:	6500                	flw	fs0,8(a0)
    13c6:	0422                	slli	s0,s0,0x8
    13c8:	0000                	unimp
    13ca:	0458                	addi	a4,sp,516
    13cc:	0000                	unimp
    13ce:	0001                	nop
    13d0:	0065                	c.nop	25
    13d2:	0000                	unimp
    13d4:	0000                	unimp
    13d6:	0000                	unimp
    13d8:	c400                	sw	s0,8(s0)
    13da:	d6000003          	lb	zero,-672(zero) # fffffd60 <_stack_start+0xfffefd60>
    13de:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    13e2:	5f00                	lw	s0,56(a4)
    13e4:	03d6                	slli	t2,t2,0x15
    13e6:	0000                	unimp
    13e8:	03dc                	addi	a5,sp,452
    13ea:	0000                	unimp
    13ec:	017f0003          	lb	zero,23(t5) # 1b017 <_stack_start+0xb017>
    13f0:	dc9f 0003 e600      	0xe6000003dc9f
    13f6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    13fa:	5f00                	lw	s0,56(a4)
    13fc:	0426                	slli	s0,s0,0x9
    13fe:	0000                	unimp
    1400:	0438                	addi	a4,sp,520
    1402:	0000                	unimp
    1404:	0001                	nop
    1406:	385f 0004 3e00      	0x3e000004385f
    140c:	0004                	0x4
    140e:	0300                	addi	s0,sp,384
    1410:	7f00                	flw	fs0,56(a4)
    1412:	9f01                	0x9f01
    1414:	043e                	slli	s0,s0,0xf
    1416:	0000                	unimp
    1418:	044a                	slli	s0,s0,0x12
    141a:	0000                	unimp
    141c:	0001                	nop
    141e:	005f 0000 0000      	0x5f
    1424:	0000                	unimp
    1426:	f800                	fsw	fs0,48(s0)
    1428:	22000003          	lb	zero,544(zero) # 220 <polymult+0xf8>
    142c:	0004                	0x4
    142e:	0600                	addi	s0,sp,768
    1430:	0300                	addi	s0,sp,384
    1432:	1304                	addi	s1,sp,416
    1434:	0000                	unimp
    1436:	009f 0000 0000      	0x9f
    143c:	0000                	unimp
    143e:	5c00                	lw	s0,56(s0)
    1440:	14000003          	lb	zero,320(zero) # 140 <polymult+0x18>
    1444:	0004                	0x4
    1446:	0200                	addi	s0,sp,256
    1448:	8a00                	0x8a00
    144a:	2200                	fld	fs0,0(a2)
    144c:	0004                	0x4
    144e:	5800                	lw	s0,48(s0)
    1450:	0004                	0x4
    1452:	0200                	addi	s0,sp,256
    1454:	8a00                	0x8a00
	...
    145e:	5e00                	lw	s0,56(a2)
    1460:	fc000003          	lb	zero,-64(zero) # ffffffc0 <_stack_start+0xfffeffc0>
    1464:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1468:	7200                	flw	fs0,32(a2)
    146a:	fc00                	fsw	fs0,56(s0)
    146c:	08000003          	lb	zero,128(zero) # 80 <__DYNAMIC+0x80>
    1470:	0004                	0x4
    1472:	0c00                	addi	s0,sp,528
    1474:	8a00                	0x8a00
    1476:	8400                	0x8400
    1478:	3200                	fld	fs0,32(a2)
    147a:	2324                	fld	fs1,64(a4)
    147c:	1af0090f          	0x1af0090f
    1480:	081c                	addi	a5,sp,16
    1482:	0004                	0x4
    1484:	1400                	addi	s0,sp,544
    1486:	0004                	0x4
    1488:	0d00                	addi	s0,sp,656
    148a:	8a00                	0x8a00
    148c:	f300                	fsw	fs0,32(a4)
    148e:	5d01                	li	s10,-32
    1490:	2432                	fld	fs0,264(sp)
    1492:	f0090f23          	sb	zero,-226(s2)
    1496:	1c1a                	slli	s8,s8,0x26
    1498:	0422                	slli	s0,s0,0x8
    149a:	0000                	unimp
    149c:	0458                	addi	a4,sp,516
    149e:	0000                	unimp
    14a0:	0002                	c.slli64	zero
    14a2:	0072                	c.slli	zero,0x1c
	...
    14ac:	0356                	slli	t1,t1,0x15
    14ae:	0000                	unimp
    14b0:	039a                	slli	t2,t2,0x6
    14b2:	0000                	unimp
    14b4:	0001                	nop
    14b6:	9a65                	andi	a2,a2,-7
    14b8:	a2000003          	lb	zero,-1504(zero) # fffffa20 <_stack_start+0xfffefa20>
    14bc:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    14c0:	8400                	0x8400
    14c2:	9f7f                	0x9f7f
    14c4:	03a2                	slli	t2,t2,0x8
    14c6:	0000                	unimp
    14c8:	03c4                	addi	s1,sp,452
    14ca:	0000                	unimp
    14cc:	0001                	nop
    14ce:	c465                	beqz	s0,15b6 <result+0x5a>
    14d0:	08000003          	lb	zero,128(zero) # 80 <__DYNAMIC+0x80>
    14d4:	0004                	0x4
    14d6:	0300                	addi	s0,sp,384
    14d8:	8400                	0x8400
    14da:	9f7f                	0x9f7f
    14dc:	0408                	addi	a0,sp,512
    14de:	0000                	unimp
    14e0:	0422                	slli	s0,s0,0x8
    14e2:	0000                	unimp
    14e4:	0006                	c.slli	zero,0x1
    14e6:	315d01f3          	0x315d01f3
    14ea:	9f1c                	0x9f1c
    14ec:	0422                	slli	s0,s0,0x8
    14ee:	0000                	unimp
    14f0:	0458                	addi	a4,sp,516
    14f2:	0000                	unimp
    14f4:	7f840003          	lb	zero,2040(s0)
    14f8:	009f 0000 0000      	0x9f
    14fe:	0000                	unimp
    1500:	0e00                	addi	s0,sp,784
    1502:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1506:	0004                	0x4
    1508:	0100                	addi	s0,sp,128
    150a:	6300                	flw	fs0,0(a4)
    150c:	0406                	slli	s0,s0,0x1
    150e:	0000                	unimp
    1510:	0408                	addi	a0,sp,512
    1512:	0000                	unimp
    1514:	0006                	c.slli	zero,0x1
    1516:	0084                	addi	s1,sp,64
    1518:	0088                	addi	a0,sp,64
    151a:	9f22                	add	t5,t5,s0
    151c:	0408                	addi	a0,sp,512
    151e:	0000                	unimp
    1520:	0410                	addi	a2,sp,512
    1522:	0000                	unimp
    1524:	00880007          	0x880007
    1528:	225d01f3          	0x225d01f3
    152c:	109f 0004 2200      	0x22000004109f
    1532:	0004                	0x4
    1534:	0a00                	addi	s0,sp,272
    1536:	f300                	fsw	fs0,32(a4)
    1538:	5b01                	li	s6,-32
    153a:	225d01f3          	0x225d01f3
    153e:	1c31                	addi	s8,s8,-20
    1540:	229f 0004 5800      	0x58000004229f
    1546:	0004                	0x4
    1548:	0100                	addi	s0,sp,128
    154a:	6300                	flw	fs0,0(a4)
	...
    1554:	035c                	addi	a5,sp,388
    1556:	0000                	unimp
    1558:	0410                	addi	a2,sp,512
    155a:	0000                	unimp
    155c:	0001                	nop
    155e:	1068                	addi	a0,sp,44
    1560:	0004                	0x4
    1562:	2200                	fld	fs0,0(a2)
    1564:	0004                	0x4
    1566:	0600                	addi	s0,sp,768
    1568:	f300                	fsw	fs0,32(a4)
    156a:	5b01                	li	s6,-32
    156c:	1c31                	addi	s8,s8,-20
    156e:	229f 0004 5800      	0x58000004229f
    1574:	0004                	0x4
    1576:	0100                	addi	s0,sp,128
    1578:	6800                	flw	fs0,16(s0)
	...
    1582:	035c                	addi	a5,sp,388
    1584:	0000                	unimp
    1586:	039a                	slli	t2,t2,0x6
    1588:	0000                	unimp
    158a:	0001                	nop
    158c:	9a65                	andi	a2,a2,-7
    158e:	a2000003          	lb	zero,-1504(zero) # fffffa20 <_stack_start+0xfffefa20>
    1592:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1596:	8400                	0x8400
    1598:	9f7f                	0x9f7f
    159a:	03a2                	slli	t2,t2,0x8
    159c:	0000                	unimp
    159e:	03c4                	addi	s1,sp,452
    15a0:	0000                	unimp
    15a2:	0001                	nop
    15a4:	c465                	beqz	s0,168c <result+0x130>
    15a6:	08000003          	lb	zero,128(zero) # 80 <__DYNAMIC+0x80>
    15aa:	0004                	0x4
    15ac:	0300                	addi	s0,sp,384
    15ae:	8400                	0x8400
    15b0:	9f7f                	0x9f7f
    15b2:	0408                	addi	a0,sp,512
    15b4:	0000                	unimp
    15b6:	0422                	slli	s0,s0,0x8
    15b8:	0000                	unimp
    15ba:	0006                	c.slli	zero,0x1
    15bc:	315d01f3          	0x315d01f3
    15c0:	9f1c                	0x9f1c
    15c2:	0422                	slli	s0,s0,0x8
    15c4:	0000                	unimp
    15c6:	0458                	addi	a4,sp,516
    15c8:	0000                	unimp
    15ca:	7f840003          	lb	zero,2040(s0)
    15ce:	009f 0000 0000      	0x9f
    15d4:	0000                	unimp
    15d6:	2800                	fld	fs0,16(s0)
    15d8:	0001                	nop
    15da:	a800                	fsd	fs0,16(s0)
    15dc:	0001                	nop
    15de:	0100                	addi	s0,sp,128
    15e0:	5a00                	lw	s0,48(a2)
    15e2:	01a8                	addi	a0,sp,200
    15e4:	0000                	unimp
    15e6:	01b9                	addi	gp,gp,14
    15e8:	0000                	unimp
    15ea:	0001                	nop
    15ec:	0001b95b          	0x1b95b
    15f0:	fa00                	fsw	fs0,48(a2)
    15f2:	0001                	nop
    15f4:	0400                	addi	s0,sp,512
    15f6:	f300                	fsw	fs0,32(a4)
    15f8:	5a01                	li	s4,-32
    15fa:	fa9f 0001 1c00      	0x1c000001fa9f
    1600:	0002                	c.slli64	zero
    1602:	0100                	addi	s0,sp,128
    1604:	5a00                	lw	s0,48(a2)
    1606:	021c                	addi	a5,sp,256
    1608:	0000                	unimp
    160a:	02fa                	slli	t0,t0,0x1e
    160c:	0000                	unimp
    160e:	0004                	0x4
    1610:	9f5a01f3          	0x9f5a01f3
	...
    161c:	0128                	addi	a0,sp,136
    161e:	0000                	unimp
    1620:	0196                	slli	gp,gp,0x5
    1622:	0000                	unimp
    1624:	0001                	nop
    1626:	0001965b          	0x1965b
    162a:	5600                	lw	s0,40(a2)
    162c:	0002                	c.slli64	zero
    162e:	0100                	addi	s0,sp,128
    1630:	6500                	flw	fs0,8(a0)
    1632:	0256                	slli	tp,tp,0x15
    1634:	0000                	unimp
    1636:	026e                	slli	tp,tp,0x1b
    1638:	0000                	unimp
    163a:	bc910007          	0xbc910007
    163e:	067f                	0x67f
    1640:	6e9f0123          	sb	s1,1762(t5)
    1644:	0002                	c.slli64	zero
    1646:	fa00                	fsw	fs0,48(a2)
    1648:	0002                	c.slli64	zero
    164a:	0100                	addi	s0,sp,128
    164c:	6500                	flw	fs0,8(a0)
	...
    1656:	0128                	addi	a0,sp,136
    1658:	0000                	unimp
    165a:	019e                	slli	gp,gp,0x7
    165c:	0000                	unimp
    165e:	0001                	nop
    1660:	9e5c                	0x9e5c
    1662:	0001                	nop
    1664:	b900                	fsd	fs0,48(a0)
    1666:	0001                	nop
    1668:	0100                	addi	s0,sp,128
    166a:	6000                	flw	fs0,0(s0)
    166c:	01b9                	addi	gp,gp,14
    166e:	0000                	unimp
    1670:	01fa                	slli	gp,gp,0x1e
    1672:	0000                	unimp
    1674:	b4780003          	lb	zero,-1209(a6)
    1678:	fa7f                	0xfa7f
    167a:	0001                	nop
    167c:	1c00                	addi	s0,sp,560
    167e:	0002                	c.slli64	zero
    1680:	0100                	addi	s0,sp,128
    1682:	6000                	flw	fs0,0(s0)
    1684:	021c                	addi	a5,sp,256
    1686:	0000                	unimp
    1688:	024c                	addi	a1,sp,260
    168a:	0000                	unimp
    168c:	b4780003          	lb	zero,-1209(a6)
    1690:	4c7f                	0x4c7f
    1692:	0002                	c.slli64	zero
    1694:	fa00                	fsw	fs0,48(a2)
    1696:	0002                	c.slli64	zero
    1698:	0300                	addi	s0,sp,384
    169a:	9100                	0x9100
    169c:	7fb4                	flw	fa3,120(a5)
	...
    16a6:	0128                	addi	a0,sp,136
    16a8:	0000                	unimp
    16aa:	0132                	slli	sp,sp,0xc
    16ac:	0000                	unimp
    16ae:	0001                	nop
    16b0:	325d                	jal	1056 <__DTOR_END__+0x12a>
    16b2:	0001                	nop
    16b4:	5000                	lw	s0,32(s0)
    16b6:	0002                	c.slli64	zero
    16b8:	0100                	addi	s0,sp,128
    16ba:	6200                	flw	fs0,0(a2)
    16bc:	0250                	addi	a2,sp,260
    16be:	0000                	unimp
    16c0:	026e                	slli	tp,tp,0x1b
    16c2:	0000                	unimp
    16c4:	0004                	0x4
    16c6:	9f5d01f3          	0x9f5d01f3
    16ca:	026e                	slli	tp,tp,0x1b
    16cc:	0000                	unimp
    16ce:	02fa                	slli	t0,t0,0x1e
    16d0:	0000                	unimp
    16d2:	0001                	nop
    16d4:	0062                	c.slli	zero,0x18
    16d6:	0000                	unimp
    16d8:	0000                	unimp
    16da:	0000                	unimp
    16dc:	2800                	fld	fs0,16(s0)
    16de:	0001                	nop
    16e0:	4e00                	lw	s0,24(a2)
    16e2:	0001                	nop
    16e4:	0100                	addi	s0,sp,128
    16e6:	5e00                	lw	s0,56(a2)
    16e8:	014e                	slli	sp,sp,0x13
    16ea:	0000                	unimp
    16ec:	0254                	addi	a3,sp,260
    16ee:	0000                	unimp
    16f0:	0001                	nop
    16f2:	5464                	lw	s1,108(s0)
    16f4:	0002                	c.slli64	zero
    16f6:	6e00                	flw	fs0,24(a2)
    16f8:	0002                	c.slli64	zero
    16fa:	0400                	addi	s0,sp,512
    16fc:	f300                	fsw	fs0,32(a4)
    16fe:	5e01                	li	t3,-32
    1700:	6e9f 0002 fa00      	0xfa0000026e9f
    1706:	0002                	c.slli64	zero
    1708:	0100                	addi	s0,sp,128
    170a:	6400                	flw	fs0,8(s0)
	...
    1714:	0128                	addi	a0,sp,136
    1716:	0000                	unimp
    1718:	01b9                	addi	gp,gp,14
    171a:	0000                	unimp
    171c:	0001                	nop
    171e:	b95f 0001 fa00      	0xfa000001b95f
    1724:	0001                	nop
    1726:	0300                	addi	s0,sp,384
    1728:	7800                	flw	fs0,48(s0)
    172a:	7fb0                	flw	fa2,120(a5)
    172c:	01fa                	slli	gp,gp,0x1e
    172e:	0000                	unimp
    1730:	021c                	addi	a5,sp,256
    1732:	0000                	unimp
    1734:	0001                	nop
    1736:	1c5f 0002 4800      	0x480000021c5f
    173c:	0002                	c.slli64	zero
    173e:	0300                	addi	s0,sp,384
    1740:	7800                	flw	fs0,48(s0)
    1742:	7fb0                	flw	fa2,120(a5)
    1744:	0248                	addi	a0,sp,260
    1746:	0000                	unimp
    1748:	026c                	addi	a1,sp,268
    174a:	0000                	unimp
    174c:	0002                	c.slli64	zero
    174e:	0072                	c.slli	zero,0x1c
    1750:	026c                	addi	a1,sp,268
    1752:	0000                	unimp
    1754:	026e                	slli	tp,tp,0x1b
    1756:	0000                	unimp
    1758:	b0720003          	lb	zero,-1273(tp) # fffffb07 <_stack_start+0xfffefb07>
    175c:	6e7f                	0x6e7f
    175e:	0002                	c.slli64	zero
    1760:	fa00                	fsw	fs0,48(a2)
    1762:	0002                	c.slli64	zero
    1764:	0300                	addi	s0,sp,384
    1766:	9100                	0x9100
    1768:	7fb0                	flw	fa2,120(a5)
	...
    1772:	018a                	slli	gp,gp,0x2
    1774:	0000                	unimp
    1776:	019e                	slli	gp,gp,0x7
    1778:	0000                	unimp
    177a:	0002                	c.slli64	zero
    177c:	019e0087          	0x19e0087
    1780:	0000                	unimp
    1782:	01b9                	addi	gp,gp,14
    1784:	0000                	unimp
    1786:	0002                	c.slli64	zero
    1788:	007e                	c.slli	zero,0x1f
    178a:	01b9                	addi	gp,gp,14
    178c:	0000                	unimp
    178e:	01fa                	slli	gp,gp,0x1e
    1790:	0000                	unimp
    1792:	0002                	c.slli64	zero
    1794:	01fa0087          	0x1fa0087
    1798:	0000                	unimp
    179a:	021c                	addi	a5,sp,256
    179c:	0000                	unimp
    179e:	0002                	c.slli64	zero
    17a0:	007e                	c.slli	zero,0x1f
    17a2:	021c                	addi	a5,sp,256
    17a4:	0000                	unimp
    17a6:	025a                	slli	tp,tp,0x16
    17a8:	0000                	unimp
    17aa:	0002                	c.slli64	zero
    17ac:	025a0087          	0x25a0087
    17b0:	0000                	unimp
    17b2:	026e                	slli	tp,tp,0x1b
    17b4:	0000                	unimp
    17b6:	0004                	0x4
    17b8:	b891                	j	100c <__DTOR_END__+0xe0>
    17ba:	067f                	0x67f
    17bc:	026e                	slli	tp,tp,0x1b
    17be:	0000                	unimp
    17c0:	02fa                	slli	t0,t0,0x1e
    17c2:	0000                	unimp
    17c4:	0002                	c.slli64	zero
    17c6:	00000087          	0x87
    17ca:	0000                	unimp
    17cc:	0000                	unimp
    17ce:	0000                	unimp
    17d0:	018c                	addi	a1,sp,192
    17d2:	0000                	unimp
    17d4:	019e                	slli	gp,gp,0x7
    17d6:	0000                	unimp
    17d8:	0002                	c.slli64	zero
    17da:	9f30                	0x9f30
    17dc:	019e                	slli	gp,gp,0x7
    17de:	0000                	unimp
    17e0:	01a4                	addi	s1,sp,200
    17e2:	0000                	unimp
    17e4:	0001                	nop
    17e6:	0001fa5b          	0x1fa5b
    17ea:	1c00                	addi	s0,sp,560
    17ec:	0002                	c.slli64	zero
    17ee:	0100                	addi	s0,sp,128
    17f0:	5b00                	lw	s0,48(a4)
    17f2:	0224                	addi	s1,sp,264
    17f4:	0000                	unimp
    17f6:	0230                	addi	a2,sp,264
    17f8:	0000                	unimp
    17fa:	0001                	nop
    17fc:	ba5d                	j	11b2 <_edata+0x106>
    17fe:	0002                	c.slli64	zero
    1800:	d800                	sw	s0,48(s0)
    1802:	0002                	c.slli64	zero
    1804:	0100                	addi	s0,sp,128
    1806:	5d00                	lw	s0,56(a0)
    1808:	02d8                	addi	a4,sp,324
    180a:	0000                	unimp
    180c:	02e0                	addi	s0,sp,332
    180e:	0000                	unimp
    1810:	0001                	nop
    1812:	e05c                	fsw	fa5,4(s0)
    1814:	0002                	c.slli64	zero
    1816:	ec00                	fsw	fs0,24(s0)
    1818:	0002                	c.slli64	zero
    181a:	0300                	addi	s0,sp,384
    181c:	7c00                	flw	fs0,56(s0)
    181e:	9f7f                	0x9f7f
    1820:	02ec                	addi	a1,sp,332
    1822:	0000                	unimp
    1824:	02f6                	slli	t0,t0,0x1d
    1826:	0000                	unimp
    1828:	0001                	nop
    182a:	005c                	addi	a5,sp,4
    182c:	0000                	unimp
    182e:	0000                	unimp
    1830:	0000                	unimp
    1832:	f200                	fsw	fs0,32(a2)
    1834:	0001                	nop
    1836:	fa00                	fsw	fs0,48(a2)
    1838:	0001                	nop
    183a:	0100                	addi	s0,sp,128
    183c:	6600                	flw	fs0,8(a2)
    183e:	01fa                	slli	gp,gp,0x1e
    1840:	0000                	unimp
    1842:	0216                	slli	tp,tp,0x5
    1844:	0000                	unimp
    1846:	0001                	nop
    1848:	1e5c                	addi	a5,sp,820
    184a:	0002                	c.slli64	zero
    184c:	2400                	fld	fs0,8(s0)
    184e:	0002                	c.slli64	zero
    1850:	0100                	addi	s0,sp,128
    1852:	6600                	flw	fs0,8(a2)
    1854:	0232                	slli	tp,tp,0xc
    1856:	0000                	unimp
    1858:	00000243          	fmadd.s	ft4,ft0,ft0,ft0,rne
    185c:	0001                	nop
    185e:	6e5e                	flw	ft8,212(sp)
    1860:	0002                	c.slli64	zero
    1862:	ba00                	fsd	fs0,48(a2)
    1864:	0002                	c.slli64	zero
    1866:	0100                	addi	s0,sp,128
    1868:	6600                	flw	fs0,8(a2)
    186a:	02ba                	slli	t0,t0,0xe
    186c:	0000                	unimp
    186e:	02be                	slli	t0,t0,0xf
    1870:	0000                	unimp
    1872:	0001                	nop
    1874:	be5c                	fsd	fa5,184(a2)
    1876:	0002                	c.slli64	zero
    1878:	c800                	sw	s0,16(s0)
    187a:	0002                	c.slli64	zero
    187c:	0300                	addi	s0,sp,384
    187e:	7c00                	flw	fs0,56(s0)
    1880:	9f7f                	0x9f7f
    1882:	02c8                	addi	a0,sp,324
    1884:	0000                	unimp
    1886:	02d2                	slli	t0,t0,0x14
    1888:	0000                	unimp
    188a:	0001                	nop
    188c:	d85c                	sw	a5,52(s0)
    188e:	0002                	c.slli64	zero
    1890:	fa00                	fsw	fs0,48(a2)
    1892:	0002                	c.slli64	zero
    1894:	0100                	addi	s0,sp,128
    1896:	5e00                	lw	s0,56(a2)
	...
    18a0:	026e                	slli	tp,tp,0x1b
    18a2:	0000                	unimp
    18a4:	0280                	addi	s0,sp,320
    18a6:	0000                	unimp
    18a8:	0001                	nop
    18aa:	805f 0002 8600      	0x86000002805f
    18b0:	0002                	c.slli64	zero
    18b2:	0300                	addi	s0,sp,384
    18b4:	7f00                	flw	fs0,56(a4)
    18b6:	9f01                	0x9f01
    18b8:	0286                	slli	t0,t0,0x1
    18ba:	0000                	unimp
    18bc:	0292                	slli	t0,t0,0x4
    18be:	0000                	unimp
    18c0:	0001                	nop
    18c2:	965f 0002 a800      	0xa8000002965f
    18c8:	0002                	c.slli64	zero
    18ca:	0100                	addi	s0,sp,128
    18cc:	5f00                	lw	s0,56(a4)
    18ce:	02a8                	addi	a0,sp,328
    18d0:	0000                	unimp
    18d2:	02ae                	slli	t0,t0,0xb
    18d4:	0000                	unimp
    18d6:	017f0003          	lb	zero,23(t5)
    18da:	ae9f 0002 ba00      	0xba000002ae9f
    18e0:	0002                	c.slli64	zero
    18e2:	0100                	addi	s0,sp,128
    18e4:	5f00                	lw	s0,56(a4)
	...
    18ee:	0244                	addi	s1,sp,260
    18f0:	0000                	unimp
    18f2:	026e                	slli	tp,tp,0x1b
    18f4:	0000                	unimp
    18f6:	0006                	c.slli	zero,0x1
    18f8:	0010ac03          	lw	s8,1(ra)
    18fc:	9f00                	0x9f00
	...
    1906:	018a                	slli	gp,gp,0x2
    1908:	0000                	unimp
    190a:	0262                	slli	tp,tp,0x18
    190c:	0000                	unimp
    190e:	0002                	c.slli64	zero
    1910:	0262008b          	0x262008b
    1914:	0000                	unimp
    1916:	026e                	slli	tp,tp,0x1b
    1918:	0000                	unimp
    191a:	0012                	c.slli	zero,0x4
    191c:	b891                	j	1170 <_edata+0xc4>
    191e:	067f                	0x67f
    1920:	bc91                	j	1374 <product2+0x70>
    1922:	067f                	0x67f
    1924:	24320123          	sb	gp,578(tp) # 242 <polymult+0x11a>
    1928:	f0090f23          	sb	zero,-226(s2)
    192c:	1c1a                	slli	s8,s8,0x26
    192e:	026e                	slli	tp,tp,0x1b
    1930:	0000                	unimp
    1932:	02fa                	slli	t0,t0,0x1e
    1934:	0000                	unimp
    1936:	0002                	c.slli64	zero
    1938:	0000008b          	0x8b
    193c:	0000                	unimp
    193e:	0000                	unimp
    1940:	0000                	unimp
    1942:	018c                	addi	a1,sp,192
    1944:	0000                	unimp
    1946:	0248                	addi	a0,sp,260
    1948:	0000                	unimp
    194a:	0002                	c.slli64	zero
    194c:	0072                	c.slli	zero,0x1c
    194e:	0248                	addi	a0,sp,260
    1950:	0000                	unimp
    1952:	0250                	addi	a2,sp,260
    1954:	0000                	unimp
    1956:	000c                	0xc
    1958:	0082008b          	0x82008b
    195c:	2432                	fld	fs0,264(sp)
    195e:	f0090f23          	sb	zero,-226(s2)
    1962:	1c1a                	slli	s8,s8,0x26
    1964:	0250                	addi	a2,sp,260
    1966:	0000                	unimp
    1968:	0262                	slli	tp,tp,0x18
    196a:	0000                	unimp
    196c:	000d                	c.nop	3
    196e:	01f3008b          	0x1f3008b
    1972:	325d                	jal	1318 <product2+0x14>
    1974:	2324                	fld	fs1,64(a4)
    1976:	1af0090f          	0x1af0090f
    197a:	621c                	flw	fa5,0(a2)
    197c:	0002                	c.slli64	zero
    197e:	6e00                	flw	fs0,24(a2)
    1980:	0002                	c.slli64	zero
    1982:	1d00                	addi	s0,sp,688
    1984:	9100                	0x9100
    1986:	7fb8                	flw	fa4,120(a5)
    1988:	9106                	add	sp,sp,ra
    198a:	7fbc                	flw	fa5,120(a5)
    198c:	2306                	fld	ft6,64(sp)
    198e:	3201                	jal	128e <_edata+0x1e2>
    1990:	2324                	fld	fs1,64(a4)
    1992:	1af0090f          	0x1af0090f
    1996:	f31c                	fsw	fa5,32(a4)
    1998:	5d01                	li	s10,-32
    199a:	2432                	fld	fs0,264(sp)
    199c:	f0090f23          	sb	zero,-226(s2)
    19a0:	1c1a                	slli	s8,s8,0x26
    19a2:	026e                	slli	tp,tp,0x1b
    19a4:	0000                	unimp
    19a6:	02fa                	slli	t0,t0,0x1e
    19a8:	0000                	unimp
    19aa:	0002                	c.slli64	zero
    19ac:	0072                	c.slli	zero,0x1c
	...
    19b6:	018a                	slli	gp,gp,0x2
    19b8:	0000                	unimp
    19ba:	01f2                	slli	gp,gp,0x1c
    19bc:	0000                	unimp
    19be:	0001                	nop
    19c0:	f266                	fsw	fs9,36(sp)
    19c2:	0001                	nop
    19c4:	fa00                	fsw	fs0,48(a2)
    19c6:	0001                	nop
    19c8:	0300                	addi	s0,sp,384
    19ca:	8200                	0x8200
    19cc:	9f7f                	0x9f7f
    19ce:	01fa                	slli	gp,gp,0x1e
    19d0:	0000                	unimp
    19d2:	021e                	slli	tp,tp,0x7
    19d4:	0000                	unimp
    19d6:	0001                	nop
    19d8:	1e66                	slli	t3,t3,0x39
    19da:	0002                	c.slli64	zero
    19dc:	5000                	lw	s0,32(s0)
    19de:	0002                	c.slli64	zero
    19e0:	0300                	addi	s0,sp,384
    19e2:	8200                	0x8200
    19e4:	9f7f                	0x9f7f
    19e6:	0250                	addi	a2,sp,260
    19e8:	0000                	unimp
    19ea:	026e                	slli	tp,tp,0x1b
    19ec:	0000                	unimp
    19ee:	0006                	c.slli	zero,0x1
    19f0:	315d01f3          	0x315d01f3
    19f4:	9f1c                	0x9f1c
    19f6:	026e                	slli	tp,tp,0x1b
    19f8:	0000                	unimp
    19fa:	02fa                	slli	t0,t0,0x1e
    19fc:	0000                	unimp
    19fe:	7f820003          	lb	zero,2040(tp) # 7f8 <generate_keys+0xc>
    1a02:	009f 0000 0000      	0x9f
    1a08:	0000                	unimp
    1a0a:	4200                	lw	s0,0(a2)
    1a0c:	0001                	nop
    1a0e:	5e00                	lw	s0,56(a2)
    1a10:	0002                	c.slli64	zero
    1a12:	0100                	addi	s0,sp,128
    1a14:	6900                	flw	fs0,16(a0)
    1a16:	025e                	slli	tp,tp,0x17
    1a18:	0000                	unimp
    1a1a:	026e                	slli	tp,tp,0x1b
    1a1c:	0000                	unimp
    1a1e:	0009                	c.nop	2
    1a20:	bc91                	j	1474 <product2+0x170>
    1a22:	067f                	0x67f
    1a24:	225d01f3          	0x225d01f3
    1a28:	6e9f 0002 fa00      	0xfa0000026e9f
    1a2e:	0002                	c.slli64	zero
    1a30:	0100                	addi	s0,sp,128
    1a32:	6900                	flw	fs0,16(a0)
	...
    1a3c:	018a                	slli	gp,gp,0x2
    1a3e:	0000                	unimp
    1a40:	01b9                	addi	gp,gp,14
    1a42:	0000                	unimp
    1a44:	0001                	nop
    1a46:	b95d                	j	16fc <result+0x1a0>
    1a48:	0001                	nop
    1a4a:	fa00                	fsw	fs0,48(a2)
    1a4c:	0001                	nop
    1a4e:	0300                	addi	s0,sp,384
    1a50:	7800                	flw	fs0,48(s0)
    1a52:	7fbc                	flw	fa5,120(a5)
    1a54:	01fa                	slli	gp,gp,0x1e
    1a56:	0000                	unimp
    1a58:	021c                	addi	a5,sp,256
    1a5a:	0000                	unimp
    1a5c:	0001                	nop
    1a5e:	1c5d                	addi	s8,s8,-9
    1a60:	0002                	c.slli64	zero
    1a62:	4c00                	lw	s0,24(s0)
    1a64:	0002                	c.slli64	zero
    1a66:	0300                	addi	s0,sp,384
    1a68:	7800                	flw	fs0,48(s0)
    1a6a:	7fbc                	flw	fa5,120(a5)
    1a6c:	024c                	addi	a1,sp,260
    1a6e:	0000                	unimp
    1a70:	02fa                	slli	t0,t0,0x1e
    1a72:	0000                	unimp
    1a74:	bc910003          	lb	zero,-1079(sp)
    1a78:	007f                	0x7f
    1a7a:	0000                	unimp
    1a7c:	0000                	unimp
    1a7e:	0000                	unimp
    1a80:	8a00                	0x8a00
    1a82:	0001                	nop
    1a84:	f200                	fsw	fs0,32(a2)
    1a86:	0001                	nop
    1a88:	0100                	addi	s0,sp,128
    1a8a:	6600                	flw	fs0,8(a2)
    1a8c:	01f2                	slli	gp,gp,0x1c
    1a8e:	0000                	unimp
    1a90:	01fa                	slli	gp,gp,0x1e
    1a92:	0000                	unimp
    1a94:	7f820003          	lb	zero,2040(tp) # 7f8 <generate_keys+0xc>
    1a98:	fa9f 0001 1e00      	0x1e000001fa9f
    1a9e:	0002                	c.slli64	zero
    1aa0:	0100                	addi	s0,sp,128
    1aa2:	6600                	flw	fs0,8(a2)
    1aa4:	021e                	slli	tp,tp,0x7
    1aa6:	0000                	unimp
    1aa8:	0250                	addi	a2,sp,260
    1aaa:	0000                	unimp
    1aac:	7f820003          	lb	zero,2040(tp) # 7f8 <generate_keys+0xc>
    1ab0:	509f 0002 6e00      	0x6e000002509f
    1ab6:	0002                	c.slli64	zero
    1ab8:	0600                	addi	s0,sp,768
    1aba:	f300                	fsw	fs0,32(a4)
    1abc:	5d01                	li	s10,-32
    1abe:	1c31                	addi	s8,s8,-20
    1ac0:	6e9f 0002 fa00      	0xfa0000026e9f
    1ac6:	0002                	c.slli64	zero
    1ac8:	0300                	addi	s0,sp,384
    1aca:	8200                	0x8200
    1acc:	9f7f                	0x9f7f
	...
    1ad6:	010a                	slli	sp,sp,0x2
    1ad8:	0000                	unimp
    1ada:	0110                	addi	a2,sp,128
    1adc:	0000                	unimp
    1ade:	0001                	nop
    1ae0:	105c                	addi	a5,sp,36
    1ae2:	0001                	nop
    1ae4:	2800                	fld	fs0,16(s0)
    1ae6:	0001                	nop
    1ae8:	0400                	addi	s0,sp,512
    1aea:	f300                	fsw	fs0,32(a4)
    1aec:	5c01                	li	s8,-32
    1aee:	009f 0000 0000      	0x9f
    1af4:	0000                	unimp
    1af6:	0a00                	addi	s0,sp,272
    1af8:	0001                	nop
    1afa:	1400                	addi	s0,sp,544
    1afc:	0001                	nop
    1afe:	0200                	addi	s0,sp,256
    1b00:	3000                	fld	fs0,32(s0)
    1b02:	149f 0001 2800      	0x28000001149f
    1b08:	0001                	nop
    1b0a:	0100                	addi	s0,sp,128
    1b0c:	5f00                	lw	s0,56(a4)
	...
    1b16:	011a                	slli	sp,sp,0x6
    1b18:	0000                	unimp
    1b1a:	0124                	addi	s1,sp,136
    1b1c:	0000                	unimp
    1b1e:	0001                	nop
    1b20:	0000005b          	0x5b
    1b24:	0000                	unimp
    1b26:	0000                	unimp
    1b28:	1a00                	addi	s0,sp,304
    1b2a:	0001                	nop
    1b2c:	2400                	fld	fs0,8(s0)
    1b2e:	0001                	nop
    1b30:	0800                	addi	s0,sp,16
    1b32:	7f00                	flw	fs0,56(a4)
    1b34:	3c00                	fld	fs0,56(s0)
    1b36:	7a1e                	flw	fs4,228(sp)
    1b38:	2200                	fld	fs0,0(a2)
    1b3a:	009f 0000 0000      	0x9f
    1b40:	0000                	unimp
    1b42:	e200                	fsw	fs0,0(a2)
    1b44:	0000                	unimp
    1b46:	e800                	fsw	fs0,16(s0)
    1b48:	0000                	unimp
    1b4a:	0100                	addi	s0,sp,128
    1b4c:	5c00                	lw	s0,56(s0)
    1b4e:	00e8                	addi	a0,sp,76
    1b50:	0000                	unimp
    1b52:	0104                	addi	s1,sp,128
    1b54:	0000                	unimp
    1b56:	0004                	0x4
    1b58:	9f5c01f3          	0x9f5c01f3
	...
    1b64:	00e2                	slli	ra,ra,0x18
    1b66:	0000                	unimp
    1b68:	00ec                	addi	a1,sp,76
    1b6a:	0000                	unimp
    1b6c:	0002                	c.slli64	zero
    1b6e:	9f30                	0x9f30
    1b70:	00ec                	addi	a1,sp,76
    1b72:	0000                	unimp
    1b74:	0104                	addi	s1,sp,128
    1b76:	0000                	unimp
    1b78:	0001                	nop
    1b7a:	005f 0000 0000      	0x5f
    1b80:	0000                	unimp
    1b82:	f600                	fsw	fs0,40(a2)
    1b84:	0000                	unimp
    1b86:	fc00                	fsw	fs0,56(s0)
    1b88:	0000                	unimp
    1b8a:	0600                	addi	s0,sp,768
    1b8c:	7b00                	flw	fs0,48(a4)
    1b8e:	7e00                	flw	fs0,56(a2)
    1b90:	2200                	fld	fs0,0(a2)
    1b92:	fc9f 0000 0000      	0xfc9f
    1b98:	0001                	nop
    1b9a:	0100                	addi	s0,sp,128
    1b9c:	5e00                	lw	s0,56(a2)
	...
    1ba6:	00f6                	slli	ra,ra,0x1d
    1ba8:	0000                	unimp
    1baa:	00fa                	slli	ra,ra,0x1e
    1bac:	0000                	unimp
    1bae:	0006                	c.slli	zero,0x1
    1bb0:	007a                	c.slli	zero,0x1e
    1bb2:	007e                	c.slli	zero,0x1f
    1bb4:	9f22                	add	t5,t5,s0
    1bb6:	00fa                	slli	ra,ra,0x1e
    1bb8:	0000                	unimp
    1bba:	0100                	addi	s0,sp,128
    1bbc:	0000                	unimp
    1bbe:	0001                	nop
    1bc0:	005d                	c.nop	23
    1bc2:	0000                	unimp
    1bc4:	0000                	unimp
    1bc6:	0000                	unimp
    1bc8:	ba00                	fsd	fs0,48(a2)
    1bca:	0000                	unimp
    1bcc:	c000                	sw	s0,0(s0)
    1bce:	0000                	unimp
    1bd0:	0100                	addi	s0,sp,128
    1bd2:	5c00                	lw	s0,56(s0)
    1bd4:	00c0                	addi	s0,sp,68
    1bd6:	0000                	unimp
    1bd8:	00dc                	addi	a5,sp,68
    1bda:	0000                	unimp
    1bdc:	0004                	0x4
    1bde:	9f5c01f3          	0x9f5c01f3
	...
    1bea:	00ba                	slli	ra,ra,0xe
    1bec:	0000                	unimp
    1bee:	00c4                	addi	s1,sp,68
    1bf0:	0000                	unimp
    1bf2:	0002                	c.slli64	zero
    1bf4:	9f30                	0x9f30
    1bf6:	00c4                	addi	s1,sp,68
    1bf8:	0000                	unimp
    1bfa:	00dc                	addi	a5,sp,68
    1bfc:	0000                	unimp
    1bfe:	0001                	nop
    1c00:	005f 0000 0000      	0x5f
    1c06:	0000                	unimp
    1c08:	ce00                	sw	s0,24(a2)
    1c0a:	0000                	unimp
    1c0c:	d400                	sw	s0,40(s0)
    1c0e:	0000                	unimp
    1c10:	0600                	addi	s0,sp,768
    1c12:	7b00                	flw	fs0,48(a4)
    1c14:	7e00                	flw	fs0,56(a2)
    1c16:	2200                	fld	fs0,0(a2)
    1c18:	d49f 0000 d800      	0xd8000000d49f
    1c1e:	0000                	unimp
    1c20:	0100                	addi	s0,sp,128
    1c22:	5e00                	lw	s0,56(a2)
	...
    1c2c:	00ce                	slli	ra,ra,0x13
    1c2e:	0000                	unimp
    1c30:	00d2                	slli	ra,ra,0x14
    1c32:	0000                	unimp
    1c34:	0006                	c.slli	zero,0x1
    1c36:	007a                	c.slli	zero,0x1e
    1c38:	007e                	c.slli	zero,0x1f
    1c3a:	9f22                	add	t5,t5,s0
    1c3c:	00d2                	slli	ra,ra,0x14
    1c3e:	0000                	unimp
    1c40:	00d8                	addi	a4,sp,68
    1c42:	0000                	unimp
    1c44:	0001                	nop
    1c46:	005d                	c.nop	23
    1c48:	0000                	unimp
    1c4a:	0000                	unimp
    1c4c:	0000                	unimp
    1c4e:	9200                	0x9200
    1c50:	0000                	unimp
    1c52:	9800                	0x9800
    1c54:	0000                	unimp
    1c56:	0100                	addi	s0,sp,128
    1c58:	5c00                	lw	s0,56(s0)
    1c5a:	0098                	addi	a4,sp,64
    1c5c:	0000                	unimp
    1c5e:	00b4                	addi	a3,sp,72
    1c60:	0000                	unimp
    1c62:	0004                	0x4
    1c64:	9f5c01f3          	0x9f5c01f3
	...
    1c70:	0092                	slli	ra,ra,0x4
    1c72:	0000                	unimp
    1c74:	009c                	addi	a5,sp,64
    1c76:	0000                	unimp
    1c78:	0002                	c.slli64	zero
    1c7a:	9f30                	0x9f30
    1c7c:	009c                	addi	a5,sp,64
    1c7e:	0000                	unimp
    1c80:	00b4                	addi	a3,sp,72
    1c82:	0000                	unimp
    1c84:	0001                	nop
    1c86:	005f 0000 0000      	0x5f
    1c8c:	0000                	unimp
    1c8e:	a600                	fsd	fs0,8(a2)
    1c90:	0000                	unimp
    1c92:	ac00                	fsd	fs0,24(s0)
    1c94:	0000                	unimp
    1c96:	0600                	addi	s0,sp,768
    1c98:	7b00                	flw	fs0,48(a4)
    1c9a:	7e00                	flw	fs0,56(a2)
    1c9c:	2200                	fld	fs0,0(a2)
    1c9e:	ac9f 0000 b000      	0xb0000000ac9f
    1ca4:	0000                	unimp
    1ca6:	0100                	addi	s0,sp,128
    1ca8:	5e00                	lw	s0,56(a2)
	...
    1cb2:	00a6                	slli	ra,ra,0x9
    1cb4:	0000                	unimp
    1cb6:	00aa                	slli	ra,ra,0xa
    1cb8:	0000                	unimp
    1cba:	0006                	c.slli	zero,0x1
    1cbc:	007a                	c.slli	zero,0x1e
    1cbe:	007e                	c.slli	zero,0x1f
    1cc0:	9f22                	add	t5,t5,s0
    1cc2:	00aa                	slli	ra,ra,0xa
    1cc4:	0000                	unimp
    1cc6:	00b0                	addi	a2,sp,72
    1cc8:	0000                	unimp
    1cca:	0001                	nop
    1ccc:	005d                	c.nop	23
    1cce:	0000                	unimp
    1cd0:	0000                	unimp
    1cd2:	0000                	unimp
    1cd4:	8c00                	0x8c00
    1cd6:	0000                	unimp
    1cd8:	9000                	0x9000
    1cda:	0000                	unimp
    1cdc:	0100                	addi	s0,sp,128
    1cde:	5a00                	lw	s0,48(a2)
	...
    1ce8:	00b4                	addi	a3,sp,72
    1cea:	0000                	unimp
    1cec:	00b8                	addi	a4,sp,72
    1cee:	0000                	unimp
    1cf0:	0001                	nop
    1cf2:	005a                	c.slli	zero,0x16
    1cf4:	0000                	unimp
    1cf6:	0000                	unimp
    1cf8:	0000                	unimp
    1cfa:	dc00                	sw	s0,56(s0)
    1cfc:	0000                	unimp
    1cfe:	e000                	fsw	fs0,0(s0)
    1d00:	0000                	unimp
    1d02:	0100                	addi	s0,sp,128
    1d04:	5a00                	lw	s0,48(a2)
	...
    1d0e:	0104                	addi	s1,sp,128
    1d10:	0000                	unimp
    1d12:	0108                	addi	a0,sp,128
    1d14:	0000                	unimp
    1d16:	0001                	nop
    1d18:	005a                	c.slli	zero,0x16
    1d1a:	0000                	unimp
    1d1c:	0000                	unimp
    1d1e:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0b9c                	addi	a5,sp,464
  16:	0000                	unimp
  18:	0e24                	addi	s1,sp,792
  1a:	0000                	unimp
  1c:	00f8                	addi	a4,sp,76
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1f15                	addi	t5,t5,-27
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0c28                	addi	a0,sp,536
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	0110                	addi	a2,sp,128
   2:	0000                	unimp
   4:	0112                	slli	sp,sp,0x4
   6:	0000                	unimp
   8:	011a                	slli	sp,sp,0x6
   a:	0000                	unimp
   c:	0124                	addi	s1,sp,136
	...
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0c28                	addi	a0,sp,536
  1e:	0000                	unimp
  20:	0e24                	addi	s1,sp,792
  22:	0000                	unimp
  24:	0f1c                	addi	a5,sp,912
	...
  2e:	0000                	unimp
  30:	ffff                	0xffff
  32:	ffff                	0xffff
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0c28                	addi	a0,sp,536
  3a:	0000                	unimp
  3c:	0c9e                	slli	s9,s9,0x7
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00001ecf          	fnmadd.s	ft9,ft0,ft0,ft0,rtz
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x12e>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult2+0x66>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <ext_euclid+0xa6>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0x188>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult2+0x90>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
  jal x0, default_exc_handler
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
  jal x0, reset_handler
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      86:	6972                	flw	fs2,28(sp)
  jal x0, default_exc_handler
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    for(i=0;i<(length/3);i++) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0xf8>
}
      a0:	0065                	c.nop	25
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
    asm volatile(
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
    for(i=0;i<(length/3);i++) {
      b0:	00000063          	beqz	zero,b0 <array_add+0x1e>
    asm volatile(
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
}
      b8:	6564                	flw	fs1,76(a0)
    for(i=0;i<(length/3);i++) {
      ba:	2e66                	fld	ft8,88(sp)
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
      c0:	5f00                	lw	s0,56(a4)
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
    asm volatile(
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0x174>
    asm volatile(
      de:	0200                	addi	s0,sp,256
}
      e0:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      e2:	6c647473          	csrrci	s0,0x6c6,8
      e6:	6269                	lui	tp,0x1a
      e8:	682e                	flw	fa6,200(sp)
      ea:	0300                	addi	s0,sp,384
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
}
      f0:	6975                	lui	s2,0x1d
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
    asm volatile(
      f6:	3e6e                	fld	ft8,248(sp)
      f8:	0000                	unimp
      fa:	0000                	unimp
      fc:	0500                	addi	s0,sp,640
      fe:	02050033          	mul	zero,a0,zero
    for(i=0;i<(length/3);i++) {
     102:	008c                	addi	a1,sp,64
    asm volatile(
     104:	0000                	unimp
     106:	05010e03          	lb	t3,80(sp)
    for(i=0;i<(length/3);i++) {
     10a:	0305                	addi	t1,t1,1
     10c:	00000907          	0x907
    asm volatile(
     110:	0301                	addi	t1,t1,0
    for(i=0;i<(length/3);i++) {
     112:	0909                	addi	s2,s2,2
     114:	0004                	0x4
     116:	0501                	addi	a0,a0,0
}
     118:	0601                	addi	a2,a2,0
    asm volatile(
     11a:	00090303          	lb	t1,0(s2) # b000 <_stack_len+0x7000>
     11e:	0100                	addi	s0,sp,128
     120:	2e05                	jal	450 <polymult2+0x156>
     122:	0306                	slli	t1,t1,0x1
    for(i=0;i<(length/3);i++) {
     124:	0901                	addi	s2,s2,0
     126:	0002                	c.slli64	zero
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	0501                	addi	a0,a0,0
     12a:	0301                	addi	t1,t1,0
     12c:	0901                	addi	s2,s2,0
     12e:	0000                	unimp
    int line[size_b][size_a + size_b];
     130:	0501                	addi	a0,a0,0
     132:	0305                	addi	t1,t1,1
     134:	0901                	addi	s2,s2,0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     136:	0000                	unimp
     138:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     13a:	0616                	slli	a2,a2,0x5
     13c:	00090003          	lb	zero,0(s2)
     140:	0100                	addi	s0,sp,128
     142:	0a05                	addi	s4,s4,1
     144:	08090003          	lb	zero,128(s2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     148:	0100                	addi	s0,sp,128
    int pola[size_a];
     14a:	0d05                	addi	s10,s10,1
     14c:	0200                	addi	s0,sp,256
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     14e:	0104                	addi	s1,sp,128
     150:	0306                	slli	t1,t1,0x1
     152:	0900                	addi	s0,sp,144
     154:	0002                	c.slli64	zero
     156:	0501                	addi	a0,a0,0
     158:	0005                	c.nop	1
    int line[size_b][size_a + size_b];
     15a:	0402                	c.slli64	s0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     15c:	0601                	addi	a2,a2,0
     15e:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     162:	0100                	addi	s0,sp,128
    int pola[size_a];
     164:	0105                	addi	sp,sp,1
     166:	04090303          	lb	t1,64(s2)
    int line[size_b][size_a + size_b];
     16a:	0100                	addi	s0,sp,128
     16c:	0905                	addi	s2,s2,1
    int pola[size_a];
     16e:	0200                	addi	s0,sp,256
     170:	0304                	addi	s1,sp,384
    int polb[size_b];
     172:	0306                	slli	t1,t1,0x1
     174:	097e                	slli	s2,s2,0x1f
     176:	0002                	c.slli64	zero
    int pola[size_a];
     178:	0501                	addi	a0,a0,0
    int polb[size_b];
     17a:	0005                	c.nop	1
     17c:	0402                	c.slli64	s0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     17e:	09700303          	lb	t1,151(zero) # 97 <array_add+0x5>
    int pola[size_a];
     182:	0004                	0x4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     184:	0001                	nop
    int line[size_b][size_a + size_b];
     186:	0402                	c.slli64	s0
     188:	09090303          	lb	t1,144(s2)
            line[i][j] = 0;
     18c:	000a                	c.slli	zero,0x2
     18e:	0501                	addi	a0,a0,0
     190:	001a                	c.slli	zero,0x6
    for (i = 0; i < size_b; ++i){
     192:	0402                	c.slli64	s0
     194:	09060303          	lb	t1,144(a2) # 16090 <_stack_start+0x6090>
            product[j] = 0;
     198:	0000                	unimp
     19a:	0501                	addi	a0,a0,0
     19c:	0402001b          	0x402001b
    for (i = 0; i < size_b; ++i){
     1a0:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
    array_equ(pola,a,size_a);
     1a4:	0009                	c.nop	2
     1a6:	0100                	addi	s0,sp,128
     1a8:	3405                	jal	fffffbc8 <_stack_start+0xfffefbc8>
     1aa:	0306                	slli	t1,t1,0x1
     1ac:	0905                	addi	s2,s2,1
     1ae:	0004                	0x4
     1b0:	0501                	addi	a0,a0,0
     1b2:	0305                	addi	t1,t1,1
     1b4:	0906                	slli	s2,s2,0x1
     1b6:	0000                	unimp
     1b8:	0301                	addi	t1,t1,0
    array_mod(pola,mod,size_a);
     1ba:	0909                	addi	s2,s2,2
     1bc:	0004                	0x4
     1be:	0501                	addi	a0,a0,0
     1c0:	0601                	addi	a2,a2,0
    array_equ(polb,b,size_b);
     1c2:	00090103          	lb	sp,0(s2)
     1c6:	0100                	addi	s0,sp,128
     1c8:	2d05                	jal	7f8 <generate_keys+0xc>
     1ca:	0306                	slli	t1,t1,0x1
     1cc:	0901                	addi	s2,s2,0
    array_mod(polb,mod,size_b);
     1ce:	0002                	c.slli64	zero
     1d0:	0501                	addi	a0,a0,0
     1d2:	0301                	addi	t1,t1,0
     1d4:	0901                	addi	s2,s2,0
    if(star_mult == 1){
     1d6:	0000                	unimp
     1d8:	0501                	addi	a0,a0,0
     1da:	0305                	addi	t1,t1,1
     1dc:	0901                	addi	s2,s2,0
     1de:	0000                	unimp
     1e0:	0501                	addi	a0,a0,0
     1e2:	0616                	slli	a2,a2,0x5
     1e4:	00090003          	lb	zero,0(s2)
     1e8:	0100                	addi	s0,sp,128
     1ea:	0a05                	addi	s4,s4,1
     1ec:	08090003          	lb	zero,128(s2)
     1f0:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     1f2:	0d05                	addi	s10,s10,1
     1f4:	0200                	addi	s0,sp,256
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f6:	0104                	addi	s1,sp,128
     1f8:	0306                	slli	t1,t1,0x1
            product[j] = 0;
     1fa:	0900                	addi	s0,sp,144
     1fc:	0002                	c.slli64	zero
     1fe:	0501                	addi	a0,a0,0
            line[i][j] = 0;
     200:	0005                	c.nop	1
     202:	0402                	c.slli64	s0
            product[j] = 0;
     204:	0601                	addi	a2,a2,0
     206:	00090003          	lb	zero,0(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     20a:	0100                	addi	s0,sp,128
     20c:	0105                	addi	sp,sp,1
     20e:	04090303          	lb	t1,64(s2)
    for (i = 0; i < size_b; ++i){
     212:	0100                	addi	s0,sp,128
     214:	0905                	addi	s2,s2,1
     216:	0200                	addi	s0,sp,256
        for(j = 0; j < size_a + size_b -1; ++j){
     218:	0304                	addi	s1,sp,384
     21a:	0306                	slli	t1,t1,0x1
    if(star_mult == 1){
     21c:	097e                	slli	s2,s2,0x1f
        for (j = size_b -1; j >= 0; j = j-1){
     21e:	0002                	c.slli64	zero
     220:	0501                	addi	a0,a0,0
        for(j = 0; j < size_a + size_b -1; ++j){
     222:	0005                	c.nop	1
    for (i = 0; i < size_b; ++i){
     224:	0402                	c.slli64	s0
     226:	09720303          	lb	t1,151(tp) # 1a097 <_stack_start+0xa097>
     22a:	0004                	0x4
     22c:	0001                	nop
     22e:	0402                	c.slli64	s0
    for(j = 0; j < size_a + size_b -1; ++j){
     230:	09090303          	lb	t1,144(s2)
     234:	000a                	c.slli	zero,0x2
    array_mod(product,mod,(size_a+size_b-1));
     236:	0501                	addi	a0,a0,0
     238:	001a                	c.slli	zero,0x6
     23a:	0402                	c.slli64	s0
     23c:	09040303          	lb	t1,144(s0)
     240:	0000                	unimp
     242:	0501                	addi	a0,a0,0
}
     244:	0402001b          	0x402001b
     248:	00030603          	lb	a2,0(t1)
     24c:	0009                	c.nop	2
     24e:	0100                	addi	s0,sp,128
     250:	3305                	jal	ffffff70 <_stack_start+0xfffeff70>
     252:	0306                	slli	t1,t1,0x1
     254:	0905                	addi	s2,s2,1
     256:	0004                	0x4
     258:	0501                	addi	a0,a0,0
     25a:	0305                	addi	t1,t1,1
     25c:	0906                	slli	s2,s2,0x1
     25e:	0000                	unimp
     260:	0301                	addi	t1,t1,0
     262:	0909                	addi	s2,s2,2
     264:	0004                	0x4
     266:	0501                	addi	a0,a0,0
     268:	0601                	addi	a2,a2,0
     26a:	00090203          	lb	tp,0(s2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     26e:	0100                	addi	s0,sp,128
     270:	2c05                	jal	4a0 <polydiv+0x48>
     272:	0306                	slli	t1,t1,0x1
     274:	0901                	addi	s2,s2,0
     276:	0002                	c.slli64	zero
     278:	0501                	addi	a0,a0,0
     27a:	0301                	addi	t1,t1,0
     27c:	0901                	addi	s2,s2,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     27e:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     280:	0501                	addi	a0,a0,0
     282:	0305                	addi	t1,t1,1
     284:	0901                	addi	s2,s2,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     286:	0000                	unimp
     288:	0501                	addi	a0,a0,0
        for (j = size_b -1; j >= 0; j = j-1){
     28a:	0616                	slli	a2,a2,0x5
     28c:	00090003          	lb	zero,0(s2)
     290:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     292:	0a05                	addi	s4,s4,1
     294:	08090003          	lb	zero,128(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     298:	0100                	addi	s0,sp,128
     29a:	0d05                	addi	s10,s10,1
     29c:	0200                	addi	s0,sp,256
     29e:	0104                	addi	s1,sp,128
     2a0:	0306                	slli	t1,t1,0x1
     2a2:	0900                	addi	s0,sp,144
     2a4:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     2a6:	0501                	addi	a0,a0,0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2a8:	0005                	c.nop	1
     2aa:	0402                	c.slli64	s0
     2ac:	0601                	addi	a2,a2,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ae:	00090003          	lb	zero,0(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     2b2:	0100                	addi	s0,sp,128
     2b4:	0105                	addi	sp,sp,1
     2b6:	04090303          	lb	t1,64(s2)
            line[i][j] = line[i][j] % mod;
     2ba:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     2bc:	0905                	addi	s2,s2,1
     2be:	0200                	addi	s0,sp,256
            line[i][j] = line[i][j] % mod;
     2c0:	0304                	addi	s1,sp,384
     2c2:	0306                	slli	t1,t1,0x1
     2c4:	097e                	slli	s2,s2,0x1f
     2c6:	0002                	c.slli64	zero
        for(j = 0; j < size_a + size_b -1; ++j){
     2c8:	0501                	addi	a0,a0,0
     2ca:	0005                	c.nop	1
    for (i = 0; i < size_b; ++i){
     2cc:	0402                	c.slli64	s0
     2ce:	09710303          	lb	t1,151(sp)
     2d2:	0004                	0x4
        for(j = 0; j < size_a + size_b -1; ++j){
     2d4:	0001                	nop
     2d6:	0402                	c.slli64	s0
            product[j] += line[i][j];
     2d8:	09090303          	lb	t1,144(s2)
     2dc:	000a                	c.slli	zero,0x2
        for(i = 0; i < size_b; ++i){
     2de:	0501                	addi	a0,a0,0
            product[j] += line[i][j];
     2e0:	001a                	c.slli	zero,0x6
     2e2:	0402                	c.slli64	s0
     2e4:	09050303          	lb	t1,144(a0) # 19090 <_stack_start+0x9090>
     2e8:	0000                	unimp
     2ea:	0501                	addi	a0,a0,0
        for(i = 0; i < size_b; ++i){
     2ec:	0402001b          	0x402001b
    for(j = 0; j < size_a + size_b -1; ++j){
     2f0:	00030603          	lb	a2,0(t1)
     2f4:	0009                	c.nop	2
        for(i = 0; i < size_b; ++i){
     2f6:	0100                	addi	s0,sp,128
     2f8:	3405                	jal	fffffd18 <_stack_start+0xfffefd18>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2fa:	0306                	slli	t1,t1,0x1
    int line[size_b][size_a + size_b];
     2fc:	0905                	addi	s2,s2,1
     2fe:	0004                	0x4
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     300:	0501                	addi	a0,a0,0
     302:	0305                	addi	t1,t1,1
     304:	0902                	c.slli64	s2
     306:	0000                	unimp
     308:	0301                	addi	t1,t1,0
    int line[size_b][size_a + size_b];
     30a:	0909                	addi	s2,s2,2
     30c:	0004                	0x4
     30e:	0501                	addi	a0,a0,0
     310:	0601                	addi	a2,a2,0
     312:	00090103          	lb	sp,0(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     316:	0100                	addi	s0,sp,128
     318:	2c05                	jal	548 <polydiv+0xf0>
     31a:	0306                	slli	t1,t1,0x1
     31c:	0901                	addi	s2,s2,0
     31e:	0002                	c.slli64	zero
     320:	0501                	addi	a0,a0,0
     322:	0301                	addi	t1,t1,0
     324:	0905                	addi	s2,s2,1
     326:	0000                	unimp
    int line[size_b][size_a + size_b];
     328:	0501                	addi	a0,a0,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     32a:	0305                	addi	t1,t1,1
     32c:	0902                	c.slli64	s2
    int line[size_b][size_a + size_b];
     32e:	0000                	unimp
     330:	0501                	addi	a0,a0,0
     332:	0616                	slli	a2,a2,0x5
    int pola[size_a];
     334:	00090003          	lb	zero,0(s2)
     338:	0100                	addi	s0,sp,128
     33a:	0505                	addi	a0,a0,1
    int line[size_b][size_a + size_b];
     33c:	06096e03          	0x6096e03
    int pola[size_a];
     340:	0100                	addi	s0,sp,128
    int polb[size_b];
     342:	0a05                	addi	s4,s4,1
     344:	02091203          	lh	tp,32(s2)
    int pola[size_a];
     348:	0100                	addi	s0,sp,128
    int polb[size_b];
     34a:	0d05                	addi	s10,s10,1
     34c:	0200                	addi	s0,sp,256
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     34e:	0104                	addi	s1,sp,128
     350:	0306                	slli	t1,t1,0x1
    int line[size_b][size_a + size_b];
     352:	0900                	addi	s0,sp,144
     354:	0002                	c.slli64	zero
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     356:	0501                	addi	a0,a0,0
    int pola[size_a];
     358:	0005                	c.nop	1
     35a:	0402                	c.slli64	s0
    int polb[size_b];
     35c:	0601                	addi	a2,a2,0
    for (i = 0; i < size_b; ++i){
     35e:	00090003          	lb	zero,0(s2)
     362:	0100                	addi	s0,sp,128
            product2[j] = 0;
     364:	0105                	addi	sp,sp,1
     366:	04090403          	lb	s0,64(s2)
     36a:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     36c:	0905                	addi	s2,s2,1
     36e:	0200                	addi	s0,sp,256
    array_equ(pola,a,size_a);
     370:	0304                	addi	s1,sp,384
     372:	0306                	slli	t1,t1,0x1
     374:	097d                	addi	s2,s2,31
     376:	0002                	c.slli64	zero
     378:	0501                	addi	a0,a0,0
     37a:	0005                	c.nop	1
    array_equ(polb,b,size_b);
     37c:	0402                	c.slli64	s0
     37e:	096d0303          	lb	t1,150(s10)
     382:	0000                	unimp
     384:	0001                	nop
     386:	0402                	c.slli64	s0
    if(star_mult == 1){
     388:	09090303          	lb	t1,144(s2)
     38c:	000a                	c.slli	zero,0x2
     38e:	0501                	addi	a0,a0,0
     390:	001a                	c.slli	zero,0x6
     392:	0402                	c.slli64	s0
     394:	09090303          	lb	t1,144(s2)
     398:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     39a:	0501                	addi	a0,a0,0
     39c:	0402001b          	0x402001b
            for (k = size_a-1; k >= 0; k = k-1 ){
     3a0:	00030603          	lb	a2,0(t1)
            product2[j] = 0;
     3a4:	0009                	c.nop	2
     3a6:	0100                	addi	s0,sp,128
            line[i][j] = 0;
     3a8:	4e05                	li	t3,1
     3aa:	0306                	slli	t1,t1,0x1
            product2[j] = 0;
     3ac:	090a                	slli	s2,s2,0x2
     3ae:	0004                	0x4
        for(j = 0; j < size_a + size_b -1; ++j){
     3b0:	0501                	addi	a0,a0,0
     3b2:	0305                	addi	t1,t1,1
     3b4:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    for (i = 0; i < size_b; ++i){
     3b8:	0501                	addi	a0,a0,0
     3ba:	064e                	slli	a2,a2,0x13
     3bc:	00097d03          	0x97d03
        for(j = 0; j < size_a + size_b -1; ++j){
     3c0:	0100                	addi	s0,sp,128
     3c2:	1d05                	addi	s10,s10,-31
                line[size_b-1-j][k] = pola[k]*polb[j];
     3c4:	08090303          	lb	t1,128(s2)
     3c8:	0100                	addi	s0,sp,128
     3ca:	4e05                	li	t3,1
     3cc:	06097d03          	0x6097d03
     3d0:	0100                	addi	s0,sp,128
     3d2:	0905                	addi	s2,s2,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d4:	04090303          	lb	t1,64(s2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     3d8:	0100                	addi	s0,sp,128
     3da:	4e05                	li	t3,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     3dc:	0c097d03          	0xc097d03
        for (j = size_b -1; j >= 0; j = j-1){
     3e0:	0100                	addi	s0,sp,128
     3e2:	0905                	addi	s2,s2,1
     3e4:	04090603          	lb	a2,64(s2)
     3e8:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ea:	4e05                	li	t3,1
        array_add(product2,line[i],size_a+size_b-1);
     3ec:	04097a03          	0x4097a03
     3f0:	0100                	addi	s0,sp,128
     3f2:	0905                	addi	s2,s2,1
    for(i=0;i<size_b;++i){
     3f4:	0c090303          	lb	t1,192(s2)
}
     3f8:	0100                	addi	s0,sp,128
     3fa:	4e05                	li	t3,1
     3fc:	02097d03          	0x2097d03
     400:	0100                	addi	s0,sp,128
     402:	0905                	addi	s2,s2,1
     404:	06090303          	lb	t1,96(s2)
     408:	0100                	addi	s0,sp,128
     40a:	02090303          	lb	t1,32(s2)
     40e:	0100                	addi	s0,sp,128
     410:	4e05                	li	t3,1
     412:	04097a03          	0x4097a03
     416:	0100                	addi	s0,sp,128
     418:	0905                	addi	s2,s2,1
     41a:	00090303          	lb	t1,0(s2)
     41e:	0100                	addi	s0,sp,128
     420:	06090303          	lb	t1,96(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     424:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     426:	04090103          	lb	sp,64(s2)
     42a:	0100                	addi	s0,sp,128
     42c:	06097f03          	0x6097f03
     430:	0100                	addi	s0,sp,128
     432:	02090103          	lb	sp,32(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     436:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     438:	4e05                	li	t3,1
     43a:	04097903          	0x4097903
            for (k = size_a-1; k >= 0; k = k-1 ){
     43e:	0100                	addi	s0,sp,128
     440:	0905                	addi	s2,s2,1
        for (j = size_b -1; j >= 0; j = j-1){
     442:	02090603          	lb	a2,32(s2)
     446:	0100                	addi	s0,sp,128
     448:	4e05                	li	t3,1
        array_add(product2,line[i],size_a+size_b-1);
     44a:	04097a03          	0x4097a03
     44e:	0100                	addi	s0,sp,128
     450:	0905                	addi	s2,s2,1
    for(i=0;i<size_b;++i){
     452:	02090303          	lb	t1,32(s2)
     456:	0100                	addi	s0,sp,128
    int v[size_N];
     458:	0505                	addi	a0,a0,1
     45a:	0306                	slli	t1,t1,0x1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     45c:	0901                	addi	s2,s2,0
    int v[size_N];
     45e:	0004                	0x4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     460:	0301                	addi	t1,t1,0
     462:	0901                	addi	s2,s2,0
     464:	0000                	unimp
     466:	0301                	addi	t1,t1,0
     468:	0901                	addi	s2,s2,0
     46a:	0000                	unimp
     46c:	0301                	addi	t1,t1,0
     46e:	0901                	addi	s2,s2,0
     470:	0000                	unimp
     472:	0501                	addi	a0,a0,0
     474:	0609                	addi	a2,a2,2
     476:	00090003          	lb	zero,0(s2)
    int v[size_N];
     47a:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     47c:	0505                	addi	a0,a0,1
    int v[size_N];
     47e:	0306                	slli	t1,t1,0x1
     480:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    int q[size_N];
     484:	0501                	addi	a0,a0,0
     486:	0614                	addi	a3,sp,768
     488:	00090203          	lb	tp,0(s2)
    int num_temp[size_N];
     48c:	0100                	addi	s0,sp,128
    int denum_temp[size_D];
     48e:	0505                	addi	a0,a0,1
     490:	06097e03          	0x6097e03
     494:	0100                	addi	s0,sp,128
    int num_temp[size_N];
     496:	0c05                	addi	s8,s8,1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     498:	02090003          	lb	zero,32(s2)
    int denum_temp[size_D];
     49c:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     49e:	1805                	addi	a6,a6,-31
    int v[size_N];
     4a0:	02090303          	lb	t1,32(s2)
    array_equ(num_temp,num,size_N);
     4a4:	0100                	addi	s0,sp,128
     4a6:	1105                	addi	sp,sp,-31
     4a8:	0200                	addi	s0,sp,256
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4aa:	0104                	addi	s1,sp,128
     4ac:	0306                	slli	t1,t1,0x1
    int denum_temp[size_D];
     4ae:	097d                	addi	s2,s2,31
     4b0:	0008                	0x8
    array_equ(num_temp,num,size_N);
     4b2:	0501                	addi	a0,a0,0
    array_mod(num_temp,mod,size_N);
     4b4:	0005                	c.nop	1
     4b6:	0402                	c.slli64	s0
     4b8:	0601                	addi	a2,a2,0
     4ba:	00090003          	lb	zero,0(s2)
    array_equ(denum_temp,denum,size_D);
     4be:	0100                	addi	s0,sp,128
     4c0:	04090f03          	lb	t5,64(s2)
     4c4:	0100                	addi	s0,sp,128
    array_mod(denum_temp,mod,size_D);
     4c6:	0306                	slli	t1,t1,0x1
     4c8:	0900                	addi	s0,sp,144
     4ca:	0012                	c.slli	zero,0x4
     4cc:	0301                	addi	t1,t1,0
    for (i = 0; i < size_N; ++i){
     4ce:	0901                	addi	s2,s2,0
     4d0:	0006                	c.slli	zero,0x1
     4d2:	0301                	addi	t1,t1,0
    for (i = size_D-1; i >= 0; i = i-1){
     4d4:	0909                	addi	s2,s2,2
     4d6:	0008                	0x8
     4d8:	0301                	addi	t1,t1,0
     4da:	0901                	addi	s2,s2,0
     4dc:	000c                	0xc
     4de:	0301                	addi	t1,t1,0
    for (i = 0; i < size_N; ++i){
     4e0:	0904                	addi	s1,sp,144
     4e2:	0008                	0x8
        if ( (b_N*u)%mod == 1 )
     4e4:	0501                	addi	a0,a0,0
    for (u = 0; u < mod; ++u){
     4e6:	00030607          	0x30607
     4ea:	0009                	c.nop	2
     4ec:	0100                	addi	s0,sp,128
        q[i] = 0;
     4ee:	1d05                	addi	s10,s10,-31
     4f0:	0200                	addi	s0,sp,256
     4f2:	0104                	addi	s1,sp,128
     4f4:	0306                	slli	t1,t1,0x1
        v[i] = 0;
     4f6:	0908                	addi	a0,sp,144
        q[i] = 0;
     4f8:	001c                	0x1c
     4fa:	0501                	addi	a0,a0,0
        v[i] = 0;
     4fc:	0009                	c.nop	2
     4fe:	0402                	c.slli64	s0
    for (i = 0; i < size_N; ++i){
     500:	0601                	addi	a2,a2,0
     502:	00090003          	lb	zero,0(s2)
    for (i = size_D-1; i >= 0; i = i-1){
     506:	0100                	addi	s0,sp,128
     508:	1405                	addi	s0,s0,-31
        if ( (b_N*u)%mod == 1 )
     50a:	04090103          	lb	sp,64(s2)
     50e:	0100                	addi	s0,sp,128
     510:	0d05                	addi	s10,s10,1
     512:	0200                	addi	s0,sp,256
    for (u = 0; u < mod; ++u){
     514:	0304                	addi	s1,sp,384
     516:	0306                	slli	t1,t1,0x1
        if( num_temp[i] != 0 )
     518:	0004095b          	0x4095b
    for (i = size_N-1; i >= 0; i = i-1){
     51c:	0501                	addi	a0,a0,0
     51e:	0018                	0x18
     520:	0402                	c.slli64	s0
     522:	01030603          	lb	a2,16(t1)
     526:	0009                	c.nop	2
    while (d >= d2){
     528:	0100                	addi	s0,sp,128
     52a:	0200                	addi	s0,sp,256
    array_equ(result,q,size_N);
     52c:	0304                	addi	s1,sp,384
     52e:	06097f03          	0x6097f03
     532:	0100                	addi	s0,sp,128
     534:	0d05                	addi	s10,s10,1
     536:	0200                	addi	s0,sp,256
     538:	0304                	addi	s1,sp,384
    for(i = size_N; i < (2*size_N); ++i){
     53a:	0306                	slli	t1,t1,0x1
     53c:	0901                	addi	s2,s2,0
        result[i] = num_temp[i-size_N];
     53e:	0004                	0x4
     540:	0501                	addi	a0,a0,0
     542:	0018                	0x18
     544:	0402                	c.slli64	s0
    for(i = size_N; i < (2*size_N); ++i){
     546:	00030603          	lb	a2,0(t1)
}
     54a:	0009                	c.nop	2
     54c:	0100                	addi	s0,sp,128
     54e:	2c05                	jal	77e <ext_euclid+0x182>
     550:	0200                	addi	s0,sp,256
     552:	0304                	addi	s1,sp,384
     554:	0306                	slli	t1,t1,0x1
     556:	097e                	slli	s2,s2,0x1f
     558:	0004                	0x4
     55a:	0501                	addi	a0,a0,0
     55c:	0014                	0x14
     55e:	0402                	c.slli64	s0
     560:	0301                	addi	t1,t1,0
     562:	0900                	addi	s0,sp,144
     564:	0004                	0x4
     566:	0501                	addi	a0,a0,0
     568:	0009                	c.nop	2
     56a:	0402                	c.slli64	s0
     56c:	0601                	addi	a2,a2,0
     56e:	00090003          	lb	zero,0(s2)
     572:	0100                	addi	s0,sp,128
        v[(d-d2)] = u*r_d;
     574:	1d05                	addi	s10,s10,-31
     576:	0200                	addi	s0,sp,256
     578:	0204                	addi	s1,sp,256
     57a:	0306                	slli	t1,t1,0x1
     57c:	097f                	0x97f
     57e:	0004                	0x4
    array_mod(v,mod,size_N);
     580:	0501                	addi	a0,a0,0
     582:	0103060f          	0x103060f
        v[(d-d2)] = u*r_d;
     586:	0809                	addi	a6,a6,2
    array_mod(v,mod,size_N);
     588:	0100                	addi	s0,sp,128
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     58a:	0705                	addi	a4,a4,1
     58c:	04091d03          	lh	s10,64(s2)
     590:	0100                	addi	s0,sp,128
     592:	1d05                	addi	s10,s10,-31
     594:	0200                	addi	s0,sp,256
     596:	0104                	addi	s1,sp,128
    array_mod(product,mod,size_N);
     598:	0306                	slli	t1,t1,0x1
     59a:	0901                	addi	s2,s2,0
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     59c:	0002                	c.slli64	zero
    array_mod(product,mod,size_N);
     59e:	0501                	addi	a0,a0,0
    array_sub(num_temp,product,size_N);
     5a0:	0009                	c.nop	2
     5a2:	0402                	c.slli64	s0
     5a4:	0601                	addi	a2,a2,0
     5a6:	00090003          	lb	zero,0(s2)
    array_mod(num_temp,mod,size_N);
     5aa:	0100                	addi	s0,sp,128
     5ac:	0f05                	addi	t5,t5,1
     5ae:	04091003          	lh	zero,64(s2)
    array_add(q,v,size_N);
     5b2:	0100                	addi	s0,sp,128
     5b4:	1105                	addi	sp,sp,-31
     5b6:	0200                	addi	s0,sp,256
    array_mod(q,mod,size_N);
     5b8:	0104                	addi	s1,sp,128
     5ba:	0306                	slli	t1,t1,0x1
     5bc:	097f                	0x97f
     5be:	0002                	c.slli64	zero
        for (i = size_N-1; i >= 0; i = i-1){
     5c0:	0501                	addi	a0,a0,0
     5c2:	0005                	c.nop	1
     5c4:	0402                	c.slli64	s0
     5c6:	0601                	addi	a2,a2,0
     5c8:	00090003          	lb	zero,0(s2)
     5cc:	0100                	addi	s0,sp,128
     5ce:	0b05                	addi	s6,s6,1
     5d0:	0c090703          	lb	a4,192(s2)
     5d4:	0100                	addi	s0,sp,128
     5d6:	1005                	c.nop	-31
            v[i] = 0;
     5d8:	0200                	addi	s0,sp,256
     5da:	0104                	addi	s1,sp,128
     5dc:	0306                	slli	t1,t1,0x1
     5de:	0900                	addi	s0,sp,144
     5e0:	0002                	c.slli64	zero
        for (i = 0; i < size_N; ++i){
     5e2:	0501                	addi	a0,a0,0
     5e4:	0005                	c.nop	1
     5e6:	0402                	c.slli64	s0
     5e8:	0601                	addi	a2,a2,0
        result[i] = num_temp[i-size_N];
     5ea:	00090003          	lb	zero,0(s2)
     5ee:	0100                	addi	s0,sp,128
     5f0:	0306                	slli	t1,t1,0x1
     5f2:	0004090b          	0x4090b
    for(i = size_N; i < (2*size_N); ++i){
     5f6:	0301                	addi	t1,t1,0
     5f8:	0902                	c.slli64	s2
     5fa:	000e                	c.slli	zero,0x3
    int ri_2[size]; // MX-ring poly, a
     5fc:	0301                	addi	t1,t1,0
     5fe:	0902                	c.slli64	s2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     600:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     602:	0501                	addi	a0,a0,0
     604:	0601                	addi	a2,a2,0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     606:	00090103          	lb	sp,0(s2)
     60a:	0100                	addi	s0,sp,128
     60c:	1105                	addi	sp,sp,-31
     60e:	0200                	addi	s0,sp,256
     610:	0304                	addi	s1,sp,384
     612:	0306                	slli	t1,t1,0x1
     614:	095c                	addi	a5,sp,148
     616:	002a                	c.slli	zero,0xa
     618:	0501                	addi	a0,a0,0
     61a:	0025                	c.nop	9
     61c:	0402                	c.slli64	s0
     61e:	00030603          	lb	a2,0(t1)
    int ri_2[size]; // MX-ring poly, a
     622:	0409                	addi	s0,s0,2
     624:	0100                	addi	s0,sp,128
     626:	2b05                	jal	b56 <ntru_encyrpt+0x78>
    int ri_1[size]; // f-random poly, f[N] = 0, b
     628:	0200                	addi	s0,sp,256
     62a:	0304                	addi	s1,sp,384
     62c:	04090003          	lb	zero,64(s2)
    int ri[size];
     630:	0100                	addi	s0,sp,128
     632:	2e05                	jal	962 <generate_keys+0x176>
    int ti_1[size]; // ti_1[0] = 1
     634:	0200                	addi	s0,sp,256
     636:	0304                	addi	s1,sp,384
     638:	02090003          	lb	zero,32(s2)
    int ti[size];
     63c:	0100                	addi	s0,sp,128
     63e:	2a05                	jal	76e <ext_euclid+0x172>
    int qi_1[size];
     640:	0200                	addi	s0,sp,256
     642:	0304                	addi	s1,sp,384
     644:	06097f03          	0x6097f03
    int temp[size];
     648:	0100                	addi	s0,sp,128
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     64a:	2e05                	jal	97a <generate_keys+0x18e>
     64c:	0200                	addi	s0,sp,256
     64e:	0304                	addi	s1,sp,384
    int ri_2[size]; // MX-ring poly, a
     650:	02090103          	lb	sp,32(s2)
    int temp[size];
     654:	0100                	addi	s0,sp,128
    for (i = 0; i < size; ++i) {
     656:	2505                	jal	c76 <_start+0x2>
        ti_2[i] = 0;
     658:	0200                	addi	s0,sp,256
     65a:	0304                	addi	s1,sp,384
     65c:	04090003          	lb	zero,64(s2)
    for (i = 0; i < size; ++i) {
     660:	0100                	addi	s0,sp,128
     662:	2805                	jal	692 <ext_euclid+0x96>
    array_equ(ri_2,polyR,size);
     664:	0200                	addi	s0,sp,256
     666:	0304                	addi	s1,sp,384
     668:	0306                	slli	t1,t1,0x1
     66a:	097f                	0x97f
    array_equ(ri_1,polyf,size);
     66c:	0002                	c.slli64	zero
     66e:	0501                	addi	a0,a0,0
     670:	0020                	addi	s0,sp,8
     672:	0402                	c.slli64	s0
    ti_1[0] = 1;
     674:	0301                	addi	t1,t1,0
     676:	0900                	addi	s0,sp,144
     678:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     67a:	0501                	addi	a0,a0,0
     67c:	000d                	c.nop	3
     67e:	0402                	c.slli64	s0
     680:	0601                	addi	a2,a2,0
    array_equ(ti,ti_2,size);
     682:	00090003          	lb	zero,0(s2)
     686:	0100                	addi	s0,sp,128
     688:	2505                	jal	ca8 <memcpy+0xa>
    array_mod(ri_2,mod,size);
     68a:	0200                	addi	s0,sp,256
     68c:	0204                	addi	s1,sp,256
     68e:	0306                	slli	t1,t1,0x1
     690:	097f                	0x97f
    array_mod(ri_1,mod,size);
     692:	0004                	0x4
     694:	0501                	addi	a0,a0,0
     696:	04020027          	0x4020027
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     69a:	0602                	c.slli64	a2
     69c:	00090003          	lb	zero,0(s2)
     6a0:	0100                	addi	s0,sp,128
     6a2:	1405                	addi	s0,s0,-31
     6a4:	08090103          	lb	sp,128(s2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6a8:	0100                	addi	s0,sp,128
     6aa:	1105                	addi	sp,sp,-31
     6ac:	0200                	addi	s0,sp,256
     6ae:	0304                	addi	s1,sp,384
     6b0:	0306                	slli	t1,t1,0x1
    array_equ(temp,ri_2,size);
     6b2:	0908                	addi	a0,sp,144
     6b4:	0004                	0x4
     6b6:	0501                	addi	a0,a0,0
     6b8:	0029                	c.nop	10
    array_sub(temp,ri,size);
     6ba:	0402                	c.slli64	s0
     6bc:	00030603          	lb	a2,0(t1)
     6c0:	0409                	addi	s0,s0,2
    array_mod(temp,mod,size);
     6c2:	0100                	addi	s0,sp,128
     6c4:	2f05                	jal	df4 <memset+0x78>
     6c6:	0200                	addi	s0,sp,256
     6c8:	0304                	addi	s1,sp,384
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     6ca:	04090003          	lb	zero,64(s2)
     6ce:	0100                	addi	s0,sp,128
     6d0:	3205                	jal	fffffff0 <_stack_start+0xfffefff0>
     6d2:	0200                	addi	s0,sp,256
     6d4:	0304                	addi	s1,sp,384
     6d6:	02090003          	lb	zero,32(s2)
    array_equ(qi_1,res1,size);
     6da:	0100                	addi	s0,sp,128
     6dc:	2a05                	jal	80c <generate_keys+0x20>
    array_mod(qi_1,mod,size);
     6de:	0200                	addi	s0,sp,256
     6e0:	0304                	addi	s1,sp,384
     6e2:	06097f03          	0x6097f03
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     6e6:	0100                	addi	s0,sp,128
     6e8:	3205                	jal	8 <__DYNAMIC+0x8>
     6ea:	0200                	addi	s0,sp,256
     6ec:	0304                	addi	s1,sp,384
     6ee:	02090103          	lb	sp,32(s2)
     6f2:	0100                	addi	s0,sp,128
     6f4:	2905                	jal	b24 <ntru_encyrpt+0x46>
    array_equ(temp,res2,size);
     6f6:	0200                	addi	s0,sp,256
     6f8:	0304                	addi	s1,sp,384
     6fa:	04090003          	lb	zero,64(s2)
    array_mod(temp,mod,size);
     6fe:	0100                	addi	s0,sp,128
     700:	2805                	jal	730 <ext_euclid+0x134>
     702:	0200                	addi	s0,sp,256
    array_equ(ti,ti_2,size);
     704:	0304                	addi	s1,sp,384
     706:	0306                	slli	t1,t1,0x1
     708:	097f                	0x97f
     70a:	0002                	c.slli64	zero
    array_sub(ti,temp,size);
     70c:	0501                	addi	a0,a0,0
     70e:	0020                	addi	s0,sp,8
     710:	0402                	c.slli64	s0
     712:	0301                	addi	t1,t1,0
    array_mod(ti,mod,size);
     714:	0900                	addi	s0,sp,144
     716:	0000                	unimp
     718:	0501                	addi	a0,a0,0
     71a:	000d                	c.nop	3
array_equ(ri_2,ri_1,size);
     71c:	0402                	c.slli64	s0
     71e:	0601                	addi	a2,a2,0
     720:	00090003          	lb	zero,0(s2)
array_equ(ri_1,ri,size);
     724:	0100                	addi	s0,sp,128
     726:	2505                	jal	d46 <memcpy+0xa8>
     728:	0200                	addi	s0,sp,256
     72a:	0204                	addi	s1,sp,256
array_equ(ti_2,ti_1,size);
     72c:	0306                	slli	t1,t1,0x1
     72e:	097f                	0x97f
     730:	0004                	0x4
     732:	0501                	addi	a0,a0,0
array_equ(ti_1,ti,size);
     734:	04020027          	0x4020027
     738:	0602                	c.slli64	a2
     73a:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     73e:	0100                	addi	s0,sp,128
     740:	0d05                	addi	s10,s10,1
     742:	0200                	addi	s0,sp,256
    while (controlR != 0) {
     744:	0304                	addi	s1,sp,384
     746:	0306                	slli	t1,t1,0x1
        for (j = 0; j < mod; ++j) {
     748:	090a                	slli	s2,s2,0x2
            if (((ri_2[0] * j) % mod) == 1)
     74a:	0008                	0x8
        for (j = 0; j < mod; ++j) {
     74c:	0501                	addi	a0,a0,0
     74e:	0025                	c.nop	9
     750:	0402                	c.slli64	s0
     752:	00030603          	lb	a2,0(t1)
     756:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     758:	0100                	addi	s0,sp,128
     75a:	2c05                	jal	98a <generate_keys+0x19e>
    }
     75c:	0200                	addi	s0,sp,256
     75e:	0304                	addi	s1,sp,384
     760:	02097f03          	0x2097f03
     764:	0100                	addi	s0,sp,128
     766:	2505                	jal	d86 <memset+0xa>
     768:	0200                	addi	s0,sp,256
     76a:	0304                	addi	s1,sp,384
     76c:	04090103          	lb	sp,64(s2)
     770:	0100                	addi	s0,sp,128
     772:	1805                	addi	a6,a6,-31
     774:	0200                	addi	s0,sp,256
     776:	0304                	addi	s1,sp,384
     778:	04090003          	lb	zero,64(s2)
     77c:	0100                	addi	s0,sp,128
     77e:	2c05                	jal	9ae <generate_keys+0x1c2>
     780:	0200                	addi	s0,sp,256
     782:	0304                	addi	s1,sp,384
     784:	0306                	slli	t1,t1,0x1
        ti_2[i] = 0;
     786:	097f                	0x97f
     788:	0004                	0x4
     78a:	0501                	addi	a0,a0,0
     78c:	0014                	0x14
        ti_1[i] = 0;
     78e:	0402                	c.slli64	s0
        ti_2[i] = 0;
     790:	0301                	addi	t1,t1,0
     792:	0900                	addi	s0,sp,144
        ti_1[i] = 0;
     794:	0000                	unimp
     796:	0501                	addi	a0,a0,0
    for (i = 0; i < size; ++i) {
     798:	0009                	c.nop	2
     79a:	0402                	c.slli64	s0
            ri[i - (N + 1)] = res[i];
     79c:	0601                	addi	a2,a2,0
     79e:	00090003          	lb	zero,0(s2)
     7a2:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7a4:	1d05                	addi	s10,s10,-31
     7a6:	0200                	addi	s0,sp,256
            ri[i - (N + 1)] = res[i];
     7a8:	0204                	addi	s1,sp,256
     7aa:	0306                	slli	t1,t1,0x1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7ac:	097f                	0x97f
              qi_1[i] = 0;
     7ae:	0004                	0x4
     7b0:	0501                	addi	a0,a0,0
     7b2:	0103060f          	0x103060f
            controlR += ri[i];
     7b6:	0809                	addi	a6,a6,2
     7b8:	0100                	addi	s0,sp,128
              qi_1[i] = 0;
     7ba:	0d05                	addi	s10,s10,1
     7bc:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     7be:	0304                	addi	s1,sp,384
            controlR += ri[i];
     7c0:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     7c2:	0908                	addi	a0,sp,144
            if (((ri_2[0] * j) % mod) == 1)
     7c4:	0004                	0x4
     7c6:	0501                	addi	a0,a0,0
     7c8:	0022                	c.slli	zero,0x8
     7ca:	0402                	c.slli64	s0
     7cc:	00030603          	lb	a2,0(t1)
     7d0:	0009                	c.nop	2
     7d2:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     7d4:	1805                	addi	a6,a6,-31
     7d6:	0200                	addi	s0,sp,256
            ti_2[i] = (ti_2[i] * j) % mod;
     7d8:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     7da:	04090003          	lb	zero,64(s2)
            ti_2[i] = (ti_2[i] * j) % mod;
     7de:	0100                	addi	s0,sp,128
     7e0:	2005                	jal	800 <generate_keys+0x14>
     7e2:	0200                	addi	s0,sp,256
     7e4:	0304                	addi	s1,sp,384
     7e6:	02097f03          	0x2097f03
        for (i = 0; i < N + 1; ++i) {
     7ea:	0100                	addi	s0,sp,128
int* generate_keys(int N, int p, int q){
     7ec:	2205                	jal	90c <generate_keys+0x120>
     7ee:	0200                	addi	s0,sp,256
     7f0:	0304                	addi	s1,sp,384
     7f2:	02090103          	lb	sp,32(s2)
     7f6:	0100                	addi	s0,sp,128
     7f8:	1805                	addi	a6,a6,-31
     7fa:	0200                	addi	s0,sp,256
     7fc:	0304                	addi	s1,sp,384
     7fe:	06090003          	lb	zero,96(s2)
     802:	0100                	addi	s0,sp,128
     804:	2005                	jal	824 <generate_keys+0x38>
     806:	0200                	addi	s0,sp,256
     808:	0304                	addi	s1,sp,384
     80a:	0306                	slli	t1,t1,0x1
     80c:	097f                	0x97f
     80e:	0006                	c.slli	zero,0x1
     810:	0501                	addi	a0,a0,0
     812:	0014                	0x14
     814:	0402                	c.slli64	s0
     816:	0301                	addi	t1,t1,0
     818:	0900                	addi	s0,sp,144
     81a:	0000                	unimp
     81c:	0501                	addi	a0,a0,0
     81e:	0009                	c.nop	2
     820:	0402                	c.slli64	s0
     822:	0601                	addi	a2,a2,0
     824:	00090003          	lb	zero,0(s2)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     828:	0100                	addi	s0,sp,128
     82a:	2805                	jal	85a <generate_keys+0x6e>
     82c:	0200                	addi	s0,sp,256
     82e:	0204                	addi	s1,sp,256
     830:	0306                	slli	t1,t1,0x1
     832:	097f                	0x97f
     834:	0004                	0x4
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     836:	0501                	addi	a0,a0,0
     838:	0103060f          	0x103060f
     83c:	0609                	addi	a2,a2,2
     83e:	0100                	addi	s0,sp,128
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     840:	4605                	li	a2,1
     842:	0306                	slli	t1,t1,0x1
     844:	0911                	addi	s2,s2,4
     846:	0004                	0x4
     848:	0501                	addi	a0,a0,0
     84a:	0305                	addi	t1,t1,1
     84c:	0902                	c.slli64	s2
     84e:	0000                	unimp
     850:	0501                	addi	a0,a0,0
     852:	0646                	slli	a2,a2,0x11
     854:	00097e03          	0x97e03
     858:	0100                	addi	s0,sp,128
     85a:	1d05                	addi	s10,s10,-31
     85c:	02090203          	lb	tp,32(s2)
     860:	0100                	addi	s0,sp,128
     862:	4605                	li	a2,1
     864:	04097e03          	0x4097e03
     868:	0100                	addi	s0,sp,128
     86a:	0905                	addi	s2,s2,1
     86c:	0a090203          	lb	tp,160(s2)
     870:	0100                	addi	s0,sp,128
     872:	4605                	li	a2,1
     874:	0c097e03          	0xc097e03
     878:	0100                	addi	s0,sp,128
     87a:	0905                	addi	s2,s2,1
     87c:	12090203          	lb	tp,288(s2)
     880:	0100                	addi	s0,sp,128
     882:	4605                	li	a2,1
     884:	02097e03          	0x2097e03
     888:	0100                	addi	s0,sp,128
     88a:	0905                	addi	s2,s2,1
     88c:	04090203          	lb	tp,64(s2)
     890:	0100                	addi	s0,sp,128
     892:	4605                	li	a2,1
     894:	02097e03          	0x2097e03
     898:	0100                	addi	s0,sp,128
     89a:	0905                	addi	s2,s2,1
     89c:	00090203          	lb	tp,0(s2)
     8a0:	0100                	addi	s0,sp,128
     8a2:	04090303          	lb	t1,64(s2)
     8a6:	0100                	addi	s0,sp,128
     8a8:	08097d03          	0x8097d03
    int polyR[N+1];
     8ac:	0100                	addi	s0,sp,128
     8ae:	02090303          	lb	t1,32(s2)
     8b2:	0100                	addi	s0,sp,128
     8b4:	04090103          	lb	sp,64(s2)
     8b8:	0100                	addi	s0,sp,128
     8ba:	06097f03          	0x6097f03
     8be:	0100                	addi	s0,sp,128
    polyR[N] = 1;
     8c0:	02090103          	lb	sp,32(s2)
     8c4:	0100                	addi	s0,sp,128
     8c6:	4605                	li	a2,1
     8c8:	04097a03          	0x4097a03
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8cc:	0100                	addi	s0,sp,128
     8ce:	0905                	addi	s2,s2,1
     8d0:	04090203          	lb	tp,64(s2)
     8d4:	0100                	addi	s0,sp,128
     8d6:	0505                	addi	a0,a0,1
     8d8:	0306                	slli	t1,t1,0x1
     8da:	0901                	addi	s2,s2,0
     8dc:	0004                	0x4
     8de:	0301                	addi	t1,t1,0
     8e0:	0901                	addi	s2,s2,0
     8e2:	0000                	unimp
     8e4:	0301                	addi	t1,t1,0
     8e6:	0901                	addi	s2,s2,0
     8e8:	0000                	unimp
     8ea:	0501                	addi	a0,a0,0
     8ec:	0646                	slli	a2,a2,0x11
     8ee:	00097b03          	0x97b03
     8f2:	0100                	addi	s0,sp,128
     8f4:	0905                	addi	s2,s2,1
     8f6:	02090503          	lb	a0,32(s2)
     8fa:	0100                	addi	s0,sp,128
     8fc:	0505                	addi	a0,a0,1
     8fe:	0306                	slli	t1,t1,0x1
     900:	0901                	addi	s2,s2,0
     902:	0004                	0x4
     904:	0501                	addi	a0,a0,0
     906:	0609                	addi	a2,a2,2
     908:	00090003          	lb	zero,0(s2)
     90c:	0100                	addi	s0,sp,128
     90e:	0505                	addi	a0,a0,1
     910:	0306                	slli	t1,t1,0x1
     912:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     916:	0501                	addi	a0,a0,0
     918:	060c                	addi	a1,sp,768
     91a:	04090003          	lb	zero,64(s2)
     91e:	0100                	addi	s0,sp,128
     920:	1905                	addi	s2,s2,-31
     922:	02090303          	lb	t1,32(s2)
     926:	0100                	addi	s0,sp,128
     928:	1105                	addi	sp,sp,-31
     92a:	0200                	addi	s0,sp,256
     92c:	0104                	addi	s1,sp,128
    polyR[0] = -1;
     92e:	0306                	slli	t1,t1,0x1
     930:	097d                	addi	s2,s2,31
    for(i = 1; i < N; ++i){
     932:	0008                	0x8
     934:	0501                	addi	a0,a0,0
     936:	0005                	c.nop	1
     938:	0402                	c.slli64	s0
    for (i = N; i < 55; ++i ){
     93a:	0601                	addi	a2,a2,0
     93c:	00090003          	lb	zero,0(s2)
     940:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     942:	04090b03          	lb	s6,64(s2)
        random_keys[i] = f[i];
     946:	0100                	addi	s0,sp,128
     948:	0306                	slli	t1,t1,0x1
     94a:	0900                	addi	s0,sp,144
    for(i = 0; i < N; ++i){
     94c:	000a                	c.slli	zero,0x2
     94e:	0301                	addi	t1,t1,0
     950:	0906                	slli	s2,s2,0x1
     952:	0002                	c.slli64	zero
    for(i = N; i < (2*N); ++i){
     954:	0301                	addi	t1,t1,0
     956:	000c0903          	lb	s2,0(s8) # 19000 <_stack_start+0x9000>
     95a:	0501                	addi	a0,a0,0
        random_keys[i] = g[i-N];
     95c:	00030607          	0x30607
     960:	0009                	c.nop	2
     962:	0100                	addi	s0,sp,128
    for(i = N; i < (2*N); ++i){
     964:	1d05                	addi	s10,s10,-31
     966:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     968:	0104                	addi	s1,sp,128
     96a:	0306                	slli	t1,t1,0x1
     96c:	0908                	addi	a0,sp,144
    fp = ext_euclid(polyR, f, (N+1), p);
     96e:	0012                	c.slli	zero,0x4
     970:	0501                	addi	a0,a0,0
     972:	0009                	c.nop	2
     974:	0402                	c.slli64	s0
     976:	0601                	addi	a2,a2,0
     978:	00090003          	lb	zero,0(s2)
        random_keys[i] = fp[i-(2*N)];
     97c:	0100                	addi	s0,sp,128
     97e:	1405                	addi	s0,s0,-31
     980:	04090103          	lb	sp,64(s2)
    for(i = (2*N); i < (3*N); ++i){
     984:	0100                	addi	s0,sp,128
     986:	0d05                	addi	s10,s10,1
    fq = ext_euclid(polyR, f, (N+1), q);
     988:	0200                	addi	s0,sp,256
     98a:	0304                	addi	s1,sp,384
     98c:	0306                	slli	t1,t1,0x1
     98e:	0965                	addi	s2,s2,25
     990:	0004                	0x4
     992:	0501                	addi	a0,a0,0
    for(i = (3*N); i < (4*N); ++i){
     994:	0019                	c.nop	6
     996:	0402                	c.slli64	s0
     998:	01030603          	lb	a2,16(t1)
        random_keys[i] = fq[i-(3*N)];
     99c:	0009                	c.nop	2
     99e:	0100                	addi	s0,sp,128
     9a0:	1805                	addi	a6,a6,-31
     9a2:	0200                	addi	s0,sp,256
    for(i = (3*N); i < (4*N); ++i){
     9a4:	0304                	addi	s1,sp,384
     9a6:	06097f03          	0x6097f03
    fg = polymult2(fq, N, g, N, 0);
     9aa:	0100                	addi	s0,sp,128
     9ac:	0d05                	addi	s10,s10,1
     9ae:	0200                	addi	s0,sp,256
     9b0:	0304                	addi	s1,sp,384
    for(i = 0; i < (2*N-1); ++i){
     9b2:	0306                	slli	t1,t1,0x1
     9b4:	0901                	addi	s2,s2,0
     9b6:	0004                	0x4
     9b8:	0501                	addi	a0,a0,0
     9ba:	0019                	c.nop	6
     9bc:	0402                	c.slli64	s0
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     9be:	00030603          	lb	a2,0(t1)
     9c2:	0009                	c.nop	2
     9c4:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     9c6:	2c05                	jal	bf6 <ntru_deceypt+0x92>
     9c8:	0200                	addi	s0,sp,256
     9ca:	0304                	addi	s1,sp,384
     9cc:	0306                	slli	t1,t1,0x1
     9ce:	097e                	slli	s2,s2,0x1f
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     9d0:	0004                	0x4
     9d2:	0501                	addi	a0,a0,0
     9d4:	0014                	0x14
     9d6:	0402                	c.slli64	s0
    for(i = (4*N); i < (5*N); ++i){
     9d8:	0301                	addi	t1,t1,0
     9da:	0900                	addi	s0,sp,144
     9dc:	0004                	0x4
    for(i = (5*N); i < (6*N+1); ++i){
     9de:	0501                	addi	a0,a0,0
     9e0:	0009                	c.nop	2
        random_keys[i] = polyR[i-(5*N)];
     9e2:	0402                	c.slli64	s0
     9e4:	0601                	addi	a2,a2,0
     9e6:	00090003          	lb	zero,0(s2)
    for(i = (5*N); i < (6*N+1); ++i){
     9ea:	0100                	addi	s0,sp,128
     9ec:	1d05                	addi	s10,s10,-31
     9ee:	0200                	addi	s0,sp,256
     9f0:	0204                	addi	s1,sp,256
     9f2:	0306                	slli	t1,t1,0x1
     9f4:	097f                	0x97f
}
     9f6:	0004                	0x4
     9f8:	0501                	addi	a0,a0,0
     9fa:	0103060f          	0x103060f
     9fe:	0809                	addi	a6,a6,2
     a00:	0100                	addi	s0,sp,128
     a02:	1105                	addi	sp,sp,-31
     a04:	0200                	addi	s0,sp,256
     a06:	0304                	addi	s1,sp,384
     a08:	0306                	slli	t1,t1,0x1
     a0a:	0916                	slli	s2,s2,0x5
     a0c:	0004                	0x4
     a0e:	0501                	addi	a0,a0,0
     a10:	0025                	c.nop	9
     a12:	0402                	c.slli64	s0
     a14:	00030603          	lb	a2,0(t1)
     a18:	0409                	addi	s0,s0,2
     a1a:	0100                	addi	s0,sp,128
     a1c:	2b05                	jal	f4c <__DTOR_END__+0x20>
     a1e:	0200                	addi	s0,sp,256
     a20:	0304                	addi	s1,sp,384
     a22:	04090003          	lb	zero,64(s2)
     a26:	0100                	addi	s0,sp,128
     a28:	2e05                	jal	d58 <memcpy+0xba>
     a2a:	0200                	addi	s0,sp,256
     a2c:	0304                	addi	s1,sp,384
     a2e:	02090003          	lb	zero,32(s2)
     a32:	0100                	addi	s0,sp,128
     a34:	2a05                	jal	b64 <ntru_deceypt>
        polyR[i] = 0;
     a36:	0200                	addi	s0,sp,256
     a38:	0304                	addi	s1,sp,384
     a3a:	06097f03          	0x6097f03
     a3e:	0100                	addi	s0,sp,128
    for(i = 1; i < N; ++i){
     a40:	2e05                	jal	d70 <memcpy+0xd2>
     a42:	0200                	addi	s0,sp,256
        f[i] = 0;
     a44:	0304                	addi	s1,sp,384
     a46:	02090103          	lb	sp,32(s2)
     a4a:	0100                	addi	s0,sp,128
     a4c:	2505                	jal	106c <__DTOR_END__+0x140>
     a4e:	0200                	addi	s0,sp,256
     a50:	0304                	addi	s1,sp,384
        g[i] = 0;
     a52:	04090003          	lb	zero,64(s2)
     a56:	0100                	addi	s0,sp,128
     a58:	2805                	jal	a88 <generate_keys+0x29c>
     a5a:	0200                	addi	s0,sp,256
    for (i = N; i < 55; ++i ){
     a5c:	0304                	addi	s1,sp,384
     a5e:	0306                	slli	t1,t1,0x1
        random_keys[i] = f[i];
     a60:	097f                	0x97f
     a62:	0002                	c.slli64	zero
     a64:	0501                	addi	a0,a0,0
     a66:	0020                	addi	s0,sp,8
     a68:	0402                	c.slli64	s0
     a6a:	0301                	addi	t1,t1,0
     a6c:	0900                	addi	s0,sp,144
     a6e:	0000                	unimp
    for(i = 0; i < N; ++i){
     a70:	0501                	addi	a0,a0,0
        random_keys[i] = f[i];
     a72:	000d                	c.nop	3
    for(i = 0; i < N; ++i){
     a74:	0402                	c.slli64	s0
        random_keys[i] = g[i-N];
     a76:	0601                	addi	a2,a2,0
     a78:	00090003          	lb	zero,0(s2)
     a7c:	0100                	addi	s0,sp,128
     a7e:	2505                	jal	109e <__DTOR_END__+0x172>
    for(i = N; i < (2*N); ++i){
     a80:	0200                	addi	s0,sp,256
     a82:	0204                	addi	s1,sp,256
     a84:	0306                	slli	t1,t1,0x1
        random_keys[i] = fp[i-(2*N)];
     a86:	097f                	0x97f
     a88:	0004                	0x4
     a8a:	0501                	addi	a0,a0,0
     a8c:	04020027          	0x4020027
    for(i = (2*N); i < (3*N); ++i){
     a90:	0602                	c.slli64	a2
     a92:	00090003          	lb	zero,0(s2)
        random_keys[i] = fq[i-(3*N)];
     a96:	0100                	addi	s0,sp,128
     a98:	1d05                	addi	s10,s10,-31
     a9a:	0200                	addi	s0,sp,256
     a9c:	0104                	addi	s1,sp,128
     a9e:	0306                	slli	t1,t1,0x1
     aa0:	0900                	addi	s0,sp,144
     aa2:	0006                	c.slli	zero,0x1
    for(i = (3*N); i < (4*N); ++i){
     aa4:	0501                	addi	a0,a0,0
        random_keys[i] = fq[i-(3*N)];
     aa6:	0009                	c.nop	2
    for(i = (3*N); i < (4*N); ++i){
     aa8:	0402                	c.slli64	s0
        fg[i] = fg[i]*p;
     aaa:	0601                	addi	a2,a2,0
    for(i = 0; i < (2*N-1); ++i){
     aac:	00090003          	lb	zero,0(s2)
        fg[i] = fg[i]*p;
     ab0:	0100                	addi	s0,sp,128
     ab2:	1405                	addi	s0,s0,-31
     ab4:	04090803          	lb	a6,64(s2)
    for(i = 0; i < (2*N-1); ++i){
     ab8:	0100                	addi	s0,sp,128
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     aba:	0905                	addi	s2,s2,1
     abc:	02090a03          	lb	s4,32(s2)
     ac0:	0100                	addi	s0,sp,128
     ac2:	0d05                	addi	s10,s10,1
     ac4:	0200                	addi	s0,sp,256
    for(i = (4*N); i < (5*N); ++i){
     ac6:	0104                	addi	s1,sp,128
     ac8:	0306                	slli	t1,t1,0x1
        random_keys[i] = polyR[i-(5*N)];
     aca:	097d                	addi	s2,s2,31
     acc:	0008                	0x8
     ace:	0501                	addi	a0,a0,0
     ad0:	0005                	c.nop	1
     ad2:	0402                	c.slli64	s0
     ad4:	0601                	addi	a2,a2,0
     ad6:	00090003          	lb	zero,0(s2)
     ada:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     adc:	0306                	slli	t1,t1,0x1
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     ade:	00040907          	0x40907
     ae2:	0301                	addi	t1,t1,0
     ae4:	0902                	c.slli64	s2
     ae6:	0000                	unimp
     ae8:	0501                	addi	a0,a0,0
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     aea:	0601                	addi	a2,a2,0
     aec:	00090103          	lb	sp,0(s2)
     af0:	0100                	addi	s0,sp,128
     af2:	1405                	addi	s0,s0,-31
     af4:	2a096803          	0x2a096803
     af8:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     afa:	1105                	addi	sp,sp,-31
     afc:	0200                	addi	s0,sp,256
     afe:	0304                	addi	s1,sp,384
     b00:	0306                	slli	t1,t1,0x1
     b02:	0908                	addi	a0,sp,144
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b04:	0004                	0x4
    temp = polymult(public_key,N,random_val,48,q,0);
     b06:	0501                	addi	a0,a0,0
     b08:	0029                	c.nop	10
     b0a:	0402                	c.slli64	s0
     b0c:	00030603          	lb	a2,0(t1)
     b10:	0409                	addi	s0,s0,2
     b12:	0100                	addi	s0,sp,128
     b14:	2f05                	jal	1244 <_edata+0x198>
     b16:	0200                	addi	s0,sp,256
array_add(temp,message,48);
     b18:	0304                	addi	s1,sp,384
     b1a:	04090003          	lb	zero,64(s2)
    temp = polymult(public_key,N,random_val,48,q,0);
     b1e:	0100                	addi	s0,sp,128
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b20:	3205                	jal	440 <polymult2+0x146>
     b22:	0200                	addi	s0,sp,256
array_add(temp,message,48);
     b24:	0304                	addi	s1,sp,384
     b26:	02090003          	lb	zero,32(s2)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b2a:	0100                	addi	s0,sp,128
     b2c:	2a05                	jal	c5c <reset_handler+0x30>
     b2e:	0200                	addi	s0,sp,256
     b30:	0304                	addi	s1,sp,384
     b32:	06097f03          	0x6097f03
    for(i = (2*N); i < (3*N); ++i){
     b36:	0100                	addi	s0,sp,128
     b38:	3205                	jal	458 <polydiv>
     b3a:	0200                	addi	s0,sp,256
     b3c:	0304                	addi	s1,sp,384
     b3e:	02090103          	lb	sp,32(s2)
}
     b42:	0100                	addi	s0,sp,128
     b44:	2905                	jal	f74 <__DTOR_END__+0x48>
     b46:	0200                	addi	s0,sp,256
     b48:	0304                	addi	s1,sp,384
     b4a:	04090003          	lb	zero,64(s2)
     b4e:	0100                	addi	s0,sp,128
     b50:	2805                	jal	b80 <ntru_deceypt+0x1c>
        CT[i-(2*N)] = CT[i];
     b52:	0200                	addi	s0,sp,256
     b54:	0304                	addi	s1,sp,384
     b56:	0306                	slli	t1,t1,0x1
     b58:	097f                	0x97f
    for(i = (2*N); i < (3*N); ++i){
     b5a:	0002                	c.slli64	zero
     b5c:	0501                	addi	a0,a0,0
        CT[i-(2*N)] = CT[i];
     b5e:	0020                	addi	s0,sp,8
     b60:	0402                	c.slli64	s0
    for(i = (2*N); i < (3*N); ++i){
     b62:	0301                	addi	t1,t1,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b64:	0900                	addi	s0,sp,144
     b66:	0000                	unimp
     b68:	0501                	addi	a0,a0,0
     b6a:	000d                	c.nop	3
    for(i = (2*N); i < ((2*N)+N); ++i){
     b6c:	0402                	c.slli64	s0
     b6e:	0601                	addi	a2,a2,0
     b70:	00090003          	lb	zero,0(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b74:	0100                	addi	s0,sp,128
     b76:	2505                	jal	1196 <_edata+0xea>
     b78:	0200                	addi	s0,sp,256
     b7a:	0204                	addi	s1,sp,256
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b7c:	0306                	slli	t1,t1,0x1
     b7e:	097f                	0x97f
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b80:	0004                	0x4
     b82:	0501                	addi	a0,a0,0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b84:	04020027          	0x4020027
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b88:	0602                	c.slli64	a2
     b8a:	00090003          	lb	zero,0(s2)
     b8e:	0100                	addi	s0,sp,128
     b90:	0905                	addi	s2,s2,1
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     b92:	0200                	addi	s0,sp,256
     b94:	0304                	addi	s1,sp,384
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b96:	0306                	slli	t1,t1,0x1
     b98:	0008090b          	0x8090b
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     b9c:	0501                	addi	a0,a0,0
     b9e:	0016                	c.slli	zero,0x5
     ba0:	0402                	c.slli64	s0
     ba2:	097d0303          	lb	t1,151(s10)
     ba6:	0008                	0x8
     ba8:	0501                	addi	a0,a0,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     baa:	090c0343          	fmadd.s	ft6,fs8,fa6,ft1,rne
     bae:	0006                	c.slli	zero,0x1
     bb0:	0501                	addi	a0,a0,0
     bb2:	0305                	addi	t1,t1,1
        if(a2[i] <= q/2)
     bb4:	0902                	c.slli64	s2
     bb6:	0000                	unimp
     bb8:	0301                	addi	t1,t1,0
    for (i = 0; i < N; ++i){
     bba:	0901                	addi	s2,s2,0
     bbc:	0000                	unimp
     bbe:	0301                	addi	t1,t1,0
    c = polymult2(secret_key_fp,N,a2,N,0);
     bc0:	0902                	c.slli64	s2
     bc2:	0000                	unimp
     bc4:	0501                	addi	a0,a0,0
     bc6:	0609                	addi	a2,a2,2
     bc8:	00090003          	lb	zero,0(s2)
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     bcc:	0100                	addi	s0,sp,128
     bce:	4305                	li	t1,1
     bd0:	04097b03          	0x4097b03
     bd4:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     bd6:	0905                	addi	s2,s2,1
     bd8:	02090503          	lb	a0,32(s2)
}
     bdc:	0100                	addi	s0,sp,128
     bde:	4305                	li	t1,1
     be0:	02097b03          	0x2097b03
     be4:	0100                	addi	s0,sp,128
     be6:	0905                	addi	s2,s2,1
     be8:	1a090503          	lb	a0,416(s2)
     bec:	0100                	addi	s0,sp,128
     bee:	4305                	li	t1,1
     bf0:	02097b03          	0x2097b03
        a2[i-(2*N)] = a2[i];
     bf4:	0100                	addi	s0,sp,128
     bf6:	0905                	addi	s2,s2,1
     bf8:	02090503          	lb	a0,32(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     bfc:	0100                	addi	s0,sp,128
        a2[i-(2*N)] = a2[i];
     bfe:	06090103          	lb	sp,96(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     c02:	0100                	addi	s0,sp,128
        if(a2[i] <= q/2)
     c04:	06090203          	lb	tp,96(s2)
     c08:	0100                	addi	s0,sp,128
            a2[i] = (-1)*(q-a2[i]);
     c0a:	04090103          	lb	sp,64(s2)
     c0e:	0100                	addi	s0,sp,128
    for (i = 0; i < N; ++i){
     c10:	08097f03          	0x8097f03
     c14:	0100                	addi	s0,sp,128
        c2[i-(2*N)] = c2[i];
     c16:	4305                	li	t1,1
     c18:	02097803          	0x2097803
     c1c:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     c1e:	0905                	addi	s2,s2,1
     c20:	02090903          	lb	s2,32(s2)
        c2[i-(2*N)] = c2[i];
     c24:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     c26:	4305                	li	t1,1
  jal x0, default_exc_handler
     c28:	04097703          	0x4097703
  mv  x1, x0
     c2c:	0100                	addi	s0,sp,128
     c2e:	0905                	addi	s2,s2,1
  mv  x2, x1
     c30:	02090503          	lb	a0,32(s2)
  mv  x4, x1
     c34:	0100                	addi	s0,sp,128
  mv  x5, x1
     c36:	0505                	addi	a0,a0,1
  mv  x6, x1
     c38:	0306                	slli	t1,t1,0x1
  mv  x7, x1
     c3a:	0901                	addi	s2,s2,0
  mv  x8, x1
     c3c:	0004                	0x4
  mv  x9, x1
     c3e:	0301                	addi	t1,t1,0
  mv x10, x1
     c40:	0901                	addi	s2,s2,0
  mv x11, x1
     c42:	0000                	unimp
  mv x12, x1
     c44:	0301                	addi	t1,t1,0
  mv x13, x1
     c46:	0901                	addi	s2,s2,0
  mv x14, x1
     c48:	0000                	unimp
  mv x15, x1
     c4a:	0301                	addi	t1,t1,0
  mv x16, x1
     c4c:	0901                	addi	s2,s2,0
  mv x17, x1
     c4e:	0000                	unimp
  mv x18, x1
     c50:	0601                	addi	a2,a2,0
  mv x19, x1
     c52:	00090c03          	lb	s8,0(s2)
  mv x21, x1
     c56:	0100                	addi	s0,sp,128
  mv x22, x1
     c58:	4305                	li	t1,1
  mv x23, x1
     c5a:	06096b03          	0x6096b03
  mv x25, x1
     c5e:	0100                	addi	s0,sp,128
  mv x26, x1
     c60:	0905                	addi	s2,s2,1
  mv x27, x1
     c62:	04090903          	lb	s2,64(s2)
  mv x29, x1
     c66:	0100                	addi	s0,sp,128
  mv x30, x1
     c68:	0505                	addi	a0,a0,1
  mv x31, x1
     c6a:	04090c03          	lb	s8,64(s2)
  la   x2, _stack_start
     c6e:	0100                	addi	s0,sp,128
     c70:	02090103          	lb	sp,32(s2)
  la x26, _bss_start
     c74:	0100                	addi	s0,sp,128
     c76:	0905                	addi	s2,s2,1
     c78:	08097303          	0x8097303
  la x27, _bss_end
     c7c:	0100                	addi	s0,sp,128
     c7e:	0505                	addi	a0,a0,1
     c80:	0306                	slli	t1,t1,0x1
     c82:	090c                	addi	a1,sp,144
  bge x26, x27, zero_loop_end
     c84:	0002                	c.slli64	zero
     c86:	0301                	addi	t1,t1,0
  sw x0, 0(x26)
     c88:	0901                	addi	s2,s2,0
     c8a:	0000                	unimp
  addi x26, x26, 4
     c8c:	0301                	addi	t1,t1,0
  ble x26, x27, zero_loop
     c8e:	0000090b          	0x90b
  addi x10, x0, 0
     c92:	0301                	addi	t1,t1,0
     c94:	0901                	addi	s2,s2,0
  addi x11, x0, 0
     c96:	0008                	0x8
     c98:	0301                	addi	t1,t1,0
  jal x1, main
     c9a:	0902                	c.slli64	s2
     c9c:	0008                	0x8
     c9e:	0501                	addi	a0,a0,0
     ca0:	060c                	addi	a1,sp,768
     ca2:	00090003          	lb	zero,0(s2)
     ca6:	0100                	addi	s0,sp,128
     ca8:	1105                	addi	sp,sp,-31
     caa:	0200                	addi	s0,sp,256
     cac:	0104                	addi	s1,sp,128
     cae:	0306                	slli	t1,t1,0x1
     cb0:	0900                	addi	s0,sp,144
     cb2:	0002                	c.slli64	zero
     cb4:	0501                	addi	a0,a0,0
     cb6:	0005                	c.nop	1
     cb8:	0402                	c.slli64	s0
     cba:	0601                	addi	a2,a2,0
     cbc:	00090003          	lb	zero,0(s2)
     cc0:	0100                	addi	s0,sp,128
     cc2:	1805                	addi	a6,a6,-31
     cc4:	0200                	addi	s0,sp,256
     cc6:	0104                	addi	s1,sp,128
     cc8:	0306                	slli	t1,t1,0x1
     cca:	0906                	slli	s2,s2,0x1
     ccc:	0004                	0x4
     cce:	0501                	addi	a0,a0,0
     cd0:	0005                	c.nop	1
     cd2:	0402                	c.slli64	s0
     cd4:	0601                	addi	a2,a2,0
     cd6:	08090003          	lb	zero,128(s2)
     cda:	0100                	addi	s0,sp,128
     cdc:	0c05                	addi	s8,s8,1
     cde:	0200                	addi	s0,sp,256
     ce0:	0104                	addi	s1,sp,128
     ce2:	04097a03          	0x4097a03
     ce6:	0100                	addi	s0,sp,128
     ce8:	0200                	addi	s0,sp,256
     cea:	0104                	addi	s1,sp,128
     cec:	04090f03          	lb	t5,64(s2)
     cf0:	0100                	addi	s0,sp,128
     cf2:	1105                	addi	sp,sp,-31
     cf4:	0200                	addi	s0,sp,256
     cf6:	0104                	addi	s1,sp,128
     cf8:	0306                	slli	t1,t1,0x1
     cfa:	097f                	0x97f
     cfc:	0002                	c.slli64	zero
     cfe:	0501                	addi	a0,a0,0
     d00:	0005                	c.nop	1
     d02:	0402                	c.slli64	s0
     d04:	0601                	addi	a2,a2,0
     d06:	00090003          	lb	zero,0(s2)
     d0a:	0100                	addi	s0,sp,128
     d0c:	0905                	addi	s2,s2,1
     d0e:	0200                	addi	s0,sp,256
     d10:	0304                	addi	s1,sp,384
     d12:	0306                	slli	t1,t1,0x1
     d14:	00080973          	0x80973
     d18:	0501                	addi	a0,a0,0
     d1a:	000e                	c.slli	zero,0x3
     d1c:	0402                	c.slli64	s0
     d1e:	00030603          	lb	a2,0(t1)
     d22:	0409                	addi	s0,s0,2
     d24:	0100                	addi	s0,sp,128
     d26:	0200                	addi	s0,sp,256
     d28:	0304                	addi	s1,sp,384
     d2a:	04090103          	lb	sp,64(s2)
     d2e:	0100                	addi	s0,sp,128
     d30:	0200                	addi	s0,sp,256
     d32:	0304                	addi	s1,sp,384
     d34:	02097f03          	0x2097f03
     d38:	0100                	addi	s0,sp,128
     d3a:	0905                	addi	s2,s2,1
     d3c:	0200                	addi	s0,sp,256
     d3e:	0304                	addi	s1,sp,384
     d40:	0306                	slli	t1,t1,0x1
     d42:	0901                	addi	s2,s2,0
     d44:	0004                	0x4
     d46:	0501                	addi	a0,a0,0
     d48:	000e                	c.slli	zero,0x3
     d4a:	0402                	c.slli64	s0
     d4c:	00030603          	lb	a2,0(t1)
     d50:	0009                	c.nop	2
     d52:	0100                	addi	s0,sp,128
     d54:	1d05                	addi	s10,s10,-31
     d56:	0200                	addi	s0,sp,256
     d58:	0304                	addi	s1,sp,384
     d5a:	0306                	slli	t1,t1,0x1
     d5c:	097e                	slli	s2,s2,0x1f
     d5e:	0004                	0x4
     d60:	0501                	addi	a0,a0,0
     d62:	0309                	addi	t1,t1,2
     d64:	00040907          	0x40907
     d68:	0501                	addi	a0,a0,0
     d6a:	0003060b          	0x3060b
     d6e:	0009                	c.nop	2
     d70:	0100                	addi	s0,sp,128
     d72:	2005                	jal	d92 <memset+0x16>
     d74:	0200                	addi	s0,sp,256
     d76:	0204                	addi	s1,sp,256
     d78:	0306                	slli	t1,t1,0x1
     d7a:	097f                	0x97f
     d7c:	0002                	c.slli64	zero
     d7e:	0501                	addi	a0,a0,0
     d80:	0022                	c.slli	zero,0x8
     d82:	0402                	c.slli64	s0
     d84:	0602                	c.slli64	a2
     d86:	00090003          	lb	zero,0(s2)
     d8a:	0100                	addi	s0,sp,128
     d8c:	0905                	addi	s2,s2,1
     d8e:	0306                	slli	t1,t1,0x1
     d90:	0909                	addi	s2,s2,2
     d92:	0004                	0x4
     d94:	0501                	addi	a0,a0,0
     d96:	0615                	addi	a2,a2,5
     d98:	00090003          	lb	zero,0(s2)
     d9c:	0100                	addi	s0,sp,128
     d9e:	0c05                	addi	s8,s8,1
     da0:	06090003          	lb	zero,96(s2)
     da4:	0100                	addi	s0,sp,128
     da6:	1a05                	addi	s4,s4,-31
     da8:	0200                	addi	s0,sp,256
     daa:	0204                	addi	s1,sp,256
     dac:	0306                	slli	t1,t1,0x1
     dae:	097f                	0x97f
     db0:	0004                	0x4
     db2:	0501                	addi	a0,a0,0
     db4:	0309                	addi	t1,t1,2
     db6:	00040907          	0x40907
     dba:	0501                	addi	a0,a0,0
     dbc:	0003060b          	0x3060b
     dc0:	0009                	c.nop	2
     dc2:	0100                	addi	s0,sp,128
     dc4:	2005                	jal	de4 <memset+0x68>
     dc6:	0200                	addi	s0,sp,256
     dc8:	0204                	addi	s1,sp,256
     dca:	0306                	slli	t1,t1,0x1
     dcc:	097f                	0x97f
     dce:	0002                	c.slli64	zero
     dd0:	0501                	addi	a0,a0,0
     dd2:	0022                	c.slli	zero,0x8
     dd4:	0402                	c.slli64	s0
     dd6:	0602                	c.slli64	a2
     dd8:	00090003          	lb	zero,0(s2)
     ddc:	0100                	addi	s0,sp,128
     dde:	1805                	addi	a6,a6,-31
     de0:	0200                	addi	s0,sp,256
     de2:	0104                	addi	s1,sp,128
     de4:	0306                	slli	t1,t1,0x1
     de6:	0900                	addi	s0,sp,144
     de8:	0002                	c.slli64	zero
     dea:	0501                	addi	a0,a0,0
     dec:	0005                	c.nop	1
     dee:	0402                	c.slli64	s0
     df0:	0601                	addi	a2,a2,0
     df2:	08090003          	lb	zero,128(s2)
     df6:	0100                	addi	s0,sp,128
     df8:	0b05                	addi	s6,s6,1
     dfa:	0306                	slli	t1,t1,0x1
     dfc:	090c                	addi	a1,sp,144
     dfe:	0004                	0x4
     e00:	0501                	addi	a0,a0,0
     e02:	0305                	addi	t1,t1,1
     e04:	00c2                	slli	ra,ra,0x10
     e06:	0409                	addi	s0,s0,2
     e08:	0100                	addi	s0,sp,128
     e0a:	0e090203          	lb	tp,224(s2)
     e0e:	0100                	addi	s0,sp,128
     e10:	1b05                	addi	s6,s6,-31
     e12:	0306                	slli	t1,t1,0x1
     e14:	0900                	addi	s0,sp,144
     e16:	0000                	unimp
     e18:	0501                	addi	a0,a0,0
     e1a:	09010313          	addi	t1,sp,144
     e1e:	0004                	0x4
     e20:	0501                	addi	a0,a0,0
     e22:	0015                	c.nop	5
int main(){
     e24:	0402                	c.slli64	s0
     e26:	0601                	addi	a2,a2,0
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e28:	08097f03          	0x8097f03
     e2c:	0100                	addi	s0,sp,128
     e2e:	0505                	addi	a0,a0,1
     e30:	0200                	addi	s0,sp,256
     e32:	0104                	addi	s1,sp,128
     e34:	0306                	slli	t1,t1,0x1
int main(){
     e36:	0900                	addi	s0,sp,144
     e38:	0000                	unimp
     e3a:	0601                	addi	a2,a2,0
     e3c:	04090403          	lb	s0,64(s2)
     e40:	0100                	addi	s0,sp,128
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e42:	00090203          	lb	tp,0(s2)
    resultkon[0] = 0xA;
     e46:	0100                	addi	s0,sp,128
     e48:	0105                	addi	sp,sp,1
     e4a:	0306                	slli	t1,t1,0x1
     e4c:	0901                	addi	s2,s2,0
    keys = generate_keys(N, p, q);
     e4e:	0000                	unimp
     e50:	0501                	addi	a0,a0,0
     e52:	0609                	addi	a2,a2,2
     e54:	097fb803          	0x97fb803
    resultkon[0] = 0xA;
     e58:	002a                	c.slli	zero,0xa
    keys = generate_keys(N, p, q);
     e5a:	0501                	addi	a0,a0,0
     e5c:	0616                	slli	a2,a2,0x5
    for(i = 0; i < N; ++i){
     e5e:	00090003          	lb	zero,0(s2)
        secret_key_f[i] = keys[i];
     e62:	0100                	addi	s0,sp,128
     e64:	0d05                	addi	s10,s10,1
     e66:	04090003          	lb	zero,64(s2)
     e6a:	0100                	addi	s0,sp,128
     e6c:	1305                	addi	t1,t1,-31
    for(i = 0; i < N; ++i){
     e6e:	04090003          	lb	zero,64(s2)
     e72:	0100                	addi	s0,sp,128
    for(i = N; i < (2*N); ++i){
     e74:	0505                	addi	a0,a0,1
     e76:	04090603          	lb	a2,64(s2)
     e7a:	0100                	addi	s0,sp,128
     e7c:	1305                	addi	t1,t1,-31
     e7e:	06097a03          	0x6097a03
        secret_key_fp[i-(2*N)] = keys[i];
     e82:	0100                	addi	s0,sp,128
     e84:	0505                	addi	a0,a0,1
     e86:	0306                	slli	t1,t1,0x1
     e88:	0906                	slli	s2,s2,0x1
    for(i = (2*N); i < (3*N); ++i){
     e8a:	0002                	c.slli64	zero
     e8c:	0501                	addi	a0,a0,0
    for(i = (3*N); i < (4*N); ++i){
     e8e:	0309                	addi	t1,t1,2
     e90:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     e94:	0501                	addi	a0,a0,0
     e96:	00030613          	mv	a2,t1
        public_key[i-(4*N)] = keys[i];
     e9a:	0009                	c.nop	2
     e9c:	0100                	addi	s0,sp,128
     e9e:	0505                	addi	a0,a0,1
     ea0:	0e090903          	lb	s2,224(s2)
    for(i = (4*N); i < (5*N); ++i){
     ea4:	0100                	addi	s0,sp,128
     ea6:	1305                	addi	t1,t1,-31
     ea8:	04097703          	0x4097703
     eac:	0100                	addi	s0,sp,128
     eae:	0505                	addi	a0,a0,1
        ring_poly[i-(5*N)] = keys[i];
     eb0:	0306                	slli	t1,t1,0x1
     eb2:	0909                	addi	s2,s2,2
     eb4:	0002                	c.slli64	zero
     eb6:	0301                	addi	t1,t1,0
     eb8:	0906                	slli	s2,s2,0x1
    for(i = (5*N); i < (6*N+1); ++i){
     eba:	0002                	c.slli64	zero
     ebc:	0301                	addi	t1,t1,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ebe:	0909                	addi	s2,s2,2
     ec0:	0008                	0x8
     ec2:	0301                	addi	t1,t1,0
     ec4:	00080907          	0x80907
     ec8:	0301                	addi	t1,t1,0
     eca:	0901                	addi	s2,s2,0
     ecc:	0008                	0x8
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     ece:	0501                	addi	a0,a0,0
     ed0:	0309                	addi	t1,t1,2
     ed2:	0904                	addi	s1,sp,144
     ed4:	0008                	0x8
     ed6:	0501                	addi	a0,a0,0
     ed8:	0610                	addi	a2,sp,768
     eda:	00090003          	lb	zero,0(s2)
     ede:	0100                	addi	s0,sp,128
     ee0:	1c05                	addi	s8,s8,-31
     ee2:	0200                	addi	s0,sp,256
            resultkon[0] = 0xC;}
     ee4:	0104                	addi	s1,sp,128
    for(i = 0; i < 32; ++i){
     ee6:	0306                	slli	t1,t1,0x1
     ee8:	0900                	addi	s0,sp,144
        if(!(message[i] == Dec_Message[i])){
     eea:	0002                	c.slli64	zero
     eec:	0501                	addi	a0,a0,0
     eee:	0009                	c.nop	2
     ef0:	0402                	c.slli64	s0
     ef2:	0601                	addi	a2,a2,0
     ef4:	08090003          	lb	zero,128(s2)
     ef8:	0100                	addi	s0,sp,128
            resultkon[0] = 0xB;
     efa:	0d05                	addi	s10,s10,1
     efc:	0306                	slli	t1,t1,0x1
}
     efe:	0901                	addi	s2,s2,0
     f00:	0008                	0x8
     f02:	0501                	addi	a0,a0,0
     f04:	0003060f          	0x3060f
     f08:	0009                	c.nop	2
     f0a:	0100                	addi	s0,sp,128
     f0c:	2405                	jal	112c <_edata+0x80>
     f0e:	0200                	addi	s0,sp,256
     f10:	0204                	addi	s1,sp,256
            resultkon[0] = 0xC;}
     f12:	0306                	slli	t1,t1,0x1
    for(i = 0; i < 32; ++i){
     f14:	097f                	0x97f
     f16:	0002                	c.slli64	zero
     f18:	0501                	addi	a0,a0,0
     f1a:	0026                	c.slli	zero,0x9
     f1c:	0402                	c.slli64	s0
     f1e:	0602                	c.slli64	a2
     f20:	00090003          	lb	zero,0(s2)
     f24:	0100                	addi	s0,sp,128
     f26:	0d05                	addi	s10,s10,1
     f28:	0200                	addi	s0,sp,256
     f2a:	0304                	addi	s1,sp,384
     f2c:	0306                	slli	t1,t1,0x1
     f2e:	0909                	addi	s2,s2,2
     f30:	0004                	0x4
     f32:	0501                	addi	a0,a0,0
     f34:	0012                	c.slli	zero,0x4
     f36:	0402                	c.slli64	s0
     f38:	00030603          	lb	a2,0(t1)
     f3c:	0009                	c.nop	2
     f3e:	0100                	addi	s0,sp,128
     f40:	2105                	jal	1360 <product2+0x5c>
     f42:	0200                	addi	s0,sp,256
     f44:	0304                	addi	s1,sp,384
     f46:	0306                	slli	t1,t1,0x1
     f48:	097f                	0x97f
     f4a:	000a                	c.slli	zero,0x2
     f4c:	0501                	addi	a0,a0,0
     f4e:	0015                	c.nop	5
     f50:	0402                	c.slli64	s0
     f52:	0301                	addi	t1,t1,0
     f54:	0900                	addi	s0,sp,144
     f56:	0002                	c.slli64	zero
     f58:	0501                	addi	a0,a0,0
     f5a:	0009                	c.nop	2
     f5c:	0402                	c.slli64	s0
     f5e:	0601                	addi	a2,a2,0
     f60:	00090003          	lb	zero,0(s2)
     f64:	0100                	addi	s0,sp,128
     f66:	0200                	addi	s0,sp,256
     f68:	0304                	addi	s1,sp,384
     f6a:	0306                	slli	t1,t1,0x1
     f6c:	090d                	addi	s2,s2,3
     f6e:	0006                	c.slli	zero,0x1
     f70:	0501                	addi	a0,a0,0
     f72:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
     f76:	00030603          	lb	a2,0(t1)
     f7a:	0009                	c.nop	2
     f7c:	0100                	addi	s0,sp,128
     f7e:	2505                	jal	159e <result+0x42>
     f80:	0200                	addi	s0,sp,256
     f82:	0304                	addi	s1,sp,384
     f84:	0306                	slli	t1,t1,0x1
     f86:	097f                	0x97f
     f88:	000c                	0xc
     f8a:	0501                	addi	a0,a0,0
     f8c:	033c                	addi	a5,sp,392
     f8e:	090a                	slli	s2,s2,0x2
     f90:	0006                	c.slli	zero,0x1
     f92:	0501                	addi	a0,a0,0
     f94:	0305                	addi	t1,t1,1
     f96:	0902                	c.slli64	s2
     f98:	0000                	unimp
     f9a:	0301                	addi	t1,t1,0
     f9c:	0901                	addi	s2,s2,0
     f9e:	0000                	unimp
     fa0:	0301                	addi	t1,t1,0
     fa2:	0901                	addi	s2,s2,0
     fa4:	0000                	unimp
     fa6:	0501                	addi	a0,a0,0
     fa8:	0609                	addi	a2,a2,2
     faa:	00090003          	lb	zero,0(s2)
     fae:	0100                	addi	s0,sp,128
     fb0:	3c05                	jal	9e0 <generate_keys+0x1f4>
     fb2:	04097c03          	0x4097c03
     fb6:	0100                	addi	s0,sp,128
     fb8:	0905                	addi	s2,s2,1
     fba:	02090403          	lb	s0,32(s2)
     fbe:	0100                	addi	s0,sp,128
     fc0:	3c05                	jal	9f0 <generate_keys+0x204>
     fc2:	04097c03          	0x4097c03
     fc6:	0100                	addi	s0,sp,128
     fc8:	0905                	addi	s2,s2,1
     fca:	1c090403          	lb	s0,448(s2)
     fce:	0100                	addi	s0,sp,128
     fd0:	06090103          	lb	sp,96(s2)
     fd4:	0100                	addi	s0,sp,128
     fd6:	06090103          	lb	sp,96(s2)
     fda:	0100                	addi	s0,sp,128
     fdc:	06090203          	lb	tp,96(s2)
     fe0:	0100                	addi	s0,sp,128
     fe2:	06090103          	lb	sp,96(s2)
     fe6:	0100                	addi	s0,sp,128
     fe8:	06090103          	lb	sp,96(s2)
     fec:	0100                	addi	s0,sp,128
     fee:	06090103          	lb	sp,96(s2)
     ff2:	0100                	addi	s0,sp,128
     ff4:	3c05                	jal	a24 <generate_keys+0x238>
     ff6:	04097503          	0x4097503
     ffa:	0100                	addi	s0,sp,128
     ffc:	0905                	addi	s2,s2,1
     ffe:	06090403          	lb	s0,96(s2)
    1002:	0100                	addi	s0,sp,128
    1004:	0505                	addi	a0,a0,1
    1006:	0306                	slli	t1,t1,0x1
    1008:	0901                	addi	s2,s2,0
    100a:	0004                	0x4
    100c:	0301                	addi	t1,t1,0
    100e:	0901                	addi	s2,s2,0
    1010:	0000                	unimp
    1012:	0301                	addi	t1,t1,0
    1014:	0902                	c.slli64	s2
    1016:	0000                	unimp
    1018:	0301                	addi	t1,t1,0
    101a:	0901                	addi	s2,s2,0
    101c:	0000                	unimp
    101e:	0301                	addi	t1,t1,0
    1020:	0901                	addi	s2,s2,0
    1022:	0000                	unimp
    1024:	0301                	addi	t1,t1,0
    1026:	0901                	addi	s2,s2,0
    1028:	0000                	unimp
    102a:	0501                	addi	a0,a0,0
    102c:	0609                	addi	a2,a2,2
    102e:	00090003          	lb	zero,0(s2)
    1032:	0100                	addi	s0,sp,128
    1034:	0505                	addi	a0,a0,1
    1036:	0306                	slli	t1,t1,0x1
    1038:	0901                	addi	s2,s2,0
    103a:	0002                	c.slli64	zero
    103c:	0301                	addi	t1,t1,0
    103e:	0901                	addi	s2,s2,0
    1040:	0000                	unimp
    1042:	0301                	addi	t1,t1,0
    1044:	0901                	addi	s2,s2,0
    1046:	0000                	unimp
    1048:	0301                	addi	t1,t1,0
    104a:	0901                	addi	s2,s2,0
    104c:	0000                	unimp
    104e:	0301                	addi	t1,t1,0
    1050:	0902                	c.slli64	s2
    1052:	0000                	unimp
    1054:	0301                	addi	t1,t1,0
    1056:	0901                	addi	s2,s2,0
    1058:	0000                	unimp
    105a:	0501                	addi	a0,a0,0
    105c:	060c                	addi	a1,sp,768
    105e:	00090003          	lb	zero,0(s2)
    1062:	0100                	addi	s0,sp,128
    1064:	1105                	addi	sp,sp,-31
    1066:	02090303          	lb	t1,32(s2)
    106a:	0100                	addi	s0,sp,128
    106c:	0200                	addi	s0,sp,256
    106e:	0104                	addi	s1,sp,128
    1070:	0306                	slli	t1,t1,0x1
    1072:	097d                	addi	s2,s2,31
    1074:	0008                	0x8
    1076:	0501                	addi	a0,a0,0
    1078:	0005                	c.nop	1
    107a:	0402                	c.slli64	s0
    107c:	0601                	addi	a2,a2,0
    107e:	00090003          	lb	zero,0(s2)
    1082:	0100                	addi	s0,sp,128
    1084:	0306                	slli	t1,t1,0x1
    1086:	0906                	slli	s2,s2,0x1
    1088:	0004                	0x4
    108a:	0301                	addi	t1,t1,0
    108c:	0901                	addi	s2,s2,0
    108e:	0008                	0x8
    1090:	0301                	addi	t1,t1,0
    1092:	0905                	addi	s2,s2,1
    1094:	0008                	0x8
    1096:	0501                	addi	a0,a0,0
    1098:	060d                	addi	a2,a2,3
    109a:	00090003          	lb	zero,0(s2)
    109e:	0100                	addi	s0,sp,128
    10a0:	0505                	addi	a0,a0,1
    10a2:	0306                	slli	t1,t1,0x1
    10a4:	00060903          	lb	s2,0(a2)
    10a8:	0501                	addi	a0,a0,0
    10aa:	0900030b          	0x900030b
    10ae:	0000                	unimp
    10b0:	0501                	addi	a0,a0,0
    10b2:	0624                	addi	s1,sp,776
    10b4:	00091603          	lh	a2,0(s2)
    10b8:	0100                	addi	s0,sp,128
    10ba:	0505                	addi	a0,a0,1
    10bc:	08093803          	0x8093803
    10c0:	0100                	addi	s0,sp,128
    10c2:	0905                	addi	s2,s2,1
    10c4:	0306                	slli	t1,t1,0x1
    10c6:	7fb4                	flw	fa3,120(a5)
    10c8:	0809                	addi	a6,a6,2
    10ca:	0100                	addi	s0,sp,128
    10cc:	0505                	addi	a0,a0,1
    10ce:	00090803          	lb	a6,0(s2)
    10d2:	0100                	addi	s0,sp,128
    10d4:	08090903          	lb	s2,128(s2)
    10d8:	0100                	addi	s0,sp,128
    10da:	0905                	addi	s2,s2,1
    10dc:	08090203          	lb	tp,128(s2)
    10e0:	0100                	addi	s0,sp,128
    10e2:	0f05                	addi	t5,t5,1
    10e4:	0306                	slli	t1,t1,0x1
    10e6:	0900                	addi	s0,sp,144
    10e8:	0000                	unimp
    10ea:	0501                	addi	a0,a0,0
    10ec:	0609                	addi	a2,a2,2
    10ee:	0c090103          	lb	sp,192(s2)
    10f2:	0100                	addi	s0,sp,128
    10f4:	1905                	addi	s2,s2,-31
    10f6:	0200                	addi	s0,sp,256
    10f8:	0104                	addi	s1,sp,128
    10fa:	04090003          	lb	zero,64(s2)
    10fe:	0100                	addi	s0,sp,128
    1100:	0905                	addi	s2,s2,1
    1102:	0200                	addi	s0,sp,256
    1104:	0104                	addi	s1,sp,128
    1106:	0306                	slli	t1,t1,0x1
    1108:	0900                	addi	s0,sp,144
    110a:	0000                	unimp
    110c:	0501                	addi	a0,a0,0
    110e:	0605                	addi	a2,a2,1
    1110:	08090903          	lb	s2,128(s2)
    1114:	0100                	addi	s0,sp,128
    1116:	08090103          	lb	sp,128(s2)
    111a:	0100                	addi	s0,sp,128
    111c:	08090903          	lb	s2,128(s2)
    1120:	0100                	addi	s0,sp,128
    1122:	0905                	addi	s2,s2,1
    1124:	08090203          	lb	tp,128(s2)
    1128:	0100                	addi	s0,sp,128
    112a:	1005                	c.nop	-31
    112c:	0306                	slli	t1,t1,0x1
    112e:	0900                	addi	s0,sp,144
    1130:	0000                	unimp
    1132:	0501                	addi	a0,a0,0
    1134:	0605                	addi	a2,a2,1
    1136:	0e090403          	lb	s0,224(s2)
    113a:	0100                	addi	s0,sp,128
    113c:	06090903          	lb	s2,96(s2)
    1140:	0100                	addi	s0,sp,128
    1142:	0905                	addi	s2,s2,1
    1144:	08090403          	lb	s0,128(s2)
    1148:	0100                	addi	s0,sp,128
    114a:	1005                	c.nop	-31
    114c:	0306                	slli	t1,t1,0x1
    114e:	0900                	addi	s0,sp,144
    1150:	0000                	unimp
    1152:	0501                	addi	a0,a0,0
    1154:	0605                	addi	a2,a2,1
    1156:	10090403          	lb	s0,256(s2)
    115a:	0100                	addi	s0,sp,128
    115c:	06090903          	lb	s2,96(s2)
    1160:	0100                	addi	s0,sp,128
    1162:	08090503          	lb	a0,128(s2)
    1166:	0100                	addi	s0,sp,128
    1168:	08090103          	lb	sp,128(s2)
    116c:	0100                	addi	s0,sp,128
    116e:	08090803          	lb	a6,128(s2)
    1172:	0100                	addi	s0,sp,128
    1174:	0105                	addi	sp,sp,1
    1176:	08090403          	lb	s0,128(s2)
    117a:	0100                	addi	s0,sp,128
    117c:	08090103          	lb	sp,128(s2)
    1180:	0100                	addi	s0,sp,128
    1182:	08090103          	lb	sp,128(s2)
    1186:	0100                	addi	s0,sp,128
    1188:	08090103          	lb	sp,128(s2)
    118c:	0100                	addi	s0,sp,128
    118e:	0905                	addi	s2,s2,1
    1190:	08090203          	lb	tp,128(s2)
    1194:	0100                	addi	s0,sp,128
    1196:	1205                	addi	tp,tp,-31
    1198:	0306                	slli	t1,t1,0x1
    119a:	7fa2                	flw	ft11,40(sp)
    119c:	0009                	c.nop	2
    119e:	0100                	addi	s0,sp,128
    11a0:	1005                	c.nop	-31
    11a2:	0900de03          	lhu	t3,144(ra)
    11a6:	0002                	c.slli64	zero
    11a8:	0501                	addi	a0,a0,0
    11aa:	0015                	c.nop	5
    11ac:	0402                	c.slli64	s0
    11ae:	0601                	addi	a2,a2,0
    11b0:	02090003          	lb	zero,32(s2)
    11b4:	0100                	addi	s0,sp,128
    11b6:	0905                	addi	s2,s2,1
    11b8:	0200                	addi	s0,sp,256
    11ba:	0104                	addi	s1,sp,128
    11bc:	0306                	slli	t1,t1,0x1
    11be:	0900                	addi	s0,sp,144
    11c0:	0000                	unimp
    11c2:	0501                	addi	a0,a0,0
    11c4:	a003060b          	0xa003060b
    11c8:	097f                	0x97f
    11ca:	0004                	0x4
    11cc:	0501                	addi	a0,a0,0
    11ce:	0610                	addi	a2,sp,768
    11d0:	0900eb03          	0x900eb03
    11d4:	0004                	0x4
    11d6:	0301                	addi	t1,t1,0
    11d8:	0901                	addi	s2,s2,0
    11da:	0002                	c.slli64	zero
    11dc:	0501                	addi	a0,a0,0
    11de:	0015                	c.nop	5
    11e0:	0402                	c.slli64	s0
    11e2:	0601                	addi	a2,a2,0
    11e4:	02097f03          	0x2097f03
    11e8:	0100                	addi	s0,sp,128
    11ea:	0905                	addi	s2,s2,1
    11ec:	0200                	addi	s0,sp,256
    11ee:	0104                	addi	s1,sp,128
    11f0:	0306                	slli	t1,t1,0x1
    11f2:	0900                	addi	s0,sp,144
    11f4:	0000                	unimp
    11f6:	0501                	addi	a0,a0,0
    11f8:	0015                	c.nop	5
    11fa:	0402                	c.slli64	s0
    11fc:	0601                	addi	a2,a2,0
    11fe:	0c090c03          	lb	s8,192(s2)
    1202:	0100                	addi	s0,sp,128
    1204:	0905                	addi	s2,s2,1
    1206:	0200                	addi	s0,sp,256
    1208:	0104                	addi	s1,sp,128
    120a:	0306                	slli	t1,t1,0x1
    120c:	0900                	addi	s0,sp,144
    120e:	0000                	unimp
    1210:	0601                	addi	a2,a2,0
    1212:	04090503          	lb	a0,64(s2)
    1216:	0100                	addi	s0,sp,128
    1218:	00090103          	lb	sp,0(s2)
    121c:	0100                	addi	s0,sp,128
    121e:	0505                	addi	a0,a0,1
    1220:	0306                	slli	t1,t1,0x1
    1222:	0901                	addi	s2,s2,0
    1224:	0000                	unimp
    1226:	0501                	addi	a0,a0,0
    1228:	0009                	c.nop	2
    122a:	0402                	c.slli64	s0
    122c:	f6030603          	lb	a2,-160(t1)
    1230:	097e                	slli	s2,s2,0x1f
    1232:	002a                	c.slli	zero,0xa
    1234:	0501                	addi	a0,a0,0
    1236:	0011                	c.nop	4
    1238:	0402                	c.slli64	s0
    123a:	00030603          	lb	a2,0(t1)
    123e:	0409                	addi	s0,s0,2
    1240:	0100                	addi	s0,sp,128
    1242:	0200                	addi	s0,sp,256
    1244:	0304                	addi	s1,sp,384
    1246:	04090103          	lb	sp,64(s2)
    124a:	0100                	addi	s0,sp,128
    124c:	0200                	addi	s0,sp,256
    124e:	0304                	addi	s1,sp,384
    1250:	02097f03          	0x2097f03
    1254:	0100                	addi	s0,sp,128
    1256:	0905                	addi	s2,s2,1
    1258:	0200                	addi	s0,sp,256
    125a:	0304                	addi	s1,sp,384
    125c:	0306                	slli	t1,t1,0x1
    125e:	0901                	addi	s2,s2,0
    1260:	0004                	0x4
    1262:	0501                	addi	a0,a0,0
    1264:	0011                	c.nop	4
    1266:	0402                	c.slli64	s0
    1268:	00030603          	lb	a2,0(t1)
    126c:	0009                	c.nop	2
    126e:	0100                	addi	s0,sp,128
    1270:	1b05                	addi	s6,s6,-31
    1272:	0200                	addi	s0,sp,256
    1274:	0304                	addi	s1,sp,384
    1276:	0306                	slli	t1,t1,0x1
    1278:	097c                	addi	a5,sp,156
    127a:	0004                	0x4
    127c:	0501                	addi	a0,a0,0
    127e:	000d                	c.nop	3
    1280:	0402                	c.slli64	s0
    1282:	09260303          	lb	t1,146(a2)
    1286:	0004                	0x4
    1288:	0501                	addi	a0,a0,0
    128a:	0022                	c.slli	zero,0x8
    128c:	0402                	c.slli64	s0
    128e:	00030603          	lb	a2,0(t1)
    1292:	0009                	c.nop	2
    1294:	0100                	addi	s0,sp,128
    1296:	2a05                	jal	13c6 <product2+0xc2>
    1298:	0200                	addi	s0,sp,256
    129a:	0304                	addi	s1,sp,384
    129c:	08097f03          	0x8097f03
    12a0:	0100                	addi	s0,sp,128
    12a2:	1d05                	addi	s10,s10,-31
    12a4:	0200                	addi	s0,sp,256
    12a6:	0304                	addi	s1,sp,384
    12a8:	04090103          	lb	sp,64(s2)
    12ac:	0100                	addi	s0,sp,128
    12ae:	2a05                	jal	13de <product2+0xda>
    12b0:	0200                	addi	s0,sp,256
    12b2:	0304                	addi	s1,sp,384
    12b4:	0306                	slli	t1,t1,0x1
    12b6:	097f                	0x97f
    12b8:	0004                	0x4
    12ba:	0501                	addi	a0,a0,0
    12bc:	0402000f          	0x402000f
    12c0:	00cf0303          	lb	t1,12(t5)
    12c4:	0209                	addi	tp,tp,2
    12c6:	0100                	addi	s0,sp,128
    12c8:	1705                	addi	a4,a4,-31
    12ca:	0200                	addi	s0,sp,256
    12cc:	0304                	addi	s1,sp,384
    12ce:	0306                	slli	t1,t1,0x1
    12d0:	0900                	addi	s0,sp,144
    12d2:	0004                	0x4
    12d4:	0501                	addi	a0,a0,0
    12d6:	0402001b          	0x402001b
    12da:	09010303          	lb	t1,144(sp)
    12de:	0004                	0x4
    12e0:	0501                	addi	a0,a0,0
    12e2:	0016                	c.slli	zero,0x5
    12e4:	0402                	c.slli64	s0
    12e6:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    12ea:	0002                	c.slli64	zero
    12ec:	0501                	addi	a0,a0,0
    12ee:	04020017          	auipc	zero,0x4020
    12f2:	097f0303          	lb	t1,151(t5)
    12f6:	0002                	c.slli64	zero
    12f8:	0501                	addi	a0,a0,0
    12fa:	000d                	c.nop	3
    12fc:	0402                	c.slli64	s0
    12fe:	01030603          	lb	a2,16(t1)
    1302:	0409                	addi	s0,s0,2
    1304:	0100                	addi	s0,sp,128
    1306:	2005                	jal	1326 <product2+0x22>
    1308:	0200                	addi	s0,sp,256
    130a:	0304                	addi	s1,sp,384
    130c:	0306                	slli	t1,t1,0x1
    130e:	097a                	slli	s2,s2,0x1e
    1310:	0000                	unimp
    1312:	0501                	addi	a0,a0,0
    1314:	0016                	c.slli	zero,0x5
    1316:	0402                	c.slli64	s0
    1318:	09060303          	lb	t1,144(a2)
    131c:	0002                	c.slli64	zero
    131e:	0501                	addi	a0,a0,0
    1320:	0020                	addi	s0,sp,8
    1322:	0402                	c.slli64	s0
    1324:	7a030603          	lb	a2,1952(t1)
    1328:	0209                	addi	tp,tp,2
    132a:	0100                	addi	s0,sp,128
    132c:	0d05                	addi	s10,s10,1
    132e:	02090c03          	lb	s8,32(s2)
    1332:	0100                	addi	s0,sp,128
    1334:	1b05                	addi	s6,s6,-31
    1336:	0306                	slli	t1,t1,0x1
    1338:	0900                	addi	s0,sp,144
    133a:	0000                	unimp
    133c:	0501                	addi	a0,a0,0
    133e:	0320                	addi	s0,sp,392
    1340:	0900                	addi	s0,sp,144
    1342:	0008                	0x8
    1344:	0501                	addi	a0,a0,0
    1346:	0310                	addi	a2,sp,384
    1348:	0900                	addi	s0,sp,144
    134a:	0004                	0x4
    134c:	0501                	addi	a0,a0,0
    134e:	001e                	c.slli	zero,0x7
    1350:	0402                	c.slli64	s0
    1352:	0602                	c.slli64	a2
    1354:	04097f03          	0x4097f03
    1358:	0100                	addi	s0,sp,128
    135a:	0d05                	addi	s10,s10,1
    135c:	0200                	addi	s0,sp,256
    135e:	0304                	addi	s1,sp,384
    1360:	04090d03          	lb	s10,64(s2)
    1364:	0100                	addi	s0,sp,128
    1366:	2005                	jal	1386 <product2+0x82>
    1368:	0200                	addi	s0,sp,256
    136a:	0304                	addi	s1,sp,384
    136c:	0306                	slli	t1,t1,0x1
    136e:	0900                	addi	s0,sp,144
    1370:	0000                	unimp
    1372:	0001                	nop
    1374:	0402                	c.slli64	s0
    1376:	097f0303          	lb	t1,151(t5)
    137a:	0002                	c.slli64	zero
    137c:	0001                	nop
    137e:	0402                	c.slli64	s0
    1380:	09010303          	lb	t1,144(sp)
    1384:	0004                	0x4
    1386:	0501                	addi	a0,a0,0
    1388:	0025                	c.nop	9
    138a:	0402                	c.slli64	s0
    138c:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1390:	0004                	0x4
    1392:	0501                	addi	a0,a0,0
    1394:	0015                	c.nop	5
    1396:	0402                	c.slli64	s0
    1398:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    139c:	0004                	0x4
    139e:	0501                	addi	a0,a0,0
    13a0:	0020                	addi	s0,sp,8
    13a2:	0402                	c.slli64	s0
    13a4:	7f030603          	lb	a2,2032(t1)
    13a8:	0409                	addi	s0,s0,2
    13aa:	0100                	addi	s0,sp,128
    13ac:	2805                	jal	13dc <product2+0xd8>
    13ae:	02090c03          	lb	s8,32(s2)
    13b2:	0100                	addi	s0,sp,128
    13b4:	0505                	addi	a0,a0,1
    13b6:	00090203          	lb	tp,0(s2)
    13ba:	0100                	addi	s0,sp,128
    13bc:	2805                	jal	13ec <product2+0xe8>
    13be:	0306                	slli	t1,t1,0x1
    13c0:	097e                	slli	s2,s2,0x1f
    13c2:	0000                	unimp
    13c4:	0301                	addi	t1,t1,0
    13c6:	0900                	addi	s0,sp,144
    13c8:	0036                	c.slli	zero,0xd
    13ca:	0501                	addi	a0,a0,0
    13cc:	0309                	addi	t1,t1,2
    13ce:	0902                	c.slli64	s2
    13d0:	0004                	0x4
    13d2:	0301                	addi	t1,t1,0
    13d4:	0901                	addi	s2,s2,0
    13d6:	0010                	0x10
    13d8:	0301                	addi	t1,t1,0
    13da:	097f                	0x97f
    13dc:	000a                	c.slli	zero,0x2
    13de:	0501                	addi	a0,a0,0
    13e0:	0605                	addi	a2,a2,1
    13e2:	6c090103          	lb	sp,1728(s2)
    13e6:	0100                	addi	s0,sp,128
    13e8:	1005                	c.nop	-31
    13ea:	0306                	slli	t1,t1,0x1
    13ec:	0906                	slli	s2,s2,0x1
    13ee:	0000                	unimp
    13f0:	0501                	addi	a0,a0,0
    13f2:	0309                	addi	t1,t1,2
    13f4:	097a                	slli	s2,s2,0x1e
    13f6:	0004                	0x4
    13f8:	0301                	addi	t1,t1,0
    13fa:	0906                	slli	s2,s2,0x1
    13fc:	0002                	c.slli64	zero
    13fe:	0501                	addi	a0,a0,0
    1400:	030e                	slli	t1,t1,0x3
    1402:	0905                	addi	s2,s2,1
    1404:	000e                	c.slli	zero,0x3
    1406:	0501                	addi	a0,a0,0
    1408:	0309                	addi	t1,t1,2
    140a:	0975                	addi	s2,s2,29
    140c:	000a                	c.slli	zero,0x2
    140e:	0501                	addi	a0,a0,0
    1410:	0605                	addi	a2,a2,1
    1412:	64090203          	lb	tp,1600(s2)
    1416:	0100                	addi	s0,sp,128
    1418:	00090103          	lb	sp,0(s2)
    141c:	0100                	addi	s0,sp,128
    141e:	00090103          	lb	sp,0(s2)
    1422:	0100                	addi	s0,sp,128
    1424:	00090103          	lb	sp,0(s2)
    1428:	0100                	addi	s0,sp,128
    142a:	00090103          	lb	sp,0(s2)
    142e:	0100                	addi	s0,sp,128
    1430:	00090103          	lb	sp,0(s2)
    1434:	0100                	addi	s0,sp,128
    1436:	00090103          	lb	sp,0(s2)
    143a:	0100                	addi	s0,sp,128
    143c:	00090303          	lb	t1,0(s2)
    1440:	0100                	addi	s0,sp,128
    1442:	00090103          	lb	sp,0(s2)
    1446:	0100                	addi	s0,sp,128
    1448:	0e05                	addi	t3,t3,1
    144a:	0306                	slli	t1,t1,0x1
    144c:	0900                	addi	s0,sp,144
    144e:	0000                	unimp
    1450:	0501                	addi	a0,a0,0
    1452:	0605                	addi	a2,a2,1
    1454:	04090203          	lb	tp,64(s2)
    1458:	0100                	addi	s0,sp,128
    145a:	0b05                	addi	s6,s6,1
    145c:	0306                	slli	t1,t1,0x1
    145e:	0900                	addi	s0,sp,144
    1460:	0000                	unimp
    1462:	0501                	addi	a0,a0,0
    1464:	0010                	0x10
    1466:	0402                	c.slli64	s0
    1468:	0601                	addi	a2,a2,0
    146a:	02090003          	lb	zero,32(s2)
    146e:	0100                	addi	s0,sp,128
    1470:	0505                	addi	a0,a0,1
    1472:	0200                	addi	s0,sp,256
    1474:	0104                	addi	s1,sp,128
    1476:	0306                	slli	t1,t1,0x1
    1478:	0900                	addi	s0,sp,144
    147a:	0000                	unimp
    147c:	0301                	addi	t1,t1,0
    147e:	0906                	slli	s2,s2,0x1
    1480:	0006                	c.slli	zero,0x1
    1482:	0501                	addi	a0,a0,0
    1484:	0011                	c.nop	4
    1486:	0402                	c.slli64	s0
    1488:	0601                	addi	a2,a2,0
    148a:	04090003          	lb	zero,64(s2)
    148e:	0100                	addi	s0,sp,128
    1490:	0505                	addi	a0,a0,1
    1492:	0200                	addi	s0,sp,256
    1494:	0104                	addi	s1,sp,128
    1496:	0306                	slli	t1,t1,0x1
    1498:	0900                	addi	s0,sp,144
    149a:	0000                	unimp
    149c:	0501                	addi	a0,a0,0
    149e:	0907030b          	0x907030b
    14a2:	0004                	0x4
    14a4:	0501                	addi	a0,a0,0
    14a6:	0318                	addi	a4,sp,384
    14a8:	0901                	addi	s2,s2,0
    14aa:	0002                	c.slli64	zero
    14ac:	0501                	addi	a0,a0,0
    14ae:	0010                	0x10
    14b0:	0402                	c.slli64	s0
    14b2:	0601                	addi	a2,a2,0
    14b4:	08097f03          	0x8097f03
    14b8:	0100                	addi	s0,sp,128
    14ba:	0505                	addi	a0,a0,1
    14bc:	0200                	addi	s0,sp,256
    14be:	0104                	addi	s1,sp,128
    14c0:	0306                	slli	t1,t1,0x1
    14c2:	0900                	addi	s0,sp,144
    14c4:	0000                	unimp
    14c6:	0501                	addi	a0,a0,0
    14c8:	0316                	slli	t1,t1,0x5
    14ca:	0905                	addi	s2,s2,1
    14cc:	0008                	0x8
    14ce:	0501                	addi	a0,a0,0
    14d0:	0318                	addi	a4,sp,384
    14d2:	0901                	addi	s2,s2,0
    14d4:	0008                	0x8
    14d6:	0501                	addi	a0,a0,0
    14d8:	0010                	0x10
    14da:	0402                	c.slli64	s0
    14dc:	0601                	addi	a2,a2,0
    14de:	08097f03          	0x8097f03
    14e2:	0100                	addi	s0,sp,128
    14e4:	0505                	addi	a0,a0,1
    14e6:	0200                	addi	s0,sp,256
    14e8:	0104                	addi	s1,sp,128
    14ea:	0306                	slli	t1,t1,0x1
    14ec:	0900                	addi	s0,sp,144
    14ee:	0000                	unimp
    14f0:	0601                	addi	a2,a2,0
    14f2:	04090503          	lb	a0,64(s2)
    14f6:	0100                	addi	s0,sp,128
    14f8:	1a05                	addi	s4,s4,-31
    14fa:	0306                	slli	t1,t1,0x1
    14fc:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1500:	0501                	addi	a0,a0,0
    1502:	030a                	slli	t1,t1,0x2
    1504:	097d                	addi	s2,s2,31
    1506:	0006                	c.slli	zero,0x1
    1508:	0501                	addi	a0,a0,0
    150a:	0605                	addi	a2,a2,1
    150c:	0c090303          	lb	t1,192(s2)
    1510:	0100                	addi	s0,sp,128
    1512:	1805                	addi	a6,a6,-31
    1514:	0306                	slli	t1,t1,0x1
    1516:	0901                	addi	s2,s2,0
    1518:	0002                	c.slli64	zero
    151a:	0501                	addi	a0,a0,0
    151c:	0014                	0x14
    151e:	0402                	c.slli64	s0
    1520:	0601                	addi	a2,a2,0
    1522:	08097f03          	0x8097f03
    1526:	0100                	addi	s0,sp,128
    1528:	0505                	addi	a0,a0,1
    152a:	0200                	addi	s0,sp,256
    152c:	0104                	addi	s1,sp,128
    152e:	0306                	slli	t1,t1,0x1
    1530:	0900                	addi	s0,sp,144
    1532:	0000                	unimp
    1534:	0601                	addi	a2,a2,0
    1536:	04090603          	lb	a2,64(s2)
    153a:	0100                	addi	s0,sp,128
    153c:	0a05                	addi	s4,s4,1
    153e:	0306                	slli	t1,t1,0x1
    1540:	0900                	addi	s0,sp,144
    1542:	0000                	unimp
    1544:	0501                	addi	a0,a0,0
    1546:	0605                	addi	a2,a2,1
    1548:	0c090403          	lb	s0,192(s2)
    154c:	0100                	addi	s0,sp,128
    154e:	1a05                	addi	s4,s4,-31
    1550:	0306                	slli	t1,t1,0x1
    1552:	0900                	addi	s0,sp,144
    1554:	0006                	c.slli	zero,0x1
    1556:	0501                	addi	a0,a0,0
    1558:	0318                	addi	a4,sp,384
    155a:	0901                	addi	s2,s2,0
    155c:	0002                	c.slli64	zero
    155e:	0501                	addi	a0,a0,0
    1560:	0014                	0x14
    1562:	0402                	c.slli64	s0
    1564:	0601                	addi	a2,a2,0
    1566:	08097f03          	0x8097f03
    156a:	0100                	addi	s0,sp,128
    156c:	0505                	addi	a0,a0,1
    156e:	0200                	addi	s0,sp,256
    1570:	0104                	addi	s1,sp,128
    1572:	0306                	slli	t1,t1,0x1
    1574:	0900                	addi	s0,sp,144
    1576:	0000                	unimp
    1578:	0601                	addi	a2,a2,0
    157a:	04090503          	lb	a0,64(s2)
    157e:	0100                	addi	s0,sp,128
    1580:	0a05                	addi	s4,s4,1
    1582:	0306                	slli	t1,t1,0x1
    1584:	0900                	addi	s0,sp,144
    1586:	0000                	unimp
    1588:	0501                	addi	a0,a0,0
    158a:	0605                	addi	a2,a2,1
    158c:	0a090303          	lb	t1,160(s2)
    1590:	0100                	addi	s0,sp,128
    1592:	0b05                	addi	s6,s6,1
    1594:	0306                	slli	t1,t1,0x1
    1596:	0900                	addi	s0,sp,144
    1598:	0002                	c.slli64	zero
    159a:	0501                	addi	a0,a0,0
    159c:	0318                	addi	a4,sp,384
    159e:	0900                	addi	s0,sp,144
    15a0:	0002                	c.slli64	zero
    15a2:	0501                	addi	a0,a0,0
    15a4:	0010                	0x10
    15a6:	0402                	c.slli64	s0
    15a8:	0601                	addi	a2,a2,0
    15aa:	04090003          	lb	zero,64(s2)
    15ae:	0100                	addi	s0,sp,128
    15b0:	0505                	addi	a0,a0,1
    15b2:	0200                	addi	s0,sp,256
    15b4:	0104                	addi	s1,sp,128
    15b6:	0306                	slli	t1,t1,0x1
    15b8:	0900                	addi	s0,sp,144
    15ba:	0000                	unimp
    15bc:	0601                	addi	a2,a2,0
    15be:	04090603          	lb	a2,64(s2)
    15c2:	0100                	addi	s0,sp,128
    15c4:	0a05                	addi	s4,s4,1
    15c6:	0306                	slli	t1,t1,0x1
    15c8:	0900                	addi	s0,sp,144
    15ca:	0000                	unimp
    15cc:	0501                	addi	a0,a0,0
    15ce:	0605                	addi	a2,a2,1
    15d0:	08090403          	lb	s0,128(s2)
    15d4:	0100                	addi	s0,sp,128
    15d6:	1a05                	addi	s4,s4,-31
    15d8:	0306                	slli	t1,t1,0x1
    15da:	0900                	addi	s0,sp,144
    15dc:	0000                	unimp
    15de:	0501                	addi	a0,a0,0
    15e0:	0318                	addi	a4,sp,384
    15e2:	0901                	addi	s2,s2,0
    15e4:	000a                	c.slli	zero,0x2
    15e6:	0501                	addi	a0,a0,0
    15e8:	0014                	0x14
    15ea:	0402                	c.slli64	s0
    15ec:	0601                	addi	a2,a2,0
    15ee:	08097f03          	0x8097f03
    15f2:	0100                	addi	s0,sp,128
    15f4:	0505                	addi	a0,a0,1
    15f6:	0200                	addi	s0,sp,256
    15f8:	0104                	addi	s1,sp,128
    15fa:	0306                	slli	t1,t1,0x1
    15fc:	0900                	addi	s0,sp,144
    15fe:	0002                	c.slli64	zero
    1600:	0501                	addi	a0,a0,0
    1602:	031a                	slli	t1,t1,0x6
    1604:	0905                	addi	s2,s2,1
    1606:	0004                	0x4
    1608:	0501                	addi	a0,a0,0
    160a:	0318                	addi	a4,sp,384
    160c:	0901                	addi	s2,s2,0
    160e:	0004                	0x4
    1610:	0501                	addi	a0,a0,0
    1612:	031a                	slli	t1,t1,0x6
    1614:	097f                	0x97f
    1616:	0008                	0x8
    1618:	0501                	addi	a0,a0,0
    161a:	0014                	0x14
    161c:	0402                	c.slli64	s0
    161e:	0601                	addi	a2,a2,0
    1620:	08090003          	lb	zero,128(s2)
    1624:	0100                	addi	s0,sp,128
    1626:	0505                	addi	a0,a0,1
    1628:	0200                	addi	s0,sp,256
    162a:	0104                	addi	s1,sp,128
    162c:	0306                	slli	t1,t1,0x1
    162e:	0900                	addi	s0,sp,144
    1630:	0000                	unimp
    1632:	0601                	addi	a2,a2,0
    1634:	04090603          	lb	a2,64(s2)
    1638:	0100                	addi	s0,sp,128
    163a:	00090203          	lb	tp,0(s2)
    163e:	0100                	addi	s0,sp,128
    1640:	0105                	addi	sp,sp,1
    1642:	0306                	slli	t1,t1,0x1
    1644:	0901                	addi	s2,s2,0
    1646:	0000                	unimp
    1648:	0501                	addi	a0,a0,0
    164a:	0009                	c.nop	2
    164c:	0402                	c.slli64	s0
    164e:	bd030603          	lb	a2,-1072(t1)
    1652:	097f                	0x97f
    1654:	0040                	addi	s0,sp,4
    1656:	0501                	addi	a0,a0,0
    1658:	0012                	c.slli	zero,0x4
    165a:	0402                	c.slli64	s0
    165c:	00030603          	lb	a2,0(t1)
    1660:	0009                	c.nop	2
    1662:	0100                	addi	s0,sp,128
    1664:	1705                	addi	a4,a4,-31
    1666:	0200                	addi	s0,sp,256
    1668:	0304                	addi	s1,sp,384
    166a:	0306                	slli	t1,t1,0x1
    166c:	097f                	0x97f
    166e:	000a                	c.slli	zero,0x2
    1670:	0501                	addi	a0,a0,0
    1672:	0009                	c.nop	2
    1674:	0402                	c.slli64	s0
    1676:	09070303          	lb	t1,144(a4)
    167a:	0004                	0x4
    167c:	0501                	addi	a0,a0,0
    167e:	000e                	c.slli	zero,0x3
    1680:	0402                	c.slli64	s0
    1682:	00030603          	lb	a2,0(t1)
    1686:	0409                	addi	s0,s0,2
    1688:	0100                	addi	s0,sp,128
    168a:	0905                	addi	s2,s2,1
    168c:	0200                	addi	s0,sp,256
    168e:	0304                	addi	s1,sp,384
    1690:	0306                	slli	t1,t1,0x1
    1692:	0901                	addi	s2,s2,0
    1694:	000a                	c.slli	zero,0x2
    1696:	0501                	addi	a0,a0,0
    1698:	000e                	c.slli	zero,0x3
    169a:	0402                	c.slli64	s0
    169c:	00030603          	lb	a2,0(t1)
    16a0:	0009                	c.nop	2
    16a2:	0100                	addi	s0,sp,128
    16a4:	1905                	addi	s2,s2,-31
    16a6:	0200                	addi	s0,sp,256
    16a8:	0304                	addi	s1,sp,384
    16aa:	0306                	slli	t1,t1,0x1
    16ac:	097e                	slli	s2,s2,0x1f
    16ae:	000a                	c.slli	zero,0x2
    16b0:	0501                	addi	a0,a0,0
    16b2:	0009                	c.nop	2
    16b4:	0402                	c.slli64	s0
    16b6:	09080303          	lb	t1,144(a6)
    16ba:	0004                	0x4
    16bc:	0501                	addi	a0,a0,0
    16be:	0402001b          	0x402001b
    16c2:	00030603          	lb	a2,0(t1)
    16c6:	0409                	addi	s0,s0,2
    16c8:	0100                	addi	s0,sp,128
    16ca:	1805                	addi	a6,a6,-31
    16cc:	0200                	addi	s0,sp,256
    16ce:	0304                	addi	s1,sp,384
    16d0:	04090003          	lb	zero,64(s2)
    16d4:	0100                	addi	s0,sp,128
    16d6:	1b05                	addi	s6,s6,-31
    16d8:	0200                	addi	s0,sp,256
    16da:	0304                	addi	s1,sp,384
    16dc:	04090003          	lb	zero,64(s2)
    16e0:	0100                	addi	s0,sp,128
    16e2:	1805                	addi	a6,a6,-31
    16e4:	0200                	addi	s0,sp,256
    16e6:	0304                	addi	s1,sp,384
    16e8:	02090003          	lb	zero,32(s2)
    16ec:	0100                	addi	s0,sp,128
    16ee:	1705                	addi	a4,a4,-31
    16f0:	0200                	addi	s0,sp,256
    16f2:	0304                	addi	s1,sp,384
    16f4:	02097f03          	0x2097f03
    16f8:	0100                	addi	s0,sp,128
    16fa:	1805                	addi	a6,a6,-31
    16fc:	0200                	addi	s0,sp,256
    16fe:	0304                	addi	s1,sp,384
    1700:	02090103          	lb	sp,32(s2)
    1704:	0100                	addi	s0,sp,128
    1706:	1705                	addi	a4,a4,-31
    1708:	0200                	addi	s0,sp,256
    170a:	0304                	addi	s1,sp,384
    170c:	0306                	slli	t1,t1,0x1
    170e:	097f                	0x97f
    1710:	0002                	c.slli64	zero
    1712:	0501                	addi	a0,a0,0
    1714:	0009                	c.nop	2
    1716:	0402                	c.slli64	s0
    1718:	09060303          	lb	t1,144(a2)
    171c:	0002                	c.slli64	zero
    171e:	0501                	addi	a0,a0,0
    1720:	0018                	0x18
    1722:	0402                	c.slli64	s0
    1724:	00030603          	lb	a2,0(t1)
    1728:	0009                	c.nop	2
    172a:	0100                	addi	s0,sp,128
    172c:	1b05                	addi	s6,s6,-31
    172e:	0200                	addi	s0,sp,256
    1730:	0304                	addi	s1,sp,384
    1732:	0306                	slli	t1,t1,0x1
    1734:	097f                	0x97f
    1736:	000a                	c.slli	zero,0x2
    1738:	0501                	addi	a0,a0,0
    173a:	0009                	c.nop	2
    173c:	0402                	c.slli64	s0
    173e:	09090303          	lb	t1,144(s2)
    1742:	0006                	c.slli	zero,0x1
    1744:	0501                	addi	a0,a0,0
    1746:	001c                	0x1c
    1748:	0402                	c.slli64	s0
    174a:	00030603          	lb	a2,0(t1)
    174e:	0009                	c.nop	2
    1750:	0100                	addi	s0,sp,128
    1752:	1805                	addi	a6,a6,-31
    1754:	0200                	addi	s0,sp,256
    1756:	0304                	addi	s1,sp,384
    1758:	02090003          	lb	zero,32(s2)
    175c:	0100                	addi	s0,sp,128
    175e:	1f05                	addi	t5,t5,-31
    1760:	0200                	addi	s0,sp,256
    1762:	0304                	addi	s1,sp,384
    1764:	0306                	slli	t1,t1,0x1
    1766:	097f                	0x97f
    1768:	0008                	0x8
    176a:	0501                	addi	a0,a0,0
    176c:	0009                	c.nop	2
    176e:	0402                	c.slli64	s0
    1770:	090b0303          	lb	t1,144(s6)
    1774:	0006                	c.slli	zero,0x1
    1776:	0501                	addi	a0,a0,0
    1778:	001c                	0x1c
    177a:	0402                	c.slli64	s0
    177c:	00030603          	lb	a2,0(t1)
    1780:	0409                	addi	s0,s0,2
    1782:	0100                	addi	s0,sp,128
    1784:	1805                	addi	a6,a6,-31
    1786:	0200                	addi	s0,sp,256
    1788:	0304                	addi	s1,sp,384
    178a:	08090003          	lb	zero,128(s2)
    178e:	0100                	addi	s0,sp,128
    1790:	1f05                	addi	t5,t5,-31
    1792:	0200                	addi	s0,sp,256
    1794:	0304                	addi	s1,sp,384
    1796:	02097f03          	0x2097f03
    179a:	0100                	addi	s0,sp,128
    179c:	1805                	addi	a6,a6,-31
    179e:	0200                	addi	s0,sp,256
    17a0:	0304                	addi	s1,sp,384
    17a2:	02090103          	lb	sp,32(s2)
    17a6:	0100                	addi	s0,sp,128
    17a8:	1f05                	addi	t5,t5,-31
    17aa:	0200                	addi	s0,sp,256
    17ac:	0304                	addi	s1,sp,384
    17ae:	0306                	slli	t1,t1,0x1
    17b0:	097f                	0x97f
    17b2:	0002                	c.slli64	zero
    17b4:	0501                	addi	a0,a0,0
    17b6:	0009                	c.nop	2
    17b8:	0402                	c.slli64	s0
    17ba:	09090303          	lb	t1,144(s2)
    17be:	0002                	c.slli64	zero
    17c0:	0501                	addi	a0,a0,0
    17c2:	0016                	c.slli	zero,0x5
    17c4:	0402                	c.slli64	s0
    17c6:	00030603          	lb	a2,0(t1)
    17ca:	0009                	c.nop	2
    17cc:	0100                	addi	s0,sp,128
    17ce:	1d05                	addi	s10,s10,-31
    17d0:	0200                	addi	s0,sp,256
    17d2:	0304                	addi	s1,sp,384
    17d4:	02097f03          	0x2097f03
    17d8:	0100                	addi	s0,sp,128
    17da:	1605                	addi	a2,a2,-31
    17dc:	0200                	addi	s0,sp,256
    17de:	0304                	addi	s1,sp,384
    17e0:	04090103          	lb	sp,64(s2)
    17e4:	0100                	addi	s0,sp,128
    17e6:	0f05                	addi	t5,t5,1
    17e8:	0200                	addi	s0,sp,256
    17ea:	0304                	addi	s1,sp,384
    17ec:	04090003          	lb	zero,64(s2)
    17f0:	0100                	addi	s0,sp,128
    17f2:	1d05                	addi	s10,s10,-31
    17f4:	0200                	addi	s0,sp,256
    17f6:	0304                	addi	s1,sp,384
    17f8:	0306                	slli	t1,t1,0x1
    17fa:	097f                	0x97f
    17fc:	0004                	0x4
    17fe:	0501                	addi	a0,a0,0
    1800:	0009                	c.nop	2
    1802:	0402                	c.slli64	s0
    1804:	090b0303          	lb	t1,144(s6)
    1808:	0002                	c.slli64	zero
    180a:	0501                	addi	a0,a0,0
    180c:	001c                	0x1c
    180e:	0402                	c.slli64	s0
    1810:	00030603          	lb	a2,0(t1)
    1814:	0009                	c.nop	2
    1816:	0100                	addi	s0,sp,128
    1818:	1805                	addi	a6,a6,-31
    181a:	0200                	addi	s0,sp,256
    181c:	0304                	addi	s1,sp,384
    181e:	04090003          	lb	zero,64(s2)
    1822:	0100                	addi	s0,sp,128
    1824:	1f05                	addi	t5,t5,-31
    1826:	0200                	addi	s0,sp,256
    1828:	0304                	addi	s1,sp,384
    182a:	0306                	slli	t1,t1,0x1
    182c:	097f                	0x97f
    182e:	0008                	0x8
    1830:	0501                	addi	a0,a0,0
    1832:	0009                	c.nop	2
    1834:	0402                	c.slli64	s0
    1836:	09060303          	lb	t1,144(a2)
    183a:	0004                	0x4
    183c:	0501                	addi	a0,a0,0
    183e:	0018                	0x18
    1840:	0402                	c.slli64	s0
    1842:	00030603          	lb	a2,0(t1)
    1846:	0409                	addi	s0,s0,2
    1848:	0100                	addi	s0,sp,128
    184a:	1f05                	addi	t5,t5,-31
    184c:	0200                	addi	s0,sp,256
    184e:	0304                	addi	s1,sp,384
    1850:	04090003          	lb	zero,64(s2)
    1854:	0100                	addi	s0,sp,128
    1856:	1805                	addi	a6,a6,-31
    1858:	0200                	addi	s0,sp,256
    185a:	0304                	addi	s1,sp,384
    185c:	04090003          	lb	zero,64(s2)
    1860:	0100                	addi	s0,sp,128
    1862:	2105                	jal	1c82 <random_keys+0x33e>
    1864:	0200                	addi	s0,sp,256
    1866:	0304                	addi	s1,sp,384
    1868:	02097f03          	0x2097f03
    186c:	0100                	addi	s0,sp,128
    186e:	1805                	addi	a6,a6,-31
    1870:	0200                	addi	s0,sp,256
    1872:	0304                	addi	s1,sp,384
    1874:	02090103          	lb	sp,32(s2)
    1878:	0100                	addi	s0,sp,128
    187a:	2105                	jal	1c9a <random_keys+0x356>
    187c:	0200                	addi	s0,sp,256
    187e:	0304                	addi	s1,sp,384
    1880:	0306                	slli	t1,t1,0x1
    1882:	097f                	0x97f
    1884:	0002                	c.slli64	zero
    1886:	0501                	addi	a0,a0,0
    1888:	090c034b          	fnmsub.s	ft6,fs8,fa6,ft1,rne
    188c:	0002                	c.slli64	zero
    188e:	0501                	addi	a0,a0,0
    1890:	0305                	addi	t1,t1,1
    1892:	0902                	c.slli64	s2
    1894:	0000                	unimp
    1896:	0301                	addi	t1,t1,0
    1898:	0901                	addi	s2,s2,0
    189a:	0000                	unimp
    189c:	0301                	addi	t1,t1,0
    189e:	0902                	c.slli64	s2
    18a0:	0000                	unimp
    18a2:	0501                	addi	a0,a0,0
    18a4:	7b03064b          	fnmsub.d	fa2,ft6,fa6,fa5,rne
    18a8:	0009                	c.nop	2
    18aa:	0100                	addi	s0,sp,128
    18ac:	0905                	addi	s2,s2,1
    18ae:	0c090503          	lb	a0,192(s2)
    18b2:	0100                	addi	s0,sp,128
    18b4:	4b05                	li	s6,1
    18b6:	04097b03          	0x4097b03
    18ba:	0100                	addi	s0,sp,128
    18bc:	0905                	addi	s2,s2,1
    18be:	02090503          	lb	a0,32(s2)
    18c2:	0100                	addi	s0,sp,128
    18c4:	4b05                	li	s6,1
    18c6:	0a097b03          	0xa097b03
    18ca:	0100                	addi	s0,sp,128
    18cc:	06090003          	lb	zero,96(s2)
    18d0:	0100                	addi	s0,sp,128
    18d2:	0905                	addi	s2,s2,1
    18d4:	04090503          	lb	a0,64(s2)
    18d8:	0100                	addi	s0,sp,128
    18da:	0505                	addi	a0,a0,1
    18dc:	0306                	slli	t1,t1,0x1
    18de:	0901                	addi	s2,s2,0
    18e0:	0002                	c.slli64	zero
    18e2:	0301                	addi	t1,t1,0
    18e4:	0901                	addi	s2,s2,0
    18e6:	0000                	unimp
    18e8:	0301                	addi	t1,t1,0
    18ea:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    18ee:	0501                	addi	a0,a0,0
    18f0:	060c                	addi	a1,sp,768
    18f2:	00090003          	lb	zero,0(s2)
    18f6:	0100                	addi	s0,sp,128
    18f8:	0105                	addi	sp,sp,1
    18fa:	12090703          	lb	a4,288(s2)
    18fe:	0100                	addi	s0,sp,128
    1900:	0c05                	addi	s8,s8,1
    1902:	06097903          	0x6097903
    1906:	0100                	addi	s0,sp,128
    1908:	0105                	addi	sp,sp,1
    190a:	0306                	slli	t1,t1,0x1
    190c:	00020907          	0x20907
    1910:	0501                	addi	a0,a0,0
    1912:	060a                	slli	a2,a2,0x2
    1914:	00090303          	lb	t1,0(s2)
    1918:	0100                	addi	s0,sp,128
    191a:	0105                	addi	sp,sp,1
    191c:	04097d03          	0x4097d03
    1920:	0100                	addi	s0,sp,128
    1922:	0505                	addi	a0,a0,1
    1924:	0306                	slli	t1,t1,0x1
    1926:	00040903          	lb	s2,0(s0)
    192a:	0501                	addi	a0,a0,0
    192c:	060a                	slli	a2,a2,0x2
    192e:	00090003          	lb	zero,0(s2)
    1932:	0100                	addi	s0,sp,128
    1934:	0505                	addi	a0,a0,1
    1936:	0306                	slli	t1,t1,0x1
    1938:	0902                	c.slli64	s2
    193a:	000e                	c.slli	zero,0x3
    193c:	0501                	addi	a0,a0,0
    193e:	061a                	slli	a2,a2,0x6
    1940:	00090003          	lb	zero,0(s2)
    1944:	0100                	addi	s0,sp,128
    1946:	1405                	addi	s0,s0,-31
    1948:	0200                	addi	s0,sp,256
    194a:	0104                	addi	s1,sp,128
    194c:	0306                	slli	t1,t1,0x1
    194e:	0900                	addi	s0,sp,144
    1950:	0008                	0x8
    1952:	0501                	addi	a0,a0,0
    1954:	0005                	c.nop	1
    1956:	0402                	c.slli64	s0
    1958:	0601                	addi	a2,a2,0
    195a:	00090003          	lb	zero,0(s2)
    195e:	0100                	addi	s0,sp,128
    1960:	0105                	addi	sp,sp,1
    1962:	04090903          	lb	s2,64(s2)
    1966:	0100                	addi	s0,sp,128
    1968:	0905                	addi	s2,s2,1
    196a:	0200                	addi	s0,sp,256
    196c:	0304                	addi	s1,sp,384
    196e:	0306                	slli	t1,t1,0x1
    1970:	0978                	addi	a4,sp,156
    1972:	0010                	0x10
    1974:	0501                	addi	a0,a0,0
    1976:	0019                	c.nop	6
    1978:	0402                	c.slli64	s0
    197a:	00030603          	lb	a2,0(t1)
    197e:	0009                	c.nop	2
    1980:	0100                	addi	s0,sp,128
    1982:	1f05                	addi	t5,t5,-31
    1984:	0200                	addi	s0,sp,256
    1986:	0304                	addi	s1,sp,384
    1988:	08097f03          	0x8097f03
    198c:	0100                	addi	s0,sp,128
    198e:	1505                	addi	a0,a0,-31
    1990:	0200                	addi	s0,sp,256
    1992:	0304                	addi	s1,sp,384
    1994:	04090103          	lb	sp,64(s2)
    1998:	0100                	addi	s0,sp,128
    199a:	1f05                	addi	t5,t5,-31
    199c:	0200                	addi	s0,sp,256
    199e:	0304                	addi	s1,sp,384
    19a0:	0306                	slli	t1,t1,0x1
    19a2:	097f                	0x97f
    19a4:	0004                	0x4
    19a6:	0501                	addi	a0,a0,0
    19a8:	036c                	addi	a1,sp,396
    19aa:	090c                	addi	a1,sp,144
    19ac:	0002                	c.slli64	zero
    19ae:	0501                	addi	a0,a0,0
    19b0:	0305                	addi	t1,t1,1
    19b2:	0902                	c.slli64	s2
    19b4:	0000                	unimp
    19b6:	0301                	addi	t1,t1,0
    19b8:	0901                	addi	s2,s2,0
    19ba:	0000                	unimp
    19bc:	0301                	addi	t1,t1,0
    19be:	0901                	addi	s2,s2,0
    19c0:	0000                	unimp
    19c2:	0301                	addi	t1,t1,0
    19c4:	0901                	addi	s2,s2,0
    19c6:	0000                	unimp
    19c8:	0301                	addi	t1,t1,0
    19ca:	0901                	addi	s2,s2,0
    19cc:	0000                	unimp
    19ce:	0301                	addi	t1,t1,0
    19d0:	0901                	addi	s2,s2,0
    19d2:	0000                	unimp
    19d4:	0301                	addi	t1,t1,0
    19d6:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    19da:	0501                	addi	a0,a0,0
    19dc:	066c                	addi	a1,sp,780
    19de:	00097603          	0x97603
    19e2:	0100                	addi	s0,sp,128
    19e4:	1e05                	addi	t3,t3,-31
    19e6:	08091103          	lh	sp,128(s2)
    19ea:	0100                	addi	s0,sp,128
    19ec:	6c05                	lui	s8,0x1
    19ee:	06096f03          	0x6096f03
    19f2:	0100                	addi	s0,sp,128
    19f4:	0905                	addi	s2,s2,1
    19f6:	0a090a03          	lb	s4,160(s2)
    19fa:	0100                	addi	s0,sp,128
    19fc:	6c05                	lui	s8,0x1
    19fe:	04097603          	0x4097603
    1a02:	0100                	addi	s0,sp,128
    1a04:	0905                	addi	s2,s2,1
    1a06:	04090a03          	lb	s4,64(s2)
    1a0a:	0100                	addi	s0,sp,128
    1a0c:	6c05                	lui	s8,0x1
    1a0e:	04097603          	0x4097603
    1a12:	0100                	addi	s0,sp,128
    1a14:	08090003          	lb	zero,128(s2)
    1a18:	0100                	addi	s0,sp,128
    1a1a:	0a05                	addi	s4,s4,1
    1a1c:	02090e03          	lb	t3,32(s2)
    1a20:	0100                	addi	s0,sp,128
    1a22:	0905                	addi	s2,s2,1
    1a24:	04097c03          	0x4097c03
    1a28:	0100                	addi	s0,sp,128
    1a2a:	0505                	addi	a0,a0,1
    1a2c:	0306                	slli	t1,t1,0x1
    1a2e:	0904                	addi	s1,sp,144
    1a30:	0004                	0x4
    1a32:	0501                	addi	a0,a0,0
    1a34:	060a                	slli	a2,a2,0x2
    1a36:	00090003          	lb	zero,0(s2)
    1a3a:	0100                	addi	s0,sp,128
    1a3c:	0505                	addi	a0,a0,1
    1a3e:	0306                	slli	t1,t1,0x1
    1a40:	00100903          	lb	s2,1(zero) # 1 <__DYNAMIC+0x1>
    1a44:	0501                	addi	a0,a0,0
    1a46:	0003060b          	0x3060b
    1a4a:	0409                	addi	s0,s0,2
    1a4c:	0100                	addi	s0,sp,128
    1a4e:	1405                	addi	s0,s0,-31
    1a50:	0200                	addi	s0,sp,256
    1a52:	0104                	addi	s1,sp,128
    1a54:	0306                	slli	t1,t1,0x1
    1a56:	0900                	addi	s0,sp,144
    1a58:	0002                	c.slli64	zero
    1a5a:	0501                	addi	a0,a0,0
    1a5c:	0005                	c.nop	1
    1a5e:	0402                	c.slli64	s0
    1a60:	0601                	addi	a2,a2,0
    1a62:	00090003          	lb	zero,0(s2)
    1a66:	0100                	addi	s0,sp,128
    1a68:	1605                	addi	a2,a2,-31
    1a6a:	04090603          	lb	a2,64(s2)
    1a6e:	0100                	addi	s0,sp,128
    1a70:	0c05                	addi	s8,s8,1
    1a72:	06097f03          	0x6097f03
    1a76:	0100                	addi	s0,sp,128
    1a78:	1105                	addi	sp,sp,-31
    1a7a:	0200                	addi	s0,sp,256
    1a7c:	0104                	addi	s1,sp,128
    1a7e:	0306                	slli	t1,t1,0x1
    1a80:	0900                	addi	s0,sp,144
    1a82:	0002                	c.slli64	zero
    1a84:	0501                	addi	a0,a0,0
    1a86:	0005                	c.nop	1
    1a88:	0402                	c.slli64	s0
    1a8a:	0601                	addi	a2,a2,0
    1a8c:	00090003          	lb	zero,0(s2)
    1a90:	0100                	addi	s0,sp,128
    1a92:	0306                	slli	t1,t1,0x1
    1a94:	0908                	addi	a0,sp,144
    1a96:	0004                	0x4
    1a98:	0501                	addi	a0,a0,0
    1a9a:	0609                	addi	a2,a2,2
    1a9c:	00090003          	lb	zero,0(s2)
    1aa0:	0100                	addi	s0,sp,128
    1aa2:	0505                	addi	a0,a0,1
    1aa4:	0306                	slli	t1,t1,0x1
    1aa6:	0904                	addi	s1,sp,144
    1aa8:	000c                	0xc
    1aaa:	0501                	addi	a0,a0,0
    1aac:	060a                	slli	a2,a2,0x2
    1aae:	00090003          	lb	zero,0(s2)
    1ab2:	0100                	addi	s0,sp,128
    1ab4:	0505                	addi	a0,a0,1
    1ab6:	0306                	slli	t1,t1,0x1
    1ab8:	0901                	addi	s2,s2,0
    1aba:	000a                	c.slli	zero,0x2
    1abc:	0501                	addi	a0,a0,0
    1abe:	0014                	0x14
    1ac0:	0402                	c.slli64	s0
    1ac2:	0301                	addi	t1,t1,0
    1ac4:	0900                	addi	s0,sp,144
    1ac6:	0002                	c.slli64	zero
    1ac8:	0501                	addi	a0,a0,0
    1aca:	0005                	c.nop	1
    1acc:	0402                	c.slli64	s0
    1ace:	0601                	addi	a2,a2,0
    1ad0:	00090003          	lb	zero,0(s2)
    1ad4:	0100                	addi	s0,sp,128
    1ad6:	0105                	addi	sp,sp,1
    1ad8:	04090703          	lb	a4,64(s2)
    1adc:	0100                	addi	s0,sp,128
    1ade:	0905                	addi	s2,s2,1
    1ae0:	0200                	addi	s0,sp,256
    1ae2:	0304                	addi	s1,sp,384
    1ae4:	0306                	slli	t1,t1,0x1
    1ae6:	0968                	addi	a0,sp,156
    1ae8:	0016                	c.slli	zero,0x5
    1aea:	0501                	addi	a0,a0,0
    1aec:	0019                	c.nop	6
    1aee:	0402                	c.slli64	s0
    1af0:	00030603          	lb	a2,0(t1)
    1af4:	0009                	c.nop	2
    1af6:	0100                	addi	s0,sp,128
    1af8:	2305                	jal	2018 <_min_stack+0x18>
    1afa:	0200                	addi	s0,sp,256
    1afc:	0304                	addi	s1,sp,384
    1afe:	08097f03          	0x8097f03
    1b02:	0100                	addi	s0,sp,128
    1b04:	1505                	addi	a0,a0,-31
    1b06:	0200                	addi	s0,sp,256
    1b08:	0304                	addi	s1,sp,384
    1b0a:	04090103          	lb	sp,64(s2)
    1b0e:	0100                	addi	s0,sp,128
    1b10:	2305                	jal	2030 <_min_stack+0x30>
    1b12:	0200                	addi	s0,sp,256
    1b14:	0304                	addi	s1,sp,384
    1b16:	0306                	slli	t1,t1,0x1
    1b18:	097f                	0x97f
    1b1a:	0004                	0x4
    1b1c:	0501                	addi	a0,a0,0
    1b1e:	0309                	addi	t1,t1,2
    1b20:	0906                	slli	s2,s2,0x1
    1b22:	0002                	c.slli64	zero
    1b24:	0501                	addi	a0,a0,0
    1b26:	060e                	slli	a2,a2,0x3
    1b28:	00090003          	lb	zero,0(s2)
    1b2c:	0100                	addi	s0,sp,128
    1b2e:	0b05                	addi	s6,s6,1
    1b30:	02090003          	lb	zero,32(s2)
    1b34:	0100                	addi	s0,sp,128
    1b36:	0d05                	addi	s10,s10,1
    1b38:	0306                	slli	t1,t1,0x1
    1b3a:	00040903          	lb	s2,0(s0)
    1b3e:	0501                	addi	a0,a0,0
    1b40:	0619                	addi	a2,a2,6
    1b42:	00090003          	lb	zero,0(s2)
    1b46:	0100                	addi	s0,sp,128
    1b48:	1305                	addi	t1,t1,-31
    1b4a:	04090003          	lb	zero,64(s2)
    1b4e:	0100                	addi	s0,sp,128
    1b50:	1805                	addi	a6,a6,-31
    1b52:	0200                	addi	s0,sp,256
    1b54:	0204                	addi	s1,sp,256
    1b56:	0306                	slli	t1,t1,0x1
    1b58:	097c                	addi	a5,sp,156
    1b5a:	0002                	c.slli64	zero
    1b5c:	0501                	addi	a0,a0,0
    1b5e:	0009                	c.nop	2
    1b60:	0402                	c.slli64	s0
    1b62:	090e0303          	lb	t1,144(t3) # 1a090 <_stack_start+0xa090>
    1b66:	0006                	c.slli	zero,0x1
    1b68:	0501                	addi	a0,a0,0
    1b6a:	0019                	c.nop	6
    1b6c:	0402                	c.slli64	s0
    1b6e:	00030603          	lb	a2,0(t1)
    1b72:	0009                	c.nop	2
    1b74:	0100                	addi	s0,sp,128
    1b76:	2305                	jal	2096 <_min_stack+0x96>
    1b78:	0200                	addi	s0,sp,256
    1b7a:	0304                	addi	s1,sp,384
    1b7c:	08097f03          	0x8097f03
    1b80:	0100                	addi	s0,sp,128
    1b82:	1505                	addi	a0,a0,-31
    1b84:	0200                	addi	s0,sp,256
    1b86:	0304                	addi	s1,sp,384
    1b88:	04090103          	lb	sp,64(s2)
    1b8c:	0100                	addi	s0,sp,128
    1b8e:	2305                	jal	20ae <_min_stack+0xae>
    1b90:	0200                	addi	s0,sp,256
    1b92:	0304                	addi	s1,sp,384
    1b94:	0306                	slli	t1,t1,0x1
    1b96:	097f                	0x97f
    1b98:	0004                	0x4
    1b9a:	0901                	addi	s2,s2,0
    1b9c:	0002                	c.slli64	zero
    1b9e:	0100                	addi	s0,sp,128
    1ba0:	0501                	addi	a0,a0,0
    1ba2:	0205000b          	0x205000b
    1ba6:	0e24                	addi	s1,sp,792
    1ba8:	0000                	unimp
    1baa:	0105de03          	lhu	t3,16(a1)
    1bae:	0505                	addi	a0,a0,1
    1bb0:	00090203          	lb	tp,0(s2)
    1bb4:	0100                	addi	s0,sp,128
    1bb6:	00090103          	lb	sp,0(s2)
    1bba:	0100                	addi	s0,sp,128
    1bbc:	00090103          	lb	sp,0(s2)
    1bc0:	0100                	addi	s0,sp,128
    1bc2:	00090103          	lb	sp,0(s2)
    1bc6:	0100                	addi	s0,sp,128
    1bc8:	00090103          	lb	sp,0(s2)
    1bcc:	0100                	addi	s0,sp,128
    1bce:	00090103          	lb	sp,0(s2)
    1bd2:	0100                	addi	s0,sp,128
    1bd4:	00090203          	lb	tp,0(s2)
    1bd8:	0100                	addi	s0,sp,128
    1bda:	0b05                	addi	s6,s6,1
    1bdc:	0306                	slli	t1,t1,0x1
    1bde:	00000977          	0x977
    1be2:	0501                	addi	a0,a0,0
    1be4:	0309                	addi	t1,t1,2
    1be6:	0909                	addi	s2,s2,2
    1be8:	0004                	0x4
    1bea:	0501                	addi	a0,a0,0
    1bec:	0977030b          	0x977030b
    1bf0:	000e                	c.slli	zero,0x3
    1bf2:	0501                	addi	a0,a0,0
    1bf4:	0309                	addi	t1,t1,2
    1bf6:	0909                	addi	s2,s2,2
    1bf8:	000c                	0xc
    1bfa:	0501                	addi	a0,a0,0
    1bfc:	0605                	addi	a2,a2,1
    1bfe:	02090103          	lb	sp,32(s2)
    1c02:	0100                	addi	s0,sp,128
    1c04:	00090103          	lb	sp,0(s2)
    1c08:	0100                	addi	s0,sp,128
    1c0a:	00090103          	lb	sp,0(s2)
    1c0e:	0100                	addi	s0,sp,128
    1c10:	00090103          	lb	sp,0(s2)
    1c14:	0100                	addi	s0,sp,128
    1c16:	00090103          	lb	sp,0(s2)
    1c1a:	0100                	addi	s0,sp,128
    1c1c:	00090103          	lb	sp,0(s2)
    1c20:	0100                	addi	s0,sp,128
    1c22:	00090103          	lb	sp,0(s2)
    1c26:	0100                	addi	s0,sp,128
    1c28:	00090803          	lb	a6,0(s2)
    1c2c:	0100                	addi	s0,sp,128
    1c2e:	1205                	addi	tp,tp,-31
    1c30:	0306                	slli	t1,t1,0x1
    1c32:	0900                	addi	s0,sp,144
    1c34:	0000                	unimp
    1c36:	0501                	addi	a0,a0,0
    1c38:	030c                	addi	a1,sp,384
    1c3a:	0902                	c.slli64	s2
    1c3c:	000a                	c.slli	zero,0x2
    1c3e:	0501                	addi	a0,a0,0
    1c40:	0312                	slli	t1,t1,0x4
    1c42:	097e                	slli	s2,s2,0x1f
    1c44:	000a                	c.slli	zero,0x2
    1c46:	0501                	addi	a0,a0,0
    1c48:	0605                	addi	a2,a2,1
    1c4a:	02090203          	lb	tp,32(s2)
    1c4e:	0100                	addi	s0,sp,128
    1c50:	0c05                	addi	s8,s8,1
    1c52:	0306                	slli	t1,t1,0x1
    1c54:	0900                	addi	s0,sp,144
    1c56:	0000                	unimp
    1c58:	0501                	addi	a0,a0,0
    1c5a:	0605                	addi	a2,a2,1
    1c5c:	02090403          	lb	s0,32(s2)
    1c60:	0100                	addi	s0,sp,128
    1c62:	1005                	c.nop	-31
    1c64:	00090003          	lb	zero,0(s2)
    1c68:	0100                	addi	s0,sp,128
    1c6a:	0c05                	addi	s8,s8,1
    1c6c:	0306                	slli	t1,t1,0x1
    1c6e:	097c                	addi	a5,sp,156
    1c70:	0000                	unimp
    1c72:	0501                	addi	a0,a0,0
    1c74:	0305                	addi	t1,t1,1
    1c76:	0904                	addi	s1,sp,144
    1c78:	0002                	c.slli64	zero
    1c7a:	0501                	addi	a0,a0,0
    1c7c:	0009                	c.nop	2
    1c7e:	0402                	c.slli64	s0
    1c80:	02030603          	lb	a2,32(t1)
    1c84:	0409                	addi	s0,s0,2
    1c86:	0100                	addi	s0,sp,128
    1c88:	1f05                	addi	t5,t5,-31
    1c8a:	0200                	addi	s0,sp,256
    1c8c:	0304                	addi	s1,sp,384
    1c8e:	0306                	slli	t1,t1,0x1
    1c90:	0900                	addi	s0,sp,144
    1c92:	0000                	unimp
    1c94:	0501                	addi	a0,a0,0
    1c96:	0019                	c.nop	6
    1c98:	0402                	c.slli64	s0
    1c9a:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1c9e:	0006                	c.slli	zero,0x1
    1ca0:	0501                	addi	a0,a0,0
    1ca2:	04020017          	auipc	zero,0x4020
    1ca6:	7e030603          	lb	a2,2016(t1)
    1caa:	0609                	addi	a2,a2,2
    1cac:	0100                	addi	s0,sp,128
    1cae:	1005                	c.nop	-31
    1cb0:	0200                	addi	s0,sp,256
    1cb2:	0304                	addi	s1,sp,384
    1cb4:	00090003          	lb	zero,0(s2)
    1cb8:	0100                	addi	s0,sp,128
    1cba:	0505                	addi	a0,a0,1
    1cbc:	0200                	addi	s0,sp,256
    1cbe:	0304                	addi	s1,sp,384
    1cc0:	0306                	slli	t1,t1,0x1
    1cc2:	0900                	addi	s0,sp,144
    1cc4:	0002                	c.slli64	zero
    1cc6:	0501                	addi	a0,a0,0
    1cc8:	0009                	c.nop	2
    1cca:	0402                	c.slli64	s0
    1ccc:	09030603          	lb	a2,144(t1)
    1cd0:	0409                	addi	s0,s0,2
    1cd2:	0100                	addi	s0,sp,128
    1cd4:	1b05                	addi	s6,s6,-31
    1cd6:	0200                	addi	s0,sp,256
    1cd8:	0304                	addi	s1,sp,384
    1cda:	00097e03          	0x97e03
    1cde:	0100                	addi	s0,sp,128
    1ce0:	1005                	c.nop	-31
    1ce2:	0200                	addi	s0,sp,256
    1ce4:	0304                	addi	s1,sp,384
    1ce6:	00090003          	lb	zero,0(s2)
    1cea:	0100                	addi	s0,sp,128
    1cec:	0905                	addi	s2,s2,1
    1cee:	0200                	addi	s0,sp,256
    1cf0:	0304                	addi	s1,sp,384
    1cf2:	0c090903          	lb	s2,192(s2)
    1cf6:	0100                	addi	s0,sp,128
    1cf8:	2605                	jal	2018 <_min_stack+0x18>
    1cfa:	0200                	addi	s0,sp,256
    1cfc:	0304                	addi	s1,sp,384
    1cfe:	0306                	slli	t1,t1,0x1
    1d00:	0900                	addi	s0,sp,144
    1d02:	0000                	unimp
    1d04:	0501                	addi	a0,a0,0
    1d06:	0020                	addi	s0,sp,8
    1d08:	0402                	c.slli64	s0
    1d0a:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1d0e:	0006                	c.slli	zero,0x1
    1d10:	0501                	addi	a0,a0,0
    1d12:	001f 0402 0603      	0x6030402001f
    1d18:	04097e03          	0x4097e03
    1d1c:	0100                	addi	s0,sp,128
    1d1e:	1405                	addi	s0,s0,-31
    1d20:	0200                	addi	s0,sp,256
    1d22:	0304                	addi	s1,sp,384
    1d24:	00090003          	lb	zero,0(s2)
    1d28:	0100                	addi	s0,sp,128
    1d2a:	0505                	addi	a0,a0,1
    1d2c:	0200                	addi	s0,sp,256
    1d2e:	0304                	addi	s1,sp,384
    1d30:	0306                	slli	t1,t1,0x1
    1d32:	0900                	addi	s0,sp,144
    1d34:	0000                	unimp
    1d36:	0501                	addi	a0,a0,0
    1d38:	0009                	c.nop	2
    1d3a:	0402                	c.slli64	s0
    1d3c:	09030603          	lb	a2,144(t1)
    1d40:	0409                	addi	s0,s0,2
    1d42:	0100                	addi	s0,sp,128
    1d44:	1f05                	addi	t5,t5,-31
    1d46:	0200                	addi	s0,sp,256
    1d48:	0304                	addi	s1,sp,384
    1d4a:	00097e03          	0x97e03
    1d4e:	0100                	addi	s0,sp,128
    1d50:	1405                	addi	s0,s0,-31
    1d52:	0200                	addi	s0,sp,256
    1d54:	0304                	addi	s1,sp,384
    1d56:	00090003          	lb	zero,0(s2)
    1d5a:	0100                	addi	s0,sp,128
    1d5c:	0905                	addi	s2,s2,1
    1d5e:	0200                	addi	s0,sp,256
    1d60:	0304                	addi	s1,sp,384
    1d62:	0c090903          	lb	s2,192(s2)
    1d66:	0100                	addi	s0,sp,128
    1d68:	2305                	jal	2288 <_min_stack+0x288>
    1d6a:	0200                	addi	s0,sp,256
    1d6c:	0304                	addi	s1,sp,384
    1d6e:	0306                	slli	t1,t1,0x1
    1d70:	0900                	addi	s0,sp,144
    1d72:	0000                	unimp
    1d74:	0501                	addi	a0,a0,0
    1d76:	001d                	c.nop	7
    1d78:	0402                	c.slli64	s0
    1d7a:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1d7e:	0006                	c.slli	zero,0x1
    1d80:	0501                	addi	a0,a0,0
    1d82:	001f 0402 0603      	0x6030402001f
    1d88:	04097e03          	0x4097e03
    1d8c:	0100                	addi	s0,sp,128
    1d8e:	1405                	addi	s0,s0,-31
    1d90:	0200                	addi	s0,sp,256
    1d92:	0304                	addi	s1,sp,384
    1d94:	00090003          	lb	zero,0(s2)
    1d98:	0100                	addi	s0,sp,128
    1d9a:	0505                	addi	a0,a0,1
    1d9c:	0200                	addi	s0,sp,256
    1d9e:	0304                	addi	s1,sp,384
    1da0:	0306                	slli	t1,t1,0x1
    1da2:	0900                	addi	s0,sp,144
    1da4:	0000                	unimp
    1da6:	0501                	addi	a0,a0,0
    1da8:	0009                	c.nop	2
    1daa:	0402                	c.slli64	s0
    1dac:	09030603          	lb	a2,144(t1)
    1db0:	0c09                	addi	s8,s8,2
    1db2:	0100                	addi	s0,sp,128
    1db4:	2205                	jal	1ed4 <_bss_end+0x94>
    1db6:	0200                	addi	s0,sp,256
    1db8:	0304                	addi	s1,sp,384
    1dba:	0306                	slli	t1,t1,0x1
    1dbc:	0900                	addi	s0,sp,144
    1dbe:	0000                	unimp
    1dc0:	0501                	addi	a0,a0,0
    1dc2:	001c                	0x1c
    1dc4:	0402                	c.slli64	s0
    1dc6:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1dca:	0006                	c.slli	zero,0x1
    1dcc:	0501                	addi	a0,a0,0
    1dce:	0021                	c.nop	8
    1dd0:	0402                	c.slli64	s0
    1dd2:	7e030603          	lb	a2,2016(t1)
    1dd6:	0409                	addi	s0,s0,2
    1dd8:	0100                	addi	s0,sp,128
    1dda:	1405                	addi	s0,s0,-31
    1ddc:	0200                	addi	s0,sp,256
    1dde:	0304                	addi	s1,sp,384
    1de0:	00090003          	lb	zero,0(s2)
    1de4:	0100                	addi	s0,sp,128
    1de6:	0505                	addi	a0,a0,1
    1de8:	0200                	addi	s0,sp,256
    1dea:	0304                	addi	s1,sp,384
    1dec:	0306                	slli	t1,t1,0x1
    1dee:	0900                	addi	s0,sp,144
    1df0:	0000                	unimp
    1df2:	0601                	addi	a2,a2,0
    1df4:	04090803          	lb	a6,64(s2)
    1df8:	0100                	addi	s0,sp,128
    1dfa:	1305                	addi	t1,t1,-31
    1dfc:	0306                	slli	t1,t1,0x1
    1dfe:	0900                	addi	s0,sp,144
    1e00:	0000                	unimp
    1e02:	0501                	addi	a0,a0,0
    1e04:	0605                	addi	a2,a2,1
    1e06:	10090903          	lb	s2,256(s2)
    1e0a:	0100                	addi	s0,sp,128
    1e0c:	1305                	addi	t1,t1,-31
    1e0e:	0306                	slli	t1,t1,0x1
    1e10:	0900                	addi	s0,sp,144
    1e12:	0000                	unimp
    1e14:	0501                	addi	a0,a0,0
    1e16:	0605                	addi	a2,a2,1
    1e18:	14091303          	lh	t1,320(s2)
    1e1c:	0100                	addi	s0,sp,128
    1e1e:	1005                	c.nop	-31
    1e20:	00090003          	lb	zero,0(s2)
    1e24:	0100                	addi	s0,sp,128
    1e26:	1305                	addi	t1,t1,-31
    1e28:	0306                	slli	t1,t1,0x1
    1e2a:	096d                	addi	s2,s2,27
    1e2c:	0000                	unimp
    1e2e:	0501                	addi	a0,a0,0
    1e30:	031a                	slli	t1,t1,0x6
    1e32:	091a                	slli	s2,s2,0x6
    1e34:	0002                	c.slli64	zero
    1e36:	0501                	addi	a0,a0,0
    1e38:	0305                	addi	t1,t1,1
    1e3a:	0979                	addi	s2,s2,30
    1e3c:	0002                	c.slli64	zero
    1e3e:	0501                	addi	a0,a0,0
    1e40:	0609                	addi	a2,a2,2
    1e42:	04090103          	lb	sp,64(s2)
    1e46:	0100                	addi	s0,sp,128
    1e48:	0b05                	addi	s6,s6,1
    1e4a:	0306                	slli	t1,t1,0x1
    1e4c:	0900                	addi	s0,sp,144
    1e4e:	0000                	unimp
    1e50:	0501                	addi	a0,a0,0
    1e52:	09000327          	0x9000327
    1e56:	0002                	c.slli64	zero
    1e58:	0501                	addi	a0,a0,0
    1e5a:	0900030b          	0x900030b
    1e5e:	0004                	0x4
    1e60:	0501                	addi	a0,a0,0
    1e62:	060d                	addi	a2,a2,3
    1e64:	0a090203          	lb	tp,160(s2)
    1e68:	0100                	addi	s0,sp,128
    1e6a:	1a05                	addi	s4,s4,-31
    1e6c:	0306                	slli	t1,t1,0x1
    1e6e:	0900                	addi	s0,sp,144
    1e70:	0000                	unimp
    1e72:	0501                	addi	a0,a0,0
    1e74:	060d                	addi	a2,a2,3
    1e76:	04090103          	lb	sp,64(s2)
    1e7a:	0100                	addi	s0,sp,128
    1e7c:	0505                	addi	a0,a0,1
    1e7e:	00090a03          	lb	s4,0(s2)
    1e82:	0100                	addi	s0,sp,128
    1e84:	0105                	addi	sp,sp,1
    1e86:	0306                	slli	t1,t1,0x1
    1e88:	0901                	addi	s2,s2,0
    1e8a:	0000                	unimp
    1e8c:	0501                	addi	a0,a0,0
    1e8e:	000d                	c.nop	3
    1e90:	0402                	c.slli64	s0
    1e92:	0602                	c.slli64	a2
    1e94:	14097803          	0x14097803
    1e98:	0100                	addi	s0,sp,128
    1e9a:	1a05                	addi	s4,s4,-31
    1e9c:	0200                	addi	s0,sp,256
    1e9e:	0204                	addi	s1,sp,256
    1ea0:	0306                	slli	t1,t1,0x1
    1ea2:	0900                	addi	s0,sp,144
    1ea4:	0000                	unimp
    1ea6:	0501                	addi	a0,a0,0
    1ea8:	0018                	0x18
    1eaa:	0402                	c.slli64	s0
    1eac:	0602                	c.slli64	a2
    1eae:	02097903          	0x2097903
    1eb2:	0100                	addi	s0,sp,128
    1eb4:	1005                	c.nop	-31
    1eb6:	0200                	addi	s0,sp,256
    1eb8:	0204                	addi	s1,sp,256
    1eba:	00090003          	lb	zero,0(s2)
    1ebe:	0100                	addi	s0,sp,128
    1ec0:	0505                	addi	a0,a0,1
    1ec2:	0200                	addi	s0,sp,256
    1ec4:	0204                	addi	s1,sp,256
    1ec6:	0306                	slli	t1,t1,0x1
    1ec8:	0900                	addi	s0,sp,144
    1eca:	0002                	c.slli64	zero
    1ecc:	0901                	addi	s2,s2,0
    1ece:	0006                	c.slli	zero,0x1
    1ed0:	0100                	addi	s0,sp,128
    1ed2:	5001                	c.li	zero,-32
    1ed4:	0001                	nop
    1ed6:	0300                	addi	s0,sp,384
    1ed8:	1d00                	addi	s0,sp,688
    1eda:	0000                	unimp
    1edc:	0100                	addi	s0,sp,128
    1ede:	fb01                	bnez	a4,1dee <random_keys+0x4aa>
    1ee0:	0d0e                	slli	s10,s10,0x3
    1ee2:	0100                	addi	s0,sp,128
    1ee4:	0101                	addi	sp,sp,0
    1ee6:	0001                	nop
    1ee8:	0000                	unimp
    1eea:	0001                	nop
    1eec:	0100                	addi	s0,sp,128
    1eee:	6300                	flw	fs0,0(a4)
    1ef0:	7472                	flw	fs0,60(sp)
    1ef2:	2e30                	fld	fa2,88(a2)
    1ef4:	00000053          	fadd.s	ft0,ft0,ft0,rne
    1ef8:	0000                	unimp
    1efa:	0500                	addi	s0,sp,640
    1efc:	2802                	fld	fa6,0(sp)
    1efe:	000c                	0xc
    1f00:	1500                	addi	s0,sp,672
    1f02:	04090403          	lb	s0,64(s2)
    1f06:	0100                	addi	s0,sp,128
    1f08:	04090103          	lb	sp,64(s2)
    1f0c:	0100                	addi	s0,sp,128
    1f0e:	02090103          	lb	sp,32(s2)
    1f12:	0100                	addi	s0,sp,128
    1f14:	02090103          	lb	sp,32(s2)
    1f18:	0100                	addi	s0,sp,128
    1f1a:	02090103          	lb	sp,32(s2)
    1f1e:	0100                	addi	s0,sp,128
    1f20:	02090103          	lb	sp,32(s2)
    1f24:	0100                	addi	s0,sp,128
    1f26:	02090103          	lb	sp,32(s2)
    1f2a:	0100                	addi	s0,sp,128
    1f2c:	02090103          	lb	sp,32(s2)
    1f30:	0100                	addi	s0,sp,128
    1f32:	02090103          	lb	sp,32(s2)
    1f36:	0100                	addi	s0,sp,128
    1f38:	02090103          	lb	sp,32(s2)
    1f3c:	0100                	addi	s0,sp,128
    1f3e:	02090103          	lb	sp,32(s2)
    1f42:	0100                	addi	s0,sp,128
    1f44:	02090103          	lb	sp,32(s2)
    1f48:	0100                	addi	s0,sp,128
    1f4a:	02090103          	lb	sp,32(s2)
    1f4e:	0100                	addi	s0,sp,128
    1f50:	02090103          	lb	sp,32(s2)
    1f54:	0100                	addi	s0,sp,128
    1f56:	02090103          	lb	sp,32(s2)
    1f5a:	0100                	addi	s0,sp,128
    1f5c:	02090103          	lb	sp,32(s2)
    1f60:	0100                	addi	s0,sp,128
    1f62:	02090103          	lb	sp,32(s2)
    1f66:	0100                	addi	s0,sp,128
    1f68:	02090103          	lb	sp,32(s2)
    1f6c:	0100                	addi	s0,sp,128
    1f6e:	02090103          	lb	sp,32(s2)
    1f72:	0100                	addi	s0,sp,128
    1f74:	02090103          	lb	sp,32(s2)
    1f78:	0100                	addi	s0,sp,128
    1f7a:	02090103          	lb	sp,32(s2)
    1f7e:	0100                	addi	s0,sp,128
    1f80:	02090103          	lb	sp,32(s2)
    1f84:	0100                	addi	s0,sp,128
    1f86:	02090103          	lb	sp,32(s2)
    1f8a:	0100                	addi	s0,sp,128
    1f8c:	02090103          	lb	sp,32(s2)
    1f90:	0100                	addi	s0,sp,128
    1f92:	02090103          	lb	sp,32(s2)
    1f96:	0100                	addi	s0,sp,128
    1f98:	02090103          	lb	sp,32(s2)
    1f9c:	0100                	addi	s0,sp,128
    1f9e:	02090103          	lb	sp,32(s2)
    1fa2:	0100                	addi	s0,sp,128
    1fa4:	02090103          	lb	sp,32(s2)
    1fa8:	0100                	addi	s0,sp,128
    1faa:	02090103          	lb	sp,32(s2)
    1fae:	0100                	addi	s0,sp,128
    1fb0:	02090103          	lb	sp,32(s2)
    1fb4:	0100                	addi	s0,sp,128
    1fb6:	02090103          	lb	sp,32(s2)
    1fba:	0100                	addi	s0,sp,128
    1fbc:	02090303          	lb	t1,32(s2)
    1fc0:	0100                	addi	s0,sp,128
    1fc2:	08090603          	lb	a2,128(s2)
    1fc6:	0100                	addi	s0,sp,128
    1fc8:	08090103          	lb	sp,128(s2)
    1fcc:	0100                	addi	s0,sp,128
    1fce:	08090203          	lb	tp,128(s2)
    1fd2:	0100                	addi	s0,sp,128
    1fd4:	04090303          	lb	t1,64(s2)
    1fd8:	0100                	addi	s0,sp,128
    1fda:	04090103          	lb	sp,64(s2)
    1fde:	0100                	addi	s0,sp,128
    1fe0:	02090103          	lb	sp,32(s2)
    1fe4:	0100                	addi	s0,sp,128
    1fe6:	04090603          	lb	a2,64(s2)
    1fea:	0100                	addi	s0,sp,128
    1fec:	04090103          	lb	sp,64(s2)
    1ff0:	0100                	addi	s0,sp,128
    1ff2:	04090103          	lb	sp,64(s2)
    1ff6:	0100                	addi	s0,sp,128
    1ff8:	0409                	addi	s0,s0,2
    1ffa:	0000                	unimp
    1ffc:	0101                	addi	sp,sp,0
    1ffe:	0500                	addi	s0,sp,640
    2000:	0002                	c.slli64	zero
    2002:	0000                	unimp
    2004:	0300                	addi	s0,sp,384
    2006:	030100cb          	fnmsub.d	ft1,ft2,fa6,ft0,rne
    200a:	0901                	addi	s2,s2,0
    200c:	007c                	addi	a5,sp,12
    200e:	0301                	addi	t1,t1,0
    2010:	0904                	addi	s1,sp,144
    2012:	0004                	0x4
    2014:	0301                	addi	t1,t1,0
    2016:	0904                	addi	s1,sp,144
    2018:	0004                	0x4
    201a:	0301                	addi	t1,t1,0
    201c:	0904                	addi	s1,sp,144
    201e:	0004                	0x4
    2020:	0901                	addi	s2,s2,0
    2022:	0004                	0x4
    2024:	0100                	addi	s0,sp,128
    2026:	01              	Address 0x0000000000002026 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	6e69                	lui	t3,0x1a
  3c:	5f727473          	csrrci	s0,0x5f7,4
  40:	6461                	lui	s0,0x18
  42:	0064                	addi	s1,sp,12
  44:	775f 7263 6f74      	0x6f747263775f
  4a:	626d                	lui	tp,0x1b
  4c:	735f 6174 6574      	0x65746174735f
  52:	5f00                	lw	s0,56(a4)
  54:	72736377          	0x72736377
  58:	6f74                	flw	fa3,92(a4)
  5a:	626d                	lui	tp,0x1b
  5c:	74735f73          	csrrwi	t5,0x747,6
  60:	7461                	lui	s0,0xffff8
  62:	0065                	c.nop	25
  64:	5f5f 7562 6c69      	0x6c6975625f5f
  6a:	6974                	flw	fa3,84(a0)
  6c:	5f6e                	lw	t5,248(sp)
  6e:	656d                	lui	a0,0x1b
  70:	736d                	lui	t1,0xffffb
  72:	7465                	lui	s0,0xffff9
  74:	6c00                	flw	fs0,24(s0)
  76:	20676e6f          	jal	t3,7627c <_stack_start+0x6627c>
  7a:	6f6c                	flw	fa1,92(a4)
  jal x0, default_exc_handler
  7c:	676e                	flw	fa4,216(sp)
  7e:	7520                	flw	fs0,104(a0)
  jal x0, reset_handler
  80:	736e                	flw	ft6,248(sp)
  82:	6769                	lui	a4,0x1a
  jal x0, default_exc_handler
  84:	656e                	flw	fa0,216(sp)
  86:	2064                	fld	fs1,192(s0)
  jal x0, default_exc_handler
  88:	6e69                	lui	t3,0x1a
  8a:	0074                	addi	a3,sp,12
    asm volatile(
  8c:	6544                	flw	fs1,12(a0)
  8e:	654d5f63          	bge	s10,s4,6ec <ext_euclid+0xf0>
    for(i=0;i<(length/3);i++) {
  92:	67617373          	csrrci	t1,0x676,2
  96:	0065                	c.nop	25
  98:	6c5f 6662 6973      	0x697366626c5f
  9e:	657a                	flw	fa0,156(sp)
}
  a0:	7200                	flw	fs0,32(a2)
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	6e61                	lui	t3,0x18
  a4:	6f64                	flw	fs1,92(a4)
    asm volatile(
  a6:	5f6d                	li	t5,-5
  a8:	7379656b          	0x7379656b
  ac:	5f00                	lw	s0,56(a4)
  ae:	6c5f 636f 6c61      	0x6c61636f6c5f
    asm volatile(
  b4:	5f65                	li	t5,-7
  b6:	0074                	addi	a3,sp,12
}
  b8:	72636573          	csrrsi	a0,0x726,6
    for(i=0;i<(length/3);i++) {
  bc:	7465                	lui	s0,0xffff9
  be:	6b5f 7965 665f      	0x665f79656b5f
  c4:	7300                	flw	fs0,32(a4)
  c6:	6365                	lui	t1,0x19
}
  c8:	6572                	flw	fa0,28(sp)
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  ca:	5f74                	lw	a3,124(a4)
  cc:	5f79656b          	0x5f79656b
    asm volatile(
  d0:	6d5f0067          	jr	1749(t5)
  d4:	7262                	flw	ft4,56(sp)
  d6:	6f74                	flw	fa3,92(a4)
    for(i=0;i<(length/3);i++) {
  d8:	735f6377          	0x735f6377
    asm volatile(
  dc:	6174                	flw	fa3,68(a0)
  de:	6574                	flw	fa3,76(a0)
}
  e0:	5f00                	lw	s0,56(a4)
    for(i=0;i<(length/3);i++) {
  e2:	6f746377          	0x6f746377
  e6:	626d                	lui	tp,0x1b
  e8:	735f 6174 6574      	0x65746174735f
  ee:	5f00                	lw	s0,56(a4)
}
  f0:	745f 5f6d 6573      	0x65735f6d745f
    asm volatile(
  f6:	6f6c0063          	beq	s8,s6,7d6 <ext_euclid+0x1da>
  fa:	676e                	flw	fa4,216(sp)
  fc:	6c20                	flw	fs0,88(s0)
  fe:	20676e6f          	jal	t3,76304 <_stack_start+0x66304>
    for(i=0;i<(length/3);i++) {
 102:	6e69                	lui	t3,0x1a
    asm volatile(
 104:	0074                	addi	a3,sp,12
 106:	657a6973          	csrrsi	s2,0x657,20
    for(i=0;i<(length/3);i++) {
 10a:	4e5f 6900 736e      	0x736e69004e5f
    asm volatile(
 110:	7274                	flw	fa3,100(a2)
    for(i=0;i<(length/3);i++) {
 112:	6d5f 646f 7000      	0x7000646f6d5f
}
 118:	6d796c6f          	jal	s8,96fee <_stack_start+0x86fee>
    asm volatile(
 11c:	6c75                	lui	s8,0x1d
 11e:	0074                	addi	a3,sp,12
 120:	755f 7562 0066      	0x667562755f
    for(i=0;i<(length/3);i++) {
 126:	625f 7361 0065      	0x657361625f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 12c:	5f5f 6d74 685f      	0x685f6d745f5f
    int line[size_b][size_a + size_b];
 132:	0072756f          	jal	a0,27938 <_stack_start+0x17938>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 136:	5f5f 6673 5f00      	0x5f0066735f5f
    int line[size_b][size_a + size_b];
 13c:	655f6e6f          	jal	t3,f6f90 <_stack_start+0xe6f90>
 140:	6978                	flw	fa4,84(a0)
 142:	5f74                	lw	a3,124(a4)
 144:	7261                	lui	tp,0xffff8
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 146:	5f007367          	0x5f007367
    int pola[size_a];
 14a:	6b6f6f63          	bltu	t5,s6,808 <generate_keys+0x1c>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 14e:	6569                	lui	a0,0x1a
 150:	5f00                	lw	s0,56(a4)
 152:	735f 6c67 6575      	0x65756c67735f
 158:	7200                	flw	fs0,32(a2)
    int line[size_b][size_a + size_b];
 15a:	7365                	lui	t1,0xffff9
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 15c:	0031                	c.nop	12
 15e:	6572                	flw	fa0,28(sp)
 160:	5f003273          	csrrc	tp,0x5f0,zero
    int pola[size_a];
 164:	6c66                	flw	fs8,88(sp)
 166:	6761                	lui	a4,0x18
    int line[size_b][size_a + size_b];
 168:	695f0073          	0x695f0073
 16c:	78635f73          	csrrwi	t5,0x786,6
    int pola[size_a];
 170:	0061                	c.nop	24
    int polb[size_b];
 172:	735f 6474 6e69      	0x6e696474735f
    int pola[size_a];
 178:	5f00                	lw	s0,56(a4)
    int polb[size_b];
 17a:	6c62                	flw	fs8,24(sp)
 17c:	7a69736b          	0x7a69736b
    int pola[size_a];
 180:	0065                	c.nop	25
 182:	7270                	flw	fa2,100(a2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 184:	6375646f          	jal	s0,56fba <_stack_start+0x46fba>
    int line[size_b][size_a + size_b];
 188:	0074                	addi	a3,sp,12
    int polb[size_b];
 18a:	6f70                	flw	fa2,92(a4)
            line[i][j] = 0;
 18c:	796c                	flw	fa1,116(a0)
 18e:	6964                	flw	fs1,84(a0)
 190:	0076                	c.slli	zero,0x1d
    for (i = 0; i < size_b; ++i){
 192:	6f70                	flw	fa2,92(a4)
 194:	796c                	flw	fa1,116(a0)
            product[j] = 0;
 196:	0066                	c.slli	zero,0x19
 198:	635f 7476 7562      	0x75627476635f
    for (i = 0; i < size_b; ++i){
 19e:	0066                	c.slli	zero,0x19
 1a0:	6f5f 6666 6573      	0x657366666f5f
    array_equ(pola,a,size_a);
 1a6:	0074                	addi	a3,sp,12
 1a8:	6d5f 7362 7472      	0x747273626d5f
 1ae:	7363776f          	jal	a4,378e4 <_stack_start+0x278e4>
 1b2:	735f 6174 6574      	0x65746174735f
 1b8:	5f00                	lw	s0,56(a4)
    array_mod(pola,mod,size_a);
 1ba:	626d                	lui	tp,0x1b
 1bc:	6c72                	flw	fs8,28(sp)
 1be:	6e65                	lui	t3,0x19
 1c0:	735f 6174 6574      	0x65746174735f
    array_equ(polb,b,size_b);
 1c6:	5f00                	lw	s0,56(a4)
 1c8:	6e66                	flw	ft8,88(sp)
 1ca:	7261                	lui	tp,0xffff8
 1cc:	6e007367          	0x6e007367
    array_mod(polb,mod,size_b);
 1d0:	7274                	flw	fa3,100(a2)
 1d2:	5f75                	li	t5,-3
 1d4:	6564                	flw	fs1,76(a0)
    if(star_mult == 1){
 1d6:	70796563          	bltu	s2,t2,8e0 <generate_keys+0xf4>
 1da:	0074                	addi	a3,sp,12
 1dc:	665f 736e 5f00      	0x5f00736e665f
 1e2:	6e676973          	csrrsi	s2,0x6e6,14
 1e6:	5f00                	lw	s0,56(a4)
 1e8:	6c66                	flw	fs8,88(sp)
 1ea:	5f6b636f          	jal	t1,b67e0 <_stack_start+0xa67e0>
 1ee:	0074                	addi	a3,sp,12
 1f0:	735f 6474 7265      	0x72656474735f
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f6:	0072                	c.slli	zero,0x1c
 1f8:	425f 6769 6e69      	0x6e696769425f
            product[j] = 0;
 1fe:	0074                	addi	a3,sp,12
            line[i][j] = 0;
 200:	675f 6d61 616d      	0x616d6d61675f
            product[j] = 0;
 206:	735f 6769 676e      	0x676e6769735f
        for(j = 0; j < size_a + size_b -1; ++j){
 20c:	6d61                	lui	s10,0x18
 20e:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_b; ++i){
 210:	6572                	flw	fa0,28(sp)
 212:	6461                	lui	s0,0x18
 214:	5f00                	lw	s0,56(a4)
 216:	6572                	flw	fa0,28(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 218:	746c7573          	csrrci	a0,0x746,24
    if(star_mult == 1){
 21c:	6b5f 5f00 745f      	0x745f5f006b5f
        for(j = 0; j < size_a + size_b -1; ++j){
 222:	006d                	c.nop	27
    for (i = 0; i < size_b; ++i){
 224:	6564                	flw	fs1,76(a0)
 226:	756e                	flw	fa0,248(sp)
 228:	5f6d                	li	t5,-5
 22a:	6574                	flw	fa3,76(a0)
 22c:	706d                	c.lui	zero,0xffffb
 22e:	5f00                	lw	s0,56(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
 230:	775f 6863 0062      	0x626863775f
    array_mod(product,mod,(size_a+size_b-1));
 236:	6572                	flw	fa0,28(sp)
 238:	746c7573          	csrrci	a0,0x746,24
 23c:	006e6f6b          	0x6e6f6b
 240:	735f 6474 756f      	0x756f6474735f
}
 246:	0074                	addi	a3,sp,12
 248:	635f 7476 656c      	0x656c7476635f
 24e:	006e                	c.slli	zero,0x1b
 250:	72636573          	csrrsi	a0,0x726,6
 254:	7465                	lui	s0,0xffff9
 256:	6b5f 7965 665f      	0x665f79656b5f
 25c:	0071                	c.nop	28
 25e:	665f 6c69 0065      	0x656c69665f
 264:	6572                	flw	fa0,28(sp)
 266:	7574                	flw	fa3,108(a0)
 268:	6e72                	flw	ft8,28(sp)
 26a:	615f 6464 6572      	0x65726464615f
                line[size_b-1-j][k] = pola[k]*polb[j];
 270:	00317373          	csrrci	t1,fcsr,2
 274:	6572                	flw	fa0,28(sp)
 276:	7574                	flw	fa3,108(a0)
 278:	6e72                	flw	ft8,28(sp)
 27a:	615f 6464 6572      	0x65726464615f
 280:	00327373          	csrrci	t1,fcsr,4
 284:	6572                	flw	fa0,28(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 286:	7574                	flw	fa3,108(a0)
 288:	6e72                	flw	ft8,28(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 28a:	615f 6464 6572      	0x65726464615f
 290:	00337373          	csrrci	t1,fcsr,6
            for (k = size_a-1; k >= 0; k = k-1 ){
 294:	6572                	flw	fa0,28(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 296:	7574                	flw	fa3,108(a0)
 298:	6e72                	flw	ft8,28(sp)
 29a:	615f 6464 6572      	0x65726464615f
 2a0:	00347373          	csrrci	t1,fcsr,8
 2a4:	6e5f 6f69 7362      	0x73626f696e5f
 2aa:	7200                	flw	fs0,32(a2)
 2ac:	7465                	lui	s0,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 2ae:	7275                	lui	tp,0xffffd
 2b0:	5f6e                	lw	t5,248(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 2b2:	6461                	lui	s0,0x18
 2b4:	7264                	flw	fs1,100(a2)
 2b6:	7365                	lui	t1,0xffff9
 2b8:	72003673          	csrrc	a2,0x720,zero
        for(j = 0; j < size_a + size_b -1; ++j){
 2bc:	7465                	lui	s0,0xffff9
 2be:	7275                	lui	tp,0xffffd
            line[i][j] = line[i][j] % mod;
 2c0:	5f6e                	lw	t5,248(sp)
 2c2:	6461                	lui	s0,0x18
 2c4:	7264                	flw	fs1,100(a2)
 2c6:	7365                	lui	t1,0xffff9
        for(j = 0; j < size_a + size_b -1; ++j){
 2c8:	73003773          	csrrc	a4,0x730,zero
    for (i = 0; i < size_b; ++i){
 2cc:	6f68                	flw	fa0,92(a4)
 2ce:	7472                	flw	fs0,60(sp)
 2d0:	7520                	flw	fs0,104(a0)
 2d2:	736e                	flw	ft6,248(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 2d4:	6769                	lui	a4,0x1a
 2d6:	656e                	flw	fa0,216(sp)
            product[j] += line[i][j];
 2d8:	2064                	fld	fs1,192(s0)
 2da:	6e69                	lui	t3,0x1a
 2dc:	0074                	addi	a3,sp,12
        for(i = 0; i < size_b; ++i){
 2de:	615f 6574 6978      	0x69786574615f
            product[j] += line[i][j];
 2e4:	3074                	fld	fa3,224(s0)
 2e6:	5f00                	lw	s0,56(a4)
 2e8:	6e676973          	csrrsi	s2,0x6e6,14
        for(i = 0; i < size_b; ++i){
 2ec:	6c61                	lui	s8,0x18
 2ee:	625f 6675 5f00      	0x5f006675625f
    for(j = 0; j < size_a + size_b -1; ++j){
 2f4:	7361                	lui	t1,0xffff8
        for(i = 0; i < size_b; ++i){
 2f6:	6d697463          	bgeu	s2,s6,9be <generate_keys+0x1d2>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2fa:	5f65                	li	t5,-7
    int line[size_b][size_a + size_b];
 2fc:	7562                	flw	fa0,56(sp)
 2fe:	0066                	c.slli	zero,0x19
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 300:	725f 7365 6c75      	0x6c757365725f
 306:	0074                	addi	a3,sp,12
 308:	5f5f 6377 0068      	0x6863775f5f
    int line[size_b][size_a + size_b];
 30e:	746e6977          	0x746e6977
 312:	745f 6700 6e65      	0x6e656700745f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 318:	7265                	lui	tp,0xffff9
 31a:	7461                	lui	s0,0xffff8
 31c:	5f65                	li	t5,-7
 31e:	7379656b          	0x7379656b
 322:	5f00                	lw	s0,56(a4)
 324:	625f 6975 746c      	0x746c6975625f
 32a:	6e69                	lui	t3,0x1a
 32c:	6d5f 6d65 7063      	0x70636d656d5f
    int line[size_b][size_a + size_b];
 332:	0079                	c.nop	30
    int pola[size_a];
 334:	6c5f 636f 006b      	0x6b636f6c5f
 33a:	544e                	lw	s0,240(sp)
    int line[size_b][size_a + size_b];
 33c:	5552                	lw	a0,52(sp)
    int pola[size_a];
 33e:	345f 5f38 6962      	0x69625f38345f
    int polb[size_b];
 344:	4d74                	lw	a3,92(a0)
 346:	632e                	flw	ft6,200(sp)
    int pola[size_a];
 348:	7000                	flw	fs0,32(s0)
    int polb[size_b];
 34a:	6f72                	flw	ft10,28(sp)
 34c:	7564                	flw	fs1,108(a0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 34e:	00327463          	bgeu	tp,gp,356 <polymult2+0x5c>
    int line[size_b][size_a + size_b];
 352:	7865                	lui	a6,0xffff9
 354:	5f74                	lw	a3,124(a4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 356:	7565                	lui	a0,0xffff9
    int pola[size_a];
 358:	64696c63          	bltu	s2,t1,9b0 <generate_keys+0x1c4>
    int polb[size_b];
 35c:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_b; ++i){
 35e:	74697277          	0x74697277
 362:	0065                	c.nop	25
            product2[j] = 0;
 364:	5f5f 6d74 795f      	0x795f6d745f5f
 36a:	6165                	addi	sp,sp,112
    for (i = 0; i < size_b; ++i){
 36c:	0072                	c.slli	zero,0x1c
 36e:	6f70                	flw	fa2,92(a4)
    array_equ(pola,a,size_a);
 370:	626c                	flw	fa1,68(a2)
 372:	7200                	flw	fs0,32(a2)
 374:	6e61                	lui	t3,0x18
 376:	6f64                	flw	fs1,92(a4)
 378:	5f6d                	li	t5,-5
 37a:	6176                	flw	ft2,92(sp)
    array_equ(polb,b,size_b);
 37c:	006c                	addi	a1,sp,12
 37e:	6e5f 616d 6c6c      	0x6c6c616d6e5f
 384:	2f00636f          	jal	t1,6674 <_stack_len+0x2674>
    if(star_mult == 1){
 388:	6f68                	flw	fa0,92(a4)
 38a:	656d                	lui	a0,0x1b
 38c:	706f742f          	0x706f742f
 390:	6c61                	lui	s8,0x18
 392:	65442f63          	0x65442f63
 396:	6f746b73          	csrrsi	s6,0x6f7,8
        for (j = size_b -1; j >= 0; j = j-1){
 39a:	2f70                	fld	fa2,216(a4)
 39c:	6269                	lui	tp,0x1a
            for (k = size_a-1; k >= 0; k = k-1 ){
 39e:	7865                	lui	a6,0xffff9
 3a0:	6d2d                	lui	s10,0xb
            product2[j] = 0;
 3a2:	7361                	lui	t1,0xffff8
 3a4:	6574                	flw	fa3,76(a0)
 3a6:	2f72                	fld	ft10,280(sp)
            line[i][j] = 0;
 3a8:	7865                	lui	a6,0xffff9
 3aa:	6d61                	lui	s10,0x18
            product2[j] = 0;
 3ac:	6c70                	flw	fa2,92(s0)
 3ae:	7365                	lui	t1,0xffff9
        for(j = 0; j < size_a + size_b -1; ++j){
 3b0:	2f77732f          	0x2f77732f
 3b4:	746e                	flw	fs0,248(sp)
 3b6:	7572                	flw	fa0,60(sp)
    for (i = 0; i < size_b; ++i){
 3b8:	6c5f 7461 6669      	0x666974616c5f
 3be:	685f 636f 2f61      	0x2f61636f685f
                line[size_b-1-j][k] = pola[k]*polb[j];
 3c4:	6974706f          	j	4825a <_stack_start+0x3825a>
 3c8:	696d                	lui	s2,0x1b
 3ca:	657a                	flw	fa0,156(sp)
 3cc:	2f64                	fld	fs1,216(a4)
 3ce:	68746977          	0x68746977
 3d2:	635f 7375 6f74      	0x6f747375635f
 3d8:	006d                	c.nop	27
 3da:	7261                	lui	tp,0xffff8
            for (k = size_a-1; k >= 0; k = k-1 ){
 3dc:	6172                	flw	ft2,28(sp)
 3de:	5f79                	li	t5,-2
        for (j = size_b -1; j >= 0; j = j-1){
 3e0:	00627573          	csrrci	a0,0x6,4
 3e4:	6f6c                	flw	fa1,92(a4)
 3e6:	676e                	flw	fa4,216(sp)
 3e8:	6420                	flw	fs0,72(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ea:	6c62756f          	jal	a0,27ab0 <_stack_start+0x17ab0>
        array_add(product2,line[i],size_a+size_b-1);
 3ee:	0065                	c.nop	25
 3f0:	6e5f 7865 6674      	0x667478656e5f
    for(i=0;i<size_b;++i){
 3f6:	6100                	flw	fs0,0(a0)
}
 3f8:	7272                	flw	ft4,60(sp)
 3fa:	7961                	lui	s2,0xffff8
 3fc:	655f 7571 6d00      	0x6d007571655f
 402:	7365                	lui	t1,0xffff9
 404:	65676173          	csrrsi	sp,0x656,14
 408:	5f00                	lw	s0,56(a4)
 40a:	745f 5f6d 6f6d      	0x6f6d5f6d745f
 410:	006e                	c.slli	zero,0x1b
 412:	6572                	flw	fa0,28(sp)
 414:	7574                	flw	fa3,108(a0)
 416:	6e72                	flw	ft8,28(sp)
 418:	615f 6464 6572      	0x65726464615f
 41e:	00357373          	csrrci	t1,fcsr,10
            for (k = size_a-1; k >= 0; k = k-1 ){
 422:	615f 6574 6978      	0x69786574615f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 428:	0074                	addi	a3,sp,12
 42a:	6f627573          	csrrci	a0,0x6f6,4
 42e:	7470                	flw	fa2,108(s0)
 430:	7261                	lui	tp,0xffff8
 432:	5f5f0067          	jr	1525(t5)
            for (k = size_a-1; k >= 0; k = k-1 ){
 436:	64696473          	csrrsi	s0,0x646,18
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 43a:	6e69                	lui	t3,0x1a
 43c:	7469                	lui	s0,0xffffa
            for (k = size_a-1; k >= 0; k = k-1 ){
 43e:	5f00                	lw	s0,56(a4)
 440:	5f66666f          	jal	a2,66a36 <_stack_start+0x56a36>
        for (j = size_b -1; j >= 0; j = j-1){
 444:	0074                	addi	a3,sp,12
 446:	6e45                	lui	t3,0x11
 448:	654d5f63          	bge	s10,s4,aa6 <generate_keys+0x2ba>
        array_add(product2,line[i],size_a+size_b-1);
 44c:	67617373          	csrrci	t1,0x676,2
 450:	0065                	c.nop	25
    for(i=0;i<size_b;++i){
 452:	746e6f63          	bltu	t3,t1,bb0 <ntru_deceypt+0x4c>
 456:	6f72                	flw	ft10,28(sp)
    int v[size_N];
 458:	526c                	lw	a1,100(a2)
 45a:	5f00                	lw	s0,56(a4)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 45c:	7266                	flw	ft4,120(sp)
    int v[size_N];
 45e:	6565                	lui	a0,0x19
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 460:	696c                	flw	fa1,84(a0)
 462:	72007473          	csrrci	s0,0x720,0
 466:	6e69                	lui	t3,0x1a
 468:	6f705f67          	0x6f705f67
 46c:	796c                	flw	fa1,116(a0)
 46e:	5f00                	lw	s0,56(a4)
 470:	4f4c                	lw	a1,28(a4)
 472:	525f4b43          	fmadd.d	fs6,ft10,ft5,fa0,rmm
 476:	4345                	li	t1,17
 478:	5255                	li	tp,-11
    int v[size_N];
 47a:	45564953          	0x45564953
 47e:	545f 7400 5f69      	0x5f697400545f
    int q[size_N];
 484:	0031                	c.nop	12
 486:	6974                	flw	fa3,84(a0)
 488:	325f 7500 736e      	0x736e7500325f
    int denum_temp[size_D];
 48e:	6769                	lui	a4,0x1a
 490:	656e                	flw	fa0,216(sp)
 492:	2064                	fld	fs1,192(s0)
 494:	72616863          	bltu	sp,t1,bc4 <ntru_deceypt+0x60>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 498:	7100                	flw	fs0,32(a0)
    int denum_temp[size_D];
 49a:	5f69                	li	t5,-6
 49c:	0031                	c.nop	12
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 49e:	6e5f 7765 5f00      	0x5f0077656e5f
    array_equ(num_temp,num,size_N);
 4a4:	5f68                	lw	a0,124(a4)
 4a6:	7265                	lui	tp,0xffff9
 4a8:	6e72                	flw	ft8,28(sp)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 4aa:	6873006f          	j	31330 <_stack_start+0x21330>
    int denum_temp[size_D];
 4ae:	2074726f          	jal	tp,47eb4 <_stack_start+0x37eb4>
    array_equ(num_temp,num,size_N);
 4b2:	6e69                	lui	t3,0x1a
    array_mod(num_temp,mod,size_N);
 4b4:	0074                	addi	a3,sp,12
 4b6:	5f5f 6d74 795f      	0x795f6d745f5f
    int denum_temp[size_D];
 4bc:	6164                	flw	fs1,68(a0)
    array_equ(denum_temp,denum,size_D);
 4be:	0079                	c.nop	30
 4c0:	5f5f 6273 6675      	0x667562735f5f
    array_mod(denum_temp,mod,size_D);
 4c6:	5f00                	lw	s0,56(a4)
 4c8:	6c66                	flw	fs8,88(sp)
 4ca:	6761                	lui	a4,0x18
 4cc:	5f003273          	csrrc	tp,0x5f0,zero
    for (i = 0; i < size_N; ++i){
 4d0:	6f69                	lui	t5,0x1a
 4d2:	7362                	flw	ft6,56(sp)
    for (i = size_D-1; i >= 0; i = i-1){
 4d4:	5f00                	lw	s0,56(a4)
 4d6:	465f 4c49 0045      	0x454c49465f
 4dc:	6d5f 7362 6174      	0x617473626d5f
    for (i = 0; i < size_N; ++i){
 4e2:	6574                	flw	fa3,76(a0)
        if ( (b_N*u)%mod == 1 )
 4e4:	745f 5f00 735f      	0x735f5f00745f
    for (u = 0; u < mod; ++u){
 4ea:	4946                	lw	s2,80(sp)
 4ec:	454c                	lw	a1,12(a0)
        q[i] = 0;
 4ee:	5f00                	lw	s0,56(a4)
 4f0:	626d                	lui	tp,0x1b
 4f2:	74617473          	csrrci	s0,0x746,2
        v[i] = 0;
 4f6:	0065                	c.nop	25
        q[i] = 0;
 4f8:	725f 6e61 5f64      	0x5f646e61725f
        v[i] = 0;
 4fe:	656e                	flw	fa0,216(sp)
    for (i = 0; i < size_N; ++i){
 500:	7478                	flw	fa4,108(s0)
 502:	5f00                	lw	s0,56(a4)
        if( denum_temp[i] != 0 )
 504:	626d                	lui	tp,0x1b
    for (i = size_D-1; i >= 0; i = i-1){
 506:	656c                	flw	fa1,76(a0)
 508:	5f6e                	lw	t5,248(sp)
        if ( (b_N*u)%mod == 1 )
 50a:	74617473          	csrrci	s0,0x746,2
 50e:	0065                	c.nop	25
 510:	695f 636e 5f00      	0x5f00636e695f
    for (u = 0; u < mod; ++u){
 516:	6e69                	lui	t3,0x1a
        if( num_temp[i] != 0 )
 518:	0064                	addi	s1,sp,12
    for (i = size_N-1; i >= 0; i = i-1){
 51a:	6c5f 636f 6c61      	0x6c61636f6c5f
 520:	0065                	c.nop	25
 522:	5f5f 6c63 6165      	0x61656c635f5f
    while (d >= d2){
 528:	756e                	flw	fa0,248(sp)
 52a:	0070                	addi	a2,sp,12
    array_equ(result,q,size_N);
 52c:	755f 736e 6570      	0x6570736e755f
 532:	69666963          	bltu	a2,s6,bc4 <ntru_deceypt+0x60>
 536:	6465                	lui	s0,0x19
 538:	6c5f 636f 6c61      	0x6c61636f6c5f
        result[i] = num_temp[i-size_N];
 53e:	5f65                	li	t5,-7
 540:	6e69                	lui	t3,0x1a
 542:	6f66                	flw	ft10,88(sp)
 544:	5f00                	lw	s0,56(a4)
    for(i = size_N; i < (2*size_N); ++i){
 546:	616d                	addi	sp,sp,240
 548:	7778                	flw	fa4,108(a4)
}
 54a:	7364                	flw	fs1,100(a4)
 54c:	5f00                	lw	s0,56(a4)
 54e:	6572                	flw	fa0,28(sp)
 550:	6e65                	lui	t3,0x19
 552:	0074                	addi	a3,sp,12
 554:	72617473          	csrrci	s0,0x726,2
 558:	6d5f 6c75 0074      	0x746c756d5f
 55e:	735f 6565 0064      	0x646565735f
 564:	6972                	flw	fs2,28(sp)
 566:	325f 5f00 635f      	0x635f5f00325f
 56c:	746e756f          	jal	a0,e7cb2 <_stack_start+0xd7cb2>
 570:	5f00                	lw	s0,56(a4)
 572:	765f 6c61 6575      	0x65756c61765f
        v[(d-d2)] = u*r_d;
 578:	5f00                	lw	s0,56(a4)
 57a:	6b656573          	csrrsi	a0,0x6b6,10
 57e:	5f00                	lw	s0,56(a4)
    array_mod(v,mod,size_N);
 580:	7066                	flw	ft0,120(sp)
 582:	745f736f          	jal	t1,f84c6 <_stack_start+0xe84c6>
        v[(d-d2)] = u*r_d;
 586:	6c00                	flw	fs0,24(s0)
    array_mod(v,mod,size_N);
 588:	6e65                	lui	t3,0x19
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 58a:	00687467          	0x687467
 58e:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
 594:	6e69                	lui	t3,0x1a
 596:	7000                	flw	fs0,32(s0)
    array_mod(product,mod,size_N);
 598:	6275                	lui	tp,0x1d
 59a:	696c                	flw	fa1,84(a0)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 59c:	656b5f63          	bge	s6,s6,bfa <ntru_deceypt+0x96>
    array_sub(num_temp,product,size_N);
 5a0:	0079                	c.nop	30
 5a2:	7261                	lui	tp,0xffff8
 5a4:	6172                	flw	ft2,28(sp)
 5a6:	5f79                	li	t5,-2
    array_mod(num_temp,mod,size_N);
 5a8:	6461                	lui	s0,0x18
 5aa:	0064                	addi	s1,sp,12
 5ac:	7261                	lui	tp,0xffff8
 5ae:	6172                	flw	ft2,28(sp)
    array_add(q,v,size_N);
 5b0:	5f79                	li	t5,-2
 5b2:	6f6d                	lui	t5,0x1b
 5b4:	0064                	addi	s1,sp,12
 5b6:	735f 7274 6f74      	0x6f747274735f
    array_mod(q,mod,size_N);
 5bc:	616c5f6b          	0x616c5f6b
        for (i = size_N-1; i >= 0; i = i-1){
 5c0:	5f007473          	csrrci	s0,0x5f0,0
 5c4:	6e66                	flw	ft8,88(sp)
 5c6:	7974                	flw	fa3,116(a0)
 5c8:	6570                	flw	fa2,76(a0)
 5ca:	65730073          	0x65730073
 5ce:	74657263          	bgeu	a0,t1,d12 <memcpy+0x74>
            if( num_temp[i] != 0 )
 5d2:	6b5f 7965 665f      	0x665f79656b5f
            v[i] = 0;
 5d8:	0070                	addi	a2,sp,12
 5da:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
 5e0:	69720067          	jr	1687(tp) # 0 <__DYNAMIC>
        for (i = 0; i < size_N; ++i){
 5e4:	315f 5f00 6567      	0x65675f00315f
        result[i] = num_temp[i-size_N];
 5ea:	6474                	flw	fa3,76(s0)
 5ec:	7461                	lui	s0,0xffff8
 5ee:	5f65                	li	t5,-7
 5f0:	7265                	lui	tp,0xffff9
 5f2:	0072                	c.slli	zero,0x1c
 5f4:	6e69                	lui	t3,0x1a
    for(i = size_N; i < (2*size_N); ++i){
 5f6:	5f727473          	csrrci	s0,0x5f7,4
 5fa:	00627573          	csrrci	a0,0x6,4
    int ri_2[size]; // MX-ring poly, a
 5fe:	675f 6f6c 6162      	0x61626f6c675f
 604:	5f6c                	lw	a1,124(a4)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 606:	6d69                	lui	s10,0x1a
 608:	7570                	flw	fa2,108(a0)
 60a:	6572                	flw	fa0,28(sp)
 60c:	705f 7274 4700      	0x47007274705f
 612:	554e                	lw	a0,240(sp)
 614:	4320                	lw	s0,64(a4)
 616:	3731                	jal	522 <polydiv+0xca>
 618:	3920                	fld	fs0,112(a0)
 61a:	322e                	fld	ft4,232(sp)
 61c:	302e                	fld	ft0,232(sp)
 61e:	2d20                	fld	fs0,88(a0)
 620:	616d                	addi	sp,sp,240
    int ri_2[size]; // MX-ring poly, a
 622:	6372                	flw	ft6,28(sp)
 624:	3d68                	fld	fa0,248(a0)
 626:	7672                	flw	fa2,60(sp)
    int ri_1[size]; // f-random poly, f[N] = 0, b
 628:	6d693233          	0x6d693233
 62c:	6d2d2063          	0x6d2d2063
    int ri[size];
 630:	6261                	lui	tp,0x18
 632:	3d69                	jal	4cc <polydiv+0x74>
    int ti_1[size]; // ti_1[0] = 1
 634:	6c69                	lui	s8,0x1a
 636:	3370                	fld	fa2,224(a4)
 638:	2032                	fld	ft0,264(sp)
    int ti[size];
 63a:	6d2d                	lui	s10,0xb
 63c:	646f6d63          	bltu	t5,t1,c96 <main_entry+0x4>
    int qi_1[size];
 640:	6c65                	lui	s8,0x19
 642:	6d3d                	lui	s10,0xf
 644:	6465                	lui	s0,0x19
    int temp[size];
 646:	6e61                	lui	t3,0x18
 648:	2079                	jal	6d6 <ext_euclid+0xda>
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 64a:	6d2d                	lui	s10,0xb
 64c:	7574                	flw	fa3,108(a0)
 64e:	656e                	flw	fa0,216(sp)
    int ri_2[size]; // MX-ring poly, a
 650:	723d                	lui	tp,0xfffef
 652:	656b636f          	jal	t1,b6ca8 <_stack_start+0xa6ca8>
    for (i = 0; i < size; ++i) {
 656:	2074                	fld	fa3,192(s0)
        ti_2[i] = 0;
 658:	672d                	lui	a4,0xb
 65a:	2d20                	fld	fs0,88(a0)
 65c:	2d20734f          	0x2d20734f
    for (i = 0; i < size; ++i) {
 660:	7666                	flw	fa2,120(sp)
 662:	7369                	lui	t1,0xffffa
    array_equ(ri_2,polyR,size);
 664:	6269                	lui	tp,0x1a
 666:	6c69                	lui	s8,0x1a
 668:	7469                	lui	s0,0xffffa
 66a:	3d79                	jal	508 <polydiv+0xb0>
    array_equ(ri_1,polyf,size);
 66c:	6968                	flw	fa0,84(a0)
 66e:	6464                	flw	fs1,76(s0)
 670:	6e65                	lui	t3,0x19
 672:	5f00                	lw	s0,56(a4)
    ti_1[0] = 1;
 674:	6e75                	lui	t3,0x1d
 676:	7375                	lui	t1,0xffffd
 678:	6465                	lui	s0,0x19
        for (i = N + 1; i < (2 * N + 2); ++i) {
 67a:	725f 6e61 0064      	0x646e61725f
 680:	696c                	flw	fa1,84(a0)
    array_equ(ti,ti_2,size);
 682:	656e                	flw	fa0,216(sp)
 684:	5f00                	lw	s0,56(a4)
 686:	00736477          	0x736477
    array_mod(ri_2,mod,size);
 68a:	5f5f 6d74 775f      	0x775f6d745f5f
 690:	6164                	flw	fs1,68(a0)
    array_mod(ri_1,mod,size);
 692:	0079                	c.nop	30
 694:	675f 756c 0065      	0x65756c675f
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
 69a:	6e69                	lui	t3,0x1a
 69c:	5f727473          	csrrci	s0,0x5f7,4
 6a0:	7165                	addi	sp,sp,-400
 6a2:	0075                	c.nop	29
 6a4:	746e                	flw	fs0,248(sp)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 6a6:	7572                	flw	fa0,60(sp)
 6a8:	655f 636e 7279      	0x7279636e655f
 6ae:	7470                	flw	fa2,108(s0)
 6b0:	5f00                	lw	s0,56(a4)
    array_equ(temp,ri_2,size);
 6b2:	7a697373          	csrrci	t1,0x7a6,18
 6b6:	5f65                	li	t5,-7
 6b8:	0074                	addi	a3,sp,12
    array_sub(temp,ri,size);
 6ba:	6c5f 3436 5f61      	0x5f6134366c5f
 6c0:	7562                	flw	fa0,56(sp)
    array_mod(temp,mod,size);
 6c2:	0066                	c.slli	zero,0x19
 6c4:	6564                	flw	fs1,76(a0)
 6c6:	756e                	flw	fa0,248(sp)
 6c8:	006d                	c.nop	27
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
 6ca:	735f 6769 665f      	0x665f6769735f
 6d0:	6e75                	lui	t3,0x1d
 6d2:	6e5f0063          	beq	t5,t0,db2 <memset+0x36>
 6d6:	7562                	flw	fa0,56(sp)
    array_equ(qi_1,res1,size);
 6d8:	0066                	c.slli	zero,0x19
 6da:	755f 756e 6573      	0x6573756e755f
    array_mod(qi_1,mod,size);
 6e0:	0064                	addi	s1,sp,12
 6e2:	6f70                	flw	fa2,92(a4)
 6e4:	796c                	flw	fa1,116(a0)
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
 6e6:	0052                	c.slli	zero,0x14
 6e8:	657a6973          	csrrsi	s2,0x657,20
 6ec:	445f 5f00 745f      	0x745f5f00445f
 6f2:	5f6d                	li	t5,-5
 6f4:	7369                	lui	t1,0xffffa
    array_equ(temp,res2,size);
 6f6:	7364                	flw	fs1,100(a4)
 6f8:	0074                	addi	a3,sp,12
 6fa:	6c5f 636f 6c61      	0x6c61636f6c5f
    array_mod(temp,mod,size);
 700:	6974                	flw	fa3,84(a0)
 702:	656d                	lui	a0,0x1b
    array_equ(ti,ti_2,size);
 704:	625f 6675 5f00      	0x5f006675625f
 70a:	736f6c63          	bltu	t5,s6,e42 <main+0x1e>
    array_sub(ti,temp,size);
 70e:	0065                	c.nop	25
 710:	725f 3834 5f00      	0x5f003834725f
    array_mod(ti,mod,size);
 716:	626d                	lui	tp,0x1b
 718:	6f74                	flw	fa3,92(a4)
 71a:	735f6377          	0x735f6377
array_equ(ri_2,ri_1,size);
 71e:	6174                	flw	fa3,68(a0)
 720:	6574                	flw	fa3,76(a0)
 722:	5f00                	lw	s0,56(a4)
array_equ(ri_1,ri,size);
 724:	3570                	fld	fa2,232(a0)
 726:	616d0073          	0x616d0073
 72a:	6e69                	lui	t3,0x1a
array_equ(ti_2,ti_1,size);
 72c:	5f00                	lw	s0,56(a4)
 72e:	745f 5f6d 646d      	0x646d5f6d745f
array_equ(ti_1,ti,size);
 734:	7961                	lui	s2,0xffff8
 736:	7300                	flw	fs0,32(a4)
 738:	7a69                	lui	s4,0xffffa
 73a:	5f65                	li	t5,-7
        controlR = 0;
 73c:	0061                	c.nop	24
        for (i = 0; i < N + 1; ++i) {
 73e:	657a6973          	csrrsi	s2,0x657,20
 742:	625f 6300 7472      	0x74726300625f
        for (j = 0; j < mod; ++j) {
 748:	2e30                	fld	fa2,88(a2)
            if (((ri_2[0] * j) % mod) == 1)
 74a:	4e470053          	0x4e470053
        for (j = 0; j < mod; ++j) {
 74e:	2055                	jal	7f2 <generate_keys+0x6>
 750:	5341                	li	t1,-16
 752:	3220                	fld	fs0,96(a2)
 754:	332e                	fld	ft6,232(sp)
 756:	0032                	c.slli	zero,0xc

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <ext_euclid+0x84>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0022                	c.slli	zero,0x8
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	00b4                	addi	a3,sp,72
  3a:	0000                	unimp
  3c:	0006                	c.slli	zero,0x1
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	00ba                	slli	ra,ra,0xe
  4a:	0000                	unimp
  4c:	0022                	c.slli	zero,0x8
  4e:	0000                	unimp
  50:	000c                	0xc
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	00dc                	addi	a5,sp,68
  5a:	0000                	unimp
  5c:	0006                	c.slli	zero,0x1
  5e:	0000                	unimp
  60:	000c                	0xc
  62:	0000                	unimp
  64:	0000                	unimp
  66:	0000                	unimp
  68:	00e2                	slli	ra,ra,0x18
  6a:	0000                	unimp
  6c:	0022                	c.slli	zero,0x8
  6e:	0000                	unimp
  70:	000c                	0xc
  72:	0000                	unimp
  74:	0000                	unimp
  76:	0000                	unimp
  78:	0104                	addi	s1,sp,128
  7a:	0000                	unimp
  jal x0, default_exc_handler
  7c:	0006                	c.slli	zero,0x1
  7e:	0000                	unimp
  jal x0, reset_handler
  80:	000c                	0xc
  82:	0000                	unimp
  jal x0, default_exc_handler
  84:	0000                	unimp
  86:	0000                	unimp
  jal x0, default_exc_handler
  88:	010a                	slli	sp,sp,0x2
  8a:	0000                	unimp
    asm volatile(
  8c:	001e                	c.slli	zero,0x7
  8e:	0000                	unimp
}
  90:	0058                	addi	a4,sp,4
    for(i=0;i<(length/3);i++) {
  92:	0000                	unimp
  94:	0000                	unimp
  96:	0000                	unimp
  98:	0128                	addi	a0,sp,136
  9a:	0000                	unimp
  9c:	01d2                	slli	gp,gp,0x14
  9e:	0000                	unimp
}
  a0:	0e42                	slli	t3,t3,0x10
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	4250                	lw	a2,4(a2)
  a4:	0492                	slli	s1,s1,0x4
    asm volatile(
  a6:	9346                	add	t1,t1,a7
  a8:	4805                	li	a6,1
  aa:	0a98                	addi	a4,sp,336
  ac:	0b99                	addi	s7,s7,6
  ae:	944e                	add	s0,s0,s3
    for(i=0;i<(length/3);i++) {
  b0:	5806                	lw	a6,96(sp)
  b2:	0288                	addi	a0,sp,320
    asm volatile(
  b4:	0389                	addi	t2,t2,2
  b6:	0795                	addi	a5,a5,5
}
  b8:	0896                	slli	a7,a7,0x5
    for(i=0;i<(length/3);i++) {
  ba:	0c9a0997          	auipc	s3,0xc9a0
  be:	01810d9b          	0x1810d9b
  c2:	0c42                	slli	s8,s8,0x10
  c4:	0008                	0x8
  c6:	0a00e603          	0xa00e603
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  ca:	020c                	addi	a1,sp,256
  cc:	4250                	lw	a2,4(a2)
    asm volatile(
  ce:	42c1                	li	t0,16
  d0:	42c8                	lw	a0,4(a3)
  d2:	42c9                	li	t0,18
  d4:	42d2                	lw	t0,20(sp)
  d6:	42d442d3          	0x42d442d3
    for(i=0;i<(length/3);i++) {
  da:	42d5                	li	t0,21
    asm volatile(
  dc:	42d6                	lw	t0,84(sp)
  de:	42d842d7          	0x42d842d7
    for(i=0;i<(length/3);i++) {
  e2:	42d9                	li	t0,22
  e4:	42da                	lw	t0,148(sp)
  e6:	000e4adb          	0xe4adb
  ea:	0b42                	slli	s6,s6,0x10
  ec:	0058                	addi	a4,sp,4
  ee:	0000                	unimp
}
  f0:	0000                	unimp
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	0000                	unimp
  f4:	02fa                	slli	t0,t0,0x1e
    asm volatile(
  f6:	0000                	unimp
  f8:	015e                	slli	sp,sp,0x17
  fa:	0000                	unimp
  fc:	0e42                	slli	t3,t3,0x10
  fe:	4650                	lw	a2,12(a2)
    for(i=0;i<(length/3);i++) {
 100:	0896                	slli	a7,a7,0x5
 102:	9348                	0x9348
    asm volatile(
 104:	9705                	srai	a4,a4,0x21
 106:	6209                	lui	tp,0x2
}
 108:	0288                	addi	a0,sp,320
    for(i=0;i<(length/3);i++) {
 10a:	0389                	addi	t2,t2,2
 10c:	0492                	slli	s1,s1,0x4
 10e:	0694                	addi	a3,sp,832
    asm volatile(
 110:	0795                	addi	a5,a5,5
    for(i=0;i<(length/3);i++) {
 112:	0a98                	addi	a4,sp,336
 114:	0b99                	addi	s7,s7,6
 116:	0c9a                	slli	s9,s9,0x6
}
 118:	01810d9b          	0x1810d9b
    asm volatile(
 11c:	0c42                	slli	s8,s8,0x10
 11e:	0008                	0x8
 120:	ce02                	sw	zero,28(sp)
 122:	0c0a                	slli	s8,s8,0x2
    for(i=0;i<(length/3);i++) {
 124:	5002                	0x5002
 126:	c142                	sw	a6,128(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 128:	c842                	sw	a6,16(sp)
 12a:	c942                	sw	a6,144(sp)
 12c:	d242                	sw	a6,36(sp)
 12e:	d342                	sw	a6,164(sp)
    int line[size_b][size_a + size_b];
 130:	d442                	sw	a6,40(sp)
 132:	d542                	sw	a6,168(sp)
 134:	d642                	sw	a6,44(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 136:	d742                	sw	a6,172(sp)
 138:	d842                	sw	a6,48(sp)
    int line[size_b][size_a + size_b];
 13a:	d942                	sw	a6,176(sp)
 13c:	da42                	sw	a6,52(sp)
 13e:	db42                	sw	a6,180(sp)
 140:	0e4a                	slli	t3,t3,0x12
 142:	4200                	lw	s0,0(a2)
 144:	0000000b          	0xb
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 148:	0054                	addi	a3,sp,4
    int pola[size_a];
 14a:	0000                	unimp
 14c:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 14e:	0000                	unimp
 150:	0458                	addi	a4,sp,516
 152:	0000                	unimp
 154:	01a4                	addi	s1,sp,200
 156:	0000                	unimp
 158:	0e46                	slli	t3,t3,0x11
    int line[size_b][size_a + size_b];
 15a:	4840                	lw	s0,20(s0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 15c:	0181                	addi	gp,gp,0
 15e:	0288                	addi	a0,sp,320
 160:	0389                	addi	t2,t2,2
    int line[size_b][size_a + size_b];
 162:	0c42                	slli	s8,s8,0x10
    int pola[size_a];
 164:	0008                	0x8
 166:	9256                	add	tp,tp,s5
    int line[size_b][size_a + size_b];
 168:	9304                	0x9304
 16a:	9405                	srai	s0,s0,0x21
 16c:	9506                	add	a0,a0,ra
    int pola[size_a];
 16e:	97089607          	0x97089607
    int polb[size_b];
 172:	9809                	andi	s0,s0,-30
 174:	990a                	add	s2,s2,sp
 176:	9b0c9a0b          	0x9b0c9a0b
 17a:	020d                	addi	tp,tp,3
 17c:	0ad0                	addi	a2,sp,340
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 17e:	020c                	addi	a1,sp,256
    int pola[size_a];
 180:	4240                	lw	s0,4(a2)
 182:	42c1                	li	t0,16
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 184:	42c8                	lw	a0,4(a3)
    int line[size_b][size_a + size_b];
 186:	42c9                	li	t0,18
 188:	42d2                	lw	t0,20(sp)
    int polb[size_b];
 18a:	42d442d3          	0x42d442d3
            line[i][j] = 0;
 18e:	42d5                	li	t0,21
 190:	42d6                	lw	t0,84(sp)
    for (i = 0; i < size_b; ++i){
 192:	42d842d7          	0x42d842d7
            product[j] = 0;
 196:	42d9                	li	t0,22
 198:	42da                	lw	t0,148(sp)
 19a:	000e4adb          	0xe4adb
    for (i = 0; i < size_b; ++i){
 19e:	0b42                	slli	s6,s6,0x10
 1a0:	0054                	addi	a3,sp,4
    array_equ(pola,a,size_a);
 1a2:	0000                	unimp
 1a4:	0000                	unimp
 1a6:	0000                	unimp
 1a8:	05fc                	addi	a5,sp,716
 1aa:	0000                	unimp
 1ac:	01f0                	addi	a2,sp,204
 1ae:	0000                	unimp
 1b0:	0e46                	slli	t3,t3,0x11
 1b2:	5e50                	lw	a2,60(a2)
 1b4:	0288                	addi	a0,sp,320
 1b6:	0389                	addi	t2,t2,2
 1b8:	0492                	slli	s1,s1,0x4
    array_mod(pola,mod,size_a);
 1ba:	06940593          	addi	a1,s0,105 # 19069 <_stack_start+0x9069>
 1be:	0795                	addi	a5,a5,5
 1c0:	0896                	slli	a7,a7,0x5
    array_equ(polb,b,size_b);
 1c2:	0a980997          	auipc	s3,0xa980
 1c6:	0b99                	addi	s7,s7,6
 1c8:	0c9a                	slli	s9,s9,0x6
 1ca:	01810d9b          	0x1810d9b
    array_mod(polb,mod,size_b);
 1ce:	0c42                	slli	s8,s8,0x10
 1d0:	0008                	0x8
 1d2:	0a013e03          	0xa013e03
    if(star_mult == 1){
 1d6:	020c                	addi	a1,sp,256
 1d8:	4250                	lw	a2,4(a2)
 1da:	42c1                	li	t0,16
 1dc:	42c8                	lw	a0,4(a3)
 1de:	42c9                	li	t0,18
 1e0:	42d2                	lw	t0,20(sp)
 1e2:	42d442d3          	0x42d442d3
 1e6:	42d5                	li	t0,21
 1e8:	42d6                	lw	t0,84(sp)
 1ea:	42d842d7          	0x42d842d7
 1ee:	42d9                	li	t0,22
 1f0:	42da                	lw	t0,148(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 1f2:	000e4adb          	0xe4adb
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f6:	0b42                	slli	s6,s6,0x10
 1f8:	0054                	addi	a3,sp,4
            product[j] = 0;
 1fa:	0000                	unimp
 1fc:	0000                	unimp
 1fe:	0000                	unimp
            line[i][j] = 0;
 200:	07ec                	addi	a1,sp,972
 202:	0000                	unimp
            product[j] = 0;
 204:	02f2                	slli	t0,t0,0x1c
 206:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 208:	0e42                	slli	t3,t3,0x10
 20a:	03f0                	addi	a2,sp,460
 20c:	814c                	0x814c
 20e:	8801                	andi	s0,s0,0
    for (i = 0; i < size_b; ++i){
 210:	8902                	jr	s2
 212:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
 216:	6400                	flw	fs0,8(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
 218:	0492                	slli	s1,s1,0x4
 21a:	06940593          	addi	a1,s0,105
        for (j = size_b -1; j >= 0; j = j-1){
 21e:	0795                	addi	a5,a5,5
 220:	0896                	slli	a7,a7,0x5
        for(j = 0; j < size_a + size_b -1; ++j){
 222:	0c9a0997          	auipc	s3,0xc9a0
    for (i = 0; i < size_b; ++i){
 226:	0a98                	addi	a4,sp,336
 228:	0b99                	addi	s7,s7,6
 22a:	0a01da03          	lhu	s4,160(gp) # 630a1194 <_stack_start+0x63091194>
 22e:	020c                	addi	a1,sp,256
    for(j = 0; j < size_a + size_b -1; ++j){
 230:	03f0                	addi	a2,sp,460
 232:	c144                	sw	s1,4(a0)
 234:	c844                	sw	s1,20(s0)
    array_mod(product,mod,(size_a+size_b-1));
 236:	c944                	sw	s1,20(a0)
 238:	d244                	sw	s1,36(a2)
 23a:	d344                	sw	s1,36(a4)
 23c:	d444                	sw	s1,44(s0)
 23e:	d544                	sw	s1,44(a0)
 240:	d644                	sw	s1,44(a2)
 242:	d744                	sw	s1,44(a4)
}
 244:	d844                	sw	s1,52(s0)
 246:	d944                	sw	s1,52(a0)
 248:	da44                	sw	s1,52(a2)
 24a:	0e4a                	slli	t3,t3,0x12
 24c:	4200                	lw	s0,0(a2)
 24e:	0034000b          	0x34000b
 252:	0000                	unimp
 254:	0000                	unimp
 256:	0000                	unimp
 258:	0ade                	slli	s5,s5,0x17
 25a:	0000                	unimp
 25c:	0086                	slli	ra,ra,0x1
 25e:	0000                	unimp
 260:	0e42                	slli	t3,t3,0x10
 262:	01e0                	addi	s0,sp,204
 264:	8844                	0x8844
 266:	8902                	jr	s2
 268:	04924a03          	lbu	s4,73(tp) # 2049 <_min_stack+0x49>
 26c:	8152                	mv	sp,s4
                line[size_b-1-j][k] = pola[k]*polb[j];
 26e:	9301                	srli	a4,a4,0x20
 270:	9405                	srai	s0,s0,0x21
 272:	0206                	slli	tp,tp,0x1
 274:	0a44                	addi	s1,sp,276
 276:	42c1                	li	t0,16
 278:	42c8                	lw	a0,4(a3)
 27a:	42c9                	li	t0,18
 27c:	42d2                	lw	t0,20(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 27e:	42d442d3          	0x42d442d3
                line[size_b-1-j][k] = pola[k]*polb[j];
 282:	000e                	c.slli	zero,0x3
 284:	0b42                	slli	s6,s6,0x10
            for (k = size_a-1; k >= 0; k = k-1 ){
 286:	0000                	unimp
 288:	0040                	addi	s0,sp,4
        for (j = size_b -1; j >= 0; j = j-1){
 28a:	0000                	unimp
 28c:	0000                	unimp
 28e:	0000                	unimp
 290:	0b64                	addi	s1,sp,412
            for (k = size_a-1; k >= 0; k = k-1 ){
 292:	0000                	unimp
 294:	00c4                	addi	s1,sp,68
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 296:	0000                	unimp
 298:	0e42                	slli	t3,t3,0x10
 29a:	4430                	lw	a2,72(s0)
 29c:	0288                	addi	a0,sp,320
 29e:	924e0593          	addi	a1,t3,-1756 # 19924 <_stack_start+0x9924>
 2a2:	9504                	0x9504
 2a4:	58099707          	0x58099707
 2a8:	0181                	addi	gp,gp,0
 2aa:	0389                	addi	t2,t2,2
 2ac:	0694                	addi	a3,sp,832
            for (k = size_a-1; k >= 0; k = k-1 ){
 2ae:	0896                	slli	a7,a7,0x5
 2b0:	4e02                	lw	t3,0(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 2b2:	c10a                	sw	sp,128(sp)
 2b4:	c842                	sw	a6,16(sp)
 2b6:	c942                	sw	a6,144(sp)
 2b8:	d242                	sw	a6,36(sp)
            line[i][j] = line[i][j] % mod;
 2ba:	d342                	sw	a6,164(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 2bc:	d442                	sw	a6,40(sp)
 2be:	d542                	sw	a6,168(sp)
            line[i][j] = line[i][j] % mod;
 2c0:	d642                	sw	a6,44(sp)
 2c2:	d742                	sw	a6,172(sp)
 2c4:	0e42                	slli	t3,t3,0x10
 2c6:	4200                	lw	s0,0(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
 2c8:	0000000b          	0xb
    for (i = 0; i < size_b; ++i){
 2cc:	0024                	addi	s1,sp,8
 2ce:	0000                	unimp
 2d0:	0000                	unimp
 2d2:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 2d4:	0e24                	addi	s1,sp,792
 2d6:	0000                	unimp
            product[j] += line[i][j];
 2d8:	00f8                	addi	a4,sp,76
 2da:	0000                	unimp
 2dc:	0e44                	addi	s1,sp,788
        for(i = 0; i < size_b; ++i){
 2de:	08b0                	addi	a2,sp,88
            product[j] += line[i][j];
 2e0:	815a                	mv	sp,s6
 2e2:	8801                	andi	s0,s0,0
 2e4:	8902                	jr	s2
 2e6:	0ac00203          	lb	tp,172(zero) # ac <array_add+0x1a>
 2ea:	44c1                	li	s1,16
        for(i = 0; i < size_b; ++i){
 2ec:	44c8                	lw	a0,12(s1)
 2ee:	46c9                	li	a3,18
    for(j = 0; j < size_a + size_b -1; ++j){
 2f0:	000e                	c.slli	zero,0x3
 2f2:	0b42                	slli	s6,s6,0x10

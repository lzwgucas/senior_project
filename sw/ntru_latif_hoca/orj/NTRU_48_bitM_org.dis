
NTRU_48_bitM_org.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	66f0006f          	j	eea <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	66f0006f          	j	eee <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	6670006f          	j	eea <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	6630006f          	j	eea <default_exc_handler>

Disassembly of section .text:

0000008c <polymult>:
static int random_keys[318];
volatile int resultkon = 2;
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){

//static int product[100]; //must be constant for now because of local return value resctriction, but will chage in the code..
int line[size_b][size_a + size_b];
      8c:	00d58833          	add	a6,a1,a3
      90:	00269893          	slli	a7,a3,0x2
      94:	00281e93          	slli	t4,a6,0x2
      98:	fff80f93          	addi	t6,a6,-1
      9c:	03180833          	mul	a6,a6,a7
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      a0:	1101                	addi	sp,sp,-32
      a2:	ce22                	sw	s0,28(sp)
      a4:	cc26                	sw	s1,24(sp)
      a6:	c84e                	sw	s3,16(sp)
      a8:	c652                	sw	s4,12(sp)
      aa:	c05e                	sw	s7,0(sp)
      ac:	ca4a                	sw	s2,20(sp)
      ae:	c456                	sw	s5,8(sp)
      b0:	c25a                	sw	s6,4(sp)
int line[size_b][size_a + size_b];
      b2:	083d                	addi	a6,a6,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b4:	1000                	addi	s0,sp,32
int line[size_b][size_a + size_b];
      b6:	ff087813          	andi	a6,a6,-16
      ba:	41010133          	sub	sp,sp,a6
int i,j,k;
int *return_address1;
int pola[size_a];
      be:	00259813          	slli	a6,a1,0x2
      c2:	083d                	addi	a6,a6,15
      c4:	ff087813          	andi	a6,a6,-16
int line[size_b][size_a + size_b];
      c8:	8e0a                	mv	t3,sp
int pola[size_a];
      ca:	41010133          	sub	sp,sp,a6
int polb[size_b];
      ce:	00f88813          	addi	a6,a7,15
      d2:	ff087813          	andi	a6,a6,-16
int pola[size_a];
      d6:	8f0a                	mv	t5,sp
int polb[size_b];
      d8:	41010133          	sub	sp,sp,a6
int line[size_b][size_a + size_b];
      dc:	fff68313          	addi	t1,a3,-1
int pola[size_a];
      e0:	fff58393          	addi	t2,a1,-1
int polb[size_b];
      e4:	880a                	mv	a6,sp

	//make all line vectors zero
	for (i = 0; i < size_b; ++i){
		for(j = 0; j < size_a + size_b -1; ++j){
			line[i][j] = 0;
      e6:	002ed293          	srli	t0,t4,0x2
      ea:	84f2                	mv	s1,t3
	for (i = 0; i < size_b; ++i){
      ec:	8a72                	mv	s4,t3
      ee:	4981                	li	s3,0
			product[j] = 0;		
      f0:	00001b97          	auipc	s7,0x1
      f4:	27cb8b93          	addi	s7,s7,636 # 136c <_bss_start>
	for (i = 0; i < size_b; ++i){
      f8:	06d9c263          	blt	s3,a3,15c <polymult+0xd0>
		}
	}

	for(i = 0; i < size_a; ++i){
      fc:	4901                	li	s2,0
      fe:	06b94263          	blt	s2,a1,162 <polymult+0xd6>
		pola[i] = a[i];
	}

	for(i = 0; i < size_b; ++i){
     102:	4501                	li	a0,0
     104:	06d54a63          	blt	a0,a3,178 <polymult+0xec>
     108:	867a                	mv	a2,t5
     10a:	857a                	mv	a0,t5
		printf(" %d ",polb[i]);
	}
	printf("\n");*/
	
	// make mod calculations
	for (i = 0; i < size_a; ++i){
     10c:	4981                	li	s3,0
     10e:	08b9c363          	blt	s3,a1,194 <polymult+0x108>
		while (pola[i] < 0){
			pola[i] = pola[i] + mod;		
		}
	}

	for (i = 0; i < size_a; ++i){
     112:	4501                	li	a0,0
     114:	08b54763          	blt	a0,a1,1a2 <polymult+0x116>
     118:	8642                	mv	a2,a6
     11a:	85c2                	mv	a1,a6
		pola[i] = pola[i] % mod;
	}

	for (i = 0; i < size_b; ++i){
     11c:	4901                	li	s2,0
     11e:	08d94d63          	blt	s2,a3,1b8 <polymult+0x12c>
		while (polb[i] < 0){
			polb[i] = polb[i] + mod;		
		}
	}

	for(i = 0; i < size_b; ++i){
     122:	4581                	li	a1,0
     124:	0ad5c063          	blt	a1,a3,1c4 <polymult+0x138>
		polb[i] = polb[i] % mod;
	}

	// make calculations for partial products, if need add mod calculations
	if(star_mult == 1){
     128:	4605                	li	a2,1
     12a:	9846                	add	a6,a6,a7
     12c:	0ac78463          	beq	a5,a2,1d4 <polymult+0x148>
     130:	18f1                	addi	a7,a7,-4
     132:	ffce8593          	addi	a1,t4,-4
     136:	98f2                	add	a7,a7,t3
				line[size_b-1-j][k] = pola[k]*polb[j];
			}		
		}
	}
	else{
		for (j = size_b -1; j >= 0; j = j-1){
     138:	0a034163          	bltz	t1,1da <polymult+0x14e>
			for (k = size_a-1; k >= 0; k = k-1 ){
     13c:	879e                	mv	a5,t2
     13e:	aa21                	j	256 <polymult+0x1ca>
			product[j] = 0;		
     140:	00291b13          	slli	s6,s2,0x2
     144:	9b5e                	add	s6,s6,s7
			line[i][j] = 0;
     146:	000aa023          	sw	zero,0(s5)
			product[j] = 0;		
     14a:	000b2023          	sw	zero,0(s6)
		for(j = 0; j < size_a + size_b -1; ++j){
     14e:	0905                	addi	s2,s2,1
     150:	0a91                	addi	s5,s5,4
     152:	fff947e3          	blt	s2,t6,140 <polymult+0xb4>
	for (i = 0; i < size_b; ++i){
     156:	0985                	addi	s3,s3,1
     158:	9a76                	add	s4,s4,t4
     15a:	bf79                	j	f8 <polymult+0x6c>
     15c:	8ad2                	mv	s5,s4
		for(j = 0; j < size_a + size_b -1; ++j){
     15e:	4901                	li	s2,0
     160:	bfcd                	j	152 <polymult+0xc6>
		pola[i] = a[i];
     162:	00291993          	slli	s3,s2,0x2
     166:	013f0a33          	add	s4,t5,s3
     16a:	99aa                	add	s3,s3,a0
     16c:	0009a983          	lw	s3,0(s3)
	for(i = 0; i < size_a; ++i){
     170:	0905                	addi	s2,s2,1
		pola[i] = a[i];
     172:	013a2023          	sw	s3,0(s4)
	for(i = 0; i < size_a; ++i){
     176:	b761                	j	fe <polymult+0x72>
		polb[i] = b[i];
     178:	00251913          	slli	s2,a0,0x2
     17c:	012809b3          	add	s3,a6,s2
     180:	9932                	add	s2,s2,a2
     182:	00092903          	lw	s2,0(s2)
	for(i = 0; i < size_b; ++i){
     186:	0505                	addi	a0,a0,1
		polb[i] = b[i];
     188:	0129a023          	sw	s2,0(s3)
	for(i = 0; i < size_b; ++i){
     18c:	bfa5                	j	104 <polymult+0x78>
			pola[i] = pola[i] + mod;		
     18e:	993a                	add	s2,s2,a4
     190:	01252023          	sw	s2,0(a0)
		while (pola[i] < 0){
     194:	00052903          	lw	s2,0(a0)
     198:	fe094be3          	bltz	s2,18e <polymult+0x102>
	for (i = 0; i < size_a; ++i){
     19c:	0985                	addi	s3,s3,1
     19e:	0511                	addi	a0,a0,4
     1a0:	b7bd                	j	10e <polymult+0x82>
		pola[i] = pola[i] % mod;
     1a2:	00062903          	lw	s2,0(a2)
	for (i = 0; i < size_a; ++i){
     1a6:	0505                	addi	a0,a0,1
     1a8:	0611                	addi	a2,a2,4
		pola[i] = pola[i] % mod;
     1aa:	02e96933          	rem	s2,s2,a4
     1ae:	ff262e23          	sw	s2,-4(a2)
	for (i = 0; i < size_a; ++i){
     1b2:	b78d                	j	114 <polymult+0x88>
			polb[i] = polb[i] + mod;		
     1b4:	953a                	add	a0,a0,a4
     1b6:	c188                	sw	a0,0(a1)
		while (polb[i] < 0){
     1b8:	4188                	lw	a0,0(a1)
     1ba:	fe054de3          	bltz	a0,1b4 <polymult+0x128>
	for (i = 0; i < size_b; ++i){
     1be:	0905                	addi	s2,s2,1
     1c0:	0591                	addi	a1,a1,4
     1c2:	bfb1                	j	11e <polymult+0x92>
		polb[i] = polb[i] % mod;
     1c4:	4208                	lw	a0,0(a2)
	for(i = 0; i < size_b; ++i){
     1c6:	0585                	addi	a1,a1,1
     1c8:	0611                	addi	a2,a2,4
		polb[i] = polb[i] % mod;
     1ca:	02e56533          	rem	a0,a0,a4
     1ce:	fea62e23          	sw	a0,-4(a2)
	for(i = 0; i < size_b; ++i){
     1d2:	bf89                	j	124 <polymult+0x98>
	if(star_mult == 1){
     1d4:	85f2                	mv	a1,t3
		for (j = size_b -1; j >= 0; j = j-1){
     1d6:	06035263          	bgez	t1,23a <polymult+0x1ae>
		}	
	}

	//mod calculations
	for (i = 0; i < size_b; ++i){
		for(j = 0; j < size_a + size_b -1; ++j){
     1da:	4601                	li	a2,0
	for (i = 0; i < size_b; ++i){
     1dc:	08d64f63          	blt	a2,a3,27a <polymult+0x1ee>
     1e0:	00001617          	auipc	a2,0x1
     1e4:	18c60613          	addi	a2,a2,396 # 136c <_bss_start>
     1e8:	8532                	mv	a0,a2
			line[i][j] = line[i][j] % mod;
		}		
	}

	// construct product
	for(j = 0; j < size_a + size_b -1; ++j){
     1ea:	4581                	li	a1,0
     1ec:	0bf5ca63          	blt	a1,t6,2a0 <polymult+0x214>
			product[j] += line[i][j];
		}
	}

	//mod calculations
	for(j = 0; j < size_a + size_b -1; ++j){
     1f0:	4781                	li	a5,0
     1f2:	0bf7c963          	blt	a5,t6,2a4 <polymult+0x218>
	printf(" ];\n"); */

	return_address1 = &product[0];

return return_address1;
}
     1f6:	fe040113          	addi	sp,s0,-32
     1fa:	4472                	lw	s0,28(sp)
     1fc:	44e2                	lw	s1,24(sp)
     1fe:	4952                	lw	s2,20(sp)
     200:	49c2                	lw	s3,16(sp)
     202:	4a32                	lw	s4,12(sp)
     204:	4aa2                	lw	s5,8(sp)
     206:	4b12                	lw	s6,4(sp)
     208:	4b82                	lw	s7,0(sp)
     20a:	00001517          	auipc	a0,0x1
     20e:	16250513          	addi	a0,a0,354 # 136c <_bss_start>
     212:	6105                	addi	sp,sp,32
     214:	8082                	ret
				line[size_b-1-j][k] = pola[k]*polb[j];
     216:	00279613          	slli	a2,a5,0x2
     21a:	00c58533          	add	a0,a1,a2
     21e:	967a                	add	a2,a2,t5
     220:	4210                	lw	a2,0(a2)
     222:	ffc82883          	lw	a7,-4(a6)
			for (k = size_a-1; k >= 0; k = k-1 ){
     226:	17fd                	addi	a5,a5,-1
				line[size_b-1-j][k] = pola[k]*polb[j];
     228:	03160633          	mul	a2,a2,a7
     22c:	c110                	sw	a2,0(a0)
			for (k = size_a-1; k >= 0; k = k-1 ){
     22e:	fe07d4e3          	bgez	a5,216 <polymult+0x18a>
		for (j = size_b -1; j >= 0; j = j-1){
     232:	137d                	addi	t1,t1,-1
     234:	1871                	addi	a6,a6,-4
     236:	95f6                	add	a1,a1,t4
     238:	bf79                	j	1d6 <polymult+0x14a>
			for (k = size_a-1; k >= 0; k = k-1 ){
     23a:	879e                	mv	a5,t2
     23c:	bfcd                	j	22e <polymult+0x1a2>
				line[size_b-1-j][k + j] = pola[k]*polb[j];
     23e:	00279613          	slli	a2,a5,0x2
     242:	00c88533          	add	a0,a7,a2
     246:	967a                	add	a2,a2,t5
     248:	4210                	lw	a2,0(a2)
     24a:	ffc82903          	lw	s2,-4(a6)
			for (k = size_a-1; k >= 0; k = k-1 ){
     24e:	17fd                	addi	a5,a5,-1
				line[size_b-1-j][k + j] = pola[k]*polb[j];
     250:	03260633          	mul	a2,a2,s2
     254:	c110                	sw	a2,0(a0)
			for (k = size_a-1; k >= 0; k = k-1 ){
     256:	fe07d4e3          	bgez	a5,23e <polymult+0x1b2>
		for (j = size_b -1; j >= 0; j = j-1){
     25a:	137d                	addi	t1,t1,-1
     25c:	1871                	addi	a6,a6,-4
     25e:	98ae                	add	a7,a7,a1
     260:	bde1                	j	138 <polymult+0xac>
			line[i][j] = line[i][j] % mod;
     262:	4388                	lw	a0,0(a5)
		for(j = 0; j < size_a + size_b -1; ++j){
     264:	0585                	addi	a1,a1,1
     266:	0791                	addi	a5,a5,4
			line[i][j] = line[i][j] % mod;
     268:	02e56533          	rem	a0,a0,a4
     26c:	fea7ae23          	sw	a0,-4(a5)
		for(j = 0; j < size_a + size_b -1; ++j){
     270:	fff5c9e3          	blt	a1,t6,262 <polymult+0x1d6>
	for (i = 0; i < size_b; ++i){
     274:	0605                	addi	a2,a2,1
     276:	94f6                	add	s1,s1,t4
     278:	b795                	j	1dc <polymult+0x150>
     27a:	87a6                	mv	a5,s1
		for(j = 0; j < size_a + size_b -1; ++j){
     27c:	4581                	li	a1,0
     27e:	bfcd                	j	270 <polymult+0x1e4>
			product[j] += line[i][j];
     280:	025807b3          	mul	a5,a6,t0
     284:	00052883          	lw	a7,0(a0)
		for(i = 0; i < size_b; ++i){
     288:	0805                	addi	a6,a6,1
			product[j] += line[i][j];
     28a:	97ae                	add	a5,a5,a1
     28c:	078a                	slli	a5,a5,0x2
     28e:	97f2                	add	a5,a5,t3
     290:	439c                	lw	a5,0(a5)
     292:	97c6                	add	a5,a5,a7
     294:	c11c                	sw	a5,0(a0)
		for(i = 0; i < size_b; ++i){
     296:	fed845e3          	blt	a6,a3,280 <polymult+0x1f4>
	for(j = 0; j < size_a + size_b -1; ++j){
     29a:	0585                	addi	a1,a1,1
     29c:	0511                	addi	a0,a0,4
     29e:	b7b9                	j	1ec <polymult+0x160>
		for(i = 0; i < size_b; ++i){
     2a0:	4801                	li	a6,0
     2a2:	bfd5                	j	296 <polymult+0x20a>
		product[j] = product[j] % mod;
     2a4:	4214                	lw	a3,0(a2)
	for(j = 0; j < size_a + size_b -1; ++j){
     2a6:	0785                	addi	a5,a5,1
     2a8:	0611                	addi	a2,a2,4
		product[j] = product[j] % mod;
     2aa:	02e6e6b3          	rem	a3,a3,a4
     2ae:	fed62e23          	sw	a3,-4(a2)
	for(j = 0; j < size_a + size_b -1; ++j){
     2b2:	b781                	j	1f2 <polymult+0x166>

000002b4 <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){

//static int product2[100]; //must be constant for now because of local return value resctriction, but will chage in the code..
int line[size_b][size_a + size_b];
     2b4:	00d587b3          	add	a5,a1,a3
     2b8:	00269813          	slli	a6,a3,0x2
     2bc:	00279313          	slli	t1,a5,0x2
     2c0:	fff78e93          	addi	t4,a5,-1
     2c4:	030787b3          	mul	a5,a5,a6
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c8:	1101                	addi	sp,sp,-32
     2ca:	ce22                	sw	s0,28(sp)
     2cc:	cc26                	sw	s1,24(sp)
     2ce:	ca4a                	sw	s2,20(sp)
     2d0:	c84e                	sw	s3,16(sp)
     2d2:	c25a                	sw	s6,4(sp)
     2d4:	c652                	sw	s4,12(sp)
     2d6:	c456                	sw	s5,8(sp)
     2d8:	1000                	addi	s0,sp,32
int line[size_b][size_a + size_b];
     2da:	07bd                	addi	a5,a5,15
     2dc:	9bc1                	andi	a5,a5,-16
     2de:	40f10133          	sub	sp,sp,a5
int i,j,k;
int *return_address2;
int pola[size_a];
     2e2:	00259793          	slli	a5,a1,0x2
     2e6:	07bd                	addi	a5,a5,15
     2e8:	9bc1                	andi	a5,a5,-16
int line[size_b][size_a + size_b];
     2ea:	8e0a                	mv	t3,sp
int pola[size_a];
     2ec:	40f10133          	sub	sp,sp,a5
int polb[size_b];
     2f0:	00f80793          	addi	a5,a6,15
     2f4:	9bc1                	andi	a5,a5,-16
int pola[size_a];
     2f6:	828a                	mv	t0,sp
int polb[size_b];
     2f8:	40f10133          	sub	sp,sp,a5
int line[size_b][size_a + size_b];
     2fc:	fff68893          	addi	a7,a3,-1
int pola[size_a];
     300:	fff58f93          	addi	t6,a1,-1
int polb[size_b];
     304:	878a                	mv	a5,sp

	//make all line vectors zero
	for (i = 0; i < size_b; ++i){
		for(j = 0; j < size_a + size_b -1; ++j){
			line[i][j] = 0;
     306:	00235f13          	srli	t5,t1,0x2
     30a:	8972                	mv	s2,t3
	for (i = 0; i < size_b; ++i){
     30c:	89f2                	mv	s3,t3
     30e:	4481                	li	s1,0
			product2[j] = 0;		
     310:	00001b17          	auipc	s6,0x1
     314:	2b4b0b13          	addi	s6,s6,692 # 15c4 <product2>
	for (i = 0; i < size_b; ++i){
     318:	04d4c163          	blt	s1,a3,35a <polymult2+0xa6>
		}
	}

	for(i = 0; i < size_a; ++i){
     31c:	4381                	li	t2,0
     31e:	04b3c163          	blt	t2,a1,360 <polymult2+0xac>
	for(i = 0; i < size_a; ++i){
		printf(" %d ",pola[i]);
	}
	printf("\n");*/
	
	for(i = 0; i < size_b; ++i){
     322:	4581                	li	a1,0
     324:	04d5c863          	blt	a1,a3,374 <polymult2+0xc0>
		printf(" %d ",polb[i]);
	}
	printf("\n");*/

	// make calculations for partial products, if need add mod calculations
	if(star_mult == 1){
     328:	4605                	li	a2,1
     32a:	97c2                	add	a5,a5,a6
     32c:	06c70f63          	beq	a4,a2,3aa <polymult2+0xf6>
     330:	1871                	addi	a6,a6,-4
     332:	1371                	addi	t1,t1,-4
     334:	9872                	add	a6,a6,t3
				line[size_b-1-j][k] = pola[k]*polb[j];
			}		
		}
	}
	else{
		for (j = size_b -1; j >= 0; j = j-1){
     336:	0608cc63          	bltz	a7,3ae <polymult2+0xfa>
			for (k = size_a-1; k >= 0; k = k-1 ){
     33a:	877e                	mv	a4,t6
     33c:	a86d                	j	3f6 <polymult2+0x142>
			product2[j] = 0;		
     33e:	00239a93          	slli	s5,t2,0x2
     342:	9ada                	add	s5,s5,s6
			line[i][j] = 0;
     344:	000a2023          	sw	zero,0(s4)
			product2[j] = 0;		
     348:	000aa023          	sw	zero,0(s5)
		for(j = 0; j < size_a + size_b -1; ++j){
     34c:	0385                	addi	t2,t2,1
     34e:	0a11                	addi	s4,s4,4
     350:	ffd3c7e3          	blt	t2,t4,33e <polymult2+0x8a>
	for (i = 0; i < size_b; ++i){
     354:	0485                	addi	s1,s1,1
     356:	999a                	add	s3,s3,t1
     358:	b7c1                	j	318 <polymult2+0x64>
     35a:	8a4e                	mv	s4,s3
		for(j = 0; j < size_a + size_b -1; ++j){
     35c:	4381                	li	t2,0
     35e:	bfcd                	j	350 <polymult2+0x9c>
		pola[i] = a[i];
     360:	00239493          	slli	s1,t2,0x2
     364:	009289b3          	add	s3,t0,s1
     368:	94aa                	add	s1,s1,a0
     36a:	4084                	lw	s1,0(s1)
	for(i = 0; i < size_a; ++i){
     36c:	0385                	addi	t2,t2,1
		pola[i] = a[i];
     36e:	0099a023          	sw	s1,0(s3)
	for(i = 0; i < size_a; ++i){
     372:	b775                	j	31e <polymult2+0x6a>
		polb[i] = b[i];
     374:	00259513          	slli	a0,a1,0x2
     378:	00a783b3          	add	t2,a5,a0
     37c:	9532                	add	a0,a0,a2
     37e:	4108                	lw	a0,0(a0)
	for(i = 0; i < size_b; ++i){
     380:	0585                	addi	a1,a1,1
		polb[i] = b[i];
     382:	00a3a023          	sw	a0,0(t2)
	for(i = 0; i < size_b; ++i){
     386:	bf79                	j	324 <polymult2+0x70>
				line[size_b-1-j][k] = pola[k]*polb[j];
     388:	00271613          	slli	a2,a4,0x2
     38c:	00c905b3          	add	a1,s2,a2
     390:	9616                	add	a2,a2,t0
     392:	4210                	lw	a2,0(a2)
     394:	ffc7a503          	lw	a0,-4(a5)
			for (k = size_a-1; k >= 0; k = k-1 ){
     398:	177d                	addi	a4,a4,-1
				line[size_b-1-j][k] = pola[k]*polb[j];
     39a:	02a60633          	mul	a2,a2,a0
     39e:	c190                	sw	a2,0(a1)
			for (k = size_a-1; k >= 0; k = k-1 ){
     3a0:	fe0754e3          	bgez	a4,388 <polymult2+0xd4>
		for (j = size_b -1; j >= 0; j = j-1){
     3a4:	18fd                	addi	a7,a7,-1
     3a6:	17f1                	addi	a5,a5,-4
     3a8:	991a                	add	s2,s2,t1
     3aa:	0208d863          	bgez	a7,3da <polymult2+0x126>
     3ae:	00001617          	auipc	a2,0x1
     3b2:	21660613          	addi	a2,a2,534 # 15c4 <product2>
		}	
	}

	// construct product
	for(j = 0; j < size_a + size_b -1; ++j){
		for(i = 0; i < size_b; ++i){
     3b6:	4701                	li	a4,0
	for(j = 0; j < size_a + size_b -1; ++j){
     3b8:	07d74463          	blt	a4,t4,420 <polymult2+0x16c>
	printf(" ];\n");*/

	return_address2 = &product2[0];

return return_address2;
}
     3bc:	fe040113          	addi	sp,s0,-32
     3c0:	4472                	lw	s0,28(sp)
     3c2:	44e2                	lw	s1,24(sp)
     3c4:	4952                	lw	s2,20(sp)
     3c6:	49c2                	lw	s3,16(sp)
     3c8:	4a32                	lw	s4,12(sp)
     3ca:	4aa2                	lw	s5,8(sp)
     3cc:	4b12                	lw	s6,4(sp)
     3ce:	00001517          	auipc	a0,0x1
     3d2:	1f650513          	addi	a0,a0,502 # 15c4 <product2>
     3d6:	6105                	addi	sp,sp,32
     3d8:	8082                	ret
			for (k = size_a-1; k >= 0; k = k-1 ){
     3da:	877e                	mv	a4,t6
     3dc:	b7d1                	j	3a0 <polymult2+0xec>
				line[size_b-1-j][k + j] = pola[k]*polb[j];
     3de:	00271613          	slli	a2,a4,0x2
     3e2:	00c805b3          	add	a1,a6,a2
     3e6:	9616                	add	a2,a2,t0
     3e8:	4210                	lw	a2,0(a2)
     3ea:	ffc7a503          	lw	a0,-4(a5)
			for (k = size_a-1; k >= 0; k = k-1 ){
     3ee:	177d                	addi	a4,a4,-1
				line[size_b-1-j][k + j] = pola[k]*polb[j];
     3f0:	02a60633          	mul	a2,a2,a0
     3f4:	c190                	sw	a2,0(a1)
			for (k = size_a-1; k >= 0; k = k-1 ){
     3f6:	fe0754e3          	bgez	a4,3de <polymult2+0x12a>
		for (j = size_b -1; j >= 0; j = j-1){
     3fa:	18fd                	addi	a7,a7,-1
     3fc:	17f1                	addi	a5,a5,-4
     3fe:	981a                	add	a6,a6,t1
     400:	bf1d                	j	336 <polymult2+0x82>
			product2[j] += line[i][j];
     402:	03e587b3          	mul	a5,a1,t5
     406:	4208                	lw	a0,0(a2)
		for(i = 0; i < size_b; ++i){
     408:	0585                	addi	a1,a1,1
			product2[j] += line[i][j];
     40a:	97ba                	add	a5,a5,a4
     40c:	078a                	slli	a5,a5,0x2
     40e:	97f2                	add	a5,a5,t3
     410:	439c                	lw	a5,0(a5)
     412:	97aa                	add	a5,a5,a0
     414:	c21c                	sw	a5,0(a2)
		for(i = 0; i < size_b; ++i){
     416:	fed5c6e3          	blt	a1,a3,402 <polymult2+0x14e>
	for(j = 0; j < size_a + size_b -1; ++j){
     41a:	0705                	addi	a4,a4,1
     41c:	0611                	addi	a2,a2,4
     41e:	bf69                	j	3b8 <polymult2+0x104>
		for(i = 0; i < size_b; ++i){
     420:	4581                	li	a1,0
     422:	bfd5                	j	416 <polymult2+0x162>

00000424 <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

int u,d,d2,i,b_N,r_d;
int *return_address3;
//static int result[100];
int v[size_N];
     424:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     428:	7139                	addi	sp,sp,-64
int v[size_N];
     42a:	07bd                	addi	a5,a5,15
     42c:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     42e:	dc22                	sw	s0,56(sp)
     430:	da26                	sw	s1,52(sp)
     432:	d84a                	sw	s2,48(sp)
     434:	d64e                	sw	s3,44(sp)
     436:	d452                	sw	s4,40(sp)
     438:	d256                	sw	s5,36(sp)
     43a:	d05a                	sw	s6,32(sp)
     43c:	ce5e                	sw	s7,28(sp)
     43e:	cc62                	sw	s8,24(sp)
     440:	ca66                	sw	s9,20(sp)
     442:	de06                	sw	ra,60(sp)
     444:	c86a                	sw	s10,16(sp)
     446:	c66e                	sw	s11,12(sp)
     448:	0080                	addi	s0,sp,64
int v[size_N];
     44a:	40f10133          	sub	sp,sp,a5
     44e:	8b0a                	mv	s6,sp
int q[size_N];
     450:	40f10133          	sub	sp,sp,a5
     454:	8c8a                	mv	s9,sp
int *product;
int numm[size_N];
     456:	40f10133          	sub	sp,sp,a5
int denumm[size_D];
     45a:	00269793          	slli	a5,a3,0x2
     45e:	07bd                	addi	a5,a5,15
     460:	9bc1                	andi	a5,a5,-16
int numm[size_N];
     462:	898a                	mv	s3,sp
int denumm[size_D];
     464:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     468:	84ae                	mv	s1,a1
     46a:	8a36                	mv	s4,a3
     46c:	893a                	mv	s2,a4
int v[size_N];
     46e:	fff58c13          	addi	s8,a1,-1
int denumm[size_D];
     472:	fff68a93          	addi	s5,a3,-1
     476:	8b8a                	mv	s7,sp

	for (i = 0; i < size_N; ++i){
     478:	4781                	li	a5,0
     47a:	0497c963          	blt	a5,s1,4cc <polydiv+0xa8>
     47e:	8d4e                	mv	s10,s3
     480:	87ce                	mv	a5,s3
		printf(" % d",numm[i]);
	}
	printf("\n");	*/
	
	// make mod calculation for coefficents
	for (i = 0; i < size_N; ++i){
     482:	4681                	li	a3,0
     484:	0496cf63          	blt	a3,s1,4e2 <polydiv+0xbe>
     488:	87ce                	mv	a5,s3
		while (numm[i] < 0)
			numm[i] = numm[i] + mod;	
	}	
	for (i = 0; i < size_N; ++i){
     48a:	4701                	li	a4,0
     48c:	06974163          	blt	a4,s1,4ee <polydiv+0xca>
		numm[i] = numm[i] % mod;
	}	

	for (i = 0; i < size_D; ++i){
     490:	4781                	li	a5,0
     492:	0747c663          	blt	a5,s4,4fe <polydiv+0xda>
     496:	87de                	mv	a5,s7
     498:	875e                	mv	a4,s7
	}
	printf("\n");*/		
	
	
	// make mod calculation for coefficents	
	for (i = 0; i < size_D; ++i){
     49a:	4601                	li	a2,0
     49c:	07464c63          	blt	a2,s4,514 <polydiv+0xf0>
		while (denumm[i] < 0)
			denumm[i] = denumm[i] + mod;	
	}
	for (i = 0; i < size_D; ++i){
     4a0:	4701                	li	a4,0
     4a2:	07474f63          	blt	a4,s4,520 <polydiv+0xfc>
		denumm[i] = denumm[i] % mod;
	}	

	for (i = 0; i < size_N; ++i){
     4a6:	4781                	li	a5,0
     4a8:	0897c463          	blt	a5,s1,530 <polydiv+0x10c>
		q[i] = 0;	
	}
	for (i = 0; i < size_N; ++i){
     4ac:	4781                	li	a5,0
     4ae:	0897c863          	blt	a5,s1,53e <polydiv+0x11a>
		v[i] = 0;	
	}

	//find b_N (denum) and degree denum
	for (i = size_D-1; i >= 0; i = i-1){
     4b2:	002a9793          	slli	a5,s5,0x2
     4b6:	97de                	add	a5,a5,s7
     4b8:	4398                	lw	a4,0(a5)
     4ba:	080ad963          	bgez	s5,54c <polydiv+0x128>
	for (i = 0; i < size_N; ++i){
     4be:	4781                	li	a5,0
     4c0:	4d81                	li	s11,0
	d2 = i;
	b_N = denumm[i];

	// Set u := (b_N)^–1 mod p (denum) //
	for (u = 0; u < mod; ++u){
		if ( (b_N*u)%mod == 1 )
     4c2:	4685                	li	a3,1
	for (u = 0; u < mod; ++u){
     4c4:	092dc763          	blt	s11,s2,552 <polydiv+0x12e>
     4c8:	87e2                	mv	a5,s8
     4ca:	a869                	j	564 <polydiv+0x140>
		numm[i] = num[i];	
     4cc:	00279713          	slli	a4,a5,0x2
     4d0:	00e986b3          	add	a3,s3,a4
     4d4:	972a                	add	a4,a4,a0
     4d6:	4318                	lw	a4,0(a4)
	for (i = 0; i < size_N; ++i){
     4d8:	0785                	addi	a5,a5,1
		numm[i] = num[i];	
     4da:	c298                	sw	a4,0(a3)
	for (i = 0; i < size_N; ++i){
     4dc:	bf79                	j	47a <polydiv+0x56>
			numm[i] = numm[i] + mod;	
     4de:	974a                	add	a4,a4,s2
     4e0:	c398                	sw	a4,0(a5)
		while (numm[i] < 0)
     4e2:	4398                	lw	a4,0(a5)
     4e4:	fe074de3          	bltz	a4,4de <polydiv+0xba>
	for (i = 0; i < size_N; ++i){
     4e8:	0685                	addi	a3,a3,1
     4ea:	0791                	addi	a5,a5,4
     4ec:	bf61                	j	484 <polydiv+0x60>
		numm[i] = numm[i] % mod;
     4ee:	4394                	lw	a3,0(a5)
	for (i = 0; i < size_N; ++i){
     4f0:	0705                	addi	a4,a4,1
     4f2:	0791                	addi	a5,a5,4
		numm[i] = numm[i] % mod;
     4f4:	0326e6b3          	rem	a3,a3,s2
     4f8:	fed7ae23          	sw	a3,-4(a5)
	for (i = 0; i < size_N; ++i){
     4fc:	bf41                	j	48c <polydiv+0x68>
		denumm[i] = denum[i];	
     4fe:	00279713          	slli	a4,a5,0x2
     502:	00eb86b3          	add	a3,s7,a4
     506:	9732                	add	a4,a4,a2
     508:	4318                	lw	a4,0(a4)
	for (i = 0; i < size_D; ++i){
     50a:	0785                	addi	a5,a5,1
		denumm[i] = denum[i];	
     50c:	c298                	sw	a4,0(a3)
	for (i = 0; i < size_D; ++i){
     50e:	b751                	j	492 <polydiv+0x6e>
			denumm[i] = denumm[i] + mod;	
     510:	96ca                	add	a3,a3,s2
     512:	c314                	sw	a3,0(a4)
		while (denumm[i] < 0)
     514:	4314                	lw	a3,0(a4)
     516:	fe06cde3          	bltz	a3,510 <polydiv+0xec>
	for (i = 0; i < size_D; ++i){
     51a:	0605                	addi	a2,a2,1
     51c:	0711                	addi	a4,a4,4
     51e:	bfbd                	j	49c <polydiv+0x78>
		denumm[i] = denumm[i] % mod;
     520:	4394                	lw	a3,0(a5)
	for (i = 0; i < size_D; ++i){
     522:	0705                	addi	a4,a4,1
     524:	0791                	addi	a5,a5,4
		denumm[i] = denumm[i] % mod;
     526:	0326e6b3          	rem	a3,a3,s2
     52a:	fed7ae23          	sw	a3,-4(a5)
	for (i = 0; i < size_D; ++i){
     52e:	bf95                	j	4a2 <polydiv+0x7e>
		q[i] = 0;	
     530:	00279713          	slli	a4,a5,0x2
     534:	9766                	add	a4,a4,s9
     536:	00072023          	sw	zero,0(a4)
	for (i = 0; i < size_N; ++i){
     53a:	0785                	addi	a5,a5,1
     53c:	b7b5                	j	4a8 <polydiv+0x84>
		v[i] = 0;	
     53e:	00279713          	slli	a4,a5,0x2
     542:	975a                	add	a4,a4,s6
     544:	00072023          	sw	zero,0(a4)
	for (i = 0; i < size_N; ++i){
     548:	0785                	addi	a5,a5,1
     54a:	b795                	j	4ae <polydiv+0x8a>
		if( !(denumm[i] == 0) )
     54c:	fb2d                	bnez	a4,4be <polydiv+0x9a>
	for (i = size_D-1; i >= 0; i = i-1){
     54e:	1afd                	addi	s5,s5,-1
     550:	b78d                	j	4b2 <polydiv+0x8e>
		if ( (b_N*u)%mod == 1 )
     552:	0327e633          	rem	a2,a5,s2
     556:	97ba                	add	a5,a5,a4
     558:	f6d608e3          	beq	a2,a3,4c8 <polydiv+0xa4>
	for (u = 0; u < mod; ++u){
     55c:	0d85                	addi	s11,s11,1
     55e:	b79d                	j	4c4 <polydiv+0xa0>
			break;
	}

	// find degree num and r_d
	for (i = size_N-1; i >= 0; i = i-1){
		if( !(numm[i] == 0) )
     560:	eb01                	bnez	a4,570 <polydiv+0x14c>
	for (i = size_N-1; i >= 0; i = i-1){
     562:	17fd                	addi	a5,a5,-1
     564:	00279713          	slli	a4,a5,0x2
     568:	974e                	add	a4,a4,s3
     56a:	4318                	lw	a4,0(a4)
     56c:	fe07dae3          	bgez	a5,560 <polydiv+0x13c>

	//printf("\nSİL-3\n");
	//printf("\nd2 = %d, d = %d\n",d2,d);

	// While-1 deg num >= deg denum do
	while (d >= d2){
     570:	0557d663          	bge	a5,s5,5bc <polydiv+0x198>
		}
				

	} //End While-1
	
	for(i = 0; i < size_N; ++i){
     574:	4781                	li	a5,0
		result[i] = q[i];
     576:	00001697          	auipc	a3,0x1
     57a:	2a668693          	addi	a3,a3,678 # 181c <result>
	for(i = 0; i < size_N; ++i){
     57e:	1497c863          	blt	a5,s1,6ce <polydiv+0x2aa>
	}
	for(i = size_N; i < (2*size_N); ++i){
     582:	00149713          	slli	a4,s1,0x1
		result[i] = numm[i-size_N];
     586:	00001697          	auipc	a3,0x1
     58a:	29668693          	addi	a3,a3,662 # 181c <result>
	for(i = size_N; i < (2*size_N); ++i){
     58e:	14e4c963          	blt	s1,a4,6e0 <polydiv+0x2bc>
	}
	printf("\n");*/
	return_address3 = &result[0];

	return return_address3;
}
     592:	fc040113          	addi	sp,s0,-64
     596:	50f2                	lw	ra,60(sp)
     598:	5462                	lw	s0,56(sp)
     59a:	54d2                	lw	s1,52(sp)
     59c:	5942                	lw	s2,48(sp)
     59e:	59b2                	lw	s3,44(sp)
     5a0:	5a22                	lw	s4,40(sp)
     5a2:	5a92                	lw	s5,36(sp)
     5a4:	5b02                	lw	s6,32(sp)
     5a6:	4bf2                	lw	s7,28(sp)
     5a8:	4c62                	lw	s8,24(sp)
     5aa:	4cd2                	lw	s9,20(sp)
     5ac:	4d42                	lw	s10,16(sp)
     5ae:	4db2                	lw	s11,12(sp)
     5b0:	00001517          	auipc	a0,0x1
     5b4:	26c50513          	addi	a0,a0,620 # 181c <result>
     5b8:	6121                	addi	sp,sp,64
     5ba:	8082                	ret
		v[(d-d2)] = u*r_d;
     5bc:	02ed8733          	mul	a4,s11,a4
     5c0:	415787b3          	sub	a5,a5,s5
     5c4:	078a                	slli	a5,a5,0x2
     5c6:	97da                	add	a5,a5,s6
     5c8:	c398                	sw	a4,0(a5)
		for (i = 0; i < size_N; ++i){
     5ca:	87da                	mv	a5,s6
     5cc:	4701                	li	a4,0
     5ce:	04974e63          	blt	a4,s1,62a <polydiv+0x206>
		product = polymult(denumm,size_D,v,size_D,mod,0);		
     5d2:	4781                	li	a5,0
     5d4:	874a                	mv	a4,s2
     5d6:	865a                	mv	a2,s6
     5d8:	86d2                	mv	a3,s4
     5da:	85d2                	mv	a1,s4
     5dc:	855e                	mv	a0,s7
     5de:	347d                	jal	8c <polymult>
		for (i = 0; i < size_N; ++i){
     5e0:	87aa                	mv	a5,a0
     5e2:	872a                	mv	a4,a0
     5e4:	4601                	li	a2,0
     5e6:	04964c63          	blt	a2,s1,63e <polydiv+0x21a>
		for (i = 0; i < size_N; ++i){
     5ea:	4701                	li	a4,0
     5ec:	04974f63          	blt	a4,s1,64a <polydiv+0x226>
     5f0:	874e                	mv	a4,s3
		for (i = 0; i < size_N; ++i){
     5f2:	4781                	li	a5,0
     5f4:	0697c363          	blt	a5,s1,65a <polydiv+0x236>
     5f8:	87ce                	mv	a5,s3
		for (i = 0; i < size_N; ++i){
     5fa:	4681                	li	a3,0
     5fc:	0696cc63          	blt	a3,s1,674 <polydiv+0x250>
     600:	87ce                	mv	a5,s3
		for (i = 0; i < size_N; ++i){
     602:	4701                	li	a4,0
     604:	06974e63          	blt	a4,s1,680 <polydiv+0x25c>
     608:	87e6                	mv	a5,s9
     60a:	86e6                	mv	a3,s9
		for(i = 0; i < size_N; ++i){
     60c:	4701                	li	a4,0
     60e:	08974163          	blt	a4,s1,690 <polydiv+0x26c>
		for(i = 0; i < size_N; ++i){
     612:	4701                	li	a4,0
     614:	08974963          	blt	a4,s1,6a6 <polydiv+0x282>
		for (i = size_N-1; i >= 0; i = i-1){
     618:	87e2                	mv	a5,s8
     61a:	00279713          	slli	a4,a5,0x2
     61e:	974e                	add	a4,a4,s3
     620:	4318                	lw	a4,0(a4)
     622:	0807da63          	bgez	a5,6b6 <polydiv+0x292>
     626:	4681                	li	a3,0
     628:	a045                	j	6c8 <polydiv+0x2a4>
			v[i] = v[i] % mod;	
     62a:	4394                	lw	a3,0(a5)
		for (i = 0; i < size_N; ++i){
     62c:	0705                	addi	a4,a4,1
     62e:	0791                	addi	a5,a5,4
			v[i] = v[i] % mod;	
     630:	0326e6b3          	rem	a3,a3,s2
     634:	fed7ae23          	sw	a3,-4(a5)
		for (i = 0; i < size_N; ++i){
     638:	bf59                	j	5ce <polydiv+0x1aa>
				product[i] = product[i] + mod;	
     63a:	96ca                	add	a3,a3,s2
     63c:	c314                	sw	a3,0(a4)
			while (product[i] < 0)
     63e:	4314                	lw	a3,0(a4)
     640:	fe06cde3          	bltz	a3,63a <polydiv+0x216>
		for (i = 0; i < size_N; ++i){
     644:	0605                	addi	a2,a2,1
     646:	0711                	addi	a4,a4,4
     648:	bf79                	j	5e6 <polydiv+0x1c2>
			product[i] = product[i] % mod;
     64a:	4394                	lw	a3,0(a5)
		for (i = 0; i < size_N; ++i){
     64c:	0705                	addi	a4,a4,1
     64e:	0791                	addi	a5,a5,4
			product[i] = product[i] % mod;
     650:	0326e6b3          	rem	a3,a3,s2
     654:	fed7ae23          	sw	a3,-4(a5)
		for (i = 0; i < size_N; ++i){
     658:	bf51                	j	5ec <polydiv+0x1c8>
			numm[i] = numm[i] - product[i];
     65a:	00279613          	slli	a2,a5,0x2
     65e:	962a                	add	a2,a2,a0
     660:	4314                	lw	a3,0(a4)
     662:	4210                	lw	a2,0(a2)
		for (i = 0; i < size_N; ++i){
     664:	0785                	addi	a5,a5,1
     666:	0711                	addi	a4,a4,4
			numm[i] = numm[i] - product[i];
     668:	8e91                	sub	a3,a3,a2
     66a:	fed72e23          	sw	a3,-4(a4)
		for (i = 0; i < size_N; ++i){
     66e:	b759                	j	5f4 <polydiv+0x1d0>
				numm[i] = numm[i] + mod;	
     670:	974a                	add	a4,a4,s2
     672:	c398                	sw	a4,0(a5)
			while (numm[i] < 0)
     674:	4398                	lw	a4,0(a5)
     676:	fe074de3          	bltz	a4,670 <polydiv+0x24c>
		for (i = 0; i < size_N; ++i){
     67a:	0685                	addi	a3,a3,1
     67c:	0791                	addi	a5,a5,4
     67e:	bfbd                	j	5fc <polydiv+0x1d8>
			numm[i] = numm[i] % mod;
     680:	4394                	lw	a3,0(a5)
		for (i = 0; i < size_N; ++i){
     682:	0705                	addi	a4,a4,1
     684:	0791                	addi	a5,a5,4
			numm[i] = numm[i] % mod;
     686:	0326e6b3          	rem	a3,a3,s2
     68a:	fed7ae23          	sw	a3,-4(a5)
		for (i = 0; i < size_N; ++i){
     68e:	bf9d                	j	604 <polydiv+0x1e0>
			q[i] = q[i] + v[i];		
     690:	00271593          	slli	a1,a4,0x2
     694:	95da                	add	a1,a1,s6
     696:	4290                	lw	a2,0(a3)
     698:	418c                	lw	a1,0(a1)
		for(i = 0; i < size_N; ++i){
     69a:	0705                	addi	a4,a4,1
     69c:	0691                	addi	a3,a3,4
			q[i] = q[i] + v[i];		
     69e:	962e                	add	a2,a2,a1
     6a0:	fec6ae23          	sw	a2,-4(a3)
		for(i = 0; i < size_N; ++i){
     6a4:	b7ad                	j	60e <polydiv+0x1ea>
			q[i] = q[i] % mod;
     6a6:	4394                	lw	a3,0(a5)
		for(i = 0; i < size_N; ++i){
     6a8:	0705                	addi	a4,a4,1
     6aa:	0791                	addi	a5,a5,4
			q[i] = q[i] % mod;
     6ac:	0326e6b3          	rem	a3,a3,s2
     6b0:	fed7ae23          	sw	a3,-4(a5)
		for(i = 0; i < size_N; ++i){
     6b4:	b785                	j	614 <polydiv+0x1f0>
			if( !(numm[i] == 0) )
     6b6:	fb25                	bnez	a4,626 <polydiv+0x202>
		for (i = size_N-1; i >= 0; i = i-1){
     6b8:	17fd                	addi	a5,a5,-1
     6ba:	b785                	j	61a <polydiv+0x1f6>
			v[i] = 0;	
     6bc:	00269613          	slli	a2,a3,0x2
     6c0:	965a                	add	a2,a2,s6
     6c2:	00062023          	sw	zero,0(a2)
		for (i = 0; i < size_N; ++i){
     6c6:	0685                	addi	a3,a3,1
     6c8:	fe96cae3          	blt	a3,s1,6bc <polydiv+0x298>
     6cc:	b555                	j	570 <polydiv+0x14c>
		result[i] = q[i];
     6ce:	00279713          	slli	a4,a5,0x2
     6d2:	00e68633          	add	a2,a3,a4
     6d6:	9766                	add	a4,a4,s9
     6d8:	4318                	lw	a4,0(a4)
	for(i = 0; i < size_N; ++i){
     6da:	0785                	addi	a5,a5,1
		result[i] = q[i];
     6dc:	c218                	sw	a4,0(a2)
	for(i = 0; i < size_N; ++i){
     6de:	b545                	j	57e <polydiv+0x15a>
		result[i] = numm[i-size_N];
     6e0:	000d2603          	lw	a2,0(s10)
     6e4:	00249793          	slli	a5,s1,0x2
     6e8:	97b6                	add	a5,a5,a3
     6ea:	c390                	sw	a2,0(a5)
	for(i = size_N; i < (2*size_N); ++i){
     6ec:	0485                	addi	s1,s1,1
     6ee:	0d11                	addi	s10,s10,4
     6f0:	bd79                	j	58e <polydiv+0x16a>

000006f2 <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod){

  int* return_address4;
  int N,i,j;
  int ri_2[size]; // MX-ring poly, a
     6f2:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod){
     6f6:	715d                	addi	sp,sp,-80
  int ri_2[size]; // MX-ring poly, a
     6f8:	07bd                	addi	a5,a5,15
     6fa:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod){
     6fc:	c4a2                	sw	s0,72(sp)
     6fe:	c2a6                	sw	s1,68(sp)
     700:	c0ca                	sw	s2,64(sp)
     702:	de4e                	sw	s3,60(sp)
     704:	dc52                	sw	s4,56(sp)
     706:	da56                	sw	s5,52(sp)
     708:	d85a                	sw	s6,48(sp)
     70a:	d65e                	sw	s7,44(sp)
     70c:	d462                	sw	s8,40(sp)
     70e:	d06a                	sw	s10,32(sp)
     710:	ce6e                	sw	s11,28(sp)
     712:	c686                	sw	ra,76(sp)
     714:	d266                	sw	s9,36(sp)
     716:	0880                	addi	s0,sp,80
  int ri_2[size]; // MX-ring poly, a
     718:	40f10133          	sub	sp,sp,a5
     71c:	8a8a                	mv	s5,sp
  int ri_1[size]; // f-random poly, f[N] = 0, b
     71e:	40f10133          	sub	sp,sp,a5
     722:	8b0a                	mv	s6,sp
  int ri[size];
     724:	40f10133          	sub	sp,sp,a5
     728:	8b8a                	mv	s7,sp
//  static int ti_2[100]; // Fp-inverse of f modulo p, Fp[N] = 0 at start
  int ti_1[size]; // ti_1[0] = 1 
     72a:	40f10133          	sub	sp,sp,a5
     72e:	8d8a                	mv	s11,sp
  int ti[size];
     730:	40f10133          	sub	sp,sp,a5
     734:	8c0a                	mv	s8,sp
  int qi_1[size];
     736:	40f10133          	sub	sp,sp,a5
     73a:	8d0a                	mv	s10,sp
  int temp[size];
     73c:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod){
     740:	89b2                	mv	s3,a2
     742:	8936                	mv	s2,a3
  int ri_2[size]; // MX-ring poly, a
     744:	fff60493          	addi	s1,a2,-1
  int temp[size];
     748:	8a0a                	mv	s4,sp
  int *res1;
  int *res2;
  int controlR = 1;

	N = size-1;		
	for (i = 0; i < size; ++i){
     74a:	4781                	li	a5,0
     74c:	0337c863          	blt	a5,s3,77c <ext_euclid+0x8a>
		ri_2[i] = polyR[i];
	}

	for (i = 0; i < size; ++i){
     750:	4781                	li	a5,0
     752:	0337ce63          	blt	a5,s3,78e <ext_euclid+0x9c>
		ri_1[i] = polyf[i];
	}

	for (i = 0; i < size; ++i){
     756:	4781                	li	a5,0
		ti_2[i] = 0;
     758:	00001697          	auipc	a3,0x1
     75c:	31c68693          	addi	a3,a3,796 # 1a74 <ti_2>
	for (i = 0; i < size; ++i){
     760:	0537c063          	blt	a5,s3,7a0 <ext_euclid+0xae>
	}

	for (i = 1; i < size; ++i){
     764:	4785                	li	a5,1
     766:	0537c463          	blt	a5,s3,7ae <ext_euclid+0xbc>
		ti_1[i] = 0;
	}
	ti_1[0] = 1;
     76a:	4785                	li	a5,1
     76c:	00fda023          	sw	a5,0(s11)

	//printf("\nSİL-1\n");

	//ri = ri_2 % ri_1;
	res = polydiv(ri_2, N+1, ri_1, N+1, mod);
	for(i = N+1; i < (2*N+2); ++i){
     770:	00199793          	slli	a5,s3,0x1
     774:	faf42e23          	sw	a5,-68(s0)
	for(i = 0; i < N+1; ++i){
     778:	4781                	li	a5,0
     77a:	a0b9                	j	7c8 <ext_euclid+0xd6>
		ri_2[i] = polyR[i];
     77c:	00279713          	slli	a4,a5,0x2
     780:	00ea86b3          	add	a3,s5,a4
     784:	972a                	add	a4,a4,a0
     786:	4318                	lw	a4,0(a4)
	for (i = 0; i < size; ++i){
     788:	0785                	addi	a5,a5,1
		ri_2[i] = polyR[i];
     78a:	c298                	sw	a4,0(a3)
	for (i = 0; i < size; ++i){
     78c:	b7c1                	j	74c <ext_euclid+0x5a>
		ri_1[i] = polyf[i];
     78e:	00279713          	slli	a4,a5,0x2
     792:	00eb06b3          	add	a3,s6,a4
     796:	972e                	add	a4,a4,a1
     798:	4318                	lw	a4,0(a4)
	for (i = 0; i < size; ++i){
     79a:	0785                	addi	a5,a5,1
		ri_1[i] = polyf[i];
     79c:	c298                	sw	a4,0(a3)
	for (i = 0; i < size; ++i){
     79e:	bf55                	j	752 <ext_euclid+0x60>
		ti_2[i] = 0;
     7a0:	00279713          	slli	a4,a5,0x2
     7a4:	9736                	add	a4,a4,a3
     7a6:	00072023          	sw	zero,0(a4)
	for (i = 0; i < size; ++i){
     7aa:	0785                	addi	a5,a5,1
     7ac:	bf55                	j	760 <ext_euclid+0x6e>
		ti_1[i] = 0;
     7ae:	00279713          	slli	a4,a5,0x2
     7b2:	976e                	add	a4,a4,s11
     7b4:	00072023          	sw	zero,0(a4)
	for (i = 1; i < size; ++i){
     7b8:	0785                	addi	a5,a5,1
     7ba:	b775                	j	766 <ext_euclid+0x74>
			ri_2[i] = ri_2[i] +mod;		
     7bc:	96ca                	add	a3,a3,s2
     7be:	c314                	sw	a3,0(a4)
		while(ri_2[i] < 0){
     7c0:	4314                	lw	a3,0(a4)
     7c2:	fe06cde3          	bltz	a3,7bc <ext_euclid+0xca>
	for(i = 0; i < N+1; ++i){
     7c6:	0785                	addi	a5,a5,1
     7c8:	00f4c663          	blt	s1,a5,7d4 <ext_euclid+0xe2>
     7cc:	00279713          	slli	a4,a5,0x2
     7d0:	9756                	add	a4,a4,s5
     7d2:	b7fd                	j	7c0 <ext_euclid+0xce>
     7d4:	87d6                	mv	a5,s5
	for(i = 0; i < N+1; ++i){
     7d6:	4701                	li	a4,0
     7d8:	10e4d563          	bge	s1,a4,8e2 <ext_euclid+0x1f0>
     7dc:	87da                	mv	a5,s6
     7de:	875a                	mv	a4,s6
	for(i = 0; i < N+1; ++i){
     7e0:	4601                	li	a2,0
     7e2:	10c4da63          	bge	s1,a2,8f6 <ext_euclid+0x204>
	for(i = 0; i < N+1; ++i){
     7e6:	4701                	li	a4,0
     7e8:	10e4dd63          	bge	s1,a4,902 <ext_euclid+0x210>
	res = polydiv(ri_2, N+1, ri_1, N+1, mod);
     7ec:	874a                	mv	a4,s2
     7ee:	86ce                	mv	a3,s3
     7f0:	865a                	mv	a2,s6
     7f2:	85ce                	mv	a1,s3
     7f4:	8556                	mv	a0,s5
     7f6:	313d                	jal	424 <polydiv>
	for(i = N+1; i < (2*N+2); ++i){
     7f8:	875e                	mv	a4,s7
     7fa:	87ce                	mv	a5,s3
     7fc:	fbc42683          	lw	a3,-68(s0)
     800:	10d7c963          	blt	a5,a3,912 <ext_euclid+0x220>
     804:	4781                	li	a5,0

	//printf("\nSİL-2\n");

/// qi_1 = (ri_2 - ri)/ri_1; ///

	for(i = 0; i < N+1; ++i){
     806:	4701                	li	a4,0
     808:	10e4de63          	bge	s1,a4,924 <ext_euclid+0x232>
     80c:	8cd2                	mv	s9,s4
     80e:	87d2                	mv	a5,s4
		temp[i] = ri_2[i] - ri[i];
	}
	
	//make mod calc
	for(i = 0; i < N+1; ++i){
     810:	4681                	li	a3,0
     812:	12d4d863          	bge	s1,a3,942 <ext_euclid+0x250>
     816:	87d2                	mv	a5,s4
		while(temp[i] < 0){
			temp[i] = temp[i] + mod;		
		}
	}
	
	for(i = 0; i < N+1; ++i){
     818:	4701                	li	a4,0
     81a:	12e4da63          	bge	s1,a4,94e <ext_euclid+0x25c>
		temp[i] = temp[i] % mod;
	} 

	res1 = polydiv(temp, N+1, ri_1, N+1, mod);
     81e:	874a                	mv	a4,s2
     820:	86ce                	mv	a3,s3
     822:	865a                	mv	a2,s6
     824:	85ce                	mv	a1,s3
     826:	8552                	mv	a0,s4
     828:	3ef5                	jal	424 <polydiv>
	for(i = 0; i < N+1; ++i){
     82a:	4781                	li	a5,0
     82c:	12f4d963          	bge	s1,a5,95e <ext_euclid+0x26c>
     830:	87ea                	mv	a5,s10
     832:	876a                	mv	a4,s10
		qi_1[i] = res1[i];
	}

	//make mod calc
	for(i = 0; i < N+1; ++i){
     834:	4601                	li	a2,0
     836:	12c4df63          	bge	s1,a2,974 <ext_euclid+0x282>
		while ( qi_1[i] < 0){
			qi_1[i] = qi_1[i] + mod;		
		}
	}
	
	for(i = 0; i < N+1; ++i){
     83a:	4701                	li	a4,0
     83c:	14e4d263          	bge	s1,a4,980 <ext_euclid+0x28e>
		qi_1[i] = qi_1[i] % mod;
	}	

/// ti = ti_2 - qi_1*ti_1; ///

	res2 = polymult(qi_1,N+1,ti_1,N+1,mod,0);
     840:	4781                	li	a5,0
     842:	874a                	mv	a4,s2
     844:	86ce                	mv	a3,s3
     846:	866e                	mv	a2,s11
     848:	85ce                	mv	a1,s3
     84a:	856a                	mv	a0,s10
     84c:	3081                	jal	8c <polymult>
	for(i = 0; i < N+1; ++i){
     84e:	4781                	li	a5,0
     850:	14f4d063          	bge	s1,a5,990 <ext_euclid+0x29e>
     854:	87d2                	mv	a5,s4
	if(!(temp[N] == 0)){
		printf("!!!! WARNING !!!!\n");
	}	*/
	
	// make mod calculations
	for(i = 0; i < N+1; ++i){
     856:	4681                	li	a3,0
     858:	14d4d763          	bge	s1,a3,9a6 <ext_euclid+0x2b4>
		while ( temp[i] < 0){
			temp[i] = temp[i] + mod;		
		}
	}
	
	for(i = 0; i < N+1; ++i){
     85c:	4781                	li	a5,0
     85e:	14f4da63          	bge	s1,a5,9b2 <ext_euclid+0x2c0>
     862:	4781                	li	a5,0
		temp[i] = temp[i] % mod;
	}

	for(i = 0; i < N+1; ++i){
     864:	4701                	li	a4,0
     866:	14e4df63          	bge	s1,a4,9c4 <ext_euclid+0x2d2>
     86a:	87e2                	mv	a5,s8
     86c:	8762                	mv	a4,s8
		ti[i] = ti_2[i] - temp[i];
	}
	
	for(i = 0; i < N+1; ++i){
     86e:	4601                	li	a2,0
     870:	16c4dc63          	bge	s1,a2,9e8 <ext_euclid+0x2f6>
		while ( ti[i] < 0){
			ti[i] = ti[i] + mod;		
		}
	}
	
	for(i = 0; i < N+1; ++i){
     874:	4701                	li	a4,0
     876:	16e4df63          	bge	s1,a4,9f4 <ext_euclid+0x302>
		ti[i] = ti[i] % mod;
	}	

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

	for(i = 0; i < N+1; ++i){
     87a:	4781                	li	a5,0
     87c:	18f4d463          	bge	s1,a5,a04 <ext_euclid+0x312>
		ri_2[i] = ri_1[i];	
	}
	for(i = 0; i < N+1; ++i){
     880:	4781                	li	a5,0
     882:	18f4da63          	bge	s1,a5,a16 <ext_euclid+0x324>
		ri_1[i] = ri[i];	
	}

	for(i = 0; i < N+1; ++i){
     886:	4781                	li	a5,0
     888:	1af4d063          	bge	s1,a5,a28 <ext_euclid+0x336>
		ti_2[i] = ti_1[i];	
	}
	for(i = 0; i < N+1; ++i){
     88c:	4781                	li	a5,0
     88e:	1af4d963          	bge	s1,a5,a40 <ext_euclid+0x34e>
		ti_1[i] = ti[i];	
	}

	for(i = 0; i < N+1; ++i){
     892:	4781                	li	a5,0
     894:	1af4df63          	bge	s1,a5,a52 <ext_euclid+0x360>
	controlR = 0;
     898:	4781                	li	a5,0
		qi_1[i] = 0;
	}
	
	for(i = 0; i < N+1; ++i){
     89a:	4701                	li	a4,0
     89c:	1ce4d263          	bge	s1,a4,a60 <ext_euclid+0x36e>
while(!(controlR == 0)){
     8a0:	ec079ce3          	bnez	a5,778 <ext_euclid+0x86>
		controlR += ri[i];
	}	
}

	for (j = 0; j < mod; ++j){
     8a4:	4701                	li	a4,0
		if(((ri_2[0]*j) % mod) ==1)
     8a6:	4605                	li	a2,1
	for (j = 0; j < mod; ++j){
     8a8:	1d274363          	blt	a4,s2,a6e <ext_euclid+0x37c>
     8ac:	00001617          	auipc	a2,0x1
     8b0:	1c860613          	addi	a2,a2,456 # 1a74 <ti_2>
		if(!(ri_2[i] == 0))
		//	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
			break;
	}
	
	for(i = 0; i < N+1; ++i){
     8b4:	1cf4d763          	bge	s1,a5,a82 <ext_euclid+0x390>
    printf("\n");*/
    
			
    return_address4 = &ti_2[0];
    return return_address4;
}
     8b8:	fb040113          	addi	sp,s0,-80
     8bc:	40b6                	lw	ra,76(sp)
     8be:	4426                	lw	s0,72(sp)
     8c0:	4496                	lw	s1,68(sp)
     8c2:	4906                	lw	s2,64(sp)
     8c4:	59f2                	lw	s3,60(sp)
     8c6:	5a62                	lw	s4,56(sp)
     8c8:	5ad2                	lw	s5,52(sp)
     8ca:	5b42                	lw	s6,48(sp)
     8cc:	5bb2                	lw	s7,44(sp)
     8ce:	5c22                	lw	s8,40(sp)
     8d0:	5c92                	lw	s9,36(sp)
     8d2:	5d02                	lw	s10,32(sp)
     8d4:	4df2                	lw	s11,28(sp)
     8d6:	00001517          	auipc	a0,0x1
     8da:	19e50513          	addi	a0,a0,414 # 1a74 <ti_2>
     8de:	6161                	addi	sp,sp,80
     8e0:	8082                	ret
		ri_2[i] = ri_2[i] % mod;
     8e2:	4394                	lw	a3,0(a5)
	for(i = 0; i < N+1; ++i){
     8e4:	0705                	addi	a4,a4,1
     8e6:	0791                	addi	a5,a5,4
		ri_2[i] = ri_2[i] % mod;
     8e8:	0326e6b3          	rem	a3,a3,s2
     8ec:	fed7ae23          	sw	a3,-4(a5)
	for(i = 0; i < N+1; ++i){
     8f0:	b5e5                	j	7d8 <ext_euclid+0xe6>
			ri_1[i] = ri_1[i] +mod;		
     8f2:	96ca                	add	a3,a3,s2
     8f4:	c314                	sw	a3,0(a4)
		while(ri_1[i] < 0){
     8f6:	4314                	lw	a3,0(a4)
     8f8:	fe06cde3          	bltz	a3,8f2 <ext_euclid+0x200>
	for(i = 0; i < N+1; ++i){
     8fc:	0605                	addi	a2,a2,1
     8fe:	0711                	addi	a4,a4,4
     900:	b5cd                	j	7e2 <ext_euclid+0xf0>
		ri_1[i] = ri_1[i] % mod;
     902:	4394                	lw	a3,0(a5)
	for(i = 0; i < N+1; ++i){
     904:	0705                	addi	a4,a4,1
     906:	0791                	addi	a5,a5,4
		ri_1[i] = ri_1[i] % mod;
     908:	0326e6b3          	rem	a3,a3,s2
     90c:	fed7ae23          	sw	a3,-4(a5)
	for(i = 0; i < N+1; ++i){
     910:	bde1                	j	7e8 <ext_euclid+0xf6>
		ri[i-(N+1)] = res[i];
     912:	00279693          	slli	a3,a5,0x2
     916:	96aa                	add	a3,a3,a0
     918:	4294                	lw	a3,0(a3)
	for(i = N+1; i < (2*N+2); ++i){
     91a:	0785                	addi	a5,a5,1
     91c:	0711                	addi	a4,a4,4
		ri[i-(N+1)] = res[i];
     91e:	fed72e23          	sw	a3,-4(a4)
	for(i = N+1; i < (2*N+2); ++i){
     922:	bde9                	j	7fc <ext_euclid+0x10a>
		temp[i] = ri_2[i] - ri[i];
     924:	00fa86b3          	add	a3,s5,a5
     928:	00fb85b3          	add	a1,s7,a5
     92c:	4294                	lw	a3,0(a3)
     92e:	418c                	lw	a1,0(a1)
     930:	00fa0633          	add	a2,s4,a5
	for(i = 0; i < N+1; ++i){
     934:	0705                	addi	a4,a4,1
		temp[i] = ri_2[i] - ri[i];
     936:	8e8d                	sub	a3,a3,a1
     938:	c214                	sw	a3,0(a2)
	for(i = 0; i < N+1; ++i){
     93a:	0791                	addi	a5,a5,4
     93c:	b5f1                	j	808 <ext_euclid+0x116>
			temp[i] = temp[i] + mod;		
     93e:	974a                	add	a4,a4,s2
     940:	c398                	sw	a4,0(a5)
		while(temp[i] < 0){
     942:	4398                	lw	a4,0(a5)
     944:	fe074de3          	bltz	a4,93e <ext_euclid+0x24c>
	for(i = 0; i < N+1; ++i){
     948:	0685                	addi	a3,a3,1
     94a:	0791                	addi	a5,a5,4
     94c:	b5d9                	j	812 <ext_euclid+0x120>
		temp[i] = temp[i] % mod;
     94e:	4394                	lw	a3,0(a5)
	for(i = 0; i < N+1; ++i){
     950:	0705                	addi	a4,a4,1
     952:	0791                	addi	a5,a5,4
		temp[i] = temp[i] % mod;
     954:	0326e6b3          	rem	a3,a3,s2
     958:	fed7ae23          	sw	a3,-4(a5)
	for(i = 0; i < N+1; ++i){
     95c:	bd7d                	j	81a <ext_euclid+0x128>
		qi_1[i] = res1[i];
     95e:	00279713          	slli	a4,a5,0x2
     962:	00e506b3          	add	a3,a0,a4
     966:	4294                	lw	a3,0(a3)
     968:	976a                	add	a4,a4,s10
	for(i = 0; i < N+1; ++i){
     96a:	0785                	addi	a5,a5,1
		qi_1[i] = res1[i];
     96c:	c314                	sw	a3,0(a4)
	for(i = 0; i < N+1; ++i){
     96e:	bd7d                	j	82c <ext_euclid+0x13a>
			qi_1[i] = qi_1[i] + mod;		
     970:	96ca                	add	a3,a3,s2
     972:	c314                	sw	a3,0(a4)
		while ( qi_1[i] < 0){
     974:	4314                	lw	a3,0(a4)
     976:	fe06cde3          	bltz	a3,970 <ext_euclid+0x27e>
	for(i = 0; i < N+1; ++i){
     97a:	0605                	addi	a2,a2,1
     97c:	0711                	addi	a4,a4,4
     97e:	bd65                	j	836 <ext_euclid+0x144>
		qi_1[i] = qi_1[i] % mod;
     980:	4394                	lw	a3,0(a5)
	for(i = 0; i < N+1; ++i){
     982:	0705                	addi	a4,a4,1
     984:	0791                	addi	a5,a5,4
		qi_1[i] = qi_1[i] % mod;
     986:	0326e6b3          	rem	a3,a3,s2
     98a:	fed7ae23          	sw	a3,-4(a5)
	for(i = 0; i < N+1; ++i){
     98e:	b57d                	j	83c <ext_euclid+0x14a>
		temp[i] = res2[i];
     990:	00279713          	slli	a4,a5,0x2
     994:	00e506b3          	add	a3,a0,a4
     998:	4294                	lw	a3,0(a3)
     99a:	9752                	add	a4,a4,s4
	for(i = 0; i < N+1; ++i){
     99c:	0785                	addi	a5,a5,1
		temp[i] = res2[i];
     99e:	c314                	sw	a3,0(a4)
	for(i = 0; i < N+1; ++i){
     9a0:	bd45                	j	850 <ext_euclid+0x15e>
			temp[i] = temp[i] + mod;		
     9a2:	974a                	add	a4,a4,s2
     9a4:	c398                	sw	a4,0(a5)
		while ( temp[i] < 0){
     9a6:	4398                	lw	a4,0(a5)
     9a8:	fe074de3          	bltz	a4,9a2 <ext_euclid+0x2b0>
	for(i = 0; i < N+1; ++i){
     9ac:	0685                	addi	a3,a3,1
     9ae:	0791                	addi	a5,a5,4
     9b0:	b565                	j	858 <ext_euclid+0x166>
		temp[i] = temp[i] % mod;
     9b2:	000ca703          	lw	a4,0(s9)
	for(i = 0; i < N+1; ++i){
     9b6:	0785                	addi	a5,a5,1
     9b8:	0c91                	addi	s9,s9,4
		temp[i] = temp[i] % mod;
     9ba:	03276733          	rem	a4,a4,s2
     9be:	feecae23          	sw	a4,-4(s9)
	for(i = 0; i < N+1; ++i){
     9c2:	bd71                	j	85e <ext_euclid+0x16c>
		ti[i] = ti_2[i] - temp[i];
     9c4:	00001697          	auipc	a3,0x1
     9c8:	0b068693          	addi	a3,a3,176 # 1a74 <ti_2>
     9cc:	96be                	add	a3,a3,a5
     9ce:	00fa05b3          	add	a1,s4,a5
     9d2:	4294                	lw	a3,0(a3)
     9d4:	418c                	lw	a1,0(a1)
     9d6:	00fc0633          	add	a2,s8,a5
	for(i = 0; i < N+1; ++i){
     9da:	0705                	addi	a4,a4,1
		ti[i] = ti_2[i] - temp[i];
     9dc:	8e8d                	sub	a3,a3,a1
     9de:	c214                	sw	a3,0(a2)
	for(i = 0; i < N+1; ++i){
     9e0:	0791                	addi	a5,a5,4
     9e2:	b551                	j	866 <ext_euclid+0x174>
			ti[i] = ti[i] + mod;		
     9e4:	96ca                	add	a3,a3,s2
     9e6:	c314                	sw	a3,0(a4)
		while ( ti[i] < 0){
     9e8:	4314                	lw	a3,0(a4)
     9ea:	fe06cde3          	bltz	a3,9e4 <ext_euclid+0x2f2>
	for(i = 0; i < N+1; ++i){
     9ee:	0605                	addi	a2,a2,1
     9f0:	0711                	addi	a4,a4,4
     9f2:	bdbd                	j	870 <ext_euclid+0x17e>
		ti[i] = ti[i] % mod;
     9f4:	4394                	lw	a3,0(a5)
	for(i = 0; i < N+1; ++i){
     9f6:	0705                	addi	a4,a4,1
     9f8:	0791                	addi	a5,a5,4
		ti[i] = ti[i] % mod;
     9fa:	0326e6b3          	rem	a3,a3,s2
     9fe:	fed7ae23          	sw	a3,-4(a5)
	for(i = 0; i < N+1; ++i){
     a02:	bd95                	j	876 <ext_euclid+0x184>
		ri_2[i] = ri_1[i];	
     a04:	00279713          	slli	a4,a5,0x2
     a08:	00ea86b3          	add	a3,s5,a4
     a0c:	975a                	add	a4,a4,s6
     a0e:	4318                	lw	a4,0(a4)
	for(i = 0; i < N+1; ++i){
     a10:	0785                	addi	a5,a5,1
		ri_2[i] = ri_1[i];	
     a12:	c298                	sw	a4,0(a3)
	for(i = 0; i < N+1; ++i){
     a14:	b5a5                	j	87c <ext_euclid+0x18a>
		ri_1[i] = ri[i];	
     a16:	00279713          	slli	a4,a5,0x2
     a1a:	00eb06b3          	add	a3,s6,a4
     a1e:	975e                	add	a4,a4,s7
     a20:	4318                	lw	a4,0(a4)
	for(i = 0; i < N+1; ++i){
     a22:	0785                	addi	a5,a5,1
		ri_1[i] = ri[i];	
     a24:	c298                	sw	a4,0(a3)
	for(i = 0; i < N+1; ++i){
     a26:	bdb1                	j	882 <ext_euclid+0x190>
		ti_2[i] = ti_1[i];	
     a28:	00279713          	slli	a4,a5,0x2
     a2c:	00001697          	auipc	a3,0x1
     a30:	04868693          	addi	a3,a3,72 # 1a74 <ti_2>
     a34:	96ba                	add	a3,a3,a4
     a36:	976e                	add	a4,a4,s11
     a38:	4318                	lw	a4,0(a4)
	for(i = 0; i < N+1; ++i){
     a3a:	0785                	addi	a5,a5,1
		ti_2[i] = ti_1[i];	
     a3c:	c298                	sw	a4,0(a3)
	for(i = 0; i < N+1; ++i){
     a3e:	b5a9                	j	888 <ext_euclid+0x196>
		ti_1[i] = ti[i];	
     a40:	00279713          	slli	a4,a5,0x2
     a44:	00ed86b3          	add	a3,s11,a4
     a48:	9762                	add	a4,a4,s8
     a4a:	4318                	lw	a4,0(a4)
	for(i = 0; i < N+1; ++i){
     a4c:	0785                	addi	a5,a5,1
		ti_1[i] = ti[i];	
     a4e:	c298                	sw	a4,0(a3)
	for(i = 0; i < N+1; ++i){
     a50:	bd3d                	j	88e <ext_euclid+0x19c>
		qi_1[i] = 0;
     a52:	00279713          	slli	a4,a5,0x2
     a56:	976a                	add	a4,a4,s10
     a58:	00072023          	sw	zero,0(a4)
	for(i = 0; i < N+1; ++i){
     a5c:	0785                	addi	a5,a5,1
     a5e:	bd1d                	j	894 <ext_euclid+0x1a2>
		controlR += ri[i];
     a60:	00271693          	slli	a3,a4,0x2
     a64:	96de                	add	a3,a3,s7
     a66:	4294                	lw	a3,0(a3)
	for(i = 0; i < N+1; ++i){
     a68:	0705                	addi	a4,a4,1
		controlR += ri[i];
     a6a:	97b6                	add	a5,a5,a3
	for(i = 0; i < N+1; ++i){
     a6c:	bd05                	j	89c <ext_euclid+0x1aa>
		if(((ri_2[0]*j) % mod) ==1)
     a6e:	000aa683          	lw	a3,0(s5)
     a72:	02d706b3          	mul	a3,a4,a3
     a76:	0326e6b3          	rem	a3,a3,s2
     a7a:	e2c689e3          	beq	a3,a2,8ac <ext_euclid+0x1ba>
	for (j = 0; j < mod; ++j){
     a7e:	0705                	addi	a4,a4,1
     a80:	b525                	j	8a8 <ext_euclid+0x1b6>
		ti_2[i] = (ti_2[i]*j) % mod;
     a82:	4214                	lw	a3,0(a2)
	for(i = 0; i < N+1; ++i){
     a84:	0785                	addi	a5,a5,1
     a86:	0611                	addi	a2,a2,4
		ti_2[i] = (ti_2[i]*j) % mod;
     a88:	02d706b3          	mul	a3,a4,a3
     a8c:	0326e6b3          	rem	a3,a3,s2
     a90:	fed62e23          	sw	a3,-4(a2)
	for(i = 0; i < N+1; ++i){
     a94:	b505                	j	8b4 <ext_euclid+0x1c2>

00000a96 <generate_keys>:


int* generate_keys(int N, int p, int q){
     a96:	7141                	addi	sp,sp,-496
     a98:	1e112623          	sw	ra,492(sp)
     a9c:	1e812423          	sw	s0,488(sp)
     aa0:	1e912223          	sw	s1,484(sp)
     aa4:	1b80                	addi	s0,sp,496
     aa6:	1f212023          	sw	s2,480(sp)
     aaa:	1d312e23          	sw	s3,476(sp)
     aae:	1d412c23          	sw	s4,472(sp)
     ab2:	1d512a23          	sw	s5,468(sp)
     ab6:	1d612823          	sw	s6,464(sp)
     aba:	1d712623          	sw	s7,460(sp)
     abe:	1da12023          	sw	s10,448(sp)
     ac2:	1d812423          	sw	s8,456(sp)
     ac6:	1d912223          	sw	s9,452(sp)
     aca:	892a                	mv	s2,a0
     acc:	8bae                	mv	s7,a1
     ace:	8b32                	mv	s6,a2

int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     ad0:	4581                	li	a1,0
     ad2:	0d000613          	li	a2,208
     ad6:	e2440513          	addi	a0,s0,-476
     ada:	2395                	jal	103e <memset>
     adc:	4485                	li	s1,1
     ade:	59fd                	li	s3,-1
int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     ae0:	0d800613          	li	a2,216
     ae4:	4581                	li	a1,0
     ae6:	ef840513          	addi	a0,s0,-264
int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     aea:	e1342c23          	sw	s3,-488(s0)
     aee:	e0942e23          	sw	s1,-484(s0)
     af2:	e2942023          	sw	s1,-480(s0)
     af6:	e3342423          	sw	s3,-472(s0)
     afa:	e2942823          	sw	s1,-464(s0)
     afe:	e2942e23          	sw	s1,-452(s0)
     b02:	e5342023          	sw	s3,-448(s0)
     b06:	e5342223          	sw	s3,-444(s0)
     b0a:	e4942623          	sw	s1,-436(s0)
     b0e:	e5342a23          	sw	s3,-428(s0)
     b12:	e4942e23          	sw	s1,-420(s0)
     b16:	e6942023          	sw	s1,-416(s0)
     b1a:	e7342623          	sw	s3,-404(s0)
     b1e:	e6942a23          	sw	s1,-396(s0)
     b22:	e8942023          	sw	s1,-384(s0)
     b26:	e8942223          	sw	s1,-380(s0)
     b2a:	e8942423          	sw	s1,-376(s0)
     b2e:	e9342623          	sw	s3,-372(s0)
     b32:	e8942a23          	sw	s1,-364(s0)
     b36:	ea942023          	sw	s1,-352(s0)
     b3a:	ea942223          	sw	s1,-348(s0)
     b3e:	ea942423          	sw	s1,-344(s0)
     b42:	eb342623          	sw	s3,-340(s0)
     b46:	ea942a23          	sw	s1,-332(s0)
     b4a:	ec942023          	sw	s1,-320(s0)
     b4e:	ec942223          	sw	s1,-316(s0)
     b52:	ec942423          	sw	s1,-312(s0)
//int gg[N];
int *fp;
int *fq;
int *fg;
int *pk;
int polyR[N+1];
     b56:	00190a93          	addi	s5,s2,1
int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     b5a:	21d5                	jal	103e <memset>
int polyR[N+1];
     b5c:	002a9793          	slli	a5,s5,0x2
     b60:	07bd                	addi	a5,a5,15
     b62:	9bc1                	andi	a5,a5,-16
     b64:	40f10133          	sub	sp,sp,a5
     b68:	8a0a                	mv	s4,sp
int i;
int* return_address5;
int val,k;
//static int random_keys[300];

	polyR[N] = 1;
     b6a:	00291d13          	slli	s10,s2,0x2
     b6e:	01aa07b3          	add	a5,s4,s10
     b72:	c384                	sw	s1,0(a5)
int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     b74:	ef342a23          	sw	s3,-268(s0)
     b78:	ee942e23          	sw	s1,-260(s0)
     b7c:	f0942023          	sw	s1,-256(s0)
     b80:	f0942423          	sw	s1,-248(s0)
     b84:	f1342a23          	sw	s3,-236(s0)
     b88:	f1342e23          	sw	s3,-228(s0)
     b8c:	f3342023          	sw	s3,-224(s0)
     b90:	f2942423          	sw	s1,-216(s0)
     b94:	f3342823          	sw	s3,-208(s0)
     b98:	f2942c23          	sw	s1,-200(s0)
     b9c:	f4942223          	sw	s1,-188(s0)
     ba0:	f5342423          	sw	s3,-184(s0)
     ba4:	f4942823          	sw	s1,-176(s0)
     ba8:	f4942e23          	sw	s1,-164(s0)
     bac:	f7342023          	sw	s3,-160(s0)
     bb0:	f6942423          	sw	s1,-152(s0)
     bb4:	f6942a23          	sw	s1,-140(s0)
     bb8:	f7342c23          	sw	s3,-136(s0)
     bbc:	f8942023          	sw	s1,-128(s0)
     bc0:	f8942423          	sw	s1,-120(s0)
     bc4:	f8942623          	sw	s1,-116(s0)
     bc8:	f8942c23          	sw	s1,-104(s0)
     bcc:	f9342e23          	sw	s3,-100(s0)
     bd0:	fa942223          	sw	s1,-92(s0)
     bd4:	fa942623          	sw	s1,-84(s0)
	polyR[0] = -1;
     bd8:	013a2023          	sw	s3,0(s4)

	for(i = 1; i < N; ++i){
     bdc:	4785                	li	a5,1
     bde:	1127c363          	blt	a5,s2,ce4 <generate_keys+0x24e>
     be2:	87ca                	mv	a5,s2
		polyR[i] = 0;		
	}

/////SONRADAN GELENLER AKLIMA/////
for (i = N; i < 55; ++i ){
     be4:	03600693          	li	a3,54
     be8:	10f6d563          	bge	a3,a5,cf2 <generate_keys+0x25c>
		printf(" %d ",g[i]);
	}
	printf("\n");	*/

	
	for(i = 0; i < N; ++i){
     bec:	4781                	li	a5,0
		random_keys[i] = f[i];		
     bee:	00001697          	auipc	a3,0x1
     bf2:	01668693          	addi	a3,a3,22 # 1c04 <random_keys>
	for(i = 0; i < N; ++i){
     bf6:	1127cc63          	blt	a5,s2,d0e <generate_keys+0x278>
     bfa:	ef440713          	addi	a4,s0,-268
	}

	for(i = N; i < (2*N); ++i){
     bfe:	00191993          	slli	s3,s2,0x1
     c02:	87ca                	mv	a5,s2
     c04:	8cba                	mv	s9,a4
		random_keys[i] = g[i-N];		
     c06:	00001617          	auipc	a2,0x1
     c0a:	ffe60613          	addi	a2,a2,-2 # 1c04 <random_keys>
	for(i = N; i < (2*N); ++i){
     c0e:	1137cb63          	blt	a5,s3,d24 <generate_keys+0x28e>
	}

	fp = ext_euclid(polyR, f, (N+1), p);
	for(i = (2*N); i < (3*N); ++i){
     c12:	448d                	li	s1,3
     c14:	029904b3          	mul	s1,s2,s1
	fp = ext_euclid(polyR, f, (N+1), p);
     c18:	86de                	mv	a3,s7
     c1a:	8656                	mv	a2,s5
     c1c:	e1840593          	addi	a1,s0,-488
     c20:	8552                	mv	a0,s4
     c22:	3cc1                	jal	6f2 <ext_euclid>
	for(i = (2*N); i < (3*N); ++i){
     c24:	87ce                	mv	a5,s3
		random_keys[i] = fp[i-(2*N)];
     c26:	00001697          	auipc	a3,0x1
     c2a:	fde68693          	addi	a3,a3,-34 # 1c04 <random_keys>
	for(i = (2*N); i < (3*N); ++i){
     c2e:	1097c363          	blt	a5,s1,d34 <generate_keys+0x29e>
	} 

	fq = ext_euclid(polyR, f, (N+1), q);
     c32:	8656                	mv	a2,s5
     c34:	86da                	mv	a3,s6
     c36:	e1840593          	addi	a1,s0,-488
     c3a:	8552                	mv	a0,s4
     c3c:	3c5d                	jal	6f2 <ext_euclid>
	for(i = (3*N); i < (4*N); ++i){
     c3e:	5751                	li	a4,-12
     c40:	02e90733          	mul	a4,s2,a4
     c44:	8c6a                	mv	s8,s10
		random_keys[i] = fq[i-(3*N)];
     c46:	00001617          	auipc	a2,0x1
     c4a:	fbe60613          	addi	a2,a2,-66 # 1c04 <random_keys>
	for(i = (3*N); i < (4*N); ++i){
     c4e:	0fa4cb63          	blt	s1,s10,d44 <generate_keys+0x2ae>
        printf(" %d ", fq[i]);
    }
    printf("\n");    
    // sil*/	

	fg = polymult2(fq, N, g, N, 0); 
     c52:	4701                	li	a4,0
     c54:	85ca                	mv	a1,s2
     c56:	86ca                	mv	a3,s2
     c58:	8666                	mv	a2,s9
     c5a:	e5aff0ef          	jal	ra,2b4 <polymult2>
	for(i = 0; i < (2*N-1); ++i){
     c5e:	87aa                	mv	a5,a0
     c60:	4701                	li	a4,0
     c62:	fff98593          	addi	a1,s3,-1
     c66:	0eb74963          	blt	a4,a1,d58 <generate_keys+0x2c2>
        printf(" %d ", polyR[i]);
    }
    printf("\n");    
    // sil*/

	pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     c6a:	86d6                	mv	a3,s5
     c6c:	875a                	mv	a4,s6
     c6e:	8652                	mv	a2,s4
     c70:	fb4ff0ef          	jal	ra,424 <polydiv>
	for(i = (4*N); i < (5*N); ++i){
     c74:	4795                	li	a5,5
     c76:	02f907b3          	mul	a5,s2,a5
     c7a:	098a                	slli	s3,s3,0x2
     c7c:	99aa                	add	s3,s3,a0
		random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c7e:	00001697          	auipc	a3,0x1
     c82:	f8668693          	addi	a3,a3,-122 # 1c04 <random_keys>
	for(i = (4*N); i < (5*N); ++i){
     c86:	0991                	addi	s3,s3,4
     c88:	0efc4063          	blt	s8,a5,d68 <generate_keys+0x2d2>
       // printf(" %d i=%d",pk[i-(4*N)+(2*N-1)],(i-(4*N)+(2*N-1)));
        printf(" %d ", pk[i]);
    }
    printf("\n");
    // sil*/
	for(i = (5*N); i < (6*N+1); ++i){
     c8c:	4699                	li	a3,6
     c8e:	5531                	li	a0,-20
		random_keys[i] = polyR[i-(5*N)];
     c90:	00001617          	auipc	a2,0x1
     c94:	f7460613          	addi	a2,a2,-140 # 1c04 <random_keys>
	for(i = (5*N); i < (6*N+1); ++i){
     c98:	02d906b3          	mul	a3,s2,a3
     c9c:	02a90933          	mul	s2,s2,a0
     ca0:	0cf6dc63          	bge	a3,a5,d78 <generate_keys+0x2e2>
	}
	
	return_address5 = &random_keys[0];
	return return_address5;
}
     ca4:	e1040113          	addi	sp,s0,-496
     ca8:	1ec12083          	lw	ra,492(sp)
     cac:	1e812403          	lw	s0,488(sp)
     cb0:	1e412483          	lw	s1,484(sp)
     cb4:	1e012903          	lw	s2,480(sp)
     cb8:	1dc12983          	lw	s3,476(sp)
     cbc:	1d812a03          	lw	s4,472(sp)
     cc0:	1d412a83          	lw	s5,468(sp)
     cc4:	1d012b03          	lw	s6,464(sp)
     cc8:	1cc12b83          	lw	s7,460(sp)
     ccc:	1c812c03          	lw	s8,456(sp)
     cd0:	1c412c83          	lw	s9,452(sp)
     cd4:	1c012d03          	lw	s10,448(sp)
     cd8:	00001517          	auipc	a0,0x1
     cdc:	f2c50513          	addi	a0,a0,-212 # 1c04 <random_keys>
     ce0:	617d                	addi	sp,sp,496
     ce2:	8082                	ret
		polyR[i] = 0;		
     ce4:	00279713          	slli	a4,a5,0x2
     ce8:	9752                	add	a4,a4,s4
     cea:	00072023          	sw	zero,0(a4)
	for(i = 1; i < N; ++i){
     cee:	0785                	addi	a5,a5,1
     cf0:	b5fd                	j	bde <generate_keys+0x148>
		f[i] = 0;
     cf2:	00279713          	slli	a4,a5,0x2
     cf6:	e1840613          	addi	a2,s0,-488
     cfa:	963a                	add	a2,a2,a4
     cfc:	00062023          	sw	zero,0(a2)
		g[i] = 0;
     d00:	ef440613          	addi	a2,s0,-268
     d04:	9732                	add	a4,a4,a2
     d06:	00072023          	sw	zero,0(a4)
for (i = N; i < 55; ++i ){
     d0a:	0785                	addi	a5,a5,1
     d0c:	bdf1                	j	be8 <generate_keys+0x152>
		random_keys[i] = f[i];		
     d0e:	00279713          	slli	a4,a5,0x2
     d12:	e1840593          	addi	a1,s0,-488
     d16:	00e68633          	add	a2,a3,a4
     d1a:	972e                	add	a4,a4,a1
     d1c:	4318                	lw	a4,0(a4)
	for(i = 0; i < N; ++i){
     d1e:	0785                	addi	a5,a5,1
		random_keys[i] = f[i];		
     d20:	c218                	sw	a4,0(a2)
	for(i = 0; i < N; ++i){
     d22:	bdd1                	j	bf6 <generate_keys+0x160>
		random_keys[i] = g[i-N];		
     d24:	430c                	lw	a1,0(a4)
     d26:	00279693          	slli	a3,a5,0x2
     d2a:	96b2                	add	a3,a3,a2
     d2c:	c28c                	sw	a1,0(a3)
	for(i = N; i < (2*N); ++i){
     d2e:	0785                	addi	a5,a5,1
     d30:	0711                	addi	a4,a4,4
     d32:	bdf1                	j	c0e <generate_keys+0x178>
		random_keys[i] = fp[i-(2*N)];
     d34:	4110                	lw	a2,0(a0)
     d36:	00279713          	slli	a4,a5,0x2
     d3a:	9736                	add	a4,a4,a3
     d3c:	c310                	sw	a2,0(a4)
	for(i = (2*N); i < (3*N); ++i){
     d3e:	0785                	addi	a5,a5,1
     d40:	0511                	addi	a0,a0,4
     d42:	b5f5                	j	c2e <generate_keys+0x198>
		random_keys[i] = fq[i-(3*N)];
     d44:	00249793          	slli	a5,s1,0x2
     d48:	00f706b3          	add	a3,a4,a5
     d4c:	96aa                	add	a3,a3,a0
     d4e:	4294                	lw	a3,0(a3)
     d50:	97b2                	add	a5,a5,a2
	for(i = (3*N); i < (4*N); ++i){
     d52:	0485                	addi	s1,s1,1
		random_keys[i] = fq[i-(3*N)];
     d54:	c394                	sw	a3,0(a5)
	for(i = (3*N); i < (4*N); ++i){
     d56:	bde5                	j	c4e <generate_keys+0x1b8>
		fg[i] = fg[i]*p;
     d58:	4394                	lw	a3,0(a5)
	for(i = 0; i < (2*N-1); ++i){
     d5a:	0705                	addi	a4,a4,1
     d5c:	0791                	addi	a5,a5,4
		fg[i] = fg[i]*p;
     d5e:	037686b3          	mul	a3,a3,s7
     d62:	fed7ae23          	sw	a3,-4(a5)
	for(i = 0; i < (2*N-1); ++i){
     d66:	b701                	j	c66 <generate_keys+0x1d0>
		random_keys[i] = pk[i-(4*N)+(2*N-1)];
     d68:	ff89a603          	lw	a2,-8(s3)
     d6c:	002c1713          	slli	a4,s8,0x2
     d70:	9736                	add	a4,a4,a3
     d72:	c310                	sw	a2,0(a4)
	for(i = (4*N); i < (5*N); ++i){
     d74:	0c05                	addi	s8,s8,1
     d76:	bf01                	j	c86 <generate_keys+0x1f0>
		random_keys[i] = polyR[i-(5*N)];
     d78:	00279713          	slli	a4,a5,0x2
     d7c:	00e605b3          	add	a1,a2,a4
     d80:	974a                	add	a4,a4,s2
     d82:	9752                	add	a4,a4,s4
     d84:	4318                	lw	a4,0(a4)
	for(i = (5*N); i < (6*N+1); ++i){
     d86:	0785                	addi	a5,a5,1
		random_keys[i] = polyR[i-(5*N)];
     d88:	c198                	sw	a4,0(a1)
	for(i = (5*N); i < (6*N+1); ++i){
     d8a:	bf19                	j	ca0 <generate_keys+0x20a>

00000d8c <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d8c:	7115                	addi	sp,sp,-224
     d8e:	cda2                	sw	s0,216(sp)
     d90:	cba6                	sw	s1,212(sp)
     d92:	c9ca                	sw	s2,208(sp)
     d94:	842a                	mv	s0,a0
     d96:	892e                	mv	s2,a1
     d98:	84b2                	mv	s1,a2

int *return_address6;
int *CT;
//int random_val[N] ;
//int random_val[4] = {-1, -1, 1, 1};
int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d9a:	00000597          	auipc	a1,0x0
     d9e:	44e58593          	addi	a1,a1,1102 # 11e8 <__DTOR_END__>
     da2:	0c000613          	li	a2,192
     da6:	850a                	mv	a0,sp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     da8:	cf86                	sw	ra,220(sp)
     daa:	c7ce                	sw	s3,204(sp)
     dac:	c5d2                	sw	s4,200(sp)
     dae:	89ba                	mv	s3,a4
     db0:	8a36                	mv	s4,a3
int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     db2:	227d                	jal	f60 <memcpy>
	//	printf("random_val[i]= %d\n",random_val[i]);
	}*/

	//random_val[4] = {-1, -1, 1, 1};

	temp = polymult(public_key,N,random_val,48,q,0);
     db4:	4781                	li	a5,0
     db6:	860a                	mv	a2,sp
     db8:	874a                	mv	a4,s2
     dba:	03000693          	li	a3,48
     dbe:	85a2                	mv	a1,s0
     dc0:	8552                	mv	a0,s4
     dc2:	acaff0ef          	jal	ra,8c <polymult>
     dc6:	4781                	li	a5,0
	for(i = 0; i < (2*N); ++i){
		printf(" %d ",temp[i]);
	}
	printf("\n");*/

	for(i = 0; i < 48; ++i){
     dc8:	0c000613          	li	a2,192
		temp[i] = temp[i] + message[i];
     dcc:	00f506b3          	add	a3,a0,a5
     dd0:	00f485b3          	add	a1,s1,a5
     dd4:	4298                	lw	a4,0(a3)
     dd6:	418c                	lw	a1,0(a1)
     dd8:	0791                	addi	a5,a5,4
     dda:	972e                	add	a4,a4,a1
     ddc:	c298                	sw	a4,0(a3)
	for(i = 0; i < 48; ++i){
     dde:	fec797e3          	bne	a5,a2,dcc <ntru_encyrpt+0x40>
	for(i = 0; i < (2*N); ++i){
		printf(" %d ",temp[i]);
	}
	printf("\n");*/

	CT = polydiv(temp,(2*N),polyR,(N+1),q);
     de2:	00141493          	slli	s1,s0,0x1
     de6:	00140693          	addi	a3,s0,1
     dea:	874a                	mv	a4,s2
     dec:	864e                	mv	a2,s3
     dee:	85a6                	mv	a1,s1
     df0:	e34ff0ef          	jal	ra,424 <polydiv>
	for(i = (2*N); i < (3*N); ++i){
     df4:	478d                	li	a5,3
     df6:	02f40433          	mul	s0,s0,a5
     dfa:	87aa                	mv	a5,a0
     dfc:	0084ca63          	blt	s1,s0,e10 <ntru_encyrpt+0x84>
		CT[i-(2*N)] = CT[i];
	}

	return_address6 = &CT[0];
	return return_address6;
}
     e00:	40fe                	lw	ra,220(sp)
     e02:	446e                	lw	s0,216(sp)
     e04:	44de                	lw	s1,212(sp)
     e06:	494e                	lw	s2,208(sp)
     e08:	49be                	lw	s3,204(sp)
     e0a:	4a2e                	lw	s4,200(sp)
     e0c:	612d                	addi	sp,sp,224
     e0e:	8082                	ret
		CT[i-(2*N)] = CT[i];
     e10:	00249713          	slli	a4,s1,0x2
     e14:	972a                	add	a4,a4,a0
     e16:	4318                	lw	a4,0(a4)
	for(i = (2*N); i < (3*N); ++i){
     e18:	0485                	addi	s1,s1,1
     e1a:	0791                	addi	a5,a5,4
		CT[i-(2*N)] = CT[i];
     e1c:	fee7ae23          	sw	a4,-4(a5)
	for(i = (2*N); i < (3*N); ++i){
     e20:	bff1                	j	dfc <ntru_encyrpt+0x70>

00000e22 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e22:	7179                	addi	sp,sp,-48
     e24:	d422                	sw	s0,40(sp)
     e26:	ce4e                	sw	s3,28(sp)
     e28:	842a                	mv	s0,a0
	}
	printf("\n");*/

	a2 = polydiv(a,(2*N),polyR,(N+1),q);
	//printf("Vector a2 (f.e modq) = ");
	for(i = (2*N); i < ((2*N)+N); ++i){
     e2a:	498d                	li	s3,3
     e2c:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e30:	d04a                	sw	s2,32(sp)
     e32:	ca56                	sw	s5,20(sp)
     e34:	c65e                	sw	s7,12(sp)
     e36:	8932                	mv	s2,a2
     e38:	8536                	mv	a0,a3
	a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e3a:	863e                	mv	a2,a5
     e3c:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e3e:	8aae                	mv	s5,a1
     e40:	8bba                	mv	s7,a4
	a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e42:	85a2                	mv	a1,s0
     e44:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e46:	d606                	sw	ra,44(sp)
     e48:	d226                	sw	s1,36(sp)
     e4a:	cc52                	sw	s4,24(sp)
     e4c:	c85a                	sw	s6,16(sp)
     e4e:	8a42                	mv	s4,a6
	a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e50:	00141493          	slli	s1,s0,0x1
	a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e54:	c60ff0ef          	jal	ra,2b4 <polymult2>
	a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e58:	00140b13          	addi	s6,s0,1
     e5c:	874a                	mv	a4,s2
     e5e:	86da                	mv	a3,s6
     e60:	8652                	mv	a2,s4
     e62:	85a6                	mv	a1,s1
     e64:	dc0ff0ef          	jal	ra,424 <polydiv>
     e68:	862a                	mv	a2,a0
	for(i = (2*N); i < ((2*N)+N); ++i){
     e6a:	87aa                	mv	a5,a0
     e6c:	872a                	mv	a4,a0
     e6e:	86a6                	mv	a3,s1
     e70:	0536c263          	blt	a3,s3,eb4 <ntru_deceypt+0x92>
	}
	printf("\n");*/

	//centerlifting a2
	for (i = 0; i < N; ++i){
		if(a2[i] <= q/2)
     e74:	4589                	li	a1,2
     e76:	02b945b3          	div	a1,s2,a1
	for (i = 0; i < N; ++i){
     e7a:	4701                	li	a4,0
     e7c:	04874563          	blt	a4,s0,ec6 <ntru_deceypt+0xa4>
	for(i = 0; i < N; ++i){
		printf(" %d ",a2[i]);
	}
	printf("\n");*/

	c = polymult2(secret_key_fp,N,a2,N,0);
     e80:	4701                	li	a4,0
     e82:	86a2                	mv	a3,s0
     e84:	85a2                	mv	a1,s0
     e86:	855e                	mv	a0,s7
     e88:	c2cff0ef          	jal	ra,2b4 <polymult2>
	for(i = 0; i < (2*N); ++i){
		printf(" %d ",c[i]);
	}
	printf("\n");*/

	c2 = polydiv(c,(2*N),polyR,(N+1),p);
     e8c:	8756                	mv	a4,s5
     e8e:	86da                	mv	a3,s6
     e90:	8652                	mv	a2,s4
     e92:	85a6                	mv	a1,s1
     e94:	d90ff0ef          	jal	ra,424 <polydiv>
	for(i = (2*N); i < ((2*N)+N); ++i){
     e98:	87aa                	mv	a5,a0
     e9a:	0334cf63          	blt	s1,s3,ed8 <ntru_deceypt+0xb6>
	}
	printf("\n");*/
	
	return_address7 = &c2[0];
	return return_address7;
}
     e9e:	50b2                	lw	ra,44(sp)
     ea0:	5422                	lw	s0,40(sp)
     ea2:	5492                	lw	s1,36(sp)
     ea4:	5902                	lw	s2,32(sp)
     ea6:	49f2                	lw	s3,28(sp)
     ea8:	4a62                	lw	s4,24(sp)
     eaa:	4ad2                	lw	s5,20(sp)
     eac:	4b42                	lw	s6,16(sp)
     eae:	4bb2                	lw	s7,12(sp)
     eb0:	6145                	addi	sp,sp,48
     eb2:	8082                	ret
		a2[i-(2*N)] = a2[i];
     eb4:	00269593          	slli	a1,a3,0x2
     eb8:	95b2                	add	a1,a1,a2
     eba:	418c                	lw	a1,0(a1)
	for(i = (2*N); i < ((2*N)+N); ++i){
     ebc:	0685                	addi	a3,a3,1
     ebe:	0711                	addi	a4,a4,4
		a2[i-(2*N)] = a2[i];
     ec0:	feb72e23          	sw	a1,-4(a4)
	for(i = (2*N); i < ((2*N)+N); ++i){
     ec4:	b775                	j	e70 <ntru_deceypt+0x4e>
		if(a2[i] <= q/2)
     ec6:	4394                	lw	a3,0(a5)
     ec8:	00d5d563          	bge	a1,a3,ed2 <ntru_deceypt+0xb0>
			a2[i] = (-1)*(q-a2[i]);
     ecc:	412686b3          	sub	a3,a3,s2
     ed0:	c394                	sw	a3,0(a5)
	for (i = 0; i < N; ++i){
     ed2:	0705                	addi	a4,a4,1
     ed4:	0791                	addi	a5,a5,4
     ed6:	b75d                	j	e7c <ntru_deceypt+0x5a>
		c2[i-(2*N)] = c2[i];
     ed8:	00249713          	slli	a4,s1,0x2
     edc:	972a                	add	a4,a4,a0
     ede:	4318                	lw	a4,0(a4)
	for(i = (2*N); i < ((2*N)+N); ++i){
     ee0:	0485                	addi	s1,s1,1
     ee2:	0791                	addi	a5,a5,4
		c2[i-(2*N)] = c2[i];
     ee4:	fee7ae23          	sw	a4,-4(a5)
	for(i = (2*N); i < ((2*N)+N); ++i){
     ee8:	bf4d                	j	e9a <ntru_deceypt+0x78>

00000eea <default_exc_handler>:
  jal x0, default_exc_handler
     eea:	0000006f          	j	eea <default_exc_handler>

00000eee <reset_handler>:
  mv  x1, x0
     eee:	00000093          	li	ra,0
  mv  x2, x1
     ef2:	8106                	mv	sp,ra
  mv  x3, x1
     ef4:	8186                	mv	gp,ra
  mv  x4, x1
     ef6:	8206                	mv	tp,ra
  mv  x5, x1
     ef8:	8286                	mv	t0,ra
  mv  x6, x1
     efa:	8306                	mv	t1,ra
  mv  x7, x1
     efc:	8386                	mv	t2,ra
  mv  x8, x1
     efe:	8406                	mv	s0,ra
  mv  x9, x1
     f00:	8486                	mv	s1,ra
  mv x10, x1
     f02:	8506                	mv	a0,ra
  mv x11, x1
     f04:	8586                	mv	a1,ra
  mv x12, x1
     f06:	8606                	mv	a2,ra
  mv x13, x1
     f08:	8686                	mv	a3,ra
  mv x14, x1
     f0a:	8706                	mv	a4,ra
  mv x15, x1
     f0c:	8786                	mv	a5,ra
  mv x16, x1
     f0e:	8806                	mv	a6,ra
  mv x17, x1
     f10:	8886                	mv	a7,ra
  mv x18, x1
     f12:	8906                	mv	s2,ra
  mv x19, x1
     f14:	8986                	mv	s3,ra
  mv x20, x1
     f16:	8a06                	mv	s4,ra
  mv x21, x1
     f18:	8a86                	mv	s5,ra
  mv x22, x1
     f1a:	8b06                	mv	s6,ra
  mv x23, x1
     f1c:	8b86                	mv	s7,ra
  mv x24, x1
     f1e:	8c06                	mv	s8,ra
  mv x25, x1
     f20:	8c86                	mv	s9,ra
  mv x26, x1
     f22:	8d06                	mv	s10,ra
  mv x27, x1
     f24:	8d86                	mv	s11,ra
  mv x28, x1
     f26:	8e06                	mv	t3,ra
  mv x29, x1
     f28:	8e86                	mv	t4,ra
  mv x30, x1
     f2a:	8f06                	mv	t5,ra
  mv x31, x1
     f2c:	8f86                	mv	t6,ra
  la   x2, _stack_start
     f2e:	0000f117          	auipc	sp,0xf
     f32:	0d210113          	addi	sp,sp,210 # 10000 <_stack_start>

00000f36 <_start>:
  la x26, _bss_start
     f36:	00000d17          	auipc	s10,0x0
     f3a:	436d0d13          	addi	s10,s10,1078 # 136c <_bss_start>
  la x27, _bss_end
     f3e:	00001d97          	auipc	s11,0x1
     f42:	1bed8d93          	addi	s11,s11,446 # 20fc <_bss_end>
  bge x26, x27, zero_loop_end
     f46:	01bd5763          	bge	s10,s11,f54 <main_entry>

00000f4a <zero_loop>:
  sw x0, 0(x26)
     f4a:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
     f4e:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
     f50:	ffaddde3          	bge	s11,s10,f4a <zero_loop>

00000f54 <main_entry>:
  addi x10, x0, 0
     f54:	00000513          	li	a0,0
  addi x11, x0, 0
     f58:	00000593          	li	a1,0
  jal x1, main
     f5c:	18a000ef          	jal	ra,10e6 <main>

00000f60 <memcpy>:
     f60:	00a5c7b3          	xor	a5,a1,a0
     f64:	8b8d                	andi	a5,a5,3
     f66:	00c508b3          	add	a7,a0,a2
     f6a:	e7a1                	bnez	a5,fb2 <memcpy+0x52>
     f6c:	478d                	li	a5,3
     f6e:	04c7f263          	bgeu	a5,a2,fb2 <memcpy+0x52>
     f72:	00357793          	andi	a5,a0,3
     f76:	872a                	mv	a4,a0
     f78:	eba9                	bnez	a5,fca <memcpy+0x6a>
     f7a:	ffc8f613          	andi	a2,a7,-4
     f7e:	fe060793          	addi	a5,a2,-32
     f82:	06f76763          	bltu	a4,a5,ff0 <memcpy+0x90>
     f86:	02c77363          	bgeu	a4,a2,fac <memcpy+0x4c>
     f8a:	86ae                	mv	a3,a1
     f8c:	87ba                	mv	a5,a4
     f8e:	0006a803          	lw	a6,0(a3)
     f92:	0791                	addi	a5,a5,4
     f94:	0691                	addi	a3,a3,4
     f96:	ff07ae23          	sw	a6,-4(a5)
     f9a:	fec7eae3          	bltu	a5,a2,f8e <memcpy+0x2e>
     f9e:	fff60793          	addi	a5,a2,-1
     fa2:	8f99                	sub	a5,a5,a4
     fa4:	9bf1                	andi	a5,a5,-4
     fa6:	0791                	addi	a5,a5,4
     fa8:	973e                	add	a4,a4,a5
     faa:	95be                	add	a1,a1,a5
     fac:	01176663          	bltu	a4,a7,fb8 <memcpy+0x58>
     fb0:	8082                	ret
     fb2:	872a                	mv	a4,a0
     fb4:	ff157ee3          	bgeu	a0,a7,fb0 <memcpy+0x50>
     fb8:	0005c783          	lbu	a5,0(a1)
     fbc:	0705                	addi	a4,a4,1
     fbe:	0585                	addi	a1,a1,1
     fc0:	fef70fa3          	sb	a5,-1(a4)
     fc4:	ff176ae3          	bltu	a4,a7,fb8 <memcpy+0x58>
     fc8:	8082                	ret
     fca:	0005c683          	lbu	a3,0(a1)
     fce:	0705                	addi	a4,a4,1
     fd0:	00377793          	andi	a5,a4,3
     fd4:	fed70fa3          	sb	a3,-1(a4)
     fd8:	0585                	addi	a1,a1,1
     fda:	d3c5                	beqz	a5,f7a <memcpy+0x1a>
     fdc:	0005c683          	lbu	a3,0(a1)
     fe0:	0705                	addi	a4,a4,1
     fe2:	00377793          	andi	a5,a4,3
     fe6:	fed70fa3          	sb	a3,-1(a4)
     fea:	0585                	addi	a1,a1,1
     fec:	fff9                	bnez	a5,fca <memcpy+0x6a>
     fee:	b771                	j	f7a <memcpy+0x1a>
     ff0:	41d4                	lw	a3,4(a1)
     ff2:	0005a283          	lw	t0,0(a1)
     ff6:	0085af83          	lw	t6,8(a1)
     ffa:	00c5af03          	lw	t5,12(a1)
     ffe:	0105ae83          	lw	t4,16(a1)
    1002:	0145ae03          	lw	t3,20(a1)
    1006:	0185a303          	lw	t1,24(a1)
    100a:	01c5a803          	lw	a6,28(a1)
    100e:	c354                	sw	a3,4(a4)
    1010:	5194                	lw	a3,32(a1)
    1012:	00572023          	sw	t0,0(a4)
    1016:	01f72423          	sw	t6,8(a4)
    101a:	01e72623          	sw	t5,12(a4)
    101e:	01d72823          	sw	t4,16(a4)
    1022:	01c72a23          	sw	t3,20(a4)
    1026:	00672c23          	sw	t1,24(a4)
    102a:	01072e23          	sw	a6,28(a4)
    102e:	d314                	sw	a3,32(a4)
    1030:	02470713          	addi	a4,a4,36
    1034:	02458593          	addi	a1,a1,36
    1038:	faf76ce3          	bltu	a4,a5,ff0 <memcpy+0x90>
    103c:	b7a9                	j	f86 <memcpy+0x26>

0000103e <memset>:
    103e:	433d                	li	t1,15
    1040:	872a                	mv	a4,a0
    1042:	02c37363          	bgeu	t1,a2,1068 <memset+0x2a>
    1046:	00f77793          	andi	a5,a4,15
    104a:	efbd                	bnez	a5,10c8 <memset+0x8a>
    104c:	e5ad                	bnez	a1,10b6 <memset+0x78>
    104e:	ff067693          	andi	a3,a2,-16
    1052:	8a3d                	andi	a2,a2,15
    1054:	96ba                	add	a3,a3,a4
    1056:	c30c                	sw	a1,0(a4)
    1058:	c34c                	sw	a1,4(a4)
    105a:	c70c                	sw	a1,8(a4)
    105c:	c74c                	sw	a1,12(a4)
    105e:	0741                	addi	a4,a4,16
    1060:	fed76be3          	bltu	a4,a3,1056 <memset+0x18>
    1064:	e211                	bnez	a2,1068 <memset+0x2a>
    1066:	8082                	ret
    1068:	40c306b3          	sub	a3,t1,a2
    106c:	068a                	slli	a3,a3,0x2
    106e:	00000297          	auipc	t0,0x0
    1072:	9696                	add	a3,a3,t0
    1074:	00a68067          	jr	10(a3)
    1078:	00b70723          	sb	a1,14(a4)
    107c:	00b706a3          	sb	a1,13(a4)
    1080:	00b70623          	sb	a1,12(a4)
    1084:	00b705a3          	sb	a1,11(a4)
    1088:	00b70523          	sb	a1,10(a4)
    108c:	00b704a3          	sb	a1,9(a4)
    1090:	00b70423          	sb	a1,8(a4)
    1094:	00b703a3          	sb	a1,7(a4)
    1098:	00b70323          	sb	a1,6(a4)
    109c:	00b702a3          	sb	a1,5(a4)
    10a0:	00b70223          	sb	a1,4(a4)
    10a4:	00b701a3          	sb	a1,3(a4)
    10a8:	00b70123          	sb	a1,2(a4)
    10ac:	00b700a3          	sb	a1,1(a4)
    10b0:	00b70023          	sb	a1,0(a4)
    10b4:	8082                	ret
    10b6:	0ff5f593          	andi	a1,a1,255
    10ba:	00859693          	slli	a3,a1,0x8
    10be:	8dd5                	or	a1,a1,a3
    10c0:	01059693          	slli	a3,a1,0x10
    10c4:	8dd5                	or	a1,a1,a3
    10c6:	b761                	j	104e <memset+0x10>
    10c8:	00279693          	slli	a3,a5,0x2
    10cc:	00000297          	auipc	t0,0x0
    10d0:	9696                	add	a3,a3,t0
    10d2:	8286                	mv	t0,ra
    10d4:	fa8680e7          	jalr	-88(a3)
    10d8:	8096                	mv	ra,t0
    10da:	17c1                	addi	a5,a5,-16
    10dc:	8f1d                	sub	a4,a4,a5
    10de:	963e                	add	a2,a2,a5
    10e0:	f8c374e3          	bgeu	t1,a2,1068 <memset+0x2a>
    10e4:	b7a5                	j	104c <memset+0xe>

000010e6 <main>:

int main(){
    10e6:	bd010113          	addi	sp,sp,-1072
int N = 53;
int p = 3;
int q = 101;
//int message[11] = {1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1};
//int message[7] = {1, 0, 1, 0, 1, 1, 1};
int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    10ea:	0c000613          	li	a2,192
    10ee:	00000597          	auipc	a1,0x0
    10f2:	1ba58593          	addi	a1,a1,442 # 12a8 <__DTOR_END__+0xc0>
    10f6:	0068                	addi	a0,sp,12
int main(){
    10f8:	42112623          	sw	ra,1068(sp)
    10fc:	42812423          	sw	s0,1064(sp)
int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1100:	3585                	jal	f60 <memcpy>

	// Alice generates public key from her randomly created secret keys.
//	printf("\nKEY GENERATION STARTED \n");

//	start = clock();
	keys = generate_keys(N, p, q);
    1102:	06500613          	li	a2,101
    1106:	458d                	li	a1,3
    1108:	03500513          	li	a0,53
    110c:	3269                	jal	a96 <generate_keys>
    110e:	4781                	li	a5,0
//	printf("Secret Key f = ");
	for(i = 0; i < N; ++i){
    1110:	0d400713          	li	a4,212
//		printf(" %d ", keys[i]);
		secret_key_f[i] = keys[i];
    1114:	00f506b3          	add	a3,a0,a5
    1118:	4290                	lw	a2,0(a3)
    111a:	1314                	addi	a3,sp,416
    111c:	96be                	add	a3,a3,a5
    111e:	c290                	sw	a2,0(a3)
	for(i = 0; i < N; ++i){
    1120:	0791                	addi	a5,a5,4
    1122:	fee799e3          	bne	a5,a4,1114 <main+0x2e>
	}	
// 	printf("\n");

//	printf("Secret Key g = ");
	for(i = N; i < (2*N); ++i){
    1126:	1cd8                	addi	a4,sp,628
    1128:	1a850793          	addi	a5,a0,424
    112c:	27c50693          	addi	a3,a0,636
    1130:	843a                	mv	s0,a4
//	printf("\n");
	
//	printf("Secret Key fp = ");
	for(i = (2*N); i < (3*N); ++i){
//		printf(" %d ", keys[i]);
		secret_key_fp[i-(2*N)] = keys[i];
    1132:	4390                	lw	a2,0(a5)
    1134:	0791                	addi	a5,a5,4
    1136:	0711                	addi	a4,a4,4
    1138:	fec72e23          	sw	a2,-4(a4)
	for(i = (2*N); i < (3*N); ++i){
    113c:	fed79be3          	bne	a5,a3,1132 <main+0x4c>
	}
//	printf("\n");

//	printf("Secret Key fq = ");
	for(i = (3*N); i < (4*N); ++i){
    1140:	01f8                	addi	a4,sp,204
    1142:	35050793          	addi	a5,a0,848
    1146:	42450613          	addi	a2,a0,1060
    114a:	86ba                	mv	a3,a4
//	printf("\n");

//	printf("Public Key h = ");
	for(i = (4*N); i < (5*N); ++i){
//		printf(" %d ", keys[i]);
		public_key[i-(4*N)] = keys[i];
    114c:	438c                	lw	a1,0(a5)
    114e:	0791                	addi	a5,a5,4
    1150:	0711                	addi	a4,a4,4
    1152:	feb72e23          	sw	a1,-4(a4)
	for(i = (4*N); i < (5*N); ++i){
    1156:	fec79be3          	bne	a5,a2,114c <main+0x66>
    115a:	06b0                	addi	a2,sp,840
    115c:	4fc50513          	addi	a0,a0,1276
    1160:	8832                	mv	a6,a2
 //	printf("\n");

//	printf("Ring Poly = ");
	for(i = (5*N); i < (6*N+1); ++i){
//		printf(" %d ", keys[i]);
		ring_poly[i-(5*N)] = keys[i];
    1162:	4398                	lw	a4,0(a5)
    1164:	0791                	addi	a5,a5,4
    1166:	0611                	addi	a2,a2,4
    1168:	fee62e23          	sw	a4,-4(a2)
	for(i = (5*N); i < (6*N+1); ++i){
    116c:	fea79be3          	bne	a5,a0,1162 <main+0x7c>
	}	
//	printf("\nKEY GENERATION FINISHED \n");

	// Bob encrypts message using Alice's public key and sends it to Alice.
//	printf("\nENCRYPTION STARTED\n"); 
	Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1170:	8742                	mv	a4,a6
    1172:	0070                	addi	a2,sp,12
    1174:	06500593          	li	a1,101
    1178:	03500513          	li	a0,53
    117c:	3901                	jal	d8c <ntru_encyrpt>
    117e:	87aa                	mv	a5,a0
//	}
//	printf("\nENCRYPTION FINISHED\n");

	// Alice decrypts the message using her secret keys.
//	printf("\nDECRYPTION STARTED\n"); 
	Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1180:	34810813          	addi	a6,sp,840
    1184:	06500613          	li	a2,101
    1188:	458d                	li	a1,3
    118a:	8722                	mv	a4,s0
    118c:	1314                	addi	a3,sp,416
    118e:	03500513          	li	a0,53
    1192:	3941                	jal	e22 <ntru_deceypt>
    1194:	4781                	li	a5,0
//			printf("!!ERROR!!\n");
			resultkon = 0;
			break;	}		
		else{
//			printf("**OPERATION SUCCCESSFUL**\n");
			resultkon = 1;}
    1196:	00000597          	auipc	a1,0x0
    119a:	1d258593          	addi	a1,a1,466 # 1368 <_edata>
    119e:	4805                	li	a6,1
	for(i = 0; i < 48; ++i){	
    11a0:	0c000613          	li	a2,192
		if(!(message[i] == Dec_Message[i])){
    11a4:	0074                	addi	a3,sp,12
    11a6:	00f50733          	add	a4,a0,a5
    11aa:	96be                	add	a3,a3,a5
    11ac:	4294                	lw	a3,0(a3)
    11ae:	4318                	lw	a4,0(a4)
    11b0:	00e68e63          	beq	a3,a4,11cc <main+0xe6>
			resultkon = 0;
    11b4:	00000797          	auipc	a5,0x0
    11b8:	1a07aa23          	sw	zero,436(a5) # 1368 <_edata>
//	printf("RESULT = %d\n",resultkon);
//	    printf("Time Result = %f sec\n",cpu_time_used);


    return 0;	
}
    11bc:	42c12083          	lw	ra,1068(sp)
    11c0:	42812403          	lw	s0,1064(sp)
    11c4:	4501                	li	a0,0
    11c6:	43010113          	addi	sp,sp,1072
    11ca:	8082                	ret
			resultkon = 1;}
    11cc:	0105a023          	sw	a6,0(a1)
	for(i = 0; i < 48; ++i){	
    11d0:	0791                	addi	a5,a5,4
    11d2:	fcc799e3          	bne	a5,a2,11a4 <main+0xbe>
    11d6:	b7dd                	j	11bc <main+0xd6>

000011d8 <__CTOR_LIST__>:
	...

000011e0 <__CTOR_END__>:
	...

Disassembly of section .rodata:

000011e8 <.rodata>:
    11e8:	0001                	nop
    11ea:	0000                	unimp
    11ec:	ffff                	0xffff
    11ee:	ffff                	0xffff
    11f0:	0000                	unimp
    11f2:	0000                	unimp
    11f4:	0001                	nop
    11f6:	0000                	unimp
    11f8:	ffff                	0xffff
    11fa:	ffff                	0xffff
    11fc:	0001                	nop
    11fe:	0000                	unimp
    1200:	ffff                	0xffff
    1202:	ffff                	0xffff
    1204:	0000                	unimp
    1206:	0000                	unimp
    1208:	0001                	nop
    120a:	0000                	unimp
    120c:	0001                	nop
    120e:	0000                	unimp
    1210:	0000                	unimp
    1212:	0000                	unimp
    1214:	ffff                	0xffff
    1216:	ffff                	0xffff
    1218:	0001                	nop
    121a:	0000                	unimp
    121c:	ffff                	0xffff
    121e:	ffff                	0xffff
    1220:	0001                	nop
    1222:	0000                	unimp
    1224:	0000                	unimp
    1226:	0000                	unimp
    1228:	0001                	nop
    122a:	0000                	unimp
    122c:	0001                	nop
    122e:	0000                	unimp
    1230:	0000                	unimp
    1232:	0000                	unimp
    1234:	ffff                	0xffff
    1236:	ffff                	0xffff
    1238:	0001                	nop
    123a:	0000                	unimp
    123c:	ffff                	0xffff
    123e:	ffff                	0xffff
    1240:	0001                	nop
    1242:	0000                	unimp
    1244:	0000                	unimp
    1246:	0000                	unimp
    1248:	0001                	nop
    124a:	0000                	unimp
    124c:	0001                	nop
    124e:	0000                	unimp
    1250:	0000                	unimp
    1252:	0000                	unimp
    1254:	0001                	nop
    1256:	0000                	unimp
    1258:	ffff                	0xffff
    125a:	ffff                	0xffff
    125c:	0001                	nop
    125e:	0000                	unimp
    1260:	ffff                	0xffff
    1262:	ffff                	0xffff
    1264:	0000                	unimp
    1266:	0000                	unimp
    1268:	0001                	nop
    126a:	0000                	unimp
    126c:	ffff                	0xffff
    126e:	ffff                	0xffff
    1270:	0000                	unimp
    1272:	0000                	unimp
    1274:	0001                	nop
    1276:	0000                	unimp
    1278:	ffff                	0xffff
    127a:	ffff                	0xffff
    127c:	0001                	nop
    127e:	0000                	unimp
    1280:	ffff                	0xffff
    1282:	ffff                	0xffff
    1284:	0000                	unimp
    1286:	0000                	unimp
    1288:	0001                	nop
    128a:	0000                	unimp
    128c:	0001                	nop
    128e:	0000                	unimp
    1290:	0000                	unimp
    1292:	0000                	unimp
    1294:	ffff                	0xffff
    1296:	ffff                	0xffff
    1298:	0001                	nop
    129a:	0000                	unimp
    129c:	ffff                	0xffff
    129e:	ffff                	0xffff
    12a0:	0001                	nop
    12a2:	0000                	unimp
    12a4:	0000                	unimp
    12a6:	0000                	unimp
    12a8:	0001                	nop
    12aa:	0000                	unimp
    12ac:	0001                	nop
    12ae:	0000                	unimp
    12b0:	0002                	c.slli64	zero
    12b2:	0000                	unimp
    12b4:	0001                	nop
    12b6:	0000                	unimp
    12b8:	0001                	nop
    12ba:	0000                	unimp
    12bc:	0001                	nop
    12be:	0000                	unimp
    12c0:	0001                	nop
    12c2:	0000                	unimp
    12c4:	0002                	c.slli64	zero
    12c6:	0000                	unimp
    12c8:	0001                	nop
    12ca:	0000                	unimp
    12cc:	0001                	nop
    12ce:	0000                	unimp
    12d0:	0000                	unimp
    12d2:	0000                	unimp
    12d4:	0001                	nop
    12d6:	0000                	unimp
    12d8:	0001                	nop
    12da:	0000                	unimp
    12dc:	0002                	c.slli64	zero
    12de:	0000                	unimp
    12e0:	0001                	nop
    12e2:	0000                	unimp
    12e4:	0000                	unimp
    12e6:	0000                	unimp
    12e8:	0001                	nop
    12ea:	0000                	unimp
    12ec:	0002                	c.slli64	zero
    12ee:	0000                	unimp
    12f0:	0000                	unimp
    12f2:	0000                	unimp
    12f4:	0001                	nop
    12f6:	0000                	unimp
    12f8:	0001                	nop
    12fa:	0000                	unimp
    12fc:	0001                	nop
    12fe:	0000                	unimp
    1300:	0001                	nop
    1302:	0000                	unimp
    1304:	0000                	unimp
    1306:	0000                	unimp
    1308:	0001                	nop
    130a:	0000                	unimp
    130c:	0001                	nop
    130e:	0000                	unimp
    1310:	0000                	unimp
    1312:	0000                	unimp
    1314:	0002                	c.slli64	zero
    1316:	0000                	unimp
    1318:	0001                	nop
    131a:	0000                	unimp
    131c:	0002                	c.slli64	zero
    131e:	0000                	unimp
    1320:	0001                	nop
    1322:	0000                	unimp
    1324:	0000                	unimp
    1326:	0000                	unimp
    1328:	0001                	nop
    132a:	0000                	unimp
    132c:	0001                	nop
    132e:	0000                	unimp
    1330:	0002                	c.slli64	zero
    1332:	0000                	unimp
    1334:	0001                	nop
    1336:	0000                	unimp
    1338:	0001                	nop
    133a:	0000                	unimp
    133c:	0001                	nop
    133e:	0000                	unimp
    1340:	0001                	nop
    1342:	0000                	unimp
    1344:	0002                	c.slli64	zero
    1346:	0000                	unimp
    1348:	0001                	nop
    134a:	0000                	unimp
    134c:	0001                	nop
    134e:	0000                	unimp
    1350:	0002                	c.slli64	zero
    1352:	0000                	unimp
    1354:	0001                	nop
    1356:	0000                	unimp
    1358:	0001                	nop
    135a:	0000                	unimp
    135c:	0001                	nop
    135e:	0000                	unimp
    1360:	0001                	nop
    1362:	0000                	unimp
    1364:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

00001368 <resultkon>:
volatile int resultkon = 2;
    1368:	0002                	c.slli64	zero
	...

Disassembly of section .bss:

0000136c <_bss_start>:
	...

000015c4 <product2>:
	...

0000181c <result>:
	...

00001a74 <ti_2>:
	...

00001c04 <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	173c                	addi	a5,sp,936
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05b9                	addi	a1,a1,14
       e:	0000                	unimp
      10:	6d0c                	flw	fa1,24(a0)
      12:	68000003          	lb	zero,1664(zero) # 680 <polydiv+0x25c>
      16:	0005                	c.nop	1
	...
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	041f 0000 0102      	0x1020000041f
      2e:	1d08                	addi	a0,sp,688
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	043e                	slli	s0,s0,0xf
      38:	0000                	unimp
      3a:	0202                	c.slli64	tp
      3c:	0002b107          	fld	ft2,0(t0) # 10cc <memset+0x8e>
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	000000f3          	0xf3
      48:	0402                	c.slli64	s0
      4a:	00007007          	0x7007
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00ee                	slli	ra,ra,0x1b
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00006b07          	0x6b07
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	0075                	c.nop	29
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	8004                	0x8004
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	02f4                	addi	a3,sp,332
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
  jal x0, reset_handler
      80:	0069                	c.nop	26
      82:	0000                	unimp
  jal x0, default_exc_handler
      84:	d106                	sw	ra,160(sp)
      86:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
  jal x0, default_exc_handler
      8a:	0e2e                	slli	t3,t3,0xb
int line[size_b][size_a + size_b];
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
      90:	0906                	slli	s2,s2,0x1
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	4f06                	lw	t5,64(sp)
      9e:	0006                	c.slli	zero,0x1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      a0:	0300                	addi	s0,sp,384
      a2:	005d1793          	slli	a5,s10,0x5
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
      b0:	0800                	addi	s0,sp,16
int line[size_b][size_a + size_b];
      b2:	02ee                	slli	t0,t0,0x1b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b4:	0000                	unimp
int line[size_b][size_a + size_b];
      b6:	770ca703          	lw	a4,1904(s9)
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
int pola[size_a];
      be:	0215                	addi	tp,tp,5
      c0:	0000                	unimp
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
int line[size_b][size_a + size_b];
      c8:	0000                	unimp
int pola[size_a];
      ca:	2c09                	jal	2dc <polymult2+0x28>
      cc:	0000                	unimp
int polb[size_b];
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
      d4:	0069                	c.nop	26
int pola[size_a];
      d6:	0000                	unimp
int polb[size_b];
      d8:	080b0003          	lb	zero,128(s6)
int line[size_b][size_a + size_b];
      dc:	fe09a203          	lw	tp,-32(s3)
int pola[size_a];
      e0:	0000                	unimp
      e2:	0c00                	addi	s0,sp,528
int polb[size_b];
      e4:	000004f3          	0x4f3
			line[i][j] = 0;
      e8:	5d07a403          	lw	s0,1488(a5)
	for (i = 0; i < size_b; ++i){
      ec:	0000                	unimp
      ee:	0000                	unimp
			product[j] = 0;		
      f0:	fb0c                	fsw	fa1,48(a4)
      f2:	0004                	0x4
      f4:	0300                	addi	s0,sp,384
      f6:	05a9                	addi	a1,a1,10
	for (i = 0; i < size_b; ++i){
      f8:	00a8                	addi	a0,sp,72
      fa:	0000                	unimp
	for(i = 0; i < size_a; ++i){
      fc:	0004                	0x4
      fe:	6606                	flw	fa2,64(sp)
     100:	0004                	0x4
	for(i = 0; i < size_b; ++i){
     102:	0300                	addi	s0,sp,384
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
     108:	0000                	unimp
     10a:	040d                	addi	s0,s0,3
	for (i = 0; i < size_a; ++i){
     10c:	4e06                	lw	t3,64(sp)
     10e:	0005                	c.nop	1
     110:	0400                	addi	s0,sp,512
	for (i = 0; i < size_a; ++i){
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
     116:	0000                	unimp
     118:	0106                	slli	sp,sp,0x1
     11a:	0004                	0x4
	for (i = 0; i < size_b; ++i){
     11c:	0500                	addi	s0,sp,640
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
	for(i = 0; i < size_b; ++i){
     122:	0000                	unimp
     124:	d806                	sw	ra,48(sp)
     126:	0001                	nop
	if(star_mult == 1){
     128:	0400                	addi	s0,sp,512
     12a:	01181b23          	sh	a7,22(a6)
     12e:	0000                	unimp
     130:	e90e                	fsw	ft3,144(sp)
     132:	0001                	nop
     134:	1800                	addi	s0,sp,48
     136:	3404                	fld	fs1,40(s0)
		for (j = size_b -1; j >= 0; j = j-1){
     138:	8a08                	0x8a08
     13a:	0001                	nop
			for (k = size_a-1; k >= 0; k = k-1 ){
     13c:	0c00                	addi	s0,sp,528
     13e:	00000487          	0x487
			product[j] = 0;		
     142:	3604                	fld	fs1,40(a2)
     144:	00018a13          	mv	s4,gp
			line[i][j] = 0;
     148:	0000                	unimp
			product[j] = 0;		
     14a:	006b5f0f          	0x6b5f0f
		for(j = 0; j < size_a + size_b -1; ++j){
     14e:	3704                	fld	fs1,40(a4)
     150:	00005d07          	0x5d07
     154:	0400                	addi	s0,sp,512
	for (i = 0; i < size_b; ++i){
     156:	cf0c                	sw	a1,24(a4)
     158:	0004                	0x4
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
		for(j = 0; j < size_a + size_b -1; ++j){
     160:	0000                	unimp
		pola[i] = a[i];
     162:	0c08                	addi	a0,sp,528
     164:	01d2                	slli	gp,gp,0x14
     166:	0000                	unimp
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
     16c:	0000                	unimp
     16e:	0c00                	addi	s0,sp,528
	for(i = 0; i < size_a; ++i){
     170:	2d0c                	fld	fa1,24(a0)
		pola[i] = a[i];
     172:	0006                	c.slli	zero,0x1
     174:	0400                	addi	s0,sp,512
	for(i = 0; i < size_a; ++i){
     176:	005d1b37          	lui	s6,0x5d1
		polb[i] = b[i];
     17a:	0000                	unimp
     17c:	0f10                	addi	a2,sp,912
     17e:	785f 0400 0b38      	0xb380400785f
     184:	0190                	addi	a2,sp,192
	for(i = 0; i < size_b; ++i){
     186:	0000                	unimp
		polb[i] = b[i];
     188:	0014                	0x14
     18a:	0410                	addi	a2,sp,512
	for(i = 0; i < size_b; ++i){
     18c:	0130                	addi	a2,sp,136
			pola[i] = pola[i] + mod;		
     18e:	0000                	unimp
     190:	0c09                	addi	s8,s8,2
     192:	0001                	nop
		while (pola[i] < 0){
     194:	a000                	fsd	fs0,0(s0)
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
     19a:	0069                	c.nop	26
	for (i = 0; i < size_a; ++i){
     19c:	0000                	unimp
     19e:	0000                	unimp
     1a0:	100e                	c.slli	zero,0x23
		pola[i] = pola[i] % mod;
     1a2:	0002                	c.slli64	zero
     1a4:	2400                	fld	fs0,8(s0)
	for (i = 0; i < size_a; ++i){
     1a6:	3c04                	fld	fs1,56(s0)
     1a8:	2308                	fld	fa0,0(a4)
		pola[i] = pola[i] % mod;
     1aa:	0002                	c.slli64	zero
     1ac:	0c00                	addi	s0,sp,528
     1ae:	00e5                	addi	ra,ra,25
     1b0:	0000                	unimp
	for (i = 0; i < size_a; ++i){
     1b2:	3e04                	fld	fs1,56(a2)
			polb[i] = polb[i] + mod;		
     1b4:	5d09                	li	s10,-30
     1b6:	0000                	unimp
		while (polb[i] < 0){
     1b8:	0000                	unimp
     1ba:	110c                	addi	a1,sp,160
     1bc:	0005                	c.nop	1
	for (i = 0; i < size_b; ++i){
     1be:	0400                	addi	s0,sp,512
     1c0:	005d093f 0c040000 	0xc040000005d093f
	for(i = 0; i < size_b; ++i){
     1c8:	0118                	addi	a4,sp,128
		polb[i] = polb[i] % mod;
     1ca:	0000                	unimp
     1cc:	4004                	lw	s1,0(s0)
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
	for(i = 0; i < size_b; ++i){
     1d2:	0800                	addi	s0,sp,16
	if(star_mult == 1){
     1d4:	cb0c                	sw	a1,16(a4)
		for (j = size_b -1; j >= 0; j = j-1){
     1d6:	0006                	c.slli	zero,0x1
     1d8:	0400                	addi	s0,sp,512
		for(j = 0; j < size_a + size_b -1; ++j){
     1da:	0941                	addi	s2,s2,16
	for (i = 0; i < size_b; ++i){
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
     1e0:	0c0c                	addi	a1,sp,528
     1e2:	0000039b          	0x39b
     1e6:	4204                	lw	s1,0(a2)
     1e8:	5d09                	li	s10,-30
	for(j = 0; j < size_a + size_b -1; ++j){
     1ea:	0000                	unimp
     1ec:	1000                	addi	s0,sp,32
     1ee:	4a0c                	lw	a1,16(a2)
	for(j = 0; j < size_a + size_b -1; ++j){
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
}
     1f8:	0000                	unimp
     1fa:	0c14                	addi	a3,sp,528
     1fc:	0632                	slli	a2,a2,0xc
     1fe:	0000                	unimp
     200:	4404                	lw	s1,8(s0)
     202:	5d09                	li	s10,-30
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
     208:	480c                	lw	a1,16(s0)
     20a:	0004                	0x4
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
     210:	005d                	c.nop	23
     212:	0000                	unimp
     214:	0c1c                	addi	a5,sp,528
				line[size_b-1-j][k] = pola[k]*polb[j];
     216:	068d                	addi	a3,a3,3
     218:	0000                	unimp
     21a:	4604                	lw	s1,8(a2)
     21c:	5d09                	li	s10,-30
     21e:	0000                	unimp
     220:	2000                	fld	fs0,0(s0)
     222:	1100                	addi	s0,sp,160
     224:	00000127          	0x127
     228:	0108                	addi	a0,sp,128
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
			for (k = size_a-1; k >= 0; k = k-1 ){
     22e:	0002                	c.slli64	zero
     230:	0c00                	addi	s0,sp,528
		for (j = size_b -1; j >= 0; j = j-1){
     232:	01b8                	addi	a4,sp,200
     234:	0000                	unimp
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
			for (k = size_a-1; k >= 0; k = k-1 ){
     23a:	0002                	c.slli64	zero
     23c:	0000                	unimp
				line[size_b-1-j][k + j] = pola[k]*polb[j];
     23e:	000c                	0xc
     240:	0000                	unimp
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
     246:	0268                	addi	a0,sp,268
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
     24c:	0532                	slli	a0,a0,0xc
			for (k = size_a-1; k >= 0; k = k-1 ){
     24e:	0000                	unimp
				line[size_b-1-j][k + j] = pola[k]*polb[j];
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
     254:	0001                	nop
			for (k = size_a-1; k >= 0; k = k-1 ){
     256:	0000                	unimp
     258:	1201                	addi	tp,tp,-32
		for (j = size_b -1; j >= 0; j = j-1){
     25a:	0000015b          	0x15b
     25e:	5604                	lw	s1,40(a2)
     260:	0c0a                	slli	s8,s8,0x2
			line[i][j] = line[i][j] % mod;
     262:	0001                	nop
		for(j = 0; j < size_a + size_b -1; ++j){
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
			line[i][j] = line[i][j] % mod;
     268:	0a09                	addi	s4,s4,2
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
     26e:	0002                	c.slli64	zero
		for(j = 0; j < size_a + size_b -1; ++j){
     270:	0a00                	addi	s0,sp,272
     272:	0069                	c.nop	26
	for (i = 0; i < size_b; ++i){
     274:	0000                	unimp
     276:	001f b411 0003      	0x3b411001f
		for(j = 0; j < size_a + size_b -1; ++j){
     27c:	9000                	0x9000
     27e:	0401                	addi	s0,s0,0
			product[j] += line[i][j];
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
     286:	870c                	0x870c
		for(i = 0; i < size_b; ++i){
     288:	0004                	0x4
			product[j] += line[i][j];
     28a:	0400                	addi	s0,sp,512
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0x224>
     290:	0000                	unimp
     292:	0c00                	addi	s0,sp,528
     294:	049f 0000 6404      	0x64040000049f
	for(j = 0; j < size_a + size_b -1; ++j){
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
		for(i = 0; i < size_b; ++i){
     2a0:	cd0c                	sw	a1,24(a0)
     2a2:	0001                	nop
		product[j] = product[j] % mod;
     2a4:	0400                	addi	s0,sp,512
	for(j = 0; j < size_a + size_b -1; ++j){
     2a6:	0966                	slli	s2,s2,0x19
     2a8:	02c1                	addi	t0,t0,16
		product[j] = product[j] % mod;
     2aa:	0000                	unimp
     2ac:	0c08                	addi	a0,sp,528
     2ae:	00000127          	0x127
	for(j = 0; j < size_a + size_b -1; ++j){
     2b2:	6704                	flw	fs1,8(a4)
int line[size_b][size_a + size_b];
     2b4:	231e                	fld	ft6,448(sp)
     2b6:	0002                	c.slli64	zero
     2b8:	8800                	0x8800
     2ba:	1000                	addi	s0,sp,32
     2bc:	7804                	flw	fs1,48(s0)
     2be:	0002                	c.slli64	zero
     2c0:	0900                	addi	s0,sp,144
     2c2:	02d1                	addi	t0,t0,20
     2c4:	0000                	unimp
     2c6:	02d1                	addi	t0,t0,20
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c8:	0000                	unimp
     2ca:	690a                	flw	fs2,128(sp)
     2cc:	0000                	unimp
     2ce:	1f00                	addi	s0,sp,944
     2d0:	1000                	addi	s0,sp,32
     2d2:	d704                	sw	s1,40(a4)
     2d4:	0002                	c.slli64	zero
     2d6:	1300                	addi	s0,sp,416
     2d8:	520e                	lw	tp,224(sp)
int line[size_b][size_a + size_b];
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
     2de:	7a04                	flw	fs1,48(a2)
     2e0:	0008                	0x8
int pola[size_a];
     2e2:	0c000003          	lb	zero,192(zero) # c0 <polymult+0x34>
     2e6:	0112                	slli	sp,sp,0x4
     2e8:	0000                	unimp
int line[size_b][size_a + size_b];
     2ea:	7b04                	flw	fs1,48(a4)
int pola[size_a];
     2ec:	0011                	c.nop	4
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
int polb[size_b];
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
int pola[size_a];
     2f6:	0400                	addi	s0,sp,512
int polb[size_b];
     2f8:	067c                	addi	a5,sp,780
     2fa:	005d                	c.nop	23
int line[size_b][size_a + size_b];
     2fc:	0000                	unimp
     2fe:	0004                	0x4
int pola[size_a];
     300:	0410                	addi	a2,sp,512
     302:	002c                	addi	a1,sp,8
int polb[size_b];
     304:	0000                	unimp
			line[i][j] = 0;
     306:	710e                	flw	ft2,224(sp)
     308:	0004                	0x4
     30a:	6800                	flw	fs0,16(s0)
	for (i = 0; i < size_b; ++i){
     30c:	ba04                	fsd	fs1,48(a2)
     30e:	4908                	lw	a0,16(a0)
			product2[j] = 0;		
     310:	0004                	0x4
     312:	0f00                	addi	s0,sp,912
     314:	705f 0400 12bb      	0x12bb0400705f
	for (i = 0; i < size_b; ++i){
     31a:	0300                	addi	s0,sp,384
	for(i = 0; i < size_a; ++i){
     31c:	0000                	unimp
     31e:	0f00                	addi	s0,sp,912
     320:	725f 0400 07bc      	0x7bc0400725f
	for(i = 0; i < size_b; ++i){
     326:	005d                	c.nop	23
	if(star_mult == 1){
     328:	0000                	unimp
     32a:	0f04                	addi	s1,sp,912
     32c:	775f 0400 07bd      	0x7bd0400775f
     332:	005d                	c.nop	23
     334:	0000                	unimp
		for (j = size_b -1; j >= 0; j = j-1){
     336:	0c08                	addi	a0,sp,528
     338:	0154                	addi	a3,sp,132
			for (k = size_a-1; k >= 0; k = k-1 ){
     33a:	0000                	unimp
     33c:	be04                	fsd	fs1,56(a2)
			product2[j] = 0;		
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
     340:	0000                	unimp
     342:	0c00                	addi	s0,sp,528
			line[i][j] = 0;
     344:	440c                	lw	a1,8(s0)
     346:	0002                	c.slli64	zero
			product2[j] = 0;		
     348:	0400                	addi	s0,sp,512
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
		for(j = 0; j < size_a + size_b -1; ++j){
     352:	625f 0066 c004      	0xc0040066625f
	for (i = 0; i < size_b; ++i){
     358:	d811                	beqz	s0,26c <polymult+0x1e0>
     35a:	0002                	c.slli64	zero
		for(j = 0; j < size_a + size_b -1; ++j){
     35c:	1000                	addi	s0,sp,32
     35e:	8e0c                	0x8e0c
		pola[i] = a[i];
     360:	0000                	unimp
     362:	0400                	addi	s0,sp,512
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
	for(i = 0; i < size_a; ++i){
     36c:	0135                	addi	sp,sp,13
		pola[i] = a[i];
     36e:	0000                	unimp
     370:	c804                	sw	s1,16(s0)
	for(i = 0; i < size_a; ++i){
     372:	0a0a                	slli	s4,s4,0x2
		polb[i] = b[i];
     374:	0001                	nop
     376:	1c00                	addi	s0,sp,560
     378:	000c                	0xc
     37a:	0002                	c.slli64	zero
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
	for(i = 0; i < size_b; ++i){
     380:	05cd                	addi	a1,a1,19
		polb[i] = b[i];
     382:	0000                	unimp
     384:	0c20                	addi	s0,sp,536
	for(i = 0; i < size_b; ++i){
     386:	00000343          	fmadd.s	ft6,ft0,ft0,ft0,rne
				line[size_b-1-j][k] = pola[k]*polb[j];
     38a:	cc04                	sw	s1,24(s0)
     38c:	f71d                	bnez	a4,2ba <polymult2+0x6>
     38e:	0005                	c.nop	1
     390:	2400                	fld	fs0,8(s0)
     392:	030c                	addi	a1,sp,384
     394:	0005                	c.nop	1
     396:	0400                	addi	s0,sp,512
			for (k = size_a-1; k >= 0; k = k-1 ){
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
				line[size_b-1-j][k] = pola[k]*polb[j];
     39c:	0000                	unimp
     39e:	0c28                	addi	a0,sp,536
			for (k = size_a-1; k >= 0; k = k-1 ){
     3a0:	000006a7          	0x6a7
		for (j = size_b -1; j >= 0; j = j-1){
     3a4:	d004                	sw	s1,32(s0)
     3a6:	3509                	jal	1a8 <polymult+0x11c>
     3a8:	0006                	c.slli	zero,0x1
     3aa:	2c00                	fld	fs0,24(s0)
     3ac:	62755f0f          	0x62755f0f
     3b0:	0400                	addi	s0,sp,512
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
		for(i = 0; i < size_b; ++i){
     3b6:	0000                	unimp
	for(j = 0; j < size_a + size_b -1; ++j){
     3b8:	0f30                	addi	a2,sp,920
     3ba:	755f 0070 d404      	0xd4040070755f
}
     3c0:	0012                	c.slli	zero,0x4
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult2+0xcc>
     3c6:	72755f0f          	0x72755f0f
     3ca:	0400                	addi	s0,sp,512
     3cc:	07d5                	addi	a5,a5,21
     3ce:	005d                	c.nop	23
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
     3d4:	010c                	addi	a1,sp,128
     3d6:	0000                	unimp
     3d8:	d804                	sw	s1,48(s0)
			for (k = size_a-1; k >= 0; k = k-1 ){
     3da:	3b11                	jal	ee <polymult+0x62>
     3dc:	0006                	c.slli	zero,0x1
				line[size_b-1-j][k + j] = pola[k]*polb[j];
     3de:	4000                	lw	s0,0(s0)
     3e0:	720c                	flw	fa1,32(a2)
     3e2:	0006                	c.slli	zero,0x1
     3e4:	0400                	addi	s0,sp,512
     3e6:	11d9                	addi	gp,gp,-10
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     3ec:	6c5f0f43          	0x6c5f0f43
     3f0:	0062                	c.slli	zero,0x18
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult2+0x54>
			for (k = size_a-1; k >= 0; k = k-1 ){
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
		for (j = size_b -1; j >= 0; j = j-1){
     3fa:	6a0c                	flw	fa1,16(a2)
     3fc:	0001                	nop
     3fe:	0400                	addi	s0,sp,512
     400:	07df 005d 0000      	0x5d07df
			product2[j] += line[i][j];
     406:	0c4c                	addi	a1,sp,532
		for(i = 0; i < size_b; ++i){
     408:	0191                	addi	gp,gp,4
			product2[j] += line[i][j];
     40a:	0000                	unimp
     40c:	e004                	fsw	fs1,0(s0)
     40e:	840a                	mv	s0,sp
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
		for(i = 0; i < size_b; ++i){
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
	for(j = 0; j < size_a + size_b -1; ++j){
     41a:	046712e3          	bne	a4,t1,c5e <generate_keys+0x1c8>
     41e:	0000                	unimp
		for(i = 0; i < size_b; ++i){
     420:	0c54                	addi	a3,sp,532
     422:	0321                	addi	t1,t1,8
int v[size_N];
     424:	0000                	unimp
     426:	e704                	fsw	fs1,8(a4)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     428:	240c                	fld	fa1,8(s0)
int v[size_N];
     42a:	0001                	nop
     42c:	5800                	lw	s0,48(s0)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     42e:	790c                	flw	fa1,48(a0)
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
     434:	0ee9                	addi	t4,t4,26
     436:	00fe                	slli	ra,ra,0x1f
     438:	0000                	unimp
     43a:	0c5c                	addi	a5,sp,532
     43c:	00000327          	0x327
     440:	ea04                	fsw	fs1,16(a2)
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
     448:	1400                	addi	s0,sp,544
int v[size_N];
     44a:	009c                	addi	a5,sp,64
     44c:	0000                	unimp
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
int q[size_N];
     452:	6715                	lui	a4,0x5
     454:	0004                	0x4
int numm[size_N];
     456:	1500                	addi	s0,sp,672
     458:	010a                	slli	sp,sp,0x2
int denumm[size_D];
     45a:	0000                	unimp
     45c:	bb15                	j	190 <polymult+0x104>
     45e:	0005                	c.nop	1
     460:	1500                	addi	s0,sp,672
int numm[size_N];
     462:	005d                	c.nop	23
int denumm[size_D];
     464:	0000                	unimp
     466:	1000                	addi	s0,sp,32
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
     46c:	1600                	addi	s0,sp,800
int v[size_N];
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
int denumm[size_D];
     472:	0004d717          	auipc	a4,0x4d
     476:	2800                	fld	fs0,16(s0)
	for (i = 0; i < size_N; ++i){
     478:	0404                	addi	s1,sp,512
     47a:	0265                	addi	tp,tp,25
     47c:	bb08                	fsd	fa0,48(a4)
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
	for (i = 0; i < size_N; ++i){
     482:	00000437          	lui	s0,0x0
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
	for (i = 0; i < size_N; ++i){
     48a:	005d                	c.nop	23
     48c:	0000                	unimp
     48e:	1800                	addi	s0,sp,48
	for (i = 0; i < size_D; ++i){
     490:	00000163          	beqz	zero,492 <polydiv+0x6e>
     494:	6c04                	flw	fs1,24(s0)
     496:	0b02                	c.slli64	s6
     498:	000006a7          	0x6a7
	for (i = 0; i < size_D; ++i){
     49c:	1804                	addi	s1,sp,48
     49e:	0226                	slli	tp,tp,0x9
	for (i = 0; i < size_D; ++i){
     4a0:	0000                	unimp
     4a2:	6c04                	flw	fs1,24(s0)
     4a4:	1402                	slli	s0,s0,0x20
	for (i = 0; i < size_N; ++i){
     4a6:	000006a7          	0x6a7
     4aa:	1808                	addi	a0,sp,48
	for (i = 0; i < size_N; ++i){
     4ac:	01e1                	addi	gp,gp,24
     4ae:	0000                	unimp
     4b0:	6c04                	flw	fs1,24(s0)
	for (i = size_D-1; i >= 0; i = i-1){
     4b2:	1e02                	slli	t3,t3,0x20
     4b4:	000006a7          	0x6a7
     4b8:	180c                	addi	a1,sp,48
     4ba:	049a                	slli	s1,s1,0x6
     4bc:	0000                	unimp
	for (i = 0; i < size_N; ++i){
     4be:	6e04                	flw	fs1,24(a2)
     4c0:	0802                	c.slli64	a6
		if ( (b_N*u)%mod == 1 )
     4c2:	005d                	c.nop	23
	for (u = 0; u < mod; ++u){
     4c4:	0000                	unimp
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
		numm[i] = num[i];	
     4ce:	0802                	c.slli64	a6
     4d0:	000008a7          	0x8a7
     4d4:	1814                	addi	a3,sp,48
     4d6:	04b6                	slli	s1,s1,0xd
	for (i = 0; i < size_N; ++i){
     4d8:	0000                	unimp
		numm[i] = num[i];	
     4da:	7204                	flw	fs1,32(a2)
	for (i = 0; i < size_N; ++i){
     4dc:	0702                	c.slli64	a4
			numm[i] = numm[i] + mod;	
     4de:	005d                	c.nop	23
     4e0:	0000                	unimp
		while (numm[i] < 0)
     4e2:	1830                	addi	a2,sp,56
     4e4:	04a4                	addi	s1,sp,584
     4e6:	0000                	unimp
	for (i = 0; i < size_N; ++i){
     4e8:	7304                	flw	fs1,32(a4)
     4ea:	1602                	slli	a2,a2,0x20
     4ec:	08bc                	addi	a5,sp,88
		numm[i] = numm[i] % mod;
     4ee:	0000                	unimp
	for (i = 0; i < size_N; ++i){
     4f0:	1834                	addi	a3,sp,56
     4f2:	03c6                	slli	t2,t2,0x11
		numm[i] = numm[i] % mod;
     4f4:	0000                	unimp
     4f6:	7504                	flw	fs1,40(a0)
     4f8:	0702                	c.slli64	a4
     4fa:	005d                	c.nop	23
	for (i = 0; i < size_N; ++i){
     4fc:	0000                	unimp
		denumm[i] = denum[i];	
     4fe:	1838                	addi	a4,sp,56
     500:	04ac                	addi	a1,sp,584
     502:	0000                	unimp
     504:	7704                	flw	fs1,40(a4)
     506:	0a02                	c.slli64	s4
     508:	08cd                	addi	a7,a7,19
	for (i = 0; i < size_D; ++i){
     50a:	0000                	unimp
		denumm[i] = denum[i];	
     50c:	183c                	addi	a5,sp,56
	for (i = 0; i < size_D; ++i){
     50e:	02e6                	slli	t0,t0,0x19
			denumm[i] = denumm[i] + mod;	
     510:	0000                	unimp
     512:	7a04                	flw	fs1,48(a2)
		while (denumm[i] < 0)
     514:	1302                	slli	t1,t1,0x20
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
	for (i = 0; i < size_D; ++i){
     51a:	1840                	addi	s0,sp,52
     51c:	0206                	slli	tp,tp,0x1
     51e:	0000                	unimp
		denumm[i] = denumm[i] % mod;
     520:	7b04                	flw	fs1,48(a4)
	for (i = 0; i < size_D; ++i){
     522:	0702                	c.slli64	a4
     524:	005d                	c.nop	23
		denumm[i] = denumm[i] % mod;
     526:	0000                	unimp
     528:	1844                	addi	s1,sp,52
     52a:	06c1                	addi	a3,a3,16
     52c:	0000                	unimp
	for (i = 0; i < size_D; ++i){
     52e:	7c04                	flw	fs1,56(s0)
		q[i] = 0;	
     530:	1302                	slli	t1,t1,0x20
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
     536:	1848                	addi	a0,sp,52
     538:	03ed                	addi	t2,t2,27
	for (i = 0; i < size_N; ++i){
     53a:	0000                	unimp
     53c:	7d04                	flw	fs1,56(a0)
		v[i] = 0;	
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
     544:	184c                	addi	a1,sp,52
     546:	022e                	slli	tp,tp,0xb
	for (i = 0; i < size_N; ++i){
     548:	0000                	unimp
     54a:	8004                	0x8004
		if( !(denumm[i] == 0) )
     54c:	0702                	c.slli64	a4
	for (i = size_D-1; i >= 0; i = i-1){
     54e:	005d                	c.nop	23
     550:	0000                	unimp
		if ( (b_N*u)%mod == 1 )
     552:	1850                	addi	a2,sp,52
     554:	0189                	addi	gp,gp,2
     556:	0000                	unimp
     558:	8104                	0x8104
     55a:	0902                	c.slli64	s2
	for (u = 0; u < mod; ++u){
     55c:	000005bb          	0x5bb
		if( !(numm[i] == 0) )
     560:	1854                	addi	a3,sp,52
	for (i = size_N-1; i >= 0; i = i-1){
     562:	0430                	addi	a2,sp,520
     564:	0000                	unimp
     566:	a404                	fsd	fs1,8(s0)
     568:	0702                	c.slli64	a4
     56a:	0882                	c.slli64	a7
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
	while (d >= d2){
     570:	03b4                	addi	a3,sp,456
     572:	0000                	unimp
	for(i = 0; i < size_N; ++i){
     574:	a804                	fsd	fs1,16(s0)
		result[i] = q[i];
     576:	1302                	slli	t1,t1,0x20
     578:	000002bb          	0x2bb
     57c:	0148                	addi	a0,sp,132
	for(i = 0; i < size_N; ++i){
     57e:	c419                	beqz	s0,58c <polydiv+0x168>
     580:	0002                	c.slli64	zero
	for(i = size_N; i < (2*size_N); ++i){
     582:	0400                	addi	s0,sp,512
     584:	02a9                	addi	t0,t0,10
		result[i] = numm[i-size_N];
     586:	7812                	flw	fa6,36(sp)
     588:	0002                	c.slli64	zero
     58a:	4c00                	lw	s0,24(s0)
     58c:	1901                	addi	s2,s2,-32
	for(i = size_N; i < (2*size_N); ++i){
     58e:	0668                	addi	a0,sp,780
     590:	0000                	unimp
}
     592:	ad04                	fsd	fs1,24(a0)
     594:	0c02                	c.slli64	s8
     596:	08e4                	addi	s1,sp,92
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
     59c:	3d19                	jal	3b2 <polymult2+0xfe>
     59e:	0001                	nop
     5a0:	0400                	addi	s0,sp,512
     5a2:	02b2                	slli	t0,t0,0xc
     5a4:	6810                	flw	fa2,16(s0)
     5a6:	0006                	c.slli	zero,0x1
     5a8:	e000                	fsw	fs0,0(s0)
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	0122                	slli	sp,sp,0x8
     5ae:	0000                	unimp
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
		v[(d-d2)] = u*r_d;
     5bc:	c104                	sw	s1,0(a0)
     5be:	0005                	c.nop	1
     5c0:	0200                	addi	s0,sp,256
     5c2:	0801                	addi	a6,a6,0
     5c4:	0426                	slli	s0,s0,0x9
     5c6:	0000                	unimp
     5c8:	c116                	sw	t0,128(sp)
		for (i = 0; i < size_N; ++i){
     5ca:	0005                	c.nop	1
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
     5d0:	0004                	0x4
		product = polymult(denumm,size_D,v,size_D,mod,0);		
     5d2:	1400                	addi	s0,sp,544
     5d4:	009c                	addi	a5,sp,64
     5d6:	0000                	unimp
     5d8:	05f1                	addi	a1,a1,28
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
     5de:	0004                	0x4
		for (i = 0; i < size_N; ++i){
     5e0:	1500                	addi	s0,sp,672
     5e2:	010a                	slli	sp,sp,0x2
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polydiv+0xe6>
     5e8:	0005                	c.nop	1
		for (i = 0; i < size_N; ++i){
     5ea:	1500                	addi	s0,sp,672
     5ec:	005d                	c.nop	23
     5ee:	0000                	unimp
     5f0:	1000                	addi	s0,sp,32
		for (i = 0; i < size_N; ++i){
     5f2:	c804                	sw	s1,16(s0)
     5f4:	0005                	c.nop	1
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
		for (i = 0; i < size_N; ++i){
     5fa:	0005                	c.nop	1
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
     600:	0000                	unimp
		for (i = 0; i < size_N; ++i){
     602:	0000061b          	0x61b
     606:	6715                	lui	a4,0x5
     608:	0004                	0x4
     60a:	1500                	addi	s0,sp,672
		for(i = 0; i < size_N; ++i){
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
     610:	9015                	srli	s0,s0,0x25
		for(i = 0; i < size_N; ++i){
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
     616:	005d                	c.nop	23
		for (i = size_N-1; i >= 0; i = i-1){
     618:	0000                	unimp
     61a:	1000                	addi	s0,sp,32
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
     620:	1400                	addi	s0,sp,544
     622:	005d                	c.nop	23
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
     628:	0000                	unimp
			v[i] = v[i] % mod;	
     62a:	6715                	lui	a4,0x5
		for (i = 0; i < size_N; ++i){
     62c:	0004                	0x4
     62e:	1500                	addi	s0,sp,672
			v[i] = v[i] % mod;	
     630:	010a                	slli	sp,sp,0x2
     632:	0000                	unimp
     634:	1000                	addi	s0,sp,32
     636:	2104                	fld	fs1,0(a0)
		for (i = 0; i < size_N; ++i){
     638:	0006                	c.slli	zero,0x1
				product[i] = product[i] + mod;	
     63a:	0900                	addi	s0,sp,144
     63c:	002c                	addi	a1,sp,8
			while (product[i] < 0)
     63e:	0000                	unimp
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
		for (i = 0; i < size_N; ++i){
     644:	690a                	flw	fs2,128(sp)
     646:	0000                	unimp
     648:	0200                	addi	s0,sp,256
			product[i] = product[i] % mod;
     64a:	0900                	addi	s0,sp,144
		for (i = 0; i < size_N; ++i){
     64c:	002c                	addi	a1,sp,8
     64e:	0000                	unimp
			product[i] = product[i] % mod;
     650:	0000065b          	0x65b
     654:	690a                	flw	fs2,128(sp)
     656:	0000                	unimp
		for (i = 0; i < size_N; ++i){
     658:	0000                	unimp
			numm[i] = numm[i] - product[i];
     65a:	0500                	addi	s0,sp,640
     65c:	045f 0000 2404      	0x24040000045f
     662:	1a01                	addi	s4,s4,-32
		for (i = 0; i < size_N; ++i){
     664:	0306                	slli	t1,t1,0x1
     666:	0000                	unimp
			numm[i] = numm[i] - product[i];
     668:	3c1a                	fld	fs8,416(sp)
     66a:	0006                	c.slli	zero,0x1
     66c:	0c00                	addi	s0,sp,528
		for (i = 0; i < size_N; ++i){
     66e:	2804                	fld	fs1,16(s0)
				numm[i] = numm[i] + mod;	
     670:	0801                	addi	a6,a6,0
     672:	06a1                	addi	a3,a3,8
			while (numm[i] < 0)
     674:	0000                	unimp
     676:	8718                	0x8718
     678:	0004                	0x4
		for (i = 0; i < size_N; ++i){
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <ext_euclid+0x390>
			numm[i] = numm[i] % mod;
     680:	0006                	c.slli	zero,0x1
		for (i = 0; i < size_N; ++i){
     682:	0000                	unimp
     684:	8a18                	0x8a18
			numm[i] = numm[i] % mod;
     686:	0002                	c.slli64	zero
     688:	0400                	addi	s0,sp,512
     68a:	5d07012b          	0x5d07012b
		for (i = 0; i < size_N; ++i){
     68e:	0000                	unimp
			q[i] = q[i] + v[i];		
     690:	0400                	addi	s0,sp,512
     692:	5918                	lw	a4,48(a0)
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
     698:	012c                	addi	a1,sp,136
		for(i = 0; i < size_N; ++i){
     69a:	0006a70b          	0x6a70b
			q[i] = q[i] + v[i];		
     69e:	0800                	addi	s0,sp,16
     6a0:	1000                	addi	s0,sp,32
     6a2:	6804                	flw	fs1,16(s0)
		for(i = 0; i < size_N; ++i){
     6a4:	0006                	c.slli	zero,0x1
			q[i] = q[i] % mod;
     6a6:	1000                	addi	s0,sp,32
		for(i = 0; i < size_N; ++i){
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
			q[i] = q[i] % mod;
     6ac:	1a00                	addi	s0,sp,304
     6ae:	00000017          	auipc	zero,0x0
     6b2:	040e                	slli	s0,s0,0x3
		for(i = 0; i < size_N; ++i){
     6b4:	0144                	addi	s1,sp,132
			if( !(numm[i] == 0) )
     6b6:	e608                	fsw	fa0,8(a2)
		for (i = size_N-1; i >= 0; i = i-1){
     6b8:	0006                	c.slli	zero,0x1
     6ba:	1800                	addi	s0,sp,48
			v[i] = 0;	
     6bc:	04e8                	addi	a0,sp,588
     6be:	0000                	unimp
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
     6c4:	06e6                	slli	a3,a3,0x19
		for (i = 0; i < size_N; ++i){
     6c6:	0000                	unimp
     6c8:	1800                	addi	s0,sp,48
     6ca:	04e2                	slli	s1,s1,0x18
     6cc:	0000                	unimp
		result[i] = q[i];
     6ce:	4604                	lw	s1,8(a2)
     6d0:	1201                	addi	tp,tp,-32
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
     6d6:	1806                	slli	a6,a6,0x21
     6d8:	0549                	addi	a0,a0,18
	for(i = 0; i < size_N; ++i){
     6da:	0000                	unimp
		result[i] = q[i];
     6dc:	4704                	lw	s1,8(a4)
	for(i = 0; i < size_N; ++i){
     6de:	1201                	addi	tp,tp,-32
		result[i] = numm[i-size_N];
     6e0:	003a                	c.slli	zero,0xe
     6e2:	0000                	unimp
     6e4:	000c                	0xc
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
     6e8:	0000                	unimp
     6ea:	f600                	fsw	fs0,40(a2)
	for(i = size_N; i < (2*size_N); ++i){
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
  int ri_2[size]; // MX-ring poly, a
     6f2:	0000                	unimp
     6f4:	0002                	c.slli64	zero
int* ext_euclid(int* polyR, int* polyf, int size, int mod){
     6f6:	8504d01b          	0x8504d01b
  int ri_2[size]; // MX-ring poly, a
     6fa:	0702                	c.slli64	a4
int* ext_euclid(int* polyR, int* polyf, int size, int mod){
     6fc:	0000080b          	0x80b
     700:	1b18                	addi	a4,sp,432
     702:	0006                	c.slli	zero,0x1
     704:	0400                	addi	s0,sp,512
     706:	69180287          	0x69180287
     70a:	0000                	unimp
     70c:	0000                	unimp
     70e:	2518                	fld	fa4,8(a0)
     710:	0005                	c.nop	1
     712:	0400                	addi	s0,sp,512
     714:	0288                	addi	a0,sp,320
     716:	bb12                	fsd	ft4,432(sp)
  int ri_2[size]; // MX-ring poly, a
     718:	0005                	c.nop	1
     71a:	0400                	addi	s0,sp,512
     71c:	d918                	sw	a4,48(a0)
  int ri_1[size]; // f-random poly, f[N] = 0, b
     71e:	0002                	c.slli64	zero
     720:	0400                	addi	s0,sp,512
     722:	0289                	addi	t0,t0,2
  int ri[size];
     724:	0b10                	addi	a2,sp,400
     726:	0008                	0x8
     728:	0800                	addi	s0,sp,16
  int ti_1[size]; // ti_1[0] = 1 
     72a:	9818                	0x9818
     72c:	0006                	c.slli	zero,0x1
     72e:	0400                	addi	s0,sp,512
  int ti[size];
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
  int qi_1[size];
     736:	2400                	fld	fs0,8(s0)
     738:	f118                	fsw	fa4,32(a0)
     73a:	0001                	nop
  int temp[size];
     73c:	0400                	addi	s0,sp,512
     73e:	5d0f028b          	0x5d0f028b
int* ext_euclid(int* polyR, int* polyf, int size, int mod){
     742:	0000                	unimp
  int ri_2[size]; // MX-ring poly, a
     744:	4800                	lw	s0,16(s0)
     746:	8218                	0x8218
  int temp[size];
     748:	0004                	0x4
	for (i = 0; i < size; ++i){
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
	for (i = 0; i < size; ++i){
     750:	0000                	unimp
     752:	5000                	lw	s0,32(s0)
     754:	ae18                	fsd	fa4,24(a2)
	for (i = 0; i < size; ++i){
     756:	0006                	c.slli	zero,0x1
		ti_2[i] = 0;
     758:	0400                	addi	s0,sp,512
     75a:	028d                	addi	t0,t0,3
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
	for (i = 0; i < size; ++i){
     760:	5800                	lw	s0,48(s0)
     762:	8d18                	0x8d18
	for (i = 1; i < size; ++i){
     764:	0004                	0x4
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
	ti_1[0] = 1;
     76a:	fe16                	fsw	ft5,60(sp)
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
	for(i = N+1; i < (2*N+2); ++i){
     770:	b318                	fsd	fa4,32(a4)
     772:	0006                	c.slli	zero,0x1
     774:	0400                	addi	s0,sp,512
     776:	fe16028f          	0xfe16028f
	for(i = 0; i < N+1; ++i){
     77a:	0000                	unimp
		ri_2[i] = polyR[i];
     77c:	7000                	flw	fs0,32(s0)
     77e:	d718                	sw	a4,40(a4)
     780:	0000                	unimp
     782:	0400                	addi	s0,sp,512
     784:	0290                	addi	a2,sp,320
     786:	fe16                	fsw	ft5,60(sp)
	for (i = 0; i < size; ++i){
     788:	0000                	unimp
		ri_2[i] = polyR[i];
     78a:	7800                	flw	fs0,48(s0)
	for (i = 0; i < size; ++i){
     78c:	5818                	lw	a4,48(s0)
		ri_1[i] = polyf[i];
     78e:	0006                	c.slli	zero,0x1
     790:	0400                	addi	s0,sp,512
     792:	0291                	addi	t0,t0,4
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
     798:	8000                	0x8000
	for (i = 0; i < size; ++i){
     79a:	cd18                	sw	a4,24(a0)
		ri_1[i] = polyf[i];
     79c:	0002                	c.slli64	zero
	for (i = 0; i < size; ++i){
     79e:	0400                	addi	s0,sp,512
		ti_2[i] = 0;
     7a0:	0292                	slli	t0,t0,0x4
     7a2:	2b10                	fld	fa2,16(a4)
     7a4:	0008                	0x8
     7a6:	8800                	0x8800
     7a8:	5b18                	lw	a4,48(a4)
	for (i = 0; i < size; ++i){
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
		ti_1[i] = 0;
     7ae:	5d0f0293          	addi	t0,t5,1488
     7b2:	0000                	unimp
     7b4:	a000                	fsd	fs0,0(s0)
     7b6:	aa18                	fsd	fa4,16(a2)
	for (i = 1; i < size; ++i){
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
			ri_2[i] = ri_2[i] +mod;		
     7bc:	0294                	addi	a3,sp,320
     7be:	fe16                	fsw	ft5,60(sp)
		while(ri_2[i] < 0){
     7c0:	0000                	unimp
     7c2:	a400                	fsd	fs0,8(s0)
     7c4:	c818                	sw	a4,16(s0)
	for(i = 0; i < N+1; ++i){
     7c6:	0000                	unimp
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
     7d0:	ac00                	fsd	fs0,24(s0)
     7d2:	9918                	0x9918
     7d4:	0001                	nop
	for(i = 0; i < N+1; ++i){
     7d6:	0400                	addi	s0,sp,512
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
     7dc:	0000                	unimp
     7de:	b400                	fsd	fs0,40(s0)
	for(i = 0; i < N+1; ++i){
     7e0:	3a18                	fld	fa4,48(a2)
     7e2:	0000                	unimp
     7e4:	0400                	addi	s0,sp,512
	for(i = 0; i < N+1; ++i){
     7e6:	fe160297          	auipc	t0,0xfe160
     7ea:	0000                	unimp
	res = polydiv(ri_2, N+1, ri_1, N+1, mod);
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	4918                	lw	a4,16(a0)
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
	for(i = N+1; i < (2*N+2); ++i){
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
     7fc:	3518                	fld	fa4,40(a0)
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
     802:	0299                	addi	t0,t0,6
     804:	5d08                	lw	a0,56(a0)
	for(i = 0; i < N+1; ++i){
     806:	0000                	unimp
     808:	cc00                	sw	s0,24(s0)
     80a:	0900                	addi	s0,sp,144
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     810:	0000081b          	0x81b
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     818:	1900                	addi	s0,sp,176
     81a:	0900                	addi	s0,sp,144
     81c:	05c1                	addi	a1,a1,16
	res1 = polydiv(temp, N+1, ri_1, N+1, mod);
     81e:	0000                	unimp
     820:	0000082b          	0x82b
     824:	690a                	flw	fs2,128(sp)
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
	for(i = 0; i < N+1; ++i){
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
     830:	0000083b          	0x83b
	for(i = 0; i < N+1; ++i){
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
     838:	1700                	addi	s0,sp,928
	for(i = 0; i < N+1; ++i){
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
	res2 = polymult(qi_1,N+1,ti_1,N+1,mod,0);
     840:	00086207          	0x86207
     844:	1800                	addi	s0,sp,48
     846:	038c                	addi	a1,sp,448
     848:	0000                	unimp
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
	for(i = 0; i < N+1; ++i){
     84e:	0862                	slli	a6,a6,0x18
     850:	0000                	unimp
     852:	1800                	addi	s0,sp,48
     854:	0364                	addi	s1,sp,396
	for(i = 0; i < N+1; ++i){
     856:	0000                	unimp
     858:	a204                	fsd	fs1,0(a2)
     85a:	1802                	slli	a6,a6,0x20
	for(i = 0; i < N+1; ++i){
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
	for(i = 0; i < N+1; ++i){
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x2e>
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
     86c:	0069                	c.nop	26
	for(i = 0; i < N+1; ++i){
     86e:	0000                	unimp
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
	for(i = 0; i < N+1; ++i){
     874:	0000                	unimp
     876:	8200                	0x8200
     878:	0008                	0x8
	for(i = 0; i < N+1; ++i){
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
     884:	8304                	0x8304
	for(i = 0; i < N+1; ++i){
     886:	0302                	c.slli64	t1
     888:	000008a7          	0x8a7
	for(i = 0; i < N+1; ++i){
     88c:	d71d                	beqz	a4,7ba <ext_euclid+0xc8>
     88e:	0004                	0x4
     890:	0400                	addi	s0,sp,512
	for(i = 0; i < N+1; ++i){
     892:	029a                	slli	t0,t0,0x6
     894:	0006f60b          	0x6f60b
	controlR = 0;
     898:	1d00                	addi	s0,sp,688
	for(i = 0; i < N+1; ++i){
     89a:	0678                	addi	a4,sp,780
     89c:	0000                	unimp
     89e:	a304                	fsd	fs1,0(a4)
while(!(controlR == 0)){
     8a0:	0b02                	c.slli64	s6
     8a2:	0000083b          	0x83b
		if(((ri_2[0]*j) % mod) ==1)
     8a6:	0900                	addi	s0,sp,144
	for (j = 0; j < mod; ++j){
     8a8:	05c1                	addi	a1,a1,16
     8aa:	0000                	unimp
     8ac:	000008b7          	lui	a7,0x0
     8b0:	690a                	flw	fs2,128(sp)
     8b2:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     8b4:	1800                	addi	s0,sp,48
     8b6:	1e00                	addi	s0,sp,816
}
     8b8:	000000a3          	sb	zero,1(zero) # 1 <__DYNAMIC+0x1>
     8bc:	0410                	addi	a2,sp,512
     8be:	000008b7          	lui	a7,0x0
     8c2:	cd1f 0008 1500      	0x15000008cd1f
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     8cc:	1000                	addi	s0,sp,32
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
     8d2:	1000                	addi	s0,sp,32
     8d4:	8a04                	0x8a04
     8d6:	0001                	nop
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
     8dc:	0000                	unimp
     8de:	5d15                	li	s10,-27
     8e0:	0000                	unimp
		ri_2[i] = ri_2[i] % mod;
     8e2:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     8e4:	0410                	addi	a2,sp,512
     8e6:	08ea                	slli	a7,a7,0x1a
		ri_2[i] = ri_2[i] % mod;
     8e8:	0000                	unimp
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
     8ee:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     8f0:	5b09                	li	s6,-30
			ri_1[i] = ri_1[i] +mod;		
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0000                	unimp
		while(ri_1[i] < 0){
     8f6:	0009                	c.nop	2
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
	for(i = 0; i < N+1; ++i){
     8fc:	0000                	unimp
     8fe:	0002                	c.slli64	zero
     900:	ad20                	fsd	fs0,88(a0)
		ri_1[i] = ri_1[i] % mod;
     902:	0005                	c.nop	1
	for(i = 0; i < N+1; ++i){
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
		ri_1[i] = ri_1[i] % mod;
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
     90e:	05a6                	slli	a1,a1,0x9
	for(i = 0; i < N+1; ++i){
     910:	0000                	unimp
		ri[i-(N+1)] = res[i];
     912:	3404                	fld	fs1,40(s0)
     914:	046d1d03          	lh	s10,70(s10)
     918:	0000                	unimp
	for(i = N+1; i < (2*N+2); ++i){
     91a:	bc21                	j	332 <polymult2+0x7e>
     91c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
		ri[i-(N+1)] = res[i];
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
		temp[i] = ri_2[i] - ri[i];
     924:	0000                	unimp
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
     930:	0069                	c.nop	26
     932:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     934:	0095                	addi	ra,ra,5
		temp[i] = ri_2[i] - ri[i];
     936:	7322                	flw	ft6,40(sp)
     938:	0001                	nop
	for(i = 0; i < N+1; ++i){
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
			temp[i] = temp[i] + mod;		
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
		while(temp[i] < 0){
     942:	0305                	addi	t1,t1,1
     944:	136c                	addi	a1,sp,428
     946:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     948:	2f22                	fld	ft10,8(sp)
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
		temp[i] = temp[i] % mod;
     94e:	09260c07          	0x9260c07
	for(i = 0; i < N+1; ++i){
     952:	0000                	unimp
		temp[i] = temp[i] % mod;
     954:	0305                	addi	t1,t1,1
     956:	15c4                	addi	s1,sp,740
     958:	0000                	unimp
     95a:	e722                	fsw	fs0,140(sp)
	for(i = 0; i < N+1; ++i){
     95c:	0002                	c.slli64	zero
		qi_1[i] = res1[i];
     95e:	0100                	addi	s0,sp,128
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
     964:	0000                	unimp
     966:	0305                	addi	t1,t1,1
     968:	181c                	addi	a5,sp,48
	for(i = 0; i < N+1; ++i){
     96a:	0000                	unimp
		qi_1[i] = res1[i];
     96c:	5d09                	li	s10,-30
	for(i = 0; i < N+1; ++i){
     96e:	0000                	unimp
			qi_1[i] = qi_1[i] + mod;		
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
		while ( qi_1[i] < 0){
     974:	0a00                	addi	s0,sp,272
     976:	0069                	c.nop	26
     978:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     97a:	18220063          	beq	tp,sp,afa <generate_keys+0x64>
     97e:	0004                	0x4
		qi_1[i] = qi_1[i] % mod;
     980:	0100                	addi	s0,sp,128
	for(i = 0; i < N+1; ++i){
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
		qi_1[i] = qi_1[i] % mod;
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
     98a:	1a74                	addi	a3,sp,316
     98c:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     98e:	5d09                	li	s10,-30
		temp[i] = res2[i];
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     99c:	013d                	addi	sp,sp,15
		temp[i] = res2[i];
     99e:	2200                	fld	fs0,0(a2)
	for(i = 0; i < N+1; ++i){
     9a0:	00000097          	auipc	ra,0x0
			temp[i] = temp[i] + mod;		
     9a4:	0a01                	addi	s4,s4,0
		while ( temp[i] < 0){
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
	for(i = 0; i < N+1; ++i){
     9ac:	001c0403          	lb	s0,1(s8)
     9b0:	2400                	fld	fs0,8(s0)
		temp[i] = temp[i] % mod;
     9b2:	021c                	addi	a5,sp,256
     9b4:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     9b6:	0b01                	addi	s6,s6,0
     9b8:	640e                	flw	fs0,192(sp)
		temp[i] = temp[i] % mod;
     9ba:	0000                	unimp
     9bc:	0500                	addi	s0,sp,640
     9be:	00136803          	0x136803
	for(i = 0; i < N+1; ++i){
     9c2:	2500                	fld	fs0,8(a0)
		ti[i] = ti_2[i] - temp[i];
     9c4:	06c6                	slli	a3,a3,0x11
     9c6:	0000                	unimp
     9c8:	1f01                	addi	t5,t5,-32
     9ca:	005d0503          	lb	a0,5(s10)
     9ce:	0000                	unimp
     9d0:	10e6                	slli	ra,ra,0x39
     9d2:	0000                	unimp
     9d4:	00f2                	slli	ra,ra,0x1c
     9d6:	0000                	unimp
     9d8:	9c01                	0x9c01
	for(i = 0; i < N+1; ++i){
     9da:	0b4e                	slli	s6,s6,0x13
		ti[i] = ti_2[i] - temp[i];
     9dc:	0000                	unimp
     9de:	d826                	sw	s1,48(sp)
	for(i = 0; i < N+1; ++i){
     9e0:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
			ti[i] = ti[i] + mod;		
     9e4:	0321                	addi	t1,t1,8
     9e6:	4e06                	lw	t3,64(sp)
		while ( ti[i] < 0){
     9e8:	0000000b          	0xb
     9ec:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     9ee:	2600                	fld	fs0,8(a2)
     9f0:	0082                	c.slli64	ra
     9f2:	0000                	unimp
		ti[i] = ti[i] % mod;
     9f4:	2201                	jal	af4 <generate_keys+0x5e>
	for(i = 0; i < N+1; ++i){
     9f6:	0b4e0603          	lb	a2,180(t3) # 1a0b4 <_stack_start+0xa0b4>
		ti[i] = ti[i] % mod;
     9fa:	0000                	unimp
     9fc:	001e                	c.slli	zero,0x7
     9fe:	0000                	unimp
     a00:	0426                	slli	s0,s0,0x9
	for(i = 0; i < N+1; ++i){
     a02:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
		ri_2[i] = ri_1[i];	
     a06:	4e060323          	sb	zero,1254(a2)
     a0a:	3c00000b          	0x3c00000b
     a0e:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     a10:	2700                	fld	fs0,8(a4)
		ri_2[i] = ri_1[i];	
     a12:	004e                	c.slli	zero,0x13
	for(i = 0; i < N+1; ++i){
     a14:	2401                	jal	c14 <generate_keys+0x17e>
		ri_1[i] = ri[i];	
     a16:	005d0503          	lb	a0,5(s10)
     a1a:	0000                	unimp
     a1c:	2735                	jal	1148 <main+0x62>
     a1e:	0070                	addi	a2,sp,12
     a20:	2501                	jal	1020 <memcpy+0xc0>
	for(i = 0; i < N+1; ++i){
     a22:	005d0503          	lb	a0,5(s10)
     a26:	0000                	unimp
		ti_2[i] = ti_1[i];	
     a28:	00712703          	lw	a4,7(sp)
     a2c:	2601                	jal	d2c <generate_keys+0x296>
     a2e:	005d0503          	lb	a0,5(s10)
     a32:	0000                	unimp
     a34:	2865                	jal	aec <generate_keys+0x56>
     a36:	00000393          	li	t2,0
	for(i = 0; i < N+1; ++i){
     a3a:	2901                	jal	e4a <ntru_deceypt+0x28>
		ti_2[i] = ti_1[i];	
     a3c:	0b540503          	lb	a0,181(s0) # b5 <polymult+0x29>
		ti_1[i] = ti[i];	
     a40:	0000                	unimp
     a42:	77dc9103          	lh	sp,1917(s9)
     a46:	1a26                	slli	s4,s4,0x29
     a48:	0005                	c.nop	1
     a4a:	0100                	addi	s0,sp,128
	for(i = 0; i < N+1; ++i){
     a4c:	032a                	slli	t1,t1,0xa
		ti_1[i] = ti[i];	
     a4e:	6405                	lui	s0,0x1
	for(i = 0; i < N+1; ++i){
     a50:	5d00000b          	0x5d00000b
		qi_1[i] = 0;
     a54:	0000                	unimp
     a56:	2600                	fld	fs0,8(a2)
     a58:	00ae                	slli	ra,ra,0xb
     a5a:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     a5c:	2b01                	jal	f6c <memcpy+0xc>
     a5e:	0b760503          	lb	a0,183(a2)
		controlR += ri[i];
     a62:	0000                	unimp
     a64:	00b1                	addi	ra,ra,12
     a66:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     a68:	bb29                	j	782 <ext_euclid+0x90>
		controlR += ri[i];
     a6a:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     a6c:	0100                	addi	s0,sp,128
		if(((ri_2[0]*j) % mod) ==1)
     a6e:	032c                	addi	a1,sp,392
     a70:	8805                	andi	s0,s0,1
     a72:	2600000b          	0x2600000b
     a76:	0000053b          	0x53b
     a7a:	2d01                	jal	108a <memset+0x4c>
     a7c:	0b9a0503          	lb	a0,185(s4)
	for (j = 0; j < mod; ++j){
     a80:	0000                	unimp
		ti_2[i] = (ti_2[i]*j) % mod;
     a82:	0112                	slli	sp,sp,0x4
	for(i = 0; i < N+1; ++i){
     a84:	0000                	unimp
     a86:	3629                	jal	590 <polydiv+0x16c>
		ti_2[i] = (ti_2[i]*j) % mod;
     a88:	0002                	c.slli64	zero
     a8a:	0100                	addi	s0,sp,128
     a8c:	032e                	slli	t1,t1,0xb
     a8e:	ac05                	j	cbe <generate_keys+0x228>
     a90:	2600000b          	0x2600000b
	for(i = 0; i < N+1; ++i){
     a94:	000003f7          	0x3f7
int* generate_keys(int N, int p, int q){
     a98:	2f01                	jal	11a8 <main+0xc2>
     a9a:	0bbe0503          	lb	a0,187(t3)
     a9e:	0000                	unimp
     aa0:	0165                	addi	sp,sp,25
     aa2:	0000                	unimp
     aa4:	692a                	flw	fs2,136(sp)
     aa6:	0100                	addi	s0,sp,128
     aa8:	0330                	addi	a2,sp,392
     aaa:	5d05                	li	s10,-31
     aac:	0000                	unimp
     aae:	b900                	fsd	fs0,48(a0)
     ab0:	0001                	nop
     ab2:	2b00                	fld	fs0,16(a4)
     ab4:	1102                	slli	sp,sp,0x20
     ab6:	0000                	unimp
     ab8:	1729                	addi	a4,a4,-22
     aba:	0000                	unimp
     abc:	00000ad7          	0xad7
     ac0:	012c                	addi	a1,sp,136
     ac2:	035a                	slli	t1,t1,0x16
     ac4:	dc91                	beqz	s1,9e0 <ext_euclid+0x2ee>
     ac6:	5b012c77          	0x5b012c77
     aca:	0305                	addi	t1,t1,1
     acc:	12a8                	addi	a0,sp,360
     ace:	0000                	unimp
int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     ad0:	012c                	addi	a1,sp,136
     ad2:	025c                	addi	a5,sp,260
     ad4:	c008                	sw	a0,0(s0)
     ad6:	2b00                	fld	fs0,16(a4)
     ad8:	110e                	slli	sp,sp,0x23
     ada:	0000                	unimp
     adc:	0e98                	addi	a4,sp,848
     ade:	0000                	unimp
int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     ae0:	0af6                	slli	s5,s5,0x1d
     ae2:	0000                	unimp
     ae4:	012c                	addi	a1,sp,136
     ae6:	025a                	slli	tp,tp,0x16
     ae8:	3508                	fld	fa0,40(a0)
int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     aea:	012c                	addi	a1,sp,136
     aec:	2c33015b          	0x2c33015b
     af0:	5c01                	li	s8,-32
     af2:	0802                	c.slli64	a6
     af4:	0065                	c.nop	25
     af6:	00117e2b          	0x117e2b
     afa:	5100                	lw	s0,32(a0)
     afc:	000d                	c.nop	3
     afe:	1e00                	addi	s0,sp,816
     b00:	2c00000b          	0x2c00000b
     b04:	5a01                	li	s4,-32
     b06:	0802                	c.slli64	a6
     b08:	2c35                	jal	d44 <generate_keys+0x2ae>
     b0a:	5b01                	li	s6,-32
     b0c:	0802                	c.slli64	a6
     b0e:	2c65                	jal	dc6 <ntru_encyrpt+0x3a>
     b10:	5c01                	li	s8,-32
     b12:	77dc9103          	lh	sp,1917(s9)
     b16:	012c                	addi	a1,sp,136
     b18:	035e                	slli	t1,t1,0x17
     b1a:	9891                	andi	s1,s1,-28
     b1c:	007e                	c.slli	zero,0x1f
     b1e:	942d                	srai	s0,s0,0x2b
     b20:	0011                	c.nop	4
     b22:	d000                	sw	s0,32(s0)
     b24:	2c00000b          	0x2c00000b
     b28:	5a01                	li	s4,-32
     b2a:	0802                	c.slli64	a6
     b2c:	2c35                	jal	d68 <generate_keys+0x2d2>
     b2e:	5b01                	li	s6,-32
     b30:	3301                	jal	830 <ext_euclid+0x13e>
     b32:	012c                	addi	a1,sp,136
     b34:	025c                	addi	a5,sp,260
     b36:	6508                	flw	fa0,8(a0)
     b38:	012c                	addi	a1,sp,136
     b3a:	035d                	addi	t1,t1,23
     b3c:	f091                	bnez	s1,a40 <ext_euclid+0x34e>
     b3e:	2c7a                	fld	fs8,408(sp)
     b40:	5e01                	li	t3,-32
     b42:	7802                	flw	fa6,32(sp)
     b44:	2c00                	fld	fs0,24(s0)
     b46:	6001                	0x6001
     b48:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0xf7>
     b4c:	0000                	unimp
     b4e:	0410                	addi	a2,sp,512
     b50:	005d                	c.nop	23
     b52:	0000                	unimp
     b54:	5d09                	li	s10,-30
int polyR[N+1];
     b56:	0000                	unimp
     b58:	6400                	flw	fs0,8(s0)
int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     b5a:	0a00000b          	0xa00000b
int polyR[N+1];
     b5e:	0069                	c.nop	26
     b60:	0000                	unimp
     b62:	5d09002f          	0x5d09002f
     b66:	0000                	unimp
     b68:	7600                	flw	fs0,40(a2)
	polyR[N] = 1;
     b6a:	2e00000b          	0x2e00000b
     b6e:	0069                	c.nop	26
     b70:	0000                	unimp
     b72:	0802                	c.slli64	a6
int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     b74:	0034                	addi	a3,sp,8
     b76:	5d09                	li	s10,-30
     b78:	0000                	unimp
     b7a:	8800                	0x8800
     b7c:	2e00000b          	0x2e00000b
     b80:	0069                	c.nop	26
     b82:	0000                	unimp
     b84:	0802                	c.slli64	a6
     b86:	0034                	addi	a3,sp,8
     b88:	5d09                	li	s10,-30
     b8a:	0000                	unimp
     b8c:	9a00                	0x9a00
     b8e:	2e00000b          	0x2e00000b
     b92:	0069                	c.nop	26
     b94:	0000                	unimp
     b96:	0802                	c.slli64	a6
     b98:	0034                	addi	a3,sp,8
     b9a:	5d09                	li	s10,-30
     b9c:	0000                	unimp
     b9e:	ac00                	fsd	fs0,24(s0)
     ba0:	2e00000b          	0x2e00000b
     ba4:	0069                	c.nop	26
     ba6:	0000                	unimp
     ba8:	0802                	c.slli64	a6
     baa:	0034                	addi	a3,sp,8
     bac:	5d09                	li	s10,-30
     bae:	0000                	unimp
     bb0:	be00                	fsd	fs0,56(a2)
     bb2:	2e00000b          	0x2e00000b
     bb6:	0069                	c.nop	26
     bb8:	0000                	unimp
     bba:	0802                	c.slli64	a6
     bbc:	0034                	addi	a3,sp,8
     bbe:	5d09                	li	s10,-30
     bc0:	0000                	unimp
     bc2:	d000                	sw	s0,32(s0)
     bc4:	2e00000b          	0x2e00000b
     bc8:	0069                	c.nop	26
     bca:	0000                	unimp
     bcc:	0802                	c.slli64	a6
     bce:	0035                	c.nop	13
     bd0:	0001c02f          	0x1c02f
     bd4:	0100                	addi	s0,sp,128
     bd6:	02e1                	addi	t0,t0,24
	polyR[0] = -1;
     bd8:	4e06                	lw	t3,64(sp)
     bda:	2200000b          	0x2200000b
	for(i = 1; i < N; ++i){
     bde:	000e                	c.slli	zero,0x3
     be0:	c800                	sw	s0,16(s0)
     be2:	0000                	unimp
for (i = N; i < 55; ++i ){
     be4:	0100                	addi	s0,sp,128
     be6:	519c                	lw	a5,32(a1)
     be8:	000d                	c.nop	3
     bea:	3000                	fld	fs0,32(s0)
	for(i = 0; i < N; ++i){
     bec:	004e                	c.slli	zero,0x13
		random_keys[i] = f[i];		
     bee:	e101                	bnez	a0,bee <generate_keys+0x158>
     bf0:	1702                	slli	a4,a4,0x20
     bf2:	005d                	c.nop	23
     bf4:	0000                	unimp
	for(i = 0; i < N; ++i){
     bf6:	01d9                	addi	gp,gp,22
     bf8:	0000                	unimp
     bfa:	7030                	flw	fa2,96(s0)
     bfc:	0100                	addi	s0,sp,128
	for(i = N; i < (2*N); ++i){
     bfe:	02e1                	addi	t0,t0,24
     c00:	5d1e                	lw	s10,228(sp)
     c02:	0000                	unimp
     c04:	1d00                	addi	s0,sp,688
		random_keys[i] = g[i-N];		
     c06:	0002                	c.slli64	zero
     c08:	3000                	fld	fs0,32(s0)
     c0a:	0071                	c.nop	28
     c0c:	e101                	bnez	a0,c0c <generate_keys+0x176>
	for(i = N; i < (2*N); ++i){
     c0e:	2502                	fld	fa0,0(sp)
     c10:	005d                	c.nop	23
	for(i = (2*N); i < (3*N); ++i){
     c12:	0000                	unimp
     c14:	0254                	addi	a3,sp,260
     c16:	0000                	unimp
	fp = ext_euclid(polyR, f, (N+1), p);
     c18:	ae31                	j	f34 <reset_handler+0x46>
     c1a:	0000                	unimp
     c1c:	0100                	addi	s0,sp,128
     c1e:	02e1                	addi	t0,t0,24
     c20:	4e2d                	li	t3,11
     c22:	8b00000b          	0x8b00000b
		random_keys[i] = fp[i-(2*N)];
     c26:	0002                	c.slli64	zero
     c28:	3100                	fld	fs0,32(a0)
     c2a:	0000053b          	0x53b
	for(i = (2*N); i < (3*N); ++i){
     c2e:	e101                	bnez	a0,c2e <generate_keys+0x198>
     c30:	4002                	0x4002
	fq = ext_euclid(polyR, f, (N+1), q);
     c32:	0b4e                	slli	s6,s6,0x13
     c34:	0000                	unimp
     c36:	000002b7          	lui	t0,0x0
     c3a:	d831                	beqz	s0,b8e <generate_keys+0xf8>
     c3c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
	for(i = (3*N); i < (4*N); ++i){
     c40:	02e1                	addi	t0,t0,24
     c42:	4e54                	lw	a3,28(a2)
     c44:	ee00000b          	0xee00000b
		random_keys[i] = fq[i-(3*N)];
     c48:	0002                	c.slli64	zero
     c4a:	3100                	fld	fs0,32(a0)
     c4c:	0680                	addi	s0,sp,832
	for(i = (3*N); i < (4*N); ++i){
     c4e:	0000                	unimp
     c50:	e101                	bnez	a0,c50 <generate_keys+0x1ba>
	fg = polymult2(fq, N, g, N, 0); 
     c52:	6602                	flw	fa2,0(sp)
     c54:	0b4e                	slli	s6,s6,0x13
     c56:	0000                	unimp
     c58:	0000030f          	0x30f
     c5c:	a129                	j	1066 <memset+0x28>
	for(i = 0; i < (2*N-1); ++i){
     c5e:	0002                	c.slli64	zero
     c60:	0100                	addi	s0,sp,128
     c62:	4e0602e3          	beqz	a2,1946 <result+0x12a>
     c66:	2a00000b          	0x2a00000b
	pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     c6a:	0061                	c.nop	24
     c6c:	e401                	bnez	s0,c74 <generate_keys+0x1de>
     c6e:	0602                	c.slli64	a2
     c70:	0b4e                	slli	s6,s6,0x13
     c72:	0000                	unimp
	for(i = (4*N); i < (5*N); ++i){
     c74:	0346                	slli	t1,t1,0x11
     c76:	0000                	unimp
     c78:	612a                	flw	ft2,136(sp)
     c7a:	0032                	c.slli	zero,0xc
     c7c:	e501                	bnez	a0,c84 <generate_keys+0x1ee>
		random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c7e:	0602                	c.slli64	a2
     c80:	0b4e                	slli	s6,s6,0x13
     c82:	0000                	unimp
     c84:	0359                	addi	t1,t1,22
	for(i = (4*N); i < (5*N); ++i){
     c86:	0000                	unimp
     c88:	632a                	flw	ft6,136(sp)
     c8a:	0100                	addi	s0,sp,128
	for(i = (5*N); i < (6*N+1); ++i){
     c8c:	02e6                	slli	t0,t0,0x19
     c8e:	4e06                	lw	t3,64(sp)
		random_keys[i] = polyR[i-(5*N)];
     c90:	8200000b          	0x8200000b
     c94:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x214>
	for(i = (5*N); i < (6*N+1); ++i){
     c98:	01003263          	0x1003263
     c9c:	4e0602e7          	jalr	t0,1248(a2)
     ca0:	9500000b          	0x9500000b
}
     ca4:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x214>
     ca8:	0069                	c.nop	26
     caa:	e801                	bnez	s0,cba <generate_keys+0x224>
     cac:	0502                	c.slli64	a0
     cae:	005d                	c.nop	23
     cb0:	0000                	unimp
     cb2:	000003b3          	add	t2,zero,zero
     cb6:	000e582b          	0xe582b
     cba:	d800                	sw	s0,48(s0)
     cbc:	0014                	0x14
     cbe:	e300                	fsw	fs0,0(a4)
     cc0:	000c                	0xc
     cc2:	2c00                	fld	fs0,24(s0)
     cc4:	5a01                	li	s4,-32
     cc6:	5d01f303          	0x5d01f303
     cca:	012c                	addi	a1,sp,136
     ccc:	0078025b          	0x78025b
     cd0:	012c                	addi	a1,sp,136
     cd2:	035c                	addi	a5,sp,388
     cd4:	2c5f01f3          	0x2c5f01f3
     cd8:	5d01                	li	s10,-32
     cda:	7802                	flw	fa6,32(sp)
     cdc:	2c00                	fld	fs0,24(s0)
     cde:	5e01                	li	t3,-32
     ce0:	3001                	jal	4e0 <polydiv+0xbc>
     ce2:	2b00                	fld	fs0,16(a4)
		polyR[i] = 0;		
     ce4:	0e68                	addi	a0,sp,796
     ce6:	0000                	unimp
     ce8:	00001323          	sh	zero,6(zero) # 6 <__DYNAMIC+0x6>
     cec:	0d09                	addi	s10,s10,2
	for(i = 1; i < N; ++i){
     cee:	0000                	unimp
     cf0:	012c                	addi	a1,sp,136
		f[i] = 0;
     cf2:	0079025b          	0x79025b
     cf6:	012c                	addi	a1,sp,136
     cf8:	025c                	addi	a5,sp,260
     cfa:	0084                	addi	s1,sp,64
     cfc:	012c                	addi	a1,sp,136
     cfe:	025d                	addi	tp,tp,23
		g[i] = 0;
     d00:	0086                	slli	ra,ra,0x1
     d02:	012c                	addi	a1,sp,136
     d04:	025e                	slli	tp,tp,0x17
     d06:	0082                	c.slli64	ra
     d08:	2b00                	fld	fs0,16(a4)
for (i = N; i < 55; ++i ){
     d0a:	0e8c                	addi	a1,sp,848
     d0c:	0000                	unimp
		random_keys[i] = f[i];		
     d0e:	14d8                	addi	a4,sp,612
     d10:	0000                	unimp
     d12:	0d2e                	slli	s10,s10,0xb
     d14:	0000                	unimp
     d16:	012c                	addi	a1,sp,136
     d18:	025a                	slli	tp,tp,0x16
     d1a:	012c0087          	0x12c0087
	for(i = 0; i < N; ++i){
     d1e:	0078025b          	0x78025b
     d22:	012c                	addi	a1,sp,136
		random_keys[i] = g[i-N];		
     d24:	025d                	addi	tp,tp,23
     d26:	0078                	addi	a4,sp,12
     d28:	012c                	addi	a1,sp,136
     d2a:	015e                	slli	sp,sp,0x17
     d2c:	0030                	addi	a2,sp,8
	for(i = N; i < (2*N); ++i){
     d2e:	982d                	andi	s0,s0,-21
     d30:	000e                	c.slli	zero,0x3
     d32:	2300                	fld	fs0,0(a4)
		random_keys[i] = fp[i-(2*N)];
     d34:	2c000013          	li	zero,704
     d38:	5b01                	li	s6,-32
     d3a:	7902                	flw	fs2,32(sp)
     d3c:	2c00                	fld	fs0,24(s0)
	for(i = (2*N); i < (3*N); ++i){
     d3e:	5c01                	li	s8,-32
     d40:	8402                	jr	s0
     d42:	2c00                	fld	fs0,24(s0)
		random_keys[i] = fq[i-(3*N)];
     d44:	5d01                	li	s10,-32
     d46:	8602                	jr	a2
     d48:	2c00                	fld	fs0,24(s0)
     d4a:	5e01                	li	t3,-32
     d4c:	8502                	jr	a0
     d4e:	0000                	unimp
     d50:	2f00                	fld	fs0,24(a4)
	for(i = (3*N); i < (4*N); ++i){
     d52:	0642                	slli	a2,a2,0x10
		random_keys[i] = fq[i-(3*N)];
     d54:	0000                	unimp
	for(i = (3*N); i < (4*N); ++i){
     d56:	aa01                	j	e66 <ntru_deceypt+0x44>
		fg[i] = fg[i]*p;
     d58:	0602                	c.slli64	a2
	for(i = 0; i < (2*N-1); ++i){
     d5a:	0b4e                	slli	s6,s6,0x13
     d5c:	0000                	unimp
		fg[i] = fg[i]*p;
     d5e:	0d8c                	addi	a1,sp,720
     d60:	0000                	unimp
     d62:	0096                	slli	ra,ra,0x5
     d64:	0000                	unimp
	for(i = 0; i < (2*N-1); ++i){
     d66:	9c01                	0x9c01
		random_keys[i] = pk[i-(4*N)+(2*N-1)];
     d68:	0e98                	addi	a4,sp,848
     d6a:	0000                	unimp
     d6c:	4e30                	lw	a2,88(a2)
     d6e:	0100                	addi	s0,sp,128
     d70:	02aa                	slli	t0,t0,0xa
     d72:	00005d17          	auipc	s10,0x5
	for(i = (4*N); i < (5*N); ++i){
     d76:	3800                	fld	fs0,48(s0)
		random_keys[i] = polyR[i-(5*N)];
     d78:	0004                	0x4
     d7a:	3000                	fld	fs0,32(s0)
     d7c:	0071                	c.nop	28
     d7e:	aa01                	j	e8e <ntru_deceypt+0x6c>
     d80:	1e02                	slli	t3,t3,0x20
     d82:	005d                	c.nop	23
     d84:	0000                	unimp
	for(i = (5*N); i < (6*N+1); ++i){
     d86:	0464                	addi	s1,sp,524
		random_keys[i] = polyR[i-(5*N)];
     d88:	0000                	unimp
	for(i = (5*N); i < (6*N+1); ++i){
     d8a:	9331                	srli	a4,a4,0x2c
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d8c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     d90:	02aa                	slli	t0,t0,0xa
     d92:	4e26                	lw	t3,72(sp)
     d94:	9b00000b          	0x9b00000b
     d98:	0004                	0x4
int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d9a:	3100                	fld	fs0,32(a0)
     d9c:	051a                	slli	a0,a0,0x6
     d9e:	0000                	unimp
     da0:	aa01                	j	eb0 <ntru_deceypt+0x8e>
     da2:	3402                	fld	fs0,32(sp)
     da4:	0b4e                	slli	s6,s6,0x13
     da6:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     da8:	000004c7          	fmsub.s	fs1,ft0,ft0,ft0,rne
     dac:	8031                	srli	s0,s0,0xc
     dae:	0006                	c.slli	zero,0x1
     db0:	0100                	addi	s0,sp,128
int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     db2:	02aa                	slli	t0,t0,0xa
	temp = polymult(public_key,N,random_val,48,q,0);
     db4:	4e45                	li	t3,17
     db6:	fe00000b          	0xfe00000b
     dba:	0004                	0x4
     dbc:	2900                	fld	fs0,16(a0)
     dbe:	0291                	addi	t0,t0,4
     dc0:	0000                	unimp
     dc2:	ac01                	j	fd2 <memcpy+0x72>
     dc4:	0602                	c.slli64	a2
     dc6:	0b4e                	slli	s6,s6,0x13
	for(i = 0; i < 48; ++i){
     dc8:	0000                	unimp
     dca:	4332                	lw	t1,12(sp)
		temp[i] = temp[i] + message[i];
     dcc:	0054                	addi	a3,sp,4
     dce:	ad01                	j	13de <_bss_start+0x72>
     dd0:	0602                	c.slli64	a2
     dd2:	0b4e                	slli	s6,s6,0x13
     dd4:	0000                	unimp
     dd6:	5a01                	li	s4,-32
     dd8:	5928                	lw	a0,112(a0)
     dda:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
	for(i = 0; i < 48; ++i){
     dde:	02b0                	addi	a2,sp,328
     de0:	5405                	li	s0,-31
	CT = polydiv(temp,(2*N),polyR,(N+1),q);
     de2:	0300000b          	0x300000b
     de6:	a091                	j	e2a <ntru_deceypt+0x8>
     de8:	267e                	fld	fa2,472(sp)
     dea:	0145                	addi	sp,sp,17
     dec:	0000                	unimp
     dee:	b101                	j	9ee <ext_euclid+0x2fc>
     df0:	0602                	c.slli64	a2
     df2:	0b4e                	slli	s6,s6,0x13
	for(i = (2*N); i < (3*N); ++i){
     df4:	0000                	unimp
     df6:	0535                	addi	a0,a0,13
     df8:	0000                	unimp
     dfa:	692a                	flw	fs2,136(sp)
     dfc:	0100                	addi	s0,sp,128
     dfe:	02b2                	slli	t0,t0,0xc
}
     e00:	5d05                	li	s10,-31
     e02:	0000                	unimp
     e04:	4800                	lw	s0,16(s0)
     e06:	0005                	c.nop	1
     e08:	3300                	fld	fs0,32(a4)
     e0a:	6176                	flw	ft2,92(sp)
     e0c:	006c                	addi	a1,sp,12
     e0e:	b201                	j	70e <ext_euclid+0x1c>
		CT[i-(2*N)] = CT[i];
     e10:	0702                	c.slli64	a4
     e12:	005d                	c.nop	23
     e14:	0000                	unimp
     e16:	01006b33          	or	s6,zero,a6
	for(i = (2*N); i < (3*N); ++i){
     e1a:	02b2                	slli	t0,t0,0xc
		CT[i-(2*N)] = CT[i];
     e1c:	00005d0b          	0x5d0b
	for(i = (2*N); i < (3*N); ++i){
     e20:	2b00                	fld	fs0,16(a4)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e22:	0db4                	addi	a3,sp,728
     e24:	0000                	unimp
     e26:	1729                	addi	a4,a4,-22
     e28:	0000                	unimp
	for(i = (2*N); i < ((2*N)+N); ++i){
     e2a:	0e44                	addi	s1,sp,788
     e2c:	0000                	unimp
     e2e:	012c                	addi	a1,sp,136
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e30:	025a                	slli	tp,tp,0x16
     e32:	0072                	c.slli	zero,0x1c
     e34:	012c                	addi	a1,sp,136
     e36:	e803055b          	0xe803055b
	a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e3a:	0011                	c.nop	4
     e3c:	2c00                	fld	fs0,24(s0)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e3e:	5c01                	li	s8,-32
     e40:	0802                	c.slli64	a6
	a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e42:	00c0                	addi	s0,sp,68
     e44:	000dc62b          	0xdc62b
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e48:	f800                	fsw	fs0,48(s0)
     e4a:	0015                	c.nop	5
     e4c:	7500                	flw	fs0,40(a0)
     e4e:	000e                	c.slli	zero,0x3
	a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e50:	2c00                	fld	fs0,24(s0)
     e52:	5a01                	li	s4,-32
	a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e54:	8402                	jr	s0
     e56:	2c00                	fld	fs0,24(s0)
	a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e58:	5b01                	li	s6,-32
     e5a:	7802                	flw	fa6,32(sp)
     e5c:	2c00                	fld	fs0,24(s0)
     e5e:	5c01                	li	s8,-32
     e60:	7202                	flw	ft4,32(sp)
     e62:	2c00                	fld	fs0,24(s0)
     e64:	5d01                	li	s10,-32
     e66:	0802                	c.slli64	a6
     e68:	2c30                	fld	fa2,88(s0)
	for(i = (2*N); i < ((2*N)+N); ++i){
     e6a:	5e01                	li	t3,-32
     e6c:	8202                	jr	tp
     e6e:	2c00                	fld	fs0,24(s0)
     e70:	5f01                	li	t5,-32
     e72:	3001                	jal	672 <polydiv+0x24e>
		if(a2[i] <= q/2)
     e74:	2d00                	fld	fs0,24(a0)
     e76:	0df4                	addi	a3,sp,732
     e78:	0000                	unimp
	for (i = 0; i < N; ++i){
     e7a:	00001323          	sh	zero,6(zero) # 6 <__DYNAMIC+0x6>
     e7e:	012c                	addi	a1,sp,136
	c = polymult2(secret_key_fp,N,a2,N,0);
     e80:	0079025b          	0x79025b
     e84:	012c                	addi	a1,sp,136
     e86:	025c                	addi	a5,sp,260
     e88:	012c0083          	lb	ra,18(s8)
	c2 = polydiv(c,(2*N),polyR,(N+1),p);
     e8c:	025d                	addi	tp,tp,23
     e8e:	0178                	addi	a4,sp,140
     e90:	012c                	addi	a1,sp,136
     e92:	025e                	slli	tp,tp,0x17
     e94:	0082                	c.slli64	ra
     e96:	0000                	unimp
	for(i = (2*N); i < ((2*N)+N); ++i){
     e98:	0002fb2f          	0x2fb2f
     e9c:	0100                	addi	s0,sp,128
}
     e9e:	0225                	addi	tp,tp,9
     ea0:	4e06                	lw	t3,64(sp)
     ea2:	9600000b          	0x9600000b
     ea6:	000a                	c.slli	zero,0x2
     ea8:	f600                	fsw	fs0,40(a2)
     eaa:	0002                	c.slli64	zero
     eac:	0100                	addi	s0,sp,128
     eae:	609c                	flw	fa5,0(s1)
     eb0:	0010                	0x10
     eb2:	3000                	fld	fs0,32(s0)
		a2[i-(2*N)] = a2[i];
     eb4:	004e                	c.slli	zero,0x13
     eb6:	2501                	jal	14b6 <_bss_start+0x14a>
     eb8:	1802                	slli	a6,a6,0x20
     eba:	005d                	c.nop	23
	for(i = (2*N); i < ((2*N)+N); ++i){
     ebc:	0000                	unimp
     ebe:	058a                	slli	a1,a1,0x2
		a2[i-(2*N)] = a2[i];
     ec0:	0000                	unimp
     ec2:	7030                	flw	fa2,96(s0)
	for(i = (2*N); i < ((2*N)+N); ++i){
     ec4:	0100                	addi	s0,sp,128
		if(a2[i] <= q/2)
     ec6:	0225                	addi	tp,tp,9
     ec8:	5d1f 0000 db00      	0xdb0000005d1f
			a2[i] = (-1)*(q-a2[i]);
     ece:	0005                	c.nop	1
     ed0:	3000                	fld	fs0,32(s0)
	for (i = 0; i < N; ++i){
     ed2:	0071                	c.nop	28
     ed4:	2501                	jal	14d4 <_bss_start+0x168>
     ed6:	2602                	fld	fa2,0(sp)
		c2[i-(2*N)] = c2[i];
     ed8:	005d                	c.nop	23
     eda:	0000                	unimp
     edc:	0612                	slli	a2,a2,0x4
     ede:	0000                	unimp
	for(i = (2*N); i < ((2*N)+N); ++i){
     ee0:	6632                	flw	fa2,12(sp)
     ee2:	0100                	addi	s0,sp,128
		c2[i-(2*N)] = c2[i];
     ee4:	60050227          	0x60050227
	for(i = (2*N); i < ((2*N)+N); ++i){
     ee8:	0010                	0x10
  jal x0, default_exc_handler
     eea:	0300                	addi	s0,sp,384
     eec:	9891                	andi	s1,s1,-28
  mv  x1, x0
     eee:	327c                	fld	fa5,224(a2)
     ef0:	28010067          	jr	640(sp)
  mv  x3, x1
     ef4:	0502                	c.slli64	a0
  mv  x4, x1
     ef6:	1060                	addi	s0,sp,44
  mv  x5, x1
     ef8:	0000                	unimp
  mv  x6, x1
     efa:	7df49103          	lh	sp,2015(s1)
  mv  x8, x1
     efe:	662a                	flw	fa2,136(sp)
  mv  x9, x1
     f00:	0070                	addi	a2,sp,12
  mv x10, x1
     f02:	2b01                	jal	1412 <_bss_start+0xa6>
  mv x11, x1
     f04:	0602                	c.slli64	a2
  mv x12, x1
     f06:	0b4e                	slli	s6,s6,0x13
  mv x13, x1
     f08:	0000                	unimp
  mv x14, x1
     f0a:	0649                	addi	a2,a2,18
  mv x15, x1
     f0c:	0000                	unimp
  mv x16, x1
     f0e:	662a                	flw	fa2,136(sp)
  mv x17, x1
     f10:	0071                	c.nop	28
  mv x18, x1
     f12:	2c01                	jal	1122 <main+0x3c>
  mv x19, x1
     f14:	0602                	c.slli64	a2
  mv x20, x1
     f16:	0b4e                	slli	s6,s6,0x13
  mv x21, x1
     f18:	0000                	unimp
  mv x22, x1
     f1a:	065c                	addi	a5,sp,772
  mv x23, x1
     f1c:	0000                	unimp
  mv x24, x1
     f1e:	662a                	flw	fa2,136(sp)
  mv x25, x1
     f20:	2d010067          	jr	720(sp)
  mv x27, x1
     f24:	0602                	c.slli64	a2
  mv x28, x1
     f26:	0b4e                	slli	s6,s6,0x13
  mv x29, x1
     f28:	0000                	unimp
  mv x30, x1
     f2a:	067a                	slli	a2,a2,0x1e
  mv x31, x1
     f2c:	0000                	unimp
  la   x2, _stack_start
     f2e:	702a                	flw	ft0,168(sp)
     f30:	2e01006b          	0x2e01006b
     f34:	0602                	c.slli64	a2
  la x26, _bss_start
     f36:	0b4e                	slli	s6,s6,0x13
     f38:	0000                	unimp
     f3a:	0698                	addi	a4,sp,832
     f3c:	0000                	unimp
  la x27, _bss_end
     f3e:	8026                	c.mv	zero,s1
     f40:	0006                	c.slli	zero,0x1
     f42:	0100                	addi	s0,sp,128
     f44:	7005022f          	0x7005022f
  bge x26, x27, zero_loop_end
     f48:	0010                	0x10
  sw x0, 0(x26)
     f4a:	b600                	fsd	fs0,40(a2)
     f4c:	0006                	c.slli	zero,0x1
  addi x26, x26, 4
     f4e:	2a00                	fld	fs0,16(a2)
  ble x26, x27, zero_loop
     f50:	0069                	c.nop	26
     f52:	3001                	jal	752 <ext_euclid+0x60>
  addi x10, x0, 0
     f54:	0502                	c.slli64	a0
     f56:	005d                	c.nop	23
  addi x11, x0, 0
     f58:	0000                	unimp
     f5a:	0719                	addi	a4,a4,6
  jal x1, main
     f5c:	0000                	unimp
     f5e:	a426                	fsd	fs1,8(sp)
     f60:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     f64:	0231                	addi	tp,tp,12
     f66:	4e06                	lw	t3,64(sp)
     f68:	5500000b          	0x5500000b
     f6c:	0008                	0x8
     f6e:	3300                	fld	fs0,32(a4)
     f70:	6176                	flw	ft2,92(sp)
     f72:	006c                	addi	a1,sp,12
     f74:	3201                	jal	874 <ext_euclid+0x182>
     f76:	0502                	c.slli64	a0
     f78:	005d                	c.nop	23
     f7a:	0000                	unimp
     f7c:	01006b33          	or	s6,zero,a6
     f80:	0232                	slli	tp,tp,0xc
     f82:	5d09                	li	s10,-30
     f84:	0000                	unimp
     f86:	3400                	fld	fs0,40(s0)
     f88:	0069                	c.nop	26
     f8a:	0000                	unimp
     f8c:	086d                	addi	a6,a6,27
     f8e:	0000                	unimp
     f90:	000adc2b          	0xadc2b
     f94:	3400                	fld	fs0,40(s0)
     f96:	b0000017          	auipc	zero,0xb0000
     f9a:	2c00000f          	0x2c00000f
     f9e:	5a01                	li	s4,-32
     fa0:	7ca47803          	0x7ca47803
     fa4:	012c                	addi	a1,sp,136
     fa6:	2c30015b          	0x2c30015b
     faa:	5c01                	li	s8,-32
     fac:	0802                	c.slli64	a6
     fae:	00d0                	addi	a2,sp,68
     fb0:	000b5c2b          	0xb5c2b
     fb4:	3400                	fld	fs0,40(s0)
     fb6:	d0000017          	auipc	zero,0xd0000
     fba:	2c00000f          	0x2c00000f
     fbe:	5a01                	li	s4,-32
     fc0:	7df87803          	0x7df87803
     fc4:	012c                	addi	a1,sp,136
     fc6:	2c30015b          	0x2c30015b
     fca:	5c01                	li	s8,-32
     fcc:	0802                	c.slli64	a6
     fce:	00d8                	addi	a4,sp,68
     fd0:	000c242b          	0xc242b
     fd4:	8300                	0x8300
     fd6:	0010                	0x10
     fd8:	f700                	fsw	fs0,40(a4)
     fda:	2c00000f          	0x2c00000f
     fde:	5a01                	li	s4,-32
     fe0:	7202                	flw	ft4,32(sp)
     fe2:	2c00                	fld	fs0,24(s0)
     fe4:	5b01                	li	s6,-32
     fe6:	7c987803          	0x7c987803
     fea:	012c                	addi	a1,sp,136
     fec:	025c                	addi	a5,sp,260
     fee:	0085                	addi	ra,ra,1
     ff0:	012c                	addi	a1,sp,136
     ff2:	025d                	addi	tp,tp,23
     ff4:	2b000087          	0x2b000087
     ff8:	0c3e                	slli	s8,s8,0xf
     ffa:	0000                	unimp
     ffc:	00001083          	lh	ra,0(zero) # 0 <__DYNAMIC>
    1000:	101e                	c.slli	zero,0x27
    1002:	0000                	unimp
    1004:	012c                	addi	a1,sp,136
    1006:	025a                	slli	tp,tp,0x16
    1008:	0072                	c.slli	zero,0x1c
    100a:	012c                	addi	a1,sp,136
    100c:	9878035b          	0x9878035b
    1010:	2c7c                	fld	fa5,216(s0)
    1012:	5c01                	li	s8,-32
    1014:	8502                	jr	a0
    1016:	2c00                	fld	fs0,24(s0)
    1018:	5d01                	li	s10,-32
    101a:	8602                	jr	a2
    101c:	0000                	unimp
    101e:	000c5e2b          	0xc5e2b
    1022:	d800                	sw	s0,48(s0)
    1024:	0014                	0x14
    1026:	4300                	lw	s0,0(a4)
    1028:	0010                	0x10
    102a:	2c00                	fld	fs0,24(s0)
    102c:	5b01                	li	s6,-32
    102e:	8202                	jr	tp
    1030:	2c00                	fld	fs0,24(s0)
    1032:	5c01                	li	s8,-32
    1034:	8902                	jr	s2
    1036:	2c00                	fld	fs0,24(s0)
    1038:	5d01                	li	s10,-32
    103a:	8202                	jr	tp
    103c:	2c00                	fld	fs0,24(s0)
    103e:	5e01                	li	t3,-32
    1040:	3001                	jal	840 <ext_euclid+0x14e>
    1042:	2d00                	fld	fs0,24(a0)
    1044:	0c74                	addi	a3,sp,540
    1046:	0000                	unimp
    1048:	00001323          	sh	zero,6(zero) # 6 <__DYNAMIC+0x6>
    104c:	012c                	addi	a1,sp,136
    104e:	025c                	addi	a5,sp,260
    1050:	0072                	c.slli	zero,0x1c
    1052:	012c                	addi	a1,sp,136
    1054:	025d                	addi	tp,tp,23
    1056:	0085                	addi	ra,ra,1
    1058:	012c                	addi	a1,sp,136
    105a:	025e                	slli	tp,tp,0x17
    105c:	0086                	slli	ra,ra,0x1
    105e:	0000                	unimp
    1060:	5d09                	li	s10,-30
    1062:	0000                	unimp
    1064:	7000                	flw	fs0,32(s0)
    1066:	0010                	0x10
    1068:	0a00                	addi	s0,sp,272
    106a:	0069                	c.nop	26
    106c:	0000                	unimp
    106e:	0036                	c.slli	zero,0xd
    1070:	5d09                	li	s10,-30
    1072:	0000                	unimp
    1074:	8300                	0x8300
    1076:	0010                	0x10
    1078:	3500                	fld	fs0,40(a0)
    107a:	0069                	c.nop	26
    107c:	0000                	unimp
    107e:	00000f87          	0xf87
    1082:	2f00                	fld	fs0,24(a4)
    1084:	0338                	addi	a4,sp,392
    1086:	0000                	unimp
    1088:	5e01                	li	t3,-32
    108a:	0601                	addi	a2,a2,0
    108c:	0b4e                	slli	s6,s6,0x13
    108e:	0000                	unimp
    1090:	06f2                	slli	a3,a3,0x1c
    1092:	0000                	unimp
    1094:	03a4                	addi	s1,sp,456
    1096:	0000                	unimp
    1098:	9c01                	0x9c01
    109a:	129e                	slli	t0,t0,0x27
    109c:	0000                	unimp
    109e:	8031                	srli	s0,s0,0xc
    10a0:	0006                	c.slli	zero,0x1
    10a2:	0100                	addi	s0,sp,128
    10a4:	015e                	slli	sp,sp,0x17
    10a6:	4e16                	lw	t3,68(sp)
    10a8:	b300000b          	0xb300000b
    10ac:	0008                	0x8
    10ae:	3100                	fld	fs0,32(a0)
    10b0:	00000183          	lb	gp,0(zero) # 0 <__DYNAMIC>
    10b4:	5e01                	li	t3,-32
    10b6:	2201                	jal	11b6 <main+0xd0>
    10b8:	0b4e                	slli	s6,s6,0x13
    10ba:	0000                	unimp
    10bc:	08ed                	addi	a7,a7,27
    10be:	0000                	unimp
    10c0:	1231                	addi	tp,tp,-20
    10c2:	0000                	unimp
    10c4:	0100                	addi	s0,sp,128
    10c6:	015e                	slli	sp,sp,0x17
    10c8:	5d2d                	li	s10,-21
    10ca:	0000                	unimp
    10cc:	2700                	fld	fs0,8(a4)
    10ce:	0009                	c.nop	2
    10d0:	3000                	fld	fs0,32(s0)
    10d2:	6f6d                	lui	t5,0x1b
    10d4:	0064                	addi	s1,sp,12
    10d6:	5e01                	li	t3,-32
    10d8:	3701                	jal	fd8 <memcpy+0x78>
    10da:	005d                	c.nop	23
    10dc:	0000                	unimp
    10de:	0974                	addi	a3,sp,156
    10e0:	0000                	unimp
    10e2:	7a26                	flw	fs4,104(sp)
    10e4:	0002                	c.slli64	zero
int main(){
    10e6:	0100                	addi	s0,sp,128
    10e8:	0160                	addi	s0,sp,140
int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    10ea:	4e08                	lw	a0,24(a2)
    10ec:	ab00000b          	0xab00000b
    10f0:	0009                	c.nop	2
    10f2:	2a00                	fld	fs0,16(a2)
    10f4:	004e                	c.slli	zero,0x13
    10f6:	6101                	0x6101
int main(){
    10f8:	0701                	addi	a4,a4,0
    10fa:	005d                	c.nop	23
    10fc:	0000                	unimp
    10fe:	000009c3          	fmadd.s	fs3,ft0,ft0,ft0,rne
	keys = generate_keys(N, p, q);
    1102:	692a                	flw	fs2,136(sp)
    1104:	0100                	addi	s0,sp,128
    1106:	0161                	addi	sp,sp,24
    1108:	5d09                	li	s10,-30
    110a:	0000                	unimp
    110c:	fe00                	fsw	fs0,56(a2)
    110e:	0009                	c.nop	2
	for(i = 0; i < N; ++i){
    1110:	2a00                	fld	fs0,16(a2)
    1112:	006a                	c.slli	zero,0x1a
		secret_key_f[i] = keys[i];
    1114:	6101                	0x6101
    1116:	0b01                	addi	s6,s6,0
    1118:	005d                	c.nop	23
    111a:	0000                	unimp
    111c:	0dc0                	addi	s0,sp,724
    111e:	0000                	unimp
	for(i = 0; i < N; ++i){
    1120:	ee26                	fsw	fs1,28(sp)
    1122:	0004                	0x4
    1124:	0100                	addi	s0,sp,128
	for(i = N; i < (2*N); ++i){
    1126:	0162                	slli	sp,sp,0x18
    1128:	00129e07          	0x129e07
    112c:	de00                	sw	s0,56(a2)
    112e:	000d                	c.nop	3
    1130:	2600                	fld	fs0,8(a2)
		secret_key_fp[i-(2*N)] = keys[i];
    1132:	0556                	slli	a0,a0,0x15
    1134:	0000                	unimp
    1136:	6301                	0x6301
    1138:	0701                	addi	a4,a4,0
    113a:	12b1                	addi	t0,t0,-20
	for(i = (2*N); i < (3*N); ++i){
    113c:	0000                	unimp
    113e:	0dfe                	slli	s11,s11,0x1f
	for(i = (3*N); i < (4*N); ++i){
    1140:	0000                	unimp
    1142:	722a                	flw	ft4,168(sp)
    1144:	0069                	c.nop	26
    1146:	6401                	0x6401
    1148:	0701                	addi	a4,a4,0
    114a:	12c4                	addi	s1,sp,356
		public_key[i-(4*N)] = keys[i];
    114c:	0000                	unimp
    114e:	0e4e                	slli	t3,t3,0x13
    1150:	0000                	unimp
    1152:	1326                	slli	t1,t1,0x29
    1154:	0004                	0x4
	for(i = (4*N); i < (5*N); ++i){
    1156:	0100                	addi	s0,sp,128
    1158:	0166                	slli	sp,sp,0x19
    115a:	0012d707          	0x12d707
    115e:	6e00                	flw	fs0,24(a2)
    1160:	000e                	c.slli	zero,0x3
		ring_poly[i-(5*N)] = keys[i];
    1162:	2a00                	fld	fs0,16(a2)
    1164:	6974                	flw	fa3,84(a0)
    1166:	0100                	addi	s0,sp,128
    1168:	ea070167          	jalr	sp,-352(a4) # 4ea0 <_stack_len+0xea0>
	for(i = (5*N); i < (6*N+1); ++i){
    116c:	0012                	c.slli	zero,0x4
    116e:	8e00                	0x8e00
	Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1170:	000e                	c.slli	zero,0x3
    1172:	2600                	fld	fs0,8(a2)
    1174:	0000042b          	0x42b
    1178:	6801                	0x6801
    117a:	0701                	addi	a4,a4,0
    117c:	12fd                	addi	t0,t0,-1
    117e:	0000                	unimp
	Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1180:	0ef5                	addi	t4,t4,29
    1182:	0000                	unimp
    1184:	4526                	lw	a0,72(sp)
    1186:	0001                	nop
    1188:	0100                	addi	s0,sp,128
    118a:	0169                	addi	sp,sp,26
    118c:	00131007          	0x131007
    1190:	5e00                	lw	s0,56(a2)
    1192:	2a00000f          	0x2a00000f
			resultkon = 1;}
    1196:	6572                	flw	fa0,28(sp)
    1198:	6a010073          	0x6a010073
    119c:	0801                	addi	a6,a6,0
    119e:	0b4e                	slli	s6,s6,0x13
	for(i = 0; i < 48; ++i){	
    11a0:	0000                	unimp
    11a2:	0fba                	slli	t6,t6,0xe
		if(!(message[i] == Dec_Message[i])){
    11a4:	0000                	unimp
    11a6:	4a26                	lw	s4,72(sp)
    11a8:	0001                	nop
    11aa:	0100                	addi	s0,sp,128
    11ac:	4e08016b          	0x4e08016b
    11b0:	d800000b          	0xd800000b
			resultkon = 0;
    11b4:	2600000f          	0x2600000f
    11b8:	0000014f          	fnmadd.s	ft2,ft0,ft0,ft0,rne
}
    11bc:	6c01                	0x6c01
    11be:	0801                	addi	a6,a6,0
    11c0:	0b4e                	slli	s6,s6,0x13
    11c2:	0000                	unimp
    11c4:	0ff6                	slli	t6,t6,0x1d
    11c6:	0000                	unimp
    11c8:	e426                	fsw	fs1,8(sp)
    11ca:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
			resultkon = 1;}
    11ce:	016d                	addi	sp,sp,27
	for(i = 0; i < 48; ++i){	
    11d0:	00005d07          	0x5d07
    11d4:	1400                	addi	s0,sp,544
    11d6:	0010                	0x10
    11d8:	3400                	fld	fs0,40(s0)
    11da:	0069                	c.nop	26
    11dc:	0000                	unimp
    11de:	104a                	c.slli	zero,0x32
    11e0:	0000                	unimp
    11e2:	6934                	flw	fa3,80(a0)
    11e4:	0000                	unimp
    11e6:	8500                	0x8500
    11e8:	0010                	0x10
    11ea:	3400                	fld	fs0,40(s0)
    11ec:	0069                	c.nop	26
    11ee:	0000                	unimp
    11f0:	10c0                	addi	s0,sp,100
    11f2:	0000                	unimp
    11f4:	6934                	flw	fa3,80(a0)
    11f6:	0000                	unimp
    11f8:	fb00                	fsw	fs0,48(a4)
    11fa:	0010                	0x10
    11fc:	3400                	fld	fs0,40(s0)
    11fe:	0069                	c.nop	26
    1200:	0000                	unimp
    1202:	1136                	slli	sp,sp,0x2d
    1204:	0000                	unimp
    1206:	6934                	flw	fa3,80(a0)
    1208:	0000                	unimp
    120a:	7100                	flw	fs0,32(a0)
    120c:	0011                	c.nop	4
    120e:	3400                	fld	fs0,40(s0)
    1210:	0069                	c.nop	26
    1212:	0000                	unimp
    1214:	11ac                	addi	a1,sp,232
    1216:	0000                	unimp
    1218:	0007f82b          	0x7f82b
    121c:	2300                	fld	fs0,0(a4)
    121e:	44000013          	li	zero,1088
    1222:	0012                	c.slli	zero,0x4
    1224:	2c00                	fld	fs0,24(s0)
    1226:	5a01                	li	s4,-32
    1228:	8502                	jr	a0
    122a:	2c00                	fld	fs0,24(s0)
    122c:	5b01                	li	s6,-32
    122e:	8302                	jr	t1
    1230:	2c00                	fld	fs0,24(s0)
    1232:	5c01                	li	s8,-32
    1234:	8602                	jr	a2
    1236:	2c00                	fld	fs0,24(s0)
    1238:	5d01                	li	s10,-32
    123a:	8302                	jr	t1
    123c:	2c00                	fld	fs0,24(s0)
    123e:	5e01                	li	t3,-32
    1240:	8202                	jr	tp
    1242:	0000                	unimp
    1244:	00082a2b          	0x82a2b
    1248:	2300                	fld	fs0,0(a4)
    124a:	70000013          	li	zero,1792
    124e:	0012                	c.slli	zero,0x4
    1250:	2c00                	fld	fs0,24(s0)
    1252:	5a01                	li	s4,-32
    1254:	7202                	flw	ft4,32(sp)
    1256:	2c00                	fld	fs0,24(s0)
    1258:	5b01                	li	s6,-32
    125a:	8302                	jr	t1
    125c:	2c00                	fld	fs0,24(s0)
    125e:	5c01                	li	s8,-32
    1260:	8602                	jr	a2
    1262:	2c00                	fld	fs0,24(s0)
    1264:	5d01                	li	s10,-32
    1266:	8302                	jr	t1
    1268:	2c00                	fld	fs0,24(s0)
    126a:	5e01                	li	t3,-32
    126c:	8202                	jr	tp
    126e:	0000                	unimp
    1270:	4e2d                	li	t3,11
    1272:	0008                	0x8
    1274:	f800                	fsw	fs0,48(s0)
    1276:	0015                	c.nop	5
    1278:	2c00                	fld	fs0,24(s0)
    127a:	5a01                	li	s4,-32
    127c:	8a02                	jr	s4
    127e:	2c00                	fld	fs0,24(s0)
    1280:	5b01                	li	s6,-32
    1282:	8302                	jr	t1
    1284:	2c00                	fld	fs0,24(s0)
    1286:	5c01                	li	s8,-32
    1288:	8b02                	jr	s6
    128a:	2c00                	fld	fs0,24(s0)
    128c:	5d01                	li	s10,-32
    128e:	8302                	jr	t1
    1290:	2c00                	fld	fs0,24(s0)
    1292:	5e01                	li	t3,-32
    1294:	8202                	jr	tp
    1296:	2c00                	fld	fs0,24(s0)
    1298:	5f01                	li	t5,-32
    129a:	3001                	jal	a9a <generate_keys+0x4>
    129c:	0000                	unimp
    129e:	5d09                	li	s10,-30
    12a0:	0000                	unimp
    12a2:	b100                	fsd	fs0,32(a0)
    12a4:	0012                	c.slli	zero,0x4
    12a6:	3500                	fld	fs0,40(a0)
    12a8:	0069                	c.nop	26
    12aa:	0000                	unimp
    12ac:	11d9                	addi	gp,gp,-10
    12ae:	0000                	unimp
    12b0:	0900                	addi	s0,sp,144
    12b2:	005d                	c.nop	23
    12b4:	0000                	unimp
    12b6:	12c4                	addi	s1,sp,356
    12b8:	0000                	unimp
    12ba:	6935                	lui	s2,0xd
    12bc:	0000                	unimp
    12be:	e200                	fsw	fs0,0(a2)
    12c0:	0011                	c.nop	4
    12c2:	0000                	unimp
    12c4:	5d09                	li	s10,-30
    12c6:	0000                	unimp
    12c8:	d700                	sw	s0,40(a4)
    12ca:	0012                	c.slli	zero,0x4
    12cc:	3500                	fld	fs0,40(a0)
    12ce:	0069                	c.nop	26
    12d0:	0000                	unimp
    12d2:	000011eb          	0x11eb
    12d6:	0900                	addi	s0,sp,144
    12d8:	005d                	c.nop	23
    12da:	0000                	unimp
    12dc:	12ea                	slli	t0,t0,0x3a
    12de:	0000                	unimp
    12e0:	6935                	lui	s2,0xd
    12e2:	0000                	unimp
    12e4:	f400                	fsw	fs0,40(s0)
    12e6:	0011                	c.nop	4
    12e8:	0000                	unimp
    12ea:	5d09                	li	s10,-30
    12ec:	0000                	unimp
    12ee:	fd00                	fsw	fs0,56(a0)
    12f0:	0012                	c.slli	zero,0x4
    12f2:	3500                	fld	fs0,40(a0)
    12f4:	0069                	c.nop	26
    12f6:	0000                	unimp
    12f8:	11fd                	addi	gp,gp,-1
    12fa:	0000                	unimp
    12fc:	0900                	addi	s0,sp,144
    12fe:	005d                	c.nop	23
    1300:	0000                	unimp
    1302:	1310                	addi	a2,sp,416
    1304:	0000                	unimp
    1306:	6935                	lui	s2,0xd
    1308:	0000                	unimp
    130a:	0600                	addi	s0,sp,768
    130c:	0012                	c.slli	zero,0x4
    130e:	0000                	unimp
    1310:	5d09                	li	s10,-30
    1312:	0000                	unimp
    1314:	2300                	fld	fs0,0(a4)
    1316:	35000013          	li	zero,848
    131a:	0069                	c.nop	26
    131c:	0000                	unimp
    131e:	0000120f          	0x120f
    1322:	3600                	fld	fs0,40(a2)
    1324:	0000017b          	0x17b
    1328:	b901                	j	f38 <_start+0x2>
    132a:	4e06                	lw	t3,64(sp)
    132c:	2400000b          	0x2400000b
    1330:	0004                	0x4
    1332:	ce00                	sw	s0,24(a2)
    1334:	0002                	c.slli64	zero
    1336:	0100                	addi	s0,sp,128
    1338:	8c9c                	0x8c9c
    133a:	0014                	0x14
    133c:	3700                	fld	fs0,40(a4)
    133e:	756e                	flw	fa0,248(sp)
    1340:	006d                	c.nop	27
    1342:	b901                	j	f52 <zero_loop+0x8>
    1344:	000b4e13          	xori	t3,s6,0
    1348:	e700                	fsw	fs0,8(a4)
    134a:	0011                	c.nop	4
    134c:	3800                	fld	fs0,48(s0)
    134e:	00fc                	addi	a5,sp,76
    1350:	0000                	unimp
    1352:	b901                	j	f62 <memcpy+0x2>
    1354:	5d1c                	lw	a5,56(a0)
    1356:	0000                	unimp
    1358:	0800                	addi	s0,sp,16
    135a:	0012                	c.slli	zero,0x4
    135c:	3800                	fld	fs0,48(s0)
    135e:	0662                	slli	a2,a2,0x18
    1360:	0000                	unimp
    1362:	b901                	j	f72 <memcpy+0x12>
    1364:	4e28                	lw	a0,88(a2)
    1366:	5900000b          	0x5900000b
    136a:	0012                	c.slli	zero,0x4
    136c:	3800                	fld	fs0,48(s0)
    136e:	0686                	slli	a3,a3,0x1
    1370:	0000                	unimp
    1372:	b901                	j	f82 <memcpy+0x22>
    1374:	00005d33          	srl	s10,zero,zero
    1378:	9300                	0x9300
    137a:	0012                	c.slli	zero,0x4
    137c:	3700                	fld	fs0,40(a4)
    137e:	6f6d                	lui	t5,0x1b
    1380:	0064                	addi	s1,sp,12
    1382:	b901                	j	f92 <memcpy+0x32>
    1384:	00005d3f 0012ca00 	0x12ca0000005d3f
    138c:	3900                	fld	fs0,48(a0)
    138e:	0075                	c.nop	29
    1390:	bb01                	j	10a0 <memset+0x62>
    1392:	5d05                	li	s10,-31
    1394:	0000                	unimp
    1396:	0100                	addi	s0,sp,128
    1398:	39000013          	li	zero,912
    139c:	0064                	addi	s1,sp,12
    139e:	bb01                	j	10ae <memset+0x70>
    13a0:	00005d07          	0x5d07
    13a4:	2a00                	fld	fs0,16(a2)
    13a6:	3a000013          	li	zero,928
    13aa:	3264                	fld	fs1,224(a2)
    13ac:	0100                	addi	s0,sp,128
    13ae:	005d09bb          	0x5d09bb
    13b2:	0000                	unimp
    13b4:	6939                	lui	s2,0xe
    13b6:	0100                	addi	s0,sp,128
    13b8:	005d0cbb          	0x5d0cbb
    13bc:	0000                	unimp
    13be:	1348                	addi	a0,sp,420
    13c0:	0000                	unimp
    13c2:	623a                	flw	ft4,140(sp)
    13c4:	4e5f 0100 0ebb      	0xebb01004e5f
    13ca:	005d                	c.nop	23
    13cc:	0000                	unimp
    13ce:	7239                	lui	tp,0xfffee
    13d0:	645f 0100 12bb      	0x12bb0100645f
    13d6:	005d                	c.nop	23
    13d8:	0000                	unimp
    13da:	1608                	addi	a0,sp,800
    13dc:	0000                	unimp
    13de:	00026a3b          	0x26a3b
    13e2:	0100                	addi	s0,sp,128
    13e4:	06bc                	addi	a5,sp,840
    13e6:	0b4e                	slli	s6,s6,0x13
    13e8:	0000                	unimp
    13ea:	1626                	slli	a2,a2,0x29
    13ec:	0000                	unimp
    13ee:	7639                	lui	a2,0xfffee
    13f0:	0100                	addi	s0,sp,128
    13f2:	05be                	slli	a1,a1,0xf
    13f4:	148c                	addi	a1,sp,608
    13f6:	0000                	unimp
    13f8:	163e                	slli	a2,a2,0x2f
    13fa:	0000                	unimp
    13fc:	7139                	addi	sp,sp,-64
    13fe:	0100                	addi	s0,sp,128
    1400:	149f05bf 165e0000 	0x165e0000149f05bf
    1408:	0000                	unimp
    140a:	0001733b          	0x1733b
    140e:	0100                	addi	s0,sp,128
    1410:	06c0                	addi	s0,sp,836
    1412:	0b4e                	slli	s6,s6,0x13
    1414:	0000                	unimp
    1416:	16ae                	slli	a3,a3,0x2b
    1418:	0000                	unimp
    141a:	00030b3b          	0x30b3b
    141e:	0100                	addi	s0,sp,128
    1420:	05c1                	addi	a1,a1,16
    1422:	14b2                	slli	s1,s1,0x2c
    1424:	0000                	unimp
    1426:	16cc                	addi	a1,sp,868
    1428:	0000                	unimp
    142a:	0003093b          	0x3093b
    142e:	0100                	addi	s0,sp,128
    1430:	05c2                	slli	a1,a1,0x10
    1432:	14c5                	addi	s1,s1,-15
    1434:	0000                	unimp
    1436:	1719                	addi	a4,a4,-26
    1438:	0000                	unimp
    143a:	6934                	flw	fa3,80(a0)
    143c:	0000                	unimp
    143e:	8800                	0x8800
    1440:	34000017          	auipc	zero,0x34000
    1444:	0069                	c.nop	26
    1446:	0000                	unimp
    1448:	17b6                	slli	a5,a5,0x2d
    144a:	0000                	unimp
    144c:	6934                	flw	fa3,80(a0)
    144e:	0000                	unimp
    1450:	e400                	fsw	fs0,8(s0)
    1452:	34000017          	auipc	zero,0x34000
    1456:	0069                	c.nop	26
    1458:	0000                	unimp
    145a:	1812                	slli	a6,a6,0x24
    145c:	0000                	unimp
    145e:	e02d                	bnez	s0,14c0 <_bss_start+0x154>
    1460:	0005                	c.nop	1
    1462:	f800                	fsw	fs0,48(s0)
    1464:	0015                	c.nop	5
    1466:	2c00                	fld	fs0,24(s0)
    1468:	5a01                	li	s4,-32
    146a:	7202                	flw	ft4,32(sp)
    146c:	2c00                	fld	fs0,24(s0)
    146e:	5b01                	li	s6,-32
    1470:	8402                	jr	s0
    1472:	2c00                	fld	fs0,24(s0)
    1474:	5c01                	li	s8,-32
    1476:	8602                	jr	a2
    1478:	2c00                	fld	fs0,24(s0)
    147a:	5d01                	li	s10,-32
    147c:	8402                	jr	s0
    147e:	2c00                	fld	fs0,24(s0)
    1480:	5e01                	li	t3,-32
    1482:	8202                	jr	tp
    1484:	2c00                	fld	fs0,24(s0)
    1486:	5f01                	li	t5,-32
    1488:	3001                	jal	c88 <generate_keys+0x1f2>
    148a:	0000                	unimp
    148c:	5d09                	li	s10,-30
    148e:	0000                	unimp
    1490:	9f00                	0x9f00
    1492:	0014                	0x14
    1494:	3500                	fld	fs0,40(a0)
    1496:	0069                	c.nop	26
    1498:	0000                	unimp
    149a:	143a                	slli	s0,s0,0x2e
    149c:	0000                	unimp
    149e:	0900                	addi	s0,sp,144
    14a0:	005d                	c.nop	23
    14a2:	0000                	unimp
    14a4:	14b2                	slli	s1,s1,0x2c
    14a6:	0000                	unimp
    14a8:	6935                	lui	s2,0xd
    14aa:	0000                	unimp
    14ac:	4300                	lw	s0,0(a4)
    14ae:	0014                	0x14
    14b0:	0000                	unimp
    14b2:	5d09                	li	s10,-30
    14b4:	0000                	unimp
    14b6:	c500                	sw	s0,8(a0)
    14b8:	0014                	0x14
    14ba:	3500                	fld	fs0,40(a0)
    14bc:	0069                	c.nop	26
    14be:	0000                	unimp
    14c0:	144c                	addi	a1,sp,548
    14c2:	0000                	unimp
    14c4:	0900                	addi	s0,sp,144
    14c6:	005d                	c.nop	23
    14c8:	0000                	unimp
    14ca:	14d8                	addi	a4,sp,612
    14cc:	0000                	unimp
    14ce:	6935                	lui	s2,0xd
    14d0:	0000                	unimp
    14d2:	5500                	lw	s0,40(a0)
    14d4:	0014                	0x14
    14d6:	0000                	unimp
    14d8:	2a36                	fld	fs4,328(sp)
    14da:	0000                	unimp
    14dc:	0100                	addi	s0,sp,128
    14de:	0672                	slli	a2,a2,0x1c
    14e0:	0b4e                	slli	s6,s6,0x13
    14e2:	0000                	unimp
    14e4:	02b4                	addi	a3,sp,328
    14e6:	0000                	unimp
    14e8:	0170                	addi	a2,sp,140
    14ea:	0000                	unimp
    14ec:	9c01                	0x9c01
    14ee:	15b8                	addi	a4,sp,744
    14f0:	0000                	unimp
    14f2:	01006137          	lui	sp,0x1006
    14f6:	1572                	slli	a0,a0,0x3c
    14f8:	0b4e                	slli	s6,s6,0x13
    14fa:	0000                	unimp
    14fc:	00001867          	0x1867
    1500:	d538                	sw	a4,104(a0)
    1502:	0006                	c.slli	zero,0x1
    1504:	0100                	addi	s0,sp,128
    1506:	1c72                	slli	s8,s8,0x3c
    1508:	005d                	c.nop	23
    150a:	0000                	unimp
    150c:	18a1                	addi	a7,a7,-24
    150e:	0000                	unimp
    1510:	01006237          	lui	tp,0x1006
    1514:	2972                	fld	fs2,280(sp)
    1516:	0b4e                	slli	s6,s6,0x13
    1518:	0000                	unimp
    151a:	18d9                	addi	a7,a7,-10
    151c:	0000                	unimp
    151e:	dc3c                	sw	a5,120(s0)
    1520:	0006                	c.slli	zero,0x1
    1522:	0100                	addi	s0,sp,128
    1524:	3072                	fld	ft0,312(sp)
    1526:	005d                	c.nop	23
    1528:	0000                	unimp
    152a:	5d01                	li	s10,-32
    152c:	de38                	sw	a4,120(a2)
    152e:	0004                	0x4
    1530:	0100                	addi	s0,sp,128
    1532:	3c72                	fld	fs8,312(sp)
    1534:	005d                	c.nop	23
    1536:	0000                	unimp
    1538:	00001913          	slli	s2,zero,0x0
    153c:	0006283b          	0x6283b
    1540:	0100                	addi	s0,sp,128
    1542:	0575                	addi	a0,a0,29
    1544:	15b8                	addi	a4,sp,744
    1546:	0000                	unimp
    1548:	194d                	addi	s2,s2,-13
    154a:	0000                	unimp
    154c:	6939                	lui	s2,0xe
    154e:	0100                	addi	s0,sp,128
    1550:	0576                	slli	a0,a0,0x1d
    1552:	005d                	c.nop	23
    1554:	0000                	unimp
    1556:	1991                	addi	s3,s3,-28
    1558:	0000                	unimp
    155a:	6a39                	lui	s4,0xe
    155c:	0100                	addi	s0,sp,128
    155e:	0776                	slli	a4,a4,0x1d
    1560:	005d                	c.nop	23
    1562:	0000                	unimp
    1564:	1a3a                	slli	s4,s4,0x2e
    1566:	0000                	unimp
    1568:	6b39                	lui	s6,0xe
    156a:	0100                	addi	s0,sp,128
    156c:	0976                	slli	s2,s2,0x1d
    156e:	005d                	c.nop	23
    1570:	0000                	unimp
    1572:	1a84                	addi	s1,sp,368
    1574:	0000                	unimp
    1576:	00025a3b          	0x25a3b
    157a:	0100                	addi	s0,sp,128
    157c:	0b4e0677          	0xb4e0677
    1580:	0000                	unimp
    1582:	1ad2                	slli	s5,s5,0x34
    1584:	0000                	unimp
    1586:	0c22                	slli	s8,s8,0x8
    1588:	0000                	unimp
    158a:	0100                	addi	s0,sp,128
    158c:	0578                	addi	a4,sp,652
    158e:	000015d3          	fadd.s	fa1,ft0,ft0,rtz
    1592:	7502                	flw	fa0,32(sp)
    1594:	3b00                	fld	fs0,48(a4)
    1596:	0354                	addi	a3,sp,388
    1598:	0000                	unimp
    159a:	7901                	lui	s2,0xfffe0
    159c:	e505                	bnez	a0,15c4 <product2>
    159e:	0015                	c.nop	5
    15a0:	ea00                	fsw	fs0,16(a2)
    15a2:	001a                	c.slli	zero,0x6
    15a4:	3400                	fld	fs0,40(s0)
    15a6:	0069                	c.nop	26
    15a8:	0000                	unimp
    15aa:	1b20                	addi	s0,sp,440
    15ac:	0000                	unimp
    15ae:	6934                	flw	fa3,80(a0)
    15b0:	0000                	unimp
    15b2:	5800                	lw	s0,48(s0)
    15b4:	0000001b          	0x1b
    15b8:	5d09                	li	s10,-30
    15ba:	0000                	unimp
    15bc:	d300                	sw	s0,32(a4)
    15be:	0015                	c.nop	5
    15c0:	3500                	fld	fs0,40(a0)
    15c2:	0069                	c.nop	26
    15c4:	0000                	unimp
    15c6:	15a5                	addi	a1,a1,-23
    15c8:	0000                	unimp
    15ca:	692e                	flw	fs2,200(sp)
    15cc:	0000                	unimp
    15ce:	0200                	addi	s0,sp,256
    15d0:	008d                	addi	ra,ra,3
    15d2:	0900                	addi	s0,sp,144
    15d4:	005d                	c.nop	23
    15d6:	0000                	unimp
    15d8:	15e5                	addi	a1,a1,-7
    15da:	0000                	unimp
    15dc:	692e                	flw	fs2,200(sp)
    15de:	0000                	unimp
    15e0:	0200                	addi	s0,sp,256
    15e2:	0900008f          	0x900008f
    15e6:	005d                	c.nop	23
    15e8:	0000                	unimp
    15ea:	15f8                	addi	a4,sp,748
    15ec:	0000                	unimp
    15ee:	6935                	lui	s2,0xd
    15f0:	0000                	unimp
    15f2:	ae00                	fsd	fs0,24(a2)
    15f4:	0015                	c.nop	5
    15f6:	0000                	unimp
    15f8:	0336                	slli	t1,t1,0xd
    15fa:	0001                	nop
    15fc:	0100                	addi	s0,sp,128
    15fe:	060c                	addi	a1,sp,768
    1600:	0b4e                	slli	s6,s6,0x13
    1602:	0000                	unimp
    1604:	008c                	addi	a1,sp,64
    1606:	0000                	unimp
    1608:	0228                	addi	a0,sp,264
    160a:	0000                	unimp
    160c:	9c01                	0x9c01
    160e:	16e9                	addi	a3,a3,-6
    1610:	0000                	unimp
    1612:	01006137          	lui	sp,0x1006
    1616:	140c                	addi	a1,sp,544
    1618:	0b4e                	slli	s6,s6,0x13
    161a:	0000                	unimp
    161c:	1b90                	addi	a2,sp,496
    161e:	0000                	unimp
    1620:	d538                	sw	a4,104(a0)
    1622:	0006                	c.slli	zero,0x1
    1624:	0100                	addi	s0,sp,128
    1626:	1b0c                	addi	a1,sp,432
    1628:	005d                	c.nop	23
    162a:	0000                	unimp
    162c:	1bca                	slli	s7,s7,0x32
    162e:	0000                	unimp
    1630:	01006237          	lui	tp,0x1006
    1634:	280c                	fld	fa1,16(s0)
    1636:	0b4e                	slli	s6,s6,0x13
    1638:	0000                	unimp
    163a:	1c02                	slli	s8,s8,0x20
    163c:	0000                	unimp
    163e:	dc38                	sw	a4,120(s0)
    1640:	0006                	c.slli	zero,0x1
    1642:	0100                	addi	s0,sp,128
    1644:	2f0c                	fld	fa1,24(a4)
    1646:	005d                	c.nop	23
    1648:	0000                	unimp
    164a:	1c3c                	addi	a5,sp,568
    164c:	0000                	unimp
    164e:	6d3d                	lui	s10,0xf
    1650:	0100646f          	jal	s0,7660 <_stack_len+0x3660>
    1654:	3b0c                	fld	fa1,48(a4)
    1656:	005d                	c.nop	23
    1658:	0000                	unimp
    165a:	5e01                	li	t3,-32
    165c:	de38                	sw	a4,120(a2)
    165e:	0004                	0x4
    1660:	0100                	addi	s0,sp,128
    1662:	440c                	lw	a1,8(s0)
    1664:	005d                	c.nop	23
    1666:	0000                	unimp
    1668:	1c76                	slli	s8,s8,0x3d
    166a:	0000                	unimp
    166c:	0006283b          	0x6283b
    1670:	0100                	addi	s0,sp,128
    1672:	16e9050f          	0x16e9050f
    1676:	0000                	unimp
    1678:	1cb0                	addi	a2,sp,632
    167a:	0000                	unimp
    167c:	6939                	lui	s2,0xe
    167e:	0100                	addi	s0,sp,128
    1680:	0510                	addi	a2,sp,640
    1682:	005d                	c.nop	23
    1684:	0000                	unimp
    1686:	1cf4                	addi	a3,sp,636
    1688:	0000                	unimp
    168a:	6a39                	lui	s4,0xe
    168c:	0100                	addi	s0,sp,128
    168e:	0710                	addi	a2,sp,896
    1690:	005d                	c.nop	23
    1692:	0000                	unimp
    1694:	00001e3b          	0x1e3b
    1698:	6b39                	lui	s6,0xe
    169a:	0100                	addi	s0,sp,128
    169c:	0910                	addi	a2,sp,144
    169e:	005d                	c.nop	23
    16a0:	0000                	unimp
    16a2:	1ed6                	slli	t4,t4,0x35
    16a4:	0000                	unimp
    16a6:	00024a3b          	0x24a3b
    16aa:	0100                	addi	s0,sp,128
    16ac:	0611                	addi	a2,a2,4
    16ae:	0b4e                	slli	s6,s6,0x13
    16b0:	0000                	unimp
    16b2:	1f24                	addi	s1,sp,952
    16b4:	0000                	unimp
    16b6:	00000c3b          	0xc3b
    16ba:	0100                	addi	s0,sp,128
    16bc:	0512                	slli	a0,a0,0x4
    16be:	1704                	addi	s1,sp,928
    16c0:	0000                	unimp
    16c2:	1f3c                	addi	a5,sp,952
    16c4:	0000                	unimp
    16c6:	0003543b          	0x3543b
    16ca:	0100                	addi	s0,sp,128
    16cc:	17160513          	addi	a0,a2,369 # fffee171 <_stack_start+0xfffde171>
    16d0:	0000                	unimp
    16d2:	1f80                	addi	s0,sp,1008
    16d4:	0000                	unimp
    16d6:	6934                	flw	fa3,80(a0)
    16d8:	0000                	unimp
    16da:	b700                	fsd	fs0,40(a4)
    16dc:	001f 3400 0069      	0x693400001f
    16e2:	0000                	unimp
    16e4:	201c                	fld	fa5,0(s0)
    16e6:	0000                	unimp
    16e8:	0900                	addi	s0,sp,144
    16ea:	005d                	c.nop	23
    16ec:	0000                	unimp
    16ee:	1704                	addi	s1,sp,928
    16f0:	0000                	unimp
    16f2:	6935                	lui	s2,0xd
    16f4:	0000                	unimp
    16f6:	d600                	sw	s0,40(a2)
    16f8:	0016                	c.slli	zero,0x5
    16fa:	2e00                	fld	fs0,24(a2)
    16fc:	0069                	c.nop	26
    16fe:	0000                	unimp
    1700:	8f02                	jr	t5
    1702:	0000                	unimp
    1704:	5d09                	li	s10,-30
    1706:	0000                	unimp
    1708:	1600                	addi	s0,sp,800
    170a:	2e000017          	auipc	zero,0x2e000
    170e:	0069                	c.nop	26
    1710:	0000                	unimp
    1712:	7702                	flw	fa4,32(sp)
    1714:	0000                	unimp
    1716:	5d09                	li	s10,-30
    1718:	0000                	unimp
    171a:	2900                	fld	fs0,16(a0)
    171c:	35000017          	auipc	zero,0x35000
    1720:	0069                	c.nop	26
    1722:	0000                	unimp
    1724:	16df 0000 3e00      	0x3e00000016df
    172a:	031a                	slli	t1,t1,0x6
    172c:	0000                	unimp
    172e:	0310                	addi	a2,sp,384
    1730:	0000                	unimp
    1732:	643e0007          	0x643e0007
    1736:	0000                	unimp
    1738:	5a00                	lw	s0,48(a2)
    173a:	0000                	unimp
    173c:	0700                	addi	s0,sp,896
    173e:	0000                	unimp
    1740:	001e                	c.slli	zero,0x7
    1742:	0000                	unimp
    1744:	0002                	c.slli64	zero
    1746:	039d                	addi	t2,t2,7
    1748:	0000                	unimp
    174a:	0104                	addi	s1,sp,128
    174c:	2fb4                	fld	fa3,88(a5)
    174e:	0000                	unimp
    1750:	0018                	0x18
    1752:	0000                	unimp
    1754:	000006e3          	beqz	zero,1f60 <random_keys+0x35c>
    1758:	0568                	addi	a0,sp,652
    175a:	0000                	unimp
    175c:	06ea                	slli	a3,a3,0x1a
    175e:	0000                	unimp
    1760:	8001                	c.srli64	s0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x1de>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <polymult+0x24>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # e0b3 <_stack+0xb3>
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
int line[size_b][size_a + size_b];
  8e:	000d                	c.nop	3
  90:	0b3a0e03          	lb	t3,179(s4)
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  a0:	0b00                	addi	s0,sp,400
  a2:	0e00000b          	0xe00000b
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
int line[size_b][size_a + size_b];
  b2:	1301                	addi	t1,t1,-32
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  b4:	0000                	unimp
int line[size_b][size_a + size_b];
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
int pola[size_a];
  c0:	3813490b          	0x3813490b
  c4:	1000000b          	0x1000000b
int line[size_b][size_a + size_b];
  c8:	0b0b000f          	0xb0b000f
int pola[size_a];
  cc:	1349                	addi	t1,t1,-14
int polb[size_b];
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
  d4:	0b0e                	slli	s6,s6,0x3
int pola[size_a];
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
int polb[size_b];
  d8:	390b3b0b          	0x390b3b0b
int line[size_b][size_a + size_b];
  dc:	0013010b          	0x13010b
int pola[size_a];
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
int polb[size_b];
  e4:	0b3a0e03          	lb	t3,179(s4)
			line[i][j] = 0;
  e8:	0b390b3b          	0xb390b3b
	for (i = 0; i < size_b; ++i){
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
			product[j] = 0;		
  f0:	0000                	unimp
  f2:	27001513          	0x27001513
  f6:	0019                	c.nop	6
	for (i = 0; i < size_b; ++i){
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
	for(i = 0; i < size_a; ++i){
  fc:	13491927          	0x13491927
 100:	1301                	addi	t1,t1,-32
	for(i = 0; i < size_b; ++i){
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
 108:	16000013          	li	zero,352
	for (i = 0; i < size_a; ++i){
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
 110:	0000                	unimp
	for (i = 0; i < size_a; ++i){
 112:	03011317          	auipc	t1,0x3011
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
 11a:	39053b0b          	0x39053b0b
	for (i = 0; i < size_b; ++i){
 11e:	0013010b          	0x13010b
	for(i = 0; i < size_b; ++i){
 122:	1800                	addi	s0,sp,48
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
	if(star_mult == 1){
 12a:	0b39053b          	0xb39053b
 12e:	1349                	addi	t1,t1,-14
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
 134:	0d19                	addi	s10,s10,6
 136:	0300                	addi	s0,sp,384
		for (j = size_b -1; j >= 0; j = j-1){
 138:	3a0e                	fld	fs4,224(sp)
 13a:	39053b0b          	0x39053b0b
			for (k = size_a-1; k >= 0; k = k-1 ){
 13e:	3813490b          	0x3813490b
			product[j] = 0;		
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
			line[i][j] = 0;
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
			product[j] = 0;		
 14a:	0b3a0b0b          	0xb3a0b0b
		for(j = 0; j < size_a + size_b -1; ++j){
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
	for (i = 0; i < size_b; ++i){
 156:	0b01131b          	0xb01131b
 15a:	3b0b3a0b          	0x3b0b3a0b
		for(j = 0; j < size_a + size_b -1; ++j){
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
		pola[i] = a[i];
 164:	1c00                	addi	s0,sp,560
 166:	0b0b0117          	auipc	sp,0xb0b0
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
	for(i = 0; i < size_a; ++i){
 170:	1301                	addi	t1,t1,-32
		pola[i] = a[i];
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
	for(i = 0; i < size_a; ++i){
 176:	0300                	addi	s0,sp,384
		polb[i] = b[i];
 178:	3a0e                	fld	fs4,224(sp)
 17a:	39053b0b          	0x39053b0b
 17e:	0013490b          	0x13490b
 182:	1e00                	addi	s0,sp,816
 184:	0e030013          	addi	zero,t1,224
 188:	193c                	addi	a5,sp,184
 18a:	0000                	unimp
	for(i = 0; i < size_b; ++i){
 18c:	151f 2701 0119      	0x1192701151f
			pola[i] = pola[i] + mod;		
 192:	20000013          	li	zero,512
		while (pola[i] < 0){
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
	for (i = 0; i < size_a; ++i){
 19c:	0b39053b          	0xb39053b
 1a0:	1349                	addi	t1,t1,-14
		pola[i] = pola[i] % mod;
 1a2:	193c193f 34210000 	0x34210000193c193f
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
	for (i = 0; i < size_a; ++i){
 1b2:	3f13490b          	0x3f13490b
			polb[i] = polb[i] + mod;		
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
		while (polb[i] < 0){
 1b8:	0019                	c.nop	6
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
	for (i = 0; i < size_b; ++i){
 1be:	0b3a0e03          	lb	t3,179(s4)
 1c2:	0b390b3b          	0xb390b3b
	for(i = 0; i < size_b; ++i){
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
		polb[i] = polb[i] % mod;
 1ca:	0000                	unimp
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0x5e>
 1d0:	00052f13          	slti	t5,a0,0
	if(star_mult == 1){
 1d4:	2400                	fld	fs0,8(s0)
		for (j = size_b -1; j >= 0; j = j-1){
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
	for (i = 0; i < size_b; ++i){
 1dc:	0b390b3b          	0xb390b3b
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 2e250000 	0x2e2500001802193f
	for(j = 0; j < size_a + size_b -1; ++j){
 1ea:	3f01                	jal	fa <polymult+0x6e>
 1ec:	0319                	addi	t1,t1,6
 1ee:	3a0e                	fld	fs4,224(sp)
	for(j = 0; j < size_a + size_b -1; ++j){
 1f0:	39053b0b          	0x39053b0b
 1f4:	1113490b          	0x1113490b
}
 1f8:	1201                	addi	tp,tp,-32
 1fa:	4006                	0x4006
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
 200:	1301                	addi	t1,t1,-32
 202:	0000                	unimp
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
 208:	3a0e                	fld	fs4,224(sp)
 20a:	39053b0b          	0x39053b0b
 20e:	0213490b          	0x213490b
 212:	27000017          	auipc	zero,0x27000
				line[size_b-1-j][k] = pola[k]*polb[j];
 216:	0034                	addi	a3,sp,8
 218:	0b3a0803          	lb	a6,179(s4)
 21c:	0b39053b          	0xb39053b
 220:	1349                	addi	t1,t1,-14
 222:	0b1c                	addi	a5,sp,400
 224:	0000                	unimp
			for (k = size_a-1; k >= 0; k = k-1 ){
 226:	3428                	fld	fa0,104(s0)
				line[size_b-1-j][k] = pola[k]*polb[j];
 228:	0300                	addi	s0,sp,384
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
			for (k = size_a-1; k >= 0; k = k-1 ){
 230:	0213490b          	0x213490b
		for (j = size_b -1; j >= 0; j = j-1){
 234:	0018                	0x18
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
			for (k = size_a-1; k >= 0; k = k-1 ){
 23a:	0b3a0e03          	lb	t3,179(s4)
				line[size_b-1-j][k + j] = pola[k]*polb[j];
 23e:	0b39053b          	0xb39053b
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
 246:	342a                	fld	fs0,168(sp)
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
 250:	0213490b          	0x213490b
 254:	2b000017          	auipc	zero,0x2b000
			for (k = size_a-1; k >= 0; k = k-1 ){
 258:	8289                	srli	a3,a3,0x2
		for (j = size_b -1; j >= 0; j = j-1){
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
 25e:	1331                	addi	t1,t1,-20
 260:	1301                	addi	t1,t1,-32
			line[i][j] = line[i][j] % mod;
 262:	0000                	unimp
		for(j = 0; j < size_a + size_b -1; ++j){
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
			line[i][j] = line[i][j] % mod;
 268:	0200                	addi	s0,sp,256
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
 26e:	0000                	unimp
		for(j = 0; j < size_a + size_b -1; ++j){
 270:	892d                	andi	a0,a0,11
 272:	0182                	c.slli64	gp
	for (i = 0; i < size_b; ++i){
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
		for(j = 0; j < size_a + size_b -1; ++j){
 27c:	0021                	c.nop	8
 27e:	1349                	addi	t1,t1,-14
			product[j] += line[i][j];
 280:	0000182f          	0x182f
 284:	3f012e2f          	0x3f012e2f
		for(i = 0; i < size_b; ++i){
 288:	0319                	addi	t1,t1,6
			product[j] += line[i][j];
 28a:	3a0e                	fld	fs4,224(sp)
 28c:	39053b0b          	0x39053b0b
 290:	4919270b          	0x4919270b
 294:	12011113          	0x12011113
		for(i = 0; i < size_b; ++i){
 298:	4006                	0x4006
	for(j = 0; j < size_a + size_b -1; ++j){
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
		for(i = 0; i < size_b; ++i){
 2a0:	0000                	unimp
 2a2:	0530                	addi	a2,sp,648
		product[j] = product[j] % mod;
 2a4:	0300                	addi	s0,sp,384
	for(j = 0; j < size_a + size_b -1; ++j){
 2a6:	3a08                	fld	fa0,48(a2)
 2a8:	39053b0b          	0x39053b0b
		product[j] = product[j] % mod;
 2ac:	0213490b          	0x213490b
 2b0:	31000017          	auipc	zero,0x31000
int line[size_b][size_a + size_b];
 2b4:	0005                	c.nop	1
 2b6:	0b3a0e03          	lb	t3,179(s4)
 2ba:	0b39053b          	0xb39053b
 2be:	1349                	addi	t1,t1,-14
 2c0:	1702                	slli	a4,a4,0x20
 2c2:	0000                	unimp
 2c4:	3432                	fld	fs0,296(sp)
 2c6:	0300                	addi	s0,sp,384
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2c8:	3a08                	fld	fa0,48(a2)
 2ca:	39053b0b          	0x39053b0b
 2ce:	0213490b          	0x213490b
 2d2:	0018                	0x18
 2d4:	3300                	fld	fs0,32(a4)
 2d6:	0034                	addi	a3,sp,8
 2d8:	0b3a0803          	lb	a6,179(s4)
int line[size_b][size_a + size_b];
 2dc:	0b39053b          	0xb39053b
 2e0:	1349                	addi	t1,t1,-14
int pola[size_a];
 2e2:	0000                	unimp
 2e4:	3434                	fld	fa3,104(s0)
 2e6:	4900                	lw	s0,16(a0)
 2e8:	02193413          	sltiu	s0,s2,33
 2ec:	35000017          	auipc	zero,0x35000
int polb[size_b];
 2f0:	0021                	c.nop	8
 2f2:	1349                	addi	t1,t1,-14
 2f4:	0000132f          	0x132f
 2f8:	2e36                	fld	ft8,328(sp)
 2fa:	3f01                	jal	20a <polymult+0x17e>
int line[size_b][size_a + size_b];
 2fc:	0319                	addi	t1,t1,6
 2fe:	3a0e                	fld	fs4,224(sp)
int pola[size_a];
 300:	390b3b0b          	0x390b3b0b
int polb[size_b];
 304:	4919270b          	0x4919270b
			line[i][j] = 0;
 308:	12011113          	0x12011113
	for (i = 0; i < size_b; ++i){
 30c:	4006                	0x4006
 30e:	9718                	0x9718
			product2[j] = 0;		
 310:	1942                	slli	s2,s2,0x30
 312:	1301                	addi	t1,t1,-32
 314:	0000                	unimp
 316:	03000537          	lui	a0,0x3000
	for (i = 0; i < size_b; ++i){
 31a:	3a08                	fld	fa0,48(a2)
	for(i = 0; i < size_a; ++i){
 31c:	390b3b0b          	0x390b3b0b
 320:	0213490b          	0x213490b
	for(i = 0; i < size_b; ++i){
 324:	38000017          	auipc	zero,0x38000
	if(star_mult == 1){
 328:	0005                	c.nop	1
 32a:	0b3a0e03          	lb	t3,179(s4)
 32e:	0b390b3b          	0xb390b3b
 332:	1349                	addi	t1,t1,-14
 334:	1702                	slli	a4,a4,0x20
		for (j = size_b -1; j >= 0; j = j-1){
 336:	0000                	unimp
 338:	3439                	jal	fffffd46 <_stack_start+0xfffefd46>
			for (k = size_a-1; k >= 0; k = k-1 ){
 33a:	0300                	addi	s0,sp,384
 33c:	3a08                	fld	fa0,48(a2)
			product2[j] = 0;		
 33e:	390b3b0b          	0x390b3b0b
 342:	0213490b          	0x213490b
			line[i][j] = 0;
 346:	3a000017          	auipc	zero,0x3a000
			product2[j] = 0;		
 34a:	0034                	addi	a3,sp,8
		for(j = 0; j < size_a + size_b -1; ++j){
 34c:	0b3a0803          	lb	a6,179(s4)
 350:	0b390b3b          	0xb390b3b
	for (i = 0; i < size_b; ++i){
 354:	1349                	addi	t1,t1,-14
 356:	0000                	unimp
 358:	0300343b          	0x300343b
		for(j = 0; j < size_a + size_b -1; ++j){
 35c:	3a0e                	fld	fs4,224(sp)
 35e:	390b3b0b          	0x390b3b0b
		pola[i] = a[i];
 362:	0213490b          	0x213490b
 366:	3c000017          	auipc	zero,0x3c000
 36a:	0005                	c.nop	1
	for(i = 0; i < size_a; ++i){
 36c:	0b3a0e03          	lb	t3,179(s4)
		pola[i] = a[i];
 370:	0b390b3b          	0xb390b3b
		polb[i] = b[i];
 374:	1349                	addi	t1,t1,-14
 376:	1802                	slli	a6,a6,0x20
 378:	0000                	unimp
 37a:	053d                	addi	a0,a0,15
 37c:	0300                	addi	s0,sp,384
 37e:	3a08                	fld	fa0,48(a2)
	for(i = 0; i < size_b; ++i){
 380:	390b3b0b          	0x390b3b0b
		polb[i] = b[i];
 384:	0213490b          	0x213490b
				line[size_b-1-j][k] = pola[k]*polb[j];
 388:	0018                	0x18
 38a:	3e00                	fld	fs0,56(a2)
 38c:	002e                	c.slli	zero,0xb
 38e:	193c193f 0e030e6e 	0xe030e6e193c193f
 396:	0b3a                	slli	s6,s6,0xe
			for (k = size_a-1; k >= 0; k = k-1 ){
 398:	00000b3b          	0xb3b
				line[size_b-1-j][k] = pola[k]*polb[j];
 39c:	0100                	addi	s0,sp,128
 39e:	0011                	c.nop	4
			for (k = size_a-1; k >= 0; k = k-1 ){
 3a0:	0610                	addi	a2,sp,768
 3a2:	0655                	addi	a2,a2,21
		for (j = size_b -1; j >= 0; j = j-1){
 3a4:	0e1b0e03          	lb	t3,225(s6) # e0e1 <_stack+0xe1>
 3a8:	0e25                	addi	t3,t3,9
 3aa:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	1180                	addi	s0,sp,224
       2:	0000                	unimp
       4:	1192                	slli	gp,gp,0x24
       6:	0000                	unimp
       8:	0001                	nop
       a:	925a                	add	tp,tp,s6
       c:	0011                	c.nop	4
       e:	9300                	0x9300
      10:	0011                	c.nop	4
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	1194                	addi	a3,sp,224
      20:	0000                	unimp
      22:	11c6                	slli	gp,gp,0x31
      24:	0000                	unimp
      26:	0001                	nop
      28:	cc5a                	sw	s6,24(sp)
      2a:	0011                	c.nop	4
      2c:	d800                	sw	s0,48(s0)
      2e:	0011                	c.nop	4
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	110e                	slli	sp,sp,0x23
      3e:	0000                	unimp
      40:	1160                	addi	s0,sp,172
      42:	0000                	unimp
      44:	0001                	nop
      46:	605a                	flw	ft0,148(sp)
      48:	0011                	c.nop	4
      4a:	7c00                	flw	fs0,56(s0)
      4c:	0011                	c.nop	4
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	0200                	addi	s0,sp,256
      5e:	0011                	c.nop	4
      60:	4200                	lw	s0,0(a2)
      62:	0011                	c.nop	4
      64:	0300                	addi	s0,sp,384
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	1142                	slli	sp,sp,0x30
      6c:	0000                	unimp
      6e:	114c                	addi	a1,sp,164
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	114c                	addi	a1,sp,164
      78:	0000                	unimp
      7a:	117d                	addi	sp,sp,-1
  jal x0, default_exc_handler
      7c:	0000                	unimp
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	117d                	addi	sp,sp,-1
  jal x0, default_exc_handler
      84:	0000                	unimp
      86:	11ca                	slli	gp,gp,0x32
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
int line[size_b][size_a + size_b];
      8e:	ca79                	beqz	a2,164 <polymult+0xd8>
      90:	0011                	c.nop	4
      92:	cc00                	sw	s0,24(s0)
      94:	0011                	c.nop	4
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	11cc                	addi	a1,sp,228
      9e:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      a0:	11d8                	addi	a4,sp,228
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
      b0:	0200                	addi	s0,sp,256
int line[size_b][size_a + size_b];
      b2:	0011                	c.nop	4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b4:	1c00                	addi	s0,sp,560
int line[size_b][size_a + size_b];
      b6:	0011                	c.nop	4
      b8:	0300                	addi	s0,sp,384
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
int pola[size_a];
      be:	111c                	addi	a5,sp,160
      c0:	0000                	unimp
      c2:	111e                	slli	sp,sp,0x27
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
int line[size_b][size_a + size_b];
      c8:	007d                	c.nop	31
int pola[size_a];
      ca:	111e                	slli	sp,sp,0x27
      cc:	0000                	unimp
int polb[size_b];
      ce:	118e                	slli	gp,gp,0x23
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
int pola[size_a];
      d6:	8e7a                	mv	t3,t5
int polb[size_b];
      d8:	0011                	c.nop	4
      da:	9300                	0x9300
int line[size_b][size_a + size_b];
      dc:	0011                	c.nop	4
      de:	0200                	addi	s0,sp,256
int pola[size_a];
      e0:	7d00                	flw	fs0,56(a0)
      e2:	9300                	0x9300
int polb[size_b];
      e4:	0011                	c.nop	4
			line[i][j] = 0;
      e6:	ca00                	sw	s0,16(a2)
      e8:	0011                	c.nop	4
      ea:	0300                	addi	s0,sp,384
	for (i = 0; i < size_b; ++i){
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
			product[j] = 0;		
      f0:	11ca                	slli	gp,gp,0x32
      f2:	0000                	unimp
      f4:	11cc                	addi	a1,sp,228
      f6:	0000                	unimp
	for (i = 0; i < size_b; ++i){
      f8:	f0720003          	lb	zero,-249(tp) # 1005f07 <_stack_start+0xff5f07>
	for(i = 0; i < size_a; ++i){
      fc:	cc7a                	sw	t5,24(sp)
      fe:	0011                	c.nop	4
     100:	d800                	sw	s0,48(s0)
	for(i = 0; i < size_b; ++i){
     102:	0011                	c.nop	4
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
     108:	7af0                	flw	fa2,116(a3)
	...
	for (i = 0; i < size_a; ++i){
     112:	1102                	slli	sp,sp,0x20
     114:	0000                	unimp
     116:	1128                	addi	a0,sp,168
     118:	0000                	unimp
     11a:	c4910003          	lb	zero,-951(sp)
	for (i = 0; i < size_b; ++i){
     11e:	287c                	fld	fa5,208(s0)
     120:	0011                	c.nop	4
	for(i = 0; i < size_b; ++i){
     122:	3200                	fld	fs0,32(a2)
     124:	0011                	c.nop	4
     126:	0200                	addi	s0,sp,256
	if(star_mult == 1){
     128:	7e00                	flw	fs0,56(a2)
     12a:	3200                	fld	fs0,32(a2)
     12c:	0011                	c.nop	4
     12e:	c400                	sw	s0,8(s0)
     130:	0011                	c.nop	4
     132:	0200                	addi	s0,sp,256
     134:	7800                	flw	fs0,48(s0)
     136:	c400                	sw	s0,8(s0)
		for (j = size_b -1; j >= 0; j = j-1){
     138:	0011                	c.nop	4
     13a:	ca00                	sw	s0,16(a2)
			for (k = size_a-1; k >= 0; k = k-1 ){
     13c:	0011                	c.nop	4
     13e:	0300                	addi	s0,sp,384
			product[j] = 0;		
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
     144:	11ca                	slli	gp,gp,0x32
			line[i][j] = 0;
     146:	0000                	unimp
     148:	11cc                	addi	a1,sp,228
			product[j] = 0;		
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
		for(j = 0; j < size_a + size_b -1; ++j){
     150:	cc7c                	sw	a5,92(s0)
     152:	0011                	c.nop	4
     154:	d800                	sw	s0,48(s0)
	for (i = 0; i < size_b; ++i){
     156:	0011                	c.nop	4
     158:	0200                	addi	s0,sp,256
     15a:	7800                	flw	fs0,48(s0)
	...
		pola[i] = a[i];
     164:	0200                	addi	s0,sp,256
     166:	0011                	c.nop	4
     168:	5c00                	lw	s0,56(s0)
     16a:	0011                	c.nop	4
     16c:	0300                	addi	s0,sp,384
     16e:	9100                	0x9100
	for(i = 0; i < size_a; ++i){
     170:	7e98                	flw	fa4,56(a3)
		pola[i] = a[i];
     172:	115c                	addi	a5,sp,164
     174:	0000                	unimp
	for(i = 0; i < size_a; ++i){
     176:	1162                	slli	sp,sp,0x38
		polb[i] = b[i];
     178:	0000                	unimp
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
     17e:	1162                	slli	sp,sp,0x38
     180:	0000                	unimp
     182:	117d                	addi	sp,sp,-1
     184:	0000                	unimp
	for(i = 0; i < size_b; ++i){
     186:	0002                	c.slli64	zero
		polb[i] = b[i];
     188:	0080                	addi	s0,sp,64
     18a:	117d                	addi	sp,sp,-1
	for(i = 0; i < size_b; ++i){
     18c:	0000                	unimp
			pola[i] = pola[i] + mod;		
     18e:	11ca                	slli	gp,gp,0x32
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
		while (pola[i] < 0){
     196:	ca7e                	sw	t6,20(sp)
     198:	0011                	c.nop	4
     19a:	cc00                	sw	s0,24(s0)
	for (i = 0; i < size_a; ++i){
     19c:	0011                	c.nop	4
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
		pola[i] = pola[i] % mod;
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	11cc                	addi	a1,sp,228
	for (i = 0; i < size_a; ++i){
     1a6:	0000                	unimp
     1a8:	11d8                	addi	a4,sp,228
		pola[i] = pola[i] % mod;
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
     1b0:	007e                	c.slli	zero,0x1f
	for (i = 0; i < size_a; ++i){
     1b2:	0000                	unimp
			polb[i] = polb[i] + mod;		
     1b4:	0000                	unimp
     1b6:	0000                	unimp
		while (polb[i] < 0){
     1b8:	0e00                	addi	s0,sp,784
     1ba:	0011                	c.nop	4
     1bc:	1400                	addi	s0,sp,544
	for (i = 0; i < size_b; ++i){
     1be:	0011                	c.nop	4
     1c0:	0200                	addi	s0,sp,256
     1c2:	3000                	fld	fs0,32(s0)
		polb[i] = polb[i] % mod;
     1c4:	949f 0011 a400      	0xa4000011949f
     1ca:	0011                	c.nop	4
     1cc:	0200                	addi	s0,sp,256
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
		for (j = size_b -1; j >= 0; j = j-1){
     1d6:	0000                	unimp
     1d8:	2200                	fld	fs0,0(a2)
		for(j = 0; j < size_a + size_b -1; ++j){
     1da:	000e                	c.slli	zero,0x3
	for (i = 0; i < size_b; ++i){
     1dc:	3a00                	fld	fs0,48(a2)
     1de:	000e                	c.slli	zero,0x3
     1e0:	0100                	addi	s0,sp,128
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0e3a                	slli	t3,t3,0xe
     1e6:	0000                	unimp
     1e8:	0ea2                	slli	t4,t4,0x8
	for(j = 0; j < size_a + size_b -1; ++j){
     1ea:	0000                	unimp
     1ec:	0001                	nop
     1ee:	a258                	fsd	fa4,128(a2)
	for(j = 0; j < size_a + size_b -1; ++j){
     1f0:	000e                	c.slli	zero,0x3
     1f2:	ae00                	fsd	fs0,24(a2)
     1f4:	000e                	c.slli	zero,0x3
}
     1f6:	0300                	addi	s0,sp,384
     1f8:	8600                	0x8600
     1fa:	9f7f                	0x9f7f
     1fc:	0eae                	slli	t4,t4,0xb
     1fe:	0000                	unimp
     200:	0eb4                	addi	a3,sp,856
     202:	0000                	unimp
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
     20a:	0eb4                	addi	a3,sp,856
     20c:	0000                	unimp
     20e:	0eea                	slli	t4,t4,0x1a
     210:	0000                	unimp
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
				line[size_b-1-j][k] = pola[k]*polb[j];
     216:	0000                	unimp
     218:	0000                	unimp
     21a:	0000                	unimp
     21c:	2200                	fld	fs0,0(a2)
     21e:	000e                	c.slli	zero,0x3
     220:	4400                	lw	s0,8(s0)
     222:	000e                	c.slli	zero,0x3
     224:	0100                	addi	s0,sp,128
			for (k = size_a-1; k >= 0; k = k-1 ){
     226:	5b00                	lw	s0,48(a4)
				line[size_b-1-j][k] = pola[k]*polb[j];
     228:	0e44                	addi	s1,sp,788
     22a:	0000                	unimp
     22c:	0eac                	addi	a1,sp,856
			for (k = size_a-1; k >= 0; k = k-1 ){
     22e:	0000                	unimp
     230:	0001                	nop
		for (j = size_b -1; j >= 0; j = j-1){
     232:	ac65                	j	4ea <polydiv+0xc6>
     234:	000e                	c.slli	zero,0x3
     236:	b400                	fsd	fs0,40(s0)
     238:	000e                	c.slli	zero,0x3
			for (k = size_a-1; k >= 0; k = k-1 ){
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
				line[size_b-1-j][k + j] = pola[k]*polb[j];
     23e:	5b01                	li	s6,-32
     240:	b49f 000e ea00      	0xea00000eb49f
     246:	000e                	c.slli	zero,0x3
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
     254:	0e22                	slli	t3,t3,0x8
			for (k = size_a-1; k >= 0; k = k-1 ){
     256:	0000                	unimp
     258:	0e3c                	addi	a5,sp,792
		for (j = size_b -1; j >= 0; j = j-1){
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	3c5c                	fld	fa5,184(s0)
     260:	000e                	c.slli	zero,0x3
			line[i][j] = line[i][j] % mod;
     262:	a600                	fsd	fs0,8(a2)
		for(j = 0; j < size_a + size_b -1; ++j){
     264:	000e                	c.slli	zero,0x3
     266:	0100                	addi	s0,sp,128
			line[i][j] = line[i][j] % mod;
     268:	6200                	flw	fs0,0(a2)
     26a:	0ea6                	slli	t4,t4,0x9
     26c:	0000                	unimp
     26e:	0eb4                	addi	a3,sp,856
		for(j = 0; j < size_a + size_b -1; ++j){
     270:	0000                	unimp
     272:	0004                	0x4
	for (i = 0; i < size_b; ++i){
     274:	9f5c01f3          	0x9f5c01f3
     278:	0eb4                	addi	a3,sp,856
     27a:	0000                	unimp
		for(j = 0; j < size_a + size_b -1; ++j){
     27c:	0eea                	slli	t4,t4,0x1a
     27e:	0000                	unimp
			product[j] += line[i][j];
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
     286:	0000                	unimp
		for(i = 0; i < size_b; ++i){
     288:	0000                	unimp
			product[j] += line[i][j];
     28a:	2200                	fld	fs0,0(a2)
     28c:	000e                	c.slli	zero,0x3
     28e:	3e00                	fld	fs0,56(a2)
     290:	000e                	c.slli	zero,0x3
     292:	0100                	addi	s0,sp,128
     294:	5d00                	lw	s0,56(a0)
		for(i = 0; i < size_b; ++i){
     296:	0e3e                	slli	t3,t3,0xf
     298:	0000                	unimp
	for(j = 0; j < size_a + size_b -1; ++j){
     29a:	00000e57          	0xe57
     29e:	0001                	nop
		for(i = 0; i < size_b; ++i){
     2a0:	575a                	lw	a4,180(sp)
     2a2:	000e                	c.slli	zero,0x3
		product[j] = product[j] % mod;
     2a4:	ea00                	fsw	fs0,16(a2)
	for(j = 0; j < size_a + size_b -1; ++j){
     2a6:	000e                	c.slli	zero,0x3
     2a8:	0400                	addi	s0,sp,512
		product[j] = product[j] % mod;
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
     2ae:	009f 0000 0000      	0x9f
int line[size_b][size_a + size_b];
     2b4:	0000                	unimp
     2b6:	2200                	fld	fs0,0(a2)
     2b8:	000e                	c.slli	zero,0x3
     2ba:	4600                	lw	s0,8(a2)
     2bc:	000e                	c.slli	zero,0x3
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
     2c2:	0e46                	slli	t3,t3,0x11
     2c4:	0000                	unimp
     2c6:	0eb0                	addi	a2,sp,856
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c8:	0000                	unimp
     2ca:	0001                	nop
     2cc:	000eb067          	0xeb067
     2d0:	b400                	fsd	fs0,40(s0)
     2d2:	000e                	c.slli	zero,0x3
     2d4:	0400                	addi	s0,sp,512
     2d6:	f300                	fsw	fs0,32(a4)
     2d8:	5e01                	li	t3,-32
int line[size_b][size_a + size_b];
     2da:	b49f 000e ea00      	0xea00000eb49f
     2e0:	000e                	c.slli	zero,0x3
int pola[size_a];
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
     2ee:	0e22                	slli	t3,t3,0x8
int polb[size_b];
     2f0:	0000                	unimp
     2f2:	00000e57          	0xe57
int pola[size_a];
     2f6:	0001                	nop
int polb[size_b];
     2f8:	575f 000e ea00      	0xea00000e575f
int line[size_b][size_a + size_b];
     2fe:	000e                	c.slli	zero,0x3
int pola[size_a];
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
int polb[size_b];
     304:	5f01                	li	t5,-32
			line[i][j] = 0;
     306:	009f 0000 0000      	0x9f
	for (i = 0; i < size_b; ++i){
     30c:	0000                	unimp
     30e:	2200                	fld	fs0,0(a2)
			product2[j] = 0;		
     310:	000e                	c.slli	zero,0x3
     312:	5700                	lw	s0,40(a4)
     314:	000e                	c.slli	zero,0x3
     316:	0100                	addi	s0,sp,128
	for (i = 0; i < size_b; ++i){
     318:	6000                	flw	fs0,0(s0)
     31a:	00000e57          	0xe57
	for(i = 0; i < size_a; ++i){
     31e:	0eaa                	slli	t4,t4,0xa
     320:	0000                	unimp
	for(i = 0; i < size_b; ++i){
     322:	0001                	nop
     324:	aa64                	fsd	fs1,208(a2)
     326:	000e                	c.slli	zero,0x3
	if(star_mult == 1){
     328:	b400                	fsd	fs0,40(s0)
     32a:	000e                	c.slli	zero,0x3
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
     330:	6001                	0x6001
     332:	b49f 000e ea00      	0xea00000eb49f
		for (j = size_b -1; j >= 0; j = j-1){
     338:	000e                	c.slli	zero,0x3
			for (k = size_a-1; k >= 0; k = k-1 ){
     33a:	0100                	addi	s0,sp,128
     33c:	6400                	flw	fs0,8(s0)
	...
			line[i][j] = 0;
     346:	0e58                	addi	a4,sp,788
			product2[j] = 0;		
     348:	0000                	unimp
     34a:	00000e67          	jalr	t3,zero # 0 <__DYNAMIC>
		for(j = 0; j < size_a + size_b -1; ++j){
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
     352:	0000                	unimp
	for (i = 0; i < size_b; ++i){
     354:	0000                	unimp
     356:	0000                	unimp
     358:	6a00                	flw	fs0,16(a2)
     35a:	000e                	c.slli	zero,0x3
		for(j = 0; j < size_a + size_b -1; ++j){
     35c:	8800                	0x8800
     35e:	000e                	c.slli	zero,0x3
		pola[i] = a[i];
     360:	0100                	addi	s0,sp,128
     362:	5a00                	lw	s0,48(a2)
     364:	0e88                	addi	a0,sp,848
     366:	0000                	unimp
     368:	00000e8b          	0xe8b
	for(i = 0; i < size_a; ++i){
     36c:	0001                	nop
		pola[i] = a[i];
     36e:	b45c                	fsd	fa5,168(s0)
     370:	000e                	c.slli	zero,0x3
	for(i = 0; i < size_a; ++i){
     372:	d800                	sw	s0,48(s0)
		polb[i] = b[i];
     374:	000e                	c.slli	zero,0x3
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
     382:	0e8c                	addi	a1,sp,848
     384:	0000                	unimp
	for(i = 0; i < size_b; ++i){
     386:	00000e97          	auipc	t4,0x0
				line[size_b-1-j][k] = pola[k]*polb[j];
     38a:	0001                	nop
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
     390:	0000                	unimp
     392:	0000                	unimp
     394:	9800                	0x9800
     396:	000e                	c.slli	zero,0x3
			for (k = size_a-1; k >= 0; k = k-1 ){
     398:	b400                	fsd	fs0,40(s0)
				line[size_b-1-j][k] = pola[k]*polb[j];
     39a:	000e                	c.slli	zero,0x3
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
			for (k = size_a-1; k >= 0; k = k-1 ){
     3a0:	0ed8                	addi	a4,sp,852
     3a2:	0000                	unimp
		for (j = size_b -1; j >= 0; j = j-1){
     3a4:	0eea                	slli	t4,t4,0x1a
     3a6:	0000                	unimp
     3a8:	0001                	nop
     3aa:	005a                	c.slli	zero,0x16
     3ac:	0000                	unimp
     3ae:	0000                	unimp
     3b0:	0000                	unimp
     3b2:	6a00                	flw	fs0,16(a2)
     3b4:	000e                	c.slli	zero,0x3
		for(i = 0; i < size_b; ++i){
     3b6:	7000                	flw	fs0,32(s0)
	for(j = 0; j < size_a + size_b -1; ++j){
     3b8:	000e                	c.slli	zero,0x3
     3ba:	0100                	addi	s0,sp,128
}
     3bc:	5900                	lw	s0,48(a0)
     3be:	0e70                	addi	a2,sp,796
     3c0:	0000                	unimp
     3c2:	0e7c                	addi	a5,sp,796
     3c4:	0000                	unimp
     3c6:	0001                	nop
     3c8:	7c5d                	lui	s8,0xffff7
     3ca:	000e                	c.slli	zero,0x3
     3cc:	8200                	0x8200
     3ce:	000e                	c.slli	zero,0x3
     3d0:	0100                	addi	s0,sp,128
     3d2:	5e00                	lw	s0,56(a2)
     3d4:	0e98                	addi	a4,sp,848
     3d6:	0000                	unimp
     3d8:	0ea4                	addi	s1,sp,856
			for (k = size_a-1; k >= 0; k = k-1 ){
     3da:	0000                	unimp
     3dc:	0001                	nop
				line[size_b-1-j][k + j] = pola[k]*polb[j];
     3de:	b459                	j	fffffe64 <_stack_start+0xfffefe64>
     3e0:	000e                	c.slli	zero,0x3
     3e2:	be00                	fsd	fs0,56(a2)
     3e4:	000e                	c.slli	zero,0x3
     3e6:	0100                	addi	s0,sp,128
     3e8:	5d00                	lw	s0,56(a0)
     3ea:	0ebe                	slli	t4,t4,0xf
     3ec:	0000                	unimp
			for (k = size_a-1; k >= 0; k = k-1 ){
     3ee:	0ec4                	addi	s1,sp,852
				line[size_b-1-j][k + j] = pola[k]*polb[j];
     3f0:	0000                	unimp
     3f2:	7f7d0003          	lb	zero,2039(s10) # f7f7 <_stack+0x17f7>
			for (k = size_a-1; k >= 0; k = k-1 ){
     3f6:	c49f 000e c600      	0xc600000ec49f
		for (j = size_b -1; j >= 0; j = j-1){
     3fc:	000e                	c.slli	zero,0x3
     3fe:	0100                	addi	s0,sp,128
     400:	5d00                	lw	s0,56(a0)
			product2[j] += line[i][j];
     402:	0ec6                	slli	t4,t4,0x11
     404:	0000                	unimp
     406:	0ed8                	addi	a4,sp,852
		for(i = 0; i < size_b; ++i){
     408:	0000                	unimp
			product2[j] += line[i][j];
     40a:	0001                	nop
     40c:	d85e                	sw	s7,48(sp)
     40e:	000e                	c.slli	zero,0x3
     410:	e200                	fsw	fs0,0(a2)
     412:	000e                	c.slli	zero,0x3
     414:	0100                	addi	s0,sp,128
		for(i = 0; i < size_b; ++i){
     416:	5900                	lw	s0,48(a0)
     418:	0ee2                	slli	t4,t4,0x18
	for(j = 0; j < size_a + size_b -1; ++j){
     41a:	0000                	unimp
     41c:	0ee8                	addi	a0,sp,860
     41e:	0000                	unimp
		for(i = 0; i < size_b; ++i){
     420:	7f790003          	lb	zero,2039(s2) # d7f7 <_stack_len+0x97f7>
int v[size_N];
     424:	e89f 000e ea00      	0xea00000ee89f
     42a:	000e                	c.slli	zero,0x3
     42c:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     42e:	5900                	lw	s0,48(a0)
	...
     438:	0d8c                	addi	a1,sp,720
     43a:	0000                	unimp
     43c:	0da8                	addi	a0,sp,728
     43e:	0000                	unimp
     440:	0001                	nop
     442:	a85a                	fsd	fs6,16(sp)
     444:	000d                	c.nop	3
     446:	fa00                	fsw	fs0,48(a2)
     448:	000d                	c.nop	3
int v[size_N];
     44a:	0100                	addi	s0,sp,128
     44c:	5800                	lw	s0,48(s0)
     44e:	0dfa                	slli	s11,s11,0x1e
int q[size_N];
     450:	0000                	unimp
     452:	0e22                	slli	t3,t3,0x8
     454:	0000                	unimp
int numm[size_N];
     456:	0004                	0x4
     458:	9f5a01f3          	0x9f5a01f3
	...
int denumm[size_D];
     464:	0d8c                	addi	a1,sp,720
     466:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     468:	0da2                	slli	s11,s11,0x8
     46a:	0000                	unimp
     46c:	0001                	nop
int v[size_N];
     46e:	000da25b          	0xda25b
int denumm[size_D];
     472:	0800                	addi	s0,sp,16
     474:	000e                	c.slli	zero,0x3
     476:	0100                	addi	s0,sp,128
	for (i = 0; i < size_N; ++i){
     478:	6200                	flw	fs0,0(a2)
     47a:	0e08                	addi	a0,sp,784
     47c:	0000                	unimp
     47e:	0e10                	addi	a2,sp,784
     480:	0000                	unimp
	for (i = 0; i < size_N; ++i){
     482:	0004                	0x4
     484:	9f5b01f3          	0x9f5b01f3
     488:	0e10                	addi	a2,sp,784
	for (i = 0; i < size_N; ++i){
     48a:	0000                	unimp
     48c:	0e22                	slli	t3,t3,0x8
     48e:	0000                	unimp
	for (i = 0; i < size_D; ++i){
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
     494:	0000                	unimp
     496:	0000                	unimp
     498:	0000                	unimp
	for (i = 0; i < size_D; ++i){
     49a:	8c00                	0x8c00
     49c:	000d                	c.nop	3
     49e:	a600                	fsd	fs0,8(a2)
	for (i = 0; i < size_D; ++i){
     4a0:	000d                	c.nop	3
     4a2:	0100                	addi	s0,sp,128
     4a4:	5c00                	lw	s0,56(s0)
	for (i = 0; i < size_N; ++i){
     4a6:	0da6                	slli	s11,s11,0x9
     4a8:	0000                	unimp
     4aa:	0de6                	slli	s11,s11,0x19
	for (i = 0; i < size_N; ++i){
     4ac:	0000                	unimp
     4ae:	0001                	nop
     4b0:	e659                	bnez	a2,53e <polydiv+0x11a>
	for (i = size_D-1; i >= 0; i = i-1){
     4b2:	000d                	c.nop	3
     4b4:	2200                	fld	fs0,0(a2)
     4b6:	000e                	c.slli	zero,0x3
     4b8:	0400                	addi	s0,sp,512
     4ba:	f300                	fsw	fs0,32(a4)
     4bc:	5c01                	li	s8,-32
	for (i = 0; i < size_N; ++i){
     4be:	009f 0000 0000      	0x9f
	for (u = 0; u < mod; ++u){
     4c4:	0000                	unimp
     4c6:	8c00                	0x8c00
     4c8:	000d                	c.nop	3
     4ca:	b300                	fsd	fs0,32(a4)
		numm[i] = num[i];	
     4cc:	000d                	c.nop	3
     4ce:	0100                	addi	s0,sp,128
     4d0:	5d00                	lw	s0,56(a0)
     4d2:	00000db3          	add	s11,zero,zero
     4d6:	0e0c                	addi	a1,sp,784
	for (i = 0; i < size_N; ++i){
     4d8:	0000                	unimp
		numm[i] = num[i];	
     4da:	0001                	nop
	for (i = 0; i < size_N; ++i){
     4dc:	0c64                	addi	s1,sp,540
			numm[i] = numm[i] + mod;	
     4de:	000e                	c.slli	zero,0x3
     4e0:	1000                	addi	s0,sp,32
		while (numm[i] < 0)
     4e2:	000e                	c.slli	zero,0x3
     4e4:	0400                	addi	s0,sp,512
     4e6:	f300                	fsw	fs0,32(a4)
	for (i = 0; i < size_N; ++i){
     4e8:	5d01                	li	s10,-32
     4ea:	109f 000e 2200      	0x2200000e109f
	for (i = 0; i < size_N; ++i){
     4f0:	000e                	c.slli	zero,0x3
     4f2:	0100                	addi	s0,sp,128
		numm[i] = numm[i] % mod;
     4f4:	6400                	flw	fs0,8(s0)
	...
		denumm[i] = denum[i];	
     4fe:	0d8c                	addi	a1,sp,720
     500:	0000                	unimp
     502:	00000db3          	add	s11,zero,zero
     506:	0001                	nop
     508:	b35e                	fsd	fs7,416(sp)
	for (i = 0; i < size_D; ++i){
     50a:	000d                	c.nop	3
		denumm[i] = denum[i];	
     50c:	0a00                	addi	s0,sp,272
	for (i = 0; i < size_D; ++i){
     50e:	000e                	c.slli	zero,0x3
			denumm[i] = denumm[i] + mod;	
     510:	0100                	addi	s0,sp,128
     512:	6300                	flw	fs0,0(a4)
		while (denumm[i] < 0)
     514:	0e0a                	slli	t3,t3,0x2
     516:	0000                	unimp
     518:	0e10                	addi	a2,sp,784
	for (i = 0; i < size_D; ++i){
     51a:	0000                	unimp
     51c:	0004                	0x4
     51e:	9f5e01f3          	0x9f5e01f3
	for (i = 0; i < size_D; ++i){
     522:	0e10                	addi	a2,sp,784
     524:	0000                	unimp
		denumm[i] = denumm[i] % mod;
     526:	0e22                	slli	t3,t3,0x8
     528:	0000                	unimp
     52a:	0001                	nop
     52c:	00000063          	beqz	zero,52c <polydiv+0x108>
		q[i] = 0;	
     530:	0000                	unimp
     532:	0000                	unimp
     534:	c600                	sw	s0,8(a2)
     536:	000d                	c.nop	3
     538:	f300                	fsw	fs0,32(a4)
	for (i = 0; i < size_N; ++i){
     53a:	000d                	c.nop	3
     53c:	0100                	addi	s0,sp,128
		v[i] = 0;	
     53e:	5a00                	lw	s0,48(a2)
	...
	for (i = 0; i < size_N; ++i){
     548:	0dc6                	slli	s11,s11,0x11
     54a:	0000                	unimp
		if( !(denumm[i] == 0) )
     54c:	0dcc                	addi	a1,sp,724
	for (i = size_D-1; i >= 0; i = i-1){
     54e:	0000                	unimp
     550:	0002                	c.slli64	zero
		if ( (b_N*u)%mod == 1 )
     552:	9f30                	0x9f30
     554:	0df4                	addi	a3,sp,732
     556:	0000                	unimp
     558:	0e06                	slli	t3,t3,0x1
     55a:	0000                	unimp
	for (u = 0; u < mod; ++u){
     55c:	0001                	nop
     55e:	1059                	c.nop	-10
		if( !(numm[i] == 0) )
     560:	000e                	c.slli	zero,0x3
	for (i = size_N-1; i >= 0; i = i-1){
     562:	1a00                	addi	s0,sp,304
     564:	000e                	c.slli	zero,0x3
     566:	0100                	addi	s0,sp,128
     568:	5900                	lw	s0,48(a0)
     56a:	0e1a                	slli	t3,t3,0x6
     56c:	0000                	unimp
     56e:	0e20                	addi	s0,sp,792
	while (d >= d2){
     570:	0000                	unimp
     572:	7f790003          	lb	zero,2039(s2)
		result[i] = q[i];
     576:	209f 000e 2200      	0x2200000e209f
     57c:	000e                	c.slli	zero,0x3
	for(i = 0; i < size_N; ++i){
     57e:	0100                	addi	s0,sp,128
     580:	5900                	lw	s0,48(a0)
	...
		result[i] = numm[i-size_N];
     58a:	0a96                	slli	s5,s5,0x5
     58c:	0000                	unimp
	for(i = size_N; i < (2*size_N); ++i){
     58e:	0ada                	slli	s5,s5,0x16
     590:	0000                	unimp
}
     592:	0001                	nop
     594:	da5a                	sw	s6,52(sp)
     596:	000a                	c.slli	zero,0x2
     598:	a000                	fsd	fs0,0(s0)
     59a:	000c                	0xc
     59c:	0100                	addi	s0,sp,128
     59e:	6200                	flw	fs0,0(a2)
     5a0:	0ca0                	addi	s0,sp,600
     5a2:	0000                	unimp
     5a4:	0cc4                	addi	s1,sp,596
     5a6:	0000                	unimp
     5a8:	7f850003          	lb	zero,2040(a0) # 30007f8 <_stack_start+0x2ff07f8>
     5ac:	c49f 000c e400      	0xe400000cc49f
     5b2:	000c                	0xc
     5b4:	0400                	addi	s0,sp,512
     5b6:	f300                	fsw	fs0,32(a4)
     5b8:	5a01                	li	s4,-32
     5ba:	e49f 000c 7800      	0x7800000ce49f
		v[(d-d2)] = u*r_d;
     5c0:	000d                	c.nop	3
     5c2:	0100                	addi	s0,sp,128
     5c4:	6200                	flw	fs0,0(a2)
     5c6:	0d78                	addi	a4,sp,668
     5c8:	0000                	unimp
		for (i = 0; i < size_N; ++i){
     5ca:	0d8c                	addi	a1,sp,720
     5cc:	0000                	unimp
     5ce:	7f850003          	lb	zero,2040(a0)
		product = polymult(denumm,size_D,v,size_D,mod,0);		
     5d2:	009f 0000 0000      	0x9f
     5d8:	0000                	unimp
     5da:	9600                	0x9600
     5dc:	000a                	c.slli	zero,0x2
     5de:	d200                	sw	s0,32(a2)
		for (i = 0; i < size_N; ++i){
     5e0:	000a                	c.slli	zero,0x2
     5e2:	0100                	addi	s0,sp,128
     5e4:	5b00                	lw	s0,48(a4)
     5e6:	0ad2                	slli	s5,s5,0x14
     5e8:	0000                	unimp
		for (i = 0; i < size_N; ++i){
     5ea:	0ccc                	addi	a1,sp,596
     5ec:	0000                	unimp
     5ee:	0001                	nop
     5f0:	000ccc67          	0xccc67
		for (i = 0; i < size_N; ++i){
     5f4:	e400                	fsw	fs0,8(s0)
     5f6:	000c                	0xc
     5f8:	0400                	addi	s0,sp,512
		for (i = 0; i < size_N; ++i){
     5fa:	f300                	fsw	fs0,32(a4)
     5fc:	5b01                	li	s6,-32
     5fe:	e49f 000c 8c00      	0x8c00000ce49f
		for (i = 0; i < size_N; ++i){
     604:	000d                	c.nop	3
     606:	0100                	addi	s0,sp,128
     608:	6700                	flw	fs0,8(a4)
	...
		for(i = 0; i < size_N; ++i){
     612:	0a96                	slli	s5,s5,0x5
     614:	0000                	unimp
     616:	0ad6                	slli	s5,s5,0x15
		for (i = size_N-1; i >= 0; i = i-1){
     618:	0000                	unimp
     61a:	0001                	nop
     61c:	d65c                	sw	a5,44(a2)
     61e:	000a                	c.slli	zero,0x2
     620:	c800                	sw	s0,16(s0)
     622:	000c                	0xc
     624:	0100                	addi	s0,sp,128
     626:	6600                	flw	fs0,8(a2)
     628:	0cc8                	addi	a0,sp,596
			v[i] = v[i] % mod;	
     62a:	0000                	unimp
		for (i = 0; i < size_N; ++i){
     62c:	0ce4                	addi	s1,sp,604
     62e:	0000                	unimp
			v[i] = v[i] % mod;	
     630:	0004                	0x4
     632:	9f5c01f3          	0x9f5c01f3
     636:	0ce4                	addi	s1,sp,604
		for (i = 0; i < size_N; ++i){
     638:	0000                	unimp
				product[i] = product[i] + mod;	
     63a:	0d8c                	addi	a1,sp,720
     63c:	0000                	unimp
			while (product[i] < 0)
     63e:	0001                	nop
     640:	0066                	c.slli	zero,0x19
     642:	0000                	unimp
		for (i = 0; i < size_N; ++i){
     644:	0000                	unimp
     646:	0000                	unimp
     648:	2400                	fld	fs0,8(s0)
			product[i] = product[i] % mod;
     64a:	000c                	0xc
		for (i = 0; i < size_N; ++i){
     64c:	2e00                	fld	fs0,24(a2)
     64e:	000c                	0xc
			product[i] = product[i] % mod;
     650:	0100                	addi	s0,sp,128
     652:	5a00                	lw	s0,48(a2)
	...
			numm[i] = numm[i] - product[i];
     65c:	0c3e                	slli	s8,s8,0xf
     65e:	0000                	unimp
     660:	0c5d                	addi	s8,s8,23
     662:	0000                	unimp
		for (i = 0; i < size_N; ++i){
     664:	0001                	nop
     666:	445a                	lw	s0,148(sp)
			numm[i] = numm[i] - product[i];
     668:	000d                	c.nop	3
     66a:	5800                	lw	s0,48(s0)
     66c:	000d                	c.nop	3
		for (i = 0; i < size_N; ++i){
     66e:	0100                	addi	s0,sp,128
				numm[i] = numm[i] + mod;	
     670:	5a00                	lw	s0,48(a2)
	...
		for (i = 0; i < size_N; ++i){
     67a:	0c5e                	slli	s8,s8,0x17
     67c:	0000                	unimp
     67e:	00000c73          	0xc73
		for (i = 0; i < size_N; ++i){
     682:	0001                	nop
     684:	585a                	lw	a6,180(sp)
			numm[i] = numm[i] % mod;
     686:	000d                	c.nop	3
     688:	6800                	flw	fs0,16(s0)
     68a:	000d                	c.nop	3
     68c:	0100                	addi	s0,sp,128
		for (i = 0; i < size_N; ++i){
     68e:	5a00                	lw	s0,48(a2)
	...
			q[i] = q[i] + v[i];		
     698:	0c74                	addi	a3,sp,540
		for(i = 0; i < size_N; ++i){
     69a:	0000                	unimp
     69c:	0c90                	addi	a2,sp,592
			q[i] = q[i] + v[i];		
     69e:	0000                	unimp
     6a0:	0001                	nop
     6a2:	685a                	flw	fa6,148(sp)
		for(i = 0; i < size_N; ++i){
     6a4:	000d                	c.nop	3
			q[i] = q[i] % mod;
     6a6:	7800                	flw	fs0,48(s0)
		for(i = 0; i < size_N; ++i){
     6a8:	000d                	c.nop	3
     6aa:	0100                	addi	s0,sp,128
			q[i] = q[i] % mod;
     6ac:	5a00                	lw	s0,48(a2)
	...
			if( !(numm[i] == 0) )
     6b6:	0bd8                	addi	a4,sp,468
		for (i = size_N-1; i >= 0; i = i-1){
     6b8:	0000                	unimp
     6ba:	0ca8                	addi	a0,sp,600
			v[i] = 0;	
     6bc:	0000                	unimp
     6be:	0002                	c.slli64	zero
     6c0:	0072                	c.slli	zero,0x1c
     6c2:	0ca8                	addi	a0,sp,600
     6c4:	0000                	unimp
		for (i = 0; i < size_N; ++i){
     6c6:	0cc0                	addi	s0,sp,596
     6c8:	0000                	unimp
     6ca:	0002                	c.slli64	zero
     6cc:	0084                	addi	s1,sp,64
		result[i] = q[i];
     6ce:	0cc0                	addi	s0,sp,596
     6d0:	0000                	unimp
     6d2:	0cc4                	addi	s1,sp,596
     6d4:	0000                	unimp
     6d6:	0010                	0x10
     6d8:	0091                	addi	ra,ra,4
	for(i = 0; i < size_N; ++i){
     6da:	0085                	addi	ra,ra,1
		result[i] = q[i];
     6dc:	2432                	fld	fs0,264(sp)
	for(i = 0; i < size_N; ++i){
     6de:	f0090f23          	sb	zero,-226(s2)
		result[i] = numm[i-size_N];
     6e2:	1c1a                	slli	s8,s8,0x26
     6e4:	f00a                	fsw	ft2,32(sp)
     6e6:	1c01                	addi	s8,s8,-32
     6e8:	0cc4                	addi	s1,sp,596
     6ea:	0000                	unimp
	for(i = size_N; i < (2*size_N); ++i){
     6ec:	0ce4                	addi	s1,sp,604
     6ee:	0000                	unimp
     6f0:	00910013          	addi	zero,sp,9
  int ri_2[size]; // MX-ring poly, a
     6f4:	235a01f3          	0x235a01f3
     6f8:	3201                	jal	fffffff8 <_stack_start+0xfffefff8>
     6fa:	2324                	fld	fs1,64(a4)
int* ext_euclid(int* polyR, int* polyf, int size, int mod){
     6fc:	1af0090f          	0x1af0090f
     700:	0a1c                	addi	a5,sp,272
     702:	01f0                	addi	a2,sp,204
     704:	e41c                	fsw	fa5,8(s0)
     706:	000c                	0xc
     708:	8c00                	0x8c00
     70a:	000d                	c.nop	3
     70c:	0200                	addi	s0,sp,256
     70e:	7200                	flw	fs0,32(a2)
	...
  int ri_2[size]; // MX-ring poly, a
     718:	dc00                	sw	s0,56(s0)
     71a:	de00000b          	0xde00000b
  int ri_1[size]; // f-random poly, f[N] = 0, b
     71e:	0200000b          	0x200000b
     722:	3100                	fld	fs0,32(a0)
  int ri[size];
     724:	de9f 000b e400      	0xe400000bde9f
  int ti_1[size]; // ti_1[0] = 1 
     72a:	0100000b          	0x100000b
     72e:	5f00                	lw	s0,56(a4)
  int ti[size];
     730:	0be8                	addi	a0,sp,476
     732:	0000                	unimp
     734:	0bee                	slli	s7,s7,0x1b
  int qi_1[size];
     736:	0000                	unimp
     738:	0001                	nop
     73a:	f65f 000b 0400      	0x400000bf65f
int* ext_euclid(int* polyR, int* polyf, int size, int mod){
     740:	000c                	0xc
     742:	0100                	addi	s0,sp,128
  int ri_2[size]; // MX-ring poly, a
     744:	5f00                	lw	s0,56(a4)
     746:	0c0e                	slli	s8,s8,0x3
  int temp[size];
     748:	0000                	unimp
	for (i = 0; i < size; ++i){
     74a:	00000c23          	sb	zero,24(zero) # 18 <__DYNAMIC+0x18>
     74e:	0001                	nop
	for (i = 0; i < size; ++i){
     750:	245f 000c 2e00      	0x2e00000c245f
	for (i = 0; i < size; ++i){
     756:	000c                	0xc
		ti_2[i] = 0;
     758:	0500                	addi	s0,sp,640
     75a:	8200                	0x8200
     75c:	3100                	fld	fs0,32(a0)
     75e:	9f24                	0x9f24
	for (i = 0; i < size; ++i){
     760:	0c2e                	slli	s8,s8,0xb
     762:	0000                	unimp
	for (i = 1; i < size; ++i){
     764:	0c3d                	addi	s8,s8,15
     766:	0000                	unimp
     768:	0001                	nop
	ti_1[0] = 1;
     76a:	3e5f 000c 4e00      	0x4e00000c3e5f
	for(i = N+1; i < (2*N+2); ++i){
     770:	000c                	0xc
     772:	0500                	addi	s0,sp,640
     774:	8200                	0x8200
     776:	3300                	fld	fs0,32(a4)
	for(i = 0; i < N+1; ++i){
     778:	9f1e                	add	t5,t5,t2
     77a:	0c4e                	slli	s8,s8,0x13
		ri_2[i] = polyR[i];
     77c:	0000                	unimp
     77e:	0c5e                	slli	s8,s8,0x17
     780:	0000                	unimp
     782:	0001                	nop
     784:	5e59                	li	t3,-10
     786:	000c                	0xc
	for (i = 0; i < size; ++i){
     788:	6600                	flw	fs0,8(a2)
		ri_2[i] = polyR[i];
     78a:	000c                	0xc
	for (i = 0; i < size; ++i){
     78c:	0200                	addi	s0,sp,256
		ri_1[i] = polyf[i];
     78e:	3000                	fld	fs0,32(s0)
     790:	669f 000c 6e00      	0x6e00000c669f
     796:	000c                	0xc
     798:	0100                	addi	s0,sp,128
	for (i = 0; i < size; ++i){
     79a:	5e00                	lw	s0,56(a2)
		ri_1[i] = polyf[i];
     79c:	0c74                	addi	a3,sp,540
	for (i = 0; i < size; ++i){
     79e:	0000                	unimp
		ti_2[i] = 0;
     7a0:	0c86                	slli	s9,s9,0x1
     7a2:	0000                	unimp
     7a4:	0005                	c.nop	1
     7a6:	0082                	c.slli64	ra
     7a8:	2432                	fld	fs0,264(sp)
	for (i = 0; i < size; ++i){
     7aa:	869f 000c a000      	0xa000000c869f
		ti_1[i] = 0;
     7b0:	000c                	0xc
     7b2:	0100                	addi	s0,sp,128
     7b4:	6800                	flw	fs0,16(s0)
     7b6:	0ca0                	addi	s0,sp,600
	for (i = 1; i < size; ++i){
     7b8:	0000                	unimp
     7ba:	0d20                	addi	s0,sp,664
			ri_2[i] = ri_2[i] +mod;		
     7bc:	0000                	unimp
     7be:	0001                	nop
		while(ri_2[i] < 0){
     7c0:	205f 000d 2200      	0x2200000d205f
	for(i = 0; i < N+1; ++i){
     7c6:	000d                	c.nop	3
     7c8:	0300                	addi	s0,sp,384
     7ca:	7f00                	flw	fs0,56(a4)
     7cc:	9f7f                	0x9f7f
     7ce:	0d22                	slli	s10,s10,0x8
     7d0:	0000                	unimp
     7d2:	0d44                	addi	s1,sp,660
     7d4:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     7d6:	0001                	nop
     7d8:	445f 000d 5400      	0x5400000d445f
     7de:	000d                	c.nop	3
	for(i = 0; i < N+1; ++i){
     7e0:	0100                	addi	s0,sp,128
     7e2:	5900                	lw	s0,48(a0)
     7e4:	0d54                	addi	a3,sp,660
	for(i = 0; i < N+1; ++i){
     7e6:	0000                	unimp
     7e8:	0d56                	slli	s10,s10,0x15
     7ea:	0000                	unimp
	res = polydiv(ri_2, N+1, ri_1, N+1, mod);
     7ec:	7f790003          	lb	zero,2039(s2)
     7f0:	569f 000d 5800      	0x5800000d569f
     7f6:	000d                	c.nop	3
	for(i = N+1; i < (2*N+2); ++i){
     7f8:	0100                	addi	s0,sp,128
     7fa:	5900                	lw	s0,48(a0)
     7fc:	0d58                	addi	a4,sp,660
     7fe:	0000                	unimp
     800:	0d5c                	addi	a5,sp,660
     802:	0000                	unimp
     804:	0001                	nop
	for(i = 0; i < N+1; ++i){
     806:	5c5e                	lw	s8,244(sp)
     808:	000d                	c.nop	3
     80a:	6600                	flw	fs0,8(a2)
     80c:	000d                	c.nop	3
     80e:	0300                	addi	s0,sp,384
	for(i = 0; i < N+1; ++i){
     810:	7e00                	flw	fs0,56(a2)
     812:	9f7f                	0x9f7f
     814:	0d66                	slli	s10,s10,0x19
     816:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     818:	0d68                	addi	a0,sp,668
     81a:	0000                	unimp
     81c:	0001                	nop
	res1 = polydiv(temp, N+1, ri_1, N+1, mod);
     81e:	685e                	flw	fa6,212(sp)
     820:	000d                	c.nop	3
     822:	7800                	flw	fs0,48(s0)
     824:	000d                	c.nop	3
     826:	0100                	addi	s0,sp,128
     828:	6800                	flw	fs0,16(s0)
	for(i = 0; i < N+1; ++i){
     82a:	0d78                	addi	a4,sp,668
     82c:	0000                	unimp
     82e:	0d88                	addi	a0,sp,720
     830:	0000                	unimp
     832:	0001                	nop
	for(i = 0; i < N+1; ++i){
     834:	885f 000d 8a00      	0x8a00000d885f
	for(i = 0; i < N+1; ++i){
     83a:	000d                	c.nop	3
     83c:	0300                	addi	s0,sp,384
     83e:	7f00                	flw	fs0,56(a4)
	res2 = polymult(qi_1,N+1,ti_1,N+1,mod,0);
     840:	9f7f                	0x9f7f
     842:	0d8a                	slli	s11,s11,0x2
     844:	0000                	unimp
     846:	0d8c                	addi	a1,sp,720
     848:	0000                	unimp
     84a:	0001                	nop
     84c:	005f 0000 0000      	0x5f
	for(i = 0; i < N+1; ++i){
     852:	0000                	unimp
     854:	a400                	fsd	fs0,8(s0)
	for(i = 0; i < N+1; ++i){
     856:	000c                	0xc
     858:	e400                	fsw	fs0,8(s0)
     85a:	000c                	0xc
	for(i = 0; i < N+1; ++i){
     85c:	0600                	addi	s0,sp,768
     85e:	0300                	addi	s0,sp,384
     860:	1c04                	addi	s1,sp,560
     862:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     864:	009f 0000 0000      	0x9f
     86a:	0000                	unimp
     86c:	d800                	sw	s0,48(s0)
	for(i = 0; i < N+1; ++i){
     86e:	a000000b          	0xa000000b
     872:	000c                	0xc
	for(i = 0; i < N+1; ++i){
     874:	0100                	addi	s0,sp,128
     876:	6200                	flw	fs0,0(a2)
     878:	0ca0                	addi	s0,sp,600
	for(i = 0; i < N+1; ++i){
     87a:	0000                	unimp
     87c:	0cc4                	addi	s1,sp,596
     87e:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     880:	7f850003          	lb	zero,2040(a0)
     884:	c49f 000c e400      	0xe400000cc49f
	for(i = 0; i < N+1; ++i){
     88a:	000c                	0xc
	for(i = 0; i < N+1; ++i){
     88c:	0400                	addi	s0,sp,512
     88e:	f300                	fsw	fs0,32(a4)
     890:	5a01                	li	s4,-32
	for(i = 0; i < N+1; ++i){
     892:	e49f 000c 7800      	0x7800000ce49f
	controlR = 0;
     898:	000d                	c.nop	3
	for(i = 0; i < N+1; ++i){
     89a:	0100                	addi	s0,sp,128
     89c:	6200                	flw	fs0,0(a2)
     89e:	0d78                	addi	a4,sp,668
while(!(controlR == 0)){
     8a0:	0000                	unimp
     8a2:	0d8c                	addi	a1,sp,720
	for (j = 0; j < mod; ++j){
     8a4:	0000                	unimp
		if(((ri_2[0]*j) % mod) ==1)
     8a6:	7f850003          	lb	zero,2040(a0)
	for (j = 0; j < mod; ++j){
     8aa:	009f 0000 0000      	0x9f
     8b0:	0000                	unimp
     8b2:	f200                	fsw	fs0,32(a2)
	for(i = 0; i < N+1; ++i){
     8b4:	0006                	c.slli	zero,0x1
     8b6:	7800                	flw	fs0,48(s0)
}
     8b8:	01000007          	0x1000007
     8bc:	5a00                	lw	s0,48(a2)
     8be:	0778                	addi	a4,sp,908
     8c0:	0000                	unimp
     8c2:	077c                	addi	a5,sp,908
     8c4:	0000                	unimp
     8c6:	0004                	0x4
     8c8:	9f5a01f3          	0x9f5a01f3
     8cc:	077c                	addi	a5,sp,908
     8ce:	0000                	unimp
     8d0:	07bc                	addi	a5,sp,968
     8d2:	0000                	unimp
     8d4:	0001                	nop
     8d6:	bc5a                	fsd	fs6,56(sp)
     8d8:	96000007          	0x96000007
     8dc:	000a                	c.slli	zero,0x2
     8de:	0400                	addi	s0,sp,512
     8e0:	f300                	fsw	fs0,32(a4)
		ri_2[i] = ri_2[i] % mod;
     8e2:	5a01                	li	s4,-32
	for(i = 0; i < N+1; ++i){
     8e4:	009f 0000 0000      	0x9f
		ri_2[i] = ri_2[i] % mod;
     8ea:	0000                	unimp
     8ec:	f200                	fsw	fs0,32(a2)
     8ee:	0006                	c.slli	zero,0x1
	for(i = 0; i < N+1; ++i){
     8f0:	7800                	flw	fs0,48(s0)
			ri_1[i] = ri_1[i] +mod;		
     8f2:	01000007          	0x1000007
		while(ri_1[i] < 0){
     8f6:	5b00                	lw	s0,48(a4)
     8f8:	0778                	addi	a4,sp,908
     8fa:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     8fc:	077c                	addi	a5,sp,908
     8fe:	0000                	unimp
     900:	0004                	0x4
		ri_1[i] = ri_1[i] % mod;
     902:	9f5b01f3          	0x9f5b01f3
	for(i = 0; i < N+1; ++i){
     906:	077c                	addi	a5,sp,908
		ri_1[i] = ri_1[i] % mod;
     908:	0000                	unimp
     90a:	07bc                	addi	a5,sp,968
     90c:	0000                	unimp
     90e:	0001                	nop
	for(i = 0; i < N+1; ++i){
     910:	0007bc5b          	0x7bc5b
		ri[i-(N+1)] = res[i];
     914:	9600                	0x9600
     916:	000a                	c.slli	zero,0x2
     918:	0400                	addi	s0,sp,512
	for(i = N+1; i < (2*N+2); ++i){
     91a:	f300                	fsw	fs0,32(a4)
     91c:	5b01                	li	s6,-32
		ri[i-(N+1)] = res[i];
     91e:	009f 0000 0000      	0x9f
		temp[i] = ri_2[i] - ri[i];
     924:	0000                	unimp
     926:	f200                	fsw	fs0,32(a2)
     928:	0006                	c.slli	zero,0x1
     92a:	7800                	flw	fs0,48(s0)
     92c:	01000007          	0x1000007
     930:	5c00                	lw	s0,56(s0)
     932:	0778                	addi	a4,sp,908
	for(i = 0; i < N+1; ++i){
     934:	0000                	unimp
		temp[i] = ri_2[i] - ri[i];
     936:	077c                	addi	a5,sp,908
     938:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     93a:	0001                	nop
     93c:	00077c63          	bgeu	a4,zero,954 <ext_euclid+0x262>
			temp[i] = temp[i] + mod;		
     940:	bc00                	fsd	fs0,56(s0)
		while(temp[i] < 0){
     942:	01000007          	0x1000007
     946:	5c00                	lw	s0,56(s0)
	for(i = 0; i < N+1; ++i){
     948:	07bc                	addi	a5,sp,968
     94a:	0000                	unimp
     94c:	08c6                	slli	a7,a7,0x11
		temp[i] = temp[i] % mod;
     94e:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     950:	0001                	nop
     952:	0008c663          	bltz	a7,95e <ext_euclid+0x26c>
		temp[i] = temp[i] % mod;
     956:	e200                	fsw	fs0,0(a2)
     958:	0008                	0x8
     95a:	0400                	addi	s0,sp,512
	for(i = 0; i < N+1; ++i){
     95c:	f300                	fsw	fs0,32(a4)
		qi_1[i] = res1[i];
     95e:	5c01                	li	s8,-32
     960:	e29f 0008 9600      	0x96000008e29f
     966:	000a                	c.slli	zero,0x2
     968:	0100                	addi	s0,sp,128
	for(i = 0; i < N+1; ++i){
     96a:	6300                	flw	fs0,0(a4)
	...
		while ( qi_1[i] < 0){
     974:	06f2                	slli	a3,a3,0x1c
     976:	0000                	unimp
     978:	074c                	addi	a1,sp,900
	for(i = 0; i < N+1; ++i){
     97a:	0000                	unimp
     97c:	0001                	nop
     97e:	4c5d                	li	s8,23
		qi_1[i] = qi_1[i] % mod;
     980:	c4000007          	0xc4000007
	for(i = 0; i < N+1; ++i){
     984:	0008                	0x8
		qi_1[i] = qi_1[i] % mod;
     986:	0100                	addi	s0,sp,128
     988:	6200                	flw	fs0,0(a2)
     98a:	08c4                	addi	s1,sp,84
     98c:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     98e:	08e2                	slli	a7,a7,0x18
		temp[i] = res2[i];
     990:	0000                	unimp
     992:	0004                	0x4
     994:	9f5d01f3          	0x9f5d01f3
     998:	08e2                	slli	a7,a7,0x18
     99a:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     99c:	0a96                	slli	s5,s5,0x5
		temp[i] = res2[i];
     99e:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     9a0:	0001                	nop
			temp[i] = temp[i] + mod;		
     9a2:	0062                	c.slli	zero,0x18
     9a4:	0000                	unimp
		while ( temp[i] < 0){
     9a6:	0000                	unimp
     9a8:	0000                	unimp
     9aa:	b800                	fsd	fs0,48(s0)
	for(i = 0; i < N+1; ++i){
     9ac:	0008                	0x8
     9ae:	e200                	fsw	fs0,0(a2)
     9b0:	0008                	0x8
		temp[i] = temp[i] % mod;
     9b2:	0600                	addi	s0,sp,768
     9b4:	0300                	addi	s0,sp,384
	for(i = 0; i < N+1; ++i){
     9b6:	1a74                	addi	a3,sp,316
     9b8:	0000                	unimp
		temp[i] = temp[i] % mod;
     9ba:	009f 0000 0000      	0x9f
     9c0:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     9c2:	4a00                	lw	s0,16(a2)
		ti[i] = ti_2[i] - temp[i];
     9c4:	c2000007          	0xc2000007
     9c8:	0008                	0x8
     9ca:	0100                	addi	s0,sp,128
     9cc:	5900                	lw	s0,48(a0)
     9ce:	08c2                	slli	a7,a7,0x10
     9d0:	0000                	unimp
     9d2:	08c6                	slli	a7,a7,0x11
     9d4:	0000                	unimp
     9d6:	7f830003          	lb	zero,2040(t1)
	for(i = 0; i < N+1; ++i){
     9da:	c69f 0008 e200      	0xe2000008c69f
     9e0:	0008                	0x8
     9e2:	0600                	addi	s0,sp,768
			ti[i] = ti[i] + mod;		
     9e4:	f300                	fsw	fs0,32(a4)
     9e6:	5c01                	li	s8,-32
		while ( ti[i] < 0){
     9e8:	1c31                	addi	s8,s8,-20
     9ea:	e29f 0008 9600      	0x96000008e29f
	for(i = 0; i < N+1; ++i){
     9f0:	000a                	c.slli	zero,0x2
     9f2:	0100                	addi	s0,sp,128
		ti[i] = ti[i] % mod;
     9f4:	5900                	lw	s0,48(a0)
	...
     9fe:	074a                	slli	a4,a4,0x12
     a00:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     a02:	074c                	addi	a1,sp,900
		ri_2[i] = ri_1[i];	
     a04:	0000                	unimp
     a06:	0002                	c.slli64	zero
     a08:	9f30                	0x9f30
     a0a:	074c                	addi	a1,sp,900
     a0c:	0000                	unimp
     a0e:	0758                	addi	a4,sp,900
	for(i = 0; i < N+1; ++i){
     a10:	0000                	unimp
		ri_2[i] = ri_1[i];	
     a12:	0001                	nop
	for(i = 0; i < N+1; ++i){
     a14:	605f 0007 6c00      	0x6c000007605f
		ri_1[i] = ri[i];	
     a1a:	01000007          	0x1000007
     a1e:	5f00                	lw	s0,56(a4)
     a20:	077c                	addi	a5,sp,908
	for(i = 0; i < N+1; ++i){
     a22:	0000                	unimp
		ri_1[i] = ri[i];	
     a24:	078a                	slli	a5,a5,0x2
	for(i = 0; i < N+1; ++i){
     a26:	0000                	unimp
		ti_2[i] = ti_1[i];	
     a28:	0001                	nop
     a2a:	8a5f 0007 8c00      	0x8c0000078a5f
     a30:	03000007          	0x3000007
     a34:	7f00                	flw	fs0,56(a4)
     a36:	9f7f                	0x9f7f
     a38:	078c                	addi	a1,sp,960
	for(i = 0; i < N+1; ++i){
     a3a:	0000                	unimp
		ti_2[i] = ti_1[i];	
     a3c:	079c                	addi	a5,sp,960
	for(i = 0; i < N+1; ++i){
     a3e:	0000                	unimp
		ti_1[i] = ti[i];	
     a40:	0001                	nop
     a42:	9c5f 0007 9e00      	0x9e0000079c5f
     a48:	03000007          	0x3000007
	for(i = 0; i < N+1; ++i){
     a4c:	7f00                	flw	fs0,56(a4)
		ti_1[i] = ti[i];	
     a4e:	9f7f                	0x9f7f
	for(i = 0; i < N+1; ++i){
     a50:	079e                	slli	a5,a5,0x7
		qi_1[i] = 0;
     a52:	0000                	unimp
     a54:	07d6                	slli	a5,a5,0x15
     a56:	0000                	unimp
     a58:	0001                	nop
     a5a:	d85f 0007 e000      	0xe0000007d85f
		controlR += ri[i];
     a60:	01000007          	0x1000007
     a64:	5e00                	lw	s0,56(a2)
     a66:	07e2                	slli	a5,a5,0x18
	for(i = 0; i < N+1; ++i){
     a68:	0000                	unimp
		controlR += ri[i];
     a6a:	07e8                	addi	a0,sp,972
	for(i = 0; i < N+1; ++i){
     a6c:	0000                	unimp
		if(((ri_2[0]*j) % mod) ==1)
     a6e:	0001                	nop
     a70:	e85c                	fsw	fa5,20(s0)
     a72:	ee000007          	0xee000007
     a76:	01000007          	0x1000007
     a7a:	5e00                	lw	s0,56(a2)
     a7c:	07f8                	addi	a4,sp,972
	for (j = 0; j < mod; ++j){
     a7e:	0000                	unimp
     a80:	07fc                	addi	a5,sp,972
		ti_2[i] = (ti_2[i]*j) % mod;
     a82:	0000                	unimp
	for(i = 0; i < N+1; ++i){
     a84:	0001                	nop
     a86:	0007fc63          	bgeu	a5,zero,a9e <generate_keys+0x8>
		ti_2[i] = (ti_2[i]*j) % mod;
     a8a:	0600                	addi	s0,sp,768
     a8c:	0008                	0x8
     a8e:	0100                	addi	s0,sp,128
     a90:	5f00                	lw	s0,56(a4)
     a92:	0808                	addi	a0,sp,16
	for(i = 0; i < N+1; ++i){
     a94:	0000                	unimp
int* generate_keys(int N, int p, int q){
     a96:	0812                	slli	a6,a6,0x4
     a98:	0000                	unimp
     a9a:	0001                	nop
     a9c:	125e                	slli	tp,tp,0x37
     a9e:	0008                	0x8
     aa0:	1a00                	addi	s0,sp,304
     aa2:	0008                	0x8
     aa4:	0100                	addi	s0,sp,128
     aa6:	5d00                	lw	s0,56(a0)
     aa8:	081a                	slli	a6,a6,0x6
     aaa:	0000                	unimp
     aac:	0820                	addi	s0,sp,24
     aae:	0000                	unimp
     ab0:	0001                	nop
     ab2:	2a5e                	fld	fs4,464(sp)
     ab4:	0008                	0x8
     ab6:	2c00                	fld	fs0,24(s0)
     ab8:	0008                	0x8
     aba:	0200                	addi	s0,sp,256
     abc:	3000                	fld	fs0,32(s0)
     abe:	2c9f 0008 3200      	0x320000082c9f
     ac4:	0008                	0x8
     ac6:	0100                	addi	s0,sp,128
     ac8:	5f00                	lw	s0,56(a4)
     aca:	0836                	slli	a6,a6,0xd
     acc:	0000                	unimp
     ace:	083c                	addi	a5,sp,24
int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     ad0:	0000                	unimp
     ad2:	0001                	nop
     ad4:	3c5c                	fld	fa5,184(s0)
     ad6:	0008                	0x8
     ad8:	4400                	lw	s0,8(s0)
     ada:	0008                	0x8
     adc:	0100                	addi	s0,sp,128
     ade:	5e00                	lw	s0,56(a2)
int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     ae0:	084e                	slli	a6,a6,0x13
     ae2:	0000                	unimp
     ae4:	0850                	addi	a2,sp,20
     ae6:	0000                	unimp
     ae8:	0002                	c.slli64	zero
int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     aea:	9f30                	0x9f30
     aec:	0850                	addi	a2,sp,20
     aee:	0000                	unimp
     af0:	0856                	slli	a6,a6,0x15
     af2:	0000                	unimp
     af4:	0001                	nop
     af6:	585f 0008 5e00      	0x5e000008585f
     afc:	0008                	0x8
     afe:	0100                	addi	s0,sp,128
     b00:	5d00                	lw	s0,56(a0)
     b02:	085e                	slli	a6,a6,0x17
     b04:	0000                	unimp
     b06:	0864                	addi	s1,sp,28
     b08:	0000                	unimp
     b0a:	0001                	nop
     b0c:	665f 0008 6e00      	0x6e000008665f
     b12:	0008                	0x8
     b14:	0100                	addi	s0,sp,128
     b16:	5e00                	lw	s0,56(a2)
     b18:	0870                	addi	a2,sp,28
     b1a:	0000                	unimp
     b1c:	0876                	slli	a6,a6,0x1d
     b1e:	0000                	unimp
     b20:	0001                	nop
     b22:	765c                	flw	fa5,44(a2)
     b24:	0008                	0x8
     b26:	7c00                	flw	fs0,56(s0)
     b28:	0008                	0x8
     b2a:	0100                	addi	s0,sp,128
     b2c:	5e00                	lw	s0,56(a2)
     b2e:	087c                	addi	a5,sp,28
     b30:	0000                	unimp
     b32:	089a                	slli	a7,a7,0x6
     b34:	0000                	unimp
     b36:	0001                	nop
     b38:	9c5f 0008 a600      	0xa60000089c5f
     b3e:	0008                	0x8
     b40:	0100                	addi	s0,sp,128
     b42:	5e00                	lw	s0,56(a2)
     b44:	08b4                	addi	a3,sp,88
     b46:	0000                	unimp
     b48:	08e2                	slli	a7,a7,0x18
     b4a:	0000                	unimp
     b4c:	0001                	nop
     b4e:	e25f 0008 e600      	0xe6000008e25f
     b54:	0008                	0x8
int polyR[N+1];
     b56:	0100                	addi	s0,sp,128
     b58:	5e00                	lw	s0,56(a2)
int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     b5a:	08e6                	slli	a7,a7,0x19
int polyR[N+1];
     b5c:	0000                	unimp
     b5e:	08f0                	addi	a2,sp,92
     b60:	0000                	unimp
     b62:	7f7e0003          	lb	zero,2039(t3)
     b66:	f09f 0008 f200      	0xf2000008f09f
	polyR[N] = 1;
     b6c:	0008                	0x8
     b6e:	0100                	addi	s0,sp,128
     b70:	5e00                	lw	s0,56(a2)
     b72:	08f2                	slli	a7,a7,0x1c
int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     b74:	0000                	unimp
     b76:	0902                	c.slli64	s2
     b78:	0000                	unimp
     b7a:	0001                	nop
     b7c:	025c                	addi	a5,sp,260
     b7e:	0009                	c.nop	2
     b80:	0600                	addi	s0,sp,768
     b82:	0009                	c.nop	2
     b84:	0100                	addi	s0,sp,128
     b86:	5e00                	lw	s0,56(a2)
     b88:	0906                	slli	s2,s2,0x1
     b8a:	0000                	unimp
     b8c:	0910                	addi	a2,sp,144
     b8e:	0000                	unimp
     b90:	7f7e0003          	lb	zero,2039(t3)
     b94:	109f 0009 1200      	0x12000009109f
     b9a:	0009                	c.nop	2
     b9c:	0100                	addi	s0,sp,128
     b9e:	5e00                	lw	s0,56(a2)
     ba0:	0912                	slli	s2,s2,0x4
     ba2:	0000                	unimp
     ba4:	091c                	addi	a5,sp,144
     ba6:	0000                	unimp
     ba8:	0001                	nop
     baa:	1c5f 0009 2200      	0x220000091c5f
     bb0:	0009                	c.nop	2
     bb2:	0300                	addi	s0,sp,384
     bb4:	7f00                	flw	fs0,56(a4)
     bb6:	9f7f                	0x9f7f
     bb8:	0922                	slli	s2,s2,0x8
     bba:	0000                	unimp
     bbc:	0924                	addi	s1,sp,152
     bbe:	0000                	unimp
     bc0:	0001                	nop
     bc2:	245f 0009 3600      	0x36000009245f
     bc8:	0009                	c.nop	2
     bca:	0100                	addi	s0,sp,128
     bcc:	5e00                	lw	s0,56(a2)
     bce:	0936                	slli	s2,s2,0xd
     bd0:	0000                	unimp
     bd2:	093a                	slli	s2,s2,0xe
     bd4:	0000                	unimp
     bd6:	7f7e0003          	lb	zero,2039(t3)
	polyR[0] = -1;
     bda:	3a9f 0009 3e00      	0x3e0000093a9f
	for(i = 1; i < N; ++i){
     be0:	0009                	c.nop	2
     be2:	0100                	addi	s0,sp,128
for (i = N; i < 55; ++i ){
     be4:	5e00                	lw	s0,56(a2)
     be6:	093e                	slli	s2,s2,0xf
     be8:	0000                	unimp
     bea:	094e                	slli	s2,s2,0x13
	for(i = 0; i < N; ++i){
     bec:	0000                	unimp
		random_keys[i] = f[i];		
     bee:	0001                	nop
     bf0:	4e5d                	li	t3,23
     bf2:	0009                	c.nop	2
     bf4:	5200                	lw	s0,32(a2)
	for(i = 0; i < N; ++i){
     bf6:	0009                	c.nop	2
     bf8:	0100                	addi	s0,sp,128
     bfa:	5e00                	lw	s0,56(a2)
     bfc:	0952                	slli	s2,s2,0x14
	for(i = N; i < (2*N); ++i){
     bfe:	0000                	unimp
     c00:	095c                	addi	a5,sp,148
     c02:	0000                	unimp
     c04:	7f7e0003          	lb	zero,2039(t3)
		random_keys[i] = g[i-N];		
     c08:	5c9f 0009 5e00      	0x5e0000095c9f
	for(i = N; i < (2*N); ++i){
     c0e:	0009                	c.nop	2
     c10:	0100                	addi	s0,sp,128
	for(i = (2*N); i < (3*N); ++i){
     c12:	5e00                	lw	s0,56(a2)
     c14:	095e                	slli	s2,s2,0x17
     c16:	0000                	unimp
	fp = ext_euclid(polyR, f, (N+1), p);
     c18:	096c                	addi	a1,sp,156
     c1a:	0000                	unimp
     c1c:	0001                	nop
     c1e:	6c5f 0009 6e00      	0x6e0000096c5f
	for(i = (2*N); i < (3*N); ++i){
     c24:	0009                	c.nop	2
		random_keys[i] = fp[i-(2*N)];
     c26:	0300                	addi	s0,sp,384
     c28:	7f00                	flw	fs0,56(a4)
     c2a:	9f7f                	0x9f7f
     c2c:	096e                	slli	s2,s2,0x1b
	for(i = (2*N); i < (3*N); ++i){
     c2e:	0000                	unimp
     c30:	0970                	addi	a2,sp,156
	fq = ext_euclid(polyR, f, (N+1), q);
     c32:	0000                	unimp
     c34:	0001                	nop
     c36:	705f 0009 8000      	0x80000009705f
     c3c:	0009                	c.nop	2
	for(i = (3*N); i < (4*N); ++i){
     c3e:	0100                	addi	s0,sp,128
     c40:	5c00                	lw	s0,56(s0)
     c42:	0980                	addi	s0,sp,208
     c44:	0000                	unimp
		random_keys[i] = fq[i-(3*N)];
     c46:	0984                	addi	s1,sp,208
     c48:	0000                	unimp
     c4a:	0001                	nop
     c4c:	845e                	mv	s0,s7
	for(i = (3*N); i < (4*N); ++i){
     c4e:	0009                	c.nop	2
     c50:	8e00                	0x8e00
	fg = polymult2(fq, N, g, N, 0); 
     c52:	0009                	c.nop	2
     c54:	0300                	addi	s0,sp,384
     c56:	7e00                	flw	fs0,56(a2)
     c58:	9f7f                	0x9f7f
     c5a:	098e                	slli	s3,s3,0x3
     c5c:	0000                	unimp
	for(i = 0; i < (2*N-1); ++i){
     c5e:	0990                	addi	a2,sp,208
     c60:	0000                	unimp
     c62:	0001                	nop
     c64:	905e                	c.add	zero,s7
     c66:	0009                	c.nop	2
     c68:	9e00                	0x9e00
	pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     c6a:	0009                	c.nop	2
     c6c:	0100                	addi	s0,sp,128
     c6e:	5f00                	lw	s0,56(a4)
     c70:	099e                	slli	s3,s3,0x7
     c72:	0000                	unimp
	for(i = (4*N); i < (5*N); ++i){
     c74:	09a0                	addi	s0,sp,216
     c76:	0000                	unimp
     c78:	7f7f0003          	lb	zero,2039(t5) # 1b7f7 <_stack_start+0xb7f7>
     c7c:	a09f 0009 a200      	0xa2000009a09f
		random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c82:	0009                	c.nop	2
     c84:	0100                	addi	s0,sp,128
	for(i = (4*N); i < (5*N); ++i){
     c86:	5f00                	lw	s0,56(a4)
     c88:	09a2                	slli	s3,s3,0x8
     c8a:	0000                	unimp
	for(i = (5*N); i < (6*N+1); ++i){
     c8c:	09b2                	slli	s3,s3,0xc
     c8e:	0000                	unimp
		random_keys[i] = polyR[i-(5*N)];
     c90:	0001                	nop
     c92:	b25d                	j	638 <polydiv+0x214>
     c94:	0009                	c.nop	2
     c96:	b800                	fsd	fs0,48(s0)
	for(i = (5*N); i < (6*N+1); ++i){
     c98:	0009                	c.nop	2
     c9a:	0100                	addi	s0,sp,128
     c9c:	5f00                	lw	s0,56(a4)
     c9e:	09b8                	addi	a4,sp,216
     ca0:	0000                	unimp
     ca2:	09c2                	slli	s3,s3,0x10
}
     ca4:	0000                	unimp
     ca6:	7f7f0003          	lb	zero,2039(t5)
     caa:	c29f 0009 c400      	0xc4000009c29f
     cb0:	0009                	c.nop	2
     cb2:	0100                	addi	s0,sp,128
     cb4:	5f00                	lw	s0,56(a4)
     cb6:	09c4                	addi	s1,sp,212
     cb8:	0000                	unimp
     cba:	09dc                	addi	a5,sp,212
     cbc:	0000                	unimp
     cbe:	0001                	nop
     cc0:	dc5e                	sw	s7,56(sp)
     cc2:	0009                	c.nop	2
     cc4:	e000                	fsw	fs0,0(s0)
     cc6:	0009                	c.nop	2
     cc8:	0300                	addi	s0,sp,384
     cca:	7e00                	flw	fs0,56(a2)
     ccc:	9f7f                	0x9f7f
     cce:	09e0                	addi	s0,sp,220
     cd0:	0000                	unimp
     cd2:	09e4                	addi	s1,sp,220
     cd4:	0000                	unimp
     cd6:	0001                	nop
     cd8:	e45e                	fsw	fs7,8(sp)
     cda:	0009                	c.nop	2
     cdc:	f400                	fsw	fs0,40(s0)
     cde:	0009                	c.nop	2
     ce0:	0100                	addi	s0,sp,128
     ce2:	5c00                	lw	s0,56(s0)
		polyR[i] = 0;		
     ce4:	09f4                	addi	a3,sp,220
     ce6:	0000                	unimp
     ce8:	09f8                	addi	a4,sp,220
     cea:	0000                	unimp
     cec:	0001                	nop
	for(i = 1; i < N; ++i){
     cee:	f85e                	fsw	fs7,48(sp)
     cf0:	0009                	c.nop	2
		f[i] = 0;
     cf2:	0200                	addi	s0,sp,256
     cf4:	000a                	c.slli	zero,0x2
     cf6:	0300                	addi	s0,sp,384
     cf8:	7e00                	flw	fs0,56(a2)
     cfa:	9f7f                	0x9f7f
     cfc:	0a02                	c.slli64	s4
     cfe:	0000                	unimp
		g[i] = 0;
     d00:	0a04                	addi	s1,sp,272
     d02:	0000                	unimp
     d04:	0001                	nop
     d06:	045e                	slli	s0,s0,0x17
     d08:	000a                	c.slli	zero,0x2
for (i = N; i < 55; ++i ){
     d0a:	1200                	addi	s0,sp,288
     d0c:	000a                	c.slli	zero,0x2
		random_keys[i] = f[i];		
     d0e:	0100                	addi	s0,sp,128
     d10:	5f00                	lw	s0,56(a4)
     d12:	0a12                	slli	s4,s4,0x4
     d14:	0000                	unimp
     d16:	0a14                	addi	a3,sp,272
     d18:	0000                	unimp
     d1a:	7f7f0003          	lb	zero,2039(t5)
	for(i = 0; i < N; ++i){
     d1e:	149f 000a 2400      	0x2400000a149f
		random_keys[i] = g[i-N];		
     d24:	000a                	c.slli	zero,0x2
     d26:	0100                	addi	s0,sp,128
     d28:	5f00                	lw	s0,56(a4)
     d2a:	0a24                	addi	s1,sp,280
     d2c:	0000                	unimp
	for(i = N; i < (2*N); ++i){
     d2e:	0a26                	slli	s4,s4,0x9
     d30:	0000                	unimp
     d32:	7f7f0003          	lb	zero,2039(t5)
		random_keys[i] = fp[i-(2*N)];
     d36:	269f 000a 3c00      	0x3c00000a269f
     d3c:	000a                	c.slli	zero,0x2
	for(i = (2*N); i < (3*N); ++i){
     d3e:	0100                	addi	s0,sp,128
     d40:	5f00                	lw	s0,56(a4)
     d42:	0a3c                	addi	a5,sp,280
		random_keys[i] = fq[i-(3*N)];
     d44:	0000                	unimp
     d46:	0a3e                	slli	s4,s4,0xf
     d48:	0000                	unimp
     d4a:	7f7f0003          	lb	zero,2039(t5)
     d4e:	3e9f 000a 4e00      	0x4e00000a3e9f
     d54:	000a                	c.slli	zero,0x2
	for(i = (3*N); i < (4*N); ++i){
     d56:	0100                	addi	s0,sp,128
		fg[i] = fg[i]*p;
     d58:	5f00                	lw	s0,56(a4)
	for(i = 0; i < (2*N-1); ++i){
     d5a:	0a4e                	slli	s4,s4,0x13
     d5c:	0000                	unimp
		fg[i] = fg[i]*p;
     d5e:	0a50                	addi	a2,sp,276
     d60:	0000                	unimp
     d62:	7f7f0003          	lb	zero,2039(t5)
	for(i = 0; i < (2*N-1); ++i){
     d66:	509f 000a 6000      	0x6000000a509f
		random_keys[i] = pk[i-(4*N)+(2*N-1)];
     d6c:	000a                	c.slli	zero,0x2
     d6e:	0100                	addi	s0,sp,128
     d70:	5f00                	lw	s0,56(a4)
     d72:	0a60                	addi	s0,sp,284
	for(i = (4*N); i < (5*N); ++i){
     d74:	0000                	unimp
     d76:	0a6a                	slli	s4,s4,0x1a
		random_keys[i] = polyR[i-(5*N)];
     d78:	0000                	unimp
     d7a:	0001                	nop
     d7c:	6a5e                	flw	fs4,212(sp)
     d7e:	000a                	c.slli	zero,0x2
     d80:	6c00                	flw	fs0,24(s0)
     d82:	000a                	c.slli	zero,0x2
     d84:	0300                	addi	s0,sp,384
	for(i = (5*N); i < (6*N+1); ++i){
     d86:	7e00                	flw	fs0,56(a2)
		random_keys[i] = polyR[i-(5*N)];
     d88:	9f7f                	0x9f7f
	for(i = (5*N); i < (6*N+1); ++i){
     d8a:	0a6c                	addi	a1,sp,284
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d8c:	0000                	unimp
     d8e:	0a6e                	slli	s4,s4,0x1b
     d90:	0000                	unimp
     d92:	0001                	nop
     d94:	825e                	mv	tp,s7
     d96:	000a                	c.slli	zero,0x2
     d98:	8600                	0x8600
int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d9a:	000a                	c.slli	zero,0x2
     d9c:	0100                	addi	s0,sp,128
     d9e:	5f00                	lw	s0,56(a4)
     da0:	0a86                	slli	s5,s5,0x1
     da2:	0000                	unimp
     da4:	0a94                	addi	a3,sp,336
     da6:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     da8:	7f7f0003          	lb	zero,2039(t5)
     dac:	949f 000a 9600      	0x9600000a949f
int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     db2:	000a                	c.slli	zero,0x2
	temp = polymult(public_key,N,random_val,48,q,0);
     db4:	0100                	addi	s0,sp,128
     db6:	5f00                	lw	s0,56(a4)
	...
     dc0:	08a8                	addi	a0,sp,88
     dc2:	0000                	unimp
     dc4:	08e2                	slli	a7,a7,0x18
     dc6:	0000                	unimp
	for(i = 0; i < 48; ++i){
     dc8:	0001                	nop
     dca:	6e5e                	flw	ft8,212(sp)
		temp[i] = temp[i] + message[i];
     dcc:	000a                	c.slli	zero,0x2
     dce:	9600                	0x9600
     dd0:	000a                	c.slli	zero,0x2
     dd2:	0100                	addi	s0,sp,128
     dd4:	5e00                	lw	s0,56(a2)
	...
	for(i = 0; i < 48; ++i){
     dde:	0748                	addi	a0,sp,900
     de0:	0000                	unimp
	CT = polydiv(temp,(2*N),polyR,(N+1),q);
     de2:	08ca                	slli	a7,a7,0x12
     de4:	0000                	unimp
     de6:	0002                	c.slli64	zero
     de8:	0085                	addi	ra,ra,1
     dea:	08e2                	slli	a7,a7,0x18
     dec:	0000                	unimp
     dee:	0a96                	slli	s5,s5,0x5
     df0:	0000                	unimp
     df2:	0002                	c.slli64	zero
	for(i = (2*N); i < (3*N); ++i){
     df4:	0085                	addi	ra,ra,1
	...
     dfe:	0748                	addi	a0,sp,900
}
     e00:	0000                	unimp
     e02:	07e2                	slli	a5,a5,0x18
     e04:	0000                	unimp
     e06:	0002                	c.slli64	zero
     e08:	0086                	slli	ra,ra,0x1
     e0a:	07e2                	slli	a5,a5,0x18
     e0c:	0000                	unimp
     e0e:	07e8                	addi	a0,sp,972
		CT[i-(2*N)] = CT[i];
     e10:	0000                	unimp
     e12:	0002                	c.slli64	zero
     e14:	007f                	0x7f
     e16:	07e8                	addi	a0,sp,972
	for(i = (2*N); i < (3*N); ++i){
     e18:	0000                	unimp
     e1a:	08cc                	addi	a1,sp,84
		CT[i-(2*N)] = CT[i];
     e1c:	0000                	unimp
     e1e:	0002                	c.slli64	zero
	for(i = (2*N); i < (3*N); ++i){
     e20:	0086                	slli	ra,ra,0x1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e22:	08e2                	slli	a7,a7,0x18
     e24:	0000                	unimp
     e26:	08f2                	slli	a7,a7,0x1c
     e28:	0000                	unimp
	for(i = (2*N); i < ((2*N)+N); ++i){
     e2a:	0002                	c.slli64	zero
     e2c:	0086                	slli	ra,ra,0x1
     e2e:	08f2                	slli	a7,a7,0x1c
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e30:	0000                	unimp
     e32:	0902                	c.slli64	s2
     e34:	0000                	unimp
     e36:	0002                	c.slli64	zero
     e38:	007f                	0x7f
	a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e3a:	0902                	c.slli64	s2
     e3c:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e3e:	0a96                	slli	s5,s5,0x5
     e40:	0000                	unimp
	a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e42:	0002                	c.slli64	zero
     e44:	0086                	slli	ra,ra,0x1
	...
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e4e:	0748                	addi	a0,sp,900
	a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e50:	0000                	unimp
     e52:	08ce                	slli	a7,a7,0x13
	a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e54:	0000                	unimp
     e56:	0002                	c.slli64	zero
	a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e58:	08e20087          	0x8e20087
     e5c:	0000                	unimp
     e5e:	0a96                	slli	s5,s5,0x5
     e60:	0000                	unimp
     e62:	0002                	c.slli64	zero
     e64:	00000087          	0x87
     e68:	0000                	unimp
	for(i = (2*N); i < ((2*N)+N); ++i){
     e6a:	0000                	unimp
     e6c:	0000                	unimp
     e6e:	0748                	addi	a0,sp,900
     e70:	0000                	unimp
     e72:	08d6                	slli	a7,a7,0x15
		if(a2[i] <= q/2)
     e74:	0000                	unimp
     e76:	0002                	c.slli64	zero
     e78:	08e2008b          	0x8e2008b
	for (i = 0; i < N; ++i){
     e7c:	0000                	unimp
     e7e:	0a96                	slli	s5,s5,0x5
	c = polymult2(secret_key_fp,N,a2,N,0);
     e80:	0000                	unimp
     e82:	0002                	c.slli64	zero
     e84:	0000008b          	0x8b
     e88:	0000                	unimp
     e8a:	0000                	unimp
	c2 = polydiv(c,(2*N),polyR,(N+1),p);
     e8c:	0000                	unimp
     e8e:	0748                	addi	a0,sp,900
     e90:	0000                	unimp
     e92:	0870                	addi	a2,sp,28
     e94:	0000                	unimp
     e96:	0002                	c.slli64	zero
	for(i = (2*N); i < ((2*N)+N); ++i){
     e98:	0088                	addi	a0,sp,64
     e9a:	0870                	addi	a2,sp,28
     e9c:	0000                	unimp
}
     e9e:	0876                	slli	a6,a6,0x1d
     ea0:	0000                	unimp
     ea2:	0002                	c.slli64	zero
     ea4:	007f                	0x7f
     ea6:	0876                	slli	a6,a6,0x1d
     ea8:	0000                	unimp
     eaa:	08d0                	addi	a2,sp,84
     eac:	0000                	unimp
     eae:	0002                	c.slli64	zero
     eb0:	0088                	addi	a0,sp,64
     eb2:	08d0                	addi	a2,sp,84
		a2[i-(2*N)] = a2[i];
     eb4:	0000                	unimp
     eb6:	08d6                	slli	a7,a7,0x15
     eb8:	0000                	unimp
     eba:	000d                	c.nop	3
	for(i = (2*N); i < ((2*N)+N); ++i){
     ebc:	01f3008b          	0x1f3008b
		a2[i-(2*N)] = a2[i];
     ec0:	325c                	fld	fa5,160(a2)
     ec2:	2324                	fld	fs1,64(a4)
	for(i = (2*N); i < ((2*N)+N); ++i){
     ec4:	1af0090f          	0x1af0090f
		if(a2[i] <= q/2)
     ec8:	e21c                	fsw	fa5,0(a2)
     eca:	0008                	0x8
			a2[i] = (-1)*(q-a2[i]);
     ecc:	e400                	fsw	fs0,8(s0)
     ece:	0009                	c.nop	2
     ed0:	0200                	addi	s0,sp,256
	for (i = 0; i < N; ++i){
     ed2:	8800                	0x8800
     ed4:	e400                	fsw	fs0,8(s0)
     ed6:	0009                	c.nop	2
		c2[i-(2*N)] = c2[i];
     ed8:	f400                	fsw	fs0,40(s0)
     eda:	0009                	c.nop	2
     edc:	0200                	addi	s0,sp,256
     ede:	7f00                	flw	fs0,56(a4)
	for(i = (2*N); i < ((2*N)+N); ++i){
     ee0:	f400                	fsw	fs0,40(s0)
     ee2:	0009                	c.nop	2
		c2[i-(2*N)] = c2[i];
     ee4:	9600                	0x9600
     ee6:	000a                	c.slli	zero,0x2
	for(i = (2*N); i < ((2*N)+N); ++i){
     ee8:	0200                	addi	s0,sp,256
  jal x0, default_exc_handler
     eea:	8800                	0x8800
	...
  mv  x3, x1
     ef4:	4800                	lw	s0,16(s0)
  mv  x4, x1
     ef6:	36000007          	0x36000007
  mv  x6, x1
     efa:	0008                	0x8
  mv  x7, x1
     efc:	0200                	addi	s0,sp,256
  mv  x8, x1
     efe:	8a00                	0x8a00
  mv  x9, x1
     f00:	3600                	fld	fs0,40(a2)
  mv x10, x1
     f02:	0008                	0x8
  mv x11, x1
     f04:	3c00                	fld	fs0,56(s0)
  mv x12, x1
     f06:	0008                	0x8
  mv x13, x1
     f08:	0200                	addi	s0,sp,256
  mv x14, x1
     f0a:	7f00                	flw	fs0,56(a4)
  mv x15, x1
     f0c:	3c00                	fld	fs0,56(s0)
  mv x16, x1
     f0e:	0008                	0x8
  mv x17, x1
     f10:	d400                	sw	s0,40(s0)
  mv x18, x1
     f12:	0008                	0x8
  mv x19, x1
     f14:	0200                	addi	s0,sp,256
  mv x20, x1
     f16:	8a00                	0x8a00
  mv x21, x1
     f18:	d400                	sw	s0,40(s0)
  mv x22, x1
     f1a:	0008                	0x8
  mv x23, x1
     f1c:	d600                	sw	s0,40(a2)
  mv x24, x1
     f1e:	0008                	0x8
  mv x25, x1
     f20:	0f00                	addi	s0,sp,912
  mv x26, x1
     f22:	8b00                	0x8b00
  mv x27, x1
     f24:	f300                	fsw	fs0,32(a4)
  mv x28, x1
     f26:	5c01                	li	s8,-32
  mv x29, x1
     f28:	2432                	fld	fs0,264(sp)
  mv x30, x1
     f2a:	f0090f23          	sb	zero,-226(s2)
  la   x2, _stack_start
     f2e:	311a                	fld	ft2,416(sp)
     f30:	1c24                	addi	s1,sp,568
     f32:	08e2                	slli	a7,a7,0x18
     f34:	0000                	unimp
  la x26, _bss_start
     f36:	0970                	addi	a2,sp,156
     f38:	0000                	unimp
     f3a:	0002                	c.slli64	zero
     f3c:	008a                	slli	ra,ra,0x2
  la x27, _bss_end
     f3e:	0970                	addi	a2,sp,156
     f40:	0000                	unimp
     f42:	0980                	addi	s0,sp,208
     f44:	0000                	unimp
  bge x26, x27, zero_loop_end
     f46:	0002                	c.slli64	zero
     f48:	007f                	0x7f
  sw x0, 0(x26)
     f4a:	0980                	addi	s0,sp,208
     f4c:	0000                	unimp
  addi x26, x26, 4
     f4e:	0a96                	slli	s5,s5,0x5
  ble x26, x27, zero_loop
     f50:	0000                	unimp
     f52:	0002                	c.slli64	zero
  addi x10, x0, 0
     f54:	008a                	slli	ra,ra,0x2
	...
  jal x1, main
     f5e:	074a                	slli	a4,a4,0x12
     f60:	0000                	unimp
     f62:	08bc                	addi	a5,sp,88
     f64:	0000                	unimp
     f66:	0002                	c.slli64	zero
     f68:	0072                	c.slli	zero,0x1c
     f6a:	08bc                	addi	a5,sp,88
     f6c:	0000                	unimp
     f6e:	08c8                	addi	a0,sp,84
     f70:	0000                	unimp
     f72:	0002                	c.slli64	zero
     f74:	0084                	addi	s1,sp,64
     f76:	08c8                	addi	a0,sp,84
     f78:	0000                	unimp
     f7a:	08d4                	addi	a3,sp,84
     f7c:	0000                	unimp
     f7e:	000d                	c.nop	3
     f80:	008a                	slli	ra,ra,0x2
     f82:	325c01f3          	0x325c01f3
     f86:	2324                	fld	fs1,64(a4)
     f88:	1af0090f          	0x1af0090f
     f8c:	d41c                	sw	a5,40(s0)
     f8e:	0008                	0x8
     f90:	d600                	sw	s0,40(a2)
     f92:	0008                	0x8
     f94:	0f00                	addi	s0,sp,912
     f96:	8b00                	0x8b00
     f98:	f300                	fsw	fs0,32(a4)
     f9a:	5c01                	li	s8,-32
     f9c:	2432                	fld	fs0,264(sp)
     f9e:	f0090f23          	sb	zero,-226(s2)
     fa2:	331a                	fld	ft6,416(sp)
     fa4:	1c1e                	slli	s8,s8,0x27
     fa6:	08e2                	slli	a7,a7,0x18
     fa8:	0000                	unimp
     faa:	0a96                	slli	s5,s5,0x5
     fac:	0000                	unimp
     fae:	0002                	c.slli64	zero
     fb0:	0072                	c.slli	zero,0x1c
	...
     fba:	07f8                	addi	a4,sp,972
     fbc:	0000                	unimp
     fbe:	0828                	addi	a0,sp,24
     fc0:	0000                	unimp
     fc2:	0001                	nop
     fc4:	125a                	slli	tp,tp,0x36
     fc6:	0009                	c.nop	2
     fc8:	5e00                	lw	s0,56(a2)
     fca:	0009                	c.nop	2
     fcc:	0100                	addi	s0,sp,128
     fce:	5a00                	lw	s0,48(a2)
	...
     fd8:	082a                	slli	a6,a6,0xa
     fda:	0000                	unimp
     fdc:	084c                	addi	a1,sp,20
     fde:	0000                	unimp
     fe0:	0001                	nop
     fe2:	5e5a                	lw	t3,180(sp)
     fe4:	0009                	c.nop	2
     fe6:	9000                	0x9000
     fe8:	0009                	c.nop	2
     fea:	0100                	addi	s0,sp,128
     fec:	5a00                	lw	s0,48(a2)
	...
     ff6:	084e                	slli	a6,a6,0x13
     ff8:	0000                	unimp
     ffa:	08de                	slli	a7,a7,0x17
     ffc:	0000                	unimp
     ffe:	0001                	nop
    1000:	905a                	c.add	zero,s6
    1002:	0009                	c.nop	2
    1004:	9600                	0x9600
    1006:	000a                	c.slli	zero,0x2
    1008:	0100                	addi	s0,sp,128
    100a:	5a00                	lw	s0,48(a2)
	...
    1014:	074a                	slli	a4,a4,0x12
    1016:	0000                	unimp
    1018:	0778                	addi	a4,sp,908
    101a:	0000                	unimp
    101c:	0002                	c.slli64	zero
    101e:	9f31                	0x9f31
    1020:	077c                	addi	a5,sp,908
    1022:	0000                	unimp
    1024:	07bc                	addi	a5,sp,968
    1026:	0000                	unimp
    1028:	0002                	c.slli64	zero
    102a:	9f31                	0x9f31
    102c:	089c                	addi	a5,sp,80
    102e:	0000                	unimp
    1030:	08b4                	addi	a3,sp,88
    1032:	0000                	unimp
    1034:	0001                	nop
    1036:	605f 000a 8200      	0x8200000a605f
    103c:	000a                	c.slli	zero,0x2
    103e:	0100                	addi	s0,sp,128
    1040:	5f00                	lw	s0,56(a4)
	...
    104a:	0748                	addi	a0,sp,900
    104c:	0000                	unimp
    104e:	08c2                	slli	a7,a7,0x10
    1050:	0000                	unimp
    1052:	0001                	nop
    1054:	c259                	beqz	a2,10da <memset+0x9c>
    1056:	0008                	0x8
    1058:	c600                	sw	s0,8(a2)
    105a:	0008                	0x8
    105c:	0300                	addi	s0,sp,384
    105e:	8300                	0x8300
    1060:	9f7f                	0x9f7f
    1062:	08c6                	slli	a7,a7,0x11
    1064:	0000                	unimp
    1066:	08e2                	slli	a7,a7,0x18
    1068:	0000                	unimp
    106a:	0006                	c.slli	zero,0x1
    106c:	315c01f3          	0x315c01f3
    1070:	9f1c                	0x9f1c
    1072:	08e2                	slli	a7,a7,0x18
    1074:	0000                	unimp
    1076:	0a96                	slli	s5,s5,0x5
    1078:	0000                	unimp
    107a:	0001                	nop
    107c:	0059                	c.nop	22
    107e:	0000                	unimp
    1080:	0000                	unimp
    1082:	0000                	unimp
    1084:	4800                	lw	s0,16(s0)
    1086:	c2000007          	0xc2000007
    108a:	0008                	0x8
    108c:	0100                	addi	s0,sp,128
    108e:	5900                	lw	s0,48(a0)
    1090:	08c2                	slli	a7,a7,0x10
    1092:	0000                	unimp
    1094:	08c6                	slli	a7,a7,0x11
    1096:	0000                	unimp
    1098:	7f830003          	lb	zero,2040(t1)
    109c:	c69f 0008 e200      	0xe2000008c69f
    10a2:	0008                	0x8
    10a4:	0600                	addi	s0,sp,768
    10a6:	f300                	fsw	fs0,32(a4)
    10a8:	5c01                	li	s8,-32
    10aa:	1c31                	addi	s8,s8,-20
    10ac:	e29f 0008 9600      	0x96000008e29f
    10b2:	000a                	c.slli	zero,0x2
    10b4:	0100                	addi	s0,sp,128
    10b6:	5900                	lw	s0,48(a0)
	...
    10c0:	0748                	addi	a0,sp,900
    10c2:	0000                	unimp
    10c4:	08c2                	slli	a7,a7,0x10
    10c6:	0000                	unimp
    10c8:	0001                	nop
    10ca:	c259                	beqz	a2,1150 <main+0x6a>
    10cc:	0008                	0x8
    10ce:	c600                	sw	s0,8(a2)
    10d0:	0008                	0x8
    10d2:	0300                	addi	s0,sp,384
    10d4:	8300                	0x8300
    10d6:	9f7f                	0x9f7f
    10d8:	08c6                	slli	a7,a7,0x11
    10da:	0000                	unimp
    10dc:	08e2                	slli	a7,a7,0x18
    10de:	0000                	unimp
    10e0:	0006                	c.slli	zero,0x1
    10e2:	315c01f3          	0x315c01f3
int main(){
    10e6:	9f1c                	0x9f1c
    10e8:	08e2                	slli	a7,a7,0x18
int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    10ea:	0000                	unimp
    10ec:	0a96                	slli	s5,s5,0x5
    10ee:	0000                	unimp
    10f0:	0001                	nop
    10f2:	0059                	c.nop	22
    10f4:	0000                	unimp
    10f6:	0000                	unimp
int main(){
    10f8:	0000                	unimp
    10fa:	4800                	lw	s0,16(s0)
    10fc:	c2000007          	0xc2000007
int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1100:	0008                	0x8
	keys = generate_keys(N, p, q);
    1102:	0100                	addi	s0,sp,128
    1104:	5900                	lw	s0,48(a0)
    1106:	08c2                	slli	a7,a7,0x10
    1108:	0000                	unimp
    110a:	08c6                	slli	a7,a7,0x11
    110c:	0000                	unimp
    110e:	7f830003          	lb	zero,2040(t1)
	for(i = 0; i < N; ++i){
    1112:	c69f 0008 e200      	0xe2000008c69f
		secret_key_f[i] = keys[i];
    1118:	0008                	0x8
    111a:	0600                	addi	s0,sp,768
    111c:	f300                	fsw	fs0,32(a4)
    111e:	5c01                	li	s8,-32
	for(i = 0; i < N; ++i){
    1120:	1c31                	addi	s8,s8,-20
    1122:	e29f 0008 9600      	0x96000008e29f
	for(i = N; i < (2*N); ++i){
    1128:	000a                	c.slli	zero,0x2
    112a:	0100                	addi	s0,sp,128
    112c:	5900                	lw	s0,48(a0)
	...
		secret_key_fp[i-(2*N)] = keys[i];
    1136:	0748                	addi	a0,sp,900
    1138:	0000                	unimp
    113a:	08c2                	slli	a7,a7,0x10
	for(i = (2*N); i < (3*N); ++i){
    113c:	0000                	unimp
    113e:	0001                	nop
	for(i = (3*N); i < (4*N); ++i){
    1140:	c259                	beqz	a2,11c6 <main+0xe0>
    1142:	0008                	0x8
    1144:	c600                	sw	s0,8(a2)
    1146:	0008                	0x8
    1148:	0300                	addi	s0,sp,384
    114a:	8300                	0x8300
		public_key[i-(4*N)] = keys[i];
    114c:	9f7f                	0x9f7f
    114e:	08c6                	slli	a7,a7,0x11
    1150:	0000                	unimp
    1152:	08e2                	slli	a7,a7,0x18
    1154:	0000                	unimp
	for(i = (4*N); i < (5*N); ++i){
    1156:	0006                	c.slli	zero,0x1
    1158:	315c01f3          	0x315c01f3
    115c:	9f1c                	0x9f1c
    115e:	08e2                	slli	a7,a7,0x18
    1160:	0000                	unimp
		ring_poly[i-(5*N)] = keys[i];
    1162:	0a96                	slli	s5,s5,0x5
    1164:	0000                	unimp
    1166:	0001                	nop
    1168:	0059                	c.nop	22
    116a:	0000                	unimp
	for(i = (5*N); i < (6*N+1); ++i){
    116c:	0000                	unimp
    116e:	0000                	unimp
	Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1170:	4800                	lw	s0,16(s0)
    1172:	c2000007          	0xc2000007
    1176:	0008                	0x8
    1178:	0100                	addi	s0,sp,128
    117a:	5900                	lw	s0,48(a0)
    117c:	08c2                	slli	a7,a7,0x10
    117e:	0000                	unimp
	Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1180:	08c6                	slli	a7,a7,0x11
    1182:	0000                	unimp
    1184:	7f830003          	lb	zero,2040(t1)
    1188:	c69f 0008 e200      	0xe2000008c69f
    118e:	0008                	0x8
    1190:	0600                	addi	s0,sp,768
    1192:	f300                	fsw	fs0,32(a4)
    1194:	5c01                	li	s8,-32
			resultkon = 1;}
    1196:	1c31                	addi	s8,s8,-20
    1198:	e29f 0008 9600      	0x96000008e29f
    119e:	000a                	c.slli	zero,0x2
	for(i = 0; i < 48; ++i){	
    11a0:	0100                	addi	s0,sp,128
    11a2:	5900                	lw	s0,48(a0)
	...
		if(!(message[i] == Dec_Message[i])){
    11ac:	0748                	addi	a0,sp,900
    11ae:	0000                	unimp
    11b0:	08c2                	slli	a7,a7,0x10
    11b2:	0000                	unimp
			resultkon = 0;
    11b4:	0001                	nop
    11b6:	c259                	beqz	a2,123c <__DTOR_END__+0x54>
    11b8:	0008                	0x8
    11ba:	c600                	sw	s0,8(a2)
}
    11bc:	0008                	0x8
    11be:	0300                	addi	s0,sp,384
    11c0:	8300                	0x8300
    11c2:	9f7f                	0x9f7f
    11c4:	08c6                	slli	a7,a7,0x11
    11c6:	0000                	unimp
    11c8:	08e2                	slli	a7,a7,0x18
    11ca:	0000                	unimp
			resultkon = 1;}
    11cc:	0006                	c.slli	zero,0x1
    11ce:	315c01f3          	0x315c01f3
	for(i = 0; i < 48; ++i){	
    11d2:	9f1c                	0x9f1c
    11d4:	08e2                	slli	a7,a7,0x18
    11d6:	0000                	unimp
    11d8:	0a96                	slli	s5,s5,0x5
    11da:	0000                	unimp
    11dc:	0001                	nop
    11de:	0059                	c.nop	22
    11e0:	0000                	unimp
    11e2:	0000                	unimp
    11e4:	0000                	unimp
    11e6:	2400                	fld	fs0,8(s0)
    11e8:	0004                	0x4
    11ea:	7000                	flw	fs0,32(s0)
    11ec:	0005                	c.nop	1
    11ee:	0100                	addi	s0,sp,128
    11f0:	5a00                	lw	s0,48(a2)
    11f2:	0570                	addi	a2,sp,652
    11f4:	0000                	unimp
    11f6:	06f2                	slli	a3,a3,0x1c
    11f8:	0000                	unimp
    11fa:	0004                	0x4
    11fc:	9f5a01f3          	0x9f5a01f3
	...
    1208:	0424                	addi	s1,sp,520
    120a:	0000                	unimp
    120c:	0570                	addi	a2,sp,652
    120e:	0000                	unimp
    1210:	0001                	nop
    1212:	0005705b          	0x5705b
    1216:	8e00                	0x8e00
    1218:	0005                	c.nop	1
    121a:	0100                	addi	s0,sp,128
    121c:	5900                	lw	s0,48(a0)
    121e:	058e                	slli	a1,a1,0x3
    1220:	0000                	unimp
    1222:	05aa                	slli	a1,a1,0xa
    1224:	0000                	unimp
    1226:	01880003          	lb	zero,24(a6)
    122a:	aa9f 0005 bc00      	0xbc000005aa9f
    1230:	0005                	c.nop	1
    1232:	0400                	addi	s0,sp,512
    1234:	f300                	fsw	fs0,32(a4)
    1236:	5b01                	li	s6,-32
    1238:	bc9f 0005 e000      	0xe0000005bc9f
    123e:	0006                	c.slli	zero,0x1
    1240:	0100                	addi	s0,sp,128
    1242:	5900                	lw	s0,48(a0)
    1244:	06e0                	addi	s0,sp,844
    1246:	0000                	unimp
    1248:	06f2                	slli	a3,a3,0x1c
    124a:	0000                	unimp
    124c:	01880003          	lb	zero,24(a6)
    1250:	009f 0000 0000      	0x9f
    1256:	0000                	unimp
    1258:	2400                	fld	fs0,8(s0)
    125a:	0004                	0x4
    125c:	9c00                	0x9c00
    125e:	0004                	0x4
    1260:	0100                	addi	s0,sp,128
    1262:	5c00                	lw	s0,56(s0)
    1264:	049c                	addi	a5,sp,576
    1266:	0000                	unimp
    1268:	04cc                	addi	a1,sp,580
    126a:	0000                	unimp
    126c:	0004                	0x4
    126e:	9f5c01f3          	0x9f5c01f3
    1272:	04cc                	addi	a1,sp,580
    1274:	0000                	unimp
    1276:	0510                	addi	a2,sp,640
    1278:	0000                	unimp
    127a:	0001                	nop
    127c:	105c                	addi	a5,sp,36
    127e:	0005                	c.nop	1
    1280:	f200                	fsw	fs0,32(a2)
    1282:	0006                	c.slli	zero,0x1
    1284:	0400                	addi	s0,sp,512
    1286:	f300                	fsw	fs0,32(a4)
    1288:	5c01                	li	s8,-32
    128a:	009f 0000 0000      	0x9f
    1290:	0000                	unimp
    1292:	2400                	fld	fs0,8(s0)
    1294:	0004                	0x4
    1296:	7a00                	flw	fs0,48(a2)
    1298:	0004                	0x4
    129a:	0100                	addi	s0,sp,128
    129c:	5d00                	lw	s0,56(a0)
    129e:	047a                	slli	s0,s0,0x1e
    12a0:	0000                	unimp
    12a2:	05a2                	slli	a1,a1,0x8
    12a4:	0000                	unimp
    12a6:	0001                	nop
    12a8:	a264                	fsd	fs1,192(a2)
    12aa:	0005                	c.nop	1
    12ac:	bc00                	fsd	fs0,56(s0)
    12ae:	0005                	c.nop	1
    12b0:	0400                	addi	s0,sp,512
    12b2:	f300                	fsw	fs0,32(a4)
    12b4:	5d01                	li	s10,-32
    12b6:	bc9f 0005 f200      	0xf2000005bc9f
    12bc:	0006                	c.slli	zero,0x1
    12be:	0100                	addi	s0,sp,128
    12c0:	6400                	flw	fs0,8(s0)
	...
    12ca:	0424                	addi	s1,sp,520
    12cc:	0000                	unimp
    12ce:	047a                	slli	s0,s0,0x1e
    12d0:	0000                	unimp
    12d2:	0001                	nop
    12d4:	7a5e                	flw	fs4,244(sp)
    12d6:	0004                	0x4
    12d8:	9e00                	0x9e00
    12da:	0005                	c.nop	1
    12dc:	0100                	addi	s0,sp,128
    12de:	6200                	flw	fs0,0(a2)
    12e0:	059e                	slli	a1,a1,0x7
    12e2:	0000                	unimp
    12e4:	05bc                	addi	a5,sp,712
    12e6:	0000                	unimp
    12e8:	0004                	0x4
    12ea:	9f5e01f3          	0x9f5e01f3
    12ee:	05bc                	addi	a5,sp,712
    12f0:	0000                	unimp
    12f2:	06f2                	slli	a3,a3,0x1c
    12f4:	0000                	unimp
    12f6:	0001                	nop
    12f8:	0062                	c.slli	zero,0x18
    12fa:	0000                	unimp
    12fc:	0000                	unimp
    12fe:	0000                	unimp
    1300:	c400                	sw	s0,8(s0)
    1302:	0004                	0x4
    1304:	cc00                	sw	s0,24(s0)
    1306:	0004                	0x4
    1308:	0100                	addi	s0,sp,128
    130a:	6b00                	flw	fs0,16(a4)
    130c:	0552                	slli	a0,a0,0x14
    130e:	0000                	unimp
    1310:	05b0                	addi	a2,sp,712
    1312:	0000                	unimp
    1314:	0001                	nop
    1316:	0005bc6b          	0x5bc6b
    131a:	f200                	fsw	fs0,32(a2)
    131c:	0006                	c.slli	zero,0x1
    131e:	0100                	addi	s0,sp,128
    1320:	6b00                	flw	fs0,16(a4)
	...
    132a:	0570                	addi	a2,sp,652
    132c:	0000                	unimp
    132e:	0576                	slli	a0,a0,0x1d
    1330:	0000                	unimp
    1332:	0001                	nop
    1334:	bc5f 0005 c400      	0xc4000005bc5f
    133a:	0005                	c.nop	1
    133c:	0100                	addi	s0,sp,128
    133e:	5f00                	lw	s0,56(a4)
	...
    1348:	0478                	addi	a4,sp,524
    134a:	0000                	unimp
    134c:	047a                	slli	s0,s0,0x1e
    134e:	0000                	unimp
    1350:	0002                	c.slli64	zero
    1352:	9f30                	0x9f30
    1354:	047a                	slli	s0,s0,0x1e
    1356:	0000                	unimp
    1358:	0482                	c.slli64	s1
    135a:	0000                	unimp
    135c:	0001                	nop
    135e:	845f 0004 8c00      	0x8c000004845f
    1364:	0004                	0x4
    1366:	0100                	addi	s0,sp,128
    1368:	5d00                	lw	s0,56(a0)
    136a:	048c                	addi	a1,sp,576
    136c:	0000                	unimp
    136e:	0492                	slli	s1,s1,0x4
    1370:	0000                	unimp
    1372:	0001                	nop
    1374:	925e                	add	tp,tp,s7
    1376:	0004                	0x4
    1378:	9800                	0x9800
    137a:	0004                	0x4
    137c:	0100                	addi	s0,sp,128
    137e:	5f00                	lw	s0,56(a4)
    1380:	049c                	addi	a5,sp,576
    1382:	0000                	unimp
    1384:	04a2                	slli	s1,s1,0x8
    1386:	0000                	unimp
    1388:	0001                	nop
    138a:	a25c                	fsd	fa5,128(a2)
    138c:	0004                	0x4
    138e:	a800                	fsd	fs0,16(s0)
    1390:	0004                	0x4
    1392:	0100                	addi	s0,sp,128
    1394:	5e00                	lw	s0,56(a2)
    1396:	04a8                	addi	a0,sp,584
    1398:	0000                	unimp
    139a:	04b2                	slli	s1,s1,0xc
    139c:	0000                	unimp
    139e:	0001                	nop
    13a0:	b25f 0004 cc00      	0xcc000004b25f
    13a6:	0004                	0x4
    13a8:	0100                	addi	s0,sp,128
    13aa:	6500                	flw	fs0,8(a0)
    13ac:	04cc                	addi	a1,sp,580
    13ae:	0000                	unimp
    13b0:	04da                	slli	s1,s1,0x16
    13b2:	0000                	unimp
    13b4:	0001                	nop
    13b6:	da5f 0004 dc00      	0xdc000004da5f
    13bc:	0004                	0x4
    13be:	0300                	addi	s0,sp,384
    13c0:	7f00                	flw	fs0,56(a4)
    13c2:	9f7f                	0x9f7f
    13c4:	04dc                	addi	a5,sp,580
    13c6:	0000                	unimp
    13c8:	04de                	slli	s1,s1,0x17
    13ca:	0000                	unimp
    13cc:	0001                	nop
    13ce:	de5f 0004 ee00      	0xee000004de5f
    13d4:	0004                	0x4
    13d6:	0100                	addi	s0,sp,128
    13d8:	5d00                	lw	s0,56(a0)
    13da:	04ee                	slli	s1,s1,0x1b
    13dc:	0000                	unimp
    13de:	04f2                	slli	s1,s1,0x1c
    13e0:	0000                	unimp
    13e2:	0001                	nop
    13e4:	f25e                	fsw	fs7,36(sp)
    13e6:	0004                	0x4
    13e8:	fc00                	fsw	fs0,56(s0)
    13ea:	0004                	0x4
    13ec:	0300                	addi	s0,sp,384
    13ee:	7e00                	flw	fs0,56(a2)
    13f0:	9f7f                	0x9f7f
    13f2:	04fc                	addi	a5,sp,588
    13f4:	0000                	unimp
    13f6:	04fe                	slli	s1,s1,0x1f
    13f8:	0000                	unimp
    13fa:	0001                	nop
    13fc:	fe5e                	fsw	fs7,60(sp)
    13fe:	0004                	0x4
    1400:	0c00                	addi	s0,sp,528
    1402:	0005                	c.nop	1
    1404:	0100                	addi	s0,sp,128
    1406:	5f00                	lw	s0,56(a4)
    1408:	050c                	addi	a1,sp,640
    140a:	0000                	unimp
    140c:	050e                	slli	a0,a0,0x3
    140e:	0000                	unimp
    1410:	7f7f0003          	lb	zero,2039(t5)
    1414:	0e9f 0005 1000      	0x100000050e9f
    141a:	0005                	c.nop	1
    141c:	0100                	addi	s0,sp,128
    141e:	5f00                	lw	s0,56(a4)
    1420:	0510                	addi	a2,sp,640
    1422:	0000                	unimp
    1424:	0520                	addi	s0,sp,648
    1426:	0000                	unimp
    1428:	0001                	nop
    142a:	205c                	fld	fa5,128(s0)
    142c:	0005                	c.nop	1
    142e:	2400                	fld	fs0,8(s0)
    1430:	0005                	c.nop	1
    1432:	0100                	addi	s0,sp,128
    1434:	5e00                	lw	s0,56(a2)
    1436:	0524                	addi	s1,sp,648
    1438:	0000                	unimp
    143a:	052e                	slli	a0,a0,0xb
    143c:	0000                	unimp
    143e:	7f7e0003          	lb	zero,2039(t3)
    1442:	2e9f 0005 3000      	0x300000052e9f
    1448:	0005                	c.nop	1
    144a:	0100                	addi	s0,sp,128
    144c:	5e00                	lw	s0,56(a2)
    144e:	0530                	addi	a2,sp,648
    1450:	0000                	unimp
    1452:	054c                	addi	a1,sp,644
    1454:	0000                	unimp
    1456:	0001                	nop
    1458:	4c5f 0005 6000      	0x600000054c5f
    145e:	0005                	c.nop	1
    1460:	0100                	addi	s0,sp,128
    1462:	6500                	flw	fs0,8(a0)
    1464:	0560                	addi	s0,sp,652
    1466:	0000                	unimp
    1468:	0570                	addi	a2,sp,652
    146a:	0000                	unimp
    146c:	0001                	nop
    146e:	7e5f 0005 8e00      	0x8e0000057e5f
    1474:	0005                	c.nop	1
    1476:	0100                	addi	s0,sp,128
    1478:	5f00                	lw	s0,56(a4)
    147a:	058e                	slli	a1,a1,0x3
    147c:	0000                	unimp
    147e:	059c                	addi	a5,sp,704
    1480:	0000                	unimp
    1482:	0001                	nop
    1484:	ca59                	beqz	a2,151a <_bss_start+0x1ae>
    1486:	0005                	c.nop	1
    1488:	ce00                	sw	s0,24(a2)
    148a:	0005                	c.nop	1
    148c:	0200                	addi	s0,sp,256
    148e:	3000                	fld	fs0,32(s0)
    1490:	ce9f 0005 d600      	0xd6000005ce9f
    1496:	0005                	c.nop	1
    1498:	0100                	addi	s0,sp,128
    149a:	5e00                	lw	s0,56(a2)
    149c:	05e0                	addi	s0,sp,716
    149e:	0000                	unimp
    14a0:	05e6                	slli	a1,a1,0x19
    14a2:	0000                	unimp
    14a4:	0002                	c.slli64	zero
    14a6:	9f30                	0x9f30
    14a8:	05e6                	slli	a1,a1,0x19
    14aa:	0000                	unimp
    14ac:	05ec                	addi	a1,sp,716
    14ae:	0000                	unimp
    14b0:	0001                	nop
    14b2:	ec5c                	fsw	fa5,28(s0)
    14b4:	0005                	c.nop	1
    14b6:	f200                	fsw	fs0,32(a2)
    14b8:	0005                	c.nop	1
    14ba:	0100                	addi	s0,sp,128
    14bc:	5e00                	lw	s0,56(a2)
    14be:	05f4                	addi	a3,sp,716
    14c0:	0000                	unimp
    14c2:	05fa                	slli	a1,a1,0x1e
    14c4:	0000                	unimp
    14c6:	0001                	nop
    14c8:	fc5f 0005 0400      	0x4000005fc5f
    14ce:	0006                	c.slli	zero,0x1
    14d0:	0100                	addi	s0,sp,128
    14d2:	5d00                	lw	s0,56(a0)
    14d4:	0604                	addi	s1,sp,768
    14d6:	0000                	unimp
    14d8:	061a                	slli	a2,a2,0x6
    14da:	0000                	unimp
    14dc:	0001                	nop
    14de:	1a5e                	slli	s4,s4,0x37
    14e0:	0006                	c.slli	zero,0x1
    14e2:	2a00                	fld	fs0,16(a2)
    14e4:	0006                	c.slli	zero,0x1
    14e6:	0100                	addi	s0,sp,128
    14e8:	5f00                	lw	s0,56(a4)
    14ea:	062a                	slli	a2,a2,0xa
    14ec:	0000                	unimp
    14ee:	062e                	slli	a2,a2,0xb
    14f0:	0000                	unimp
    14f2:	0001                	nop
    14f4:	2e5e                	fld	ft8,464(sp)
    14f6:	0006                	c.slli	zero,0x1
    14f8:	3800                	fld	fs0,48(s0)
    14fa:	0006                	c.slli	zero,0x1
    14fc:	0300                	addi	s0,sp,384
    14fe:	7e00                	flw	fs0,56(a2)
    1500:	9f7f                	0x9f7f
    1502:	0638                	addi	a4,sp,776
    1504:	0000                	unimp
    1506:	063a                	slli	a2,a2,0xe
    1508:	0000                	unimp
    150a:	0001                	nop
    150c:	3a5e                	fld	fs4,496(sp)
    150e:	0006                	c.slli	zero,0x1
    1510:	4a00                	lw	s0,16(a2)
    1512:	0006                	c.slli	zero,0x1
    1514:	0100                	addi	s0,sp,128
    1516:	5c00                	lw	s0,56(s0)
    1518:	064a                	slli	a2,a2,0x12
    151a:	0000                	unimp
    151c:	064e                	slli	a2,a2,0x13
    151e:	0000                	unimp
    1520:	0001                	nop
    1522:	4e5e                	lw	t3,212(sp)
    1524:	0006                	c.slli	zero,0x1
    1526:	5800                	lw	s0,48(s0)
    1528:	0006                	c.slli	zero,0x1
    152a:	0300                	addi	s0,sp,384
    152c:	7e00                	flw	fs0,56(a2)
    152e:	9f7f                	0x9f7f
    1530:	0658                	addi	a4,sp,772
    1532:	0000                	unimp
    1534:	065a                	slli	a2,a2,0x16
    1536:	0000                	unimp
    1538:	0001                	nop
    153a:	5a5e                	lw	s4,244(sp)
    153c:	0006                	c.slli	zero,0x1
    153e:	6600                	flw	fs0,8(a2)
    1540:	0006                	c.slli	zero,0x1
    1542:	0100                	addi	s0,sp,128
    1544:	5f00                	lw	s0,56(a4)
    1546:	0666                	slli	a2,a2,0x19
    1548:	0000                	unimp
    154a:	066e                	slli	a2,a2,0x1b
    154c:	0000                	unimp
    154e:	7f7f0003          	lb	zero,2039(t5)
    1552:	6e9f 0006 7000      	0x700000066e9f
    1558:	0006                	c.slli	zero,0x1
    155a:	0100                	addi	s0,sp,128
    155c:	5f00                	lw	s0,56(a4)
    155e:	0670                	addi	a2,sp,780
    1560:	0000                	unimp
    1562:	0680                	addi	s0,sp,832
    1564:	0000                	unimp
    1566:	0001                	nop
    1568:	805d                	srli	s0,s0,0x17
    156a:	0006                	c.slli	zero,0x1
    156c:	8400                	0x8400
    156e:	0006                	c.slli	zero,0x1
    1570:	0100                	addi	s0,sp,128
    1572:	5e00                	lw	s0,56(a2)
    1574:	0684                	addi	s1,sp,832
    1576:	0000                	unimp
    1578:	068e                	slli	a3,a3,0x3
    157a:	0000                	unimp
    157c:	7f7e0003          	lb	zero,2039(t3)
    1580:	8e9f 0006 9c00      	0x9c0000068e9f
    1586:	0006                	c.slli	zero,0x1
    1588:	0100                	addi	s0,sp,128
    158a:	5e00                	lw	s0,56(a2)
    158c:	069c                	addi	a5,sp,832
    158e:	0000                	unimp
    1590:	06a4                	addi	s1,sp,840
    1592:	0000                	unimp
    1594:	7f7e0003          	lb	zero,2039(t3)
    1598:	a49f 0006 aa00      	0xaa000006a49f
    159e:	0006                	c.slli	zero,0x1
    15a0:	0100                	addi	s0,sp,128
    15a2:	5e00                	lw	s0,56(a2)
    15a4:	06aa                	slli	a3,a3,0xa
    15a6:	0000                	unimp
    15a8:	06b4                	addi	a3,sp,840
    15aa:	0000                	unimp
    15ac:	7f7e0003          	lb	zero,2039(t3)
    15b0:	b49f 0006 b600      	0xb6000006b49f
    15b6:	0006                	c.slli	zero,0x1
    15b8:	0100                	addi	s0,sp,128
    15ba:	5e00                	lw	s0,56(a2)
    15bc:	06b6                	slli	a3,a3,0xd
    15be:	0000                	unimp
    15c0:	06bc                	addi	a5,sp,840
    15c2:	0000                	unimp
    15c4:	0001                	nop
    15c6:	bc5f 0006 ce00      	0xce000006bc5f
    15cc:	0006                	c.slli	zero,0x1
    15ce:	0100                	addi	s0,sp,128
    15d0:	5d00                	lw	s0,56(a0)
    15d2:	06ce                	slli	a3,a3,0x13
    15d4:	0000                	unimp
    15d6:	06dc                	addi	a5,sp,836
    15d8:	0000                	unimp
    15da:	0001                	nop
    15dc:	dc5f 0006 de00      	0xde000006dc5f
    15e2:	0006                	c.slli	zero,0x1
    15e4:	0300                	addi	s0,sp,384
    15e6:	7f00                	flw	fs0,56(a4)
    15e8:	9f7f                	0x9f7f
    15ea:	06de                	slli	a3,a3,0x17
    15ec:	0000                	unimp
    15ee:	06e0                	addi	s0,sp,844
    15f0:	0000                	unimp
    15f2:	0001                	nop
    15f4:	e05f 0006 f200      	0xf2000006e05f
    15fa:	0006                	c.slli	zero,0x1
    15fc:	0100                	addi	s0,sp,128
    15fe:	5900                	lw	s0,48(a0)
	...
    1608:	0570                	addi	a2,sp,652
    160a:	0000                	unimp
    160c:	057e                	slli	a0,a0,0x1f
    160e:	0000                	unimp
    1610:	0001                	nop
    1612:	bc5e                	fsd	fs7,56(sp)
    1614:	0005                	c.nop	1
    1616:	c000                	sw	s0,0(s0)
    1618:	0005                	c.nop	1
    161a:	0100                	addi	s0,sp,128
    161c:	5e00                	lw	s0,56(a2)
	...
    1626:	0592                	slli	a1,a1,0x4
    1628:	0000                	unimp
    162a:	05bc                	addi	a5,sp,712
    162c:	0000                	unimp
    162e:	0006                	c.slli	zero,0x1
    1630:	00181c03          	lh	s8,1(a6)
    1634:	9f00                	0x9f00
	...
    163e:	0472                	slli	s0,s0,0x1c
    1640:	0000                	unimp
    1642:	05a6                	slli	a1,a1,0x9
    1644:	0000                	unimp
    1646:	0002                	c.slli64	zero
    1648:	0086                	slli	ra,ra,0x1
    164a:	05bc                	addi	a5,sp,712
    164c:	0000                	unimp
    164e:	06f2                	slli	a3,a3,0x1c
    1650:	0000                	unimp
    1652:	0002                	c.slli64	zero
    1654:	0086                	slli	ra,ra,0x1
	...
    165e:	0472                	slli	s0,s0,0x1c
    1660:	0000                	unimp
    1662:	05ac                	addi	a1,sp,712
    1664:	0000                	unimp
    1666:	0002                	c.slli64	zero
    1668:	0089                	addi	ra,ra,2
    166a:	05bc                	addi	a5,sp,712
    166c:	0000                	unimp
    166e:	060e                	slli	a2,a2,0x3
    1670:	0000                	unimp
    1672:	0002                	c.slli64	zero
    1674:	0089                	addi	ra,ra,2
    1676:	060e                	slli	a2,a2,0x3
    1678:	0000                	unimp
    167a:	0614                	addi	a3,sp,768
    167c:	0000                	unimp
    167e:	0002                	c.slli64	zero
    1680:	007f                	0x7f
    1682:	0614                	addi	a3,sp,768
    1684:	0000                	unimp
    1686:	0690                	addi	a2,sp,832
    1688:	0000                	unimp
    168a:	0002                	c.slli64	zero
    168c:	0089                	addi	ra,ra,2
    168e:	0690                	addi	a2,sp,832
    1690:	0000                	unimp
    1692:	06a6                	slli	a3,a3,0x9
    1694:	0000                	unimp
    1696:	0002                	c.slli64	zero
    1698:	007f                	0x7f
    169a:	06a6                	slli	a3,a3,0x9
    169c:	0000                	unimp
    169e:	06f2                	slli	a3,a3,0x1c
    16a0:	0000                	unimp
    16a2:	0002                	c.slli64	zero
    16a4:	0089                	addi	ra,ra,2
	...
    16ae:	05e0                	addi	s0,sp,716
    16b0:	0000                	unimp
    16b2:	062a                	slli	a2,a2,0xa
    16b4:	0000                	unimp
    16b6:	0001                	nop
    16b8:	3a5a                	fld	fs4,432(sp)
    16ba:	0006                	c.slli	zero,0x1
    16bc:	ce00                	sw	s0,24(a2)
    16be:	0006                	c.slli	zero,0x1
    16c0:	0100                	addi	s0,sp,128
    16c2:	5a00                	lw	s0,48(a2)
	...
    16cc:	0472                	slli	s0,s0,0x1c
    16ce:	0000                	unimp
    16d0:	05a0                	addi	s0,sp,712
    16d2:	0000                	unimp
    16d4:	0002                	c.slli64	zero
    16d6:	05a00083          	lb	ra,90(zero) # 5a <__DYNAMIC+0x5a>
    16da:	0000                	unimp
    16dc:	05aa                	slli	a1,a1,0xa
    16de:	0000                	unimp
    16e0:	000c                	0xc
    16e2:	0089                	addi	ra,ra,2
    16e4:	0188                	addi	a0,sp,192
    16e6:	2432                	fld	fs0,264(sp)
    16e8:	f0090f23          	sb	zero,-226(s2)
    16ec:	1c1a                	slli	s8,s8,0x26
    16ee:	05aa                	slli	a1,a1,0xa
    16f0:	0000                	unimp
    16f2:	05ac                	addi	a1,sp,712
    16f4:	0000                	unimp
    16f6:	000d                	c.nop	3
    16f8:	0089                	addi	ra,ra,2
    16fa:	325b01f3          	0x325b01f3
    16fe:	2324                	fld	fs1,64(a4)
    1700:	1af0090f          	0x1af0090f
    1704:	bc1c                	fsd	fa5,56(s0)
    1706:	0005                	c.nop	1
    1708:	f200                	fsw	fs0,32(a2)
    170a:	0006                	c.slli	zero,0x1
    170c:	0200                	addi	s0,sp,256
    170e:	8300                	0x8300
	...
    1718:	7800                	flw	fs0,48(s0)
    171a:	0004                	0x4
    171c:	9600                	0x9600
    171e:	0005                	c.nop	1
    1720:	0200                	addi	s0,sp,256
    1722:	7200                	flw	fs0,32(a2)
    1724:	9600                	0x9600
    1726:	0005                	c.nop	1
    1728:	a800                	fsd	fs0,16(s0)
    172a:	0005                	c.nop	1
    172c:	0200                	addi	s0,sp,256
    172e:	8700                	0x8700
    1730:	a800                	fsd	fs0,16(s0)
    1732:	0005                	c.nop	1
    1734:	aa00                	fsd	fs0,16(a2)
    1736:	0005                	c.nop	1
    1738:	1700                	addi	s0,sp,928
    173a:	8900                	0x8900
    173c:	8800                	0x8800
    173e:	3201                	jal	103e <memset>
    1740:	2324                	fld	fs1,64(a4)
    1742:	1af0090f          	0x1af0090f
    1746:	f31c                	fsw	fa5,32(a4)
    1748:	5d01                	li	s10,-32
    174a:	2432                	fld	fs0,264(sp)
    174c:	f0090f23          	sb	zero,-226(s2)
    1750:	1c1a                	slli	s8,s8,0x26
    1752:	05aa                	slli	a1,a1,0xa
    1754:	0000                	unimp
    1756:	05ac                	addi	a1,sp,712
    1758:	0000                	unimp
    175a:	0018                	0x18
    175c:	0089                	addi	ra,ra,2
    175e:	325b01f3          	0x325b01f3
    1762:	2324                	fld	fs1,64(a4)
    1764:	1af0090f          	0x1af0090f
    1768:	f31c                	fsw	fa5,32(a4)
    176a:	5d01                	li	s10,-32
    176c:	2432                	fld	fs0,264(sp)
    176e:	f0090f23          	sb	zero,-226(s2)
    1772:	1c1a                	slli	s8,s8,0x26
    1774:	05bc                	addi	a5,sp,712
    1776:	0000                	unimp
    1778:	06f2                	slli	a3,a3,0x1c
    177a:	0000                	unimp
    177c:	0002                	c.slli64	zero
    177e:	0072                	c.slli	zero,0x1c
	...
    1788:	0472                	slli	s0,s0,0x1c
    178a:	0000                	unimp
    178c:	05aa                	slli	a1,a1,0xa
    178e:	0000                	unimp
    1790:	0001                	nop
    1792:	aa68                	fsd	fa0,208(a2)
    1794:	0005                	c.nop	1
    1796:	bc00                	fsd	fs0,56(s0)
    1798:	0005                	c.nop	1
    179a:	0600                	addi	s0,sp,768
    179c:	f300                	fsw	fs0,32(a4)
    179e:	5b01                	li	s6,-32
    17a0:	1c31                	addi	s8,s8,-20
    17a2:	bc9f 0005 f200      	0xf2000005bc9f
    17a8:	0006                	c.slli	zero,0x1
    17aa:	0100                	addi	s0,sp,128
    17ac:	6800                	flw	fs0,16(s0)
	...
    17b6:	0472                	slli	s0,s0,0x1c
    17b8:	0000                	unimp
    17ba:	05aa                	slli	a1,a1,0xa
    17bc:	0000                	unimp
    17be:	0001                	nop
    17c0:	aa68                	fsd	fa0,208(a2)
    17c2:	0005                	c.nop	1
    17c4:	bc00                	fsd	fs0,56(s0)
    17c6:	0005                	c.nop	1
    17c8:	0600                	addi	s0,sp,768
    17ca:	f300                	fsw	fs0,32(a4)
    17cc:	5b01                	li	s6,-32
    17ce:	1c31                	addi	s8,s8,-20
    17d0:	bc9f 0005 f200      	0xf2000005bc9f
    17d6:	0006                	c.slli	zero,0x1
    17d8:	0100                	addi	s0,sp,128
    17da:	6800                	flw	fs0,16(s0)
	...
    17e4:	0472                	slli	s0,s0,0x1c
    17e6:	0000                	unimp
    17e8:	05aa                	slli	a1,a1,0xa
    17ea:	0000                	unimp
    17ec:	0001                	nop
    17ee:	aa68                	fsd	fa0,208(a2)
    17f0:	0005                	c.nop	1
    17f2:	bc00                	fsd	fs0,56(s0)
    17f4:	0005                	c.nop	1
    17f6:	0600                	addi	s0,sp,768
    17f8:	f300                	fsw	fs0,32(a4)
    17fa:	5b01                	li	s6,-32
    17fc:	1c31                	addi	s8,s8,-20
    17fe:	bc9f 0005 f200      	0xf2000005bc9f
    1804:	0006                	c.slli	zero,0x1
    1806:	0100                	addi	s0,sp,128
    1808:	6800                	flw	fs0,16(s0)
	...
    1812:	0476                	slli	s0,s0,0x1d
    1814:	0000                	unimp
    1816:	04b2                	slli	s1,s1,0xc
    1818:	0000                	unimp
    181a:	0001                	nop
    181c:	b265                	j	11c4 <main+0xde>
    181e:	0004                	0x4
    1820:	cc00                	sw	s0,24(s0)
    1822:	0004                	0x4
    1824:	0300                	addi	s0,sp,384
    1826:	8400                	0x8400
    1828:	9f7f                	0x9f7f
    182a:	04cc                	addi	a1,sp,580
    182c:	0000                	unimp
    182e:	054c                	addi	a1,sp,644
    1830:	0000                	unimp
    1832:	0001                	nop
    1834:	4c65                	li	s8,25
    1836:	0005                	c.nop	1
    1838:	a200                	fsd	fs0,0(a2)
    183a:	0005                	c.nop	1
    183c:	0300                	addi	s0,sp,384
    183e:	8400                	0x8400
    1840:	9f7f                	0x9f7f
    1842:	05a2                	slli	a1,a1,0x8
    1844:	0000                	unimp
    1846:	05bc                	addi	a5,sp,712
    1848:	0000                	unimp
    184a:	0006                	c.slli	zero,0x1
    184c:	315d01f3          	0x315d01f3
    1850:	9f1c                	0x9f1c
    1852:	05bc                	addi	a5,sp,712
    1854:	0000                	unimp
    1856:	06f2                	slli	a3,a3,0x1c
    1858:	0000                	unimp
    185a:	7f840003          	lb	zero,2040(s0) # 17f8 <product2+0x234>
    185e:	009f 0000 0000      	0x9f
    1864:	0000                	unimp
    1866:	b400                	fsd	fs0,40(s0)
    1868:	0002                	c.slli64	zero
    186a:	2400                	fld	fs0,8(s0)
    186c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1870:	5a00                	lw	s0,48(a2)
    1872:	0324                	addi	s1,sp,392
    1874:	0000                	unimp
    1876:	033e                	slli	t1,t1,0xf
    1878:	0000                	unimp
    187a:	0004                	0x4
    187c:	9f5a01f3          	0x9f5a01f3
    1880:	033e                	slli	t1,t1,0xf
    1882:	0000                	unimp
    1884:	0374                	addi	a3,sp,396
    1886:	0000                	unimp
    1888:	0001                	nop
    188a:	745a                	flw	fs0,180(sp)
    188c:	24000003          	lb	zero,576(zero) # 240 <polymult+0x1b4>
    1890:	0004                	0x4
    1892:	0400                	addi	s0,sp,512
    1894:	f300                	fsw	fs0,32(a4)
    1896:	5a01                	li	s4,-32
    1898:	009f 0000 0000      	0x9f
    189e:	0000                	unimp
    18a0:	b400                	fsd	fs0,40(s0)
    18a2:	0002                	c.slli64	zero
    18a4:	2400                	fld	fs0,8(s0)
    18a6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18aa:	5b00                	lw	s0,48(a4)
    18ac:	0324                	addi	s1,sp,392
    18ae:	0000                	unimp
    18b0:	033e                	slli	t1,t1,0xf
    18b2:	0000                	unimp
    18b4:	018f0003          	lb	zero,24(t5)
    18b8:	3e9f 0003 7400      	0x740000033e9f
    18be:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18c2:	5b00                	lw	s0,48(a4)
    18c4:	0374                	addi	a3,sp,396
    18c6:	0000                	unimp
    18c8:	0424                	addi	s1,sp,520
    18ca:	0000                	unimp
    18cc:	018f0003          	lb	zero,24(t5)
    18d0:	009f 0000 0000      	0x9f
    18d6:	0000                	unimp
    18d8:	b400                	fsd	fs0,40(s0)
    18da:	0002                	c.slli64	zero
    18dc:	2a00                	fld	fs0,16(a2)
    18de:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18e2:	5c00                	lw	s0,56(s0)
    18e4:	032a                	slli	t1,t1,0xa
    18e6:	0000                	unimp
    18e8:	033e                	slli	t1,t1,0xf
    18ea:	0000                	unimp
    18ec:	0004                	0x4
    18ee:	9f5c01f3          	0x9f5c01f3
    18f2:	033e                	slli	t1,t1,0xf
    18f4:	0000                	unimp
    18f6:	0388                	addi	a0,sp,448
    18f8:	0000                	unimp
    18fa:	0001                	nop
    18fc:	885c                	0x885c
    18fe:	24000003          	lb	zero,576(zero) # 240 <polymult+0x1b4>
    1902:	0004                	0x4
    1904:	0400                	addi	s0,sp,512
    1906:	f300                	fsw	fs0,32(a4)
    1908:	5c01                	li	s8,-32
    190a:	009f 0000 0000      	0x9f
    1910:	0000                	unimp
    1912:	b400                	fsd	fs0,40(s0)
    1914:	0002                	c.slli64	zero
    1916:	3600                	fld	fs0,40(a2)
    1918:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    191c:	5e00                	lw	s0,56(a2)
    191e:	0336                	slli	t1,t1,0xd
    1920:	0000                	unimp
    1922:	033e                	slli	t1,t1,0xf
    1924:	0000                	unimp
    1926:	0004                	0x4
    1928:	9f5e01f3          	0x9f5e01f3
    192c:	033e                	slli	t1,t1,0xf
    192e:	0000                	unimp
    1930:	0388                	addi	a0,sp,448
    1932:	0000                	unimp
    1934:	0001                	nop
    1936:	885e                	mv	a6,s7
    1938:	24000003          	lb	zero,576(zero) # 240 <polymult+0x1b4>
    193c:	0004                	0x4
    193e:	0400                	addi	s0,sp,512
    1940:	f300                	fsw	fs0,32(a4)
    1942:	5e01                	li	t3,-32
    1944:	009f 0000 0000      	0x9f
    194a:	0000                	unimp
    194c:	0000                	unimp
    194e:	18000003          	lb	zero,384(zero) # 180 <polymult+0xf4>
    1952:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1956:	8c00                	0x8c00
    1958:	1800                	addi	s0,sp,48
    195a:	88000003          	lb	zero,-1920(zero) # fffff880 <_stack_start+0xfffef880>
    195e:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1962:	8200                	0x8200
    1964:	8800                	0x8800
    1966:	de000003          	lb	zero,-544(zero) # fffffde0 <_stack_start+0xfffefde0>
    196a:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    196e:	8c00                	0x8c00
    1970:	de00                	sw	s0,56(a2)
    1972:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1976:	0004                	0x4
    1978:	0200                	addi	s0,sp,256
    197a:	8200                	0x8200
    197c:	0200                	addi	s0,sp,256
    197e:	0004                	0x4
    1980:	2400                	fld	fs0,8(s0)
    1982:	0004                	0x4
    1984:	0200                	addi	s0,sp,256
    1986:	8c00                	0x8c00
	...
    1990:	0600                	addi	s0,sp,768
    1992:	18000003          	lb	zero,384(zero) # 180 <polymult+0xf4>
    1996:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    199a:	3000                	fld	fs0,32(s0)
    199c:	189f 0003 1e00      	0x1e000003189f
    19a2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    19a6:	5900                	lw	s0,48(a0)
    19a8:	031e                	slli	t1,t1,0x7
    19aa:	0000                	unimp
    19ac:	0324                	addi	s1,sp,392
    19ae:	0000                	unimp
    19b0:	0001                	nop
    19b2:	00032457          	0x32457
    19b6:	3600                	fld	fs0,40(a2)
    19b8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    19bc:	5b00                	lw	s0,48(a4)
    19be:	033e                	slli	t1,t1,0xf
    19c0:	0000                	unimp
    19c2:	0360                	addi	s0,sp,396
    19c4:	0000                	unimp
    19c6:	0001                	nop
    19c8:	6059                	c.lui	zero,0x16
    19ca:	6e000003          	lb	zero,1760(zero) # 6e0 <polydiv+0x2bc>
    19ce:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    19d2:	5700                	lw	s0,40(a4)
    19d4:	036e                	slli	t1,t1,0x1b
    19d6:	0000                	unimp
    19d8:	0372                	slli	t1,t1,0x1c
    19da:	0000                	unimp
    19dc:	7f770003          	lb	zero,2039(a4)
    19e0:	729f 0003 7400      	0x74000003729f
    19e6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    19ea:	5700                	lw	s0,40(a4)
    19ec:	0374                	addi	a3,sp,396
    19ee:	0000                	unimp
    19f0:	0382                	c.slli64	t2
    19f2:	0000                	unimp
    19f4:	0001                	nop
    19f6:	0003825b          	0x3825b
    19fa:	8600                	0x8600
    19fc:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1a00:	7b00                	flw	fs0,48(a4)
    1a02:	9f7f                	0x9f7f
    1a04:	0386                	slli	t2,t2,0x1
    1a06:	0000                	unimp
    1a08:	0388                	addi	a0,sp,448
    1a0a:	0000                	unimp
    1a0c:	0001                	nop
    1a0e:	0004025b          	0x4025b
    1a12:	0a00                	addi	s0,sp,272
    1a14:	0004                	0x4
    1a16:	0100                	addi	s0,sp,128
    1a18:	5b00                	lw	s0,48(a4)
    1a1a:	040a                	slli	s0,s0,0x2
    1a1c:	0000                	unimp
    1a1e:	0416                	slli	s0,s0,0x5
    1a20:	0000                	unimp
    1a22:	7f7b0003          	lb	zero,2039(s6)
    1a26:	169f 0004 2000      	0x20000004169f
    1a2c:	0004                	0x4
    1a2e:	0100                	addi	s0,sp,128
    1a30:	5b00                	lw	s0,48(a4)
	...
    1a3a:	0336                	slli	t1,t1,0xd
    1a3c:	0000                	unimp
    1a3e:	033e                	slli	t1,t1,0xf
    1a40:	0000                	unimp
    1a42:	0001                	nop
    1a44:	3e61                	jal	15dc <product2+0x18>
    1a46:	5a000003          	lb	zero,1440(zero) # 5a0 <polydiv+0x17c>
    1a4a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1a4e:	5700                	lw	s0,40(a4)
    1a50:	0388                	addi	a0,sp,448
    1a52:	0000                	unimp
    1a54:	03b8                	addi	a4,sp,456
    1a56:	0000                	unimp
    1a58:	0001                	nop
    1a5a:	b861                	j	12f2 <__DTOR_END__+0x10a>
    1a5c:	da000003          	lb	zero,-608(zero) # fffffda0 <_stack_start+0xfffefda0>
    1a60:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1a64:	5e00                	lw	s0,56(a2)
    1a66:	03da                	slli	t2,t2,0x16
    1a68:	0000                	unimp
    1a6a:	0402                	c.slli64	s0
    1a6c:	0000                	unimp
    1a6e:	0001                	nop
    1a70:	0261                	addi	tp,tp,24
    1a72:	0004                	0x4
    1a74:	2400                	fld	fs0,8(s0)
    1a76:	0004                	0x4
    1a78:	0100                	addi	s0,sp,128
    1a7a:	5e00                	lw	s0,56(a2)
	...
    1a84:	0388                	addi	a0,sp,448
    1a86:	0000                	unimp
    1a88:	039a                	slli	t2,t2,0x6
    1a8a:	0000                	unimp
    1a8c:	0001                	nop
    1a8e:	9a5e                	add	s4,s4,s7
    1a90:	a0000003          	lb	zero,-1536(zero) # fffffa00 <_stack_start+0xfffefa00>
    1a94:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1a98:	7e00                	flw	fs0,56(a2)
    1a9a:	9f01                	0x9f01
    1a9c:	03a0                	addi	s0,sp,456
    1a9e:	0000                	unimp
    1aa0:	03aa                	slli	t2,t2,0xa
    1aa2:	0000                	unimp
    1aa4:	0001                	nop
    1aa6:	de5e                	sw	s7,60(sp)
    1aa8:	f0000003          	lb	zero,-256(zero) # ffffff00 <_stack_start+0xfffeff00>
    1aac:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1ab0:	5e00                	lw	s0,56(a2)
    1ab2:	03f0                	addi	a2,sp,460
    1ab4:	0000                	unimp
    1ab6:	03f6                	slli	t2,t2,0x1d
    1ab8:	0000                	unimp
    1aba:	017e0003          	lb	zero,23(t3)
    1abe:	f69f 0003 0200      	0x2000003f69f
    1ac4:	0004                	0x4
    1ac6:	0100                	addi	s0,sp,128
    1ac8:	5e00                	lw	s0,56(a2)
	...
    1ad2:	03bc                	addi	a5,sp,456
    1ad4:	0000                	unimp
    1ad6:	03da                	slli	t2,t2,0x16
    1ad8:	0000                	unimp
    1ada:	0006                	c.slli	zero,0x1
    1adc:	0015c403          	lbu	s0,1(a1)
    1ae0:	9f00                	0x9f00
	...
    1aea:	0306                	slli	t1,t1,0x1
    1aec:	0000                	unimp
    1aee:	03c0                	addi	s0,sp,452
    1af0:	0000                	unimp
    1af2:	0002                	c.slli64	zero
    1af4:	0072                	c.slli	zero,0x1c
    1af6:	03c0                	addi	s0,sp,452
    1af8:	0000                	unimp
    1afa:	03da                	slli	t2,t2,0x16
    1afc:	0000                	unimp
    1afe:	000c                	0xc
    1b00:	0075                	c.nop	29
    1b02:	007d                	c.nop	31
    1b04:	2432                	fld	fs0,264(sp)
    1b06:	f0090f23          	sb	zero,-226(s2)
    1b0a:	1c1a                	slli	s8,s8,0x26
    1b0c:	03da                	slli	t2,t2,0x16
    1b0e:	0000                	unimp
    1b10:	0424                	addi	s1,sp,520
    1b12:	0000                	unimp
    1b14:	0002                	c.slli64	zero
    1b16:	0072                	c.slli	zero,0x1c
	...
    1b20:	0300                	addi	s0,sp,384
    1b22:	0000                	unimp
    1b24:	0336                	slli	t1,t1,0xd
    1b26:	0000                	unimp
    1b28:	0001                	nop
    1b2a:	3661                	jal	16b2 <product2+0xee>
    1b2c:	3e000003          	lb	zero,992(zero) # 3e0 <polymult2+0x12c>
    1b30:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1b34:	7d00                	flw	fs0,56(a0)
    1b36:	9f7f                	0x9f7f
    1b38:	033e                	slli	t1,t1,0xf
    1b3a:	0000                	unimp
    1b3c:	0388                	addi	a0,sp,448
    1b3e:	0000                	unimp
    1b40:	0001                	nop
    1b42:	8861                	andi	s0,s0,24
    1b44:	24000003          	lb	zero,576(zero) # 240 <polymult+0x1b4>
    1b48:	0004                	0x4
    1b4a:	0300                	addi	s0,sp,384
    1b4c:	7d00                	flw	fs0,56(a0)
    1b4e:	9f7f                	0x9f7f
	...
    1b58:	0304                	addi	s1,sp,384
    1b5a:	0000                	unimp
    1b5c:	0336                	slli	t1,t1,0xd
    1b5e:	0000                	unimp
    1b60:	0001                	nop
    1b62:	3661                	jal	16ea <product2+0x126>
    1b64:	3e000003          	lb	zero,992(zero) # 3e0 <polymult2+0x12c>
    1b68:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1b6c:	7d00                	flw	fs0,56(a0)
    1b6e:	9f7f                	0x9f7f
    1b70:	033e                	slli	t1,t1,0xf
    1b72:	0000                	unimp
    1b74:	0388                	addi	a0,sp,448
    1b76:	0000                	unimp
    1b78:	0001                	nop
    1b7a:	8861                	andi	s0,s0,24
    1b7c:	24000003          	lb	zero,576(zero) # 240 <polymult+0x1b4>
    1b80:	0004                	0x4
    1b82:	0300                	addi	s0,sp,384
    1b84:	7d00                	flw	fs0,56(a0)
    1b86:	9f7f                	0x9f7f
	...
    1b90:	008c                	addi	a1,sp,64
    1b92:	0000                	unimp
    1b94:	0104                	addi	s1,sp,128
    1b96:	0000                	unimp
    1b98:	0001                	nop
    1b9a:	045a                	slli	s0,s0,0x16
    1b9c:	0001                	nop
    1b9e:	4000                	lw	s0,0(s0)
    1ba0:	0001                	nop
    1ba2:	0400                	addi	s0,sp,512
    1ba4:	f300                	fsw	fs0,32(a4)
    1ba6:	5a01                	li	s4,-32
    1ba8:	409f 0001 7800      	0x78000001409f
    1bae:	0001                	nop
    1bb0:	0100                	addi	s0,sp,128
    1bb2:	5a00                	lw	s0,48(a2)
    1bb4:	0178                	addi	a4,sp,140
    1bb6:	0000                	unimp
    1bb8:	02b4                	addi	a3,sp,328
    1bba:	0000                	unimp
    1bbc:	0004                	0x4
    1bbe:	9f5a01f3          	0x9f5a01f3
	...
    1bca:	008c                	addi	a1,sp,64
    1bcc:	0000                	unimp
    1bce:	011c                	addi	a5,sp,128
    1bd0:	0000                	unimp
    1bd2:	0001                	nop
    1bd4:	00011c5b          	0x11c5b
    1bd8:	4000                	lw	s0,0(s0)
    1bda:	0001                	nop
    1bdc:	0300                	addi	s0,sp,384
    1bde:	7700                	flw	fs0,40(a4)
    1be0:	9f01                	0x9f01
    1be2:	0140                	addi	s0,sp,132
    1be4:	0000                	unimp
    1be6:	01b4                	addi	a3,sp,200
    1be8:	0000                	unimp
    1bea:	0001                	nop
    1bec:	0001b45b          	0x1b45b
    1bf0:	b400                	fsd	fs0,40(s0)
    1bf2:	0002                	c.slli64	zero
    1bf4:	0300                	addi	s0,sp,384
    1bf6:	7700                	flw	fs0,40(a4)
    1bf8:	9f01                	0x9f01
	...
    1c02:	008c                	addi	a1,sp,64
    1c04:	0000                	unimp
    1c06:	010a                	slli	sp,sp,0x2
    1c08:	0000                	unimp
    1c0a:	0001                	nop
    1c0c:	0a5c                	addi	a5,sp,276
    1c0e:	0001                	nop
    1c10:	4000                	lw	s0,0(s0)
    1c12:	0001                	nop
    1c14:	0400                	addi	s0,sp,512
    1c16:	f300                	fsw	fs0,32(a4)
    1c18:	5c01                	li	s8,-32
    1c1a:	409f 0001 8e00      	0x8e000001409f
    1c20:	0001                	nop
    1c22:	0100                	addi	s0,sp,128
    1c24:	5c00                	lw	s0,56(s0)
    1c26:	018e                	slli	gp,gp,0x3
    1c28:	0000                	unimp
    1c2a:	02b4                	addi	a3,sp,328
    1c2c:	0000                	unimp
    1c2e:	0004                	0x4
    1c30:	9f5c01f3          	0x9f5c01f3
	...
    1c3c:	008c                	addi	a1,sp,64
    1c3e:	0000                	unimp
    1c40:	01f2                	slli	gp,gp,0x1c
    1c42:	0000                	unimp
    1c44:	0001                	nop
    1c46:	f25d                	bnez	a2,1bec <ti_2+0x178>
    1c48:	0001                	nop
    1c4a:	1600                	addi	s0,sp,800
    1c4c:	0002                	c.slli64	zero
    1c4e:	0400                	addi	s0,sp,512
    1c50:	f300                	fsw	fs0,32(a4)
    1c52:	5d01                	li	s10,-32
    1c54:	169f 0002 a400      	0xa4000002169f
    1c5a:	0002                	c.slli64	zero
    1c5c:	0100                	addi	s0,sp,128
    1c5e:	5d00                	lw	s0,56(a0)
    1c60:	02a4                	addi	s1,sp,328
    1c62:	0000                	unimp
    1c64:	02b4                	addi	a3,sp,328
    1c66:	0000                	unimp
    1c68:	0004                	0x4
    1c6a:	9f5d01f3          	0x9f5d01f3
	...
    1c76:	008c                	addi	a1,sp,64
    1c78:	0000                	unimp
    1c7a:	0138                	addi	a4,sp,136
    1c7c:	0000                	unimp
    1c7e:	0001                	nop
    1c80:	385f 0001 4000      	0x40000001385f
    1c86:	0001                	nop
    1c88:	0400                	addi	s0,sp,512
    1c8a:	f300                	fsw	fs0,32(a4)
    1c8c:	5f01                	li	t5,-32
    1c8e:	409f 0001 d600      	0xd6000001409f
    1c94:	0001                	nop
    1c96:	0100                	addi	s0,sp,128
    1c98:	5f00                	lw	s0,56(a4)
    1c9a:	01d6                	slli	gp,gp,0x15
    1c9c:	0000                	unimp
    1c9e:	02b4                	addi	a3,sp,328
    1ca0:	0000                	unimp
    1ca2:	0004                	0x4
    1ca4:	9f5f01f3          	0x9f5f01f3
	...
    1cb0:	00e0                	addi	s0,sp,76
    1cb2:	0000                	unimp
    1cb4:	00f8                	addi	a4,sp,76
    1cb6:	0000                	unimp
    1cb8:	0002                	c.slli64	zero
    1cba:	008c                	addi	a1,sp,64
    1cbc:	00f8                	addi	a4,sp,76
    1cbe:	0000                	unimp
    1cc0:	01dc                	addi	a5,sp,196
    1cc2:	0000                	unimp
    1cc4:	0002                	c.slli64	zero
    1cc6:	0079                	c.nop	30
    1cc8:	01dc                	addi	a5,sp,196
    1cca:	0000                	unimp
    1ccc:	0216                	slli	tp,tp,0x5
    1cce:	0000                	unimp
    1cd0:	0002                	c.slli64	zero
    1cd2:	008c                	addi	a1,sp,64
    1cd4:	0216                	slli	tp,tp,0x5
    1cd6:	0000                	unimp
    1cd8:	0262                	slli	tp,tp,0x18
    1cda:	0000                	unimp
    1cdc:	0002                	c.slli64	zero
    1cde:	0079                	c.nop	30
    1ce0:	0262                	slli	tp,tp,0x18
    1ce2:	0000                	unimp
    1ce4:	02b4                	addi	a3,sp,328
    1ce6:	0000                	unimp
    1ce8:	0002                	c.slli64	zero
    1cea:	008c                	addi	a1,sp,64
	...
    1cf4:	00e6                	slli	ra,ra,0x19
    1cf6:	0000                	unimp
    1cf8:	00f8                	addi	a4,sp,76
    1cfa:	0000                	unimp
    1cfc:	0002                	c.slli64	zero
    1cfe:	9f30                	0x9f30
    1d00:	00f8                	addi	a4,sp,76
    1d02:	0000                	unimp
    1d04:	00fe                	slli	ra,ra,0x1f
    1d06:	0000                	unimp
    1d08:	0001                	nop
    1d0a:	0000fe63          	bgeu	ra,zero,1d26 <random_keys+0x122>
    1d0e:	0400                	addi	s0,sp,512
    1d10:	0001                	nop
    1d12:	0100                	addi	s0,sp,128
    1d14:	6200                	flw	fs0,0(a2)
    1d16:	0104                	addi	s1,sp,128
    1d18:	0000                	unimp
    1d1a:	010c                	addi	a1,sp,128
    1d1c:	0000                	unimp
    1d1e:	0001                	nop
    1d20:	0e5a                	slli	t3,t3,0x16
    1d22:	0001                	nop
    1d24:	1400                	addi	s0,sp,544
    1d26:	0001                	nop
    1d28:	0100                	addi	s0,sp,128
    1d2a:	6300                	flw	fs0,0(a4)
    1d2c:	0114                	addi	a3,sp,128
    1d2e:	0000                	unimp
    1d30:	011e                	slli	sp,sp,0x7
    1d32:	0000                	unimp
    1d34:	0001                	nop
    1d36:	1e5a                	slli	t3,t3,0x36
    1d38:	0001                	nop
    1d3a:	2400                	fld	fs0,8(s0)
    1d3c:	0001                	nop
    1d3e:	0100                	addi	s0,sp,128
    1d40:	6200                	flw	fs0,0(a2)
    1d42:	0124                	addi	s1,sp,136
    1d44:	0000                	unimp
    1d46:	0136                	slli	sp,sp,0xd
    1d48:	0000                	unimp
    1d4a:	0001                	nop
    1d4c:	0001405b          	0x1405b
    1d50:	6200                	flw	fs0,0(a2)
    1d52:	0001                	nop
    1d54:	0100                	addi	s0,sp,128
    1d56:	6300                	flw	fs0,0(a4)
    1d58:	0162                	slli	sp,sp,0x18
    1d5a:	0000                	unimp
    1d5c:	0172                	slli	sp,sp,0x1c
    1d5e:	0000                	unimp
    1d60:	0001                	nop
    1d62:	7262                	flw	ft4,56(sp)
    1d64:	0001                	nop
    1d66:	7600                	flw	fs0,40(a2)
    1d68:	0001                	nop
    1d6a:	0300                	addi	s0,sp,384
    1d6c:	8200                	0x8200
    1d6e:	9f7f                	0x9f7f
    1d70:	0176                	slli	sp,sp,0x1d
    1d72:	0000                	unimp
    1d74:	0178                	addi	a4,sp,140
    1d76:	0000                	unimp
    1d78:	0001                	nop
    1d7a:	7862                	flw	fa6,56(sp)
    1d7c:	0001                	nop
    1d7e:	8800                	0x8800
    1d80:	0001                	nop
    1d82:	0100                	addi	s0,sp,128
    1d84:	5a00                	lw	s0,48(a2)
    1d86:	0188                	addi	a0,sp,192
    1d88:	0000                	unimp
    1d8a:	018c                	addi	a1,sp,192
    1d8c:	0000                	unimp
    1d8e:	7f7a0003          	lb	zero,2039(s4)
    1d92:	8c9f 0001 8e00      	0x8e0000018c9f
    1d98:	0001                	nop
    1d9a:	0100                	addi	s0,sp,128
    1d9c:	5a00                	lw	s0,48(a2)
    1d9e:	018e                	slli	gp,gp,0x3
    1da0:	0000                	unimp
    1da2:	01a2                	slli	gp,gp,0x8
    1da4:	0000                	unimp
    1da6:	0001                	nop
    1da8:	0001a263          	0x1a263
    1dac:	a800                	fsd	fs0,16(s0)
    1dae:	0001                	nop
    1db0:	0100                	addi	s0,sp,128
    1db2:	5a00                	lw	s0,48(a2)
    1db4:	01a8                	addi	a0,sp,200
    1db6:	0000                	unimp
    1db8:	01b2                	slli	gp,gp,0xc
    1dba:	0000                	unimp
    1dbc:	7f7a0003          	lb	zero,2039(s4)
    1dc0:	b29f 0001 b400      	0xb4000001b29f
    1dc6:	0001                	nop
    1dc8:	0100                	addi	s0,sp,128
    1dca:	5a00                	lw	s0,48(a2)
    1dcc:	01b4                	addi	a3,sp,200
    1dce:	0000                	unimp
    1dd0:	01c4                	addi	s1,sp,196
    1dd2:	0000                	unimp
    1dd4:	0001                	nop
    1dd6:	c462                	sw	s8,8(sp)
    1dd8:	0001                	nop
    1dda:	c800                	sw	s0,16(s0)
    1ddc:	0001                	nop
    1dde:	0100                	addi	s0,sp,128
    1de0:	5b00                	lw	s0,48(a4)
    1de2:	01c8                	addi	a0,sp,196
    1de4:	0000                	unimp
    1de6:	01d2                	slli	gp,gp,0x14
    1de8:	0000                	unimp
    1dea:	7f7b0003          	lb	zero,2039(s6)
    1dee:	d29f 0001 d600      	0xd6000001d29f
    1df4:	0001                	nop
    1df6:	0100                	addi	s0,sp,128
    1df8:	5b00                	lw	s0,48(a4)
    1dfa:	01dc                	addi	a5,sp,196
    1dfc:	0000                	unimp
    1dfe:	01e8                	addi	a0,sp,204
    1e00:	0000                	unimp
    1e02:	0001                	nop
    1e04:	625c                	flw	fa5,4(a2)
    1e06:	0002                	c.slli64	zero
    1e08:	8000                	0x8000
    1e0a:	0002                	c.slli64	zero
    1e0c:	0100                	addi	s0,sp,128
    1e0e:	5c00                	lw	s0,56(s0)
    1e10:	0280                	addi	s0,sp,320
    1e12:	0000                	unimp
    1e14:	028a                	slli	t0,t0,0x2
    1e16:	0000                	unimp
    1e18:	0001                	nop
    1e1a:	8a60                	0x8a60
    1e1c:	0002                	c.slli64	zero
    1e1e:	9600                	0x9600
    1e20:	0002                	c.slli64	zero
    1e22:	0300                	addi	s0,sp,384
    1e24:	8000                	0x8000
    1e26:	9f7f                	0x9f7f
    1e28:	0296                	slli	t0,t0,0x5
    1e2a:	0000                	unimp
    1e2c:	02a0                	addi	s0,sp,328
    1e2e:	0000                	unimp
    1e30:	0001                	nop
    1e32:	0060                	addi	s0,sp,12
    1e34:	0000                	unimp
    1e36:	0000                	unimp
    1e38:	0000                	unimp
    1e3a:	3800                	fld	fs0,48(s0)
    1e3c:	0001                	nop
    1e3e:	4000                	lw	s0,0(s0)
    1e40:	0001                	nop
    1e42:	0100                	addi	s0,sp,128
    1e44:	5600                	lw	s0,40(a2)
    1e46:	0140                	addi	s0,sp,132
    1e48:	0000                	unimp
    1e4a:	015c                	addi	a5,sp,132
    1e4c:	0000                	unimp
    1e4e:	0001                	nop
    1e50:	d662                	sw	s8,44(sp)
    1e52:	0001                	nop
    1e54:	dc00                	sw	s0,56(s0)
    1e56:	0001                	nop
    1e58:	0100                	addi	s0,sp,128
    1e5a:	5600                	lw	s0,40(a2)
    1e5c:	01ec                	addi	a1,sp,204
    1e5e:	0000                	unimp
    1e60:	01f2                	slli	gp,gp,0x1c
    1e62:	0000                	unimp
    1e64:	0001                	nop
    1e66:	0001f25b          	0x1f25b
    1e6a:	1600                	addi	s0,sp,800
    1e6c:	0002                	c.slli64	zero
    1e6e:	0100                	addi	s0,sp,128
    1e70:	5f00                	lw	s0,56(a4)
    1e72:	0216                	slli	tp,tp,0x5
    1e74:	0000                	unimp
    1e76:	0262                	slli	tp,tp,0x18
    1e78:	0000                	unimp
    1e7a:	0001                	nop
    1e7c:	6256                	flw	ft4,84(sp)
    1e7e:	0002                	c.slli64	zero
    1e80:	6600                	flw	fs0,8(a2)
    1e82:	0002                	c.slli64	zero
    1e84:	0100                	addi	s0,sp,128
    1e86:	5b00                	lw	s0,48(a4)
    1e88:	0266                	slli	tp,tp,0x19
    1e8a:	0000                	unimp
    1e8c:	0270                	addi	a2,sp,268
    1e8e:	0000                	unimp
    1e90:	7f7b0003          	lb	zero,2039(s6)
    1e94:	709f 0002 7a00      	0x7a000002709f
    1e9a:	0002                	c.slli64	zero
    1e9c:	0100                	addi	s0,sp,128
    1e9e:	5b00                	lw	s0,48(a4)
    1ea0:	0280                	addi	s0,sp,320
    1ea2:	0000                	unimp
    1ea4:	02a4                	addi	s1,sp,328
    1ea6:	0000                	unimp
    1ea8:	0001                	nop
    1eaa:	0002a45b          	0x2a45b
    1eae:	a800                	fsd	fs0,16(s0)
    1eb0:	0002                	c.slli64	zero
    1eb2:	0100                	addi	s0,sp,128
    1eb4:	5f00                	lw	s0,56(a4)
    1eb6:	02a8                	addi	a0,sp,328
    1eb8:	0000                	unimp
    1eba:	02b2                	slli	t0,t0,0xc
    1ebc:	0000                	unimp
    1ebe:	7f7f0003          	lb	zero,2039(t5)
    1ec2:	b29f 0002 b400      	0xb4000002b29f
    1ec8:	0002                	c.slli64	zero
    1eca:	0100                	addi	s0,sp,128
    1ecc:	5f00                	lw	s0,56(a4)
	...
    1ed6:	0216                	slli	tp,tp,0x5
    1ed8:	0000                	unimp
    1eda:	0228                	addi	a0,sp,264
    1edc:	0000                	unimp
    1ede:	0001                	nop
    1ee0:	285f 0002 2e00      	0x2e000002285f
    1ee6:	0002                	c.slli64	zero
    1ee8:	0300                	addi	s0,sp,384
    1eea:	7f00                	flw	fs0,56(a4)
    1eec:	9f01                	0x9f01
    1eee:	022e                	slli	tp,tp,0xb
    1ef0:	0000                	unimp
    1ef2:	023a                	slli	tp,tp,0xe
    1ef4:	0000                	unimp
    1ef6:	0001                	nop
    1ef8:	3e5f 0002 5000      	0x500000023e5f
    1efe:	0002                	c.slli64	zero
    1f00:	0100                	addi	s0,sp,128
    1f02:	5f00                	lw	s0,56(a4)
    1f04:	0250                	addi	a2,sp,260
    1f06:	0000                	unimp
    1f08:	0256                	slli	tp,tp,0x15
    1f0a:	0000                	unimp
    1f0c:	017f0003          	lb	zero,23(t5)
    1f10:	569f 0002 6200      	0x62000002569f
    1f16:	0002                	c.slli64	zero
    1f18:	0100                	addi	s0,sp,128
    1f1a:	5f00                	lw	s0,56(a4)
	...
    1f24:	01f6                	slli	gp,gp,0x1d
    1f26:	0000                	unimp
    1f28:	0216                	slli	tp,tp,0x5
    1f2a:	0000                	unimp
    1f2c:	0006                	c.slli	zero,0x1
    1f2e:	00136c03          	0x136c03
    1f32:	9f00                	0x9f00
	...
    1f3c:	00e4                	addi	s1,sp,76
    1f3e:	0000                	unimp
    1f40:	010e                	slli	sp,sp,0x3
    1f42:	0000                	unimp
    1f44:	0002                	c.slli64	zero
    1f46:	008e                	slli	ra,ra,0x3
    1f48:	010e                	slli	sp,sp,0x3
    1f4a:	0000                	unimp
    1f4c:	0114                	addi	a3,sp,128
    1f4e:	0000                	unimp
    1f50:	0002                	c.slli64	zero
    1f52:	007c                	addi	a5,sp,12
    1f54:	0114                	addi	a3,sp,128
    1f56:	0000                	unimp
    1f58:	018e                	slli	gp,gp,0x3
    1f5a:	0000                	unimp
    1f5c:	0002                	c.slli64	zero
    1f5e:	008e                	slli	ra,ra,0x3
    1f60:	018e                	slli	gp,gp,0x3
    1f62:	0000                	unimp
    1f64:	01a2                	slli	gp,gp,0x8
    1f66:	0000                	unimp
    1f68:	0002                	c.slli64	zero
    1f6a:	007c                	addi	a5,sp,12
    1f6c:	01a2                	slli	gp,gp,0x8
    1f6e:	0000                	unimp
    1f70:	02b4                	addi	a3,sp,328
    1f72:	0000                	unimp
    1f74:	0002                	c.slli64	zero
    1f76:	008e                	slli	ra,ra,0x3
	...
    1f80:	00e6                	slli	ra,ra,0x19
    1f82:	0000                	unimp
    1f84:	01fa                	slli	gp,gp,0x1e
    1f86:	0000                	unimp
    1f88:	0002                	c.slli64	zero
    1f8a:	0072                	c.slli	zero,0x1c
    1f8c:	01fa                	slli	gp,gp,0x1e
    1f8e:	0000                	unimp
    1f90:	0216                	slli	tp,tp,0x5
    1f92:	0000                	unimp
    1f94:	000d                	c.nop	3
    1f96:	008e                	slli	ra,ra,0x3
    1f98:	325d01f3          	0x325d01f3
    1f9c:	2324                	fld	fs1,64(a4)
    1f9e:	1af0090f          	0x1af0090f
    1fa2:	161c                	addi	a5,sp,800
    1fa4:	0002                	c.slli64	zero
    1fa6:	b400                	fsd	fs0,40(s0)
    1fa8:	0002                	c.slli64	zero
    1faa:	0200                	addi	s0,sp,256
    1fac:	7200                	flw	fs0,32(a2)
	...
    1fb6:	e000                	fsw	fs0,0(s0)
    1fb8:	0000                	unimp
    1fba:	3800                	fld	fs0,48(s0)
    1fbc:	0001                	nop
    1fbe:	0100                	addi	s0,sp,128
    1fc0:	5600                	lw	s0,40(a2)
    1fc2:	0138                	addi	a4,sp,136
    1fc4:	0000                	unimp
    1fc6:	0140                	addi	s0,sp,132
    1fc8:	0000                	unimp
    1fca:	7f7d0003          	lb	zero,2039(s10)
    1fce:	409f 0001 d600      	0xd6000001409f
    1fd4:	0001                	nop
    1fd6:	0100                	addi	s0,sp,128
    1fd8:	5600                	lw	s0,40(a2)
    1fda:	01d6                	slli	gp,gp,0x15
    1fdc:	0000                	unimp
    1fde:	01f2                	slli	gp,gp,0x1c
    1fe0:	0000                	unimp
    1fe2:	7f7d0003          	lb	zero,2039(s10)
    1fe6:	f29f 0001 1600      	0x16000001f29f
    1fec:	0002                	c.slli64	zero
    1fee:	0600                	addi	s0,sp,768
    1ff0:	f300                	fsw	fs0,32(a4)
    1ff2:	5d01                	li	s10,-32
    1ff4:	1c31                	addi	s8,s8,-20
    1ff6:	169f 0002 a400      	0xa4000002169f
    1ffc:	0002                	c.slli64	zero
    1ffe:	0300                	addi	s0,sp,384
    2000:	7d00                	flw	fs0,56(a0)
    2002:	9f7f                	0x9f7f
    2004:	02a4                	addi	s1,sp,328
    2006:	0000                	unimp
    2008:	02b4                	addi	a3,sp,328
    200a:	0000                	unimp
    200c:	0006                	c.slli	zero,0x1
    200e:	315d01f3          	0x315d01f3
    2012:	9f1c                	0x9f1c
	...
    201c:	00e4                	addi	s1,sp,76
    201e:	0000                	unimp
    2020:	0138                	addi	a4,sp,136
    2022:	0000                	unimp
    2024:	0001                	nop
    2026:	3856                	fld	fa6,368(sp)
    2028:	0001                	nop
    202a:	4000                	lw	s0,0(s0)
    202c:	0001                	nop
    202e:	0300                	addi	s0,sp,384
    2030:	7d00                	flw	fs0,56(a0)
    2032:	9f7f                	0x9f7f
    2034:	0140                	addi	s0,sp,132
    2036:	0000                	unimp
    2038:	01d6                	slli	gp,gp,0x15
    203a:	0000                	unimp
    203c:	0001                	nop
    203e:	d656                	sw	s5,44(sp)
    2040:	0001                	nop
    2042:	f200                	fsw	fs0,32(a2)
    2044:	0001                	nop
    2046:	0300                	addi	s0,sp,384
    2048:	7d00                	flw	fs0,56(a0)
    204a:	9f7f                	0x9f7f
    204c:	01f2                	slli	gp,gp,0x1c
    204e:	0000                	unimp
    2050:	0216                	slli	tp,tp,0x5
    2052:	0000                	unimp
    2054:	0006                	c.slli	zero,0x1
    2056:	315d01f3          	0x315d01f3
    205a:	9f1c                	0x9f1c
    205c:	0216                	slli	tp,tp,0x5
    205e:	0000                	unimp
    2060:	02a4                	addi	s1,sp,328
    2062:	0000                	unimp
    2064:	7f7d0003          	lb	zero,2039(s10)
    2068:	a49f 0002 b400      	0xb4000002a49f
    206e:	0002                	c.slli64	zero
    2070:	0600                	addi	s0,sp,768
    2072:	f300                	fsw	fs0,32(a4)
    2074:	5d01                	li	s10,-32
    2076:	1c31                	addi	s8,s8,-20
    2078:	009f 0000 0000      	0x9f
    207e:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0e5e                	slli	t3,t3,0x17
  16:	0000                	unimp
  18:	10e6                	slli	ra,ra,0x39
  1a:	0000                	unimp
  1c:	00f2                	slli	ra,ra,0x1c
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1740                	addi	s0,sp,932
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0eea                	slli	t4,t4,0x1a
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	008c                	addi	a1,sp,64
   2:	0000                	unimp
   4:	0eea                	slli	t4,t4,0x1a
   6:	0000                	unimp
   8:	10e6                	slli	ra,ra,0x39
   a:	0000                	unimp
   c:	11d8                	addi	a4,sp,228
	...
  16:	0000                	unimp
  18:	ffff                	0xffff
  1a:	ffff                	0xffff
  1c:	0000                	unimp
  1e:	0000                	unimp
  20:	0eea                	slli	t4,t4,0x1a
  22:	0000                	unimp
  24:	0f60                	addi	s0,sp,924
  26:	0000                	unimp
  28:	0000                	unimp
  2a:	0000                	unimp
  2c:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	2fb0                	fld	fa2,88(a5)
       2:	0000                	unimp
       4:	00f70003          	lb	zero,15(a4)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x38>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult2+0xac>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <polydiv+0x27e>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0x92>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult2+0xd6>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
  jal x0, default_exc_handler
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
  jal x0, reset_handler
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      86:	6972                	flw	fs2,28(sp)
  jal x0, default_exc_handler
      88:	33766373          	csrrsi	t1,mhpmevent23,12
int line[size_b][size_a + size_b];
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
      90:	776f6e6b          	0x776f6e6b
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0x2>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      a0:	0065                	c.nop	25
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 5f4d      	0x5f4d7469625f
      b0:	2e67726f          	jal	tp,77396 <_stack_start+0x67396>
      b4:	00000063          	beqz	zero,b4 <polymult+0x28>
int line[size_b][size_a + size_b];
      b8:	7300                	flw	fs0,32(a4)
      ba:	6474                	flw	fa3,76(s0)
      bc:	6564                	flw	fs1,76(a0)
int pola[size_a];
      be:	2e66                	fld	ft8,88(sp)
      c0:	0068                	addi	a0,sp,12
      c2:	0001                	nop
      c4:	5f00                	lw	s0,56(a4)
      c6:	7974                	flw	fa3,116(a0)
int line[size_b][size_a + size_b];
      c8:	6570                	flw	fa2,76(a0)
int pola[size_a];
      ca:	00682e73          	csrrs	t3,0x6,a6
int polb[size_b];
      ce:	0002                	c.slli64	zero
      d0:	7200                	flw	fs0,32(a2)
      d2:	6565                	lui	a0,0x19
      d4:	746e                	flw	fs0,248(sp)
int pola[size_a];
      d6:	682e                	flw	fa6,200(sp)
int polb[size_b];
      d8:	0200                	addi	s0,sp,256
      da:	0000                	unimp
int line[size_b][size_a + size_b];
      dc:	6f6c                	flw	fa1,92(a4)
      de:	682e6b63          	bltu	t3,sp,774 <ext_euclid+0x82>
int pola[size_a];
      e2:	0200                	addi	s0,sp,256
int polb[size_b];
      e4:	0000                	unimp
			line[i][j] = 0;
      e6:	6c647473          	csrrci	s0,0x6c6,8
      ea:	6269                	lui	tp,0x1a
	for (i = 0; i < size_b; ++i){
      ec:	682e                	flw	fa6,200(sp)
      ee:	0300                	addi	s0,sp,384
			product[j] = 0;		
      f0:	0000                	unimp
      f2:	623c                	flw	fa5,64(a2)
      f4:	6975                	lui	s2,0x1d
      f6:	746c                	flw	fa1,108(s0)
	for (i = 0; i < size_b; ++i){
      f8:	692d                	lui	s2,0xb
      fa:	3e6e                	fld	ft8,248(sp)
	for(i = 0; i < size_a; ++i){
      fc:	0000                	unimp
      fe:	0000                	unimp
     100:	0500                	addi	s0,sp,640
	for(i = 0; i < size_b; ++i){
     102:	004e                	c.slli	zero,0x13
     104:	0205                	addi	tp,tp,1
     106:	008c                	addi	a1,sp,64
     108:	0000                	unimp
     10a:	05010b03          	lb	s6,80(sp)
	for (i = 0; i < size_a; ++i){
     10e:	0301                	addi	t1,t1,0
     110:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
	for (i = 0; i < size_a; ++i){
     114:	0501                	addi	a0,a0,0
     116:	0619                	addi	a2,a2,6
     118:	00090003          	lb	zero,0(s2) # b000 <_stack_len+0x7000>
	for (i = 0; i < size_b; ++i){
     11c:	0100                	addi	s0,sp,128
     11e:	0505                	addi	a0,a0,1
     120:	08090003          	lb	zero,128(s2)
	for(i = 0; i < size_b; ++i){
     124:	0100                	addi	s0,sp,128
     126:	4e05                	li	t3,1
	if(star_mult == 1){
     128:	0c097d03          	0xc097d03
     12c:	0100                	addi	s0,sp,128
     12e:	0505                	addi	a0,a0,1
     130:	12090303          	lb	t1,288(s2)
     134:	0100                	addi	s0,sp,128
     136:	4e05                	li	t3,1
		for (j = size_b -1; j >= 0; j = j-1){
     138:	02097d03          	0x2097d03
			for (k = size_a-1; k >= 0; k = k-1 ){
     13c:	0100                	addi	s0,sp,128
     13e:	0505                	addi	a0,a0,1
			product[j] = 0;		
     140:	02090303          	lb	t1,32(s2)
     144:	0100                	addi	s0,sp,128
			line[i][j] = 0;
     146:	4e05                	li	t3,1
     148:	04097d03          	0x4097d03
			product[j] = 0;		
     14c:	0100                	addi	s0,sp,128
		for(j = 0; j < size_a + size_b -1; ++j){
     14e:	0505                	addi	a0,a0,1
     150:	00090303          	lb	t1,0(s2)
     154:	0100                	addi	s0,sp,128
	for (i = 0; i < size_b; ++i){
     156:	04090303          	lb	t1,64(s2)
     15a:	0100                	addi	s0,sp,128
     15c:	0a097d03          	0xa097d03
		for(j = 0; j < size_a + size_b -1; ++j){
     160:	0100                	addi	s0,sp,128
		pola[i] = a[i];
     162:	02090303          	lb	t1,32(s2)
     166:	0100                	addi	s0,sp,128
     168:	04090103          	lb	sp,64(s2)
     16c:	0100                	addi	s0,sp,128
     16e:	08097f03          	0x8097f03
     172:	0100                	addi	s0,sp,128
     174:	02090103          	lb	sp,32(s2)
		polb[i] = b[i];
     178:	0100                	addi	s0,sp,128
     17a:	04097c03          	0x4097c03
     17e:	0100                	addi	s0,sp,128
     180:	0105                	addi	sp,sp,1
     182:	0306                	slli	t1,t1,0x1
     184:	0901                	addi	s2,s2,0
	for(i = 0; i < size_b; ++i){
     186:	0004                	0x4
		polb[i] = b[i];
     188:	0301                	addi	t1,t1,0
     18a:	0901                	addi	s2,s2,0
	for(i = 0; i < size_b; ++i){
     18c:	0000                	unimp
			pola[i] = pola[i] + mod;		
     18e:	0301                	addi	t1,t1,0
     190:	0901                	addi	s2,s2,0
     192:	0000                	unimp
		while (pola[i] < 0){
     194:	0501                	addi	a0,a0,0
     196:	0605                	addi	a2,a2,1
     198:	00090003          	lb	zero,0(s2)
	for (i = 0; i < size_a; ++i){
     19c:	0100                	addi	s0,sp,128
     19e:	0105                	addi	sp,sp,1
     1a0:	0306                	slli	t1,t1,0x1
		pola[i] = pola[i] % mod;
     1a2:	0901                	addi	s2,s2,0
     1a4:	0004                	0x4
	for (i = 0; i < size_a; ++i){
     1a6:	0501                	addi	a0,a0,0
     1a8:	0605                	addi	a2,a2,1
		pola[i] = pola[i] % mod;
     1aa:	00090003          	lb	zero,0(s2)
     1ae:	0100                	addi	s0,sp,128
     1b0:	0205                	addi	tp,tp,1
	for (i = 0; i < size_a; ++i){
     1b2:	0306                	slli	t1,t1,0x1
			polb[i] = polb[i] + mod;		
     1b4:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
		while (polb[i] < 0){
     1b8:	0501                	addi	a0,a0,0
     1ba:	0203060b          	0x203060b
	for (i = 0; i < size_b; ++i){
     1be:	0009                	c.nop	2
     1c0:	0100                	addi	s0,sp,128
     1c2:	0205                	addi	tp,tp,1
		polb[i] = polb[i] % mod;
     1c4:	06097e03          	0x6097e03
	for(i = 0; i < size_b; ++i){
     1c8:	0100                	addi	s0,sp,128
		polb[i] = polb[i] % mod;
     1ca:	0905                	addi	s2,s2,1
     1cc:	02090003          	lb	zero,32(s2)
     1d0:	0100                	addi	s0,sp,128
	for(i = 0; i < size_b; ++i){
     1d2:	0f05                	addi	t5,t5,1
	if(star_mult == 1){
     1d4:	02090303          	lb	t1,32(s2)
		for (j = size_b -1; j >= 0; j = j-1){
     1d8:	0100                	addi	s0,sp,128
		for(j = 0; j < size_a + size_b -1; ++j){
     1da:	0e05                	addi	t3,t3,1
	for (i = 0; i < size_b; ++i){
     1dc:	0200                	addi	s0,sp,256
     1de:	0104                	addi	s1,sp,128
     1e0:	0306                	slli	t1,t1,0x1
     1e2:	097d                	addi	s2,s2,31
     1e4:	0008                	0x8
     1e6:	0501                	addi	a0,a0,0
     1e8:	0002                	c.slli64	zero
	for(j = 0; j < size_a + size_b -1; ++j){
     1ea:	0402                	c.slli64	s0
     1ec:	0601                	addi	a2,a2,0
     1ee:	00090003          	lb	zero,0(s2)
	for(j = 0; j < size_a + size_b -1; ++j){
     1f2:	0100                	addi	s0,sp,128
     1f4:	0805                	addi	a6,a6,1
}
     1f6:	04090703          	lb	a4,64(s2)
     1fa:	0100                	addi	s0,sp,128
     1fc:	0d05                	addi	s10,s10,1
     1fe:	0200                	addi	s0,sp,256
     200:	0104                	addi	s1,sp,128
     202:	0306                	slli	t1,t1,0x1
     204:	0900                	addi	s0,sp,144
     206:	0002                	c.slli64	zero
     208:	0501                	addi	a0,a0,0
     20a:	0002                	c.slli64	zero
     20c:	0402                	c.slli64	s0
     20e:	0601                	addi	a2,a2,0
     210:	00090003          	lb	zero,0(s2)
     214:	0100                	addi	s0,sp,128
				line[size_b-1-j][k] = pola[k]*polb[j];
     216:	0805                	addi	a6,a6,1
     218:	04090403          	lb	s0,64(s2)
     21c:	0100                	addi	s0,sp,128
     21e:	0d05                	addi	s10,s10,1
     220:	0200                	addi	s0,sp,256
     222:	0104                	addi	s1,sp,128
     224:	0306                	slli	t1,t1,0x1
			for (k = size_a-1; k >= 0; k = k-1 ){
     226:	0900                	addi	s0,sp,144
				line[size_b-1-j][k] = pola[k]*polb[j];
     228:	0002                	c.slli64	zero
     22a:	0501                	addi	a0,a0,0
     22c:	0002                	c.slli64	zero
			for (k = size_a-1; k >= 0; k = k-1 ){
     22e:	0402                	c.slli64	s0
     230:	0601                	addi	a2,a2,0
		for (j = size_b -1; j >= 0; j = j-1){
     232:	00090003          	lb	zero,0(s2)
     236:	0100                	addi	s0,sp,128
     238:	06090003          	lb	zero,96(s2)
			for (k = size_a-1; k >= 0; k = k-1 ){
     23c:	0100                	addi	s0,sp,128
				line[size_b-1-j][k + j] = pola[k]*polb[j];
     23e:	0905                	addi	s2,s2,1
     240:	02090f03          	lb	t5,32(s2)
     244:	0100                	addi	s0,sp,128
     246:	0e05                	addi	t3,t3,1
     248:	0200                	addi	s0,sp,256
     24a:	0104                	addi	s1,sp,128
     24c:	0306                	slli	t1,t1,0x1
			for (k = size_a-1; k >= 0; k = k-1 ){
     24e:	0900                	addi	s0,sp,144
				line[size_b-1-j][k + j] = pola[k]*polb[j];
     250:	0002                	c.slli64	zero
     252:	0501                	addi	a0,a0,0
     254:	0002                	c.slli64	zero
			for (k = size_a-1; k >= 0; k = k-1 ){
     256:	0402                	c.slli64	s0
     258:	0601                	addi	a2,a2,0
		for (j = size_b -1; j >= 0; j = j-1){
     25a:	00090003          	lb	zero,0(s2)
     25e:	0100                	addi	s0,sp,128
     260:	0905                	addi	s2,s2,1
			line[i][j] = line[i][j] % mod;
     262:	04090603          	lb	a2,64(s2)
		for(j = 0; j < size_a + size_b -1; ++j){
     266:	0100                	addi	s0,sp,128
			line[i][j] = line[i][j] % mod;
     268:	0e05                	addi	t3,t3,1
     26a:	0200                	addi	s0,sp,256
     26c:	0104                	addi	s1,sp,128
     26e:	0306                	slli	t1,t1,0x1
		for(j = 0; j < size_a + size_b -1; ++j){
     270:	0900                	addi	s0,sp,144
     272:	0002                	c.slli64	zero
	for (i = 0; i < size_b; ++i){
     274:	0501                	addi	a0,a0,0
     276:	0002                	c.slli64	zero
     278:	0402                	c.slli64	s0
     27a:	0601                	addi	a2,a2,0
		for(j = 0; j < size_a + size_b -1; ++j){
     27c:	00090003          	lb	zero,0(s2)
			product[j] += line[i][j];
     280:	0100                	addi	s0,sp,128
     282:	06090003          	lb	zero,96(s2)
     286:	0100                	addi	s0,sp,128
		for(i = 0; i < size_b; ++i){
     288:	0905                	addi	s2,s2,1
			product[j] += line[i][j];
     28a:	02090403          	lb	s0,32(s2)
     28e:	0100                	addi	s0,sp,128
     290:	0e05                	addi	t3,t3,1
     292:	0200                	addi	s0,sp,256
     294:	0104                	addi	s1,sp,128
		for(i = 0; i < size_b; ++i){
     296:	0306                	slli	t1,t1,0x1
     298:	0900                	addi	s0,sp,144
	for(j = 0; j < size_a + size_b -1; ++j){
     29a:	0002                	c.slli64	zero
     29c:	0501                	addi	a0,a0,0
     29e:	0002                	c.slli64	zero
		for(i = 0; i < size_b; ++i){
     2a0:	0402                	c.slli64	s0
     2a2:	0601                	addi	a2,a2,0
		product[j] = product[j] % mod;
     2a4:	00090003          	lb	zero,0(s2)
	for(j = 0; j < size_a + size_b -1; ++j){
     2a8:	0100                	addi	s0,sp,128
		product[j] = product[j] % mod;
     2aa:	0805                	addi	a6,a6,1
     2ac:	04090603          	lb	a2,64(s2)
     2b0:	0100                	addi	s0,sp,128
	for(j = 0; j < size_a + size_b -1; ++j){
     2b2:	0d05                	addi	s10,s10,1
int line[size_b][size_a + size_b];
     2b4:	0200                	addi	s0,sp,256
     2b6:	0104                	addi	s1,sp,128
     2b8:	0306                	slli	t1,t1,0x1
     2ba:	0900                	addi	s0,sp,144
     2bc:	0002                	c.slli64	zero
     2be:	0501                	addi	a0,a0,0
     2c0:	0002                	c.slli64	zero
     2c2:	0402                	c.slli64	s0
     2c4:	0601                	addi	a2,a2,0
     2c6:	00090003          	lb	zero,0(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ca:	0100                	addi	s0,sp,128
     2cc:	0306                	slli	t1,t1,0x1
     2ce:	0905                	addi	s2,s2,1
     2d0:	0004                	0x4
     2d2:	0501                	addi	a0,a0,0
     2d4:	0604                	addi	s1,sp,768
     2d6:	00090003          	lb	zero,0(s2)
int line[size_b][size_a + size_b];
     2da:	0100                	addi	s0,sp,128
     2dc:	1705                	addi	a4,a4,-31
     2de:	0200                	addi	s0,sp,256
     2e0:	0104                	addi	s1,sp,128
int pola[size_a];
     2e2:	0306                	slli	t1,t1,0x1
     2e4:	0908                	addi	a0,sp,144
     2e6:	0010                	0x10
     2e8:	0501                	addi	a0,a0,0
int line[size_b][size_a + size_b];
     2ea:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
int pola[size_a];
     2ee:	0601                	addi	a2,a2,0
int polb[size_b];
     2f0:	00090003          	lb	zero,0(s2)
     2f4:	0100                	addi	s0,sp,128
int pola[size_a];
     2f6:	0b05                	addi	s6,s6,1
int polb[size_b];
     2f8:	04090103          	lb	sp,64(s2)
int line[size_b][size_a + size_b];
     2fc:	0100                	addi	s0,sp,128
     2fe:	0405                	addi	s0,s0,1
int pola[size_a];
     300:	0200                	addi	s0,sp,256
     302:	0304                	addi	s1,sp,384
int polb[size_b];
     304:	0306                	slli	t1,t1,0x1
			line[i][j] = 0;
     306:	094a                	slli	s2,s2,0x12
     308:	0004                	0x4
     30a:	0501                	addi	a0,a0,0
	for (i = 0; i < size_b; ++i){
     30c:	0402000f          	0x402000f
			product2[j] = 0;		
     310:	01030603          	lb	a2,16(t1) # ffffa010 <_stack_start+0xfffea010>
     314:	0009                	c.nop	2
     316:	0100                	addi	s0,sp,128
	for (i = 0; i < size_b; ++i){
     318:	0200                	addi	s0,sp,256
     31a:	0304                	addi	s1,sp,384
	for(i = 0; i < size_a; ++i){
     31c:	06097f03          	0x6097f03
     320:	0100                	addi	s0,sp,128
	for(i = 0; i < size_b; ++i){
     322:	0405                	addi	s0,s0,1
     324:	0200                	addi	s0,sp,256
     326:	0304                	addi	s1,sp,384
	if(star_mult == 1){
     328:	0306                	slli	t1,t1,0x1
     32a:	0901                	addi	s2,s2,0
     32c:	0004                	0x4
     32e:	0501                	addi	a0,a0,0
     330:	0402000f          	0x402000f
     334:	00030603          	lb	a2,0(t1)
		for (j = size_b -1; j >= 0; j = j-1){
     338:	0009                	c.nop	2
			for (k = size_a-1; k >= 0; k = k-1 ){
     33a:	0100                	addi	s0,sp,128
     33c:	2605                	jal	65c <polydiv+0x238>
			product2[j] = 0;		
     33e:	0200                	addi	s0,sp,256
     340:	0304                	addi	s1,sp,384
     342:	0306                	slli	t1,t1,0x1
			line[i][j] = 0;
     344:	097e                	slli	s2,s2,0x1f
     346:	0004                	0x4
			product2[j] = 0;		
     348:	0501                	addi	a0,a0,0
     34a:	000e                	c.slli	zero,0x3
		for(j = 0; j < size_a + size_b -1; ++j){
     34c:	0402                	c.slli64	s0
     34e:	0301                	addi	t1,t1,0
     350:	0900                	addi	s0,sp,144
     352:	0004                	0x4
	for (i = 0; i < size_b; ++i){
     354:	0501                	addi	a0,a0,0
     356:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     35a:	0601                	addi	a2,a2,0
		for(j = 0; j < size_a + size_b -1; ++j){
     35c:	00090003          	lb	zero,0(s2)
		pola[i] = a[i];
     360:	0100                	addi	s0,sp,128
     362:	1a05                	addi	s4,s4,-31
     364:	0200                	addi	s0,sp,256
     366:	0204                	addi	s1,sp,256
     368:	0306                	slli	t1,t1,0x1
     36a:	097f                	0x97f
	for(i = 0; i < size_a; ++i){
     36c:	0004                	0x4
		pola[i] = a[i];
     36e:	0501                	addi	a0,a0,0
     370:	0609                	addi	a2,a2,2
	for(i = 0; i < size_a; ++i){
     372:	08090103          	lb	sp,128(s2)
		polb[i] = b[i];
     376:	0100                	addi	s0,sp,128
     378:	0305                	addi	t1,t1,1
     37a:	0200                	addi	s0,sp,256
     37c:	0304                	addi	s1,sp,384
     37e:	0306                	slli	t1,t1,0x1
	for(i = 0; i < size_b; ++i){
     380:	00040907          	0x40907
		polb[i] = b[i];
     384:	0501                	addi	a0,a0,0
	for(i = 0; i < size_b; ++i){
     386:	0402000b          	0x402000b
				line[size_b-1-j][k] = pola[k]*polb[j];
     38a:	00030603          	lb	a2,0(t1)
     38e:	0409                	addi	s0,s0,2
     390:	0100                	addi	s0,sp,128
     392:	0e05                	addi	t3,t3,1
     394:	0200                	addi	s0,sp,256
     396:	0304                	addi	s1,sp,384
			for (k = size_a-1; k >= 0; k = k-1 ){
     398:	04090003          	lb	zero,64(s2)
				line[size_b-1-j][k] = pola[k]*polb[j];
     39c:	0100                	addi	s0,sp,128
     39e:	0b05                	addi	s6,s6,1
			for (k = size_a-1; k >= 0; k = k-1 ){
     3a0:	0200                	addi	s0,sp,256
     3a2:	0304                	addi	s1,sp,384
		for (j = size_b -1; j >= 0; j = j-1){
     3a4:	02090003          	lb	zero,32(s2)
     3a8:	0100                	addi	s0,sp,128
     3aa:	1905                	addi	s2,s2,-31
     3ac:	0200                	addi	s0,sp,256
     3ae:	0304                	addi	s1,sp,384
     3b0:	04097f03          	0x4097f03
     3b4:	0100                	addi	s0,sp,128
		for(i = 0; i < size_b; ++i){
     3b6:	0b05                	addi	s6,s6,1
	for(j = 0; j < size_a + size_b -1; ++j){
     3b8:	0200                	addi	s0,sp,256
     3ba:	0304                	addi	s1,sp,384
}
     3bc:	02090103          	lb	sp,32(s2)
     3c0:	0100                	addi	s0,sp,128
     3c2:	1905                	addi	s2,s2,-31
     3c4:	0200                	addi	s0,sp,256
     3c6:	0304                	addi	s1,sp,384
     3c8:	0306                	slli	t1,t1,0x1
     3ca:	097f                	0x97f
     3cc:	0004                	0x4
     3ce:	0501                	addi	a0,a0,0
     3d0:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     3d4:	09050303          	lb	t1,144(a0) # 19090 <_stack_start+0x9090>
     3d8:	0002                	c.slli64	zero
			for (k = size_a-1; k >= 0; k = k-1 ){
     3da:	0501                	addi	a0,a0,0
     3dc:	0402000b          	0x402000b
				line[size_b-1-j][k + j] = pola[k]*polb[j];
     3e0:	00030603          	lb	a2,0(t1)
     3e4:	0409                	addi	s0,s0,2
     3e6:	0100                	addi	s0,sp,128
     3e8:	0e05                	addi	t3,t3,1
     3ea:	0200                	addi	s0,sp,256
     3ec:	0304                	addi	s1,sp,384
			for (k = size_a-1; k >= 0; k = k-1 ){
     3ee:	04090003          	lb	zero,64(s2)
				line[size_b-1-j][k + j] = pola[k]*polb[j];
     3f2:	0100                	addi	s0,sp,128
     3f4:	0b05                	addi	s6,s6,1
			for (k = size_a-1; k >= 0; k = k-1 ){
     3f6:	0200                	addi	s0,sp,256
     3f8:	0304                	addi	s1,sp,384
		for (j = size_b -1; j >= 0; j = j-1){
     3fa:	02090003          	lb	zero,32(s2)
     3fe:	0100                	addi	s0,sp,128
     400:	1905                	addi	s2,s2,-31
			product2[j] += line[i][j];
     402:	0200                	addi	s0,sp,256
     404:	0304                	addi	s1,sp,384
     406:	04097f03          	0x4097f03
     40a:	0100                	addi	s0,sp,128
     40c:	0b05                	addi	s6,s6,1
     40e:	0200                	addi	s0,sp,256
     410:	0304                	addi	s1,sp,384
     412:	02090103          	lb	sp,32(s2)
		for(i = 0; i < size_b; ++i){
     416:	0100                	addi	s0,sp,128
     418:	1905                	addi	s2,s2,-31
	for(j = 0; j < size_a + size_b -1; ++j){
     41a:	0200                	addi	s0,sp,256
     41c:	0304                	addi	s1,sp,384
     41e:	0306                	slli	t1,t1,0x1
		for(i = 0; i < size_b; ++i){
     420:	097f                	0x97f
     422:	0004                	0x4
int v[size_N];
     424:	0501                	addi	a0,a0,0
     426:	0304                	addi	s1,sp,384
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     428:	0911                	addi	s2,s2,4
int v[size_N];
     42a:	0002                	c.slli64	zero
     42c:	0501                	addi	a0,a0,0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     42e:	0616                	slli	a2,a2,0x5
     430:	00090003          	lb	zero,0(s2)
     434:	0100                	addi	s0,sp,128
     436:	0c05                	addi	s8,s8,1
     438:	02090003          	lb	zero,32(s2)
     43c:	0100                	addi	s0,sp,128
     43e:	0905                	addi	s2,s2,1
     440:	0306                	slli	t1,t1,0x1
     442:	097f                	0x97f
     444:	0004                	0x4
     446:	0501                	addi	a0,a0,0
     448:	060e                	slli	a2,a2,0x3
int v[size_N];
     44a:	00090003          	lb	zero,0(s2)
     44e:	0100                	addi	s0,sp,128
int q[size_N];
     450:	0905                	addi	s2,s2,1
     452:	04090003          	lb	zero,64(s2)
int numm[size_N];
     456:	0100                	addi	s0,sp,128
     458:	1a05                	addi	s4,s4,-31
int denumm[size_D];
     45a:	0200                	addi	s0,sp,256
     45c:	0204                	addi	s1,sp,256
     45e:	0306                	slli	t1,t1,0x1
     460:	097f                	0x97f
int numm[size_N];
     462:	0004                	0x4
int denumm[size_D];
     464:	0501                	addi	a0,a0,0
     466:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     46a:	09070303          	lb	t1,144(a4)
int v[size_N];
     46e:	0006                	c.slli	zero,0x1
     470:	0501                	addi	a0,a0,0
int denumm[size_D];
     472:	0015                	c.nop	5
     474:	0402                	c.slli64	s0
     476:	00030603          	lb	a2,0(t1)
	for (i = 0; i < size_N; ++i){
     47a:	0009                	c.nop	2
     47c:	0100                	addi	s0,sp,128
     47e:	1a05                	addi	s4,s4,-31
     480:	0200                	addi	s0,sp,256
	for (i = 0; i < size_N; ++i){
     482:	0304                	addi	s1,sp,384
     484:	04097f03          	0x4097f03
     488:	0100                	addi	s0,sp,128
	for (i = 0; i < size_N; ++i){
     48a:	1505                	addi	a0,a0,-31
     48c:	0200                	addi	s0,sp,256
     48e:	0304                	addi	s1,sp,384
	for (i = 0; i < size_D; ++i){
     490:	04090103          	lb	sp,64(s2)
     494:	0100                	addi	s0,sp,128
     496:	0b05                	addi	s6,s6,1
     498:	0200                	addi	s0,sp,256
	for (i = 0; i < size_D; ++i){
     49a:	0304                	addi	s1,sp,384
     49c:	04090003          	lb	zero,64(s2)
	for (i = 0; i < size_D; ++i){
     4a0:	0100                	addi	s0,sp,128
     4a2:	1a05                	addi	s4,s4,-31
     4a4:	0200                	addi	s0,sp,256
	for (i = 0; i < size_N; ++i){
     4a6:	0304                	addi	s1,sp,384
     4a8:	0306                	slli	t1,t1,0x1
     4aa:	097f                	0x97f
	for (i = 0; i < size_N; ++i){
     4ac:	0004                	0x4
     4ae:	0501                	addi	a0,a0,0
     4b0:	0304                	addi	s1,sp,384
	for (i = size_D-1; i >= 0; i = i-1){
     4b2:	0906                	slli	s2,s2,0x1
     4b4:	0002                	c.slli64	zero
     4b6:	0501                	addi	a0,a0,0
     4b8:	0616                	slli	a2,a2,0x5
     4ba:	00090003          	lb	zero,0(s2)
	for (i = 0; i < size_N; ++i){
     4be:	0100                	addi	s0,sp,128
     4c0:	0c05                	addi	s8,s8,1
		if ( (b_N*u)%mod == 1 )
     4c2:	02090003          	lb	zero,32(s2)
	for (u = 0; u < mod; ++u){
     4c6:	0100                	addi	s0,sp,128
     4c8:	0905                	addi	s2,s2,1
     4ca:	0306                	slli	t1,t1,0x1
		numm[i] = num[i];	
     4cc:	097f                	0x97f
     4ce:	0002                	c.slli64	zero
     4d0:	0501                	addi	a0,a0,0
     4d2:	060e                	slli	a2,a2,0x3
     4d4:	00090003          	lb	zero,0(s2)
	for (i = 0; i < size_N; ++i){
     4d8:	0100                	addi	s0,sp,128
		numm[i] = num[i];	
     4da:	0905                	addi	s2,s2,1
	for (i = 0; i < size_N; ++i){
     4dc:	02090003          	lb	zero,32(s2)
			numm[i] = numm[i] + mod;	
     4e0:	0100                	addi	s0,sp,128
		while (numm[i] < 0)
     4e2:	1a05                	addi	s4,s4,-31
     4e4:	0200                	addi	s0,sp,256
     4e6:	0204                	addi	s1,sp,256
	for (i = 0; i < size_N; ++i){
     4e8:	0306                	slli	t1,t1,0x1
     4ea:	097f                	0x97f
     4ec:	0004                	0x4
		numm[i] = numm[i] % mod;
     4ee:	0501                	addi	a0,a0,0
	for (i = 0; i < size_N; ++i){
     4f0:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
		numm[i] = numm[i] % mod;
     4f4:	09070303          	lb	t1,144(a4)
     4f8:	0006                	c.slli	zero,0x1
     4fa:	0501                	addi	a0,a0,0
	for (i = 0; i < size_N; ++i){
     4fc:	0015                	c.nop	5
		denumm[i] = denum[i];	
     4fe:	0402                	c.slli64	s0
     500:	00030603          	lb	a2,0(t1)
     504:	0009                	c.nop	2
     506:	0100                	addi	s0,sp,128
     508:	1905                	addi	s2,s2,-31
	for (i = 0; i < size_D; ++i){
     50a:	0200                	addi	s0,sp,256
		denumm[i] = denum[i];	
     50c:	0304                	addi	s1,sp,384
	for (i = 0; i < size_D; ++i){
     50e:	02097f03          	0x2097f03
			denumm[i] = denumm[i] + mod;	
     512:	0100                	addi	s0,sp,128
		while (denumm[i] < 0)
     514:	1505                	addi	a0,a0,-31
     516:	0200                	addi	s0,sp,256
     518:	0304                	addi	s1,sp,384
	for (i = 0; i < size_D; ++i){
     51a:	04090103          	lb	sp,64(s2)
     51e:	0100                	addi	s0,sp,128
		denumm[i] = denumm[i] % mod;
     520:	0b05                	addi	s6,s6,1
	for (i = 0; i < size_D; ++i){
     522:	0200                	addi	s0,sp,256
     524:	0304                	addi	s1,sp,384
		denumm[i] = denumm[i] % mod;
     526:	04090003          	lb	zero,64(s2)
     52a:	0100                	addi	s0,sp,128
     52c:	1905                	addi	s2,s2,-31
	for (i = 0; i < size_D; ++i){
     52e:	0200                	addi	s0,sp,256
		q[i] = 0;	
     530:	0304                	addi	s1,sp,384
     532:	0306                	slli	t1,t1,0x1
     534:	097f                	0x97f
     536:	0004                	0x4
     538:	0501                	addi	a0,a0,0
	for (i = 0; i < size_N; ++i){
     53a:	0604                	addi	s1,sp,768
     53c:	02090503          	lb	a0,32(s2)
		v[i] = 0;	
     540:	0100                	addi	s0,sp,128
     542:	1705                	addi	a4,a4,-31
     544:	0200                	addi	s0,sp,256
     546:	0104                	addi	s1,sp,128
	for (i = 0; i < size_N; ++i){
     548:	0306                	slli	t1,t1,0x1
     54a:	0901                	addi	s2,s2,0
		if( !(denumm[i] == 0) )
     54c:	0002                	c.slli64	zero
	for (i = size_D-1; i >= 0; i = i-1){
     54e:	0501                	addi	a0,a0,0
     550:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
		if ( (b_N*u)%mod == 1 )
     554:	0601                	addi	a2,a2,0
     556:	00090003          	lb	zero,0(s2)
     55a:	0100                	addi	s0,sp,128
	for (u = 0; u < mod; ++u){
     55c:	0905                	addi	s2,s2,1
     55e:	04091003          	lh	zero,64(s2)
	for (i = size_N-1; i >= 0; i = i-1){
     562:	0100                	addi	s0,sp,128
     564:	0e05                	addi	t3,t3,1
     566:	0200                	addi	s0,sp,256
     568:	0104                	addi	s1,sp,128
     56a:	0306                	slli	t1,t1,0x1
     56c:	097f                	0x97f
     56e:	0002                	c.slli64	zero
	while (d >= d2){
     570:	0501                	addi	a0,a0,0
     572:	0002                	c.slli64	zero
	for(i = 0; i < size_N; ++i){
     574:	0402                	c.slli64	s0
		result[i] = q[i];
     576:	0601                	addi	a2,a2,0
     578:	00090003          	lb	zero,0(s2)
     57c:	0100                	addi	s0,sp,128
	for(i = 0; i < size_N; ++i){
     57e:	0c090003          	lb	zero,192(s2)
	for(i = size_N; i < (2*size_N); ++i){
     582:	0100                	addi	s0,sp,128
     584:	0805                	addi	a6,a6,1
		result[i] = numm[i-size_N];
     586:	02090703          	lb	a4,32(s2)
     58a:	0100                	addi	s0,sp,128
     58c:	0d05                	addi	s10,s10,1
	for(i = size_N; i < (2*size_N); ++i){
     58e:	0200                	addi	s0,sp,256
     590:	0104                	addi	s1,sp,128
}
     592:	0306                	slli	t1,t1,0x1
     594:	0900                	addi	s0,sp,144
     596:	0002                	c.slli64	zero
     598:	0501                	addi	a0,a0,0
     59a:	0002                	c.slli64	zero
     59c:	0402                	c.slli64	s0
     59e:	0601                	addi	a2,a2,0
     5a0:	00090003          	lb	zero,0(s2)
     5a4:	0100                	addi	s0,sp,128
     5a6:	0805                	addi	a6,a6,1
     5a8:	04090703          	lb	a4,64(s2)
     5ac:	0100                	addi	s0,sp,128
     5ae:	0d05                	addi	s10,s10,1
     5b0:	0200                	addi	s0,sp,256
     5b2:	0104                	addi	s1,sp,128
     5b4:	0306                	slli	t1,t1,0x1
     5b6:	0900                	addi	s0,sp,144
     5b8:	0002                	c.slli64	zero
     5ba:	0501                	addi	a0,a0,0
		v[(d-d2)] = u*r_d;
     5bc:	0002                	c.slli64	zero
     5be:	0402                	c.slli64	s0
     5c0:	0601                	addi	a2,a2,0
     5c2:	00090003          	lb	zero,0(s2)
     5c6:	0100                	addi	s0,sp,128
     5c8:	0306                	slli	t1,t1,0x1
		for (i = 0; i < size_N; ++i){
     5ca:	090a                	slli	s2,s2,0x2
     5cc:	0004                	0x4
     5ce:	0501                	addi	a0,a0,0
     5d0:	0301                	addi	t1,t1,0
		product = polymult(denumm,size_D,v,size_D,mod,0);		
     5d2:	0902                	c.slli64	s2
     5d4:	0000                	unimp
     5d6:	0601                	addi	a2,a2,0
     5d8:	00090103          	lb	sp,0(s2)
     5dc:	0100                	addi	s0,sp,128
     5de:	0505                	addi	a0,a0,1
		for (i = 0; i < size_N; ++i){
     5e0:	0200                	addi	s0,sp,256
     5e2:	0304                	addi	s1,sp,384
     5e4:	0306                	slli	t1,t1,0x1
     5e6:	0958                	addi	a4,sp,148
     5e8:	0020                	addi	s0,sp,8
		for (i = 0; i < size_N; ++i){
     5ea:	0501                	addi	a0,a0,0
     5ec:	0019                	c.nop	6
     5ee:	0402                	c.slli64	s0
     5f0:	00030603          	lb	a2,0(t1)
		for (i = 0; i < size_N; ++i){
     5f4:	0409                	addi	s0,s0,2
     5f6:	0100                	addi	s0,sp,128
     5f8:	1f05                	addi	t5,t5,-31
		for (i = 0; i < size_N; ++i){
     5fa:	0200                	addi	s0,sp,256
     5fc:	0304                	addi	s1,sp,384
     5fe:	04090003          	lb	zero,64(s2)
		for (i = 0; i < size_N; ++i){
     602:	0100                	addi	s0,sp,128
     604:	2205                	jal	724 <ext_euclid+0x32>
     606:	0200                	addi	s0,sp,256
     608:	0304                	addi	s1,sp,384
     60a:	02090003          	lb	zero,32(s2)
		for(i = 0; i < size_N; ++i){
     60e:	0100                	addi	s0,sp,128
     610:	2105                	jal	a30 <ext_euclid+0x33e>
		for(i = 0; i < size_N; ++i){
     612:	0200                	addi	s0,sp,256
     614:	0304                	addi	s1,sp,384
     616:	06097f03          	0x6097f03
		for (i = size_N-1; i >= 0; i = i-1){
     61a:	0100                	addi	s0,sp,128
     61c:	2205                	jal	73c <ext_euclid+0x4a>
     61e:	0200                	addi	s0,sp,256
     620:	0304                	addi	s1,sp,384
     622:	02090103          	lb	sp,32(s2)
     626:	0100                	addi	s0,sp,128
     628:	1905                	addi	s2,s2,-31
			v[i] = v[i] % mod;	
     62a:	0200                	addi	s0,sp,256
		for (i = 0; i < size_N; ++i){
     62c:	0304                	addi	s1,sp,384
     62e:	04090003          	lb	zero,64(s2)
			v[i] = v[i] % mod;	
     632:	0100                	addi	s0,sp,128
     634:	1f05                	addi	t5,t5,-31
     636:	0200                	addi	s0,sp,256
		for (i = 0; i < size_N; ++i){
     638:	0304                	addi	s1,sp,384
				product[i] = product[i] + mod;	
     63a:	0306                	slli	t1,t1,0x1
     63c:	097f                	0x97f
			while (product[i] < 0)
     63e:	0002                	c.slli64	zero
     640:	0501                	addi	a0,a0,0
     642:	04020017          	auipc	zero,0x4020
		for (i = 0; i < size_N; ++i){
     646:	0301                	addi	t1,t1,0
     648:	0900                	addi	s0,sp,144
			product[i] = product[i] % mod;
     64a:	0000                	unimp
		for (i = 0; i < size_N; ++i){
     64c:	0501                	addi	a0,a0,0
     64e:	0004                	0x4
			product[i] = product[i] % mod;
     650:	0402                	c.slli64	s0
     652:	0601                	addi	a2,a2,0
     654:	00090003          	lb	zero,0(s2)
		for (i = 0; i < size_N; ++i){
     658:	0100                	addi	s0,sp,128
			numm[i] = numm[i] - product[i];
     65a:	1f05                	addi	t5,t5,-31
     65c:	0200                	addi	s0,sp,256
     65e:	0204                	addi	s1,sp,256
     660:	0306                	slli	t1,t1,0x1
     662:	097f                	0x97f
		for (i = 0; i < size_N; ++i){
     664:	0004                	0x4
     666:	0501                	addi	a0,a0,0
			numm[i] = numm[i] - product[i];
     668:	0021                	c.nop	8
     66a:	0402                	c.slli64	s0
     66c:	0602                	c.slli64	a2
		for (i = 0; i < size_N; ++i){
     66e:	00090003          	lb	zero,0(s2)
				numm[i] = numm[i] + mod;	
     672:	0100                	addi	s0,sp,128
			while (numm[i] < 0)
     674:	0b05                	addi	s6,s6,1
     676:	08090103          	lb	sp,128(s2)
		for (i = 0; i < size_N; ++i){
     67a:	0100                	addi	s0,sp,128
     67c:	0505                	addi	a0,a0,1
     67e:	0200                	addi	s0,sp,256
			numm[i] = numm[i] % mod;
     680:	0304                	addi	s1,sp,384
		for (i = 0; i < size_N; ++i){
     682:	0306                	slli	t1,t1,0x1
     684:	0908                	addi	a0,sp,144
			numm[i] = numm[i] % mod;
     686:	0004                	0x4
     688:	0501                	addi	a0,a0,0
     68a:	001d                	c.nop	7
     68c:	0402                	c.slli64	s0
		for (i = 0; i < size_N; ++i){
     68e:	00030603          	lb	a2,0(t1)
			q[i] = q[i] + v[i];		
     692:	0409                	addi	s0,s0,2
     694:	0100                	addi	s0,sp,128
     696:	2305                	jal	bb6 <generate_keys+0x120>
     698:	0200                	addi	s0,sp,256
		for(i = 0; i < size_N; ++i){
     69a:	0304                	addi	s1,sp,384
     69c:	04090003          	lb	zero,64(s2)
			q[i] = q[i] + v[i];		
     6a0:	0100                	addi	s0,sp,128
     6a2:	2605                	jal	9c2 <ext_euclid+0x2d0>
		for(i = 0; i < size_N; ++i){
     6a4:	0200                	addi	s0,sp,256
			q[i] = q[i] % mod;
     6a6:	0304                	addi	s1,sp,384
		for(i = 0; i < size_N; ++i){
     6a8:	02090003          	lb	zero,32(s2)
			q[i] = q[i] % mod;
     6ac:	0100                	addi	s0,sp,128
     6ae:	2105                	jal	ace <generate_keys+0x38>
     6b0:	0200                	addi	s0,sp,256
     6b2:	0304                	addi	s1,sp,384
		for(i = 0; i < size_N; ++i){
     6b4:	06097f03          	0x6097f03
		for (i = size_N-1; i >= 0; i = i-1){
     6b8:	0100                	addi	s0,sp,128
     6ba:	2605                	jal	9da <ext_euclid+0x2e8>
			v[i] = 0;	
     6bc:	0200                	addi	s0,sp,256
     6be:	0304                	addi	s1,sp,384
     6c0:	02090103          	lb	sp,32(s2)
     6c4:	0100                	addi	s0,sp,128
		for (i = 0; i < size_N; ++i){
     6c6:	1d05                	addi	s10,s10,-31
     6c8:	0200                	addi	s0,sp,256
     6ca:	0304                	addi	s1,sp,384
     6cc:	04090003          	lb	zero,64(s2)
		result[i] = q[i];
     6d0:	0100                	addi	s0,sp,128
     6d2:	1f05                	addi	t5,t5,-31
     6d4:	0200                	addi	s0,sp,256
     6d6:	0304                	addi	s1,sp,384
     6d8:	0306                	slli	t1,t1,0x1
	for(i = 0; i < size_N; ++i){
     6da:	097f                	0x97f
		result[i] = q[i];
     6dc:	0002                	c.slli64	zero
	for(i = 0; i < size_N; ++i){
     6de:	0501                	addi	a0,a0,0
		result[i] = numm[i-size_N];
     6e0:	04020017          	auipc	zero,0x4020
     6e4:	0301                	addi	t1,t1,0
     6e6:	0900                	addi	s0,sp,144
     6e8:	0000                	unimp
     6ea:	0501                	addi	a0,a0,0
	for(i = size_N; i < (2*size_N); ++i){
     6ec:	0004                	0x4
     6ee:	0402                	c.slli64	s0
     6f0:	0601                	addi	a2,a2,0
  int ri_2[size]; // MX-ring poly, a
     6f2:	00090003          	lb	zero,0(s2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod){
     6f6:	0100                	addi	s0,sp,128
  int ri_2[size]; // MX-ring poly, a
     6f8:	1f05                	addi	t5,t5,-31
     6fa:	0200                	addi	s0,sp,256
int* ext_euclid(int* polyR, int* polyf, int size, int mod){
     6fc:	0204                	addi	s1,sp,256
     6fe:	0306                	slli	t1,t1,0x1
     700:	097f                	0x97f
     702:	0004                	0x4
     704:	0501                	addi	a0,a0,0
     706:	0021                	c.nop	8
     708:	0402                	c.slli64	s0
     70a:	0602                	c.slli64	a2
     70c:	00090003          	lb	zero,0(s2)
     710:	0100                	addi	s0,sp,128
     712:	0405                	addi	s0,s0,1
     714:	0200                	addi	s0,sp,256
     716:	0304                	addi	s1,sp,384
  int ri_2[size]; // MX-ring poly, a
     718:	0306                	slli	t1,t1,0x1
     71a:	090a                	slli	s2,s2,0x2
     71c:	0008                	0x8
  int ri_1[size]; // f-random poly, f[N] = 0, b
     71e:	0501                	addi	a0,a0,0
     720:	001c                	0x1c
     722:	0402                	c.slli64	s0
  int ri[size];
     724:	00030603          	lb	a2,0(t1)
     728:	0009                	c.nop	2
  int ti_1[size]; // ti_1[0] = 1 
     72a:	0100                	addi	s0,sp,128
     72c:	2605                	jal	a4c <ext_euclid+0x35a>
     72e:	0200                	addi	s0,sp,256
  int ti[size];
     730:	0304                	addi	s1,sp,384
     732:	02097f03          	0x2097f03
  int qi_1[size];
     736:	0100                	addi	s0,sp,128
     738:	1c05                	addi	s8,s8,-31
     73a:	0200                	addi	s0,sp,256
  int temp[size];
     73c:	0304                	addi	s1,sp,384
     73e:	04090103          	lb	sp,64(s2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod){
     742:	0100                	addi	s0,sp,128
  int ri_2[size]; // MX-ring poly, a
     744:	0f05                	addi	t5,t5,1
     746:	0200                	addi	s0,sp,256
  int temp[size];
     748:	0304                	addi	s1,sp,384
	for (i = 0; i < size; ++i){
     74a:	04090003          	lb	zero,64(s2)
     74e:	0100                	addi	s0,sp,128
	for (i = 0; i < size; ++i){
     750:	2605                	jal	a70 <ext_euclid+0x37e>
     752:	0200                	addi	s0,sp,256
     754:	0304                	addi	s1,sp,384
	for (i = 0; i < size; ++i){
     756:	0306                	slli	t1,t1,0x1
		ti_2[i] = 0;
     758:	097f                	0x97f
     75a:	0004                	0x4
     75c:	0501                	addi	a0,a0,0
     75e:	000e                	c.slli	zero,0x3
	for (i = 0; i < size; ++i){
     760:	0402                	c.slli64	s0
     762:	0301                	addi	t1,t1,0
	for (i = 1; i < size; ++i){
     764:	0900                	addi	s0,sp,144
     766:	0000                	unimp
     768:	0501                	addi	a0,a0,0
	ti_1[0] = 1;
     76a:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     76e:	0601                	addi	a2,a2,0
	for(i = N+1; i < (2*N+2); ++i){
     770:	00090003          	lb	zero,0(s2)
     774:	0100                	addi	s0,sp,128
     776:	1a05                	addi	s4,s4,-31
	for(i = 0; i < N+1; ++i){
     778:	0200                	addi	s0,sp,256
     77a:	0204                	addi	s1,sp,256
		ri_2[i] = polyR[i];
     77c:	0306                	slli	t1,t1,0x1
     77e:	097f                	0x97f
     780:	0004                	0x4
     782:	0501                	addi	a0,a0,0
     784:	0609                	addi	a2,a2,2
     786:	08090103          	lb	sp,128(s2)
     78a:	0100                	addi	s0,sp,128
	for (i = 0; i < size; ++i){
     78c:	0405                	addi	s0,s0,1
		ri_1[i] = polyf[i];
     78e:	0200                	addi	s0,sp,256
     790:	0304                	addi	s1,sp,384
     792:	0306                	slli	t1,t1,0x1
     794:	0908                	addi	a0,sp,144
     796:	0004                	0x4
     798:	0501                	addi	a0,a0,0
	for (i = 0; i < size; ++i){
     79a:	0019                	c.nop	6
		ri_1[i] = polyf[i];
     79c:	0402                	c.slli64	s0
	for (i = 0; i < size; ++i){
     79e:	00030603          	lb	a2,0(t1)
		ti_2[i] = 0;
     7a2:	0009                	c.nop	2
     7a4:	0100                	addi	s0,sp,128
     7a6:	0f05                	addi	t5,t5,1
     7a8:	0200                	addi	s0,sp,256
	for (i = 0; i < size; ++i){
     7aa:	0304                	addi	s1,sp,384
     7ac:	04090003          	lb	zero,64(s2)
		ti_1[i] = 0;
     7b0:	0100                	addi	s0,sp,128
     7b2:	1a05                	addi	s4,s4,-31
     7b4:	0200                	addi	s0,sp,256
     7b6:	0304                	addi	s1,sp,384
	for (i = 1; i < size; ++i){
     7b8:	04097f03          	0x4097f03
			ri_2[i] = ri_2[i] +mod;		
     7bc:	0100                	addi	s0,sp,128
     7be:	1905                	addi	s2,s2,-31
		while(ri_2[i] < 0){
     7c0:	0200                	addi	s0,sp,256
     7c2:	0304                	addi	s1,sp,384
     7c4:	02090103          	lb	sp,32(s2)
	for(i = 0; i < N+1; ++i){
     7c8:	0100                	addi	s0,sp,128
     7ca:	0f05                	addi	t5,t5,1
     7cc:	0200                	addi	s0,sp,256
     7ce:	0304                	addi	s1,sp,384
     7d0:	06090003          	lb	zero,96(s2)
     7d4:	0100                	addi	s0,sp,128
	for(i = 0; i < N+1; ++i){
     7d6:	1a05                	addi	s4,s4,-31
     7d8:	0200                	addi	s0,sp,256
     7da:	0304                	addi	s1,sp,384
     7dc:	0306                	slli	t1,t1,0x1
     7de:	097f                	0x97f
	for(i = 0; i < N+1; ++i){
     7e0:	0006                	c.slli	zero,0x1
     7e2:	0501                	addi	a0,a0,0
     7e4:	000e                	c.slli	zero,0x3
	for(i = 0; i < N+1; ++i){
     7e6:	0402                	c.slli64	s0
     7e8:	0301                	addi	t1,t1,0
     7ea:	0900                	addi	s0,sp,144
	res = polydiv(ri_2, N+1, ri_1, N+1, mod);
     7ec:	0000                	unimp
     7ee:	0501                	addi	a0,a0,0
     7f0:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     7f4:	0601                	addi	a2,a2,0
     7f6:	00090003          	lb	zero,0(s2)
	for(i = N+1; i < (2*N+2); ++i){
     7fa:	0100                	addi	s0,sp,128
     7fc:	2505                	jal	e1c <ntru_encyrpt+0x90>
     7fe:	0200                	addi	s0,sp,256
     800:	0204                	addi	s1,sp,256
     802:	0306                	slli	t1,t1,0x1
     804:	097f                	0x97f
	for(i = 0; i < N+1; ++i){
     806:	0004                	0x4
     808:	0501                	addi	a0,a0,0
     80a:	0609                	addi	a2,a2,2
     80c:	06090103          	lb	sp,96(s2)
	for(i = 0; i < N+1; ++i){
     810:	0100                	addi	s0,sp,128
     812:	0305                	addi	t1,t1,1
     814:	0200                	addi	s0,sp,256
     816:	0304                	addi	s1,sp,384
	for(i = 0; i < N+1; ++i){
     818:	0306                	slli	t1,t1,0x1
     81a:	00040907          	0x40907
	res1 = polydiv(temp, N+1, ri_1, N+1, mod);
     81e:	0501                	addi	a0,a0,0
     820:	0402001b          	0x402001b
     824:	00030603          	lb	a2,0(t1)
     828:	0009                	c.nop	2
	for(i = 0; i < N+1; ++i){
     82a:	0100                	addi	s0,sp,128
     82c:	2505                	jal	e4c <ntru_deceypt+0x2a>
     82e:	0200                	addi	s0,sp,256
     830:	0304                	addi	s1,sp,384
     832:	02097f03          	0x2097f03
	for(i = 0; i < N+1; ++i){
     836:	0100                	addi	s0,sp,128
     838:	1b05                	addi	s6,s6,-31
	for(i = 0; i < N+1; ++i){
     83a:	0200                	addi	s0,sp,256
     83c:	0304                	addi	s1,sp,384
     83e:	04090103          	lb	sp,64(s2)
	res2 = polymult(qi_1,N+1,ti_1,N+1,mod,0);
     842:	0100                	addi	s0,sp,128
     844:	0e05                	addi	t3,t3,1
     846:	0200                	addi	s0,sp,256
     848:	0304                	addi	s1,sp,384
     84a:	04090003          	lb	zero,64(s2)
	for(i = 0; i < N+1; ++i){
     84e:	0100                	addi	s0,sp,128
     850:	2505                	jal	e70 <ntru_deceypt+0x4e>
     852:	0200                	addi	s0,sp,256
     854:	0304                	addi	s1,sp,384
	for(i = 0; i < N+1; ++i){
     856:	0306                	slli	t1,t1,0x1
     858:	097f                	0x97f
     85a:	0004                	0x4
	for(i = 0; i < N+1; ++i){
     85c:	0501                	addi	a0,a0,0
     85e:	0346                	slli	t1,t1,0x11
     860:	0002090f          	0x2090f
	for(i = 0; i < N+1; ++i){
     864:	0501                	addi	a0,a0,0
     866:	0301                	addi	t1,t1,0
     868:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
     86c:	0501                	addi	a0,a0,0
	for(i = 0; i < N+1; ++i){
     86e:	0619                	addi	a2,a2,6
     870:	00090003          	lb	zero,0(s2)
	for(i = 0; i < N+1; ++i){
     874:	0100                	addi	s0,sp,128
     876:	0505                	addi	a0,a0,1
     878:	08090003          	lb	zero,128(s2)
	for(i = 0; i < N+1; ++i){
     87c:	0100                	addi	s0,sp,128
     87e:	4605                	li	a2,1
	for(i = 0; i < N+1; ++i){
     880:	0c097d03          	0xc097d03
     884:	0100                	addi	s0,sp,128
	for(i = 0; i < N+1; ++i){
     886:	0505                	addi	a0,a0,1
     888:	12090303          	lb	t1,288(s2)
	for(i = 0; i < N+1; ++i){
     88c:	0100                	addi	s0,sp,128
     88e:	4605                	li	a2,1
     890:	04097d03          	0x4097d03
	for(i = 0; i < N+1; ++i){
     894:	0100                	addi	s0,sp,128
     896:	0505                	addi	a0,a0,1
	controlR = 0;
     898:	00090303          	lb	t1,0(s2)
	for(i = 0; i < N+1; ++i){
     89c:	0100                	addi	s0,sp,128
     89e:	04090303          	lb	t1,64(s2)
while(!(controlR == 0)){
     8a2:	0100                	addi	s0,sp,128
	for (j = 0; j < mod; ++j){
     8a4:	08097d03          	0x8097d03
     8a8:	0100                	addi	s0,sp,128
     8aa:	02090303          	lb	t1,32(s2)
     8ae:	0100                	addi	s0,sp,128
     8b0:	04090103          	lb	sp,64(s2)
	for(i = 0; i < N+1; ++i){
     8b4:	0100                	addi	s0,sp,128
     8b6:	06097f03          	0x6097f03
}
     8ba:	0100                	addi	s0,sp,128
     8bc:	02090103          	lb	sp,32(s2)
     8c0:	0100                	addi	s0,sp,128
     8c2:	04097c03          	0x4097c03
     8c6:	0100                	addi	s0,sp,128
     8c8:	0105                	addi	sp,sp,1
     8ca:	0306                	slli	t1,t1,0x1
     8cc:	0901                	addi	s2,s2,0
     8ce:	0004                	0x4
     8d0:	0301                	addi	t1,t1,0
     8d2:	0901                	addi	s2,s2,0
     8d4:	0000                	unimp
     8d6:	0301                	addi	t1,t1,0
     8d8:	0901                	addi	s2,s2,0
     8da:	0000                	unimp
     8dc:	0501                	addi	a0,a0,0
     8de:	0605                	addi	a2,a2,1
     8e0:	00090003          	lb	zero,0(s2)
	for(i = 0; i < N+1; ++i){
     8e4:	0100                	addi	s0,sp,128
     8e6:	0105                	addi	sp,sp,1
		ri_2[i] = ri_2[i] % mod;
     8e8:	0306                	slli	t1,t1,0x1
     8ea:	0901                	addi	s2,s2,0
     8ec:	0004                	0x4
     8ee:	0501                	addi	a0,a0,0
	for(i = 0; i < N+1; ++i){
     8f0:	0605                	addi	a2,a2,1
			ri_1[i] = ri_1[i] +mod;		
     8f2:	00090003          	lb	zero,0(s2)
		while(ri_1[i] < 0){
     8f6:	0100                	addi	s0,sp,128
     8f8:	0205                	addi	tp,tp,1
     8fa:	0306                	slli	t1,t1,0x1
	for(i = 0; i < N+1; ++i){
     8fc:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     900:	0501                	addi	a0,a0,0
		ri_1[i] = ri_1[i] % mod;
     902:	0203060b          	0x203060b
	for(i = 0; i < N+1; ++i){
     906:	0009                	c.nop	2
		ri_1[i] = ri_1[i] % mod;
     908:	0100                	addi	s0,sp,128
     90a:	0205                	addi	tp,tp,1
     90c:	06097e03          	0x6097e03
	for(i = 0; i < N+1; ++i){
     910:	0100                	addi	s0,sp,128
		ri[i-(N+1)] = res[i];
     912:	0905                	addi	s2,s2,1
     914:	02090003          	lb	zero,32(s2)
     918:	0100                	addi	s0,sp,128
	for(i = N+1; i < (2*N+2); ++i){
     91a:	1005                	c.nop	-31
     91c:	02090303          	lb	t1,32(s2)
		ri[i-(N+1)] = res[i];
     920:	0100                	addi	s0,sp,128
	for(i = N+1; i < (2*N+2); ++i){
     922:	0e05                	addi	t3,t3,1
		temp[i] = ri_2[i] - ri[i];
     924:	0200                	addi	s0,sp,256
     926:	0104                	addi	s1,sp,128
     928:	0306                	slli	t1,t1,0x1
     92a:	097d                	addi	s2,s2,31
     92c:	0008                	0x8
     92e:	0501                	addi	a0,a0,0
     930:	0002                	c.slli64	zero
     932:	0402                	c.slli64	s0
	for(i = 0; i < N+1; ++i){
     934:	0601                	addi	a2,a2,0
		temp[i] = ri_2[i] - ri[i];
     936:	00090003          	lb	zero,0(s2)
	for(i = 0; i < N+1; ++i){
     93a:	0100                	addi	s0,sp,128
     93c:	0805                	addi	a6,a6,1
			temp[i] = temp[i] + mod;		
     93e:	04090703          	lb	a4,64(s2)
		while(temp[i] < 0){
     942:	0100                	addi	s0,sp,128
     944:	0d05                	addi	s10,s10,1
     946:	0200                	addi	s0,sp,256
	for(i = 0; i < N+1; ++i){
     948:	0104                	addi	s1,sp,128
     94a:	0306                	slli	t1,t1,0x1
     94c:	0900                	addi	s0,sp,144
		temp[i] = temp[i] % mod;
     94e:	0002                	c.slli64	zero
	for(i = 0; i < N+1; ++i){
     950:	0501                	addi	a0,a0,0
     952:	0002                	c.slli64	zero
		temp[i] = temp[i] % mod;
     954:	0402                	c.slli64	s0
     956:	0601                	addi	a2,a2,0
     958:	00090003          	lb	zero,0(s2)
	for(i = 0; i < N+1; ++i){
     95c:	0100                	addi	s0,sp,128
		qi_1[i] = res1[i];
     95e:	0805                	addi	a6,a6,1
     960:	04090a03          	lb	s4,64(s2)
     964:	0100                	addi	s0,sp,128
     966:	0d05                	addi	s10,s10,1
     968:	0200                	addi	s0,sp,256
	for(i = 0; i < N+1; ++i){
     96a:	0104                	addi	s1,sp,128
		qi_1[i] = res1[i];
     96c:	0306                	slli	t1,t1,0x1
	for(i = 0; i < N+1; ++i){
     96e:	0900                	addi	s0,sp,144
			qi_1[i] = qi_1[i] + mod;		
     970:	0002                	c.slli64	zero
     972:	0501                	addi	a0,a0,0
		while ( qi_1[i] < 0){
     974:	0002                	c.slli64	zero
     976:	0402                	c.slli64	s0
     978:	0601                	addi	a2,a2,0
	for(i = 0; i < N+1; ++i){
     97a:	00090003          	lb	zero,0(s2)
     97e:	0100                	addi	s0,sp,128
		qi_1[i] = qi_1[i] % mod;
     980:	0306                	slli	t1,t1,0x1
	for(i = 0; i < N+1; ++i){
     982:	0004090b          	0x4090b
		qi_1[i] = qi_1[i] % mod;
     986:	0501                	addi	a0,a0,0
     988:	0604                	addi	s1,sp,768
     98a:	00090003          	lb	zero,0(s2)
	for(i = 0; i < N+1; ++i){
     98e:	0100                	addi	s0,sp,128
		temp[i] = res2[i];
     990:	1705                	addi	a4,a4,-31
     992:	0200                	addi	s0,sp,256
     994:	0104                	addi	s1,sp,128
     996:	0306                	slli	t1,t1,0x1
     998:	0908                	addi	a0,sp,144
     99a:	000e                	c.slli	zero,0x3
	for(i = 0; i < N+1; ++i){
     99c:	0501                	addi	a0,a0,0
		temp[i] = res2[i];
     99e:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
			temp[i] = temp[i] + mod;		
     9a2:	0601                	addi	a2,a2,0
     9a4:	00090003          	lb	zero,0(s2)
		while ( temp[i] < 0){
     9a8:	0100                	addi	s0,sp,128
     9aa:	0b05                	addi	s6,s6,1
	for(i = 0; i < N+1; ++i){
     9ac:	04090103          	lb	sp,64(s2)
     9b0:	0100                	addi	s0,sp,128
		temp[i] = temp[i] % mod;
     9b2:	0405                	addi	s0,s0,1
     9b4:	0200                	addi	s0,sp,256
	for(i = 0; i < N+1; ++i){
     9b6:	0304                	addi	s1,sp,384
     9b8:	0306                	slli	t1,t1,0x1
		temp[i] = temp[i] % mod;
     9ba:	095d                	addi	s2,s2,23
     9bc:	0004                	0x4
     9be:	0501                	addi	a0,a0,0
     9c0:	0010                	0x10
	for(i = 0; i < N+1; ++i){
     9c2:	0402                	c.slli64	s0
		ti[i] = ti_2[i] - temp[i];
     9c4:	01030603          	lb	a2,16(t1)
     9c8:	0009                	c.nop	2
     9ca:	0100                	addi	s0,sp,128
     9cc:	0f05                	addi	t5,t5,1
     9ce:	0200                	addi	s0,sp,256
     9d0:	0304                	addi	s1,sp,384
     9d2:	06097f03          	0x6097f03
     9d6:	0100                	addi	s0,sp,128
     9d8:	0405                	addi	s0,s0,1
	for(i = 0; i < N+1; ++i){
     9da:	0200                	addi	s0,sp,256
		ti[i] = ti_2[i] - temp[i];
     9dc:	0304                	addi	s1,sp,384
     9de:	0306                	slli	t1,t1,0x1
	for(i = 0; i < N+1; ++i){
     9e0:	0901                	addi	s2,s2,0
     9e2:	0004                	0x4
			ti[i] = ti[i] + mod;		
     9e4:	0501                	addi	a0,a0,0
     9e6:	0010                	0x10
		while ( ti[i] < 0){
     9e8:	0402                	c.slli64	s0
     9ea:	00030603          	lb	a2,0(t1)
	for(i = 0; i < N+1; ++i){
     9ee:	0009                	c.nop	2
     9f0:	0100                	addi	s0,sp,128
     9f2:	2605                	jal	d12 <generate_keys+0x27c>
		ti[i] = ti[i] % mod;
     9f4:	0200                	addi	s0,sp,256
	for(i = 0; i < N+1; ++i){
     9f6:	0304                	addi	s1,sp,384
     9f8:	0306                	slli	t1,t1,0x1
		ti[i] = ti[i] % mod;
     9fa:	097e                	slli	s2,s2,0x1f
     9fc:	0004                	0x4
     9fe:	0501                	addi	a0,a0,0
     a00:	000e                	c.slli	zero,0x3
	for(i = 0; i < N+1; ++i){
     a02:	0402                	c.slli64	s0
		ri_2[i] = ri_1[i];	
     a04:	0301                	addi	t1,t1,0
     a06:	0900                	addi	s0,sp,144
     a08:	0004                	0x4
     a0a:	0501                	addi	a0,a0,0
     a0c:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
	for(i = 0; i < N+1; ++i){
     a10:	0601                	addi	a2,a2,0
		ri_2[i] = ri_1[i];	
     a12:	00090003          	lb	zero,0(s2)
		ri_1[i] = ri[i];	
     a16:	0100                	addi	s0,sp,128
     a18:	1a05                	addi	s4,s4,-31
     a1a:	0200                	addi	s0,sp,256
     a1c:	0204                	addi	s1,sp,256
     a1e:	0306                	slli	t1,t1,0x1
     a20:	097f                	0x97f
	for(i = 0; i < N+1; ++i){
     a22:	0004                	0x4
		ri_1[i] = ri[i];	
     a24:	0501                	addi	a0,a0,0
	for(i = 0; i < N+1; ++i){
     a26:	0609                	addi	a2,a2,2
		ti_2[i] = ti_1[i];	
     a28:	08090103          	lb	sp,128(s2)
     a2c:	0100                	addi	s0,sp,128
     a2e:	0305                	addi	t1,t1,1
     a30:	0200                	addi	s0,sp,256
     a32:	0304                	addi	s1,sp,384
     a34:	0306                	slli	t1,t1,0x1
     a36:	00040907          	0x40907
	for(i = 0; i < N+1; ++i){
     a3a:	0501                	addi	a0,a0,0
		ti_2[i] = ti_1[i];	
     a3c:	0402000b          	0x402000b
		ti_1[i] = ti[i];	
     a40:	00030603          	lb	a2,0(t1)
     a44:	0409                	addi	s0,s0,2
     a46:	0100                	addi	s0,sp,128
     a48:	0e05                	addi	t3,t3,1
     a4a:	0200                	addi	s0,sp,256
	for(i = 0; i < N+1; ++i){
     a4c:	0304                	addi	s1,sp,384
		ti_1[i] = ti[i];	
     a4e:	04090003          	lb	zero,64(s2)
		qi_1[i] = 0;
     a52:	0100                	addi	s0,sp,128
     a54:	0b05                	addi	s6,s6,1
     a56:	0200                	addi	s0,sp,256
     a58:	0304                	addi	s1,sp,384
     a5a:	02090003          	lb	zero,32(s2)
	for(i = 0; i < N+1; ++i){
     a5e:	0100                	addi	s0,sp,128
		controlR += ri[i];
     a60:	1905                	addi	s2,s2,-31
     a62:	0200                	addi	s0,sp,256
     a64:	0304                	addi	s1,sp,384
     a66:	02097f03          	0x2097f03
     a6a:	0100                	addi	s0,sp,128
	for(i = 0; i < N+1; ++i){
     a6c:	0b05                	addi	s6,s6,1
		if(((ri_2[0]*j) % mod) ==1)
     a6e:	0200                	addi	s0,sp,256
     a70:	0304                	addi	s1,sp,384
     a72:	02090103          	lb	sp,32(s2)
     a76:	0100                	addi	s0,sp,128
     a78:	1905                	addi	s2,s2,-31
     a7a:	0200                	addi	s0,sp,256
     a7c:	0304                	addi	s1,sp,384
	for (j = 0; j < mod; ++j){
     a7e:	0306                	slli	t1,t1,0x1
     a80:	097f                	0x97f
		ti_2[i] = (ti_2[i]*j) % mod;
     a82:	0004                	0x4
	for(i = 0; i < N+1; ++i){
     a84:	0501                	addi	a0,a0,0
     a86:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
		ti_2[i] = (ti_2[i]*j) % mod;
     a8a:	090b0303          	lb	t1,144(s6)
     a8e:	0002                	c.slli64	zero
     a90:	0501                	addi	a0,a0,0
     a92:	0402000b          	0x402000b
int* generate_keys(int N, int p, int q){
     a96:	00030603          	lb	a2,0(t1)
     a9a:	0409                	addi	s0,s0,2
     a9c:	0100                	addi	s0,sp,128
     a9e:	0e05                	addi	t3,t3,1
     aa0:	0200                	addi	s0,sp,256
     aa2:	0304                	addi	s1,sp,384
     aa4:	04090003          	lb	zero,64(s2)
     aa8:	0100                	addi	s0,sp,128
     aaa:	0b05                	addi	s6,s6,1
     aac:	0200                	addi	s0,sp,256
     aae:	0304                	addi	s1,sp,384
     ab0:	02090003          	lb	zero,32(s2)
     ab4:	0100                	addi	s0,sp,128
     ab6:	1905                	addi	s2,s2,-31
     ab8:	0200                	addi	s0,sp,256
     aba:	0304                	addi	s1,sp,384
     abc:	02097f03          	0x2097f03
     ac0:	0100                	addi	s0,sp,128
     ac2:	0b05                	addi	s6,s6,1
     ac4:	0200                	addi	s0,sp,256
     ac6:	0304                	addi	s1,sp,384
     ac8:	02090103          	lb	sp,32(s2)
     acc:	0100                	addi	s0,sp,128
     ace:	1905                	addi	s2,s2,-31
int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     ad0:	0200                	addi	s0,sp,256
     ad2:	0304                	addi	s1,sp,384
     ad4:	0306                	slli	t1,t1,0x1
     ad6:	097f                	0x97f
     ad8:	0004                	0x4
     ada:	0501                	addi	a0,a0,0
     adc:	0005                	c.nop	1
     ade:	0402                	c.slli64	s0
int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     ae0:	090e0303          	lb	t1,144(t3) # 1a090 <_stack_start+0xa090>
     ae4:	0002                	c.slli64	zero
     ae6:	0501                	addi	a0,a0,0
     ae8:	0019                	c.nop	6
int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     aea:	0402                	c.slli64	s0
     aec:	00030603          	lb	a2,0(t1)
     af0:	0409                	addi	s0,s0,2
     af2:	0100                	addi	s0,sp,128
     af4:	1f05                	addi	t5,t5,-31
     af6:	0200                	addi	s0,sp,256
     af8:	0304                	addi	s1,sp,384
     afa:	04090003          	lb	zero,64(s2)
     afe:	0100                	addi	s0,sp,128
     b00:	2205                	jal	c20 <generate_keys+0x18a>
     b02:	0200                	addi	s0,sp,256
     b04:	0304                	addi	s1,sp,384
     b06:	02090003          	lb	zero,32(s2)
     b0a:	0100                	addi	s0,sp,128
     b0c:	2105                	jal	f2c <reset_handler+0x3e>
     b0e:	0200                	addi	s0,sp,256
     b10:	0304                	addi	s1,sp,384
     b12:	06097f03          	0x6097f03
     b16:	0100                	addi	s0,sp,128
     b18:	2205                	jal	c38 <generate_keys+0x1a2>
     b1a:	0200                	addi	s0,sp,256
     b1c:	0304                	addi	s1,sp,384
     b1e:	02090103          	lb	sp,32(s2)
     b22:	0100                	addi	s0,sp,128
     b24:	1905                	addi	s2,s2,-31
     b26:	0200                	addi	s0,sp,256
     b28:	0304                	addi	s1,sp,384
     b2a:	04090003          	lb	zero,64(s2)
     b2e:	0100                	addi	s0,sp,128
     b30:	1f05                	addi	t5,t5,-31
     b32:	0200                	addi	s0,sp,256
     b34:	0304                	addi	s1,sp,384
     b36:	0306                	slli	t1,t1,0x1
     b38:	097f                	0x97f
     b3a:	0002                	c.slli64	zero
     b3c:	0501                	addi	a0,a0,0
     b3e:	04020017          	auipc	zero,0x4020
     b42:	0301                	addi	t1,t1,0
     b44:	0900                	addi	s0,sp,144
     b46:	0000                	unimp
     b48:	0501                	addi	a0,a0,0
     b4a:	0004                	0x4
     b4c:	0402                	c.slli64	s0
     b4e:	0601                	addi	a2,a2,0
     b50:	00090003          	lb	zero,0(s2)
     b54:	0100                	addi	s0,sp,128
int polyR[N+1];
     b56:	1f05                	addi	t5,t5,-31
     b58:	0200                	addi	s0,sp,256
int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     b5a:	0204                	addi	s1,sp,256
int polyR[N+1];
     b5c:	0306                	slli	t1,t1,0x1
     b5e:	097f                	0x97f
     b60:	0004                	0x4
     b62:	0501                	addi	a0,a0,0
     b64:	0021                	c.nop	8
     b66:	0402                	c.slli64	s0
     b68:	0602                	c.slli64	a2
	polyR[N] = 1;
     b6a:	00090003          	lb	zero,0(s2)
     b6e:	0100                	addi	s0,sp,128
     b70:	1705                	addi	a4,a4,-31
     b72:	0200                	addi	s0,sp,256
int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     b74:	0104                	addi	s1,sp,128
     b76:	0306                	slli	t1,t1,0x1
     b78:	0900                	addi	s0,sp,144
     b7a:	0006                	c.slli	zero,0x1
     b7c:	0501                	addi	a0,a0,0
     b7e:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     b82:	0601                	addi	a2,a2,0
     b84:	00090003          	lb	zero,0(s2)
     b88:	0100                	addi	s0,sp,128
     b8a:	0905                	addi	s2,s2,1
     b8c:	0c091003          	lh	zero,192(s2)
     b90:	0100                	addi	s0,sp,128
     b92:	0d05                	addi	s10,s10,1
     b94:	0200                	addi	s0,sp,256
     b96:	0104                	addi	s1,sp,128
     b98:	0306                	slli	t1,t1,0x1
     b9a:	097f                	0x97f
     b9c:	0002                	c.slli64	zero
     b9e:	0501                	addi	a0,a0,0
     ba0:	0002                	c.slli64	zero
     ba2:	0402                	c.slli64	s0
     ba4:	0601                	addi	a2,a2,0
     ba6:	00090003          	lb	zero,0(s2)
     baa:	0100                	addi	s0,sp,128
     bac:	0306                	slli	t1,t1,0x1
     bae:	090c                	addi	a1,sp,144
     bb0:	0004                	0x4
     bb2:	0501                	addi	a0,a0,0
     bb4:	0301                	addi	t1,t1,0
     bb6:	0902                	c.slli64	s2
     bb8:	0000                	unimp
     bba:	0601                	addi	a2,a2,0
     bbc:	00090103          	lb	sp,0(s2)
     bc0:	0100                	addi	s0,sp,128
     bc2:	0b05                	addi	s6,s6,1
     bc4:	1e096303          	0x1e096303
     bc8:	0100                	addi	s0,sp,128
     bca:	0505                	addi	a0,a0,1
     bcc:	0200                	addi	s0,sp,256
     bce:	0304                	addi	s1,sp,384
     bd0:	0306                	slli	t1,t1,0x1
     bd2:	0908                	addi	a0,sp,144
     bd4:	0004                	0x4
     bd6:	0501                	addi	a0,a0,0
	polyR[0] = -1;
     bd8:	001d                	c.nop	7
     bda:	0402                	c.slli64	s0
	for(i = 1; i < N; ++i){
     bdc:	00030603          	lb	a2,0(t1)
     be0:	0409                	addi	s0,s0,2
     be2:	0100                	addi	s0,sp,128
for (i = N; i < 55; ++i ){
     be4:	2305                	jal	1104 <main+0x1e>
     be6:	0200                	addi	s0,sp,256
     be8:	0304                	addi	s1,sp,384
     bea:	04090003          	lb	zero,64(s2)
		random_keys[i] = f[i];		
     bee:	0100                	addi	s0,sp,128
     bf0:	2605                	jal	f10 <reset_handler+0x22>
     bf2:	0200                	addi	s0,sp,256
     bf4:	0304                	addi	s1,sp,384
	for(i = 0; i < N; ++i){
     bf6:	02090003          	lb	zero,32(s2)
     bfa:	0100                	addi	s0,sp,128
     bfc:	2105                	jal	101c <memcpy+0xbc>
	for(i = N; i < (2*N); ++i){
     bfe:	0200                	addi	s0,sp,256
     c00:	0304                	addi	s1,sp,384
     c02:	06097f03          	0x6097f03
		random_keys[i] = g[i-N];		
     c06:	0100                	addi	s0,sp,128
     c08:	2605                	jal	f28 <reset_handler+0x3a>
     c0a:	0200                	addi	s0,sp,256
     c0c:	0304                	addi	s1,sp,384
	for(i = N; i < (2*N); ++i){
     c0e:	02090103          	lb	sp,32(s2)
	for(i = (2*N); i < (3*N); ++i){
     c12:	0100                	addi	s0,sp,128
     c14:	1d05                	addi	s10,s10,-31
     c16:	0200                	addi	s0,sp,256
	fp = ext_euclid(polyR, f, (N+1), p);
     c18:	0304                	addi	s1,sp,384
     c1a:	04090003          	lb	zero,64(s2)
     c1e:	0100                	addi	s0,sp,128
     c20:	1f05                	addi	t5,t5,-31
     c22:	0200                	addi	s0,sp,256
	for(i = (2*N); i < (3*N); ++i){
     c24:	0304                	addi	s1,sp,384
		random_keys[i] = fp[i-(2*N)];
     c26:	0306                	slli	t1,t1,0x1
     c28:	097f                	0x97f
     c2a:	0002                	c.slli64	zero
     c2c:	0501                	addi	a0,a0,0
	for(i = (2*N); i < (3*N); ++i){
     c2e:	04020017          	auipc	zero,0x4020
	fq = ext_euclid(polyR, f, (N+1), q);
     c32:	0301                	addi	t1,t1,0
     c34:	0900                	addi	s0,sp,144
     c36:	0000                	unimp
     c38:	0501                	addi	a0,a0,0
     c3a:	0004                	0x4
     c3c:	0402                	c.slli64	s0
	for(i = (3*N); i < (4*N); ++i){
     c3e:	0601                	addi	a2,a2,0
     c40:	00090003          	lb	zero,0(s2)
     c44:	0100                	addi	s0,sp,128
		random_keys[i] = fq[i-(3*N)];
     c46:	1f05                	addi	t5,t5,-31
     c48:	0200                	addi	s0,sp,256
     c4a:	0204                	addi	s1,sp,256
     c4c:	0306                	slli	t1,t1,0x1
	for(i = (3*N); i < (4*N); ++i){
     c4e:	097f                	0x97f
     c50:	0004                	0x4
	fg = polymult2(fq, N, g, N, 0); 
     c52:	0501                	addi	a0,a0,0
     c54:	0021                	c.nop	8
     c56:	0402                	c.slli64	s0
     c58:	0602                	c.slli64	a2
     c5a:	00090003          	lb	zero,0(s2)
	for(i = 0; i < (2*N-1); ++i){
     c5e:	0100                	addi	s0,sp,128
     c60:	0405                	addi	s0,s0,1
     c62:	0200                	addi	s0,sp,256
     c64:	0304                	addi	s1,sp,384
     c66:	0306                	slli	t1,t1,0x1
     c68:	090a                	slli	s2,s2,0x2
	pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     c6a:	0008                	0x8
     c6c:	0501                	addi	a0,a0,0
     c6e:	001a                	c.slli	zero,0x6
     c70:	0402                	c.slli64	s0
     c72:	00030603          	lb	a2,0(t1)
	for(i = (4*N); i < (5*N); ++i){
     c76:	0009                	c.nop	2
     c78:	0100                	addi	s0,sp,128
     c7a:	1005                	c.nop	-31
     c7c:	0200                	addi	s0,sp,256
		random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c7e:	0304                	addi	s1,sp,384
     c80:	04090003          	lb	zero,64(s2)
     c84:	0100                	addi	s0,sp,128
	for(i = (4*N); i < (5*N); ++i){
     c86:	1a05                	addi	s4,s4,-31
     c88:	0200                	addi	s0,sp,256
     c8a:	0304                	addi	s1,sp,384
	for(i = (5*N); i < (6*N+1); ++i){
     c8c:	02097f03          	0x2097f03
		random_keys[i] = polyR[i-(5*N)];
     c90:	0100                	addi	s0,sp,128
     c92:	0200                	addi	s0,sp,256
     c94:	0304                	addi	s1,sp,384
     c96:	02090103          	lb	sp,32(s2)
	for(i = (5*N); i < (6*N+1); ++i){
     c9a:	0100                	addi	s0,sp,128
     c9c:	1005                	c.nop	-31
     c9e:	0200                	addi	s0,sp,256
     ca0:	0304                	addi	s1,sp,384
     ca2:	06090003          	lb	zero,96(s2)
}
     ca6:	0100                	addi	s0,sp,128
     ca8:	1a05                	addi	s4,s4,-31
     caa:	0200                	addi	s0,sp,256
     cac:	0304                	addi	s1,sp,384
     cae:	0306                	slli	t1,t1,0x1
     cb0:	097f                	0x97f
     cb2:	0006                	c.slli	zero,0x1
     cb4:	0501                	addi	a0,a0,0
     cb6:	000e                	c.slli	zero,0x3
     cb8:	0402                	c.slli64	s0
     cba:	0301                	addi	t1,t1,0
     cbc:	0900                	addi	s0,sp,144
     cbe:	0000                	unimp
     cc0:	0501                	addi	a0,a0,0
     cc2:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     cc6:	0601                	addi	a2,a2,0
     cc8:	00090003          	lb	zero,0(s2)
     ccc:	0100                	addi	s0,sp,128
     cce:	2505                	jal	12ee <__DTOR_END__+0x106>
     cd0:	0200                	addi	s0,sp,256
     cd2:	0204                	addi	s1,sp,256
     cd4:	0306                	slli	t1,t1,0x1
     cd6:	097f                	0x97f
     cd8:	0004                	0x4
     cda:	0501                	addi	a0,a0,0
     cdc:	0609                	addi	a2,a2,2
     cde:	06090103          	lb	sp,96(s2)
     ce2:	0100                	addi	s0,sp,128
		polyR[i] = 0;		
     ce4:	4305                	li	t1,1
     ce6:	0306                	slli	t1,t1,0x1
     ce8:	0910                	addi	a2,sp,144
     cea:	0004                	0x4
     cec:	0501                	addi	a0,a0,0
	for(i = 1; i < N; ++i){
     cee:	0301                	addi	t1,t1,0
     cf0:	0902                	c.slli64	s2
		f[i] = 0;
     cf2:	0000                	unimp
     cf4:	0301                	addi	t1,t1,0
     cf6:	0901                	addi	s2,s2,0
     cf8:	0000                	unimp
     cfa:	0301                	addi	t1,t1,0
     cfc:	0902                	c.slli64	s2
     cfe:	0000                	unimp
		g[i] = 0;
     d00:	0501                	addi	a0,a0,0
     d02:	0605                	addi	a2,a2,1
     d04:	00090003          	lb	zero,0(s2)
     d08:	0100                	addi	s0,sp,128
for (i = N; i < 55; ++i ){
     d0a:	4305                	li	t1,1
     d0c:	04097b03          	0x4097b03
		random_keys[i] = f[i];		
     d10:	0100                	addi	s0,sp,128
     d12:	0505                	addi	a0,a0,1
     d14:	02090503          	lb	a0,32(s2)
     d18:	0100                	addi	s0,sp,128
     d1a:	4305                	li	t1,1
     d1c:	04097b03          	0x4097b03
     d20:	0100                	addi	s0,sp,128
	for(i = 0; i < N; ++i){
     d22:	0505                	addi	a0,a0,1
		random_keys[i] = g[i-N];		
     d24:	1c090503          	lb	a0,448(s2)
     d28:	0100                	addi	s0,sp,128
     d2a:	06090103          	lb	sp,96(s2)
	for(i = N; i < (2*N); ++i){
     d2e:	0100                	addi	s0,sp,128
     d30:	06090203          	lb	tp,96(s2)
		random_keys[i] = fp[i-(2*N)];
     d34:	0100                	addi	s0,sp,128
     d36:	04090103          	lb	sp,64(s2)
     d3a:	0100                	addi	s0,sp,128
     d3c:	08097f03          	0x8097f03
	for(i = (2*N); i < (3*N); ++i){
     d40:	0100                	addi	s0,sp,128
     d42:	02090103          	lb	sp,32(s2)
		random_keys[i] = fq[i-(3*N)];
     d46:	0100                	addi	s0,sp,128
     d48:	4305                	li	t1,1
     d4a:	04097703          	0x4097703
     d4e:	0100                	addi	s0,sp,128
     d50:	0505                	addi	a0,a0,1
	for(i = (3*N); i < (4*N); ++i){
     d52:	06090503          	lb	a0,96(s2)
     d56:	0100                	addi	s0,sp,128
		fg[i] = fg[i]*p;
     d58:	0105                	addi	sp,sp,1
	for(i = 0; i < (2*N-1); ++i){
     d5a:	0306                	slli	t1,t1,0x1
     d5c:	0901                	addi	s2,s2,0
		fg[i] = fg[i]*p;
     d5e:	0004                	0x4
     d60:	0301                	addi	t1,t1,0
     d62:	0901                	addi	s2,s2,0
     d64:	0000                	unimp
	for(i = 0; i < (2*N-1); ++i){
     d66:	0301                	addi	t1,t1,0
		random_keys[i] = pk[i-(4*N)+(2*N-1)];
     d68:	0901                	addi	s2,s2,0
     d6a:	0000                	unimp
     d6c:	0301                	addi	t1,t1,0
     d6e:	0901                	addi	s2,s2,0
     d70:	0000                	unimp
     d72:	0501                	addi	a0,a0,0
	for(i = (4*N); i < (5*N); ++i){
     d74:	0605                	addi	a2,a2,1
     d76:	00090003          	lb	zero,0(s2)
		random_keys[i] = polyR[i-(5*N)];
     d7a:	0100                	addi	s0,sp,128
     d7c:	0205                	addi	tp,tp,1
     d7e:	0306                	slli	t1,t1,0x1
     d80:	0902                	c.slli64	s2
     d82:	0006                	c.slli	zero,0x1
     d84:	0501                	addi	a0,a0,0
	for(i = (5*N); i < (6*N+1); ++i){
     d86:	0609                	addi	a2,a2,2
		random_keys[i] = polyR[i-(5*N)];
     d88:	00090003          	lb	zero,0(s2)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     d8c:	0100                	addi	s0,sp,128
     d8e:	0e05                	addi	t3,t3,1
     d90:	0200                	addi	s0,sp,256
     d92:	0104                	addi	s1,sp,128
     d94:	0306                	slli	t1,t1,0x1
     d96:	0900                	addi	s0,sp,144
     d98:	0002                	c.slli64	zero
int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     d9a:	0501                	addi	a0,a0,0
     d9c:	0002                	c.slli64	zero
     d9e:	0402                	c.slli64	s0
     da0:	0601                	addi	a2,a2,0
     da2:	00090003          	lb	zero,0(s2)
     da6:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     da8:	06090003          	lb	zero,96(s2)
     dac:	0100                	addi	s0,sp,128
     dae:	0905                	addi	s2,s2,1
     db0:	02090c03          	lb	s8,32(s2)
	temp = polymult(public_key,N,random_val,48,q,0);
     db4:	0100                	addi	s0,sp,128
     db6:	0e05                	addi	t3,t3,1
     db8:	0200                	addi	s0,sp,256
     dba:	0104                	addi	s1,sp,128
     dbc:	0306                	slli	t1,t1,0x1
     dbe:	0900                	addi	s0,sp,144
     dc0:	0002                	c.slli64	zero
     dc2:	0501                	addi	a0,a0,0
     dc4:	0002                	c.slli64	zero
     dc6:	0402                	c.slli64	s0
	for(i = 0; i < 48; ++i){
     dc8:	0601                	addi	a2,a2,0
     dca:	00090003          	lb	zero,0(s2)
		temp[i] = temp[i] + message[i];
     dce:	0100                	addi	s0,sp,128
     dd0:	0905                	addi	s2,s2,1
     dd2:	06090403          	lb	s0,96(s2)
     dd6:	0100                	addi	s0,sp,128
     dd8:	0e05                	addi	t3,t3,1
     dda:	0200                	addi	s0,sp,256
     ddc:	0104                	addi	s1,sp,128
	for(i = 0; i < 48; ++i){
     dde:	0306                	slli	t1,t1,0x1
     de0:	0900                	addi	s0,sp,144
	CT = polydiv(temp,(2*N),polyR,(N+1),q);
     de2:	0002                	c.slli64	zero
     de4:	0501                	addi	a0,a0,0
     de6:	0002                	c.slli64	zero
     de8:	0402                	c.slli64	s0
     dea:	0601                	addi	a2,a2,0
     dec:	00090003          	lb	zero,0(s2)
     df0:	0100                	addi	s0,sp,128
     df2:	0905                	addi	s2,s2,1
	for(i = (2*N); i < (3*N); ++i){
     df4:	04090403          	lb	s0,64(s2)
     df8:	0100                	addi	s0,sp,128
     dfa:	0e05                	addi	t3,t3,1
     dfc:	0200                	addi	s0,sp,256
     dfe:	0104                	addi	s1,sp,128
}
     e00:	0306                	slli	t1,t1,0x1
     e02:	0900                	addi	s0,sp,144
     e04:	0002                	c.slli64	zero
     e06:	0501                	addi	a0,a0,0
     e08:	0002                	c.slli64	zero
     e0a:	0402                	c.slli64	s0
     e0c:	0601                	addi	a2,a2,0
     e0e:	00090003          	lb	zero,0(s2)
		CT[i-(2*N)] = CT[i];
     e12:	0100                	addi	s0,sp,128
     e14:	06090003          	lb	zero,96(s2)
	for(i = (2*N); i < (3*N); ++i){
     e18:	0100                	addi	s0,sp,128
     e1a:	0905                	addi	s2,s2,1
		CT[i-(2*N)] = CT[i];
     e1c:	02090d03          	lb	s10,32(s2)
	for(i = (2*N); i < (3*N); ++i){
     e20:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e22:	0e05                	addi	t3,t3,1
     e24:	0200                	addi	s0,sp,256
     e26:	0104                	addi	s1,sp,128
     e28:	0306                	slli	t1,t1,0x1
	for(i = (2*N); i < ((2*N)+N); ++i){
     e2a:	0900                	addi	s0,sp,144
     e2c:	0002                	c.slli64	zero
     e2e:	0501                	addi	a0,a0,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e30:	0002                	c.slli64	zero
     e32:	0402                	c.slli64	s0
     e34:	0601                	addi	a2,a2,0
     e36:	00090003          	lb	zero,0(s2)
	a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e3a:	0100                	addi	s0,sp,128
     e3c:	0905                	addi	s2,s2,1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e3e:	04090403          	lb	s0,64(s2)
	a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e42:	0100                	addi	s0,sp,128
     e44:	0e05                	addi	t3,t3,1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     e46:	0200                	addi	s0,sp,256
     e48:	0104                	addi	s1,sp,128
     e4a:	0306                	slli	t1,t1,0x1
     e4c:	0900                	addi	s0,sp,144
     e4e:	0002                	c.slli64	zero
	a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e50:	0501                	addi	a0,a0,0
     e52:	0002                	c.slli64	zero
	a = polymult2(secret_key_f,N,Enc_Message,N,0);
     e54:	0402                	c.slli64	s0
     e56:	0601                	addi	a2,a2,0
	a2 = polydiv(a,(2*N),polyR,(N+1),q);
     e58:	00090003          	lb	zero,0(s2)
     e5c:	0100                	addi	s0,sp,128
     e5e:	0905                	addi	s2,s2,1
     e60:	04090403          	lb	s0,64(s2)
     e64:	0100                	addi	s0,sp,128
     e66:	0e05                	addi	t3,t3,1
     e68:	0200                	addi	s0,sp,256
	for(i = (2*N); i < ((2*N)+N); ++i){
     e6a:	0104                	addi	s1,sp,128
     e6c:	0306                	slli	t1,t1,0x1
     e6e:	0900                	addi	s0,sp,144
     e70:	0002                	c.slli64	zero
     e72:	0501                	addi	a0,a0,0
		if(a2[i] <= q/2)
     e74:	0002                	c.slli64	zero
     e76:	0402                	c.slli64	s0
     e78:	0601                	addi	a2,a2,0
	for (i = 0; i < N; ++i){
     e7a:	00090003          	lb	zero,0(s2)
     e7e:	0100                	addi	s0,sp,128
	c = polymult2(secret_key_fp,N,a2,N,0);
     e80:	0905                	addi	s2,s2,1
     e82:	04090303          	lb	t1,64(s2)
     e86:	0100                	addi	s0,sp,128
     e88:	0e05                	addi	t3,t3,1
     e8a:	0200                	addi	s0,sp,256
	c2 = polydiv(c,(2*N),polyR,(N+1),p);
     e8c:	0104                	addi	s1,sp,128
     e8e:	0306                	slli	t1,t1,0x1
     e90:	0900                	addi	s0,sp,144
     e92:	0002                	c.slli64	zero
     e94:	0501                	addi	a0,a0,0
     e96:	0002                	c.slli64	zero
	for(i = (2*N); i < ((2*N)+N); ++i){
     e98:	0402                	c.slli64	s0
     e9a:	0601                	addi	a2,a2,0
     e9c:	00090003          	lb	zero,0(s2)
}
     ea0:	0100                	addi	s0,sp,128
     ea2:	1505                	addi	a0,a0,-31
     ea4:	0200                	addi	s0,sp,256
     ea6:	0104                	addi	s1,sp,128
     ea8:	0306                	slli	t1,t1,0x1
     eaa:	0905                	addi	s2,s2,1
     eac:	0004                	0x4
     eae:	0501                	addi	a0,a0,0
     eb0:	0002                	c.slli64	zero
     eb2:	0402                	c.slli64	s0
		a2[i-(2*N)] = a2[i];
     eb4:	0601                	addi	a2,a2,0
     eb6:	08090003          	lb	zero,128(s2)
     eba:	0100                	addi	s0,sp,128
	for(i = (2*N); i < ((2*N)+N); ++i){
     ebc:	0905                	addi	s2,s2,1
     ebe:	0200                	addi	s0,sp,256
		a2[i-(2*N)] = a2[i];
     ec0:	0104                	addi	s1,sp,128
     ec2:	04097b03          	0x4097b03
		if(a2[i] <= q/2)
     ec6:	0100                	addi	s0,sp,128
     ec8:	0605                	addi	a2,a2,1
     eca:	0200                	addi	s0,sp,256
			a2[i] = (-1)*(q-a2[i]);
     ecc:	0104                	addi	s1,sp,128
     ece:	04090e03          	lb	t3,64(s2)
	for (i = 0; i < N; ++i){
     ed2:	0100                	addi	s0,sp,128
     ed4:	0e05                	addi	t3,t3,1
     ed6:	0200                	addi	s0,sp,256
		c2[i-(2*N)] = c2[i];
     ed8:	0104                	addi	s1,sp,128
     eda:	0306                	slli	t1,t1,0x1
     edc:	097f                	0x97f
     ede:	0002                	c.slli64	zero
	for(i = (2*N); i < ((2*N)+N); ++i){
     ee0:	0501                	addi	a0,a0,0
     ee2:	0002                	c.slli64	zero
		c2[i-(2*N)] = c2[i];
     ee4:	0402                	c.slli64	s0
     ee6:	0601                	addi	a2,a2,0
	for(i = (2*N); i < ((2*N)+N); ++i){
     ee8:	00090003          	lb	zero,0(s2)
  jal x0, default_exc_handler
     eec:	0100                	addi	s0,sp,128
  mv  x1, x0
     eee:	0305                	addi	t1,t1,1
     ef0:	0200                	addi	s0,sp,256
  mv  x2, x1
     ef2:	0304                	addi	s1,sp,384
  mv  x3, x1
     ef4:	0306                	slli	t1,t1,0x1
  mv  x4, x1
     ef6:	0948                	addi	a0,sp,148
  mv  x5, x1
     ef8:	0008                	0x8
  mv  x6, x1
     efa:	0501                	addi	a0,a0,0
  mv  x7, x1
     efc:	0402000b          	0x402000b
  mv  x9, x1
     f00:	00030603          	lb	a2,0(t1)
  mv x11, x1
     f04:	0409                	addi	s0,s0,2
  mv x12, x1
     f06:	0100                	addi	s0,sp,128
  mv x13, x1
     f08:	1005                	c.nop	-31
  mv x14, x1
     f0a:	0200                	addi	s0,sp,256
  mv x15, x1
     f0c:	0304                	addi	s1,sp,384
  mv x16, x1
     f0e:	04090003          	lb	zero,64(s2)
  mv x18, x1
     f12:	0100                	addi	s0,sp,128
  mv x19, x1
     f14:	0b05                	addi	s6,s6,1
  mv x20, x1
     f16:	0200                	addi	s0,sp,256
  mv x21, x1
     f18:	0304                	addi	s1,sp,384
  mv x22, x1
     f1a:	02090003          	lb	zero,32(s2)
  mv x24, x1
     f1e:	0100                	addi	s0,sp,128
  mv x25, x1
     f20:	1a05                	addi	s4,s4,-31
  mv x26, x1
     f22:	0200                	addi	s0,sp,256
  mv x27, x1
     f24:	0304                	addi	s1,sp,384
  mv x28, x1
     f26:	02097f03          	0x2097f03
  mv x30, x1
     f2a:	0100                	addi	s0,sp,128
  mv x31, x1
     f2c:	0b05                	addi	s6,s6,1
  la   x2, _stack_start
     f2e:	0200                	addi	s0,sp,256
     f30:	0304                	addi	s1,sp,384
     f32:	02090103          	lb	sp,32(s2)
  la x26, _bss_start
     f36:	0100                	addi	s0,sp,128
     f38:	1a05                	addi	s4,s4,-31
     f3a:	0200                	addi	s0,sp,256
     f3c:	0304                	addi	s1,sp,384
  la x27, _bss_end
     f3e:	0306                	slli	t1,t1,0x1
     f40:	097f                	0x97f
     f42:	0002                	c.slli64	zero
     f44:	0501                	addi	a0,a0,0
  bge x26, x27, zero_loop_end
     f46:	0304                	addi	s1,sp,384
     f48:	090e                	slli	s2,s2,0x3
  sw x0, 0(x26)
     f4a:	0002                	c.slli64	zero
     f4c:	0501                	addi	a0,a0,0
  addi x26, x26, 4
     f4e:	0616                	slli	a2,a2,0x5
  ble x26, x27, zero_loop
     f50:	00090003          	lb	zero,0(s2)
  addi x10, x0, 0
     f54:	0100                	addi	s0,sp,128
     f56:	0c05                	addi	s8,s8,1
  addi x11, x0, 0
     f58:	02090003          	lb	zero,32(s2)
  jal x1, main
     f5c:	0100                	addi	s0,sp,128
     f5e:	0905                	addi	s2,s2,1
     f60:	0306                	slli	t1,t1,0x1
     f62:	097f                	0x97f
     f64:	0002                	c.slli64	zero
     f66:	0501                	addi	a0,a0,0
     f68:	060e                	slli	a2,a2,0x3
     f6a:	00090003          	lb	zero,0(s2)
     f6e:	0100                	addi	s0,sp,128
     f70:	0905                	addi	s2,s2,1
     f72:	02090003          	lb	zero,32(s2)
     f76:	0100                	addi	s0,sp,128
     f78:	1a05                	addi	s4,s4,-31
     f7a:	0200                	addi	s0,sp,256
     f7c:	0204                	addi	s1,sp,256
     f7e:	0306                	slli	t1,t1,0x1
     f80:	097f                	0x97f
     f82:	0004                	0x4
     f84:	0501                	addi	a0,a0,0
     f86:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     f8a:	09050303          	lb	t1,144(a0)
     f8e:	0006                	c.slli	zero,0x1
     f90:	0501                	addi	a0,a0,0
     f92:	0015                	c.nop	5
     f94:	0402                	c.slli64	s0
     f96:	00030603          	lb	a2,0(t1)
     f9a:	0009                	c.nop	2
     f9c:	0100                	addi	s0,sp,128
     f9e:	1a05                	addi	s4,s4,-31
     fa0:	0200                	addi	s0,sp,256
     fa2:	0304                	addi	s1,sp,384
     fa4:	02097f03          	0x2097f03
     fa8:	0100                	addi	s0,sp,128
     faa:	1505                	addi	a0,a0,-31
     fac:	0200                	addi	s0,sp,256
     fae:	0304                	addi	s1,sp,384
     fb0:	04090103          	lb	sp,64(s2)
     fb4:	0100                	addi	s0,sp,128
     fb6:	0b05                	addi	s6,s6,1
     fb8:	0200                	addi	s0,sp,256
     fba:	0304                	addi	s1,sp,384
     fbc:	04090003          	lb	zero,64(s2)
     fc0:	0100                	addi	s0,sp,128
     fc2:	1a05                	addi	s4,s4,-31
     fc4:	0200                	addi	s0,sp,256
     fc6:	0304                	addi	s1,sp,384
     fc8:	0306                	slli	t1,t1,0x1
     fca:	097f                	0x97f
     fcc:	0004                	0x4
     fce:	0501                	addi	a0,a0,0
     fd0:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     fd4:	09050303          	lb	t1,144(a0)
     fd8:	0002                	c.slli64	zero
     fda:	0501                	addi	a0,a0,0
     fdc:	000d                	c.nop	3
     fde:	0402                	c.slli64	s0
     fe0:	00030603          	lb	a2,0(t1)
     fe4:	0409                	addi	s0,s0,2
     fe6:	0100                	addi	s0,sp,128
     fe8:	1405                	addi	s0,s0,-31
     fea:	0200                	addi	s0,sp,256
     fec:	0304                	addi	s1,sp,384
     fee:	04090003          	lb	zero,64(s2)
     ff2:	0100                	addi	s0,sp,128
     ff4:	0d05                	addi	s10,s10,1
     ff6:	0200                	addi	s0,sp,256
     ff8:	0304                	addi	s1,sp,384
     ffa:	02090003          	lb	zero,32(s2)
     ffe:	0100                	addi	s0,sp,128
    1000:	1a05                	addi	s4,s4,-31
    1002:	0200                	addi	s0,sp,256
    1004:	0304                	addi	s1,sp,384
    1006:	02097f03          	0x2097f03
    100a:	0100                	addi	s0,sp,128
    100c:	0d05                	addi	s10,s10,1
    100e:	0200                	addi	s0,sp,256
    1010:	0304                	addi	s1,sp,384
    1012:	02090103          	lb	sp,32(s2)
    1016:	0100                	addi	s0,sp,128
    1018:	1a05                	addi	s4,s4,-31
    101a:	0200                	addi	s0,sp,256
    101c:	0304                	addi	s1,sp,384
    101e:	0306                	slli	t1,t1,0x1
    1020:	097f                	0x97f
    1022:	0002                	c.slli64	zero
    1024:	0501                	addi	a0,a0,0
    1026:	0304                	addi	s1,sp,384
    1028:	0002090f          	0x2090f
    102c:	0501                	addi	a0,a0,0
    102e:	061a                	slli	a2,a2,0x6
    1030:	00090003          	lb	zero,0(s2)
    1034:	0100                	addi	s0,sp,128
    1036:	0e05                	addi	t3,t3,1
    1038:	02090003          	lb	zero,32(s2)
    103c:	0100                	addi	s0,sp,128
    103e:	0905                	addi	s2,s2,1
    1040:	0306                	slli	t1,t1,0x1
    1042:	097f                	0x97f
    1044:	0002                	c.slli64	zero
    1046:	0501                	addi	a0,a0,0
    1048:	0610                	addi	a2,sp,768
    104a:	00090003          	lb	zero,0(s2)
    104e:	0100                	addi	s0,sp,128
    1050:	0905                	addi	s2,s2,1
    1052:	02090003          	lb	zero,32(s2)
    1056:	0100                	addi	s0,sp,128
    1058:	1a05                	addi	s4,s4,-31
    105a:	0200                	addi	s0,sp,256
    105c:	0204                	addi	s1,sp,256
    105e:	0306                	slli	t1,t1,0x1
    1060:	097f                	0x97f
    1062:	0004                	0x4
    1064:	0501                	addi	a0,a0,0
    1066:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    106a:	09050303          	lb	t1,144(a0)
    106e:	0006                	c.slli	zero,0x1
    1070:	0501                	addi	a0,a0,0
    1072:	0019                	c.nop	6
    1074:	0402                	c.slli64	s0
    1076:	00030603          	lb	a2,0(t1)
    107a:	0009                	c.nop	2
    107c:	0100                	addi	s0,sp,128
    107e:	1a05                	addi	s4,s4,-31
    1080:	0200                	addi	s0,sp,256
    1082:	0304                	addi	s1,sp,384
    1084:	02097f03          	0x2097f03
    1088:	0100                	addi	s0,sp,128
    108a:	1905                	addi	s2,s2,-31
    108c:	0200                	addi	s0,sp,256
    108e:	0304                	addi	s1,sp,384
    1090:	04090103          	lb	sp,64(s2)
    1094:	0100                	addi	s0,sp,128
    1096:	0d05                	addi	s10,s10,1
    1098:	0200                	addi	s0,sp,256
    109a:	0304                	addi	s1,sp,384
    109c:	04090003          	lb	zero,64(s2)
    10a0:	0100                	addi	s0,sp,128
    10a2:	1a05                	addi	s4,s4,-31
    10a4:	0200                	addi	s0,sp,256
    10a6:	0304                	addi	s1,sp,384
    10a8:	0306                	slli	t1,t1,0x1
    10aa:	097f                	0x97f
    10ac:	0004                	0x4
    10ae:	0501                	addi	a0,a0,0
    10b0:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    10b4:	09050303          	lb	t1,144(a0)
    10b8:	0002                	c.slli64	zero
    10ba:	0501                	addi	a0,a0,0
    10bc:	0008                	0x8
    10be:	0402                	c.slli64	s0
    10c0:	00030603          	lb	a2,0(t1)
    10c4:	0009                	c.nop	2
    10c6:	0100                	addi	s0,sp,128
    10c8:	1a05                	addi	s4,s4,-31
    10ca:	0200                	addi	s0,sp,256
    10cc:	0304                	addi	s1,sp,384
    10ce:	0306                	slli	t1,t1,0x1
    10d0:	097f                	0x97f
    10d2:	000a                	c.slli	zero,0x2
    10d4:	0501                	addi	a0,a0,0
    10d6:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    10da:	09040303          	lb	t1,144(s0)
    10de:	0004                	0x4
    10e0:	0501                	addi	a0,a0,0
    10e2:	0008                	0x8
    10e4:	0402                	c.slli64	s0
int main(){
    10e6:	00030603          	lb	a2,0(t1)
int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    10ea:	0009                	c.nop	2
    10ec:	0100                	addi	s0,sp,128
    10ee:	1a05                	addi	s4,s4,-31
    10f0:	0200                	addi	s0,sp,256
    10f2:	0304                	addi	s1,sp,384
    10f4:	0306                	slli	t1,t1,0x1
    10f6:	097f                	0x97f
int main(){
    10f8:	000a                	c.slli	zero,0x2
    10fa:	0501                	addi	a0,a0,0
    10fc:	09060303          	lb	t1,144(a2)
int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1100:	0004                	0x4
	keys = generate_keys(N, p, q);
    1102:	0501                	addi	a0,a0,0
    1104:	0605                	addi	a2,a2,1
    1106:	00090003          	lb	zero,0(s2)
    110a:	0100                	addi	s0,sp,128
    110c:	1d05                	addi	s10,s10,-31
    110e:	0200                	addi	s0,sp,256
	for(i = 0; i < N; ++i){
    1110:	0204                	addi	s1,sp,256
    1112:	0306                	slli	t1,t1,0x1
		secret_key_f[i] = keys[i];
    1114:	097f                	0x97f
    1116:	0002                	c.slli64	zero
    1118:	0501                	addi	a0,a0,0
    111a:	001f 0402 0602      	0x6020402001f
	for(i = 0; i < N; ++i){
    1120:	00090003          	lb	zero,0(s2)
    1124:	0100                	addi	s0,sp,128
	for(i = N; i < (2*N); ++i){
    1126:	0305                	addi	t1,t1,1
    1128:	0306                	slli	t1,t1,0x1
    112a:	0909                	addi	s2,s2,2
    112c:	0004                	0x4
    112e:	0501                	addi	a0,a0,0
    1130:	0003060f          	0x3060f
		secret_key_fp[i-(2*N)] = keys[i];
    1134:	0009                	c.nop	2
    1136:	0100                	addi	s0,sp,128
    1138:	0605                	addi	a2,a2,1
    113a:	06090003          	lb	zero,96(s2)
	for(i = (2*N); i < (3*N); ++i){
    113e:	0100                	addi	s0,sp,128
	for(i = (3*N); i < (4*N); ++i){
    1140:	1705                	addi	a4,a4,-31
    1142:	0200                	addi	s0,sp,256
    1144:	0204                	addi	s1,sp,256
    1146:	0306                	slli	t1,t1,0x1
    1148:	097f                	0x97f
    114a:	0004                	0x4
		public_key[i-(4*N)] = keys[i];
    114c:	0501                	addi	a0,a0,0
    114e:	09070303          	lb	t1,144(a4)
    1152:	0004                	0x4
    1154:	0501                	addi	a0,a0,0
	for(i = (4*N); i < (5*N); ++i){
    1156:	0605                	addi	a2,a2,1
    1158:	00090003          	lb	zero,0(s2)
    115c:	0100                	addi	s0,sp,128
    115e:	1d05                	addi	s10,s10,-31
    1160:	0200                	addi	s0,sp,256
		ring_poly[i-(5*N)] = keys[i];
    1162:	0204                	addi	s1,sp,256
    1164:	0306                	slli	t1,t1,0x1
    1166:	097f                	0x97f
    1168:	0002                	c.slli64	zero
    116a:	0501                	addi	a0,a0,0
	for(i = (5*N); i < (6*N+1); ++i){
    116c:	001f 0402 0602      	0x6020402001f
	Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1172:	00090003          	lb	zero,0(s2)
    1176:	0100                	addi	s0,sp,128
    1178:	1505                	addi	a0,a0,-31
    117a:	0200                	addi	s0,sp,256
    117c:	0104                	addi	s1,sp,128
    117e:	0306                	slli	t1,t1,0x1
	Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1180:	0900                	addi	s0,sp,144
    1182:	0002                	c.slli64	zero
    1184:	0501                	addi	a0,a0,0
    1186:	0002                	c.slli64	zero
    1188:	0402                	c.slli64	s0
    118a:	0601                	addi	a2,a2,0
    118c:	08090003          	lb	zero,128(s2)
    1190:	0100                	addi	s0,sp,128
    1192:	0805                	addi	a6,a6,1
    1194:	0306                	slli	t1,t1,0x1
			resultkon = 1;}
    1196:	090c                	addi	a1,sp,144
    1198:	0004                	0x4
    119a:	0601                	addi	a2,a2,0
    119c:	04093e03          	0x4093e03
	for(i = 0; i < 48; ++i){	
    11a0:	0100                	addi	s0,sp,128
    11a2:	0d05                	addi	s10,s10,1
		if(!(message[i] == Dec_Message[i])){
    11a4:	02090103          	lb	sp,32(s2)
    11a8:	0100                	addi	s0,sp,128
    11aa:	0200                	addi	s0,sp,256
    11ac:	0104                	addi	s1,sp,128
    11ae:	0306                	slli	t1,t1,0x1
    11b0:	097f                	0x97f
    11b2:	0008                	0x8
			resultkon = 0;
    11b4:	0501                	addi	a0,a0,0
    11b6:	0002                	c.slli64	zero
    11b8:	0402                	c.slli64	s0
    11ba:	0601                	addi	a2,a2,0
}
    11bc:	00090003          	lb	zero,0(s2)
    11c0:	0100                	addi	s0,sp,128
    11c2:	1805                	addi	a6,a6,-31
    11c4:	04090303          	lb	t1,64(s2)
    11c8:	0100                	addi	s0,sp,128
    11ca:	0d05                	addi	s10,s10,1
			resultkon = 1;}
    11cc:	04090103          	lb	sp,64(s2)
	for(i = 0; i < 48; ++i){	
    11d0:	0100                	addi	s0,sp,128
    11d2:	1205                	addi	tp,tp,-31
    11d4:	0200                	addi	s0,sp,256
    11d6:	0104                	addi	s1,sp,128
    11d8:	0306                	slli	t1,t1,0x1
    11da:	097f                	0x97f
    11dc:	0008                	0x8
    11de:	0501                	addi	a0,a0,0
    11e0:	0002                	c.slli64	zero
    11e2:	0402                	c.slli64	s0
    11e4:	0601                	addi	a2,a2,0
    11e6:	00090003          	lb	zero,0(s2)
    11ea:	0100                	addi	s0,sp,128
    11ec:	0306                	slli	t1,t1,0x1
    11ee:	0908                	addi	a0,sp,144
    11f0:	0004                	0x4
    11f2:	0301                	addi	t1,t1,0
    11f4:	0902                	c.slli64	s2
    11f6:	0000                	unimp
    11f8:	0501                	addi	a0,a0,0
    11fa:	0601                	addi	a2,a2,0
    11fc:	00090103          	lb	sp,0(s2)
    1200:	0100                	addi	s0,sp,128
    1202:	0305                	addi	t1,t1,1
    1204:	0306                	slli	t1,t1,0x1
    1206:	2a097fb7          	lui	t6,0x2a097
    120a:	0100                	addi	s0,sp,128
    120c:	1005                	c.nop	-31
    120e:	0306                	slli	t1,t1,0x1
    1210:	0900                	addi	s0,sp,144
    1212:	0000                	unimp
    1214:	0501                	addi	a0,a0,0
    1216:	09000307          	0x9000307
    121a:	0004                	0x4
    121c:	0501                	addi	a0,a0,0
    121e:	030d                	addi	t1,t1,3
    1220:	0900                	addi	s0,sp,144
    1222:	0004                	0x4
    1224:	0501                	addi	a0,a0,0
    1226:	02030603          	lb	a2,32(t1)
    122a:	0609                	addi	a2,a2,2
    122c:	0100                	addi	s0,sp,128
    122e:	0a05                	addi	s4,s4,1
    1230:	0306                	slli	t1,t1,0x1
    1232:	0900                	addi	s0,sp,144
    1234:	0002                	c.slli64	zero
    1236:	0501                	addi	a0,a0,0
    1238:	0402000f          	0x402000f
    123c:	0601                	addi	a2,a2,0
    123e:	02090003          	lb	zero,32(s2)
    1242:	0100                	addi	s0,sp,128
    1244:	0305                	addi	t1,t1,1
    1246:	0200                	addi	s0,sp,256
    1248:	0104                	addi	s1,sp,128
    124a:	0306                	slli	t1,t1,0x1
    124c:	0900                	addi	s0,sp,144
    124e:	0000                	unimp
    1250:	0601                	addi	a2,a2,0
    1252:	04090503          	lb	a0,64(s2)
    1256:	0100                	addi	s0,sp,128
    1258:	0d05                	addi	s10,s10,1
    125a:	0306                	slli	t1,t1,0x1
    125c:	0900                	addi	s0,sp,144
    125e:	0000                	unimp
    1260:	0501                	addi	a0,a0,0
    1262:	03030603          	lb	a2,48(t1)
    1266:	0e09                	addi	t3,t3,2
    1268:	0100                	addi	s0,sp,128
    126a:	0a05                	addi	s4,s4,1
    126c:	0306                	slli	t1,t1,0x1
    126e:	0900                	addi	s0,sp,144
    1270:	0004                	0x4
    1272:	0501                	addi	a0,a0,0
    1274:	0402000f          	0x402000f
    1278:	0601                	addi	a2,a2,0
    127a:	02090003          	lb	zero,32(s2)
    127e:	0100                	addi	s0,sp,128
    1280:	0305                	addi	t1,t1,1
    1282:	0200                	addi	s0,sp,256
    1284:	0104                	addi	s1,sp,128
    1286:	0306                	slli	t1,t1,0x1
    1288:	0900                	addi	s0,sp,144
    128a:	0000                	unimp
    128c:	0501                	addi	a0,a0,0
    128e:	030a                	slli	t1,t1,0x2
    1290:	0905                	addi	s2,s2,1
    1292:	0004                	0x4
    1294:	0501                	addi	a0,a0,0
    1296:	0402000f          	0x402000f
    129a:	0601                	addi	a2,a2,0
    129c:	02090003          	lb	zero,32(s2)
    12a0:	0100                	addi	s0,sp,128
    12a2:	0305                	addi	t1,t1,1
    12a4:	0200                	addi	s0,sp,256
    12a6:	0104                	addi	s1,sp,128
    12a8:	0306                	slli	t1,t1,0x1
    12aa:	0900                	addi	s0,sp,144
    12ac:	0000                	unimp
    12ae:	0501                	addi	a0,a0,0
    12b0:	030a                	slli	t1,t1,0x2
    12b2:	0905                	addi	s2,s2,1
    12b4:	0006                	c.slli	zero,0x1
    12b6:	0501                	addi	a0,a0,0
    12b8:	0402000f          	0x402000f
    12bc:	0601                	addi	a2,a2,0
    12be:	02090003          	lb	zero,32(s2)
    12c2:	0100                	addi	s0,sp,128
    12c4:	0305                	addi	t1,t1,1
    12c6:	0200                	addi	s0,sp,256
    12c8:	0104                	addi	s1,sp,128
    12ca:	0306                	slli	t1,t1,0x1
    12cc:	0900                	addi	s0,sp,144
    12ce:	0000                	unimp
    12d0:	0501                	addi	a0,a0,0
    12d2:	030a                	slli	t1,t1,0x2
    12d4:	0905                	addi	s2,s2,1
    12d6:	0006                	c.slli	zero,0x1
    12d8:	0501                	addi	a0,a0,0
    12da:	0402000f          	0x402000f
    12de:	0601                	addi	a2,a2,0
    12e0:	02090003          	lb	zero,32(s2)
    12e4:	0100                	addi	s0,sp,128
    12e6:	0305                	addi	t1,t1,1
    12e8:	0200                	addi	s0,sp,256
    12ea:	0104                	addi	s1,sp,128
    12ec:	0306                	slli	t1,t1,0x1
    12ee:	0900                	addi	s0,sp,144
    12f0:	0000                	unimp
    12f2:	0501                	addi	a0,a0,0
    12f4:	030a                	slli	t1,t1,0x2
    12f6:	0905                	addi	s2,s2,1
    12f8:	0006                	c.slli	zero,0x1
    12fa:	0501                	addi	a0,a0,0
    12fc:	0402000f          	0x402000f
    1300:	0601                	addi	a2,a2,0
    1302:	02090003          	lb	zero,32(s2)
    1306:	0100                	addi	s0,sp,128
    1308:	0305                	addi	t1,t1,1
    130a:	0200                	addi	s0,sp,256
    130c:	0104                	addi	s1,sp,128
    130e:	0306                	slli	t1,t1,0x1
    1310:	0900                	addi	s0,sp,144
    1312:	0000                	unimp
    1314:	0301                	addi	t1,t1,0
    1316:	0900                	addi	s0,sp,144
    1318:	0006                	c.slli	zero,0x1
    131a:	0501                	addi	a0,a0,0
    131c:	0309                	addi	t1,t1,2
    131e:	0905                	addi	s2,s2,1
    1320:	0002                	c.slli64	zero
    1322:	0501                	addi	a0,a0,0
    1324:	000e                	c.slli	zero,0x3
    1326:	0402                	c.slli64	s0
    1328:	0601                	addi	a2,a2,0
    132a:	02090003          	lb	zero,32(s2)
    132e:	0100                	addi	s0,sp,128
    1330:	0305                	addi	t1,t1,1
    1332:	0200                	addi	s0,sp,256
    1334:	0104                	addi	s1,sp,128
    1336:	0306                	slli	t1,t1,0x1
    1338:	0900                	addi	s0,sp,144
    133a:	0000                	unimp
    133c:	0501                	addi	a0,a0,0
    133e:	0309                	addi	t1,t1,2
    1340:	0904                	addi	s1,sp,144
    1342:	0004                	0x4
    1344:	0501                	addi	a0,a0,0
    1346:	000e                	c.slli	zero,0x3
    1348:	0402                	c.slli64	s0
    134a:	0601                	addi	a2,a2,0
    134c:	02090003          	lb	zero,32(s2)
    1350:	0100                	addi	s0,sp,128
    1352:	0305                	addi	t1,t1,1
    1354:	0200                	addi	s0,sp,256
    1356:	0104                	addi	s1,sp,128
    1358:	0306                	slli	t1,t1,0x1
    135a:	0900                	addi	s0,sp,144
    135c:	0000                	unimp
    135e:	0501                	addi	a0,a0,0
    1360:	030a                	slli	t1,t1,0x2
    1362:	0905                	addi	s2,s2,1
    1364:	0004                	0x4
    1366:	0501                	addi	a0,a0,0
    1368:	0016                	c.slli	zero,0x5
    136a:	0402                	c.slli64	s0
    136c:	0601                	addi	a2,a2,0
    136e:	02090003          	lb	zero,32(s2)
    1372:	0100                	addi	s0,sp,128
    1374:	0305                	addi	t1,t1,1
    1376:	0200                	addi	s0,sp,256
    1378:	0104                	addi	s1,sp,128
    137a:	0306                	slli	t1,t1,0x1
    137c:	0900                	addi	s0,sp,144
    137e:	0008                	0x8
    1380:	0501                	addi	a0,a0,0
    1382:	0004                	0x4
    1384:	0402                	c.slli64	s0
    1386:	57030603          	lb	a2,1392(t1)
    138a:	0809                	addi	a6,a6,2
    138c:	0100                	addi	s0,sp,128
    138e:	1005                	c.nop	-31
    1390:	0200                	addi	s0,sp,256
    1392:	0304                	addi	s1,sp,384
    1394:	0306                	slli	t1,t1,0x1
    1396:	0900                	addi	s0,sp,144
    1398:	0000                	unimp
    139a:	0501                	addi	a0,a0,0
    139c:	0402001b          	0x402001b
    13a0:	097f0303          	lb	t1,151(t5)
    13a4:	0002                	c.slli64	zero
    13a6:	0501                	addi	a0,a0,0
    13a8:	0010                	0x10
    13aa:	0402                	c.slli64	s0
    13ac:	09010303          	lb	t1,144(sp)
    13b0:	0004                	0x4
    13b2:	0501                	addi	a0,a0,0
    13b4:	0009                	c.nop	2
    13b6:	0402                	c.slli64	s0
    13b8:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    13bc:	0004                	0x4
    13be:	0501                	addi	a0,a0,0
    13c0:	0402001b          	0x402001b
    13c4:	7f030603          	lb	a2,2032(t1)
    13c8:	0409                	addi	s0,s0,2
    13ca:	0100                	addi	s0,sp,128
    13cc:	0505                	addi	a0,a0,1
    13ce:	02090a03          	lb	s4,32(s2)
    13d2:	0100                	addi	s0,sp,128
    13d4:	1d05                	addi	s10,s10,-31
    13d6:	0306                	slli	t1,t1,0x1
    13d8:	0900                	addi	s0,sp,144
    13da:	0000                	unimp
    13dc:	0501                	addi	a0,a0,0
    13de:	0310                	addi	a2,sp,384
    13e0:	0900                	addi	s0,sp,144
    13e2:	0002                	c.slli64	zero
    13e4:	0501                	addi	a0,a0,0
    13e6:	060a                	slli	a2,a2,0x2
    13e8:	02097f03          	0x2097f03
    13ec:	0100                	addi	s0,sp,128
    13ee:	1205                	addi	tp,tp,-31
    13f0:	0306                	slli	t1,t1,0x1
    13f2:	0900                	addi	s0,sp,144
    13f4:	0000                	unimp
    13f6:	0501                	addi	a0,a0,0
    13f8:	030a                	slli	t1,t1,0x2
    13fa:	0900                	addi	s0,sp,144
    13fc:	0002                	c.slli64	zero
    13fe:	0501                	addi	a0,a0,0
    1400:	0402001b          	0x402001b
    1404:	0602                	c.slli64	a2
    1406:	04097f03          	0x4097f03
    140a:	0100                	addi	s0,sp,128
    140c:	0405                	addi	s0,s0,1
    140e:	0200                	addi	s0,sp,256
    1410:	0304                	addi	s1,sp,384
    1412:	06090603          	lb	a2,96(s2)
    1416:	0100                	addi	s0,sp,128
    1418:	1c05                	addi	s8,s8,-31
    141a:	0200                	addi	s0,sp,256
    141c:	0304                	addi	s1,sp,384
    141e:	0306                	slli	t1,t1,0x1
    1420:	0900                	addi	s0,sp,144
    1422:	0000                	unimp
    1424:	0501                	addi	a0,a0,0
    1426:	0402001b          	0x402001b
    142a:	097f0303          	lb	t1,151(t5)
    142e:	0002                	c.slli64	zero
    1430:	0501                	addi	a0,a0,0
    1432:	001c                	0x1c
    1434:	0402                	c.slli64	s0
    1436:	09010303          	lb	t1,144(sp)
    143a:	0004                	0x4
    143c:	0501                	addi	a0,a0,0
    143e:	0402000f          	0x402000f
    1442:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1446:	0004                	0x4
    1448:	0501                	addi	a0,a0,0
    144a:	0402001b          	0x402001b
    144e:	7f030603          	lb	a2,2032(t1)
    1452:	0409                	addi	s0,s0,2
    1454:	0100                	addi	s0,sp,128
    1456:	0405                	addi	s0,s0,1
    1458:	0200                	addi	s0,sp,256
    145a:	0304                	addi	s1,sp,384
    145c:	02090603          	lb	a2,32(s2)
    1460:	0100                	addi	s0,sp,128
    1462:	1f05                	addi	t5,t5,-31
    1464:	0200                	addi	s0,sp,256
    1466:	0304                	addi	s1,sp,384
    1468:	0306                	slli	t1,t1,0x1
    146a:	0900                	addi	s0,sp,144
    146c:	0000                	unimp
    146e:	0501                	addi	a0,a0,0
    1470:	0016                	c.slli	zero,0x5
    1472:	0402                	c.slli64	s0
    1474:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1478:	0006                	c.slli	zero,0x1
    147a:	0501                	addi	a0,a0,0
    147c:	0402001b          	0x402001b
    1480:	097f0303          	lb	t1,151(t5)
    1484:	0004                	0x4
    1486:	0501                	addi	a0,a0,0
    1488:	0016                	c.slli	zero,0x5
    148a:	0402                	c.slli64	s0
    148c:	09010303          	lb	t1,144(sp)
    1490:	0004                	0x4
    1492:	0501                	addi	a0,a0,0
    1494:	000c                	0xc
    1496:	0402                	c.slli64	s0
    1498:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    149c:	0002                	c.slli64	zero
    149e:	0501                	addi	a0,a0,0
    14a0:	0402001b          	0x402001b
    14a4:	7f030603          	lb	a2,2032(t1)
    14a8:	0409                	addi	s0,s0,2
    14aa:	0100                	addi	s0,sp,128
    14ac:	0505                	addi	a0,a0,1
    14ae:	02090703          	lb	a4,32(s2)
    14b2:	0100                	addi	s0,sp,128
    14b4:	1705                	addi	a4,a4,-31
    14b6:	0306                	slli	t1,t1,0x1
    14b8:	0900                	addi	s0,sp,144
    14ba:	0000                	unimp
    14bc:	0501                	addi	a0,a0,0
    14be:	030d                	addi	t1,t1,3
    14c0:	0900                	addi	s0,sp,144
    14c2:	0002                	c.slli64	zero
    14c4:	0501                	addi	a0,a0,0
    14c6:	060a                	slli	a2,a2,0x2
    14c8:	02097f03          	0x2097f03
    14cc:	0100                	addi	s0,sp,128
    14ce:	0f05                	addi	t5,t5,1
    14d0:	0306                	slli	t1,t1,0x1
    14d2:	0900                	addi	s0,sp,144
    14d4:	0000                	unimp
    14d6:	0501                	addi	a0,a0,0
    14d8:	030a                	slli	t1,t1,0x2
    14da:	0900                	addi	s0,sp,144
    14dc:	0002                	c.slli64	zero
    14de:	0501                	addi	a0,a0,0
    14e0:	0402001b          	0x402001b
    14e4:	0602                	c.slli64	a2
    14e6:	04097f03          	0x4097f03
    14ea:	0100                	addi	s0,sp,128
    14ec:	0405                	addi	s0,s0,1
    14ee:	0200                	addi	s0,sp,256
    14f0:	0304                	addi	s1,sp,384
    14f2:	06090603          	lb	a2,96(s2)
    14f6:	0100                	addi	s0,sp,128
    14f8:	1605                	addi	a2,a2,-31
    14fa:	0200                	addi	s0,sp,256
    14fc:	0304                	addi	s1,sp,384
    14fe:	0306                	slli	t1,t1,0x1
    1500:	0900                	addi	s0,sp,144
    1502:	0000                	unimp
    1504:	0501                	addi	a0,a0,0
    1506:	0402001b          	0x402001b
    150a:	097f0303          	lb	t1,151(t5)
    150e:	0002                	c.slli64	zero
    1510:	0501                	addi	a0,a0,0
    1512:	0016                	c.slli	zero,0x5
    1514:	0402                	c.slli64	s0
    1516:	09010303          	lb	t1,144(sp)
    151a:	0004                	0x4
    151c:	0501                	addi	a0,a0,0
    151e:	000c                	0xc
    1520:	0402                	c.slli64	s0
    1522:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1526:	0004                	0x4
    1528:	0501                	addi	a0,a0,0
    152a:	0402001b          	0x402001b
    152e:	7f030603          	lb	a2,2032(t1)
    1532:	0409                	addi	s0,s0,2
    1534:	0100                	addi	s0,sp,128
    1536:	0405                	addi	s0,s0,1
    1538:	0200                	addi	s0,sp,256
    153a:	0304                	addi	s1,sp,384
    153c:	02090603          	lb	a2,32(s2)
    1540:	0100                	addi	s0,sp,128
    1542:	1305                	addi	t1,t1,-31
    1544:	0200                	addi	s0,sp,256
    1546:	0304                	addi	s1,sp,384
    1548:	0306                	slli	t1,t1,0x1
    154a:	0900                	addi	s0,sp,144
    154c:	0000                	unimp
    154e:	0501                	addi	a0,a0,0
    1550:	0010                	0x10
    1552:	0402                	c.slli64	s0
    1554:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1558:	0006                	c.slli	zero,0x1
    155a:	0501                	addi	a0,a0,0
    155c:	001a                	c.slli	zero,0x6
    155e:	0402                	c.slli64	s0
    1560:	097f0303          	lb	t1,151(t5)
    1564:	0004                	0x4
    1566:	0501                	addi	a0,a0,0
    1568:	0010                	0x10
    156a:	0402                	c.slli64	s0
    156c:	09010303          	lb	t1,144(sp)
    1570:	0004                	0x4
    1572:	0501                	addi	a0,a0,0
    1574:	0009                	c.nop	2
    1576:	0402                	c.slli64	s0
    1578:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    157c:	0002                	c.slli64	zero
    157e:	0501                	addi	a0,a0,0
    1580:	001a                	c.slli	zero,0x6
    1582:	0402                	c.slli64	s0
    1584:	7f030603          	lb	a2,2032(t1)
    1588:	0409                	addi	s0,s0,2
    158a:	0100                	addi	s0,sp,128
    158c:	0405                	addi	s0,s0,1
    158e:	0200                	addi	s0,sp,256
    1590:	0304                	addi	s1,sp,384
    1592:	02090503          	lb	a0,32(s2)
    1596:	0100                	addi	s0,sp,128
    1598:	1005                	c.nop	-31
    159a:	0200                	addi	s0,sp,256
    159c:	0304                	addi	s1,sp,384
    159e:	0306                	slli	t1,t1,0x1
    15a0:	0900                	addi	s0,sp,144
    15a2:	0000                	unimp
    15a4:	0501                	addi	a0,a0,0
    15a6:	001a                	c.slli	zero,0x6
    15a8:	0402                	c.slli64	s0
    15aa:	097f0303          	lb	t1,151(t5)
    15ae:	0002                	c.slli64	zero
    15b0:	0501                	addi	a0,a0,0
    15b2:	0010                	0x10
    15b4:	0402                	c.slli64	s0
    15b6:	09010303          	lb	t1,144(sp)
    15ba:	0004                	0x4
    15bc:	0501                	addi	a0,a0,0
    15be:	0009                	c.nop	2
    15c0:	0402                	c.slli64	s0
    15c2:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    15c6:	0004                	0x4
    15c8:	0501                	addi	a0,a0,0
    15ca:	001a                	c.slli	zero,0x6
    15cc:	0402                	c.slli64	s0
    15ce:	7f030603          	lb	a2,2032(t1)
    15d2:	0409                	addi	s0,s0,2
    15d4:	0100                	addi	s0,sp,128
    15d6:	0405                	addi	s0,s0,1
    15d8:	02090603          	lb	a2,32(s2)
    15dc:	0100                	addi	s0,sp,128
    15de:	0605                	addi	a2,a2,1
    15e0:	0306                	slli	t1,t1,0x1
    15e2:	0900                	addi	s0,sp,144
    15e4:	0000                	unimp
    15e6:	0501                	addi	a0,a0,0
    15e8:	001e                	c.slli	zero,0x7
    15ea:	0402                	c.slli64	s0
    15ec:	0602                	c.slli64	a2
    15ee:	02097f03          	0x2097f03
    15f2:	0100                	addi	s0,sp,128
    15f4:	2005                	jal	1614 <product2+0x50>
    15f6:	0200                	addi	s0,sp,256
    15f8:	0204                	addi	s1,sp,256
    15fa:	0306                	slli	t1,t1,0x1
    15fc:	0900                	addi	s0,sp,144
    15fe:	0000                	unimp
    1600:	0501                	addi	a0,a0,0
    1602:	0004                	0x4
    1604:	0402                	c.slli64	s0
    1606:	09030603          	lb	a2,144(t1)
    160a:	0409                	addi	s0,s0,2
    160c:	0100                	addi	s0,sp,128
    160e:	0905                	addi	s2,s2,1
    1610:	0200                	addi	s0,sp,256
    1612:	0304                	addi	s1,sp,384
    1614:	0306                	slli	t1,t1,0x1
    1616:	0900                	addi	s0,sp,144
    1618:	0000                	unimp
    161a:	0501                	addi	a0,a0,0
    161c:	0402001b          	0x402001b
    1620:	7f030603          	lb	a2,2032(t1)
    1624:	0a09                	addi	s4,s4,2
    1626:	0100                	addi	s0,sp,128
    1628:	0f05                	addi	t5,t5,1
    162a:	0200                	addi	s0,sp,256
    162c:	0104                	addi	s1,sp,128
    162e:	02090003          	lb	zero,32(s2)
    1632:	0100                	addi	s0,sp,128
    1634:	0305                	addi	t1,t1,1
    1636:	0200                	addi	s0,sp,256
    1638:	0104                	addi	s1,sp,128
    163a:	0306                	slli	t1,t1,0x1
    163c:	0900                	addi	s0,sp,144
    163e:	0000                	unimp
    1640:	0001                	nop
    1642:	0402                	c.slli64	s0
    1644:	08030603          	lb	a2,128(t1)
    1648:	0609                	addi	a2,a2,2
    164a:	0100                	addi	s0,sp,128
    164c:	0d05                	addi	s10,s10,1
    164e:	0200                	addi	s0,sp,256
    1650:	0304                	addi	s1,sp,384
    1652:	0306                	slli	t1,t1,0x1
    1654:	0900                	addi	s0,sp,144
    1656:	0004                	0x4
    1658:	0501                	addi	a0,a0,0
    165a:	0010                	0x10
    165c:	0402                	c.slli64	s0
    165e:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1662:	0004                	0x4
    1664:	0501                	addi	a0,a0,0
    1666:	000d                	c.nop	3
    1668:	0402                	c.slli64	s0
    166a:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    166e:	0002                	c.slli64	zero
    1670:	0501                	addi	a0,a0,0
    1672:	0019                	c.nop	6
    1674:	0402                	c.slli64	s0
    1676:	097f0303          	lb	t1,151(t5)
    167a:	0002                	c.slli64	zero
    167c:	0501                	addi	a0,a0,0
    167e:	000d                	c.nop	3
    1680:	0402                	c.slli64	s0
    1682:	09010303          	lb	t1,144(sp)
    1686:	0002                	c.slli64	zero
    1688:	0501                	addi	a0,a0,0
    168a:	0019                	c.nop	6
    168c:	0402                	c.slli64	s0
    168e:	7f030603          	lb	a2,2032(t1)
    1692:	0209                	addi	tp,tp,2
    1694:	0100                	addi	s0,sp,128
    1696:	0305                	addi	t1,t1,1
    1698:	0200                	addi	s0,sp,256
    169a:	0304                	addi	s1,sp,384
    169c:	02090403          	lb	s0,32(s2)
    16a0:	0100                	addi	s0,sp,128
    16a2:	0d05                	addi	s10,s10,1
    16a4:	0200                	addi	s0,sp,256
    16a6:	0304                	addi	s1,sp,384
    16a8:	0306                	slli	t1,t1,0x1
    16aa:	0900                	addi	s0,sp,144
    16ac:	0000                	unimp
    16ae:	0501                	addi	a0,a0,0
    16b0:	0022                	c.slli	zero,0x8
    16b2:	0402                	c.slli64	s0
    16b4:	7f030603          	lb	a2,2032(t1)
    16b8:	0c09                	addi	s8,s8,2
    16ba:	0100                	addi	s0,sp,128
    16bc:	3b05                	jal	13ec <_bss_start+0x80>
    16be:	06090e03          	lb	t3,96(s2)
    16c2:	0100                	addi	s0,sp,128
    16c4:	0305                	addi	t1,t1,1
    16c6:	00090203          	lb	tp,0(s2)
    16ca:	0100                	addi	s0,sp,128
    16cc:	00090103          	lb	sp,0(s2)
    16d0:	0100                	addi	s0,sp,128
    16d2:	00090103          	lb	sp,0(s2)
    16d6:	0100                	addi	s0,sp,128
    16d8:	0705                	addi	a4,a4,1
    16da:	0306                	slli	t1,t1,0x1
    16dc:	0900                	addi	s0,sp,144
    16de:	0000                	unimp
    16e0:	0501                	addi	a0,a0,0
    16e2:	097c033b          	0x97c033b
    16e6:	0004                	0x4
    16e8:	0501                	addi	a0,a0,0
    16ea:	09040307          	0x9040307
    16ee:	0002                	c.slli64	zero
    16f0:	0501                	addi	a0,a0,0
    16f2:	097c033b          	0x97c033b
    16f6:	0004                	0x4
    16f8:	0501                	addi	a0,a0,0
    16fa:	09040307          	0x9040307
    16fe:	001c                	0x1c
    1700:	0301                	addi	t1,t1,0
    1702:	0901                	addi	s2,s2,0
    1704:	0006                	c.slli	zero,0x1
    1706:	0301                	addi	t1,t1,0
    1708:	0901                	addi	s2,s2,0
    170a:	0006                	c.slli	zero,0x1
    170c:	0301                	addi	t1,t1,0
    170e:	0902                	c.slli64	s2
    1710:	0006                	c.slli	zero,0x1
    1712:	0301                	addi	t1,t1,0
    1714:	0901                	addi	s2,s2,0
    1716:	0006                	c.slli	zero,0x1
    1718:	0301                	addi	t1,t1,0
    171a:	0901                	addi	s2,s2,0
    171c:	0006                	c.slli	zero,0x1
    171e:	0301                	addi	t1,t1,0
    1720:	0901                	addi	s2,s2,0
    1722:	0006                	c.slli	zero,0x1
    1724:	0501                	addi	a0,a0,0
    1726:	0975033b          	0x975033b
    172a:	0004                	0x4
    172c:	0501                	addi	a0,a0,0
    172e:	09040307          	0x9040307
    1732:	0004                	0x4
    1734:	0501                	addi	a0,a0,0
    1736:	01030603          	lb	a2,16(t1)
    173a:	0409                	addi	s0,s0,2
    173c:	0100                	addi	s0,sp,128
    173e:	00090103          	lb	sp,0(s2)
    1742:	0100                	addi	s0,sp,128
    1744:	00090203          	lb	tp,0(s2)
    1748:	0100                	addi	s0,sp,128
    174a:	00090103          	lb	sp,0(s2)
    174e:	0100                	addi	s0,sp,128
    1750:	00090103          	lb	sp,0(s2)
    1754:	0100                	addi	s0,sp,128
    1756:	00090103          	lb	sp,0(s2)
    175a:	0100                	addi	s0,sp,128
    175c:	0705                	addi	a4,a4,1
    175e:	0306                	slli	t1,t1,0x1
    1760:	0900                	addi	s0,sp,144
    1762:	0000                	unimp
    1764:	0501                	addi	a0,a0,0
    1766:	01030603          	lb	a2,16(t1)
    176a:	0209                	addi	tp,tp,2
    176c:	0100                	addi	s0,sp,128
    176e:	00090103          	lb	sp,0(s2)
    1772:	0100                	addi	s0,sp,128
    1774:	00090103          	lb	sp,0(s2)
    1778:	0100                	addi	s0,sp,128
    177a:	00090103          	lb	sp,0(s2)
    177e:	0100                	addi	s0,sp,128
    1780:	0205                	addi	tp,tp,1
    1782:	00090203          	lb	tp,0(s2)
    1786:	0100                	addi	s0,sp,128
    1788:	00090103          	lb	sp,0(s2)
    178c:	0100                	addi	s0,sp,128
    178e:	0905                	addi	s2,s2,1
    1790:	0306                	slli	t1,t1,0x1
    1792:	0900                	addi	s0,sp,144
    1794:	0000                	unimp
    1796:	0501                	addi	a0,a0,0
    1798:	000e                	c.slli	zero,0x3
    179a:	0402                	c.slli64	s0
    179c:	0601                	addi	a2,a2,0
    179e:	02090003          	lb	zero,32(s2)
    17a2:	0100                	addi	s0,sp,128
    17a4:	0205                	addi	tp,tp,1
    17a6:	0200                	addi	s0,sp,256
    17a8:	0104                	addi	s1,sp,128
    17aa:	0306                	slli	t1,t1,0x1
    17ac:	0900                	addi	s0,sp,144
    17ae:	0000                	unimp
    17b0:	0501                	addi	a0,a0,0
    17b2:	0309                	addi	t1,t1,2
    17b4:	0904                	addi	s1,sp,144
    17b6:	0004                	0x4
    17b8:	0501                	addi	a0,a0,0
    17ba:	000e                	c.slli	zero,0x3
    17bc:	0402                	c.slli64	s0
    17be:	0601                	addi	a2,a2,0
    17c0:	02090003          	lb	zero,32(s2)
    17c4:	0100                	addi	s0,sp,128
    17c6:	0205                	addi	tp,tp,1
    17c8:	0200                	addi	s0,sp,256
    17ca:	0104                	addi	s1,sp,128
    17cc:	0306                	slli	t1,t1,0x1
    17ce:	0900                	addi	s0,sp,144
    17d0:	0000                	unimp
    17d2:	0501                	addi	a0,a0,0
    17d4:	0309                	addi	t1,t1,2
    17d6:	0904                	addi	s1,sp,144
    17d8:	0004                	0x4
    17da:	0501                	addi	a0,a0,0
    17dc:	0901030b          	0x901030b
    17e0:	0002                	c.slli64	zero
    17e2:	0501                	addi	a0,a0,0
    17e4:	000e                	c.slli	zero,0x3
    17e6:	0402                	c.slli64	s0
    17e8:	0601                	addi	a2,a2,0
    17ea:	08097f03          	0x8097f03
    17ee:	0100                	addi	s0,sp,128
    17f0:	0205                	addi	tp,tp,1
    17f2:	0200                	addi	s0,sp,256
    17f4:	0104                	addi	s1,sp,128
    17f6:	0306                	slli	t1,t1,0x1
    17f8:	0900                	addi	s0,sp,144
    17fa:	0000                	unimp
    17fc:	0501                	addi	a0,a0,0
    17fe:	0309                	addi	t1,t1,2
    1800:	0904                	addi	s1,sp,144
    1802:	0004                	0x4
    1804:	0501                	addi	a0,a0,0
    1806:	000e                	c.slli	zero,0x3
    1808:	0402                	c.slli64	s0
    180a:	0601                	addi	a2,a2,0
    180c:	02090003          	lb	zero,32(s2)
    1810:	0100                	addi	s0,sp,128
    1812:	0205                	addi	tp,tp,1
    1814:	0200                	addi	s0,sp,256
    1816:	0104                	addi	s1,sp,128
    1818:	0306                	slli	t1,t1,0x1
    181a:	0900                	addi	s0,sp,144
    181c:	0000                	unimp
    181e:	0601                	addi	a2,a2,0
    1820:	04090303          	lb	t1,64(s2)
    1824:	0100                	addi	s0,sp,128
    1826:	0a05                	addi	s4,s4,1
    1828:	0306                	slli	t1,t1,0x1
    182a:	0900                	addi	s0,sp,144
    182c:	0000                	unimp
    182e:	0501                	addi	a0,a0,0
    1830:	0601                	addi	a2,a2,0
    1832:	06090303          	lb	t1,96(s2)
    1836:	0100                	addi	s0,sp,128
    1838:	0605                	addi	a2,a2,1
    183a:	00090003          	lb	zero,0(s2)
    183e:	0100                	addi	s0,sp,128
    1840:	1705                	addi	a4,a4,-31
    1842:	0306                	slli	t1,t1,0x1
    1844:	091d                	addi	s2,s2,7
    1846:	0000                	unimp
    1848:	0501                	addi	a0,a0,0
    184a:	0308                	addi	a0,sp,384
    184c:	00080967          	jalr	s2,a6
    1850:	0501                	addi	a0,a0,0
    1852:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1856:	6b030603          	lb	a2,1712(t1)
    185a:	0409                	addi	s0,s0,2
    185c:	0100                	addi	s0,sp,128
    185e:	0b05                	addi	s6,s6,1
    1860:	0200                	addi	s0,sp,256
    1862:	0304                	addi	s1,sp,384
    1864:	0306                	slli	t1,t1,0x1
    1866:	0900                	addi	s0,sp,144
    1868:	0004                	0x4
    186a:	0501                	addi	a0,a0,0
    186c:	0012                	c.slli	zero,0x4
    186e:	0402                	c.slli64	s0
    1870:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1874:	0004                	0x4
    1876:	0501                	addi	a0,a0,0
    1878:	0402000b          	0x402000b
    187c:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    1880:	0002                	c.slli64	zero
    1882:	0501                	addi	a0,a0,0
    1884:	0018                	0x18
    1886:	0402                	c.slli64	s0
    1888:	097f0303          	lb	t1,151(t5)
    188c:	0002                	c.slli64	zero
    188e:	0501                	addi	a0,a0,0
    1890:	0402000b          	0x402000b
    1894:	09010303          	lb	t1,144(sp)
    1898:	0002                	c.slli64	zero
    189a:	0501                	addi	a0,a0,0
    189c:	0018                	0x18
    189e:	0402                	c.slli64	s0
    18a0:	7f030603          	lb	a2,2032(t1)
    18a4:	0209                	addi	tp,tp,2
    18a6:	0100                	addi	s0,sp,128
    18a8:	0305                	addi	t1,t1,1
    18aa:	0200                	addi	s0,sp,256
    18ac:	0304                	addi	s1,sp,384
    18ae:	02090503          	lb	a0,32(s2)
    18b2:	0100                	addi	s0,sp,128
    18b4:	0b05                	addi	s6,s6,1
    18b6:	0200                	addi	s0,sp,256
    18b8:	0304                	addi	s1,sp,384
    18ba:	0306                	slli	t1,t1,0x1
    18bc:	0900                	addi	s0,sp,144
    18be:	0004                	0x4
    18c0:	0501                	addi	a0,a0,0
    18c2:	0012                	c.slli	zero,0x4
    18c4:	0402                	c.slli64	s0
    18c6:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    18ca:	0004                	0x4
    18cc:	0501                	addi	a0,a0,0
    18ce:	0402000b          	0x402000b
    18d2:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    18d6:	0002                	c.slli64	zero
    18d8:	0501                	addi	a0,a0,0
    18da:	0018                	0x18
    18dc:	0402                	c.slli64	s0
    18de:	097f0303          	lb	t1,151(t5)
    18e2:	0002                	c.slli64	zero
    18e4:	0501                	addi	a0,a0,0
    18e6:	0402000b          	0x402000b
    18ea:	09010303          	lb	t1,144(sp)
    18ee:	0002                	c.slli64	zero
    18f0:	0501                	addi	a0,a0,0
    18f2:	0018                	0x18
    18f4:	0402                	c.slli64	s0
    18f6:	7f030603          	lb	a2,2032(t1)
    18fa:	0209                	addi	tp,tp,2
    18fc:	0100                	addi	s0,sp,128
    18fe:	0305                	addi	t1,t1,1
    1900:	0200                	addi	s0,sp,256
    1902:	0304                	addi	s1,sp,384
    1904:	02090503          	lb	a0,32(s2)
    1908:	0100                	addi	s0,sp,128
    190a:	0b05                	addi	s6,s6,1
    190c:	0200                	addi	s0,sp,256
    190e:	0304                	addi	s1,sp,384
    1910:	0306                	slli	t1,t1,0x1
    1912:	0900                	addi	s0,sp,144
    1914:	0000                	unimp
    1916:	0501                	addi	a0,a0,0
    1918:	0018                	0x18
    191a:	0402                	c.slli64	s0
    191c:	7f030603          	lb	a2,2032(t1)
    1920:	0a09                	addi	s4,s4,2
    1922:	0100                	addi	s0,sp,128
    1924:	0305                	addi	t1,t1,1
    1926:	0200                	addi	s0,sp,256
    1928:	0304                	addi	s1,sp,384
    192a:	04090503          	lb	a0,64(s2)
    192e:	0100                	addi	s0,sp,128
    1930:	0b05                	addi	s6,s6,1
    1932:	0200                	addi	s0,sp,256
    1934:	0304                	addi	s1,sp,384
    1936:	0306                	slli	t1,t1,0x1
    1938:	0900                	addi	s0,sp,144
    193a:	0000                	unimp
    193c:	0501                	addi	a0,a0,0
    193e:	0018                	0x18
    1940:	0402                	c.slli64	s0
    1942:	7f030603          	lb	a2,2032(t1)
    1946:	0a09                	addi	s4,s4,2
    1948:	0100                	addi	s0,sp,128
    194a:	0405                	addi	s0,s0,1
    194c:	04090c03          	lb	s8,64(s2)
    1950:	0100                	addi	s0,sp,128
    1952:	1605                	addi	a2,a2,-31
    1954:	0306                	slli	t1,t1,0x1
    1956:	0900                	addi	s0,sp,144
    1958:	0000                	unimp
    195a:	0501                	addi	a0,a0,0
    195c:	030c                	addi	a1,sp,384
    195e:	0900                	addi	s0,sp,144
    1960:	0002                	c.slli64	zero
    1962:	0501                	addi	a0,a0,0
    1964:	0608                	addi	a0,sp,768
    1966:	02097f03          	0x2097f03
    196a:	0100                	addi	s0,sp,128
    196c:	0d05                	addi	s10,s10,1
    196e:	0306                	slli	t1,t1,0x1
    1970:	0900                	addi	s0,sp,144
    1972:	0000                	unimp
    1974:	0501                	addi	a0,a0,0
    1976:	0308                	addi	a0,sp,384
    1978:	0900                	addi	s0,sp,144
    197a:	0002                	c.slli64	zero
    197c:	0501                	addi	a0,a0,0
    197e:	0016                	c.slli	zero,0x5
    1980:	0402                	c.slli64	s0
    1982:	0602                	c.slli64	a2
    1984:	04097f03          	0x4097f03
    1988:	0100                	addi	s0,sp,128
    198a:	0d05                	addi	s10,s10,1
    198c:	0200                	addi	s0,sp,256
    198e:	0104                	addi	s1,sp,128
    1990:	02090003          	lb	zero,32(s2)
    1994:	0100                	addi	s0,sp,128
    1996:	0205                	addi	tp,tp,1
    1998:	0200                	addi	s0,sp,256
    199a:	0104                	addi	s1,sp,128
    199c:	0306                	slli	t1,t1,0x1
    199e:	0900                	addi	s0,sp,144
    19a0:	0000                	unimp
    19a2:	0501                	addi	a0,a0,0
    19a4:	0308                	addi	a0,sp,384
    19a6:	0906                	slli	s2,s2,0x1
    19a8:	000e                	c.slli	zero,0x3
    19aa:	0501                	addi	a0,a0,0
    19ac:	000d                	c.nop	3
    19ae:	0402                	c.slli64	s0
    19b0:	0601                	addi	a2,a2,0
    19b2:	02090003          	lb	zero,32(s2)
    19b6:	0100                	addi	s0,sp,128
    19b8:	0205                	addi	tp,tp,1
    19ba:	0200                	addi	s0,sp,256
    19bc:	0104                	addi	s1,sp,128
    19be:	0306                	slli	t1,t1,0x1
    19c0:	0900                	addi	s0,sp,144
    19c2:	0000                	unimp
    19c4:	0301                	addi	t1,t1,0
    19c6:	0900                	addi	s0,sp,144
    19c8:	0006                	c.slli	zero,0x1
    19ca:	0501                	addi	a0,a0,0
    19cc:	0308                	addi	a0,sp,384
    19ce:	0905                	addi	s2,s2,1
    19d0:	0002                	c.slli64	zero
    19d2:	0501                	addi	a0,a0,0
    19d4:	000d                	c.nop	3
    19d6:	0402                	c.slli64	s0
    19d8:	0601                	addi	a2,a2,0
    19da:	02090003          	lb	zero,32(s2)
    19de:	0100                	addi	s0,sp,128
    19e0:	0205                	addi	tp,tp,1
    19e2:	0200                	addi	s0,sp,256
    19e4:	0104                	addi	s1,sp,128
    19e6:	0306                	slli	t1,t1,0x1
    19e8:	0900                	addi	s0,sp,144
    19ea:	0000                	unimp
    19ec:	0501                	addi	a0,a0,0
    19ee:	0308                	addi	a0,sp,384
    19f0:	0906                	slli	s2,s2,0x1
    19f2:	0004                	0x4
    19f4:	0501                	addi	a0,a0,0
    19f6:	000d                	c.nop	3
    19f8:	0402                	c.slli64	s0
    19fa:	0601                	addi	a2,a2,0
    19fc:	02090003          	lb	zero,32(s2)
    1a00:	0100                	addi	s0,sp,128
    1a02:	0205                	addi	tp,tp,1
    1a04:	0200                	addi	s0,sp,256
    1a06:	0104                	addi	s1,sp,128
    1a08:	0306                	slli	t1,t1,0x1
    1a0a:	0900                	addi	s0,sp,144
    1a0c:	0000                	unimp
    1a0e:	0601                	addi	a2,a2,0
    1a10:	04090703          	lb	a4,64(s2)
    1a14:	0100                	addi	s0,sp,128
    1a16:	0805                	addi	a6,a6,1
    1a18:	0306                	slli	t1,t1,0x1
    1a1a:	0900                	addi	s0,sp,144
    1a1c:	0000                	unimp
    1a1e:	0501                	addi	a0,a0,0
    1a20:	0602                	c.slli64	a2
    1a22:	0c090103          	lb	sp,192(s2)
    1a26:	0100                	addi	s0,sp,128
    1a28:	0f05                	addi	t5,t5,1
    1a2a:	0200                	addi	s0,sp,256
    1a2c:	0104                	addi	s1,sp,128
    1a2e:	04090003          	lb	zero,64(s2)
    1a32:	0100                	addi	s0,sp,128
    1a34:	0205                	addi	tp,tp,1
    1a36:	0200                	addi	s0,sp,256
    1a38:	0104                	addi	s1,sp,128
    1a3a:	0306                	slli	t1,t1,0x1
    1a3c:	0900                	addi	s0,sp,144
    1a3e:	0000                	unimp
    1a40:	0501                	addi	a0,a0,0
    1a42:	0308                	addi	a0,sp,384
    1a44:	0908                	addi	a0,sp,144
    1a46:	000a                	c.slli	zero,0x2
    1a48:	0501                	addi	a0,a0,0
    1a4a:	000d                	c.nop	3
    1a4c:	0402                	c.slli64	s0
    1a4e:	0601                	addi	a2,a2,0
    1a50:	02090003          	lb	zero,32(s2)
    1a54:	0100                	addi	s0,sp,128
    1a56:	0205                	addi	tp,tp,1
    1a58:	0200                	addi	s0,sp,256
    1a5a:	0104                	addi	s1,sp,128
    1a5c:	0306                	slli	t1,t1,0x1
    1a5e:	0900                	addi	s0,sp,144
    1a60:	0000                	unimp
    1a62:	0301                	addi	t1,t1,0
    1a64:	0900                	addi	s0,sp,144
    1a66:	0006                	c.slli	zero,0x1
    1a68:	0501                	addi	a0,a0,0
    1a6a:	0308                	addi	a0,sp,384
    1a6c:	0905                	addi	s2,s2,1
    1a6e:	0002                	c.slli64	zero
    1a70:	0501                	addi	a0,a0,0
    1a72:	000d                	c.nop	3
    1a74:	0402                	c.slli64	s0
    1a76:	0601                	addi	a2,a2,0
    1a78:	02090003          	lb	zero,32(s2)
    1a7c:	0100                	addi	s0,sp,128
    1a7e:	0205                	addi	tp,tp,1
    1a80:	0200                	addi	s0,sp,256
    1a82:	0104                	addi	s1,sp,128
    1a84:	0306                	slli	t1,t1,0x1
    1a86:	0900                	addi	s0,sp,144
    1a88:	0000                	unimp
    1a8a:	0501                	addi	a0,a0,0
    1a8c:	0308                	addi	a0,sp,384
    1a8e:	0906                	slli	s2,s2,0x1
    1a90:	0006                	c.slli	zero,0x1
    1a92:	0501                	addi	a0,a0,0
    1a94:	000d                	c.nop	3
    1a96:	0402                	c.slli64	s0
    1a98:	0601                	addi	a2,a2,0
    1a9a:	02090003          	lb	zero,32(s2)
    1a9e:	0100                	addi	s0,sp,128
    1aa0:	0205                	addi	tp,tp,1
    1aa2:	0200                	addi	s0,sp,256
    1aa4:	0104                	addi	s1,sp,128
    1aa6:	0306                	slli	t1,t1,0x1
    1aa8:	0900                	addi	s0,sp,144
    1aaa:	0000                	unimp
    1aac:	0601                	addi	a2,a2,0
    1aae:	04090403          	lb	s0,64(s2)
    1ab2:	0100                	addi	s0,sp,128
    1ab4:	0905                	addi	s2,s2,1
    1ab6:	0306                	slli	t1,t1,0x1
    1ab8:	0900                	addi	s0,sp,144
    1aba:	0000                	unimp
    1abc:	0501                	addi	a0,a0,0
    1abe:	0602                	c.slli64	a2
    1ac0:	0c090103          	lb	sp,192(s2)
    1ac4:	0100                	addi	s0,sp,128
    1ac6:	0805                	addi	a6,a6,1
    1ac8:	0306                	slli	t1,t1,0x1
    1aca:	0900                	addi	s0,sp,144
    1acc:	0000                	unimp
    1ace:	0501                	addi	a0,a0,0
    1ad0:	000d                	c.nop	3
    1ad2:	0402                	c.slli64	s0
    1ad4:	0601                	addi	a2,a2,0
    1ad6:	02090003          	lb	zero,32(s2)
    1ada:	0100                	addi	s0,sp,128
    1adc:	0205                	addi	tp,tp,1
    1ade:	0200                	addi	s0,sp,256
    1ae0:	0104                	addi	s1,sp,128
    1ae2:	0306                	slli	t1,t1,0x1
    1ae4:	0900                	addi	s0,sp,144
    1ae6:	0000                	unimp
    1ae8:	0301                	addi	t1,t1,0
    1aea:	0900                	addi	s0,sp,144
    1aec:	0006                	c.slli	zero,0x1
    1aee:	0501                	addi	a0,a0,0
    1af0:	0308                	addi	a0,sp,384
    1af2:	0905                	addi	s2,s2,1
    1af4:	0002                	c.slli64	zero
    1af6:	0501                	addi	a0,a0,0
    1af8:	000d                	c.nop	3
    1afa:	0402                	c.slli64	s0
    1afc:	0601                	addi	a2,a2,0
    1afe:	02090003          	lb	zero,32(s2)
    1b02:	0100                	addi	s0,sp,128
    1b04:	0205                	addi	tp,tp,1
    1b06:	0200                	addi	s0,sp,256
    1b08:	0104                	addi	s1,sp,128
    1b0a:	0306                	slli	t1,t1,0x1
    1b0c:	0900                	addi	s0,sp,144
    1b0e:	0000                	unimp
    1b10:	0501                	addi	a0,a0,0
    1b12:	0308                	addi	a0,sp,384
    1b14:	0906                	slli	s2,s2,0x1
    1b16:	0004                	0x4
    1b18:	0501                	addi	a0,a0,0
    1b1a:	000d                	c.nop	3
    1b1c:	0402                	c.slli64	s0
    1b1e:	0601                	addi	a2,a2,0
    1b20:	02090003          	lb	zero,32(s2)
    1b24:	0100                	addi	s0,sp,128
    1b26:	0205                	addi	tp,tp,1
    1b28:	0200                	addi	s0,sp,256
    1b2a:	0104                	addi	s1,sp,128
    1b2c:	0306                	slli	t1,t1,0x1
    1b2e:	0900                	addi	s0,sp,144
    1b30:	0000                	unimp
    1b32:	0601                	addi	a2,a2,0
    1b34:	04090603          	lb	a2,64(s2)
    1b38:	0100                	addi	s0,sp,128
    1b3a:	0905                	addi	s2,s2,1
    1b3c:	0306                	slli	t1,t1,0x1
    1b3e:	0900                	addi	s0,sp,144
    1b40:	0000                	unimp
    1b42:	0501                	addi	a0,a0,0
    1b44:	0602                	c.slli64	a2
    1b46:	0e090103          	lb	sp,224(s2)
    1b4a:	0100                	addi	s0,sp,128
    1b4c:	0805                	addi	a6,a6,1
    1b4e:	0306                	slli	t1,t1,0x1
    1b50:	0900                	addi	s0,sp,144
    1b52:	0000                	unimp
    1b54:	0501                	addi	a0,a0,0
    1b56:	000d                	c.nop	3
    1b58:	0402                	c.slli64	s0
    1b5a:	0601                	addi	a2,a2,0
    1b5c:	02090003          	lb	zero,32(s2)
    1b60:	0100                	addi	s0,sp,128
    1b62:	0205                	addi	tp,tp,1
    1b64:	0200                	addi	s0,sp,256
    1b66:	0104                	addi	s1,sp,128
    1b68:	0306                	slli	t1,t1,0x1
    1b6a:	0900                	addi	s0,sp,144
    1b6c:	0000                	unimp
    1b6e:	0501                	addi	a0,a0,0
    1b70:	0308                	addi	a0,sp,384
    1b72:	090a                	slli	s2,s2,0x2
    1b74:	0006                	c.slli	zero,0x1
    1b76:	0501                	addi	a0,a0,0
    1b78:	000d                	c.nop	3
    1b7a:	0402                	c.slli64	s0
    1b7c:	0601                	addi	a2,a2,0
    1b7e:	02090003          	lb	zero,32(s2)
    1b82:	0100                	addi	s0,sp,128
    1b84:	0205                	addi	tp,tp,1
    1b86:	0200                	addi	s0,sp,256
    1b88:	0104                	addi	s1,sp,128
    1b8a:	0306                	slli	t1,t1,0x1
    1b8c:	0900                	addi	s0,sp,144
    1b8e:	0000                	unimp
    1b90:	0501                	addi	a0,a0,0
    1b92:	0308                	addi	a0,sp,384
    1b94:	0906                	slli	s2,s2,0x1
    1b96:	0004                	0x4
    1b98:	0501                	addi	a0,a0,0
    1b9a:	000d                	c.nop	3
    1b9c:	0402                	c.slli64	s0
    1b9e:	0601                	addi	a2,a2,0
    1ba0:	02090003          	lb	zero,32(s2)
    1ba4:	0100                	addi	s0,sp,128
    1ba6:	0205                	addi	tp,tp,1
    1ba8:	0200                	addi	s0,sp,256
    1baa:	0104                	addi	s1,sp,128
    1bac:	0306                	slli	t1,t1,0x1
    1bae:	0900                	addi	s0,sp,144
    1bb0:	0000                	unimp
    1bb2:	0501                	addi	a0,a0,0
    1bb4:	0308                	addi	a0,sp,384
    1bb6:	0904                	addi	s1,sp,144
    1bb8:	0006                	c.slli	zero,0x1
    1bba:	0501                	addi	a0,a0,0
    1bbc:	000d                	c.nop	3
    1bbe:	0402                	c.slli64	s0
    1bc0:	0601                	addi	a2,a2,0
    1bc2:	02090003          	lb	zero,32(s2)
    1bc6:	0100                	addi	s0,sp,128
    1bc8:	0205                	addi	tp,tp,1
    1bca:	0200                	addi	s0,sp,256
    1bcc:	0104                	addi	s1,sp,128
    1bce:	0306                	slli	t1,t1,0x1
    1bd0:	0900                	addi	s0,sp,144
    1bd2:	0000                	unimp
    1bd4:	0301                	addi	t1,t1,0
    1bd6:	0900                	addi	s0,sp,144
    1bd8:	0006                	c.slli	zero,0x1
    1bda:	0501                	addi	a0,a0,0
    1bdc:	0308                	addi	a0,sp,384
    1bde:	0904                	addi	s1,sp,144
    1be0:	0002                	c.slli64	zero
    1be2:	0501                	addi	a0,a0,0
    1be4:	000d                	c.nop	3
    1be6:	0402                	c.slli64	s0
    1be8:	0601                	addi	a2,a2,0
    1bea:	02090003          	lb	zero,32(s2)
    1bee:	0100                	addi	s0,sp,128
    1bf0:	0205                	addi	tp,tp,1
    1bf2:	0200                	addi	s0,sp,256
    1bf4:	0104                	addi	s1,sp,128
    1bf6:	0306                	slli	t1,t1,0x1
    1bf8:	0900                	addi	s0,sp,144
    1bfa:	0000                	unimp
    1bfc:	0501                	addi	a0,a0,0
    1bfe:	0308                	addi	a0,sp,384
    1c00:	0906                	slli	s2,s2,0x1
    1c02:	0004                	0x4
    1c04:	0501                	addi	a0,a0,0
    1c06:	000d                	c.nop	3
    1c08:	0402                	c.slli64	s0
    1c0a:	0601                	addi	a2,a2,0
    1c0c:	02090003          	lb	zero,32(s2)
    1c10:	0100                	addi	s0,sp,128
    1c12:	0205                	addi	tp,tp,1
    1c14:	0200                	addi	s0,sp,256
    1c16:	0104                	addi	s1,sp,128
    1c18:	0306                	slli	t1,t1,0x1
    1c1a:	0900                	addi	s0,sp,144
    1c1c:	0000                	unimp
    1c1e:	0501                	addi	a0,a0,0
    1c20:	0308                	addi	a0,sp,384
    1c22:	0906                	slli	s2,s2,0x1
    1c24:	0004                	0x4
    1c26:	0501                	addi	a0,a0,0
    1c28:	000d                	c.nop	3
    1c2a:	0402                	c.slli64	s0
    1c2c:	0601                	addi	a2,a2,0
    1c2e:	02090003          	lb	zero,32(s2)
    1c32:	0100                	addi	s0,sp,128
    1c34:	0205                	addi	tp,tp,1
    1c36:	0200                	addi	s0,sp,256
    1c38:	0104                	addi	s1,sp,128
    1c3a:	0306                	slli	t1,t1,0x1
    1c3c:	0900                	addi	s0,sp,144
    1c3e:	0000                	unimp
    1c40:	0501                	addi	a0,a0,0
    1c42:	0308                	addi	a0,sp,384
    1c44:	00040903          	lb	s2,0(s0)
    1c48:	0501                	addi	a0,a0,0
    1c4a:	000d                	c.nop	3
    1c4c:	0402                	c.slli64	s0
    1c4e:	0601                	addi	a2,a2,0
    1c50:	02090003          	lb	zero,32(s2)
    1c54:	0100                	addi	s0,sp,128
    1c56:	0205                	addi	tp,tp,1
    1c58:	0200                	addi	s0,sp,256
    1c5a:	0104                	addi	s1,sp,128
    1c5c:	0306                	slli	t1,t1,0x1
    1c5e:	0900                	addi	s0,sp,144
    1c60:	0000                	unimp
    1c62:	0501                	addi	a0,a0,0
    1c64:	0308                	addi	a0,sp,384
    1c66:	0904                	addi	s1,sp,144
    1c68:	0004                	0x4
    1c6a:	0501                	addi	a0,a0,0
    1c6c:	000d                	c.nop	3
    1c6e:	0402                	c.slli64	s0
    1c70:	0601                	addi	a2,a2,0
    1c72:	02090003          	lb	zero,32(s2)
    1c76:	0100                	addi	s0,sp,128
    1c78:	0205                	addi	tp,tp,1
    1c7a:	0200                	addi	s0,sp,256
    1c7c:	0104                	addi	s1,sp,128
    1c7e:	0306                	slli	t1,t1,0x1
    1c80:	0900                	addi	s0,sp,144
    1c82:	0000                	unimp
    1c84:	0501                	addi	a0,a0,0
    1c86:	0308                	addi	a0,sp,384
    1c88:	00040903          	lb	s2,0(s0)
    1c8c:	0501                	addi	a0,a0,0
    1c8e:	000d                	c.nop	3
    1c90:	0402                	c.slli64	s0
    1c92:	0601                	addi	a2,a2,0
    1c94:	02090003          	lb	zero,32(s2)
    1c98:	0100                	addi	s0,sp,128
    1c9a:	0205                	addi	tp,tp,1
    1c9c:	0200                	addi	s0,sp,256
    1c9e:	0104                	addi	s1,sp,128
    1ca0:	0306                	slli	t1,t1,0x1
    1ca2:	0900                	addi	s0,sp,144
    1ca4:	0000                	unimp
    1ca6:	0501                	addi	a0,a0,0
    1ca8:	0308                	addi	a0,sp,384
    1caa:	0904                	addi	s1,sp,144
    1cac:	0004                	0x4
    1cae:	0501                	addi	a0,a0,0
    1cb0:	000d                	c.nop	3
    1cb2:	0402                	c.slli64	s0
    1cb4:	0601                	addi	a2,a2,0
    1cb6:	02090003          	lb	zero,32(s2)
    1cba:	0100                	addi	s0,sp,128
    1cbc:	0205                	addi	tp,tp,1
    1cbe:	0200                	addi	s0,sp,256
    1cc0:	0104                	addi	s1,sp,128
    1cc2:	0306                	slli	t1,t1,0x1
    1cc4:	0900                	addi	s0,sp,144
    1cc6:	0000                	unimp
    1cc8:	0501                	addi	a0,a0,0
    1cca:	7f89030b          	0x7f89030b
    1cce:	0409                	addi	s0,s0,2
    1cd0:	0100                	addi	s0,sp,128
    1cd2:	0805                	addi	a6,a6,1
    1cd4:	0900fb03          	0x900fb03
    1cd8:	0002                	c.slli64	zero
    1cda:	0501                	addi	a0,a0,0
    1cdc:	000d                	c.nop	3
    1cde:	0402                	c.slli64	s0
    1ce0:	0601                	addi	a2,a2,0
    1ce2:	02090003          	lb	zero,32(s2)
    1ce6:	0100                	addi	s0,sp,128
    1ce8:	0205                	addi	tp,tp,1
    1cea:	0200                	addi	s0,sp,256
    1cec:	0104                	addi	s1,sp,128
    1cee:	0306                	slli	t1,t1,0x1
    1cf0:	0900                	addi	s0,sp,144
    1cf2:	0000                	unimp
    1cf4:	0501                	addi	a0,a0,0
    1cf6:	0606                	slli	a2,a2,0x1
    1cf8:	097f8303          	lb	t1,151(t6) # 2a097097 <_stack_start+0x2a087097>
    1cfc:	0004                	0x4
    1cfe:	0501                	addi	a0,a0,0
    1d00:	0609                	addi	a2,a2,2
    1d02:	09018203          	lb	tp,144(gp)
    1d06:	0004                	0x4
    1d08:	0501                	addi	a0,a0,0
    1d0a:	0305                	addi	t1,t1,1
    1d0c:	0901                	addi	s2,s2,0
    1d0e:	0002                	c.slli64	zero
    1d10:	0501                	addi	a0,a0,0
    1d12:	000e                	c.slli	zero,0x3
    1d14:	0402                	c.slli64	s0
    1d16:	0601                	addi	a2,a2,0
    1d18:	02097f03          	0x2097f03
    1d1c:	0100                	addi	s0,sp,128
    1d1e:	0205                	addi	tp,tp,1
    1d20:	0200                	addi	s0,sp,256
    1d22:	0104                	addi	s1,sp,128
    1d24:	0306                	slli	t1,t1,0x1
    1d26:	0900                	addi	s0,sp,144
    1d28:	0000                	unimp
    1d2a:	0501                	addi	a0,a0,0
    1d2c:	000d                	c.nop	3
    1d2e:	0402                	c.slli64	s0
    1d30:	0601                	addi	a2,a2,0
    1d32:	0c091103          	lh	sp,192(s2)
    1d36:	0100                	addi	s0,sp,128
    1d38:	0205                	addi	tp,tp,1
    1d3a:	0200                	addi	s0,sp,256
    1d3c:	0104                	addi	s1,sp,128
    1d3e:	0306                	slli	t1,t1,0x1
    1d40:	0900                	addi	s0,sp,144
    1d42:	0000                	unimp
    1d44:	0501                	addi	a0,a0,0
    1d46:	0605                	addi	a2,a2,1
    1d48:	04090b03          	lb	s6,64(s2)
    1d4c:	0100                	addi	s0,sp,128
    1d4e:	00090103          	lb	sp,0(s2)
    1d52:	0100                	addi	s0,sp,128
    1d54:	0105                	addi	sp,sp,1
    1d56:	0306                	slli	t1,t1,0x1
    1d58:	0901                	addi	s2,s2,0
    1d5a:	0000                	unimp
    1d5c:	0501                	addi	a0,a0,0
    1d5e:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1d62:	eb030603          	lb	a2,-336(t1)
    1d66:	097e                	slli	s2,s2,0x1f
    1d68:	002a                	c.slli	zero,0xa
    1d6a:	0501                	addi	a0,a0,0
    1d6c:	0015                	c.nop	5
    1d6e:	0402                	c.slli64	s0
    1d70:	00030603          	lb	a2,0(t1)
    1d74:	0009                	c.nop	2
    1d76:	0100                	addi	s0,sp,128
    1d78:	1605                	addi	a2,a2,-31
    1d7a:	0200                	addi	s0,sp,256
    1d7c:	0304                	addi	s1,sp,384
    1d7e:	02097f03          	0x2097f03
    1d82:	0100                	addi	s0,sp,128
    1d84:	1505                	addi	a0,a0,-31
    1d86:	0200                	addi	s0,sp,256
    1d88:	0304                	addi	s1,sp,384
    1d8a:	04090103          	lb	sp,64(s2)
    1d8e:	0100                	addi	s0,sp,128
    1d90:	0b05                	addi	s6,s6,1
    1d92:	0200                	addi	s0,sp,256
    1d94:	0304                	addi	s1,sp,384
    1d96:	04090003          	lb	zero,64(s2)
    1d9a:	0100                	addi	s0,sp,128
    1d9c:	1605                	addi	a2,a2,-31
    1d9e:	0200                	addi	s0,sp,256
    1da0:	0304                	addi	s1,sp,384
    1da2:	0306                	slli	t1,t1,0x1
    1da4:	097f                	0x97f
    1da6:	0004                	0x4
    1da8:	0501                	addi	a0,a0,0
    1daa:	0304                	addi	s1,sp,384
    1dac:	00020907          	0x20907
    1db0:	0501                	addi	a0,a0,0
    1db2:	0616                	slli	a2,a2,0x5
    1db4:	00090003          	lb	zero,0(s2)
    1db8:	0100                	addi	s0,sp,128
    1dba:	0c05                	addi	s8,s8,1
    1dbc:	02090003          	lb	zero,32(s2)
    1dc0:	0100                	addi	s0,sp,128
    1dc2:	0805                	addi	a6,a6,1
    1dc4:	0306                	slli	t1,t1,0x1
    1dc6:	097f                	0x97f
    1dc8:	0002                	c.slli64	zero
    1dca:	0501                	addi	a0,a0,0
    1dcc:	060d                	addi	a2,a2,3
    1dce:	00090003          	lb	zero,0(s2)
    1dd2:	0100                	addi	s0,sp,128
    1dd4:	0805                	addi	a6,a6,1
    1dd6:	02090003          	lb	zero,32(s2)
    1dda:	0100                	addi	s0,sp,128
    1ddc:	1605                	addi	a2,a2,-31
    1dde:	0200                	addi	s0,sp,256
    1de0:	0204                	addi	s1,sp,256
    1de2:	0306                	slli	t1,t1,0x1
    1de4:	097f                	0x97f
    1de6:	0004                	0x4
    1de8:	0501                	addi	a0,a0,0
    1dea:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1dee:	09070303          	lb	t1,144(a4)
    1df2:	0006                	c.slli	zero,0x1
    1df4:	0501                	addi	a0,a0,0
    1df6:	0015                	c.nop	5
    1df8:	0402                	c.slli64	s0
    1dfa:	00030603          	lb	a2,0(t1)
    1dfe:	0009                	c.nop	2
    1e00:	0100                	addi	s0,sp,128
    1e02:	1605                	addi	a2,a2,-31
    1e04:	0200                	addi	s0,sp,256
    1e06:	0304                	addi	s1,sp,384
    1e08:	02097f03          	0x2097f03
    1e0c:	0100                	addi	s0,sp,128
    1e0e:	1505                	addi	a0,a0,-31
    1e10:	0200                	addi	s0,sp,256
    1e12:	0304                	addi	s1,sp,384
    1e14:	04090103          	lb	sp,64(s2)
    1e18:	0100                	addi	s0,sp,128
    1e1a:	0b05                	addi	s6,s6,1
    1e1c:	0200                	addi	s0,sp,256
    1e1e:	0304                	addi	s1,sp,384
    1e20:	04090003          	lb	zero,64(s2)
    1e24:	0100                	addi	s0,sp,128
    1e26:	1605                	addi	a2,a2,-31
    1e28:	0200                	addi	s0,sp,256
    1e2a:	0304                	addi	s1,sp,384
    1e2c:	0306                	slli	t1,t1,0x1
    1e2e:	097f                	0x97f
    1e30:	0004                	0x4
    1e32:	0501                	addi	a0,a0,0
    1e34:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1e38:	09090303          	lb	t1,144(s2)
    1e3c:	0002                	c.slli64	zero
    1e3e:	0501                	addi	a0,a0,0
    1e40:	0014                	0x14
    1e42:	0402                	c.slli64	s0
    1e44:	00030603          	lb	a2,0(t1)
    1e48:	0009                	c.nop	2
    1e4a:	0100                	addi	s0,sp,128
    1e4c:	0f05                	addi	t5,t5,1
    1e4e:	0200                	addi	s0,sp,256
    1e50:	0304                	addi	s1,sp,384
    1e52:	06090003          	lb	zero,96(s2)
    1e56:	0100                	addi	s0,sp,128
    1e58:	1c05                	addi	s8,s8,-31
    1e5a:	0200                	addi	s0,sp,256
    1e5c:	0304                	addi	s1,sp,384
    1e5e:	02097f03          	0x2097f03
    1e62:	0100                	addi	s0,sp,128
    1e64:	0f05                	addi	t5,t5,1
    1e66:	0200                	addi	s0,sp,256
    1e68:	0304                	addi	s1,sp,384
    1e6a:	04090103          	lb	sp,64(s2)
    1e6e:	0100                	addi	s0,sp,128
    1e70:	1c05                	addi	s8,s8,-31
    1e72:	0200                	addi	s0,sp,256
    1e74:	0304                	addi	s1,sp,384
    1e76:	0306                	slli	t1,t1,0x1
    1e78:	097f                	0x97f
    1e7a:	0004                	0x4
    1e7c:	0501                	addi	a0,a0,0
    1e7e:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1e82:	09090303          	lb	t1,144(s2)
    1e86:	0002                	c.slli64	zero
    1e88:	0501                	addi	a0,a0,0
    1e8a:	0011                	c.nop	4
    1e8c:	0402                	c.slli64	s0
    1e8e:	00030603          	lb	a2,0(t1)
    1e92:	0009                	c.nop	2
    1e94:	0100                	addi	s0,sp,128
    1e96:	1905                	addi	s2,s2,-31
    1e98:	0200                	addi	s0,sp,256
    1e9a:	0304                	addi	s1,sp,384
    1e9c:	04090003          	lb	zero,64(s2)
    1ea0:	0100                	addi	s0,sp,128
    1ea2:	1505                	addi	a0,a0,-31
    1ea4:	0200                	addi	s0,sp,256
    1ea6:	0304                	addi	s1,sp,384
    1ea8:	04090003          	lb	zero,64(s2)
    1eac:	0100                	addi	s0,sp,128
    1eae:	0b05                	addi	s6,s6,1
    1eb0:	0200                	addi	s0,sp,256
    1eb2:	0304                	addi	s1,sp,384
    1eb4:	04090003          	lb	zero,64(s2)
    1eb8:	0100                	addi	s0,sp,128
    1eba:	1605                	addi	a2,a2,-31
    1ebc:	0200                	addi	s0,sp,256
    1ebe:	0304                	addi	s1,sp,384
    1ec0:	04097f03          	0x4097f03
    1ec4:	0100                	addi	s0,sp,128
    1ec6:	1505                	addi	a0,a0,-31
    1ec8:	0200                	addi	s0,sp,256
    1eca:	0304                	addi	s1,sp,384
    1ecc:	02090103          	lb	sp,32(s2)
    1ed0:	0100                	addi	s0,sp,128
    1ed2:	0b05                	addi	s6,s6,1
    1ed4:	0200                	addi	s0,sp,256
    1ed6:	0304                	addi	s1,sp,384
    1ed8:	02090003          	lb	zero,32(s2)
    1edc:	0100                	addi	s0,sp,128
    1ede:	1605                	addi	a2,a2,-31
    1ee0:	0200                	addi	s0,sp,256
    1ee2:	0304                	addi	s1,sp,384
    1ee4:	0306                	slli	t1,t1,0x1
    1ee6:	097f                	0x97f
    1ee8:	0002                	c.slli64	zero
    1eea:	0501                	addi	a0,a0,0
    1eec:	0304                	addi	s1,sp,384
    1eee:	00040907          	0x40907
    1ef2:	0501                	addi	a0,a0,0
    1ef4:	0616                	slli	a2,a2,0x5
    1ef6:	00090003          	lb	zero,0(s2)
    1efa:	0100                	addi	s0,sp,128
    1efc:	0c05                	addi	s8,s8,1
    1efe:	02090003          	lb	zero,32(s2)
    1f02:	0100                	addi	s0,sp,128
    1f04:	0805                	addi	a6,a6,1
    1f06:	0306                	slli	t1,t1,0x1
    1f08:	097f                	0x97f
    1f0a:	0002                	c.slli64	zero
    1f0c:	0501                	addi	a0,a0,0
    1f0e:	060d                	addi	a2,a2,3
    1f10:	00090003          	lb	zero,0(s2)
    1f14:	0100                	addi	s0,sp,128
    1f16:	0805                	addi	a6,a6,1
    1f18:	02090003          	lb	zero,32(s2)
    1f1c:	0100                	addi	s0,sp,128
    1f1e:	1605                	addi	a2,a2,-31
    1f20:	0200                	addi	s0,sp,256
    1f22:	0204                	addi	s1,sp,256
    1f24:	0306                	slli	t1,t1,0x1
    1f26:	097f                	0x97f
    1f28:	0004                	0x4
    1f2a:	0501                	addi	a0,a0,0
    1f2c:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1f30:	09070303          	lb	t1,144(a4)
    1f34:	0006                	c.slli	zero,0x1
    1f36:	0501                	addi	a0,a0,0
    1f38:	0015                	c.nop	5
    1f3a:	0402                	c.slli64	s0
    1f3c:	00030603          	lb	a2,0(t1)
    1f40:	0009                	c.nop	2
    1f42:	0100                	addi	s0,sp,128
    1f44:	1605                	addi	a2,a2,-31
    1f46:	0200                	addi	s0,sp,256
    1f48:	0304                	addi	s1,sp,384
    1f4a:	02097f03          	0x2097f03
    1f4e:	0100                	addi	s0,sp,128
    1f50:	1505                	addi	a0,a0,-31
    1f52:	0200                	addi	s0,sp,256
    1f54:	0304                	addi	s1,sp,384
    1f56:	04090103          	lb	sp,64(s2)
    1f5a:	0100                	addi	s0,sp,128
    1f5c:	0b05                	addi	s6,s6,1
    1f5e:	0200                	addi	s0,sp,256
    1f60:	0304                	addi	s1,sp,384
    1f62:	04090003          	lb	zero,64(s2)
    1f66:	0100                	addi	s0,sp,128
    1f68:	1605                	addi	a2,a2,-31
    1f6a:	0200                	addi	s0,sp,256
    1f6c:	0304                	addi	s1,sp,384
    1f6e:	0306                	slli	t1,t1,0x1
    1f70:	097f                	0x97f
    1f72:	0004                	0x4
    1f74:	0501                	addi	a0,a0,0
    1f76:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1f7a:	09060303          	lb	t1,144(a2)
    1f7e:	0002                	c.slli64	zero
    1f80:	0501                	addi	a0,a0,0
    1f82:	0011                	c.nop	4
    1f84:	0402                	c.slli64	s0
    1f86:	00030603          	lb	a2,0(t1)
    1f8a:	0409                	addi	s0,s0,2
    1f8c:	0100                	addi	s0,sp,128
    1f8e:	0b05                	addi	s6,s6,1
    1f90:	0200                	addi	s0,sp,256
    1f92:	0304                	addi	s1,sp,384
    1f94:	06090003          	lb	zero,96(s2)
    1f98:	0100                	addi	s0,sp,128
    1f9a:	1605                	addi	a2,a2,-31
    1f9c:	0200                	addi	s0,sp,256
    1f9e:	0304                	addi	s1,sp,384
    1fa0:	02097f03          	0x2097f03
    1fa4:	0100                	addi	s0,sp,128
    1fa6:	0b05                	addi	s6,s6,1
    1fa8:	0200                	addi	s0,sp,256
    1faa:	0304                	addi	s1,sp,384
    1fac:	02090103          	lb	sp,32(s2)
    1fb0:	0100                	addi	s0,sp,128
    1fb2:	1605                	addi	a2,a2,-31
    1fb4:	0200                	addi	s0,sp,256
    1fb6:	0304                	addi	s1,sp,384
    1fb8:	0306                	slli	t1,t1,0x1
    1fba:	097f                	0x97f
    1fbc:	0002                	c.slli64	zero
    1fbe:	0501                	addi	a0,a0,0
    1fc0:	0304                	addi	s1,sp,384
    1fc2:	00020907          	0x20907
    1fc6:	0501                	addi	a0,a0,0
    1fc8:	0616                	slli	a2,a2,0x5
    1fca:	00090003          	lb	zero,0(s2)
    1fce:	0100                	addi	s0,sp,128
    1fd0:	0c05                	addi	s8,s8,1
    1fd2:	02090003          	lb	zero,32(s2)
    1fd6:	0100                	addi	s0,sp,128
    1fd8:	0905                	addi	s2,s2,1
    1fda:	0306                	slli	t1,t1,0x1
    1fdc:	097f                	0x97f
    1fde:	0002                	c.slli64	zero
    1fe0:	0501                	addi	a0,a0,0
    1fe2:	0003060f          	0x3060f
    1fe6:	0009                	c.nop	2
    1fe8:	0100                	addi	s0,sp,128
    1fea:	0905                	addi	s2,s2,1
    1fec:	02090003          	lb	zero,32(s2)
    1ff0:	0100                	addi	s0,sp,128
    1ff2:	1605                	addi	a2,a2,-31
    1ff4:	0200                	addi	s0,sp,256
    1ff6:	0204                	addi	s1,sp,256
    1ff8:	0306                	slli	t1,t1,0x1
    1ffa:	097f                	0x97f
    1ffc:	0004                	0x4
    1ffe:	0501                	addi	a0,a0,0
    2000:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2004:	09070303          	lb	t1,144(a4)
    2008:	0006                	c.slli	zero,0x1
    200a:	0501                	addi	a0,a0,0
    200c:	0015                	c.nop	5
    200e:	0402                	c.slli64	s0
    2010:	00030603          	lb	a2,0(t1)
    2014:	0009                	c.nop	2
    2016:	0100                	addi	s0,sp,128
    2018:	1605                	addi	a2,a2,-31
    201a:	0200                	addi	s0,sp,256
    201c:	0304                	addi	s1,sp,384
    201e:	02097f03          	0x2097f03
    2022:	0100                	addi	s0,sp,128
    2024:	1505                	addi	a0,a0,-31
    2026:	0200                	addi	s0,sp,256
    2028:	0304                	addi	s1,sp,384
    202a:	04090103          	lb	sp,64(s2)
    202e:	0100                	addi	s0,sp,128
    2030:	0b05                	addi	s6,s6,1
    2032:	0200                	addi	s0,sp,256
    2034:	0304                	addi	s1,sp,384
    2036:	04090003          	lb	zero,64(s2)
    203a:	0100                	addi	s0,sp,128
    203c:	1605                	addi	a2,a2,-31
    203e:	0200                	addi	s0,sp,256
    2040:	0304                	addi	s1,sp,384
    2042:	0306                	slli	t1,t1,0x1
    2044:	097f                	0x97f
    2046:	0004                	0x4
    2048:	0501                	addi	a0,a0,0
    204a:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    204e:	09080303          	lb	t1,144(a6)
    2052:	0002                	c.slli64	zero
    2054:	0501                	addi	a0,a0,0
    2056:	0011                	c.nop	4
    2058:	0402                	c.slli64	s0
    205a:	00030603          	lb	a2,0(t1)
    205e:	0409                	addi	s0,s0,2
    2060:	0100                	addi	s0,sp,128
    2062:	0b05                	addi	s6,s6,1
    2064:	0200                	addi	s0,sp,256
    2066:	0304                	addi	s1,sp,384
    2068:	06090003          	lb	zero,96(s2)
    206c:	0100                	addi	s0,sp,128
    206e:	1605                	addi	a2,a2,-31
    2070:	0200                	addi	s0,sp,256
    2072:	0304                	addi	s1,sp,384
    2074:	02097f03          	0x2097f03
    2078:	0100                	addi	s0,sp,128
    207a:	0b05                	addi	s6,s6,1
    207c:	0200                	addi	s0,sp,256
    207e:	0304                	addi	s1,sp,384
    2080:	02090103          	lb	sp,32(s2)
    2084:	0100                	addi	s0,sp,128
    2086:	1605                	addi	a2,a2,-31
    2088:	0200                	addi	s0,sp,256
    208a:	0304                	addi	s1,sp,384
    208c:	0306                	slli	t1,t1,0x1
    208e:	097f                	0x97f
    2090:	0002                	c.slli64	zero
    2092:	0501                	addi	a0,a0,0
    2094:	0304                	addi	s1,sp,384
    2096:	090c                	addi	a1,sp,144
    2098:	0002                	c.slli64	zero
    209a:	0501                	addi	a0,a0,0
    209c:	0616                	slli	a2,a2,0x5
    209e:	00090003          	lb	zero,0(s2)
    20a2:	0100                	addi	s0,sp,128
    20a4:	0c05                	addi	s8,s8,1
    20a6:	02090003          	lb	zero,32(s2)
    20aa:	0100                	addi	s0,sp,128
    20ac:	0905                	addi	s2,s2,1
    20ae:	0306                	slli	t1,t1,0x1
    20b0:	097f                	0x97f
    20b2:	0002                	c.slli64	zero
    20b4:	0501                	addi	a0,a0,0
    20b6:	0003060f          	0x3060f
    20ba:	0009                	c.nop	2
    20bc:	0100                	addi	s0,sp,128
    20be:	0905                	addi	s2,s2,1
    20c0:	02090003          	lb	zero,32(s2)
    20c4:	0100                	addi	s0,sp,128
    20c6:	1605                	addi	a2,a2,-31
    20c8:	0200                	addi	s0,sp,256
    20ca:	0204                	addi	s1,sp,256
    20cc:	0306                	slli	t1,t1,0x1
    20ce:	097f                	0x97f
    20d0:	0004                	0x4
    20d2:	0501                	addi	a0,a0,0
    20d4:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    20d8:	09070303          	lb	t1,144(a4)
    20dc:	0006                	c.slli	zero,0x1
    20de:	0501                	addi	a0,a0,0
    20e0:	0015                	c.nop	5
    20e2:	0402                	c.slli64	s0
    20e4:	00030603          	lb	a2,0(t1)
    20e8:	0009                	c.nop	2
    20ea:	0100                	addi	s0,sp,128
    20ec:	1605                	addi	a2,a2,-31
    20ee:	0200                	addi	s0,sp,256
    20f0:	0304                	addi	s1,sp,384
    20f2:	04097f03          	0x4097f03
    20f6:	0100                	addi	s0,sp,128
    20f8:	1505                	addi	a0,a0,-31
    20fa:	0200                	addi	s0,sp,256
    20fc:	0304                	addi	s1,sp,384
    20fe:	04090103          	lb	sp,64(s2)
    2102:	0100                	addi	s0,sp,128
    2104:	0b05                	addi	s6,s6,1
    2106:	0200                	addi	s0,sp,256
    2108:	0304                	addi	s1,sp,384
    210a:	04090003          	lb	zero,64(s2)
    210e:	0100                	addi	s0,sp,128
    2110:	1605                	addi	a2,a2,-31
    2112:	0200                	addi	s0,sp,256
    2114:	0304                	addi	s1,sp,384
    2116:	0306                	slli	t1,t1,0x1
    2118:	097f                	0x97f
    211a:	0004                	0x4
    211c:	0501                	addi	a0,a0,0
    211e:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2122:	09050303          	lb	t1,144(a0)
    2126:	0002                	c.slli64	zero
    2128:	0501                	addi	a0,a0,0
    212a:	0402000f          	0x402000f
    212e:	00030603          	lb	a2,0(t1)
    2132:	0009                	c.nop	2
    2134:	0100                	addi	s0,sp,128
    2136:	1905                	addi	s2,s2,-31
    2138:	0200                	addi	s0,sp,256
    213a:	0304                	addi	s1,sp,384
    213c:	0a090003          	lb	zero,160(s2)
    2140:	0100                	addi	s0,sp,128
    2142:	1305                	addi	t1,t1,-31
    2144:	0200                	addi	s0,sp,256
    2146:	0304                	addi	s1,sp,384
    2148:	04090003          	lb	zero,64(s2)
    214c:	0100                	addi	s0,sp,128
    214e:	0905                	addi	s2,s2,1
    2150:	0200                	addi	s0,sp,256
    2152:	0304                	addi	s1,sp,384
    2154:	04090003          	lb	zero,64(s2)
    2158:	0100                	addi	s0,sp,128
    215a:	1605                	addi	a2,a2,-31
    215c:	0200                	addi	s0,sp,256
    215e:	0304                	addi	s1,sp,384
    2160:	04097f03          	0x4097f03
    2164:	0100                	addi	s0,sp,128
    2166:	1305                	addi	t1,t1,-31
    2168:	0200                	addi	s0,sp,256
    216a:	0304                	addi	s1,sp,384
    216c:	02090103          	lb	sp,32(s2)
    2170:	0100                	addi	s0,sp,128
    2172:	0905                	addi	s2,s2,1
    2174:	0200                	addi	s0,sp,256
    2176:	0304                	addi	s1,sp,384
    2178:	02090003          	lb	zero,32(s2)
    217c:	0100                	addi	s0,sp,128
    217e:	1605                	addi	a2,a2,-31
    2180:	0200                	addi	s0,sp,256
    2182:	0304                	addi	s1,sp,384
    2184:	0306                	slli	t1,t1,0x1
    2186:	097f                	0x97f
    2188:	0002                	c.slli64	zero
    218a:	0501                	addi	a0,a0,0
    218c:	0304                	addi	s1,sp,384
    218e:	0906                	slli	s2,s2,0x1
    2190:	0004                	0x4
    2192:	0501                	addi	a0,a0,0
    2194:	0612                	slli	a2,a2,0x4
    2196:	00090003          	lb	zero,0(s2)
    219a:	0100                	addi	s0,sp,128
    219c:	0a05                	addi	s4,s4,1
    219e:	02090003          	lb	zero,32(s2)
    21a2:	0100                	addi	s0,sp,128
    21a4:	0905                	addi	s2,s2,1
    21a6:	0306                	slli	t1,t1,0x1
    21a8:	097f                	0x97f
    21aa:	0002                	c.slli64	zero
    21ac:	0501                	addi	a0,a0,0
    21ae:	060d                	addi	a2,a2,3
    21b0:	00090003          	lb	zero,0(s2)
    21b4:	0100                	addi	s0,sp,128
    21b6:	0905                	addi	s2,s2,1
    21b8:	02090003          	lb	zero,32(s2)
    21bc:	0100                	addi	s0,sp,128
    21be:	1605                	addi	a2,a2,-31
    21c0:	0200                	addi	s0,sp,256
    21c2:	0204                	addi	s1,sp,256
    21c4:	0306                	slli	t1,t1,0x1
    21c6:	097f                	0x97f
    21c8:	0004                	0x4
    21ca:	0501                	addi	a0,a0,0
    21cc:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    21d0:	09070303          	lb	t1,144(a4)
    21d4:	0006                	c.slli	zero,0x1
    21d6:	0501                	addi	a0,a0,0
    21d8:	0011                	c.nop	4
    21da:	0402                	c.slli64	s0
    21dc:	00030603          	lb	a2,0(t1)
    21e0:	0009                	c.nop	2
    21e2:	0100                	addi	s0,sp,128
    21e4:	1605                	addi	a2,a2,-31
    21e6:	0200                	addi	s0,sp,256
    21e8:	0304                	addi	s1,sp,384
    21ea:	02097f03          	0x2097f03
    21ee:	0100                	addi	s0,sp,128
    21f0:	1105                	addi	sp,sp,-31
    21f2:	0200                	addi	s0,sp,256
    21f4:	0304                	addi	s1,sp,384
    21f6:	04090103          	lb	sp,64(s2)
    21fa:	0100                	addi	s0,sp,128
    21fc:	0905                	addi	s2,s2,1
    21fe:	0200                	addi	s0,sp,256
    2200:	0304                	addi	s1,sp,384
    2202:	04090003          	lb	zero,64(s2)
    2206:	0100                	addi	s0,sp,128
    2208:	1605                	addi	a2,a2,-31
    220a:	0200                	addi	s0,sp,256
    220c:	0304                	addi	s1,sp,384
    220e:	0306                	slli	t1,t1,0x1
    2210:	097f                	0x97f
    2212:	0004                	0x4
    2214:	0501                	addi	a0,a0,0
    2216:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    221a:	09070303          	lb	t1,144(a4)
    221e:	0002                	c.slli64	zero
    2220:	0501                	addi	a0,a0,0
    2222:	0402000b          	0x402000b
    2226:	00030603          	lb	a2,0(t1)
    222a:	0409                	addi	s0,s0,2
    222c:	0100                	addi	s0,sp,128
    222e:	1105                	addi	sp,sp,-31
    2230:	0200                	addi	s0,sp,256
    2232:	0304                	addi	s1,sp,384
    2234:	04090003          	lb	zero,64(s2)
    2238:	0100                	addi	s0,sp,128
    223a:	0b05                	addi	s6,s6,1
    223c:	0200                	addi	s0,sp,256
    223e:	0304                	addi	s1,sp,384
    2240:	02090003          	lb	zero,32(s2)
    2244:	0100                	addi	s0,sp,128
    2246:	1605                	addi	a2,a2,-31
    2248:	0200                	addi	s0,sp,256
    224a:	0304                	addi	s1,sp,384
    224c:	02097f03          	0x2097f03
    2250:	0100                	addi	s0,sp,128
    2252:	0b05                	addi	s6,s6,1
    2254:	0200                	addi	s0,sp,256
    2256:	0304                	addi	s1,sp,384
    2258:	02090103          	lb	sp,32(s2)
    225c:	0100                	addi	s0,sp,128
    225e:	1605                	addi	a2,a2,-31
    2260:	0200                	addi	s0,sp,256
    2262:	0304                	addi	s1,sp,384
    2264:	0306                	slli	t1,t1,0x1
    2266:	097f                	0x97f
    2268:	0002                	c.slli64	zero
    226a:	0501                	addi	a0,a0,0
    226c:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2270:	09040303          	lb	t1,144(s0)
    2274:	0002                	c.slli64	zero
    2276:	0501                	addi	a0,a0,0
    2278:	0402000b          	0x402000b
    227c:	00030603          	lb	a2,0(t1)
    2280:	0409                	addi	s0,s0,2
    2282:	0100                	addi	s0,sp,128
    2284:	0f05                	addi	t5,t5,1
    2286:	0200                	addi	s0,sp,256
    2288:	0304                	addi	s1,sp,384
    228a:	04090003          	lb	zero,64(s2)
    228e:	0100                	addi	s0,sp,128
    2290:	0b05                	addi	s6,s6,1
    2292:	0200                	addi	s0,sp,256
    2294:	0304                	addi	s1,sp,384
    2296:	02090003          	lb	zero,32(s2)
    229a:	0100                	addi	s0,sp,128
    229c:	1605                	addi	a2,a2,-31
    229e:	0200                	addi	s0,sp,256
    22a0:	0304                	addi	s1,sp,384
    22a2:	02097f03          	0x2097f03
    22a6:	0100                	addi	s0,sp,128
    22a8:	0b05                	addi	s6,s6,1
    22aa:	0200                	addi	s0,sp,256
    22ac:	0304                	addi	s1,sp,384
    22ae:	02090103          	lb	sp,32(s2)
    22b2:	0100                	addi	s0,sp,128
    22b4:	1605                	addi	a2,a2,-31
    22b6:	0200                	addi	s0,sp,256
    22b8:	0304                	addi	s1,sp,384
    22ba:	0306                	slli	t1,t1,0x1
    22bc:	097f                	0x97f
    22be:	0002                	c.slli64	zero
    22c0:	0501                	addi	a0,a0,0
    22c2:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    22c6:	09050303          	lb	t1,144(a0)
    22ca:	0002                	c.slli64	zero
    22cc:	0501                	addi	a0,a0,0
    22ce:	0402000b          	0x402000b
    22d2:	00030603          	lb	a2,0(t1)
    22d6:	0409                	addi	s0,s0,2
    22d8:	0100                	addi	s0,sp,128
    22da:	1105                	addi	sp,sp,-31
    22dc:	0200                	addi	s0,sp,256
    22de:	0304                	addi	s1,sp,384
    22e0:	0a090003          	lb	zero,160(s2)
    22e4:	0100                	addi	s0,sp,128
    22e6:	0b05                	addi	s6,s6,1
    22e8:	0200                	addi	s0,sp,256
    22ea:	0304                	addi	s1,sp,384
    22ec:	02090003          	lb	zero,32(s2)
    22f0:	0100                	addi	s0,sp,128
    22f2:	1605                	addi	a2,a2,-31
    22f4:	0200                	addi	s0,sp,256
    22f6:	0304                	addi	s1,sp,384
    22f8:	02097f03          	0x2097f03
    22fc:	0100                	addi	s0,sp,128
    22fe:	0b05                	addi	s6,s6,1
    2300:	0200                	addi	s0,sp,256
    2302:	0304                	addi	s1,sp,384
    2304:	02090103          	lb	sp,32(s2)
    2308:	0100                	addi	s0,sp,128
    230a:	1605                	addi	a2,a2,-31
    230c:	0200                	addi	s0,sp,256
    230e:	0304                	addi	s1,sp,384
    2310:	0306                	slli	t1,t1,0x1
    2312:	097f                	0x97f
    2314:	0002                	c.slli64	zero
    2316:	0501                	addi	a0,a0,0
    2318:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    231c:	09040303          	lb	t1,144(s0)
    2320:	0002                	c.slli64	zero
    2322:	0501                	addi	a0,a0,0
    2324:	0402000b          	0x402000b
    2328:	00030603          	lb	a2,0(t1)
    232c:	0409                	addi	s0,s0,2
    232e:	0100                	addi	s0,sp,128
    2330:	0f05                	addi	t5,t5,1
    2332:	0200                	addi	s0,sp,256
    2334:	0304                	addi	s1,sp,384
    2336:	04090003          	lb	zero,64(s2)
    233a:	0100                	addi	s0,sp,128
    233c:	0b05                	addi	s6,s6,1
    233e:	0200                	addi	s0,sp,256
    2340:	0304                	addi	s1,sp,384
    2342:	02090003          	lb	zero,32(s2)
    2346:	0100                	addi	s0,sp,128
    2348:	1605                	addi	a2,a2,-31
    234a:	0200                	addi	s0,sp,256
    234c:	0304                	addi	s1,sp,384
    234e:	02097f03          	0x2097f03
    2352:	0100                	addi	s0,sp,128
    2354:	0b05                	addi	s6,s6,1
    2356:	0200                	addi	s0,sp,256
    2358:	0304                	addi	s1,sp,384
    235a:	02090103          	lb	sp,32(s2)
    235e:	0100                	addi	s0,sp,128
    2360:	1605                	addi	a2,a2,-31
    2362:	0200                	addi	s0,sp,256
    2364:	0304                	addi	s1,sp,384
    2366:	0306                	slli	t1,t1,0x1
    2368:	097f                	0x97f
    236a:	0002                	c.slli64	zero
    236c:	0501                	addi	a0,a0,0
    236e:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2372:	09050303          	lb	t1,144(a0)
    2376:	0002                	c.slli64	zero
    2378:	0501                	addi	a0,a0,0
    237a:	0402000b          	0x402000b
    237e:	00030603          	lb	a2,0(t1)
    2382:	0009                	c.nop	2
    2384:	0100                	addi	s0,sp,128
    2386:	1605                	addi	a2,a2,-31
    2388:	0200                	addi	s0,sp,256
    238a:	0304                	addi	s1,sp,384
    238c:	0306                	slli	t1,t1,0x1
    238e:	097f                	0x97f
    2390:	000a                	c.slli	zero,0x2
    2392:	0501                	addi	a0,a0,0
    2394:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2398:	09050303          	lb	t1,144(a0)
    239c:	0004                	0x4
    239e:	0501                	addi	a0,a0,0
    23a0:	0011                	c.nop	4
    23a2:	0402                	c.slli64	s0
    23a4:	00030603          	lb	a2,0(t1)
    23a8:	0009                	c.nop	2
    23aa:	0100                	addi	s0,sp,128
    23ac:	0c05                	addi	s8,s8,1
    23ae:	0200                	addi	s0,sp,256
    23b0:	0304                	addi	s1,sp,384
    23b2:	06090003          	lb	zero,96(s2)
    23b6:	0100                	addi	s0,sp,128
    23b8:	1605                	addi	a2,a2,-31
    23ba:	0200                	addi	s0,sp,256
    23bc:	0304                	addi	s1,sp,384
    23be:	02097f03          	0x2097f03
    23c2:	0100                	addi	s0,sp,128
    23c4:	0c05                	addi	s8,s8,1
    23c6:	0200                	addi	s0,sp,256
    23c8:	0304                	addi	s1,sp,384
    23ca:	02090103          	lb	sp,32(s2)
    23ce:	0100                	addi	s0,sp,128
    23d0:	1605                	addi	a2,a2,-31
    23d2:	0200                	addi	s0,sp,256
    23d4:	0304                	addi	s1,sp,384
    23d6:	0306                	slli	t1,t1,0x1
    23d8:	097f                	0x97f
    23da:	0002                	c.slli64	zero
    23dc:	0501                	addi	a0,a0,0
    23de:	09060303          	lb	t1,144(a2)
    23e2:	0002                	c.slli64	zero
    23e4:	0501                	addi	a0,a0,0
    23e6:	0003060f          	0x3060f
    23ea:	0009                	c.nop	2
    23ec:	0100                	addi	s0,sp,128
    23ee:	1305                	addi	t1,t1,-31
    23f0:	08090003          	lb	zero,128(s2)
    23f4:	0100                	addi	s0,sp,128
    23f6:	0505                	addi	a0,a0,1
    23f8:	04090003          	lb	zero,64(s2)
    23fc:	0100                	addi	s0,sp,128
    23fe:	1705                	addi	a4,a4,-31
    2400:	0200                	addi	s0,sp,256
    2402:	0204                	addi	s1,sp,256
    2404:	0306                	slli	t1,t1,0x1
    2406:	097f                	0x97f
    2408:	0004                	0x4
    240a:	0501                	addi	a0,a0,0
    240c:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2410:	09120303          	lb	t1,145(tp) # 91 <polymult+0x5>
    2414:	0004                	0x4
    2416:	0501                	addi	a0,a0,0
    2418:	0015                	c.nop	5
    241a:	0402                	c.slli64	s0
    241c:	00030603          	lb	a2,0(t1)
    2420:	0009                	c.nop	2
    2422:	0100                	addi	s0,sp,128
    2424:	1605                	addi	a2,a2,-31
    2426:	0200                	addi	s0,sp,256
    2428:	0304                	addi	s1,sp,384
    242a:	02097f03          	0x2097f03
    242e:	0100                	addi	s0,sp,128
    2430:	1505                	addi	a0,a0,-31
    2432:	0200                	addi	s0,sp,256
    2434:	0304                	addi	s1,sp,384
    2436:	04090103          	lb	sp,64(s2)
    243a:	0100                	addi	s0,sp,128
    243c:	1905                	addi	s2,s2,-31
    243e:	0200                	addi	s0,sp,256
    2440:	0304                	addi	s1,sp,384
    2442:	04090003          	lb	zero,64(s2)
    2446:	0100                	addi	s0,sp,128
    2448:	0b05                	addi	s6,s6,1
    244a:	0200                	addi	s0,sp,256
    244c:	0304                	addi	s1,sp,384
    244e:	04090003          	lb	zero,64(s2)
    2452:	0100                	addi	s0,sp,128
    2454:	1605                	addi	a2,a2,-31
    2456:	0200                	addi	s0,sp,256
    2458:	0304                	addi	s1,sp,384
    245a:	0306                	slli	t1,t1,0x1
    245c:	097f                	0x97f
    245e:	0004                	0x4
    2460:	0501                	addi	a0,a0,0
    2462:	0328                	addi	a0,sp,392
    2464:	0910                	addi	a2,sp,144
    2466:	0002                	c.slli64	zero
    2468:	0501                	addi	a0,a0,0
    246a:	0301                	addi	t1,t1,0
    246c:	0902                	c.slli64	s2
    246e:	0000                	unimp
    2470:	0501                	addi	a0,a0,0
    2472:	0628                	addi	a0,sp,776
    2474:	00097e03          	0x97e03
    2478:	0100                	addi	s0,sp,128
    247a:	36090003          	lb	zero,864(s2)
    247e:	0100                	addi	s0,sp,128
    2480:	0505                	addi	a0,a0,1
    2482:	04090203          	lb	tp,64(s2)
    2486:	0100                	addi	s0,sp,128
    2488:	10090103          	lb	sp,256(s2)
    248c:	0100                	addi	s0,sp,128
    248e:	0a097f03          	0xa097f03
    2492:	0100                	addi	s0,sp,128
    2494:	0105                	addi	sp,sp,1
    2496:	0306                	slli	t1,t1,0x1
    2498:	0901                	addi	s2,s2,0
    249a:	006c                	addi	a1,sp,12
    249c:	0501                	addi	a0,a0,0
    249e:	060c                	addi	a1,sp,768
    24a0:	00090703          	lb	a4,0(s2)
    24a4:	0100                	addi	s0,sp,128
    24a6:	0505                	addi	a0,a0,1
    24a8:	04097903          	0x4097903
    24ac:	0100                	addi	s0,sp,128
    24ae:	02090703          	lb	a4,32(s2)
    24b2:	0100                	addi	s0,sp,128
    24b4:	0b05                	addi	s6,s6,1
    24b6:	0e090603          	lb	a2,224(s2)
    24ba:	0100                	addi	s0,sp,128
    24bc:	0505                	addi	a0,a0,1
    24be:	0a097303          	0xa097303
    24c2:	0100                	addi	s0,sp,128
    24c4:	0105                	addi	sp,sp,1
    24c6:	0306                	slli	t1,t1,0x1
    24c8:	00640903          	lb	s2,6(s0)
    24cc:	0301                	addi	t1,t1,0
    24ce:	0901                	addi	s2,s2,0
    24d0:	0000                	unimp
    24d2:	0301                	addi	t1,t1,0
    24d4:	0901                	addi	s2,s2,0
    24d6:	0000                	unimp
    24d8:	0301                	addi	t1,t1,0
    24da:	0901                	addi	s2,s2,0
    24dc:	0000                	unimp
    24de:	0301                	addi	t1,t1,0
    24e0:	0901                	addi	s2,s2,0
    24e2:	0000                	unimp
    24e4:	0301                	addi	t1,t1,0
    24e6:	0901                	addi	s2,s2,0
    24e8:	0000                	unimp
    24ea:	0301                	addi	t1,t1,0
    24ec:	0901                	addi	s2,s2,0
    24ee:	0000                	unimp
    24f0:	0301                	addi	t1,t1,0
    24f2:	0901                	addi	s2,s2,0
    24f4:	0000                	unimp
    24f6:	0501                	addi	a0,a0,0
    24f8:	0302                	c.slli64	t1
    24fa:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    24fe:	0301                	addi	t1,t1,0
    2500:	0901                	addi	s2,s2,0
    2502:	0000                	unimp
    2504:	0501                	addi	a0,a0,0
    2506:	0003060b          	0x3060b
    250a:	0009                	c.nop	2
    250c:	0100                	addi	s0,sp,128
    250e:	0205                	addi	tp,tp,1
    2510:	0306                	slli	t1,t1,0x1
    2512:	0902                	c.slli64	s2
    2514:	0004                	0x4
    2516:	0501                	addi	a0,a0,0
    2518:	0608                	addi	a0,sp,768
    251a:	00090003          	lb	zero,0(s2)
    251e:	0100                	addi	s0,sp,128
    2520:	0d05                	addi	s10,s10,1
    2522:	0200                	addi	s0,sp,256
    2524:	0104                	addi	s1,sp,128
    2526:	0306                	slli	t1,t1,0x1
    2528:	0900                	addi	s0,sp,144
    252a:	0002                	c.slli64	zero
    252c:	0501                	addi	a0,a0,0
    252e:	0002                	c.slli64	zero
    2530:	0402                	c.slli64	s0
    2532:	0601                	addi	a2,a2,0
    2534:	00090003          	lb	zero,0(s2)
    2538:	0100                	addi	s0,sp,128
    253a:	0105                	addi	sp,sp,1
    253c:	06090503          	lb	a0,96(s2)
    2540:	0100                	addi	s0,sp,128
    2542:	0d05                	addi	s10,s10,1
    2544:	0200                	addi	s0,sp,256
    2546:	0104                	addi	s1,sp,128
    2548:	0306                	slli	t1,t1,0x1
    254a:	0900                	addi	s0,sp,144
    254c:	0004                	0x4
    254e:	0501                	addi	a0,a0,0
    2550:	0001                	nop
    2552:	0402                	c.slli64	s0
    2554:	0601                	addi	a2,a2,0
    2556:	00090003          	lb	zero,0(s2)
    255a:	0100                	addi	s0,sp,128
    255c:	0805                	addi	a6,a6,1
    255e:	04092d03          	lw	s10,64(s2)
    2562:	0100                	addi	s0,sp,128
    2564:	1205                	addi	tp,tp,-31
    2566:	02090103          	lb	sp,32(s2)
    256a:	0100                	addi	s0,sp,128
    256c:	0d05                	addi	s10,s10,1
    256e:	0200                	addi	s0,sp,256
    2570:	0104                	addi	s1,sp,128
    2572:	0306                	slli	t1,t1,0x1
    2574:	097f                	0x97f
    2576:	0008                	0x8
    2578:	0501                	addi	a0,a0,0
    257a:	0002                	c.slli64	zero
    257c:	0402                	c.slli64	s0
    257e:	0601                	addi	a2,a2,0
    2580:	00090003          	lb	zero,0(s2)
    2584:	0100                	addi	s0,sp,128
    2586:	1305                	addi	t1,t1,-31
    2588:	08090403          	lb	s0,128(s2)
    258c:	0100                	addi	s0,sp,128
    258e:	1205                	addi	tp,tp,-31
    2590:	08090103          	lb	sp,128(s2)
    2594:	0100                	addi	s0,sp,128
    2596:	0d05                	addi	s10,s10,1
    2598:	0200                	addi	s0,sp,256
    259a:	0104                	addi	s1,sp,128
    259c:	0306                	slli	t1,t1,0x1
    259e:	097f                	0x97f
    25a0:	0008                	0x8
    25a2:	0501                	addi	a0,a0,0
    25a4:	0002                	c.slli64	zero
    25a6:	0402                	c.slli64	s0
    25a8:	0601                	addi	a2,a2,0
    25aa:	00090003          	lb	zero,0(s2)
    25ae:	0100                	addi	s0,sp,128
    25b0:	0306                	slli	t1,t1,0x1
    25b2:	0904                	addi	s1,sp,144
    25b4:	0004                	0x4
    25b6:	0501                	addi	a0,a0,0
    25b8:	01030617          	auipc	a2,0x1030
    25bc:	0009                	c.nop	2
    25be:	0100                	addi	s0,sp,128
    25c0:	0705                	addi	a4,a4,1
    25c2:	06097f03          	0x6097f03
    25c6:	0100                	addi	s0,sp,128
    25c8:	0205                	addi	tp,tp,1
    25ca:	0306                	slli	t1,t1,0x1
    25cc:	0901                	addi	s2,s2,0
    25ce:	000c                	0xc
    25d0:	0501                	addi	a0,a0,0
    25d2:	0612                	slli	a2,a2,0x4
    25d4:	02090103          	lb	sp,32(s2)
    25d8:	0100                	addi	s0,sp,128
    25da:	1105                	addi	sp,sp,-31
    25dc:	0200                	addi	s0,sp,256
    25de:	0104                	addi	s1,sp,128
    25e0:	0306                	slli	t1,t1,0x1
    25e2:	097f                	0x97f
    25e4:	0008                	0x8
    25e6:	0501                	addi	a0,a0,0
    25e8:	0002                	c.slli64	zero
    25ea:	0402                	c.slli64	s0
    25ec:	0601                	addi	a2,a2,0
    25ee:	00090003          	lb	zero,0(s2)
    25f2:	0100                	addi	s0,sp,128
    25f4:	0306                	slli	t1,t1,0x1
    25f6:	0904                	addi	s1,sp,144
    25f8:	0004                	0x4
    25fa:	0501                	addi	a0,a0,0
    25fc:	00030607          	0x30607
    2600:	0009                	c.nop	2
    2602:	0100                	addi	s0,sp,128
    2604:	0205                	addi	tp,tp,1
    2606:	0306                	slli	t1,t1,0x1
    2608:	0901                	addi	s2,s2,0
    260a:	000c                	0xc
    260c:	0501                	addi	a0,a0,0
    260e:	00030617          	auipc	a2,0x30
    2612:	0609                	addi	a2,a2,2
    2614:	0100                	addi	s0,sp,128
    2616:	1205                	addi	tp,tp,-31
    2618:	02090103          	lb	sp,32(s2)
    261c:	0100                	addi	s0,sp,128
    261e:	1105                	addi	sp,sp,-31
    2620:	0200                	addi	s0,sp,256
    2622:	0104                	addi	s1,sp,128
    2624:	0306                	slli	t1,t1,0x1
    2626:	097f                	0x97f
    2628:	0008                	0x8
    262a:	0501                	addi	a0,a0,0
    262c:	0002                	c.slli64	zero
    262e:	0402                	c.slli64	s0
    2630:	0601                	addi	a2,a2,0
    2632:	00090003          	lb	zero,0(s2)
    2636:	0100                	addi	s0,sp,128
    2638:	0306                	slli	t1,t1,0x1
    263a:	090c                	addi	a1,sp,144
    263c:	0004                	0x4
    263e:	0501                	addi	a0,a0,0
    2640:	00030607          	0x30607
    2644:	0009                	c.nop	2
    2646:	0100                	addi	s0,sp,128
    2648:	0205                	addi	tp,tp,1
    264a:	0306                	slli	t1,t1,0x1
    264c:	0901                	addi	s2,s2,0
    264e:	000c                	0xc
    2650:	0501                	addi	a0,a0,0
    2652:	0608                	addi	a0,sp,768
    2654:	02090003          	lb	zero,32(s2)
    2658:	0100                	addi	s0,sp,128
    265a:	1505                	addi	a0,a0,-31
    265c:	02090003          	lb	zero,32(s2)
    2660:	0100                	addi	s0,sp,128
    2662:	0d05                	addi	s10,s10,1
    2664:	0200                	addi	s0,sp,256
    2666:	0104                	addi	s1,sp,128
    2668:	0306                	slli	t1,t1,0x1
    266a:	0900                	addi	s0,sp,144
    266c:	0004                	0x4
    266e:	0501                	addi	a0,a0,0
    2670:	0002                	c.slli64	zero
    2672:	0402                	c.slli64	s0
    2674:	0601                	addi	a2,a2,0
    2676:	00090003          	lb	zero,0(s2)
    267a:	0100                	addi	s0,sp,128
    267c:	0306                	slli	t1,t1,0x1
    267e:	0910                	addi	a2,sp,144
    2680:	0004                	0x4
    2682:	0501                	addi	a0,a0,0
    2684:	00030607          	0x30607
    2688:	0009                	c.nop	2
    268a:	0100                	addi	s0,sp,128
    268c:	0205                	addi	tp,tp,1
    268e:	0306                	slli	t1,t1,0x1
    2690:	0901                	addi	s2,s2,0
    2692:	000a                	c.slli	zero,0x2
    2694:	0501                	addi	a0,a0,0
    2696:	00030617          	auipc	a2,0x30
    269a:	0009                	c.nop	2
    269c:	0100                	addi	s0,sp,128
    269e:	1205                	addi	tp,tp,-31
    26a0:	0a090103          	lb	sp,160(s2)
    26a4:	0100                	addi	s0,sp,128
    26a6:	1105                	addi	sp,sp,-31
    26a8:	0200                	addi	s0,sp,256
    26aa:	0104                	addi	s1,sp,128
    26ac:	0306                	slli	t1,t1,0x1
    26ae:	097f                	0x97f
    26b0:	0008                	0x8
    26b2:	0501                	addi	a0,a0,0
    26b4:	0002                	c.slli64	zero
    26b6:	0402                	c.slli64	s0
    26b8:	0601                	addi	a2,a2,0
    26ba:	02090003          	lb	zero,32(s2)
    26be:	0100                	addi	s0,sp,128
    26c0:	1705                	addi	a4,a4,-31
    26c2:	04090b03          	lb	s6,64(s2)
    26c6:	0100                	addi	s0,sp,128
    26c8:	1205                	addi	tp,tp,-31
    26ca:	04090103          	lb	sp,64(s2)
    26ce:	0100                	addi	s0,sp,128
    26d0:	1705                	addi	a4,a4,-31
    26d2:	08097f03          	0x8097f03
    26d6:	0100                	addi	s0,sp,128
    26d8:	1105                	addi	sp,sp,-31
    26da:	0200                	addi	s0,sp,256
    26dc:	0104                	addi	s1,sp,128
    26de:	0306                	slli	t1,t1,0x1
    26e0:	0900                	addi	s0,sp,144
    26e2:	0008                	0x8
    26e4:	0501                	addi	a0,a0,0
    26e6:	0002                	c.slli64	zero
    26e8:	0402                	c.slli64	s0
    26ea:	0601                	addi	a2,a2,0
    26ec:	00090003          	lb	zero,0(s2)
    26f0:	0100                	addi	s0,sp,128
    26f2:	0306                	slli	t1,t1,0x1
    26f4:	0904                	addi	s1,sp,144
    26f6:	0004                	0x4
    26f8:	0301                	addi	t1,t1,0
    26fa:	0901                	addi	s2,s2,0
    26fc:	0000                	unimp
    26fe:	0501                	addi	a0,a0,0
    2700:	0601                	addi	a2,a2,0
    2702:	00090103          	lb	sp,0(s2)
    2706:	0100                	addi	s0,sp,128
    2708:	0305                	addi	t1,t1,1
    270a:	0200                	addi	s0,sp,256
    270c:	0304                	addi	s1,sp,384
    270e:	0306                	slli	t1,t1,0x1
    2710:	7f92                	flw	ft11,36(sp)
    2712:	4009                	c.li	zero,2
    2714:	0100                	addi	s0,sp,128
    2716:	0c05                	addi	s8,s8,1
    2718:	0200                	addi	s0,sp,256
    271a:	0304                	addi	s1,sp,384
    271c:	0306                	slli	t1,t1,0x1
    271e:	0900                	addi	s0,sp,144
    2720:	0000                	unimp
    2722:	0501                	addi	a0,a0,0
    2724:	0014                	0x14
    2726:	0402                	c.slli64	s0
    2728:	7f030603          	lb	a2,2032(t1)
    272c:	0a09                	addi	s4,s4,2
    272e:	0100                	addi	s0,sp,128
    2730:	0305                	addi	t1,t1,1
    2732:	0200                	addi	s0,sp,256
    2734:	0304                	addi	s1,sp,384
    2736:	04090603          	lb	a2,64(s2)
    273a:	0100                	addi	s0,sp,128
    273c:	0805                	addi	a6,a6,1
    273e:	0200                	addi	s0,sp,256
    2740:	0304                	addi	s1,sp,384
    2742:	0306                	slli	t1,t1,0x1
    2744:	0900                	addi	s0,sp,144
    2746:	0004                	0x4
    2748:	0501                	addi	a0,a0,0
    274a:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    274e:	01030603          	lb	a2,16(t1)
    2752:	0a09                	addi	s4,s4,2
    2754:	0100                	addi	s0,sp,128
    2756:	0805                	addi	a6,a6,1
    2758:	0200                	addi	s0,sp,256
    275a:	0304                	addi	s1,sp,384
    275c:	0306                	slli	t1,t1,0x1
    275e:	0900                	addi	s0,sp,144
    2760:	0000                	unimp
    2762:	0501                	addi	a0,a0,0
    2764:	0015                	c.nop	5
    2766:	0402                	c.slli64	s0
    2768:	7e030603          	lb	a2,2016(t1)
    276c:	0a09                	addi	s4,s4,2
    276e:	0100                	addi	s0,sp,128
    2770:	0305                	addi	t1,t1,1
    2772:	0200                	addi	s0,sp,256
    2774:	0304                	addi	s1,sp,384
    2776:	04092e03          	lw	t3,64(s2)
    277a:	0100                	addi	s0,sp,128
    277c:	1505                	addi	a0,a0,-31
    277e:	0200                	addi	s0,sp,256
    2780:	0304                	addi	s1,sp,384
    2782:	0306                	slli	t1,t1,0x1
    2784:	0900                	addi	s0,sp,144
    2786:	0004                	0x4
    2788:	0501                	addi	a0,a0,0
    278a:	0012                	c.slli	zero,0x4
    278c:	0402                	c.slli64	s0
    278e:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    2792:	0004                	0x4
    2794:	0501                	addi	a0,a0,0
    2796:	0015                	c.nop	5
    2798:	0402                	c.slli64	s0
    279a:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    279e:	0004                	0x4
    27a0:	0501                	addi	a0,a0,0
    27a2:	0012                	c.slli	zero,0x4
    27a4:	0402                	c.slli64	s0
    27a6:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    27aa:	0002                	c.slli64	zero
    27ac:	0501                	addi	a0,a0,0
    27ae:	0014                	0x14
    27b0:	0402                	c.slli64	s0
    27b2:	097f0303          	lb	t1,151(t5)
    27b6:	0002                	c.slli64	zero
    27b8:	0501                	addi	a0,a0,0
    27ba:	0012                	c.slli	zero,0x4
    27bc:	0402                	c.slli64	s0
    27be:	09010303          	lb	t1,144(sp)
    27c2:	0002                	c.slli64	zero
    27c4:	0501                	addi	a0,a0,0
    27c6:	0014                	0x14
    27c8:	0402                	c.slli64	s0
    27ca:	7f030603          	lb	a2,2032(t1)
    27ce:	0209                	addi	tp,tp,2
    27d0:	0100                	addi	s0,sp,128
    27d2:	0305                	addi	t1,t1,1
    27d4:	0200                	addi	s0,sp,256
    27d6:	0304                	addi	s1,sp,384
    27d8:	02090503          	lb	a0,32(s2)
    27dc:	0100                	addi	s0,sp,128
    27de:	1205                	addi	tp,tp,-31
    27e0:	0200                	addi	s0,sp,256
    27e2:	0304                	addi	s1,sp,384
    27e4:	0306                	slli	t1,t1,0x1
    27e6:	0900                	addi	s0,sp,144
    27e8:	0000                	unimp
    27ea:	0501                	addi	a0,a0,0
    27ec:	0018                	0x18
    27ee:	0402                	c.slli64	s0
    27f0:	7f030603          	lb	a2,2032(t1)
    27f4:	0a09                	addi	s4,s4,2
    27f6:	0100                	addi	s0,sp,128
    27f8:	0305                	addi	t1,t1,1
    27fa:	0200                	addi	s0,sp,256
    27fc:	0304                	addi	s1,sp,384
    27fe:	06090603          	lb	a2,96(s2)
    2802:	0100                	addi	s0,sp,128
    2804:	1605                	addi	a2,a2,-31
    2806:	0200                	addi	s0,sp,256
    2808:	0304                	addi	s1,sp,384
    280a:	0306                	slli	t1,t1,0x1
    280c:	0900                	addi	s0,sp,144
    280e:	0000                	unimp
    2810:	0501                	addi	a0,a0,0
    2812:	0012                	c.slli	zero,0x4
    2814:	0402                	c.slli64	s0
    2816:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    281a:	0002                	c.slli64	zero
    281c:	0501                	addi	a0,a0,0
    281e:	001c                	0x1c
    2820:	0402                	c.slli64	s0
    2822:	7f030603          	lb	a2,2032(t1)
    2826:	0809                	addi	a6,a6,2
    2828:	0100                	addi	s0,sp,128
    282a:	0305                	addi	t1,t1,1
    282c:	0200                	addi	s0,sp,256
    282e:	0304                	addi	s1,sp,384
    2830:	06090603          	lb	a2,96(s2)
    2834:	0100                	addi	s0,sp,128
    2836:	1605                	addi	a2,a2,-31
    2838:	0200                	addi	s0,sp,256
    283a:	0304                	addi	s1,sp,384
    283c:	0306                	slli	t1,t1,0x1
    283e:	0900                	addi	s0,sp,144
    2840:	0004                	0x4
    2842:	0501                	addi	a0,a0,0
    2844:	0012                	c.slli	zero,0x4
    2846:	0402                	c.slli64	s0
    2848:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    284c:	0008                	0x8
    284e:	0501                	addi	a0,a0,0
    2850:	001c                	0x1c
    2852:	0402                	c.slli64	s0
    2854:	097f0303          	lb	t1,151(t5)
    2858:	0002                	c.slli64	zero
    285a:	0501                	addi	a0,a0,0
    285c:	0012                	c.slli	zero,0x4
    285e:	0402                	c.slli64	s0
    2860:	09010303          	lb	t1,144(sp)
    2864:	0002                	c.slli64	zero
    2866:	0501                	addi	a0,a0,0
    2868:	001c                	0x1c
    286a:	0402                	c.slli64	s0
    286c:	7f030603          	lb	a2,2032(t1)
    2870:	0209                	addi	tp,tp,2
    2872:	0100                	addi	s0,sp,128
    2874:	0305                	addi	t1,t1,1
    2876:	0200                	addi	s0,sp,256
    2878:	0304                	addi	s1,sp,384
    287a:	02090e03          	lb	t3,32(s2)
    287e:	0100                	addi	s0,sp,128
    2880:	1005                	c.nop	-31
    2882:	0200                	addi	s0,sp,256
    2884:	0304                	addi	s1,sp,384
    2886:	0306                	slli	t1,t1,0x1
    2888:	0900                	addi	s0,sp,144
    288a:	0000                	unimp
    288c:	0501                	addi	a0,a0,0
    288e:	001a                	c.slli	zero,0x6
    2890:	0402                	c.slli64	s0
    2892:	097f0303          	lb	t1,151(t5)
    2896:	0002                	c.slli64	zero
    2898:	0501                	addi	a0,a0,0
    289a:	0010                	0x10
    289c:	0402                	c.slli64	s0
    289e:	09010303          	lb	t1,144(sp)
    28a2:	0004                	0x4
    28a4:	0501                	addi	a0,a0,0
    28a6:	0009                	c.nop	2
    28a8:	0402                	c.slli64	s0
    28aa:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    28ae:	0004                	0x4
    28b0:	0501                	addi	a0,a0,0
    28b2:	001a                	c.slli	zero,0x6
    28b4:	0402                	c.slli64	s0
    28b6:	7f030603          	lb	a2,2032(t1)
    28ba:	0409                	addi	s0,s0,2
    28bc:	0100                	addi	s0,sp,128
    28be:	0305                	addi	t1,t1,1
    28c0:	0200                	addi	s0,sp,256
    28c2:	0304                	addi	s1,sp,384
    28c4:	02091203          	lh	tp,32(s2)
    28c8:	0100                	addi	s0,sp,128
    28ca:	1605                	addi	a2,a2,-31
    28cc:	0200                	addi	s0,sp,256
    28ce:	0304                	addi	s1,sp,384
    28d0:	0306                	slli	t1,t1,0x1
    28d2:	0900                	addi	s0,sp,144
    28d4:	0000                	unimp
    28d6:	0501                	addi	a0,a0,0
    28d8:	0012                	c.slli	zero,0x4
    28da:	0402                	c.slli64	s0
    28dc:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    28e0:	0004                	0x4
    28e2:	0501                	addi	a0,a0,0
    28e4:	001c                	0x1c
    28e6:	0402                	c.slli64	s0
    28e8:	7f030603          	lb	a2,2032(t1)
    28ec:	0809                	addi	a6,a6,2
    28ee:	0100                	addi	s0,sp,128
    28f0:	0305                	addi	t1,t1,1
    28f2:	0200                	addi	s0,sp,256
    28f4:	0304                	addi	s1,sp,384
    28f6:	04090c03          	lb	s8,64(s2)
    28fa:	0100                	addi	s0,sp,128
    28fc:	1205                	addi	tp,tp,-31
    28fe:	0200                	addi	s0,sp,256
    2900:	0304                	addi	s1,sp,384
    2902:	0306                	slli	t1,t1,0x1
    2904:	0900                	addi	s0,sp,144
    2906:	0004                	0x4
    2908:	0501                	addi	a0,a0,0
    290a:	0019                	c.nop	6
    290c:	0402                	c.slli64	s0
    290e:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    2912:	0004                	0x4
    2914:	0501                	addi	a0,a0,0
    2916:	0012                	c.slli	zero,0x4
    2918:	0402                	c.slli64	s0
    291a:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    291e:	0004                	0x4
    2920:	0501                	addi	a0,a0,0
    2922:	001e                	c.slli	zero,0x7
    2924:	0402                	c.slli64	s0
    2926:	097f0303          	lb	t1,151(t5)
    292a:	0002                	c.slli64	zero
    292c:	0501                	addi	a0,a0,0
    292e:	0012                	c.slli	zero,0x4
    2930:	0402                	c.slli64	s0
    2932:	09010303          	lb	t1,144(sp)
    2936:	0002                	c.slli64	zero
    2938:	0501                	addi	a0,a0,0
    293a:	001e                	c.slli	zero,0x7
    293c:	0402                	c.slli64	s0
    293e:	7f030603          	lb	a2,2032(t1)
    2942:	0209                	addi	tp,tp,2
    2944:	0100                	addi	s0,sp,128
    2946:	4b05                	li	s6,1
    2948:	02090903          	lb	s2,32(s2)
    294c:	0100                	addi	s0,sp,128
    294e:	0105                	addi	sp,sp,1
    2950:	00090203          	lb	tp,0(s2)
    2954:	0100                	addi	s0,sp,128
    2956:	00090103          	lb	sp,0(s2)
    295a:	0100                	addi	s0,sp,128
    295c:	00090303          	lb	t1,0(s2)
    2960:	0100                	addi	s0,sp,128
    2962:	4b05                	li	s6,1
    2964:	0306                	slli	t1,t1,0x1
    2966:	097a                	slli	s2,s2,0x1e
    2968:	0000                	unimp
    296a:	0501                	addi	a0,a0,0
    296c:	0305                	addi	t1,t1,1
    296e:	0906                	slli	s2,s2,0x1
    2970:	000e                	c.slli	zero,0x3
    2972:	0501                	addi	a0,a0,0
    2974:	097a034b          	fnmsub.s	ft6,fs4,fs7,ft1,rne
    2978:	000e                	c.slli	zero,0x3
    297a:	0301                	addi	t1,t1,0
    297c:	0900                	addi	s0,sp,144
    297e:	0006                	c.slli	zero,0x1
    2980:	0501                	addi	a0,a0,0
    2982:	0305                	addi	t1,t1,1
    2984:	0906                	slli	s2,s2,0x1
    2986:	0004                	0x4
    2988:	0501                	addi	a0,a0,0
    298a:	0601                	addi	a2,a2,0
    298c:	02090103          	lb	sp,32(s2)
    2990:	0100                	addi	s0,sp,128
    2992:	00090103          	lb	sp,0(s2)
    2996:	0100                	addi	s0,sp,128
    2998:	0205                	addi	tp,tp,1
    299a:	00091403          	lh	s0,0(s2)
    299e:	0100                	addi	s0,sp,128
    29a0:	0905                	addi	s2,s2,1
    29a2:	0306                	slli	t1,t1,0x1
    29a4:	0900                	addi	s0,sp,144
    29a6:	0000                	unimp
    29a8:	0501                	addi	a0,a0,0
    29aa:	0602                	c.slli64	a2
    29ac:	12090703          	lb	a4,288(s2)
    29b0:	0100                	addi	s0,sp,128
    29b2:	0d05                	addi	s10,s10,1
    29b4:	00090003          	lb	zero,0(s2)
    29b8:	0100                	addi	s0,sp,128
    29ba:	0905                	addi	s2,s2,1
    29bc:	0306                	slli	t1,t1,0x1
    29be:	0979                	addi	s2,s2,30
    29c0:	0000                	unimp
    29c2:	0501                	addi	a0,a0,0
    29c4:	0302                	c.slli64	t1
    29c6:	00020907          	0x20907
    29ca:	0501                	addi	a0,a0,0
    29cc:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    29d0:	01030603          	lb	a2,16(t1)
    29d4:	0409                	addi	s0,s0,2
    29d6:	0100                	addi	s0,sp,128
    29d8:	1e05                	addi	t3,t3,-31
    29da:	0200                	addi	s0,sp,256
    29dc:	0304                	addi	s1,sp,384
    29de:	0306                	slli	t1,t1,0x1
    29e0:	0900                	addi	s0,sp,144
    29e2:	0004                	0x4
    29e4:	0501                	addi	a0,a0,0
    29e6:	0015                	c.nop	5
    29e8:	0402                	c.slli64	s0
    29ea:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    29ee:	0004                	0x4
    29f0:	0501                	addi	a0,a0,0
    29f2:	0402000b          	0x402000b
    29f6:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    29fa:	0008                	0x8
    29fc:	0501                	addi	a0,a0,0
    29fe:	0015                	c.nop	5
    2a00:	0402                	c.slli64	s0
    2a02:	7f030603          	lb	a2,2032(t1)
    2a06:	0209                	addi	tp,tp,2
    2a08:	0100                	addi	s0,sp,128
    2a0a:	0d05                	addi	s10,s10,1
    2a0c:	0200                	addi	s0,sp,256
    2a0e:	0304                	addi	s1,sp,384
    2a10:	00090003          	lb	zero,0(s2)
    2a14:	0100                	addi	s0,sp,128
    2a16:	0205                	addi	tp,tp,1
    2a18:	0200                	addi	s0,sp,256
    2a1a:	0304                	addi	s1,sp,384
    2a1c:	0306                	slli	t1,t1,0x1
    2a1e:	0900                	addi	s0,sp,144
    2a20:	0000                	unimp
    2a22:	0601                	addi	a2,a2,0
    2a24:	04090a03          	lb	s4,64(s2)
    2a28:	0100                	addi	s0,sp,128
    2a2a:	0705                	addi	a4,a4,1
    2a2c:	0306                	slli	t1,t1,0x1
    2a2e:	0900                	addi	s0,sp,144
    2a30:	0000                	unimp
    2a32:	0501                	addi	a0,a0,0
    2a34:	0602                	c.slli64	a2
    2a36:	12090103          	lb	sp,288(s2)
    2a3a:	0100                	addi	s0,sp,128
    2a3c:	1705                	addi	a4,a4,-31
    2a3e:	0306                	slli	t1,t1,0x1
    2a40:	0900                	addi	s0,sp,144
    2a42:	0000                	unimp
    2a44:	0501                	addi	a0,a0,0
    2a46:	0011                	c.nop	4
    2a48:	0402                	c.slli64	s0
    2a4a:	0601                	addi	a2,a2,0
    2a4c:	08090003          	lb	zero,128(s2)
    2a50:	0100                	addi	s0,sp,128
    2a52:	0205                	addi	tp,tp,1
    2a54:	0200                	addi	s0,sp,256
    2a56:	0104                	addi	s1,sp,128
    2a58:	0306                	slli	t1,t1,0x1
    2a5a:	0900                	addi	s0,sp,144
    2a5c:	0000                	unimp
    2a5e:	0501                	addi	a0,a0,0
    2a60:	0301                	addi	t1,t1,0
    2a62:	0906                	slli	s2,s2,0x1
    2a64:	0004                	0x4
    2a66:	0501                	addi	a0,a0,0
    2a68:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2a6c:	7b030603          	lb	a2,1968(t1)
    2a70:	1009                	c.nop	-30
    2a72:	0100                	addi	s0,sp,128
    2a74:	1305                	addi	t1,t1,-31
    2a76:	0200                	addi	s0,sp,256
    2a78:	0304                	addi	s1,sp,384
    2a7a:	0306                	slli	t1,t1,0x1
    2a7c:	0900                	addi	s0,sp,144
    2a7e:	0000                	unimp
    2a80:	0501                	addi	a0,a0,0
    2a82:	001c                	0x1c
    2a84:	0402                	c.slli64	s0
    2a86:	097f0303          	lb	t1,151(t5)
    2a8a:	0008                	0x8
    2a8c:	0501                	addi	a0,a0,0
    2a8e:	0402000f          	0x402000f
    2a92:	09010303          	lb	t1,144(sp)
    2a96:	0004                	0x4
    2a98:	0501                	addi	a0,a0,0
    2a9a:	001c                	0x1c
    2a9c:	0402                	c.slli64	s0
    2a9e:	7f030603          	lb	a2,2032(t1)
    2aa2:	0409                	addi	s0,s0,2
    2aa4:	0100                	addi	s0,sp,128
    2aa6:	6c05                	lui	s8,0x1
    2aa8:	02090903          	lb	s2,32(s2)
    2aac:	0100                	addi	s0,sp,128
    2aae:	0105                	addi	sp,sp,1
    2ab0:	00090203          	lb	tp,0(s2)
    2ab4:	0100                	addi	s0,sp,128
    2ab6:	00090103          	lb	sp,0(s2)
    2aba:	0100                	addi	s0,sp,128
    2abc:	00090103          	lb	sp,0(s2)
    2ac0:	0100                	addi	s0,sp,128
    2ac2:	00090103          	lb	sp,0(s2)
    2ac6:	0100                	addi	s0,sp,128
    2ac8:	00090103          	lb	sp,0(s2)
    2acc:	0100                	addi	s0,sp,128
    2ace:	00090103          	lb	sp,0(s2)
    2ad2:	0100                	addi	s0,sp,128
    2ad4:	0205                	addi	tp,tp,1
    2ad6:	00090303          	lb	t1,0(s2)
    2ada:	0100                	addi	s0,sp,128
    2adc:	6c05                	lui	s8,0x1
    2ade:	0306                	slli	t1,t1,0x1
    2ae0:	0976                	slli	s2,s2,0x1d
    2ae2:	0000                	unimp
    2ae4:	0501                	addi	a0,a0,0
    2ae6:	0913031b          	0x913031b
    2aea:	0008                	0x8
    2aec:	0501                	addi	a0,a0,0
    2aee:	036c                	addi	a1,sp,396
    2af0:	096d                	addi	s2,s2,27
    2af2:	0006                	c.slli	zero,0x1
    2af4:	0501                	addi	a0,a0,0
    2af6:	0306                	slli	t1,t1,0x1
    2af8:	090a                	slli	s2,s2,0x2
    2afa:	000a                	c.slli	zero,0x2
    2afc:	0501                	addi	a0,a0,0
    2afe:	036c                	addi	a1,sp,396
    2b00:	0976                	slli	s2,s2,0x1d
    2b02:	0004                	0x4
    2b04:	0501                	addi	a0,a0,0
    2b06:	0306                	slli	t1,t1,0x1
    2b08:	090a                	slli	s2,s2,0x2
    2b0a:	0004                	0x4
    2b0c:	0501                	addi	a0,a0,0
    2b0e:	036c                	addi	a1,sp,396
    2b10:	0976                	slli	s2,s2,0x1d
    2b12:	0004                	0x4
    2b14:	0301                	addi	t1,t1,0
    2b16:	0900                	addi	s0,sp,144
    2b18:	0008                	0x8
    2b1a:	0501                	addi	a0,a0,0
    2b1c:	09110307          	0x9110307
    2b20:	0002                	c.slli64	zero
    2b22:	0501                	addi	a0,a0,0
    2b24:	0306                	slli	t1,t1,0x1
    2b26:	0979                	addi	s2,s2,30
    2b28:	0004                	0x4
    2b2a:	0501                	addi	a0,a0,0
    2b2c:	0602                	c.slli64	a2
    2b2e:	04090703          	lb	a4,64(s2)
    2b32:	0100                	addi	s0,sp,128
    2b34:	0705                	addi	a4,a4,1
    2b36:	0306                	slli	t1,t1,0x1
    2b38:	0900                	addi	s0,sp,144
    2b3a:	0000                	unimp
    2b3c:	0501                	addi	a0,a0,0
    2b3e:	0602                	c.slli64	a2
    2b40:	12090203          	lb	tp,288(s2)
    2b44:	0100                	addi	s0,sp,128
    2b46:	0805                	addi	a6,a6,1
    2b48:	0306                	slli	t1,t1,0x1
    2b4a:	0900                	addi	s0,sp,144
    2b4c:	0004                	0x4
    2b4e:	0501                	addi	a0,a0,0
    2b50:	0011                	c.nop	4
    2b52:	0402                	c.slli64	s0
    2b54:	0601                	addi	a2,a2,0
    2b56:	02090003          	lb	zero,32(s2)
    2b5a:	0100                	addi	s0,sp,128
    2b5c:	0205                	addi	tp,tp,1
    2b5e:	0200                	addi	s0,sp,256
    2b60:	0104                	addi	s1,sp,128
    2b62:	0306                	slli	t1,t1,0x1
    2b64:	0900                	addi	s0,sp,144
    2b66:	0000                	unimp
    2b68:	0501                	addi	a0,a0,0
    2b6a:	0310                	addi	a2,sp,384
    2b6c:	090a                	slli	s2,s2,0x2
    2b6e:	0004                	0x4
    2b70:	0501                	addi	a0,a0,0
    2b72:	0309                	addi	t1,t1,2
    2b74:	097f                	0x97f
    2b76:	0006                	c.slli	zero,0x1
    2b78:	0501                	addi	a0,a0,0
    2b7a:	000e                	c.slli	zero,0x3
    2b7c:	0402                	c.slli64	s0
    2b7e:	0601                	addi	a2,a2,0
    2b80:	02090003          	lb	zero,32(s2)
    2b84:	0100                	addi	s0,sp,128
    2b86:	0205                	addi	tp,tp,1
    2b88:	0200                	addi	s0,sp,256
    2b8a:	0104                	addi	s1,sp,128
    2b8c:	0306                	slli	t1,t1,0x1
    2b8e:	0900                	addi	s0,sp,144
    2b90:	0000                	unimp
    2b92:	0601                	addi	a2,a2,0
    2b94:	04090d03          	lb	s10,64(s2)
    2b98:	0100                	addi	s0,sp,128
    2b9a:	0605                	addi	a2,a2,1
    2b9c:	0306                	slli	t1,t1,0x1
    2b9e:	0900                	addi	s0,sp,144
    2ba0:	0000                	unimp
    2ba2:	0501                	addi	a0,a0,0
    2ba4:	0602                	c.slli64	a2
    2ba6:	0c090703          	lb	a4,192(s2)
    2baa:	0100                	addi	s0,sp,128
    2bac:	0705                	addi	a4,a4,1
    2bae:	0306                	slli	t1,t1,0x1
    2bb0:	0900                	addi	s0,sp,144
    2bb2:	0000                	unimp
    2bb4:	0501                	addi	a0,a0,0
    2bb6:	0602                	c.slli64	a2
    2bb8:	0c090103          	lb	sp,192(s2)
    2bbc:	0100                	addi	s0,sp,128
    2bbe:	1105                	addi	sp,sp,-31
    2bc0:	0200                	addi	s0,sp,256
    2bc2:	0104                	addi	s1,sp,128
    2bc4:	02090003          	lb	zero,32(s2)
    2bc8:	0100                	addi	s0,sp,128
    2bca:	0205                	addi	tp,tp,1
    2bcc:	0200                	addi	s0,sp,256
    2bce:	0104                	addi	s1,sp,128
    2bd0:	0306                	slli	t1,t1,0x1
    2bd2:	0900                	addi	s0,sp,144
    2bd4:	0000                	unimp
    2bd6:	0501                	addi	a0,a0,0
    2bd8:	0301                	addi	t1,t1,0
    2bda:	0004090b          	0x4090b
    2bde:	0501                	addi	a0,a0,0
    2be0:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2be4:	58030603          	lb	a2,1408(t1)
    2be8:	1609                	addi	a2,a2,-30
    2bea:	0100                	addi	s0,sp,128
    2bec:	1305                	addi	t1,t1,-31
    2bee:	0200                	addi	s0,sp,256
    2bf0:	0304                	addi	s1,sp,384
    2bf2:	0306                	slli	t1,t1,0x1
    2bf4:	0900                	addi	s0,sp,144
    2bf6:	0000                	unimp
    2bf8:	0501                	addi	a0,a0,0
    2bfa:	0020                	addi	s0,sp,8
    2bfc:	0402                	c.slli64	s0
    2bfe:	097f0303          	lb	t1,151(t5)
    2c02:	0008                	0x8
    2c04:	0501                	addi	a0,a0,0
    2c06:	0402000f          	0x402000f
    2c0a:	09010303          	lb	t1,144(sp)
    2c0e:	0004                	0x4
    2c10:	0501                	addi	a0,a0,0
    2c12:	0020                	addi	s0,sp,8
    2c14:	0402                	c.slli64	s0
    2c16:	7f030603          	lb	a2,2032(t1)
    2c1a:	0409                	addi	s0,s0,2
    2c1c:	0100                	addi	s0,sp,128
    2c1e:	0305                	addi	t1,t1,1
    2c20:	02090a03          	lb	s4,32(s2)
    2c24:	0100                	addi	s0,sp,128
    2c26:	0805                	addi	a6,a6,1
    2c28:	0306                	slli	t1,t1,0x1
    2c2a:	0900                	addi	s0,sp,144
    2c2c:	0000                	unimp
    2c2e:	0501                	addi	a0,a0,0
    2c30:	0305                	addi	t1,t1,1
    2c32:	0900                	addi	s0,sp,144
    2c34:	0002                	c.slli64	zero
    2c36:	0501                	addi	a0,a0,0
    2c38:	0604                	addi	s1,sp,768
    2c3a:	04090303          	lb	t1,64(s2)
    2c3e:	0100                	addi	s0,sp,128
    2c40:	1005                	c.nop	-31
    2c42:	0306                	slli	t1,t1,0x1
    2c44:	0900                	addi	s0,sp,144
    2c46:	0000                	unimp
    2c48:	0501                	addi	a0,a0,0
    2c4a:	030a                	slli	t1,t1,0x2
    2c4c:	0900                	addi	s0,sp,144
    2c4e:	0004                	0x4
    2c50:	0501                	addi	a0,a0,0
    2c52:	0015                	c.nop	5
    2c54:	0402                	c.slli64	s0
    2c56:	0602                	c.slli64	a2
    2c58:	02097c03          	0x2097c03
    2c5c:	0100                	addi	s0,sp,128
    2c5e:	0305                	addi	t1,t1,1
    2c60:	0200                	addi	s0,sp,256
    2c62:	0304                	addi	s1,sp,384
    2c64:	06091603          	lh	a2,96(s2)
    2c68:	0100                	addi	s0,sp,128
    2c6a:	1305                	addi	t1,t1,-31
    2c6c:	0200                	addi	s0,sp,256
    2c6e:	0304                	addi	s1,sp,384
    2c70:	0306                	slli	t1,t1,0x1
    2c72:	0900                	addi	s0,sp,144
    2c74:	0000                	unimp
    2c76:	0501                	addi	a0,a0,0
    2c78:	0020                	addi	s0,sp,8
    2c7a:	0402                	c.slli64	s0
    2c7c:	097f0303          	lb	t1,151(t5)
    2c80:	0008                	0x8
    2c82:	0501                	addi	a0,a0,0
    2c84:	0402000f          	0x402000f
    2c88:	09010303          	lb	t1,144(sp)
    2c8c:	0004                	0x4
    2c8e:	0501                	addi	a0,a0,0
    2c90:	0020                	addi	s0,sp,8
    2c92:	0402                	c.slli64	s0
    2c94:	7f030603          	lb	a2,2032(t1)
    2c98:	0409                	addi	s0,s0,2
    2c9a:	0100                	addi	s0,sp,128
    2c9c:	0209                	addi	tp,tp,2
    2c9e:	0000                	unimp
    2ca0:	0101                	addi	sp,sp,0
    2ca2:	0b05                	addi	s6,s6,1
    2ca4:	0500                	addi	s0,sp,640
    2ca6:	e602                	fsw	ft0,12(sp)
    2ca8:	0010                	0x10
    2caa:	0300                	addi	s0,sp,384
    2cac:	069e                	slli	a3,a3,0x7
    2cae:	0501                	addi	a0,a0,0
    2cb0:	0301                	addi	t1,t1,0
    2cb2:	0902                	c.slli64	s2
    2cb4:	0000                	unimp
    2cb6:	0301                	addi	t1,t1,0
    2cb8:	0901                	addi	s2,s2,0
    2cba:	0000                	unimp
    2cbc:	0301                	addi	t1,t1,0
    2cbe:	0901                	addi	s2,s2,0
    2cc0:	0000                	unimp
    2cc2:	0301                	addi	t1,t1,0
    2cc4:	0901                	addi	s2,s2,0
    2cc6:	0000                	unimp
    2cc8:	0301                	addi	t1,t1,0
    2cca:	0901                	addi	s2,s2,0
    2ccc:	0000                	unimp
    2cce:	0301                	addi	t1,t1,0
    2cd0:	0901                	addi	s2,s2,0
    2cd2:	0000                	unimp
    2cd4:	0301                	addi	t1,t1,0
    2cd6:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    2cda:	0501                	addi	a0,a0,0
    2cdc:	7603060b          	0x7603060b
    2ce0:	0009                	c.nop	2
    2ce2:	0100                	addi	s0,sp,128
    2ce4:	0505                	addi	a0,a0,1
    2ce6:	04090a03          	lb	s4,64(s2)
    2cea:	0100                	addi	s0,sp,128
    2cec:	0b05                	addi	s6,s6,1
    2cee:	0e097603          	0xe097603
    2cf2:	0100                	addi	s0,sp,128
    2cf4:	0505                	addi	a0,a0,1
    2cf6:	08090a03          	lb	s4,128(s2)
    2cfa:	0100                	addi	s0,sp,128
    2cfc:	0105                	addi	sp,sp,1
    2cfe:	0306                	slli	t1,t1,0x1
    2d00:	0901                	addi	s2,s2,0
    2d02:	0002                	c.slli64	zero
    2d04:	0301                	addi	t1,t1,0
    2d06:	0901                	addi	s2,s2,0
    2d08:	0000                	unimp
    2d0a:	0301                	addi	t1,t1,0
    2d0c:	0901                	addi	s2,s2,0
    2d0e:	0000                	unimp
    2d10:	0301                	addi	t1,t1,0
    2d12:	0901                	addi	s2,s2,0
    2d14:	0000                	unimp
    2d16:	0301                	addi	t1,t1,0
    2d18:	0901                	addi	s2,s2,0
    2d1a:	0000                	unimp
    2d1c:	0301                	addi	t1,t1,0
    2d1e:	0901                	addi	s2,s2,0
    2d20:	0000                	unimp
    2d22:	0301                	addi	t1,t1,0
    2d24:	0901                	addi	s2,s2,0
    2d26:	0000                	unimp
    2d28:	0501                	addi	a0,a0,0
    2d2a:	0302                	c.slli64	t1
    2d2c:	0909                	addi	s2,s2,2
    2d2e:	0000                	unimp
    2d30:	0501                	addi	a0,a0,0
    2d32:	0609                	addi	a2,a2,2
    2d34:	00090003          	lb	zero,0(s2)
    2d38:	0100                	addi	s0,sp,128
    2d3a:	0205                	addi	tp,tp,1
    2d3c:	0306                	slli	t1,t1,0x1
    2d3e:	0902                	c.slli64	s2
    2d40:	000c                	0xc
    2d42:	0501                	addi	a0,a0,0
    2d44:	030d                	addi	t1,t1,3
    2d46:	0900                	addi	s0,sp,144
    2d48:	0000                	unimp
    2d4a:	0501                	addi	a0,a0,0
    2d4c:	0609                	addi	a2,a2,2
    2d4e:	00097e03          	0x97e03
    2d52:	0100                	addi	s0,sp,128
    2d54:	0205                	addi	tp,tp,1
    2d56:	02090203          	lb	tp,32(s2)
    2d5a:	0100                	addi	s0,sp,128
    2d5c:	0305                	addi	t1,t1,1
    2d5e:	0200                	addi	s0,sp,256
    2d60:	0304                	addi	s1,sp,384
    2d62:	0306                	slli	t1,t1,0x1
    2d64:	0902                	c.slli64	s2
    2d66:	0004                	0x4
    2d68:	0501                	addi	a0,a0,0
    2d6a:	0019                	c.nop	6
    2d6c:	0402                	c.slli64	s0
    2d6e:	00030603          	lb	a2,0(t1)
    2d72:	0009                	c.nop	2
    2d74:	0100                	addi	s0,sp,128
    2d76:	1305                	addi	t1,t1,-31
    2d78:	0200                	addi	s0,sp,256
    2d7a:	0304                	addi	s1,sp,384
    2d7c:	06090003          	lb	zero,96(s2)
    2d80:	0100                	addi	s0,sp,128
    2d82:	1405                	addi	s0,s0,-31
    2d84:	0200                	addi	s0,sp,256
    2d86:	0304                	addi	s1,sp,384
    2d88:	0306                	slli	t1,t1,0x1
    2d8a:	097e                	slli	s2,s2,0x1f
    2d8c:	0006                	c.slli	zero,0x1
    2d8e:	0501                	addi	a0,a0,0
    2d90:	000d                	c.nop	3
    2d92:	0402                	c.slli64	s0
    2d94:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    2d98:	0000                	unimp
    2d9a:	0501                	addi	a0,a0,0
    2d9c:	0002                	c.slli64	zero
    2d9e:	0402                	c.slli64	s0
    2da0:	00030603          	lb	a2,0(t1)
    2da4:	0209                	addi	tp,tp,2
    2da6:	0100                	addi	s0,sp,128
    2da8:	0305                	addi	t1,t1,1
    2daa:	0200                	addi	s0,sp,256
    2dac:	0304                	addi	s1,sp,384
    2dae:	0306                	slli	t1,t1,0x1
    2db0:	0909                	addi	s2,s2,2
    2db2:	0004                	0x4
    2db4:	0501                	addi	a0,a0,0
    2db6:	0018                	0x18
    2db8:	0402                	c.slli64	s0
    2dba:	097e0303          	lb	t1,151(t3)
    2dbe:	0000                	unimp
    2dc0:	0501                	addi	a0,a0,0
    2dc2:	000d                	c.nop	3
    2dc4:	0402                	c.slli64	s0
    2dc6:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    2dca:	0000                	unimp
    2dcc:	0501                	addi	a0,a0,0
    2dce:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2dd2:	09090303          	lb	t1,144(s2)
    2dd6:	000c                	0xc
    2dd8:	0501                	addi	a0,a0,0
    2dda:	0020                	addi	s0,sp,8
    2ddc:	0402                	c.slli64	s0
    2dde:	00030603          	lb	a2,0(t1)
    2de2:	0009                	c.nop	2
    2de4:	0100                	addi	s0,sp,128
    2de6:	1a05                	addi	s4,s4,-31
    2de8:	0200                	addi	s0,sp,256
    2dea:	0304                	addi	s1,sp,384
    2dec:	06090003          	lb	zero,96(s2)
    2df0:	0100                	addi	s0,sp,128
    2df2:	1c05                	addi	s8,s8,-31
    2df4:	0200                	addi	s0,sp,256
    2df6:	0304                	addi	s1,sp,384
    2df8:	0306                	slli	t1,t1,0x1
    2dfa:	097e                	slli	s2,s2,0x1f
    2dfc:	0004                	0x4
    2dfe:	0501                	addi	a0,a0,0
    2e00:	0011                	c.nop	4
    2e02:	0402                	c.slli64	s0
    2e04:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    2e08:	0000                	unimp
    2e0a:	0501                	addi	a0,a0,0
    2e0c:	0002                	c.slli64	zero
    2e0e:	0402                	c.slli64	s0
    2e10:	00030603          	lb	a2,0(t1)
    2e14:	0009                	c.nop	2
    2e16:	0100                	addi	s0,sp,128
    2e18:	0305                	addi	t1,t1,1
    2e1a:	0200                	addi	s0,sp,256
    2e1c:	0304                	addi	s1,sp,384
    2e1e:	0306                	slli	t1,t1,0x1
    2e20:	0909                	addi	s2,s2,2
    2e22:	0004                	0x4
    2e24:	0501                	addi	a0,a0,0
    2e26:	001c                	0x1c
    2e28:	0402                	c.slli64	s0
    2e2a:	097e0303          	lb	t1,151(t3)
    2e2e:	0000                	unimp
    2e30:	0501                	addi	a0,a0,0
    2e32:	0011                	c.nop	4
    2e34:	0402                	c.slli64	s0
    2e36:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    2e3a:	0000                	unimp
    2e3c:	0501                	addi	a0,a0,0
    2e3e:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2e42:	09090303          	lb	t1,144(s2)
    2e46:	000c                	0xc
    2e48:	0501                	addi	a0,a0,0
    2e4a:	001d                	c.nop	7
    2e4c:	0402                	c.slli64	s0
    2e4e:	00030603          	lb	a2,0(t1)
    2e52:	0009                	c.nop	2
    2e54:	0100                	addi	s0,sp,128
    2e56:	1705                	addi	a4,a4,-31
    2e58:	0200                	addi	s0,sp,256
    2e5a:	0304                	addi	s1,sp,384
    2e5c:	06090003          	lb	zero,96(s2)
    2e60:	0100                	addi	s0,sp,128
    2e62:	1c05                	addi	s8,s8,-31
    2e64:	0200                	addi	s0,sp,256
    2e66:	0304                	addi	s1,sp,384
    2e68:	0306                	slli	t1,t1,0x1
    2e6a:	097e                	slli	s2,s2,0x1f
    2e6c:	0004                	0x4
    2e6e:	0501                	addi	a0,a0,0
    2e70:	0011                	c.nop	4
    2e72:	0402                	c.slli64	s0
    2e74:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    2e78:	0000                	unimp
    2e7a:	0501                	addi	a0,a0,0
    2e7c:	0002                	c.slli64	zero
    2e7e:	0402                	c.slli64	s0
    2e80:	00030603          	lb	a2,0(t1)
    2e84:	0009                	c.nop	2
    2e86:	0100                	addi	s0,sp,128
    2e88:	0305                	addi	t1,t1,1
    2e8a:	0200                	addi	s0,sp,256
    2e8c:	0304                	addi	s1,sp,384
    2e8e:	0306                	slli	t1,t1,0x1
    2e90:	0909                	addi	s2,s2,2
    2e92:	000c                	0xc
    2e94:	0501                	addi	a0,a0,0
    2e96:	001c                	0x1c
    2e98:	0402                	c.slli64	s0
    2e9a:	00030603          	lb	a2,0(t1)
    2e9e:	0009                	c.nop	2
    2ea0:	0100                	addi	s0,sp,128
    2ea2:	1605                	addi	a2,a2,-31
    2ea4:	0200                	addi	s0,sp,256
    2ea6:	0304                	addi	s1,sp,384
    2ea8:	06090003          	lb	zero,96(s2)
    2eac:	0100                	addi	s0,sp,128
    2eae:	1e05                	addi	t3,t3,-31
    2eb0:	0200                	addi	s0,sp,256
    2eb2:	0304                	addi	s1,sp,384
    2eb4:	0306                	slli	t1,t1,0x1
    2eb6:	097e                	slli	s2,s2,0x1f
    2eb8:	0004                	0x4
    2eba:	0501                	addi	a0,a0,0
    2ebc:	0011                	c.nop	4
    2ebe:	0402                	c.slli64	s0
    2ec0:	09000303          	lb	t1,144(zero) # 90 <polymult+0x4>
    2ec4:	0000                	unimp
    2ec6:	0501                	addi	a0,a0,0
    2ec8:	0002                	c.slli64	zero
    2eca:	0402                	c.slli64	s0
    2ecc:	00030603          	lb	a2,0(t1)
    2ed0:	0009                	c.nop	2
    2ed2:	0100                	addi	s0,sp,128
    2ed4:	0306                	slli	t1,t1,0x1
    2ed6:	0908                	addi	a0,sp,144
    2ed8:	0004                	0x4
    2eda:	0501                	addi	a0,a0,0
    2edc:	0610                	addi	a2,sp,768
    2ede:	00090003          	lb	zero,0(s2)
    2ee2:	0100                	addi	s0,sp,128
    2ee4:	0205                	addi	tp,tp,1
    2ee6:	0306                	slli	t1,t1,0x1
    2ee8:	0909                	addi	s2,s2,2
    2eea:	0010                	0x10
    2eec:	0501                	addi	a0,a0,0
    2eee:	0610                	addi	a2,sp,768
    2ef0:	00090003          	lb	zero,0(s2)
    2ef4:	0100                	addi	s0,sp,128
    2ef6:	0205                	addi	tp,tp,1
    2ef8:	0306                	slli	t1,t1,0x1
    2efa:	0912                	slli	s2,s2,0x4
    2efc:	0014                	0x14
    2efe:	0501                	addi	a0,a0,0
    2f00:	030d                	addi	t1,t1,3
    2f02:	0900                	addi	s0,sp,144
    2f04:	0000                	unimp
    2f06:	0501                	addi	a0,a0,0
    2f08:	0610                	addi	a2,sp,768
    2f0a:	00096e03          	0x96e03
    2f0e:	0100                	addi	s0,sp,128
    2f10:	0e05                	addi	t3,t3,1
    2f12:	02091903          	lh	s2,32(s2)
    2f16:	0100                	addi	s0,sp,128
    2f18:	0205                	addi	tp,tp,1
    2f1a:	0a097903          	0xa097903
    2f1e:	0100                	addi	s0,sp,128
    2f20:	0305                	addi	t1,t1,1
    2f22:	0306                	slli	t1,t1,0x1
    2f24:	0901                	addi	s2,s2,0
    2f26:	0004                	0x4
    2f28:	0501                	addi	a0,a0,0
    2f2a:	0605                	addi	a2,a2,1
    2f2c:	00090003          	lb	zero,0(s2)
    2f30:	0100                	addi	s0,sp,128
    2f32:	2105                	jal	3352 <_bss_end+0x1256>
    2f34:	02090003          	lb	zero,32(s2)
    2f38:	0100                	addi	s0,sp,128
    2f3a:	0505                	addi	a0,a0,1
    2f3c:	04090003          	lb	zero,64(s2)
    2f40:	0100                	addi	s0,sp,128
    2f42:	0405                	addi	s0,s0,1
    2f44:	0306                	slli	t1,t1,0x1
    2f46:	0902                	c.slli64	s2
    2f48:	000a                	c.slli	zero,0x2
    2f4a:	0501                	addi	a0,a0,0
    2f4c:	060e                	slli	a2,a2,0x3
    2f4e:	00090003          	lb	zero,0(s2)
    2f52:	0100                	addi	s0,sp,128
    2f54:	0405                	addi	s0,s0,1
    2f56:	0306                	slli	t1,t1,0x1
    2f58:	0901                	addi	s2,s2,0
    2f5a:	0008                	0x8
    2f5c:	0501                	addi	a0,a0,0
    2f5e:	0305                	addi	t1,t1,1
    2f60:	090a                	slli	s2,s2,0x2
    2f62:	0000                	unimp
    2f64:	0501                	addi	a0,a0,0
    2f66:	0601                	addi	a2,a2,0
    2f68:	00090103          	lb	sp,0(s2)
    2f6c:	0100                	addi	s0,sp,128
    2f6e:	0405                	addi	s0,s0,1
    2f70:	0200                	addi	s0,sp,256
    2f72:	0204                	addi	s1,sp,256
    2f74:	0306                	slli	t1,t1,0x1
    2f76:	0978                	addi	a4,sp,156
    2f78:	0010                	0x10
    2f7a:	0501                	addi	a0,a0,0
    2f7c:	000e                	c.slli	zero,0x3
    2f7e:	0402                	c.slli64	s0
    2f80:	0602                	c.slli64	a2
    2f82:	00090003          	lb	zero,0(s2)
    2f86:	0100                	addi	s0,sp,128
    2f88:	1505                	addi	a0,a0,-31
    2f8a:	0200                	addi	s0,sp,256
    2f8c:	0204                	addi	s1,sp,256
    2f8e:	0306                	slli	t1,t1,0x1
    2f90:	0979                	addi	s2,s2,30
    2f92:	0004                	0x4
    2f94:	0501                	addi	a0,a0,0
    2f96:	000d                	c.nop	3
    2f98:	0402                	c.slli64	s0
    2f9a:	0302                	c.slli64	t1
    2f9c:	0900                	addi	s0,sp,144
    2f9e:	0000                	unimp
    2fa0:	0501                	addi	a0,a0,0
    2fa2:	0002                	c.slli64	zero
    2fa4:	0402                	c.slli64	s0
    2fa6:	0602                	c.slli64	a2
    2fa8:	02090003          	lb	zero,32(s2)
    2fac:	0100                	addi	s0,sp,128
    2fae:	0609                	addi	a2,a2,2
    2fb0:	0000                	unimp
    2fb2:	0101                	addi	sp,sp,0
    2fb4:	0150                	addi	a2,sp,132
    2fb6:	0000                	unimp
    2fb8:	001d0003          	lb	zero,1(s10)
    2fbc:	0000                	unimp
    2fbe:	0101                	addi	sp,sp,0
    2fc0:	000d0efb          	0xd0efb
    2fc4:	0101                	addi	sp,sp,0
    2fc6:	0101                	addi	sp,sp,0
    2fc8:	0000                	unimp
    2fca:	0100                	addi	s0,sp,128
    2fcc:	0000                	unimp
    2fce:	0001                	nop
    2fd0:	30747263          	bgeu	s0,t2,32d4 <_bss_end+0x11d8>
    2fd4:	532e                	lw	t1,232(sp)
    2fd6:	0000                	unimp
    2fd8:	0000                	unimp
    2fda:	0000                	unimp
    2fdc:	0205                	addi	tp,tp,1
    2fde:	0eea                	slli	t4,t4,0x1a
    2fe0:	0000                	unimp
    2fe2:	0315                	addi	t1,t1,5
    2fe4:	0904                	addi	s1,sp,144
    2fe6:	0004                	0x4
    2fe8:	0301                	addi	t1,t1,0
    2fea:	0901                	addi	s2,s2,0
    2fec:	0004                	0x4
    2fee:	0301                	addi	t1,t1,0
    2ff0:	0901                	addi	s2,s2,0
    2ff2:	0002                	c.slli64	zero
    2ff4:	0301                	addi	t1,t1,0
    2ff6:	0901                	addi	s2,s2,0
    2ff8:	0002                	c.slli64	zero
    2ffa:	0301                	addi	t1,t1,0
    2ffc:	0901                	addi	s2,s2,0
    2ffe:	0002                	c.slli64	zero
    3000:	0301                	addi	t1,t1,0
    3002:	0901                	addi	s2,s2,0
    3004:	0002                	c.slli64	zero
    3006:	0301                	addi	t1,t1,0
    3008:	0901                	addi	s2,s2,0
    300a:	0002                	c.slli64	zero
    300c:	0301                	addi	t1,t1,0
    300e:	0901                	addi	s2,s2,0
    3010:	0002                	c.slli64	zero
    3012:	0301                	addi	t1,t1,0
    3014:	0901                	addi	s2,s2,0
    3016:	0002                	c.slli64	zero
    3018:	0301                	addi	t1,t1,0
    301a:	0901                	addi	s2,s2,0
    301c:	0002                	c.slli64	zero
    301e:	0301                	addi	t1,t1,0
    3020:	0901                	addi	s2,s2,0
    3022:	0002                	c.slli64	zero
    3024:	0301                	addi	t1,t1,0
    3026:	0901                	addi	s2,s2,0
    3028:	0002                	c.slli64	zero
    302a:	0301                	addi	t1,t1,0
    302c:	0901                	addi	s2,s2,0
    302e:	0002                	c.slli64	zero
    3030:	0301                	addi	t1,t1,0
    3032:	0901                	addi	s2,s2,0
    3034:	0002                	c.slli64	zero
    3036:	0301                	addi	t1,t1,0
    3038:	0901                	addi	s2,s2,0
    303a:	0002                	c.slli64	zero
    303c:	0301                	addi	t1,t1,0
    303e:	0901                	addi	s2,s2,0
    3040:	0002                	c.slli64	zero
    3042:	0301                	addi	t1,t1,0
    3044:	0901                	addi	s2,s2,0
    3046:	0002                	c.slli64	zero
    3048:	0301                	addi	t1,t1,0
    304a:	0901                	addi	s2,s2,0
    304c:	0002                	c.slli64	zero
    304e:	0301                	addi	t1,t1,0
    3050:	0901                	addi	s2,s2,0
    3052:	0002                	c.slli64	zero
    3054:	0301                	addi	t1,t1,0
    3056:	0901                	addi	s2,s2,0
    3058:	0002                	c.slli64	zero
    305a:	0301                	addi	t1,t1,0
    305c:	0901                	addi	s2,s2,0
    305e:	0002                	c.slli64	zero
    3060:	0301                	addi	t1,t1,0
    3062:	0901                	addi	s2,s2,0
    3064:	0002                	c.slli64	zero
    3066:	0301                	addi	t1,t1,0
    3068:	0901                	addi	s2,s2,0
    306a:	0002                	c.slli64	zero
    306c:	0301                	addi	t1,t1,0
    306e:	0901                	addi	s2,s2,0
    3070:	0002                	c.slli64	zero
    3072:	0301                	addi	t1,t1,0
    3074:	0901                	addi	s2,s2,0
    3076:	0002                	c.slli64	zero
    3078:	0301                	addi	t1,t1,0
    307a:	0901                	addi	s2,s2,0
    307c:	0002                	c.slli64	zero
    307e:	0301                	addi	t1,t1,0
    3080:	0901                	addi	s2,s2,0
    3082:	0002                	c.slli64	zero
    3084:	0301                	addi	t1,t1,0
    3086:	0901                	addi	s2,s2,0
    3088:	0002                	c.slli64	zero
    308a:	0301                	addi	t1,t1,0
    308c:	0901                	addi	s2,s2,0
    308e:	0002                	c.slli64	zero
    3090:	0301                	addi	t1,t1,0
    3092:	0901                	addi	s2,s2,0
    3094:	0002                	c.slli64	zero
    3096:	0301                	addi	t1,t1,0
    3098:	0901                	addi	s2,s2,0
    309a:	0002                	c.slli64	zero
    309c:	0301                	addi	t1,t1,0
    309e:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    30a2:	0301                	addi	t1,t1,0
    30a4:	0906                	slli	s2,s2,0x1
    30a6:	0008                	0x8
    30a8:	0301                	addi	t1,t1,0
    30aa:	0901                	addi	s2,s2,0
    30ac:	0008                	0x8
    30ae:	0301                	addi	t1,t1,0
    30b0:	0902                	c.slli64	s2
    30b2:	0008                	0x8
    30b4:	0301                	addi	t1,t1,0
    30b6:	00040903          	lb	s2,0(s0)
    30ba:	0301                	addi	t1,t1,0
    30bc:	0901                	addi	s2,s2,0
    30be:	0004                	0x4
    30c0:	0301                	addi	t1,t1,0
    30c2:	0901                	addi	s2,s2,0
    30c4:	0002                	c.slli64	zero
    30c6:	0301                	addi	t1,t1,0
    30c8:	0906                	slli	s2,s2,0x1
    30ca:	0004                	0x4
    30cc:	0301                	addi	t1,t1,0
    30ce:	0901                	addi	s2,s2,0
    30d0:	0004                	0x4
    30d2:	0301                	addi	t1,t1,0
    30d4:	0901                	addi	s2,s2,0
    30d6:	0004                	0x4
    30d8:	0901                	addi	s2,s2,0
    30da:	0004                	0x4
    30dc:	0100                	addi	s0,sp,128
    30de:	0001                	nop
    30e0:	0205                	addi	tp,tp,1
    30e2:	0000                	unimp
    30e4:	0000                	unimp
    30e6:	0100cb03          	lbu	s6,16(ra) # 9b0 <ext_euclid+0x2be>
    30ea:	7c090103          	lb	sp,1984(s2)
    30ee:	0100                	addi	s0,sp,128
    30f0:	04090403          	lb	s0,64(s2)
    30f4:	0100                	addi	s0,sp,128
    30f6:	04090403          	lb	s0,64(s2)
    30fa:	0100                	addi	s0,sp,128
    30fc:	04090403          	lb	s0,64(s2)
    3100:	0100                	addi	s0,sp,128
    3102:	0409                	addi	s0,s0,2
    3104:	0000                	unimp
    3106:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	775f 7263 6f74      	0x6f747263775f
  40:	626d                	lui	tp,0x1b
  42:	735f 6174 6574      	0x65746174735f
  48:	5f00                	lw	s0,56(a4)
  4a:	72736377          	0x72736377
  4e:	6f74                	flw	fa3,92(a4)
  50:	626d                	lui	tp,0x1b
  52:	74735f73          	csrrwi	t5,0x747,6
  56:	7461                	lui	s0,0xffff8
  58:	0065                	c.nop	25
  5a:	5f5f 7562 6c69      	0x6c6975625f5f
  60:	6974                	flw	fa3,84(a0)
  62:	5f6e                	lw	t5,248(sp)
  64:	656d                	lui	a0,0x1b
  66:	736d                	lui	t1,0xffffb
  68:	7465                	lui	s0,0xffff9
  6a:	6c00                	flw	fs0,24(s0)
  6c:	20676e6f          	jal	t3,76272 <_stack_start+0x66272>
  70:	6f6c                	flw	fa1,92(a4)
  72:	676e                	flw	fa4,216(sp)
  74:	7520                	flw	fs0,104(a0)
  76:	736e                	flw	ft6,248(sp)
  78:	6769                	lui	a4,0x1a
  7a:	656e                	flw	fa0,216(sp)
  jal x0, default_exc_handler
  7c:	2064                	fld	fs1,192(s0)
  7e:	6e69                	lui	t3,0x1a
  jal x0, reset_handler
  80:	0074                	addi	a3,sp,12
  82:	6544                	flw	fs1,12(a0)
  jal x0, default_exc_handler
  84:	654d5f63          	bge	s10,s4,6e2 <polydiv+0x2be>
  jal x0, default_exc_handler
  88:	67617373          	csrrci	t1,0x676,2
int line[size_b][size_a + size_b];
  8c:	0065                	c.nop	25
  8e:	6c5f 6662 6973      	0x697366626c5f
  94:	657a                	flw	fa0,156(sp)
  96:	7200                	flw	fs0,32(a2)
  98:	6e61                	lui	t3,0x18
  9a:	6f64                	flw	fs1,92(a4)
  9c:	5f6d                	li	t5,-5
  9e:	7379656b          	0x7379656b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  a2:	5f00                	lw	s0,56(a4)
  a4:	6c5f 636f 6c61      	0x6c61636f6c5f
  aa:	5f65                	li	t5,-7
  ac:	0074                	addi	a3,sp,12
  ae:	72636573          	csrrsi	a0,0x726,6
int line[size_b][size_a + size_b];
  b2:	7465                	lui	s0,0xffff9
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  b4:	6b5f 7965 665f      	0x665f79656b5f
int line[size_b][size_a + size_b];
  ba:	7300                	flw	fs0,32(a4)
  bc:	6365                	lui	t1,0x19
int pola[size_a];
  be:	6572                	flw	fa0,28(sp)
  c0:	5f74                	lw	a3,124(a4)
  c2:	5f79656b          	0x5f79656b
  c6:	6d5f0067          	jr	1749(t5)
  ca:	7262                	flw	ft4,56(sp)
  cc:	6f74                	flw	fa3,92(a4)
int polb[size_b];
  ce:	735f6377          	0x735f6377
  d2:	6174                	flw	fa3,68(a0)
  d4:	6574                	flw	fa3,76(a0)
int pola[size_a];
  d6:	5f00                	lw	s0,56(a4)
int polb[size_b];
  d8:	6f746377          	0x6f746377
int line[size_b][size_a + size_b];
  dc:	626d                	lui	tp,0x1b
  de:	735f 6174 6574      	0x65746174735f
int polb[size_b];
  e4:	5f00                	lw	s0,56(a4)
			line[i][j] = 0;
  e6:	745f 5f6d 6573      	0x65735f6d745f
	for (i = 0; i < size_b; ++i){
  ec:	6f6c0063          	beq	s8,s6,7cc <ext_euclid+0xda>
			product[j] = 0;		
  f0:	676e                	flw	fa4,216(sp)
  f2:	6c20                	flw	fs0,88(s0)
  f4:	20676e6f          	jal	t3,762fa <_stack_start+0x662fa>
	for (i = 0; i < size_b; ++i){
  f8:	6e69                	lui	t3,0x1a
  fa:	0074                	addi	a3,sp,12
	for(i = 0; i < size_a; ++i){
  fc:	657a6973          	csrrsi	s2,0x657,20
 100:	4e5f 7000 6c6f      	0x6c6f70004e5f
	for(i = 0; i < size_b; ++i){
 106:	6d79                	lui	s10,0x1e
 108:	6c75                	lui	s8,0x1d
 10a:	0074                	addi	a3,sp,12
	for (i = 0; i < size_a; ++i){
 10c:	755f 7562 0066      	0x667562755f
	for (i = 0; i < size_a; ++i){
 112:	625f 7361 0065      	0x657361625f
 118:	5f5f 6d74 685f      	0x685f6d745f5f
	for (i = 0; i < size_b; ++i){
 11e:	0072756f          	jal	a0,27924 <_stack_start+0x17924>
	for(i = 0; i < size_b; ++i){
 122:	5f5f 6673 5f00      	0x5f0066735f5f
	if(star_mult == 1){
 128:	655f6e6f          	jal	t3,f6f7c <_stack_start+0xe6f7c>
 12c:	6978                	flw	fa4,84(a0)
 12e:	5f74                	lw	a3,124(a4)
 130:	7261                	lui	tp,0xffff8
 132:	5f007367          	0x5f007367
 136:	6b6f6f63          	bltu	t5,s6,7f4 <ext_euclid+0x102>
		for (j = size_b -1; j >= 0; j = j-1){
 13a:	6569                	lui	a0,0x1a
			for (k = size_a-1; k >= 0; k = k-1 ){
 13c:	5f00                	lw	s0,56(a4)
 13e:	735f 6c67 6575      	0x65756c67735f
			product[j] = 0;		
 144:	7400                	flw	fs0,40(s0)
			line[i][j] = 0;
 146:	6d65                	lui	s10,0x19
 148:	0070                	addi	a2,sp,12
			product[j] = 0;		
 14a:	6572                	flw	fa0,28(sp)
 14c:	72003173          	csrrc	sp,0x720,zero
		for(j = 0; j < size_a + size_b -1; ++j){
 150:	7365                	lui	t1,0xffff9
 152:	0032                	c.slli	zero,0xc
 154:	665f 616c 7367      	0x7367616c665f
	for (i = 0; i < size_b; ++i){
 15a:	5f00                	lw	s0,56(a4)
 15c:	7369                	lui	t1,0xffffa
		for(j = 0; j < size_a + size_b -1; ++j){
 15e:	635f 6178 5f00      	0x5f006178635f
		pola[i] = a[i];
 164:	69647473          	csrrci	s0,0x696,8
 168:	006e                	c.slli	zero,0x1b
 16a:	625f 6b6c 6973      	0x69736b6c625f
	for(i = 0; i < size_a; ++i){
 170:	657a                	flw	fa0,156(sp)
		pola[i] = a[i];
 172:	7000                	flw	fs0,32(s0)
 174:	6f72                	flw	ft10,28(sp)
	for(i = 0; i < size_a; ++i){
 176:	7564                	flw	fs1,108(a0)
		polb[i] = b[i];
 178:	70007463          	bgeu	zero,zero,880 <ext_euclid+0x18e>
 17c:	64796c6f          	jal	s8,96fc2 <_stack_start+0x86fc2>
 180:	7669                	lui	a2,0xffffa
 182:	7000                	flw	fs0,32(s0)
 184:	66796c6f          	jal	s8,96fea <_stack_start+0x86fea>
 188:	5f00                	lw	s0,56(a4)
 18a:	62747663          	bgeu	s0,t2,7b6 <ext_euclid+0xc4>
			pola[i] = pola[i] + mod;		
 18e:	6675                	lui	a2,0x1d
 190:	5f00                	lw	s0,56(a4)
 192:	7366666f          	jal	a2,668c8 <_stack_start+0x568c8>
		while (pola[i] < 0){
 196:	7465                	lui	s0,0xffff9
 198:	5f00                	lw	s0,56(a4)
 19a:	626d                	lui	tp,0x1b
	for (i = 0; i < size_a; ++i){
 19c:	6f747273          	csrrci	tp,0x6f7,8
 1a0:	5f736377          	0x5f736377
		pola[i] = pola[i] % mod;
 1a4:	74617473          	csrrci	s0,0x746,2
	for (i = 0; i < size_a; ++i){
 1a8:	0065                	c.nop	25
		pola[i] = pola[i] % mod;
 1aa:	6d5f 7262 656c      	0x656c72626d5f
 1b0:	5f6e                	lw	t5,248(sp)
	for (i = 0; i < size_a; ++i){
 1b2:	74617473          	csrrci	s0,0x746,2
			polb[i] = polb[i] + mod;		
 1b6:	0065                	c.nop	25
		while (polb[i] < 0){
 1b8:	665f 616e 6772      	0x6772616e665f
	for (i = 0; i < size_b; ++i){
 1be:	746e0073          	0x746e0073
 1c2:	7572                	flw	fa0,60(sp)
		polb[i] = polb[i] % mod;
 1c4:	645f 6365 7965      	0x79656365645f
 1ca:	7470                	flw	fa2,108(s0)
 1cc:	5f00                	lw	s0,56(a4)
 1ce:	6e66                	flw	ft8,88(sp)
 1d0:	735f0073          	0x735f0073
	if(star_mult == 1){
 1d4:	6769                	lui	a4,0x1a
		for (j = size_b -1; j >= 0; j = j-1){
 1d6:	006e                	c.slli	zero,0x1b
 1d8:	665f 6f6c 6b63      	0x6b636f6c665f
	for (i = 0; i < size_b; ++i){
 1de:	745f 5f00 7473      	0x74735f00745f
 1e4:	6564                	flw	fs1,76(a0)
 1e6:	7272                	flw	ft4,60(sp)
 1e8:	5f00                	lw	s0,56(a4)
	for(j = 0; j < size_a + size_b -1; ++j){
 1ea:	6942                	flw	fs2,16(sp)
 1ec:	746e6967          	0x746e6967
	for(j = 0; j < size_a + size_b -1; ++j){
 1f0:	5f00                	lw	s0,56(a4)
 1f2:	6d6d6167          	0x6d6d6167
}
 1f6:	5f61                	li	t5,-8
 1f8:	6e676973          	csrrsi	s2,0x6e6,14
 1fc:	006d6167          	0x6d6167
 200:	725f 6165 0064      	0x646165725f
 206:	725f 7365 6c75      	0x6c757365725f
 20c:	5f74                	lw	a3,124(a4)
 20e:	5f5f006b          	0x5f5f006b
 212:	6d74                	flw	fa3,92(a0)
 214:	5f00                	lw	s0,56(a4)
				line[size_b-1-j][k] = pola[k]*polb[j];
 216:	775f 6863 0062      	0x626863775f
 21c:	6572                	flw	fa0,28(sp)
 21e:	746c7573          	csrrci	a0,0x746,24
 222:	006e6f6b          	0x6e6f6b
			for (k = size_a-1; k >= 0; k = k-1 ){
 226:	735f 6474 756f      	0x756f6474735f
				line[size_b-1-j][k] = pola[k]*polb[j];
 22c:	0074                	addi	a3,sp,12
			for (k = size_a-1; k >= 0; k = k-1 ){
 22e:	635f 7476 656c      	0x656c7476635f
		for (j = size_b -1; j >= 0; j = j-1){
 234:	006e                	c.slli	zero,0x1b
 236:	72636573          	csrrsi	a0,0x726,6
			for (k = size_a-1; k >= 0; k = k-1 ){
 23a:	7465                	lui	s0,0xffff9
 23c:	6b5f 7965 665f      	0x665f79656b5f
				line[size_b-1-j][k + j] = pola[k]*polb[j];
 242:	0071                	c.nop	28
 244:	665f 6c69 0065      	0x656c69665f
 24a:	6572                	flw	fa0,28(sp)
 24c:	7574                	flw	fa3,108(a0)
			for (k = size_a-1; k >= 0; k = k-1 ){
 24e:	6e72                	flw	ft8,28(sp)
				line[size_b-1-j][k + j] = pola[k]*polb[j];
 250:	615f 6464 6572      	0x65726464615f
			for (k = size_a-1; k >= 0; k = k-1 ){
 256:	00317373          	csrrci	t1,fcsr,2
		for (j = size_b -1; j >= 0; j = j-1){
 25a:	6572                	flw	fa0,28(sp)
 25c:	7574                	flw	fa3,108(a0)
 25e:	6e72                	flw	ft8,28(sp)
 260:	615f 6464 6572      	0x65726464615f
		for(j = 0; j < size_a + size_b -1; ++j){
 266:	00327373          	csrrci	t1,fcsr,4
			line[i][j] = line[i][j] % mod;
 26a:	6572                	flw	fa0,28(sp)
 26c:	7574                	flw	fa3,108(a0)
 26e:	6e72                	flw	ft8,28(sp)
		for(j = 0; j < size_a + size_b -1; ++j){
 270:	615f 6464 6572      	0x65726464615f
	for (i = 0; i < size_b; ++i){
 276:	00337373          	csrrci	t1,fcsr,6
 27a:	6572                	flw	fa0,28(sp)
		for(j = 0; j < size_a + size_b -1; ++j){
 27c:	7574                	flw	fa3,108(a0)
 27e:	6e72                	flw	ft8,28(sp)
			product[j] += line[i][j];
 280:	615f 6464 6572      	0x65726464615f
 286:	00347373          	csrrci	t1,fcsr,8
 28a:	6e5f 6f69 7362      	0x73626f696e5f
 290:	7200                	flw	fs0,32(a2)
 292:	7465                	lui	s0,0xffff9
 294:	7275                	lui	tp,0xffffd
		for(i = 0; i < size_b; ++i){
 296:	5f6e                	lw	t5,248(sp)
 298:	6461                	lui	s0,0x18
	for(j = 0; j < size_a + size_b -1; ++j){
 29a:	7264                	flw	fs1,100(a2)
 29c:	7365                	lui	t1,0xffff9
 29e:	72003673          	csrrc	a2,0x720,zero
		for(i = 0; i < size_b; ++i){
 2a2:	7465                	lui	s0,0xffff9
		product[j] = product[j] % mod;
 2a4:	7275                	lui	tp,0xffffd
	for(j = 0; j < size_a + size_b -1; ++j){
 2a6:	5f6e                	lw	t5,248(sp)
 2a8:	6461                	lui	s0,0x18
		product[j] = product[j] % mod;
 2aa:	7264                	flw	fs1,100(a2)
 2ac:	7365                	lui	t1,0xffff9
 2ae:	73003773          	csrrc	a4,0x730,zero
	for(j = 0; j < size_a + size_b -1; ++j){
 2b2:	6f68                	flw	fa0,92(a4)
int line[size_b][size_a + size_b];
 2b4:	7472                	flw	fs0,60(sp)
 2b6:	7520                	flw	fs0,104(a0)
 2b8:	736e                	flw	ft6,248(sp)
 2ba:	6769                	lui	a4,0x1a
 2bc:	656e                	flw	fa0,216(sp)
 2be:	2064                	fld	fs1,192(s0)
 2c0:	6e69                	lui	t3,0x1a
 2c2:	0074                	addi	a3,sp,12
 2c4:	615f 6574 6978      	0x69786574615f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2ca:	3074                	fld	fa3,224(s0)
 2cc:	5f00                	lw	s0,56(a4)
 2ce:	6e676973          	csrrsi	s2,0x6e6,14
 2d2:	6c61                	lui	s8,0x18
 2d4:	625f 6675 5f00      	0x5f006675625f
int line[size_b][size_a + size_b];
 2da:	7361                	lui	t1,0xffff8
 2dc:	6d697463          	bgeu	s2,s6,9a4 <ext_euclid+0x2b2>
 2e0:	5f65                	li	t5,-7
int pola[size_a];
 2e2:	7562                	flw	fa0,56(sp)
 2e4:	0066                	c.slli	zero,0x19
 2e6:	725f 7365 6c75      	0x6c757365725f
 2ec:	0074                	addi	a3,sp,12
 2ee:	5f5f 6377 0068      	0x6863775f5f
int polb[size_b];
 2f4:	746e6977          	0x746e6977
 2f8:	745f 6700 6e65      	0x6e656700745f
int line[size_b][size_a + size_b];
 2fe:	7265                	lui	tp,0xffff9
int pola[size_a];
 300:	7461                	lui	s0,0xffff8
 302:	5f65                	li	t5,-7
int polb[size_b];
 304:	7379656b          	0x7379656b
			line[i][j] = 0;
 308:	6400                	flw	fs0,8(s0)
 30a:	6e65                	lui	t3,0x19
	for (i = 0; i < size_b; ++i){
 30c:	6d75                	lui	s10,0x1d
 30e:	006d                	c.nop	27
			product2[j] = 0;		
 310:	5f5f 7562 6c69      	0x6c6975625f5f
 316:	6974                	flw	fa3,84(a0)
	for (i = 0; i < size_b; ++i){
 318:	5f6e                	lw	t5,248(sp)
 31a:	656d                	lui	a0,0x1b
	for(i = 0; i < size_a; ++i){
 31c:	636d                	lui	t1,0x1b
 31e:	7970                	flw	fa2,116(a0)
 320:	5f00                	lw	s0,56(a4)
	for(i = 0; i < size_b; ++i){
 322:	6f6c                	flw	fa1,92(a4)
 324:	5f006b63          	bltu	zero,a6,91a <ext_euclid+0x228>
	if(star_mult == 1){
 328:	6c66                	flw	fs8,88(sp)
 32a:	6761                	lui	a4,0x18
 32c:	70003273          	csrrc	tp,0x700,zero
 330:	6f72                	flw	ft10,28(sp)
 332:	7564                	flw	fs1,108(a0)
 334:	00327463          	bgeu	tp,gp,33c <polymult2+0x88>
		for (j = size_b -1; j >= 0; j = j-1){
 338:	7865                	lui	a6,0xffff9
			for (k = size_a-1; k >= 0; k = k-1 ){
 33a:	5f74                	lw	a3,124(a4)
 33c:	7565                	lui	a0,0xffff9
			product2[j] = 0;		
 33e:	64696c63          	bltu	s2,t1,996 <ext_euclid+0x2a4>
 342:	5f00                	lw	s0,56(a4)
			line[i][j] = 0;
 344:	74697277          	0x74697277
			product2[j] = 0;		
 348:	0065                	c.nop	25
 34a:	5f5f 6d74 795f      	0x795f6d745f5f
		for(j = 0; j < size_a + size_b -1; ++j){
 350:	6165                	addi	sp,sp,112
 352:	0072                	c.slli	zero,0x1c
	for (i = 0; i < size_b; ++i){
 354:	6f70                	flw	fa2,92(a4)
 356:	626c                	flw	fa1,68(a2)
 358:	7200                	flw	fs0,32(a2)
 35a:	6e61                	lui	t3,0x18
		for(j = 0; j < size_a + size_b -1; ++j){
 35c:	6f64                	flw	fs1,92(a4)
 35e:	5f6d                	li	t5,-5
		pola[i] = a[i];
 360:	6176                	flw	ft2,92(sp)
 362:	006c                	addi	a1,sp,12
 364:	6e5f 616d 6c6c      	0x6c6c616d6e5f
 36a:	4e00636f          	jal	t1,684a <_stack_len+0x284a>
 36e:	5254                	lw	a3,36(a2)
 370:	5f55                	li	t5,-11
	for(i = 0; i < size_a; ++i){
 372:	3834                	fld	fa3,112(s0)
		polb[i] = b[i];
 374:	625f 7469 5f4d      	0x5f4d7469625f
 37a:	2e67726f          	jal	tp,77660 <_stack_start+0x67660>
 37e:	6f6c0063          	beq	s8,s6,a5e <ext_euclid+0x36c>
 382:	676e                	flw	fa4,216(sp)
 384:	6420                	flw	fs0,72(s0)
	for(i = 0; i < size_b; ++i){
 386:	6c62756f          	jal	a0,27a4c <_stack_start+0x17a4c>
				line[size_b-1-j][k] = pola[k]*polb[j];
 38a:	0065                	c.nop	25
 38c:	6e5f 7865 6674      	0x667478656e5f
 392:	6d00                	flw	fs0,24(a0)
 394:	7365                	lui	t1,0xffff9
 396:	65676173          	csrrsi	sp,0x656,14
 39a:	5f00                	lw	s0,56(a4)
 39c:	745f 5f6d 6f6d      	0x6f6d5f6d745f
			for (k = size_a-1; k >= 0; k = k-1 ){
 3a2:	006e                	c.slli	zero,0x1b
		for (j = size_b -1; j >= 0; j = j-1){
 3a4:	6572                	flw	fa0,28(sp)
 3a6:	7574                	flw	fa3,108(a0)
 3a8:	6e72                	flw	ft8,28(sp)
 3aa:	615f 6464 6572      	0x65726464615f
 3b0:	00357373          	csrrci	t1,fcsr,10
 3b4:	615f 6574 6978      	0x69786574615f
	for(j = 0; j < size_a + size_b -1; ++j){
 3ba:	0074                	addi	a3,sp,12
}
 3bc:	6f627573          	csrrci	a0,0x6f6,4
 3c0:	7470                	flw	fa2,108(s0)
 3c2:	7261                	lui	tp,0xffff8
 3c4:	5f5f0067          	jr	1525(t5)
 3c8:	64696473          	csrrsi	s0,0x646,18
 3cc:	6e69                	lui	t3,0x1a
 3ce:	7469                	lui	s0,0xffffa
 3d0:	5f00                	lw	s0,56(a4)
 3d2:	5f66666f          	jal	a2,669c8 <_stack_start+0x569c8>
 3d6:	0074                	addi	a3,sp,12
 3d8:	6e45                	lui	t3,0x11
			for (k = size_a-1; k >= 0; k = k-1 ){
 3da:	654d5f63          	bge	s10,s4,a38 <ext_euclid+0x346>
				line[size_b-1-j][k + j] = pola[k]*polb[j];
 3de:	67617373          	csrrci	t1,0x676,2
 3e2:	0065                	c.nop	25
 3e4:	746e6f63          	bltu	t3,t1,b42 <generate_keys+0xac>
 3e8:	6f72                	flw	ft10,28(sp)
 3ea:	526c                	lw	a1,100(a2)
 3ec:	5f00                	lw	s0,56(a4)
			for (k = size_a-1; k >= 0; k = k-1 ){
 3ee:	7266                	flw	ft4,120(sp)
				line[size_b-1-j][k + j] = pola[k]*polb[j];
 3f0:	6565                	lui	a0,0x19
 3f2:	696c                	flw	fa1,84(a0)
 3f4:	72007473          	csrrci	s0,0x720,0
			for (k = size_a-1; k >= 0; k = k-1 ){
 3f8:	6e69                	lui	t3,0x1a
		for (j = size_b -1; j >= 0; j = j-1){
 3fa:	6f705f67          	0x6f705f67
 3fe:	796c                	flw	fa1,116(a0)
 400:	5f00                	lw	s0,56(a4)
			product2[j] += line[i][j];
 402:	4f4c                	lw	a1,28(a4)
 404:	525f4b43          	fmadd.d	fs6,ft10,ft5,fa0,rmm
		for(i = 0; i < size_b; ++i){
 408:	4345                	li	t1,17
			product2[j] += line[i][j];
 40a:	5255                	li	tp,-11
 40c:	45564953          	0x45564953
 410:	545f 7400 5f69      	0x5f697400545f
		for(i = 0; i < size_b; ++i){
 416:	0031                	c.nop	12
 418:	6974                	flw	fa3,84(a0)
	for(j = 0; j < size_a + size_b -1; ++j){
 41a:	325f 7500 736e      	0x736e7500325f
		for(i = 0; i < size_b; ++i){
 420:	6769                	lui	a4,0x1a
 422:	656e                	flw	fa0,216(sp)
int v[size_N];
 424:	2064                	fld	fs1,192(s0)
 426:	72616863          	bltu	sp,t1,b56 <generate_keys+0xc0>
 42a:	7100                	flw	fs0,32(a0)
 42c:	5f69                	li	t5,-6
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 42e:	0031                	c.nop	12
 430:	6e5f 7765 5f00      	0x5f0077656e5f
 436:	5f68                	lw	a0,124(a4)
 438:	7265                	lui	tp,0xffff9
 43a:	6e72                	flw	ft8,28(sp)
 43c:	6873006f          	j	312c2 <_stack_start+0x212c2>
 440:	2074726f          	jal	tp,47e46 <_stack_start+0x37e46>
 444:	6e69                	lui	t3,0x1a
 446:	0074                	addi	a3,sp,12
 448:	5f5f 6d74 795f      	0x795f6d745f5f
int v[size_N];
 44e:	6164                	flw	fs1,68(a0)
int q[size_N];
 450:	0079                	c.nop	30
 452:	5f5f 6273 6675      	0x667562735f5f
int numm[size_N];
 458:	5f00                	lw	s0,56(a4)
int denumm[size_D];
 45a:	6f69                	lui	t5,0x1a
 45c:	7362                	flw	ft6,56(sp)
 45e:	5f00                	lw	s0,56(a4)
 460:	465f 4c49 0045      	0x454c49465f
 466:	6d5f 7362 6174      	0x617473626d5f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 46c:	6574                	flw	fa3,76(a0)
int v[size_N];
 46e:	745f 5f00 735f      	0x735f5f00745f
int denumm[size_D];
 474:	4946                	lw	s2,80(sp)
 476:	454c                	lw	a1,12(a0)
	for (i = 0; i < size_N; ++i){
 478:	5f00                	lw	s0,56(a4)
 47a:	626d                	lui	tp,0x1b
 47c:	74617473          	csrrci	s0,0x746,2
 480:	0065                	c.nop	25
	for (i = 0; i < size_N; ++i){
 482:	725f 6e61 5f64      	0x5f646e61725f
 488:	656e                	flw	fa0,216(sp)
	for (i = 0; i < size_N; ++i){
 48a:	7478                	flw	fa4,108(s0)
 48c:	5f00                	lw	s0,56(a4)
 48e:	626d                	lui	tp,0x1b
	for (i = 0; i < size_D; ++i){
 490:	656c                	flw	fa1,76(a0)
 492:	5f6e                	lw	t5,248(sp)
 494:	74617473          	csrrci	s0,0x746,2
 498:	0065                	c.nop	25
	for (i = 0; i < size_D; ++i){
 49a:	695f 636e 5f00      	0x5f00636e695f
	for (i = 0; i < size_D; ++i){
 4a0:	6e69                	lui	t3,0x1a
 4a2:	0064                	addi	s1,sp,12
 4a4:	6c5f 636f 6c61      	0x6c61636f6c5f
	for (i = 0; i < size_N; ++i){
 4aa:	0065                	c.nop	25
	for (i = 0; i < size_N; ++i){
 4ac:	5f5f 6c63 6165      	0x61656c635f5f
	for (i = size_D-1; i >= 0; i = i-1){
 4b2:	756e                	flw	fa0,248(sp)
 4b4:	0070                	addi	a2,sp,12
 4b6:	755f 736e 6570      	0x6570736e755f
 4bc:	69666963          	bltu	a2,s6,b4e <generate_keys+0xb8>
	for (i = 0; i < size_N; ++i){
 4c0:	6465                	lui	s0,0x19
		if ( (b_N*u)%mod == 1 )
 4c2:	6c5f 636f 6c61      	0x6c61636f6c5f
	for (u = 0; u < mod; ++u){
 4c8:	5f65                	li	t5,-7
 4ca:	6e69                	lui	t3,0x1a
		numm[i] = num[i];	
 4cc:	6f66                	flw	ft10,88(sp)
 4ce:	5f00                	lw	s0,56(a4)
 4d0:	616d                	addi	sp,sp,240
 4d2:	7778                	flw	fa4,108(a4)
 4d4:	7364                	flw	fs1,100(a4)
 4d6:	5f00                	lw	s0,56(a4)
	for (i = 0; i < size_N; ++i){
 4d8:	6572                	flw	fa0,28(sp)
		numm[i] = num[i];	
 4da:	6e65                	lui	t3,0x19
	for (i = 0; i < size_N; ++i){
 4dc:	0074                	addi	a3,sp,12
			numm[i] = numm[i] + mod;	
 4de:	72617473          	csrrci	s0,0x726,2
		while (numm[i] < 0)
 4e2:	6d5f 6c75 0074      	0x746c756d5f
	for (i = 0; i < size_N; ++i){
 4e8:	735f 6565 0064      	0x646565735f
		numm[i] = numm[i] % mod;
 4ee:	6972                	flw	fs2,28(sp)
	for (i = 0; i < size_N; ++i){
 4f0:	325f 5f00 635f      	0x635f5f00325f
		numm[i] = numm[i] % mod;
 4f6:	746e756f          	jal	a0,e7c3c <_stack_start+0xd7c3c>
 4fa:	5f00                	lw	s0,56(a4)
	for (i = 0; i < size_N; ++i){
 4fc:	765f 6c61 6575      	0x65756c61765f
		denumm[i] = denum[i];	
 502:	5f00                	lw	s0,56(a4)
 504:	6b656573          	csrrsi	a0,0x6b6,10
 508:	5f00                	lw	s0,56(a4)
	for (i = 0; i < size_D; ++i){
 50a:	7066                	flw	ft0,120(sp)
		denumm[i] = denum[i];	
 50c:	745f736f          	jal	t1,f8450 <_stack_start+0xe8450>
			denumm[i] = denumm[i] + mod;	
 510:	5f00                	lw	s0,56(a4)
 512:	745f 5f6d 696d      	0x696d5f6d745f
		while (denumm[i] < 0)
 518:	006e                	c.slli	zero,0x1b
	for (i = 0; i < size_D; ++i){
 51a:	7570                	flw	fa2,108(a0)
 51c:	6c62                	flw	fs8,24(sp)
 51e:	6369                	lui	t1,0x1a
		denumm[i] = denumm[i] % mod;
 520:	6b5f 7965 5f00      	0x5f0079656b5f
 526:	74727473          	csrrci	s0,0x747,4
 52a:	6c5f6b6f          	jal	s6,f73ee <_stack_start+0xe73ee>
	for (i = 0; i < size_D; ++i){
 52e:	7361                	lui	t1,0xffff8
		q[i] = 0;	
 530:	0074                	addi	a3,sp,12
 532:	665f 746e 7079      	0x7079746e665f
 538:	7365                	lui	t1,0xffff9
	for (i = 0; i < size_N; ++i){
 53a:	7300                	flw	fs0,32(a4)
 53c:	6365                	lui	t1,0x19
		v[i] = 0;	
 53e:	6572                	flw	fa0,28(sp)
 540:	5f74                	lw	a3,124(a4)
 542:	5f79656b          	0x5f79656b
 546:	7066                	flw	ft0,120(sp)
	for (i = 0; i < size_N; ++i){
 548:	5f00                	lw	s0,56(a4)
 54a:	6461                	lui	s0,0x18
		if( !(denumm[i] == 0) )
 54c:	0064                	addi	s1,sp,12
	for (i = size_D-1; i >= 0; i = i-1){
 54e:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
		if ( (b_N*u)%mod == 1 )
 554:	69720067          	jr	1687(tp) # 0 <__DYNAMIC>
 558:	315f 5f00 6567      	0x65675f00315f
	for (u = 0; u < mod; ++u){
 55e:	6474                	flw	fa3,76(s0)
		if( !(numm[i] == 0) )
 560:	7461                	lui	s0,0xffff8
	for (i = size_N-1; i >= 0; i = i-1){
 562:	5f65                	li	t5,-7
 564:	7265                	lui	tp,0xffff9
 566:	0072                	c.slli	zero,0x1c
 568:	6d6f682f          	0x6d6f682f
 56c:	2f65                	jal	d24 <generate_keys+0x28e>
 56e:	6f74                	flw	fa3,92(a4)
	while (d >= d2){
 570:	6170                	flw	fa2,68(a0)
 572:	636c                	flw	fa1,68(a4)
	for(i = 0; i < size_N; ++i){
 574:	7365442f          	0x7365442f
		result[i] = q[i];
 578:	706f746b          	0x706f746b
 57c:	6562692f          	0x6562692f
	for(i = 0; i < size_N; ++i){
 580:	2d78                	fld	fa4,216(a0)
	for(i = size_N; i < (2*size_N); ++i){
 582:	616d                	addi	sp,sp,240
 584:	72657473          	csrrci	s0,0x726,10
		result[i] = numm[i-size_N];
 588:	6178652f          	0x6178652f
 58c:	706d                	c.lui	zero,0xffffb
	for(i = size_N; i < (2*size_N); ++i){
 58e:	656c                	flw	fa1,76(a0)
 590:	77732f73          	csrrs	t5,0x777,t1
}
 594:	74616c2f          	0x74616c2f
 598:	6669                	lui	a2,0x1a
 59a:	685f 636f 5f61      	0x5f61636f685f
 5a0:	726f2f63          	0x726f2f63
 5a4:	006a                	c.slli	zero,0x1a
 5a6:	675f 6f6c 6162      	0x61626f6c675f
 5ac:	5f6c                	lw	a1,124(a4)
 5ae:	6d69                	lui	s10,0x1a
 5b0:	7570                	flw	fa2,108(a0)
 5b2:	6572                	flw	fa0,28(sp)
 5b4:	705f 7274 4700      	0x47007274705f
 5ba:	554e                	lw	a0,240(sp)
		v[(d-d2)] = u*r_d;
 5bc:	4320                	lw	s0,64(a4)
 5be:	3731                	jal	4ca <polydiv+0xa6>
 5c0:	3920                	fld	fs0,112(a0)
 5c2:	322e                	fld	ft4,232(sp)
 5c4:	302e                	fld	ft0,232(sp)
 5c6:	2d20                	fld	fs0,88(a0)
 5c8:	616d                	addi	sp,sp,240
		for (i = 0; i < size_N; ++i){
 5ca:	6372                	flw	ft6,28(sp)
 5cc:	3d68                	fld	fa0,248(a0)
 5ce:	7672                	flw	fa2,60(sp)
 5d0:	6d693233          	0x6d693233
		product = polymult(denumm,size_D,v,size_D,mod,0);		
 5d4:	6d2d2063          	0x6d2d2063
 5d8:	6261                	lui	tp,0x18
 5da:	3d69                	jal	474 <polydiv+0x50>
 5dc:	6c69                	lui	s8,0x1a
 5de:	3370                	fld	fa2,224(a4)
		for (i = 0; i < size_N; ++i){
 5e0:	2032                	fld	ft0,264(sp)
 5e2:	6d2d                	lui	s10,0xb
 5e4:	646f6d63          	bltu	t5,t1,c3e <generate_keys+0x1a8>
 5e8:	6c65                	lui	s8,0x19
		for (i = 0; i < size_N; ++i){
 5ea:	6d3d                	lui	s10,0xf
 5ec:	6465                	lui	s0,0x19
 5ee:	6e61                	lui	t3,0x18
 5f0:	2079                	jal	67e <polydiv+0x25a>
		for (i = 0; i < size_N; ++i){
 5f2:	6d2d                	lui	s10,0xb
 5f4:	7574                	flw	fa3,108(a0)
 5f6:	656e                	flw	fa0,216(sp)
 5f8:	723d                	lui	tp,0xfffef
		for (i = 0; i < size_N; ++i){
 5fa:	656b636f          	jal	t1,b6c50 <_stack_start+0xa6c50>
 5fe:	2074                	fld	fa3,192(s0)
 600:	672d                	lui	a4,0xb
		for (i = 0; i < size_N; ++i){
 602:	2d20                	fld	fs0,88(a0)
 604:	2d20734f          	0x2d20734f
 608:	7666                	flw	fa2,120(sp)
 60a:	7369                	lui	t1,0xffffa
		for(i = 0; i < size_N; ++i){
 60c:	6269                	lui	tp,0x1a
 60e:	6c69                	lui	s8,0x1a
 610:	7469                	lui	s0,0xffffa
		for(i = 0; i < size_N; ++i){
 612:	3d79                	jal	4b0 <polydiv+0x8c>
 614:	6968                	flw	fa0,84(a0)
 616:	6464                	flw	fs1,76(s0)
		for (i = size_N-1; i >= 0; i = i-1){
 618:	6e65                	lui	t3,0x19
 61a:	5f00                	lw	s0,56(a4)
 61c:	6e75                	lui	t3,0x1d
 61e:	7375                	lui	t1,0xffffd
 620:	6465                	lui	s0,0x19
 622:	725f 6e61 0064      	0x646e61725f
 628:	696c                	flw	fa1,84(a0)
			v[i] = v[i] % mod;	
 62a:	656e                	flw	fa0,216(sp)
		for (i = 0; i < size_N; ++i){
 62c:	5f00                	lw	s0,56(a4)
 62e:	00736477          	0x736477
			v[i] = v[i] % mod;	
 632:	5f5f 6d74 775f      	0x775f6d745f5f
		for (i = 0; i < size_N; ++i){
 638:	6164                	flw	fs1,68(a0)
				product[i] = product[i] + mod;	
 63a:	0079                	c.nop	30
 63c:	675f 756c 0065      	0x65756c675f
			while (product[i] < 0)
 642:	746e                	flw	fs0,248(sp)
		for (i = 0; i < size_N; ++i){
 644:	7572                	flw	fa0,60(sp)
 646:	655f 636e 7279      	0x7279636e655f
		for (i = 0; i < size_N; ++i){
 64c:	7470                	flw	fa2,108(s0)
 64e:	5f00                	lw	s0,56(a4)
			product[i] = product[i] % mod;
 650:	7a697373          	csrrci	t1,0x7a6,18
 654:	5f65                	li	t5,-7
 656:	0074                	addi	a3,sp,12
		for (i = 0; i < size_N; ++i){
 658:	6c5f 3436 5f61      	0x5f6134366c5f
			numm[i] = numm[i] - product[i];
 65e:	7562                	flw	fa0,56(sp)
 660:	0066                	c.slli	zero,0x19
 662:	6564                	flw	fs1,76(a0)
		for (i = 0; i < size_N; ++i){
 664:	756e                	flw	fa0,248(sp)
 666:	006d                	c.nop	27
			numm[i] = numm[i] - product[i];
 668:	735f 6769 665f      	0x665f6769735f
		for (i = 0; i < size_N; ++i){
 66e:	6e75                	lui	t3,0x1d
				numm[i] = numm[i] + mod;	
 670:	6e5f0063          	beq	t5,t0,d50 <generate_keys+0x2ba>
			while (numm[i] < 0)
 674:	7562                	flw	fa0,56(sp)
 676:	0066                	c.slli	zero,0x19
 678:	755f 756e 6573      	0x6573756e755f
		for (i = 0; i < size_N; ++i){
 67e:	0064                	addi	s1,sp,12
			numm[i] = numm[i] % mod;
 680:	6f70                	flw	fa2,92(a4)
		for (i = 0; i < size_N; ++i){
 682:	796c                	flw	fa1,116(a0)
 684:	0052                	c.slli	zero,0x14
			numm[i] = numm[i] % mod;
 686:	657a6973          	csrrsi	s2,0x657,20
 68a:	445f 5f00 745f      	0x745f5f00445f
			q[i] = q[i] + v[i];		
 690:	5f6d                	li	t5,-5
 692:	7369                	lui	t1,0xffffa
 694:	7364                	flw	fs1,100(a4)
 696:	0074                	addi	a3,sp,12
 698:	6c5f 636f 6c61      	0x6c61636f6c5f
 69e:	6974                	flw	fa3,84(a0)
 6a0:	656d                	lui	a0,0x1b
 6a2:	625f 6675 5f00      	0x5f006675625f
		for(i = 0; i < size_N; ++i){
 6a8:	736f6c63          	bltu	t5,s6,de0 <ntru_encyrpt+0x54>
			q[i] = q[i] % mod;
 6ac:	0065                	c.nop	25
 6ae:	725f 3834 5f00      	0x5f003834725f
		for(i = 0; i < size_N; ++i){
 6b4:	626d                	lui	tp,0x1b
			if( !(numm[i] == 0) )
 6b6:	6f74                	flw	fa3,92(a4)
		for (i = size_N-1; i >= 0; i = i-1){
 6b8:	735f6377          	0x735f6377
			v[i] = 0;	
 6bc:	6174                	flw	fa3,68(a0)
 6be:	6574                	flw	fa3,76(a0)
 6c0:	5f00                	lw	s0,56(a4)
 6c2:	3570                	fld	fa2,232(a0)
 6c4:	616d0073          	0x616d0073
		for (i = 0; i < size_N; ++i){
 6c8:	6e69                	lui	t3,0x1a
 6ca:	5f00                	lw	s0,56(a4)
 6cc:	745f 5f6d 646d      	0x646d5f6d745f
		result[i] = q[i];
 6d2:	7961                	lui	s2,0xffff8
 6d4:	7300                	flw	fs0,32(a4)
 6d6:	7a69                	lui	s4,0xffffa
 6d8:	5f65                	li	t5,-7
	for(i = 0; i < size_N; ++i){
 6da:	0061                	c.nop	24
		result[i] = q[i];
 6dc:	657a6973          	csrrsi	s2,0x657,20
		result[i] = numm[i-size_N];
 6e0:	625f 6300 7472      	0x74726300625f
 6e6:	2e30                	fld	fa2,88(a2)
 6e8:	4e470053          	0x4e470053
	for(i = size_N; i < (2*size_N); ++i){
 6ec:	2055                	jal	790 <ext_euclid+0x9e>
 6ee:	5341                	li	t1,-16
 6f0:	3220                	fld	fs0,96(a2)
  int ri_2[size]; // MX-ring poly, a
 6f2:	332e                	fld	ft6,232(sp)
 6f4:	0032                	c.slli	zero,0xc

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <polydiv+0x25c>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	0040                	addi	s0,sp,4
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0228                	addi	a0,sp,264
  1e:	0000                	unimp
  20:	0e56                	slli	t3,t3,0x15
  22:	5220                	lw	s0,96(a2)
  24:	0188                	addi	a0,sp,192
  26:	0289                	addi	t0,t0,2
  28:	05940493          	addi	s1,s0,89 # 19059 <_stack_start+0x9059>
  2c:	03920897          	auipc	a7,0x3920
  30:	0695                	addi	a3,a3,5
  32:	0796                	slli	a5,a5,0x5
  34:	0c42                	slli	s8,s8,0x10
  36:	0008                	0x8
  38:	0a014403          	lbu	s0,160(sp)
  3c:	020c                	addi	a1,sp,256
  3e:	4220                	lw	s0,64(a2)
  40:	42c8                	lw	a0,4(a3)
  42:	42c9                	li	t0,18
  44:	42d2                	lw	t0,20(sp)
  46:	42d442d3          	0x42d442d3
  4a:	42d5                	li	t0,21
  4c:	42d6                	lw	t0,84(sp)
  4e:	000e4ad7          	0xe4ad7
  52:	0b42                	slli	s6,s6,0x10
  54:	003c                	addi	a5,sp,8
  56:	0000                	unimp
  58:	0000                	unimp
  5a:	0000                	unimp
  5c:	02b4                	addi	a3,sp,328
  5e:	0000                	unimp
  60:	0170                	addi	a2,sp,140
  62:	0000                	unimp
  64:	0e56                	slli	t3,t3,0x15
  66:	4e20                	lw	s0,88(a2)
  68:	0188                	addi	a0,sp,192
  6a:	0289                	addi	t0,t0,2
  6c:	0392                	slli	t2,t2,0x4
  6e:	07960493          	addi	s1,a2,121 # 1a079 <_stack_start+0xa079>
  72:	0594                	addi	a3,sp,704
  74:	0695                	addi	a3,a3,5
  76:	0c42                	slli	s8,s8,0x10
  78:	0008                	0x8
  7a:	e602                	fsw	ft0,12(sp)
  jal x0, default_exc_handler
  7c:	0c0a                	slli	s8,s8,0x2
  7e:	2002                	fld	ft0,0(sp)
  jal x0, reset_handler
  80:	c842                	sw	a6,16(sp)
  82:	c942                	sw	a6,144(sp)
  jal x0, default_exc_handler
  84:	d242                	sw	a6,36(sp)
  86:	d342                	sw	a6,164(sp)
  jal x0, default_exc_handler
  88:	d442                	sw	a6,40(sp)
  8a:	d542                	sw	a6,168(sp)
int line[size_b][size_a + size_b];
  8c:	d642                	sw	a6,44(sp)
  8e:	0e4a                	slli	t3,t3,0x12
  90:	4200                	lw	s0,0(a2)
  92:	0054000b          	0x54000b
  96:	0000                	unimp
  98:	0000                	unimp
  9a:	0000                	unimp
  9c:	0424                	addi	s1,sp,520
  9e:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  a0:	02ce                	slli	t0,t0,0x13
  a2:	0000                	unimp
  a4:	0e46                	slli	t3,t3,0x11
  a6:	5e40                	lw	s0,60(a2)
  a8:	0288                	addi	a0,sp,320
  aa:	0389                	addi	t2,t2,2
  ac:	0492                	slli	s1,s1,0x4
  ae:	06940593          	addi	a1,s0,105
int line[size_b][size_a + size_b];
  b2:	0795                	addi	a5,a5,5
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  b4:	0896                	slli	a7,a7,0x5
int line[size_b][size_a + size_b];
  b6:	0a980997          	auipc	s3,0xa980
  ba:	0b99                	addi	s7,s7,6
  bc:	0181                	addi	gp,gp,0
int pola[size_a];
  be:	0c9a                	slli	s9,s9,0x6
  c0:	0c420d9b          	0xc420d9b
  c4:	0008                	0x8
  c6:	0a014c03          	lbu	s8,160(sp)
  ca:	020c                	addi	a1,sp,256
  cc:	4240                	lw	s0,4(a2)
int polb[size_b];
  ce:	42c1                	li	t0,16
  d0:	42c8                	lw	a0,4(a3)
  d2:	42c9                	li	t0,18
  d4:	42d2                	lw	t0,20(sp)
int pola[size_a];
  d6:	42d442d3          	0x42d442d3
int polb[size_b];
  da:	42d5                	li	t0,21
int line[size_b][size_a + size_b];
  dc:	42d6                	lw	t0,84(sp)
  de:	42d842d7          	0x42d842d7
int pola[size_a];
  e2:	42d9                	li	t0,22
int polb[size_b];
  e4:	42da                	lw	t0,148(sp)
			line[i][j] = 0;
  e6:	000e4adb          	0xe4adb
  ea:	0b42                	slli	s6,s6,0x10
	for (i = 0; i < size_b; ++i){
  ec:	0054                	addi	a3,sp,4
  ee:	0000                	unimp
			product[j] = 0;		
  f0:	0000                	unimp
  f2:	0000                	unimp
  f4:	06f2                	slli	a3,a3,0x1c
  f6:	0000                	unimp
	for (i = 0; i < size_b; ++i){
  f8:	03a4                	addi	s1,sp,456
  fa:	0000                	unimp
	for(i = 0; i < size_a; ++i){
  fc:	0e46                	slli	t3,t3,0x11
  fe:	5e50                	lw	a2,60(a2)
 100:	0288                	addi	a0,sp,320
	for(i = 0; i < size_b; ++i){
 102:	0389                	addi	t2,t2,2
 104:	0492                	slli	s1,s1,0x4
 106:	06940593          	addi	a1,s0,105
 10a:	0795                	addi	a5,a5,5
	for (i = 0; i < size_a; ++i){
 10c:	0896                	slli	a7,a7,0x5
 10e:	0a980997          	auipc	s3,0xa980
	for (i = 0; i < size_a; ++i){
 112:	0c9a                	slli	s9,s9,0x6
 114:	01810d9b          	0x1810d9b
 118:	0b99                	addi	s7,s7,6
 11a:	0c42                	slli	s8,s8,0x10
	for (i = 0; i < size_b; ++i){
 11c:	0008                	0x8
 11e:	0a01a403          	lw	s0,160(gp)
	for(i = 0; i < size_b; ++i){
 122:	020c                	addi	a1,sp,256
 124:	4250                	lw	a2,4(a2)
 126:	42c1                	li	t0,16
	if(star_mult == 1){
 128:	42c8                	lw	a0,4(a3)
 12a:	42c9                	li	t0,18
 12c:	42d2                	lw	t0,20(sp)
 12e:	42d442d3          	0x42d442d3
 132:	42d5                	li	t0,21
 134:	42d6                	lw	t0,84(sp)
 136:	42d842d7          	0x42d842d7
		for (j = size_b -1; j >= 0; j = j-1){
 13a:	42d9                	li	t0,22
			for (k = size_a-1; k >= 0; k = k-1 ){
 13c:	42da                	lw	t0,148(sp)
 13e:	000e4adb          	0xe4adb
			product[j] = 0;		
 142:	0b42                	slli	s6,s6,0x10
 144:	0054                	addi	a3,sp,4
			line[i][j] = 0;
 146:	0000                	unimp
 148:	0000                	unimp
			product[j] = 0;		
 14a:	0000                	unimp
 14c:	0a96                	slli	s5,s5,0x5
		for(j = 0; j < size_a + size_b -1; ++j){
 14e:	0000                	unimp
 150:	02f6                	slli	t0,t0,0x1d
 152:	0000                	unimp
 154:	0e42                	slli	t3,t3,0x10
	for (i = 0; i < size_b; ++i){
 156:	03f0                	addi	a2,sp,460
 158:	814c                	0x814c
 15a:	8801                	andi	s0,s0,0
 15c:	8902                	jr	s2
		for(j = 0; j < size_a + size_b -1; ++j){
 15e:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
		pola[i] = a[i];
 162:	6400                	flw	fs0,8(s0)
 164:	0492                	slli	s1,s1,0x4
 166:	06940593          	addi	a1,s0,105
 16a:	0795                	addi	a5,a5,5
 16c:	0896                	slli	a7,a7,0x5
 16e:	0c9a0997          	auipc	s3,0xc9a0
 172:	0a98                	addi	a4,sp,336
 174:	0b99                	addi	s7,s7,6
	for(i = 0; i < size_a; ++i){
 176:	0a01de03          	lhu	t3,160(gp)
		polb[i] = b[i];
 17a:	020c                	addi	a1,sp,256
 17c:	03f0                	addi	a2,sp,460
 17e:	c144                	sw	s1,4(a0)
 180:	c844                	sw	s1,20(s0)
 182:	c944                	sw	s1,20(a0)
 184:	d244                	sw	s1,36(a2)
	for(i = 0; i < size_b; ++i){
 186:	d344                	sw	s1,36(a4)
		polb[i] = b[i];
 188:	d444                	sw	s1,44(s0)
 18a:	d544                	sw	s1,44(a0)
	for(i = 0; i < size_b; ++i){
 18c:	d644                	sw	s1,44(a2)
			pola[i] = pola[i] + mod;		
 18e:	d744                	sw	s1,44(a4)
 190:	d844                	sw	s1,52(s0)
 192:	d944                	sw	s1,52(a0)
		while (pola[i] < 0){
 194:	da44                	sw	s1,52(a2)
 196:	0e4a                	slli	t3,t3,0x12
 198:	4200                	lw	s0,0(a2)
 19a:	0034000b          	0x34000b
	for (i = 0; i < size_a; ++i){
 19e:	0000                	unimp
 1a0:	0000                	unimp
		pola[i] = pola[i] % mod;
 1a2:	0000                	unimp
 1a4:	0d8c                	addi	a1,sp,720
	for (i = 0; i < size_a; ++i){
 1a6:	0000                	unimp
 1a8:	0096                	slli	ra,ra,0x5
		pola[i] = pola[i] % mod;
 1aa:	0000                	unimp
 1ac:	0e42                	slli	t3,t3,0x10
 1ae:	01e0                	addi	s0,sp,204
 1b0:	8846                	mv	a6,a7
	for (i = 0; i < size_a; ++i){
 1b2:	8902                	jr	s2
			polb[i] = polb[i] + mod;		
 1b4:	5a049203          	lh	tp,1440(s1)
		while (polb[i] < 0){
 1b8:	0181                	addi	gp,gp,0
 1ba:	06940593          	addi	a1,s0,105
	for (i = 0; i < size_b; ++i){
 1be:	5402                	lw	s0,32(sp)
 1c0:	c10a                	sw	sp,128(sp)
 1c2:	c842                	sw	a6,16(sp)
		polb[i] = polb[i] % mod;
 1c4:	c942                	sw	a6,144(sp)
	for(i = 0; i < size_b; ++i){
 1c6:	d242                	sw	a6,36(sp)
 1c8:	d342                	sw	a6,164(sp)
		polb[i] = polb[i] % mod;
 1ca:	d442                	sw	a6,40(sp)
 1cc:	0e42                	slli	t3,t3,0x10
 1ce:	4200                	lw	s0,0(a2)
 1d0:	0000000b          	0xb
	if(star_mult == 1){
 1d4:	0040                	addi	s0,sp,4
		for (j = size_b -1; j >= 0; j = j-1){
 1d6:	0000                	unimp
 1d8:	0000                	unimp
		for(j = 0; j < size_a + size_b -1; ++j){
 1da:	0000                	unimp
	for (i = 0; i < size_b; ++i){
 1dc:	0e22                	slli	t3,t3,0x8
 1de:	0000                	unimp
 1e0:	00c8                	addi	a0,sp,68
 1e2:	0000                	unimp
 1e4:	0e42                	slli	t3,t3,0x10
 1e6:	4430                	lw	a2,72(s0)
 1e8:	0288                	addi	a0,sp,320
	for(j = 0; j < size_a + size_b -1; ++j){
 1ea:	924e0593          	addi	a1,t3,-1756 # 19924 <_stack_start+0x9924>
 1ee:	9504                	0x9504
	for(j = 0; j < size_a + size_b -1; ++j){
 1f0:	58099707          	0x58099707
 1f4:	0181                	addi	gp,gp,0
}
 1f6:	0389                	addi	t2,t2,2
 1f8:	0694                	addi	a3,sp,832
 1fa:	0896                	slli	a7,a7,0x5
 1fc:	5202                	lw	tp,32(sp)
 1fe:	c10a                	sw	sp,128(sp)
 200:	c842                	sw	a6,16(sp)
 202:	c942                	sw	a6,144(sp)
 204:	d242                	sw	a6,36(sp)
 206:	d342                	sw	a6,164(sp)
 208:	d442                	sw	a6,40(sp)
 20a:	d542                	sw	a6,168(sp)
 20c:	d642                	sw	a6,44(sp)
 20e:	d742                	sw	a6,172(sp)
 210:	0e42                	slli	t3,t3,0x10
 212:	4200                	lw	s0,0(a2)
 214:	0000000b          	0xb
				line[size_b-1-j][k] = pola[k]*polb[j];
 218:	0020                	addi	s0,sp,8
 21a:	0000                	unimp
 21c:	0000                	unimp
 21e:	0000                	unimp
 220:	10e6                	slli	ra,ra,0x39
 222:	0000                	unimp
 224:	00f2                	slli	ra,ra,0x1c
			for (k = size_a-1; k >= 0; k = k-1 ){
 226:	0000                	unimp
				line[size_b-1-j][k] = pola[k]*polb[j];
 228:	0e44                	addi	s1,sp,788
 22a:	08b0                	addi	a2,sp,88
 22c:	8156                	mv	sp,s5
			for (k = size_a-1; k >= 0; k = k-1 ){
 22e:	8801                	andi	s0,s0,0
 230:	0202                	c.slli64	tp
		for (j = size_b -1; j >= 0; j = j-1){
 232:	0ac0                	addi	s0,sp,340
 234:	44c1                	li	s1,16
 236:	46c8                	lw	a0,12(a3)
 238:	000e                	c.slli	zero,0x3
			for (k = size_a-1; k >= 0; k = k-1 ){
 23a:	0b42                	slli	s6,s6,0x10

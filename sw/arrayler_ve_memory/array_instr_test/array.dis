
array.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	0b20006f          	j	12e <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	0b20006f          	j	132 <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	0aa0006f          	j	12e <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	0a60006f          	j	12e <default_exc_handler>

Disassembly of section .text:

0000008c <array_mul>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

  asm volatile(
  8c:	02b5750b          	0x2b5750b
	: "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
	: "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

  );
return;
}
  90:	8082                	ret

00000092 <instr_add>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
  92:	06b5750b          	0x6b5750b

    );
    return;


}
  96:	8082                	ret

00000098 <array_add>:
void array_add(int *a1, int *a2, int length) {
int i =0;
    for(i=0;i<(length/3);i++) {
  98:	478d                	li	a5,3
  9a:	02f64633          	div	a2,a2,a5
  9e:	4831                	li	a6,12
  a0:	4781                	li	a5,0
  a2:	00c7c363          	blt	a5,a2,a8 <array_add+0x10>
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
    }
}
  a6:	8082                	ret
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a8:	03078733          	mul	a4,a5,a6
    asm volatile(
  ac:	00e506b3          	add	a3,a0,a4
  b0:	972e                	add	a4,a4,a1
  b2:	06e6f70b          	0x6e6f70b
    for(i=0;i<(length/3);i++) {
  b6:	0785                	addi	a5,a5,1
  b8:	b7ed                	j	a2 <array_add+0xa>

000000ba <instr_sub>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
  ba:	08b5750b          	0x8b5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
  be:	8082                	ret

000000c0 <array_sub>:
void array_sub(int *a1, int *a2, int length){
int i =0;
    for(i=0;i<(length/3);i++) {
  c0:	478d                	li	a5,3
  c2:	02f64633          	div	a2,a2,a5
  c6:	4831                	li	a6,12
  c8:	4781                	li	a5,0
  ca:	00c7c363          	blt	a5,a2,d0 <array_sub+0x10>
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
    }
}
  ce:	8082                	ret
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  d0:	03078733          	mul	a4,a5,a6
    asm volatile(
  d4:	00e506b3          	add	a3,a0,a4
  d8:	972e                	add	a4,a4,a1
  da:	08e6f70b          	0x8e6f70b
    for(i=0;i<(length/3);i++) {
  de:	0785                	addi	a5,a5,1
  e0:	b7ed                	j	ca <array_sub+0xa>

000000e2 <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
  e2:	0ab5750b          	0xab5750b
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;

}
  e6:	8082                	ret

000000e8 <array_equ>:
void array_equ(int *a1,int *a2,int length) {
int i = 0;
    for(i=0;i<(length/3);i++) {
  e8:	478d                	li	a5,3
  ea:	02f64633          	div	a2,a2,a5
  ee:	4831                	li	a6,12
  f0:	4781                	li	a5,0
  f2:	00c7c363          	blt	a5,a2,f8 <array_equ+0x10>
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
    }
}
  f6:	8082                	ret
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f8:	03078733          	mul	a4,a5,a6
    asm volatile(
  fc:	00e506b3          	add	a3,a0,a4
 100:	972e                	add	a4,a4,a1
 102:	0ae6f70b          	0xae6f70b
    for(i=0;i<(length/3);i++) {
 106:	0785                	addi	a5,a5,1
 108:	b7ed                	j	f2 <array_equ+0xa>

0000010a <instr_mod>:

void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
 10a:	0cb5750b          	0xcb5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(mod)			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
 10e:	8082                	ret

00000110 <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    for(i=0;i<(length/3);i++) {
 110:	478d                	li	a5,3
 112:	02f64633          	div	a2,a2,a5
    asm volatile(
 116:	46b1                	li	a3,12
    for(i=0;i<(length/3);i++) {
 118:	4781                	li	a5,0
 11a:	00c7c363          	blt	a5,a2,120 <array_mod+0x10>
        instr_mod((unsigned int*)&a1[3 * i], (unsigned int)mod);
    }

}
 11e:	8082                	ret
    asm volatile(
 120:	02d78733          	mul	a4,a5,a3
 124:	972a                	add	a4,a4,a0
 126:	0cb7770b          	0xcb7770b
    for(i=0;i<(length/3);i++) {
 12a:	0785                	addi	a5,a5,1
 12c:	b7fd                	j	11a <array_mod+0xa>

0000012e <default_exc_handler>:
  jal x0, default_exc_handler
 12e:	0000006f          	j	12e <default_exc_handler>

00000132 <reset_handler>:
  mv  x1, x0
 132:	00000093          	li	ra,0
  mv  x2, x1
 136:	8106                	mv	sp,ra
  mv  x3, x1
 138:	8186                	mv	gp,ra
  mv  x4, x1
 13a:	8206                	mv	tp,ra
  mv  x5, x1
 13c:	8286                	mv	t0,ra
  mv  x6, x1
 13e:	8306                	mv	t1,ra
  mv  x7, x1
 140:	8386                	mv	t2,ra
  mv  x8, x1
 142:	8406                	mv	s0,ra
  mv  x9, x1
 144:	8486                	mv	s1,ra
  mv x10, x1
 146:	8506                	mv	a0,ra
  mv x11, x1
 148:	8586                	mv	a1,ra
  mv x12, x1
 14a:	8606                	mv	a2,ra
  mv x13, x1
 14c:	8686                	mv	a3,ra
  mv x14, x1
 14e:	8706                	mv	a4,ra
  mv x15, x1
 150:	8786                	mv	a5,ra
  mv x16, x1
 152:	8806                	mv	a6,ra
  mv x17, x1
 154:	8886                	mv	a7,ra
  mv x18, x1
 156:	8906                	mv	s2,ra
  mv x19, x1
 158:	8986                	mv	s3,ra
  mv x20, x1
 15a:	8a06                	mv	s4,ra
  mv x21, x1
 15c:	8a86                	mv	s5,ra
  mv x22, x1
 15e:	8b06                	mv	s6,ra
  mv x23, x1
 160:	8b86                	mv	s7,ra
  mv x24, x1
 162:	8c06                	mv	s8,ra
  mv x25, x1
 164:	8c86                	mv	s9,ra
  mv x26, x1
 166:	8d06                	mv	s10,ra
  mv x27, x1
 168:	8d86                	mv	s11,ra
  mv x28, x1
 16a:	8e06                	mv	t3,ra
  mv x29, x1
 16c:	8e86                	mv	t4,ra
  mv x30, x1
 16e:	8f06                	mv	t5,ra
  mv x31, x1
 170:	8f86                	mv	t6,ra
  la   x2, _stack_start
 172:	00010117          	auipc	sp,0x10
 176:	e8e10113          	addi	sp,sp,-370 # 10000 <_stack_start>

0000017a <_start>:
  la x26, _bss_start
 17a:	24400d13          	li	s10,580
  la x27, _bss_end
 17e:	25800d93          	li	s11,600
  bge x26, x27, zero_loop_end
 182:	01bd5763          	bge	s10,s11,190 <main_entry>

00000186 <zero_loop>:
  sw x0, 0(x26)
 186:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
 18a:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
 18c:	ffaddde3          	bge	s11,s10,186 <zero_loop>

00000190 <main_entry>:
  addi x10, x0, 0
 190:	00000513          	li	a0,0
  addi x11, x0, 0
 194:	00000593          	li	a1,0
  jal x1, main
 198:	004000ef          	jal	ra,19c <main>

0000019c <main>:
/////////////////////////////////////////////////




int main() {
 19c:	1141                	addi	sp,sp,-16
 19e:	c606                	sw	ra,12(sp)
 1a0:	c422                	sw	s0,8(sp)
 1a2:	c226                	sw	s1,4(sp)

//}

volatile unsigned int  *var = (volatile unsigned int  *) 0x0000c010;

*var = 0xDC;
 1a4:	6431                	lui	s0,0xc
 1a6:	0dc00793          	li	a5,220

array_add(array1,array2,6); // array1 = {3,6,9,12,15,18}
 1aa:	22c00493          	li	s1,556
*var = 0xDC;
 1ae:	c81c                	sw	a5,16(s0)
array_add(array1,array2,6); // array1 = {3,6,9,12,15,18}
 1b0:	8526                	mv	a0,s1
 1b2:	21400593          	li	a1,532
 1b6:	4619                	li	a2,6
 1b8:	35c5                	jal	98 <array_add>

*var = 0xCC;
 1ba:	0cc00793          	li	a5,204
 1be:	c81c                	sw	a5,16(s0)

array_equ(array1,array2,6); // array1 = {2,4,6,8,10,12}
 1c0:	4619                	li	a2,6
 1c2:	21400593          	li	a1,532
 1c6:	8526                	mv	a0,s1
 1c8:	3705                	jal	e8 <array_equ>

*var = 0xCB;
 1ca:	0cb00793          	li	a5,203
 1ce:	c81c                	sw	a5,16(s0)
  asm volatile(
 1d0:	21400593          	li	a1,532
 1d4:	02b4f78b          	0x2b4f78b

array_mul(array1,array2); // array1 = {4,16,36,8,10,12}

*var = 0xBB;
 1d8:	0bb00793          	li	a5,187
 1dc:	c81c                	sw	a5,16(s0)

array_sub(array1,array2,6); //  array1 = {2,12,30,0,0,0}
 1de:	8526                	mv	a0,s1
 1e0:	4619                	li	a2,6
 1e2:	3df9                	jal	c0 <array_sub>

*var = 0xBA;
 1e4:	0ba00793          	li	a5,186
 1e8:	c81c                	sw	a5,16(s0)

array_mod(array1,7,6);  // array1 = {2,5,2,0,0,0}
 1ea:	8526                	mv	a0,s1
 1ec:	4619                	li	a2,6
 1ee:	459d                	li	a1,7
 1f0:	3705                	jal	110 <array_mod>

*var = 0xAA;
 1f2:	0aa00793          	li	a5,170

return 0;
}
 1f6:	40b2                	lw	ra,12(sp)
*var = 0xAA;
 1f8:	c81c                	sw	a5,16(s0)
}
 1fa:	4422                	lw	s0,8(sp)
 1fc:	4492                	lw	s1,4(sp)
 1fe:	4501                	li	a0,0
 200:	0141                	addi	sp,sp,16
 202:	8082                	ret

00000204 <__CTOR_LIST__>:
	...

0000020c <__CTOR_END__>:
	...

Disassembly of section .data:

00000214 <array2>:
 214:	0002                	c.slli64	zero
 216:	0000                	unimp
 218:	0004                	0x4
 21a:	0000                	unimp
 21c:	0006                	c.slli	zero,0x1
 21e:	0000                	unimp
 220:	0008                	0x8
 222:	0000                	unimp
 224:	000a                	c.slli	zero,0x2
 226:	0000                	unimp
 228:	000c                	0xc
	...

0000022c <array1>:
int array1[6] = {1,2,3,4,5,6};
 22c:	0001                	nop
 22e:	0000                	unimp
 230:	0002                	c.slli64	zero
 232:	0000                	unimp
 234:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
 238:	0004                	0x4
 23a:	0000                	unimp
 23c:	0005                	c.nop	1
 23e:	0000                	unimp
 240:	0006                	c.slli	zero,0x1
	...

Disassembly of section .bss:

00000244 <array3>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
   0:	000004d3          	fadd.s	fs1,ft0,ft0,rne
   4:	0004                	0x4
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0104                	addi	s1,sp,128
   c:	000000eb          	0xeb
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0800                	addi	s0,sp,16
  16:	0000                	unimp
  18:	1800                	addi	s0,sp,48
	...
  22:	0000                	unimp
  24:	0200                	addi	s0,sp,256
  26:	0601                	addi	a2,a2,0
  28:	0065                	c.nop	25
  2a:	0000                	unimp
  2c:	0102                	c.slli64	sp
  2e:	6308                	flw	fa0,0(a4)
  30:	0000                	unimp
  32:	0200                	addi	s0,sp,256
  34:	0502                	c.slli64	a0
  36:	00000157          	0x157
  3a:	0202                	c.slli64	tp
  3c:	00007b07          	0x7b07
  40:	0200                	addi	s0,sp,256
  42:	0504                	addi	s1,sp,640
  44:	000000db          	0xdb
  48:	0402                	c.slli64	s0
  4a:	0000ba07          	fld	fs4,0(ra)
  4e:	0200                	addi	s0,sp,256
  50:	0508                	addi	a0,sp,640
  52:	00d6                	slli	ra,ra,0x15
  54:	0000                	unimp
  56:	0802                	c.slli64	a6
  58:	0000b507          	fld	fa0,0(ra)
  5c:	0300                	addi	s0,sp,384
  5e:	0504                	addi	s1,sp,640
  60:	6e69                	lui	t3,0x1a
  62:	0074                	addi	a3,sp,12
  64:	0402                	c.slli64	s0
  66:	0000bf07          	fld	ft10,0(ra)
  6a:	0400                	addi	s0,sp,512
  6c:	0064                	addi	s1,sp,12
  6e:	0000                	unimp
  70:	5d05                	li	s10,-31
  72:	0000                	unimp
  74:	8000                	0x8000
  76:	0000                	unimp
  78:	0600                	addi	s0,sp,768
  7a:	0064                	addi	s1,sp,12
  jal x0, default_exc_handler
  7c:	0000                	unimp
  7e:	0005                	c.nop	1
  jal x0, reset_handler
  80:	00008e07          	0x8e07
  jal x0, default_exc_handler
  84:	0100                	addi	s0,sp,128
  86:	0504                	addi	s1,sp,640
  jal x0, default_exc_handler
  88:	0070                	addi	a2,sp,12
  8a:	0000                	unimp
  asm volatile(
  8c:	0305                	addi	t1,t1,1
  8e:	022c                	addi	a1,sp,264
}
  90:	0000                	unimp
    asm volatile(
  92:	0000e407          	0xe407
}
  96:	0100                	addi	s0,sp,128
    for(i=0;i<(length/3);i++) {
  98:	0505                	addi	a0,a0,1
  9a:	0070                	addi	a2,sp,12
  9c:	0000                	unimp
  9e:	0305                	addi	t1,t1,1
  a0:	0214                	addi	a3,sp,256
  a2:	0000                	unimp
  a4:	5d05                	li	s10,-31
}
  a6:	0000                	unimp
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a8:	b400                	fsd	fs0,40(s0)
  aa:	0000                	unimp
    asm volatile(
  ac:	0600                	addi	s0,sp,768
  ae:	0064                	addi	s1,sp,12
  b0:	0000                	unimp
  b2:	0004                	0x4
  b4:	00009a07          	0x9a07
    for(i=0;i<(length/3);i++) {
  b8:	0100                	addi	s0,sp,128
    asm volatile(
  ba:	0506                	slli	a0,a0,0x1
  bc:	00a4                	addi	s1,sp,72
}
  be:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  c0:	0305                	addi	t1,t1,1
  c2:	0244                	addi	s1,sp,260
  c4:	0000                	unimp
  c6:	9508                	0x9508
  c8:	0000                	unimp
  ca:	0100                	addi	s0,sp,128
  cc:	005d0587          	0x5d0587
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  d0:	0000                	unimp
  d2:	019c                	addi	a5,sp,192
    asm volatile(
  d4:	0000                	unimp
  d6:	0068                	addi	a0,sp,12
  d8:	0000                	unimp
  da:	9c01                	0x9c01
  dc:	0196                	slli	gp,gp,0x5
    for(i=0;i<(length/3);i++) {
  de:	0000                	unimp
  e0:	7609                	lui	a2,0xfffe2
    asm volatile(
  e2:	7261                	lui	tp,0xffff8
  e4:	0100                	addi	s0,sp,128
}
  e6:	01961997          	auipc	s3,0x1961
    for(i=0;i<(length/3);i++) {
  ea:	0000                	unimp
  ec:	c010                	sw	a2,0(s0)
  ee:	020a                	slli	tp,tp,0x2
  f0:	0004                	0x4
  f2:	d000                	sw	s0,32(s0)
  f4:	0001                	nop
}
  f6:	0800                	addi	s0,sp,16
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f8:	0000                	unimp
  fa:	0100                	addi	s0,sp,128
    asm volatile(
  fc:	011501a3          	sb	a7,3(a0)
 100:	0000                	unimp
 102:	00041a0b          	0x41a0b
    for(i=0;i<(length/3);i++) {
 106:	0000                	unimp
 108:	0000                	unimp
    asm volatile(
 10a:	0b00                	addi	s0,sp,400
 10c:	0000040f          	0x40f
    for(i=0;i<(length/3);i++) {
 110:	0018                	0x18
 112:	0000                	unimp
 114:	0c00                	addi	s0,sp,528
    asm volatile(
 116:	01ba                	slli	gp,gp,0xe
    for(i=0;i<(length/3);i++) {
 118:	0000                	unimp
 11a:	036c                	addi	a1,sp,396
 11c:	0000                	unimp
}
 11e:	00000137          	lui	sp,0x0
    asm volatile(
 122:	010d                	addi	sp,sp,3
 124:	025a                	slli	tp,tp,0x16
 126:	0079                	c.nop	30
 128:	010d                	addi	sp,sp,3
    for(i=0;i<(length/3);i++) {
 12a:	1403055b          	0x1403055b
  jal x0, default_exc_handler
 12e:	0002                	c.slli64	zero
 130:	0d00                	addi	s0,sp,656
  mv  x1, x0
 132:	5c01                	li	s8,-32
 134:	3601                	jal	fffffc34 <_stack_start+0xfffefc34>
  mv  x2, x1
 136:	0c00                	addi	s0,sp,528
  mv  x3, x1
 138:	01ca                	slli	gp,gp,0x12
  mv  x4, x1
 13a:	0000                	unimp
  mv  x5, x1
 13c:	0240                	addi	s0,sp,260
  mv  x6, x1
 13e:	0000                	unimp
  mv  x7, x1
 140:	0159                	addi	sp,sp,22
  mv  x8, x1
 142:	0000                	unimp
  mv  x9, x1
 144:	010d                	addi	sp,sp,3
  mv x10, x1
 146:	025a                	slli	tp,tp,0x16
  mv x11, x1
 148:	0079                	c.nop	30
  mv x12, x1
 14a:	010d                	addi	sp,sp,3
  mv x13, x1
 14c:	1403055b          	0x1403055b
  mv x15, x1
 150:	0002                	c.slli64	zero
  mv x16, x1
 152:	0d00                	addi	s0,sp,656
  mv x17, x1
 154:	5c01                	li	s8,-32
  mv x18, x1
 156:	3601                	jal	fffffc56 <_stack_start+0xfffefc56>
  mv x19, x1
 158:	0c00                	addi	s0,sp,528
  mv x20, x1
 15a:	01e4                	addi	s1,sp,204
  mv x21, x1
 15c:	0000                	unimp
  mv x22, x1
 15e:	02d6                	slli	t0,t0,0x15
  mv x23, x1
 160:	0000                	unimp
  mv x24, x1
 162:	0000017b          	0x17b
  mv x26, x1
 166:	010d                	addi	sp,sp,3
  mv x27, x1
 168:	025a                	slli	tp,tp,0x16
  mv x28, x1
 16a:	0079                	c.nop	30
  mv x29, x1
 16c:	010d                	addi	sp,sp,3
  mv x30, x1
 16e:	1403055b          	0x1403055b
  la   x2, _stack_start
 172:	0002                	c.slli64	zero
 174:	0d00                	addi	s0,sp,656
 176:	5c01                	li	s8,-32
 178:	3601                	jal	fffffc78 <_stack_start+0xfffefc78>
  la x26, _bss_start
 17a:	0e00                	addi	s0,sp,784
 17c:	01f2                	slli	gp,gp,0x1c
  la x27, _bss_end
 17e:	0000                	unimp
 180:	019c                	addi	a5,sp,192
  bge x26, x27, zero_loop_end
 182:	0000                	unimp
 184:	010d                	addi	sp,sp,3
  sw x0, 0(x26)
 186:	025a                	slli	tp,tp,0x16
 188:	0079                	c.nop	30
  addi x26, x26, 4
 18a:	010d                	addi	sp,sp,3
  ble x26, x27, zero_loop
 18c:	0d37015b          	0xd37015b
  addi x10, x0, 0
 190:	5c01                	li	s8,-32
 192:	3601                	jal	fffffc92 <_stack_start+0xfffefc92>
  addi x11, x0, 0
 194:	0000                	unimp
 196:	006b040f          	0x6b040f
  jal x1, main
 19a:	0000                	unimp
int main() {
 19c:	5910                	lw	a2,48(a0)
 19e:	0000                	unimp
 1a0:	0100                	addi	s0,sp,128
 1a2:	0675                	addi	a2,a2,29
*var = 0xDC;
 1a4:	0110                	addi	a2,sp,128
 1a6:	0000                	unimp
 1a8:	001e                	c.slli	zero,0x7
array_add(array1,array2,6); // array1 = {3,6,9,12,15,18}
 1aa:	0000                	unimp
 1ac:	9c01                	0x9c01
*var = 0xDC;
 1ae:	0000020f          	0x20f
array_add(array1,array2,6); // array1 = {3,6,9,12,15,18}
 1b2:	6111                	addi	sp,sp,256
 1b4:	0031                	c.nop	12
 1b6:	7501                	lui	a0,0xfffe0
 1b8:	0f15                	addi	t5,t5,5
*var = 0xCC;
 1ba:	0002                	c.slli64	zero
 1bc:	0100                	addi	s0,sp,128
 1be:	115a                	slli	sp,sp,0x36
array_equ(array1,array2,6); // array1 = {2,4,6,8,10,12}
 1c0:	6f6d                	lui	t5,0x1b
 1c2:	0064                	addi	s1,sp,12
 1c4:	7501                	lui	a0,0xfffe0
 1c6:	5d1d                	li	s10,-25
 1c8:	0000                	unimp
*var = 0xCB;
 1ca:	0100                	addi	s0,sp,128
 1cc:	016b125b          	0x16b125b
  asm volatile(
 1d0:	0000                	unimp
 1d2:	7501                	lui	a0,0xfffe0
 1d4:	5d25                	li	s10,-23
 1d6:	0000                	unimp
*var = 0xBB;
 1d8:	3000                	fld	fs0,32(s0)
 1da:	0000                	unimp
 1dc:	1300                	addi	s0,sp,416
array_sub(array1,array2,6); //  array1 = {2,12,30,0,0,0}
 1de:	0069                	c.nop	26
 1e0:	7a01                	lui	s4,0xfffe0
 1e2:	5d05                	li	s10,-31
*var = 0xBA;
 1e4:	0000                	unimp
 1e6:	5100                	lw	s0,32(a0)
 1e8:	0000                	unimp
array_mod(array1,7,6);  // array1 = {2,5,2,0,0,0}
 1ea:	1400                	addi	s0,sp,544
 1ec:	0215                	addi	tp,tp,5
 1ee:	0000                	unimp
 1f0:	0116                	slli	sp,sp,0x5
*var = 0xAA;
 1f2:	0000                	unimp
 1f4:	0000                	unimp
}
 1f6:	0000                	unimp
*var = 0xAA;
 1f8:	7d01                	lui	s10,0xfffe0
}
 1fa:	0b09                	addi	s6,s6,2
 1fc:	022d                	addi	tp,tp,11
 1fe:	0000                	unimp
 200:	0070                	addi	a2,sp,12
 202:	0000                	unimp
 204:	0002220b          	0x2220b
 208:	8300                	0x8300
 20a:	0000                	unimp
 20c:	0000                	unimp
 20e:	0f00                	addi	s0,sp,912
 210:	5d04                	lw	s1,56(a0)
 212:	0000                	unimp
 214:	1500                	addi	s0,sp,672
 216:	000000ab          	0xab
 21a:	6801                	0x6801
 21c:	0106                	slli	sp,sp,0x1
 21e:	023a                	slli	tp,tp,0xe
 220:	0000                	unimp
 222:	6116                	flw	ft2,68(sp)
 224:	0031                	c.nop	12
 226:	6801                	0x6801
 228:	3a1e                	fld	fs4,480(sp)
 22a:	0002                	c.slli64	zero
 22c:	1600                	addi	s0,sp,800
 22e:	6f6d                	lui	t5,0x1b
 230:	0064                	addi	s1,sp,12
 232:	6801                	0x6801
 234:	0000642f          	0x642f
 238:	0000                	unimp
 23a:	0064040f          	0x64040f
 23e:	0000                	unimp
 240:	cc10                	sw	a2,24(s0)
 242:	0000                	unimp
 244:	0100                	addi	s0,sp,128
 246:	0661                	addi	a2,a2,24
 248:	00e8                	addi	a0,sp,76
 24a:	0000                	unimp
 24c:	0022                	c.slli	zero,0x8
 24e:	0000                	unimp
 250:	9c01                	0x9c01
 252:	02b2                	slli	t0,t0,0xc
 254:	0000                	unimp
 256:	6111                	addi	sp,sp,256
 258:	0031                	c.nop	12
 25a:	6101                	0x6101
 25c:	0f15                	addi	t5,t5,5
 25e:	0002                	c.slli64	zero
 260:	0100                	addi	s0,sp,128
 262:	115a                	slli	sp,sp,0x36
 264:	3261                	jal	fffffbec <_stack_start+0xfffefbec>
 266:	0100                	addi	s0,sp,128
 268:	1d61                	addi	s10,s10,-8
 26a:	0000020f          	0x20f
 26e:	5b01                	li	s6,-32
 270:	6b12                	flw	fs6,4(sp)
 272:	0001                	nop
 274:	0100                	addi	s0,sp,128
 276:	2461                	jal	4fe <_bss_end+0x2a6>
 278:	005d                	c.nop	23
 27a:	0000                	unimp
 27c:	009d                	addi	ra,ra,7
 27e:	0000                	unimp
 280:	01006913          	ori	s2,zero,16
 284:	0562                	slli	a0,a0,0x18
 286:	005d                	c.nop	23
 288:	0000                	unimp
 28a:	00be                	slli	ra,ra,0xf
 28c:	0000                	unimp
 28e:	0002b217          	auipc	tp,0x2b
 292:	fc00                	fsw	fs0,56(s0)
 294:	0000                	unimp
 296:	0a00                	addi	s0,sp,272
 298:	0000                	unimp
 29a:	0100                	addi	s0,sp,128
 29c:	0964                	addi	s1,sp,156
 29e:	0002ca0b          	0x2ca0b
 2a2:	dd00                	sw	s0,56(a0)
 2a4:	0000                	unimp
 2a6:	0b00                	addi	s0,sp,400
 2a8:	000002bf 00000100 	0x100000002bf
 2b0:	0000                	unimp
 2b2:	7215                	lui	tp,0xfffe5
 2b4:	0001                	nop
 2b6:	0100                	addi	s0,sp,128
 2b8:	d601064f          	fnmadd.q	fa2,ft2,ft0,fs10,rne
 2bc:	0002                	c.slli64	zero
 2be:	1600                	addi	s0,sp,800
 2c0:	3161                	jal	ffffff48 <_stack_start+0xfffeff48>
 2c2:	0100                	addi	s0,sp,128
 2c4:	023a1e4f          	fnmadd.d	ft8,fs4,ft3,ft0,rtz
 2c8:	0000                	unimp
 2ca:	6116                	flw	ft2,68(sp)
 2cc:	0032                	c.slli	zero,0xc
 2ce:	4f01                	li	t5,0
 2d0:	3a30                	fld	fa2,112(a2)
 2d2:	0002                	c.slli64	zero
 2d4:	0000                	unimp
 2d6:	a110                	fsd	fa2,0(a0)
 2d8:	0000                	unimp
 2da:	0100                	addi	s0,sp,128
 2dc:	0648                	addi	a0,sp,772
 2de:	00c0                	addi	s0,sp,68
 2e0:	0000                	unimp
 2e2:	0022                	c.slli	zero,0x8
 2e4:	0000                	unimp
 2e6:	9c01                	0x9c01
 2e8:	0348                	addi	a0,sp,388
 2ea:	0000                	unimp
 2ec:	6111                	addi	sp,sp,256
 2ee:	0031                	c.nop	12
 2f0:	4801                	li	a6,0
 2f2:	0f15                	addi	t5,t5,5
 2f4:	0002                	c.slli64	zero
 2f6:	0100                	addi	s0,sp,128
 2f8:	115a                	slli	sp,sp,0x36
 2fa:	3261                	jal	fffffc82 <_stack_start+0xfffefc82>
 2fc:	0100                	addi	s0,sp,128
 2fe:	1e48                	addi	a0,sp,820
 300:	0000020f          	0x20f
 304:	5b01                	li	s6,-32
 306:	6b12                	flw	fs6,4(sp)
 308:	0001                	nop
 30a:	0100                	addi	s0,sp,128
 30c:	2648                	fld	fa0,136(a2)
 30e:	005d                	c.nop	23
 310:	0000                	unimp
 312:	00000123          	sb	zero,2(zero) # 2 <__DYNAMIC+0x2>
 316:	01006913          	ori	s2,zero,16
 31a:	0549                	addi	a0,a0,18
 31c:	005d                	c.nop	23
 31e:	0000                	unimp
 320:	0144                	addi	s1,sp,132
 322:	0000                	unimp
 324:	00034817          	auipc	a6,0x34
 328:	d400                	sw	s0,40(s0)
 32a:	0000                	unimp
 32c:	0a00                	addi	s0,sp,272
 32e:	0000                	unimp
 330:	0100                	addi	s0,sp,128
 332:	600b094b          	fnmsub.s	fs2,fs6,ft0,fa2,rne
 336:	63000003          	lb	zero,1584(zero) # 630 <_bss_end+0x3d8>
 33a:	0001                	nop
 33c:	0b00                	addi	s0,sp,400
 33e:	0355                	addi	t1,t1,21
 340:	0000                	unimp
 342:	0186                	slli	gp,gp,0x1
 344:	0000                	unimp
 346:	0000                	unimp
 348:	4d15                	li	s10,5
 34a:	0001                	nop
 34c:	0100                	addi	s0,sp,128
 34e:	6c010637          	lui	a2,0x6c010
 352:	16000003          	lb	zero,352(zero) # 160 <reset_handler+0x2e>
 356:	3161                	jal	ffffffde <_stack_start+0xfffeffde>
 358:	0100                	addi	s0,sp,128
 35a:	023a1e37          	lui	t3,0x23a1
 35e:	0000                	unimp
 360:	6116                	flw	ft2,68(sp)
 362:	0032                	c.slli	zero,0xc
 364:	3701                	jal	264 <_bss_end+0xc>
 366:	3a30                	fld	fa2,112(a2)
 368:	0002                	c.slli64	zero
 36a:	0000                	unimp
 36c:	7110                	flw	fa2,32(a0)
 36e:	0000                	unimp
 370:	0100                	addi	s0,sp,128
 372:	0630                	addi	a2,sp,776
 374:	0098                	addi	a4,sp,64
 376:	0000                	unimp
 378:	0022                	c.slli	zero,0x8
 37a:	0000                	unimp
 37c:	9c01                	0x9c01
 37e:	03de                	slli	t2,t2,0x17
 380:	0000                	unimp
 382:	6111                	addi	sp,sp,256
 384:	0031                	c.nop	12
 386:	3001                	jal	fffffb86 <_stack_start+0xfffefb86>
 388:	0f15                	addi	t5,t5,5
 38a:	0002                	c.slli64	zero
 38c:	0100                	addi	s0,sp,128
 38e:	115a                	slli	sp,sp,0x36
 390:	3261                	jal	fffffd18 <_stack_start+0xfffefd18>
 392:	0100                	addi	s0,sp,128
 394:	1e30                	addi	a2,sp,824
 396:	0000020f          	0x20f
 39a:	5b01                	li	s6,-32
 39c:	6b12                	flw	fs6,4(sp)
 39e:	0001                	nop
 3a0:	0100                	addi	s0,sp,128
 3a2:	2630                	fld	fa2,72(a2)
 3a4:	005d                	c.nop	23
 3a6:	0000                	unimp
 3a8:	01a9                	addi	gp,gp,10
 3aa:	0000                	unimp
 3ac:	01006913          	ori	s2,zero,16
 3b0:	0531                	addi	a0,a0,12
 3b2:	005d                	c.nop	23
 3b4:	0000                	unimp
 3b6:	01ca                	slli	gp,gp,0x12
 3b8:	0000                	unimp
 3ba:	0003de17          	auipc	t3,0x3d
 3be:	ac00                	fsd	fs0,24(s0)
 3c0:	0000                	unimp
 3c2:	0a00                	addi	s0,sp,272
 3c4:	0000                	unimp
 3c6:	0100                	addi	s0,sp,128
 3c8:	f60b0933          	0xf60b0933
 3cc:	e9000003          	lb	zero,-368(zero) # fffffe90 <_stack_start+0xfffefe90>
 3d0:	0001                	nop
 3d2:	0b00                	addi	s0,sp,400
 3d4:	000003eb          	0x3eb
 3d8:	020c                	addi	a1,sp,256
 3da:	0000                	unimp
 3dc:	0000                	unimp
 3de:	7c15                	lui	s8,0xfffe5
 3e0:	0001                	nop
 3e2:	0100                	addi	s0,sp,128
 3e4:	061c                	addi	a5,sp,768
 3e6:	0201                	addi	tp,tp,0
 3e8:	0004                	0x4
 3ea:	1600                	addi	s0,sp,800
 3ec:	3161                	jal	74 <__DYNAMIC+0x74>
 3ee:	0100                	addi	s0,sp,128
 3f0:	1e1c                	addi	a5,sp,816
 3f2:	023a                	slli	tp,tp,0xe
 3f4:	0000                	unimp
 3f6:	6116                	flw	ft2,68(sp)
 3f8:	0032                	c.slli	zero,0xc
 3fa:	1c01                	addi	s8,s8,-32
 3fc:	3a30                	fld	fa2,112(a2)
 3fe:	0002                	c.slli64	zero
 400:	0000                	unimp
 402:	6115                	addi	sp,sp,288
 404:	0001                	nop
 406:	0100                	addi	s0,sp,128
 408:	0609                	addi	a2,a2,2
 40a:	2601                	jal	70a <_bss_end+0x4b2>
 40c:	0004                	0x4
 40e:	1600                	addi	s0,sp,800
 410:	3161                	jal	98 <array_add>
 412:	0100                	addi	s0,sp,128
 414:	1509                	addi	a0,a0,-30
 416:	0000020f          	0x20f
 41a:	6116                	flw	ft2,68(sp)
 41c:	0032                	c.slli	zero,0xc
 41e:	0901                	addi	s2,s2,0
 420:	0f1e                	slli	t5,t5,0x7
 422:	0002                	c.slli64	zero
 424:	0000                	unimp
 426:	0218                	addi	a4,sp,256
 428:	0004                	0x4
 42a:	8c00                	0x8c00
 42c:	0000                	unimp
 42e:	0600                	addi	s0,sp,768
 430:	0000                	unimp
 432:	0100                	addi	s0,sp,128
 434:	4a9c                	lw	a5,16(a3)
 436:	0004                	0x4
 438:	0b00                	addi	s0,sp,400
 43a:	0000040f          	0x40f
 43e:	0000022f          	0x22f
 442:	1a19                	addi	s4,s4,-26
 444:	0004                	0x4
 446:	0100                	addi	s0,sp,128
 448:	de18005b          	0xde18005b
 44c:	92000003          	lb	zero,-1760(zero) # fffff920 <_stack_start+0xfffef920>
 450:	0000                	unimp
 452:	0600                	addi	s0,sp,768
 454:	0000                	unimp
 456:	0100                	addi	s0,sp,128
 458:	6e9c                	flw	fa5,24(a3)
 45a:	0004                	0x4
 45c:	0b00                	addi	s0,sp,400
 45e:	000003eb          	0x3eb
 462:	0242                	slli	tp,tp,0x10
 464:	0000                	unimp
 466:	f619                	bnez	a2,374 <_bss_end+0x11c>
 468:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
 46c:	4818005b          	0x4818005b
 470:	ba000003          	lb	zero,-1120(zero) # fffffba0 <_stack_start+0xfffefba0>
 474:	0000                	unimp
 476:	0600                	addi	s0,sp,768
 478:	0000                	unimp
 47a:	0100                	addi	s0,sp,128
 47c:	929c                	0x929c
 47e:	0004                	0x4
 480:	0b00                	addi	s0,sp,400
 482:	0355                	addi	t1,t1,21
 484:	0000                	unimp
 486:	0255                	addi	tp,tp,21
 488:	0000                	unimp
 48a:	6019                	c.lui	zero,0x6
 48c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
 490:	b218005b          	0xb218005b
 494:	0002                	c.slli64	zero
 496:	e200                	fsw	fs0,0(a2)
 498:	0000                	unimp
 49a:	0600                	addi	s0,sp,768
 49c:	0000                	unimp
 49e:	0100                	addi	s0,sp,128
 4a0:	b69c                	fsd	fa5,40(a3)
 4a2:	0004                	0x4
 4a4:	0b00                	addi	s0,sp,400
 4a6:	000002bf 00000268 	0x268000002bf
 4ae:	ca19                	beqz	a2,4c4 <_bss_end+0x26c>
 4b0:	0002                	c.slli64	zero
 4b2:	0100                	addi	s0,sp,128
 4b4:	151a005b          	0x151a005b
 4b8:	0002                	c.slli64	zero
 4ba:	0a00                	addi	s0,sp,272
 4bc:	0001                	nop
 4be:	0600                	addi	s0,sp,768
 4c0:	0000                	unimp
 4c2:	0100                	addi	s0,sp,128
 4c4:	0b9c                	addi	a5,sp,464
 4c6:	0222                	slli	tp,tp,0x8
 4c8:	0000                	unimp
 4ca:	0000027b          	0x27b
 4ce:	2d19                	jal	ae4 <_bss_end+0x88c>
 4d0:	0002                	c.slli64	zero
 4d2:	0100                	addi	s0,sp,128
 4d4:	1e00005b          	0x1e00005b
 4d8:	0000                	unimp
 4da:	0200                	addi	s0,sp,256
 4dc:	8c00                	0x8c00
 4de:	0001                	nop
 4e0:	0400                	addi	s0,sp,512
 4e2:	e301                	bnez	a4,4e2 <_bss_end+0x28a>
 4e4:	30000003          	lb	zero,768(zero) # 300 <_bss_end+0xa8>
 4e8:	0000                	unimp
 4ea:	8600                	0x8600
 4ec:	0001                	nop
 4ee:	0800                	addi	s0,sp,16
 4f0:	0000                	unimp
 4f2:	8d00                	0x8d00
 4f4:	0001                	nop
 4f6:	0100                	addi	s0,sp,128
 4f8:	80              	Address 0x00000000000004f8 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <_bss_end+0x3aa>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_add+0x18>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	0105                	addi	sp,sp,1
  32:	4901                	li	s2,0
  34:	00130113          	addi	sp,t1,1
  38:	0600                	addi	s0,sp,768
  3a:	0021                	c.nop	8
  3c:	1349                	addi	t1,t1,-14
  3e:	00000b2f          	0xb2f
  42:	03003407          	fld	fs0,48(zero) # 30 <__DYNAMIC+0x30>
  46:	3a0e                	fld	fs4,224(sp)
  48:	390b3b0b          	0x390b3b0b
  4c:	3f13490b          	0x3f13490b
  50:	0219                	addi	tp,tp,6
  52:	0018                	0x18
  54:	0800                	addi	s0,sp,16
  56:	012e                	slli	sp,sp,0xb
  58:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
  60:	0b39                	addi	s6,s6,14
  62:	1349                	addi	t1,t1,-14
  64:	0111                	addi	sp,sp,4
  66:	0612                	slli	a2,a2,0x4
  68:	1840                	addi	s0,sp,52
  6a:	01194297          	auipc	t0,0x1194
  6e:	09000013          	li	zero,144
  72:	0034                	addi	a3,sp,8
  74:	0b3a0803          	lb	a6,179(s4) # fffe00b3 <_stack_start+0xfffd00b3>
  78:	0b390b3b          	0xb390b3b
  jal x0, default_exc_handler
  7c:	1349                	addi	t1,t1,-14
  7e:	051c                	addi	a5,sp,640
  jal x0, reset_handler
  80:	0000                	unimp
  82:	1d0a                	slli	s10,s10,0x22
  jal x0, default_exc_handler
  84:	3101                	jal	fffffc84 <_stack_start+0xfffefc84>
  86:	12011113          	0x12011113
  jal x0, default_exc_handler
  8a:	5806                	lw	a6,96(sp)
  asm volatile(
  8c:	570b590b          	0x570b590b
}
  90:	0013010b          	0x13010b
    asm volatile(
  94:	0b00                	addi	s0,sp,400
}
  96:	0005                	c.nop	1
    for(i=0;i<(length/3);i++) {
  98:	1331                	addi	t1,t1,-20
  9a:	1702                	slli	a4,a4,0x20
  9c:	0000                	unimp
  9e:	890c                	0x890c
  a0:	0182                	c.slli64	gp
  a2:	1101                	addi	sp,sp,-32
  a4:	3101                	jal	fffffca4 <_stack_start+0xfffefca4>
}
  a6:	00130113          	addi	sp,t1,1
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  aa:	0d00                	addi	s0,sp,656
    asm volatile(
  ac:	828a                	mv	t0,sp
  ae:	0001                	nop
  b0:	1802                	slli	a6,a6,0x20
  b2:	4291                	li	t0,4
  b4:	0018                	0x18
    for(i=0;i<(length/3);i++) {
  b6:	0e00                	addi	s0,sp,784
  b8:	8289                	srli	a3,a3,0x2
    asm volatile(
  ba:	0101                	addi	sp,sp,0
  bc:	0111                	addi	sp,sp,4
}
  be:	1331                	addi	t1,t1,-20
    for(i=0;i<(length/3);i++) {
  c0:	0000                	unimp
  c2:	0b000f0f          	0xb000f0f
  c6:	0013490b          	0x13490b
  ca:	1000                	addi	s0,sp,32
  cc:	012e                	slli	sp,sp,0xb
}
  ce:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    asm volatile(
  d6:	0b39                	addi	s6,s6,14
  d8:	01111927          	0x1111927
  dc:	0612                	slli	a2,a2,0x4
    for(i=0;i<(length/3);i++) {
  de:	1840                	addi	s0,sp,52
  e0:	01194297          	auipc	t0,0x1194
    asm volatile(
  e4:	11000013          	li	zero,272
    for(i=0;i<(length/3);i++) {
  e8:	0005                	c.nop	1
  ea:	0b3a0803          	lb	a6,179(s4)
  ee:	0b390b3b          	0xb390b3b
  f2:	1349                	addi	t1,t1,-14
  f4:	1802                	slli	a6,a6,0x20
}
  f6:	0000                	unimp
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f8:	0512                	slli	a0,a0,0x4
  fa:	0300                	addi	s0,sp,384
    asm volatile(
  fc:	3a0e                	fld	fs4,224(sp)
  fe:	390b3b0b          	0x390b3b0b
 102:	0213490b          	0x213490b
    for(i=0;i<(length/3);i++) {
 106:	13000017          	auipc	zero,0x13000
    asm volatile(
 10a:	0034                	addi	a3,sp,8
 10c:	0b3a0803          	lb	a6,179(s4)
    for(i=0;i<(length/3);i++) {
 110:	0b390b3b          	0xb390b3b
 114:	1349                	addi	t1,t1,-14
    asm volatile(
 116:	1702                	slli	a4,a4,0x20
    for(i=0;i<(length/3);i++) {
 118:	0000                	unimp
 11a:	1d14                	addi	a3,sp,688
 11c:	3101                	jal	fffffd1c <_stack_start+0xfffefd1c>
}
 11e:	55015213          	0x55015213
    asm volatile(
 122:	590b5817          	auipc	a6,0x590b5
 126:	000b570b          	0xb570b
    for(i=0;i<(length/3);i++) {
 12a:	1500                	addi	s0,sp,672
 12c:	012e                	slli	sp,sp,0xb
  jal x0, default_exc_handler
 12e:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
  mv  x2, x1
 136:	0b39                	addi	s6,s6,14
  mv  x3, x1
 138:	0b201927          	0xb201927
  mv  x5, x1
 13c:	1301                	addi	t1,t1,-32
  mv  x6, x1
 13e:	0000                	unimp
  mv  x7, x1
 140:	0516                	slli	a0,a0,0x5
  mv  x8, x1
 142:	0300                	addi	s0,sp,384
  mv  x9, x1
 144:	3a08                	fld	fa0,48(a2)
  mv x10, x1
 146:	390b3b0b          	0x390b3b0b
  mv x12, x1
 14a:	0013490b          	0x13490b
  mv x14, x1
 14e:	1700                	addi	s0,sp,928
  mv x15, x1
 150:	011d                	addi	sp,sp,7
  mv x16, x1
 152:	1331                	addi	t1,t1,-20
  mv x17, x1
 154:	0111                	addi	sp,sp,4
  mv x18, x1
 156:	0612                	slli	a2,a2,0x4
  mv x19, x1
 158:	0b58                	addi	a4,sp,404
  mv x20, x1
 15a:	0b59                	addi	s6,s6,22
  mv x21, x1
 15c:	00000b57          	0xb57
  mv x23, x1
 160:	2e18                	fld	fa4,24(a2)
  mv x24, x1
 162:	3101                	jal	fffffd62 <_stack_start+0xfffefd62>
  mv x25, x1
 164:	12011113          	0x12011113
  mv x27, x1
 168:	4006                	0x4006
  mv x28, x1
 16a:	9718                	0x9718
  mv x29, x1
 16c:	1942                	slli	s2,s2,0x30
  mv x30, x1
 16e:	1301                	addi	t1,t1,-32
  mv x31, x1
 170:	0000                	unimp
  la   x2, _stack_start
 172:	0519                	addi	a0,a0,6
 174:	3100                	fld	fs0,32(a0)
 176:	00180213          	addi	tp,a6,1 # 590b5123 <_stack_start+0x590a5123>
  la x26, _bss_start
 17a:	1a00                	addi	s0,sp,304
 17c:	012e                	slli	sp,sp,0xb
  la x27, _bss_end
 17e:	1331                	addi	t1,t1,-20
 180:	0111                	addi	sp,sp,4
  bge x26, x27, zero_loop_end
 182:	0612                	slli	a2,a2,0x4
 184:	1840                	addi	s0,sp,52
  sw x0, 0(x26)
 186:	00194297          	auipc	t0,0x194
  addi x26, x26, 4
 18a:	0000                	unimp
  ble x26, x27, zero_loop
 18c:	1101                	addi	sp,sp,-32
 18e:	1000                	addi	s0,sp,32
  addi x10, x0, 0
 190:	5506                	lw	a0,96(sp)
 192:	0306                	slli	t1,t1,0x1
  addi x11, x0, 0
 194:	1b0e                	slli	s6,s6,0x23
 196:	250e                	fld	fa0,192(sp)
  jal x1, main
 198:	130e                	slli	t1,t1,0x23
 19a:	0005                	c.nop	1
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
   0:	01d0                	addi	a2,sp,196
   2:	0000                	unimp
   4:	01d8                	addi	a4,sp,196
   6:	0000                	unimp
   8:	0006                	c.slli	zero,0x1
   a:	00021403          	lh	s0,0(tp) # fffe5000 <_stack_start+0xfffd5000>
   e:	9f00                	0x9f00
	...
  18:	01d0                	addi	a2,sp,196
  1a:	0000                	unimp
  1c:	01d8                	addi	a4,sp,196
  1e:	0000                	unimp
  20:	0006                	c.slli	zero,0x1
  22:	00022c03          	lw	s8,0(tp) # 0 <__DYNAMIC>
  26:	9f00                	0x9f00
	...
  30:	0110                	addi	a2,sp,128
  32:	0000                	unimp
  34:	0116                	slli	sp,sp,0x5
  36:	0000                	unimp
  38:	0001                	nop
  3a:	165c                	addi	a5,sp,804
  3c:	0001                	nop
  3e:	2e00                	fld	fs0,24(a2)
  40:	0001                	nop
  42:	0400                	addi	s0,sp,512
  44:	f300                	fsw	fs0,32(a4)
  46:	5c01                	li	s8,-32
  48:	009f 0000 0000      	0x9f
  4e:	0000                	unimp
  50:	1000                	addi	s0,sp,32
  52:	0001                	nop
  54:	1a00                	addi	s0,sp,304
  56:	0001                	nop
  58:	0200                	addi	s0,sp,256
  5a:	3000                	fld	fs0,32(s0)
  5c:	1a9f 0001 2e00      	0x2e0000011a9f
  62:	0001                	nop
  64:	0100                	addi	s0,sp,128
  66:	5f00                	lw	s0,56(a4)
	...
  70:	0120                	addi	s0,sp,136
  72:	0000                	unimp
  74:	012a                	slli	sp,sp,0xa
  76:	0000                	unimp
  78:	0001                	nop
  7a:	0000005b          	0x5b
  jal x0, default_exc_handler
  7e:	0000                	unimp
  jal x0, reset_handler
  80:	0000                	unimp
  82:	2000                	fld	fs0,0(s0)
  jal x0, default_exc_handler
  84:	0001                	nop
  86:	2a00                	fld	fs0,16(a2)
  jal x0, default_exc_handler
  88:	0001                	nop
  8a:	0800                	addi	s0,sp,16
  asm volatile(
  8c:	7f00                	flw	fs0,56(a4)
  8e:	3c00                	fld	fs0,56(s0)
}
  90:	7a1e                	flw	fs4,228(sp)
    asm volatile(
  92:	2200                	fld	fs0,0(a2)
  94:	009f 0000 0000      	0x9f
    for(i=0;i<(length/3);i++) {
  9a:	0000                	unimp
  9c:	e800                	fsw	fs0,16(s0)
  9e:	0000                	unimp
  a0:	ee00                	fsw	fs0,24(a2)
  a2:	0000                	unimp
  a4:	0100                	addi	s0,sp,128
}
  a6:	5c00                	lw	s0,56(s0)
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a8:	00ee                	slli	ra,ra,0x1b
  aa:	0000                	unimp
    asm volatile(
  ac:	010a                	slli	sp,sp,0x2
  ae:	0000                	unimp
  b0:	0004                	0x4
  b2:	9f5c01f3          	0x9f5c01f3
	...
}
  be:	00e8                	addi	a0,sp,76
    for(i=0;i<(length/3);i++) {
  c0:	0000                	unimp
  c2:	00f2                	slli	ra,ra,0x1c
  c4:	0000                	unimp
  c6:	0002                	c.slli64	zero
  c8:	9f30                	0x9f30
  ca:	00f2                	slli	ra,ra,0x1c
  cc:	0000                	unimp
}
  ce:	010a                	slli	sp,sp,0x2
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  d0:	0000                	unimp
  d2:	0001                	nop
    asm volatile(
  d4:	005f 0000 0000      	0x5f
  da:	0000                	unimp
  dc:	fc00                	fsw	fs0,56(s0)
    for(i=0;i<(length/3);i++) {
  de:	0000                	unimp
  e0:	0200                	addi	s0,sp,256
    asm volatile(
  e2:	0001                	nop
  e4:	0600                	addi	s0,sp,768
}
  e6:	7b00                	flw	fs0,48(a4)
    for(i=0;i<(length/3);i++) {
  e8:	7e00                	flw	fs0,56(a2)
  ea:	2200                	fld	fs0,0(a2)
  ec:	029f 0001 0600      	0x6000001029f
  f2:	0001                	nop
  f4:	0100                	addi	s0,sp,128
}
  f6:	5e00                	lw	s0,56(a2)
	...
    asm volatile(
 100:	00fc                	addi	a5,sp,76
 102:	0000                	unimp
 104:	0100                	addi	s0,sp,128
    for(i=0;i<(length/3);i++) {
 106:	0000                	unimp
 108:	0006                	c.slli	zero,0x1
    asm volatile(
 10a:	007a                	c.slli	zero,0x1e
 10c:	007e                	c.slli	zero,0x1f
}
 10e:	9f22                	add	t5,t5,s0
    for(i=0;i<(length/3);i++) {
 110:	0100                	addi	s0,sp,128
 112:	0000                	unimp
 114:	0106                	slli	sp,sp,0x1
    asm volatile(
 116:	0000                	unimp
    for(i=0;i<(length/3);i++) {
 118:	0001                	nop
 11a:	005d                	c.nop	23
 11c:	0000                	unimp
}
 11e:	0000                	unimp
    asm volatile(
 120:	0000                	unimp
 122:	c000                	sw	s0,0(s0)
 124:	0000                	unimp
 126:	c600                	sw	s0,8(a2)
 128:	0000                	unimp
    for(i=0;i<(length/3);i++) {
 12a:	0100                	addi	s0,sp,128
 12c:	5c00                	lw	s0,56(s0)
  jal x0, default_exc_handler
 12e:	00c6                	slli	ra,ra,0x11
 130:	0000                	unimp
  mv  x1, x0
 132:	00e2                	slli	ra,ra,0x18
 134:	0000                	unimp
  mv  x2, x1
 136:	0004                	0x4
  mv  x3, x1
 138:	9f5c01f3          	0x9f5c01f3
	...
  mv  x9, x1
 144:	00c0                	addi	s0,sp,68
  mv x10, x1
 146:	0000                	unimp
  mv x11, x1
 148:	00ca                	slli	ra,ra,0x12
  mv x12, x1
 14a:	0000                	unimp
  mv x13, x1
 14c:	0002                	c.slli64	zero
  mv x14, x1
 14e:	9f30                	0x9f30
  mv x15, x1
 150:	00ca                	slli	ra,ra,0x12
  mv x16, x1
 152:	0000                	unimp
  mv x17, x1
 154:	00e2                	slli	ra,ra,0x18
  mv x18, x1
 156:	0000                	unimp
  mv x19, x1
 158:	0001                	nop
  mv x20, x1
 15a:	005f 0000 0000      	0x5f
  mv x23, x1
 160:	0000                	unimp
  mv x24, x1
 162:	d400                	sw	s0,40(s0)
  mv x25, x1
 164:	0000                	unimp
  mv x26, x1
 166:	da00                	sw	s0,48(a2)
  mv x27, x1
 168:	0000                	unimp
  mv x28, x1
 16a:	0600                	addi	s0,sp,768
  mv x29, x1
 16c:	7b00                	flw	fs0,48(a4)
  mv x30, x1
 16e:	7e00                	flw	fs0,56(a2)
  mv x31, x1
 170:	2200                	fld	fs0,0(a2)
  la   x2, _stack_start
 172:	da9f 0000 de00      	0xde000000da9f
 178:	0000                	unimp
  la x26, _bss_start
 17a:	0100                	addi	s0,sp,128
 17c:	5e00                	lw	s0,56(a2)
	...
  sw x0, 0(x26)
 186:	00d4                	addi	a3,sp,68
 188:	0000                	unimp
  addi x26, x26, 4
 18a:	00d8                	addi	a4,sp,68
  ble x26, x27, zero_loop
 18c:	0000                	unimp
 18e:	0006                	c.slli	zero,0x1
  addi x10, x0, 0
 190:	007a                	c.slli	zero,0x1e
 192:	007e                	c.slli	zero,0x1f
  addi x11, x0, 0
 194:	9f22                	add	t5,t5,s0
 196:	00d8                	addi	a4,sp,68
  jal x1, main
 198:	0000                	unimp
 19a:	00de                	slli	ra,ra,0x17
int main() {
 19c:	0000                	unimp
 19e:	0001                	nop
 1a0:	005d                	c.nop	23
 1a2:	0000                	unimp
*var = 0xDC;
 1a4:	0000                	unimp
 1a6:	0000                	unimp
 1a8:	9800                	0x9800
array_add(array1,array2,6); // array1 = {3,6,9,12,15,18}
 1aa:	0000                	unimp
 1ac:	9e00                	0x9e00
*var = 0xDC;
 1ae:	0000                	unimp
array_add(array1,array2,6); // array1 = {3,6,9,12,15,18}
 1b0:	0100                	addi	s0,sp,128
 1b2:	5c00                	lw	s0,56(s0)
 1b4:	009e                	slli	ra,ra,0x7
 1b6:	0000                	unimp
 1b8:	00ba                	slli	ra,ra,0xe
*var = 0xCC;
 1ba:	0000                	unimp
 1bc:	0004                	0x4
 1be:	9f5c01f3          	0x9f5c01f3
	...
*var = 0xCB;
 1ca:	0098                	addi	a4,sp,64
 1cc:	0000                	unimp
 1ce:	00a2                	slli	ra,ra,0x8
  asm volatile(
 1d0:	0000                	unimp
 1d2:	0002                	c.slli64	zero
 1d4:	9f30                	0x9f30
 1d6:	00a2                	slli	ra,ra,0x8
*var = 0xBB;
 1d8:	0000                	unimp
 1da:	00ba                	slli	ra,ra,0xe
 1dc:	0000                	unimp
array_sub(array1,array2,6); //  array1 = {2,12,30,0,0,0}
 1de:	0001                	nop
 1e0:	005f 0000 0000      	0x5f
*var = 0xBA;
 1e6:	0000                	unimp
 1e8:	ac00                	fsd	fs0,24(s0)
array_mod(array1,7,6);  // array1 = {2,5,2,0,0,0}
 1ea:	0000                	unimp
 1ec:	b200                	fsd	fs0,32(a2)
 1ee:	0000                	unimp
 1f0:	0600                	addi	s0,sp,768
*var = 0xAA;
 1f2:	7b00                	flw	fs0,48(a4)
 1f4:	7e00                	flw	fs0,56(a2)
}
 1f6:	2200                	fld	fs0,0(a2)
*var = 0xAA;
 1f8:	b29f 0000 b600      	0xb6000000b29f
}
 1fe:	0000                	unimp
 200:	0100                	addi	s0,sp,128
 202:	5e00                	lw	s0,56(a2)
	...
 20c:	00ac                	addi	a1,sp,72
 20e:	0000                	unimp
 210:	00b0                	addi	a2,sp,72
 212:	0000                	unimp
 214:	0006                	c.slli	zero,0x1
 216:	007a                	c.slli	zero,0x1e
 218:	007e                	c.slli	zero,0x1f
 21a:	9f22                	add	t5,t5,s0
 21c:	00b0                	addi	a2,sp,72
 21e:	0000                	unimp
 220:	00b6                	slli	ra,ra,0xd
 222:	0000                	unimp
 224:	0001                	nop
 226:	005d                	c.nop	23
 228:	0000                	unimp
 22a:	0000                	unimp
 22c:	0000                	unimp
 22e:	8c00                	0x8c00
 230:	0000                	unimp
 232:	9000                	0x9000
 234:	0000                	unimp
 236:	0100                	addi	s0,sp,128
 238:	5a00                	lw	s0,48(a2)
	...
 242:	0092                	slli	ra,ra,0x4
 244:	0000                	unimp
 246:	0096                	slli	ra,ra,0x5
 248:	0000                	unimp
 24a:	0001                	nop
 24c:	005a                	c.slli	zero,0x16
 24e:	0000                	unimp
 250:	0000                	unimp
 252:	0000                	unimp
 254:	ba00                	fsd	fs0,48(a2)
 256:	0000                	unimp
 258:	be00                	fsd	fs0,56(a2)
 25a:	0000                	unimp
 25c:	0100                	addi	s0,sp,128
 25e:	5a00                	lw	s0,48(a2)
	...
 268:	00e2                	slli	ra,ra,0x18
 26a:	0000                	unimp
 26c:	00e6                	slli	ra,ra,0x19
 26e:	0000                	unimp
 270:	0001                	nop
 272:	005a                	c.slli	zero,0x16
 274:	0000                	unimp
 276:	0000                	unimp
 278:	0000                	unimp
 27a:	0a00                	addi	s0,sp,272
 27c:	0001                	nop
 27e:	0e00                	addi	s0,sp,784
 280:	0001                	nop
 282:	0100                	addi	s0,sp,128
 284:	5a00                	lw	s0,48(a2)
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	00a2                	slli	ra,ra,0x8
  16:	0000                	unimp
  18:	019c                	addi	a5,sp,192
  1a:	0000                	unimp
  1c:	0068                	addi	a0,sp,12
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	000004d7          	0x4d7
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	012e                	slli	sp,sp,0xb
  3a:	0000                	unimp
  3c:	006e                	c.slli	zero,0x1b
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	0116                	slli	sp,sp,0x5
   2:	0000                	unimp
   4:	0118                	addi	a4,sp,128
   6:	0000                	unimp
   8:	0120                	addi	s0,sp,136
   a:	0000                	unimp
   c:	012a                	slli	sp,sp,0xa
	...
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	012e                	slli	sp,sp,0xb
  1e:	0000                	unimp
  20:	019c                	addi	a5,sp,192
  22:	0000                	unimp
  24:	0204                	addi	s1,sp,256
	...
  2e:	0000                	unimp
  30:	ffff                	0xffff
  32:	ffff                	0xffff
  34:	0000                	unimp
  36:	0000                	unimp
  38:	012e                	slli	sp,sp,0xb
  3a:	0000                	unimp
  3c:	019c                	addi	a5,sp,192
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	03df 0000 0003      	0x3000003df
   6:	001e                	c.slli	zero,0x7
   8:	0000                	unimp
   a:	0101                	addi	sp,sp,0
   c:	000d0efb          	0xd0efb
  10:	0101                	addi	sp,sp,0
  12:	0101                	addi	sp,sp,0
  14:	0000                	unimp
  16:	0100                	addi	s0,sp,128
  18:	0000                	unimp
  1a:	0001                	nop
  1c:	7261                	lui	tp,0xffff8
  1e:	6172                	flw	ft2,28(sp)
  20:	2e79                	jal	3be <_bss_end+0x166>
  22:	00000063          	beqz	zero,22 <__DYNAMIC+0x22>
  26:	0000                	unimp
  28:	2205                	jal	148 <reset_handler+0x16>
  2a:	0500                	addi	s0,sp,640
  2c:	8c02                	jr	s8
  2e:	0000                	unimp
  30:	1a00                	addi	s0,sp,304
  32:	0305                	addi	t1,t1,1
  34:	00090603          	lb	a2,0(s2)
  38:	0100                	addi	s0,sp,128
  3a:	0105                	addi	sp,sp,1
  3c:	04090903          	lb	s2,64(s2)
  40:	0100                	addi	s0,sp,128
  42:	0306                	slli	t1,t1,0x1
  44:	0901                	addi	s2,s2,0
  46:	0000                	unimp
  48:	0501                	addi	a0,a0,0
  4a:	03030633          	mul	a2,t1,a6
  4e:	0209                	addi	tp,tp,2
  50:	0100                	addi	s0,sp,128
  52:	0505                	addi	a0,a0,1
  54:	00090703          	lb	a4,0(s2)
  58:	0100                	addi	s0,sp,128
  5a:	04090903          	lb	s2,64(s2)
  5e:	0100                	addi	s0,sp,128
  60:	0105                	addi	sp,sp,1
  62:	0306                	slli	t1,t1,0x1
  64:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
  68:	0501                	addi	a0,a0,0
  6a:	062e                	slli	a2,a2,0xb
  6c:	02090103          	lb	sp,32(s2)
  70:	0100                	addi	s0,sp,128
  72:	0105                	addi	sp,sp,1
  74:	00090103          	lb	sp,0(s2)
  78:	0100                	addi	s0,sp,128
  7a:	0505                	addi	a0,a0,1
  jal x0, default_exc_handler
  7c:	00090103          	lb	sp,0(s2)
  jal x0, reset_handler
  80:	0100                	addi	s0,sp,128
  82:	1605                	addi	a2,a2,-31
  jal x0, default_exc_handler
  84:	0306                	slli	t1,t1,0x1
  86:	0900                	addi	s0,sp,144
  jal x0, default_exc_handler
  88:	0000                	unimp
  8a:	0501                	addi	a0,a0,0
  asm volatile(
  8c:	030a                	slli	t1,t1,0x2
  8e:	0900                	addi	s0,sp,144
}
  90:	0008                	0x8
    asm volatile(
  92:	0501                	addi	a0,a0,0
  94:	000d                	c.nop	3
}
  96:	0402                	c.slli64	s0
    for(i=0;i<(length/3);i++) {
  98:	0601                	addi	a2,a2,0
  9a:	02090003          	lb	zero,32(s2)
  9e:	0100                	addi	s0,sp,128
  a0:	0505                	addi	a0,a0,1
  a2:	0200                	addi	s0,sp,256
  a4:	0104                	addi	s1,sp,128
}
  a6:	0306                	slli	t1,t1,0x1
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a8:	0900                	addi	s0,sp,144
  aa:	0000                	unimp
    asm volatile(
  ac:	0501                	addi	a0,a0,0
  ae:	0301                	addi	t1,t1,0
  b0:	00040903          	lb	s2,0(s0) # c000 <_stack_len+0x8000>
  b4:	0501                	addi	a0,a0,0
    for(i=0;i<(length/3);i++) {
  b6:	0009                	c.nop	2
  b8:	0402                	c.slli64	s0
    asm volatile(
  ba:	7e030603          	lb	a2,2016(t1)
}
  be:	0209                	addi	tp,tp,2
    for(i=0;i<(length/3);i++) {
  c0:	0100                	addi	s0,sp,128
  c2:	0505                	addi	a0,a0,1
  c4:	0200                	addi	s0,sp,256
  c6:	0304                	addi	s1,sp,384
  c8:	04097003          	0x4097003
  cc:	0100                	addi	s0,sp,128
}
  ce:	0200                	addi	s0,sp,256
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  d0:	0304                	addi	s1,sp,384
  d2:	0a090903          	lb	s2,160(s2)
    asm volatile(
  d6:	0100                	addi	s0,sp,128
  d8:	1a05                	addi	s4,s4,-31
  da:	0200                	addi	s0,sp,256
  dc:	0304                	addi	s1,sp,384
    for(i=0;i<(length/3);i++) {
  de:	00090603          	lb	a2,0(s2)
    asm volatile(
  e2:	0100                	addi	s0,sp,128
  e4:	1b05                	addi	s6,s6,-31
}
  e6:	0200                	addi	s0,sp,256
    for(i=0;i<(length/3);i++) {
  e8:	0304                	addi	s1,sp,384
  ea:	0306                	slli	t1,t1,0x1
  ec:	0900                	addi	s0,sp,144
  ee:	0000                	unimp
  f0:	0501                	addi	a0,a0,0
  f2:	0634                	addi	a3,sp,776
  f4:	04090503          	lb	a0,64(s2)
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f8:	0100                	addi	s0,sp,128
  fa:	0505                	addi	a0,a0,1
    asm volatile(
  fc:	00090603          	lb	a2,0(s2)
 100:	0100                	addi	s0,sp,128
 102:	04090903          	lb	s2,64(s2)
    for(i=0;i<(length/3);i++) {
 106:	0100                	addi	s0,sp,128
 108:	0105                	addi	sp,sp,1
    asm volatile(
 10a:	0306                	slli	t1,t1,0x1
 10c:	0901                	addi	s2,s2,0
}
 10e:	0000                	unimp
    for(i=0;i<(length/3);i++) {
 110:	0501                	addi	a0,a0,0
 112:	062d                	addi	a2,a2,11
 114:	02090103          	lb	sp,32(s2)
 118:	0100                	addi	s0,sp,128
 11a:	0105                	addi	sp,sp,1
 11c:	00090103          	lb	sp,0(s2)
    asm volatile(
 120:	0100                	addi	s0,sp,128
 122:	0505                	addi	a0,a0,1
 124:	00090103          	lb	sp,0(s2)
 128:	0100                	addi	s0,sp,128
    for(i=0;i<(length/3);i++) {
 12a:	1605                	addi	a2,a2,-31
 12c:	0306                	slli	t1,t1,0x1
  jal x0, default_exc_handler
 12e:	0900                	addi	s0,sp,144
 130:	0000                	unimp
  mv  x1, x0
 132:	0501                	addi	a0,a0,0
 134:	030a                	slli	t1,t1,0x2
  mv  x2, x1
 136:	0900                	addi	s0,sp,144
  mv  x3, x1
 138:	0008                	0x8
  mv  x4, x1
 13a:	0501                	addi	a0,a0,0
  mv  x5, x1
 13c:	000d                	c.nop	3
  mv  x6, x1
 13e:	0402                	c.slli64	s0
  mv  x7, x1
 140:	0601                	addi	a2,a2,0
  mv  x8, x1
 142:	02090003          	lb	zero,32(s2)
  mv x10, x1
 146:	0100                	addi	s0,sp,128
  mv x11, x1
 148:	0505                	addi	a0,a0,1
  mv x12, x1
 14a:	0200                	addi	s0,sp,256
  mv x13, x1
 14c:	0104                	addi	s1,sp,128
  mv x14, x1
 14e:	0306                	slli	t1,t1,0x1
  mv x15, x1
 150:	0900                	addi	s0,sp,144
  mv x16, x1
 152:	0000                	unimp
  mv x17, x1
 154:	0501                	addi	a0,a0,0
  mv x18, x1
 156:	0301                	addi	t1,t1,0
  mv x19, x1
 158:	00040903          	lb	s2,0(s0)
  mv x21, x1
 15c:	0501                	addi	a0,a0,0
  mv x22, x1
 15e:	0009                	c.nop	2
  mv x23, x1
 160:	0402                	c.slli64	s0
  mv x24, x1
 162:	7e030603          	lb	a2,2016(t1)
  mv x26, x1
 166:	0209                	addi	tp,tp,2
  mv x27, x1
 168:	0100                	addi	s0,sp,128
  mv x28, x1
 16a:	0505                	addi	a0,a0,1
  mv x29, x1
 16c:	0200                	addi	s0,sp,256
  mv x30, x1
 16e:	0304                	addi	s1,sp,384
  mv x31, x1
 170:	04097203          	0x4097203
  la   x2, _stack_start
 174:	0100                	addi	s0,sp,128
 176:	0200                	addi	s0,sp,256
 178:	0304                	addi	s1,sp,384
  la x26, _bss_start
 17a:	0a090903          	lb	s2,160(s2)
  la x27, _bss_end
 17e:	0100                	addi	s0,sp,128
 180:	1a05                	addi	s4,s4,-31
  bge x26, x27, zero_loop_end
 182:	0200                	addi	s0,sp,256
 184:	0304                	addi	s1,sp,384
  sw x0, 0(x26)
 186:	00090403          	lb	s0,0(s2)
  addi x26, x26, 4
 18a:	0100                	addi	s0,sp,128
  ble x26, x27, zero_loop
 18c:	1b05                	addi	s6,s6,-31
 18e:	0200                	addi	s0,sp,256
  addi x10, x0, 0
 190:	0304                	addi	s1,sp,384
 192:	0306                	slli	t1,t1,0x1
  addi x11, x0, 0
 194:	0900                	addi	s0,sp,144
 196:	0000                	unimp
  jal x1, main
 198:	0501                	addi	a0,a0,0
 19a:	05030633          	0x5030633
int main() {
 19e:	0409                	addi	s0,s0,2
 1a0:	0100                	addi	s0,sp,128
 1a2:	0505                	addi	a0,a0,1
*var = 0xDC;
 1a4:	00090603          	lb	a2,0(s2)
 1a8:	0100                	addi	s0,sp,128
array_add(array1,array2,6); // array1 = {3,6,9,12,15,18}
 1aa:	04090903          	lb	s2,64(s2)
*var = 0xDC;
 1ae:	0100                	addi	s0,sp,128
array_add(array1,array2,6); // array1 = {3,6,9,12,15,18}
 1b0:	0105                	addi	sp,sp,1
 1b2:	0306                	slli	t1,t1,0x1
 1b4:	0902                	c.slli64	s2
 1b6:	0000                	unimp
 1b8:	0501                	addi	a0,a0,0
*var = 0xCC;
 1ba:	062c                	addi	a1,sp,776
 1bc:	02090103          	lb	sp,32(s2)
array_equ(array1,array2,6); // array1 = {2,4,6,8,10,12}
 1c0:	0100                	addi	s0,sp,128
 1c2:	0105                	addi	sp,sp,1
 1c4:	00090103          	lb	sp,0(s2)
 1c8:	0100                	addi	s0,sp,128
*var = 0xCB;
 1ca:	0505                	addi	a0,a0,1
 1cc:	00090103          	lb	sp,0(s2)
  asm volatile(
 1d0:	0100                	addi	s0,sp,128
 1d2:	1605                	addi	a2,a2,-31
 1d4:	0306                	slli	t1,t1,0x1
 1d6:	0900                	addi	s0,sp,144
*var = 0xBB;
 1d8:	0000                	unimp
 1da:	0501                	addi	a0,a0,0
 1dc:	030a                	slli	t1,t1,0x2
array_sub(array1,array2,6); //  array1 = {2,12,30,0,0,0}
 1de:	0900                	addi	s0,sp,144
 1e0:	0008                	0x8
 1e2:	0501                	addi	a0,a0,0
*var = 0xBA;
 1e4:	000d                	c.nop	3
 1e6:	0402                	c.slli64	s0
 1e8:	0601                	addi	a2,a2,0
array_mod(array1,7,6);  // array1 = {2,5,2,0,0,0}
 1ea:	02090003          	lb	zero,32(s2)
 1ee:	0100                	addi	s0,sp,128
 1f0:	0505                	addi	a0,a0,1
*var = 0xAA;
 1f2:	0200                	addi	s0,sp,256
 1f4:	0104                	addi	s1,sp,128
}
 1f6:	0306                	slli	t1,t1,0x1
*var = 0xAA;
 1f8:	0900                	addi	s0,sp,144
}
 1fa:	0000                	unimp
 1fc:	0501                	addi	a0,a0,0
 1fe:	0301                	addi	t1,t1,0
 200:	00040903          	lb	s2,0(s0)
 204:	0501                	addi	a0,a0,0
 206:	0009                	c.nop	2
 208:	0402                	c.slli64	s0
 20a:	7e030603          	lb	a2,2016(t1)
 20e:	0209                	addi	tp,tp,2
 210:	0100                	addi	s0,sp,128
 212:	0505                	addi	a0,a0,1
 214:	0200                	addi	s0,sp,256
 216:	0304                	addi	s1,sp,384
 218:	04097103          	0x4097103
 21c:	0100                	addi	s0,sp,128
 21e:	0200                	addi	s0,sp,256
 220:	0304                	addi	s1,sp,384
 222:	0a090903          	lb	s2,160(s2)
 226:	0100                	addi	s0,sp,128
 228:	1a05                	addi	s4,s4,-31
 22a:	0200                	addi	s0,sp,256
 22c:	0304                	addi	s1,sp,384
 22e:	00090503          	lb	a0,0(s2)
 232:	0100                	addi	s0,sp,128
 234:	1b05                	addi	s6,s6,-31
 236:	0200                	addi	s0,sp,256
 238:	0304                	addi	s1,sp,384
 23a:	0306                	slli	t1,t1,0x1
 23c:	0900                	addi	s0,sp,144
 23e:	0000                	unimp
 240:	0501                	addi	a0,a0,0
 242:	0634                	addi	a3,sp,776
 244:	04090503          	lb	a0,64(s2)
 248:	0100                	addi	s0,sp,128
 24a:	0505                	addi	a0,a0,1
 24c:	00090203          	lb	tp,0(s2)
 250:	0100                	addi	s0,sp,128
 252:	04090903          	lb	s2,64(s2)
 256:	0100                	addi	s0,sp,128
 258:	0105                	addi	sp,sp,1
 25a:	0306                	slli	t1,t1,0x1
 25c:	0901                	addi	s2,s2,0
 25e:	0000                	unimp
 260:	0501                	addi	a0,a0,0
 262:	062c                	addi	a1,sp,776
 264:	02090103          	lb	sp,32(s2)
 268:	0100                	addi	s0,sp,128
 26a:	0105                	addi	sp,sp,1
 26c:	00090503          	lb	a0,0(s2)
 270:	0100                	addi	s0,sp,128
 272:	0505                	addi	a0,a0,1
 274:	00090203          	lb	tp,0(s2)
 278:	0100                	addi	s0,sp,128
 27a:	1605                	addi	a2,a2,-31
 27c:	0306                	slli	t1,t1,0x1
 27e:	0900                	addi	s0,sp,144
 280:	0000                	unimp
 282:	0501                	addi	a0,a0,0
 284:	0305                	addi	t1,t1,1
 286:	096e                	slli	s2,s2,0x1b
 288:	0006                	c.slli	zero,0x1
 28a:	0501                	addi	a0,a0,0
 28c:	030a                	slli	t1,t1,0x2
 28e:	0912                	slli	s2,s2,0x4
 290:	0002                	c.slli64	zero
 292:	0501                	addi	a0,a0,0
 294:	000d                	c.nop	3
 296:	0402                	c.slli64	s0
 298:	0601                	addi	a2,a2,0
 29a:	02090003          	lb	zero,32(s2)
 29e:	0100                	addi	s0,sp,128
 2a0:	0505                	addi	a0,a0,1
 2a2:	0200                	addi	s0,sp,256
 2a4:	0104                	addi	s1,sp,128
 2a6:	0306                	slli	t1,t1,0x1
 2a8:	0900                	addi	s0,sp,144
 2aa:	0000                	unimp
 2ac:	0501                	addi	a0,a0,0
 2ae:	0301                	addi	t1,t1,0
 2b0:	0904                	addi	s1,sp,144
 2b2:	0004                	0x4
 2b4:	0501                	addi	a0,a0,0
 2b6:	0009                	c.nop	2
 2b8:	0402                	c.slli64	s0
 2ba:	7d030603          	lb	a2,2000(t1)
 2be:	0209                	addi	tp,tp,2
 2c0:	0100                	addi	s0,sp,128
 2c2:	0505                	addi	a0,a0,1
 2c4:	0200                	addi	s0,sp,256
 2c6:	0304                	addi	s1,sp,384
 2c8:	00096d03          	0x96d03
 2cc:	0100                	addi	s0,sp,128
 2ce:	0200                	addi	s0,sp,256
 2d0:	0304                	addi	s1,sp,384
 2d2:	0a090903          	lb	s2,160(s2)
 2d6:	0100                	addi	s0,sp,128
 2d8:	1a05                	addi	s4,s4,-31
 2da:	0200                	addi	s0,sp,256
 2dc:	0304                	addi	s1,sp,384
 2de:	00090903          	lb	s2,0(s2)
 2e2:	0100                	addi	s0,sp,128
 2e4:	1b05                	addi	s6,s6,-31
 2e6:	0200                	addi	s0,sp,256
 2e8:	0304                	addi	s1,sp,384
 2ea:	0306                	slli	t1,t1,0x1
 2ec:	0900                	addi	s0,sp,144
 2ee:	0000                	unimp
 2f0:	0901                	addi	s2,s2,0
 2f2:	0004                	0x4
 2f4:	0100                	addi	s0,sp,128
 2f6:	0501                	addi	a0,a0,0
 2f8:	000c                	0xc
 2fa:	0205                	addi	tp,tp,1
 2fc:	019c                	addi	a5,sp,192
 2fe:	0000                	unimp
 300:	01018603          	lb	a2,16(gp)
 304:	0105                	addi	sp,sp,1
 306:	00091003          	lh	zero,0(s2)
 30a:	0100                	addi	s0,sp,128
 30c:	00090203          	lb	tp,0(s2)
 310:	0100                	addi	s0,sp,128
 312:	0c05                	addi	s8,s8,1
 314:	0306                	slli	t1,t1,0x1
 316:	096e                	slli	s2,s2,0x1b
 318:	0000                	unimp
 31a:	0501                	addi	a0,a0,0
 31c:	0306                	slli	t1,t1,0x1
 31e:	0912                	slli	s2,s2,0x4
 320:	0008                	0x8
 322:	0501                	addi	a0,a0,0
 324:	0301                	addi	t1,t1,0
 326:	0902                	c.slli64	s2
 328:	0006                	c.slli	zero,0x1
 32a:	0501                	addi	a0,a0,0
 32c:	0306                	slli	t1,t1,0x1
 32e:	097e                	slli	s2,s2,0x1f
 330:	0004                	0x4
 332:	0501                	addi	a0,a0,0
 334:	0601                	addi	a2,a2,0
 336:	02090203          	lb	tp,32(s2)
 33a:	0100                	addi	s0,sp,128
 33c:	0a090203          	lb	tp,160(s2)
 340:	0100                	addi	s0,sp,128
 342:	0605                	addi	a2,a2,1
 344:	0306                	slli	t1,t1,0x1
 346:	0900                	addi	s0,sp,144
 348:	0000                	unimp
 34a:	0501                	addi	a0,a0,0
 34c:	0601                	addi	a2,a2,0
 34e:	06090203          	lb	tp,96(s2)
 352:	0100                	addi	s0,sp,128
 354:	0a090203          	lb	tp,160(s2)
 358:	0100                	addi	s0,sp,128
 35a:	0605                	addi	a2,a2,1
 35c:	0306                	slli	t1,t1,0x1
 35e:	0900                	addi	s0,sp,144
 360:	0000                	unimp
 362:	0501                	addi	a0,a0,0
 364:	0601                	addi	a2,a2,0
 366:	06090203          	lb	tp,96(s2)
 36a:	0100                	addi	s0,sp,128
 36c:	0305                	addi	t1,t1,1
 36e:	097eec03          	0x97eec03
 372:	0000                	unimp
 374:	0501                	addi	a0,a0,0
 376:	0301                	addi	t1,t1,0
 378:	0909                	addi	s2,s2,2
 37a:	0008                	0x8
 37c:	0301                	addi	t1,t1,0
 37e:	018d                	addi	gp,gp,3
 380:	0009                	c.nop	2
 382:	0100                	addi	s0,sp,128
 384:	0605                	addi	a2,a2,1
 386:	0306                	slli	t1,t1,0x1
 388:	0900                	addi	s0,sp,144
 38a:	0000                	unimp
 38c:	0501                	addi	a0,a0,0
 38e:	0601                	addi	a2,a2,0
 390:	06090203          	lb	tp,96(s2)
 394:	0100                	addi	s0,sp,128
 396:	06090203          	lb	tp,96(s2)
 39a:	0100                	addi	s0,sp,128
 39c:	0605                	addi	a2,a2,1
 39e:	0306                	slli	t1,t1,0x1
 3a0:	0900                	addi	s0,sp,144
 3a2:	0000                	unimp
 3a4:	0501                	addi	a0,a0,0
 3a6:	0601                	addi	a2,a2,0
 3a8:	06090203          	lb	tp,96(s2)
 3ac:	0100                	addi	s0,sp,128
 3ae:	08090203          	lb	tp,128(s2)
 3b2:	0100                	addi	s0,sp,128
 3b4:	0605                	addi	a2,a2,1
 3b6:	0306                	slli	t1,t1,0x1
 3b8:	0900                	addi	s0,sp,144
 3ba:	0000                	unimp
 3bc:	0501                	addi	a0,a0,0
 3be:	0301                	addi	t1,t1,0
 3c0:	00040903          	lb	s2,0(s0)
 3c4:	0501                	addi	a0,a0,0
 3c6:	0306                	slli	t1,t1,0x1
 3c8:	097d                	addi	s2,s2,31
 3ca:	0002                	c.slli64	zero
 3cc:	0501                	addi	a0,a0,0
 3ce:	0601                	addi	a2,a2,0
 3d0:	02090203          	lb	tp,32(s2)
 3d4:	0100                	addi	s0,sp,128
 3d6:	0306                	slli	t1,t1,0x1
 3d8:	0901                	addi	s2,s2,0
 3da:	0000                	unimp
 3dc:	0901                	addi	s2,s2,0
 3de:	000a                	c.slli	zero,0x2
 3e0:	0100                	addi	s0,sp,128
 3e2:	5001                	c.li	zero,-32
 3e4:	0001                	nop
 3e6:	0300                	addi	s0,sp,384
 3e8:	1d00                	addi	s0,sp,688
 3ea:	0000                	unimp
 3ec:	0100                	addi	s0,sp,128
 3ee:	fb01                	bnez	a4,2fe <_bss_end+0xa6>
 3f0:	0d0e                	slli	s10,s10,0x3
 3f2:	0100                	addi	s0,sp,128
 3f4:	0101                	addi	sp,sp,0
 3f6:	0001                	nop
 3f8:	0000                	unimp
 3fa:	0001                	nop
 3fc:	0100                	addi	s0,sp,128
 3fe:	6300                	flw	fs0,0(a4)
 400:	7472                	flw	fs0,60(sp)
 402:	2e30                	fld	fa2,88(a2)
 404:	00000053          	fadd.s	ft0,ft0,ft0,rne
 408:	0000                	unimp
 40a:	0500                	addi	s0,sp,640
 40c:	2e02                	fld	ft8,0(sp)
 40e:	0001                	nop
 410:	1500                	addi	s0,sp,672
 412:	04090403          	lb	s0,64(s2)
 416:	0100                	addi	s0,sp,128
 418:	04090103          	lb	sp,64(s2)
 41c:	0100                	addi	s0,sp,128
 41e:	02090103          	lb	sp,32(s2)
 422:	0100                	addi	s0,sp,128
 424:	02090103          	lb	sp,32(s2)
 428:	0100                	addi	s0,sp,128
 42a:	02090103          	lb	sp,32(s2)
 42e:	0100                	addi	s0,sp,128
 430:	02090103          	lb	sp,32(s2)
 434:	0100                	addi	s0,sp,128
 436:	02090103          	lb	sp,32(s2)
 43a:	0100                	addi	s0,sp,128
 43c:	02090103          	lb	sp,32(s2)
 440:	0100                	addi	s0,sp,128
 442:	02090103          	lb	sp,32(s2)
 446:	0100                	addi	s0,sp,128
 448:	02090103          	lb	sp,32(s2)
 44c:	0100                	addi	s0,sp,128
 44e:	02090103          	lb	sp,32(s2)
 452:	0100                	addi	s0,sp,128
 454:	02090103          	lb	sp,32(s2)
 458:	0100                	addi	s0,sp,128
 45a:	02090103          	lb	sp,32(s2)
 45e:	0100                	addi	s0,sp,128
 460:	02090103          	lb	sp,32(s2)
 464:	0100                	addi	s0,sp,128
 466:	02090103          	lb	sp,32(s2)
 46a:	0100                	addi	s0,sp,128
 46c:	02090103          	lb	sp,32(s2)
 470:	0100                	addi	s0,sp,128
 472:	02090103          	lb	sp,32(s2)
 476:	0100                	addi	s0,sp,128
 478:	02090103          	lb	sp,32(s2)
 47c:	0100                	addi	s0,sp,128
 47e:	02090103          	lb	sp,32(s2)
 482:	0100                	addi	s0,sp,128
 484:	02090103          	lb	sp,32(s2)
 488:	0100                	addi	s0,sp,128
 48a:	02090103          	lb	sp,32(s2)
 48e:	0100                	addi	s0,sp,128
 490:	02090103          	lb	sp,32(s2)
 494:	0100                	addi	s0,sp,128
 496:	02090103          	lb	sp,32(s2)
 49a:	0100                	addi	s0,sp,128
 49c:	02090103          	lb	sp,32(s2)
 4a0:	0100                	addi	s0,sp,128
 4a2:	02090103          	lb	sp,32(s2)
 4a6:	0100                	addi	s0,sp,128
 4a8:	02090103          	lb	sp,32(s2)
 4ac:	0100                	addi	s0,sp,128
 4ae:	02090103          	lb	sp,32(s2)
 4b2:	0100                	addi	s0,sp,128
 4b4:	02090103          	lb	sp,32(s2)
 4b8:	0100                	addi	s0,sp,128
 4ba:	02090103          	lb	sp,32(s2)
 4be:	0100                	addi	s0,sp,128
 4c0:	02090103          	lb	sp,32(s2)
 4c4:	0100                	addi	s0,sp,128
 4c6:	02090103          	lb	sp,32(s2)
 4ca:	0100                	addi	s0,sp,128
 4cc:	02090303          	lb	t1,32(s2)
 4d0:	0100                	addi	s0,sp,128
 4d2:	08090603          	lb	a2,128(s2)
 4d6:	0100                	addi	s0,sp,128
 4d8:	04090103          	lb	sp,64(s2)
 4dc:	0100                	addi	s0,sp,128
 4de:	04090203          	lb	tp,64(s2)
 4e2:	0100                	addi	s0,sp,128
 4e4:	04090303          	lb	t1,64(s2)
 4e8:	0100                	addi	s0,sp,128
 4ea:	04090103          	lb	sp,64(s2)
 4ee:	0100                	addi	s0,sp,128
 4f0:	02090103          	lb	sp,32(s2)
 4f4:	0100                	addi	s0,sp,128
 4f6:	04090603          	lb	a2,64(s2)
 4fa:	0100                	addi	s0,sp,128
 4fc:	04090103          	lb	sp,64(s2)
 500:	0100                	addi	s0,sp,128
 502:	04090103          	lb	sp,64(s2)
 506:	0100                	addi	s0,sp,128
 508:	0409                	addi	s0,s0,2
 50a:	0000                	unimp
 50c:	0101                	addi	sp,sp,0
 50e:	0500                	addi	s0,sp,640
 510:	0002                	c.slli64	zero
 512:	0000                	unimp
 514:	0300                	addi	s0,sp,384
 516:	030100cb          	fnmsub.d	ft1,ft2,fa6,ft0,rne
 51a:	0901                	addi	s2,s2,0
 51c:	007c                	addi	a5,sp,12
 51e:	0301                	addi	t1,t1,0
 520:	0904                	addi	s1,sp,144
 522:	0004                	0x4
 524:	0301                	addi	t1,t1,0
 526:	0904                	addi	s1,sp,144
 528:	0004                	0x4
 52a:	0301                	addi	t1,t1,0
 52c:	0904                	addi	s1,sp,144
 52e:	0004                	0x4
 530:	0901                	addi	s2,s2,0
 532:	0004                	0x4
 534:	0100                	addi	s0,sp,128
 536:	01              	Address 0x0000000000000536 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	7261                	lui	tp,0xffff8
   2:	6172                	flw	ft2,28(sp)
   4:	2e79                	jal	3a2 <_bss_end+0x14a>
   6:	682f0063          	beq	t5,sp,686 <_bss_end+0x42e>
   a:	2f656d6f          	jal	s10,56300 <_stack_start+0x46300>
   e:	6f74                	flw	fa3,92(a4)
  10:	6170                	flw	fa2,68(a0)
  12:	636c                	flw	fa1,68(a4)
  14:	7365442f          	0x7365442f
  18:	706f746b          	0x706f746b
  1c:	6562692f          	0x6562692f
  20:	2d78                	fld	fa4,216(a0)
  22:	616d                	addi	sp,sp,240
  24:	72657473          	csrrci	s0,0x726,10
  28:	6178652f          	0x6178652f
  2c:	706d                	c.lui	zero,0xffffb
  2e:	656c                	flw	fa1,76(a0)
  30:	77732f73          	csrrs	t5,0x777,t1
  34:	7272612f          	0x7272612f
  38:	7961                	lui	s2,0xffff8
  3a:	656c                	flw	fa1,76(a0)
  3c:	5f72                	lw	t5,60(sp)
  3e:	6576                	flw	fa0,92(sp)
  40:	6d5f 6d65 726f      	0x726f6d656d5f
  46:	2f79                	jal	7e4 <_bss_end+0x58c>
  48:	7261                	lui	tp,0xffff8
  4a:	6172                	flw	ft2,28(sp)
  4c:	5f79                	li	t5,-2
  4e:	6e69                	lui	t3,0x1a
  50:	5f727473          	csrrci	s0,0x5f7,4
  54:	6574                	flw	fa3,76(a0)
  56:	61007473          	csrrci	s0,0x610,0
  5a:	7272                	flw	ft4,60(sp)
  5c:	7961                	lui	s2,0xffff8
  5e:	6d5f 646f 7500      	0x7500646f6d5f
  64:	736e                	flw	ft6,248(sp)
  66:	6769                	lui	a4,0x1a
  68:	656e                	flw	fa0,216(sp)
  6a:	2064                	fld	fs1,192(s0)
  6c:	72616863          	bltu	sp,t1,79c <_bss_end+0x544>
  70:	6100                	flw	fs0,0(a0)
  72:	7272                	flw	ft4,60(sp)
  74:	7961                	lui	s2,0xffff8
  76:	615f 6464 7300      	0x73006464615f
  jal x0, default_exc_handler
  7c:	6f68                	flw	fa0,92(a4)
  7e:	7472                	flw	fs0,60(sp)
  jal x0, reset_handler
  80:	7520                	flw	fs0,104(a0)
  82:	736e                	flw	ft6,248(sp)
  jal x0, default_exc_handler
  84:	6769                	lui	a4,0x1a
  86:	656e                	flw	fa0,216(sp)
  jal x0, default_exc_handler
  88:	2064                	fld	fs1,192(s0)
  8a:	6e69                	lui	t3,0x1a
  asm volatile(
  8c:	0074                	addi	a3,sp,12
  8e:	7261                	lui	tp,0xffff8
}
  90:	6172                	flw	ft2,28(sp)
    asm volatile(
  92:	3179                	jal	fffffd20 <_stack_start+0xfffefd20>
  94:	6d00                	flw	fs0,24(a0)
}
  96:	6961                	lui	s2,0x18
    for(i=0;i<(length/3);i++) {
  98:	006e                	c.slli	zero,0x1b
  9a:	7261                	lui	tp,0xffff8
  9c:	6172                	flw	ft2,28(sp)
  9e:	3379                	jal	fffffe2c <_stack_start+0xfffefe2c>
  a0:	6100                	flw	fs0,0(a0)
  a2:	7272                	flw	ft4,60(sp)
  a4:	7961                	lui	s2,0xffff8
}
  a6:	735f 6275 6900      	0x69006275735f
    asm volatile(
  ac:	736e                	flw	ft6,248(sp)
  ae:	7274                	flw	fa3,100(a2)
  b0:	6d5f 646f 6c00      	0x6c00646f6d5f
    for(i=0;i<(length/3);i++) {
  b6:	20676e6f          	jal	t3,762bc <_stack_start+0x662bc>
    asm volatile(
  ba:	6f6c                	flw	fa1,92(a4)
  bc:	676e                	flw	fa4,216(sp)
}
  be:	7520                	flw	fs0,104(a0)
    for(i=0;i<(length/3);i++) {
  c0:	736e                	flw	ft6,248(sp)
  c2:	6769                	lui	a4,0x1a
  c4:	656e                	flw	fa0,216(sp)
  c6:	2064                	fld	fs1,192(s0)
  c8:	6e69                	lui	t3,0x1a
  ca:	0074                	addi	a3,sp,12
  cc:	7261                	lui	tp,0xffff8
}
  ce:	6172                	flw	ft2,28(sp)
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  d0:	5f79                	li	t5,-2
  d2:	7165                	addi	sp,sp,-400
    asm volatile(
  d4:	0075                	c.nop	29
  d6:	6f6c                	flw	fa1,92(a4)
  d8:	676e                	flw	fa4,216(sp)
  da:	6c20                	flw	fs0,88(s0)
  dc:	20676e6f          	jal	t3,762e2 <_stack_start+0x662e2>
    for(i=0;i<(length/3);i++) {
  e0:	6e69                	lui	t3,0x1a
    asm volatile(
  e2:	0074                	addi	a3,sp,12
  e4:	7261                	lui	tp,0xffff8
}
  e6:	6172                	flw	ft2,28(sp)
    for(i=0;i<(length/3);i++) {
  e8:	3279                	jal	fffffa76 <_stack_start+0xfffefa76>
  ea:	4700                	lw	s0,8(a4)
  ec:	554e                	lw	a0,240(sp)
  ee:	4320                	lw	s0,64(a4)
  f0:	3731                	jal	fffffffc <_stack_start+0xfffefffc>
  f2:	3920                	fld	fs0,112(a0)
  f4:	322e                	fld	ft4,232(sp)
}
  f6:	302e                	fld	ft0,232(sp)
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f8:	2d20                	fld	fs0,88(a0)
  fa:	616d                	addi	sp,sp,240
    asm volatile(
  fc:	6372                	flw	ft6,28(sp)
  fe:	3d68                	fld	fa0,248(a0)
 100:	7672                	flw	fa2,60(sp)
 102:	6d693233          	0x6d693233
    for(i=0;i<(length/3);i++) {
 106:	6d2d2063          	0x6d2d2063
    asm volatile(
 10a:	6261                	lui	tp,0x18
 10c:	3d69                	jal	ffffffa6 <_stack_start+0xfffeffa6>
}
 10e:	6c69                	lui	s8,0x1a
    for(i=0;i<(length/3);i++) {
 110:	3370                	fld	fa2,224(a4)
 112:	2032                	fld	ft0,264(sp)
 114:	6d2d                	lui	s10,0xb
    asm volatile(
 116:	646f6d63          	bltu	t5,t1,770 <_bss_end+0x518>
    for(i=0;i<(length/3);i++) {
 11a:	6c65                	lui	s8,0x19
 11c:	6d3d                	lui	s10,0xf
}
 11e:	6465                	lui	s0,0x19
    asm volatile(
 120:	6e61                	lui	t3,0x18
 122:	2079                	jal	1b0 <main+0x14>
 124:	6d2d                	lui	s10,0xb
 126:	7574                	flw	fa3,108(a0)
 128:	656e                	flw	fa0,216(sp)
    for(i=0;i<(length/3);i++) {
 12a:	723d                	lui	tp,0xfffef
 12c:	656b636f          	jal	t1,b6782 <_stack_start+0xa6782>
  jal x0, default_exc_handler
 130:	2074                	fld	fa3,192(s0)
  mv  x1, x0
 132:	672d                	lui	a4,0xb
 134:	2d20                	fld	fs0,88(a0)
  mv  x2, x1
 136:	2d20734f          	0x2d20734f
  mv  x4, x1
 13a:	7666                	flw	fa2,120(sp)
  mv  x5, x1
 13c:	7369                	lui	t1,0xffffa
  mv  x6, x1
 13e:	6269                	lui	tp,0x1a
  mv  x7, x1
 140:	6c69                	lui	s8,0x1a
  mv  x8, x1
 142:	7469                	lui	s0,0xffffa
  mv  x9, x1
 144:	3d79                	jal	ffffffe2 <_stack_start+0xfffeffe2>
  mv x10, x1
 146:	6968                	flw	fa0,84(a0)
  mv x11, x1
 148:	6464                	flw	fs1,76(s0)
  mv x12, x1
 14a:	6e65                	lui	t3,0x19
  mv x13, x1
 14c:	6900                	flw	fs0,16(a0)
  mv x14, x1
 14e:	736e                	flw	ft6,248(sp)
  mv x15, x1
 150:	7274                	flw	fa3,100(a2)
  mv x16, x1
 152:	735f 6275 7300      	0x73006275735f
  mv x19, x1
 158:	6f68                	flw	fa0,92(a4)
  mv x20, x1
 15a:	7472                	flw	fs0,60(sp)
  mv x21, x1
 15c:	6920                	flw	fs0,80(a0)
  mv x22, x1
 15e:	746e                	flw	fs0,248(sp)
  mv x23, x1
 160:	6100                	flw	fs0,0(a0)
  mv x24, x1
 162:	7272                	flw	ft4,60(sp)
  mv x25, x1
 164:	7961                	lui	s2,0xffff8
  mv x26, x1
 166:	6d5f 6c75 6c00      	0x6c006c756d5f
  mv x29, x1
 16c:	6e65                	lui	t3,0x19
  mv x30, x1
 16e:	00687467          	0x687467
  la   x2, _stack_start
 172:	6e69                	lui	t3,0x1a
 174:	5f727473          	csrrci	s0,0x5f7,4
 178:	7165                	addi	sp,sp,-400
  la x26, _bss_start
 17a:	0075                	c.nop	29
 17c:	6e69                	lui	t3,0x1a
  la x27, _bss_end
 17e:	5f727473          	csrrci	s0,0x5f7,4
  bge x26, x27, zero_loop_end
 182:	6461                	lui	s0,0x18
 184:	0064                	addi	s1,sp,12
  sw x0, 0(x26)
 186:	30747263          	bgeu	s0,t2,48a <_bss_end+0x232>
  addi x26, x26, 4
 18a:	532e                	lw	t1,232(sp)
  ble x26, x27, zero_loop
 18c:	4700                	lw	s0,8(a4)
 18e:	554e                	lw	a0,240(sp)
  addi x10, x0, 0
 190:	4120                	lw	s0,64(a0)
 192:	2e322053          	0x2e322053
  addi x11, x0, 0
 196:	          	snez	tp,zero

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <_bss_end+0x428>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0006                	c.slli	zero,0x1
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0098                	addi	a4,sp,64
  3a:	0000                	unimp
  3c:	0022                	c.slli	zero,0x8
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	00ba                	slli	ra,ra,0xe
  4a:	0000                	unimp
  4c:	0006                	c.slli	zero,0x1
  4e:	0000                	unimp
  50:	000c                	0xc
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	00c0                	addi	s0,sp,68
  5a:	0000                	unimp
  5c:	0022                	c.slli	zero,0x8
  5e:	0000                	unimp
  60:	000c                	0xc
  62:	0000                	unimp
  64:	0000                	unimp
  66:	0000                	unimp
  68:	00e2                	slli	ra,ra,0x18
  6a:	0000                	unimp
  6c:	0006                	c.slli	zero,0x1
  6e:	0000                	unimp
  70:	000c                	0xc
  72:	0000                	unimp
  74:	0000                	unimp
  76:	0000                	unimp
  78:	00e8                	addi	a0,sp,76
  7a:	0000                	unimp
  jal x0, default_exc_handler
  7c:	0022                	c.slli	zero,0x8
  7e:	0000                	unimp
  jal x0, reset_handler
  80:	000c                	0xc
  82:	0000                	unimp
  jal x0, default_exc_handler
  84:	0000                	unimp
  86:	0000                	unimp
  jal x0, default_exc_handler
  88:	010a                	slli	sp,sp,0x2
  8a:	0000                	unimp
  asm volatile(
  8c:	0006                	c.slli	zero,0x1
  8e:	0000                	unimp
}
  90:	000c                	0xc
    asm volatile(
  92:	0000                	unimp
  94:	0000                	unimp
}
  96:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  98:	0110                	addi	a2,sp,128
  9a:	0000                	unimp
  9c:	001e                	c.slli	zero,0x7
  9e:	0000                	unimp
  a0:	0020                	addi	s0,sp,8
  a2:	0000                	unimp
  a4:	0000                	unimp
}
  a6:	0000                	unimp
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a8:	019c                	addi	a5,sp,192
  aa:	0000                	unimp
    asm volatile(
  ac:	0068                	addi	a0,sp,12
  ae:	0000                	unimp
  b0:	0e42                	slli	t3,t3,0x10
  b2:	4610                	lw	a2,8(a2)
  b4:	0181                	addi	gp,gp,0
    for(i=0;i<(length/3);i++) {
  b6:	0288                	addi	a0,sp,320
  b8:	0389                	addi	t2,t2,2
    asm volatile(
  ba:	5402                	lw	s0,32(sp)
  bc:	44c1                	li	s1,16
}
  be:	42c8                	lw	a0,4(a3)
    for(i=0;i<(length/3);i++) {
  c0:	44c9                	li	s1,18
  c2:	000e                	c.slli	zero,0x3

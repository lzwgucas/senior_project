
cust_test.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	0ac0006f          	j	128 <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	0ac0006f          	j	12c <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	0a40006f          	j	128 <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	0a00006f          	j	128 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_add>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
  8c:	06b5750b          	0x6b5750b

    );
    return;


}
  90:	8082                	ret

00000092 <array_add>:
void array_add(int *a1, int *a2, int length) {
int i =0;
    for(i=0;i<(length/3);i++) {
  92:	478d                	li	a5,3
  94:	02f64633          	div	a2,a2,a5
  98:	4831                	li	a6,12
  9a:	4781                	li	a5,0
  9c:	00c7c363          	blt	a5,a2,a2 <array_add+0x10>
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
    }
}
  a0:	8082                	ret
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	03078733          	mul	a4,a5,a6
    asm volatile(
  a6:	00e506b3          	add	a3,a0,a4
  aa:	972e                	add	a4,a4,a1
  ac:	06e6f70b          	0x6e6f70b
    for(i=0;i<(length/3);i++) {
  b0:	0785                	addi	a5,a5,1
  b2:	b7ed                	j	9c <array_add+0xa>

000000b4 <instr_sub>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
  b4:	08b5750b          	0x8b5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
  b8:	8082                	ret

000000ba <array_sub>:
void array_sub(int *a1, int *a2, int length){
int i =0;
    for(i=0;i<(length/3);i++) {
  ba:	478d                	li	a5,3
  bc:	02f64633          	div	a2,a2,a5
  c0:	4831                	li	a6,12
  c2:	4781                	li	a5,0
  c4:	00c7c363          	blt	a5,a2,ca <array_sub+0x10>
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
    }
}
  c8:	8082                	ret
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  ca:	03078733          	mul	a4,a5,a6
    asm volatile(
  ce:	00e506b3          	add	a3,a0,a4
  d2:	972e                	add	a4,a4,a1
  d4:	08e6f70b          	0x8e6f70b
    for(i=0;i<(length/3);i++) {
  d8:	0785                	addi	a5,a5,1
  da:	b7ed                	j	c4 <array_sub+0xa>

000000dc <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
  dc:	0ab5750b          	0xab5750b
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;

}
  e0:	8082                	ret

000000e2 <array_equ>:
void array_equ(int *a1,int *a2,int length) {
int i = 0;
    for(i=0;i<(length/3);i++) {
  e2:	478d                	li	a5,3
  e4:	02f64633          	div	a2,a2,a5
  e8:	4831                	li	a6,12
  ea:	4781                	li	a5,0
  ec:	00c7c363          	blt	a5,a2,f2 <array_equ+0x10>
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
    }
}
  f0:	8082                	ret
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	03078733          	mul	a4,a5,a6
    asm volatile(
  f6:	00e506b3          	add	a3,a0,a4
  fa:	972e                	add	a4,a4,a1
  fc:	0ae6f70b          	0xae6f70b
    for(i=0;i<(length/3);i++) {
 100:	0785                	addi	a5,a5,1
 102:	b7ed                	j	ec <array_equ+0xa>

00000104 <instr_mod>:

void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
 104:	0cb5750b          	0xcb5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(mod)			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
 108:	8082                	ret

0000010a <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    for(i=0;i<(length/3);i++) {
 10a:	478d                	li	a5,3
 10c:	02f64633          	div	a2,a2,a5
    asm volatile(
 110:	46b1                	li	a3,12
    for(i=0;i<(length/3);i++) {
 112:	4781                	li	a5,0
 114:	00c7c363          	blt	a5,a2,11a <array_mod+0x10>
        instr_mod((unsigned int*)&a1[3 * i], (unsigned int)mod);
    }

}
 118:	8082                	ret
    asm volatile(
 11a:	02d78733          	mul	a4,a5,a3
 11e:	972a                	add	a4,a4,a0
 120:	0cb7770b          	0xcb7770b
    for(i=0;i<(length/3);i++) {
 124:	0785                	addi	a5,a5,1
 126:	b7fd                	j	114 <array_mod+0xa>

00000128 <default_exc_handler>:
  jal x0, default_exc_handler
 128:	0000006f          	j	128 <default_exc_handler>

0000012c <reset_handler>:
  mv  x1, x0
 12c:	00000093          	li	ra,0
  mv  x2, x1
 130:	8106                	mv	sp,ra
  mv  x3, x1
 132:	8186                	mv	gp,ra
  mv  x4, x1
 134:	8206                	mv	tp,ra
  mv  x5, x1
 136:	8286                	mv	t0,ra
  mv  x6, x1
 138:	8306                	mv	t1,ra
  mv  x7, x1
 13a:	8386                	mv	t2,ra
  mv  x8, x1
 13c:	8406                	mv	s0,ra
  mv  x9, x1
 13e:	8486                	mv	s1,ra
  mv x10, x1
 140:	8506                	mv	a0,ra
  mv x11, x1
 142:	8586                	mv	a1,ra
  mv x12, x1
 144:	8606                	mv	a2,ra
  mv x13, x1
 146:	8686                	mv	a3,ra
  mv x14, x1
 148:	8706                	mv	a4,ra
  mv x15, x1
 14a:	8786                	mv	a5,ra
  mv x16, x1
 14c:	8806                	mv	a6,ra
  mv x17, x1
 14e:	8886                	mv	a7,ra
  mv x18, x1
 150:	8906                	mv	s2,ra
  mv x19, x1
 152:	8986                	mv	s3,ra
  mv x20, x1
 154:	8a06                	mv	s4,ra
  mv x21, x1
 156:	8a86                	mv	s5,ra
  mv x22, x1
 158:	8b06                	mv	s6,ra
  mv x23, x1
 15a:	8b86                	mv	s7,ra
  mv x24, x1
 15c:	8c06                	mv	s8,ra
  mv x25, x1
 15e:	8c86                	mv	s9,ra
  mv x26, x1
 160:	8d06                	mv	s10,ra
  mv x27, x1
 162:	8d86                	mv	s11,ra
  mv x28, x1
 164:	8e06                	mv	t3,ra
  mv x29, x1
 166:	8e86                	mv	t4,ra
  mv x30, x1
 168:	8f06                	mv	t5,ra
  mv x31, x1
 16a:	8f86                	mv	t6,ra
  la   x2, _stack_start
 16c:	00010117          	auipc	sp,0x10
 170:	e9410113          	addi	sp,sp,-364 # 10000 <_stack_start>

00000174 <_start>:
  la x26, _bss_start
 174:	24000d13          	li	s10,576
  la x27, _bss_end
 178:	25400d93          	li	s11,596
  bge x26, x27, zero_loop_end
 17c:	01bd5763          	bge	s10,s11,18a <main_entry>

00000180 <zero_loop>:
  sw x0, 0(x26)
 180:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
 184:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
 186:	ffaddde3          	bge	s11,s10,180 <zero_loop>

0000018a <main_entry>:
  addi x10, x0, 0
 18a:	00000513          	li	a0,0
  addi x11, x0, 0
 18e:	00000593          	li	a1,0
  jal x1, main
 192:	004000ef          	jal	ra,196 <main>

00000196 <main>:
/////////////////////////////////////////////////




int main() {
 196:	1141                	addi	sp,sp,-16
 198:	c606                	sw	ra,12(sp)
 19a:	c422                	sw	s0,8(sp)

//}

volatile unsigned int  *var = (volatile unsigned int  *) 0x0000c010;

*var = 0xDC;
 19c:	0dc00793          	li	a5,220
 1a0:	6431                	lui	s0,0xc
 1a2:	c81c                	sw	a5,16(s0)

array_add(array1,array2,6); // array1 = {3,6,9,12,15,18}
 1a4:	4619                	li	a2,6
 1a6:	21000593          	li	a1,528
 1aa:	22800513          	li	a0,552
 1ae:	35d5                	jal	92 <array_add>

*var = 0xCC;
 1b0:	0cc00793          	li	a5,204
 1b4:	c81c                	sw	a5,16(s0)

array_equ(array1,array2,6); // array1 = {2,4,6,8,10,12}
 1b6:	4619                	li	a2,6
 1b8:	21000593          	li	a1,528
 1bc:	22800513          	li	a0,552
 1c0:	370d                	jal	e2 <array_equ>

*var = 0xCB;
 1c2:	0cb00793          	li	a5,203
 1c6:	c81c                	sw	a5,16(s0)

array_mod(array1,7,6);  // array1 = {2,4,6,1,3,5}
 1c8:	4619                	li	a2,6
 1ca:	459d                	li	a1,7
 1cc:	22800513          	li	a0,552
 1d0:	3f2d                	jal	10a <array_mod>

*var = 0xBB;
 1d2:	0bb00793          	li	a5,187
 1d6:	c81c                	sw	a5,16(s0)

array_sub(array1,array2,6); //  array1 = {0,0,0,-7,-7-7}
 1d8:	4619                	li	a2,6
 1da:	21000593          	li	a1,528
 1de:	22800513          	li	a0,552
 1e2:	3de1                	jal	ba <array_sub>

*var = 0xBA;
 1e4:	0ba00793          	li	a5,186
 1e8:	c81c                	sw	a5,16(s0)

array_mod(array1,7,6);  // array1 = {0,0,0,0,0,0}
 1ea:	4619                	li	a2,6
 1ec:	459d                	li	a1,7
 1ee:	22800513          	li	a0,552
 1f2:	3f21                	jal	10a <array_mod>



while(1){
*var = 0xAA;
 1f4:	0441                	addi	s0,s0,16
 1f6:	0aa00793          	li	a5,170
 1fa:	c01c                	sw	a5,0(s0)
while(1){
 1fc:	bffd                	j	1fa <main+0x64>

000001fe <__CTOR_LIST__>:
	...

00000206 <__CTOR_END__>:
	...

0000020e <__DTOR_END__>:
	...

Disassembly of section .data:

00000210 <array2>:
 210:	0002                	c.slli64	zero
 212:	0000                	unimp
 214:	0004                	0x4
 216:	0000                	unimp
 218:	0006                	c.slli	zero,0x1
 21a:	0000                	unimp
 21c:	0008                	0x8
 21e:	0000                	unimp
 220:	000a                	c.slli	zero,0x2
 222:	0000                	unimp
 224:	000c                	0xc
	...

00000228 <array1>:
int array1[6] = {1,2,3,4,5,6};
 228:	0001                	nop
 22a:	0000                	unimp
 22c:	0002                	c.slli64	zero
 22e:	0000                	unimp
 230:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
 234:	0004                	0x4
 236:	0000                	unimp
 238:	0005                	c.nop	1
 23a:	0000                	unimp
 23c:	0006                	c.slli	zero,0x1
	...

Disassembly of section .bss:

00000240 <array3>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
   0:	0491                	addi	s1,s1,4
   2:	0000                	unimp
   4:	0004                	0x4
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0104                	addi	s1,sp,128
   c:	00de                	slli	ra,ra,0x17
   e:	0000                	unimp
  10:	350c                	fld	fa1,40(a0)
  12:	0000                	unimp
  14:	9e00                	0x9e00
  16:	0000                	unimp
  18:	1800                	addi	s0,sp,48
	...
  22:	0000                	unimp
  24:	0200                	addi	s0,sp,256
  26:	0601                	addi	a2,a2,0
  28:	000c                	0xc
  2a:	0000                	unimp
  2c:	0102                	c.slli64	sp
  2e:	0a08                	addi	a0,sp,272
  30:	0000                	unimp
  32:	0200                	addi	s0,sp,256
  34:	0502                	c.slli64	a0
  36:	014a                	slli	sp,sp,0x12
  38:	0000                	unimp
  3a:	0202                	c.slli64	tp
  3c:	00002207          	flw	ft4,0(zero) # 0 <__DYNAMIC>
  40:	0200                	addi	s0,sp,256
  42:	0504                	addi	s1,sp,640
  44:	0095                	addi	ra,ra,5
  46:	0000                	unimp
  48:	0402                	c.slli64	s0
  4a:	00007407          	0x7407
  4e:	0200                	addi	s0,sp,256
  50:	0508                	addi	a0,sp,640
  52:	0090                	addi	a2,sp,64
  54:	0000                	unimp
  56:	0802                	c.slli64	a6
  58:	00006f07          	0x6f07
  5c:	0300                	addi	s0,sp,384
  5e:	0504                	addi	s1,sp,640
  60:	6e69                	lui	t3,0x1a
  62:	0074                	addi	a3,sp,12
  64:	0402                	c.slli64	s0
  66:	00007907          	0x7907
  6a:	0400                	addi	s0,sp,512
  6c:	0064                	addi	s1,sp,12
  6e:	0000                	unimp
  70:	5d05                	li	s10,-31
  72:	0000                	unimp
  74:	8000                	0x8000
  76:	0000                	unimp
  78:	0600                	addi	s0,sp,768
  7a:	0064                	addi	s1,sp,12
  jal x0, default_exc_handler
  7c:	0000                	unimp
  7e:	0005                	c.nop	1
  jal x0, reset_handler
  80:	00004107          	flq	ft2,0(zero) # 0 <__DYNAMIC>
  jal x0, default_exc_handler
  84:	0100                	addi	s0,sp,128
  86:	0504                	addi	s1,sp,640
  jal x0, default_exc_handler
  88:	0070                	addi	a2,sp,12
  8a:	0000                	unimp
    asm volatile(
  8c:	0305                	addi	t1,t1,1
  8e:	0228                	addi	a0,sp,264
}
  90:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  92:	00004d07          	flq	fs10,0(zero) # 0 <__DYNAMIC>
  96:	0100                	addi	s0,sp,128
  98:	0505                	addi	a0,a0,1
  9a:	0070                	addi	a2,sp,12
  9c:	0000                	unimp
  9e:	0305                	addi	t1,t1,1
}
  a0:	0210                	addi	a2,sp,256
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	0000                	unimp
  a4:	5d05                	li	s10,-31
    asm volatile(
  a6:	0000                	unimp
  a8:	b400                	fsd	fs0,40(s0)
  aa:	0000                	unimp
  ac:	0600                	addi	s0,sp,768
  ae:	0064                	addi	s1,sp,12
    for(i=0;i<(length/3);i++) {
  b0:	0000                	unimp
  b2:	0004                	0x4
    asm volatile(
  b4:	00005407          	0x5407
}
  b8:	0100                	addi	s0,sp,128
    for(i=0;i<(length/3);i++) {
  ba:	0506                	slli	a0,a0,0x1
  bc:	00a4                	addi	s1,sp,72
  be:	0000                	unimp
  c0:	0305                	addi	t1,t1,1
  c2:	0240                	addi	s0,sp,260
  c4:	0000                	unimp
  c6:	4808                	lw	a0,16(s0)
}
  c8:	0000                	unimp
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  ca:	0100                	addi	s0,sp,128
  cc:	0576                	slli	a0,a0,0x1d
    asm volatile(
  ce:	005d                	c.nop	23
  d0:	0000                	unimp
  d2:	0196                	slli	gp,gp,0x5
  d4:	0000                	unimp
  d6:	0068                	addi	a0,sp,12
    for(i=0;i<(length/3);i++) {
  d8:	0000                	unimp
  da:	9c01                	0x9c01
    asm volatile(
  dc:	019c                	addi	a5,sp,192
  de:	0000                	unimp
}
  e0:	7609                	lui	a2,0xfffe2
    for(i=0;i<(length/3);i++) {
  e2:	7261                	lui	tp,0xffff8
  e4:	0100                	addi	s0,sp,128
  e6:	1986                	slli	s3,s3,0x21
  e8:	019c                	addi	a5,sp,192
  ea:	0000                	unimp
  ec:	c010                	sw	a2,0(s0)
  ee:	b00a                	fsd	ft2,32(sp)
}
  f0:	0001                	nop
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	7200                	flw	fs0,32(a2)
  f4:	13000003          	lb	zero,304(zero) # 130 <reset_handler+0x4>
    asm volatile(
  f8:	0001                	nop
  fa:	0b00                	addi	s0,sp,400
  fc:	5a01                	li	s4,-32
  fe:	0305                	addi	t1,t1,1
    for(i=0;i<(length/3);i++) {
 100:	0228                	addi	a0,sp,264
 102:	0000                	unimp
    asm volatile(
 104:	055b010b          	0x55b010b
}
 108:	00021003          	lh	zero,0(tp) # ffff8000 <_stack_start+0xfffe8000>
    for(i=0;i<(length/3);i++) {
 10c:	0b00                	addi	s0,sp,400
 10e:	5c01                	li	s8,-32
    asm volatile(
 110:	3601                	jal	fffffc10 <_stack_start+0xfffefc10>
    for(i=0;i<(length/3);i++) {
 112:	0a00                	addi	s0,sp,272
 114:	01c2                	slli	gp,gp,0x10
 116:	0000                	unimp
}
 118:	0246                	slli	tp,tp,0x11
    asm volatile(
 11a:	0000                	unimp
 11c:	0138                	addi	a4,sp,136
 11e:	0000                	unimp
 120:	055a010b          	0x55a010b
    for(i=0;i<(length/3);i++) {
 124:	00022803          	lw	a6,0(tp) # 0 <__DYNAMIC>
  jal x0, default_exc_handler
 128:	0b00                	addi	s0,sp,400
 12a:	5b01                	li	s6,-32
  mv  x1, x0
 12c:	0305                	addi	t1,t1,1
 12e:	0210                	addi	a2,sp,256
  mv  x2, x1
 130:	0000                	unimp
  mv  x3, x1
 132:	015c010b          	0x15c010b
  mv  x5, x1
 136:	0036                	c.slli	zero,0xd
  mv  x6, x1
 138:	d20a                	sw	sp,36(sp)
  mv  x7, x1
 13a:	0001                	nop
  mv  x8, x1
 13c:	a200                	fsd	fs0,0(a2)
  mv  x9, x1
 13e:	0001                	nop
  mv x10, x1
 140:	5900                	lw	s0,48(a0)
  mv x11, x1
 142:	0001                	nop
  mv x12, x1
 144:	0b00                	addi	s0,sp,400
  mv x13, x1
 146:	5a01                	li	s4,-32
  mv x14, x1
 148:	0305                	addi	t1,t1,1
  mv x15, x1
 14a:	0228                	addi	a0,sp,264
  mv x16, x1
 14c:	0000                	unimp
  mv x17, x1
 14e:	015b010b          	0x15b010b
  mv x19, x1
 152:	5c010b37          	lui	s6,0x5c010
  mv x21, x1
 156:	3601                	jal	fffffc56 <_stack_start+0xfffefc56>
  mv x22, x1
 158:	0a00                	addi	s0,sp,272
  mv x23, x1
 15a:	01e4                	addi	s1,sp,204
  mv x24, x1
 15c:	0000                	unimp
  mv x25, x1
 15e:	02dc                	addi	a5,sp,324
  mv x26, x1
 160:	0000                	unimp
  mv x27, x1
 162:	017e                	slli	sp,sp,0x1f
  mv x28, x1
 164:	0000                	unimp
  mv x29, x1
 166:	055a010b          	0x55a010b
  mv x31, x1
 16a:	00022803          	lw	a6,0(tp) # 0 <__DYNAMIC>
  la   x2, _stack_start
 16e:	0b00                	addi	s0,sp,400
 170:	5b01                	li	s6,-32
 172:	0305                	addi	t1,t1,1
  la x26, _bss_start
 174:	0210                	addi	a2,sp,256
 176:	0000                	unimp
  la x27, _bss_end
 178:	015c010b          	0x15c010b
  bge x26, x27, zero_loop_end
 17c:	0036                	c.slli	zero,0xd
 17e:	f40c                	fsw	fa1,40(s0)
  sw x0, 0(x26)
 180:	0001                	nop
 182:	a200                	fsd	fs0,0(a2)
  addi x26, x26, 4
 184:	0001                	nop
  ble x26, x27, zero_loop
 186:	0b00                	addi	s0,sp,400
 188:	5a01                	li	s4,-32
  addi x10, x0, 0
 18a:	0305                	addi	t1,t1,1
 18c:	0228                	addi	a0,sp,264
  addi x11, x0, 0
 18e:	0000                	unimp
 190:	015b010b          	0x15b010b
  jal x1, main
 194:	5c010b37          	lui	s6,0x5c010
int main() {
 198:	3601                	jal	fffffc98 <_stack_start+0xfffefc98>
 19a:	0000                	unimp
*var = 0xDC;
 19c:	040d                	addi	s0,s0,3
 19e:	0000006b          	0x6b
 1a2:	000e                	c.slli	zero,0x3
array_add(array1,array2,6); // array1 = {3,6,9,12,15,18}
 1a4:	0000                	unimp
 1a6:	0100                	addi	s0,sp,128
 1a8:	0664                	addi	s1,sp,780
 1aa:	010a                	slli	sp,sp,0x2
 1ac:	0000                	unimp
 1ae:	001e                	c.slli	zero,0x7
*var = 0xCC;
 1b0:	0000                	unimp
 1b2:	9c01                	0x9c01
 1b4:	0215                	addi	tp,tp,5
array_equ(array1,array2,6); // array1 = {2,4,6,8,10,12}
 1b6:	0000                	unimp
 1b8:	0031610f          	0x31610f
 1bc:	6401                	0x6401
 1be:	1515                	addi	a0,a0,-27
 1c0:	0002                	c.slli64	zero
*var = 0xCB;
 1c2:	0100                	addi	s0,sp,128
 1c4:	0f5a                	slli	t5,t5,0x16
 1c6:	6f6d                	lui	t5,0x1b
array_mod(array1,7,6);  // array1 = {2,4,6,1,3,5}
 1c8:	0064                	addi	s1,sp,12
 1ca:	6401                	0x6401
 1cc:	5d1d                	li	s10,-25
 1ce:	0000                	unimp
 1d0:	0100                	addi	s0,sp,128
*var = 0xBB;
 1d2:	0154105b          	0x154105b
 1d6:	0000                	unimp
array_sub(array1,array2,6); //  array1 = {0,0,0,-7,-7-7}
 1d8:	6401                	0x6401
 1da:	5d25                	li	s10,-23
 1dc:	0000                	unimp
 1de:	0000                	unimp
 1e0:	0000                	unimp
 1e2:	1100                	addi	s0,sp,160
*var = 0xBA;
 1e4:	0069                	c.nop	26
 1e6:	6901                	0x6901
 1e8:	5d05                	li	s10,-31
array_mod(array1,7,6);  // array1 = {0,0,0,0,0,0}
 1ea:	0000                	unimp
 1ec:	2100                	fld	fs0,0(a0)
 1ee:	0000                	unimp
 1f0:	1200                	addi	s0,sp,288
 1f2:	0000021b          	0x21b
*var = 0xAA;
 1f6:	0110                	addi	a2,sp,128
 1f8:	0000                	unimp
 1fa:	0000                	unimp
while(1){
 1fc:	0000                	unimp
 1fe:	6c01                	0x6c01
 200:	1309                	addi	t1,t1,-30
 202:	00000233          	add	tp,zero,zero
 206:	0040                	addi	s0,sp,4
 208:	0000                	unimp
 20a:	00022813          	slti	a6,tp,0
 20e:	5300                	lw	s0,32(a4)
 210:	0000                	unimp
 212:	0000                	unimp
 214:	0d00                	addi	s0,sp,656
 216:	5d04                	lw	s1,56(a0)
 218:	0000                	unimp
 21a:	1400                	addi	s0,sp,544
 21c:	0065                	c.nop	25
 21e:	0000                	unimp
 220:	5701                	li	a4,-32
 222:	0106                	slli	sp,sp,0x1
 224:	0240                	addi	s0,sp,260
 226:	0000                	unimp
 228:	6115                	addi	sp,sp,288
 22a:	0031                	c.nop	12
 22c:	5701                	li	a4,-32
 22e:	401e                	0x401e
 230:	0002                	c.slli64	zero
 232:	1500                	addi	s0,sp,672
 234:	6f6d                	lui	t5,0x1b
 236:	0064                	addi	s1,sp,12
 238:	5701                	li	a4,-32
 23a:	0000642f          	0x642f
 23e:	0000                	unimp
 240:	040d                	addi	s0,s0,3
 242:	0064                	addi	s1,sp,12
 244:	0000                	unimp
 246:	860e                	mv	a2,gp
 248:	0000                	unimp
 24a:	0100                	addi	s0,sp,128
 24c:	0650                	addi	a2,sp,772
 24e:	00e2                	slli	ra,ra,0x18
 250:	0000                	unimp
 252:	0022                	c.slli	zero,0x8
 254:	0000                	unimp
 256:	9c01                	0x9c01
 258:	02b8                	addi	a4,sp,328
 25a:	0000                	unimp
 25c:	0031610f          	0x31610f
 260:	5001                	c.li	zero,-32
 262:	1515                	addi	a0,a0,-27
 264:	0002                	c.slli64	zero
 266:	0100                	addi	s0,sp,128
 268:	0f5a                	slli	t5,t5,0x16
 26a:	3261                	jal	fffffbf2 <_stack_start+0xfffefbf2>
 26c:	0100                	addi	s0,sp,128
 26e:	1d50                	addi	a2,sp,692
 270:	0215                	addi	tp,tp,5
 272:	0000                	unimp
 274:	5b01                	li	s6,-32
 276:	5410                	lw	a2,40(s0)
 278:	0001                	nop
 27a:	0100                	addi	s0,sp,128
 27c:	2450                	fld	fa2,136(s0)
 27e:	005d                	c.nop	23
 280:	0000                	unimp
 282:	006d                	c.nop	27
 284:	0000                	unimp
 286:	6911                	lui	s2,0x4
 288:	0100                	addi	s0,sp,128
 28a:	0551                	addi	a0,a0,20
 28c:	005d                	c.nop	23
 28e:	0000                	unimp
 290:	008e                	slli	ra,ra,0x3
 292:	0000                	unimp
 294:	b816                	fsd	ft5,48(sp)
 296:	0002                	c.slli64	zero
 298:	f600                	fsw	fs0,40(a2)
 29a:	0000                	unimp
 29c:	0a00                	addi	s0,sp,272
 29e:	0000                	unimp
 2a0:	0100                	addi	s0,sp,128
 2a2:	d0130953          	fcvt.s.wu	fs2,t1,rne
 2a6:	0002                	c.slli64	zero
 2a8:	ad00                	fsd	fs0,24(a0)
 2aa:	0000                	unimp
 2ac:	1300                	addi	s0,sp,416
 2ae:	02c5                	addi	t0,t0,17
 2b0:	0000                	unimp
 2b2:	00d0                	addi	a2,sp,68
 2b4:	0000                	unimp
 2b6:	0000                	unimp
 2b8:	5b14                	lw	a3,48(a4)
 2ba:	0001                	nop
 2bc:	0100                	addi	s0,sp,128
 2be:	063e                	slli	a2,a2,0xf
 2c0:	dc01                	beqz	s0,1d8 <main+0x42>
 2c2:	0002                	c.slli64	zero
 2c4:	1500                	addi	s0,sp,672
 2c6:	3161                	jal	ffffff4e <_stack_start+0xfffeff4e>
 2c8:	0100                	addi	s0,sp,128
 2ca:	1e3e                	slli	t3,t3,0x2f
 2cc:	0240                	addi	s0,sp,260
 2ce:	0000                	unimp
 2d0:	6115                	addi	sp,sp,288
 2d2:	0032                	c.slli	zero,0xc
 2d4:	3e01                	jal	fffffde4 <_stack_start+0xfffefde4>
 2d6:	4030                	lw	a2,64(s0)
 2d8:	0002                	c.slli64	zero
 2da:	0000                	unimp
 2dc:	5b0e                	lw	s6,224(sp)
 2de:	0000                	unimp
 2e0:	0100                	addi	s0,sp,128
 2e2:	00ba0637          	lui	a2,0xba0
 2e6:	0000                	unimp
 2e8:	0022                	c.slli	zero,0x8
 2ea:	0000                	unimp
 2ec:	9c01                	0x9c01
 2ee:	034e                	slli	t1,t1,0x13
 2f0:	0000                	unimp
 2f2:	0031610f          	0x31610f
 2f6:	3701                	jal	1f6 <main+0x60>
 2f8:	1515                	addi	a0,a0,-27
 2fa:	0002                	c.slli64	zero
 2fc:	0100                	addi	s0,sp,128
 2fe:	0f5a                	slli	t5,t5,0x16
 300:	3261                	jal	fffffc88 <_stack_start+0xfffefc88>
 302:	0100                	addi	s0,sp,128
 304:	02151e37          	lui	t3,0x2151
 308:	0000                	unimp
 30a:	5b01                	li	s6,-32
 30c:	5410                	lw	a2,40(s0)
 30e:	0001                	nop
 310:	0100                	addi	s0,sp,128
 312:	005d2637          	lui	a2,0x5d2
 316:	0000                	unimp
 318:	000000f3          	0xf3
 31c:	6911                	lui	s2,0x4
 31e:	0100                	addi	s0,sp,128
 320:	0538                	addi	a4,sp,648
 322:	005d                	c.nop	23
 324:	0000                	unimp
 326:	0114                	addi	a3,sp,128
 328:	0000                	unimp
 32a:	4e16                	lw	t3,68(sp)
 32c:	ce000003          	lb	zero,-800(zero) # fffffce0 <_stack_start+0xfffefce0>
 330:	0000                	unimp
 332:	0a00                	addi	s0,sp,272
 334:	0000                	unimp
 336:	0100                	addi	s0,sp,128
 338:	093a                	slli	s2,s2,0xe
 33a:	00036613          	ori	a2,t1,0
 33e:	3300                	fld	fs0,32(a4)
 340:	0001                	nop
 342:	1300                	addi	s0,sp,416
 344:	0000035b          	0x35b
 348:	0156                	slli	sp,sp,0x15
 34a:	0000                	unimp
 34c:	0000                	unimp
 34e:	4014                	lw	a3,0(s0)
 350:	0001                	nop
 352:	0100                	addi	s0,sp,128
 354:	0626                	slli	a2,a2,0x9
 356:	7201                	lui	tp,0xfffe0
 358:	15000003          	lb	zero,336(zero) # 150 <reset_handler+0x24>
 35c:	3161                	jal	ffffffe4 <_stack_start+0xfffeffe4>
 35e:	0100                	addi	s0,sp,128
 360:	1e26                	slli	t3,t3,0x29
 362:	0240                	addi	s0,sp,260
 364:	0000                	unimp
 366:	6115                	addi	sp,sp,288
 368:	0032                	c.slli	zero,0xc
 36a:	2601                	jal	66a <_bss_end+0x416>
 36c:	4030                	lw	a2,64(s0)
 36e:	0002                	c.slli64	zero
 370:	0000                	unimp
 372:	180e                	slli	a6,a6,0x23
 374:	0000                	unimp
 376:	0100                	addi	s0,sp,128
 378:	061f 0092 0000      	0x92061f
 37e:	0022                	c.slli	zero,0x8
 380:	0000                	unimp
 382:	9c01                	0x9c01
 384:	03e4                	addi	s1,sp,460
 386:	0000                	unimp
 388:	0031610f          	0x31610f
 38c:	1f01                	addi	t5,t5,-32
 38e:	1515                	addi	a0,a0,-27
 390:	0002                	c.slli64	zero
 392:	0100                	addi	s0,sp,128
 394:	0f5a                	slli	t5,t5,0x16
 396:	3261                	jal	fffffd1e <_stack_start+0xfffefd1e>
 398:	0100                	addi	s0,sp,128
 39a:	1e1f 0215 0000      	0x2151e1f
 3a0:	5b01                	li	s6,-32
 3a2:	5410                	lw	a2,40(s0)
 3a4:	0001                	nop
 3a6:	0100                	addi	s0,sp,128
 3a8:	261f 005d 0000      	0x5d261f
 3ae:	0179                	addi	sp,sp,30
 3b0:	0000                	unimp
 3b2:	6911                	lui	s2,0x4
 3b4:	0100                	addi	s0,sp,128
 3b6:	0520                	addi	s0,sp,648
 3b8:	005d                	c.nop	23
 3ba:	0000                	unimp
 3bc:	019a                	slli	gp,gp,0x6
 3be:	0000                	unimp
 3c0:	e416                	fsw	ft5,8(sp)
 3c2:	a6000003          	lb	zero,-1440(zero) # fffffa60 <_stack_start+0xfffefa60>
 3c6:	0000                	unimp
 3c8:	0a00                	addi	s0,sp,272
 3ca:	0000                	unimp
 3cc:	0100                	addi	s0,sp,128
 3ce:	0922                	slli	s2,s2,0x8
 3d0:	0003fc13          	andi	s8,t2,0
 3d4:	b900                	fsd	fs0,48(a0)
 3d6:	0001                	nop
 3d8:	1300                	addi	s0,sp,416
 3da:	03f1                	addi	t2,t2,28
 3dc:	0000                	unimp
 3de:	01dc                	addi	a5,sp,196
 3e0:	0000                	unimp
 3e2:	0000                	unimp
 3e4:	6514                	flw	fa3,8(a0)
 3e6:	0001                	nop
 3e8:	0100                	addi	s0,sp,128
 3ea:	0801060b          	0x801060b
 3ee:	0004                	0x4
 3f0:	1500                	addi	s0,sp,672
 3f2:	3161                	jal	7a <__DYNAMIC+0x7a>
 3f4:	0100                	addi	s0,sp,128
 3f6:	02401e0b          	0x2401e0b
 3fa:	0000                	unimp
 3fc:	6115                	addi	sp,sp,288
 3fe:	0032                	c.slli	zero,0xc
 400:	0b01                	addi	s6,s6,0
 402:	4030                	lw	a2,64(s0)
 404:	0002                	c.slli64	zero
 406:	0000                	unimp
 408:	0003e417          	auipc	s0,0x3e
 40c:	8c00                	0x8c00
 40e:	0000                	unimp
 410:	0600                	addi	s0,sp,768
 412:	0000                	unimp
 414:	0100                	addi	s0,sp,128
 416:	2c9c                	fld	fa5,24(s1)
 418:	0004                	0x4
 41a:	1300                	addi	s0,sp,416
 41c:	03f1                	addi	t2,t2,28
 41e:	0000                	unimp
 420:	01ff                	0x1ff
 422:	0000                	unimp
 424:	fc18                	fsw	fa4,56(s0)
 426:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
 42a:	4e17005b          	0x4e17005b
 42e:	b4000003          	lb	zero,-1216(zero) # fffffb40 <_stack_start+0xfffefb40>
 432:	0000                	unimp
 434:	0600                	addi	s0,sp,768
 436:	0000                	unimp
 438:	0100                	addi	s0,sp,128
 43a:	509c                	lw	a5,32(s1)
 43c:	0004                	0x4
 43e:	1300                	addi	s0,sp,416
 440:	0000035b          	0x35b
 444:	0212                	slli	tp,tp,0x4
 446:	0000                	unimp
 448:	6618                	flw	fa4,8(a2)
 44a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
 44e:	b817005b          	0xb817005b
 452:	0002                	c.slli64	zero
 454:	dc00                	sw	s0,56(s0)
 456:	0000                	unimp
 458:	0600                	addi	s0,sp,768
 45a:	0000                	unimp
 45c:	0100                	addi	s0,sp,128
 45e:	749c                	flw	fa5,40(s1)
 460:	0004                	0x4
 462:	1300                	addi	s0,sp,416
 464:	02c5                	addi	t0,t0,17
 466:	0000                	unimp
 468:	0225                	addi	tp,tp,9
 46a:	0000                	unimp
 46c:	d018                	sw	a4,32(s0)
 46e:	0002                	c.slli64	zero
 470:	0100                	addi	s0,sp,128
 472:	1b19005b          	0x1b19005b
 476:	0002                	c.slli64	zero
 478:	0400                	addi	s0,sp,512
 47a:	0001                	nop
 47c:	0600                	addi	s0,sp,768
 47e:	0000                	unimp
 480:	0100                	addi	s0,sp,128
 482:	139c                	addi	a5,sp,480
 484:	0228                	addi	a0,sp,264
 486:	0000                	unimp
 488:	0238                	addi	a4,sp,264
 48a:	0000                	unimp
 48c:	3318                	fld	fa4,32(a4)
 48e:	0002                	c.slli64	zero
 490:	0100                	addi	s0,sp,128
 492:	1e00005b          	0x1e00005b
 496:	0000                	unimp
 498:	0200                	addi	s0,sp,256
 49a:	7900                	flw	fs0,48(a0)
 49c:	0001                	nop
 49e:	0400                	addi	s0,sp,512
 4a0:	b001                	j	fffffca0 <_stack_start+0xfffefca0>
 4a2:	30000003          	lb	zero,768(zero) # 300 <_bss_end+0xac>
 4a6:	0000                	unimp
 4a8:	6f00                	flw	fs0,24(a4)
 4aa:	0001                	nop
 4ac:	9e00                	0x9e00
 4ae:	0000                	unimp
 4b0:	7600                	flw	fs0,40(a2)
 4b2:	0001                	nop
 4b4:	0100                	addi	s0,sp,128
 4b6:	80              	Address 0x00000000000004b6 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <_bss_end+0x3ae>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_add+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	0105                	addi	sp,sp,1
  32:	4901                	li	s2,0
  34:	00130113          	addi	sp,t1,1
  38:	0600                	addi	s0,sp,768
  3a:	0021                	c.nop	8
  3c:	1349                	addi	t1,t1,-14
  3e:	00000b2f          	0xb2f
  42:	03003407          	fld	fs0,48(zero) # 30 <__DYNAMIC+0x30>
  46:	3a0e                	fld	fs4,224(sp)
  48:	390b3b0b          	0x390b3b0b
  4c:	3f13490b          	0x3f13490b
  50:	0219                	addi	tp,tp,6
  52:	0018                	0x18
  54:	0800                	addi	s0,sp,16
  56:	012e                	slli	sp,sp,0xb
  58:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
  60:	0b39                	addi	s6,s6,14
  62:	1349                	addi	t1,t1,-14
  64:	0111                	addi	sp,sp,4
  66:	0612                	slli	a2,a2,0x4
  68:	1840                	addi	s0,sp,52
  6a:	01194297          	auipc	t0,0x1194
  6e:	09000013          	li	zero,144
  72:	0034                	addi	a3,sp,8
  74:	0b3a0803          	lb	a6,179(s4)
  78:	0b390b3b          	0xb390b3b
  jal x0, default_exc_handler
  7c:	1349                	addi	t1,t1,-14
  7e:	051c                	addi	a5,sp,640
  jal x0, reset_handler
  80:	0000                	unimp
  82:	890a                	mv	s2,sp
  jal x0, default_exc_handler
  84:	0182                	c.slli64	gp
  86:	1101                	addi	sp,sp,-32
  jal x0, default_exc_handler
  88:	3101                	jal	fffffc88 <_stack_start+0xfffefc88>
  8a:	00130113          	addi	sp,t1,1
    asm volatile(
  8e:	0b00                	addi	s0,sp,400
}
  90:	828a                	mv	t0,sp
    for(i=0;i<(length/3);i++) {
  92:	0001                	nop
  94:	1802                	slli	a6,a6,0x20
  96:	4291                	li	t0,4
  98:	0018                	0x18
  9a:	0c00                	addi	s0,sp,528
  9c:	8289                	srli	a3,a3,0x2
  9e:	0101                	addi	sp,sp,0
}
  a0:	0111                	addi	sp,sp,4
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	1331                	addi	t1,t1,-20
  a4:	0000                	unimp
    asm volatile(
  a6:	0f0d                	addi	t5,t5,3
  a8:	0b00                	addi	s0,sp,400
  aa:	0013490b          	0x13490b
  ae:	0e00                	addi	s0,sp,784
    for(i=0;i<(length/3);i++) {
  b0:	012e                	slli	sp,sp,0xb
  b2:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    for(i=0;i<(length/3);i++) {
  ba:	0b39                	addi	s6,s6,14
  bc:	01111927          	0x1111927
  c0:	0612                	slli	a2,a2,0x4
  c2:	1840                	addi	s0,sp,52
  c4:	01194297          	auipc	t0,0x1194
}
  c8:	0f000013          	li	zero,240
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  cc:	0005                	c.nop	1
    asm volatile(
  ce:	0b3a0803          	lb	a6,179(s4)
  d2:	0b390b3b          	0xb390b3b
  d6:	1349                	addi	t1,t1,-14
    for(i=0;i<(length/3);i++) {
  d8:	1802                	slli	a6,a6,0x20
  da:	0000                	unimp
    asm volatile(
  dc:	0510                	addi	a2,sp,640
  de:	0300                	addi	s0,sp,384
}
  e0:	3a0e                	fld	fs4,224(sp)
    for(i=0;i<(length/3);i++) {
  e2:	390b3b0b          	0x390b3b0b
  e6:	0213490b          	0x213490b
  ea:	11000017          	auipc	zero,0x11000
  ee:	0034                	addi	a3,sp,8
}
  f0:	0b3a0803          	lb	a6,179(s4)
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f4:	0b390b3b          	0xb390b3b
    asm volatile(
  f8:	1349                	addi	t1,t1,-14
  fa:	1702                	slli	a4,a4,0x20
  fc:	0000                	unimp
  fe:	1d12                	slli	s10,s10,0x24
    for(i=0;i<(length/3);i++) {
 100:	3101                	jal	fffffd00 <_stack_start+0xfffefd00>
 102:	55015213          	0x55015213
    asm volatile(
 106:	590b5817          	auipc	a6,0x590b5
    for(i=0;i<(length/3);i++) {
 10a:	000b570b          	0xb570b
 10e:	1300                	addi	s0,sp,416
    asm volatile(
 110:	0005                	c.nop	1
    for(i=0;i<(length/3);i++) {
 112:	1331                	addi	t1,t1,-20
 114:	1702                	slli	a4,a4,0x20
 116:	0000                	unimp
}
 118:	2e14                	fld	fa3,24(a2)
    asm volatile(
 11a:	3f01                	jal	2a <__DYNAMIC+0x2a>
 11c:	0319                	addi	t1,t1,6
 11e:	3a0e                	fld	fs4,224(sp)
 120:	390b3b0b          	0x390b3b0b
    for(i=0;i<(length/3);i++) {
 124:	2019270b          	0x2019270b
  jal x0, default_exc_handler
 128:	0013010b          	0x13010b
  mv  x1, x0
 12c:	1500                	addi	s0,sp,672
 12e:	0005                	c.nop	1
  mv  x2, x1
 130:	0b3a0803          	lb	a6,179(s4)
  mv  x4, x1
 134:	0b390b3b          	0xb390b3b
  mv  x6, x1
 138:	1349                	addi	t1,t1,-14
  mv  x7, x1
 13a:	0000                	unimp
  mv  x8, x1
 13c:	1d16                	slli	s10,s10,0x25
  mv  x9, x1
 13e:	3101                	jal	fffffd3e <_stack_start+0xfffefd3e>
  mv x10, x1
 140:	12011113          	0x12011113
  mv x12, x1
 144:	5806                	lw	a6,96(sp)
  mv x13, x1
 146:	570b590b          	0x570b590b
  mv x15, x1
 14a:	1700000b          	0x1700000b
  mv x17, x1
 14e:	012e                	slli	sp,sp,0xb
  mv x18, x1
 150:	1331                	addi	t1,t1,-20
  mv x19, x1
 152:	0111                	addi	sp,sp,4
  mv x20, x1
 154:	0612                	slli	a2,a2,0x4
  mv x21, x1
 156:	1840                	addi	s0,sp,52
  mv x22, x1
 158:	01194297          	auipc	t0,0x1194
  mv x24, x1
 15c:	18000013          	li	zero,384
  mv x26, x1
 160:	0005                	c.nop	1
  mv x27, x1
 162:	1331                	addi	t1,t1,-20
  mv x28, x1
 164:	1802                	slli	a6,a6,0x20
  mv x29, x1
 166:	0000                	unimp
  mv x30, x1
 168:	2e19                	jal	47e <_bss_end+0x22a>
  mv x31, x1
 16a:	3101                	jal	fffffd6a <_stack_start+0xfffefd6a>
  la   x2, _stack_start
 16c:	12011113          	0x12011113
 170:	4006                	0x4006
 172:	9718                	0x9718
  la x26, _bss_start
 174:	1942                	slli	s2,s2,0x30
 176:	0000                	unimp
  la x27, _bss_end
 178:	0100                	addi	s0,sp,128
 17a:	0011                	c.nop	4
  bge x26, x27, zero_loop_end
 17c:	0610                	addi	a2,sp,768
 17e:	0655                	addi	a2,a2,21
  sw x0, 0(x26)
 180:	0e1b0e03          	lb	t3,225(s6) # 5c0100e1 <_stack_start+0x5c0000e1>
  addi x26, x26, 4
 184:	0e25                	addi	t3,t3,9
  ble x26, x27, zero_loop
 186:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
   0:	010a                	slli	sp,sp,0x2
   2:	0000                	unimp
   4:	0110                	addi	a2,sp,128
   6:	0000                	unimp
   8:	0001                	nop
   a:	105c                	addi	a5,sp,36
   c:	0001                	nop
   e:	2800                	fld	fs0,16(s0)
  10:	0001                	nop
  12:	0400                	addi	s0,sp,512
  14:	f300                	fsw	fs0,32(a4)
  16:	5c01                	li	s8,-32
  18:	009f 0000 0000      	0x9f
  1e:	0000                	unimp
  20:	0a00                	addi	s0,sp,272
  22:	0001                	nop
  24:	1400                	addi	s0,sp,544
  26:	0001                	nop
  28:	0200                	addi	s0,sp,256
  2a:	3000                	fld	fs0,32(s0)
  2c:	149f 0001 2800      	0x28000001149f
  32:	0001                	nop
  34:	0100                	addi	s0,sp,128
  36:	5f00                	lw	s0,56(a4)
	...
  40:	011a                	slli	sp,sp,0x6
  42:	0000                	unimp
  44:	0124                	addi	s1,sp,136
  46:	0000                	unimp
  48:	0001                	nop
  4a:	0000005b          	0x5b
  4e:	0000                	unimp
  50:	0000                	unimp
  52:	1a00                	addi	s0,sp,304
  54:	0001                	nop
  56:	2400                	fld	fs0,8(s0)
  58:	0001                	nop
  5a:	0800                	addi	s0,sp,16
  5c:	7f00                	flw	fs0,56(a4)
  5e:	3c00                	fld	fs0,56(s0)
  60:	7a1e                	flw	fs4,228(sp)
  62:	2200                	fld	fs0,0(a2)
  64:	009f 0000 0000      	0x9f
  6a:	0000                	unimp
  6c:	e200                	fsw	fs0,0(a2)
  6e:	0000                	unimp
  70:	e800                	fsw	fs0,16(s0)
  72:	0000                	unimp
  74:	0100                	addi	s0,sp,128
  76:	5c00                	lw	s0,56(s0)
  78:	00e8                	addi	a0,sp,76
  7a:	0000                	unimp
  jal x0, default_exc_handler
  7c:	0104                	addi	s1,sp,128
  7e:	0000                	unimp
  jal x0, reset_handler
  80:	0004                	0x4
  82:	9f5c01f3          	0x9f5c01f3
	...
    asm volatile(
  8e:	00e2                	slli	ra,ra,0x18
}
  90:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  92:	00ec                	addi	a1,sp,76
  94:	0000                	unimp
  96:	0002                	c.slli64	zero
  98:	9f30                	0x9f30
  9a:	00ec                	addi	a1,sp,76
  9c:	0000                	unimp
  9e:	0104                	addi	s1,sp,128
}
  a0:	0000                	unimp
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	0001                	nop
  a4:	005f 0000 0000      	0x5f
    asm volatile(
  aa:	0000                	unimp
  ac:	f600                	fsw	fs0,40(a2)
  ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  b0:	fc00                	fsw	fs0,56(s0)
  b2:	0000                	unimp
    asm volatile(
  b4:	0600                	addi	s0,sp,768
  b6:	7b00                	flw	fs0,48(a4)
}
  b8:	7e00                	flw	fs0,56(a2)
    for(i=0;i<(length/3);i++) {
  ba:	2200                	fld	fs0,0(a2)
  bc:	fc9f 0000 0000      	0xfc9f
  c2:	0001                	nop
  c4:	0100                	addi	s0,sp,128
  c6:	5e00                	lw	s0,56(a2)
	...
    asm volatile(
  d0:	00f6                	slli	ra,ra,0x1d
  d2:	0000                	unimp
  d4:	00fa                	slli	ra,ra,0x1e
  d6:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  d8:	0006                	c.slli	zero,0x1
  da:	007a                	c.slli	zero,0x1e
    asm volatile(
  dc:	007e                	c.slli	zero,0x1f
  de:	9f22                	add	t5,t5,s0
}
  e0:	00fa                	slli	ra,ra,0x1e
    for(i=0;i<(length/3);i++) {
  e2:	0000                	unimp
  e4:	0100                	addi	s0,sp,128
  e6:	0000                	unimp
  e8:	0001                	nop
  ea:	005d                	c.nop	23
  ec:	0000                	unimp
  ee:	0000                	unimp
}
  f0:	0000                	unimp
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	ba00                	fsd	fs0,48(a2)
  f4:	0000                	unimp
    asm volatile(
  f6:	c000                	sw	s0,0(s0)
  f8:	0000                	unimp
  fa:	0100                	addi	s0,sp,128
  fc:	5c00                	lw	s0,56(s0)
  fe:	00c0                	addi	s0,sp,68
    for(i=0;i<(length/3);i++) {
 100:	0000                	unimp
 102:	00dc                	addi	a5,sp,68
    asm volatile(
 104:	0000                	unimp
 106:	0004                	0x4
}
 108:	9f5c01f3          	0x9f5c01f3
	...
    for(i=0;i<(length/3);i++) {
 114:	00ba                	slli	ra,ra,0xe
 116:	0000                	unimp
}
 118:	00c4                	addi	s1,sp,68
    asm volatile(
 11a:	0000                	unimp
 11c:	0002                	c.slli64	zero
 11e:	9f30                	0x9f30
 120:	00c4                	addi	s1,sp,68
 122:	0000                	unimp
    for(i=0;i<(length/3);i++) {
 124:	00dc                	addi	a5,sp,68
 126:	0000                	unimp
  jal x0, default_exc_handler
 128:	0001                	nop
 12a:	005f 0000 0000      	0x5f
  mv  x2, x1
 130:	0000                	unimp
  mv  x3, x1
 132:	ce00                	sw	s0,24(a2)
  mv  x4, x1
 134:	0000                	unimp
  mv  x5, x1
 136:	d400                	sw	s0,40(s0)
  mv  x6, x1
 138:	0000                	unimp
  mv  x7, x1
 13a:	0600                	addi	s0,sp,768
  mv  x8, x1
 13c:	7b00                	flw	fs0,48(a4)
  mv  x9, x1
 13e:	7e00                	flw	fs0,56(a2)
  mv x10, x1
 140:	2200                	fld	fs0,0(a2)
  mv x11, x1
 142:	d49f 0000 d800      	0xd8000000d49f
  mv x14, x1
 148:	0000                	unimp
  mv x15, x1
 14a:	0100                	addi	s0,sp,128
  mv x16, x1
 14c:	5e00                	lw	s0,56(a2)
	...
  mv x21, x1
 156:	00ce                	slli	ra,ra,0x13
  mv x22, x1
 158:	0000                	unimp
  mv x23, x1
 15a:	00d2                	slli	ra,ra,0x14
  mv x24, x1
 15c:	0000                	unimp
  mv x25, x1
 15e:	0006                	c.slli	zero,0x1
  mv x26, x1
 160:	007a                	c.slli	zero,0x1e
  mv x27, x1
 162:	007e                	c.slli	zero,0x1f
  mv x28, x1
 164:	9f22                	add	t5,t5,s0
  mv x29, x1
 166:	00d2                	slli	ra,ra,0x14
  mv x30, x1
 168:	0000                	unimp
  mv x31, x1
 16a:	00d8                	addi	a4,sp,68
  la   x2, _stack_start
 16c:	0000                	unimp
 16e:	0001                	nop
 170:	005d                	c.nop	23
 172:	0000                	unimp
  la x26, _bss_start
 174:	0000                	unimp
 176:	0000                	unimp
  la x27, _bss_end
 178:	9200                	0x9200
 17a:	0000                	unimp
  bge x26, x27, zero_loop_end
 17c:	9800                	0x9800
 17e:	0000                	unimp
  sw x0, 0(x26)
 180:	0100                	addi	s0,sp,128
 182:	5c00                	lw	s0,56(s0)
  addi x26, x26, 4
 184:	0098                	addi	a4,sp,64
  ble x26, x27, zero_loop
 186:	0000                	unimp
 188:	00b4                	addi	a3,sp,72
  addi x10, x0, 0
 18a:	0000                	unimp
 18c:	0004                	0x4
  addi x11, x0, 0
 18e:	9f5c01f3          	0x9f5c01f3
	...
int main() {
 19a:	0092                	slli	ra,ra,0x4
*var = 0xDC;
 19c:	0000                	unimp
 19e:	009c                	addi	a5,sp,64
 1a0:	0000                	unimp
 1a2:	0002                	c.slli64	zero
array_add(array1,array2,6); // array1 = {3,6,9,12,15,18}
 1a4:	9f30                	0x9f30
 1a6:	009c                	addi	a5,sp,64
 1a8:	0000                	unimp
 1aa:	00b4                	addi	a3,sp,72
 1ac:	0000                	unimp
 1ae:	0001                	nop
*var = 0xCC;
 1b0:	005f 0000 0000      	0x5f
array_equ(array1,array2,6); // array1 = {2,4,6,8,10,12}
 1b6:	0000                	unimp
 1b8:	a600                	fsd	fs0,8(a2)
 1ba:	0000                	unimp
 1bc:	ac00                	fsd	fs0,24(s0)
 1be:	0000                	unimp
 1c0:	0600                	addi	s0,sp,768
*var = 0xCB;
 1c2:	7b00                	flw	fs0,48(a4)
 1c4:	7e00                	flw	fs0,56(a2)
 1c6:	2200                	fld	fs0,0(a2)
array_mod(array1,7,6);  // array1 = {2,4,6,1,3,5}
 1c8:	ac9f 0000 b000      	0xb0000000ac9f
 1ce:	0000                	unimp
 1d0:	0100                	addi	s0,sp,128
*var = 0xBB;
 1d2:	5e00                	lw	s0,56(a2)
	...
array_sub(array1,array2,6); //  array1 = {0,0,0,-7,-7-7}
 1dc:	00a6                	slli	ra,ra,0x9
 1de:	0000                	unimp
 1e0:	00aa                	slli	ra,ra,0xa
 1e2:	0000                	unimp
*var = 0xBA;
 1e4:	0006                	c.slli	zero,0x1
 1e6:	007a                	c.slli	zero,0x1e
 1e8:	007e                	c.slli	zero,0x1f
array_mod(array1,7,6);  // array1 = {0,0,0,0,0,0}
 1ea:	9f22                	add	t5,t5,s0
 1ec:	00aa                	slli	ra,ra,0xa
 1ee:	0000                	unimp
 1f0:	00b0                	addi	a2,sp,72
 1f2:	0000                	unimp
*var = 0xAA;
 1f4:	0001                	nop
 1f6:	005d                	c.nop	23
 1f8:	0000                	unimp
 1fa:	0000                	unimp
while(1){
 1fc:	0000                	unimp
 1fe:	8c00                	0x8c00
 200:	0000                	unimp
 202:	9000                	0x9000
 204:	0000                	unimp
 206:	0100                	addi	s0,sp,128
 208:	5a00                	lw	s0,48(a2)
	...
 212:	00b4                	addi	a3,sp,72
 214:	0000                	unimp
 216:	00b8                	addi	a4,sp,72
 218:	0000                	unimp
 21a:	0001                	nop
 21c:	005a                	c.slli	zero,0x16
 21e:	0000                	unimp
 220:	0000                	unimp
 222:	0000                	unimp
 224:	dc00                	sw	s0,56(s0)
 226:	0000                	unimp
 228:	e000                	fsw	fs0,0(s0)
 22a:	0000                	unimp
 22c:	0100                	addi	s0,sp,128
 22e:	5a00                	lw	s0,48(a2)
	...
 238:	0104                	addi	s1,sp,128
 23a:	0000                	unimp
 23c:	0108                	addi	a0,sp,128
 23e:	0000                	unimp
 240:	0001                	nop
 242:	005a                	c.slli	zero,0x16
 244:	0000                	unimp
 246:	0000                	unimp
 248:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	009c                	addi	a5,sp,64
  16:	0000                	unimp
  18:	0196                	slli	gp,gp,0x5
  1a:	0000                	unimp
  1c:	0068                	addi	a0,sp,12
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	0495                	addi	s1,s1,5
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0128                	addi	a0,sp,136
  3a:	0000                	unimp
  3c:	006e                	c.slli	zero,0x1b
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	0110                	addi	a2,sp,128
   2:	0000                	unimp
   4:	0112                	slli	sp,sp,0x4
   6:	0000                	unimp
   8:	011a                	slli	sp,sp,0x6
   a:	0000                	unimp
   c:	0124                	addi	s1,sp,136
	...
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0128                	addi	a0,sp,136
  1e:	0000                	unimp
  20:	0196                	slli	gp,gp,0x5
  22:	0000                	unimp
  24:	01fe                	slli	gp,gp,0x1f
	...
  2e:	0000                	unimp
  30:	ffff                	0xffff
  32:	ffff                	0xffff
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0128                	addi	a0,sp,136
  3a:	0000                	unimp
  3c:	0196                	slli	gp,gp,0x5
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	03ac                	addi	a1,sp,456
   2:	0000                	unimp
   4:	00220003          	lb	zero,2(tp) # fffe0002 <_stack_start+0xfffd0002>
   8:	0000                	unimp
   a:	0101                	addi	sp,sp,0
   c:	000d0efb          	0xd0efb
  10:	0101                	addi	sp,sp,0
  12:	0101                	addi	sp,sp,0
  14:	0000                	unimp
  16:	0100                	addi	s0,sp,128
  18:	0000                	unimp
  1a:	0001                	nop
  1c:	74737563          	bgeu	t1,t2,766 <_bss_end+0x512>
  20:	745f 7365 2e74      	0x2e747365745f
  26:	00000063          	beqz	zero,26 <__DYNAMIC+0x26>
  2a:	0000                	unimp
  2c:	3305                	jal	fffffd4c <_stack_start+0xfffefd4c>
  2e:	0500                	addi	s0,sp,640
  30:	8c02                	jr	s8
  32:	0000                	unimp
  34:	0300                	addi	s0,sp,384
  36:	010a                	slli	sp,sp,0x2
  38:	0505                	addi	a0,a0,1
  3a:	00090703          	lb	a4,0(s2) # 4000 <_stack_len>
  3e:	0100                	addi	s0,sp,128
  40:	04090903          	lb	s2,64(s2)
  44:	0100                	addi	s0,sp,128
  46:	0105                	addi	sp,sp,1
  48:	0306                	slli	t1,t1,0x1
  4a:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
  4e:	0501                	addi	a0,a0,0
  50:	062e                	slli	a2,a2,0xb
  52:	02090103          	lb	sp,32(s2)
  56:	0100                	addi	s0,sp,128
  58:	0105                	addi	sp,sp,1
  5a:	00090103          	lb	sp,0(s2)
  5e:	0100                	addi	s0,sp,128
  60:	0505                	addi	a0,a0,1
  62:	00090103          	lb	sp,0(s2)
  66:	0100                	addi	s0,sp,128
  68:	1605                	addi	a2,a2,-31
  6a:	0306                	slli	t1,t1,0x1
  6c:	0900                	addi	s0,sp,144
  6e:	0000                	unimp
  70:	0501                	addi	a0,a0,0
  72:	030a                	slli	t1,t1,0x2
  74:	0900                	addi	s0,sp,144
  76:	0008                	0x8
  78:	0501                	addi	a0,a0,0
  7a:	000d                	c.nop	3
  jal x0, default_exc_handler
  7c:	0402                	c.slli64	s0
  7e:	0601                	addi	a2,a2,0
  jal x0, reset_handler
  80:	02090003          	lb	zero,32(s2)
  jal x0, default_exc_handler
  84:	0100                	addi	s0,sp,128
  86:	0505                	addi	a0,a0,1
  jal x0, default_exc_handler
  88:	0200                	addi	s0,sp,256
  8a:	0104                	addi	s1,sp,128
    asm volatile(
  8c:	0306                	slli	t1,t1,0x1
  8e:	0900                	addi	s0,sp,144
}
  90:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  92:	0501                	addi	a0,a0,0
  94:	0301                	addi	t1,t1,0
  96:	00040903          	lb	s2,0(s0) # 3e408 <_stack_start+0x2e408>
  9a:	0501                	addi	a0,a0,0
  9c:	0009                	c.nop	2
  9e:	0402                	c.slli64	s0
}
  a0:	7e030603          	lb	a2,2016(t1)
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a4:	0209                	addi	tp,tp,2
    asm volatile(
  a6:	0100                	addi	s0,sp,128
  a8:	0505                	addi	a0,a0,1
  aa:	0200                	addi	s0,sp,256
  ac:	0304                	addi	s1,sp,384
  ae:	04097003          	0x4097003
    for(i=0;i<(length/3);i++) {
  b2:	0100                	addi	s0,sp,128
    asm volatile(
  b4:	0200                	addi	s0,sp,256
  b6:	0304                	addi	s1,sp,384
}
  b8:	0a090903          	lb	s2,160(s2)
    for(i=0;i<(length/3);i++) {
  bc:	0100                	addi	s0,sp,128
  be:	1a05                	addi	s4,s4,-31
  c0:	0200                	addi	s0,sp,256
  c2:	0304                	addi	s1,sp,384
  c4:	00090603          	lb	a2,0(s2)
}
  c8:	0100                	addi	s0,sp,128
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  ca:	1b05                	addi	s6,s6,-31
  cc:	0200                	addi	s0,sp,256
    asm volatile(
  ce:	0304                	addi	s1,sp,384
  d0:	0306                	slli	t1,t1,0x1
  d2:	0900                	addi	s0,sp,144
  d4:	0000                	unimp
  d6:	0501                	addi	a0,a0,0
    for(i=0;i<(length/3);i++) {
  d8:	0634                	addi	a3,sp,776
  da:	04090503          	lb	a0,64(s2)
    asm volatile(
  de:	0100                	addi	s0,sp,128
}
  e0:	0505                	addi	a0,a0,1
    for(i=0;i<(length/3);i++) {
  e2:	00090603          	lb	a2,0(s2)
  e6:	0100                	addi	s0,sp,128
  e8:	04090903          	lb	s2,64(s2)
  ec:	0100                	addi	s0,sp,128
  ee:	0105                	addi	sp,sp,1
}
  f0:	0306                	slli	t1,t1,0x1
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	0901                	addi	s2,s2,0
  f4:	0000                	unimp
    asm volatile(
  f6:	0501                	addi	a0,a0,0
  f8:	062d                	addi	a2,a2,11
  fa:	02090103          	lb	sp,32(s2)
  fe:	0100                	addi	s0,sp,128
    for(i=0;i<(length/3);i++) {
 100:	0105                	addi	sp,sp,1
 102:	00090103          	lb	sp,0(s2)
    asm volatile(
 106:	0100                	addi	s0,sp,128
}
 108:	0505                	addi	a0,a0,1
    for(i=0;i<(length/3);i++) {
 10a:	00090103          	lb	sp,0(s2)
 10e:	0100                	addi	s0,sp,128
    asm volatile(
 110:	1605                	addi	a2,a2,-31
    for(i=0;i<(length/3);i++) {
 112:	0306                	slli	t1,t1,0x1
 114:	0900                	addi	s0,sp,144
 116:	0000                	unimp
}
 118:	0501                	addi	a0,a0,0
    asm volatile(
 11a:	030a                	slli	t1,t1,0x2
 11c:	0900                	addi	s0,sp,144
 11e:	0008                	0x8
 120:	0501                	addi	a0,a0,0
 122:	000d                	c.nop	3
    for(i=0;i<(length/3);i++) {
 124:	0402                	c.slli64	s0
 126:	0601                	addi	a2,a2,0
  jal x0, default_exc_handler
 128:	02090003          	lb	zero,32(s2)
  mv  x1, x0
 12c:	0100                	addi	s0,sp,128
 12e:	0505                	addi	a0,a0,1
  mv  x2, x1
 130:	0200                	addi	s0,sp,256
  mv  x3, x1
 132:	0104                	addi	s1,sp,128
  mv  x4, x1
 134:	0306                	slli	t1,t1,0x1
  mv  x5, x1
 136:	0900                	addi	s0,sp,144
  mv  x6, x1
 138:	0000                	unimp
  mv  x7, x1
 13a:	0501                	addi	a0,a0,0
  mv  x8, x1
 13c:	0301                	addi	t1,t1,0
  mv  x9, x1
 13e:	00040903          	lb	s2,0(s0)
  mv x11, x1
 142:	0501                	addi	a0,a0,0
  mv x12, x1
 144:	0009                	c.nop	2
  mv x13, x1
 146:	0402                	c.slli64	s0
  mv x14, x1
 148:	7e030603          	lb	a2,2016(t1)
  mv x16, x1
 14c:	0209                	addi	tp,tp,2
  mv x17, x1
 14e:	0100                	addi	s0,sp,128
  mv x18, x1
 150:	0505                	addi	a0,a0,1
  mv x19, x1
 152:	0200                	addi	s0,sp,256
  mv x20, x1
 154:	0304                	addi	s1,sp,384
  mv x21, x1
 156:	04097203          	0x4097203
  mv x23, x1
 15a:	0100                	addi	s0,sp,128
  mv x24, x1
 15c:	0200                	addi	s0,sp,256
  mv x25, x1
 15e:	0304                	addi	s1,sp,384
  mv x26, x1
 160:	0a090903          	lb	s2,160(s2)
  mv x28, x1
 164:	0100                	addi	s0,sp,128
  mv x29, x1
 166:	1a05                	addi	s4,s4,-31
  mv x30, x1
 168:	0200                	addi	s0,sp,256
  mv x31, x1
 16a:	0304                	addi	s1,sp,384
  la   x2, _stack_start
 16c:	00090403          	lb	s0,0(s2)
 170:	0100                	addi	s0,sp,128
 172:	1b05                	addi	s6,s6,-31
  la x26, _bss_start
 174:	0200                	addi	s0,sp,256
 176:	0304                	addi	s1,sp,384
  la x27, _bss_end
 178:	0306                	slli	t1,t1,0x1
 17a:	0900                	addi	s0,sp,144
  bge x26, x27, zero_loop_end
 17c:	0000                	unimp
 17e:	0501                	addi	a0,a0,0
  sw x0, 0(x26)
 180:	05030633          	0x5030633
  addi x26, x26, 4
 184:	0409                	addi	s0,s0,2
  ble x26, x27, zero_loop
 186:	0100                	addi	s0,sp,128
 188:	0505                	addi	a0,a0,1
  addi x10, x0, 0
 18a:	00090603          	lb	a2,0(s2)
  addi x11, x0, 0
 18e:	0100                	addi	s0,sp,128
 190:	04090903          	lb	s2,64(s2)
  jal x1, main
 194:	0100                	addi	s0,sp,128
int main() {
 196:	0105                	addi	sp,sp,1
 198:	0306                	slli	t1,t1,0x1
 19a:	0902                	c.slli64	s2
*var = 0xDC;
 19c:	0000                	unimp
 19e:	0501                	addi	a0,a0,0
 1a0:	062c                	addi	a1,sp,776
 1a2:	02090103          	lb	sp,32(s2)
array_add(array1,array2,6); // array1 = {3,6,9,12,15,18}
 1a6:	0100                	addi	s0,sp,128
 1a8:	0105                	addi	sp,sp,1
 1aa:	00090103          	lb	sp,0(s2)
 1ae:	0100                	addi	s0,sp,128
*var = 0xCC;
 1b0:	0505                	addi	a0,a0,1
 1b2:	00090103          	lb	sp,0(s2)
array_equ(array1,array2,6); // array1 = {2,4,6,8,10,12}
 1b6:	0100                	addi	s0,sp,128
 1b8:	1605                	addi	a2,a2,-31
 1ba:	0306                	slli	t1,t1,0x1
 1bc:	0900                	addi	s0,sp,144
 1be:	0000                	unimp
 1c0:	0501                	addi	a0,a0,0
*var = 0xCB;
 1c2:	030a                	slli	t1,t1,0x2
 1c4:	0900                	addi	s0,sp,144
 1c6:	0008                	0x8
array_mod(array1,7,6);  // array1 = {2,4,6,1,3,5}
 1c8:	0501                	addi	a0,a0,0
 1ca:	000d                	c.nop	3
 1cc:	0402                	c.slli64	s0
 1ce:	0601                	addi	a2,a2,0
 1d0:	02090003          	lb	zero,32(s2)
*var = 0xBB;
 1d4:	0100                	addi	s0,sp,128
 1d6:	0505                	addi	a0,a0,1
array_sub(array1,array2,6); //  array1 = {0,0,0,-7,-7-7}
 1d8:	0200                	addi	s0,sp,256
 1da:	0104                	addi	s1,sp,128
 1dc:	0306                	slli	t1,t1,0x1
 1de:	0900                	addi	s0,sp,144
 1e0:	0000                	unimp
 1e2:	0501                	addi	a0,a0,0
*var = 0xBA;
 1e4:	0301                	addi	t1,t1,0
 1e6:	00040903          	lb	s2,0(s0)
array_mod(array1,7,6);  // array1 = {0,0,0,0,0,0}
 1ea:	0501                	addi	a0,a0,0
 1ec:	0009                	c.nop	2
 1ee:	0402                	c.slli64	s0
 1f0:	7e030603          	lb	a2,2016(t1)
*var = 0xAA;
 1f4:	0209                	addi	tp,tp,2
 1f6:	0100                	addi	s0,sp,128
 1f8:	0505                	addi	a0,a0,1
 1fa:	0200                	addi	s0,sp,256
while(1){
 1fc:	0304                	addi	s1,sp,384
 1fe:	04097103          	0x4097103
 202:	0100                	addi	s0,sp,128
 204:	0200                	addi	s0,sp,256
 206:	0304                	addi	s1,sp,384
 208:	0a090903          	lb	s2,160(s2)
 20c:	0100                	addi	s0,sp,128
 20e:	1a05                	addi	s4,s4,-31
 210:	0200                	addi	s0,sp,256
 212:	0304                	addi	s1,sp,384
 214:	00090503          	lb	a0,0(s2)
 218:	0100                	addi	s0,sp,128
 21a:	1b05                	addi	s6,s6,-31
 21c:	0200                	addi	s0,sp,256
 21e:	0304                	addi	s1,sp,384
 220:	0306                	slli	t1,t1,0x1
 222:	0900                	addi	s0,sp,144
 224:	0000                	unimp
 226:	0501                	addi	a0,a0,0
 228:	0634                	addi	a3,sp,776
 22a:	04090503          	lb	a0,64(s2)
 22e:	0100                	addi	s0,sp,128
 230:	0505                	addi	a0,a0,1
 232:	00090203          	lb	tp,0(s2)
 236:	0100                	addi	s0,sp,128
 238:	04090903          	lb	s2,64(s2)
 23c:	0100                	addi	s0,sp,128
 23e:	0105                	addi	sp,sp,1
 240:	0306                	slli	t1,t1,0x1
 242:	0901                	addi	s2,s2,0
 244:	0000                	unimp
 246:	0501                	addi	a0,a0,0
 248:	062c                	addi	a1,sp,776
 24a:	02090103          	lb	sp,32(s2)
 24e:	0100                	addi	s0,sp,128
 250:	0105                	addi	sp,sp,1
 252:	00090503          	lb	a0,0(s2)
 256:	0100                	addi	s0,sp,128
 258:	0505                	addi	a0,a0,1
 25a:	00090203          	lb	tp,0(s2)
 25e:	0100                	addi	s0,sp,128
 260:	1605                	addi	a2,a2,-31
 262:	0306                	slli	t1,t1,0x1
 264:	0900                	addi	s0,sp,144
 266:	0000                	unimp
 268:	0501                	addi	a0,a0,0
 26a:	0305                	addi	t1,t1,1
 26c:	096e                	slli	s2,s2,0x1b
 26e:	0006                	c.slli	zero,0x1
 270:	0501                	addi	a0,a0,0
 272:	030a                	slli	t1,t1,0x2
 274:	0912                	slli	s2,s2,0x4
 276:	0002                	c.slli64	zero
 278:	0501                	addi	a0,a0,0
 27a:	000d                	c.nop	3
 27c:	0402                	c.slli64	s0
 27e:	0601                	addi	a2,a2,0
 280:	02090003          	lb	zero,32(s2)
 284:	0100                	addi	s0,sp,128
 286:	0505                	addi	a0,a0,1
 288:	0200                	addi	s0,sp,256
 28a:	0104                	addi	s1,sp,128
 28c:	0306                	slli	t1,t1,0x1
 28e:	0900                	addi	s0,sp,144
 290:	0000                	unimp
 292:	0501                	addi	a0,a0,0
 294:	0301                	addi	t1,t1,0
 296:	0904                	addi	s1,sp,144
 298:	0004                	0x4
 29a:	0501                	addi	a0,a0,0
 29c:	0009                	c.nop	2
 29e:	0402                	c.slli64	s0
 2a0:	7d030603          	lb	a2,2000(t1)
 2a4:	0209                	addi	tp,tp,2
 2a6:	0100                	addi	s0,sp,128
 2a8:	0505                	addi	a0,a0,1
 2aa:	0200                	addi	s0,sp,256
 2ac:	0304                	addi	s1,sp,384
 2ae:	00096d03          	0x96d03
 2b2:	0100                	addi	s0,sp,128
 2b4:	0200                	addi	s0,sp,256
 2b6:	0304                	addi	s1,sp,384
 2b8:	0a090903          	lb	s2,160(s2)
 2bc:	0100                	addi	s0,sp,128
 2be:	1a05                	addi	s4,s4,-31
 2c0:	0200                	addi	s0,sp,256
 2c2:	0304                	addi	s1,sp,384
 2c4:	00090903          	lb	s2,0(s2)
 2c8:	0100                	addi	s0,sp,128
 2ca:	1b05                	addi	s6,s6,-31
 2cc:	0200                	addi	s0,sp,256
 2ce:	0304                	addi	s1,sp,384
 2d0:	0306                	slli	t1,t1,0x1
 2d2:	0900                	addi	s0,sp,144
 2d4:	0000                	unimp
 2d6:	0901                	addi	s2,s2,0
 2d8:	0004                	0x4
 2da:	0100                	addi	s0,sp,128
 2dc:	0501                	addi	a0,a0,0
 2de:	000c                	0xc
 2e0:	0205                	addi	tp,tp,1
 2e2:	0196                	slli	gp,gp,0x5
 2e4:	0000                	unimp
 2e6:	0100f503          	0x100f503
 2ea:	0105                	addi	sp,sp,1
 2ec:	00091003          	lh	zero,0(s2)
 2f0:	0100                	addi	s0,sp,128
 2f2:	00090203          	lb	tp,0(s2)
 2f6:	0100                	addi	s0,sp,128
 2f8:	0c05                	addi	s8,s8,1
 2fa:	0306                	slli	t1,t1,0x1
 2fc:	096e                	slli	s2,s2,0x1b
 2fe:	0000                	unimp
 300:	0501                	addi	a0,a0,0
 302:	0306                	slli	t1,t1,0x1
 304:	0912                	slli	s2,s2,0x4
 306:	0006                	c.slli	zero,0x1
 308:	0501                	addi	a0,a0,0
 30a:	0601                	addi	a2,a2,0
 30c:	08090203          	lb	tp,128(s2)
 310:	0100                	addi	s0,sp,128
 312:	0c090203          	lb	tp,192(s2)
 316:	0100                	addi	s0,sp,128
 318:	0605                	addi	a2,a2,1
 31a:	0306                	slli	t1,t1,0x1
 31c:	0900                	addi	s0,sp,144
 31e:	0000                	unimp
 320:	0501                	addi	a0,a0,0
 322:	0601                	addi	a2,a2,0
 324:	06090203          	lb	tp,96(s2)
 328:	0100                	addi	s0,sp,128
 32a:	0c090203          	lb	tp,192(s2)
 32e:	0100                	addi	s0,sp,128
 330:	0605                	addi	a2,a2,1
 332:	0306                	slli	t1,t1,0x1
 334:	0900                	addi	s0,sp,144
 336:	0000                	unimp
 338:	0501                	addi	a0,a0,0
 33a:	0601                	addi	a2,a2,0
 33c:	06090203          	lb	tp,96(s2)
 340:	0100                	addi	s0,sp,128
 342:	0a090203          	lb	tp,160(s2)
 346:	0100                	addi	s0,sp,128
 348:	0605                	addi	a2,a2,1
 34a:	0306                	slli	t1,t1,0x1
 34c:	0900                	addi	s0,sp,144
 34e:	0000                	unimp
 350:	0501                	addi	a0,a0,0
 352:	0601                	addi	a2,a2,0
 354:	06090203          	lb	tp,96(s2)
 358:	0100                	addi	s0,sp,128
 35a:	0c090203          	lb	tp,192(s2)
 35e:	0100                	addi	s0,sp,128
 360:	0605                	addi	a2,a2,1
 362:	0306                	slli	t1,t1,0x1
 364:	0900                	addi	s0,sp,144
 366:	0000                	unimp
 368:	0501                	addi	a0,a0,0
 36a:	0601                	addi	a2,a2,0
 36c:	06090203          	lb	tp,96(s2)
 370:	0100                	addi	s0,sp,128
 372:	0605                	addi	a2,a2,1
 374:	0306                	slli	t1,t1,0x1
 376:	0905                	addi	s2,s2,1
 378:	000a                	c.slli	zero,0x2
 37a:	0501                	addi	a0,a0,0
 37c:	0001                	nop
 37e:	0402                	c.slli64	s0
 380:	0601                	addi	a2,a2,0
 382:	06097f03          	0x6097f03
 386:	0100                	addi	s0,sp,128
 388:	0200                	addi	s0,sp,256
 38a:	0104                	addi	s1,sp,128
 38c:	00090103          	lb	sp,0(s2)
 390:	0100                	addi	s0,sp,128
 392:	0605                	addi	a2,a2,1
 394:	0200                	addi	s0,sp,256
 396:	0104                	addi	s1,sp,128
 398:	0306                	slli	t1,t1,0x1
 39a:	0900                	addi	s0,sp,144
 39c:	0000                	unimp
 39e:	0001                	nop
 3a0:	0402                	c.slli64	s0
 3a2:	0601                	addi	a2,a2,0
 3a4:	02097f03          	0x2097f03
 3a8:	0100                	addi	s0,sp,128
 3aa:	0209                	addi	tp,tp,2
 3ac:	0000                	unimp
 3ae:	0101                	addi	sp,sp,0
 3b0:	0150                	addi	a2,sp,132
 3b2:	0000                	unimp
 3b4:	001d0003          	lb	zero,1(s10)
 3b8:	0000                	unimp
 3ba:	0101                	addi	sp,sp,0
 3bc:	000d0efb          	0xd0efb
 3c0:	0101                	addi	sp,sp,0
 3c2:	0101                	addi	sp,sp,0
 3c4:	0000                	unimp
 3c6:	0100                	addi	s0,sp,128
 3c8:	0000                	unimp
 3ca:	0001                	nop
 3cc:	30747263          	bgeu	s0,t2,6d0 <_bss_end+0x47c>
 3d0:	532e                	lw	t1,232(sp)
 3d2:	0000                	unimp
 3d4:	0000                	unimp
 3d6:	0000                	unimp
 3d8:	0205                	addi	tp,tp,1
 3da:	0128                	addi	a0,sp,136
 3dc:	0000                	unimp
 3de:	0315                	addi	t1,t1,5
 3e0:	0904                	addi	s1,sp,144
 3e2:	0004                	0x4
 3e4:	0301                	addi	t1,t1,0
 3e6:	0901                	addi	s2,s2,0
 3e8:	0004                	0x4
 3ea:	0301                	addi	t1,t1,0
 3ec:	0901                	addi	s2,s2,0
 3ee:	0002                	c.slli64	zero
 3f0:	0301                	addi	t1,t1,0
 3f2:	0901                	addi	s2,s2,0
 3f4:	0002                	c.slli64	zero
 3f6:	0301                	addi	t1,t1,0
 3f8:	0901                	addi	s2,s2,0
 3fa:	0002                	c.slli64	zero
 3fc:	0301                	addi	t1,t1,0
 3fe:	0901                	addi	s2,s2,0
 400:	0002                	c.slli64	zero
 402:	0301                	addi	t1,t1,0
 404:	0901                	addi	s2,s2,0
 406:	0002                	c.slli64	zero
 408:	0301                	addi	t1,t1,0
 40a:	0901                	addi	s2,s2,0
 40c:	0002                	c.slli64	zero
 40e:	0301                	addi	t1,t1,0
 410:	0901                	addi	s2,s2,0
 412:	0002                	c.slli64	zero
 414:	0301                	addi	t1,t1,0
 416:	0901                	addi	s2,s2,0
 418:	0002                	c.slli64	zero
 41a:	0301                	addi	t1,t1,0
 41c:	0901                	addi	s2,s2,0
 41e:	0002                	c.slli64	zero
 420:	0301                	addi	t1,t1,0
 422:	0901                	addi	s2,s2,0
 424:	0002                	c.slli64	zero
 426:	0301                	addi	t1,t1,0
 428:	0901                	addi	s2,s2,0
 42a:	0002                	c.slli64	zero
 42c:	0301                	addi	t1,t1,0
 42e:	0901                	addi	s2,s2,0
 430:	0002                	c.slli64	zero
 432:	0301                	addi	t1,t1,0
 434:	0901                	addi	s2,s2,0
 436:	0002                	c.slli64	zero
 438:	0301                	addi	t1,t1,0
 43a:	0901                	addi	s2,s2,0
 43c:	0002                	c.slli64	zero
 43e:	0301                	addi	t1,t1,0
 440:	0901                	addi	s2,s2,0
 442:	0002                	c.slli64	zero
 444:	0301                	addi	t1,t1,0
 446:	0901                	addi	s2,s2,0
 448:	0002                	c.slli64	zero
 44a:	0301                	addi	t1,t1,0
 44c:	0901                	addi	s2,s2,0
 44e:	0002                	c.slli64	zero
 450:	0301                	addi	t1,t1,0
 452:	0901                	addi	s2,s2,0
 454:	0002                	c.slli64	zero
 456:	0301                	addi	t1,t1,0
 458:	0901                	addi	s2,s2,0
 45a:	0002                	c.slli64	zero
 45c:	0301                	addi	t1,t1,0
 45e:	0901                	addi	s2,s2,0
 460:	0002                	c.slli64	zero
 462:	0301                	addi	t1,t1,0
 464:	0901                	addi	s2,s2,0
 466:	0002                	c.slli64	zero
 468:	0301                	addi	t1,t1,0
 46a:	0901                	addi	s2,s2,0
 46c:	0002                	c.slli64	zero
 46e:	0301                	addi	t1,t1,0
 470:	0901                	addi	s2,s2,0
 472:	0002                	c.slli64	zero
 474:	0301                	addi	t1,t1,0
 476:	0901                	addi	s2,s2,0
 478:	0002                	c.slli64	zero
 47a:	0301                	addi	t1,t1,0
 47c:	0901                	addi	s2,s2,0
 47e:	0002                	c.slli64	zero
 480:	0301                	addi	t1,t1,0
 482:	0901                	addi	s2,s2,0
 484:	0002                	c.slli64	zero
 486:	0301                	addi	t1,t1,0
 488:	0901                	addi	s2,s2,0
 48a:	0002                	c.slli64	zero
 48c:	0301                	addi	t1,t1,0
 48e:	0901                	addi	s2,s2,0
 490:	0002                	c.slli64	zero
 492:	0301                	addi	t1,t1,0
 494:	0901                	addi	s2,s2,0
 496:	0002                	c.slli64	zero
 498:	0301                	addi	t1,t1,0
 49a:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
 49e:	0301                	addi	t1,t1,0
 4a0:	0906                	slli	s2,s2,0x1
 4a2:	0008                	0x8
 4a4:	0301                	addi	t1,t1,0
 4a6:	0901                	addi	s2,s2,0
 4a8:	0004                	0x4
 4aa:	0301                	addi	t1,t1,0
 4ac:	0902                	c.slli64	s2
 4ae:	0004                	0x4
 4b0:	0301                	addi	t1,t1,0
 4b2:	00040903          	lb	s2,0(s0)
 4b6:	0301                	addi	t1,t1,0
 4b8:	0901                	addi	s2,s2,0
 4ba:	0004                	0x4
 4bc:	0301                	addi	t1,t1,0
 4be:	0901                	addi	s2,s2,0
 4c0:	0002                	c.slli64	zero
 4c2:	0301                	addi	t1,t1,0
 4c4:	0906                	slli	s2,s2,0x1
 4c6:	0004                	0x4
 4c8:	0301                	addi	t1,t1,0
 4ca:	0901                	addi	s2,s2,0
 4cc:	0004                	0x4
 4ce:	0301                	addi	t1,t1,0
 4d0:	0901                	addi	s2,s2,0
 4d2:	0004                	0x4
 4d4:	0901                	addi	s2,s2,0
 4d6:	0004                	0x4
 4d8:	0100                	addi	s0,sp,128
 4da:	0001                	nop
 4dc:	0205                	addi	tp,tp,1
 4de:	0000                	unimp
 4e0:	0000                	unimp
 4e2:	0100cb03          	lbu	s6,16(ra)
 4e6:	7c090103          	lb	sp,1984(s2)
 4ea:	0100                	addi	s0,sp,128
 4ec:	04090403          	lb	s0,64(s2)
 4f0:	0100                	addi	s0,sp,128
 4f2:	04090403          	lb	s0,64(s2)
 4f6:	0100                	addi	s0,sp,128
 4f8:	04090403          	lb	s0,64(s2)
 4fc:	0100                	addi	s0,sp,128
 4fe:	0409                	addi	s0,s0,2
 500:	0000                	unimp
 502:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	7261                	lui	tp,0xffff8
   2:	6172                	flw	ft2,28(sp)
   4:	5f79                	li	t5,-2
   6:	6f6d                	lui	t5,0x1b
   8:	0064                	addi	s1,sp,12
   a:	6e75                	lui	t3,0x1d
   c:	6e676973          	csrrsi	s2,0x6e6,14
  10:	6465                	lui	s0,0x19
  12:	6320                	flw	fs0,64(a4)
  14:	6168                	flw	fa0,68(a0)
  16:	0072                	c.slli	zero,0x1c
  18:	7261                	lui	tp,0xffff8
  1a:	6172                	flw	ft2,28(sp)
  1c:	5f79                	li	t5,-2
  1e:	6461                	lui	s0,0x18
  20:	0064                	addi	s1,sp,12
  22:	726f6873          	csrrsi	a6,0x726,30
  26:	2074                	fld	fa3,192(s0)
  28:	6e75                	lui	t3,0x1d
  2a:	6e676973          	csrrsi	s2,0x6e6,14
  2e:	6465                	lui	s0,0x19
  30:	6920                	flw	fs0,80(a0)
  32:	746e                	flw	fs0,248(sp)
  34:	6300                	flw	fs0,0(a4)
  36:	7375                	lui	t1,0xffffd
  38:	5f74                	lw	a3,124(a4)
  3a:	6574                	flw	fa3,76(a0)
  3c:	632e7473          	csrrci	s0,0x632,28
  40:	6100                	flw	fs0,0(a0)
  42:	7272                	flw	ft4,60(sp)
  44:	7961                	lui	s2,0xffff8
  46:	0031                	c.nop	12
  48:	616d                	addi	sp,sp,240
  4a:	6e69                	lui	t3,0x1a
  4c:	6100                	flw	fs0,0(a0)
  4e:	7272                	flw	ft4,60(sp)
  50:	7961                	lui	s2,0xffff8
  52:	0032                	c.slli	zero,0xc
  54:	7261                	lui	tp,0xffff8
  56:	6172                	flw	ft2,28(sp)
  58:	3379                	jal	fffffde6 <_stack_start+0xfffefde6>
  5a:	6100                	flw	fs0,0(a0)
  5c:	7272                	flw	ft4,60(sp)
  5e:	7961                	lui	s2,0xffff8
  60:	735f 6275 6900      	0x69006275735f
  66:	736e                	flw	ft6,248(sp)
  68:	7274                	flw	fa3,100(a2)
  6a:	6d5f 646f 6c00      	0x6c00646f6d5f
  70:	20676e6f          	jal	t3,76276 <_stack_start+0x66276>
  74:	6f6c                	flw	fa1,92(a4)
  76:	676e                	flw	fa4,216(sp)
  78:	7520                	flw	fs0,104(a0)
  7a:	736e                	flw	ft6,248(sp)
  jal x0, default_exc_handler
  7c:	6769                	lui	a4,0x1a
  7e:	656e                	flw	fa0,216(sp)
  jal x0, reset_handler
  80:	2064                	fld	fs1,192(s0)
  82:	6e69                	lui	t3,0x1a
  jal x0, default_exc_handler
  84:	0074                	addi	a3,sp,12
  86:	7261                	lui	tp,0xffff8
  jal x0, default_exc_handler
  88:	6172                	flw	ft2,28(sp)
  8a:	5f79                	li	t5,-2
    asm volatile(
  8c:	7165                	addi	sp,sp,-400
  8e:	0075                	c.nop	29
}
  90:	6f6c                	flw	fa1,92(a4)
    for(i=0;i<(length/3);i++) {
  92:	676e                	flw	fa4,216(sp)
  94:	6c20                	flw	fs0,88(s0)
  96:	20676e6f          	jal	t3,7629c <_stack_start+0x6629c>
  9a:	6e69                	lui	t3,0x1a
  9c:	0074                	addi	a3,sp,12
  9e:	6d6f682f          	0x6d6f682f
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	2f65                	jal	85a <_bss_end+0x606>
  a4:	6c65                	lui	s8,0x19
    asm volatile(
  a6:	6669                	lui	a2,0x1a
  a8:	756e                	flw	fa0,248(sp)
  aa:	2f72                	fld	ft10,280(sp)
  ac:	6544                	flw	fs1,12(a0)
  ae:	6f746b73          	csrrsi	s6,0x6f7,8
    for(i=0;i<(length/3);i++) {
  b2:	2f70                	fld	fa2,216(a4)
    asm volatile(
  b4:	6269                	lui	tp,0x1a
  b6:	7865                	lui	a6,0xffff9
}
  b8:	765f 2f32 6269      	0x62692f32765f
    for(i=0;i<(length/3);i++) {
  be:	7865                	lui	a6,0xffff9
  c0:	6d2d                	lui	s10,0xb
  c2:	7361                	lui	t1,0xffff8
  c4:	6574                	flw	fa3,76(a0)
  c6:	2f72                	fld	ft10,280(sp)
}
  c8:	7865                	lui	a6,0xffff9
        instr_sub((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  ca:	6d61                	lui	s10,0x18
  cc:	6c70                	flw	fa2,92(s0)
    asm volatile(
  ce:	7365                	lui	t1,0xffff9
  d0:	2f77732f          	0x2f77732f
  d4:	74737563          	bgeu	t1,t2,81e <_bss_end+0x5ca>
    for(i=0;i<(length/3);i++) {
  d8:	745f 7365 0074      	0x747365745f
    asm volatile(
  de:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
    for(i=0;i<(length/3);i++) {
  e2:	20373143          	fmadd.s	ft2,fa4,ft3,ft4,rup
  e6:	2e39                	jal	404 <_bss_end+0x1b0>
  e8:	2e32                	fld	ft8,264(sp)
  ea:	2030                	fld	fa2,64(s0)
  ec:	6d2d                	lui	s10,0xb
  ee:	7261                	lui	tp,0xffff8
}
  f0:	723d6863          	bltu	s10,gp,820 <_bss_end+0x5cc>
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f4:	3376                	fld	ft6,376(sp)
    asm volatile(
  f6:	6932                	flw	fs2,12(sp)
  f8:	636d                	lui	t1,0x1b
  fa:	2d20                	fld	fs0,88(a0)
  fc:	616d                	addi	sp,sp,240
  fe:	6962                	flw	fs2,24(sp)
    for(i=0;i<(length/3);i++) {
 100:	693d                	lui	s2,0xf
 102:	706c                	flw	fa1,100(s0)
    asm volatile(
 104:	2d203233          	0x2d203233
}
 108:	636d                	lui	t1,0x1b
    for(i=0;i<(length/3);i++) {
 10a:	6f6d                	lui	t5,0x1b
 10c:	6564                	flw	fs1,76(a0)
 10e:	3d6c                	fld	fa1,248(a0)
    asm volatile(
 110:	656d                	lui	a0,0x1b
    for(i=0;i<(length/3);i++) {
 112:	6164                	flw	fs1,68(a0)
 114:	796e                	flw	fs2,248(sp)
 116:	2d20                	fld	fs0,88(a0)
}
 118:	746d                	lui	s0,0xffffb
    asm volatile(
 11a:	6e75                	lui	t3,0x1d
 11c:	3d65                	jal	ffffffd4 <_stack_start+0xfffeffd4>
 11e:	6f72                	flw	ft10,28(sp)
 120:	74656b63          	bltu	a0,t1,876 <_bss_end+0x622>
    for(i=0;i<(length/3);i++) {
 124:	2d20                	fld	fs0,88(a0)
 126:	4f2d2067          	0x4f2d2067
  jal x0, default_exc_handler
 12a:	662d2073          	csrs	0x662,s10
  mv  x1, x0
 12e:	6976                	flw	fs2,92(sp)
  mv  x2, x1
 130:	69626973          	csrrsi	s2,0x696,4
  mv  x4, x1
 134:	696c                	flw	fa1,84(a0)
  mv  x5, x1
 136:	7974                	flw	fa3,116(a0)
  mv  x6, x1
 138:	683d                	lui	a6,0xf
  mv  x7, x1
 13a:	6469                	lui	s0,0x1a
  mv  x8, x1
 13c:	6564                	flw	fs1,76(a0)
  mv  x9, x1
 13e:	006e                	c.slli	zero,0x1b
  mv x10, x1
 140:	6e69                	lui	t3,0x1a
  mv x11, x1
 142:	5f727473          	csrrci	s0,0x5f7,4
  mv x13, x1
 146:	00627573          	csrrci	a0,0x6,4
  mv x15, x1
 14a:	726f6873          	csrrsi	a6,0x726,30
  mv x17, x1
 14e:	2074                	fld	fa3,192(s0)
  mv x18, x1
 150:	6e69                	lui	t3,0x1a
  mv x19, x1
 152:	0074                	addi	a3,sp,12
  mv x20, x1
 154:	656c                	flw	fa1,76(a0)
  mv x21, x1
 156:	676e                	flw	fa4,216(sp)
  mv x22, x1
 158:	6874                	flw	fa3,84(s0)
  mv x23, x1
 15a:	6900                	flw	fs0,16(a0)
  mv x24, x1
 15c:	736e                	flw	ft6,248(sp)
  mv x25, x1
 15e:	7274                	flw	fa3,100(a2)
  mv x26, x1
 160:	655f 7571 6900      	0x69007571655f
  mv x29, x1
 166:	736e                	flw	ft6,248(sp)
  mv x30, x1
 168:	7274                	flw	fa3,100(a2)
  mv x31, x1
 16a:	615f 6464 6300      	0x63006464615f
  la   x2, _stack_start
 170:	7472                	flw	fs0,60(sp)
 172:	2e30                	fld	fa2,88(a2)
  la x26, _bss_start
 174:	4e470053          	0x4e470053
  la x27, _bss_end
 178:	2055                	jal	21c <_endtext+0xc>
 17a:	5341                	li	t1,-16
  bge x26, x27, zero_loop_end
 17c:	3220                	fld	fs0,96(a2)
 17e:	332e                	fld	ft6,232(sp)
  sw x0, 0(x26)
 180:	0032                	c.slli	zero,0xc

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <_bss_end+0x42c>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0022                	c.slli	zero,0x8
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	00b4                	addi	a3,sp,72
  3a:	0000                	unimp
  3c:	0006                	c.slli	zero,0x1
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	00ba                	slli	ra,ra,0xe
  4a:	0000                	unimp
  4c:	0022                	c.slli	zero,0x8
  4e:	0000                	unimp
  50:	000c                	0xc
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	00dc                	addi	a5,sp,68
  5a:	0000                	unimp
  5c:	0006                	c.slli	zero,0x1
  5e:	0000                	unimp
  60:	000c                	0xc
  62:	0000                	unimp
  64:	0000                	unimp
  66:	0000                	unimp
  68:	00e2                	slli	ra,ra,0x18
  6a:	0000                	unimp
  6c:	0022                	c.slli	zero,0x8
  6e:	0000                	unimp
  70:	000c                	0xc
  72:	0000                	unimp
  74:	0000                	unimp
  76:	0000                	unimp
  78:	0104                	addi	s1,sp,128
  7a:	0000                	unimp
  jal x0, default_exc_handler
  7c:	0006                	c.slli	zero,0x1
  7e:	0000                	unimp
  jal x0, reset_handler
  80:	000c                	0xc
  82:	0000                	unimp
  jal x0, default_exc_handler
  84:	0000                	unimp
  86:	0000                	unimp
  jal x0, default_exc_handler
  88:	010a                	slli	sp,sp,0x2
  8a:	0000                	unimp
    asm volatile(
  8c:	001e                	c.slli	zero,0x7
  8e:	0000                	unimp
}
  90:	0014                	0x14
    for(i=0;i<(length/3);i++) {
  92:	0000                	unimp
  94:	0000                	unimp
  96:	0000                	unimp
  98:	0196                	slli	gp,gp,0x5
  9a:	0000                	unimp
  9c:	0068                	addi	a0,sp,12
  9e:	0000                	unimp
}
  a0:	0e42                	slli	t3,t3,0x10
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	4410                	lw	a2,8(s0)
  a4:	0181                	addi	gp,gp,0
    asm volatile(
  a6:	0288                	addi	a0,sp,320
